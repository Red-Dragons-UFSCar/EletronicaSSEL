
Rx_M4_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012544  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  080127e8  080127e8  000137e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012c00  08012c00  000142f4  2**0
                  CONTENTS
  4 .ARM          00000008  08012c00  08012c00  00013c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012c08  08012c08  000142f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012c08  08012c08  00013c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012c0c  08012c0c  00013c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002f4  24000000  08012c10  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023e0  240002f4  08012f04  000142f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240026d4  08012f04  000146d4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000142f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002442c  00000000  00000000  00014322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e22  00000000  00000000  0003874e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b18  00000000  00000000  0003d570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014cc  00000000  00000000  0003f088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000400ba  00000000  00000000  00040554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028034  00000000  00000000  0008060e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018e45f  00000000  00000000  000a8642  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00236aa1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000808c  00000000  00000000  00236ae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0023eb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002f4 	.word	0x240002f4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080127cc 	.word	0x080127cc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002f8 	.word	0x240002f8
 80002dc:	080127cc 	.word	0x080127cc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3d      	ldr	r3, [pc, #244]	@ (800077c <SystemInit+0xfc>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800068a:	4a3c      	ldr	r2, [pc, #240]	@ (800077c <SystemInit+0xfc>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b39      	ldr	r3, [pc, #228]	@ (800077c <SystemInit+0xfc>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a38      	ldr	r2, [pc, #224]	@ (800077c <SystemInit+0xfc>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b37      	ldr	r3, [pc, #220]	@ (8000780 <SystemInit+0x100>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b34      	ldr	r3, [pc, #208]	@ (8000780 <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a32      	ldr	r2, [pc, #200]	@ (8000780 <SystemInit+0x100>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b31      	ldr	r3, [pc, #196]	@ (8000784 <SystemInit+0x104>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a30      	ldr	r2, [pc, #192]	@ (8000784 <SystemInit+0x104>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000784 <SystemInit+0x104>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000784 <SystemInit+0x104>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492c      	ldr	r1, [pc, #176]	@ (8000784 <SystemInit+0x104>)
 80006d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000788 <SystemInit+0x108>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <SystemInit+0x100>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 0308 	and.w	r3, r3, #8
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d007      	beq.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a24      	ldr	r2, [pc, #144]	@ (8000780 <SystemInit+0x100>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <SystemInit+0x104>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <SystemInit+0x104>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <SystemInit+0x104>)
 800070a:	4a20      	ldr	r2, [pc, #128]	@ (800078c <SystemInit+0x10c>)
 800070c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <SystemInit+0x104>)
 8000710:	4a1f      	ldr	r2, [pc, #124]	@ (8000790 <SystemInit+0x110>)
 8000712:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <SystemInit+0x104>)
 8000716:	4a1f      	ldr	r2, [pc, #124]	@ (8000794 <SystemInit+0x114>)
 8000718:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <SystemInit+0x104>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <SystemInit+0x104>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	@ (8000794 <SystemInit+0x114>)
 8000724:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <SystemInit+0x104>)
 800072e:	4a19      	ldr	r2, [pc, #100]	@ (8000794 <SystemInit+0x114>)
 8000730:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <SystemInit+0x104>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	@ (8000784 <SystemInit+0x104>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <SystemInit+0x104>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <SystemInit+0x118>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800074e:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <SystemInit+0x118>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000754:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <SystemInit+0x11c>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <SystemInit+0x120>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <SystemInit+0x124>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <SystemInit+0x128>)
 800076c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000770:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	52002000 	.word	0x52002000
 8000784:	58024400 	.word	0x58024400
 8000788:	eaf6ed7f 	.word	0xeaf6ed7f
 800078c:	02020200 	.word	0x02020200
 8000790:	01ff0000 	.word	0x01ff0000
 8000794:	01010280 	.word	0x01010280
 8000798:	580000c0 	.word	0x580000c0
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007b2:	4b19      	ldr	r3, [pc, #100]	@ (8000818 <MX_DMA_Init+0x6c>)
 80007b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80007b8:	4a17      	ldr	r2, [pc, #92]	@ (8000818 <MX_DMA_Init+0x6c>)
 80007ba:	f043 0301 	orr.w	r3, r3, #1
 80007be:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80007c2:	4b15      	ldr	r3, [pc, #84]	@ (8000818 <MX_DMA_Init+0x6c>)
 80007c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80007c8:	f003 0301 	and.w	r3, r3, #1
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2100      	movs	r1, #0
 80007d4:	200c      	movs	r0, #12
 80007d6:	f002 f880 	bl	80028da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80007da:	200c      	movs	r0, #12
 80007dc:	f002 f897 	bl	800290e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2100      	movs	r1, #0
 80007e4:	200e      	movs	r0, #14
 80007e6:	f002 f878 	bl	80028da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80007ea:	200e      	movs	r0, #14
 80007ec:	f002 f88f 	bl	800290e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2100      	movs	r1, #0
 80007f4:	200f      	movs	r0, #15
 80007f6:	f002 f870 	bl	80028da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80007fa:	200f      	movs	r0, #15
 80007fc:	f002 f887 	bl	800290e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000800:	2200      	movs	r2, #0
 8000802:	2100      	movs	r1, #0
 8000804:	2010      	movs	r0, #16
 8000806:	f002 f868 	bl	80028da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800080a:	2010      	movs	r0, #16
 800080c:	f002 f87f 	bl	800290e <HAL_NVIC_EnableIRQ>

}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	58024400 	.word	0x58024400

0800081c <dshot_init>:
static void dshot_enable_dma_request();


/* Functions */
void dshot_init(dshot_type_e dshot_type)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
	dshot_set_timer(dshot_type);
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	4618      	mov	r0, r3
 800082a:	f000 f833 	bl	8000894 <dshot_set_timer>
	dshot_put_tc_callback_function();
 800082e:	f000 f8d3 	bl	80009d8 <dshot_put_tc_callback_function>
	dshot_start_pwm();
 8000832:	f000 f8ef 	bl	8000a14 <dshot_start_pwm>
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <dshot_write>:

void dshot_write(uint16_t* motor_value)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b082      	sub	sp, #8
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer_all(motor_value);
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f000 f962 	bl	8000b10 <dshot_prepare_dmabuffer_all>
	dshot_dma_start();
 800084c:	f000 f98c 	bl	8000b68 <dshot_dma_start>
	dshot_enable_dma_request();
 8000850:	f000 f9c2 	bl	8000bd8 <dshot_enable_dma_request>
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <dshot_choose_type>:


/* Static functions */
static uint32_t dshot_choose_type(dshot_type_e dshot_type)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
	switch (dshot_type)
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d003      	beq.n	8000874 <dshot_choose_type+0x18>
 800086c:	2b02      	cmp	r3, #2
 800086e:	d103      	bne.n	8000878 <dshot_choose_type+0x1c>
	{
		case(DSHOT600):
				return DSHOT600_HZ;
 8000870:	4b05      	ldr	r3, [pc, #20]	@ (8000888 <dshot_choose_type+0x2c>)
 8000872:	e002      	b.n	800087a <dshot_choose_type+0x1e>

		case(DSHOT300):
				return DSHOT300_HZ;
 8000874:	4b05      	ldr	r3, [pc, #20]	@ (800088c <dshot_choose_type+0x30>)
 8000876:	e000      	b.n	800087a <dshot_choose_type+0x1e>

		default:
		case(DSHOT150):
				return DSHOT150_HZ;
 8000878:	4b05      	ldr	r3, [pc, #20]	@ (8000890 <dshot_choose_type+0x34>)
	}
}
 800087a:	4618      	mov	r0, r3
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	00b71b00 	.word	0x00b71b00
 800088c:	005b8d80 	.word	0x005b8d80
 8000890:	002dc6c0 	.word	0x002dc6c0

08000894 <dshot_set_timer>:

static void dshot_set_timer(dshot_type_e dshot_type)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	ed2d 8b02 	vpush	{d8}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
	uint16_t dshot_prescaler;
	uint32_t timer_clock = TIMER_CLOCK; // all timer clock is same as SystemCoreClock in stm32f411
 80008a2:	4b27      	ldr	r3, [pc, #156]	@ (8000940 <dshot_set_timer+0xac>)
 80008a4:	60fb      	str	r3, [r7, #12]

	// Calculate prescaler by dshot type
	dshot_prescaler = lrintf((float) timer_clock / dshot_choose_type(dshot_type) + 0.01f) - 1;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	ee07 3a90 	vmov	s15, r3
 80008ac:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff ffd2 	bl	800085c <dshot_choose_type>
 80008b8:	ee07 0a90 	vmov	s15, r0
 80008bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80008c0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80008c4:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000944 <dshot_set_timer+0xb0>
 80008c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80008cc:	eeb0 0a67 	vmov.f32	s0, s15
 80008d0:	f011 ff3c 	bl	801274c <lrintf>
 80008d4:	4603      	mov	r3, r0
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	3b01      	subs	r3, #1
 80008da:	817b      	strh	r3, [r7, #10]

	// motor1
	__HAL_TIM_SET_PRESCALER(MOTOR_1_TIM, dshot_prescaler);
 80008dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000948 <dshot_set_timer+0xb4>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	897a      	ldrh	r2, [r7, #10]
 80008e2:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_1_TIM, MOTOR_BITLENGTH);
 80008e4:	4b18      	ldr	r3, [pc, #96]	@ (8000948 <dshot_set_timer+0xb4>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2214      	movs	r2, #20
 80008ea:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008ec:	4b16      	ldr	r3, [pc, #88]	@ (8000948 <dshot_set_timer+0xb4>)
 80008ee:	2214      	movs	r2, #20
 80008f0:	60da      	str	r2, [r3, #12]

	// motor2
	__HAL_TIM_SET_PRESCALER(MOTOR_2_TIM, dshot_prescaler);
 80008f2:	4b16      	ldr	r3, [pc, #88]	@ (800094c <dshot_set_timer+0xb8>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	897a      	ldrh	r2, [r7, #10]
 80008f8:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_2_TIM, MOTOR_BITLENGTH);
 80008fa:	4b14      	ldr	r3, [pc, #80]	@ (800094c <dshot_set_timer+0xb8>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2214      	movs	r2, #20
 8000900:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000902:	4b12      	ldr	r3, [pc, #72]	@ (800094c <dshot_set_timer+0xb8>)
 8000904:	2214      	movs	r2, #20
 8000906:	60da      	str	r2, [r3, #12]

	// motor3
	__HAL_TIM_SET_PRESCALER(MOTOR_3_TIM, dshot_prescaler);
 8000908:	4b10      	ldr	r3, [pc, #64]	@ (800094c <dshot_set_timer+0xb8>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	897a      	ldrh	r2, [r7, #10]
 800090e:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_3_TIM, MOTOR_BITLENGTH);
 8000910:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <dshot_set_timer+0xb8>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2214      	movs	r2, #20
 8000916:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000918:	4b0c      	ldr	r3, [pc, #48]	@ (800094c <dshot_set_timer+0xb8>)
 800091a:	2214      	movs	r2, #20
 800091c:	60da      	str	r2, [r3, #12]

	// motor4
	__HAL_TIM_SET_PRESCALER(MOTOR_4_TIM, dshot_prescaler);
 800091e:	4b0a      	ldr	r3, [pc, #40]	@ (8000948 <dshot_set_timer+0xb4>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	897a      	ldrh	r2, [r7, #10]
 8000924:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_4_TIM, MOTOR_BITLENGTH);
 8000926:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <dshot_set_timer+0xb4>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2214      	movs	r2, #20
 800092c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800092e:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <dshot_set_timer+0xb4>)
 8000930:	2214      	movs	r2, #20
 8000932:	60da      	str	r2, [r3, #12]
}
 8000934:	bf00      	nop
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	ecbd 8b02 	vpop	{d8}
 800093e:	bd80      	pop	{r7, pc}
 8000940:	0bebc200 	.word	0x0bebc200
 8000944:	3c23d70a 	.word	0x3c23d70a
 8000948:	2400063c 	.word	0x2400063c
 800094c:	24000558 	.word	0x24000558

08000950 <dshot_dma_tc_callback>:

// __HAL_TIM_DISABLE_DMA is needed to eliminate the delay between different dshot signals
// I don't know why :(
static void dshot_dma_tc_callback(DMA_HandleTypeDef *hdma)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800095c:	60fb      	str	r3, [r7, #12]

	if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	429a      	cmp	r2, r3
 8000966:	d108      	bne.n	800097a <dshot_dma_tc_callback+0x2a>
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	68da      	ldr	r2, [r3, #12]
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000976:	60da      	str	r2, [r3, #12]
	}
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
	}
}
 8000978:	e028      	b.n	80009cc <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC2])
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	429a      	cmp	r2, r3
 8000982:	d108      	bne.n	8000996 <dshot_dma_tc_callback+0x46>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	68da      	ldr	r2, [r3, #12]
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000992:	60da      	str	r2, [r3, #12]
}
 8000994:	e01a      	b.n	80009cc <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC3])
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	429a      	cmp	r2, r3
 800099e:	d108      	bne.n	80009b2 <dshot_dma_tc_callback+0x62>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	68da      	ldr	r2, [r3, #12]
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80009ae:	60da      	str	r2, [r3, #12]
}
 80009b0:	e00c      	b.n	80009cc <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d107      	bne.n	80009cc <dshot_dma_tc_callback+0x7c>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	68da      	ldr	r2, [r3, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80009ca:	60da      	str	r2, [r3, #12]
}
 80009cc:	bf00      	nop
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <dshot_put_tc_callback_function>:

static void dshot_put_tc_callback_function()
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
	// TIM_DMA_ID_CCx depends on timer channel
	MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = dshot_dma_tc_callback;
 80009dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000a08 <dshot_put_tc_callback_function+0x30>)
 80009de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e0:	4a0a      	ldr	r2, [pc, #40]	@ (8000a0c <dshot_put_tc_callback_function+0x34>)
 80009e2:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = dshot_dma_tc_callback;
 80009e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000a10 <dshot_put_tc_callback_function+0x38>)
 80009e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009e8:	4a08      	ldr	r2, [pc, #32]	@ (8000a0c <dshot_put_tc_callback_function+0x34>)
 80009ea:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dshot_dma_tc_callback;
 80009ec:	4b08      	ldr	r3, [pc, #32]	@ (8000a10 <dshot_put_tc_callback_function+0x38>)
 80009ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009f0:	4a06      	ldr	r2, [pc, #24]	@ (8000a0c <dshot_put_tc_callback_function+0x34>)
 80009f2:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = dshot_dma_tc_callback;
 80009f4:	4b04      	ldr	r3, [pc, #16]	@ (8000a08 <dshot_put_tc_callback_function+0x30>)
 80009f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009f8:	4a04      	ldr	r2, [pc, #16]	@ (8000a0c <dshot_put_tc_callback_function+0x34>)
 80009fa:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	2400063c 	.word	0x2400063c
 8000a0c:	08000951 	.word	0x08000951
 8000a10:	24000558 	.word	0x24000558

08000a14 <dshot_start_pwm>:

static void dshot_start_pwm()
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	// Start the timer channel now.
    // Enabling/disabling DMA request can restart a new cycle without PWM start/stop.
  	HAL_TIM_PWM_Start(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL);
 8000a18:	210c      	movs	r1, #12
 8000a1a:	4808      	ldr	r0, [pc, #32]	@ (8000a3c <dshot_start_pwm+0x28>)
 8000a1c:	f008 fd42 	bl	80094a4 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL);
 8000a20:	2108      	movs	r1, #8
 8000a22:	4807      	ldr	r0, [pc, #28]	@ (8000a40 <dshot_start_pwm+0x2c>)
 8000a24:	f008 fd3e 	bl	80094a4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL);
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4805      	ldr	r0, [pc, #20]	@ (8000a40 <dshot_start_pwm+0x2c>)
 8000a2c:	f008 fd3a 	bl	80094a4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL);
 8000a30:	2104      	movs	r1, #4
 8000a32:	4802      	ldr	r0, [pc, #8]	@ (8000a3c <dshot_start_pwm+0x28>)
 8000a34:	f008 fd36 	bl	80094a4 <HAL_TIM_PWM_Start>
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	2400063c 	.word	0x2400063c
 8000a40:	24000558 	.word	0x24000558

08000a44 <dshot_prepare_packet>:

static uint16_t dshot_prepare_packet(uint16_t value)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b087      	sub	sp, #28
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	80fb      	strh	r3, [r7, #6]
	uint16_t packet;
	bool dshot_telemetry = false;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	72fb      	strb	r3, [r7, #11]

	packet = (value << 1) | (dshot_telemetry ? 1 : 0);
 8000a52:	88fb      	ldrh	r3, [r7, #6]
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	b21a      	sxth	r2, r3
 8000a58:	7afb      	ldrb	r3, [r7, #11]
 8000a5a:	b21b      	sxth	r3, r3
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	b21b      	sxth	r3, r3
 8000a60:	813b      	strh	r3, [r7, #8]

	// compute checksum
	unsigned csum = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
	unsigned csum_data = packet;
 8000a66:	893b      	ldrh	r3, [r7, #8]
 8000a68:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < 3; i++)
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	e009      	b.n	8000a84 <dshot_prepare_packet+0x40>
	{
        csum ^=  csum_data; // xor data by nibbles
 8000a70:	697a      	ldr	r2, [r7, #20]
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	4053      	eors	r3, r2
 8000a76:	617b      	str	r3, [r7, #20]
        csum_data >>= 4;
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	091b      	lsrs	r3, r3, #4
 8000a7c:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 3; i++)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	3301      	adds	r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	2b02      	cmp	r3, #2
 8000a88:	ddf2      	ble.n	8000a70 <dshot_prepare_packet+0x2c>
	}

	csum &= 0xf;
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	f003 030f 	and.w	r3, r3, #15
 8000a90:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 8000a92:	893b      	ldrh	r3, [r7, #8]
 8000a94:	011b      	lsls	r3, r3, #4
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	813b      	strh	r3, [r7, #8]

	return packet;
 8000aa0:	893b      	ldrh	r3, [r7, #8]
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	371c      	adds	r7, #28
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <dshot_prepare_dmabuffer>:

// Convert 16 bits packet to 16 pwm signal
static void dshot_prepare_dmabuffer(uint32_t* motor_dmabuffer, uint16_t value)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b084      	sub	sp, #16
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	807b      	strh	r3, [r7, #2]
	uint16_t packet;
	packet = dshot_prepare_packet(value);
 8000aba:	887b      	ldrh	r3, [r7, #2]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff ffc1 	bl	8000a44 <dshot_prepare_packet>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	81fb      	strh	r3, [r7, #14]

	for(int i = 0; i < 16; i++)
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	e011      	b.n	8000af0 <dshot_prepare_dmabuffer+0x42>
	{
		motor_dmabuffer[i] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;
 8000acc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	da01      	bge.n	8000ad8 <dshot_prepare_dmabuffer+0x2a>
 8000ad4:	220e      	movs	r2, #14
 8000ad6:	e000      	b.n	8000ada <dshot_prepare_dmabuffer+0x2c>
 8000ad8:	2207      	movs	r2, #7
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	6879      	ldr	r1, [r7, #4]
 8000ae0:	440b      	add	r3, r1
 8000ae2:	601a      	str	r2, [r3, #0]
		packet <<= 1;
 8000ae4:	89fb      	ldrh	r3, [r7, #14]
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < 16; i++)
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	3301      	adds	r3, #1
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	2b0f      	cmp	r3, #15
 8000af4:	ddea      	ble.n	8000acc <dshot_prepare_dmabuffer+0x1e>
	}

	motor_dmabuffer[16] = 0;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	3340      	adds	r3, #64	@ 0x40
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
	motor_dmabuffer[17] = 0;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	3344      	adds	r3, #68	@ 0x44
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
}
 8000b06:	bf00      	nop
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <dshot_prepare_dmabuffer_all>:

static void dshot_prepare_dmabuffer_all(uint16_t* motor_value)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer(motor1_dmabuffer, motor_value[0]);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	881b      	ldrh	r3, [r3, #0]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	480e      	ldr	r0, [pc, #56]	@ (8000b58 <dshot_prepare_dmabuffer_all+0x48>)
 8000b20:	f7ff ffc5 	bl	8000aae <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor2_dmabuffer, motor_value[1]);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3302      	adds	r3, #2
 8000b28:	881b      	ldrh	r3, [r3, #0]
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	480b      	ldr	r0, [pc, #44]	@ (8000b5c <dshot_prepare_dmabuffer_all+0x4c>)
 8000b2e:	f7ff ffbe 	bl	8000aae <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor3_dmabuffer, motor_value[2]);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	3304      	adds	r3, #4
 8000b36:	881b      	ldrh	r3, [r3, #0]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4809      	ldr	r0, [pc, #36]	@ (8000b60 <dshot_prepare_dmabuffer_all+0x50>)
 8000b3c:	f7ff ffb7 	bl	8000aae <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor4_dmabuffer, motor_value[3]);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3306      	adds	r3, #6
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	4619      	mov	r1, r3
 8000b48:	4806      	ldr	r0, [pc, #24]	@ (8000b64 <dshot_prepare_dmabuffer_all+0x54>)
 8000b4a:	f7ff ffb0 	bl	8000aae <dshot_prepare_dmabuffer>
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	24000310 	.word	0x24000310
 8000b5c:	24000358 	.word	0x24000358
 8000b60:	240003a0 	.word	0x240003a0
 8000b64:	240003e8 	.word	0x240003e8

08000b68 <dshot_dma_start>:

static void dshot_dma_start()
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
	HAL_DMA_Start_IT(MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4], (uint32_t)motor1_dmabuffer, (uint32_t)&MOTOR_1_TIM->Instance->CCR4, DSHOT_DMA_BUFFER_SIZE);
 8000b6c:	4b14      	ldr	r3, [pc, #80]	@ (8000bc0 <dshot_dma_start+0x58>)
 8000b6e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000b70:	4914      	ldr	r1, [pc, #80]	@ (8000bc4 <dshot_dma_start+0x5c>)
 8000b72:	4b13      	ldr	r3, [pc, #76]	@ (8000bc0 <dshot_dma_start+0x58>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	3340      	adds	r3, #64	@ 0x40
 8000b78:	461a      	mov	r2, r3
 8000b7a:	2312      	movs	r3, #18
 8000b7c:	f002 fa52 	bl	8003024 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3], (uint32_t)motor2_dmabuffer, (uint32_t)&MOTOR_2_TIM->Instance->CCR3, DSHOT_DMA_BUFFER_SIZE);
 8000b80:	4b11      	ldr	r3, [pc, #68]	@ (8000bc8 <dshot_dma_start+0x60>)
 8000b82:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8000b84:	4911      	ldr	r1, [pc, #68]	@ (8000bcc <dshot_dma_start+0x64>)
 8000b86:	4b10      	ldr	r3, [pc, #64]	@ (8000bc8 <dshot_dma_start+0x60>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	333c      	adds	r3, #60	@ 0x3c
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	2312      	movs	r3, #18
 8000b90:	f002 fa48 	bl	8003024 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1], (uint32_t)motor3_dmabuffer, (uint32_t)&MOTOR_3_TIM->Instance->CCR1, DSHOT_DMA_BUFFER_SIZE);
 8000b94:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc8 <dshot_dma_start+0x60>)
 8000b96:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8000b98:	490d      	ldr	r1, [pc, #52]	@ (8000bd0 <dshot_dma_start+0x68>)
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc8 <dshot_dma_start+0x60>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	3334      	adds	r3, #52	@ 0x34
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	2312      	movs	r3, #18
 8000ba4:	f002 fa3e 	bl	8003024 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2], (uint32_t)motor4_dmabuffer, (uint32_t)&MOTOR_4_TIM->Instance->CCR2, DSHOT_DMA_BUFFER_SIZE);
 8000ba8:	4b05      	ldr	r3, [pc, #20]	@ (8000bc0 <dshot_dma_start+0x58>)
 8000baa:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000bac:	4909      	ldr	r1, [pc, #36]	@ (8000bd4 <dshot_dma_start+0x6c>)
 8000bae:	4b04      	ldr	r3, [pc, #16]	@ (8000bc0 <dshot_dma_start+0x58>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	3338      	adds	r3, #56	@ 0x38
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	2312      	movs	r3, #18
 8000bb8:	f002 fa34 	bl	8003024 <HAL_DMA_Start_IT>
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	2400063c 	.word	0x2400063c
 8000bc4:	24000310 	.word	0x24000310
 8000bc8:	24000558 	.word	0x24000558
 8000bcc:	24000358 	.word	0x24000358
 8000bd0:	240003a0 	.word	0x240003a0
 8000bd4:	240003e8 	.word	0x240003e8

08000bd8 <dshot_enable_dma_request>:

static void dshot_enable_dma_request()
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE_DMA(MOTOR_1_TIM, TIM_DMA_CC4);
 8000bdc:	4b12      	ldr	r3, [pc, #72]	@ (8000c28 <dshot_enable_dma_request+0x50>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	68da      	ldr	r2, [r3, #12]
 8000be2:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <dshot_enable_dma_request+0x50>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000bea:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_2_TIM, TIM_DMA_CC3);
 8000bec:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <dshot_enable_dma_request+0x54>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	68da      	ldr	r2, [r3, #12]
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c2c <dshot_enable_dma_request+0x54>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000bfa:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_3_TIM, TIM_DMA_CC1);
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000c2c <dshot_enable_dma_request+0x54>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	68da      	ldr	r2, [r3, #12]
 8000c02:	4b0a      	ldr	r3, [pc, #40]	@ (8000c2c <dshot_enable_dma_request+0x54>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000c0a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_4_TIM, TIM_DMA_CC2);
 8000c0c:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <dshot_enable_dma_request+0x50>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	68da      	ldr	r2, [r3, #12]
 8000c12:	4b05      	ldr	r3, [pc, #20]	@ (8000c28 <dshot_enable_dma_request+0x50>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000c1a:	60da      	str	r2, [r3, #12]
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	2400063c 	.word	0x2400063c
 8000c2c:	24000558 	.word	0x24000558

08000c30 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b087      	sub	sp, #28
 8000c34:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	4b28      	ldr	r3, [pc, #160]	@ (8000cd8 <MX_GPIO_Init+0xa8>)
 8000c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c3c:	4a26      	ldr	r2, [pc, #152]	@ (8000cd8 <MX_GPIO_Init+0xa8>)
 8000c3e:	f043 0301 	orr.w	r3, r3, #1
 8000c42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c46:	4b24      	ldr	r3, [pc, #144]	@ (8000cd8 <MX_GPIO_Init+0xa8>)
 8000c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	617b      	str	r3, [r7, #20]
 8000c52:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c54:	4b20      	ldr	r3, [pc, #128]	@ (8000cd8 <MX_GPIO_Init+0xa8>)
 8000c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c5a:	4a1f      	ldr	r2, [pc, #124]	@ (8000cd8 <MX_GPIO_Init+0xa8>)
 8000c5c:	f043 0310 	orr.w	r3, r3, #16
 8000c60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c64:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd8 <MX_GPIO_Init+0xa8>)
 8000c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c6a:	f003 0310 	and.w	r3, r3, #16
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c72:	4b19      	ldr	r3, [pc, #100]	@ (8000cd8 <MX_GPIO_Init+0xa8>)
 8000c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c78:	4a17      	ldr	r2, [pc, #92]	@ (8000cd8 <MX_GPIO_Init+0xa8>)
 8000c7a:	f043 0308 	orr.w	r3, r3, #8
 8000c7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c82:	4b15      	ldr	r3, [pc, #84]	@ (8000cd8 <MX_GPIO_Init+0xa8>)
 8000c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c88:	f003 0308 	and.w	r3, r3, #8
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c90:	4b11      	ldr	r3, [pc, #68]	@ (8000cd8 <MX_GPIO_Init+0xa8>)
 8000c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c96:	4a10      	ldr	r2, [pc, #64]	@ (8000cd8 <MX_GPIO_Init+0xa8>)
 8000c98:	f043 0304 	orr.w	r3, r3, #4
 8000c9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd8 <MX_GPIO_Init+0xa8>)
 8000ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca6:	f003 0304 	and.w	r3, r3, #4
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cae:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd8 <MX_GPIO_Init+0xa8>)
 8000cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb4:	4a08      	ldr	r2, [pc, #32]	@ (8000cd8 <MX_GPIO_Init+0xa8>)
 8000cb6:	f043 0302 	orr.w	r3, r3, #2
 8000cba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cbe:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <MX_GPIO_Init+0xa8>)
 8000cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc4:	f003 0302 	and.w	r3, r3, #2
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	687b      	ldr	r3, [r7, #4]

}
 8000ccc:	bf00      	nop
 8000cce:	371c      	adds	r7, #28
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	58024400 	.word	0x58024400

08000cdc <HAL_TIM_IC_CaptureCallback>:
		}
		xfr_ptr->sts_4to7 = 0; // M4 to M7 buffer is empty
	}
	return buffer; // return the buffer (pointer)
}
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	contador = __HAL_TIM_GET_COUNTER(&htim4);
 8000ce4:	4b05      	ldr	r3, [pc, #20]	@ (8000cfc <HAL_TIM_IC_CaptureCallback+0x20>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cea:	4a05      	ldr	r2, [pc, #20]	@ (8000d00 <HAL_TIM_IC_CaptureCallback+0x24>)
 8000cec:	6013      	str	r3, [r2, #0]
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	240005f0 	.word	0x240005f0
 8000d00:	24000440 	.word	0x24000440

08000d04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b0a6      	sub	sp, #152	@ 0x98
 8000d08:	af06      	add	r7, sp, #24
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000d0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000d10:	bf00      	nop
 8000d12:	4b84      	ldr	r3, [pc, #528]	@ (8000f24 <main+0x220>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d004      	beq.n	8000d28 <main+0x24>
 8000d1e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000d20:	1e5a      	subs	r2, r3, #1
 8000d22:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	dcf4      	bgt.n	8000d12 <main+0xe>
  if ( timeout < 0 )
 8000d28:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	da01      	bge.n	8000d32 <main+0x2e>
  {
  Error_Handler();
 8000d2e:	f000 f995 	bl	800105c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d32:	f001 fc35 	bl	80025a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d36:	f000 f911 	bl	8000f5c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000d3a:	4b7a      	ldr	r3, [pc, #488]	@ (8000f24 <main+0x220>)
 8000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d40:	4a78      	ldr	r2, [pc, #480]	@ (8000f24 <main+0x220>)
 8000d42:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d4a:	4b76      	ldr	r3, [pc, #472]	@ (8000f24 <main+0x220>)
 8000d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d54:	603b      	str	r3, [r7, #0]
 8000d56:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f004 f933 	bl	8004fc4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000d5e:	2100      	movs	r1, #0
 8000d60:	2000      	movs	r0, #0
 8000d62:	f004 f949 	bl	8004ff8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000d66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000d6c:	bf00      	nop
 8000d6e:	4b6d      	ldr	r3, [pc, #436]	@ (8000f24 <main+0x220>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d104      	bne.n	8000d84 <main+0x80>
 8000d7a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000d7c:	1e5a      	subs	r2, r3, #1
 8000d7e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	dcf4      	bgt.n	8000d6e <main+0x6a>
if ( timeout < 0 )
 8000d84:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	da01      	bge.n	8000d8e <main+0x8a>
{
Error_Handler();
 8000d8a:	f000 f967 	bl	800105c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d8e:	f7ff ff4f 	bl	8000c30 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d92:	f7ff fd0b 	bl	80007ac <MX_DMA_Init>
  MX_TIM2_Init();
 8000d96:	f000 fd2d 	bl	80017f4 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000d9a:	f000 fe3b 	bl	8001a14 <MX_TIM5_Init>
  MX_TIM3_Init();
 8000d9e:	f000 fd8d 	bl	80018bc <MX_TIM3_Init>
  MX_TIM4_Init();
 8000da2:	f000 fde1 	bl	8001968 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8000da6:	f00e f9c7 	bl	800f138 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000daa:	f000 fcc9 	bl	8001740 <MX_TIM1_Init>
  MX_TIM8_Init();
 8000dae:	f000 fe95 	bl	8001adc <MX_TIM8_Init>
  MX_TIM15_Init();
 8000db2:	f000 feed 	bl	8001b90 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  int count = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	67bb      	str	r3, [r7, #120]	@ 0x78
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000dba:	213c      	movs	r1, #60	@ 0x3c
 8000dbc:	485a      	ldr	r0, [pc, #360]	@ (8000f28 <main+0x224>)
 8000dbe:	f008 fd25 	bl	800980c <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8000dc2:	213c      	movs	r1, #60	@ 0x3c
 8000dc4:	4859      	ldr	r0, [pc, #356]	@ (8000f2c <main+0x228>)
 8000dc6:	f008 fd21 	bl	800980c <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 8000dca:	213c      	movs	r1, #60	@ 0x3c
 8000dcc:	4858      	ldr	r0, [pc, #352]	@ (8000f30 <main+0x22c>)
 8000dce:	f008 fd1d 	bl	800980c <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8000dd2:	213c      	movs	r1, #60	@ 0x3c
 8000dd4:	4857      	ldr	r0, [pc, #348]	@ (8000f34 <main+0x230>)
 8000dd6:	f008 fd19 	bl	800980c <HAL_TIM_Encoder_Start_IT>
	uint8_t * xfr_data; // pointer to transfer data


	//initialize inter-core status pointers
	xfr_ptr->sts_4to7 = 0;
 8000dda:	4b57      	ldr	r3, [pc, #348]	@ (8000f38 <main+0x234>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	701a      	strb	r2, [r3, #0]
	xfr_ptr->sts_7to4 = 0;
 8000de0:	4b55      	ldr	r3, [pc, #340]	@ (8000f38 <main+0x234>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	705a      	strb	r2, [r3, #1]
	extern uint16_t D[4];

	dshot_init(DSHOT300);
 8000de6:	2001      	movs	r0, #1
 8000de8:	f7ff fd18 	bl	800081c <dshot_init>
	  if (HAL_TIM_Base_Start_IT(&htim15) != HAL_OK)
 8000dec:	4853      	ldr	r0, [pc, #332]	@ (8000f3c <main+0x238>)
 8000dee:	f008 fa89 	bl	8009304 <HAL_TIM_Base_Start_IT>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <main+0xf8>
	    {
	      /* Starting Error */
	      Error_Handler();
 8000df8:	f000 f930 	bl	800105c <Error_Handler>
	    }
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f001 f9eb 	bl	80021d8 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000e02:	2001      	movs	r0, #1
 8000e04:	f001 f9e8 	bl	80021d8 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000e08:	2002      	movs	r0, #2
 8000e0a:	f001 f9e5 	bl	80021d8 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000e0e:	2101      	movs	r1, #1
 8000e10:	2000      	movs	r0, #0
 8000e12:	f001 fa57 	bl	80022c4 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000e16:	4b4a      	ldr	r3, [pc, #296]	@ (8000f40 <main+0x23c>)
 8000e18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e1c:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000e1e:	4b48      	ldr	r3, [pc, #288]	@ (8000f40 <main+0x23c>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000e24:	4b46      	ldr	r3, [pc, #280]	@ (8000f40 <main+0x23c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000e2a:	4b45      	ldr	r3, [pc, #276]	@ (8000f40 <main+0x23c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000e30:	4b43      	ldr	r3, [pc, #268]	@ (8000f40 <main+0x23c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000e36:	4942      	ldr	r1, [pc, #264]	@ (8000f40 <main+0x23c>)
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f001 fad3 	bl	80023e4 <BSP_COM_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <main+0x144>
  {
    Error_Handler();
 8000e44:	f000 f90a 	bl	800105c <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char message[100]={'\0'};
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
 8000e4c:	f107 0318 	add.w	r3, r7, #24
 8000e50:	2260      	movs	r2, #96	@ 0x60
 8000e52:	2100      	movs	r1, #0
 8000e54:	4618      	mov	r0, r3
 8000e56:	f00f fc1c 	bl	8010692 <memset>
  uint16_t zero[4] = {0,0,0,0};
 8000e5a:	f107 030c 	add.w	r3, r7, #12
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
  uint16_t bi[4] = {2045,0,0,0};
 8000e64:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 8000e68:	80bb      	strh	r3, [r7, #4]
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	80fb      	strh	r3, [r7, #6]
 8000e6e:	2300      	movs	r3, #0
 8000e70:	813b      	strh	r3, [r7, #8]
 8000e72:	2300      	movs	r3, #0
 8000e74:	817b      	strh	r3, [r7, #10]
	  	  for(int n=0;n<4;n++){
	  		  motores[n] = (Mensagem[n]*2048)/255;

	  	  }
	  	  */
	  	  motores[0]=0;
 8000e76:	4b33      	ldr	r3, [pc, #204]	@ (8000f44 <main+0x240>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	801a      	strh	r2, [r3, #0]
	  	  if(count<5000){
 8000e7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000e7e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000e82:	4293      	cmp	r3, r2
 8000e84:	dc09      	bgt.n	8000e9a <main+0x196>
	  		  ref[0] = 0;
 8000e86:	4b30      	ldr	r3, [pc, #192]	@ (8000f48 <main+0x244>)
 8000e88:	f04f 0200 	mov.w	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
	  		dshot_write(zero);
 8000e8e:	f107 030c 	add.w	r3, r7, #12
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff fcd3 	bl	800083e <dshot_write>
 8000e98:	e016      	b.n	8000ec8 <main+0x1c4>
	  	  } else if(count>=5000){
 8000e9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000e9c:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	dd06      	ble.n	8000eb2 <main+0x1ae>
	  		  ref[0] = -6;
 8000ea4:	4b28      	ldr	r3, [pc, #160]	@ (8000f48 <main+0x244>)
 8000ea6:	4a29      	ldr	r2, [pc, #164]	@ (8000f4c <main+0x248>)
 8000ea8:	601a      	str	r2, [r3, #0]
	  		  dshot_write(D);
 8000eaa:	4829      	ldr	r0, [pc, #164]	@ (8000f50 <main+0x24c>)
 8000eac:	f7ff fcc7 	bl	800083e <dshot_write>
 8000eb0:	e00a      	b.n	8000ec8 <main+0x1c4>

	  	  } else if(count >= 15000){
 8000eb2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000eb4:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	dd05      	ble.n	8000ec8 <main+0x1c4>
	  		  ref[0] = -6;
 8000ebc:	4b22      	ldr	r3, [pc, #136]	@ (8000f48 <main+0x244>)
 8000ebe:	4a23      	ldr	r2, [pc, #140]	@ (8000f4c <main+0x248>)
 8000ec0:	601a      	str	r2, [r3, #0]
	  		  dshot_write(D);
 8000ec2:	4823      	ldr	r0, [pc, #140]	@ (8000f50 <main+0x24c>)
 8000ec4:	f7ff fcbb 	bl	800083e <dshot_write>
	  	  }

	  	  count++;
 8000ec8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000eca:	3301      	adds	r3, #1
 8000ecc:	67bb      	str	r3, [r7, #120]	@ 0x78
	  	  sprintf(message, "%f oi %f oi %f io %f \n \r",velocidade[0],velocidade[1],velocidade[2],velocidade[3]);
 8000ece:	4b21      	ldr	r3, [pc, #132]	@ (8000f54 <main+0x250>)
 8000ed0:	edd3 7a00 	vldr	s15, [r3]
 8000ed4:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000ed8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f54 <main+0x250>)
 8000eda:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ede:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ee2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f54 <main+0x250>)
 8000ee4:	edd3 6a02 	vldr	s13, [r3, #8]
 8000ee8:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000eec:	4b19      	ldr	r3, [pc, #100]	@ (8000f54 <main+0x250>)
 8000eee:	edd3 5a03 	vldr	s11, [r3, #12]
 8000ef2:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000ef6:	f107 0014 	add.w	r0, r7, #20
 8000efa:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000efe:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000f02:	ed8d 7b00 	vstr	d7, [sp]
 8000f06:	ec53 2b14 	vmov	r2, r3, d4
 8000f0a:	4913      	ldr	r1, [pc, #76]	@ (8000f58 <main+0x254>)
 8000f0c:	f00f fb5e 	bl	80105cc <siprintf>
	  	  CDC_Transmit_FS(message,sizeof(message));
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	2164      	movs	r1, #100	@ 0x64
 8000f16:	4618      	mov	r0, r3
 8000f18:	f00e f9ce 	bl	800f2b8 <CDC_Transmit_FS>
	  	  HAL_Delay(1);
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	f001 fbd1 	bl	80026c4 <HAL_Delay>
  {
 8000f22:	e7a8      	b.n	8000e76 <main+0x172>
 8000f24:	58024400 	.word	0x58024400
 8000f28:	240005f0 	.word	0x240005f0
 8000f2c:	2400050c 	.word	0x2400050c
 8000f30:	24000688 	.word	0x24000688
 8000f34:	240005a4 	.word	0x240005a4
 8000f38:	38001000 	.word	0x38001000
 8000f3c:	240006d4 	.word	0x240006d4
 8000f40:	24000430 	.word	0x24000430
 8000f44:	24000464 	.word	0x24000464
 8000f48:	24000454 	.word	0x24000454
 8000f4c:	c0c00000 	.word	0xc0c00000
 8000f50:	240004d0 	.word	0x240004d0
 8000f54:	24000444 	.word	0x24000444
 8000f58:	080127e8 	.word	0x080127e8

08000f5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b09c      	sub	sp, #112	@ 0x70
 8000f60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f66:	224c      	movs	r2, #76	@ 0x4c
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f00f fb91 	bl	8010692 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	2220      	movs	r2, #32
 8000f74:	2100      	movs	r1, #0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f00f fb8b 	bl	8010692 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000f7c:	2004      	movs	r0, #4
 8000f7e:	f005 faed 	bl	800655c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f82:	2300      	movs	r3, #0
 8000f84:	603b      	str	r3, [r7, #0]
 8000f86:	4b33      	ldr	r3, [pc, #204]	@ (8001054 <SystemClock_Config+0xf8>)
 8000f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f8a:	4a32      	ldr	r2, [pc, #200]	@ (8001054 <SystemClock_Config+0xf8>)
 8000f8c:	f023 0301 	bic.w	r3, r3, #1
 8000f90:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000f92:	4b30      	ldr	r3, [pc, #192]	@ (8001054 <SystemClock_Config+0xf8>)
 8000f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	4b2e      	ldr	r3, [pc, #184]	@ (8001058 <SystemClock_Config+0xfc>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000fa4:	4a2c      	ldr	r2, [pc, #176]	@ (8001058 <SystemClock_Config+0xfc>)
 8000fa6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000faa:	6193      	str	r3, [r2, #24]
 8000fac:	4b2a      	ldr	r3, [pc, #168]	@ (8001058 <SystemClock_Config+0xfc>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fb4:	603b      	str	r3, [r7, #0]
 8000fb6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fb8:	bf00      	nop
 8000fba:	4b27      	ldr	r3, [pc, #156]	@ (8001058 <SystemClock_Config+0xfc>)
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000fc6:	d1f8      	bne.n	8000fba <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000fc8:	2322      	movs	r3, #34	@ 0x22
 8000fca:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fd0:	2340      	movs	r3, #64	@ 0x40
 8000fd2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fe0:	2304      	movs	r3, #4
 8000fe2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8000fe4:	2319      	movs	r3, #25
 8000fe6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000fec:	2305      	movs	r3, #5
 8000fee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ff4:	230c      	movs	r3, #12
 8000ff6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001000:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001004:	4618      	mov	r0, r3
 8001006:	f005 fb13 	bl	8006630 <HAL_RCC_OscConfig>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001010:	f000 f824 	bl	800105c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001014:	233f      	movs	r3, #63	@ 0x3f
 8001016:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001018:	2303      	movs	r3, #3
 800101a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001020:	2300      	movs	r3, #0
 8001022:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001024:	2340      	movs	r3, #64	@ 0x40
 8001026:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001028:	2340      	movs	r3, #64	@ 0x40
 800102a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800102c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001030:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001032:	2340      	movs	r3, #64	@ 0x40
 8001034:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	2104      	movs	r1, #4
 800103a:	4618      	mov	r0, r3
 800103c:	f005 ff52 	bl	8006ee4 <HAL_RCC_ClockConfig>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001046:	f000 f809 	bl	800105c <Error_Handler>
  }
}
 800104a:	bf00      	nop
 800104c:	3770      	adds	r7, #112	@ 0x70
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	58000400 	.word	0x58000400
 8001058:	58024800 	.word	0x58024800

0800105c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001060:	b672      	cpsid	i
}
 8001062:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001064:	bf00      	nop
 8001066:	e7fd      	b.n	8001064 <Error_Handler+0x8>

08001068 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106e:	4b0a      	ldr	r3, [pc, #40]	@ (8001098 <HAL_MspInit+0x30>)
 8001070:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001074:	4a08      	ldr	r2, [pc, #32]	@ (8001098 <HAL_MspInit+0x30>)
 8001076:	f043 0302 	orr.w	r3, r3, #2
 800107a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800107e:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <HAL_MspInit+0x30>)
 8001080:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001084:	f003 0302 	and.w	r3, r3, #2
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	58024400 	.word	0x58024400

0800109c <map>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//Função de mapeamento
uint16_t map(float x, int in_min, int in_max, int out_min, int out_max) {
 800109c:	b480      	push	{r7}
 800109e:	b087      	sub	sp, #28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	ed87 0a05 	vstr	s0, [r7, #20]
 80010a6:	6138      	str	r0, [r7, #16]
 80010a8:	60f9      	str	r1, [r7, #12]
 80010aa:	60ba      	str	r2, [r7, #8]
 80010ac:	607b      	str	r3, [r7, #4]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	ee07 3a90 	vmov	s15, r3
 80010b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b8:	ed97 7a05 	vldr	s14, [r7, #20]
 80010bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	ee07 3a90 	vmov	s15, r3
 80010ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ce:	ee67 6a27 	vmul.f32	s13, s14, s15
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	ee07 3a90 	vmov	s15, r3
 80010dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	ee07 3a90 	vmov	s15, r3
 80010ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010f6:	ee17 3a90 	vmov	r3, s15
 80010fa:	b29b      	uxth	r3, r3
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	371c      	adds	r7, #28
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <Controle>:

void Controle(){
 8001108:	b590      	push	{r4, r7, lr}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0

	for(uint8_t n=0;n<4;n++){
 800110e:	2300      	movs	r3, #0
 8001110:	71fb      	strb	r3, [r7, #7]
 8001112:	e0d8      	b.n	80012c6 <Controle+0x1be>
		//Calculo de erro
		error[n] =ref[n] -  speed[n];
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	4a9b      	ldr	r2, [pc, #620]	@ (8001384 <Controle+0x27c>)
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	4413      	add	r3, r2
 800111c:	ed93 7a00 	vldr	s14, [r3]
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	4a99      	ldr	r2, [pc, #612]	@ (8001388 <Controle+0x280>)
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	4413      	add	r3, r2
 8001128:	edd3 7a00 	vldr	s15, [r3]
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001132:	4a96      	ldr	r2, [pc, #600]	@ (800138c <Controle+0x284>)
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	edc3 7a00 	vstr	s15, [r3]
		//Variação da ação de controle para esta iteração
		deltaU[n] = Kc*(error[n]- preverror[n]) + error[n]*Ki -Kd*(speed[n]-2*prevspeed[n] + prevspeed2[n]);
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	4a93      	ldr	r2, [pc, #588]	@ (800138c <Controle+0x284>)
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4413      	add	r3, r2
 8001144:	ed93 7a00 	vldr	s14, [r3]
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	4a91      	ldr	r2, [pc, #580]	@ (8001390 <Controle+0x288>)
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	4413      	add	r3, r2
 8001150:	edd3 7a00 	vldr	s15, [r3]
 8001154:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001158:	4b8e      	ldr	r3, [pc, #568]	@ (8001394 <Controle+0x28c>)
 800115a:	edd3 7a00 	vldr	s15, [r3]
 800115e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	4a89      	ldr	r2, [pc, #548]	@ (800138c <Controle+0x284>)
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	4413      	add	r3, r2
 800116a:	edd3 6a00 	vldr	s13, [r3]
 800116e:	4b8a      	ldr	r3, [pc, #552]	@ (8001398 <Controle+0x290>)
 8001170:	edd3 7a00 	vldr	s15, [r3]
 8001174:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001178:	ee37 7a27 	vadd.f32	s14, s14, s15
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	4a82      	ldr	r2, [pc, #520]	@ (8001388 <Controle+0x280>)
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4413      	add	r3, r2
 8001184:	edd3 6a00 	vldr	s13, [r3]
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	4a84      	ldr	r2, [pc, #528]	@ (800139c <Controle+0x294>)
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4413      	add	r3, r2
 8001190:	edd3 7a00 	vldr	s15, [r3]
 8001194:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001198:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	4a80      	ldr	r2, [pc, #512]	@ (80013a0 <Controle+0x298>)
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	edd3 7a00 	vldr	s15, [r3]
 80011a8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80011ac:	4b7d      	ldr	r3, [pc, #500]	@ (80013a4 <Controle+0x29c>)
 80011ae:	edd3 7a00 	vldr	s15, [r3]
 80011b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011bc:	4a7a      	ldr	r2, [pc, #488]	@ (80013a8 <Controle+0x2a0>)
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	edc3 7a00 	vstr	s15, [r3]
		//Ação de controle
		uM[n] = uM[n] + deltaU[n];
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	4a78      	ldr	r2, [pc, #480]	@ (80013ac <Controle+0x2a4>)
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	4413      	add	r3, r2
 80011ce:	ed93 7a00 	vldr	s14, [r3]
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	4a74      	ldr	r2, [pc, #464]	@ (80013a8 <Controle+0x2a0>)
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	4413      	add	r3, r2
 80011da:	edd3 7a00 	vldr	s15, [r3]
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011e4:	4a71      	ldr	r2, [pc, #452]	@ (80013ac <Controle+0x2a4>)
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	edc3 7a00 	vstr	s15, [r3]
		//Saturado para evitar que a ação de controle ultrapasse o limite
		if( uM[n] < -1023){
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	4a6e      	ldr	r2, [pc, #440]	@ (80013ac <Controle+0x2a4>)
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	edd3 7a00 	vldr	s15, [r3]
 80011fa:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 80013b0 <Controle+0x2a8>
 80011fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001206:	d505      	bpl.n	8001214 <Controle+0x10c>
			uM[n]= -1023;
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	4a68      	ldr	r2, [pc, #416]	@ (80013ac <Controle+0x2a4>)
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	4413      	add	r3, r2
 8001210:	4a68      	ldr	r2, [pc, #416]	@ (80013b4 <Controle+0x2ac>)
 8001212:	601a      	str	r2, [r3, #0]
		}
		if(uM[n]>1023){
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	4a65      	ldr	r2, [pc, #404]	@ (80013ac <Controle+0x2a4>)
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	edd3 7a00 	vldr	s15, [r3]
 8001220:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 80013b8 <Controle+0x2b0>
 8001224:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800122c:	dd05      	ble.n	800123a <Controle+0x132>
			uM[n]= 1023;
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	4a5e      	ldr	r2, [pc, #376]	@ (80013ac <Controle+0x2a4>)
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	4a61      	ldr	r2, [pc, #388]	@ (80013bc <Controle+0x2b4>)
 8001238:	601a      	str	r2, [r3, #0]
		}
		//Mapeamento da variavel de ação de controle no alcançe dado
		if(uM[n]>=0){
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	4a5b      	ldr	r2, [pc, #364]	@ (80013ac <Controle+0x2a4>)
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	edd3 7a00 	vldr	s15, [r3]
 8001246:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800124a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124e:	db16      	blt.n	800127e <Controle+0x176>
			D[n] = map(uM[n],0,1023,200,1023);
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	4a56      	ldr	r2, [pc, #344]	@ (80013ac <Controle+0x2a4>)
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	edd3 7a00 	vldr	s15, [r3]
 800125c:	79fc      	ldrb	r4, [r7, #7]
 800125e:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8001262:	22c8      	movs	r2, #200	@ 0xc8
 8001264:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8001268:	2000      	movs	r0, #0
 800126a:	eeb0 0a67 	vmov.f32	s0, s15
 800126e:	f7ff ff15 	bl	800109c <map>
 8001272:	4603      	mov	r3, r0
 8001274:	461a      	mov	r2, r3
 8001276:	4b52      	ldr	r3, [pc, #328]	@ (80013c0 <Controle+0x2b8>)
 8001278:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 800127c:	e020      	b.n	80012c0 <Controle+0x1b8>
		}else if(uM[n]<0){
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	4a4a      	ldr	r2, [pc, #296]	@ (80013ac <Controle+0x2a4>)
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
 8001286:	edd3 7a00 	vldr	s15, [r3]
 800128a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800128e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001292:	d515      	bpl.n	80012c0 <Controle+0x1b8>
			D[n]= map(uM[n],-1023,0,2047,1224);
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	4a45      	ldr	r2, [pc, #276]	@ (80013ac <Controle+0x2a4>)
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	4413      	add	r3, r2
 800129c:	edd3 7a00 	vldr	s15, [r3]
 80012a0:	79fc      	ldrb	r4, [r7, #7]
 80012a2:	f44f 6399 	mov.w	r3, #1224	@ 0x4c8
 80012a6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80012aa:	2100      	movs	r1, #0
 80012ac:	4845      	ldr	r0, [pc, #276]	@ (80013c4 <Controle+0x2bc>)
 80012ae:	eeb0 0a67 	vmov.f32	s0, s15
 80012b2:	f7ff fef3 	bl	800109c <map>
 80012b6:	4603      	mov	r3, r0
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b41      	ldr	r3, [pc, #260]	@ (80013c0 <Controle+0x2b8>)
 80012bc:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	for(uint8_t n=0;n<4;n++){
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	3301      	adds	r3, #1
 80012c4:	71fb      	strb	r3, [r7, #7]
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	2b03      	cmp	r3, #3
 80012ca:	f67f af23 	bls.w	8001114 <Controle+0xc>
		}
	}

	//Logica para salvar o erro e a velocidade anterior
	cont = cont +1;
 80012ce:	4b3e      	ldr	r3, [pc, #248]	@ (80013c8 <Controle+0x2c0>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	3301      	adds	r3, #1
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	4b3c      	ldr	r3, [pc, #240]	@ (80013c8 <Controle+0x2c0>)
 80012d8:	701a      	strb	r2, [r3, #0]
	if(cont == 1){
 80012da:	4b3b      	ldr	r3, [pc, #236]	@ (80013c8 <Controle+0x2c0>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d11d      	bne.n	800131e <Controle+0x216>
		for(uint8_t n=0;n<4;n++){
 80012e2:	2300      	movs	r3, #0
 80012e4:	71bb      	strb	r3, [r7, #6]
 80012e6:	e016      	b.n	8001316 <Controle+0x20e>
			prevspeed[n] = speed[n];
 80012e8:	79ba      	ldrb	r2, [r7, #6]
 80012ea:	79bb      	ldrb	r3, [r7, #6]
 80012ec:	4926      	ldr	r1, [pc, #152]	@ (8001388 <Controle+0x280>)
 80012ee:	0092      	lsls	r2, r2, #2
 80012f0:	440a      	add	r2, r1
 80012f2:	6812      	ldr	r2, [r2, #0]
 80012f4:	4929      	ldr	r1, [pc, #164]	@ (800139c <Controle+0x294>)
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	440b      	add	r3, r1
 80012fa:	601a      	str	r2, [r3, #0]
			preverror[n] = error[n];
 80012fc:	79ba      	ldrb	r2, [r7, #6]
 80012fe:	79bb      	ldrb	r3, [r7, #6]
 8001300:	4922      	ldr	r1, [pc, #136]	@ (800138c <Controle+0x284>)
 8001302:	0092      	lsls	r2, r2, #2
 8001304:	440a      	add	r2, r1
 8001306:	6812      	ldr	r2, [r2, #0]
 8001308:	4921      	ldr	r1, [pc, #132]	@ (8001390 <Controle+0x288>)
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	440b      	add	r3, r1
 800130e:	601a      	str	r2, [r3, #0]
		for(uint8_t n=0;n<4;n++){
 8001310:	79bb      	ldrb	r3, [r7, #6]
 8001312:	3301      	adds	r3, #1
 8001314:	71bb      	strb	r3, [r7, #6]
 8001316:	79bb      	ldrb	r3, [r7, #6]
 8001318:	2b03      	cmp	r3, #3
 800131a:	d9e5      	bls.n	80012e8 <Controle+0x1e0>
			prevspeed[n] = speed[n];
			preverror[n] = error[n];
		}
		cont = 1;
	}
}
 800131c:	e02d      	b.n	800137a <Controle+0x272>
	} else if(cont ==2){
 800131e:	4b2a      	ldr	r3, [pc, #168]	@ (80013c8 <Controle+0x2c0>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b02      	cmp	r3, #2
 8001324:	d129      	bne.n	800137a <Controle+0x272>
		for(uint8_t n=0;n<4;n++){
 8001326:	2300      	movs	r3, #0
 8001328:	717b      	strb	r3, [r7, #5]
 800132a:	e020      	b.n	800136e <Controle+0x266>
			prevspeed2[n] = prevspeed[n];
 800132c:	797a      	ldrb	r2, [r7, #5]
 800132e:	797b      	ldrb	r3, [r7, #5]
 8001330:	491a      	ldr	r1, [pc, #104]	@ (800139c <Controle+0x294>)
 8001332:	0092      	lsls	r2, r2, #2
 8001334:	440a      	add	r2, r1
 8001336:	6812      	ldr	r2, [r2, #0]
 8001338:	4919      	ldr	r1, [pc, #100]	@ (80013a0 <Controle+0x298>)
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	440b      	add	r3, r1
 800133e:	601a      	str	r2, [r3, #0]
			prevspeed[n] = speed[n];
 8001340:	797a      	ldrb	r2, [r7, #5]
 8001342:	797b      	ldrb	r3, [r7, #5]
 8001344:	4910      	ldr	r1, [pc, #64]	@ (8001388 <Controle+0x280>)
 8001346:	0092      	lsls	r2, r2, #2
 8001348:	440a      	add	r2, r1
 800134a:	6812      	ldr	r2, [r2, #0]
 800134c:	4913      	ldr	r1, [pc, #76]	@ (800139c <Controle+0x294>)
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	440b      	add	r3, r1
 8001352:	601a      	str	r2, [r3, #0]
			preverror[n] = error[n];
 8001354:	797a      	ldrb	r2, [r7, #5]
 8001356:	797b      	ldrb	r3, [r7, #5]
 8001358:	490c      	ldr	r1, [pc, #48]	@ (800138c <Controle+0x284>)
 800135a:	0092      	lsls	r2, r2, #2
 800135c:	440a      	add	r2, r1
 800135e:	6812      	ldr	r2, [r2, #0]
 8001360:	490b      	ldr	r1, [pc, #44]	@ (8001390 <Controle+0x288>)
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	440b      	add	r3, r1
 8001366:	601a      	str	r2, [r3, #0]
		for(uint8_t n=0;n<4;n++){
 8001368:	797b      	ldrb	r3, [r7, #5]
 800136a:	3301      	adds	r3, #1
 800136c:	717b      	strb	r3, [r7, #5]
 800136e:	797b      	ldrb	r3, [r7, #5]
 8001370:	2b03      	cmp	r3, #3
 8001372:	d9db      	bls.n	800132c <Controle+0x224>
		cont = 1;
 8001374:	4b14      	ldr	r3, [pc, #80]	@ (80013c8 <Controle+0x2c0>)
 8001376:	2201      	movs	r2, #1
 8001378:	701a      	strb	r2, [r3, #0]
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	bd90      	pop	{r4, r7, pc}
 8001382:	bf00      	nop
 8001384:	24000454 	.word	0x24000454
 8001388:	240004f8 	.word	0x240004f8
 800138c:	2400046c 	.word	0x2400046c
 8001390:	240004bc 	.word	0x240004bc
 8001394:	24000008 	.word	0x24000008
 8001398:	2400000c 	.word	0x2400000c
 800139c:	2400049c 	.word	0x2400049c
 80013a0:	240004ac 	.word	0x240004ac
 80013a4:	24000010 	.word	0x24000010
 80013a8:	2400047c 	.word	0x2400047c
 80013ac:	2400048c 	.word	0x2400048c
 80013b0:	c47fc000 	.word	0xc47fc000
 80013b4:	c47fc000 	.word	0xc47fc000
 80013b8:	447fc000 	.word	0x447fc000
 80013bc:	447fc000 	.word	0x447fc000
 80013c0:	240004d0 	.word	0x240004d0
 80013c4:	fffffc01 	.word	0xfffffc01
 80013c8:	240004cc 	.word	0x240004cc

080013cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <NMI_Handler+0x4>

080013d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <HardFault_Handler+0x4>

080013dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <MemManage_Handler+0x4>

080013e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <BusFault_Handler+0x4>

080013ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <UsageFault_Handler+0x4>

080013f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001422:	f001 f92f 	bl	8002684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8001430:	4802      	ldr	r0, [pc, #8]	@ (800143c <DMA1_Stream1_IRQHandler+0x10>)
 8001432:	f002 f861 	bl	80034f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	24000798 	.word	0x24000798

08001440 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8001444:	4802      	ldr	r0, [pc, #8]	@ (8001450 <DMA1_Stream3_IRQHandler+0x10>)
 8001446:	f002 f857 	bl	80034f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	24000810 	.word	0x24000810

08001454 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8001458:	4802      	ldr	r0, [pc, #8]	@ (8001464 <DMA1_Stream4_IRQHandler+0x10>)
 800145a:	f002 f84d 	bl	80034f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	24000888 	.word	0x24000888

08001468 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 800146c:	4802      	ldr	r0, [pc, #8]	@ (8001478 <DMA1_Stream5_IRQHandler+0x10>)
 800146e:	f002 f843 	bl	80034f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	24000720 	.word	0x24000720

0800147c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001480:	2000      	movs	r0, #0
 8001482:	f000 ff91 	bl	80023a8 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001490:	4802      	ldr	r0, [pc, #8]	@ (800149c <OTG_FS_IRQHandler+0x10>)
 8001492:	f003 ff06 	bl	80052a2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	24001e84 	.word	0x24001e84

080014a0 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80014a6:	4838      	ldr	r0, [pc, #224]	@ (8001588 <TIM15_IRQHandler+0xe8>)
 80014a8:	f008 fa5e 	bl	8009968 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */
  //
  Enc[0] = TIM4->CNT;
 80014ac:	4b37      	ldr	r3, [pc, #220]	@ (800158c <TIM15_IRQHandler+0xec>)
 80014ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b0:	4a37      	ldr	r2, [pc, #220]	@ (8001590 <TIM15_IRQHandler+0xf0>)
 80014b2:	6013      	str	r3, [r2, #0]
  Enc[1] = TIM1->CNT;
 80014b4:	4b37      	ldr	r3, [pc, #220]	@ (8001594 <TIM15_IRQHandler+0xf4>)
 80014b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b8:	4a35      	ldr	r2, [pc, #212]	@ (8001590 <TIM15_IRQHandler+0xf0>)
 80014ba:	6053      	str	r3, [r2, #4]
  Enc[2] = TIM8->CNT;
 80014bc:	4b36      	ldr	r3, [pc, #216]	@ (8001598 <TIM15_IRQHandler+0xf8>)
 80014be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c0:	4a33      	ldr	r2, [pc, #204]	@ (8001590 <TIM15_IRQHandler+0xf0>)
 80014c2:	6093      	str	r3, [r2, #8]
  Enc[3] = TIM3->CNT;
 80014c4:	4b35      	ldr	r3, [pc, #212]	@ (800159c <TIM15_IRQHandler+0xfc>)
 80014c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c8:	4a31      	ldr	r2, [pc, #196]	@ (8001590 <TIM15_IRQHandler+0xf0>)
 80014ca:	60d3      	str	r3, [r2, #12]
  TIM4->CNT = 0;
 80014cc:	4b2f      	ldr	r3, [pc, #188]	@ (800158c <TIM15_IRQHandler+0xec>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	625a      	str	r2, [r3, #36]	@ 0x24
  TIM1->CNT = 0;
 80014d2:	4b30      	ldr	r3, [pc, #192]	@ (8001594 <TIM15_IRQHandler+0xf4>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	625a      	str	r2, [r3, #36]	@ 0x24
  TIM8->CNT = 0;
 80014d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001598 <TIM15_IRQHandler+0xf8>)
 80014da:	2200      	movs	r2, #0
 80014dc:	625a      	str	r2, [r3, #36]	@ 0x24
  TIM3->CNT = 0;
 80014de:	4b2f      	ldr	r3, [pc, #188]	@ (800159c <TIM15_IRQHandler+0xfc>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	625a      	str	r2, [r3, #36]	@ 0x24

  for(uint8_t i=0;i<4;i++){
 80014e4:	2300      	movs	r3, #0
 80014e6:	71fb      	strb	r3, [r7, #7]
 80014e8:	e03b      	b.n	8001562 <TIM15_IRQHandler+0xc2>
	  vel[i] = Enc[i];
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	4a28      	ldr	r2, [pc, #160]	@ (8001590 <TIM15_IRQHandler+0xf0>)
 80014ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	4611      	mov	r1, r2
 80014f6:	4a2a      	ldr	r2, [pc, #168]	@ (80015a0 <TIM15_IRQHandler+0x100>)
 80014f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  if(vel[i]>60000){
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	4a28      	ldr	r2, [pc, #160]	@ (80015a0 <TIM15_IRQHandler+0x100>)
 8001500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001504:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8001508:	4293      	cmp	r3, r2
 800150a:	dd09      	ble.n	8001520 <TIM15_IRQHandler+0x80>
			  vel[i] = vel[i] - 65356;
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	4a24      	ldr	r2, [pc, #144]	@ (80015a0 <TIM15_IRQHandler+0x100>)
 8001510:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001514:	79fa      	ldrb	r2, [r7, #7]
 8001516:	4b23      	ldr	r3, [pc, #140]	@ (80015a4 <TIM15_IRQHandler+0x104>)
 8001518:	440b      	add	r3, r1
 800151a:	4921      	ldr	r1, [pc, #132]	@ (80015a0 <TIM15_IRQHandler+0x100>)
 800151c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	  }
	  speed[i] = vel[i]/(81.92);
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	4a1f      	ldr	r2, [pc, #124]	@ (80015a0 <TIM15_IRQHandler+0x100>)
 8001524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001528:	ee07 3a90 	vmov	s15, r3
 800152c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001530:	ed9f 5b13 	vldr	d5, [pc, #76]	@ 8001580 <TIM15_IRQHandler+0xe0>
 8001534:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800153e:	4a1a      	ldr	r2, [pc, #104]	@ (80015a8 <TIM15_IRQHandler+0x108>)
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	edc3 7a00 	vstr	s15, [r3]
	  velocidade[i] = speed[i];
 8001548:	79fa      	ldrb	r2, [r7, #7]
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	4916      	ldr	r1, [pc, #88]	@ (80015a8 <TIM15_IRQHandler+0x108>)
 800154e:	0092      	lsls	r2, r2, #2
 8001550:	440a      	add	r2, r1
 8001552:	6812      	ldr	r2, [r2, #0]
 8001554:	4915      	ldr	r1, [pc, #84]	@ (80015ac <TIM15_IRQHandler+0x10c>)
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	440b      	add	r3, r1
 800155a:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0;i<4;i++){
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	3301      	adds	r3, #1
 8001560:	71fb      	strb	r3, [r7, #7]
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	2b03      	cmp	r3, #3
 8001566:	d9c0      	bls.n	80014ea <TIM15_IRQHandler+0x4a>
  }



  //velocidade = speed[0];
  Controle();
 8001568:	f7ff fdce 	bl	8001108 <Controle>

  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 800156c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001570:	480f      	ldr	r0, [pc, #60]	@ (80015b0 <TIM15_IRQHandler+0x110>)
 8001572:	f003 fd0c 	bl	8004f8e <HAL_GPIO_TogglePin>
  /* USER CODE END TIM15_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	47ae147b 	.word	0x47ae147b
 8001584:	40547ae1 	.word	0x40547ae1
 8001588:	240006d4 	.word	0x240006d4
 800158c:	40000800 	.word	0x40000800
 8001590:	240004d8 	.word	0x240004d8
 8001594:	40010000 	.word	0x40010000
 8001598:	40010400 	.word	0x40010400
 800159c:	40000400 	.word	0x40000400
 80015a0:	240004e8 	.word	0x240004e8
 80015a4:	ffff00b4 	.word	0xffff00b4
 80015a8:	240004f8 	.word	0x240004f8
 80015ac:	24000444 	.word	0x24000444
 80015b0:	58020400 	.word	0x58020400

080015b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return 1;
 80015b8:	2301      	movs	r3, #1
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <_kill>:

int _kill(int pid, int sig)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015ce:	f00f f8b3 	bl	8010738 <__errno>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2216      	movs	r2, #22
 80015d6:	601a      	str	r2, [r3, #0]
  return -1;
 80015d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <_exit>:

void _exit (int status)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015ec:	f04f 31ff 	mov.w	r1, #4294967295
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff ffe7 	bl	80015c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015f6:	bf00      	nop
 80015f8:	e7fd      	b.n	80015f6 <_exit+0x12>

080015fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b086      	sub	sp, #24
 80015fe:	af00      	add	r7, sp, #0
 8001600:	60f8      	str	r0, [r7, #12]
 8001602:	60b9      	str	r1, [r7, #8]
 8001604:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	e00a      	b.n	8001622 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800160c:	f3af 8000 	nop.w
 8001610:	4601      	mov	r1, r0
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	1c5a      	adds	r2, r3, #1
 8001616:	60ba      	str	r2, [r7, #8]
 8001618:	b2ca      	uxtb	r2, r1
 800161a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	3301      	adds	r3, #1
 8001620:	617b      	str	r3, [r7, #20]
 8001622:	697a      	ldr	r2, [r7, #20]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	429a      	cmp	r2, r3
 8001628:	dbf0      	blt.n	800160c <_read+0x12>
  }

  return len;
 800162a:	687b      	ldr	r3, [r7, #4]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	e009      	b.n	800165a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	1c5a      	adds	r2, r3, #1
 800164a:	60ba      	str	r2, [r7, #8]
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f000 ff2a 	bl	80024a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	3301      	adds	r3, #1
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	429a      	cmp	r2, r3
 8001660:	dbf1      	blt.n	8001646 <_write+0x12>
  }
  return len;
 8001662:	687b      	ldr	r3, [r7, #4]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <_close>:

int _close(int file)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001674:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001678:	4618      	mov	r0, r3
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001694:	605a      	str	r2, [r3, #4]
  return 0;
 8001696:	2300      	movs	r3, #0
}
 8001698:	4618      	mov	r0, r3
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <_isatty>:

int _isatty(int file)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016ac:	2301      	movs	r3, #1
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b085      	sub	sp, #20
 80016be:	af00      	add	r7, sp, #0
 80016c0:	60f8      	str	r0, [r7, #12]
 80016c2:	60b9      	str	r1, [r7, #8]
 80016c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016dc:	4a14      	ldr	r2, [pc, #80]	@ (8001730 <_sbrk+0x5c>)
 80016de:	4b15      	ldr	r3, [pc, #84]	@ (8001734 <_sbrk+0x60>)
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016e8:	4b13      	ldr	r3, [pc, #76]	@ (8001738 <_sbrk+0x64>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d102      	bne.n	80016f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016f0:	4b11      	ldr	r3, [pc, #68]	@ (8001738 <_sbrk+0x64>)
 80016f2:	4a12      	ldr	r2, [pc, #72]	@ (800173c <_sbrk+0x68>)
 80016f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016f6:	4b10      	ldr	r3, [pc, #64]	@ (8001738 <_sbrk+0x64>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4413      	add	r3, r2
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	429a      	cmp	r2, r3
 8001702:	d207      	bcs.n	8001714 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001704:	f00f f818 	bl	8010738 <__errno>
 8001708:	4603      	mov	r3, r0
 800170a:	220c      	movs	r2, #12
 800170c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800170e:	f04f 33ff 	mov.w	r3, #4294967295
 8001712:	e009      	b.n	8001728 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001714:	4b08      	ldr	r3, [pc, #32]	@ (8001738 <_sbrk+0x64>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800171a:	4b07      	ldr	r3, [pc, #28]	@ (8001738 <_sbrk+0x64>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4413      	add	r3, r2
 8001722:	4a05      	ldr	r2, [pc, #20]	@ (8001738 <_sbrk+0x64>)
 8001724:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001726:	68fb      	ldr	r3, [r7, #12]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3718      	adds	r7, #24
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	24080000 	.word	0x24080000
 8001734:	00000400 	.word	0x00000400
 8001738:	24000508 	.word	0x24000508
 800173c:	240026d8 	.word	0x240026d8

08001740 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim5_ch4;
DMA_HandleTypeDef hdma_tim5_ch2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08c      	sub	sp, #48	@ 0x30
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001746:	f107 030c 	add.w	r3, r7, #12
 800174a:	2224      	movs	r2, #36	@ 0x24
 800174c:	2100      	movs	r1, #0
 800174e:	4618      	mov	r0, r3
 8001750:	f00e ff9f 	bl	8010692 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001754:	463b      	mov	r3, r7
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800175e:	4b23      	ldr	r3, [pc, #140]	@ (80017ec <MX_TIM1_Init+0xac>)
 8001760:	4a23      	ldr	r2, [pc, #140]	@ (80017f0 <MX_TIM1_Init+0xb0>)
 8001762:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001764:	4b21      	ldr	r3, [pc, #132]	@ (80017ec <MX_TIM1_Init+0xac>)
 8001766:	2200      	movs	r2, #0
 8001768:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800176a:	4b20      	ldr	r3, [pc, #128]	@ (80017ec <MX_TIM1_Init+0xac>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001770:	4b1e      	ldr	r3, [pc, #120]	@ (80017ec <MX_TIM1_Init+0xac>)
 8001772:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001776:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001778:	4b1c      	ldr	r3, [pc, #112]	@ (80017ec <MX_TIM1_Init+0xac>)
 800177a:	2200      	movs	r2, #0
 800177c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800177e:	4b1b      	ldr	r3, [pc, #108]	@ (80017ec <MX_TIM1_Init+0xac>)
 8001780:	2200      	movs	r2, #0
 8001782:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001784:	4b19      	ldr	r3, [pc, #100]	@ (80017ec <MX_TIM1_Init+0xac>)
 8001786:	2200      	movs	r2, #0
 8001788:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800178a:	2303      	movs	r3, #3
 800178c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800178e:	2302      	movs	r3, #2
 8001790:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001792:	2301      	movs	r3, #1
 8001794:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001796:	2300      	movs	r3, #0
 8001798:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800179e:	2302      	movs	r3, #2
 80017a0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017a2:	2301      	movs	r3, #1
 80017a4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017a6:	2300      	movs	r3, #0
 80017a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80017ae:	f107 030c 	add.w	r3, r7, #12
 80017b2:	4619      	mov	r1, r3
 80017b4:	480d      	ldr	r0, [pc, #52]	@ (80017ec <MX_TIM1_Init+0xac>)
 80017b6:	f007 ff83 	bl	80096c0 <HAL_TIM_Encoder_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80017c0:	f7ff fc4c 	bl	800105c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c4:	2300      	movs	r3, #0
 80017c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80017c8:	2300      	movs	r3, #0
 80017ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017d0:	463b      	mov	r3, r7
 80017d2:	4619      	mov	r1, r3
 80017d4:	4805      	ldr	r0, [pc, #20]	@ (80017ec <MX_TIM1_Init+0xac>)
 80017d6:	f009 f843 	bl	800a860 <HAL_TIMEx_MasterConfigSynchronization>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80017e0:	f7ff fc3c 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80017e4:	bf00      	nop
 80017e6:	3730      	adds	r7, #48	@ 0x30
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	2400050c 	.word	0x2400050c
 80017f0:	40010000 	.word	0x40010000

080017f4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08a      	sub	sp, #40	@ 0x28
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017fa:	f107 031c 	add.w	r3, r7, #28
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001806:	463b      	mov	r3, r7
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
 8001814:	615a      	str	r2, [r3, #20]
 8001816:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001818:	4b27      	ldr	r3, [pc, #156]	@ (80018b8 <MX_TIM2_Init+0xc4>)
 800181a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800181e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001820:	4b25      	ldr	r3, [pc, #148]	@ (80018b8 <MX_TIM2_Init+0xc4>)
 8001822:	2200      	movs	r2, #0
 8001824:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001826:	4b24      	ldr	r3, [pc, #144]	@ (80018b8 <MX_TIM2_Init+0xc4>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800182c:	4b22      	ldr	r3, [pc, #136]	@ (80018b8 <MX_TIM2_Init+0xc4>)
 800182e:	2200      	movs	r2, #0
 8001830:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001832:	4b21      	ldr	r3, [pc, #132]	@ (80018b8 <MX_TIM2_Init+0xc4>)
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001838:	4b1f      	ldr	r3, [pc, #124]	@ (80018b8 <MX_TIM2_Init+0xc4>)
 800183a:	2200      	movs	r2, #0
 800183c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800183e:	481e      	ldr	r0, [pc, #120]	@ (80018b8 <MX_TIM2_Init+0xc4>)
 8001840:	f007 fdd8 	bl	80093f4 <HAL_TIM_PWM_Init>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800184a:	f7ff fc07 	bl	800105c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001852:	2300      	movs	r3, #0
 8001854:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001856:	f107 031c 	add.w	r3, r7, #28
 800185a:	4619      	mov	r1, r3
 800185c:	4816      	ldr	r0, [pc, #88]	@ (80018b8 <MX_TIM2_Init+0xc4>)
 800185e:	f008 ffff 	bl	800a860 <HAL_TIMEx_MasterConfigSynchronization>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001868:	f7ff fbf8 	bl	800105c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800186c:	2360      	movs	r3, #96	@ 0x60
 800186e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001874:	2300      	movs	r3, #0
 8001876:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001878:	2300      	movs	r3, #0
 800187a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800187c:	463b      	mov	r3, r7
 800187e:	2200      	movs	r2, #0
 8001880:	4619      	mov	r1, r3
 8001882:	480d      	ldr	r0, [pc, #52]	@ (80018b8 <MX_TIM2_Init+0xc4>)
 8001884:	f008 f978 	bl	8009b78 <HAL_TIM_PWM_ConfigChannel>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800188e:	f7ff fbe5 	bl	800105c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001892:	463b      	mov	r3, r7
 8001894:	2208      	movs	r2, #8
 8001896:	4619      	mov	r1, r3
 8001898:	4807      	ldr	r0, [pc, #28]	@ (80018b8 <MX_TIM2_Init+0xc4>)
 800189a:	f008 f96d 	bl	8009b78 <HAL_TIM_PWM_ConfigChannel>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80018a4:	f7ff fbda 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80018a8:	4803      	ldr	r0, [pc, #12]	@ (80018b8 <MX_TIM2_Init+0xc4>)
 80018aa:	f000 fc0b 	bl	80020c4 <HAL_TIM_MspPostInit>

}
 80018ae:	bf00      	nop
 80018b0:	3728      	adds	r7, #40	@ 0x28
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	24000558 	.word	0x24000558

080018bc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08c      	sub	sp, #48	@ 0x30
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018c2:	f107 030c 	add.w	r3, r7, #12
 80018c6:	2224      	movs	r2, #36	@ 0x24
 80018c8:	2100      	movs	r1, #0
 80018ca:	4618      	mov	r0, r3
 80018cc:	f00e fee1 	bl	8010692 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d0:	463b      	mov	r3, r7
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018da:	4b21      	ldr	r3, [pc, #132]	@ (8001960 <MX_TIM3_Init+0xa4>)
 80018dc:	4a21      	ldr	r2, [pc, #132]	@ (8001964 <MX_TIM3_Init+0xa8>)
 80018de:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80018e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001960 <MX_TIM3_Init+0xa4>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001960 <MX_TIM3_Init+0xa4>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80018ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001960 <MX_TIM3_Init+0xa4>)
 80018ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001960 <MX_TIM3_Init+0xa4>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018fa:	4b19      	ldr	r3, [pc, #100]	@ (8001960 <MX_TIM3_Init+0xa4>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001900:	2303      	movs	r3, #3
 8001902:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001904:	2302      	movs	r3, #2
 8001906:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001908:	2301      	movs	r3, #1
 800190a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800190c:	2300      	movs	r3, #0
 800190e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001914:	2302      	movs	r3, #2
 8001916:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001918:	2301      	movs	r3, #1
 800191a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800191c:	2300      	movs	r3, #0
 800191e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001920:	2300      	movs	r3, #0
 8001922:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001924:	f107 030c 	add.w	r3, r7, #12
 8001928:	4619      	mov	r1, r3
 800192a:	480d      	ldr	r0, [pc, #52]	@ (8001960 <MX_TIM3_Init+0xa4>)
 800192c:	f007 fec8 	bl	80096c0 <HAL_TIM_Encoder_Init>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001936:	f7ff fb91 	bl	800105c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800193a:	2300      	movs	r3, #0
 800193c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800193e:	2300      	movs	r3, #0
 8001940:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001942:	463b      	mov	r3, r7
 8001944:	4619      	mov	r1, r3
 8001946:	4806      	ldr	r0, [pc, #24]	@ (8001960 <MX_TIM3_Init+0xa4>)
 8001948:	f008 ff8a 	bl	800a860 <HAL_TIMEx_MasterConfigSynchronization>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001952:	f7ff fb83 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001956:	bf00      	nop
 8001958:	3730      	adds	r7, #48	@ 0x30
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	240005a4 	.word	0x240005a4
 8001964:	40000400 	.word	0x40000400

08001968 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08c      	sub	sp, #48	@ 0x30
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800196e:	f107 030c 	add.w	r3, r7, #12
 8001972:	2224      	movs	r2, #36	@ 0x24
 8001974:	2100      	movs	r1, #0
 8001976:	4618      	mov	r0, r3
 8001978:	f00e fe8b 	bl	8010692 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800197c:	463b      	mov	r3, r7
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]
 8001984:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001986:	4b21      	ldr	r3, [pc, #132]	@ (8001a0c <MX_TIM4_Init+0xa4>)
 8001988:	4a21      	ldr	r2, [pc, #132]	@ (8001a10 <MX_TIM4_Init+0xa8>)
 800198a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800198c:	4b1f      	ldr	r3, [pc, #124]	@ (8001a0c <MX_TIM4_Init+0xa4>)
 800198e:	2200      	movs	r2, #0
 8001990:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001992:	4b1e      	ldr	r3, [pc, #120]	@ (8001a0c <MX_TIM4_Init+0xa4>)
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001998:	4b1c      	ldr	r3, [pc, #112]	@ (8001a0c <MX_TIM4_Init+0xa4>)
 800199a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800199e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019a0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a0c <MX_TIM4_Init+0xa4>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a6:	4b19      	ldr	r3, [pc, #100]	@ (8001a0c <MX_TIM4_Init+0xa4>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019ac:	2303      	movs	r3, #3
 80019ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80019b0:	2302      	movs	r3, #2
 80019b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019b4:	2301      	movs	r3, #1
 80019b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80019bc:	2300      	movs	r3, #0
 80019be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80019c0:	2302      	movs	r3, #2
 80019c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019c4:	2301      	movs	r3, #1
 80019c6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019c8:	2300      	movs	r3, #0
 80019ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80019d0:	f107 030c 	add.w	r3, r7, #12
 80019d4:	4619      	mov	r1, r3
 80019d6:	480d      	ldr	r0, [pc, #52]	@ (8001a0c <MX_TIM4_Init+0xa4>)
 80019d8:	f007 fe72 	bl	80096c0 <HAL_TIM_Encoder_Init>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80019e2:	f7ff fb3b 	bl	800105c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019e6:	2300      	movs	r3, #0
 80019e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019ee:	463b      	mov	r3, r7
 80019f0:	4619      	mov	r1, r3
 80019f2:	4806      	ldr	r0, [pc, #24]	@ (8001a0c <MX_TIM4_Init+0xa4>)
 80019f4:	f008 ff34 	bl	800a860 <HAL_TIMEx_MasterConfigSynchronization>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80019fe:	f7ff fb2d 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a02:	bf00      	nop
 8001a04:	3730      	adds	r7, #48	@ 0x30
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	240005f0 	.word	0x240005f0
 8001a10:	40000800 	.word	0x40000800

08001a14 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08a      	sub	sp, #40	@ 0x28
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a1a:	f107 031c 	add.w	r3, r7, #28
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a26:	463b      	mov	r3, r7
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]
 8001a34:	615a      	str	r2, [r3, #20]
 8001a36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001a38:	4b26      	ldr	r3, [pc, #152]	@ (8001ad4 <MX_TIM5_Init+0xc0>)
 8001a3a:	4a27      	ldr	r2, [pc, #156]	@ (8001ad8 <MX_TIM5_Init+0xc4>)
 8001a3c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001a3e:	4b25      	ldr	r3, [pc, #148]	@ (8001ad4 <MX_TIM5_Init+0xc0>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a44:	4b23      	ldr	r3, [pc, #140]	@ (8001ad4 <MX_TIM5_Init+0xc0>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8001a4a:	4b22      	ldr	r3, [pc, #136]	@ (8001ad4 <MX_TIM5_Init+0xc0>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a50:	4b20      	ldr	r3, [pc, #128]	@ (8001ad4 <MX_TIM5_Init+0xc0>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a56:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad4 <MX_TIM5_Init+0xc0>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001a5c:	481d      	ldr	r0, [pc, #116]	@ (8001ad4 <MX_TIM5_Init+0xc0>)
 8001a5e:	f007 fcc9 	bl	80093f4 <HAL_TIM_PWM_Init>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001a68:	f7ff faf8 	bl	800105c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a70:	2300      	movs	r3, #0
 8001a72:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001a74:	f107 031c 	add.w	r3, r7, #28
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4816      	ldr	r0, [pc, #88]	@ (8001ad4 <MX_TIM5_Init+0xc0>)
 8001a7c:	f008 fef0 	bl	800a860 <HAL_TIMEx_MasterConfigSynchronization>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001a86:	f7ff fae9 	bl	800105c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a8a:	2360      	movs	r3, #96	@ 0x60
 8001a8c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a92:	2300      	movs	r3, #0
 8001a94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a9a:	463b      	mov	r3, r7
 8001a9c:	2204      	movs	r2, #4
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	480c      	ldr	r0, [pc, #48]	@ (8001ad4 <MX_TIM5_Init+0xc0>)
 8001aa2:	f008 f869 	bl	8009b78 <HAL_TIM_PWM_ConfigChannel>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001aac:	f7ff fad6 	bl	800105c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ab0:	463b      	mov	r3, r7
 8001ab2:	220c      	movs	r2, #12
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4807      	ldr	r0, [pc, #28]	@ (8001ad4 <MX_TIM5_Init+0xc0>)
 8001ab8:	f008 f85e 	bl	8009b78 <HAL_TIM_PWM_ConfigChannel>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001ac2:	f7ff facb 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001ac6:	4803      	ldr	r0, [pc, #12]	@ (8001ad4 <MX_TIM5_Init+0xc0>)
 8001ac8:	f000 fafc 	bl	80020c4 <HAL_TIM_MspPostInit>

}
 8001acc:	bf00      	nop
 8001ace:	3728      	adds	r7, #40	@ 0x28
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	2400063c 	.word	0x2400063c
 8001ad8:	40000c00 	.word	0x40000c00

08001adc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08c      	sub	sp, #48	@ 0x30
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ae2:	f107 030c 	add.w	r3, r7, #12
 8001ae6:	2224      	movs	r2, #36	@ 0x24
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f00e fdd1 	bl	8010692 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af0:	463b      	mov	r3, r7
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001afa:	4b23      	ldr	r3, [pc, #140]	@ (8001b88 <MX_TIM8_Init+0xac>)
 8001afc:	4a23      	ldr	r2, [pc, #140]	@ (8001b8c <MX_TIM8_Init+0xb0>)
 8001afe:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001b00:	4b21      	ldr	r3, [pc, #132]	@ (8001b88 <MX_TIM8_Init+0xac>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b06:	4b20      	ldr	r3, [pc, #128]	@ (8001b88 <MX_TIM8_Init+0xac>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001b0c:	4b1e      	ldr	r3, [pc, #120]	@ (8001b88 <MX_TIM8_Init+0xac>)
 8001b0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b12:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b14:	4b1c      	ldr	r3, [pc, #112]	@ (8001b88 <MX_TIM8_Init+0xac>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001b1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001b88 <MX_TIM8_Init+0xac>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b20:	4b19      	ldr	r3, [pc, #100]	@ (8001b88 <MX_TIM8_Init+0xac>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b26:	2303      	movs	r3, #3
 8001b28:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b42:	2300      	movs	r3, #0
 8001b44:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001b4a:	f107 030c 	add.w	r3, r7, #12
 8001b4e:	4619      	mov	r1, r3
 8001b50:	480d      	ldr	r0, [pc, #52]	@ (8001b88 <MX_TIM8_Init+0xac>)
 8001b52:	f007 fdb5 	bl	80096c0 <HAL_TIM_Encoder_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001b5c:	f7ff fa7e 	bl	800105c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b60:	2300      	movs	r3, #0
 8001b62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b64:	2300      	movs	r3, #0
 8001b66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b6c:	463b      	mov	r3, r7
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4805      	ldr	r0, [pc, #20]	@ (8001b88 <MX_TIM8_Init+0xac>)
 8001b72:	f008 fe75 	bl	800a860 <HAL_TIMEx_MasterConfigSynchronization>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001b7c:	f7ff fa6e 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001b80:	bf00      	nop
 8001b82:	3730      	adds	r7, #48	@ 0x30
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	24000688 	.word	0x24000688
 8001b8c:	40010400 	.word	0x40010400

08001b90 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b088      	sub	sp, #32
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b96:	f107 0310 	add.w	r3, r7, #16
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	609a      	str	r2, [r3, #8]
 8001ba2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba4:	1d3b      	adds	r3, r7, #4
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001bae:	4b1f      	ldr	r3, [pc, #124]	@ (8001c2c <MX_TIM15_Init+0x9c>)
 8001bb0:	4a1f      	ldr	r2, [pc, #124]	@ (8001c30 <MX_TIM15_Init+0xa0>)
 8001bb2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 19999;
 8001bb4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c2c <MX_TIM15_Init+0x9c>)
 8001bb6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001bba:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8001c2c <MX_TIM15_Init+0x9c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 99;
 8001bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c2c <MX_TIM15_Init+0x9c>)
 8001bc4:	2263      	movs	r2, #99	@ 0x63
 8001bc6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc8:	4b18      	ldr	r3, [pc, #96]	@ (8001c2c <MX_TIM15_Init+0x9c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001bce:	4b17      	ldr	r3, [pc, #92]	@ (8001c2c <MX_TIM15_Init+0x9c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd4:	4b15      	ldr	r3, [pc, #84]	@ (8001c2c <MX_TIM15_Init+0x9c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001bda:	4814      	ldr	r0, [pc, #80]	@ (8001c2c <MX_TIM15_Init+0x9c>)
 8001bdc:	f007 fb3a 	bl	8009254 <HAL_TIM_Base_Init>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8001be6:	f7ff fa39 	bl	800105c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001bf0:	f107 0310 	add.w	r3, r7, #16
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	480d      	ldr	r0, [pc, #52]	@ (8001c2c <MX_TIM15_Init+0x9c>)
 8001bf8:	f008 f8d2 	bl	8009da0 <HAL_TIM_ConfigClockSource>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8001c02:	f7ff fa2b 	bl	800105c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c06:	2300      	movs	r3, #0
 8001c08:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001c0e:	1d3b      	adds	r3, r7, #4
 8001c10:	4619      	mov	r1, r3
 8001c12:	4806      	ldr	r0, [pc, #24]	@ (8001c2c <MX_TIM15_Init+0x9c>)
 8001c14:	f008 fe24 	bl	800a860 <HAL_TIMEx_MasterConfigSynchronization>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8001c1e:	f7ff fa1d 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001c22:	bf00      	nop
 8001c24:	3720      	adds	r7, #32
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	240006d4 	.word	0x240006d4
 8001c30:	40014000 	.word	0x40014000

08001c34 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b090      	sub	sp, #64	@ 0x40
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a69      	ldr	r2, [pc, #420]	@ (8001df8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d12f      	bne.n	8001cb6 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c56:	4b69      	ldr	r3, [pc, #420]	@ (8001dfc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001c58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c5c:	4a67      	ldr	r2, [pc, #412]	@ (8001dfc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c66:	4b65      	ldr	r3, [pc, #404]	@ (8001dfc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001c68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c74:	4b61      	ldr	r3, [pc, #388]	@ (8001dfc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c7a:	4a60      	ldr	r2, [pc, #384]	@ (8001dfc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001c7c:	f043 0310 	orr.w	r3, r3, #16
 8001c80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c84:	4b5d      	ldr	r3, [pc, #372]	@ (8001dfc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c8a:	f003 0310 	and.w	r3, r3, #16
 8001c8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC2_A_Pin|ENC2_B_Pin;
 8001c92:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ca8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cac:	4619      	mov	r1, r3
 8001cae:	4854      	ldr	r0, [pc, #336]	@ (8001e00 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8001cb0:	f002 ffa4 	bl	8004bfc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001cb4:	e09b      	b.n	8001dee <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(tim_encoderHandle->Instance==TIM3)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a52      	ldr	r2, [pc, #328]	@ (8001e04 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d12e      	bne.n	8001d1e <HAL_TIM_Encoder_MspInit+0xea>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cc0:	4b4e      	ldr	r3, [pc, #312]	@ (8001dfc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001cc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cc6:	4a4d      	ldr	r2, [pc, #308]	@ (8001dfc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001cc8:	f043 0302 	orr.w	r3, r3, #2
 8001ccc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001cd0:	4b4a      	ldr	r3, [pc, #296]	@ (8001dfc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001cd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	623b      	str	r3, [r7, #32]
 8001cdc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cde:	4b47      	ldr	r3, [pc, #284]	@ (8001dfc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ce4:	4a45      	ldr	r2, [pc, #276]	@ (8001dfc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001ce6:	f043 0302 	orr.w	r3, r3, #2
 8001cea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cee:	4b43      	ldr	r3, [pc, #268]	@ (8001dfc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	61fb      	str	r3, [r7, #28]
 8001cfa:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ENC4_A_Pin|ENC4_B_Pin;
 8001cfc:	2330      	movs	r3, #48	@ 0x30
 8001cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d00:	2302      	movs	r3, #2
 8001d02:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d14:	4619      	mov	r1, r3
 8001d16:	483c      	ldr	r0, [pc, #240]	@ (8001e08 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001d18:	f002 ff70 	bl	8004bfc <HAL_GPIO_Init>
}
 8001d1c:	e067      	b.n	8001dee <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(tim_encoderHandle->Instance==TIM4)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a3a      	ldr	r2, [pc, #232]	@ (8001e0c <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d12f      	bne.n	8001d88 <HAL_TIM_Encoder_MspInit+0x154>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d28:	4b34      	ldr	r3, [pc, #208]	@ (8001dfc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001d2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d2e:	4a33      	ldr	r2, [pc, #204]	@ (8001dfc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001d30:	f043 0304 	orr.w	r3, r3, #4
 8001d34:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d38:	4b30      	ldr	r3, [pc, #192]	@ (8001dfc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001d3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	61bb      	str	r3, [r7, #24]
 8001d44:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d46:	4b2d      	ldr	r3, [pc, #180]	@ (8001dfc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d4c:	4a2b      	ldr	r2, [pc, #172]	@ (8001dfc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001d4e:	f043 0308 	orr.w	r3, r3, #8
 8001d52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d56:	4b29      	ldr	r3, [pc, #164]	@ (8001dfc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d5c:	f003 0308 	and.w	r3, r3, #8
 8001d60:	617b      	str	r3, [r7, #20]
 8001d62:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ENC1_A_Pin|ENC1_B_Pin;
 8001d64:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d72:	2300      	movs	r3, #0
 8001d74:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d76:	2302      	movs	r3, #2
 8001d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4823      	ldr	r0, [pc, #140]	@ (8001e10 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8001d82:	f002 ff3b 	bl	8004bfc <HAL_GPIO_Init>
}
 8001d86:	e032      	b.n	8001dee <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(tim_encoderHandle->Instance==TIM8)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a21      	ldr	r2, [pc, #132]	@ (8001e14 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d12d      	bne.n	8001dee <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001d92:	4b1a      	ldr	r3, [pc, #104]	@ (8001dfc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001d94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d98:	4a18      	ldr	r2, [pc, #96]	@ (8001dfc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001d9a:	f043 0302 	orr.w	r3, r3, #2
 8001d9e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001da2:	4b16      	ldr	r3, [pc, #88]	@ (8001dfc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001da4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db0:	4b12      	ldr	r3, [pc, #72]	@ (8001dfc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001db6:	4a11      	ldr	r2, [pc, #68]	@ (8001dfc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001db8:	f043 0304 	orr.w	r3, r3, #4
 8001dbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8001dfc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dc6:	f003 0304 	and.w	r3, r3, #4
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC3_A_Pin|ENC3_B_Pin;
 8001dce:	23c0      	movs	r3, #192	@ 0xc0
 8001dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001dde:	2303      	movs	r3, #3
 8001de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001de2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001de6:	4619      	mov	r1, r3
 8001de8:	480b      	ldr	r0, [pc, #44]	@ (8001e18 <HAL_TIM_Encoder_MspInit+0x1e4>)
 8001dea:	f002 ff07 	bl	8004bfc <HAL_GPIO_Init>
}
 8001dee:	bf00      	nop
 8001df0:	3740      	adds	r7, #64	@ 0x40
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40010000 	.word	0x40010000
 8001dfc:	58024400 	.word	0x58024400
 8001e00:	58021000 	.word	0x58021000
 8001e04:	40000400 	.word	0x40000400
 8001e08:	58020400 	.word	0x58020400
 8001e0c:	40000800 	.word	0x40000800
 8001e10:	58020c00 	.word	0x58020c00
 8001e14:	40010400 	.word	0x40010400
 8001e18:	58020800 	.word	0x58020800

08001e1c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e2c:	f040 8082 	bne.w	8001f34 <HAL_TIM_PWM_MspInit+0x118>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e30:	4b86      	ldr	r3, [pc, #536]	@ (800204c <HAL_TIM_PWM_MspInit+0x230>)
 8001e32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e36:	4a85      	ldr	r2, [pc, #532]	@ (800204c <HAL_TIM_PWM_MspInit+0x230>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e40:	4b82      	ldr	r3, [pc, #520]	@ (800204c <HAL_TIM_PWM_MspInit+0x230>)
 8001e42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8001e4e:	4b80      	ldr	r3, [pc, #512]	@ (8002050 <HAL_TIM_PWM_MspInit+0x234>)
 8001e50:	4a80      	ldr	r2, [pc, #512]	@ (8002054 <HAL_TIM_PWM_MspInit+0x238>)
 8001e52:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8001e54:	4b7e      	ldr	r3, [pc, #504]	@ (8002050 <HAL_TIM_PWM_MspInit+0x234>)
 8001e56:	2212      	movs	r2, #18
 8001e58:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e5a:	4b7d      	ldr	r3, [pc, #500]	@ (8002050 <HAL_TIM_PWM_MspInit+0x234>)
 8001e5c:	2240      	movs	r2, #64	@ 0x40
 8001e5e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e60:	4b7b      	ldr	r3, [pc, #492]	@ (8002050 <HAL_TIM_PWM_MspInit+0x234>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001e66:	4b7a      	ldr	r3, [pc, #488]	@ (8002050 <HAL_TIM_PWM_MspInit+0x234>)
 8001e68:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e6c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e6e:	4b78      	ldr	r3, [pc, #480]	@ (8002050 <HAL_TIM_PWM_MspInit+0x234>)
 8001e70:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e74:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e76:	4b76      	ldr	r3, [pc, #472]	@ (8002050 <HAL_TIM_PWM_MspInit+0x234>)
 8001e78:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e7c:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8001e7e:	4b74      	ldr	r3, [pc, #464]	@ (8002050 <HAL_TIM_PWM_MspInit+0x234>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001e84:	4b72      	ldr	r3, [pc, #456]	@ (8002050 <HAL_TIM_PWM_MspInit+0x234>)
 8001e86:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e8a:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001e8c:	4b70      	ldr	r3, [pc, #448]	@ (8002050 <HAL_TIM_PWM_MspInit+0x234>)
 8001e8e:	2204      	movs	r2, #4
 8001e90:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim2_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001e92:	4b6f      	ldr	r3, [pc, #444]	@ (8002050 <HAL_TIM_PWM_MspInit+0x234>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim2_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 8001e98:	4b6d      	ldr	r3, [pc, #436]	@ (8002050 <HAL_TIM_PWM_MspInit+0x234>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim2_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001e9e:	4b6c      	ldr	r3, [pc, #432]	@ (8002050 <HAL_TIM_PWM_MspInit+0x234>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001ea4:	486a      	ldr	r0, [pc, #424]	@ (8002050 <HAL_TIM_PWM_MspInit+0x234>)
 8001ea6:	f000 fd61 	bl	800296c <HAL_DMA_Init>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <HAL_TIM_PWM_MspInit+0x98>
    {
      Error_Handler();
 8001eb0:	f7ff f8d4 	bl	800105c <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a66      	ldr	r2, [pc, #408]	@ (8002050 <HAL_TIM_PWM_MspInit+0x234>)
 8001eb8:	625a      	str	r2, [r3, #36]	@ 0x24
 8001eba:	4a65      	ldr	r2, [pc, #404]	@ (8002050 <HAL_TIM_PWM_MspInit+0x234>)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 8001ec0:	4b65      	ldr	r3, [pc, #404]	@ (8002058 <HAL_TIM_PWM_MspInit+0x23c>)
 8001ec2:	4a66      	ldr	r2, [pc, #408]	@ (800205c <HAL_TIM_PWM_MspInit+0x240>)
 8001ec4:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 8001ec6:	4b64      	ldr	r3, [pc, #400]	@ (8002058 <HAL_TIM_PWM_MspInit+0x23c>)
 8001ec8:	2214      	movs	r2, #20
 8001eca:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ecc:	4b62      	ldr	r3, [pc, #392]	@ (8002058 <HAL_TIM_PWM_MspInit+0x23c>)
 8001ece:	2240      	movs	r2, #64	@ 0x40
 8001ed0:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ed2:	4b61      	ldr	r3, [pc, #388]	@ (8002058 <HAL_TIM_PWM_MspInit+0x23c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001ed8:	4b5f      	ldr	r3, [pc, #380]	@ (8002058 <HAL_TIM_PWM_MspInit+0x23c>)
 8001eda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ede:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ee0:	4b5d      	ldr	r3, [pc, #372]	@ (8002058 <HAL_TIM_PWM_MspInit+0x23c>)
 8001ee2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ee6:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ee8:	4b5b      	ldr	r3, [pc, #364]	@ (8002058 <HAL_TIM_PWM_MspInit+0x23c>)
 8001eea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001eee:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8001ef0:	4b59      	ldr	r3, [pc, #356]	@ (8002058 <HAL_TIM_PWM_MspInit+0x23c>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 8001ef6:	4b58      	ldr	r3, [pc, #352]	@ (8002058 <HAL_TIM_PWM_MspInit+0x23c>)
 8001ef8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001efc:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001efe:	4b56      	ldr	r3, [pc, #344]	@ (8002058 <HAL_TIM_PWM_MspInit+0x23c>)
 8001f00:	2204      	movs	r2, #4
 8001f02:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim2_ch3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001f04:	4b54      	ldr	r3, [pc, #336]	@ (8002058 <HAL_TIM_PWM_MspInit+0x23c>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim2_ch3.Init.MemBurst = DMA_MBURST_SINGLE;
 8001f0a:	4b53      	ldr	r3, [pc, #332]	@ (8002058 <HAL_TIM_PWM_MspInit+0x23c>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim2_ch3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001f10:	4b51      	ldr	r3, [pc, #324]	@ (8002058 <HAL_TIM_PWM_MspInit+0x23c>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8001f16:	4850      	ldr	r0, [pc, #320]	@ (8002058 <HAL_TIM_PWM_MspInit+0x23c>)
 8001f18:	f000 fd28 	bl	800296c <HAL_DMA_Init>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <HAL_TIM_PWM_MspInit+0x10a>
    {
      Error_Handler();
 8001f22:	f7ff f89b 	bl	800105c <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a4b      	ldr	r2, [pc, #300]	@ (8002058 <HAL_TIM_PWM_MspInit+0x23c>)
 8001f2a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001f2c:	4a4a      	ldr	r2, [pc, #296]	@ (8002058 <HAL_TIM_PWM_MspInit+0x23c>)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001f32:	e086      	b.n	8002042 <HAL_TIM_PWM_MspInit+0x226>
  else if(tim_pwmHandle->Instance==TIM5)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a49      	ldr	r2, [pc, #292]	@ (8002060 <HAL_TIM_PWM_MspInit+0x244>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	f040 8081 	bne.w	8002042 <HAL_TIM_PWM_MspInit+0x226>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f40:	4b42      	ldr	r3, [pc, #264]	@ (800204c <HAL_TIM_PWM_MspInit+0x230>)
 8001f42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f46:	4a41      	ldr	r2, [pc, #260]	@ (800204c <HAL_TIM_PWM_MspInit+0x230>)
 8001f48:	f043 0308 	orr.w	r3, r3, #8
 8001f4c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001f50:	4b3e      	ldr	r3, [pc, #248]	@ (800204c <HAL_TIM_PWM_MspInit+0x230>)
 8001f52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	60bb      	str	r3, [r7, #8]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream3;
 8001f5e:	4b41      	ldr	r3, [pc, #260]	@ (8002064 <HAL_TIM_PWM_MspInit+0x248>)
 8001f60:	4a41      	ldr	r2, [pc, #260]	@ (8002068 <HAL_TIM_PWM_MspInit+0x24c>)
 8001f62:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 8001f64:	4b3f      	ldr	r3, [pc, #252]	@ (8002064 <HAL_TIM_PWM_MspInit+0x248>)
 8001f66:	223a      	movs	r2, #58	@ 0x3a
 8001f68:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f6a:	4b3e      	ldr	r3, [pc, #248]	@ (8002064 <HAL_TIM_PWM_MspInit+0x248>)
 8001f6c:	2240      	movs	r2, #64	@ 0x40
 8001f6e:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f70:	4b3c      	ldr	r3, [pc, #240]	@ (8002064 <HAL_TIM_PWM_MspInit+0x248>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001f76:	4b3b      	ldr	r3, [pc, #236]	@ (8002064 <HAL_TIM_PWM_MspInit+0x248>)
 8001f78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f7c:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f7e:	4b39      	ldr	r3, [pc, #228]	@ (8002064 <HAL_TIM_PWM_MspInit+0x248>)
 8001f80:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f84:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f86:	4b37      	ldr	r3, [pc, #220]	@ (8002064 <HAL_TIM_PWM_MspInit+0x248>)
 8001f88:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f8c:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 8001f8e:	4b35      	ldr	r3, [pc, #212]	@ (8002064 <HAL_TIM_PWM_MspInit+0x248>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 8001f94:	4b33      	ldr	r3, [pc, #204]	@ (8002064 <HAL_TIM_PWM_MspInit+0x248>)
 8001f96:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f9a:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001f9c:	4b31      	ldr	r3, [pc, #196]	@ (8002064 <HAL_TIM_PWM_MspInit+0x248>)
 8001f9e:	2204      	movs	r2, #4
 8001fa0:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim5_ch4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001fa2:	4b30      	ldr	r3, [pc, #192]	@ (8002064 <HAL_TIM_PWM_MspInit+0x248>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim5_ch4.Init.MemBurst = DMA_MBURST_SINGLE;
 8001fa8:	4b2e      	ldr	r3, [pc, #184]	@ (8002064 <HAL_TIM_PWM_MspInit+0x248>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim5_ch4.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001fae:	4b2d      	ldr	r3, [pc, #180]	@ (8002064 <HAL_TIM_PWM_MspInit+0x248>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 8001fb4:	482b      	ldr	r0, [pc, #172]	@ (8002064 <HAL_TIM_PWM_MspInit+0x248>)
 8001fb6:	f000 fcd9 	bl	800296c <HAL_DMA_Init>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <HAL_TIM_PWM_MspInit+0x1a8>
      Error_Handler();
 8001fc0:	f7ff f84c 	bl	800105c <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a27      	ldr	r2, [pc, #156]	@ (8002064 <HAL_TIM_PWM_MspInit+0x248>)
 8001fc8:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fca:	4a26      	ldr	r2, [pc, #152]	@ (8002064 <HAL_TIM_PWM_MspInit+0x248>)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 8001fd0:	4b26      	ldr	r3, [pc, #152]	@ (800206c <HAL_TIM_PWM_MspInit+0x250>)
 8001fd2:	4a27      	ldr	r2, [pc, #156]	@ (8002070 <HAL_TIM_PWM_MspInit+0x254>)
 8001fd4:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Request = DMA_REQUEST_TIM5_CH2;
 8001fd6:	4b25      	ldr	r3, [pc, #148]	@ (800206c <HAL_TIM_PWM_MspInit+0x250>)
 8001fd8:	2238      	movs	r2, #56	@ 0x38
 8001fda:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fdc:	4b23      	ldr	r3, [pc, #140]	@ (800206c <HAL_TIM_PWM_MspInit+0x250>)
 8001fde:	2240      	movs	r2, #64	@ 0x40
 8001fe0:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fe2:	4b22      	ldr	r3, [pc, #136]	@ (800206c <HAL_TIM_PWM_MspInit+0x250>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001fe8:	4b20      	ldr	r3, [pc, #128]	@ (800206c <HAL_TIM_PWM_MspInit+0x250>)
 8001fea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fee:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ff0:	4b1e      	ldr	r3, [pc, #120]	@ (800206c <HAL_TIM_PWM_MspInit+0x250>)
 8001ff2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ff6:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ff8:	4b1c      	ldr	r3, [pc, #112]	@ (800206c <HAL_TIM_PWM_MspInit+0x250>)
 8001ffa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ffe:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 8002000:	4b1a      	ldr	r3, [pc, #104]	@ (800206c <HAL_TIM_PWM_MspInit+0x250>)
 8002002:	2200      	movs	r2, #0
 8002004:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8002006:	4b19      	ldr	r3, [pc, #100]	@ (800206c <HAL_TIM_PWM_MspInit+0x250>)
 8002008:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800200c:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800200e:	4b17      	ldr	r3, [pc, #92]	@ (800206c <HAL_TIM_PWM_MspInit+0x250>)
 8002010:	2204      	movs	r2, #4
 8002012:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim5_ch2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002014:	4b15      	ldr	r3, [pc, #84]	@ (800206c <HAL_TIM_PWM_MspInit+0x250>)
 8002016:	2200      	movs	r2, #0
 8002018:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim5_ch2.Init.MemBurst = DMA_MBURST_SINGLE;
 800201a:	4b14      	ldr	r3, [pc, #80]	@ (800206c <HAL_TIM_PWM_MspInit+0x250>)
 800201c:	2200      	movs	r2, #0
 800201e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim5_ch2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002020:	4b12      	ldr	r3, [pc, #72]	@ (800206c <HAL_TIM_PWM_MspInit+0x250>)
 8002022:	2200      	movs	r2, #0
 8002024:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8002026:	4811      	ldr	r0, [pc, #68]	@ (800206c <HAL_TIM_PWM_MspInit+0x250>)
 8002028:	f000 fca0 	bl	800296c <HAL_DMA_Init>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_TIM_PWM_MspInit+0x21a>
      Error_Handler();
 8002032:	f7ff f813 	bl	800105c <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a0c      	ldr	r2, [pc, #48]	@ (800206c <HAL_TIM_PWM_MspInit+0x250>)
 800203a:	629a      	str	r2, [r3, #40]	@ 0x28
 800203c:	4a0b      	ldr	r2, [pc, #44]	@ (800206c <HAL_TIM_PWM_MspInit+0x250>)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002042:	bf00      	nop
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	58024400 	.word	0x58024400
 8002050:	24000720 	.word	0x24000720
 8002054:	40020088 	.word	0x40020088
 8002058:	24000798 	.word	0x24000798
 800205c:	40020028 	.word	0x40020028
 8002060:	40000c00 	.word	0x40000c00
 8002064:	24000810 	.word	0x24000810
 8002068:	40020058 	.word	0x40020058
 800206c:	24000888 	.word	0x24000888
 8002070:	40020070 	.word	0x40020070

08002074 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM15)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a0e      	ldr	r2, [pc, #56]	@ (80020bc <HAL_TIM_Base_MspInit+0x48>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d116      	bne.n	80020b4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002086:	4b0e      	ldr	r3, [pc, #56]	@ (80020c0 <HAL_TIM_Base_MspInit+0x4c>)
 8002088:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800208c:	4a0c      	ldr	r2, [pc, #48]	@ (80020c0 <HAL_TIM_Base_MspInit+0x4c>)
 800208e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002092:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002096:	4b0a      	ldr	r3, [pc, #40]	@ (80020c0 <HAL_TIM_Base_MspInit+0x4c>)
 8002098:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800209c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	68fb      	ldr	r3, [r7, #12]

    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 80020a4:	2200      	movs	r2, #0
 80020a6:	2100      	movs	r1, #0
 80020a8:	2074      	movs	r0, #116	@ 0x74
 80020aa:	f000 fc16 	bl	80028da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 80020ae:	2074      	movs	r0, #116	@ 0x74
 80020b0:	f000 fc2d 	bl	800290e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80020b4:	bf00      	nop
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40014000 	.word	0x40014000
 80020c0:	58024400 	.word	0x58024400

080020c4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08a      	sub	sp, #40	@ 0x28
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020cc:	f107 0314 	add.w	r3, r7, #20
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	609a      	str	r2, [r3, #8]
 80020d8:	60da      	str	r2, [r3, #12]
 80020da:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020e4:	d11f      	bne.n	8002126 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e6:	4b24      	ldr	r3, [pc, #144]	@ (8002178 <HAL_TIM_MspPostInit+0xb4>)
 80020e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020ec:	4a22      	ldr	r2, [pc, #136]	@ (8002178 <HAL_TIM_MspPostInit+0xb4>)
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020f6:	4b20      	ldr	r3, [pc, #128]	@ (8002178 <HAL_TIM_MspPostInit+0xb4>)
 80020f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = M3_Pin|M2_Pin;
 8002104:	2305      	movs	r3, #5
 8002106:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002108:	2302      	movs	r3, #2
 800210a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002110:	2300      	movs	r3, #0
 8002112:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002114:	2301      	movs	r3, #1
 8002116:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002118:	f107 0314 	add.w	r3, r7, #20
 800211c:	4619      	mov	r1, r3
 800211e:	4817      	ldr	r0, [pc, #92]	@ (800217c <HAL_TIM_MspPostInit+0xb8>)
 8002120:	f002 fd6c 	bl	8004bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002124:	e023      	b.n	800216e <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM5)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a15      	ldr	r2, [pc, #84]	@ (8002180 <HAL_TIM_MspPostInit+0xbc>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d11e      	bne.n	800216e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002130:	4b11      	ldr	r3, [pc, #68]	@ (8002178 <HAL_TIM_MspPostInit+0xb4>)
 8002132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002136:	4a10      	ldr	r2, [pc, #64]	@ (8002178 <HAL_TIM_MspPostInit+0xb4>)
 8002138:	f043 0301 	orr.w	r3, r3, #1
 800213c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002140:	4b0d      	ldr	r3, [pc, #52]	@ (8002178 <HAL_TIM_MspPostInit+0xb4>)
 8002142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M4_Pin|M1_Pin;
 800214e:	230a      	movs	r3, #10
 8002150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002152:	2302      	movs	r3, #2
 8002154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215a:	2300      	movs	r3, #0
 800215c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800215e:	2302      	movs	r3, #2
 8002160:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002162:	f107 0314 	add.w	r3, r7, #20
 8002166:	4619      	mov	r1, r3
 8002168:	4804      	ldr	r0, [pc, #16]	@ (800217c <HAL_TIM_MspPostInit+0xb8>)
 800216a:	f002 fd47 	bl	8004bfc <HAL_GPIO_Init>
}
 800216e:	bf00      	nop
 8002170:	3728      	adds	r7, #40	@ 0x28
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	58024400 	.word	0x58024400
 800217c:	58020000 	.word	0x58020000
 8002180:	40000c00 	.word	0x40000c00

08002184 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002184:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002188:	f7fe fa7a 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800218c:	480c      	ldr	r0, [pc, #48]	@ (80021c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800218e:	490d      	ldr	r1, [pc, #52]	@ (80021c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002190:	4a0d      	ldr	r2, [pc, #52]	@ (80021c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002194:	e002      	b.n	800219c <LoopCopyDataInit>

08002196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800219a:	3304      	adds	r3, #4

0800219c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800219c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800219e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021a0:	d3f9      	bcc.n	8002196 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021a2:	4a0a      	ldr	r2, [pc, #40]	@ (80021cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021a4:	4c0a      	ldr	r4, [pc, #40]	@ (80021d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a8:	e001      	b.n	80021ae <LoopFillZerobss>

080021aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021ac:	3204      	adds	r2, #4

080021ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021b0:	d3fb      	bcc.n	80021aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021b2:	f00e fac7 	bl	8010744 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021b6:	f7fe fda5 	bl	8000d04 <main>
  bx  lr
 80021ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021bc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80021c0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80021c4:	240002f4 	.word	0x240002f4
  ldr r2, =_sidata
 80021c8:	08012c10 	.word	0x08012c10
  ldr r2, =_sbss
 80021cc:	240002f4 	.word	0x240002f4
  ldr r4, =_ebss
 80021d0:	240026d4 	.word	0x240026d4

080021d4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021d4:	e7fe      	b.n	80021d4 <ADC3_IRQHandler>
	...

080021d8 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08c      	sub	sp, #48	@ 0x30
 80021dc:	af00      	add	r7, sp, #0
 80021de:	4603      	mov	r3, r0
 80021e0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80021e2:	2300      	movs	r3, #0
 80021e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80021e6:	79fb      	ldrb	r3, [r7, #7]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d009      	beq.n	8002200 <BSP_LED_Init+0x28>
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d006      	beq.n	8002200 <BSP_LED_Init+0x28>
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d003      	beq.n	8002200 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80021f8:	f06f 0301 	mvn.w	r3, #1
 80021fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021fe:	e055      	b.n	80022ac <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10f      	bne.n	8002226 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8002206:	4b2c      	ldr	r3, [pc, #176]	@ (80022b8 <BSP_LED_Init+0xe0>)
 8002208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800220c:	4a2a      	ldr	r2, [pc, #168]	@ (80022b8 <BSP_LED_Init+0xe0>)
 800220e:	f043 0302 	orr.w	r3, r3, #2
 8002212:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002216:	4b28      	ldr	r3, [pc, #160]	@ (80022b8 <BSP_LED_Init+0xe0>)
 8002218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	617b      	str	r3, [r7, #20]
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	e021      	b.n	800226a <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d10f      	bne.n	800224c <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 800222c:	4b22      	ldr	r3, [pc, #136]	@ (80022b8 <BSP_LED_Init+0xe0>)
 800222e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002232:	4a21      	ldr	r2, [pc, #132]	@ (80022b8 <BSP_LED_Init+0xe0>)
 8002234:	f043 0310 	orr.w	r3, r3, #16
 8002238:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800223c:	4b1e      	ldr	r3, [pc, #120]	@ (80022b8 <BSP_LED_Init+0xe0>)
 800223e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002242:	f003 0310 	and.w	r3, r3, #16
 8002246:	613b      	str	r3, [r7, #16]
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	e00e      	b.n	800226a <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 800224c:	4b1a      	ldr	r3, [pc, #104]	@ (80022b8 <BSP_LED_Init+0xe0>)
 800224e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002252:	4a19      	ldr	r2, [pc, #100]	@ (80022b8 <BSP_LED_Init+0xe0>)
 8002254:	f043 0302 	orr.w	r3, r3, #2
 8002258:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800225c:	4b16      	ldr	r3, [pc, #88]	@ (80022b8 <BSP_LED_Init+0xe0>)
 800225e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	4a13      	ldr	r2, [pc, #76]	@ (80022bc <BSP_LED_Init+0xe4>)
 800226e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002272:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002274:	2301      	movs	r3, #1
 8002276:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8002278:	2300      	movs	r3, #0
 800227a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227c:	2303      	movs	r3, #3
 800227e:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	4a0f      	ldr	r2, [pc, #60]	@ (80022c0 <BSP_LED_Init+0xe8>)
 8002284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002288:	f107 0218 	add.w	r2, r7, #24
 800228c:	4611      	mov	r1, r2
 800228e:	4618      	mov	r0, r3
 8002290:	f002 fcb4 	bl	8004bfc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002294:	79fb      	ldrb	r3, [r7, #7]
 8002296:	4a0a      	ldr	r2, [pc, #40]	@ (80022c0 <BSP_LED_Init+0xe8>)
 8002298:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800229c:	79fb      	ldrb	r3, [r7, #7]
 800229e:	4a07      	ldr	r2, [pc, #28]	@ (80022bc <BSP_LED_Init+0xe4>)
 80022a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022a4:	2200      	movs	r2, #0
 80022a6:	4619      	mov	r1, r3
 80022a8:	f002 fe58 	bl	8004f5c <HAL_GPIO_WritePin>
  }

  return ret;
 80022ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3730      	adds	r7, #48	@ 0x30
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	58024400 	.word	0x58024400
 80022bc:	0801285c 	.word	0x0801285c
 80022c0:	24000018 	.word	0x24000018

080022c4 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b088      	sub	sp, #32
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	460a      	mov	r2, r1
 80022ce:	71fb      	strb	r3, [r7, #7]
 80022d0:	4613      	mov	r3, r2
 80022d2:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80022d4:	4b2e      	ldr	r3, [pc, #184]	@ (8002390 <BSP_PB_Init+0xcc>)
 80022d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022da:	4a2d      	ldr	r2, [pc, #180]	@ (8002390 <BSP_PB_Init+0xcc>)
 80022dc:	f043 0304 	orr.w	r3, r3, #4
 80022e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002390 <BSP_PB_Init+0xcc>)
 80022e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022ea:	f003 0304 	and.w	r3, r3, #4
 80022ee:	60bb      	str	r3, [r7, #8]
 80022f0:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80022f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022f6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80022f8:	2302      	movs	r3, #2
 80022fa:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80022fc:	2302      	movs	r3, #2
 80022fe:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8002300:	79bb      	ldrb	r3, [r7, #6]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10c      	bne.n	8002320 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002306:	2300      	movs	r3, #0
 8002308:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800230a:	79fb      	ldrb	r3, [r7, #7]
 800230c:	4a21      	ldr	r2, [pc, #132]	@ (8002394 <BSP_PB_Init+0xd0>)
 800230e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002312:	f107 020c 	add.w	r2, r7, #12
 8002316:	4611      	mov	r1, r2
 8002318:	4618      	mov	r0, r3
 800231a:	f002 fc6f 	bl	8004bfc <HAL_GPIO_Init>
 800231e:	e031      	b.n	8002384 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002320:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002324:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	4a1a      	ldr	r2, [pc, #104]	@ (8002394 <BSP_PB_Init+0xd0>)
 800232a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800232e:	f107 020c 	add.w	r2, r7, #12
 8002332:	4611      	mov	r1, r2
 8002334:	4618      	mov	r0, r3
 8002336:	f002 fc61 	bl	8004bfc <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	4a16      	ldr	r2, [pc, #88]	@ (8002398 <BSP_PB_Init+0xd4>)
 8002340:	441a      	add	r2, r3
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	4915      	ldr	r1, [pc, #84]	@ (800239c <BSP_PB_Init+0xd8>)
 8002346:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800234a:	4619      	mov	r1, r3
 800234c:	4610      	mov	r0, r2
 800234e:	f002 fc04 	bl	8004b5a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8002352:	79fb      	ldrb	r3, [r7, #7]
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	4a10      	ldr	r2, [pc, #64]	@ (8002398 <BSP_PB_Init+0xd4>)
 8002358:	1898      	adds	r0, r3, r2
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	4a10      	ldr	r2, [pc, #64]	@ (80023a0 <BSP_PB_Init+0xdc>)
 800235e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002362:	461a      	mov	r2, r3
 8002364:	2100      	movs	r1, #0
 8002366:	f002 fbd9 	bl	8004b1c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800236a:	2028      	movs	r0, #40	@ 0x28
 800236c:	79fb      	ldrb	r3, [r7, #7]
 800236e:	4a0d      	ldr	r2, [pc, #52]	@ (80023a4 <BSP_PB_Init+0xe0>)
 8002370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002374:	2200      	movs	r2, #0
 8002376:	4619      	mov	r1, r3
 8002378:	f000 faaf 	bl	80028da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800237c:	2328      	movs	r3, #40	@ 0x28
 800237e:	4618      	mov	r0, r3
 8002380:	f000 fac5 	bl	800290e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3720      	adds	r7, #32
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	58024400 	.word	0x58024400
 8002394:	24000024 	.word	0x24000024
 8002398:	24000900 	.word	0x24000900
 800239c:	08012864 	.word	0x08012864
 80023a0:	24000028 	.word	0x24000028
 80023a4:	2400002c 	.word	0x2400002c

080023a8 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80023b2:	79fb      	ldrb	r3, [r7, #7]
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	4a04      	ldr	r2, [pc, #16]	@ (80023c8 <BSP_PB_IRQHandler+0x20>)
 80023b8:	4413      	add	r3, r2
 80023ba:	4618      	mov	r0, r3
 80023bc:	f002 fbe2 	bl	8004b84 <HAL_EXTI_IRQHandler>
}
 80023c0:	bf00      	nop
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	24000900 	.word	0x24000900

080023cc <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
	...

080023e4 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	6039      	str	r1, [r7, #0]
 80023ee:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80023f0:	2300      	movs	r3, #0
 80023f2:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 80023f4:	79fb      	ldrb	r3, [r7, #7]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80023fa:	f06f 0301 	mvn.w	r3, #1
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	e018      	b.n	8002434 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	2294      	movs	r2, #148	@ 0x94
 8002406:	fb02 f303 	mul.w	r3, r2, r3
 800240a:	4a0d      	ldr	r2, [pc, #52]	@ (8002440 <BSP_COM_Init+0x5c>)
 800240c:	4413      	add	r3, r2
 800240e:	4618      	mov	r0, r3
 8002410:	f000 f86e 	bl	80024f0 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	2294      	movs	r2, #148	@ 0x94
 8002418:	fb02 f303 	mul.w	r3, r2, r3
 800241c:	4a08      	ldr	r2, [pc, #32]	@ (8002440 <BSP_COM_Init+0x5c>)
 800241e:	4413      	add	r3, r2
 8002420:	6839      	ldr	r1, [r7, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f000 f80e 	bl	8002444 <MX_USART3_Init>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d002      	beq.n	8002434 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800242e:	f06f 0303 	mvn.w	r3, #3
 8002432:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002434:	68fb      	ldr	r3, [r7, #12]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	24000908 	.word	0x24000908

08002444 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 800244e:	4b15      	ldr	r3, [pc, #84]	@ (80024a4 <MX_USART3_Init+0x60>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	220c      	movs	r2, #12
 8002462:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	895b      	ldrh	r3, [r3, #10]
 8002468:	461a      	mov	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	891b      	ldrh	r3, [r3, #8]
 800247a:	461a      	mov	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	899b      	ldrh	r3, [r3, #12]
 8002484:	461a      	mov	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002490:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f008 fa90 	bl	800a9b8 <HAL_UART_Init>
 8002498:	4603      	mov	r3, r0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	24000014 	.word	0x24000014

080024a8 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 80024b0:	4b09      	ldr	r3, [pc, #36]	@ (80024d8 <__io_putchar+0x30>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	461a      	mov	r2, r3
 80024b6:	2394      	movs	r3, #148	@ 0x94
 80024b8:	fb02 f303 	mul.w	r3, r2, r3
 80024bc:	4a07      	ldr	r2, [pc, #28]	@ (80024dc <__io_putchar+0x34>)
 80024be:	1898      	adds	r0, r3, r2
 80024c0:	1d39      	adds	r1, r7, #4
 80024c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024c6:	2201      	movs	r2, #1
 80024c8:	f008 fad0 	bl	800aa6c <HAL_UART_Transmit>
  return ch;
 80024cc:	687b      	ldr	r3, [r7, #4]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	2400099c 	.word	0x2400099c
 80024dc:	24000908 	.word	0x24000908

080024e0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80024e4:	2000      	movs	r0, #0
 80024e6:	f7ff ff71 	bl	80023cc <BSP_PB_Callback>
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b08a      	sub	sp, #40	@ 0x28
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80024f8:	4b27      	ldr	r3, [pc, #156]	@ (8002598 <COM1_MspInit+0xa8>)
 80024fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024fe:	4a26      	ldr	r2, [pc, #152]	@ (8002598 <COM1_MspInit+0xa8>)
 8002500:	f043 0308 	orr.w	r3, r3, #8
 8002504:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002508:	4b23      	ldr	r3, [pc, #140]	@ (8002598 <COM1_MspInit+0xa8>)
 800250a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8002516:	4b20      	ldr	r3, [pc, #128]	@ (8002598 <COM1_MspInit+0xa8>)
 8002518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800251c:	4a1e      	ldr	r2, [pc, #120]	@ (8002598 <COM1_MspInit+0xa8>)
 800251e:	f043 0308 	orr.w	r3, r3, #8
 8002522:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002526:	4b1c      	ldr	r3, [pc, #112]	@ (8002598 <COM1_MspInit+0xa8>)
 8002528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800252c:	f003 0308 	and.w	r3, r3, #8
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8002534:	4b18      	ldr	r3, [pc, #96]	@ (8002598 <COM1_MspInit+0xa8>)
 8002536:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800253a:	4a17      	ldr	r2, [pc, #92]	@ (8002598 <COM1_MspInit+0xa8>)
 800253c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002540:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002544:	4b14      	ldr	r3, [pc, #80]	@ (8002598 <COM1_MspInit+0xa8>)
 8002546:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800254a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800254e:	60bb      	str	r3, [r7, #8]
 8002550:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8002552:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002556:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002558:	2302      	movs	r3, #2
 800255a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800255c:	2302      	movs	r3, #2
 800255e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002560:	2301      	movs	r3, #1
 8002562:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8002564:	2307      	movs	r3, #7
 8002566:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002568:	f107 0314 	add.w	r3, r7, #20
 800256c:	4619      	mov	r1, r3
 800256e:	480b      	ldr	r0, [pc, #44]	@ (800259c <COM1_MspInit+0xac>)
 8002570:	f002 fb44 	bl	8004bfc <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8002574:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002578:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800257a:	2302      	movs	r3, #2
 800257c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800257e:	2307      	movs	r3, #7
 8002580:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8002582:	f107 0314 	add.w	r3, r7, #20
 8002586:	4619      	mov	r1, r3
 8002588:	4804      	ldr	r0, [pc, #16]	@ (800259c <COM1_MspInit+0xac>)
 800258a:	f002 fb37 	bl	8004bfc <HAL_GPIO_Init>
}
 800258e:	bf00      	nop
 8002590:	3728      	adds	r7, #40	@ 0x28
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	58024400 	.word	0x58024400
 800259c:	58020c00 	.word	0x58020c00

080025a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025a6:	2003      	movs	r0, #3
 80025a8:	f000 f98c 	bl	80028c4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80025ac:	f004 fe50 	bl	8007250 <HAL_RCC_GetSysClockFreq>
 80025b0:	4602      	mov	r2, r0
 80025b2:	4b15      	ldr	r3, [pc, #84]	@ (8002608 <HAL_Init+0x68>)
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	0a1b      	lsrs	r3, r3, #8
 80025b8:	f003 030f 	and.w	r3, r3, #15
 80025bc:	4913      	ldr	r1, [pc, #76]	@ (800260c <HAL_Init+0x6c>)
 80025be:	5ccb      	ldrb	r3, [r1, r3]
 80025c0:	f003 031f 	and.w	r3, r3, #31
 80025c4:	fa22 f303 	lsr.w	r3, r2, r3
 80025c8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80025ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002608 <HAL_Init+0x68>)
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	4a0e      	ldr	r2, [pc, #56]	@ (800260c <HAL_Init+0x6c>)
 80025d4:	5cd3      	ldrb	r3, [r2, r3]
 80025d6:	f003 031f 	and.w	r3, r3, #31
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	fa22 f303 	lsr.w	r3, r2, r3
 80025e0:	4a0b      	ldr	r2, [pc, #44]	@ (8002610 <HAL_Init+0x70>)
 80025e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025e4:	4a0b      	ldr	r2, [pc, #44]	@ (8002614 <HAL_Init+0x74>)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025ea:	2000      	movs	r0, #0
 80025ec:	f000 f814 	bl	8002618 <HAL_InitTick>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e002      	b.n	8002600 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80025fa:	f7fe fd35 	bl	8001068 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	58024400 	.word	0x58024400
 800260c:	0801284c 	.word	0x0801284c
 8002610:	24000004 	.word	0x24000004
 8002614:	24000000 	.word	0x24000000

08002618 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002620:	4b15      	ldr	r3, [pc, #84]	@ (8002678 <HAL_InitTick+0x60>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e021      	b.n	8002670 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800262c:	4b13      	ldr	r3, [pc, #76]	@ (800267c <HAL_InitTick+0x64>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	4b11      	ldr	r3, [pc, #68]	@ (8002678 <HAL_InitTick+0x60>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	4619      	mov	r1, r3
 8002636:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800263a:	fbb3 f3f1 	udiv	r3, r3, r1
 800263e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002642:	4618      	mov	r0, r3
 8002644:	f000 f971 	bl	800292a <HAL_SYSTICK_Config>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e00e      	b.n	8002670 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b0f      	cmp	r3, #15
 8002656:	d80a      	bhi.n	800266e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002658:	2200      	movs	r2, #0
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	f04f 30ff 	mov.w	r0, #4294967295
 8002660:	f000 f93b 	bl	80028da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002664:	4a06      	ldr	r2, [pc, #24]	@ (8002680 <HAL_InitTick+0x68>)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800266a:	2300      	movs	r3, #0
 800266c:	e000      	b.n	8002670 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
}
 8002670:	4618      	mov	r0, r3
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	24000034 	.word	0x24000034
 800267c:	24000000 	.word	0x24000000
 8002680:	24000030 	.word	0x24000030

08002684 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002688:	4b06      	ldr	r3, [pc, #24]	@ (80026a4 <HAL_IncTick+0x20>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	461a      	mov	r2, r3
 800268e:	4b06      	ldr	r3, [pc, #24]	@ (80026a8 <HAL_IncTick+0x24>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4413      	add	r3, r2
 8002694:	4a04      	ldr	r2, [pc, #16]	@ (80026a8 <HAL_IncTick+0x24>)
 8002696:	6013      	str	r3, [r2, #0]
}
 8002698:	bf00      	nop
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	24000034 	.word	0x24000034
 80026a8:	240009a0 	.word	0x240009a0

080026ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return uwTick;
 80026b0:	4b03      	ldr	r3, [pc, #12]	@ (80026c0 <HAL_GetTick+0x14>)
 80026b2:	681b      	ldr	r3, [r3, #0]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	240009a0 	.word	0x240009a0

080026c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026cc:	f7ff ffee 	bl	80026ac <HAL_GetTick>
 80026d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026dc:	d005      	beq.n	80026ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026de:	4b0a      	ldr	r3, [pc, #40]	@ (8002708 <HAL_Delay+0x44>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	461a      	mov	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4413      	add	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026ea:	bf00      	nop
 80026ec:	f7ff ffde 	bl	80026ac <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d8f7      	bhi.n	80026ec <HAL_Delay+0x28>
  {
  }
}
 80026fc:	bf00      	nop
 80026fe:	bf00      	nop
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	24000034 	.word	0x24000034

0800270c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002710:	4b03      	ldr	r3, [pc, #12]	@ (8002720 <HAL_GetREVID+0x14>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	0c1b      	lsrs	r3, r3, #16
}
 8002716:	4618      	mov	r0, r3
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	5c001000 	.word	0x5c001000

08002724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002734:	4b0b      	ldr	r3, [pc, #44]	@ (8002764 <__NVIC_SetPriorityGrouping+0x40>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002740:	4013      	ands	r3, r2
 8002742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800274c:	4b06      	ldr	r3, [pc, #24]	@ (8002768 <__NVIC_SetPriorityGrouping+0x44>)
 800274e:	4313      	orrs	r3, r2
 8002750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002752:	4a04      	ldr	r2, [pc, #16]	@ (8002764 <__NVIC_SetPriorityGrouping+0x40>)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	60d3      	str	r3, [r2, #12]
}
 8002758:	bf00      	nop
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	e000ed00 	.word	0xe000ed00
 8002768:	05fa0000 	.word	0x05fa0000

0800276c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002770:	4b04      	ldr	r3, [pc, #16]	@ (8002784 <__NVIC_GetPriorityGrouping+0x18>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	0a1b      	lsrs	r3, r3, #8
 8002776:	f003 0307 	and.w	r3, r3, #7
}
 800277a:	4618      	mov	r0, r3
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	e000ed00 	.word	0xe000ed00

08002788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002792:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002796:	2b00      	cmp	r3, #0
 8002798:	db0b      	blt.n	80027b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800279a:	88fb      	ldrh	r3, [r7, #6]
 800279c:	f003 021f 	and.w	r2, r3, #31
 80027a0:	4907      	ldr	r1, [pc, #28]	@ (80027c0 <__NVIC_EnableIRQ+0x38>)
 80027a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027a6:	095b      	lsrs	r3, r3, #5
 80027a8:	2001      	movs	r0, #1
 80027aa:	fa00 f202 	lsl.w	r2, r0, r2
 80027ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	e000e100 	.word	0xe000e100

080027c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	6039      	str	r1, [r7, #0]
 80027ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80027d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	db0a      	blt.n	80027ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	490c      	ldr	r1, [pc, #48]	@ (8002810 <__NVIC_SetPriority+0x4c>)
 80027de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027e2:	0112      	lsls	r2, r2, #4
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	440b      	add	r3, r1
 80027e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027ec:	e00a      	b.n	8002804 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	4908      	ldr	r1, [pc, #32]	@ (8002814 <__NVIC_SetPriority+0x50>)
 80027f4:	88fb      	ldrh	r3, [r7, #6]
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	3b04      	subs	r3, #4
 80027fc:	0112      	lsls	r2, r2, #4
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	440b      	add	r3, r1
 8002802:	761a      	strb	r2, [r3, #24]
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	e000e100 	.word	0xe000e100
 8002814:	e000ed00 	.word	0xe000ed00

08002818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002818:	b480      	push	{r7}
 800281a:	b089      	sub	sp, #36	@ 0x24
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	f1c3 0307 	rsb	r3, r3, #7
 8002832:	2b04      	cmp	r3, #4
 8002834:	bf28      	it	cs
 8002836:	2304      	movcs	r3, #4
 8002838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	3304      	adds	r3, #4
 800283e:	2b06      	cmp	r3, #6
 8002840:	d902      	bls.n	8002848 <NVIC_EncodePriority+0x30>
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3b03      	subs	r3, #3
 8002846:	e000      	b.n	800284a <NVIC_EncodePriority+0x32>
 8002848:	2300      	movs	r3, #0
 800284a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800284c:	f04f 32ff 	mov.w	r2, #4294967295
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43da      	mvns	r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	401a      	ands	r2, r3
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002860:	f04f 31ff 	mov.w	r1, #4294967295
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	fa01 f303 	lsl.w	r3, r1, r3
 800286a:	43d9      	mvns	r1, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002870:	4313      	orrs	r3, r2
         );
}
 8002872:	4618      	mov	r0, r3
 8002874:	3724      	adds	r7, #36	@ 0x24
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
	...

08002880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3b01      	subs	r3, #1
 800288c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002890:	d301      	bcc.n	8002896 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002892:	2301      	movs	r3, #1
 8002894:	e00f      	b.n	80028b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002896:	4a0a      	ldr	r2, [pc, #40]	@ (80028c0 <SysTick_Config+0x40>)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3b01      	subs	r3, #1
 800289c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800289e:	210f      	movs	r1, #15
 80028a0:	f04f 30ff 	mov.w	r0, #4294967295
 80028a4:	f7ff ff8e 	bl	80027c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028a8:	4b05      	ldr	r3, [pc, #20]	@ (80028c0 <SysTick_Config+0x40>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ae:	4b04      	ldr	r3, [pc, #16]	@ (80028c0 <SysTick_Config+0x40>)
 80028b0:	2207      	movs	r2, #7
 80028b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	e000e010 	.word	0xe000e010

080028c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7ff ff29 	bl	8002724 <__NVIC_SetPriorityGrouping>
}
 80028d2:	bf00      	nop
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b086      	sub	sp, #24
 80028de:	af00      	add	r7, sp, #0
 80028e0:	4603      	mov	r3, r0
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	607a      	str	r2, [r7, #4]
 80028e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028e8:	f7ff ff40 	bl	800276c <__NVIC_GetPriorityGrouping>
 80028ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	68b9      	ldr	r1, [r7, #8]
 80028f2:	6978      	ldr	r0, [r7, #20]
 80028f4:	f7ff ff90 	bl	8002818 <NVIC_EncodePriority>
 80028f8:	4602      	mov	r2, r0
 80028fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028fe:	4611      	mov	r1, r2
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff ff5f 	bl	80027c4 <__NVIC_SetPriority>
}
 8002906:	bf00      	nop
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b082      	sub	sp, #8
 8002912:	af00      	add	r7, sp, #0
 8002914:	4603      	mov	r3, r0
 8002916:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002918:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff ff33 	bl	8002788 <__NVIC_EnableIRQ>
}
 8002922:	bf00      	nop
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b082      	sub	sp, #8
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7ff ffa4 	bl	8002880 <SysTick_Config>
 8002938:	4603      	mov	r3, r0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
	...

08002944 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8002948:	4b07      	ldr	r3, [pc, #28]	@ (8002968 <HAL_GetCurrentCPUID+0x24>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	091b      	lsrs	r3, r3, #4
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	2b07      	cmp	r3, #7
 8002954:	d101      	bne.n	800295a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8002956:	2303      	movs	r3, #3
 8002958:	e000      	b.n	800295c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 800295a:	2301      	movs	r3, #1
  }
}
 800295c:	4618      	mov	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	e000ed00 	.word	0xe000ed00

0800296c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002974:	f7ff fe9a 	bl	80026ac <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e316      	b.n	8002fb2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a66      	ldr	r2, [pc, #408]	@ (8002b24 <HAL_DMA_Init+0x1b8>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d04a      	beq.n	8002a24 <HAL_DMA_Init+0xb8>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a65      	ldr	r2, [pc, #404]	@ (8002b28 <HAL_DMA_Init+0x1bc>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d045      	beq.n	8002a24 <HAL_DMA_Init+0xb8>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a63      	ldr	r2, [pc, #396]	@ (8002b2c <HAL_DMA_Init+0x1c0>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d040      	beq.n	8002a24 <HAL_DMA_Init+0xb8>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a62      	ldr	r2, [pc, #392]	@ (8002b30 <HAL_DMA_Init+0x1c4>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d03b      	beq.n	8002a24 <HAL_DMA_Init+0xb8>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a60      	ldr	r2, [pc, #384]	@ (8002b34 <HAL_DMA_Init+0x1c8>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d036      	beq.n	8002a24 <HAL_DMA_Init+0xb8>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a5f      	ldr	r2, [pc, #380]	@ (8002b38 <HAL_DMA_Init+0x1cc>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d031      	beq.n	8002a24 <HAL_DMA_Init+0xb8>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a5d      	ldr	r2, [pc, #372]	@ (8002b3c <HAL_DMA_Init+0x1d0>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d02c      	beq.n	8002a24 <HAL_DMA_Init+0xb8>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a5c      	ldr	r2, [pc, #368]	@ (8002b40 <HAL_DMA_Init+0x1d4>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d027      	beq.n	8002a24 <HAL_DMA_Init+0xb8>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a5a      	ldr	r2, [pc, #360]	@ (8002b44 <HAL_DMA_Init+0x1d8>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d022      	beq.n	8002a24 <HAL_DMA_Init+0xb8>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a59      	ldr	r2, [pc, #356]	@ (8002b48 <HAL_DMA_Init+0x1dc>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d01d      	beq.n	8002a24 <HAL_DMA_Init+0xb8>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a57      	ldr	r2, [pc, #348]	@ (8002b4c <HAL_DMA_Init+0x1e0>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d018      	beq.n	8002a24 <HAL_DMA_Init+0xb8>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a56      	ldr	r2, [pc, #344]	@ (8002b50 <HAL_DMA_Init+0x1e4>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d013      	beq.n	8002a24 <HAL_DMA_Init+0xb8>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a54      	ldr	r2, [pc, #336]	@ (8002b54 <HAL_DMA_Init+0x1e8>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d00e      	beq.n	8002a24 <HAL_DMA_Init+0xb8>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a53      	ldr	r2, [pc, #332]	@ (8002b58 <HAL_DMA_Init+0x1ec>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d009      	beq.n	8002a24 <HAL_DMA_Init+0xb8>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a51      	ldr	r2, [pc, #324]	@ (8002b5c <HAL_DMA_Init+0x1f0>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d004      	beq.n	8002a24 <HAL_DMA_Init+0xb8>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a50      	ldr	r2, [pc, #320]	@ (8002b60 <HAL_DMA_Init+0x1f4>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d101      	bne.n	8002a28 <HAL_DMA_Init+0xbc>
 8002a24:	2301      	movs	r3, #1
 8002a26:	e000      	b.n	8002a2a <HAL_DMA_Init+0xbe>
 8002a28:	2300      	movs	r3, #0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 813b 	beq.w	8002ca6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2202      	movs	r2, #2
 8002a34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a37      	ldr	r2, [pc, #220]	@ (8002b24 <HAL_DMA_Init+0x1b8>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d04a      	beq.n	8002ae0 <HAL_DMA_Init+0x174>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a36      	ldr	r2, [pc, #216]	@ (8002b28 <HAL_DMA_Init+0x1bc>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d045      	beq.n	8002ae0 <HAL_DMA_Init+0x174>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a34      	ldr	r2, [pc, #208]	@ (8002b2c <HAL_DMA_Init+0x1c0>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d040      	beq.n	8002ae0 <HAL_DMA_Init+0x174>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a33      	ldr	r2, [pc, #204]	@ (8002b30 <HAL_DMA_Init+0x1c4>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d03b      	beq.n	8002ae0 <HAL_DMA_Init+0x174>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a31      	ldr	r2, [pc, #196]	@ (8002b34 <HAL_DMA_Init+0x1c8>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d036      	beq.n	8002ae0 <HAL_DMA_Init+0x174>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a30      	ldr	r2, [pc, #192]	@ (8002b38 <HAL_DMA_Init+0x1cc>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d031      	beq.n	8002ae0 <HAL_DMA_Init+0x174>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a2e      	ldr	r2, [pc, #184]	@ (8002b3c <HAL_DMA_Init+0x1d0>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d02c      	beq.n	8002ae0 <HAL_DMA_Init+0x174>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a2d      	ldr	r2, [pc, #180]	@ (8002b40 <HAL_DMA_Init+0x1d4>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d027      	beq.n	8002ae0 <HAL_DMA_Init+0x174>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a2b      	ldr	r2, [pc, #172]	@ (8002b44 <HAL_DMA_Init+0x1d8>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d022      	beq.n	8002ae0 <HAL_DMA_Init+0x174>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a2a      	ldr	r2, [pc, #168]	@ (8002b48 <HAL_DMA_Init+0x1dc>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d01d      	beq.n	8002ae0 <HAL_DMA_Init+0x174>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a28      	ldr	r2, [pc, #160]	@ (8002b4c <HAL_DMA_Init+0x1e0>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d018      	beq.n	8002ae0 <HAL_DMA_Init+0x174>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a27      	ldr	r2, [pc, #156]	@ (8002b50 <HAL_DMA_Init+0x1e4>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d013      	beq.n	8002ae0 <HAL_DMA_Init+0x174>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a25      	ldr	r2, [pc, #148]	@ (8002b54 <HAL_DMA_Init+0x1e8>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d00e      	beq.n	8002ae0 <HAL_DMA_Init+0x174>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a24      	ldr	r2, [pc, #144]	@ (8002b58 <HAL_DMA_Init+0x1ec>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d009      	beq.n	8002ae0 <HAL_DMA_Init+0x174>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a22      	ldr	r2, [pc, #136]	@ (8002b5c <HAL_DMA_Init+0x1f0>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d004      	beq.n	8002ae0 <HAL_DMA_Init+0x174>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a21      	ldr	r2, [pc, #132]	@ (8002b60 <HAL_DMA_Init+0x1f4>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d108      	bne.n	8002af2 <HAL_DMA_Init+0x186>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0201 	bic.w	r2, r2, #1
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	e007      	b.n	8002b02 <HAL_DMA_Init+0x196>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 0201 	bic.w	r2, r2, #1
 8002b00:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002b02:	e02f      	b.n	8002b64 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b04:	f7ff fdd2 	bl	80026ac <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b05      	cmp	r3, #5
 8002b10:	d928      	bls.n	8002b64 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2220      	movs	r2, #32
 8002b16:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e246      	b.n	8002fb2 <HAL_DMA_Init+0x646>
 8002b24:	40020010 	.word	0x40020010
 8002b28:	40020028 	.word	0x40020028
 8002b2c:	40020040 	.word	0x40020040
 8002b30:	40020058 	.word	0x40020058
 8002b34:	40020070 	.word	0x40020070
 8002b38:	40020088 	.word	0x40020088
 8002b3c:	400200a0 	.word	0x400200a0
 8002b40:	400200b8 	.word	0x400200b8
 8002b44:	40020410 	.word	0x40020410
 8002b48:	40020428 	.word	0x40020428
 8002b4c:	40020440 	.word	0x40020440
 8002b50:	40020458 	.word	0x40020458
 8002b54:	40020470 	.word	0x40020470
 8002b58:	40020488 	.word	0x40020488
 8002b5c:	400204a0 	.word	0x400204a0
 8002b60:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1c8      	bne.n	8002b04 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	4b83      	ldr	r3, [pc, #524]	@ (8002d8c <HAL_DMA_Init+0x420>)
 8002b7e:	4013      	ands	r3, r2
 8002b80:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002b8a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b96:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ba2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	d107      	bne.n	8002bc8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002bc8:	4b71      	ldr	r3, [pc, #452]	@ (8002d90 <HAL_DMA_Init+0x424>)
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	4b71      	ldr	r3, [pc, #452]	@ (8002d94 <HAL_DMA_Init+0x428>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bd4:	d328      	bcc.n	8002c28 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b28      	cmp	r3, #40	@ 0x28
 8002bdc:	d903      	bls.n	8002be6 <HAL_DMA_Init+0x27a>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b2e      	cmp	r3, #46	@ 0x2e
 8002be4:	d917      	bls.n	8002c16 <HAL_DMA_Init+0x2aa>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b3e      	cmp	r3, #62	@ 0x3e
 8002bec:	d903      	bls.n	8002bf6 <HAL_DMA_Init+0x28a>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b42      	cmp	r3, #66	@ 0x42
 8002bf4:	d90f      	bls.n	8002c16 <HAL_DMA_Init+0x2aa>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b46      	cmp	r3, #70	@ 0x46
 8002bfc:	d903      	bls.n	8002c06 <HAL_DMA_Init+0x29a>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b48      	cmp	r3, #72	@ 0x48
 8002c04:	d907      	bls.n	8002c16 <HAL_DMA_Init+0x2aa>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b4e      	cmp	r3, #78	@ 0x4e
 8002c0c:	d905      	bls.n	8002c1a <HAL_DMA_Init+0x2ae>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b52      	cmp	r3, #82	@ 0x52
 8002c14:	d801      	bhi.n	8002c1a <HAL_DMA_Init+0x2ae>
 8002c16:	2301      	movs	r3, #1
 8002c18:	e000      	b.n	8002c1c <HAL_DMA_Init+0x2b0>
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d003      	beq.n	8002c28 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c26:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	f023 0307 	bic.w	r3, r3, #7
 8002c3e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d117      	bne.n	8002c82 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00e      	beq.n	8002c82 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f001 fdcf 	bl	8004808 <DMA_CheckFifoParam>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d008      	beq.n	8002c82 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2240      	movs	r2, #64	@ 0x40
 8002c74:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e197      	b.n	8002fb2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f001 fd0a 	bl	80046a4 <DMA_CalcBaseAndBitshift>
 8002c90:	4603      	mov	r3, r0
 8002c92:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c98:	f003 031f 	and.w	r3, r3, #31
 8002c9c:	223f      	movs	r2, #63	@ 0x3f
 8002c9e:	409a      	lsls	r2, r3
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	609a      	str	r2, [r3, #8]
 8002ca4:	e0cd      	b.n	8002e42 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a3b      	ldr	r2, [pc, #236]	@ (8002d98 <HAL_DMA_Init+0x42c>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d022      	beq.n	8002cf6 <HAL_DMA_Init+0x38a>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a39      	ldr	r2, [pc, #228]	@ (8002d9c <HAL_DMA_Init+0x430>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d01d      	beq.n	8002cf6 <HAL_DMA_Init+0x38a>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a38      	ldr	r2, [pc, #224]	@ (8002da0 <HAL_DMA_Init+0x434>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d018      	beq.n	8002cf6 <HAL_DMA_Init+0x38a>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a36      	ldr	r2, [pc, #216]	@ (8002da4 <HAL_DMA_Init+0x438>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d013      	beq.n	8002cf6 <HAL_DMA_Init+0x38a>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a35      	ldr	r2, [pc, #212]	@ (8002da8 <HAL_DMA_Init+0x43c>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d00e      	beq.n	8002cf6 <HAL_DMA_Init+0x38a>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a33      	ldr	r2, [pc, #204]	@ (8002dac <HAL_DMA_Init+0x440>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d009      	beq.n	8002cf6 <HAL_DMA_Init+0x38a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a32      	ldr	r2, [pc, #200]	@ (8002db0 <HAL_DMA_Init+0x444>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d004      	beq.n	8002cf6 <HAL_DMA_Init+0x38a>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a30      	ldr	r2, [pc, #192]	@ (8002db4 <HAL_DMA_Init+0x448>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d101      	bne.n	8002cfa <HAL_DMA_Init+0x38e>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <HAL_DMA_Init+0x390>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f000 8097 	beq.w	8002e30 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a24      	ldr	r2, [pc, #144]	@ (8002d98 <HAL_DMA_Init+0x42c>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d021      	beq.n	8002d50 <HAL_DMA_Init+0x3e4>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a22      	ldr	r2, [pc, #136]	@ (8002d9c <HAL_DMA_Init+0x430>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d01c      	beq.n	8002d50 <HAL_DMA_Init+0x3e4>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a21      	ldr	r2, [pc, #132]	@ (8002da0 <HAL_DMA_Init+0x434>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d017      	beq.n	8002d50 <HAL_DMA_Init+0x3e4>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a1f      	ldr	r2, [pc, #124]	@ (8002da4 <HAL_DMA_Init+0x438>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d012      	beq.n	8002d50 <HAL_DMA_Init+0x3e4>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a1e      	ldr	r2, [pc, #120]	@ (8002da8 <HAL_DMA_Init+0x43c>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d00d      	beq.n	8002d50 <HAL_DMA_Init+0x3e4>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a1c      	ldr	r2, [pc, #112]	@ (8002dac <HAL_DMA_Init+0x440>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d008      	beq.n	8002d50 <HAL_DMA_Init+0x3e4>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a1b      	ldr	r2, [pc, #108]	@ (8002db0 <HAL_DMA_Init+0x444>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d003      	beq.n	8002d50 <HAL_DMA_Init+0x3e4>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a19      	ldr	r2, [pc, #100]	@ (8002db4 <HAL_DMA_Init+0x448>)
 8002d4e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2202      	movs	r2, #2
 8002d54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	4b13      	ldr	r3, [pc, #76]	@ (8002db8 <HAL_DMA_Init+0x44c>)
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	2b40      	cmp	r3, #64	@ 0x40
 8002d76:	d021      	beq.n	8002dbc <HAL_DMA_Init+0x450>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	2b80      	cmp	r3, #128	@ 0x80
 8002d7e:	d102      	bne.n	8002d86 <HAL_DMA_Init+0x41a>
 8002d80:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002d84:	e01b      	b.n	8002dbe <HAL_DMA_Init+0x452>
 8002d86:	2300      	movs	r3, #0
 8002d88:	e019      	b.n	8002dbe <HAL_DMA_Init+0x452>
 8002d8a:	bf00      	nop
 8002d8c:	fe10803f 	.word	0xfe10803f
 8002d90:	5c001000 	.word	0x5c001000
 8002d94:	ffff0000 	.word	0xffff0000
 8002d98:	58025408 	.word	0x58025408
 8002d9c:	5802541c 	.word	0x5802541c
 8002da0:	58025430 	.word	0x58025430
 8002da4:	58025444 	.word	0x58025444
 8002da8:	58025458 	.word	0x58025458
 8002dac:	5802546c 	.word	0x5802546c
 8002db0:	58025480 	.word	0x58025480
 8002db4:	58025494 	.word	0x58025494
 8002db8:	fffe000f 	.word	0xfffe000f
 8002dbc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	68d2      	ldr	r2, [r2, #12]
 8002dc2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002dc4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002dcc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002dd4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002ddc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002de4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002dec:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	461a      	mov	r2, r3
 8002e02:	4b6e      	ldr	r3, [pc, #440]	@ (8002fbc <HAL_DMA_Init+0x650>)
 8002e04:	4413      	add	r3, r2
 8002e06:	4a6e      	ldr	r2, [pc, #440]	@ (8002fc0 <HAL_DMA_Init+0x654>)
 8002e08:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0c:	091b      	lsrs	r3, r3, #4
 8002e0e:	009a      	lsls	r2, r3, #2
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f001 fc45 	bl	80046a4 <DMA_CalcBaseAndBitshift>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e22:	f003 031f 	and.w	r3, r3, #31
 8002e26:	2201      	movs	r2, #1
 8002e28:	409a      	lsls	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	605a      	str	r2, [r3, #4]
 8002e2e:	e008      	b.n	8002e42 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2240      	movs	r2, #64	@ 0x40
 8002e34:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2203      	movs	r2, #3
 8002e3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e0b7      	b.n	8002fb2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a5f      	ldr	r2, [pc, #380]	@ (8002fc4 <HAL_DMA_Init+0x658>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d072      	beq.n	8002f32 <HAL_DMA_Init+0x5c6>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a5d      	ldr	r2, [pc, #372]	@ (8002fc8 <HAL_DMA_Init+0x65c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d06d      	beq.n	8002f32 <HAL_DMA_Init+0x5c6>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a5c      	ldr	r2, [pc, #368]	@ (8002fcc <HAL_DMA_Init+0x660>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d068      	beq.n	8002f32 <HAL_DMA_Init+0x5c6>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a5a      	ldr	r2, [pc, #360]	@ (8002fd0 <HAL_DMA_Init+0x664>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d063      	beq.n	8002f32 <HAL_DMA_Init+0x5c6>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a59      	ldr	r2, [pc, #356]	@ (8002fd4 <HAL_DMA_Init+0x668>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d05e      	beq.n	8002f32 <HAL_DMA_Init+0x5c6>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a57      	ldr	r2, [pc, #348]	@ (8002fd8 <HAL_DMA_Init+0x66c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d059      	beq.n	8002f32 <HAL_DMA_Init+0x5c6>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a56      	ldr	r2, [pc, #344]	@ (8002fdc <HAL_DMA_Init+0x670>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d054      	beq.n	8002f32 <HAL_DMA_Init+0x5c6>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a54      	ldr	r2, [pc, #336]	@ (8002fe0 <HAL_DMA_Init+0x674>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d04f      	beq.n	8002f32 <HAL_DMA_Init+0x5c6>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a53      	ldr	r2, [pc, #332]	@ (8002fe4 <HAL_DMA_Init+0x678>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d04a      	beq.n	8002f32 <HAL_DMA_Init+0x5c6>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a51      	ldr	r2, [pc, #324]	@ (8002fe8 <HAL_DMA_Init+0x67c>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d045      	beq.n	8002f32 <HAL_DMA_Init+0x5c6>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a50      	ldr	r2, [pc, #320]	@ (8002fec <HAL_DMA_Init+0x680>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d040      	beq.n	8002f32 <HAL_DMA_Init+0x5c6>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a4e      	ldr	r2, [pc, #312]	@ (8002ff0 <HAL_DMA_Init+0x684>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d03b      	beq.n	8002f32 <HAL_DMA_Init+0x5c6>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a4d      	ldr	r2, [pc, #308]	@ (8002ff4 <HAL_DMA_Init+0x688>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d036      	beq.n	8002f32 <HAL_DMA_Init+0x5c6>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a4b      	ldr	r2, [pc, #300]	@ (8002ff8 <HAL_DMA_Init+0x68c>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d031      	beq.n	8002f32 <HAL_DMA_Init+0x5c6>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a4a      	ldr	r2, [pc, #296]	@ (8002ffc <HAL_DMA_Init+0x690>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d02c      	beq.n	8002f32 <HAL_DMA_Init+0x5c6>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a48      	ldr	r2, [pc, #288]	@ (8003000 <HAL_DMA_Init+0x694>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d027      	beq.n	8002f32 <HAL_DMA_Init+0x5c6>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a47      	ldr	r2, [pc, #284]	@ (8003004 <HAL_DMA_Init+0x698>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d022      	beq.n	8002f32 <HAL_DMA_Init+0x5c6>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a45      	ldr	r2, [pc, #276]	@ (8003008 <HAL_DMA_Init+0x69c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d01d      	beq.n	8002f32 <HAL_DMA_Init+0x5c6>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a44      	ldr	r2, [pc, #272]	@ (800300c <HAL_DMA_Init+0x6a0>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d018      	beq.n	8002f32 <HAL_DMA_Init+0x5c6>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a42      	ldr	r2, [pc, #264]	@ (8003010 <HAL_DMA_Init+0x6a4>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d013      	beq.n	8002f32 <HAL_DMA_Init+0x5c6>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a41      	ldr	r2, [pc, #260]	@ (8003014 <HAL_DMA_Init+0x6a8>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d00e      	beq.n	8002f32 <HAL_DMA_Init+0x5c6>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a3f      	ldr	r2, [pc, #252]	@ (8003018 <HAL_DMA_Init+0x6ac>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d009      	beq.n	8002f32 <HAL_DMA_Init+0x5c6>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a3e      	ldr	r2, [pc, #248]	@ (800301c <HAL_DMA_Init+0x6b0>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d004      	beq.n	8002f32 <HAL_DMA_Init+0x5c6>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a3c      	ldr	r2, [pc, #240]	@ (8003020 <HAL_DMA_Init+0x6b4>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d101      	bne.n	8002f36 <HAL_DMA_Init+0x5ca>
 8002f32:	2301      	movs	r3, #1
 8002f34:	e000      	b.n	8002f38 <HAL_DMA_Init+0x5cc>
 8002f36:	2300      	movs	r3, #0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d032      	beq.n	8002fa2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f001 fcdf 	bl	8004900 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	2b80      	cmp	r3, #128	@ 0x80
 8002f48:	d102      	bne.n	8002f50 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f58:	b2d2      	uxtb	r2, r2
 8002f5a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002f64:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d010      	beq.n	8002f90 <HAL_DMA_Init+0x624>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	2b08      	cmp	r3, #8
 8002f74:	d80c      	bhi.n	8002f90 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f001 fd5c 	bl	8004a34 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002f8c:	605a      	str	r2, [r3, #4]
 8002f8e:	e008      	b.n	8002fa2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3718      	adds	r7, #24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	a7fdabf8 	.word	0xa7fdabf8
 8002fc0:	cccccccd 	.word	0xcccccccd
 8002fc4:	40020010 	.word	0x40020010
 8002fc8:	40020028 	.word	0x40020028
 8002fcc:	40020040 	.word	0x40020040
 8002fd0:	40020058 	.word	0x40020058
 8002fd4:	40020070 	.word	0x40020070
 8002fd8:	40020088 	.word	0x40020088
 8002fdc:	400200a0 	.word	0x400200a0
 8002fe0:	400200b8 	.word	0x400200b8
 8002fe4:	40020410 	.word	0x40020410
 8002fe8:	40020428 	.word	0x40020428
 8002fec:	40020440 	.word	0x40020440
 8002ff0:	40020458 	.word	0x40020458
 8002ff4:	40020470 	.word	0x40020470
 8002ff8:	40020488 	.word	0x40020488
 8002ffc:	400204a0 	.word	0x400204a0
 8003000:	400204b8 	.word	0x400204b8
 8003004:	58025408 	.word	0x58025408
 8003008:	5802541c 	.word	0x5802541c
 800300c:	58025430 	.word	0x58025430
 8003010:	58025444 	.word	0x58025444
 8003014:	58025458 	.word	0x58025458
 8003018:	5802546c 	.word	0x5802546c
 800301c:	58025480 	.word	0x58025480
 8003020:	58025494 	.word	0x58025494

08003024 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
 8003030:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003032:	2300      	movs	r3, #0
 8003034:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e226      	b.n	800348e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003046:	2b01      	cmp	r3, #1
 8003048:	d101      	bne.n	800304e <HAL_DMA_Start_IT+0x2a>
 800304a:	2302      	movs	r3, #2
 800304c:	e21f      	b.n	800348e <HAL_DMA_Start_IT+0x46a>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b01      	cmp	r3, #1
 8003060:	f040 820a 	bne.w	8003478 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2202      	movs	r2, #2
 8003068:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a68      	ldr	r2, [pc, #416]	@ (8003218 <HAL_DMA_Start_IT+0x1f4>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d04a      	beq.n	8003112 <HAL_DMA_Start_IT+0xee>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a66      	ldr	r2, [pc, #408]	@ (800321c <HAL_DMA_Start_IT+0x1f8>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d045      	beq.n	8003112 <HAL_DMA_Start_IT+0xee>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a65      	ldr	r2, [pc, #404]	@ (8003220 <HAL_DMA_Start_IT+0x1fc>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d040      	beq.n	8003112 <HAL_DMA_Start_IT+0xee>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a63      	ldr	r2, [pc, #396]	@ (8003224 <HAL_DMA_Start_IT+0x200>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d03b      	beq.n	8003112 <HAL_DMA_Start_IT+0xee>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a62      	ldr	r2, [pc, #392]	@ (8003228 <HAL_DMA_Start_IT+0x204>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d036      	beq.n	8003112 <HAL_DMA_Start_IT+0xee>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a60      	ldr	r2, [pc, #384]	@ (800322c <HAL_DMA_Start_IT+0x208>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d031      	beq.n	8003112 <HAL_DMA_Start_IT+0xee>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a5f      	ldr	r2, [pc, #380]	@ (8003230 <HAL_DMA_Start_IT+0x20c>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d02c      	beq.n	8003112 <HAL_DMA_Start_IT+0xee>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a5d      	ldr	r2, [pc, #372]	@ (8003234 <HAL_DMA_Start_IT+0x210>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d027      	beq.n	8003112 <HAL_DMA_Start_IT+0xee>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a5c      	ldr	r2, [pc, #368]	@ (8003238 <HAL_DMA_Start_IT+0x214>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d022      	beq.n	8003112 <HAL_DMA_Start_IT+0xee>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a5a      	ldr	r2, [pc, #360]	@ (800323c <HAL_DMA_Start_IT+0x218>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d01d      	beq.n	8003112 <HAL_DMA_Start_IT+0xee>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a59      	ldr	r2, [pc, #356]	@ (8003240 <HAL_DMA_Start_IT+0x21c>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d018      	beq.n	8003112 <HAL_DMA_Start_IT+0xee>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a57      	ldr	r2, [pc, #348]	@ (8003244 <HAL_DMA_Start_IT+0x220>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d013      	beq.n	8003112 <HAL_DMA_Start_IT+0xee>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a56      	ldr	r2, [pc, #344]	@ (8003248 <HAL_DMA_Start_IT+0x224>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d00e      	beq.n	8003112 <HAL_DMA_Start_IT+0xee>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a54      	ldr	r2, [pc, #336]	@ (800324c <HAL_DMA_Start_IT+0x228>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d009      	beq.n	8003112 <HAL_DMA_Start_IT+0xee>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a53      	ldr	r2, [pc, #332]	@ (8003250 <HAL_DMA_Start_IT+0x22c>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d004      	beq.n	8003112 <HAL_DMA_Start_IT+0xee>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a51      	ldr	r2, [pc, #324]	@ (8003254 <HAL_DMA_Start_IT+0x230>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d108      	bne.n	8003124 <HAL_DMA_Start_IT+0x100>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 0201 	bic.w	r2, r2, #1
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	e007      	b.n	8003134 <HAL_DMA_Start_IT+0x110>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0201 	bic.w	r2, r2, #1
 8003132:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	68b9      	ldr	r1, [r7, #8]
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f001 f906 	bl	800434c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a34      	ldr	r2, [pc, #208]	@ (8003218 <HAL_DMA_Start_IT+0x1f4>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d04a      	beq.n	80031e0 <HAL_DMA_Start_IT+0x1bc>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a33      	ldr	r2, [pc, #204]	@ (800321c <HAL_DMA_Start_IT+0x1f8>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d045      	beq.n	80031e0 <HAL_DMA_Start_IT+0x1bc>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a31      	ldr	r2, [pc, #196]	@ (8003220 <HAL_DMA_Start_IT+0x1fc>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d040      	beq.n	80031e0 <HAL_DMA_Start_IT+0x1bc>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a30      	ldr	r2, [pc, #192]	@ (8003224 <HAL_DMA_Start_IT+0x200>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d03b      	beq.n	80031e0 <HAL_DMA_Start_IT+0x1bc>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a2e      	ldr	r2, [pc, #184]	@ (8003228 <HAL_DMA_Start_IT+0x204>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d036      	beq.n	80031e0 <HAL_DMA_Start_IT+0x1bc>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a2d      	ldr	r2, [pc, #180]	@ (800322c <HAL_DMA_Start_IT+0x208>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d031      	beq.n	80031e0 <HAL_DMA_Start_IT+0x1bc>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a2b      	ldr	r2, [pc, #172]	@ (8003230 <HAL_DMA_Start_IT+0x20c>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d02c      	beq.n	80031e0 <HAL_DMA_Start_IT+0x1bc>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a2a      	ldr	r2, [pc, #168]	@ (8003234 <HAL_DMA_Start_IT+0x210>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d027      	beq.n	80031e0 <HAL_DMA_Start_IT+0x1bc>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a28      	ldr	r2, [pc, #160]	@ (8003238 <HAL_DMA_Start_IT+0x214>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d022      	beq.n	80031e0 <HAL_DMA_Start_IT+0x1bc>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a27      	ldr	r2, [pc, #156]	@ (800323c <HAL_DMA_Start_IT+0x218>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d01d      	beq.n	80031e0 <HAL_DMA_Start_IT+0x1bc>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a25      	ldr	r2, [pc, #148]	@ (8003240 <HAL_DMA_Start_IT+0x21c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d018      	beq.n	80031e0 <HAL_DMA_Start_IT+0x1bc>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a24      	ldr	r2, [pc, #144]	@ (8003244 <HAL_DMA_Start_IT+0x220>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d013      	beq.n	80031e0 <HAL_DMA_Start_IT+0x1bc>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a22      	ldr	r2, [pc, #136]	@ (8003248 <HAL_DMA_Start_IT+0x224>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d00e      	beq.n	80031e0 <HAL_DMA_Start_IT+0x1bc>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a21      	ldr	r2, [pc, #132]	@ (800324c <HAL_DMA_Start_IT+0x228>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d009      	beq.n	80031e0 <HAL_DMA_Start_IT+0x1bc>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a1f      	ldr	r2, [pc, #124]	@ (8003250 <HAL_DMA_Start_IT+0x22c>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d004      	beq.n	80031e0 <HAL_DMA_Start_IT+0x1bc>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a1e      	ldr	r2, [pc, #120]	@ (8003254 <HAL_DMA_Start_IT+0x230>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d101      	bne.n	80031e4 <HAL_DMA_Start_IT+0x1c0>
 80031e0:	2301      	movs	r3, #1
 80031e2:	e000      	b.n	80031e6 <HAL_DMA_Start_IT+0x1c2>
 80031e4:	2300      	movs	r3, #0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d036      	beq.n	8003258 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f023 021e 	bic.w	r2, r3, #30
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f042 0216 	orr.w	r2, r2, #22
 80031fc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003202:	2b00      	cmp	r3, #0
 8003204:	d03e      	beq.n	8003284 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f042 0208 	orr.w	r2, r2, #8
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	e035      	b.n	8003284 <HAL_DMA_Start_IT+0x260>
 8003218:	40020010 	.word	0x40020010
 800321c:	40020028 	.word	0x40020028
 8003220:	40020040 	.word	0x40020040
 8003224:	40020058 	.word	0x40020058
 8003228:	40020070 	.word	0x40020070
 800322c:	40020088 	.word	0x40020088
 8003230:	400200a0 	.word	0x400200a0
 8003234:	400200b8 	.word	0x400200b8
 8003238:	40020410 	.word	0x40020410
 800323c:	40020428 	.word	0x40020428
 8003240:	40020440 	.word	0x40020440
 8003244:	40020458 	.word	0x40020458
 8003248:	40020470 	.word	0x40020470
 800324c:	40020488 	.word	0x40020488
 8003250:	400204a0 	.word	0x400204a0
 8003254:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f023 020e 	bic.w	r2, r3, #14
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 020a 	orr.w	r2, r2, #10
 800326a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003270:	2b00      	cmp	r3, #0
 8003272:	d007      	beq.n	8003284 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f042 0204 	orr.w	r2, r2, #4
 8003282:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a83      	ldr	r2, [pc, #524]	@ (8003498 <HAL_DMA_Start_IT+0x474>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d072      	beq.n	8003374 <HAL_DMA_Start_IT+0x350>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a82      	ldr	r2, [pc, #520]	@ (800349c <HAL_DMA_Start_IT+0x478>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d06d      	beq.n	8003374 <HAL_DMA_Start_IT+0x350>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a80      	ldr	r2, [pc, #512]	@ (80034a0 <HAL_DMA_Start_IT+0x47c>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d068      	beq.n	8003374 <HAL_DMA_Start_IT+0x350>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a7f      	ldr	r2, [pc, #508]	@ (80034a4 <HAL_DMA_Start_IT+0x480>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d063      	beq.n	8003374 <HAL_DMA_Start_IT+0x350>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a7d      	ldr	r2, [pc, #500]	@ (80034a8 <HAL_DMA_Start_IT+0x484>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d05e      	beq.n	8003374 <HAL_DMA_Start_IT+0x350>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a7c      	ldr	r2, [pc, #496]	@ (80034ac <HAL_DMA_Start_IT+0x488>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d059      	beq.n	8003374 <HAL_DMA_Start_IT+0x350>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a7a      	ldr	r2, [pc, #488]	@ (80034b0 <HAL_DMA_Start_IT+0x48c>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d054      	beq.n	8003374 <HAL_DMA_Start_IT+0x350>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a79      	ldr	r2, [pc, #484]	@ (80034b4 <HAL_DMA_Start_IT+0x490>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d04f      	beq.n	8003374 <HAL_DMA_Start_IT+0x350>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a77      	ldr	r2, [pc, #476]	@ (80034b8 <HAL_DMA_Start_IT+0x494>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d04a      	beq.n	8003374 <HAL_DMA_Start_IT+0x350>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a76      	ldr	r2, [pc, #472]	@ (80034bc <HAL_DMA_Start_IT+0x498>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d045      	beq.n	8003374 <HAL_DMA_Start_IT+0x350>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a74      	ldr	r2, [pc, #464]	@ (80034c0 <HAL_DMA_Start_IT+0x49c>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d040      	beq.n	8003374 <HAL_DMA_Start_IT+0x350>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a73      	ldr	r2, [pc, #460]	@ (80034c4 <HAL_DMA_Start_IT+0x4a0>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d03b      	beq.n	8003374 <HAL_DMA_Start_IT+0x350>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a71      	ldr	r2, [pc, #452]	@ (80034c8 <HAL_DMA_Start_IT+0x4a4>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d036      	beq.n	8003374 <HAL_DMA_Start_IT+0x350>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a70      	ldr	r2, [pc, #448]	@ (80034cc <HAL_DMA_Start_IT+0x4a8>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d031      	beq.n	8003374 <HAL_DMA_Start_IT+0x350>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a6e      	ldr	r2, [pc, #440]	@ (80034d0 <HAL_DMA_Start_IT+0x4ac>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d02c      	beq.n	8003374 <HAL_DMA_Start_IT+0x350>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a6d      	ldr	r2, [pc, #436]	@ (80034d4 <HAL_DMA_Start_IT+0x4b0>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d027      	beq.n	8003374 <HAL_DMA_Start_IT+0x350>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a6b      	ldr	r2, [pc, #428]	@ (80034d8 <HAL_DMA_Start_IT+0x4b4>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d022      	beq.n	8003374 <HAL_DMA_Start_IT+0x350>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a6a      	ldr	r2, [pc, #424]	@ (80034dc <HAL_DMA_Start_IT+0x4b8>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d01d      	beq.n	8003374 <HAL_DMA_Start_IT+0x350>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a68      	ldr	r2, [pc, #416]	@ (80034e0 <HAL_DMA_Start_IT+0x4bc>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d018      	beq.n	8003374 <HAL_DMA_Start_IT+0x350>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a67      	ldr	r2, [pc, #412]	@ (80034e4 <HAL_DMA_Start_IT+0x4c0>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d013      	beq.n	8003374 <HAL_DMA_Start_IT+0x350>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a65      	ldr	r2, [pc, #404]	@ (80034e8 <HAL_DMA_Start_IT+0x4c4>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d00e      	beq.n	8003374 <HAL_DMA_Start_IT+0x350>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a64      	ldr	r2, [pc, #400]	@ (80034ec <HAL_DMA_Start_IT+0x4c8>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d009      	beq.n	8003374 <HAL_DMA_Start_IT+0x350>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a62      	ldr	r2, [pc, #392]	@ (80034f0 <HAL_DMA_Start_IT+0x4cc>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d004      	beq.n	8003374 <HAL_DMA_Start_IT+0x350>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a61      	ldr	r2, [pc, #388]	@ (80034f4 <HAL_DMA_Start_IT+0x4d0>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d101      	bne.n	8003378 <HAL_DMA_Start_IT+0x354>
 8003374:	2301      	movs	r3, #1
 8003376:	e000      	b.n	800337a <HAL_DMA_Start_IT+0x356>
 8003378:	2300      	movs	r3, #0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d01a      	beq.n	80033b4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d007      	beq.n	800339c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003396:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800339a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d007      	beq.n	80033b4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033b2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a37      	ldr	r2, [pc, #220]	@ (8003498 <HAL_DMA_Start_IT+0x474>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d04a      	beq.n	8003454 <HAL_DMA_Start_IT+0x430>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a36      	ldr	r2, [pc, #216]	@ (800349c <HAL_DMA_Start_IT+0x478>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d045      	beq.n	8003454 <HAL_DMA_Start_IT+0x430>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a34      	ldr	r2, [pc, #208]	@ (80034a0 <HAL_DMA_Start_IT+0x47c>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d040      	beq.n	8003454 <HAL_DMA_Start_IT+0x430>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a33      	ldr	r2, [pc, #204]	@ (80034a4 <HAL_DMA_Start_IT+0x480>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d03b      	beq.n	8003454 <HAL_DMA_Start_IT+0x430>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a31      	ldr	r2, [pc, #196]	@ (80034a8 <HAL_DMA_Start_IT+0x484>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d036      	beq.n	8003454 <HAL_DMA_Start_IT+0x430>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a30      	ldr	r2, [pc, #192]	@ (80034ac <HAL_DMA_Start_IT+0x488>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d031      	beq.n	8003454 <HAL_DMA_Start_IT+0x430>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a2e      	ldr	r2, [pc, #184]	@ (80034b0 <HAL_DMA_Start_IT+0x48c>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d02c      	beq.n	8003454 <HAL_DMA_Start_IT+0x430>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a2d      	ldr	r2, [pc, #180]	@ (80034b4 <HAL_DMA_Start_IT+0x490>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d027      	beq.n	8003454 <HAL_DMA_Start_IT+0x430>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a2b      	ldr	r2, [pc, #172]	@ (80034b8 <HAL_DMA_Start_IT+0x494>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d022      	beq.n	8003454 <HAL_DMA_Start_IT+0x430>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a2a      	ldr	r2, [pc, #168]	@ (80034bc <HAL_DMA_Start_IT+0x498>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d01d      	beq.n	8003454 <HAL_DMA_Start_IT+0x430>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a28      	ldr	r2, [pc, #160]	@ (80034c0 <HAL_DMA_Start_IT+0x49c>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d018      	beq.n	8003454 <HAL_DMA_Start_IT+0x430>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a27      	ldr	r2, [pc, #156]	@ (80034c4 <HAL_DMA_Start_IT+0x4a0>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d013      	beq.n	8003454 <HAL_DMA_Start_IT+0x430>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a25      	ldr	r2, [pc, #148]	@ (80034c8 <HAL_DMA_Start_IT+0x4a4>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d00e      	beq.n	8003454 <HAL_DMA_Start_IT+0x430>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a24      	ldr	r2, [pc, #144]	@ (80034cc <HAL_DMA_Start_IT+0x4a8>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d009      	beq.n	8003454 <HAL_DMA_Start_IT+0x430>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a22      	ldr	r2, [pc, #136]	@ (80034d0 <HAL_DMA_Start_IT+0x4ac>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d004      	beq.n	8003454 <HAL_DMA_Start_IT+0x430>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a21      	ldr	r2, [pc, #132]	@ (80034d4 <HAL_DMA_Start_IT+0x4b0>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d108      	bne.n	8003466 <HAL_DMA_Start_IT+0x442>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0201 	orr.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	e012      	b.n	800348c <HAL_DMA_Start_IT+0x468>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f042 0201 	orr.w	r2, r2, #1
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	e009      	b.n	800348c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800347e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800348c:	7dfb      	ldrb	r3, [r7, #23]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	40020010 	.word	0x40020010
 800349c:	40020028 	.word	0x40020028
 80034a0:	40020040 	.word	0x40020040
 80034a4:	40020058 	.word	0x40020058
 80034a8:	40020070 	.word	0x40020070
 80034ac:	40020088 	.word	0x40020088
 80034b0:	400200a0 	.word	0x400200a0
 80034b4:	400200b8 	.word	0x400200b8
 80034b8:	40020410 	.word	0x40020410
 80034bc:	40020428 	.word	0x40020428
 80034c0:	40020440 	.word	0x40020440
 80034c4:	40020458 	.word	0x40020458
 80034c8:	40020470 	.word	0x40020470
 80034cc:	40020488 	.word	0x40020488
 80034d0:	400204a0 	.word	0x400204a0
 80034d4:	400204b8 	.word	0x400204b8
 80034d8:	58025408 	.word	0x58025408
 80034dc:	5802541c 	.word	0x5802541c
 80034e0:	58025430 	.word	0x58025430
 80034e4:	58025444 	.word	0x58025444
 80034e8:	58025458 	.word	0x58025458
 80034ec:	5802546c 	.word	0x5802546c
 80034f0:	58025480 	.word	0x58025480
 80034f4:	58025494 	.word	0x58025494

080034f8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b08a      	sub	sp, #40	@ 0x28
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003500:	2300      	movs	r3, #0
 8003502:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003504:	4b67      	ldr	r3, [pc, #412]	@ (80036a4 <HAL_DMA_IRQHandler+0x1ac>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a67      	ldr	r2, [pc, #412]	@ (80036a8 <HAL_DMA_IRQHandler+0x1b0>)
 800350a:	fba2 2303 	umull	r2, r3, r2, r3
 800350e:	0a9b      	lsrs	r3, r3, #10
 8003510:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003516:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800351c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a5f      	ldr	r2, [pc, #380]	@ (80036ac <HAL_DMA_IRQHandler+0x1b4>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d04a      	beq.n	80035ca <HAL_DMA_IRQHandler+0xd2>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a5d      	ldr	r2, [pc, #372]	@ (80036b0 <HAL_DMA_IRQHandler+0x1b8>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d045      	beq.n	80035ca <HAL_DMA_IRQHandler+0xd2>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a5c      	ldr	r2, [pc, #368]	@ (80036b4 <HAL_DMA_IRQHandler+0x1bc>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d040      	beq.n	80035ca <HAL_DMA_IRQHandler+0xd2>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a5a      	ldr	r2, [pc, #360]	@ (80036b8 <HAL_DMA_IRQHandler+0x1c0>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d03b      	beq.n	80035ca <HAL_DMA_IRQHandler+0xd2>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a59      	ldr	r2, [pc, #356]	@ (80036bc <HAL_DMA_IRQHandler+0x1c4>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d036      	beq.n	80035ca <HAL_DMA_IRQHandler+0xd2>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a57      	ldr	r2, [pc, #348]	@ (80036c0 <HAL_DMA_IRQHandler+0x1c8>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d031      	beq.n	80035ca <HAL_DMA_IRQHandler+0xd2>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a56      	ldr	r2, [pc, #344]	@ (80036c4 <HAL_DMA_IRQHandler+0x1cc>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d02c      	beq.n	80035ca <HAL_DMA_IRQHandler+0xd2>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a54      	ldr	r2, [pc, #336]	@ (80036c8 <HAL_DMA_IRQHandler+0x1d0>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d027      	beq.n	80035ca <HAL_DMA_IRQHandler+0xd2>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a53      	ldr	r2, [pc, #332]	@ (80036cc <HAL_DMA_IRQHandler+0x1d4>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d022      	beq.n	80035ca <HAL_DMA_IRQHandler+0xd2>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a51      	ldr	r2, [pc, #324]	@ (80036d0 <HAL_DMA_IRQHandler+0x1d8>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d01d      	beq.n	80035ca <HAL_DMA_IRQHandler+0xd2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a50      	ldr	r2, [pc, #320]	@ (80036d4 <HAL_DMA_IRQHandler+0x1dc>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d018      	beq.n	80035ca <HAL_DMA_IRQHandler+0xd2>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a4e      	ldr	r2, [pc, #312]	@ (80036d8 <HAL_DMA_IRQHandler+0x1e0>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d013      	beq.n	80035ca <HAL_DMA_IRQHandler+0xd2>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a4d      	ldr	r2, [pc, #308]	@ (80036dc <HAL_DMA_IRQHandler+0x1e4>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d00e      	beq.n	80035ca <HAL_DMA_IRQHandler+0xd2>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a4b      	ldr	r2, [pc, #300]	@ (80036e0 <HAL_DMA_IRQHandler+0x1e8>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d009      	beq.n	80035ca <HAL_DMA_IRQHandler+0xd2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a4a      	ldr	r2, [pc, #296]	@ (80036e4 <HAL_DMA_IRQHandler+0x1ec>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d004      	beq.n	80035ca <HAL_DMA_IRQHandler+0xd2>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a48      	ldr	r2, [pc, #288]	@ (80036e8 <HAL_DMA_IRQHandler+0x1f0>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d101      	bne.n	80035ce <HAL_DMA_IRQHandler+0xd6>
 80035ca:	2301      	movs	r3, #1
 80035cc:	e000      	b.n	80035d0 <HAL_DMA_IRQHandler+0xd8>
 80035ce:	2300      	movs	r3, #0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 842b 	beq.w	8003e2c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035da:	f003 031f 	and.w	r3, r3, #31
 80035de:	2208      	movs	r2, #8
 80035e0:	409a      	lsls	r2, r3
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	4013      	ands	r3, r2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 80a2 	beq.w	8003730 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a2e      	ldr	r2, [pc, #184]	@ (80036ac <HAL_DMA_IRQHandler+0x1b4>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d04a      	beq.n	800368c <HAL_DMA_IRQHandler+0x194>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a2d      	ldr	r2, [pc, #180]	@ (80036b0 <HAL_DMA_IRQHandler+0x1b8>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d045      	beq.n	800368c <HAL_DMA_IRQHandler+0x194>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a2b      	ldr	r2, [pc, #172]	@ (80036b4 <HAL_DMA_IRQHandler+0x1bc>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d040      	beq.n	800368c <HAL_DMA_IRQHandler+0x194>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a2a      	ldr	r2, [pc, #168]	@ (80036b8 <HAL_DMA_IRQHandler+0x1c0>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d03b      	beq.n	800368c <HAL_DMA_IRQHandler+0x194>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a28      	ldr	r2, [pc, #160]	@ (80036bc <HAL_DMA_IRQHandler+0x1c4>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d036      	beq.n	800368c <HAL_DMA_IRQHandler+0x194>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a27      	ldr	r2, [pc, #156]	@ (80036c0 <HAL_DMA_IRQHandler+0x1c8>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d031      	beq.n	800368c <HAL_DMA_IRQHandler+0x194>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a25      	ldr	r2, [pc, #148]	@ (80036c4 <HAL_DMA_IRQHandler+0x1cc>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d02c      	beq.n	800368c <HAL_DMA_IRQHandler+0x194>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a24      	ldr	r2, [pc, #144]	@ (80036c8 <HAL_DMA_IRQHandler+0x1d0>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d027      	beq.n	800368c <HAL_DMA_IRQHandler+0x194>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a22      	ldr	r2, [pc, #136]	@ (80036cc <HAL_DMA_IRQHandler+0x1d4>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d022      	beq.n	800368c <HAL_DMA_IRQHandler+0x194>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a21      	ldr	r2, [pc, #132]	@ (80036d0 <HAL_DMA_IRQHandler+0x1d8>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d01d      	beq.n	800368c <HAL_DMA_IRQHandler+0x194>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a1f      	ldr	r2, [pc, #124]	@ (80036d4 <HAL_DMA_IRQHandler+0x1dc>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d018      	beq.n	800368c <HAL_DMA_IRQHandler+0x194>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a1e      	ldr	r2, [pc, #120]	@ (80036d8 <HAL_DMA_IRQHandler+0x1e0>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d013      	beq.n	800368c <HAL_DMA_IRQHandler+0x194>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a1c      	ldr	r2, [pc, #112]	@ (80036dc <HAL_DMA_IRQHandler+0x1e4>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d00e      	beq.n	800368c <HAL_DMA_IRQHandler+0x194>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a1b      	ldr	r2, [pc, #108]	@ (80036e0 <HAL_DMA_IRQHandler+0x1e8>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d009      	beq.n	800368c <HAL_DMA_IRQHandler+0x194>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a19      	ldr	r2, [pc, #100]	@ (80036e4 <HAL_DMA_IRQHandler+0x1ec>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d004      	beq.n	800368c <HAL_DMA_IRQHandler+0x194>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a18      	ldr	r2, [pc, #96]	@ (80036e8 <HAL_DMA_IRQHandler+0x1f0>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d12f      	bne.n	80036ec <HAL_DMA_IRQHandler+0x1f4>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0304 	and.w	r3, r3, #4
 8003696:	2b00      	cmp	r3, #0
 8003698:	bf14      	ite	ne
 800369a:	2301      	movne	r3, #1
 800369c:	2300      	moveq	r3, #0
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	e02e      	b.n	8003700 <HAL_DMA_IRQHandler+0x208>
 80036a2:	bf00      	nop
 80036a4:	24000000 	.word	0x24000000
 80036a8:	1b4e81b5 	.word	0x1b4e81b5
 80036ac:	40020010 	.word	0x40020010
 80036b0:	40020028 	.word	0x40020028
 80036b4:	40020040 	.word	0x40020040
 80036b8:	40020058 	.word	0x40020058
 80036bc:	40020070 	.word	0x40020070
 80036c0:	40020088 	.word	0x40020088
 80036c4:	400200a0 	.word	0x400200a0
 80036c8:	400200b8 	.word	0x400200b8
 80036cc:	40020410 	.word	0x40020410
 80036d0:	40020428 	.word	0x40020428
 80036d4:	40020440 	.word	0x40020440
 80036d8:	40020458 	.word	0x40020458
 80036dc:	40020470 	.word	0x40020470
 80036e0:	40020488 	.word	0x40020488
 80036e4:	400204a0 	.word	0x400204a0
 80036e8:	400204b8 	.word	0x400204b8
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	bf14      	ite	ne
 80036fa:	2301      	movne	r3, #1
 80036fc:	2300      	moveq	r3, #0
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b00      	cmp	r3, #0
 8003702:	d015      	beq.n	8003730 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0204 	bic.w	r2, r2, #4
 8003712:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003718:	f003 031f 	and.w	r3, r3, #31
 800371c:	2208      	movs	r2, #8
 800371e:	409a      	lsls	r2, r3
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003728:	f043 0201 	orr.w	r2, r3, #1
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003734:	f003 031f 	and.w	r3, r3, #31
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	fa22 f303 	lsr.w	r3, r2, r3
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d06e      	beq.n	8003824 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a69      	ldr	r2, [pc, #420]	@ (80038f0 <HAL_DMA_IRQHandler+0x3f8>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d04a      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x2ee>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a67      	ldr	r2, [pc, #412]	@ (80038f4 <HAL_DMA_IRQHandler+0x3fc>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d045      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x2ee>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a66      	ldr	r2, [pc, #408]	@ (80038f8 <HAL_DMA_IRQHandler+0x400>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d040      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x2ee>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a64      	ldr	r2, [pc, #400]	@ (80038fc <HAL_DMA_IRQHandler+0x404>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d03b      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x2ee>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a63      	ldr	r2, [pc, #396]	@ (8003900 <HAL_DMA_IRQHandler+0x408>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d036      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x2ee>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a61      	ldr	r2, [pc, #388]	@ (8003904 <HAL_DMA_IRQHandler+0x40c>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d031      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x2ee>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a60      	ldr	r2, [pc, #384]	@ (8003908 <HAL_DMA_IRQHandler+0x410>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d02c      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x2ee>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a5e      	ldr	r2, [pc, #376]	@ (800390c <HAL_DMA_IRQHandler+0x414>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d027      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x2ee>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a5d      	ldr	r2, [pc, #372]	@ (8003910 <HAL_DMA_IRQHandler+0x418>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d022      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x2ee>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a5b      	ldr	r2, [pc, #364]	@ (8003914 <HAL_DMA_IRQHandler+0x41c>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d01d      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x2ee>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a5a      	ldr	r2, [pc, #360]	@ (8003918 <HAL_DMA_IRQHandler+0x420>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d018      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x2ee>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a58      	ldr	r2, [pc, #352]	@ (800391c <HAL_DMA_IRQHandler+0x424>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d013      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x2ee>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a57      	ldr	r2, [pc, #348]	@ (8003920 <HAL_DMA_IRQHandler+0x428>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d00e      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x2ee>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a55      	ldr	r2, [pc, #340]	@ (8003924 <HAL_DMA_IRQHandler+0x42c>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d009      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x2ee>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a54      	ldr	r2, [pc, #336]	@ (8003928 <HAL_DMA_IRQHandler+0x430>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d004      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x2ee>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a52      	ldr	r2, [pc, #328]	@ (800392c <HAL_DMA_IRQHandler+0x434>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d10a      	bne.n	80037fc <HAL_DMA_IRQHandler+0x304>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	bf14      	ite	ne
 80037f4:	2301      	movne	r3, #1
 80037f6:	2300      	moveq	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	e003      	b.n	8003804 <HAL_DMA_IRQHandler+0x30c>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2300      	movs	r3, #0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00d      	beq.n	8003824 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800380c:	f003 031f 	and.w	r3, r3, #31
 8003810:	2201      	movs	r2, #1
 8003812:	409a      	lsls	r2, r3
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800381c:	f043 0202 	orr.w	r2, r3, #2
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003828:	f003 031f 	and.w	r3, r3, #31
 800382c:	2204      	movs	r2, #4
 800382e:	409a      	lsls	r2, r3
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	4013      	ands	r3, r2
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 808f 	beq.w	8003958 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a2c      	ldr	r2, [pc, #176]	@ (80038f0 <HAL_DMA_IRQHandler+0x3f8>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d04a      	beq.n	80038da <HAL_DMA_IRQHandler+0x3e2>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a2a      	ldr	r2, [pc, #168]	@ (80038f4 <HAL_DMA_IRQHandler+0x3fc>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d045      	beq.n	80038da <HAL_DMA_IRQHandler+0x3e2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a29      	ldr	r2, [pc, #164]	@ (80038f8 <HAL_DMA_IRQHandler+0x400>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d040      	beq.n	80038da <HAL_DMA_IRQHandler+0x3e2>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a27      	ldr	r2, [pc, #156]	@ (80038fc <HAL_DMA_IRQHandler+0x404>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d03b      	beq.n	80038da <HAL_DMA_IRQHandler+0x3e2>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a26      	ldr	r2, [pc, #152]	@ (8003900 <HAL_DMA_IRQHandler+0x408>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d036      	beq.n	80038da <HAL_DMA_IRQHandler+0x3e2>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a24      	ldr	r2, [pc, #144]	@ (8003904 <HAL_DMA_IRQHandler+0x40c>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d031      	beq.n	80038da <HAL_DMA_IRQHandler+0x3e2>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a23      	ldr	r2, [pc, #140]	@ (8003908 <HAL_DMA_IRQHandler+0x410>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d02c      	beq.n	80038da <HAL_DMA_IRQHandler+0x3e2>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a21      	ldr	r2, [pc, #132]	@ (800390c <HAL_DMA_IRQHandler+0x414>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d027      	beq.n	80038da <HAL_DMA_IRQHandler+0x3e2>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a20      	ldr	r2, [pc, #128]	@ (8003910 <HAL_DMA_IRQHandler+0x418>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d022      	beq.n	80038da <HAL_DMA_IRQHandler+0x3e2>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a1e      	ldr	r2, [pc, #120]	@ (8003914 <HAL_DMA_IRQHandler+0x41c>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d01d      	beq.n	80038da <HAL_DMA_IRQHandler+0x3e2>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a1d      	ldr	r2, [pc, #116]	@ (8003918 <HAL_DMA_IRQHandler+0x420>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d018      	beq.n	80038da <HAL_DMA_IRQHandler+0x3e2>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a1b      	ldr	r2, [pc, #108]	@ (800391c <HAL_DMA_IRQHandler+0x424>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d013      	beq.n	80038da <HAL_DMA_IRQHandler+0x3e2>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a1a      	ldr	r2, [pc, #104]	@ (8003920 <HAL_DMA_IRQHandler+0x428>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d00e      	beq.n	80038da <HAL_DMA_IRQHandler+0x3e2>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a18      	ldr	r2, [pc, #96]	@ (8003924 <HAL_DMA_IRQHandler+0x42c>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d009      	beq.n	80038da <HAL_DMA_IRQHandler+0x3e2>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a17      	ldr	r2, [pc, #92]	@ (8003928 <HAL_DMA_IRQHandler+0x430>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d004      	beq.n	80038da <HAL_DMA_IRQHandler+0x3e2>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a15      	ldr	r2, [pc, #84]	@ (800392c <HAL_DMA_IRQHandler+0x434>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d12a      	bne.n	8003930 <HAL_DMA_IRQHandler+0x438>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	bf14      	ite	ne
 80038e8:	2301      	movne	r3, #1
 80038ea:	2300      	moveq	r3, #0
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	e023      	b.n	8003938 <HAL_DMA_IRQHandler+0x440>
 80038f0:	40020010 	.word	0x40020010
 80038f4:	40020028 	.word	0x40020028
 80038f8:	40020040 	.word	0x40020040
 80038fc:	40020058 	.word	0x40020058
 8003900:	40020070 	.word	0x40020070
 8003904:	40020088 	.word	0x40020088
 8003908:	400200a0 	.word	0x400200a0
 800390c:	400200b8 	.word	0x400200b8
 8003910:	40020410 	.word	0x40020410
 8003914:	40020428 	.word	0x40020428
 8003918:	40020440 	.word	0x40020440
 800391c:	40020458 	.word	0x40020458
 8003920:	40020470 	.word	0x40020470
 8003924:	40020488 	.word	0x40020488
 8003928:	400204a0 	.word	0x400204a0
 800392c:	400204b8 	.word	0x400204b8
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2300      	movs	r3, #0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00d      	beq.n	8003958 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003940:	f003 031f 	and.w	r3, r3, #31
 8003944:	2204      	movs	r2, #4
 8003946:	409a      	lsls	r2, r3
 8003948:	6a3b      	ldr	r3, [r7, #32]
 800394a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003950:	f043 0204 	orr.w	r2, r3, #4
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800395c:	f003 031f 	and.w	r3, r3, #31
 8003960:	2210      	movs	r2, #16
 8003962:	409a      	lsls	r2, r3
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	4013      	ands	r3, r2
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 80a6 	beq.w	8003aba <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a85      	ldr	r2, [pc, #532]	@ (8003b88 <HAL_DMA_IRQHandler+0x690>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d04a      	beq.n	8003a0e <HAL_DMA_IRQHandler+0x516>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a83      	ldr	r2, [pc, #524]	@ (8003b8c <HAL_DMA_IRQHandler+0x694>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d045      	beq.n	8003a0e <HAL_DMA_IRQHandler+0x516>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a82      	ldr	r2, [pc, #520]	@ (8003b90 <HAL_DMA_IRQHandler+0x698>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d040      	beq.n	8003a0e <HAL_DMA_IRQHandler+0x516>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a80      	ldr	r2, [pc, #512]	@ (8003b94 <HAL_DMA_IRQHandler+0x69c>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d03b      	beq.n	8003a0e <HAL_DMA_IRQHandler+0x516>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a7f      	ldr	r2, [pc, #508]	@ (8003b98 <HAL_DMA_IRQHandler+0x6a0>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d036      	beq.n	8003a0e <HAL_DMA_IRQHandler+0x516>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a7d      	ldr	r2, [pc, #500]	@ (8003b9c <HAL_DMA_IRQHandler+0x6a4>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d031      	beq.n	8003a0e <HAL_DMA_IRQHandler+0x516>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a7c      	ldr	r2, [pc, #496]	@ (8003ba0 <HAL_DMA_IRQHandler+0x6a8>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d02c      	beq.n	8003a0e <HAL_DMA_IRQHandler+0x516>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a7a      	ldr	r2, [pc, #488]	@ (8003ba4 <HAL_DMA_IRQHandler+0x6ac>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d027      	beq.n	8003a0e <HAL_DMA_IRQHandler+0x516>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a79      	ldr	r2, [pc, #484]	@ (8003ba8 <HAL_DMA_IRQHandler+0x6b0>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d022      	beq.n	8003a0e <HAL_DMA_IRQHandler+0x516>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a77      	ldr	r2, [pc, #476]	@ (8003bac <HAL_DMA_IRQHandler+0x6b4>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d01d      	beq.n	8003a0e <HAL_DMA_IRQHandler+0x516>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a76      	ldr	r2, [pc, #472]	@ (8003bb0 <HAL_DMA_IRQHandler+0x6b8>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d018      	beq.n	8003a0e <HAL_DMA_IRQHandler+0x516>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a74      	ldr	r2, [pc, #464]	@ (8003bb4 <HAL_DMA_IRQHandler+0x6bc>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d013      	beq.n	8003a0e <HAL_DMA_IRQHandler+0x516>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a73      	ldr	r2, [pc, #460]	@ (8003bb8 <HAL_DMA_IRQHandler+0x6c0>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d00e      	beq.n	8003a0e <HAL_DMA_IRQHandler+0x516>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a71      	ldr	r2, [pc, #452]	@ (8003bbc <HAL_DMA_IRQHandler+0x6c4>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d009      	beq.n	8003a0e <HAL_DMA_IRQHandler+0x516>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a70      	ldr	r2, [pc, #448]	@ (8003bc0 <HAL_DMA_IRQHandler+0x6c8>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d004      	beq.n	8003a0e <HAL_DMA_IRQHandler+0x516>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a6e      	ldr	r2, [pc, #440]	@ (8003bc4 <HAL_DMA_IRQHandler+0x6cc>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d10a      	bne.n	8003a24 <HAL_DMA_IRQHandler+0x52c>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0308 	and.w	r3, r3, #8
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	bf14      	ite	ne
 8003a1c:	2301      	movne	r3, #1
 8003a1e:	2300      	moveq	r3, #0
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	e009      	b.n	8003a38 <HAL_DMA_IRQHandler+0x540>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	bf14      	ite	ne
 8003a32:	2301      	movne	r3, #1
 8003a34:	2300      	moveq	r3, #0
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d03e      	beq.n	8003aba <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a40:	f003 031f 	and.w	r3, r3, #31
 8003a44:	2210      	movs	r2, #16
 8003a46:	409a      	lsls	r2, r3
 8003a48:	6a3b      	ldr	r3, [r7, #32]
 8003a4a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d018      	beq.n	8003a8c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d108      	bne.n	8003a7a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d024      	beq.n	8003aba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	4798      	blx	r3
 8003a78:	e01f      	b.n	8003aba <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d01b      	beq.n	8003aba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	4798      	blx	r3
 8003a8a:	e016      	b.n	8003aba <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d107      	bne.n	8003aaa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 0208 	bic.w	r2, r2, #8
 8003aa8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003abe:	f003 031f 	and.w	r3, r3, #31
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	409a      	lsls	r2, r3
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 8110 	beq.w	8003cf0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a2c      	ldr	r2, [pc, #176]	@ (8003b88 <HAL_DMA_IRQHandler+0x690>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d04a      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x678>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a2b      	ldr	r2, [pc, #172]	@ (8003b8c <HAL_DMA_IRQHandler+0x694>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d045      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x678>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a29      	ldr	r2, [pc, #164]	@ (8003b90 <HAL_DMA_IRQHandler+0x698>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d040      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x678>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a28      	ldr	r2, [pc, #160]	@ (8003b94 <HAL_DMA_IRQHandler+0x69c>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d03b      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x678>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a26      	ldr	r2, [pc, #152]	@ (8003b98 <HAL_DMA_IRQHandler+0x6a0>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d036      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x678>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a25      	ldr	r2, [pc, #148]	@ (8003b9c <HAL_DMA_IRQHandler+0x6a4>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d031      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x678>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a23      	ldr	r2, [pc, #140]	@ (8003ba0 <HAL_DMA_IRQHandler+0x6a8>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d02c      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x678>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a22      	ldr	r2, [pc, #136]	@ (8003ba4 <HAL_DMA_IRQHandler+0x6ac>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d027      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x678>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a20      	ldr	r2, [pc, #128]	@ (8003ba8 <HAL_DMA_IRQHandler+0x6b0>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d022      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x678>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a1f      	ldr	r2, [pc, #124]	@ (8003bac <HAL_DMA_IRQHandler+0x6b4>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d01d      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x678>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a1d      	ldr	r2, [pc, #116]	@ (8003bb0 <HAL_DMA_IRQHandler+0x6b8>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d018      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x678>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a1c      	ldr	r2, [pc, #112]	@ (8003bb4 <HAL_DMA_IRQHandler+0x6bc>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d013      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x678>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a1a      	ldr	r2, [pc, #104]	@ (8003bb8 <HAL_DMA_IRQHandler+0x6c0>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d00e      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x678>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a19      	ldr	r2, [pc, #100]	@ (8003bbc <HAL_DMA_IRQHandler+0x6c4>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d009      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x678>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a17      	ldr	r2, [pc, #92]	@ (8003bc0 <HAL_DMA_IRQHandler+0x6c8>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d004      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x678>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a16      	ldr	r2, [pc, #88]	@ (8003bc4 <HAL_DMA_IRQHandler+0x6cc>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d12b      	bne.n	8003bc8 <HAL_DMA_IRQHandler+0x6d0>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0310 	and.w	r3, r3, #16
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	bf14      	ite	ne
 8003b7e:	2301      	movne	r3, #1
 8003b80:	2300      	moveq	r3, #0
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	e02a      	b.n	8003bdc <HAL_DMA_IRQHandler+0x6e4>
 8003b86:	bf00      	nop
 8003b88:	40020010 	.word	0x40020010
 8003b8c:	40020028 	.word	0x40020028
 8003b90:	40020040 	.word	0x40020040
 8003b94:	40020058 	.word	0x40020058
 8003b98:	40020070 	.word	0x40020070
 8003b9c:	40020088 	.word	0x40020088
 8003ba0:	400200a0 	.word	0x400200a0
 8003ba4:	400200b8 	.word	0x400200b8
 8003ba8:	40020410 	.word	0x40020410
 8003bac:	40020428 	.word	0x40020428
 8003bb0:	40020440 	.word	0x40020440
 8003bb4:	40020458 	.word	0x40020458
 8003bb8:	40020470 	.word	0x40020470
 8003bbc:	40020488 	.word	0x40020488
 8003bc0:	400204a0 	.word	0x400204a0
 8003bc4:	400204b8 	.word	0x400204b8
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	bf14      	ite	ne
 8003bd6:	2301      	movne	r3, #1
 8003bd8:	2300      	moveq	r3, #0
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 8087 	beq.w	8003cf0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003be6:	f003 031f 	and.w	r3, r3, #31
 8003bea:	2220      	movs	r2, #32
 8003bec:	409a      	lsls	r2, r3
 8003bee:	6a3b      	ldr	r3, [r7, #32]
 8003bf0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d139      	bne.n	8003c72 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 0216 	bic.w	r2, r2, #22
 8003c0c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	695a      	ldr	r2, [r3, #20]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c1c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d103      	bne.n	8003c2e <HAL_DMA_IRQHandler+0x736>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d007      	beq.n	8003c3e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0208 	bic.w	r2, r2, #8
 8003c3c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c42:	f003 031f 	and.w	r3, r3, #31
 8003c46:	223f      	movs	r2, #63	@ 0x3f
 8003c48:	409a      	lsls	r2, r3
 8003c4a:	6a3b      	ldr	r3, [r7, #32]
 8003c4c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f000 834a 	beq.w	80042fc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	4798      	blx	r3
          }
          return;
 8003c70:	e344      	b.n	80042fc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d018      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d108      	bne.n	8003ca0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d02c      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	4798      	blx	r3
 8003c9e:	e027      	b.n	8003cf0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d023      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	4798      	blx	r3
 8003cb0:	e01e      	b.n	8003cf0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10f      	bne.n	8003ce0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 0210 	bic.w	r2, r2, #16
 8003cce:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d003      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f000 8306 	beq.w	8004306 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 8088 	beq.w	8003e18 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2204      	movs	r2, #4
 8003d0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a7a      	ldr	r2, [pc, #488]	@ (8003f00 <HAL_DMA_IRQHandler+0xa08>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d04a      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x8b8>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a79      	ldr	r2, [pc, #484]	@ (8003f04 <HAL_DMA_IRQHandler+0xa0c>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d045      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x8b8>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a77      	ldr	r2, [pc, #476]	@ (8003f08 <HAL_DMA_IRQHandler+0xa10>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d040      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x8b8>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a76      	ldr	r2, [pc, #472]	@ (8003f0c <HAL_DMA_IRQHandler+0xa14>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d03b      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x8b8>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a74      	ldr	r2, [pc, #464]	@ (8003f10 <HAL_DMA_IRQHandler+0xa18>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d036      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x8b8>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a73      	ldr	r2, [pc, #460]	@ (8003f14 <HAL_DMA_IRQHandler+0xa1c>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d031      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x8b8>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a71      	ldr	r2, [pc, #452]	@ (8003f18 <HAL_DMA_IRQHandler+0xa20>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d02c      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x8b8>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a70      	ldr	r2, [pc, #448]	@ (8003f1c <HAL_DMA_IRQHandler+0xa24>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d027      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x8b8>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a6e      	ldr	r2, [pc, #440]	@ (8003f20 <HAL_DMA_IRQHandler+0xa28>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d022      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x8b8>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a6d      	ldr	r2, [pc, #436]	@ (8003f24 <HAL_DMA_IRQHandler+0xa2c>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d01d      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x8b8>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a6b      	ldr	r2, [pc, #428]	@ (8003f28 <HAL_DMA_IRQHandler+0xa30>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d018      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x8b8>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a6a      	ldr	r2, [pc, #424]	@ (8003f2c <HAL_DMA_IRQHandler+0xa34>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d013      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x8b8>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a68      	ldr	r2, [pc, #416]	@ (8003f30 <HAL_DMA_IRQHandler+0xa38>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d00e      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x8b8>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a67      	ldr	r2, [pc, #412]	@ (8003f34 <HAL_DMA_IRQHandler+0xa3c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d009      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x8b8>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a65      	ldr	r2, [pc, #404]	@ (8003f38 <HAL_DMA_IRQHandler+0xa40>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d004      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x8b8>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a64      	ldr	r2, [pc, #400]	@ (8003f3c <HAL_DMA_IRQHandler+0xa44>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d108      	bne.n	8003dc2 <HAL_DMA_IRQHandler+0x8ca>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f022 0201 	bic.w	r2, r2, #1
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	e007      	b.n	8003dd2 <HAL_DMA_IRQHandler+0x8da>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 0201 	bic.w	r2, r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	60fb      	str	r3, [r7, #12]
 8003dd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d307      	bcc.n	8003dee <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1f2      	bne.n	8003dd2 <HAL_DMA_IRQHandler+0x8da>
 8003dec:	e000      	b.n	8003df0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003dee:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d004      	beq.n	8003e08 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2203      	movs	r2, #3
 8003e02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003e06:	e003      	b.n	8003e10 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 8272 	beq.w	8004306 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	4798      	blx	r3
 8003e2a:	e26c      	b.n	8004306 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a43      	ldr	r2, [pc, #268]	@ (8003f40 <HAL_DMA_IRQHandler+0xa48>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d022      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x984>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a42      	ldr	r2, [pc, #264]	@ (8003f44 <HAL_DMA_IRQHandler+0xa4c>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d01d      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x984>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a40      	ldr	r2, [pc, #256]	@ (8003f48 <HAL_DMA_IRQHandler+0xa50>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d018      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x984>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a3f      	ldr	r2, [pc, #252]	@ (8003f4c <HAL_DMA_IRQHandler+0xa54>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d013      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x984>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a3d      	ldr	r2, [pc, #244]	@ (8003f50 <HAL_DMA_IRQHandler+0xa58>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d00e      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x984>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a3c      	ldr	r2, [pc, #240]	@ (8003f54 <HAL_DMA_IRQHandler+0xa5c>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d009      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x984>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a3a      	ldr	r2, [pc, #232]	@ (8003f58 <HAL_DMA_IRQHandler+0xa60>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d004      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x984>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a39      	ldr	r2, [pc, #228]	@ (8003f5c <HAL_DMA_IRQHandler+0xa64>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d101      	bne.n	8003e80 <HAL_DMA_IRQHandler+0x988>
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e000      	b.n	8003e82 <HAL_DMA_IRQHandler+0x98a>
 8003e80:	2300      	movs	r3, #0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 823f 	beq.w	8004306 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e94:	f003 031f 	and.w	r3, r3, #31
 8003e98:	2204      	movs	r2, #4
 8003e9a:	409a      	lsls	r2, r3
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 80cd 	beq.w	8004040 <HAL_DMA_IRQHandler+0xb48>
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 80c7 	beq.w	8004040 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb6:	f003 031f 	and.w	r3, r3, #31
 8003eba:	2204      	movs	r2, #4
 8003ebc:	409a      	lsls	r2, r3
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d049      	beq.n	8003f60 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d109      	bne.n	8003eea <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 8210 	beq.w	8004300 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ee8:	e20a      	b.n	8004300 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 8206 	beq.w	8004300 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003efc:	e200      	b.n	8004300 <HAL_DMA_IRQHandler+0xe08>
 8003efe:	bf00      	nop
 8003f00:	40020010 	.word	0x40020010
 8003f04:	40020028 	.word	0x40020028
 8003f08:	40020040 	.word	0x40020040
 8003f0c:	40020058 	.word	0x40020058
 8003f10:	40020070 	.word	0x40020070
 8003f14:	40020088 	.word	0x40020088
 8003f18:	400200a0 	.word	0x400200a0
 8003f1c:	400200b8 	.word	0x400200b8
 8003f20:	40020410 	.word	0x40020410
 8003f24:	40020428 	.word	0x40020428
 8003f28:	40020440 	.word	0x40020440
 8003f2c:	40020458 	.word	0x40020458
 8003f30:	40020470 	.word	0x40020470
 8003f34:	40020488 	.word	0x40020488
 8003f38:	400204a0 	.word	0x400204a0
 8003f3c:	400204b8 	.word	0x400204b8
 8003f40:	58025408 	.word	0x58025408
 8003f44:	5802541c 	.word	0x5802541c
 8003f48:	58025430 	.word	0x58025430
 8003f4c:	58025444 	.word	0x58025444
 8003f50:	58025458 	.word	0x58025458
 8003f54:	5802546c 	.word	0x5802546c
 8003f58:	58025480 	.word	0x58025480
 8003f5c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	f003 0320 	and.w	r3, r3, #32
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d160      	bne.n	800402c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a7f      	ldr	r2, [pc, #508]	@ (800416c <HAL_DMA_IRQHandler+0xc74>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d04a      	beq.n	800400a <HAL_DMA_IRQHandler+0xb12>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a7d      	ldr	r2, [pc, #500]	@ (8004170 <HAL_DMA_IRQHandler+0xc78>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d045      	beq.n	800400a <HAL_DMA_IRQHandler+0xb12>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a7c      	ldr	r2, [pc, #496]	@ (8004174 <HAL_DMA_IRQHandler+0xc7c>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d040      	beq.n	800400a <HAL_DMA_IRQHandler+0xb12>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a7a      	ldr	r2, [pc, #488]	@ (8004178 <HAL_DMA_IRQHandler+0xc80>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d03b      	beq.n	800400a <HAL_DMA_IRQHandler+0xb12>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a79      	ldr	r2, [pc, #484]	@ (800417c <HAL_DMA_IRQHandler+0xc84>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d036      	beq.n	800400a <HAL_DMA_IRQHandler+0xb12>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a77      	ldr	r2, [pc, #476]	@ (8004180 <HAL_DMA_IRQHandler+0xc88>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d031      	beq.n	800400a <HAL_DMA_IRQHandler+0xb12>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a76      	ldr	r2, [pc, #472]	@ (8004184 <HAL_DMA_IRQHandler+0xc8c>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d02c      	beq.n	800400a <HAL_DMA_IRQHandler+0xb12>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a74      	ldr	r2, [pc, #464]	@ (8004188 <HAL_DMA_IRQHandler+0xc90>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d027      	beq.n	800400a <HAL_DMA_IRQHandler+0xb12>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a73      	ldr	r2, [pc, #460]	@ (800418c <HAL_DMA_IRQHandler+0xc94>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d022      	beq.n	800400a <HAL_DMA_IRQHandler+0xb12>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a71      	ldr	r2, [pc, #452]	@ (8004190 <HAL_DMA_IRQHandler+0xc98>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d01d      	beq.n	800400a <HAL_DMA_IRQHandler+0xb12>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a70      	ldr	r2, [pc, #448]	@ (8004194 <HAL_DMA_IRQHandler+0xc9c>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d018      	beq.n	800400a <HAL_DMA_IRQHandler+0xb12>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a6e      	ldr	r2, [pc, #440]	@ (8004198 <HAL_DMA_IRQHandler+0xca0>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d013      	beq.n	800400a <HAL_DMA_IRQHandler+0xb12>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a6d      	ldr	r2, [pc, #436]	@ (800419c <HAL_DMA_IRQHandler+0xca4>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d00e      	beq.n	800400a <HAL_DMA_IRQHandler+0xb12>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a6b      	ldr	r2, [pc, #428]	@ (80041a0 <HAL_DMA_IRQHandler+0xca8>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d009      	beq.n	800400a <HAL_DMA_IRQHandler+0xb12>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a6a      	ldr	r2, [pc, #424]	@ (80041a4 <HAL_DMA_IRQHandler+0xcac>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d004      	beq.n	800400a <HAL_DMA_IRQHandler+0xb12>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a68      	ldr	r2, [pc, #416]	@ (80041a8 <HAL_DMA_IRQHandler+0xcb0>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d108      	bne.n	800401c <HAL_DMA_IRQHandler+0xb24>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 0208 	bic.w	r2, r2, #8
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	e007      	b.n	800402c <HAL_DMA_IRQHandler+0xb34>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 0204 	bic.w	r2, r2, #4
 800402a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 8165 	beq.w	8004300 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800403e:	e15f      	b.n	8004300 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004044:	f003 031f 	and.w	r3, r3, #31
 8004048:	2202      	movs	r2, #2
 800404a:	409a      	lsls	r2, r3
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	4013      	ands	r3, r2
 8004050:	2b00      	cmp	r3, #0
 8004052:	f000 80c5 	beq.w	80041e0 <HAL_DMA_IRQHandler+0xce8>
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 80bf 	beq.w	80041e0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004066:	f003 031f 	and.w	r3, r3, #31
 800406a:	2202      	movs	r2, #2
 800406c:	409a      	lsls	r2, r3
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d018      	beq.n	80040ae <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d109      	bne.n	800409a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 813a 	beq.w	8004304 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004098:	e134      	b.n	8004304 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f000 8130 	beq.w	8004304 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040ac:	e12a      	b.n	8004304 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	f003 0320 	and.w	r3, r3, #32
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f040 8089 	bne.w	80041cc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a2b      	ldr	r2, [pc, #172]	@ (800416c <HAL_DMA_IRQHandler+0xc74>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d04a      	beq.n	800415a <HAL_DMA_IRQHandler+0xc62>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a29      	ldr	r2, [pc, #164]	@ (8004170 <HAL_DMA_IRQHandler+0xc78>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d045      	beq.n	800415a <HAL_DMA_IRQHandler+0xc62>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a28      	ldr	r2, [pc, #160]	@ (8004174 <HAL_DMA_IRQHandler+0xc7c>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d040      	beq.n	800415a <HAL_DMA_IRQHandler+0xc62>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a26      	ldr	r2, [pc, #152]	@ (8004178 <HAL_DMA_IRQHandler+0xc80>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d03b      	beq.n	800415a <HAL_DMA_IRQHandler+0xc62>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a25      	ldr	r2, [pc, #148]	@ (800417c <HAL_DMA_IRQHandler+0xc84>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d036      	beq.n	800415a <HAL_DMA_IRQHandler+0xc62>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a23      	ldr	r2, [pc, #140]	@ (8004180 <HAL_DMA_IRQHandler+0xc88>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d031      	beq.n	800415a <HAL_DMA_IRQHandler+0xc62>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a22      	ldr	r2, [pc, #136]	@ (8004184 <HAL_DMA_IRQHandler+0xc8c>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d02c      	beq.n	800415a <HAL_DMA_IRQHandler+0xc62>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a20      	ldr	r2, [pc, #128]	@ (8004188 <HAL_DMA_IRQHandler+0xc90>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d027      	beq.n	800415a <HAL_DMA_IRQHandler+0xc62>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a1f      	ldr	r2, [pc, #124]	@ (800418c <HAL_DMA_IRQHandler+0xc94>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d022      	beq.n	800415a <HAL_DMA_IRQHandler+0xc62>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a1d      	ldr	r2, [pc, #116]	@ (8004190 <HAL_DMA_IRQHandler+0xc98>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d01d      	beq.n	800415a <HAL_DMA_IRQHandler+0xc62>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a1c      	ldr	r2, [pc, #112]	@ (8004194 <HAL_DMA_IRQHandler+0xc9c>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d018      	beq.n	800415a <HAL_DMA_IRQHandler+0xc62>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a1a      	ldr	r2, [pc, #104]	@ (8004198 <HAL_DMA_IRQHandler+0xca0>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d013      	beq.n	800415a <HAL_DMA_IRQHandler+0xc62>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a19      	ldr	r2, [pc, #100]	@ (800419c <HAL_DMA_IRQHandler+0xca4>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d00e      	beq.n	800415a <HAL_DMA_IRQHandler+0xc62>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a17      	ldr	r2, [pc, #92]	@ (80041a0 <HAL_DMA_IRQHandler+0xca8>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d009      	beq.n	800415a <HAL_DMA_IRQHandler+0xc62>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a16      	ldr	r2, [pc, #88]	@ (80041a4 <HAL_DMA_IRQHandler+0xcac>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d004      	beq.n	800415a <HAL_DMA_IRQHandler+0xc62>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a14      	ldr	r2, [pc, #80]	@ (80041a8 <HAL_DMA_IRQHandler+0xcb0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d128      	bne.n	80041ac <HAL_DMA_IRQHandler+0xcb4>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 0214 	bic.w	r2, r2, #20
 8004168:	601a      	str	r2, [r3, #0]
 800416a:	e027      	b.n	80041bc <HAL_DMA_IRQHandler+0xcc4>
 800416c:	40020010 	.word	0x40020010
 8004170:	40020028 	.word	0x40020028
 8004174:	40020040 	.word	0x40020040
 8004178:	40020058 	.word	0x40020058
 800417c:	40020070 	.word	0x40020070
 8004180:	40020088 	.word	0x40020088
 8004184:	400200a0 	.word	0x400200a0
 8004188:	400200b8 	.word	0x400200b8
 800418c:	40020410 	.word	0x40020410
 8004190:	40020428 	.word	0x40020428
 8004194:	40020440 	.word	0x40020440
 8004198:	40020458 	.word	0x40020458
 800419c:	40020470 	.word	0x40020470
 80041a0:	40020488 	.word	0x40020488
 80041a4:	400204a0 	.word	0x400204a0
 80041a8:	400204b8 	.word	0x400204b8
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 020a 	bic.w	r2, r2, #10
 80041ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 8097 	beq.w	8004304 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041de:	e091      	b.n	8004304 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041e4:	f003 031f 	and.w	r3, r3, #31
 80041e8:	2208      	movs	r2, #8
 80041ea:	409a      	lsls	r2, r3
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	4013      	ands	r3, r2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f000 8088 	beq.w	8004306 <HAL_DMA_IRQHandler+0xe0e>
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	f003 0308 	and.w	r3, r3, #8
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 8082 	beq.w	8004306 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a41      	ldr	r2, [pc, #260]	@ (800430c <HAL_DMA_IRQHandler+0xe14>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d04a      	beq.n	80042a2 <HAL_DMA_IRQHandler+0xdaa>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a3f      	ldr	r2, [pc, #252]	@ (8004310 <HAL_DMA_IRQHandler+0xe18>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d045      	beq.n	80042a2 <HAL_DMA_IRQHandler+0xdaa>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a3e      	ldr	r2, [pc, #248]	@ (8004314 <HAL_DMA_IRQHandler+0xe1c>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d040      	beq.n	80042a2 <HAL_DMA_IRQHandler+0xdaa>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a3c      	ldr	r2, [pc, #240]	@ (8004318 <HAL_DMA_IRQHandler+0xe20>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d03b      	beq.n	80042a2 <HAL_DMA_IRQHandler+0xdaa>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a3b      	ldr	r2, [pc, #236]	@ (800431c <HAL_DMA_IRQHandler+0xe24>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d036      	beq.n	80042a2 <HAL_DMA_IRQHandler+0xdaa>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a39      	ldr	r2, [pc, #228]	@ (8004320 <HAL_DMA_IRQHandler+0xe28>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d031      	beq.n	80042a2 <HAL_DMA_IRQHandler+0xdaa>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a38      	ldr	r2, [pc, #224]	@ (8004324 <HAL_DMA_IRQHandler+0xe2c>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d02c      	beq.n	80042a2 <HAL_DMA_IRQHandler+0xdaa>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a36      	ldr	r2, [pc, #216]	@ (8004328 <HAL_DMA_IRQHandler+0xe30>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d027      	beq.n	80042a2 <HAL_DMA_IRQHandler+0xdaa>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a35      	ldr	r2, [pc, #212]	@ (800432c <HAL_DMA_IRQHandler+0xe34>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d022      	beq.n	80042a2 <HAL_DMA_IRQHandler+0xdaa>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a33      	ldr	r2, [pc, #204]	@ (8004330 <HAL_DMA_IRQHandler+0xe38>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d01d      	beq.n	80042a2 <HAL_DMA_IRQHandler+0xdaa>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a32      	ldr	r2, [pc, #200]	@ (8004334 <HAL_DMA_IRQHandler+0xe3c>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d018      	beq.n	80042a2 <HAL_DMA_IRQHandler+0xdaa>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a30      	ldr	r2, [pc, #192]	@ (8004338 <HAL_DMA_IRQHandler+0xe40>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d013      	beq.n	80042a2 <HAL_DMA_IRQHandler+0xdaa>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a2f      	ldr	r2, [pc, #188]	@ (800433c <HAL_DMA_IRQHandler+0xe44>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d00e      	beq.n	80042a2 <HAL_DMA_IRQHandler+0xdaa>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a2d      	ldr	r2, [pc, #180]	@ (8004340 <HAL_DMA_IRQHandler+0xe48>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d009      	beq.n	80042a2 <HAL_DMA_IRQHandler+0xdaa>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a2c      	ldr	r2, [pc, #176]	@ (8004344 <HAL_DMA_IRQHandler+0xe4c>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d004      	beq.n	80042a2 <HAL_DMA_IRQHandler+0xdaa>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a2a      	ldr	r2, [pc, #168]	@ (8004348 <HAL_DMA_IRQHandler+0xe50>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d108      	bne.n	80042b4 <HAL_DMA_IRQHandler+0xdbc>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 021c 	bic.w	r2, r2, #28
 80042b0:	601a      	str	r2, [r3, #0]
 80042b2:	e007      	b.n	80042c4 <HAL_DMA_IRQHandler+0xdcc>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 020e 	bic.w	r2, r2, #14
 80042c2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042c8:	f003 031f 	and.w	r3, r3, #31
 80042cc:	2201      	movs	r2, #1
 80042ce:	409a      	lsls	r2, r3
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d009      	beq.n	8004306 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	4798      	blx	r3
 80042fa:	e004      	b.n	8004306 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80042fc:	bf00      	nop
 80042fe:	e002      	b.n	8004306 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004300:	bf00      	nop
 8004302:	e000      	b.n	8004306 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004304:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004306:	3728      	adds	r7, #40	@ 0x28
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40020010 	.word	0x40020010
 8004310:	40020028 	.word	0x40020028
 8004314:	40020040 	.word	0x40020040
 8004318:	40020058 	.word	0x40020058
 800431c:	40020070 	.word	0x40020070
 8004320:	40020088 	.word	0x40020088
 8004324:	400200a0 	.word	0x400200a0
 8004328:	400200b8 	.word	0x400200b8
 800432c:	40020410 	.word	0x40020410
 8004330:	40020428 	.word	0x40020428
 8004334:	40020440 	.word	0x40020440
 8004338:	40020458 	.word	0x40020458
 800433c:	40020470 	.word	0x40020470
 8004340:	40020488 	.word	0x40020488
 8004344:	400204a0 	.word	0x400204a0
 8004348:	400204b8 	.word	0x400204b8

0800434c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800434c:	b480      	push	{r7}
 800434e:	b087      	sub	sp, #28
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
 8004358:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800435e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004364:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a7f      	ldr	r2, [pc, #508]	@ (8004568 <DMA_SetConfig+0x21c>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d072      	beq.n	8004456 <DMA_SetConfig+0x10a>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a7d      	ldr	r2, [pc, #500]	@ (800456c <DMA_SetConfig+0x220>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d06d      	beq.n	8004456 <DMA_SetConfig+0x10a>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a7c      	ldr	r2, [pc, #496]	@ (8004570 <DMA_SetConfig+0x224>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d068      	beq.n	8004456 <DMA_SetConfig+0x10a>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a7a      	ldr	r2, [pc, #488]	@ (8004574 <DMA_SetConfig+0x228>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d063      	beq.n	8004456 <DMA_SetConfig+0x10a>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a79      	ldr	r2, [pc, #484]	@ (8004578 <DMA_SetConfig+0x22c>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d05e      	beq.n	8004456 <DMA_SetConfig+0x10a>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a77      	ldr	r2, [pc, #476]	@ (800457c <DMA_SetConfig+0x230>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d059      	beq.n	8004456 <DMA_SetConfig+0x10a>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a76      	ldr	r2, [pc, #472]	@ (8004580 <DMA_SetConfig+0x234>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d054      	beq.n	8004456 <DMA_SetConfig+0x10a>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a74      	ldr	r2, [pc, #464]	@ (8004584 <DMA_SetConfig+0x238>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d04f      	beq.n	8004456 <DMA_SetConfig+0x10a>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a73      	ldr	r2, [pc, #460]	@ (8004588 <DMA_SetConfig+0x23c>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d04a      	beq.n	8004456 <DMA_SetConfig+0x10a>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a71      	ldr	r2, [pc, #452]	@ (800458c <DMA_SetConfig+0x240>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d045      	beq.n	8004456 <DMA_SetConfig+0x10a>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a70      	ldr	r2, [pc, #448]	@ (8004590 <DMA_SetConfig+0x244>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d040      	beq.n	8004456 <DMA_SetConfig+0x10a>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a6e      	ldr	r2, [pc, #440]	@ (8004594 <DMA_SetConfig+0x248>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d03b      	beq.n	8004456 <DMA_SetConfig+0x10a>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a6d      	ldr	r2, [pc, #436]	@ (8004598 <DMA_SetConfig+0x24c>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d036      	beq.n	8004456 <DMA_SetConfig+0x10a>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a6b      	ldr	r2, [pc, #428]	@ (800459c <DMA_SetConfig+0x250>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d031      	beq.n	8004456 <DMA_SetConfig+0x10a>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a6a      	ldr	r2, [pc, #424]	@ (80045a0 <DMA_SetConfig+0x254>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d02c      	beq.n	8004456 <DMA_SetConfig+0x10a>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a68      	ldr	r2, [pc, #416]	@ (80045a4 <DMA_SetConfig+0x258>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d027      	beq.n	8004456 <DMA_SetConfig+0x10a>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a67      	ldr	r2, [pc, #412]	@ (80045a8 <DMA_SetConfig+0x25c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d022      	beq.n	8004456 <DMA_SetConfig+0x10a>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a65      	ldr	r2, [pc, #404]	@ (80045ac <DMA_SetConfig+0x260>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d01d      	beq.n	8004456 <DMA_SetConfig+0x10a>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a64      	ldr	r2, [pc, #400]	@ (80045b0 <DMA_SetConfig+0x264>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d018      	beq.n	8004456 <DMA_SetConfig+0x10a>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a62      	ldr	r2, [pc, #392]	@ (80045b4 <DMA_SetConfig+0x268>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d013      	beq.n	8004456 <DMA_SetConfig+0x10a>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a61      	ldr	r2, [pc, #388]	@ (80045b8 <DMA_SetConfig+0x26c>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d00e      	beq.n	8004456 <DMA_SetConfig+0x10a>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a5f      	ldr	r2, [pc, #380]	@ (80045bc <DMA_SetConfig+0x270>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d009      	beq.n	8004456 <DMA_SetConfig+0x10a>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a5e      	ldr	r2, [pc, #376]	@ (80045c0 <DMA_SetConfig+0x274>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d004      	beq.n	8004456 <DMA_SetConfig+0x10a>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a5c      	ldr	r2, [pc, #368]	@ (80045c4 <DMA_SetConfig+0x278>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d101      	bne.n	800445a <DMA_SetConfig+0x10e>
 8004456:	2301      	movs	r3, #1
 8004458:	e000      	b.n	800445c <DMA_SetConfig+0x110>
 800445a:	2300      	movs	r3, #0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00d      	beq.n	800447c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004468:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800446e:	2b00      	cmp	r3, #0
 8004470:	d004      	beq.n	800447c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800447a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a39      	ldr	r2, [pc, #228]	@ (8004568 <DMA_SetConfig+0x21c>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d04a      	beq.n	800451c <DMA_SetConfig+0x1d0>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a38      	ldr	r2, [pc, #224]	@ (800456c <DMA_SetConfig+0x220>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d045      	beq.n	800451c <DMA_SetConfig+0x1d0>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a36      	ldr	r2, [pc, #216]	@ (8004570 <DMA_SetConfig+0x224>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d040      	beq.n	800451c <DMA_SetConfig+0x1d0>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a35      	ldr	r2, [pc, #212]	@ (8004574 <DMA_SetConfig+0x228>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d03b      	beq.n	800451c <DMA_SetConfig+0x1d0>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a33      	ldr	r2, [pc, #204]	@ (8004578 <DMA_SetConfig+0x22c>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d036      	beq.n	800451c <DMA_SetConfig+0x1d0>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a32      	ldr	r2, [pc, #200]	@ (800457c <DMA_SetConfig+0x230>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d031      	beq.n	800451c <DMA_SetConfig+0x1d0>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a30      	ldr	r2, [pc, #192]	@ (8004580 <DMA_SetConfig+0x234>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d02c      	beq.n	800451c <DMA_SetConfig+0x1d0>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a2f      	ldr	r2, [pc, #188]	@ (8004584 <DMA_SetConfig+0x238>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d027      	beq.n	800451c <DMA_SetConfig+0x1d0>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a2d      	ldr	r2, [pc, #180]	@ (8004588 <DMA_SetConfig+0x23c>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d022      	beq.n	800451c <DMA_SetConfig+0x1d0>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a2c      	ldr	r2, [pc, #176]	@ (800458c <DMA_SetConfig+0x240>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d01d      	beq.n	800451c <DMA_SetConfig+0x1d0>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a2a      	ldr	r2, [pc, #168]	@ (8004590 <DMA_SetConfig+0x244>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d018      	beq.n	800451c <DMA_SetConfig+0x1d0>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a29      	ldr	r2, [pc, #164]	@ (8004594 <DMA_SetConfig+0x248>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d013      	beq.n	800451c <DMA_SetConfig+0x1d0>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a27      	ldr	r2, [pc, #156]	@ (8004598 <DMA_SetConfig+0x24c>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d00e      	beq.n	800451c <DMA_SetConfig+0x1d0>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a26      	ldr	r2, [pc, #152]	@ (800459c <DMA_SetConfig+0x250>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d009      	beq.n	800451c <DMA_SetConfig+0x1d0>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a24      	ldr	r2, [pc, #144]	@ (80045a0 <DMA_SetConfig+0x254>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d004      	beq.n	800451c <DMA_SetConfig+0x1d0>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a23      	ldr	r2, [pc, #140]	@ (80045a4 <DMA_SetConfig+0x258>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d101      	bne.n	8004520 <DMA_SetConfig+0x1d4>
 800451c:	2301      	movs	r3, #1
 800451e:	e000      	b.n	8004522 <DMA_SetConfig+0x1d6>
 8004520:	2300      	movs	r3, #0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d059      	beq.n	80045da <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800452a:	f003 031f 	and.w	r3, r3, #31
 800452e:	223f      	movs	r2, #63	@ 0x3f
 8004530:	409a      	lsls	r2, r3
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004544:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	683a      	ldr	r2, [r7, #0]
 800454c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	2b40      	cmp	r3, #64	@ 0x40
 8004554:	d138      	bne.n	80045c8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004566:	e086      	b.n	8004676 <DMA_SetConfig+0x32a>
 8004568:	40020010 	.word	0x40020010
 800456c:	40020028 	.word	0x40020028
 8004570:	40020040 	.word	0x40020040
 8004574:	40020058 	.word	0x40020058
 8004578:	40020070 	.word	0x40020070
 800457c:	40020088 	.word	0x40020088
 8004580:	400200a0 	.word	0x400200a0
 8004584:	400200b8 	.word	0x400200b8
 8004588:	40020410 	.word	0x40020410
 800458c:	40020428 	.word	0x40020428
 8004590:	40020440 	.word	0x40020440
 8004594:	40020458 	.word	0x40020458
 8004598:	40020470 	.word	0x40020470
 800459c:	40020488 	.word	0x40020488
 80045a0:	400204a0 	.word	0x400204a0
 80045a4:	400204b8 	.word	0x400204b8
 80045a8:	58025408 	.word	0x58025408
 80045ac:	5802541c 	.word	0x5802541c
 80045b0:	58025430 	.word	0x58025430
 80045b4:	58025444 	.word	0x58025444
 80045b8:	58025458 	.word	0x58025458
 80045bc:	5802546c 	.word	0x5802546c
 80045c0:	58025480 	.word	0x58025480
 80045c4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	60da      	str	r2, [r3, #12]
}
 80045d8:	e04d      	b.n	8004676 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a29      	ldr	r2, [pc, #164]	@ (8004684 <DMA_SetConfig+0x338>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d022      	beq.n	800462a <DMA_SetConfig+0x2de>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a27      	ldr	r2, [pc, #156]	@ (8004688 <DMA_SetConfig+0x33c>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d01d      	beq.n	800462a <DMA_SetConfig+0x2de>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a26      	ldr	r2, [pc, #152]	@ (800468c <DMA_SetConfig+0x340>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d018      	beq.n	800462a <DMA_SetConfig+0x2de>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a24      	ldr	r2, [pc, #144]	@ (8004690 <DMA_SetConfig+0x344>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d013      	beq.n	800462a <DMA_SetConfig+0x2de>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a23      	ldr	r2, [pc, #140]	@ (8004694 <DMA_SetConfig+0x348>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d00e      	beq.n	800462a <DMA_SetConfig+0x2de>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a21      	ldr	r2, [pc, #132]	@ (8004698 <DMA_SetConfig+0x34c>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d009      	beq.n	800462a <DMA_SetConfig+0x2de>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a20      	ldr	r2, [pc, #128]	@ (800469c <DMA_SetConfig+0x350>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d004      	beq.n	800462a <DMA_SetConfig+0x2de>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a1e      	ldr	r2, [pc, #120]	@ (80046a0 <DMA_SetConfig+0x354>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d101      	bne.n	800462e <DMA_SetConfig+0x2e2>
 800462a:	2301      	movs	r3, #1
 800462c:	e000      	b.n	8004630 <DMA_SetConfig+0x2e4>
 800462e:	2300      	movs	r3, #0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d020      	beq.n	8004676 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004638:	f003 031f 	and.w	r3, r3, #31
 800463c:	2201      	movs	r2, #1
 800463e:	409a      	lsls	r2, r3
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	2b40      	cmp	r3, #64	@ 0x40
 8004652:	d108      	bne.n	8004666 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	60da      	str	r2, [r3, #12]
}
 8004664:	e007      	b.n	8004676 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	60da      	str	r2, [r3, #12]
}
 8004676:	bf00      	nop
 8004678:	371c      	adds	r7, #28
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	58025408 	.word	0x58025408
 8004688:	5802541c 	.word	0x5802541c
 800468c:	58025430 	.word	0x58025430
 8004690:	58025444 	.word	0x58025444
 8004694:	58025458 	.word	0x58025458
 8004698:	5802546c 	.word	0x5802546c
 800469c:	58025480 	.word	0x58025480
 80046a0:	58025494 	.word	0x58025494

080046a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a42      	ldr	r2, [pc, #264]	@ (80047bc <DMA_CalcBaseAndBitshift+0x118>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d04a      	beq.n	800474c <DMA_CalcBaseAndBitshift+0xa8>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a41      	ldr	r2, [pc, #260]	@ (80047c0 <DMA_CalcBaseAndBitshift+0x11c>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d045      	beq.n	800474c <DMA_CalcBaseAndBitshift+0xa8>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a3f      	ldr	r2, [pc, #252]	@ (80047c4 <DMA_CalcBaseAndBitshift+0x120>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d040      	beq.n	800474c <DMA_CalcBaseAndBitshift+0xa8>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a3e      	ldr	r2, [pc, #248]	@ (80047c8 <DMA_CalcBaseAndBitshift+0x124>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d03b      	beq.n	800474c <DMA_CalcBaseAndBitshift+0xa8>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a3c      	ldr	r2, [pc, #240]	@ (80047cc <DMA_CalcBaseAndBitshift+0x128>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d036      	beq.n	800474c <DMA_CalcBaseAndBitshift+0xa8>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a3b      	ldr	r2, [pc, #236]	@ (80047d0 <DMA_CalcBaseAndBitshift+0x12c>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d031      	beq.n	800474c <DMA_CalcBaseAndBitshift+0xa8>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a39      	ldr	r2, [pc, #228]	@ (80047d4 <DMA_CalcBaseAndBitshift+0x130>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d02c      	beq.n	800474c <DMA_CalcBaseAndBitshift+0xa8>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a38      	ldr	r2, [pc, #224]	@ (80047d8 <DMA_CalcBaseAndBitshift+0x134>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d027      	beq.n	800474c <DMA_CalcBaseAndBitshift+0xa8>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a36      	ldr	r2, [pc, #216]	@ (80047dc <DMA_CalcBaseAndBitshift+0x138>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d022      	beq.n	800474c <DMA_CalcBaseAndBitshift+0xa8>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a35      	ldr	r2, [pc, #212]	@ (80047e0 <DMA_CalcBaseAndBitshift+0x13c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d01d      	beq.n	800474c <DMA_CalcBaseAndBitshift+0xa8>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a33      	ldr	r2, [pc, #204]	@ (80047e4 <DMA_CalcBaseAndBitshift+0x140>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d018      	beq.n	800474c <DMA_CalcBaseAndBitshift+0xa8>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a32      	ldr	r2, [pc, #200]	@ (80047e8 <DMA_CalcBaseAndBitshift+0x144>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d013      	beq.n	800474c <DMA_CalcBaseAndBitshift+0xa8>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a30      	ldr	r2, [pc, #192]	@ (80047ec <DMA_CalcBaseAndBitshift+0x148>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d00e      	beq.n	800474c <DMA_CalcBaseAndBitshift+0xa8>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a2f      	ldr	r2, [pc, #188]	@ (80047f0 <DMA_CalcBaseAndBitshift+0x14c>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d009      	beq.n	800474c <DMA_CalcBaseAndBitshift+0xa8>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a2d      	ldr	r2, [pc, #180]	@ (80047f4 <DMA_CalcBaseAndBitshift+0x150>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d004      	beq.n	800474c <DMA_CalcBaseAndBitshift+0xa8>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a2c      	ldr	r2, [pc, #176]	@ (80047f8 <DMA_CalcBaseAndBitshift+0x154>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d101      	bne.n	8004750 <DMA_CalcBaseAndBitshift+0xac>
 800474c:	2301      	movs	r3, #1
 800474e:	e000      	b.n	8004752 <DMA_CalcBaseAndBitshift+0xae>
 8004750:	2300      	movs	r3, #0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d024      	beq.n	80047a0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	b2db      	uxtb	r3, r3
 800475c:	3b10      	subs	r3, #16
 800475e:	4a27      	ldr	r2, [pc, #156]	@ (80047fc <DMA_CalcBaseAndBitshift+0x158>)
 8004760:	fba2 2303 	umull	r2, r3, r2, r3
 8004764:	091b      	lsrs	r3, r3, #4
 8004766:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f003 0307 	and.w	r3, r3, #7
 800476e:	4a24      	ldr	r2, [pc, #144]	@ (8004800 <DMA_CalcBaseAndBitshift+0x15c>)
 8004770:	5cd3      	ldrb	r3, [r2, r3]
 8004772:	461a      	mov	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2b03      	cmp	r3, #3
 800477c:	d908      	bls.n	8004790 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	461a      	mov	r2, r3
 8004784:	4b1f      	ldr	r3, [pc, #124]	@ (8004804 <DMA_CalcBaseAndBitshift+0x160>)
 8004786:	4013      	ands	r3, r2
 8004788:	1d1a      	adds	r2, r3, #4
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	659a      	str	r2, [r3, #88]	@ 0x58
 800478e:	e00d      	b.n	80047ac <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	461a      	mov	r2, r3
 8004796:	4b1b      	ldr	r3, [pc, #108]	@ (8004804 <DMA_CalcBaseAndBitshift+0x160>)
 8004798:	4013      	ands	r3, r2
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	6593      	str	r3, [r2, #88]	@ 0x58
 800479e:	e005      	b.n	80047ac <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3714      	adds	r7, #20
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr
 80047bc:	40020010 	.word	0x40020010
 80047c0:	40020028 	.word	0x40020028
 80047c4:	40020040 	.word	0x40020040
 80047c8:	40020058 	.word	0x40020058
 80047cc:	40020070 	.word	0x40020070
 80047d0:	40020088 	.word	0x40020088
 80047d4:	400200a0 	.word	0x400200a0
 80047d8:	400200b8 	.word	0x400200b8
 80047dc:	40020410 	.word	0x40020410
 80047e0:	40020428 	.word	0x40020428
 80047e4:	40020440 	.word	0x40020440
 80047e8:	40020458 	.word	0x40020458
 80047ec:	40020470 	.word	0x40020470
 80047f0:	40020488 	.word	0x40020488
 80047f4:	400204a0 	.word	0x400204a0
 80047f8:	400204b8 	.word	0x400204b8
 80047fc:	aaaaaaab 	.word	0xaaaaaaab
 8004800:	08012868 	.word	0x08012868
 8004804:	fffffc00 	.word	0xfffffc00

08004808 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004810:	2300      	movs	r3, #0
 8004812:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d120      	bne.n	800485e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004820:	2b03      	cmp	r3, #3
 8004822:	d858      	bhi.n	80048d6 <DMA_CheckFifoParam+0xce>
 8004824:	a201      	add	r2, pc, #4	@ (adr r2, 800482c <DMA_CheckFifoParam+0x24>)
 8004826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482a:	bf00      	nop
 800482c:	0800483d 	.word	0x0800483d
 8004830:	0800484f 	.word	0x0800484f
 8004834:	0800483d 	.word	0x0800483d
 8004838:	080048d7 	.word	0x080048d7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004840:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d048      	beq.n	80048da <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800484c:	e045      	b.n	80048da <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004852:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004856:	d142      	bne.n	80048de <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800485c:	e03f      	b.n	80048de <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004866:	d123      	bne.n	80048b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800486c:	2b03      	cmp	r3, #3
 800486e:	d838      	bhi.n	80048e2 <DMA_CheckFifoParam+0xda>
 8004870:	a201      	add	r2, pc, #4	@ (adr r2, 8004878 <DMA_CheckFifoParam+0x70>)
 8004872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004876:	bf00      	nop
 8004878:	08004889 	.word	0x08004889
 800487c:	0800488f 	.word	0x0800488f
 8004880:	08004889 	.word	0x08004889
 8004884:	080048a1 	.word	0x080048a1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	73fb      	strb	r3, [r7, #15]
        break;
 800488c:	e030      	b.n	80048f0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004892:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d025      	beq.n	80048e6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800489e:	e022      	b.n	80048e6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80048a8:	d11f      	bne.n	80048ea <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80048ae:	e01c      	b.n	80048ea <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d902      	bls.n	80048be <DMA_CheckFifoParam+0xb6>
 80048b8:	2b03      	cmp	r3, #3
 80048ba:	d003      	beq.n	80048c4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80048bc:	e018      	b.n	80048f0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	73fb      	strb	r3, [r7, #15]
        break;
 80048c2:	e015      	b.n	80048f0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00e      	beq.n	80048ee <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	73fb      	strb	r3, [r7, #15]
    break;
 80048d4:	e00b      	b.n	80048ee <DMA_CheckFifoParam+0xe6>
        break;
 80048d6:	bf00      	nop
 80048d8:	e00a      	b.n	80048f0 <DMA_CheckFifoParam+0xe8>
        break;
 80048da:	bf00      	nop
 80048dc:	e008      	b.n	80048f0 <DMA_CheckFifoParam+0xe8>
        break;
 80048de:	bf00      	nop
 80048e0:	e006      	b.n	80048f0 <DMA_CheckFifoParam+0xe8>
        break;
 80048e2:	bf00      	nop
 80048e4:	e004      	b.n	80048f0 <DMA_CheckFifoParam+0xe8>
        break;
 80048e6:	bf00      	nop
 80048e8:	e002      	b.n	80048f0 <DMA_CheckFifoParam+0xe8>
        break;
 80048ea:	bf00      	nop
 80048ec:	e000      	b.n	80048f0 <DMA_CheckFifoParam+0xe8>
    break;
 80048ee:	bf00      	nop
    }
  }

  return status;
 80048f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3714      	adds	r7, #20
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop

08004900 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a38      	ldr	r2, [pc, #224]	@ (80049f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d022      	beq.n	800495e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a36      	ldr	r2, [pc, #216]	@ (80049f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d01d      	beq.n	800495e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a35      	ldr	r2, [pc, #212]	@ (80049fc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d018      	beq.n	800495e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a33      	ldr	r2, [pc, #204]	@ (8004a00 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d013      	beq.n	800495e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a32      	ldr	r2, [pc, #200]	@ (8004a04 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d00e      	beq.n	800495e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a30      	ldr	r2, [pc, #192]	@ (8004a08 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d009      	beq.n	800495e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a2f      	ldr	r2, [pc, #188]	@ (8004a0c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d004      	beq.n	800495e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a2d      	ldr	r2, [pc, #180]	@ (8004a10 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d101      	bne.n	8004962 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800495e:	2301      	movs	r3, #1
 8004960:	e000      	b.n	8004964 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004962:	2300      	movs	r3, #0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d01a      	beq.n	800499e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	b2db      	uxtb	r3, r3
 800496e:	3b08      	subs	r3, #8
 8004970:	4a28      	ldr	r2, [pc, #160]	@ (8004a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004972:	fba2 2303 	umull	r2, r3, r2, r3
 8004976:	091b      	lsrs	r3, r3, #4
 8004978:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	4b26      	ldr	r3, [pc, #152]	@ (8004a18 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800497e:	4413      	add	r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	461a      	mov	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a24      	ldr	r2, [pc, #144]	@ (8004a1c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800498c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f003 031f 	and.w	r3, r3, #31
 8004994:	2201      	movs	r2, #1
 8004996:	409a      	lsls	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800499c:	e024      	b.n	80049e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	3b10      	subs	r3, #16
 80049a6:	4a1e      	ldr	r2, [pc, #120]	@ (8004a20 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80049a8:	fba2 2303 	umull	r2, r3, r2, r3
 80049ac:	091b      	lsrs	r3, r3, #4
 80049ae:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	4a1c      	ldr	r2, [pc, #112]	@ (8004a24 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d806      	bhi.n	80049c6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	4a1b      	ldr	r2, [pc, #108]	@ (8004a28 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d902      	bls.n	80049c6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	3308      	adds	r3, #8
 80049c4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	4b18      	ldr	r3, [pc, #96]	@ (8004a2c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80049ca:	4413      	add	r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	461a      	mov	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a16      	ldr	r2, [pc, #88]	@ (8004a30 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80049d8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f003 031f 	and.w	r3, r3, #31
 80049e0:	2201      	movs	r2, #1
 80049e2:	409a      	lsls	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80049e8:	bf00      	nop
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr
 80049f4:	58025408 	.word	0x58025408
 80049f8:	5802541c 	.word	0x5802541c
 80049fc:	58025430 	.word	0x58025430
 8004a00:	58025444 	.word	0x58025444
 8004a04:	58025458 	.word	0x58025458
 8004a08:	5802546c 	.word	0x5802546c
 8004a0c:	58025480 	.word	0x58025480
 8004a10:	58025494 	.word	0x58025494
 8004a14:	cccccccd 	.word	0xcccccccd
 8004a18:	16009600 	.word	0x16009600
 8004a1c:	58025880 	.word	0x58025880
 8004a20:	aaaaaaab 	.word	0xaaaaaaab
 8004a24:	400204b8 	.word	0x400204b8
 8004a28:	4002040f 	.word	0x4002040f
 8004a2c:	10008200 	.word	0x10008200
 8004a30:	40020880 	.word	0x40020880

08004a34 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d04a      	beq.n	8004ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	d847      	bhi.n	8004ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a25      	ldr	r2, [pc, #148]	@ (8004aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d022      	beq.n	8004aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a24      	ldr	r2, [pc, #144]	@ (8004af0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d01d      	beq.n	8004aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a22      	ldr	r2, [pc, #136]	@ (8004af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d018      	beq.n	8004aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a21      	ldr	r2, [pc, #132]	@ (8004af8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d013      	beq.n	8004aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a1f      	ldr	r2, [pc, #124]	@ (8004afc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d00e      	beq.n	8004aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a1e      	ldr	r2, [pc, #120]	@ (8004b00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d009      	beq.n	8004aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a1c      	ldr	r2, [pc, #112]	@ (8004b04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d004      	beq.n	8004aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a1b      	ldr	r2, [pc, #108]	@ (8004b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d101      	bne.n	8004aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e000      	b.n	8004aa6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00a      	beq.n	8004ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	4b17      	ldr	r3, [pc, #92]	@ (8004b0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004aae:	4413      	add	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a15      	ldr	r2, [pc, #84]	@ (8004b10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004abc:	671a      	str	r2, [r3, #112]	@ 0x70
 8004abe:	e009      	b.n	8004ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	4b14      	ldr	r3, [pc, #80]	@ (8004b14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004ac4:	4413      	add	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	461a      	mov	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a11      	ldr	r2, [pc, #68]	@ (8004b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004ad2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	2201      	movs	r2, #1
 8004ada:	409a      	lsls	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004ae0:	bf00      	nop
 8004ae2:	3714      	adds	r7, #20
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr
 8004aec:	58025408 	.word	0x58025408
 8004af0:	5802541c 	.word	0x5802541c
 8004af4:	58025430 	.word	0x58025430
 8004af8:	58025444 	.word	0x58025444
 8004afc:	58025458 	.word	0x58025458
 8004b00:	5802546c 	.word	0x5802546c
 8004b04:	58025480 	.word	0x58025480
 8004b08:	58025494 	.word	0x58025494
 8004b0c:	1600963f 	.word	0x1600963f
 8004b10:	58025940 	.word	0x58025940
 8004b14:	1000823f 	.word	0x1000823f
 8004b18:	40020940 	.word	0x40020940

08004b1c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b087      	sub	sp, #28
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	460b      	mov	r3, r1
 8004b26:	607a      	str	r2, [r7, #4]
 8004b28:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e00a      	b.n	8004b4e <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8004b38:	7afb      	ldrb	r3, [r7, #11]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d103      	bne.n	8004b46 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	605a      	str	r2, [r3, #4]
      break;
 8004b44:	e002      	b.n	8004b4c <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	75fb      	strb	r3, [r7, #23]
      break;
 8004b4a:	bf00      	nop
  }

  return status;
 8004b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	371c      	adds	r7, #28
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
 8004b62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e003      	b.n	8004b76 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004b74:	2300      	movs	r3, #0
  }
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
	...

08004b84 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	0c1b      	lsrs	r3, r3, #16
 8004b92:	f003 0303 	and.w	r3, r3, #3
 8004b96:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 031f 	and.w	r3, r3, #31
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba6:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8004ba8:	f7fd fecc 	bl	8002944 <HAL_GetCurrentCPUID>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b03      	cmp	r3, #3
 8004bb0:	d105      	bne.n	8004bbe <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	011a      	lsls	r2, r3, #4
 8004bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8004bf4 <HAL_EXTI_IRQHandler+0x70>)
 8004bb8:	4413      	add	r3, r2
 8004bba:	617b      	str	r3, [r7, #20]
 8004bbc:	e004      	b.n	8004bc8 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	011a      	lsls	r2, r3, #4
 8004bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf8 <HAL_EXTI_IRQHandler+0x74>)
 8004bc4:	4413      	add	r3, r2
 8004bc6:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	4013      	ands	r3, r2
 8004bd0:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d009      	beq.n	8004bec <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d002      	beq.n	8004bec <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	4798      	blx	r3
    }
  }
}
 8004bec:	bf00      	nop
 8004bee:	3718      	adds	r7, #24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	58000088 	.word	0x58000088
 8004bf8:	580000c8 	.word	0x580000c8

08004bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b089      	sub	sp, #36	@ 0x24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004c06:	2300      	movs	r3, #0
 8004c08:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004c0a:	4b89      	ldr	r3, [pc, #548]	@ (8004e30 <HAL_GPIO_Init+0x234>)
 8004c0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004c0e:	e194      	b.n	8004f3a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	2101      	movs	r1, #1
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	fa01 f303 	lsl.w	r3, r1, r3
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f000 8186 	beq.w	8004f34 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f003 0303 	and.w	r3, r3, #3
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d005      	beq.n	8004c40 <HAL_GPIO_Init+0x44>
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f003 0303 	and.w	r3, r3, #3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d130      	bne.n	8004ca2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	005b      	lsls	r3, r3, #1
 8004c4a:	2203      	movs	r2, #3
 8004c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c50:	43db      	mvns	r3, r3
 8004c52:	69ba      	ldr	r2, [r7, #24]
 8004c54:	4013      	ands	r3, r2
 8004c56:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	68da      	ldr	r2, [r3, #12]
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	005b      	lsls	r3, r3, #1
 8004c60:	fa02 f303 	lsl.w	r3, r2, r3
 8004c64:	69ba      	ldr	r2, [r7, #24]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c76:	2201      	movs	r2, #1
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7e:	43db      	mvns	r3, r3
 8004c80:	69ba      	ldr	r2, [r7, #24]
 8004c82:	4013      	ands	r3, r2
 8004c84:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	091b      	lsrs	r3, r3, #4
 8004c8c:	f003 0201 	and.w	r2, r3, #1
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	fa02 f303 	lsl.w	r3, r2, r3
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f003 0303 	and.w	r3, r3, #3
 8004caa:	2b03      	cmp	r3, #3
 8004cac:	d017      	beq.n	8004cde <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	005b      	lsls	r3, r3, #1
 8004cb8:	2203      	movs	r2, #3
 8004cba:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbe:	43db      	mvns	r3, r3
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	689a      	ldr	r2, [r3, #8]
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	005b      	lsls	r3, r3, #1
 8004cce:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd2:	69ba      	ldr	r2, [r7, #24]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	69ba      	ldr	r2, [r7, #24]
 8004cdc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f003 0303 	and.w	r3, r3, #3
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d123      	bne.n	8004d32 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	08da      	lsrs	r2, r3, #3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	3208      	adds	r2, #8
 8004cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	f003 0307 	and.w	r3, r3, #7
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	220f      	movs	r2, #15
 8004d02:	fa02 f303 	lsl.w	r3, r2, r3
 8004d06:	43db      	mvns	r3, r3
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	691a      	ldr	r2, [r3, #16]
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	f003 0307 	and.w	r3, r3, #7
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1e:	69ba      	ldr	r2, [r7, #24]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	08da      	lsrs	r2, r3, #3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	3208      	adds	r2, #8
 8004d2c:	69b9      	ldr	r1, [r7, #24]
 8004d2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	005b      	lsls	r3, r3, #1
 8004d3c:	2203      	movs	r2, #3
 8004d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d42:	43db      	mvns	r3, r3
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	4013      	ands	r3, r2
 8004d48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f003 0203 	and.w	r2, r3, #3
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	005b      	lsls	r3, r3, #1
 8004d56:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5a:	69ba      	ldr	r2, [r7, #24]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f000 80e0 	beq.w	8004f34 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d74:	4b2f      	ldr	r3, [pc, #188]	@ (8004e34 <HAL_GPIO_Init+0x238>)
 8004d76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004d7a:	4a2e      	ldr	r2, [pc, #184]	@ (8004e34 <HAL_GPIO_Init+0x238>)
 8004d7c:	f043 0302 	orr.w	r3, r3, #2
 8004d80:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004d84:	4b2b      	ldr	r3, [pc, #172]	@ (8004e34 <HAL_GPIO_Init+0x238>)
 8004d86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	60fb      	str	r3, [r7, #12]
 8004d90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d92:	4a29      	ldr	r2, [pc, #164]	@ (8004e38 <HAL_GPIO_Init+0x23c>)
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	089b      	lsrs	r3, r3, #2
 8004d98:	3302      	adds	r3, #2
 8004d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	f003 0303 	and.w	r3, r3, #3
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	220f      	movs	r2, #15
 8004daa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dae:	43db      	mvns	r3, r3
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	4013      	ands	r3, r2
 8004db4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a20      	ldr	r2, [pc, #128]	@ (8004e3c <HAL_GPIO_Init+0x240>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d052      	beq.n	8004e64 <HAL_GPIO_Init+0x268>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a1f      	ldr	r2, [pc, #124]	@ (8004e40 <HAL_GPIO_Init+0x244>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d031      	beq.n	8004e2a <HAL_GPIO_Init+0x22e>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a1e      	ldr	r2, [pc, #120]	@ (8004e44 <HAL_GPIO_Init+0x248>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d02b      	beq.n	8004e26 <HAL_GPIO_Init+0x22a>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a1d      	ldr	r2, [pc, #116]	@ (8004e48 <HAL_GPIO_Init+0x24c>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d025      	beq.n	8004e22 <HAL_GPIO_Init+0x226>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a1c      	ldr	r2, [pc, #112]	@ (8004e4c <HAL_GPIO_Init+0x250>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d01f      	beq.n	8004e1e <HAL_GPIO_Init+0x222>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a1b      	ldr	r2, [pc, #108]	@ (8004e50 <HAL_GPIO_Init+0x254>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d019      	beq.n	8004e1a <HAL_GPIO_Init+0x21e>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a1a      	ldr	r2, [pc, #104]	@ (8004e54 <HAL_GPIO_Init+0x258>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d013      	beq.n	8004e16 <HAL_GPIO_Init+0x21a>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a19      	ldr	r2, [pc, #100]	@ (8004e58 <HAL_GPIO_Init+0x25c>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d00d      	beq.n	8004e12 <HAL_GPIO_Init+0x216>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a18      	ldr	r2, [pc, #96]	@ (8004e5c <HAL_GPIO_Init+0x260>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d007      	beq.n	8004e0e <HAL_GPIO_Init+0x212>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a17      	ldr	r2, [pc, #92]	@ (8004e60 <HAL_GPIO_Init+0x264>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d101      	bne.n	8004e0a <HAL_GPIO_Init+0x20e>
 8004e06:	2309      	movs	r3, #9
 8004e08:	e02d      	b.n	8004e66 <HAL_GPIO_Init+0x26a>
 8004e0a:	230a      	movs	r3, #10
 8004e0c:	e02b      	b.n	8004e66 <HAL_GPIO_Init+0x26a>
 8004e0e:	2308      	movs	r3, #8
 8004e10:	e029      	b.n	8004e66 <HAL_GPIO_Init+0x26a>
 8004e12:	2307      	movs	r3, #7
 8004e14:	e027      	b.n	8004e66 <HAL_GPIO_Init+0x26a>
 8004e16:	2306      	movs	r3, #6
 8004e18:	e025      	b.n	8004e66 <HAL_GPIO_Init+0x26a>
 8004e1a:	2305      	movs	r3, #5
 8004e1c:	e023      	b.n	8004e66 <HAL_GPIO_Init+0x26a>
 8004e1e:	2304      	movs	r3, #4
 8004e20:	e021      	b.n	8004e66 <HAL_GPIO_Init+0x26a>
 8004e22:	2303      	movs	r3, #3
 8004e24:	e01f      	b.n	8004e66 <HAL_GPIO_Init+0x26a>
 8004e26:	2302      	movs	r3, #2
 8004e28:	e01d      	b.n	8004e66 <HAL_GPIO_Init+0x26a>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e01b      	b.n	8004e66 <HAL_GPIO_Init+0x26a>
 8004e2e:	bf00      	nop
 8004e30:	58000080 	.word	0x58000080
 8004e34:	58024400 	.word	0x58024400
 8004e38:	58000400 	.word	0x58000400
 8004e3c:	58020000 	.word	0x58020000
 8004e40:	58020400 	.word	0x58020400
 8004e44:	58020800 	.word	0x58020800
 8004e48:	58020c00 	.word	0x58020c00
 8004e4c:	58021000 	.word	0x58021000
 8004e50:	58021400 	.word	0x58021400
 8004e54:	58021800 	.word	0x58021800
 8004e58:	58021c00 	.word	0x58021c00
 8004e5c:	58022000 	.word	0x58022000
 8004e60:	58022400 	.word	0x58022400
 8004e64:	2300      	movs	r3, #0
 8004e66:	69fa      	ldr	r2, [r7, #28]
 8004e68:	f002 0203 	and.w	r2, r2, #3
 8004e6c:	0092      	lsls	r2, r2, #2
 8004e6e:	4093      	lsls	r3, r2
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e76:	4938      	ldr	r1, [pc, #224]	@ (8004f58 <HAL_GPIO_Init+0x35c>)
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	089b      	lsrs	r3, r3, #2
 8004e7c:	3302      	adds	r3, #2
 8004e7e:	69ba      	ldr	r2, [r7, #24]
 8004e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	43db      	mvns	r3, r3
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	4013      	ands	r3, r2
 8004e94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004eaa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004eb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	43db      	mvns	r3, r3
 8004ebe:	69ba      	ldr	r2, [r7, #24]
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d003      	beq.n	8004ed8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004ed0:	69ba      	ldr	r2, [r7, #24]
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004ed8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	43db      	mvns	r3, r3
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	4013      	ands	r3, r2
 8004eee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d003      	beq.n	8004f04 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	69ba      	ldr	r2, [r7, #24]
 8004f08:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	43db      	mvns	r3, r3
 8004f14:	69ba      	ldr	r2, [r7, #24]
 8004f16:	4013      	ands	r3, r2
 8004f18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	69ba      	ldr	r2, [r7, #24]
 8004f32:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	3301      	adds	r3, #1
 8004f38:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	fa22 f303 	lsr.w	r3, r2, r3
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f47f ae63 	bne.w	8004c10 <HAL_GPIO_Init+0x14>
  }
}
 8004f4a:	bf00      	nop
 8004f4c:	bf00      	nop
 8004f4e:	3724      	adds	r7, #36	@ 0x24
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr
 8004f58:	58000400 	.word	0x58000400

08004f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	460b      	mov	r3, r1
 8004f66:	807b      	strh	r3, [r7, #2]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f6c:	787b      	ldrb	r3, [r7, #1]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f72:	887a      	ldrh	r2, [r7, #2]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004f78:	e003      	b.n	8004f82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004f7a:	887b      	ldrh	r3, [r7, #2]
 8004f7c:	041a      	lsls	r2, r3, #16
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	619a      	str	r2, [r3, #24]
}
 8004f82:	bf00      	nop
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b085      	sub	sp, #20
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
 8004f96:	460b      	mov	r3, r1
 8004f98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004fa0:	887a      	ldrh	r2, [r7, #2]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	041a      	lsls	r2, r3, #16
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	43d9      	mvns	r1, r3
 8004fac:	887b      	ldrh	r3, [r7, #2]
 8004fae:	400b      	ands	r3, r1
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	619a      	str	r2, [r3, #24]
}
 8004fb6:	bf00      	nop
 8004fb8:	3714      	adds	r7, #20
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
	...

08004fc4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004fcc:	4a08      	ldr	r2, [pc, #32]	@ (8004ff0 <HAL_HSEM_FastTake+0x2c>)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	3320      	adds	r3, #32
 8004fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fd6:	4a07      	ldr	r2, [pc, #28]	@ (8004ff4 <HAL_HSEM_FastTake+0x30>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d101      	bne.n	8004fe0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	e000      	b.n	8004fe2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	58026400 	.word	0x58026400
 8004ff4:	80000300 	.word	0x80000300

08004ff8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005002:	4906      	ldr	r1, [pc, #24]	@ (800501c <HAL_HSEM_Release+0x24>)
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr
 800501c:	58026400 	.word	0x58026400

08005020 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af02      	add	r7, sp, #8
 8005026:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e0fe      	b.n	8005230 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d106      	bne.n	800504c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f00a fa7e 	bl	800f548 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2203      	movs	r2, #3
 8005050:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4618      	mov	r0, r3
 800505a:	f006 fe42 	bl	800bce2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6818      	ldr	r0, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	7c1a      	ldrb	r2, [r3, #16]
 8005066:	f88d 2000 	strb.w	r2, [sp]
 800506a:	3304      	adds	r3, #4
 800506c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800506e:	f006 fd13 	bl	800ba98 <USB_CoreInit>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d005      	beq.n	8005084 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2202      	movs	r2, #2
 800507c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e0d5      	b.n	8005230 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2100      	movs	r1, #0
 800508a:	4618      	mov	r0, r3
 800508c:	f006 fe3a 	bl	800bd04 <USB_SetCurrentMode>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d005      	beq.n	80050a2 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2202      	movs	r2, #2
 800509a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e0c6      	b.n	8005230 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050a2:	2300      	movs	r3, #0
 80050a4:	73fb      	strb	r3, [r7, #15]
 80050a6:	e04a      	b.n	800513e <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80050a8:	7bfa      	ldrb	r2, [r7, #15]
 80050aa:	6879      	ldr	r1, [r7, #4]
 80050ac:	4613      	mov	r3, r2
 80050ae:	00db      	lsls	r3, r3, #3
 80050b0:	4413      	add	r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	440b      	add	r3, r1
 80050b6:	3315      	adds	r3, #21
 80050b8:	2201      	movs	r2, #1
 80050ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80050bc:	7bfa      	ldrb	r2, [r7, #15]
 80050be:	6879      	ldr	r1, [r7, #4]
 80050c0:	4613      	mov	r3, r2
 80050c2:	00db      	lsls	r3, r3, #3
 80050c4:	4413      	add	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	440b      	add	r3, r1
 80050ca:	3314      	adds	r3, #20
 80050cc:	7bfa      	ldrb	r2, [r7, #15]
 80050ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80050d0:	7bfa      	ldrb	r2, [r7, #15]
 80050d2:	7bfb      	ldrb	r3, [r7, #15]
 80050d4:	b298      	uxth	r0, r3
 80050d6:	6879      	ldr	r1, [r7, #4]
 80050d8:	4613      	mov	r3, r2
 80050da:	00db      	lsls	r3, r3, #3
 80050dc:	4413      	add	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	440b      	add	r3, r1
 80050e2:	332e      	adds	r3, #46	@ 0x2e
 80050e4:	4602      	mov	r2, r0
 80050e6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80050e8:	7bfa      	ldrb	r2, [r7, #15]
 80050ea:	6879      	ldr	r1, [r7, #4]
 80050ec:	4613      	mov	r3, r2
 80050ee:	00db      	lsls	r3, r3, #3
 80050f0:	4413      	add	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	440b      	add	r3, r1
 80050f6:	3318      	adds	r3, #24
 80050f8:	2200      	movs	r2, #0
 80050fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80050fc:	7bfa      	ldrb	r2, [r7, #15]
 80050fe:	6879      	ldr	r1, [r7, #4]
 8005100:	4613      	mov	r3, r2
 8005102:	00db      	lsls	r3, r3, #3
 8005104:	4413      	add	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	440b      	add	r3, r1
 800510a:	331c      	adds	r3, #28
 800510c:	2200      	movs	r2, #0
 800510e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005110:	7bfa      	ldrb	r2, [r7, #15]
 8005112:	6879      	ldr	r1, [r7, #4]
 8005114:	4613      	mov	r3, r2
 8005116:	00db      	lsls	r3, r3, #3
 8005118:	4413      	add	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	440b      	add	r3, r1
 800511e:	3320      	adds	r3, #32
 8005120:	2200      	movs	r2, #0
 8005122:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005124:	7bfa      	ldrb	r2, [r7, #15]
 8005126:	6879      	ldr	r1, [r7, #4]
 8005128:	4613      	mov	r3, r2
 800512a:	00db      	lsls	r3, r3, #3
 800512c:	4413      	add	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	440b      	add	r3, r1
 8005132:	3324      	adds	r3, #36	@ 0x24
 8005134:	2200      	movs	r2, #0
 8005136:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005138:	7bfb      	ldrb	r3, [r7, #15]
 800513a:	3301      	adds	r3, #1
 800513c:	73fb      	strb	r3, [r7, #15]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	791b      	ldrb	r3, [r3, #4]
 8005142:	7bfa      	ldrb	r2, [r7, #15]
 8005144:	429a      	cmp	r2, r3
 8005146:	d3af      	bcc.n	80050a8 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005148:	2300      	movs	r3, #0
 800514a:	73fb      	strb	r3, [r7, #15]
 800514c:	e044      	b.n	80051d8 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800514e:	7bfa      	ldrb	r2, [r7, #15]
 8005150:	6879      	ldr	r1, [r7, #4]
 8005152:	4613      	mov	r3, r2
 8005154:	00db      	lsls	r3, r3, #3
 8005156:	4413      	add	r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	440b      	add	r3, r1
 800515c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005160:	2200      	movs	r2, #0
 8005162:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005164:	7bfa      	ldrb	r2, [r7, #15]
 8005166:	6879      	ldr	r1, [r7, #4]
 8005168:	4613      	mov	r3, r2
 800516a:	00db      	lsls	r3, r3, #3
 800516c:	4413      	add	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	440b      	add	r3, r1
 8005172:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005176:	7bfa      	ldrb	r2, [r7, #15]
 8005178:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800517a:	7bfa      	ldrb	r2, [r7, #15]
 800517c:	6879      	ldr	r1, [r7, #4]
 800517e:	4613      	mov	r3, r2
 8005180:	00db      	lsls	r3, r3, #3
 8005182:	4413      	add	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	440b      	add	r3, r1
 8005188:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800518c:	2200      	movs	r2, #0
 800518e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005190:	7bfa      	ldrb	r2, [r7, #15]
 8005192:	6879      	ldr	r1, [r7, #4]
 8005194:	4613      	mov	r3, r2
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	4413      	add	r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	440b      	add	r3, r1
 800519e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80051a2:	2200      	movs	r2, #0
 80051a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80051a6:	7bfa      	ldrb	r2, [r7, #15]
 80051a8:	6879      	ldr	r1, [r7, #4]
 80051aa:	4613      	mov	r3, r2
 80051ac:	00db      	lsls	r3, r3, #3
 80051ae:	4413      	add	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	440b      	add	r3, r1
 80051b4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80051b8:	2200      	movs	r2, #0
 80051ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80051bc:	7bfa      	ldrb	r2, [r7, #15]
 80051be:	6879      	ldr	r1, [r7, #4]
 80051c0:	4613      	mov	r3, r2
 80051c2:	00db      	lsls	r3, r3, #3
 80051c4:	4413      	add	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	440b      	add	r3, r1
 80051ca:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80051ce:	2200      	movs	r2, #0
 80051d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051d2:	7bfb      	ldrb	r3, [r7, #15]
 80051d4:	3301      	adds	r3, #1
 80051d6:	73fb      	strb	r3, [r7, #15]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	791b      	ldrb	r3, [r3, #4]
 80051dc:	7bfa      	ldrb	r2, [r7, #15]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d3b5      	bcc.n	800514e <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6818      	ldr	r0, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	7c1a      	ldrb	r2, [r3, #16]
 80051ea:	f88d 2000 	strb.w	r2, [sp]
 80051ee:	3304      	adds	r3, #4
 80051f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051f2:	f006 fdd3 	bl	800bd9c <USB_DevInit>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d005      	beq.n	8005208 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2202      	movs	r2, #2
 8005200:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e013      	b.n	8005230 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	7b1b      	ldrb	r3, [r3, #12]
 800521a:	2b01      	cmp	r3, #1
 800521c:	d102      	bne.n	8005224 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f001 f96c 	bl	80064fc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4618      	mov	r0, r3
 800522a:	f007 fe12 	bl	800ce52 <USB_DevDisconnect>

  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800524c:	2b01      	cmp	r3, #1
 800524e:	d101      	bne.n	8005254 <HAL_PCD_Start+0x1c>
 8005250:	2302      	movs	r3, #2
 8005252:	e022      	b.n	800529a <HAL_PCD_Start+0x62>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005264:	2b00      	cmp	r3, #0
 8005266:	d009      	beq.n	800527c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800526c:	2b01      	cmp	r3, #1
 800526e:	d105      	bne.n	800527c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005274:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4618      	mov	r0, r3
 8005282:	f006 fd1d 	bl	800bcc0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4618      	mov	r0, r3
 800528c:	f007 fdc0 	bl	800ce10 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80052a2:	b590      	push	{r4, r7, lr}
 80052a4:	b08d      	sub	sp, #52	@ 0x34
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b0:	6a3b      	ldr	r3, [r7, #32]
 80052b2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4618      	mov	r0, r3
 80052ba:	f007 fe7e 	bl	800cfba <USB_GetMode>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f040 84b9 	bne.w	8005c38 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4618      	mov	r0, r3
 80052cc:	f007 fde2 	bl	800ce94 <USB_ReadInterrupts>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f000 84af 	beq.w	8005c36 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	0a1b      	lsrs	r3, r3, #8
 80052e2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f007 fdcf 	bl	800ce94 <USB_ReadInterrupts>
 80052f6:	4603      	mov	r3, r0
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d107      	bne.n	8005310 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	695a      	ldr	r2, [r3, #20]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f002 0202 	and.w	r2, r2, #2
 800530e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4618      	mov	r0, r3
 8005316:	f007 fdbd 	bl	800ce94 <USB_ReadInterrupts>
 800531a:	4603      	mov	r3, r0
 800531c:	f003 0310 	and.w	r3, r3, #16
 8005320:	2b10      	cmp	r3, #16
 8005322:	d161      	bne.n	80053e8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	699a      	ldr	r2, [r3, #24]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f022 0210 	bic.w	r2, r2, #16
 8005332:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005334:	6a3b      	ldr	r3, [r7, #32]
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	f003 020f 	and.w	r2, r3, #15
 8005340:	4613      	mov	r3, r2
 8005342:	00db      	lsls	r3, r3, #3
 8005344:	4413      	add	r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	4413      	add	r3, r2
 8005350:	3304      	adds	r3, #4
 8005352:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	0c5b      	lsrs	r3, r3, #17
 8005358:	f003 030f 	and.w	r3, r3, #15
 800535c:	2b02      	cmp	r3, #2
 800535e:	d124      	bne.n	80053aa <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005360:	69ba      	ldr	r2, [r7, #24]
 8005362:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005366:	4013      	ands	r3, r2
 8005368:	2b00      	cmp	r3, #0
 800536a:	d035      	beq.n	80053d8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	091b      	lsrs	r3, r3, #4
 8005374:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005376:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800537a:	b29b      	uxth	r3, r3
 800537c:	461a      	mov	r2, r3
 800537e:	6a38      	ldr	r0, [r7, #32]
 8005380:	f007 fbf4 	bl	800cb6c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	68da      	ldr	r2, [r3, #12]
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	091b      	lsrs	r3, r3, #4
 800538c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005390:	441a      	add	r2, r3
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	695a      	ldr	r2, [r3, #20]
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	091b      	lsrs	r3, r3, #4
 800539e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053a2:	441a      	add	r2, r3
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	615a      	str	r2, [r3, #20]
 80053a8:	e016      	b.n	80053d8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	0c5b      	lsrs	r3, r3, #17
 80053ae:	f003 030f 	and.w	r3, r3, #15
 80053b2:	2b06      	cmp	r3, #6
 80053b4:	d110      	bne.n	80053d8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80053bc:	2208      	movs	r2, #8
 80053be:	4619      	mov	r1, r3
 80053c0:	6a38      	ldr	r0, [r7, #32]
 80053c2:	f007 fbd3 	bl	800cb6c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	695a      	ldr	r2, [r3, #20]
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	091b      	lsrs	r3, r3, #4
 80053ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053d2:	441a      	add	r2, r3
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	699a      	ldr	r2, [r3, #24]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f042 0210 	orr.w	r2, r2, #16
 80053e6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f007 fd51 	bl	800ce94 <USB_ReadInterrupts>
 80053f2:	4603      	mov	r3, r0
 80053f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80053f8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80053fc:	f040 80a7 	bne.w	800554e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005400:	2300      	movs	r3, #0
 8005402:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4618      	mov	r0, r3
 800540a:	f007 fd56 	bl	800ceba <USB_ReadDevAllOutEpInterrupt>
 800540e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005410:	e099      	b.n	8005546 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b00      	cmp	r3, #0
 800541a:	f000 808e 	beq.w	800553a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005424:	b2d2      	uxtb	r2, r2
 8005426:	4611      	mov	r1, r2
 8005428:	4618      	mov	r0, r3
 800542a:	f007 fd7a 	bl	800cf22 <USB_ReadDevOutEPInterrupt>
 800542e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00c      	beq.n	8005454 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800543a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543c:	015a      	lsls	r2, r3, #5
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	4413      	add	r3, r2
 8005442:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005446:	461a      	mov	r2, r3
 8005448:	2301      	movs	r3, #1
 800544a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800544c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 fece 	bl	80061f0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	f003 0308 	and.w	r3, r3, #8
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00c      	beq.n	8005478 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800545e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	4413      	add	r3, r2
 8005466:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800546a:	461a      	mov	r2, r3
 800546c:	2308      	movs	r3, #8
 800546e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005470:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 ffa4 	bl	80063c0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	f003 0310 	and.w	r3, r3, #16
 800547e:	2b00      	cmp	r3, #0
 8005480:	d008      	beq.n	8005494 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005484:	015a      	lsls	r2, r3, #5
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	4413      	add	r3, r2
 800548a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800548e:	461a      	mov	r2, r3
 8005490:	2310      	movs	r3, #16
 8005492:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	2b00      	cmp	r3, #0
 800549c:	d030      	beq.n	8005500 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054a6:	2b80      	cmp	r3, #128	@ 0x80
 80054a8:	d109      	bne.n	80054be <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	69fa      	ldr	r2, [r7, #28]
 80054b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054b8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80054bc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80054be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054c0:	4613      	mov	r3, r2
 80054c2:	00db      	lsls	r3, r3, #3
 80054c4:	4413      	add	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	4413      	add	r3, r2
 80054d0:	3304      	adds	r3, #4
 80054d2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	78db      	ldrb	r3, [r3, #3]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d108      	bne.n	80054ee <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	2200      	movs	r2, #0
 80054e0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80054e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	4619      	mov	r1, r3
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f00a f963 	bl	800f7b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80054ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f0:	015a      	lsls	r2, r3, #5
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054fa:	461a      	mov	r2, r3
 80054fc:	2302      	movs	r3, #2
 80054fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	f003 0320 	and.w	r3, r3, #32
 8005506:	2b00      	cmp	r3, #0
 8005508:	d008      	beq.n	800551c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800550a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550c:	015a      	lsls	r2, r3, #5
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	4413      	add	r3, r2
 8005512:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005516:	461a      	mov	r2, r3
 8005518:	2320      	movs	r3, #32
 800551a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d009      	beq.n	800553a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005528:	015a      	lsls	r2, r3, #5
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	4413      	add	r3, r2
 800552e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005532:	461a      	mov	r2, r3
 8005534:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005538:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800553a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553c:	3301      	adds	r3, #1
 800553e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005542:	085b      	lsrs	r3, r3, #1
 8005544:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005548:	2b00      	cmp	r3, #0
 800554a:	f47f af62 	bne.w	8005412 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4618      	mov	r0, r3
 8005554:	f007 fc9e 	bl	800ce94 <USB_ReadInterrupts>
 8005558:	4603      	mov	r3, r0
 800555a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800555e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005562:	f040 80db 	bne.w	800571c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4618      	mov	r0, r3
 800556c:	f007 fcbf 	bl	800ceee <USB_ReadDevAllInEpInterrupt>
 8005570:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005572:	2300      	movs	r3, #0
 8005574:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005576:	e0cd      	b.n	8005714 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	f000 80c2 	beq.w	8005708 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800558a:	b2d2      	uxtb	r2, r2
 800558c:	4611      	mov	r1, r2
 800558e:	4618      	mov	r0, r3
 8005590:	f007 fce5 	bl	800cf5e <USB_ReadDevInEPInterrupt>
 8005594:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b00      	cmp	r3, #0
 800559e:	d057      	beq.n	8005650 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80055a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a2:	f003 030f 	and.w	r3, r3, #15
 80055a6:	2201      	movs	r2, #1
 80055a8:	fa02 f303 	lsl.w	r3, r2, r3
 80055ac:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	43db      	mvns	r3, r3
 80055ba:	69f9      	ldr	r1, [r7, #28]
 80055bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055c0:	4013      	ands	r3, r2
 80055c2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80055c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c6:	015a      	lsls	r2, r3, #5
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055d0:	461a      	mov	r2, r3
 80055d2:	2301      	movs	r3, #1
 80055d4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	799b      	ldrb	r3, [r3, #6]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d132      	bne.n	8005644 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80055de:	6879      	ldr	r1, [r7, #4]
 80055e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055e2:	4613      	mov	r3, r2
 80055e4:	00db      	lsls	r3, r3, #3
 80055e6:	4413      	add	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	440b      	add	r3, r1
 80055ec:	3320      	adds	r3, #32
 80055ee:	6819      	ldr	r1, [r3, #0]
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055f4:	4613      	mov	r3, r2
 80055f6:	00db      	lsls	r3, r3, #3
 80055f8:	4413      	add	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4403      	add	r3, r0
 80055fe:	331c      	adds	r3, #28
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4419      	add	r1, r3
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005608:	4613      	mov	r3, r2
 800560a:	00db      	lsls	r3, r3, #3
 800560c:	4413      	add	r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4403      	add	r3, r0
 8005612:	3320      	adds	r3, #32
 8005614:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005618:	2b00      	cmp	r3, #0
 800561a:	d113      	bne.n	8005644 <HAL_PCD_IRQHandler+0x3a2>
 800561c:	6879      	ldr	r1, [r7, #4]
 800561e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005620:	4613      	mov	r3, r2
 8005622:	00db      	lsls	r3, r3, #3
 8005624:	4413      	add	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	440b      	add	r3, r1
 800562a:	3324      	adds	r3, #36	@ 0x24
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d108      	bne.n	8005644 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6818      	ldr	r0, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800563c:	461a      	mov	r2, r3
 800563e:	2101      	movs	r1, #1
 8005640:	f007 fcee 	bl	800d020 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005646:	b2db      	uxtb	r3, r3
 8005648:	4619      	mov	r1, r3
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f00a f82d 	bl	800f6aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	f003 0308 	and.w	r3, r3, #8
 8005656:	2b00      	cmp	r3, #0
 8005658:	d008      	beq.n	800566c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800565a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565c:	015a      	lsls	r2, r3, #5
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	4413      	add	r3, r2
 8005662:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005666:	461a      	mov	r2, r3
 8005668:	2308      	movs	r3, #8
 800566a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	f003 0310 	and.w	r3, r3, #16
 8005672:	2b00      	cmp	r3, #0
 8005674:	d008      	beq.n	8005688 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005678:	015a      	lsls	r2, r3, #5
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	4413      	add	r3, r2
 800567e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005682:	461a      	mov	r2, r3
 8005684:	2310      	movs	r3, #16
 8005686:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800568e:	2b00      	cmp	r3, #0
 8005690:	d008      	beq.n	80056a4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005694:	015a      	lsls	r2, r3, #5
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	4413      	add	r3, r2
 800569a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800569e:	461a      	mov	r2, r3
 80056a0:	2340      	movs	r3, #64	@ 0x40
 80056a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d023      	beq.n	80056f6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80056ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80056b0:	6a38      	ldr	r0, [r7, #32]
 80056b2:	f006 fcd1 	bl	800c058 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80056b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056b8:	4613      	mov	r3, r2
 80056ba:	00db      	lsls	r3, r3, #3
 80056bc:	4413      	add	r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	3310      	adds	r3, #16
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	4413      	add	r3, r2
 80056c6:	3304      	adds	r3, #4
 80056c8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	78db      	ldrb	r3, [r3, #3]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d108      	bne.n	80056e4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	2200      	movs	r2, #0
 80056d6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80056d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	4619      	mov	r1, r3
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f00a f87a 	bl	800f7d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80056e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e6:	015a      	lsls	r2, r3, #5
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	4413      	add	r3, r2
 80056ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056f0:	461a      	mov	r2, r3
 80056f2:	2302      	movs	r3, #2
 80056f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d003      	beq.n	8005708 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005700:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 fce8 	bl	80060d8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570a:	3301      	adds	r3, #1
 800570c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800570e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005710:	085b      	lsrs	r3, r3, #1
 8005712:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005716:	2b00      	cmp	r3, #0
 8005718:	f47f af2e 	bne.w	8005578 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4618      	mov	r0, r3
 8005722:	f007 fbb7 	bl	800ce94 <USB_ReadInterrupts>
 8005726:	4603      	mov	r3, r0
 8005728:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800572c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005730:	d122      	bne.n	8005778 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	69fa      	ldr	r2, [r7, #28]
 800573c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005740:	f023 0301 	bic.w	r3, r3, #1
 8005744:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800574c:	2b01      	cmp	r3, #1
 800574e:	d108      	bne.n	8005762 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005758:	2100      	movs	r1, #0
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fef2 	bl	8006544 <HAL_PCDEx_LPM_Callback>
 8005760:	e002      	b.n	8005768 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f00a f818 	bl	800f798 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	695a      	ldr	r2, [r3, #20]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005776:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4618      	mov	r0, r3
 800577e:	f007 fb89 	bl	800ce94 <USB_ReadInterrupts>
 8005782:	4603      	mov	r3, r0
 8005784:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005788:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800578c:	d112      	bne.n	80057b4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b01      	cmp	r3, #1
 800579c:	d102      	bne.n	80057a4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f009 ffd4 	bl	800f74c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	695a      	ldr	r2, [r3, #20]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80057b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4618      	mov	r0, r3
 80057ba:	f007 fb6b 	bl	800ce94 <USB_ReadInterrupts>
 80057be:	4603      	mov	r3, r0
 80057c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057c8:	d121      	bne.n	800580e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	695a      	ldr	r2, [r3, #20]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80057d8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d111      	bne.n	8005808 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057f2:	089b      	lsrs	r3, r3, #2
 80057f4:	f003 020f 	and.w	r2, r3, #15
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80057fe:	2101      	movs	r1, #1
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 fe9f 	bl	8006544 <HAL_PCDEx_LPM_Callback>
 8005806:	e002      	b.n	800580e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f009 ff9f 	bl	800f74c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4618      	mov	r0, r3
 8005814:	f007 fb3e 	bl	800ce94 <USB_ReadInterrupts>
 8005818:	4603      	mov	r3, r0
 800581a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800581e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005822:	f040 80b7 	bne.w	8005994 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	69fa      	ldr	r2, [r7, #28]
 8005830:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005834:	f023 0301 	bic.w	r3, r3, #1
 8005838:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2110      	movs	r1, #16
 8005840:	4618      	mov	r0, r3
 8005842:	f006 fc09 	bl	800c058 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005846:	2300      	movs	r3, #0
 8005848:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800584a:	e046      	b.n	80058da <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800584c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	4413      	add	r3, r2
 8005854:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005858:	461a      	mov	r2, r3
 800585a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800585e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005862:	015a      	lsls	r2, r3, #5
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	4413      	add	r3, r2
 8005868:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005870:	0151      	lsls	r1, r2, #5
 8005872:	69fa      	ldr	r2, [r7, #28]
 8005874:	440a      	add	r2, r1
 8005876:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800587a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800587e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005882:	015a      	lsls	r2, r3, #5
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	4413      	add	r3, r2
 8005888:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800588c:	461a      	mov	r2, r3
 800588e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005892:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005896:	015a      	lsls	r2, r3, #5
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	4413      	add	r3, r2
 800589c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058a4:	0151      	lsls	r1, r2, #5
 80058a6:	69fa      	ldr	r2, [r7, #28]
 80058a8:	440a      	add	r2, r1
 80058aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80058b2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80058b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058c4:	0151      	lsls	r1, r2, #5
 80058c6:	69fa      	ldr	r2, [r7, #28]
 80058c8:	440a      	add	r2, r1
 80058ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058ce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80058d2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058d6:	3301      	adds	r3, #1
 80058d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	791b      	ldrb	r3, [r3, #4]
 80058de:	461a      	mov	r2, r3
 80058e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d3b2      	bcc.n	800584c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058ec:	69db      	ldr	r3, [r3, #28]
 80058ee:	69fa      	ldr	r2, [r7, #28]
 80058f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058f4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80058f8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	7bdb      	ldrb	r3, [r3, #15]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d016      	beq.n	8005930 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005908:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800590c:	69fa      	ldr	r2, [r7, #28]
 800590e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005912:	f043 030b 	orr.w	r3, r3, #11
 8005916:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005922:	69fa      	ldr	r2, [r7, #28]
 8005924:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005928:	f043 030b 	orr.w	r3, r3, #11
 800592c:	6453      	str	r3, [r2, #68]	@ 0x44
 800592e:	e015      	b.n	800595c <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005936:	695a      	ldr	r2, [r3, #20]
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800593e:	4619      	mov	r1, r3
 8005940:	f242 032b 	movw	r3, #8235	@ 0x202b
 8005944:	4313      	orrs	r3, r2
 8005946:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	69fa      	ldr	r2, [r7, #28]
 8005952:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005956:	f043 030b 	orr.w	r3, r3, #11
 800595a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	69fa      	ldr	r2, [r7, #28]
 8005966:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800596a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800596e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6818      	ldr	r0, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800597e:	461a      	mov	r2, r3
 8005980:	f007 fb4e 	bl	800d020 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	695a      	ldr	r2, [r3, #20]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005992:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4618      	mov	r0, r3
 800599a:	f007 fa7b 	bl	800ce94 <USB_ReadInterrupts>
 800599e:	4603      	mov	r3, r0
 80059a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059a8:	d123      	bne.n	80059f2 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4618      	mov	r0, r3
 80059b0:	f007 fb12 	bl	800cfd8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4618      	mov	r0, r3
 80059ba:	f006 fbc6 	bl	800c14a <USB_GetDevSpeed>
 80059be:	4603      	mov	r3, r0
 80059c0:	461a      	mov	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681c      	ldr	r4, [r3, #0]
 80059ca:	f001 fdbb 	bl	8007544 <HAL_RCC_GetHCLKFreq>
 80059ce:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80059d4:	461a      	mov	r2, r3
 80059d6:	4620      	mov	r0, r4
 80059d8:	f006 f8d0 	bl	800bb7c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f009 fe8c 	bl	800f6fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	695a      	ldr	r2, [r3, #20]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80059f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f007 fa4c 	bl	800ce94 <USB_ReadInterrupts>
 80059fc:	4603      	mov	r3, r0
 80059fe:	f003 0308 	and.w	r3, r3, #8
 8005a02:	2b08      	cmp	r3, #8
 8005a04:	d10a      	bne.n	8005a1c <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f009 fe69 	bl	800f6de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	695a      	ldr	r2, [r3, #20]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f002 0208 	and.w	r2, r2, #8
 8005a1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4618      	mov	r0, r3
 8005a22:	f007 fa37 	bl	800ce94 <USB_ReadInterrupts>
 8005a26:	4603      	mov	r3, r0
 8005a28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a2c:	2b80      	cmp	r3, #128	@ 0x80
 8005a2e:	d123      	bne.n	8005a78 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005a30:	6a3b      	ldr	r3, [r7, #32]
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a38:	6a3b      	ldr	r3, [r7, #32]
 8005a3a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a40:	e014      	b.n	8005a6c <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005a42:	6879      	ldr	r1, [r7, #4]
 8005a44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a46:	4613      	mov	r3, r2
 8005a48:	00db      	lsls	r3, r3, #3
 8005a4a:	4413      	add	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	440b      	add	r3, r1
 8005a50:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d105      	bne.n	8005a66 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	4619      	mov	r1, r3
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 fb08 	bl	8006076 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a68:	3301      	adds	r3, #1
 8005a6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	791b      	ldrb	r3, [r3, #4]
 8005a70:	461a      	mov	r2, r3
 8005a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d3e4      	bcc.n	8005a42 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f007 fa09 	bl	800ce94 <USB_ReadInterrupts>
 8005a82:	4603      	mov	r3, r0
 8005a84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a8c:	d13c      	bne.n	8005b08 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a8e:	2301      	movs	r3, #1
 8005a90:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a92:	e02b      	b.n	8005aec <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a96:	015a      	lsls	r2, r3, #5
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005aa4:	6879      	ldr	r1, [r7, #4]
 8005aa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	00db      	lsls	r3, r3, #3
 8005aac:	4413      	add	r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	440b      	add	r3, r1
 8005ab2:	3318      	adds	r3, #24
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d115      	bne.n	8005ae6 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005aba:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	da12      	bge.n	8005ae6 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005ac0:	6879      	ldr	r1, [r7, #4]
 8005ac2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	4413      	add	r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	440b      	add	r3, r1
 8005ace:	3317      	adds	r3, #23
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	4619      	mov	r1, r3
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 fac8 	bl	8006076 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae8:	3301      	adds	r3, #1
 8005aea:	627b      	str	r3, [r7, #36]	@ 0x24
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	791b      	ldrb	r3, [r3, #4]
 8005af0:	461a      	mov	r2, r3
 8005af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d3cd      	bcc.n	8005a94 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	695a      	ldr	r2, [r3, #20]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005b06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f007 f9c1 	bl	800ce94 <USB_ReadInterrupts>
 8005b12:	4603      	mov	r3, r0
 8005b14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b1c:	d156      	bne.n	8005bcc <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b1e:	2301      	movs	r3, #1
 8005b20:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b22:	e045      	b.n	8005bb0 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b26:	015a      	lsls	r2, r3, #5
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005b34:	6879      	ldr	r1, [r7, #4]
 8005b36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b38:	4613      	mov	r3, r2
 8005b3a:	00db      	lsls	r3, r3, #3
 8005b3c:	4413      	add	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	440b      	add	r3, r1
 8005b42:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d12e      	bne.n	8005baa <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005b4c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	da2b      	bge.n	8005baa <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005b5e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d121      	bne.n	8005baa <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005b66:	6879      	ldr	r1, [r7, #4]
 8005b68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	00db      	lsls	r3, r3, #3
 8005b6e:	4413      	add	r3, r2
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	440b      	add	r3, r1
 8005b74:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005b78:	2201      	movs	r2, #1
 8005b7a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005b7c:	6a3b      	ldr	r3, [r7, #32]
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005b88:	6a3b      	ldr	r3, [r7, #32]
 8005b8a:	695b      	ldr	r3, [r3, #20]
 8005b8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d10a      	bne.n	8005baa <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	69fa      	ldr	r2, [r7, #28]
 8005b9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ba2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005ba6:	6053      	str	r3, [r2, #4]
            break;
 8005ba8:	e008      	b.n	8005bbc <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bac:	3301      	adds	r3, #1
 8005bae:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	791b      	ldrb	r3, [r3, #4]
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d3b3      	bcc.n	8005b24 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	695a      	ldr	r2, [r3, #20]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005bca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f007 f95f 	bl	800ce94 <USB_ReadInterrupts>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005be0:	d10a      	bne.n	8005bf8 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f009 fe0a 	bl	800f7fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	695a      	ldr	r2, [r3, #20]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005bf6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f007 f949 	bl	800ce94 <USB_ReadInterrupts>
 8005c02:	4603      	mov	r3, r0
 8005c04:	f003 0304 	and.w	r3, r3, #4
 8005c08:	2b04      	cmp	r3, #4
 8005c0a:	d115      	bne.n	8005c38 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	f003 0304 	and.w	r3, r3, #4
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d002      	beq.n	8005c24 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f009 fdfa 	bl	800f818 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6859      	ldr	r1, [r3, #4]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	69ba      	ldr	r2, [r7, #24]
 8005c30:	430a      	orrs	r2, r1
 8005c32:	605a      	str	r2, [r3, #4]
 8005c34:	e000      	b.n	8005c38 <HAL_PCD_IRQHandler+0x996>
      return;
 8005c36:	bf00      	nop
    }
  }
}
 8005c38:	3734      	adds	r7, #52	@ 0x34
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd90      	pop	{r4, r7, pc}

08005c3e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b082      	sub	sp, #8
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
 8005c46:	460b      	mov	r3, r1
 8005c48:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d101      	bne.n	8005c58 <HAL_PCD_SetAddress+0x1a>
 8005c54:	2302      	movs	r3, #2
 8005c56:	e012      	b.n	8005c7e <HAL_PCD_SetAddress+0x40>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	78fa      	ldrb	r2, [r7, #3]
 8005c64:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	78fa      	ldrb	r2, [r7, #3]
 8005c6c:	4611      	mov	r1, r2
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f007 f8a8 	bl	800cdc4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3708      	adds	r7, #8
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b084      	sub	sp, #16
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
 8005c8e:	4608      	mov	r0, r1
 8005c90:	4611      	mov	r1, r2
 8005c92:	461a      	mov	r2, r3
 8005c94:	4603      	mov	r3, r0
 8005c96:	70fb      	strb	r3, [r7, #3]
 8005c98:	460b      	mov	r3, r1
 8005c9a:	803b      	strh	r3, [r7, #0]
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005ca4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	da0f      	bge.n	8005ccc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cac:	78fb      	ldrb	r3, [r7, #3]
 8005cae:	f003 020f 	and.w	r2, r3, #15
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	00db      	lsls	r3, r3, #3
 8005cb6:	4413      	add	r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	3310      	adds	r3, #16
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	3304      	adds	r3, #4
 8005cc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	705a      	strb	r2, [r3, #1]
 8005cca:	e00f      	b.n	8005cec <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ccc:	78fb      	ldrb	r3, [r7, #3]
 8005cce:	f003 020f 	and.w	r2, r3, #15
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	00db      	lsls	r3, r3, #3
 8005cd6:	4413      	add	r3, r2
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	3304      	adds	r3, #4
 8005ce4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005cec:	78fb      	ldrb	r3, [r7, #3]
 8005cee:	f003 030f 	and.w	r3, r3, #15
 8005cf2:	b2da      	uxtb	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005cf8:	883a      	ldrh	r2, [r7, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	78ba      	ldrb	r2, [r7, #2]
 8005d02:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	785b      	ldrb	r3, [r3, #1]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d004      	beq.n	8005d16 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	461a      	mov	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005d16:	78bb      	ldrb	r3, [r7, #2]
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d102      	bne.n	8005d22 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d101      	bne.n	8005d30 <HAL_PCD_EP_Open+0xaa>
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	e00e      	b.n	8005d4e <HAL_PCD_EP_Open+0xc8>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68f9      	ldr	r1, [r7, #12]
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f006 fa28 	bl	800c194 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005d4c:	7afb      	ldrb	r3, [r7, #11]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b084      	sub	sp, #16
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
 8005d5e:	460b      	mov	r3, r1
 8005d60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005d62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	da0f      	bge.n	8005d8a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d6a:	78fb      	ldrb	r3, [r7, #3]
 8005d6c:	f003 020f 	and.w	r2, r3, #15
 8005d70:	4613      	mov	r3, r2
 8005d72:	00db      	lsls	r3, r3, #3
 8005d74:	4413      	add	r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	3310      	adds	r3, #16
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	3304      	adds	r3, #4
 8005d80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2201      	movs	r2, #1
 8005d86:	705a      	strb	r2, [r3, #1]
 8005d88:	e00f      	b.n	8005daa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d8a:	78fb      	ldrb	r3, [r7, #3]
 8005d8c:	f003 020f 	and.w	r2, r3, #15
 8005d90:	4613      	mov	r3, r2
 8005d92:	00db      	lsls	r3, r3, #3
 8005d94:	4413      	add	r3, r2
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	4413      	add	r3, r2
 8005da0:	3304      	adds	r3, #4
 8005da2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2200      	movs	r2, #0
 8005da8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005daa:	78fb      	ldrb	r3, [r7, #3]
 8005dac:	f003 030f 	and.w	r3, r3, #15
 8005db0:	b2da      	uxtb	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d101      	bne.n	8005dc4 <HAL_PCD_EP_Close+0x6e>
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	e00e      	b.n	8005de2 <HAL_PCD_EP_Close+0x8c>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68f9      	ldr	r1, [r7, #12]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f006 fa66 	bl	800c2a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b086      	sub	sp, #24
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	60f8      	str	r0, [r7, #12]
 8005df2:	607a      	str	r2, [r7, #4]
 8005df4:	603b      	str	r3, [r7, #0]
 8005df6:	460b      	mov	r3, r1
 8005df8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005dfa:	7afb      	ldrb	r3, [r7, #11]
 8005dfc:	f003 020f 	and.w	r2, r3, #15
 8005e00:	4613      	mov	r3, r2
 8005e02:	00db      	lsls	r3, r3, #3
 8005e04:	4413      	add	r3, r2
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	4413      	add	r3, r2
 8005e10:	3304      	adds	r3, #4
 8005e12:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	683a      	ldr	r2, [r7, #0]
 8005e1e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	2200      	movs	r2, #0
 8005e24:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e2c:	7afb      	ldrb	r3, [r7, #11]
 8005e2e:	f003 030f 	and.w	r3, r3, #15
 8005e32:	b2da      	uxtb	r2, r3
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	799b      	ldrb	r3, [r3, #6]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d102      	bne.n	8005e46 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6818      	ldr	r0, [r3, #0]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	799b      	ldrb	r3, [r3, #6]
 8005e4e:	461a      	mov	r2, r3
 8005e50:	6979      	ldr	r1, [r7, #20]
 8005e52:	f006 fb03 	bl	800c45c <USB_EPStartXfer>

  return HAL_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3718      	adds	r7, #24
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	460b      	mov	r3, r1
 8005e6a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005e6c:	78fb      	ldrb	r3, [r7, #3]
 8005e6e:	f003 020f 	and.w	r2, r3, #15
 8005e72:	6879      	ldr	r1, [r7, #4]
 8005e74:	4613      	mov	r3, r2
 8005e76:	00db      	lsls	r3, r3, #3
 8005e78:	4413      	add	r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	440b      	add	r3, r1
 8005e7e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005e82:	681b      	ldr	r3, [r3, #0]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	607a      	str	r2, [r7, #4]
 8005e9a:	603b      	str	r3, [r7, #0]
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ea0:	7afb      	ldrb	r3, [r7, #11]
 8005ea2:	f003 020f 	and.w	r2, r3, #15
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	00db      	lsls	r3, r3, #3
 8005eaa:	4413      	add	r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	3310      	adds	r3, #16
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	3304      	adds	r3, #4
 8005eb6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	683a      	ldr	r2, [r7, #0]
 8005ec2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ed0:	7afb      	ldrb	r3, [r7, #11]
 8005ed2:	f003 030f 	and.w	r3, r3, #15
 8005ed6:	b2da      	uxtb	r2, r3
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	799b      	ldrb	r3, [r3, #6]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d102      	bne.n	8005eea <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6818      	ldr	r0, [r3, #0]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	799b      	ldrb	r3, [r3, #6]
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	6979      	ldr	r1, [r7, #20]
 8005ef6:	f006 fab1 	bl	800c45c <USB_EPStartXfer>

  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3718      	adds	r7, #24
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005f10:	78fb      	ldrb	r3, [r7, #3]
 8005f12:	f003 030f 	and.w	r3, r3, #15
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	7912      	ldrb	r2, [r2, #4]
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d901      	bls.n	8005f22 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e04f      	b.n	8005fc2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005f22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	da0f      	bge.n	8005f4a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f2a:	78fb      	ldrb	r3, [r7, #3]
 8005f2c:	f003 020f 	and.w	r2, r3, #15
 8005f30:	4613      	mov	r3, r2
 8005f32:	00db      	lsls	r3, r3, #3
 8005f34:	4413      	add	r3, r2
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	3310      	adds	r3, #16
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	3304      	adds	r3, #4
 8005f40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2201      	movs	r2, #1
 8005f46:	705a      	strb	r2, [r3, #1]
 8005f48:	e00d      	b.n	8005f66 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005f4a:	78fa      	ldrb	r2, [r7, #3]
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	00db      	lsls	r3, r3, #3
 8005f50:	4413      	add	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	3304      	adds	r3, #4
 8005f5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f6c:	78fb      	ldrb	r3, [r7, #3]
 8005f6e:	f003 030f 	and.w	r3, r3, #15
 8005f72:	b2da      	uxtb	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d101      	bne.n	8005f86 <HAL_PCD_EP_SetStall+0x82>
 8005f82:	2302      	movs	r3, #2
 8005f84:	e01d      	b.n	8005fc2 <HAL_PCD_EP_SetStall+0xbe>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68f9      	ldr	r1, [r7, #12]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f006 fe41 	bl	800cc1c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005f9a:	78fb      	ldrb	r3, [r7, #3]
 8005f9c:	f003 030f 	and.w	r3, r3, #15
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d109      	bne.n	8005fb8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6818      	ldr	r0, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	7999      	ldrb	r1, [r3, #6]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	f007 f834 	bl	800d020 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3710      	adds	r7, #16
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b084      	sub	sp, #16
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005fd6:	78fb      	ldrb	r3, [r7, #3]
 8005fd8:	f003 030f 	and.w	r3, r3, #15
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	7912      	ldrb	r2, [r2, #4]
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d901      	bls.n	8005fe8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e042      	b.n	800606e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005fe8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	da0f      	bge.n	8006010 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ff0:	78fb      	ldrb	r3, [r7, #3]
 8005ff2:	f003 020f 	and.w	r2, r3, #15
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	00db      	lsls	r3, r3, #3
 8005ffa:	4413      	add	r3, r2
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	3310      	adds	r3, #16
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	4413      	add	r3, r2
 8006004:	3304      	adds	r3, #4
 8006006:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2201      	movs	r2, #1
 800600c:	705a      	strb	r2, [r3, #1]
 800600e:	e00f      	b.n	8006030 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006010:	78fb      	ldrb	r3, [r7, #3]
 8006012:	f003 020f 	and.w	r2, r3, #15
 8006016:	4613      	mov	r3, r2
 8006018:	00db      	lsls	r3, r3, #3
 800601a:	4413      	add	r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	4413      	add	r3, r2
 8006026:	3304      	adds	r3, #4
 8006028:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006036:	78fb      	ldrb	r3, [r7, #3]
 8006038:	f003 030f 	and.w	r3, r3, #15
 800603c:	b2da      	uxtb	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006048:	2b01      	cmp	r3, #1
 800604a:	d101      	bne.n	8006050 <HAL_PCD_EP_ClrStall+0x86>
 800604c:	2302      	movs	r3, #2
 800604e:	e00e      	b.n	800606e <HAL_PCD_EP_ClrStall+0xa4>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68f9      	ldr	r1, [r7, #12]
 800605e:	4618      	mov	r0, r3
 8006060:	f006 fe4a 	bl	800ccf8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b084      	sub	sp, #16
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
 800607e:	460b      	mov	r3, r1
 8006080:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006082:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006086:	2b00      	cmp	r3, #0
 8006088:	da0c      	bge.n	80060a4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800608a:	78fb      	ldrb	r3, [r7, #3]
 800608c:	f003 020f 	and.w	r2, r3, #15
 8006090:	4613      	mov	r3, r2
 8006092:	00db      	lsls	r3, r3, #3
 8006094:	4413      	add	r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	3310      	adds	r3, #16
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	4413      	add	r3, r2
 800609e:	3304      	adds	r3, #4
 80060a0:	60fb      	str	r3, [r7, #12]
 80060a2:	e00c      	b.n	80060be <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060a4:	78fb      	ldrb	r3, [r7, #3]
 80060a6:	f003 020f 	and.w	r2, r3, #15
 80060aa:	4613      	mov	r3, r2
 80060ac:	00db      	lsls	r3, r3, #3
 80060ae:	4413      	add	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	4413      	add	r3, r2
 80060ba:	3304      	adds	r3, #4
 80060bc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68f9      	ldr	r1, [r7, #12]
 80060c4:	4618      	mov	r0, r3
 80060c6:	f006 fc69 	bl	800c99c <USB_EPStopXfer>
 80060ca:	4603      	mov	r3, r0
 80060cc:	72fb      	strb	r3, [r7, #11]

  return ret;
 80060ce:	7afb      	ldrb	r3, [r7, #11]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3710      	adds	r7, #16
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b08a      	sub	sp, #40	@ 0x28
 80060dc:	af02      	add	r7, sp, #8
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80060ec:	683a      	ldr	r2, [r7, #0]
 80060ee:	4613      	mov	r3, r2
 80060f0:	00db      	lsls	r3, r3, #3
 80060f2:	4413      	add	r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	3310      	adds	r3, #16
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	4413      	add	r3, r2
 80060fc:	3304      	adds	r3, #4
 80060fe:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	695a      	ldr	r2, [r3, #20]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	429a      	cmp	r2, r3
 800610a:	d901      	bls.n	8006110 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e06b      	b.n	80061e8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	691a      	ldr	r2, [r3, #16]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	695b      	ldr	r3, [r3, #20]
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	69fa      	ldr	r2, [r7, #28]
 8006122:	429a      	cmp	r2, r3
 8006124:	d902      	bls.n	800612c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	3303      	adds	r3, #3
 8006130:	089b      	lsrs	r3, r3, #2
 8006132:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006134:	e02a      	b.n	800618c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	691a      	ldr	r2, [r3, #16]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	69fa      	ldr	r2, [r7, #28]
 8006148:	429a      	cmp	r2, r3
 800614a:	d902      	bls.n	8006152 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	3303      	adds	r3, #3
 8006156:	089b      	lsrs	r3, r3, #2
 8006158:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	68d9      	ldr	r1, [r3, #12]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	b2da      	uxtb	r2, r3
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	4603      	mov	r3, r0
 800616e:	6978      	ldr	r0, [r7, #20]
 8006170:	f006 fcbe 	bl	800caf0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	68da      	ldr	r2, [r3, #12]
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	441a      	add	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	695a      	ldr	r2, [r3, #20]
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	441a      	add	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	015a      	lsls	r2, r3, #5
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	4413      	add	r3, r2
 8006194:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800619c:	69ba      	ldr	r2, [r7, #24]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d809      	bhi.n	80061b6 <PCD_WriteEmptyTxFifo+0xde>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	695a      	ldr	r2, [r3, #20]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d203      	bcs.n	80061b6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1bf      	bne.n	8006136 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	691a      	ldr	r2, [r3, #16]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d811      	bhi.n	80061e6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	f003 030f 	and.w	r3, r3, #15
 80061c8:	2201      	movs	r2, #1
 80061ca:	fa02 f303 	lsl.w	r3, r2, r3
 80061ce:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	43db      	mvns	r3, r3
 80061dc:	6939      	ldr	r1, [r7, #16]
 80061de:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80061e2:	4013      	ands	r3, r2
 80061e4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3720      	adds	r7, #32
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b088      	sub	sp, #32
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	333c      	adds	r3, #60	@ 0x3c
 8006208:	3304      	adds	r3, #4
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	015a      	lsls	r2, r3, #5
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	4413      	add	r3, r2
 8006216:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	799b      	ldrb	r3, [r3, #6]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d17b      	bne.n	800631e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	f003 0308 	and.w	r3, r3, #8
 800622c:	2b00      	cmp	r3, #0
 800622e:	d015      	beq.n	800625c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	4a61      	ldr	r2, [pc, #388]	@ (80063b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006234:	4293      	cmp	r3, r2
 8006236:	f240 80b9 	bls.w	80063ac <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006240:	2b00      	cmp	r3, #0
 8006242:	f000 80b3 	beq.w	80063ac <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	015a      	lsls	r2, r3, #5
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	4413      	add	r3, r2
 800624e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006252:	461a      	mov	r2, r3
 8006254:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006258:	6093      	str	r3, [r2, #8]
 800625a:	e0a7      	b.n	80063ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	f003 0320 	and.w	r3, r3, #32
 8006262:	2b00      	cmp	r3, #0
 8006264:	d009      	beq.n	800627a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	015a      	lsls	r2, r3, #5
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	4413      	add	r3, r2
 800626e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006272:	461a      	mov	r2, r3
 8006274:	2320      	movs	r3, #32
 8006276:	6093      	str	r3, [r2, #8]
 8006278:	e098      	b.n	80063ac <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006280:	2b00      	cmp	r3, #0
 8006282:	f040 8093 	bne.w	80063ac <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	4a4b      	ldr	r2, [pc, #300]	@ (80063b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d90f      	bls.n	80062ae <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00a      	beq.n	80062ae <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	015a      	lsls	r2, r3, #5
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	4413      	add	r3, r2
 80062a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062a4:	461a      	mov	r2, r3
 80062a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062aa:	6093      	str	r3, [r2, #8]
 80062ac:	e07e      	b.n	80063ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80062ae:	683a      	ldr	r2, [r7, #0]
 80062b0:	4613      	mov	r3, r2
 80062b2:	00db      	lsls	r3, r3, #3
 80062b4:	4413      	add	r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	4413      	add	r3, r2
 80062c0:	3304      	adds	r3, #4
 80062c2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6a1a      	ldr	r2, [r3, #32]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	0159      	lsls	r1, r3, #5
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	440b      	add	r3, r1
 80062d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062da:	1ad2      	subs	r2, r2, r3
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d114      	bne.n	8006310 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d109      	bne.n	8006302 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6818      	ldr	r0, [r3, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80062f8:	461a      	mov	r2, r3
 80062fa:	2101      	movs	r1, #1
 80062fc:	f006 fe90 	bl	800d020 <USB_EP0_OutStart>
 8006300:	e006      	b.n	8006310 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	68da      	ldr	r2, [r3, #12]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	695b      	ldr	r3, [r3, #20]
 800630a:	441a      	add	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	b2db      	uxtb	r3, r3
 8006314:	4619      	mov	r1, r3
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f009 f9ac 	bl	800f674 <HAL_PCD_DataOutStageCallback>
 800631c:	e046      	b.n	80063ac <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	4a26      	ldr	r2, [pc, #152]	@ (80063bc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d124      	bne.n	8006370 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00a      	beq.n	8006346 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	015a      	lsls	r2, r3, #5
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	4413      	add	r3, r2
 8006338:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800633c:	461a      	mov	r2, r3
 800633e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006342:	6093      	str	r3, [r2, #8]
 8006344:	e032      	b.n	80063ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	f003 0320 	and.w	r3, r3, #32
 800634c:	2b00      	cmp	r3, #0
 800634e:	d008      	beq.n	8006362 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	015a      	lsls	r2, r3, #5
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	4413      	add	r3, r2
 8006358:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800635c:	461a      	mov	r2, r3
 800635e:	2320      	movs	r3, #32
 8006360:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	b2db      	uxtb	r3, r3
 8006366:	4619      	mov	r1, r3
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f009 f983 	bl	800f674 <HAL_PCD_DataOutStageCallback>
 800636e:	e01d      	b.n	80063ac <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d114      	bne.n	80063a0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006376:	6879      	ldr	r1, [r7, #4]
 8006378:	683a      	ldr	r2, [r7, #0]
 800637a:	4613      	mov	r3, r2
 800637c:	00db      	lsls	r3, r3, #3
 800637e:	4413      	add	r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	440b      	add	r3, r1
 8006384:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d108      	bne.n	80063a0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6818      	ldr	r0, [r3, #0]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006398:	461a      	mov	r2, r3
 800639a:	2100      	movs	r1, #0
 800639c:	f006 fe40 	bl	800d020 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	4619      	mov	r1, r3
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f009 f964 	bl	800f674 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3720      	adds	r7, #32
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	4f54300a 	.word	0x4f54300a
 80063bc:	4f54310a 	.word	0x4f54310a

080063c0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b086      	sub	sp, #24
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	333c      	adds	r3, #60	@ 0x3c
 80063d8:	3304      	adds	r3, #4
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	015a      	lsls	r2, r3, #5
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	4413      	add	r3, r2
 80063e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	4a15      	ldr	r2, [pc, #84]	@ (8006448 <PCD_EP_OutSetupPacket_int+0x88>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d90e      	bls.n	8006414 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d009      	beq.n	8006414 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	015a      	lsls	r2, r3, #5
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	4413      	add	r3, r2
 8006408:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800640c:	461a      	mov	r2, r3
 800640e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006412:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f009 f91b 	bl	800f650 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	4a0a      	ldr	r2, [pc, #40]	@ (8006448 <PCD_EP_OutSetupPacket_int+0x88>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d90c      	bls.n	800643c <PCD_EP_OutSetupPacket_int+0x7c>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	799b      	ldrb	r3, [r3, #6]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d108      	bne.n	800643c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6818      	ldr	r0, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006434:	461a      	mov	r2, r3
 8006436:	2101      	movs	r1, #1
 8006438:	f006 fdf2 	bl	800d020 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3718      	adds	r7, #24
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	4f54300a 	.word	0x4f54300a

0800644c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	460b      	mov	r3, r1
 8006456:	70fb      	strb	r3, [r7, #3]
 8006458:	4613      	mov	r3, r2
 800645a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006462:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006464:	78fb      	ldrb	r3, [r7, #3]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d107      	bne.n	800647a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800646a:	883b      	ldrh	r3, [r7, #0]
 800646c:	0419      	lsls	r1, r3, #16
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	430a      	orrs	r2, r1
 8006476:	629a      	str	r2, [r3, #40]	@ 0x28
 8006478:	e028      	b.n	80064cc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006480:	0c1b      	lsrs	r3, r3, #16
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	4413      	add	r3, r2
 8006486:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006488:	2300      	movs	r3, #0
 800648a:	73fb      	strb	r3, [r7, #15]
 800648c:	e00d      	b.n	80064aa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	7bfb      	ldrb	r3, [r7, #15]
 8006494:	3340      	adds	r3, #64	@ 0x40
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4413      	add	r3, r2
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	0c1b      	lsrs	r3, r3, #16
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	4413      	add	r3, r2
 80064a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80064a4:	7bfb      	ldrb	r3, [r7, #15]
 80064a6:	3301      	adds	r3, #1
 80064a8:	73fb      	strb	r3, [r7, #15]
 80064aa:	7bfa      	ldrb	r2, [r7, #15]
 80064ac:	78fb      	ldrb	r3, [r7, #3]
 80064ae:	3b01      	subs	r3, #1
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d3ec      	bcc.n	800648e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80064b4:	883b      	ldrh	r3, [r7, #0]
 80064b6:	0418      	lsls	r0, r3, #16
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6819      	ldr	r1, [r3, #0]
 80064bc:	78fb      	ldrb	r3, [r7, #3]
 80064be:	3b01      	subs	r3, #1
 80064c0:	68ba      	ldr	r2, [r7, #8]
 80064c2:	4302      	orrs	r2, r0
 80064c4:	3340      	adds	r3, #64	@ 0x40
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	440b      	add	r3, r1
 80064ca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3714      	adds	r7, #20
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr

080064da <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80064da:	b480      	push	{r7}
 80064dc:	b083      	sub	sp, #12
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
 80064e2:	460b      	mov	r3, r1
 80064e4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	887a      	ldrh	r2, [r7, #2]
 80064ec:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2201      	movs	r2, #1
 800650e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800652a:	4b05      	ldr	r3, [pc, #20]	@ (8006540 <HAL_PCDEx_ActivateLPM+0x44>)
 800652c:	4313      	orrs	r3, r2
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3714      	adds	r7, #20
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr
 8006540:	10000003 	.word	0x10000003

08006544 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	460b      	mov	r3, r1
 800654e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006550:	bf00      	nop
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006564:	4b29      	ldr	r3, [pc, #164]	@ (800660c <HAL_PWREx_ConfigSupply+0xb0>)
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	f003 0307 	and.w	r3, r3, #7
 800656c:	2b06      	cmp	r3, #6
 800656e:	d00a      	beq.n	8006586 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006570:	4b26      	ldr	r3, [pc, #152]	@ (800660c <HAL_PWREx_ConfigSupply+0xb0>)
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	429a      	cmp	r2, r3
 800657c:	d001      	beq.n	8006582 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e040      	b.n	8006604 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006582:	2300      	movs	r3, #0
 8006584:	e03e      	b.n	8006604 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006586:	4b21      	ldr	r3, [pc, #132]	@ (800660c <HAL_PWREx_ConfigSupply+0xb0>)
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800658e:	491f      	ldr	r1, [pc, #124]	@ (800660c <HAL_PWREx_ConfigSupply+0xb0>)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4313      	orrs	r3, r2
 8006594:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006596:	f7fc f889 	bl	80026ac <HAL_GetTick>
 800659a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800659c:	e009      	b.n	80065b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800659e:	f7fc f885 	bl	80026ac <HAL_GetTick>
 80065a2:	4602      	mov	r2, r0
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80065ac:	d901      	bls.n	80065b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e028      	b.n	8006604 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80065b2:	4b16      	ldr	r3, [pc, #88]	@ (800660c <HAL_PWREx_ConfigSupply+0xb0>)
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065be:	d1ee      	bne.n	800659e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2b1e      	cmp	r3, #30
 80065c4:	d008      	beq.n	80065d8 <HAL_PWREx_ConfigSupply+0x7c>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80065ca:	d005      	beq.n	80065d8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2b1d      	cmp	r3, #29
 80065d0:	d002      	beq.n	80065d8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2b2d      	cmp	r3, #45	@ 0x2d
 80065d6:	d114      	bne.n	8006602 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80065d8:	f7fc f868 	bl	80026ac <HAL_GetTick>
 80065dc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80065de:	e009      	b.n	80065f4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80065e0:	f7fc f864 	bl	80026ac <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80065ee:	d901      	bls.n	80065f4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e007      	b.n	8006604 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80065f4:	4b05      	ldr	r3, [pc, #20]	@ (800660c <HAL_PWREx_ConfigSupply+0xb0>)
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006600:	d1ee      	bne.n	80065e0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	58024800 	.word	0x58024800

08006610 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006610:	b480      	push	{r7}
 8006612:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006614:	4b05      	ldr	r3, [pc, #20]	@ (800662c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	4a04      	ldr	r2, [pc, #16]	@ (800662c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800661a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800661e:	60d3      	str	r3, [r2, #12]
}
 8006620:	bf00      	nop
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	58024800 	.word	0x58024800

08006630 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b08c      	sub	sp, #48	@ 0x30
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d102      	bne.n	8006644 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	f000 bc48 	b.w	8006ed4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 0301 	and.w	r3, r3, #1
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 8088 	beq.w	8006762 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006652:	4b99      	ldr	r3, [pc, #612]	@ (80068b8 <HAL_RCC_OscConfig+0x288>)
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800665a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800665c:	4b96      	ldr	r3, [pc, #600]	@ (80068b8 <HAL_RCC_OscConfig+0x288>)
 800665e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006660:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006664:	2b10      	cmp	r3, #16
 8006666:	d007      	beq.n	8006678 <HAL_RCC_OscConfig+0x48>
 8006668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800666a:	2b18      	cmp	r3, #24
 800666c:	d111      	bne.n	8006692 <HAL_RCC_OscConfig+0x62>
 800666e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006670:	f003 0303 	and.w	r3, r3, #3
 8006674:	2b02      	cmp	r3, #2
 8006676:	d10c      	bne.n	8006692 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006678:	4b8f      	ldr	r3, [pc, #572]	@ (80068b8 <HAL_RCC_OscConfig+0x288>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006680:	2b00      	cmp	r3, #0
 8006682:	d06d      	beq.n	8006760 <HAL_RCC_OscConfig+0x130>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d169      	bne.n	8006760 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	f000 bc21 	b.w	8006ed4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800669a:	d106      	bne.n	80066aa <HAL_RCC_OscConfig+0x7a>
 800669c:	4b86      	ldr	r3, [pc, #536]	@ (80068b8 <HAL_RCC_OscConfig+0x288>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a85      	ldr	r2, [pc, #532]	@ (80068b8 <HAL_RCC_OscConfig+0x288>)
 80066a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066a6:	6013      	str	r3, [r2, #0]
 80066a8:	e02e      	b.n	8006708 <HAL_RCC_OscConfig+0xd8>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d10c      	bne.n	80066cc <HAL_RCC_OscConfig+0x9c>
 80066b2:	4b81      	ldr	r3, [pc, #516]	@ (80068b8 <HAL_RCC_OscConfig+0x288>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a80      	ldr	r2, [pc, #512]	@ (80068b8 <HAL_RCC_OscConfig+0x288>)
 80066b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066bc:	6013      	str	r3, [r2, #0]
 80066be:	4b7e      	ldr	r3, [pc, #504]	@ (80068b8 <HAL_RCC_OscConfig+0x288>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a7d      	ldr	r2, [pc, #500]	@ (80068b8 <HAL_RCC_OscConfig+0x288>)
 80066c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066c8:	6013      	str	r3, [r2, #0]
 80066ca:	e01d      	b.n	8006708 <HAL_RCC_OscConfig+0xd8>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066d4:	d10c      	bne.n	80066f0 <HAL_RCC_OscConfig+0xc0>
 80066d6:	4b78      	ldr	r3, [pc, #480]	@ (80068b8 <HAL_RCC_OscConfig+0x288>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a77      	ldr	r2, [pc, #476]	@ (80068b8 <HAL_RCC_OscConfig+0x288>)
 80066dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066e0:	6013      	str	r3, [r2, #0]
 80066e2:	4b75      	ldr	r3, [pc, #468]	@ (80068b8 <HAL_RCC_OscConfig+0x288>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a74      	ldr	r2, [pc, #464]	@ (80068b8 <HAL_RCC_OscConfig+0x288>)
 80066e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066ec:	6013      	str	r3, [r2, #0]
 80066ee:	e00b      	b.n	8006708 <HAL_RCC_OscConfig+0xd8>
 80066f0:	4b71      	ldr	r3, [pc, #452]	@ (80068b8 <HAL_RCC_OscConfig+0x288>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a70      	ldr	r2, [pc, #448]	@ (80068b8 <HAL_RCC_OscConfig+0x288>)
 80066f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066fa:	6013      	str	r3, [r2, #0]
 80066fc:	4b6e      	ldr	r3, [pc, #440]	@ (80068b8 <HAL_RCC_OscConfig+0x288>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a6d      	ldr	r2, [pc, #436]	@ (80068b8 <HAL_RCC_OscConfig+0x288>)
 8006702:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006706:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d013      	beq.n	8006738 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006710:	f7fb ffcc 	bl	80026ac <HAL_GetTick>
 8006714:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006716:	e008      	b.n	800672a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006718:	f7fb ffc8 	bl	80026ac <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	2b64      	cmp	r3, #100	@ 0x64
 8006724:	d901      	bls.n	800672a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	e3d4      	b.n	8006ed4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800672a:	4b63      	ldr	r3, [pc, #396]	@ (80068b8 <HAL_RCC_OscConfig+0x288>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006732:	2b00      	cmp	r3, #0
 8006734:	d0f0      	beq.n	8006718 <HAL_RCC_OscConfig+0xe8>
 8006736:	e014      	b.n	8006762 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006738:	f7fb ffb8 	bl	80026ac <HAL_GetTick>
 800673c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800673e:	e008      	b.n	8006752 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006740:	f7fb ffb4 	bl	80026ac <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	2b64      	cmp	r3, #100	@ 0x64
 800674c:	d901      	bls.n	8006752 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e3c0      	b.n	8006ed4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006752:	4b59      	ldr	r3, [pc, #356]	@ (80068b8 <HAL_RCC_OscConfig+0x288>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1f0      	bne.n	8006740 <HAL_RCC_OscConfig+0x110>
 800675e:	e000      	b.n	8006762 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0302 	and.w	r3, r3, #2
 800676a:	2b00      	cmp	r3, #0
 800676c:	f000 80ca 	beq.w	8006904 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006770:	4b51      	ldr	r3, [pc, #324]	@ (80068b8 <HAL_RCC_OscConfig+0x288>)
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006778:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800677a:	4b4f      	ldr	r3, [pc, #316]	@ (80068b8 <HAL_RCC_OscConfig+0x288>)
 800677c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800677e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006780:	6a3b      	ldr	r3, [r7, #32]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d007      	beq.n	8006796 <HAL_RCC_OscConfig+0x166>
 8006786:	6a3b      	ldr	r3, [r7, #32]
 8006788:	2b18      	cmp	r3, #24
 800678a:	d156      	bne.n	800683a <HAL_RCC_OscConfig+0x20a>
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	f003 0303 	and.w	r3, r3, #3
 8006792:	2b00      	cmp	r3, #0
 8006794:	d151      	bne.n	800683a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006796:	4b48      	ldr	r3, [pc, #288]	@ (80068b8 <HAL_RCC_OscConfig+0x288>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0304 	and.w	r3, r3, #4
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d005      	beq.n	80067ae <HAL_RCC_OscConfig+0x17e>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d101      	bne.n	80067ae <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e392      	b.n	8006ed4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80067ae:	4b42      	ldr	r3, [pc, #264]	@ (80068b8 <HAL_RCC_OscConfig+0x288>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f023 0219 	bic.w	r2, r3, #25
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	493f      	ldr	r1, [pc, #252]	@ (80068b8 <HAL_RCC_OscConfig+0x288>)
 80067bc:	4313      	orrs	r3, r2
 80067be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067c0:	f7fb ff74 	bl	80026ac <HAL_GetTick>
 80067c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80067c6:	e008      	b.n	80067da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067c8:	f7fb ff70 	bl	80026ac <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d901      	bls.n	80067da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e37c      	b.n	8006ed4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80067da:	4b37      	ldr	r3, [pc, #220]	@ (80068b8 <HAL_RCC_OscConfig+0x288>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0304 	and.w	r3, r3, #4
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d0f0      	beq.n	80067c8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067e6:	f7fb ff91 	bl	800270c <HAL_GetREVID>
 80067ea:	4603      	mov	r3, r0
 80067ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d817      	bhi.n	8006824 <HAL_RCC_OscConfig+0x1f4>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	2b40      	cmp	r3, #64	@ 0x40
 80067fa:	d108      	bne.n	800680e <HAL_RCC_OscConfig+0x1de>
 80067fc:	4b2e      	ldr	r3, [pc, #184]	@ (80068b8 <HAL_RCC_OscConfig+0x288>)
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006804:	4a2c      	ldr	r2, [pc, #176]	@ (80068b8 <HAL_RCC_OscConfig+0x288>)
 8006806:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800680a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800680c:	e07a      	b.n	8006904 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800680e:	4b2a      	ldr	r3, [pc, #168]	@ (80068b8 <HAL_RCC_OscConfig+0x288>)
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	031b      	lsls	r3, r3, #12
 800681c:	4926      	ldr	r1, [pc, #152]	@ (80068b8 <HAL_RCC_OscConfig+0x288>)
 800681e:	4313      	orrs	r3, r2
 8006820:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006822:	e06f      	b.n	8006904 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006824:	4b24      	ldr	r3, [pc, #144]	@ (80068b8 <HAL_RCC_OscConfig+0x288>)
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	061b      	lsls	r3, r3, #24
 8006832:	4921      	ldr	r1, [pc, #132]	@ (80068b8 <HAL_RCC_OscConfig+0x288>)
 8006834:	4313      	orrs	r3, r2
 8006836:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006838:	e064      	b.n	8006904 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d047      	beq.n	80068d2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006842:	4b1d      	ldr	r3, [pc, #116]	@ (80068b8 <HAL_RCC_OscConfig+0x288>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f023 0219 	bic.w	r2, r3, #25
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	491a      	ldr	r1, [pc, #104]	@ (80068b8 <HAL_RCC_OscConfig+0x288>)
 8006850:	4313      	orrs	r3, r2
 8006852:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006854:	f7fb ff2a 	bl	80026ac <HAL_GetTick>
 8006858:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800685a:	e008      	b.n	800686e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800685c:	f7fb ff26 	bl	80026ac <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	2b02      	cmp	r3, #2
 8006868:	d901      	bls.n	800686e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e332      	b.n	8006ed4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800686e:	4b12      	ldr	r3, [pc, #72]	@ (80068b8 <HAL_RCC_OscConfig+0x288>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0304 	and.w	r3, r3, #4
 8006876:	2b00      	cmp	r3, #0
 8006878:	d0f0      	beq.n	800685c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800687a:	f7fb ff47 	bl	800270c <HAL_GetREVID>
 800687e:	4603      	mov	r3, r0
 8006880:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006884:	4293      	cmp	r3, r2
 8006886:	d819      	bhi.n	80068bc <HAL_RCC_OscConfig+0x28c>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	2b40      	cmp	r3, #64	@ 0x40
 800688e:	d108      	bne.n	80068a2 <HAL_RCC_OscConfig+0x272>
 8006890:	4b09      	ldr	r3, [pc, #36]	@ (80068b8 <HAL_RCC_OscConfig+0x288>)
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006898:	4a07      	ldr	r2, [pc, #28]	@ (80068b8 <HAL_RCC_OscConfig+0x288>)
 800689a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800689e:	6053      	str	r3, [r2, #4]
 80068a0:	e030      	b.n	8006904 <HAL_RCC_OscConfig+0x2d4>
 80068a2:	4b05      	ldr	r3, [pc, #20]	@ (80068b8 <HAL_RCC_OscConfig+0x288>)
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	031b      	lsls	r3, r3, #12
 80068b0:	4901      	ldr	r1, [pc, #4]	@ (80068b8 <HAL_RCC_OscConfig+0x288>)
 80068b2:	4313      	orrs	r3, r2
 80068b4:	604b      	str	r3, [r1, #4]
 80068b6:	e025      	b.n	8006904 <HAL_RCC_OscConfig+0x2d4>
 80068b8:	58024400 	.word	0x58024400
 80068bc:	4b9a      	ldr	r3, [pc, #616]	@ (8006b28 <HAL_RCC_OscConfig+0x4f8>)
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	061b      	lsls	r3, r3, #24
 80068ca:	4997      	ldr	r1, [pc, #604]	@ (8006b28 <HAL_RCC_OscConfig+0x4f8>)
 80068cc:	4313      	orrs	r3, r2
 80068ce:	604b      	str	r3, [r1, #4]
 80068d0:	e018      	b.n	8006904 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068d2:	4b95      	ldr	r3, [pc, #596]	@ (8006b28 <HAL_RCC_OscConfig+0x4f8>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a94      	ldr	r2, [pc, #592]	@ (8006b28 <HAL_RCC_OscConfig+0x4f8>)
 80068d8:	f023 0301 	bic.w	r3, r3, #1
 80068dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068de:	f7fb fee5 	bl	80026ac <HAL_GetTick>
 80068e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80068e4:	e008      	b.n	80068f8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068e6:	f7fb fee1 	bl	80026ac <HAL_GetTick>
 80068ea:	4602      	mov	r2, r0
 80068ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d901      	bls.n	80068f8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e2ed      	b.n	8006ed4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80068f8:	4b8b      	ldr	r3, [pc, #556]	@ (8006b28 <HAL_RCC_OscConfig+0x4f8>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 0304 	and.w	r3, r3, #4
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1f0      	bne.n	80068e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0310 	and.w	r3, r3, #16
 800690c:	2b00      	cmp	r3, #0
 800690e:	f000 80a9 	beq.w	8006a64 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006912:	4b85      	ldr	r3, [pc, #532]	@ (8006b28 <HAL_RCC_OscConfig+0x4f8>)
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800691a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800691c:	4b82      	ldr	r3, [pc, #520]	@ (8006b28 <HAL_RCC_OscConfig+0x4f8>)
 800691e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006920:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	2b08      	cmp	r3, #8
 8006926:	d007      	beq.n	8006938 <HAL_RCC_OscConfig+0x308>
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	2b18      	cmp	r3, #24
 800692c:	d13a      	bne.n	80069a4 <HAL_RCC_OscConfig+0x374>
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	f003 0303 	and.w	r3, r3, #3
 8006934:	2b01      	cmp	r3, #1
 8006936:	d135      	bne.n	80069a4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006938:	4b7b      	ldr	r3, [pc, #492]	@ (8006b28 <HAL_RCC_OscConfig+0x4f8>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006940:	2b00      	cmp	r3, #0
 8006942:	d005      	beq.n	8006950 <HAL_RCC_OscConfig+0x320>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	69db      	ldr	r3, [r3, #28]
 8006948:	2b80      	cmp	r3, #128	@ 0x80
 800694a:	d001      	beq.n	8006950 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e2c1      	b.n	8006ed4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006950:	f7fb fedc 	bl	800270c <HAL_GetREVID>
 8006954:	4603      	mov	r3, r0
 8006956:	f241 0203 	movw	r2, #4099	@ 0x1003
 800695a:	4293      	cmp	r3, r2
 800695c:	d817      	bhi.n	800698e <HAL_RCC_OscConfig+0x35e>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	2b20      	cmp	r3, #32
 8006964:	d108      	bne.n	8006978 <HAL_RCC_OscConfig+0x348>
 8006966:	4b70      	ldr	r3, [pc, #448]	@ (8006b28 <HAL_RCC_OscConfig+0x4f8>)
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800696e:	4a6e      	ldr	r2, [pc, #440]	@ (8006b28 <HAL_RCC_OscConfig+0x4f8>)
 8006970:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006974:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006976:	e075      	b.n	8006a64 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006978:	4b6b      	ldr	r3, [pc, #428]	@ (8006b28 <HAL_RCC_OscConfig+0x4f8>)
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a1b      	ldr	r3, [r3, #32]
 8006984:	069b      	lsls	r3, r3, #26
 8006986:	4968      	ldr	r1, [pc, #416]	@ (8006b28 <HAL_RCC_OscConfig+0x4f8>)
 8006988:	4313      	orrs	r3, r2
 800698a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800698c:	e06a      	b.n	8006a64 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800698e:	4b66      	ldr	r3, [pc, #408]	@ (8006b28 <HAL_RCC_OscConfig+0x4f8>)
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a1b      	ldr	r3, [r3, #32]
 800699a:	061b      	lsls	r3, r3, #24
 800699c:	4962      	ldr	r1, [pc, #392]	@ (8006b28 <HAL_RCC_OscConfig+0x4f8>)
 800699e:	4313      	orrs	r3, r2
 80069a0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80069a2:	e05f      	b.n	8006a64 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	69db      	ldr	r3, [r3, #28]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d042      	beq.n	8006a32 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80069ac:	4b5e      	ldr	r3, [pc, #376]	@ (8006b28 <HAL_RCC_OscConfig+0x4f8>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a5d      	ldr	r2, [pc, #372]	@ (8006b28 <HAL_RCC_OscConfig+0x4f8>)
 80069b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069b8:	f7fb fe78 	bl	80026ac <HAL_GetTick>
 80069bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80069be:	e008      	b.n	80069d2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80069c0:	f7fb fe74 	bl	80026ac <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d901      	bls.n	80069d2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e280      	b.n	8006ed4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80069d2:	4b55      	ldr	r3, [pc, #340]	@ (8006b28 <HAL_RCC_OscConfig+0x4f8>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d0f0      	beq.n	80069c0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80069de:	f7fb fe95 	bl	800270c <HAL_GetREVID>
 80069e2:	4603      	mov	r3, r0
 80069e4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d817      	bhi.n	8006a1c <HAL_RCC_OscConfig+0x3ec>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a1b      	ldr	r3, [r3, #32]
 80069f0:	2b20      	cmp	r3, #32
 80069f2:	d108      	bne.n	8006a06 <HAL_RCC_OscConfig+0x3d6>
 80069f4:	4b4c      	ldr	r3, [pc, #304]	@ (8006b28 <HAL_RCC_OscConfig+0x4f8>)
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80069fc:	4a4a      	ldr	r2, [pc, #296]	@ (8006b28 <HAL_RCC_OscConfig+0x4f8>)
 80069fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006a02:	6053      	str	r3, [r2, #4]
 8006a04:	e02e      	b.n	8006a64 <HAL_RCC_OscConfig+0x434>
 8006a06:	4b48      	ldr	r3, [pc, #288]	@ (8006b28 <HAL_RCC_OscConfig+0x4f8>)
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a1b      	ldr	r3, [r3, #32]
 8006a12:	069b      	lsls	r3, r3, #26
 8006a14:	4944      	ldr	r1, [pc, #272]	@ (8006b28 <HAL_RCC_OscConfig+0x4f8>)
 8006a16:	4313      	orrs	r3, r2
 8006a18:	604b      	str	r3, [r1, #4]
 8006a1a:	e023      	b.n	8006a64 <HAL_RCC_OscConfig+0x434>
 8006a1c:	4b42      	ldr	r3, [pc, #264]	@ (8006b28 <HAL_RCC_OscConfig+0x4f8>)
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6a1b      	ldr	r3, [r3, #32]
 8006a28:	061b      	lsls	r3, r3, #24
 8006a2a:	493f      	ldr	r1, [pc, #252]	@ (8006b28 <HAL_RCC_OscConfig+0x4f8>)
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	60cb      	str	r3, [r1, #12]
 8006a30:	e018      	b.n	8006a64 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006a32:	4b3d      	ldr	r3, [pc, #244]	@ (8006b28 <HAL_RCC_OscConfig+0x4f8>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a3c      	ldr	r2, [pc, #240]	@ (8006b28 <HAL_RCC_OscConfig+0x4f8>)
 8006a38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a3e:	f7fb fe35 	bl	80026ac <HAL_GetTick>
 8006a42:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006a44:	e008      	b.n	8006a58 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006a46:	f7fb fe31 	bl	80026ac <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d901      	bls.n	8006a58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e23d      	b.n	8006ed4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006a58:	4b33      	ldr	r3, [pc, #204]	@ (8006b28 <HAL_RCC_OscConfig+0x4f8>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1f0      	bne.n	8006a46 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0308 	and.w	r3, r3, #8
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d036      	beq.n	8006ade <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d019      	beq.n	8006aac <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a78:	4b2b      	ldr	r3, [pc, #172]	@ (8006b28 <HAL_RCC_OscConfig+0x4f8>)
 8006a7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a7c:	4a2a      	ldr	r2, [pc, #168]	@ (8006b28 <HAL_RCC_OscConfig+0x4f8>)
 8006a7e:	f043 0301 	orr.w	r3, r3, #1
 8006a82:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a84:	f7fb fe12 	bl	80026ac <HAL_GetTick>
 8006a88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006a8a:	e008      	b.n	8006a9e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a8c:	f7fb fe0e 	bl	80026ac <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d901      	bls.n	8006a9e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e21a      	b.n	8006ed4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006a9e:	4b22      	ldr	r3, [pc, #136]	@ (8006b28 <HAL_RCC_OscConfig+0x4f8>)
 8006aa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006aa2:	f003 0302 	and.w	r3, r3, #2
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d0f0      	beq.n	8006a8c <HAL_RCC_OscConfig+0x45c>
 8006aaa:	e018      	b.n	8006ade <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006aac:	4b1e      	ldr	r3, [pc, #120]	@ (8006b28 <HAL_RCC_OscConfig+0x4f8>)
 8006aae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8006b28 <HAL_RCC_OscConfig+0x4f8>)
 8006ab2:	f023 0301 	bic.w	r3, r3, #1
 8006ab6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ab8:	f7fb fdf8 	bl	80026ac <HAL_GetTick>
 8006abc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006abe:	e008      	b.n	8006ad2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ac0:	f7fb fdf4 	bl	80026ac <HAL_GetTick>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d901      	bls.n	8006ad2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e200      	b.n	8006ed4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006ad2:	4b15      	ldr	r3, [pc, #84]	@ (8006b28 <HAL_RCC_OscConfig+0x4f8>)
 8006ad4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ad6:	f003 0302 	and.w	r3, r3, #2
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1f0      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0320 	and.w	r3, r3, #32
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d039      	beq.n	8006b5e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d01c      	beq.n	8006b2c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006af2:	4b0d      	ldr	r3, [pc, #52]	@ (8006b28 <HAL_RCC_OscConfig+0x4f8>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a0c      	ldr	r2, [pc, #48]	@ (8006b28 <HAL_RCC_OscConfig+0x4f8>)
 8006af8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006afc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006afe:	f7fb fdd5 	bl	80026ac <HAL_GetTick>
 8006b02:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006b04:	e008      	b.n	8006b18 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b06:	f7fb fdd1 	bl	80026ac <HAL_GetTick>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d901      	bls.n	8006b18 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	e1dd      	b.n	8006ed4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006b18:	4b03      	ldr	r3, [pc, #12]	@ (8006b28 <HAL_RCC_OscConfig+0x4f8>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d0f0      	beq.n	8006b06 <HAL_RCC_OscConfig+0x4d6>
 8006b24:	e01b      	b.n	8006b5e <HAL_RCC_OscConfig+0x52e>
 8006b26:	bf00      	nop
 8006b28:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006b2c:	4b9b      	ldr	r3, [pc, #620]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a9a      	ldr	r2, [pc, #616]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006b32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b36:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006b38:	f7fb fdb8 	bl	80026ac <HAL_GetTick>
 8006b3c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006b3e:	e008      	b.n	8006b52 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b40:	f7fb fdb4 	bl	80026ac <HAL_GetTick>
 8006b44:	4602      	mov	r2, r0
 8006b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	d901      	bls.n	8006b52 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e1c0      	b.n	8006ed4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006b52:	4b92      	ldr	r3, [pc, #584]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d1f0      	bne.n	8006b40 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 0304 	and.w	r3, r3, #4
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f000 8081 	beq.w	8006c6e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006b6c:	4b8c      	ldr	r3, [pc, #560]	@ (8006da0 <HAL_RCC_OscConfig+0x770>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a8b      	ldr	r2, [pc, #556]	@ (8006da0 <HAL_RCC_OscConfig+0x770>)
 8006b72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b78:	f7fb fd98 	bl	80026ac <HAL_GetTick>
 8006b7c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b7e:	e008      	b.n	8006b92 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b80:	f7fb fd94 	bl	80026ac <HAL_GetTick>
 8006b84:	4602      	mov	r2, r0
 8006b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	2b64      	cmp	r3, #100	@ 0x64
 8006b8c:	d901      	bls.n	8006b92 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e1a0      	b.n	8006ed4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b92:	4b83      	ldr	r3, [pc, #524]	@ (8006da0 <HAL_RCC_OscConfig+0x770>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d0f0      	beq.n	8006b80 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d106      	bne.n	8006bb4 <HAL_RCC_OscConfig+0x584>
 8006ba6:	4b7d      	ldr	r3, [pc, #500]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006baa:	4a7c      	ldr	r2, [pc, #496]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006bac:	f043 0301 	orr.w	r3, r3, #1
 8006bb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8006bb2:	e02d      	b.n	8006c10 <HAL_RCC_OscConfig+0x5e0>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d10c      	bne.n	8006bd6 <HAL_RCC_OscConfig+0x5a6>
 8006bbc:	4b77      	ldr	r3, [pc, #476]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006bbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bc0:	4a76      	ldr	r2, [pc, #472]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006bc2:	f023 0301 	bic.w	r3, r3, #1
 8006bc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006bc8:	4b74      	ldr	r3, [pc, #464]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bcc:	4a73      	ldr	r2, [pc, #460]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006bce:	f023 0304 	bic.w	r3, r3, #4
 8006bd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8006bd4:	e01c      	b.n	8006c10 <HAL_RCC_OscConfig+0x5e0>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	2b05      	cmp	r3, #5
 8006bdc:	d10c      	bne.n	8006bf8 <HAL_RCC_OscConfig+0x5c8>
 8006bde:	4b6f      	ldr	r3, [pc, #444]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006be2:	4a6e      	ldr	r2, [pc, #440]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006be4:	f043 0304 	orr.w	r3, r3, #4
 8006be8:	6713      	str	r3, [r2, #112]	@ 0x70
 8006bea:	4b6c      	ldr	r3, [pc, #432]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bee:	4a6b      	ldr	r2, [pc, #428]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006bf0:	f043 0301 	orr.w	r3, r3, #1
 8006bf4:	6713      	str	r3, [r2, #112]	@ 0x70
 8006bf6:	e00b      	b.n	8006c10 <HAL_RCC_OscConfig+0x5e0>
 8006bf8:	4b68      	ldr	r3, [pc, #416]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bfc:	4a67      	ldr	r2, [pc, #412]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006bfe:	f023 0301 	bic.w	r3, r3, #1
 8006c02:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c04:	4b65      	ldr	r3, [pc, #404]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006c06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c08:	4a64      	ldr	r2, [pc, #400]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006c0a:	f023 0304 	bic.w	r3, r3, #4
 8006c0e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d015      	beq.n	8006c44 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c18:	f7fb fd48 	bl	80026ac <HAL_GetTick>
 8006c1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c1e:	e00a      	b.n	8006c36 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c20:	f7fb fd44 	bl	80026ac <HAL_GetTick>
 8006c24:	4602      	mov	r2, r0
 8006c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d901      	bls.n	8006c36 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	e14e      	b.n	8006ed4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c36:	4b59      	ldr	r3, [pc, #356]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c3a:	f003 0302 	and.w	r3, r3, #2
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d0ee      	beq.n	8006c20 <HAL_RCC_OscConfig+0x5f0>
 8006c42:	e014      	b.n	8006c6e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c44:	f7fb fd32 	bl	80026ac <HAL_GetTick>
 8006c48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006c4a:	e00a      	b.n	8006c62 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c4c:	f7fb fd2e 	bl	80026ac <HAL_GetTick>
 8006c50:	4602      	mov	r2, r0
 8006c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d901      	bls.n	8006c62 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e138      	b.n	8006ed4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006c62:	4b4e      	ldr	r3, [pc, #312]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c66:	f003 0302 	and.w	r3, r3, #2
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1ee      	bne.n	8006c4c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f000 812d 	beq.w	8006ed2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006c78:	4b48      	ldr	r3, [pc, #288]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c80:	2b18      	cmp	r3, #24
 8006c82:	f000 80bd 	beq.w	8006e00 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	f040 809e 	bne.w	8006dcc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c90:	4b42      	ldr	r3, [pc, #264]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a41      	ldr	r2, [pc, #260]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006c96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c9c:	f7fb fd06 	bl	80026ac <HAL_GetTick>
 8006ca0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ca2:	e008      	b.n	8006cb6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ca4:	f7fb fd02 	bl	80026ac <HAL_GetTick>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cac:	1ad3      	subs	r3, r2, r3
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	d901      	bls.n	8006cb6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006cb2:	2303      	movs	r3, #3
 8006cb4:	e10e      	b.n	8006ed4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006cb6:	4b39      	ldr	r3, [pc, #228]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d1f0      	bne.n	8006ca4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006cc2:	4b36      	ldr	r3, [pc, #216]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006cc4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006cc6:	4b37      	ldr	r3, [pc, #220]	@ (8006da4 <HAL_RCC_OscConfig+0x774>)
 8006cc8:	4013      	ands	r3, r2
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006cd2:	0112      	lsls	r2, r2, #4
 8006cd4:	430a      	orrs	r2, r1
 8006cd6:	4931      	ldr	r1, [pc, #196]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	628b      	str	r3, [r1, #40]	@ 0x28
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cea:	3b01      	subs	r3, #1
 8006cec:	025b      	lsls	r3, r3, #9
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	431a      	orrs	r2, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	041b      	lsls	r3, r3, #16
 8006cfa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006cfe:	431a      	orrs	r2, r3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d04:	3b01      	subs	r3, #1
 8006d06:	061b      	lsls	r3, r3, #24
 8006d08:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006d0c:	4923      	ldr	r1, [pc, #140]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006d12:	4b22      	ldr	r3, [pc, #136]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d16:	4a21      	ldr	r2, [pc, #132]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006d18:	f023 0301 	bic.w	r3, r3, #1
 8006d1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006d1e:	4b1f      	ldr	r3, [pc, #124]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006d20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d22:	4b21      	ldr	r3, [pc, #132]	@ (8006da8 <HAL_RCC_OscConfig+0x778>)
 8006d24:	4013      	ands	r3, r2
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006d2a:	00d2      	lsls	r2, r2, #3
 8006d2c:	491b      	ldr	r1, [pc, #108]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006d32:	4b1a      	ldr	r3, [pc, #104]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d36:	f023 020c 	bic.w	r2, r3, #12
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d3e:	4917      	ldr	r1, [pc, #92]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006d40:	4313      	orrs	r3, r2
 8006d42:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006d44:	4b15      	ldr	r3, [pc, #84]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d48:	f023 0202 	bic.w	r2, r3, #2
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d50:	4912      	ldr	r1, [pc, #72]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006d52:	4313      	orrs	r3, r2
 8006d54:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006d56:	4b11      	ldr	r3, [pc, #68]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d5a:	4a10      	ldr	r2, [pc, #64]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006d5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d62:	4b0e      	ldr	r3, [pc, #56]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d66:	4a0d      	ldr	r2, [pc, #52]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006d68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d72:	4a0a      	ldr	r2, [pc, #40]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006d74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006d7a:	4b08      	ldr	r3, [pc, #32]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d7e:	4a07      	ldr	r2, [pc, #28]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006d80:	f043 0301 	orr.w	r3, r3, #1
 8006d84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d86:	4b05      	ldr	r3, [pc, #20]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a04      	ldr	r2, [pc, #16]	@ (8006d9c <HAL_RCC_OscConfig+0x76c>)
 8006d8c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006d90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d92:	f7fb fc8b 	bl	80026ac <HAL_GetTick>
 8006d96:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d98:	e011      	b.n	8006dbe <HAL_RCC_OscConfig+0x78e>
 8006d9a:	bf00      	nop
 8006d9c:	58024400 	.word	0x58024400
 8006da0:	58024800 	.word	0x58024800
 8006da4:	fffffc0c 	.word	0xfffffc0c
 8006da8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dac:	f7fb fc7e 	bl	80026ac <HAL_GetTick>
 8006db0:	4602      	mov	r2, r0
 8006db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d901      	bls.n	8006dbe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	e08a      	b.n	8006ed4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006dbe:	4b47      	ldr	r3, [pc, #284]	@ (8006edc <HAL_RCC_OscConfig+0x8ac>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d0f0      	beq.n	8006dac <HAL_RCC_OscConfig+0x77c>
 8006dca:	e082      	b.n	8006ed2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dcc:	4b43      	ldr	r3, [pc, #268]	@ (8006edc <HAL_RCC_OscConfig+0x8ac>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a42      	ldr	r2, [pc, #264]	@ (8006edc <HAL_RCC_OscConfig+0x8ac>)
 8006dd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006dd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dd8:	f7fb fc68 	bl	80026ac <HAL_GetTick>
 8006ddc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006dde:	e008      	b.n	8006df2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006de0:	f7fb fc64 	bl	80026ac <HAL_GetTick>
 8006de4:	4602      	mov	r2, r0
 8006de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de8:	1ad3      	subs	r3, r2, r3
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	d901      	bls.n	8006df2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e070      	b.n	8006ed4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006df2:	4b3a      	ldr	r3, [pc, #232]	@ (8006edc <HAL_RCC_OscConfig+0x8ac>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1f0      	bne.n	8006de0 <HAL_RCC_OscConfig+0x7b0>
 8006dfe:	e068      	b.n	8006ed2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006e00:	4b36      	ldr	r3, [pc, #216]	@ (8006edc <HAL_RCC_OscConfig+0x8ac>)
 8006e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e04:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006e06:	4b35      	ldr	r3, [pc, #212]	@ (8006edc <HAL_RCC_OscConfig+0x8ac>)
 8006e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e0a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d031      	beq.n	8006e78 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	f003 0203 	and.w	r2, r3, #3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d12a      	bne.n	8006e78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	091b      	lsrs	r3, r3, #4
 8006e26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d122      	bne.n	8006e78 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e3c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d11a      	bne.n	8006e78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	0a5b      	lsrs	r3, r3, #9
 8006e46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e4e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d111      	bne.n	8006e78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	0c1b      	lsrs	r3, r3, #16
 8006e58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e60:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d108      	bne.n	8006e78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	0e1b      	lsrs	r3, r3, #24
 8006e6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e72:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d001      	beq.n	8006e7c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e02b      	b.n	8006ed4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006e7c:	4b17      	ldr	r3, [pc, #92]	@ (8006edc <HAL_RCC_OscConfig+0x8ac>)
 8006e7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e80:	08db      	lsrs	r3, r3, #3
 8006e82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e86:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e8c:	693a      	ldr	r2, [r7, #16]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d01f      	beq.n	8006ed2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006e92:	4b12      	ldr	r3, [pc, #72]	@ (8006edc <HAL_RCC_OscConfig+0x8ac>)
 8006e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e96:	4a11      	ldr	r2, [pc, #68]	@ (8006edc <HAL_RCC_OscConfig+0x8ac>)
 8006e98:	f023 0301 	bic.w	r3, r3, #1
 8006e9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006e9e:	f7fb fc05 	bl	80026ac <HAL_GetTick>
 8006ea2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006ea4:	bf00      	nop
 8006ea6:	f7fb fc01 	bl	80026ac <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d0f9      	beq.n	8006ea6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8006edc <HAL_RCC_OscConfig+0x8ac>)
 8006eb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8006ee0 <HAL_RCC_OscConfig+0x8b0>)
 8006eb8:	4013      	ands	r3, r2
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006ebe:	00d2      	lsls	r2, r2, #3
 8006ec0:	4906      	ldr	r1, [pc, #24]	@ (8006edc <HAL_RCC_OscConfig+0x8ac>)
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006ec6:	4b05      	ldr	r3, [pc, #20]	@ (8006edc <HAL_RCC_OscConfig+0x8ac>)
 8006ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eca:	4a04      	ldr	r2, [pc, #16]	@ (8006edc <HAL_RCC_OscConfig+0x8ac>)
 8006ecc:	f043 0301 	orr.w	r3, r3, #1
 8006ed0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3730      	adds	r7, #48	@ 0x30
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	58024400 	.word	0x58024400
 8006ee0:	ffff0007 	.word	0xffff0007

08006ee4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d101      	bne.n	8006ef8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e19c      	b.n	8007232 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ef8:	4b8a      	ldr	r3, [pc, #552]	@ (8007124 <HAL_RCC_ClockConfig+0x240>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 030f 	and.w	r3, r3, #15
 8006f00:	683a      	ldr	r2, [r7, #0]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d910      	bls.n	8006f28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f06:	4b87      	ldr	r3, [pc, #540]	@ (8007124 <HAL_RCC_ClockConfig+0x240>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f023 020f 	bic.w	r2, r3, #15
 8006f0e:	4985      	ldr	r1, [pc, #532]	@ (8007124 <HAL_RCC_ClockConfig+0x240>)
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f16:	4b83      	ldr	r3, [pc, #524]	@ (8007124 <HAL_RCC_ClockConfig+0x240>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 030f 	and.w	r3, r3, #15
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d001      	beq.n	8006f28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e184      	b.n	8007232 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0304 	and.w	r3, r3, #4
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d010      	beq.n	8006f56 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	691a      	ldr	r2, [r3, #16]
 8006f38:	4b7b      	ldr	r3, [pc, #492]	@ (8007128 <HAL_RCC_ClockConfig+0x244>)
 8006f3a:	699b      	ldr	r3, [r3, #24]
 8006f3c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d908      	bls.n	8006f56 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006f44:	4b78      	ldr	r3, [pc, #480]	@ (8007128 <HAL_RCC_ClockConfig+0x244>)
 8006f46:	699b      	ldr	r3, [r3, #24]
 8006f48:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	4975      	ldr	r1, [pc, #468]	@ (8007128 <HAL_RCC_ClockConfig+0x244>)
 8006f52:	4313      	orrs	r3, r2
 8006f54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 0308 	and.w	r3, r3, #8
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d010      	beq.n	8006f84 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	695a      	ldr	r2, [r3, #20]
 8006f66:	4b70      	ldr	r3, [pc, #448]	@ (8007128 <HAL_RCC_ClockConfig+0x244>)
 8006f68:	69db      	ldr	r3, [r3, #28]
 8006f6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d908      	bls.n	8006f84 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006f72:	4b6d      	ldr	r3, [pc, #436]	@ (8007128 <HAL_RCC_ClockConfig+0x244>)
 8006f74:	69db      	ldr	r3, [r3, #28]
 8006f76:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	496a      	ldr	r1, [pc, #424]	@ (8007128 <HAL_RCC_ClockConfig+0x244>)
 8006f80:	4313      	orrs	r3, r2
 8006f82:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 0310 	and.w	r3, r3, #16
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d010      	beq.n	8006fb2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	699a      	ldr	r2, [r3, #24]
 8006f94:	4b64      	ldr	r3, [pc, #400]	@ (8007128 <HAL_RCC_ClockConfig+0x244>)
 8006f96:	69db      	ldr	r3, [r3, #28]
 8006f98:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d908      	bls.n	8006fb2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006fa0:	4b61      	ldr	r3, [pc, #388]	@ (8007128 <HAL_RCC_ClockConfig+0x244>)
 8006fa2:	69db      	ldr	r3, [r3, #28]
 8006fa4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	699b      	ldr	r3, [r3, #24]
 8006fac:	495e      	ldr	r1, [pc, #376]	@ (8007128 <HAL_RCC_ClockConfig+0x244>)
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 0320 	and.w	r3, r3, #32
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d010      	beq.n	8006fe0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	69da      	ldr	r2, [r3, #28]
 8006fc2:	4b59      	ldr	r3, [pc, #356]	@ (8007128 <HAL_RCC_ClockConfig+0x244>)
 8006fc4:	6a1b      	ldr	r3, [r3, #32]
 8006fc6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d908      	bls.n	8006fe0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006fce:	4b56      	ldr	r3, [pc, #344]	@ (8007128 <HAL_RCC_ClockConfig+0x244>)
 8006fd0:	6a1b      	ldr	r3, [r3, #32]
 8006fd2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	69db      	ldr	r3, [r3, #28]
 8006fda:	4953      	ldr	r1, [pc, #332]	@ (8007128 <HAL_RCC_ClockConfig+0x244>)
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0302 	and.w	r3, r3, #2
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d010      	beq.n	800700e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	68da      	ldr	r2, [r3, #12]
 8006ff0:	4b4d      	ldr	r3, [pc, #308]	@ (8007128 <HAL_RCC_ClockConfig+0x244>)
 8006ff2:	699b      	ldr	r3, [r3, #24]
 8006ff4:	f003 030f 	and.w	r3, r3, #15
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d908      	bls.n	800700e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ffc:	4b4a      	ldr	r3, [pc, #296]	@ (8007128 <HAL_RCC_ClockConfig+0x244>)
 8006ffe:	699b      	ldr	r3, [r3, #24]
 8007000:	f023 020f 	bic.w	r2, r3, #15
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	4947      	ldr	r1, [pc, #284]	@ (8007128 <HAL_RCC_ClockConfig+0x244>)
 800700a:	4313      	orrs	r3, r2
 800700c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 0301 	and.w	r3, r3, #1
 8007016:	2b00      	cmp	r3, #0
 8007018:	d055      	beq.n	80070c6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800701a:	4b43      	ldr	r3, [pc, #268]	@ (8007128 <HAL_RCC_ClockConfig+0x244>)
 800701c:	699b      	ldr	r3, [r3, #24]
 800701e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	4940      	ldr	r1, [pc, #256]	@ (8007128 <HAL_RCC_ClockConfig+0x244>)
 8007028:	4313      	orrs	r3, r2
 800702a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	2b02      	cmp	r3, #2
 8007032:	d107      	bne.n	8007044 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007034:	4b3c      	ldr	r3, [pc, #240]	@ (8007128 <HAL_RCC_ClockConfig+0x244>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800703c:	2b00      	cmp	r3, #0
 800703e:	d121      	bne.n	8007084 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e0f6      	b.n	8007232 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	2b03      	cmp	r3, #3
 800704a:	d107      	bne.n	800705c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800704c:	4b36      	ldr	r3, [pc, #216]	@ (8007128 <HAL_RCC_ClockConfig+0x244>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007054:	2b00      	cmp	r3, #0
 8007056:	d115      	bne.n	8007084 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e0ea      	b.n	8007232 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	2b01      	cmp	r3, #1
 8007062:	d107      	bne.n	8007074 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007064:	4b30      	ldr	r3, [pc, #192]	@ (8007128 <HAL_RCC_ClockConfig+0x244>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800706c:	2b00      	cmp	r3, #0
 800706e:	d109      	bne.n	8007084 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	e0de      	b.n	8007232 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007074:	4b2c      	ldr	r3, [pc, #176]	@ (8007128 <HAL_RCC_ClockConfig+0x244>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0304 	and.w	r3, r3, #4
 800707c:	2b00      	cmp	r3, #0
 800707e:	d101      	bne.n	8007084 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	e0d6      	b.n	8007232 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007084:	4b28      	ldr	r3, [pc, #160]	@ (8007128 <HAL_RCC_ClockConfig+0x244>)
 8007086:	691b      	ldr	r3, [r3, #16]
 8007088:	f023 0207 	bic.w	r2, r3, #7
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	4925      	ldr	r1, [pc, #148]	@ (8007128 <HAL_RCC_ClockConfig+0x244>)
 8007092:	4313      	orrs	r3, r2
 8007094:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007096:	f7fb fb09 	bl	80026ac <HAL_GetTick>
 800709a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800709c:	e00a      	b.n	80070b4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800709e:	f7fb fb05 	bl	80026ac <HAL_GetTick>
 80070a2:	4602      	mov	r2, r0
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	1ad3      	subs	r3, r2, r3
 80070a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d901      	bls.n	80070b4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80070b0:	2303      	movs	r3, #3
 80070b2:	e0be      	b.n	8007232 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070b4:	4b1c      	ldr	r3, [pc, #112]	@ (8007128 <HAL_RCC_ClockConfig+0x244>)
 80070b6:	691b      	ldr	r3, [r3, #16]
 80070b8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	00db      	lsls	r3, r3, #3
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d1eb      	bne.n	800709e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0302 	and.w	r3, r3, #2
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d010      	beq.n	80070f4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	68da      	ldr	r2, [r3, #12]
 80070d6:	4b14      	ldr	r3, [pc, #80]	@ (8007128 <HAL_RCC_ClockConfig+0x244>)
 80070d8:	699b      	ldr	r3, [r3, #24]
 80070da:	f003 030f 	and.w	r3, r3, #15
 80070de:	429a      	cmp	r2, r3
 80070e0:	d208      	bcs.n	80070f4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070e2:	4b11      	ldr	r3, [pc, #68]	@ (8007128 <HAL_RCC_ClockConfig+0x244>)
 80070e4:	699b      	ldr	r3, [r3, #24]
 80070e6:	f023 020f 	bic.w	r2, r3, #15
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	490e      	ldr	r1, [pc, #56]	@ (8007128 <HAL_RCC_ClockConfig+0x244>)
 80070f0:	4313      	orrs	r3, r2
 80070f2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80070f4:	4b0b      	ldr	r3, [pc, #44]	@ (8007124 <HAL_RCC_ClockConfig+0x240>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 030f 	and.w	r3, r3, #15
 80070fc:	683a      	ldr	r2, [r7, #0]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d214      	bcs.n	800712c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007102:	4b08      	ldr	r3, [pc, #32]	@ (8007124 <HAL_RCC_ClockConfig+0x240>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f023 020f 	bic.w	r2, r3, #15
 800710a:	4906      	ldr	r1, [pc, #24]	@ (8007124 <HAL_RCC_ClockConfig+0x240>)
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	4313      	orrs	r3, r2
 8007110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007112:	4b04      	ldr	r3, [pc, #16]	@ (8007124 <HAL_RCC_ClockConfig+0x240>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 030f 	and.w	r3, r3, #15
 800711a:	683a      	ldr	r2, [r7, #0]
 800711c:	429a      	cmp	r2, r3
 800711e:	d005      	beq.n	800712c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	e086      	b.n	8007232 <HAL_RCC_ClockConfig+0x34e>
 8007124:	52002000 	.word	0x52002000
 8007128:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0304 	and.w	r3, r3, #4
 8007134:	2b00      	cmp	r3, #0
 8007136:	d010      	beq.n	800715a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	691a      	ldr	r2, [r3, #16]
 800713c:	4b3f      	ldr	r3, [pc, #252]	@ (800723c <HAL_RCC_ClockConfig+0x358>)
 800713e:	699b      	ldr	r3, [r3, #24]
 8007140:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007144:	429a      	cmp	r2, r3
 8007146:	d208      	bcs.n	800715a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007148:	4b3c      	ldr	r3, [pc, #240]	@ (800723c <HAL_RCC_ClockConfig+0x358>)
 800714a:	699b      	ldr	r3, [r3, #24]
 800714c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	4939      	ldr	r1, [pc, #228]	@ (800723c <HAL_RCC_ClockConfig+0x358>)
 8007156:	4313      	orrs	r3, r2
 8007158:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 0308 	and.w	r3, r3, #8
 8007162:	2b00      	cmp	r3, #0
 8007164:	d010      	beq.n	8007188 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	695a      	ldr	r2, [r3, #20]
 800716a:	4b34      	ldr	r3, [pc, #208]	@ (800723c <HAL_RCC_ClockConfig+0x358>)
 800716c:	69db      	ldr	r3, [r3, #28]
 800716e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007172:	429a      	cmp	r2, r3
 8007174:	d208      	bcs.n	8007188 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007176:	4b31      	ldr	r3, [pc, #196]	@ (800723c <HAL_RCC_ClockConfig+0x358>)
 8007178:	69db      	ldr	r3, [r3, #28]
 800717a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	492e      	ldr	r1, [pc, #184]	@ (800723c <HAL_RCC_ClockConfig+0x358>)
 8007184:	4313      	orrs	r3, r2
 8007186:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 0310 	and.w	r3, r3, #16
 8007190:	2b00      	cmp	r3, #0
 8007192:	d010      	beq.n	80071b6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	699a      	ldr	r2, [r3, #24]
 8007198:	4b28      	ldr	r3, [pc, #160]	@ (800723c <HAL_RCC_ClockConfig+0x358>)
 800719a:	69db      	ldr	r3, [r3, #28]
 800719c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d208      	bcs.n	80071b6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80071a4:	4b25      	ldr	r3, [pc, #148]	@ (800723c <HAL_RCC_ClockConfig+0x358>)
 80071a6:	69db      	ldr	r3, [r3, #28]
 80071a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	699b      	ldr	r3, [r3, #24]
 80071b0:	4922      	ldr	r1, [pc, #136]	@ (800723c <HAL_RCC_ClockConfig+0x358>)
 80071b2:	4313      	orrs	r3, r2
 80071b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0320 	and.w	r3, r3, #32
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d010      	beq.n	80071e4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	69da      	ldr	r2, [r3, #28]
 80071c6:	4b1d      	ldr	r3, [pc, #116]	@ (800723c <HAL_RCC_ClockConfig+0x358>)
 80071c8:	6a1b      	ldr	r3, [r3, #32]
 80071ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d208      	bcs.n	80071e4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80071d2:	4b1a      	ldr	r3, [pc, #104]	@ (800723c <HAL_RCC_ClockConfig+0x358>)
 80071d4:	6a1b      	ldr	r3, [r3, #32]
 80071d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	69db      	ldr	r3, [r3, #28]
 80071de:	4917      	ldr	r1, [pc, #92]	@ (800723c <HAL_RCC_ClockConfig+0x358>)
 80071e0:	4313      	orrs	r3, r2
 80071e2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80071e4:	f000 f834 	bl	8007250 <HAL_RCC_GetSysClockFreq>
 80071e8:	4602      	mov	r2, r0
 80071ea:	4b14      	ldr	r3, [pc, #80]	@ (800723c <HAL_RCC_ClockConfig+0x358>)
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	0a1b      	lsrs	r3, r3, #8
 80071f0:	f003 030f 	and.w	r3, r3, #15
 80071f4:	4912      	ldr	r1, [pc, #72]	@ (8007240 <HAL_RCC_ClockConfig+0x35c>)
 80071f6:	5ccb      	ldrb	r3, [r1, r3]
 80071f8:	f003 031f 	and.w	r3, r3, #31
 80071fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007200:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007202:	4b0e      	ldr	r3, [pc, #56]	@ (800723c <HAL_RCC_ClockConfig+0x358>)
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	f003 030f 	and.w	r3, r3, #15
 800720a:	4a0d      	ldr	r2, [pc, #52]	@ (8007240 <HAL_RCC_ClockConfig+0x35c>)
 800720c:	5cd3      	ldrb	r3, [r2, r3]
 800720e:	f003 031f 	and.w	r3, r3, #31
 8007212:	693a      	ldr	r2, [r7, #16]
 8007214:	fa22 f303 	lsr.w	r3, r2, r3
 8007218:	4a0a      	ldr	r2, [pc, #40]	@ (8007244 <HAL_RCC_ClockConfig+0x360>)
 800721a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800721c:	4a0a      	ldr	r2, [pc, #40]	@ (8007248 <HAL_RCC_ClockConfig+0x364>)
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007222:	4b0a      	ldr	r3, [pc, #40]	@ (800724c <HAL_RCC_ClockConfig+0x368>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4618      	mov	r0, r3
 8007228:	f7fb f9f6 	bl	8002618 <HAL_InitTick>
 800722c:	4603      	mov	r3, r0
 800722e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007230:	7bfb      	ldrb	r3, [r7, #15]
}
 8007232:	4618      	mov	r0, r3
 8007234:	3718      	adds	r7, #24
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	58024400 	.word	0x58024400
 8007240:	0801284c 	.word	0x0801284c
 8007244:	24000004 	.word	0x24000004
 8007248:	24000000 	.word	0x24000000
 800724c:	24000030 	.word	0x24000030

08007250 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007250:	b480      	push	{r7}
 8007252:	b089      	sub	sp, #36	@ 0x24
 8007254:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007256:	4bb3      	ldr	r3, [pc, #716]	@ (8007524 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800725e:	2b18      	cmp	r3, #24
 8007260:	f200 8155 	bhi.w	800750e <HAL_RCC_GetSysClockFreq+0x2be>
 8007264:	a201      	add	r2, pc, #4	@ (adr r2, 800726c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800726a:	bf00      	nop
 800726c:	080072d1 	.word	0x080072d1
 8007270:	0800750f 	.word	0x0800750f
 8007274:	0800750f 	.word	0x0800750f
 8007278:	0800750f 	.word	0x0800750f
 800727c:	0800750f 	.word	0x0800750f
 8007280:	0800750f 	.word	0x0800750f
 8007284:	0800750f 	.word	0x0800750f
 8007288:	0800750f 	.word	0x0800750f
 800728c:	080072f7 	.word	0x080072f7
 8007290:	0800750f 	.word	0x0800750f
 8007294:	0800750f 	.word	0x0800750f
 8007298:	0800750f 	.word	0x0800750f
 800729c:	0800750f 	.word	0x0800750f
 80072a0:	0800750f 	.word	0x0800750f
 80072a4:	0800750f 	.word	0x0800750f
 80072a8:	0800750f 	.word	0x0800750f
 80072ac:	080072fd 	.word	0x080072fd
 80072b0:	0800750f 	.word	0x0800750f
 80072b4:	0800750f 	.word	0x0800750f
 80072b8:	0800750f 	.word	0x0800750f
 80072bc:	0800750f 	.word	0x0800750f
 80072c0:	0800750f 	.word	0x0800750f
 80072c4:	0800750f 	.word	0x0800750f
 80072c8:	0800750f 	.word	0x0800750f
 80072cc:	08007303 	.word	0x08007303
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072d0:	4b94      	ldr	r3, [pc, #592]	@ (8007524 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 0320 	and.w	r3, r3, #32
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d009      	beq.n	80072f0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072dc:	4b91      	ldr	r3, [pc, #580]	@ (8007524 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	08db      	lsrs	r3, r3, #3
 80072e2:	f003 0303 	and.w	r3, r3, #3
 80072e6:	4a90      	ldr	r2, [pc, #576]	@ (8007528 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80072e8:	fa22 f303 	lsr.w	r3, r2, r3
 80072ec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80072ee:	e111      	b.n	8007514 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80072f0:	4b8d      	ldr	r3, [pc, #564]	@ (8007528 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80072f2:	61bb      	str	r3, [r7, #24]
      break;
 80072f4:	e10e      	b.n	8007514 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80072f6:	4b8d      	ldr	r3, [pc, #564]	@ (800752c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80072f8:	61bb      	str	r3, [r7, #24]
      break;
 80072fa:	e10b      	b.n	8007514 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80072fc:	4b8c      	ldr	r3, [pc, #560]	@ (8007530 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80072fe:	61bb      	str	r3, [r7, #24]
      break;
 8007300:	e108      	b.n	8007514 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007302:	4b88      	ldr	r3, [pc, #544]	@ (8007524 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007306:	f003 0303 	and.w	r3, r3, #3
 800730a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800730c:	4b85      	ldr	r3, [pc, #532]	@ (8007524 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800730e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007310:	091b      	lsrs	r3, r3, #4
 8007312:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007316:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007318:	4b82      	ldr	r3, [pc, #520]	@ (8007524 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800731a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800731c:	f003 0301 	and.w	r3, r3, #1
 8007320:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007322:	4b80      	ldr	r3, [pc, #512]	@ (8007524 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007324:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007326:	08db      	lsrs	r3, r3, #3
 8007328:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	fb02 f303 	mul.w	r3, r2, r3
 8007332:	ee07 3a90 	vmov	s15, r3
 8007336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800733a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	2b00      	cmp	r3, #0
 8007342:	f000 80e1 	beq.w	8007508 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	2b02      	cmp	r3, #2
 800734a:	f000 8083 	beq.w	8007454 <HAL_RCC_GetSysClockFreq+0x204>
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	2b02      	cmp	r3, #2
 8007352:	f200 80a1 	bhi.w	8007498 <HAL_RCC_GetSysClockFreq+0x248>
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d003      	beq.n	8007364 <HAL_RCC_GetSysClockFreq+0x114>
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	2b01      	cmp	r3, #1
 8007360:	d056      	beq.n	8007410 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007362:	e099      	b.n	8007498 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007364:	4b6f      	ldr	r3, [pc, #444]	@ (8007524 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 0320 	and.w	r3, r3, #32
 800736c:	2b00      	cmp	r3, #0
 800736e:	d02d      	beq.n	80073cc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007370:	4b6c      	ldr	r3, [pc, #432]	@ (8007524 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	08db      	lsrs	r3, r3, #3
 8007376:	f003 0303 	and.w	r3, r3, #3
 800737a:	4a6b      	ldr	r2, [pc, #428]	@ (8007528 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800737c:	fa22 f303 	lsr.w	r3, r2, r3
 8007380:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	ee07 3a90 	vmov	s15, r3
 8007388:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	ee07 3a90 	vmov	s15, r3
 8007392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800739a:	4b62      	ldr	r3, [pc, #392]	@ (8007524 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800739c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800739e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073a2:	ee07 3a90 	vmov	s15, r3
 80073a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80073ae:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007534 <HAL_RCC_GetSysClockFreq+0x2e4>
 80073b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073c6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80073ca:	e087      	b.n	80074dc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	ee07 3a90 	vmov	s15, r3
 80073d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073d6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007538 <HAL_RCC_GetSysClockFreq+0x2e8>
 80073da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073de:	4b51      	ldr	r3, [pc, #324]	@ (8007524 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073e6:	ee07 3a90 	vmov	s15, r3
 80073ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80073f2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007534 <HAL_RCC_GetSysClockFreq+0x2e4>
 80073f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800740a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800740e:	e065      	b.n	80074dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	ee07 3a90 	vmov	s15, r3
 8007416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800741a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800753c <HAL_RCC_GetSysClockFreq+0x2ec>
 800741e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007422:	4b40      	ldr	r3, [pc, #256]	@ (8007524 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800742a:	ee07 3a90 	vmov	s15, r3
 800742e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007432:	ed97 6a02 	vldr	s12, [r7, #8]
 8007436:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007534 <HAL_RCC_GetSysClockFreq+0x2e4>
 800743a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800743e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007442:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800744a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800744e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007452:	e043      	b.n	80074dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	ee07 3a90 	vmov	s15, r3
 800745a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800745e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007540 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007466:	4b2f      	ldr	r3, [pc, #188]	@ (8007524 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800746a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800746e:	ee07 3a90 	vmov	s15, r3
 8007472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007476:	ed97 6a02 	vldr	s12, [r7, #8]
 800747a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007534 <HAL_RCC_GetSysClockFreq+0x2e4>
 800747e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007486:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800748a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800748e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007492:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007496:	e021      	b.n	80074dc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	ee07 3a90 	vmov	s15, r3
 800749e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074a2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800753c <HAL_RCC_GetSysClockFreq+0x2ec>
 80074a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074aa:	4b1e      	ldr	r3, [pc, #120]	@ (8007524 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074b2:	ee07 3a90 	vmov	s15, r3
 80074b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80074be:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007534 <HAL_RCC_GetSysClockFreq+0x2e4>
 80074c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80074da:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80074dc:	4b11      	ldr	r3, [pc, #68]	@ (8007524 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074e0:	0a5b      	lsrs	r3, r3, #9
 80074e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074e6:	3301      	adds	r3, #1
 80074e8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	ee07 3a90 	vmov	s15, r3
 80074f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80074f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80074f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007500:	ee17 3a90 	vmov	r3, s15
 8007504:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007506:	e005      	b.n	8007514 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007508:	2300      	movs	r3, #0
 800750a:	61bb      	str	r3, [r7, #24]
      break;
 800750c:	e002      	b.n	8007514 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800750e:	4b07      	ldr	r3, [pc, #28]	@ (800752c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007510:	61bb      	str	r3, [r7, #24]
      break;
 8007512:	bf00      	nop
  }

  return sysclockfreq;
 8007514:	69bb      	ldr	r3, [r7, #24]
}
 8007516:	4618      	mov	r0, r3
 8007518:	3724      	adds	r7, #36	@ 0x24
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr
 8007522:	bf00      	nop
 8007524:	58024400 	.word	0x58024400
 8007528:	03d09000 	.word	0x03d09000
 800752c:	003d0900 	.word	0x003d0900
 8007530:	017d7840 	.word	0x017d7840
 8007534:	46000000 	.word	0x46000000
 8007538:	4c742400 	.word	0x4c742400
 800753c:	4a742400 	.word	0x4a742400
 8007540:	4bbebc20 	.word	0x4bbebc20

08007544 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800754a:	f7ff fe81 	bl	8007250 <HAL_RCC_GetSysClockFreq>
 800754e:	4602      	mov	r2, r0
 8007550:	4b10      	ldr	r3, [pc, #64]	@ (8007594 <HAL_RCC_GetHCLKFreq+0x50>)
 8007552:	699b      	ldr	r3, [r3, #24]
 8007554:	0a1b      	lsrs	r3, r3, #8
 8007556:	f003 030f 	and.w	r3, r3, #15
 800755a:	490f      	ldr	r1, [pc, #60]	@ (8007598 <HAL_RCC_GetHCLKFreq+0x54>)
 800755c:	5ccb      	ldrb	r3, [r1, r3]
 800755e:	f003 031f 	and.w	r3, r3, #31
 8007562:	fa22 f303 	lsr.w	r3, r2, r3
 8007566:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007568:	4b0a      	ldr	r3, [pc, #40]	@ (8007594 <HAL_RCC_GetHCLKFreq+0x50>)
 800756a:	699b      	ldr	r3, [r3, #24]
 800756c:	f003 030f 	and.w	r3, r3, #15
 8007570:	4a09      	ldr	r2, [pc, #36]	@ (8007598 <HAL_RCC_GetHCLKFreq+0x54>)
 8007572:	5cd3      	ldrb	r3, [r2, r3]
 8007574:	f003 031f 	and.w	r3, r3, #31
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	fa22 f303 	lsr.w	r3, r2, r3
 800757e:	4a07      	ldr	r2, [pc, #28]	@ (800759c <HAL_RCC_GetHCLKFreq+0x58>)
 8007580:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007582:	4a07      	ldr	r2, [pc, #28]	@ (80075a0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007588:	4b04      	ldr	r3, [pc, #16]	@ (800759c <HAL_RCC_GetHCLKFreq+0x58>)
 800758a:	681b      	ldr	r3, [r3, #0]
}
 800758c:	4618      	mov	r0, r3
 800758e:	3708      	adds	r7, #8
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	58024400 	.word	0x58024400
 8007598:	0801284c 	.word	0x0801284c
 800759c:	24000004 	.word	0x24000004
 80075a0:	24000000 	.word	0x24000000

080075a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80075a8:	f7ff ffcc 	bl	8007544 <HAL_RCC_GetHCLKFreq>
 80075ac:	4602      	mov	r2, r0
 80075ae:	4b06      	ldr	r3, [pc, #24]	@ (80075c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80075b0:	69db      	ldr	r3, [r3, #28]
 80075b2:	091b      	lsrs	r3, r3, #4
 80075b4:	f003 0307 	and.w	r3, r3, #7
 80075b8:	4904      	ldr	r1, [pc, #16]	@ (80075cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80075ba:	5ccb      	ldrb	r3, [r1, r3]
 80075bc:	f003 031f 	and.w	r3, r3, #31
 80075c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	58024400 	.word	0x58024400
 80075cc:	0801284c 	.word	0x0801284c

080075d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80075d4:	f7ff ffb6 	bl	8007544 <HAL_RCC_GetHCLKFreq>
 80075d8:	4602      	mov	r2, r0
 80075da:	4b06      	ldr	r3, [pc, #24]	@ (80075f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80075dc:	69db      	ldr	r3, [r3, #28]
 80075de:	0a1b      	lsrs	r3, r3, #8
 80075e0:	f003 0307 	and.w	r3, r3, #7
 80075e4:	4904      	ldr	r1, [pc, #16]	@ (80075f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80075e6:	5ccb      	ldrb	r3, [r1, r3]
 80075e8:	f003 031f 	and.w	r3, r3, #31
 80075ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	58024400 	.word	0x58024400
 80075f8:	0801284c 	.word	0x0801284c

080075fc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80075fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007600:	b0ca      	sub	sp, #296	@ 0x128
 8007602:	af00      	add	r7, sp, #0
 8007604:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007608:	2300      	movs	r3, #0
 800760a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800760e:	2300      	movs	r3, #0
 8007610:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007620:	2500      	movs	r5, #0
 8007622:	ea54 0305 	orrs.w	r3, r4, r5
 8007626:	d049      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800762c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800762e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007632:	d02f      	beq.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007634:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007638:	d828      	bhi.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800763a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800763e:	d01a      	beq.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007640:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007644:	d822      	bhi.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007646:	2b00      	cmp	r3, #0
 8007648:	d003      	beq.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800764a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800764e:	d007      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007650:	e01c      	b.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007652:	4bb8      	ldr	r3, [pc, #736]	@ (8007934 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007656:	4ab7      	ldr	r2, [pc, #732]	@ (8007934 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007658:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800765c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800765e:	e01a      	b.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007664:	3308      	adds	r3, #8
 8007666:	2102      	movs	r1, #2
 8007668:	4618      	mov	r0, r3
 800766a:	f001 fc8f 	bl	8008f8c <RCCEx_PLL2_Config>
 800766e:	4603      	mov	r3, r0
 8007670:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007674:	e00f      	b.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800767a:	3328      	adds	r3, #40	@ 0x28
 800767c:	2102      	movs	r1, #2
 800767e:	4618      	mov	r0, r3
 8007680:	f001 fd36 	bl	80090f0 <RCCEx_PLL3_Config>
 8007684:	4603      	mov	r3, r0
 8007686:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800768a:	e004      	b.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007692:	e000      	b.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007694:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007696:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800769a:	2b00      	cmp	r3, #0
 800769c:	d10a      	bne.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800769e:	4ba5      	ldr	r3, [pc, #660]	@ (8007934 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80076a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076a2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80076a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076ac:	4aa1      	ldr	r2, [pc, #644]	@ (8007934 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80076ae:	430b      	orrs	r3, r1
 80076b0:	6513      	str	r3, [r2, #80]	@ 0x50
 80076b2:	e003      	b.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80076bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80076c8:	f04f 0900 	mov.w	r9, #0
 80076cc:	ea58 0309 	orrs.w	r3, r8, r9
 80076d0:	d047      	beq.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80076d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076d8:	2b04      	cmp	r3, #4
 80076da:	d82a      	bhi.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80076dc:	a201      	add	r2, pc, #4	@ (adr r2, 80076e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80076de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e2:	bf00      	nop
 80076e4:	080076f9 	.word	0x080076f9
 80076e8:	08007707 	.word	0x08007707
 80076ec:	0800771d 	.word	0x0800771d
 80076f0:	0800773b 	.word	0x0800773b
 80076f4:	0800773b 	.word	0x0800773b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076f8:	4b8e      	ldr	r3, [pc, #568]	@ (8007934 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80076fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076fc:	4a8d      	ldr	r2, [pc, #564]	@ (8007934 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80076fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007702:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007704:	e01a      	b.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800770a:	3308      	adds	r3, #8
 800770c:	2100      	movs	r1, #0
 800770e:	4618      	mov	r0, r3
 8007710:	f001 fc3c 	bl	8008f8c <RCCEx_PLL2_Config>
 8007714:	4603      	mov	r3, r0
 8007716:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800771a:	e00f      	b.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800771c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007720:	3328      	adds	r3, #40	@ 0x28
 8007722:	2100      	movs	r1, #0
 8007724:	4618      	mov	r0, r3
 8007726:	f001 fce3 	bl	80090f0 <RCCEx_PLL3_Config>
 800772a:	4603      	mov	r3, r0
 800772c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007730:	e004      	b.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007738:	e000      	b.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800773a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800773c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007740:	2b00      	cmp	r3, #0
 8007742:	d10a      	bne.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007744:	4b7b      	ldr	r3, [pc, #492]	@ (8007934 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007746:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007748:	f023 0107 	bic.w	r1, r3, #7
 800774c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007752:	4a78      	ldr	r2, [pc, #480]	@ (8007934 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007754:	430b      	orrs	r3, r1
 8007756:	6513      	str	r3, [r2, #80]	@ 0x50
 8007758:	e003      	b.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800775a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800775e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800776a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800776e:	f04f 0b00 	mov.w	fp, #0
 8007772:	ea5a 030b 	orrs.w	r3, sl, fp
 8007776:	d04c      	beq.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800777c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800777e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007782:	d030      	beq.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007784:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007788:	d829      	bhi.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800778a:	2bc0      	cmp	r3, #192	@ 0xc0
 800778c:	d02d      	beq.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800778e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007790:	d825      	bhi.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007792:	2b80      	cmp	r3, #128	@ 0x80
 8007794:	d018      	beq.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007796:	2b80      	cmp	r3, #128	@ 0x80
 8007798:	d821      	bhi.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800779a:	2b00      	cmp	r3, #0
 800779c:	d002      	beq.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800779e:	2b40      	cmp	r3, #64	@ 0x40
 80077a0:	d007      	beq.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80077a2:	e01c      	b.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077a4:	4b63      	ldr	r3, [pc, #396]	@ (8007934 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077a8:	4a62      	ldr	r2, [pc, #392]	@ (8007934 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80077b0:	e01c      	b.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077b6:	3308      	adds	r3, #8
 80077b8:	2100      	movs	r1, #0
 80077ba:	4618      	mov	r0, r3
 80077bc:	f001 fbe6 	bl	8008f8c <RCCEx_PLL2_Config>
 80077c0:	4603      	mov	r3, r0
 80077c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80077c6:	e011      	b.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80077c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077cc:	3328      	adds	r3, #40	@ 0x28
 80077ce:	2100      	movs	r1, #0
 80077d0:	4618      	mov	r0, r3
 80077d2:	f001 fc8d 	bl	80090f0 <RCCEx_PLL3_Config>
 80077d6:	4603      	mov	r3, r0
 80077d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80077dc:	e006      	b.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077e4:	e002      	b.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80077e6:	bf00      	nop
 80077e8:	e000      	b.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80077ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d10a      	bne.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80077f4:	4b4f      	ldr	r3, [pc, #316]	@ (8007934 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077f8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80077fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007800:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007802:	4a4c      	ldr	r2, [pc, #304]	@ (8007934 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007804:	430b      	orrs	r3, r1
 8007806:	6513      	str	r3, [r2, #80]	@ 0x50
 8007808:	e003      	b.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800780a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800780e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800781e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007822:	2300      	movs	r3, #0
 8007824:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007828:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800782c:	460b      	mov	r3, r1
 800782e:	4313      	orrs	r3, r2
 8007830:	d053      	beq.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007836:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800783a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800783e:	d035      	beq.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007840:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007844:	d82e      	bhi.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007846:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800784a:	d031      	beq.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800784c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007850:	d828      	bhi.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007852:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007856:	d01a      	beq.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007858:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800785c:	d822      	bhi.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800785e:	2b00      	cmp	r3, #0
 8007860:	d003      	beq.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007862:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007866:	d007      	beq.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007868:	e01c      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800786a:	4b32      	ldr	r3, [pc, #200]	@ (8007934 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800786c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800786e:	4a31      	ldr	r2, [pc, #196]	@ (8007934 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007870:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007874:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007876:	e01c      	b.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800787c:	3308      	adds	r3, #8
 800787e:	2100      	movs	r1, #0
 8007880:	4618      	mov	r0, r3
 8007882:	f001 fb83 	bl	8008f8c <RCCEx_PLL2_Config>
 8007886:	4603      	mov	r3, r0
 8007888:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800788c:	e011      	b.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800788e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007892:	3328      	adds	r3, #40	@ 0x28
 8007894:	2100      	movs	r1, #0
 8007896:	4618      	mov	r0, r3
 8007898:	f001 fc2a 	bl	80090f0 <RCCEx_PLL3_Config>
 800789c:	4603      	mov	r3, r0
 800789e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80078a2:	e006      	b.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078aa:	e002      	b.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80078ac:	bf00      	nop
 80078ae:	e000      	b.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80078b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d10b      	bne.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80078ba:	4b1e      	ldr	r3, [pc, #120]	@ (8007934 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078be:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80078c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80078ca:	4a1a      	ldr	r2, [pc, #104]	@ (8007934 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078cc:	430b      	orrs	r3, r1
 80078ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80078d0:	e003      	b.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80078da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80078e6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80078ea:	2300      	movs	r3, #0
 80078ec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80078f0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80078f4:	460b      	mov	r3, r1
 80078f6:	4313      	orrs	r3, r2
 80078f8:	d056      	beq.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80078fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007902:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007906:	d038      	beq.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007908:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800790c:	d831      	bhi.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800790e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007912:	d034      	beq.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007914:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007918:	d82b      	bhi.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800791a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800791e:	d01d      	beq.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007920:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007924:	d825      	bhi.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007926:	2b00      	cmp	r3, #0
 8007928:	d006      	beq.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800792a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800792e:	d00a      	beq.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007930:	e01f      	b.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007932:	bf00      	nop
 8007934:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007938:	4ba2      	ldr	r3, [pc, #648]	@ (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800793a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800793c:	4aa1      	ldr	r2, [pc, #644]	@ (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800793e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007942:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007944:	e01c      	b.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800794a:	3308      	adds	r3, #8
 800794c:	2100      	movs	r1, #0
 800794e:	4618      	mov	r0, r3
 8007950:	f001 fb1c 	bl	8008f8c <RCCEx_PLL2_Config>
 8007954:	4603      	mov	r3, r0
 8007956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800795a:	e011      	b.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800795c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007960:	3328      	adds	r3, #40	@ 0x28
 8007962:	2100      	movs	r1, #0
 8007964:	4618      	mov	r0, r3
 8007966:	f001 fbc3 	bl	80090f0 <RCCEx_PLL3_Config>
 800796a:	4603      	mov	r3, r0
 800796c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007970:	e006      	b.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007978:	e002      	b.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800797a:	bf00      	nop
 800797c:	e000      	b.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800797e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007980:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007984:	2b00      	cmp	r3, #0
 8007986:	d10b      	bne.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007988:	4b8e      	ldr	r3, [pc, #568]	@ (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800798a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800798c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007994:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007998:	4a8a      	ldr	r2, [pc, #552]	@ (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800799a:	430b      	orrs	r3, r1
 800799c:	6593      	str	r3, [r2, #88]	@ 0x58
 800799e:	e003      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80079a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80079b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80079b8:	2300      	movs	r3, #0
 80079ba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80079be:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80079c2:	460b      	mov	r3, r1
 80079c4:	4313      	orrs	r3, r2
 80079c6:	d03a      	beq.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80079c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079ce:	2b30      	cmp	r3, #48	@ 0x30
 80079d0:	d01f      	beq.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80079d2:	2b30      	cmp	r3, #48	@ 0x30
 80079d4:	d819      	bhi.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80079d6:	2b20      	cmp	r3, #32
 80079d8:	d00c      	beq.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80079da:	2b20      	cmp	r3, #32
 80079dc:	d815      	bhi.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d019      	beq.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80079e2:	2b10      	cmp	r3, #16
 80079e4:	d111      	bne.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079e6:	4b77      	ldr	r3, [pc, #476]	@ (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80079e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ea:	4a76      	ldr	r2, [pc, #472]	@ (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80079ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80079f2:	e011      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80079f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079f8:	3308      	adds	r3, #8
 80079fa:	2102      	movs	r1, #2
 80079fc:	4618      	mov	r0, r3
 80079fe:	f001 fac5 	bl	8008f8c <RCCEx_PLL2_Config>
 8007a02:	4603      	mov	r3, r0
 8007a04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007a08:	e006      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a10:	e002      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007a12:	bf00      	nop
 8007a14:	e000      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007a16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d10a      	bne.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007a20:	4b68      	ldr	r3, [pc, #416]	@ (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a24:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a2e:	4a65      	ldr	r2, [pc, #404]	@ (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a30:	430b      	orrs	r3, r1
 8007a32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007a34:	e003      	b.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a46:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007a4a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007a4e:	2300      	movs	r3, #0
 8007a50:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007a54:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007a58:	460b      	mov	r3, r1
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	d051      	beq.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a68:	d035      	beq.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007a6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a6e:	d82e      	bhi.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007a70:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007a74:	d031      	beq.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007a76:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007a7a:	d828      	bhi.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007a7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a80:	d01a      	beq.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007a82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a86:	d822      	bhi.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d003      	beq.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007a8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a90:	d007      	beq.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007a92:	e01c      	b.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a94:	4b4b      	ldr	r3, [pc, #300]	@ (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a98:	4a4a      	ldr	r2, [pc, #296]	@ (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007aa0:	e01c      	b.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aa6:	3308      	adds	r3, #8
 8007aa8:	2100      	movs	r1, #0
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f001 fa6e 	bl	8008f8c <RCCEx_PLL2_Config>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007ab6:	e011      	b.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007abc:	3328      	adds	r3, #40	@ 0x28
 8007abe:	2100      	movs	r1, #0
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f001 fb15 	bl	80090f0 <RCCEx_PLL3_Config>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007acc:	e006      	b.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ad4:	e002      	b.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007ad6:	bf00      	nop
 8007ad8:	e000      	b.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007ada:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007adc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d10a      	bne.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007ae4:	4b37      	ldr	r3, [pc, #220]	@ (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ae6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ae8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007af0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007af2:	4a34      	ldr	r2, [pc, #208]	@ (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007af4:	430b      	orrs	r3, r1
 8007af6:	6513      	str	r3, [r2, #80]	@ 0x50
 8007af8:	e003      	b.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007afa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007afe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007b0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007b12:	2300      	movs	r3, #0
 8007b14:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007b18:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	d056      	beq.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007b2c:	d033      	beq.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007b2e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007b32:	d82c      	bhi.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007b34:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007b38:	d02f      	beq.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007b3a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007b3e:	d826      	bhi.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007b40:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007b44:	d02b      	beq.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007b46:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007b4a:	d820      	bhi.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007b4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b50:	d012      	beq.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007b52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b56:	d81a      	bhi.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d022      	beq.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007b5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b60:	d115      	bne.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b66:	3308      	adds	r3, #8
 8007b68:	2101      	movs	r1, #1
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f001 fa0e 	bl	8008f8c <RCCEx_PLL2_Config>
 8007b70:	4603      	mov	r3, r0
 8007b72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007b76:	e015      	b.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b7c:	3328      	adds	r3, #40	@ 0x28
 8007b7e:	2101      	movs	r1, #1
 8007b80:	4618      	mov	r0, r3
 8007b82:	f001 fab5 	bl	80090f0 <RCCEx_PLL3_Config>
 8007b86:	4603      	mov	r3, r0
 8007b88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007b8c:	e00a      	b.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b94:	e006      	b.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007b96:	bf00      	nop
 8007b98:	e004      	b.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007b9a:	bf00      	nop
 8007b9c:	e002      	b.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007b9e:	bf00      	nop
 8007ba0:	e000      	b.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007ba2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ba4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d10d      	bne.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007bac:	4b05      	ldr	r3, [pc, #20]	@ (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007bae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bb0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bba:	4a02      	ldr	r2, [pc, #8]	@ (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007bbc:	430b      	orrs	r3, r1
 8007bbe:	6513      	str	r3, [r2, #80]	@ 0x50
 8007bc0:	e006      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007bc2:	bf00      	nop
 8007bc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bcc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007bdc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007be0:	2300      	movs	r3, #0
 8007be2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007be6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007bea:	460b      	mov	r3, r1
 8007bec:	4313      	orrs	r3, r2
 8007bee:	d055      	beq.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bf4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007bf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007bfc:	d033      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007bfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c02:	d82c      	bhi.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007c04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c08:	d02f      	beq.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c0e:	d826      	bhi.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007c10:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007c14:	d02b      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007c16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007c1a:	d820      	bhi.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007c1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c20:	d012      	beq.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007c22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c26:	d81a      	bhi.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d022      	beq.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007c2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c30:	d115      	bne.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c36:	3308      	adds	r3, #8
 8007c38:	2101      	movs	r1, #1
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f001 f9a6 	bl	8008f8c <RCCEx_PLL2_Config>
 8007c40:	4603      	mov	r3, r0
 8007c42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007c46:	e015      	b.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c4c:	3328      	adds	r3, #40	@ 0x28
 8007c4e:	2101      	movs	r1, #1
 8007c50:	4618      	mov	r0, r3
 8007c52:	f001 fa4d 	bl	80090f0 <RCCEx_PLL3_Config>
 8007c56:	4603      	mov	r3, r0
 8007c58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007c5c:	e00a      	b.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c64:	e006      	b.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007c66:	bf00      	nop
 8007c68:	e004      	b.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007c6a:	bf00      	nop
 8007c6c:	e002      	b.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007c6e:	bf00      	nop
 8007c70:	e000      	b.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007c72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d10b      	bne.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007c7c:	4ba3      	ldr	r3, [pc, #652]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c80:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007c8c:	4a9f      	ldr	r2, [pc, #636]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c8e:	430b      	orrs	r3, r1
 8007c90:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c92:	e003      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007ca8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007cac:	2300      	movs	r3, #0
 8007cae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007cb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	d037      	beq.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cc6:	d00e      	beq.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007cc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ccc:	d816      	bhi.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d018      	beq.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007cd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007cd6:	d111      	bne.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cd8:	4b8c      	ldr	r3, [pc, #560]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cdc:	4a8b      	ldr	r2, [pc, #556]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ce2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007ce4:	e00f      	b.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cea:	3308      	adds	r3, #8
 8007cec:	2101      	movs	r1, #1
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f001 f94c 	bl	8008f8c <RCCEx_PLL2_Config>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007cfa:	e004      	b.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d02:	e000      	b.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007d04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d10a      	bne.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007d0e:	4b7f      	ldr	r3, [pc, #508]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d12:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d1c:	4a7b      	ldr	r2, [pc, #492]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d1e:	430b      	orrs	r3, r1
 8007d20:	6513      	str	r3, [r2, #80]	@ 0x50
 8007d22:	e003      	b.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d34:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007d38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007d42:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007d46:	460b      	mov	r3, r1
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	d039      	beq.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d52:	2b03      	cmp	r3, #3
 8007d54:	d81c      	bhi.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007d56:	a201      	add	r2, pc, #4	@ (adr r2, 8007d5c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d5c:	08007d99 	.word	0x08007d99
 8007d60:	08007d6d 	.word	0x08007d6d
 8007d64:	08007d7b 	.word	0x08007d7b
 8007d68:	08007d99 	.word	0x08007d99
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d6c:	4b67      	ldr	r3, [pc, #412]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d70:	4a66      	ldr	r2, [pc, #408]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007d78:	e00f      	b.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d7e:	3308      	adds	r3, #8
 8007d80:	2102      	movs	r1, #2
 8007d82:	4618      	mov	r0, r3
 8007d84:	f001 f902 	bl	8008f8c <RCCEx_PLL2_Config>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007d8e:	e004      	b.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d96:	e000      	b.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007d98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d10a      	bne.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007da2:	4b5a      	ldr	r3, [pc, #360]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007da6:	f023 0103 	bic.w	r1, r3, #3
 8007daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007db0:	4a56      	ldr	r2, [pc, #344]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007db2:	430b      	orrs	r3, r1
 8007db4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007db6:	e003      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007db8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007dcc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007dd6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007dda:	460b      	mov	r3, r1
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	f000 809f 	beq.w	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007de2:	4b4b      	ldr	r3, [pc, #300]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a4a      	ldr	r2, [pc, #296]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007de8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007dec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007dee:	f7fa fc5d 	bl	80026ac <HAL_GetTick>
 8007df2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007df6:	e00b      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007df8:	f7fa fc58 	bl	80026ac <HAL_GetTick>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007e02:	1ad3      	subs	r3, r2, r3
 8007e04:	2b64      	cmp	r3, #100	@ 0x64
 8007e06:	d903      	bls.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007e08:	2303      	movs	r3, #3
 8007e0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e0e:	e005      	b.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e10:	4b3f      	ldr	r3, [pc, #252]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d0ed      	beq.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007e1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d179      	bne.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007e24:	4b39      	ldr	r3, [pc, #228]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e26:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e2c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007e30:	4053      	eors	r3, r2
 8007e32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d015      	beq.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007e3a:	4b34      	ldr	r3, [pc, #208]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e42:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007e46:	4b31      	ldr	r3, [pc, #196]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e4a:	4a30      	ldr	r2, [pc, #192]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e50:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007e52:	4b2e      	ldr	r3, [pc, #184]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e56:	4a2d      	ldr	r2, [pc, #180]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e5c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007e5e:	4a2b      	ldr	r2, [pc, #172]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007e64:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007e6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e72:	d118      	bne.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e74:	f7fa fc1a 	bl	80026ac <HAL_GetTick>
 8007e78:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007e7c:	e00d      	b.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e7e:	f7fa fc15 	bl	80026ac <HAL_GetTick>
 8007e82:	4602      	mov	r2, r0
 8007e84:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007e88:	1ad2      	subs	r2, r2, r3
 8007e8a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d903      	bls.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007e92:	2303      	movs	r3, #3
 8007e94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007e98:	e005      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007e9a:	4b1c      	ldr	r3, [pc, #112]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e9e:	f003 0302 	and.w	r3, r3, #2
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d0eb      	beq.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d129      	bne.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eb2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007eb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007eba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ebe:	d10e      	bne.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007ec0:	4b12      	ldr	r3, [pc, #72]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ecc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007ed0:	091a      	lsrs	r2, r3, #4
 8007ed2:	4b10      	ldr	r3, [pc, #64]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007ed4:	4013      	ands	r3, r2
 8007ed6:	4a0d      	ldr	r2, [pc, #52]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ed8:	430b      	orrs	r3, r1
 8007eda:	6113      	str	r3, [r2, #16]
 8007edc:	e005      	b.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007ede:	4b0b      	ldr	r3, [pc, #44]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ee4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007ee8:	6113      	str	r3, [r2, #16]
 8007eea:	4b08      	ldr	r3, [pc, #32]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007eec:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ef2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007ef6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007efa:	4a04      	ldr	r2, [pc, #16]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007efc:	430b      	orrs	r3, r1
 8007efe:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f00:	e00e      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007f02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007f0a:	e009      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007f0c:	58024400 	.word	0x58024400
 8007f10:	58024800 	.word	0x58024800
 8007f14:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f28:	f002 0301 	and.w	r3, r2, #1
 8007f2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007f30:	2300      	movs	r3, #0
 8007f32:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007f36:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	f000 8089 	beq.w	8008054 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f48:	2b28      	cmp	r3, #40	@ 0x28
 8007f4a:	d86b      	bhi.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8007f54 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f52:	bf00      	nop
 8007f54:	0800802d 	.word	0x0800802d
 8007f58:	08008025 	.word	0x08008025
 8007f5c:	08008025 	.word	0x08008025
 8007f60:	08008025 	.word	0x08008025
 8007f64:	08008025 	.word	0x08008025
 8007f68:	08008025 	.word	0x08008025
 8007f6c:	08008025 	.word	0x08008025
 8007f70:	08008025 	.word	0x08008025
 8007f74:	08007ff9 	.word	0x08007ff9
 8007f78:	08008025 	.word	0x08008025
 8007f7c:	08008025 	.word	0x08008025
 8007f80:	08008025 	.word	0x08008025
 8007f84:	08008025 	.word	0x08008025
 8007f88:	08008025 	.word	0x08008025
 8007f8c:	08008025 	.word	0x08008025
 8007f90:	08008025 	.word	0x08008025
 8007f94:	0800800f 	.word	0x0800800f
 8007f98:	08008025 	.word	0x08008025
 8007f9c:	08008025 	.word	0x08008025
 8007fa0:	08008025 	.word	0x08008025
 8007fa4:	08008025 	.word	0x08008025
 8007fa8:	08008025 	.word	0x08008025
 8007fac:	08008025 	.word	0x08008025
 8007fb0:	08008025 	.word	0x08008025
 8007fb4:	0800802d 	.word	0x0800802d
 8007fb8:	08008025 	.word	0x08008025
 8007fbc:	08008025 	.word	0x08008025
 8007fc0:	08008025 	.word	0x08008025
 8007fc4:	08008025 	.word	0x08008025
 8007fc8:	08008025 	.word	0x08008025
 8007fcc:	08008025 	.word	0x08008025
 8007fd0:	08008025 	.word	0x08008025
 8007fd4:	0800802d 	.word	0x0800802d
 8007fd8:	08008025 	.word	0x08008025
 8007fdc:	08008025 	.word	0x08008025
 8007fe0:	08008025 	.word	0x08008025
 8007fe4:	08008025 	.word	0x08008025
 8007fe8:	08008025 	.word	0x08008025
 8007fec:	08008025 	.word	0x08008025
 8007ff0:	08008025 	.word	0x08008025
 8007ff4:	0800802d 	.word	0x0800802d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ffc:	3308      	adds	r3, #8
 8007ffe:	2101      	movs	r1, #1
 8008000:	4618      	mov	r0, r3
 8008002:	f000 ffc3 	bl	8008f8c <RCCEx_PLL2_Config>
 8008006:	4603      	mov	r3, r0
 8008008:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800800c:	e00f      	b.n	800802e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800800e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008012:	3328      	adds	r3, #40	@ 0x28
 8008014:	2101      	movs	r1, #1
 8008016:	4618      	mov	r0, r3
 8008018:	f001 f86a 	bl	80090f0 <RCCEx_PLL3_Config>
 800801c:	4603      	mov	r3, r0
 800801e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008022:	e004      	b.n	800802e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800802a:	e000      	b.n	800802e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800802c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800802e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008032:	2b00      	cmp	r3, #0
 8008034:	d10a      	bne.n	800804c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008036:	4bbf      	ldr	r3, [pc, #764]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800803a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800803e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008042:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008044:	4abb      	ldr	r2, [pc, #748]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008046:	430b      	orrs	r3, r1
 8008048:	6553      	str	r3, [r2, #84]	@ 0x54
 800804a:	e003      	b.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800804c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008050:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805c:	f002 0302 	and.w	r3, r2, #2
 8008060:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008064:	2300      	movs	r3, #0
 8008066:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800806a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800806e:	460b      	mov	r3, r1
 8008070:	4313      	orrs	r3, r2
 8008072:	d041      	beq.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008078:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800807a:	2b05      	cmp	r3, #5
 800807c:	d824      	bhi.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800807e:	a201      	add	r2, pc, #4	@ (adr r2, 8008084 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008084:	080080d1 	.word	0x080080d1
 8008088:	0800809d 	.word	0x0800809d
 800808c:	080080b3 	.word	0x080080b3
 8008090:	080080d1 	.word	0x080080d1
 8008094:	080080d1 	.word	0x080080d1
 8008098:	080080d1 	.word	0x080080d1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800809c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080a0:	3308      	adds	r3, #8
 80080a2:	2101      	movs	r1, #1
 80080a4:	4618      	mov	r0, r3
 80080a6:	f000 ff71 	bl	8008f8c <RCCEx_PLL2_Config>
 80080aa:	4603      	mov	r3, r0
 80080ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80080b0:	e00f      	b.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80080b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080b6:	3328      	adds	r3, #40	@ 0x28
 80080b8:	2101      	movs	r1, #1
 80080ba:	4618      	mov	r0, r3
 80080bc:	f001 f818 	bl	80090f0 <RCCEx_PLL3_Config>
 80080c0:	4603      	mov	r3, r0
 80080c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80080c6:	e004      	b.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080ce:	e000      	b.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80080d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d10a      	bne.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80080da:	4b96      	ldr	r3, [pc, #600]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80080dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080de:	f023 0107 	bic.w	r1, r3, #7
 80080e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80080e8:	4a92      	ldr	r2, [pc, #584]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80080ea:	430b      	orrs	r3, r1
 80080ec:	6553      	str	r3, [r2, #84]	@ 0x54
 80080ee:	e003      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80080f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008100:	f002 0304 	and.w	r3, r2, #4
 8008104:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008108:	2300      	movs	r3, #0
 800810a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800810e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008112:	460b      	mov	r3, r1
 8008114:	4313      	orrs	r3, r2
 8008116:	d044      	beq.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800811c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008120:	2b05      	cmp	r3, #5
 8008122:	d825      	bhi.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008124:	a201      	add	r2, pc, #4	@ (adr r2, 800812c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812a:	bf00      	nop
 800812c:	08008179 	.word	0x08008179
 8008130:	08008145 	.word	0x08008145
 8008134:	0800815b 	.word	0x0800815b
 8008138:	08008179 	.word	0x08008179
 800813c:	08008179 	.word	0x08008179
 8008140:	08008179 	.word	0x08008179
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008148:	3308      	adds	r3, #8
 800814a:	2101      	movs	r1, #1
 800814c:	4618      	mov	r0, r3
 800814e:	f000 ff1d 	bl	8008f8c <RCCEx_PLL2_Config>
 8008152:	4603      	mov	r3, r0
 8008154:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008158:	e00f      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800815a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800815e:	3328      	adds	r3, #40	@ 0x28
 8008160:	2101      	movs	r1, #1
 8008162:	4618      	mov	r0, r3
 8008164:	f000 ffc4 	bl	80090f0 <RCCEx_PLL3_Config>
 8008168:	4603      	mov	r3, r0
 800816a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800816e:	e004      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008170:	2301      	movs	r3, #1
 8008172:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008176:	e000      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008178:	bf00      	nop
    }

    if (ret == HAL_OK)
 800817a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800817e:	2b00      	cmp	r3, #0
 8008180:	d10b      	bne.n	800819a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008182:	4b6c      	ldr	r3, [pc, #432]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008186:	f023 0107 	bic.w	r1, r3, #7
 800818a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800818e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008192:	4a68      	ldr	r2, [pc, #416]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008194:	430b      	orrs	r3, r1
 8008196:	6593      	str	r3, [r2, #88]	@ 0x58
 8008198:	e003      	b.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800819a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800819e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80081a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081aa:	f002 0320 	and.w	r3, r2, #32
 80081ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80081b2:	2300      	movs	r3, #0
 80081b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80081b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80081bc:	460b      	mov	r3, r1
 80081be:	4313      	orrs	r3, r2
 80081c0:	d055      	beq.n	800826e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80081c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80081ce:	d033      	beq.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80081d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80081d4:	d82c      	bhi.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80081d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081da:	d02f      	beq.n	800823c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80081dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081e0:	d826      	bhi.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80081e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80081e6:	d02b      	beq.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80081e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80081ec:	d820      	bhi.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80081ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081f2:	d012      	beq.n	800821a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80081f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081f8:	d81a      	bhi.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d022      	beq.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80081fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008202:	d115      	bne.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008208:	3308      	adds	r3, #8
 800820a:	2100      	movs	r1, #0
 800820c:	4618      	mov	r0, r3
 800820e:	f000 febd 	bl	8008f8c <RCCEx_PLL2_Config>
 8008212:	4603      	mov	r3, r0
 8008214:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008218:	e015      	b.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800821a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800821e:	3328      	adds	r3, #40	@ 0x28
 8008220:	2102      	movs	r1, #2
 8008222:	4618      	mov	r0, r3
 8008224:	f000 ff64 	bl	80090f0 <RCCEx_PLL3_Config>
 8008228:	4603      	mov	r3, r0
 800822a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800822e:	e00a      	b.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008230:	2301      	movs	r3, #1
 8008232:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008236:	e006      	b.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008238:	bf00      	nop
 800823a:	e004      	b.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800823c:	bf00      	nop
 800823e:	e002      	b.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008240:	bf00      	nop
 8008242:	e000      	b.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008244:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008246:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800824a:	2b00      	cmp	r3, #0
 800824c:	d10b      	bne.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800824e:	4b39      	ldr	r3, [pc, #228]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008252:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800825a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800825e:	4a35      	ldr	r2, [pc, #212]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008260:	430b      	orrs	r3, r1
 8008262:	6553      	str	r3, [r2, #84]	@ 0x54
 8008264:	e003      	b.n	800826e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008266:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800826a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800826e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008276:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800827a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800827e:	2300      	movs	r3, #0
 8008280:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008284:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008288:	460b      	mov	r3, r1
 800828a:	4313      	orrs	r3, r2
 800828c:	d058      	beq.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800828e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008292:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008296:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800829a:	d033      	beq.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800829c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80082a0:	d82c      	bhi.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80082a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082a6:	d02f      	beq.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80082a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082ac:	d826      	bhi.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80082ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80082b2:	d02b      	beq.n	800830c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80082b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80082b8:	d820      	bhi.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80082ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80082be:	d012      	beq.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80082c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80082c4:	d81a      	bhi.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d022      	beq.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80082ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082ce:	d115      	bne.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082d4:	3308      	adds	r3, #8
 80082d6:	2100      	movs	r1, #0
 80082d8:	4618      	mov	r0, r3
 80082da:	f000 fe57 	bl	8008f8c <RCCEx_PLL2_Config>
 80082de:	4603      	mov	r3, r0
 80082e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80082e4:	e015      	b.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80082e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ea:	3328      	adds	r3, #40	@ 0x28
 80082ec:	2102      	movs	r1, #2
 80082ee:	4618      	mov	r0, r3
 80082f0:	f000 fefe 	bl	80090f0 <RCCEx_PLL3_Config>
 80082f4:	4603      	mov	r3, r0
 80082f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80082fa:	e00a      	b.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082fc:	2301      	movs	r3, #1
 80082fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008302:	e006      	b.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008304:	bf00      	nop
 8008306:	e004      	b.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008308:	bf00      	nop
 800830a:	e002      	b.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800830c:	bf00      	nop
 800830e:	e000      	b.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008310:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008312:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008316:	2b00      	cmp	r3, #0
 8008318:	d10e      	bne.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800831a:	4b06      	ldr	r3, [pc, #24]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800831c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800831e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008326:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800832a:	4a02      	ldr	r2, [pc, #8]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800832c:	430b      	orrs	r3, r1
 800832e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008330:	e006      	b.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008332:	bf00      	nop
 8008334:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008338:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800833c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008348:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800834c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008350:	2300      	movs	r3, #0
 8008352:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008356:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800835a:	460b      	mov	r3, r1
 800835c:	4313      	orrs	r3, r2
 800835e:	d055      	beq.n	800840c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008364:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008368:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800836c:	d033      	beq.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800836e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008372:	d82c      	bhi.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008374:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008378:	d02f      	beq.n	80083da <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800837a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800837e:	d826      	bhi.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008380:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008384:	d02b      	beq.n	80083de <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008386:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800838a:	d820      	bhi.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800838c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008390:	d012      	beq.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008392:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008396:	d81a      	bhi.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008398:	2b00      	cmp	r3, #0
 800839a:	d022      	beq.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800839c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083a0:	d115      	bne.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80083a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083a6:	3308      	adds	r3, #8
 80083a8:	2100      	movs	r1, #0
 80083aa:	4618      	mov	r0, r3
 80083ac:	f000 fdee 	bl	8008f8c <RCCEx_PLL2_Config>
 80083b0:	4603      	mov	r3, r0
 80083b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80083b6:	e015      	b.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80083b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083bc:	3328      	adds	r3, #40	@ 0x28
 80083be:	2102      	movs	r1, #2
 80083c0:	4618      	mov	r0, r3
 80083c2:	f000 fe95 	bl	80090f0 <RCCEx_PLL3_Config>
 80083c6:	4603      	mov	r3, r0
 80083c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80083cc:	e00a      	b.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80083d4:	e006      	b.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80083d6:	bf00      	nop
 80083d8:	e004      	b.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80083da:	bf00      	nop
 80083dc:	e002      	b.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80083de:	bf00      	nop
 80083e0:	e000      	b.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80083e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d10b      	bne.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80083ec:	4ba1      	ldr	r3, [pc, #644]	@ (8008674 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083f0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80083f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80083fc:	4a9d      	ldr	r2, [pc, #628]	@ (8008674 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083fe:	430b      	orrs	r3, r1
 8008400:	6593      	str	r3, [r2, #88]	@ 0x58
 8008402:	e003      	b.n	800840c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008404:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008408:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800840c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008414:	f002 0308 	and.w	r3, r2, #8
 8008418:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800841c:	2300      	movs	r3, #0
 800841e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008422:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008426:	460b      	mov	r3, r1
 8008428:	4313      	orrs	r3, r2
 800842a:	d01e      	beq.n	800846a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800842c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008430:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008434:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008438:	d10c      	bne.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800843a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800843e:	3328      	adds	r3, #40	@ 0x28
 8008440:	2102      	movs	r1, #2
 8008442:	4618      	mov	r0, r3
 8008444:	f000 fe54 	bl	80090f0 <RCCEx_PLL3_Config>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d002      	beq.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008454:	4b87      	ldr	r3, [pc, #540]	@ (8008674 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008458:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800845c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008460:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008464:	4a83      	ldr	r2, [pc, #524]	@ (8008674 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008466:	430b      	orrs	r3, r1
 8008468:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800846a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800846e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008472:	f002 0310 	and.w	r3, r2, #16
 8008476:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800847a:	2300      	movs	r3, #0
 800847c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008480:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008484:	460b      	mov	r3, r1
 8008486:	4313      	orrs	r3, r2
 8008488:	d01e      	beq.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800848a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800848e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008492:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008496:	d10c      	bne.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800849c:	3328      	adds	r3, #40	@ 0x28
 800849e:	2102      	movs	r1, #2
 80084a0:	4618      	mov	r0, r3
 80084a2:	f000 fe25 	bl	80090f0 <RCCEx_PLL3_Config>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d002      	beq.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
 80084ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80084b2:	4b70      	ldr	r3, [pc, #448]	@ (8008674 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084b6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80084ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80084c2:	4a6c      	ldr	r2, [pc, #432]	@ (8008674 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084c4:	430b      	orrs	r3, r1
 80084c6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80084c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80084d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80084d8:	2300      	movs	r3, #0
 80084da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80084de:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80084e2:	460b      	mov	r3, r1
 80084e4:	4313      	orrs	r3, r2
 80084e6:	d03e      	beq.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80084e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80084f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80084f4:	d022      	beq.n	800853c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80084f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80084fa:	d81b      	bhi.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d003      	beq.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008500:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008504:	d00b      	beq.n	800851e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008506:	e015      	b.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800850c:	3308      	adds	r3, #8
 800850e:	2100      	movs	r1, #0
 8008510:	4618      	mov	r0, r3
 8008512:	f000 fd3b 	bl	8008f8c <RCCEx_PLL2_Config>
 8008516:	4603      	mov	r3, r0
 8008518:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800851c:	e00f      	b.n	800853e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800851e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008522:	3328      	adds	r3, #40	@ 0x28
 8008524:	2102      	movs	r1, #2
 8008526:	4618      	mov	r0, r3
 8008528:	f000 fde2 	bl	80090f0 <RCCEx_PLL3_Config>
 800852c:	4603      	mov	r3, r0
 800852e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008532:	e004      	b.n	800853e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800853a:	e000      	b.n	800853e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800853c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800853e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008542:	2b00      	cmp	r3, #0
 8008544:	d10b      	bne.n	800855e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008546:	4b4b      	ldr	r3, [pc, #300]	@ (8008674 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800854a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800854e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008552:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008556:	4a47      	ldr	r2, [pc, #284]	@ (8008674 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008558:	430b      	orrs	r3, r1
 800855a:	6593      	str	r3, [r2, #88]	@ 0x58
 800855c:	e003      	b.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800855e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008562:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800856a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008572:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008574:	2300      	movs	r3, #0
 8008576:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008578:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800857c:	460b      	mov	r3, r1
 800857e:	4313      	orrs	r3, r2
 8008580:	d03b      	beq.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800858a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800858e:	d01f      	beq.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008590:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008594:	d818      	bhi.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008596:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800859a:	d003      	beq.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800859c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80085a0:	d007      	beq.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80085a2:	e011      	b.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085a4:	4b33      	ldr	r3, [pc, #204]	@ (8008674 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80085a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085a8:	4a32      	ldr	r2, [pc, #200]	@ (8008674 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80085aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80085b0:	e00f      	b.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80085b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085b6:	3328      	adds	r3, #40	@ 0x28
 80085b8:	2101      	movs	r1, #1
 80085ba:	4618      	mov	r0, r3
 80085bc:	f000 fd98 	bl	80090f0 <RCCEx_PLL3_Config>
 80085c0:	4603      	mov	r3, r0
 80085c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80085c6:	e004      	b.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085c8:	2301      	movs	r3, #1
 80085ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80085ce:	e000      	b.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80085d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d10b      	bne.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80085da:	4b26      	ldr	r3, [pc, #152]	@ (8008674 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80085dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085de:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80085e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085ea:	4a22      	ldr	r2, [pc, #136]	@ (8008674 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80085ec:	430b      	orrs	r3, r1
 80085ee:	6553      	str	r3, [r2, #84]	@ 0x54
 80085f0:	e003      	b.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80085fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008602:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008606:	673b      	str	r3, [r7, #112]	@ 0x70
 8008608:	2300      	movs	r3, #0
 800860a:	677b      	str	r3, [r7, #116]	@ 0x74
 800860c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008610:	460b      	mov	r3, r1
 8008612:	4313      	orrs	r3, r2
 8008614:	d034      	beq.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800861a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800861c:	2b00      	cmp	r3, #0
 800861e:	d003      	beq.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008620:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008624:	d007      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008626:	e011      	b.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008628:	4b12      	ldr	r3, [pc, #72]	@ (8008674 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800862a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800862c:	4a11      	ldr	r2, [pc, #68]	@ (8008674 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800862e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008632:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008634:	e00e      	b.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800863a:	3308      	adds	r3, #8
 800863c:	2102      	movs	r1, #2
 800863e:	4618      	mov	r0, r3
 8008640:	f000 fca4 	bl	8008f8c <RCCEx_PLL2_Config>
 8008644:	4603      	mov	r3, r0
 8008646:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800864a:	e003      	b.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008652:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008654:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008658:	2b00      	cmp	r3, #0
 800865a:	d10d      	bne.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800865c:	4b05      	ldr	r3, [pc, #20]	@ (8008674 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800865e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008660:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008668:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800866a:	4a02      	ldr	r2, [pc, #8]	@ (8008674 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800866c:	430b      	orrs	r3, r1
 800866e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008670:	e006      	b.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008672:	bf00      	nop
 8008674:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008678:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800867c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008688:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800868c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800868e:	2300      	movs	r3, #0
 8008690:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008692:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008696:	460b      	mov	r3, r1
 8008698:	4313      	orrs	r3, r2
 800869a:	d00c      	beq.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800869c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086a0:	3328      	adds	r3, #40	@ 0x28
 80086a2:	2102      	movs	r1, #2
 80086a4:	4618      	mov	r0, r3
 80086a6:	f000 fd23 	bl	80090f0 <RCCEx_PLL3_Config>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d002      	beq.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80086b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086be:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80086c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80086c4:	2300      	movs	r3, #0
 80086c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80086c8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80086cc:	460b      	mov	r3, r1
 80086ce:	4313      	orrs	r3, r2
 80086d0:	d038      	beq.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80086d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80086de:	d018      	beq.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80086e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80086e4:	d811      	bhi.n	800870a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80086e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086ea:	d014      	beq.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80086ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086f0:	d80b      	bhi.n	800870a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d011      	beq.n	800871a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80086f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086fa:	d106      	bne.n	800870a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086fc:	4bc3      	ldr	r3, [pc, #780]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008700:	4ac2      	ldr	r2, [pc, #776]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008702:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008706:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008708:	e008      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008710:	e004      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008712:	bf00      	nop
 8008714:	e002      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008716:	bf00      	nop
 8008718:	e000      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800871a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800871c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008720:	2b00      	cmp	r3, #0
 8008722:	d10b      	bne.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008724:	4bb9      	ldr	r3, [pc, #740]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008728:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800872c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008730:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008734:	4ab5      	ldr	r2, [pc, #724]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008736:	430b      	orrs	r3, r1
 8008738:	6553      	str	r3, [r2, #84]	@ 0x54
 800873a:	e003      	b.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800873c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008740:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008750:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008752:	2300      	movs	r3, #0
 8008754:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008756:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800875a:	460b      	mov	r3, r1
 800875c:	4313      	orrs	r3, r2
 800875e:	d009      	beq.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008760:	4baa      	ldr	r3, [pc, #680]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008762:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008764:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800876c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800876e:	4aa7      	ldr	r2, [pc, #668]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008770:	430b      	orrs	r3, r1
 8008772:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800877c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008780:	653b      	str	r3, [r7, #80]	@ 0x50
 8008782:	2300      	movs	r3, #0
 8008784:	657b      	str	r3, [r7, #84]	@ 0x54
 8008786:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800878a:	460b      	mov	r3, r1
 800878c:	4313      	orrs	r3, r2
 800878e:	d00a      	beq.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008790:	4b9e      	ldr	r3, [pc, #632]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008792:	691b      	ldr	r3, [r3, #16]
 8008794:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800879c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80087a0:	4a9a      	ldr	r2, [pc, #616]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80087a2:	430b      	orrs	r3, r1
 80087a4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80087a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ae:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80087b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087b4:	2300      	movs	r3, #0
 80087b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80087b8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80087bc:	460b      	mov	r3, r1
 80087be:	4313      	orrs	r3, r2
 80087c0:	d009      	beq.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80087c2:	4b92      	ldr	r3, [pc, #584]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80087c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087c6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80087ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087d0:	4a8e      	ldr	r2, [pc, #568]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80087d2:	430b      	orrs	r3, r1
 80087d4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80087d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087de:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80087e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80087e4:	2300      	movs	r3, #0
 80087e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80087e8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80087ec:	460b      	mov	r3, r1
 80087ee:	4313      	orrs	r3, r2
 80087f0:	d00e      	beq.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80087f2:	4b86      	ldr	r3, [pc, #536]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80087f4:	691b      	ldr	r3, [r3, #16]
 80087f6:	4a85      	ldr	r2, [pc, #532]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80087f8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80087fc:	6113      	str	r3, [r2, #16]
 80087fe:	4b83      	ldr	r3, [pc, #524]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008800:	6919      	ldr	r1, [r3, #16]
 8008802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008806:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800880a:	4a80      	ldr	r2, [pc, #512]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800880c:	430b      	orrs	r3, r1
 800880e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008818:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800881c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800881e:	2300      	movs	r3, #0
 8008820:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008822:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008826:	460b      	mov	r3, r1
 8008828:	4313      	orrs	r3, r2
 800882a:	d009      	beq.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800882c:	4b77      	ldr	r3, [pc, #476]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800882e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008830:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800883a:	4a74      	ldr	r2, [pc, #464]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800883c:	430b      	orrs	r3, r1
 800883e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008848:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800884c:	633b      	str	r3, [r7, #48]	@ 0x30
 800884e:	2300      	movs	r3, #0
 8008850:	637b      	str	r3, [r7, #52]	@ 0x34
 8008852:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008856:	460b      	mov	r3, r1
 8008858:	4313      	orrs	r3, r2
 800885a:	d00a      	beq.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800885c:	4b6b      	ldr	r3, [pc, #428]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800885e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008860:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008868:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800886c:	4a67      	ldr	r2, [pc, #412]	@ (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800886e:	430b      	orrs	r3, r1
 8008870:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887a:	2100      	movs	r1, #0
 800887c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800887e:	f003 0301 	and.w	r3, r3, #1
 8008882:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008884:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008888:	460b      	mov	r3, r1
 800888a:	4313      	orrs	r3, r2
 800888c:	d011      	beq.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800888e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008892:	3308      	adds	r3, #8
 8008894:	2100      	movs	r1, #0
 8008896:	4618      	mov	r0, r3
 8008898:	f000 fb78 	bl	8008f8c <RCCEx_PLL2_Config>
 800889c:	4603      	mov	r3, r0
 800889e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80088a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d003      	beq.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80088b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ba:	2100      	movs	r1, #0
 80088bc:	6239      	str	r1, [r7, #32]
 80088be:	f003 0302 	and.w	r3, r3, #2
 80088c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80088c4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80088c8:	460b      	mov	r3, r1
 80088ca:	4313      	orrs	r3, r2
 80088cc:	d011      	beq.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80088ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088d2:	3308      	adds	r3, #8
 80088d4:	2101      	movs	r1, #1
 80088d6:	4618      	mov	r0, r3
 80088d8:	f000 fb58 	bl	8008f8c <RCCEx_PLL2_Config>
 80088dc:	4603      	mov	r3, r0
 80088de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80088e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d003      	beq.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80088f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fa:	2100      	movs	r1, #0
 80088fc:	61b9      	str	r1, [r7, #24]
 80088fe:	f003 0304 	and.w	r3, r3, #4
 8008902:	61fb      	str	r3, [r7, #28]
 8008904:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008908:	460b      	mov	r3, r1
 800890a:	4313      	orrs	r3, r2
 800890c:	d011      	beq.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800890e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008912:	3308      	adds	r3, #8
 8008914:	2102      	movs	r1, #2
 8008916:	4618      	mov	r0, r3
 8008918:	f000 fb38 	bl	8008f8c <RCCEx_PLL2_Config>
 800891c:	4603      	mov	r3, r0
 800891e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008922:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008926:	2b00      	cmp	r3, #0
 8008928:	d003      	beq.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800892a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800892e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893a:	2100      	movs	r1, #0
 800893c:	6139      	str	r1, [r7, #16]
 800893e:	f003 0308 	and.w	r3, r3, #8
 8008942:	617b      	str	r3, [r7, #20]
 8008944:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008948:	460b      	mov	r3, r1
 800894a:	4313      	orrs	r3, r2
 800894c:	d011      	beq.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800894e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008952:	3328      	adds	r3, #40	@ 0x28
 8008954:	2100      	movs	r1, #0
 8008956:	4618      	mov	r0, r3
 8008958:	f000 fbca 	bl	80090f0 <RCCEx_PLL3_Config>
 800895c:	4603      	mov	r3, r0
 800895e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008962:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008966:	2b00      	cmp	r3, #0
 8008968:	d003      	beq.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800896a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800896e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800897a:	2100      	movs	r1, #0
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	f003 0310 	and.w	r3, r3, #16
 8008982:	60fb      	str	r3, [r7, #12]
 8008984:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008988:	460b      	mov	r3, r1
 800898a:	4313      	orrs	r3, r2
 800898c:	d011      	beq.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800898e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008992:	3328      	adds	r3, #40	@ 0x28
 8008994:	2101      	movs	r1, #1
 8008996:	4618      	mov	r0, r3
 8008998:	f000 fbaa 	bl	80090f0 <RCCEx_PLL3_Config>
 800899c:	4603      	mov	r3, r0
 800899e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80089a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d003      	beq.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80089b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ba:	2100      	movs	r1, #0
 80089bc:	6039      	str	r1, [r7, #0]
 80089be:	f003 0320 	and.w	r3, r3, #32
 80089c2:	607b      	str	r3, [r7, #4]
 80089c4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80089c8:	460b      	mov	r3, r1
 80089ca:	4313      	orrs	r3, r2
 80089cc:	d011      	beq.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80089ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089d2:	3328      	adds	r3, #40	@ 0x28
 80089d4:	2102      	movs	r1, #2
 80089d6:	4618      	mov	r0, r3
 80089d8:	f000 fb8a 	bl	80090f0 <RCCEx_PLL3_Config>
 80089dc:	4603      	mov	r3, r0
 80089de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80089e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d003      	beq.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80089f2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d101      	bne.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80089fa:	2300      	movs	r3, #0
 80089fc:	e000      	b.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008a06:	46bd      	mov	sp, r7
 8008a08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a0c:	58024400 	.word	0x58024400

08008a10 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008a14:	f7fe fd96 	bl	8007544 <HAL_RCC_GetHCLKFreq>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	4b06      	ldr	r3, [pc, #24]	@ (8008a34 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008a1c:	6a1b      	ldr	r3, [r3, #32]
 8008a1e:	091b      	lsrs	r3, r3, #4
 8008a20:	f003 0307 	and.w	r3, r3, #7
 8008a24:	4904      	ldr	r1, [pc, #16]	@ (8008a38 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008a26:	5ccb      	ldrb	r3, [r1, r3]
 8008a28:	f003 031f 	and.w	r3, r3, #31
 8008a2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	58024400 	.word	0x58024400
 8008a38:	0801284c 	.word	0x0801284c

08008a3c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b089      	sub	sp, #36	@ 0x24
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a44:	4ba1      	ldr	r3, [pc, #644]	@ (8008ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a48:	f003 0303 	and.w	r3, r3, #3
 8008a4c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008a4e:	4b9f      	ldr	r3, [pc, #636]	@ (8008ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a52:	0b1b      	lsrs	r3, r3, #12
 8008a54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a58:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008a5a:	4b9c      	ldr	r3, [pc, #624]	@ (8008ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a5e:	091b      	lsrs	r3, r3, #4
 8008a60:	f003 0301 	and.w	r3, r3, #1
 8008a64:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008a66:	4b99      	ldr	r3, [pc, #612]	@ (8008ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a6a:	08db      	lsrs	r3, r3, #3
 8008a6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a70:	693a      	ldr	r2, [r7, #16]
 8008a72:	fb02 f303 	mul.w	r3, r2, r3
 8008a76:	ee07 3a90 	vmov	s15, r3
 8008a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a7e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	f000 8111 	beq.w	8008cac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008a8a:	69bb      	ldr	r3, [r7, #24]
 8008a8c:	2b02      	cmp	r3, #2
 8008a8e:	f000 8083 	beq.w	8008b98 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	f200 80a1 	bhi.w	8008bdc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d003      	beq.n	8008aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d056      	beq.n	8008b54 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008aa6:	e099      	b.n	8008bdc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008aa8:	4b88      	ldr	r3, [pc, #544]	@ (8008ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f003 0320 	and.w	r3, r3, #32
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d02d      	beq.n	8008b10 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ab4:	4b85      	ldr	r3, [pc, #532]	@ (8008ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	08db      	lsrs	r3, r3, #3
 8008aba:	f003 0303 	and.w	r3, r3, #3
 8008abe:	4a84      	ldr	r2, [pc, #528]	@ (8008cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ac4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	ee07 3a90 	vmov	s15, r3
 8008acc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	ee07 3a90 	vmov	s15, r3
 8008ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ade:	4b7b      	ldr	r3, [pc, #492]	@ (8008ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ae6:	ee07 3a90 	vmov	s15, r3
 8008aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aee:	ed97 6a03 	vldr	s12, [r7, #12]
 8008af2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008afe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b0a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008b0e:	e087      	b.n	8008c20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	ee07 3a90 	vmov	s15, r3
 8008b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b1a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b22:	4b6a      	ldr	r3, [pc, #424]	@ (8008ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b2a:	ee07 3a90 	vmov	s15, r3
 8008b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b32:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b36:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b52:	e065      	b.n	8008c20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	ee07 3a90 	vmov	s15, r3
 8008b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b5e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008cdc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b66:	4b59      	ldr	r3, [pc, #356]	@ (8008ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b6e:	ee07 3a90 	vmov	s15, r3
 8008b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b76:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b7a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b96:	e043      	b.n	8008c20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	ee07 3a90 	vmov	s15, r3
 8008b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ba2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008ba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008baa:	4b48      	ldr	r3, [pc, #288]	@ (8008ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bb2:	ee07 3a90 	vmov	s15, r3
 8008bb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bba:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bbe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008bc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bda:	e021      	b.n	8008c20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	ee07 3a90 	vmov	s15, r3
 8008be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008be6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008cdc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bee:	4b37      	ldr	r3, [pc, #220]	@ (8008ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bf6:	ee07 3a90 	vmov	s15, r3
 8008bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c02:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c1e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008c20:	4b2a      	ldr	r3, [pc, #168]	@ (8008ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c24:	0a5b      	lsrs	r3, r3, #9
 8008c26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c2a:	ee07 3a90 	vmov	s15, r3
 8008c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c46:	ee17 2a90 	vmov	r2, s15
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008c4e:	4b1f      	ldr	r3, [pc, #124]	@ (8008ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c52:	0c1b      	lsrs	r3, r3, #16
 8008c54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c58:	ee07 3a90 	vmov	s15, r3
 8008c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c68:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c74:	ee17 2a90 	vmov	r2, s15
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008c7c:	4b13      	ldr	r3, [pc, #76]	@ (8008ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c80:	0e1b      	lsrs	r3, r3, #24
 8008c82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c86:	ee07 3a90 	vmov	s15, r3
 8008c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c96:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ca2:	ee17 2a90 	vmov	r2, s15
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008caa:	e008      	b.n	8008cbe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	609a      	str	r2, [r3, #8]
}
 8008cbe:	bf00      	nop
 8008cc0:	3724      	adds	r7, #36	@ 0x24
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop
 8008ccc:	58024400 	.word	0x58024400
 8008cd0:	03d09000 	.word	0x03d09000
 8008cd4:	46000000 	.word	0x46000000
 8008cd8:	4c742400 	.word	0x4c742400
 8008cdc:	4a742400 	.word	0x4a742400
 8008ce0:	4bbebc20 	.word	0x4bbebc20

08008ce4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b089      	sub	sp, #36	@ 0x24
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008cec:	4ba1      	ldr	r3, [pc, #644]	@ (8008f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cf0:	f003 0303 	and.w	r3, r3, #3
 8008cf4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008cf6:	4b9f      	ldr	r3, [pc, #636]	@ (8008f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cfa:	0d1b      	lsrs	r3, r3, #20
 8008cfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008d00:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008d02:	4b9c      	ldr	r3, [pc, #624]	@ (8008f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d06:	0a1b      	lsrs	r3, r3, #8
 8008d08:	f003 0301 	and.w	r3, r3, #1
 8008d0c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008d0e:	4b99      	ldr	r3, [pc, #612]	@ (8008f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d12:	08db      	lsrs	r3, r3, #3
 8008d14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d18:	693a      	ldr	r2, [r7, #16]
 8008d1a:	fb02 f303 	mul.w	r3, r2, r3
 8008d1e:	ee07 3a90 	vmov	s15, r3
 8008d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	f000 8111 	beq.w	8008f54 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	2b02      	cmp	r3, #2
 8008d36:	f000 8083 	beq.w	8008e40 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008d3a:	69bb      	ldr	r3, [r7, #24]
 8008d3c:	2b02      	cmp	r3, #2
 8008d3e:	f200 80a1 	bhi.w	8008e84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008d42:	69bb      	ldr	r3, [r7, #24]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d003      	beq.n	8008d50 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008d48:	69bb      	ldr	r3, [r7, #24]
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d056      	beq.n	8008dfc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008d4e:	e099      	b.n	8008e84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d50:	4b88      	ldr	r3, [pc, #544]	@ (8008f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f003 0320 	and.w	r3, r3, #32
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d02d      	beq.n	8008db8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d5c:	4b85      	ldr	r3, [pc, #532]	@ (8008f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	08db      	lsrs	r3, r3, #3
 8008d62:	f003 0303 	and.w	r3, r3, #3
 8008d66:	4a84      	ldr	r2, [pc, #528]	@ (8008f78 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008d68:	fa22 f303 	lsr.w	r3, r2, r3
 8008d6c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	ee07 3a90 	vmov	s15, r3
 8008d74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	ee07 3a90 	vmov	s15, r3
 8008d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d86:	4b7b      	ldr	r3, [pc, #492]	@ (8008f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d8e:	ee07 3a90 	vmov	s15, r3
 8008d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d96:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d9a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008f7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008da6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008db2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008db6:	e087      	b.n	8008ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	ee07 3a90 	vmov	s15, r3
 8008dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dc2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008f80 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dca:	4b6a      	ldr	r3, [pc, #424]	@ (8008f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dd2:	ee07 3a90 	vmov	s15, r3
 8008dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dda:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dde:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008f7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008df6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dfa:	e065      	b.n	8008ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	ee07 3a90 	vmov	s15, r3
 8008e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e06:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008f84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e0e:	4b59      	ldr	r3, [pc, #356]	@ (8008f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e16:	ee07 3a90 	vmov	s15, r3
 8008e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e22:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008f7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e3e:	e043      	b.n	8008ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	ee07 3a90 	vmov	s15, r3
 8008e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e4a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008f88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e52:	4b48      	ldr	r3, [pc, #288]	@ (8008f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e5a:	ee07 3a90 	vmov	s15, r3
 8008e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e62:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e66:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008f7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e82:	e021      	b.n	8008ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	ee07 3a90 	vmov	s15, r3
 8008e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e8e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008f84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e96:	4b37      	ldr	r3, [pc, #220]	@ (8008f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e9e:	ee07 3a90 	vmov	s15, r3
 8008ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ea6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008eaa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008f7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008eb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ec2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ec6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008ec8:	4b2a      	ldr	r3, [pc, #168]	@ (8008f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ecc:	0a5b      	lsrs	r3, r3, #9
 8008ece:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ed2:	ee07 3a90 	vmov	s15, r3
 8008ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ede:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ee2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ee6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008eea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008eee:	ee17 2a90 	vmov	r2, s15
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008ef6:	4b1f      	ldr	r3, [pc, #124]	@ (8008f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008efa:	0c1b      	lsrs	r3, r3, #16
 8008efc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f00:	ee07 3a90 	vmov	s15, r3
 8008f04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f10:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f1c:	ee17 2a90 	vmov	r2, s15
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008f24:	4b13      	ldr	r3, [pc, #76]	@ (8008f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f28:	0e1b      	lsrs	r3, r3, #24
 8008f2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f2e:	ee07 3a90 	vmov	s15, r3
 8008f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f4a:	ee17 2a90 	vmov	r2, s15
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008f52:	e008      	b.n	8008f66 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2200      	movs	r2, #0
 8008f64:	609a      	str	r2, [r3, #8]
}
 8008f66:	bf00      	nop
 8008f68:	3724      	adds	r7, #36	@ 0x24
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr
 8008f72:	bf00      	nop
 8008f74:	58024400 	.word	0x58024400
 8008f78:	03d09000 	.word	0x03d09000
 8008f7c:	46000000 	.word	0x46000000
 8008f80:	4c742400 	.word	0x4c742400
 8008f84:	4a742400 	.word	0x4a742400
 8008f88:	4bbebc20 	.word	0x4bbebc20

08008f8c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008f96:	2300      	movs	r3, #0
 8008f98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008f9a:	4b53      	ldr	r3, [pc, #332]	@ (80090e8 <RCCEx_PLL2_Config+0x15c>)
 8008f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f9e:	f003 0303 	and.w	r3, r3, #3
 8008fa2:	2b03      	cmp	r3, #3
 8008fa4:	d101      	bne.n	8008faa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e099      	b.n	80090de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008faa:	4b4f      	ldr	r3, [pc, #316]	@ (80090e8 <RCCEx_PLL2_Config+0x15c>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a4e      	ldr	r2, [pc, #312]	@ (80090e8 <RCCEx_PLL2_Config+0x15c>)
 8008fb0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008fb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fb6:	f7f9 fb79 	bl	80026ac <HAL_GetTick>
 8008fba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008fbc:	e008      	b.n	8008fd0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008fbe:	f7f9 fb75 	bl	80026ac <HAL_GetTick>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	1ad3      	subs	r3, r2, r3
 8008fc8:	2b02      	cmp	r3, #2
 8008fca:	d901      	bls.n	8008fd0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008fcc:	2303      	movs	r3, #3
 8008fce:	e086      	b.n	80090de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008fd0:	4b45      	ldr	r3, [pc, #276]	@ (80090e8 <RCCEx_PLL2_Config+0x15c>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d1f0      	bne.n	8008fbe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008fdc:	4b42      	ldr	r3, [pc, #264]	@ (80090e8 <RCCEx_PLL2_Config+0x15c>)
 8008fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fe0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	031b      	lsls	r3, r3, #12
 8008fea:	493f      	ldr	r1, [pc, #252]	@ (80090e8 <RCCEx_PLL2_Config+0x15c>)
 8008fec:	4313      	orrs	r3, r2
 8008fee:	628b      	str	r3, [r1, #40]	@ 0x28
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	3b01      	subs	r3, #1
 8008ff6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	3b01      	subs	r3, #1
 8009000:	025b      	lsls	r3, r3, #9
 8009002:	b29b      	uxth	r3, r3
 8009004:	431a      	orrs	r2, r3
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	3b01      	subs	r3, #1
 800900c:	041b      	lsls	r3, r3, #16
 800900e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009012:	431a      	orrs	r2, r3
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	691b      	ldr	r3, [r3, #16]
 8009018:	3b01      	subs	r3, #1
 800901a:	061b      	lsls	r3, r3, #24
 800901c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009020:	4931      	ldr	r1, [pc, #196]	@ (80090e8 <RCCEx_PLL2_Config+0x15c>)
 8009022:	4313      	orrs	r3, r2
 8009024:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009026:	4b30      	ldr	r3, [pc, #192]	@ (80090e8 <RCCEx_PLL2_Config+0x15c>)
 8009028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800902a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	695b      	ldr	r3, [r3, #20]
 8009032:	492d      	ldr	r1, [pc, #180]	@ (80090e8 <RCCEx_PLL2_Config+0x15c>)
 8009034:	4313      	orrs	r3, r2
 8009036:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009038:	4b2b      	ldr	r3, [pc, #172]	@ (80090e8 <RCCEx_PLL2_Config+0x15c>)
 800903a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800903c:	f023 0220 	bic.w	r2, r3, #32
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	699b      	ldr	r3, [r3, #24]
 8009044:	4928      	ldr	r1, [pc, #160]	@ (80090e8 <RCCEx_PLL2_Config+0x15c>)
 8009046:	4313      	orrs	r3, r2
 8009048:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800904a:	4b27      	ldr	r3, [pc, #156]	@ (80090e8 <RCCEx_PLL2_Config+0x15c>)
 800904c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800904e:	4a26      	ldr	r2, [pc, #152]	@ (80090e8 <RCCEx_PLL2_Config+0x15c>)
 8009050:	f023 0310 	bic.w	r3, r3, #16
 8009054:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009056:	4b24      	ldr	r3, [pc, #144]	@ (80090e8 <RCCEx_PLL2_Config+0x15c>)
 8009058:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800905a:	4b24      	ldr	r3, [pc, #144]	@ (80090ec <RCCEx_PLL2_Config+0x160>)
 800905c:	4013      	ands	r3, r2
 800905e:	687a      	ldr	r2, [r7, #4]
 8009060:	69d2      	ldr	r2, [r2, #28]
 8009062:	00d2      	lsls	r2, r2, #3
 8009064:	4920      	ldr	r1, [pc, #128]	@ (80090e8 <RCCEx_PLL2_Config+0x15c>)
 8009066:	4313      	orrs	r3, r2
 8009068:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800906a:	4b1f      	ldr	r3, [pc, #124]	@ (80090e8 <RCCEx_PLL2_Config+0x15c>)
 800906c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800906e:	4a1e      	ldr	r2, [pc, #120]	@ (80090e8 <RCCEx_PLL2_Config+0x15c>)
 8009070:	f043 0310 	orr.w	r3, r3, #16
 8009074:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d106      	bne.n	800908a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800907c:	4b1a      	ldr	r3, [pc, #104]	@ (80090e8 <RCCEx_PLL2_Config+0x15c>)
 800907e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009080:	4a19      	ldr	r2, [pc, #100]	@ (80090e8 <RCCEx_PLL2_Config+0x15c>)
 8009082:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009086:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009088:	e00f      	b.n	80090aa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	2b01      	cmp	r3, #1
 800908e:	d106      	bne.n	800909e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009090:	4b15      	ldr	r3, [pc, #84]	@ (80090e8 <RCCEx_PLL2_Config+0x15c>)
 8009092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009094:	4a14      	ldr	r2, [pc, #80]	@ (80090e8 <RCCEx_PLL2_Config+0x15c>)
 8009096:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800909a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800909c:	e005      	b.n	80090aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800909e:	4b12      	ldr	r3, [pc, #72]	@ (80090e8 <RCCEx_PLL2_Config+0x15c>)
 80090a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090a2:	4a11      	ldr	r2, [pc, #68]	@ (80090e8 <RCCEx_PLL2_Config+0x15c>)
 80090a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80090a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80090aa:	4b0f      	ldr	r3, [pc, #60]	@ (80090e8 <RCCEx_PLL2_Config+0x15c>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a0e      	ldr	r2, [pc, #56]	@ (80090e8 <RCCEx_PLL2_Config+0x15c>)
 80090b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80090b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090b6:	f7f9 faf9 	bl	80026ac <HAL_GetTick>
 80090ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80090bc:	e008      	b.n	80090d0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80090be:	f7f9 faf5 	bl	80026ac <HAL_GetTick>
 80090c2:	4602      	mov	r2, r0
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	1ad3      	subs	r3, r2, r3
 80090c8:	2b02      	cmp	r3, #2
 80090ca:	d901      	bls.n	80090d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80090cc:	2303      	movs	r3, #3
 80090ce:	e006      	b.n	80090de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80090d0:	4b05      	ldr	r3, [pc, #20]	@ (80090e8 <RCCEx_PLL2_Config+0x15c>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d0f0      	beq.n	80090be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80090dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	58024400 	.word	0x58024400
 80090ec:	ffff0007 	.word	0xffff0007

080090f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80090fa:	2300      	movs	r3, #0
 80090fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80090fe:	4b53      	ldr	r3, [pc, #332]	@ (800924c <RCCEx_PLL3_Config+0x15c>)
 8009100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009102:	f003 0303 	and.w	r3, r3, #3
 8009106:	2b03      	cmp	r3, #3
 8009108:	d101      	bne.n	800910e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	e099      	b.n	8009242 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800910e:	4b4f      	ldr	r3, [pc, #316]	@ (800924c <RCCEx_PLL3_Config+0x15c>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a4e      	ldr	r2, [pc, #312]	@ (800924c <RCCEx_PLL3_Config+0x15c>)
 8009114:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009118:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800911a:	f7f9 fac7 	bl	80026ac <HAL_GetTick>
 800911e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009120:	e008      	b.n	8009134 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009122:	f7f9 fac3 	bl	80026ac <HAL_GetTick>
 8009126:	4602      	mov	r2, r0
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	1ad3      	subs	r3, r2, r3
 800912c:	2b02      	cmp	r3, #2
 800912e:	d901      	bls.n	8009134 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009130:	2303      	movs	r3, #3
 8009132:	e086      	b.n	8009242 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009134:	4b45      	ldr	r3, [pc, #276]	@ (800924c <RCCEx_PLL3_Config+0x15c>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800913c:	2b00      	cmp	r3, #0
 800913e:	d1f0      	bne.n	8009122 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009140:	4b42      	ldr	r3, [pc, #264]	@ (800924c <RCCEx_PLL3_Config+0x15c>)
 8009142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009144:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	051b      	lsls	r3, r3, #20
 800914e:	493f      	ldr	r1, [pc, #252]	@ (800924c <RCCEx_PLL3_Config+0x15c>)
 8009150:	4313      	orrs	r3, r2
 8009152:	628b      	str	r3, [r1, #40]	@ 0x28
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	3b01      	subs	r3, #1
 800915a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	689b      	ldr	r3, [r3, #8]
 8009162:	3b01      	subs	r3, #1
 8009164:	025b      	lsls	r3, r3, #9
 8009166:	b29b      	uxth	r3, r3
 8009168:	431a      	orrs	r2, r3
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	68db      	ldr	r3, [r3, #12]
 800916e:	3b01      	subs	r3, #1
 8009170:	041b      	lsls	r3, r3, #16
 8009172:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009176:	431a      	orrs	r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	691b      	ldr	r3, [r3, #16]
 800917c:	3b01      	subs	r3, #1
 800917e:	061b      	lsls	r3, r3, #24
 8009180:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009184:	4931      	ldr	r1, [pc, #196]	@ (800924c <RCCEx_PLL3_Config+0x15c>)
 8009186:	4313      	orrs	r3, r2
 8009188:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800918a:	4b30      	ldr	r3, [pc, #192]	@ (800924c <RCCEx_PLL3_Config+0x15c>)
 800918c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800918e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	695b      	ldr	r3, [r3, #20]
 8009196:	492d      	ldr	r1, [pc, #180]	@ (800924c <RCCEx_PLL3_Config+0x15c>)
 8009198:	4313      	orrs	r3, r2
 800919a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800919c:	4b2b      	ldr	r3, [pc, #172]	@ (800924c <RCCEx_PLL3_Config+0x15c>)
 800919e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091a0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	699b      	ldr	r3, [r3, #24]
 80091a8:	4928      	ldr	r1, [pc, #160]	@ (800924c <RCCEx_PLL3_Config+0x15c>)
 80091aa:	4313      	orrs	r3, r2
 80091ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80091ae:	4b27      	ldr	r3, [pc, #156]	@ (800924c <RCCEx_PLL3_Config+0x15c>)
 80091b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091b2:	4a26      	ldr	r2, [pc, #152]	@ (800924c <RCCEx_PLL3_Config+0x15c>)
 80091b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80091b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80091ba:	4b24      	ldr	r3, [pc, #144]	@ (800924c <RCCEx_PLL3_Config+0x15c>)
 80091bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80091be:	4b24      	ldr	r3, [pc, #144]	@ (8009250 <RCCEx_PLL3_Config+0x160>)
 80091c0:	4013      	ands	r3, r2
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	69d2      	ldr	r2, [r2, #28]
 80091c6:	00d2      	lsls	r2, r2, #3
 80091c8:	4920      	ldr	r1, [pc, #128]	@ (800924c <RCCEx_PLL3_Config+0x15c>)
 80091ca:	4313      	orrs	r3, r2
 80091cc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80091ce:	4b1f      	ldr	r3, [pc, #124]	@ (800924c <RCCEx_PLL3_Config+0x15c>)
 80091d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091d2:	4a1e      	ldr	r2, [pc, #120]	@ (800924c <RCCEx_PLL3_Config+0x15c>)
 80091d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80091d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d106      	bne.n	80091ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80091e0:	4b1a      	ldr	r3, [pc, #104]	@ (800924c <RCCEx_PLL3_Config+0x15c>)
 80091e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091e4:	4a19      	ldr	r2, [pc, #100]	@ (800924c <RCCEx_PLL3_Config+0x15c>)
 80091e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80091ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80091ec:	e00f      	b.n	800920e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d106      	bne.n	8009202 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80091f4:	4b15      	ldr	r3, [pc, #84]	@ (800924c <RCCEx_PLL3_Config+0x15c>)
 80091f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091f8:	4a14      	ldr	r2, [pc, #80]	@ (800924c <RCCEx_PLL3_Config+0x15c>)
 80091fa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80091fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009200:	e005      	b.n	800920e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009202:	4b12      	ldr	r3, [pc, #72]	@ (800924c <RCCEx_PLL3_Config+0x15c>)
 8009204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009206:	4a11      	ldr	r2, [pc, #68]	@ (800924c <RCCEx_PLL3_Config+0x15c>)
 8009208:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800920c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800920e:	4b0f      	ldr	r3, [pc, #60]	@ (800924c <RCCEx_PLL3_Config+0x15c>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a0e      	ldr	r2, [pc, #56]	@ (800924c <RCCEx_PLL3_Config+0x15c>)
 8009214:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009218:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800921a:	f7f9 fa47 	bl	80026ac <HAL_GetTick>
 800921e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009220:	e008      	b.n	8009234 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009222:	f7f9 fa43 	bl	80026ac <HAL_GetTick>
 8009226:	4602      	mov	r2, r0
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	1ad3      	subs	r3, r2, r3
 800922c:	2b02      	cmp	r3, #2
 800922e:	d901      	bls.n	8009234 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009230:	2303      	movs	r3, #3
 8009232:	e006      	b.n	8009242 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009234:	4b05      	ldr	r3, [pc, #20]	@ (800924c <RCCEx_PLL3_Config+0x15c>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800923c:	2b00      	cmp	r3, #0
 800923e:	d0f0      	beq.n	8009222 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009240:	7bfb      	ldrb	r3, [r7, #15]
}
 8009242:	4618      	mov	r0, r3
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	58024400 	.word	0x58024400
 8009250:	ffff0007 	.word	0xffff0007

08009254 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b082      	sub	sp, #8
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d101      	bne.n	8009266 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009262:	2301      	movs	r3, #1
 8009264:	e049      	b.n	80092fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800926c:	b2db      	uxtb	r3, r3
 800926e:	2b00      	cmp	r3, #0
 8009270:	d106      	bne.n	8009280 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2200      	movs	r2, #0
 8009276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f7f8 fefa 	bl	8002074 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2202      	movs	r2, #2
 8009284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	3304      	adds	r3, #4
 8009290:	4619      	mov	r1, r3
 8009292:	4610      	mov	r0, r2
 8009294:	f000 fea4 	bl	8009fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2201      	movs	r2, #1
 800929c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2201      	movs	r2, #1
 80092a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2201      	movs	r2, #1
 80092b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2201      	movs	r2, #1
 80092dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3708      	adds	r7, #8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
	...

08009304 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009304:	b480      	push	{r7}
 8009306:	b085      	sub	sp, #20
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009312:	b2db      	uxtb	r3, r3
 8009314:	2b01      	cmp	r3, #1
 8009316:	d001      	beq.n	800931c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009318:	2301      	movs	r3, #1
 800931a:	e054      	b.n	80093c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2202      	movs	r2, #2
 8009320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	68da      	ldr	r2, [r3, #12]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f042 0201 	orr.w	r2, r2, #1
 8009332:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a26      	ldr	r2, [pc, #152]	@ (80093d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d022      	beq.n	8009384 <HAL_TIM_Base_Start_IT+0x80>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009346:	d01d      	beq.n	8009384 <HAL_TIM_Base_Start_IT+0x80>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a22      	ldr	r2, [pc, #136]	@ (80093d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d018      	beq.n	8009384 <HAL_TIM_Base_Start_IT+0x80>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4a21      	ldr	r2, [pc, #132]	@ (80093dc <HAL_TIM_Base_Start_IT+0xd8>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d013      	beq.n	8009384 <HAL_TIM_Base_Start_IT+0x80>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a1f      	ldr	r2, [pc, #124]	@ (80093e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d00e      	beq.n	8009384 <HAL_TIM_Base_Start_IT+0x80>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a1e      	ldr	r2, [pc, #120]	@ (80093e4 <HAL_TIM_Base_Start_IT+0xe0>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d009      	beq.n	8009384 <HAL_TIM_Base_Start_IT+0x80>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4a1c      	ldr	r2, [pc, #112]	@ (80093e8 <HAL_TIM_Base_Start_IT+0xe4>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d004      	beq.n	8009384 <HAL_TIM_Base_Start_IT+0x80>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4a1b      	ldr	r2, [pc, #108]	@ (80093ec <HAL_TIM_Base_Start_IT+0xe8>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d115      	bne.n	80093b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	689a      	ldr	r2, [r3, #8]
 800938a:	4b19      	ldr	r3, [pc, #100]	@ (80093f0 <HAL_TIM_Base_Start_IT+0xec>)
 800938c:	4013      	ands	r3, r2
 800938e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2b06      	cmp	r3, #6
 8009394:	d015      	beq.n	80093c2 <HAL_TIM_Base_Start_IT+0xbe>
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800939c:	d011      	beq.n	80093c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	681a      	ldr	r2, [r3, #0]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f042 0201 	orr.w	r2, r2, #1
 80093ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093ae:	e008      	b.n	80093c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	681a      	ldr	r2, [r3, #0]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f042 0201 	orr.w	r2, r2, #1
 80093be:	601a      	str	r2, [r3, #0]
 80093c0:	e000      	b.n	80093c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80093c4:	2300      	movs	r3, #0
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3714      	adds	r7, #20
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr
 80093d2:	bf00      	nop
 80093d4:	40010000 	.word	0x40010000
 80093d8:	40000400 	.word	0x40000400
 80093dc:	40000800 	.word	0x40000800
 80093e0:	40000c00 	.word	0x40000c00
 80093e4:	40010400 	.word	0x40010400
 80093e8:	40001800 	.word	0x40001800
 80093ec:	40014000 	.word	0x40014000
 80093f0:	00010007 	.word	0x00010007

080093f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d101      	bne.n	8009406 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009402:	2301      	movs	r3, #1
 8009404:	e049      	b.n	800949a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800940c:	b2db      	uxtb	r3, r3
 800940e:	2b00      	cmp	r3, #0
 8009410:	d106      	bne.n	8009420 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f7f8 fcfe 	bl	8001e1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2202      	movs	r2, #2
 8009424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	3304      	adds	r3, #4
 8009430:	4619      	mov	r1, r3
 8009432:	4610      	mov	r0, r2
 8009434:	f000 fdd4 	bl	8009fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2201      	movs	r2, #1
 800943c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2201      	movs	r2, #1
 8009444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2201      	movs	r2, #1
 800944c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2201      	movs	r2, #1
 8009454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2201      	movs	r2, #1
 800945c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2201      	movs	r2, #1
 8009464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2201      	movs	r2, #1
 800946c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2201      	movs	r2, #1
 8009474:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2201      	movs	r2, #1
 800947c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2201      	movs	r2, #1
 8009484:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2201      	movs	r2, #1
 800948c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2201      	movs	r2, #1
 8009494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3708      	adds	r7, #8
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
	...

080094a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d109      	bne.n	80094c8 <HAL_TIM_PWM_Start+0x24>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	2b01      	cmp	r3, #1
 80094be:	bf14      	ite	ne
 80094c0:	2301      	movne	r3, #1
 80094c2:	2300      	moveq	r3, #0
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	e03c      	b.n	8009542 <HAL_TIM_PWM_Start+0x9e>
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	2b04      	cmp	r3, #4
 80094cc:	d109      	bne.n	80094e2 <HAL_TIM_PWM_Start+0x3e>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	bf14      	ite	ne
 80094da:	2301      	movne	r3, #1
 80094dc:	2300      	moveq	r3, #0
 80094de:	b2db      	uxtb	r3, r3
 80094e0:	e02f      	b.n	8009542 <HAL_TIM_PWM_Start+0x9e>
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	2b08      	cmp	r3, #8
 80094e6:	d109      	bne.n	80094fc <HAL_TIM_PWM_Start+0x58>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	bf14      	ite	ne
 80094f4:	2301      	movne	r3, #1
 80094f6:	2300      	moveq	r3, #0
 80094f8:	b2db      	uxtb	r3, r3
 80094fa:	e022      	b.n	8009542 <HAL_TIM_PWM_Start+0x9e>
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	2b0c      	cmp	r3, #12
 8009500:	d109      	bne.n	8009516 <HAL_TIM_PWM_Start+0x72>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009508:	b2db      	uxtb	r3, r3
 800950a:	2b01      	cmp	r3, #1
 800950c:	bf14      	ite	ne
 800950e:	2301      	movne	r3, #1
 8009510:	2300      	moveq	r3, #0
 8009512:	b2db      	uxtb	r3, r3
 8009514:	e015      	b.n	8009542 <HAL_TIM_PWM_Start+0x9e>
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	2b10      	cmp	r3, #16
 800951a:	d109      	bne.n	8009530 <HAL_TIM_PWM_Start+0x8c>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009522:	b2db      	uxtb	r3, r3
 8009524:	2b01      	cmp	r3, #1
 8009526:	bf14      	ite	ne
 8009528:	2301      	movne	r3, #1
 800952a:	2300      	moveq	r3, #0
 800952c:	b2db      	uxtb	r3, r3
 800952e:	e008      	b.n	8009542 <HAL_TIM_PWM_Start+0x9e>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009536:	b2db      	uxtb	r3, r3
 8009538:	2b01      	cmp	r3, #1
 800953a:	bf14      	ite	ne
 800953c:	2301      	movne	r3, #1
 800953e:	2300      	moveq	r3, #0
 8009540:	b2db      	uxtb	r3, r3
 8009542:	2b00      	cmp	r3, #0
 8009544:	d001      	beq.n	800954a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009546:	2301      	movs	r3, #1
 8009548:	e0a1      	b.n	800968e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d104      	bne.n	800955a <HAL_TIM_PWM_Start+0xb6>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2202      	movs	r2, #2
 8009554:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009558:	e023      	b.n	80095a2 <HAL_TIM_PWM_Start+0xfe>
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	2b04      	cmp	r3, #4
 800955e:	d104      	bne.n	800956a <HAL_TIM_PWM_Start+0xc6>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2202      	movs	r2, #2
 8009564:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009568:	e01b      	b.n	80095a2 <HAL_TIM_PWM_Start+0xfe>
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	2b08      	cmp	r3, #8
 800956e:	d104      	bne.n	800957a <HAL_TIM_PWM_Start+0xd6>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2202      	movs	r2, #2
 8009574:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009578:	e013      	b.n	80095a2 <HAL_TIM_PWM_Start+0xfe>
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	2b0c      	cmp	r3, #12
 800957e:	d104      	bne.n	800958a <HAL_TIM_PWM_Start+0xe6>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2202      	movs	r2, #2
 8009584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009588:	e00b      	b.n	80095a2 <HAL_TIM_PWM_Start+0xfe>
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	2b10      	cmp	r3, #16
 800958e:	d104      	bne.n	800959a <HAL_TIM_PWM_Start+0xf6>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2202      	movs	r2, #2
 8009594:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009598:	e003      	b.n	80095a2 <HAL_TIM_PWM_Start+0xfe>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2202      	movs	r2, #2
 800959e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	2201      	movs	r2, #1
 80095a8:	6839      	ldr	r1, [r7, #0]
 80095aa:	4618      	mov	r0, r3
 80095ac:	f001 f932 	bl	800a814 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a38      	ldr	r2, [pc, #224]	@ (8009698 <HAL_TIM_PWM_Start+0x1f4>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d013      	beq.n	80095e2 <HAL_TIM_PWM_Start+0x13e>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4a37      	ldr	r2, [pc, #220]	@ (800969c <HAL_TIM_PWM_Start+0x1f8>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d00e      	beq.n	80095e2 <HAL_TIM_PWM_Start+0x13e>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a35      	ldr	r2, [pc, #212]	@ (80096a0 <HAL_TIM_PWM_Start+0x1fc>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d009      	beq.n	80095e2 <HAL_TIM_PWM_Start+0x13e>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4a34      	ldr	r2, [pc, #208]	@ (80096a4 <HAL_TIM_PWM_Start+0x200>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d004      	beq.n	80095e2 <HAL_TIM_PWM_Start+0x13e>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4a32      	ldr	r2, [pc, #200]	@ (80096a8 <HAL_TIM_PWM_Start+0x204>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d101      	bne.n	80095e6 <HAL_TIM_PWM_Start+0x142>
 80095e2:	2301      	movs	r3, #1
 80095e4:	e000      	b.n	80095e8 <HAL_TIM_PWM_Start+0x144>
 80095e6:	2300      	movs	r3, #0
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d007      	beq.n	80095fc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80095fa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a25      	ldr	r2, [pc, #148]	@ (8009698 <HAL_TIM_PWM_Start+0x1f4>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d022      	beq.n	800964c <HAL_TIM_PWM_Start+0x1a8>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800960e:	d01d      	beq.n	800964c <HAL_TIM_PWM_Start+0x1a8>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a25      	ldr	r2, [pc, #148]	@ (80096ac <HAL_TIM_PWM_Start+0x208>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d018      	beq.n	800964c <HAL_TIM_PWM_Start+0x1a8>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a24      	ldr	r2, [pc, #144]	@ (80096b0 <HAL_TIM_PWM_Start+0x20c>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d013      	beq.n	800964c <HAL_TIM_PWM_Start+0x1a8>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a22      	ldr	r2, [pc, #136]	@ (80096b4 <HAL_TIM_PWM_Start+0x210>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d00e      	beq.n	800964c <HAL_TIM_PWM_Start+0x1a8>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a1a      	ldr	r2, [pc, #104]	@ (800969c <HAL_TIM_PWM_Start+0x1f8>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d009      	beq.n	800964c <HAL_TIM_PWM_Start+0x1a8>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a1e      	ldr	r2, [pc, #120]	@ (80096b8 <HAL_TIM_PWM_Start+0x214>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d004      	beq.n	800964c <HAL_TIM_PWM_Start+0x1a8>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a16      	ldr	r2, [pc, #88]	@ (80096a0 <HAL_TIM_PWM_Start+0x1fc>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d115      	bne.n	8009678 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	689a      	ldr	r2, [r3, #8]
 8009652:	4b1a      	ldr	r3, [pc, #104]	@ (80096bc <HAL_TIM_PWM_Start+0x218>)
 8009654:	4013      	ands	r3, r2
 8009656:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2b06      	cmp	r3, #6
 800965c:	d015      	beq.n	800968a <HAL_TIM_PWM_Start+0x1e6>
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009664:	d011      	beq.n	800968a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	681a      	ldr	r2, [r3, #0]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f042 0201 	orr.w	r2, r2, #1
 8009674:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009676:	e008      	b.n	800968a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f042 0201 	orr.w	r2, r2, #1
 8009686:	601a      	str	r2, [r3, #0]
 8009688:	e000      	b.n	800968c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800968a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800968c:	2300      	movs	r3, #0
}
 800968e:	4618      	mov	r0, r3
 8009690:	3710      	adds	r7, #16
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	40010000 	.word	0x40010000
 800969c:	40010400 	.word	0x40010400
 80096a0:	40014000 	.word	0x40014000
 80096a4:	40014400 	.word	0x40014400
 80096a8:	40014800 	.word	0x40014800
 80096ac:	40000400 	.word	0x40000400
 80096b0:	40000800 	.word	0x40000800
 80096b4:	40000c00 	.word	0x40000c00
 80096b8:	40001800 	.word	0x40001800
 80096bc:	00010007 	.word	0x00010007

080096c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b086      	sub	sp, #24
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d101      	bne.n	80096d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80096d0:	2301      	movs	r3, #1
 80096d2:	e08f      	b.n	80097f4 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80096da:	b2db      	uxtb	r3, r3
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d106      	bne.n	80096ee <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f7f8 faa3 	bl	8001c34 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2202      	movs	r2, #2
 80096f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	6899      	ldr	r1, [r3, #8]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681a      	ldr	r2, [r3, #0]
 8009700:	4b3e      	ldr	r3, [pc, #248]	@ (80097fc <HAL_TIM_Encoder_Init+0x13c>)
 8009702:	400b      	ands	r3, r1
 8009704:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	3304      	adds	r3, #4
 800970e:	4619      	mov	r1, r3
 8009710:	4610      	mov	r0, r2
 8009712:	f000 fc65 	bl	8009fe0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	689b      	ldr	r3, [r3, #8]
 800971c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	699b      	ldr	r3, [r3, #24]
 8009724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	6a1b      	ldr	r3, [r3, #32]
 800972c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	697a      	ldr	r2, [r7, #20]
 8009734:	4313      	orrs	r3, r2
 8009736:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009738:	693a      	ldr	r2, [r7, #16]
 800973a:	4b31      	ldr	r3, [pc, #196]	@ (8009800 <HAL_TIM_Encoder_Init+0x140>)
 800973c:	4013      	ands	r3, r2
 800973e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	689a      	ldr	r2, [r3, #8]
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	699b      	ldr	r3, [r3, #24]
 8009748:	021b      	lsls	r3, r3, #8
 800974a:	4313      	orrs	r3, r2
 800974c:	693a      	ldr	r2, [r7, #16]
 800974e:	4313      	orrs	r3, r2
 8009750:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009752:	693a      	ldr	r2, [r7, #16]
 8009754:	4b2b      	ldr	r3, [pc, #172]	@ (8009804 <HAL_TIM_Encoder_Init+0x144>)
 8009756:	4013      	ands	r3, r2
 8009758:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800975a:	693a      	ldr	r2, [r7, #16]
 800975c:	4b2a      	ldr	r3, [pc, #168]	@ (8009808 <HAL_TIM_Encoder_Init+0x148>)
 800975e:	4013      	ands	r3, r2
 8009760:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	68da      	ldr	r2, [r3, #12]
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	69db      	ldr	r3, [r3, #28]
 800976a:	021b      	lsls	r3, r3, #8
 800976c:	4313      	orrs	r3, r2
 800976e:	693a      	ldr	r2, [r7, #16]
 8009770:	4313      	orrs	r3, r2
 8009772:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	691b      	ldr	r3, [r3, #16]
 8009778:	011a      	lsls	r2, r3, #4
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	6a1b      	ldr	r3, [r3, #32]
 800977e:	031b      	lsls	r3, r3, #12
 8009780:	4313      	orrs	r3, r2
 8009782:	693a      	ldr	r2, [r7, #16]
 8009784:	4313      	orrs	r3, r2
 8009786:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800978e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8009796:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	685a      	ldr	r2, [r3, #4]
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	695b      	ldr	r3, [r3, #20]
 80097a0:	011b      	lsls	r3, r3, #4
 80097a2:	4313      	orrs	r3, r2
 80097a4:	68fa      	ldr	r2, [r7, #12]
 80097a6:	4313      	orrs	r3, r2
 80097a8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	697a      	ldr	r2, [r7, #20]
 80097b0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	693a      	ldr	r2, [r7, #16]
 80097b8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	68fa      	ldr	r2, [r7, #12]
 80097c0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2201      	movs	r2, #1
 80097c6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2201      	movs	r2, #1
 80097ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2201      	movs	r2, #1
 80097d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2201      	movs	r2, #1
 80097de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2201      	movs	r2, #1
 80097e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2201      	movs	r2, #1
 80097ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80097f2:	2300      	movs	r3, #0
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3718      	adds	r7, #24
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}
 80097fc:	fffebff8 	.word	0xfffebff8
 8009800:	fffffcfc 	.word	0xfffffcfc
 8009804:	fffff3f3 	.word	0xfffff3f3
 8009808:	ffff0f0f 	.word	0xffff0f0f

0800980c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800981c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009824:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800982c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009834:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d110      	bne.n	800985e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800983c:	7bfb      	ldrb	r3, [r7, #15]
 800983e:	2b01      	cmp	r3, #1
 8009840:	d102      	bne.n	8009848 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009842:	7b7b      	ldrb	r3, [r7, #13]
 8009844:	2b01      	cmp	r3, #1
 8009846:	d001      	beq.n	800984c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8009848:	2301      	movs	r3, #1
 800984a:	e089      	b.n	8009960 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2202      	movs	r2, #2
 8009850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2202      	movs	r2, #2
 8009858:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800985c:	e031      	b.n	80098c2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	2b04      	cmp	r3, #4
 8009862:	d110      	bne.n	8009886 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009864:	7bbb      	ldrb	r3, [r7, #14]
 8009866:	2b01      	cmp	r3, #1
 8009868:	d102      	bne.n	8009870 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800986a:	7b3b      	ldrb	r3, [r7, #12]
 800986c:	2b01      	cmp	r3, #1
 800986e:	d001      	beq.n	8009874 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8009870:	2301      	movs	r3, #1
 8009872:	e075      	b.n	8009960 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2202      	movs	r2, #2
 8009878:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2202      	movs	r2, #2
 8009880:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009884:	e01d      	b.n	80098c2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009886:	7bfb      	ldrb	r3, [r7, #15]
 8009888:	2b01      	cmp	r3, #1
 800988a:	d108      	bne.n	800989e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800988c:	7bbb      	ldrb	r3, [r7, #14]
 800988e:	2b01      	cmp	r3, #1
 8009890:	d105      	bne.n	800989e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009892:	7b7b      	ldrb	r3, [r7, #13]
 8009894:	2b01      	cmp	r3, #1
 8009896:	d102      	bne.n	800989e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009898:	7b3b      	ldrb	r3, [r7, #12]
 800989a:	2b01      	cmp	r3, #1
 800989c:	d001      	beq.n	80098a2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800989e:	2301      	movs	r3, #1
 80098a0:	e05e      	b.n	8009960 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2202      	movs	r2, #2
 80098a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2202      	movs	r2, #2
 80098ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2202      	movs	r2, #2
 80098b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2202      	movs	r2, #2
 80098be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d003      	beq.n	80098d0 <HAL_TIM_Encoder_Start_IT+0xc4>
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	2b04      	cmp	r3, #4
 80098cc:	d010      	beq.n	80098f0 <HAL_TIM_Encoder_Start_IT+0xe4>
 80098ce:	e01f      	b.n	8009910 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	2201      	movs	r2, #1
 80098d6:	2100      	movs	r1, #0
 80098d8:	4618      	mov	r0, r3
 80098da:	f000 ff9b 	bl	800a814 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	68da      	ldr	r2, [r3, #12]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f042 0202 	orr.w	r2, r2, #2
 80098ec:	60da      	str	r2, [r3, #12]
      break;
 80098ee:	e02e      	b.n	800994e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	2201      	movs	r2, #1
 80098f6:	2104      	movs	r1, #4
 80098f8:	4618      	mov	r0, r3
 80098fa:	f000 ff8b 	bl	800a814 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	68da      	ldr	r2, [r3, #12]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f042 0204 	orr.w	r2, r2, #4
 800990c:	60da      	str	r2, [r3, #12]
      break;
 800990e:	e01e      	b.n	800994e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	2201      	movs	r2, #1
 8009916:	2100      	movs	r1, #0
 8009918:	4618      	mov	r0, r3
 800991a:	f000 ff7b 	bl	800a814 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	2201      	movs	r2, #1
 8009924:	2104      	movs	r1, #4
 8009926:	4618      	mov	r0, r3
 8009928:	f000 ff74 	bl	800a814 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	68da      	ldr	r2, [r3, #12]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f042 0202 	orr.w	r2, r2, #2
 800993a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	68da      	ldr	r2, [r3, #12]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f042 0204 	orr.w	r2, r2, #4
 800994a:	60da      	str	r2, [r3, #12]
      break;
 800994c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	681a      	ldr	r2, [r3, #0]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f042 0201 	orr.w	r2, r2, #1
 800995c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800995e:	2300      	movs	r3, #0
}
 8009960:	4618      	mov	r0, r3
 8009962:	3710      	adds	r7, #16
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b084      	sub	sp, #16
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	68db      	ldr	r3, [r3, #12]
 8009976:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	691b      	ldr	r3, [r3, #16]
 800997e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	f003 0302 	and.w	r3, r3, #2
 8009986:	2b00      	cmp	r3, #0
 8009988:	d020      	beq.n	80099cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f003 0302 	and.w	r3, r3, #2
 8009990:	2b00      	cmp	r3, #0
 8009992:	d01b      	beq.n	80099cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f06f 0202 	mvn.w	r2, #2
 800999c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2201      	movs	r2, #1
 80099a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	699b      	ldr	r3, [r3, #24]
 80099aa:	f003 0303 	and.w	r3, r3, #3
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d003      	beq.n	80099ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f7f7 f992 	bl	8000cdc <HAL_TIM_IC_CaptureCallback>
 80099b8:	e005      	b.n	80099c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f000 faf2 	bl	8009fa4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 faf9 	bl	8009fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2200      	movs	r2, #0
 80099ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	f003 0304 	and.w	r3, r3, #4
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d020      	beq.n	8009a18 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	f003 0304 	and.w	r3, r3, #4
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d01b      	beq.n	8009a18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f06f 0204 	mvn.w	r2, #4
 80099e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2202      	movs	r2, #2
 80099ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	699b      	ldr	r3, [r3, #24]
 80099f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d003      	beq.n	8009a06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f7f7 f96c 	bl	8000cdc <HAL_TIM_IC_CaptureCallback>
 8009a04:	e005      	b.n	8009a12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 facc 	bl	8009fa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f000 fad3 	bl	8009fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2200      	movs	r2, #0
 8009a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	f003 0308 	and.w	r3, r3, #8
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d020      	beq.n	8009a64 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	f003 0308 	and.w	r3, r3, #8
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d01b      	beq.n	8009a64 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f06f 0208 	mvn.w	r2, #8
 8009a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2204      	movs	r2, #4
 8009a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	69db      	ldr	r3, [r3, #28]
 8009a42:	f003 0303 	and.w	r3, r3, #3
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d003      	beq.n	8009a52 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f7f7 f946 	bl	8000cdc <HAL_TIM_IC_CaptureCallback>
 8009a50:	e005      	b.n	8009a5e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 faa6 	bl	8009fa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 faad 	bl	8009fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2200      	movs	r2, #0
 8009a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	f003 0310 	and.w	r3, r3, #16
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d020      	beq.n	8009ab0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	f003 0310 	and.w	r3, r3, #16
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d01b      	beq.n	8009ab0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f06f 0210 	mvn.w	r2, #16
 8009a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2208      	movs	r2, #8
 8009a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	69db      	ldr	r3, [r3, #28]
 8009a8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d003      	beq.n	8009a9e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f7f7 f920 	bl	8000cdc <HAL_TIM_IC_CaptureCallback>
 8009a9c:	e005      	b.n	8009aaa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 fa80 	bl	8009fa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 fa87 	bl	8009fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	f003 0301 	and.w	r3, r3, #1
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d00c      	beq.n	8009ad4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	f003 0301 	and.w	r3, r3, #1
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d007      	beq.n	8009ad4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f06f 0201 	mvn.w	r2, #1
 8009acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 fa5e 	bl	8009f90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d104      	bne.n	8009ae8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d00c      	beq.n	8009b02 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d007      	beq.n	8009b02 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 ff47 	bl	800a990 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d00c      	beq.n	8009b26 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d007      	beq.n	8009b26 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009b1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 ff3f 	bl	800a9a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d00c      	beq.n	8009b4a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d007      	beq.n	8009b4a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 fa41 	bl	8009fcc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	f003 0320 	and.w	r3, r3, #32
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d00c      	beq.n	8009b6e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f003 0320 	and.w	r3, r3, #32
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d007      	beq.n	8009b6e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f06f 0220 	mvn.w	r2, #32
 8009b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f000 ff07 	bl	800a97c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009b6e:	bf00      	nop
 8009b70:	3710      	adds	r7, #16
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
	...

08009b78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b086      	sub	sp, #24
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	60f8      	str	r0, [r7, #12]
 8009b80:	60b9      	str	r1, [r7, #8]
 8009b82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b84:	2300      	movs	r3, #0
 8009b86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	d101      	bne.n	8009b96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009b92:	2302      	movs	r3, #2
 8009b94:	e0ff      	b.n	8009d96 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2201      	movs	r2, #1
 8009b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2b14      	cmp	r3, #20
 8009ba2:	f200 80f0 	bhi.w	8009d86 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8009bac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bac:	08009c01 	.word	0x08009c01
 8009bb0:	08009d87 	.word	0x08009d87
 8009bb4:	08009d87 	.word	0x08009d87
 8009bb8:	08009d87 	.word	0x08009d87
 8009bbc:	08009c41 	.word	0x08009c41
 8009bc0:	08009d87 	.word	0x08009d87
 8009bc4:	08009d87 	.word	0x08009d87
 8009bc8:	08009d87 	.word	0x08009d87
 8009bcc:	08009c83 	.word	0x08009c83
 8009bd0:	08009d87 	.word	0x08009d87
 8009bd4:	08009d87 	.word	0x08009d87
 8009bd8:	08009d87 	.word	0x08009d87
 8009bdc:	08009cc3 	.word	0x08009cc3
 8009be0:	08009d87 	.word	0x08009d87
 8009be4:	08009d87 	.word	0x08009d87
 8009be8:	08009d87 	.word	0x08009d87
 8009bec:	08009d05 	.word	0x08009d05
 8009bf0:	08009d87 	.word	0x08009d87
 8009bf4:	08009d87 	.word	0x08009d87
 8009bf8:	08009d87 	.word	0x08009d87
 8009bfc:	08009d45 	.word	0x08009d45
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	68b9      	ldr	r1, [r7, #8]
 8009c06:	4618      	mov	r0, r3
 8009c08:	f000 fa90 	bl	800a12c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	699a      	ldr	r2, [r3, #24]
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f042 0208 	orr.w	r2, r2, #8
 8009c1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	699a      	ldr	r2, [r3, #24]
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f022 0204 	bic.w	r2, r2, #4
 8009c2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	6999      	ldr	r1, [r3, #24]
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	691a      	ldr	r2, [r3, #16]
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	430a      	orrs	r2, r1
 8009c3c:	619a      	str	r2, [r3, #24]
      break;
 8009c3e:	e0a5      	b.n	8009d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	68b9      	ldr	r1, [r7, #8]
 8009c46:	4618      	mov	r0, r3
 8009c48:	f000 fb00 	bl	800a24c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	699a      	ldr	r2, [r3, #24]
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009c5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	699a      	ldr	r2, [r3, #24]
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009c6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	6999      	ldr	r1, [r3, #24]
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	691b      	ldr	r3, [r3, #16]
 8009c76:	021a      	lsls	r2, r3, #8
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	430a      	orrs	r2, r1
 8009c7e:	619a      	str	r2, [r3, #24]
      break;
 8009c80:	e084      	b.n	8009d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	68b9      	ldr	r1, [r7, #8]
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f000 fb69 	bl	800a360 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	69da      	ldr	r2, [r3, #28]
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f042 0208 	orr.w	r2, r2, #8
 8009c9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	69da      	ldr	r2, [r3, #28]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f022 0204 	bic.w	r2, r2, #4
 8009cac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	69d9      	ldr	r1, [r3, #28]
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	691a      	ldr	r2, [r3, #16]
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	430a      	orrs	r2, r1
 8009cbe:	61da      	str	r2, [r3, #28]
      break;
 8009cc0:	e064      	b.n	8009d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	68b9      	ldr	r1, [r7, #8]
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f000 fbd1 	bl	800a470 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	69da      	ldr	r2, [r3, #28]
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009cdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	69da      	ldr	r2, [r3, #28]
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009cec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	69d9      	ldr	r1, [r3, #28]
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	691b      	ldr	r3, [r3, #16]
 8009cf8:	021a      	lsls	r2, r3, #8
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	430a      	orrs	r2, r1
 8009d00:	61da      	str	r2, [r3, #28]
      break;
 8009d02:	e043      	b.n	8009d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	68b9      	ldr	r1, [r7, #8]
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f000 fc1a 	bl	800a544 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f042 0208 	orr.w	r2, r2, #8
 8009d1e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f022 0204 	bic.w	r2, r2, #4
 8009d2e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	691a      	ldr	r2, [r3, #16]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	430a      	orrs	r2, r1
 8009d40:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009d42:	e023      	b.n	8009d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	68b9      	ldr	r1, [r7, #8]
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f000 fc5e 	bl	800a60c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009d5e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009d6e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	691b      	ldr	r3, [r3, #16]
 8009d7a:	021a      	lsls	r2, r3, #8
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	430a      	orrs	r2, r1
 8009d82:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009d84:	e002      	b.n	8009d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009d86:	2301      	movs	r3, #1
 8009d88:	75fb      	strb	r3, [r7, #23]
      break;
 8009d8a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3718      	adds	r7, #24
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop

08009da0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b084      	sub	sp, #16
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009daa:	2300      	movs	r3, #0
 8009dac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d101      	bne.n	8009dbc <HAL_TIM_ConfigClockSource+0x1c>
 8009db8:	2302      	movs	r3, #2
 8009dba:	e0dc      	b.n	8009f76 <HAL_TIM_ConfigClockSource+0x1d6>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2202      	movs	r2, #2
 8009dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	689b      	ldr	r3, [r3, #8]
 8009dd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009dd4:	68ba      	ldr	r2, [r7, #8]
 8009dd6:	4b6a      	ldr	r3, [pc, #424]	@ (8009f80 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009dd8:	4013      	ands	r3, r2
 8009dda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009de2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	68ba      	ldr	r2, [r7, #8]
 8009dea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a64      	ldr	r2, [pc, #400]	@ (8009f84 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	f000 80a9 	beq.w	8009f4a <HAL_TIM_ConfigClockSource+0x1aa>
 8009df8:	4a62      	ldr	r2, [pc, #392]	@ (8009f84 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	f200 80ae 	bhi.w	8009f5c <HAL_TIM_ConfigClockSource+0x1bc>
 8009e00:	4a61      	ldr	r2, [pc, #388]	@ (8009f88 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	f000 80a1 	beq.w	8009f4a <HAL_TIM_ConfigClockSource+0x1aa>
 8009e08:	4a5f      	ldr	r2, [pc, #380]	@ (8009f88 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	f200 80a6 	bhi.w	8009f5c <HAL_TIM_ConfigClockSource+0x1bc>
 8009e10:	4a5e      	ldr	r2, [pc, #376]	@ (8009f8c <HAL_TIM_ConfigClockSource+0x1ec>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	f000 8099 	beq.w	8009f4a <HAL_TIM_ConfigClockSource+0x1aa>
 8009e18:	4a5c      	ldr	r2, [pc, #368]	@ (8009f8c <HAL_TIM_ConfigClockSource+0x1ec>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	f200 809e 	bhi.w	8009f5c <HAL_TIM_ConfigClockSource+0x1bc>
 8009e20:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009e24:	f000 8091 	beq.w	8009f4a <HAL_TIM_ConfigClockSource+0x1aa>
 8009e28:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009e2c:	f200 8096 	bhi.w	8009f5c <HAL_TIM_ConfigClockSource+0x1bc>
 8009e30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e34:	f000 8089 	beq.w	8009f4a <HAL_TIM_ConfigClockSource+0x1aa>
 8009e38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e3c:	f200 808e 	bhi.w	8009f5c <HAL_TIM_ConfigClockSource+0x1bc>
 8009e40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e44:	d03e      	beq.n	8009ec4 <HAL_TIM_ConfigClockSource+0x124>
 8009e46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e4a:	f200 8087 	bhi.w	8009f5c <HAL_TIM_ConfigClockSource+0x1bc>
 8009e4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e52:	f000 8086 	beq.w	8009f62 <HAL_TIM_ConfigClockSource+0x1c2>
 8009e56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e5a:	d87f      	bhi.n	8009f5c <HAL_TIM_ConfigClockSource+0x1bc>
 8009e5c:	2b70      	cmp	r3, #112	@ 0x70
 8009e5e:	d01a      	beq.n	8009e96 <HAL_TIM_ConfigClockSource+0xf6>
 8009e60:	2b70      	cmp	r3, #112	@ 0x70
 8009e62:	d87b      	bhi.n	8009f5c <HAL_TIM_ConfigClockSource+0x1bc>
 8009e64:	2b60      	cmp	r3, #96	@ 0x60
 8009e66:	d050      	beq.n	8009f0a <HAL_TIM_ConfigClockSource+0x16a>
 8009e68:	2b60      	cmp	r3, #96	@ 0x60
 8009e6a:	d877      	bhi.n	8009f5c <HAL_TIM_ConfigClockSource+0x1bc>
 8009e6c:	2b50      	cmp	r3, #80	@ 0x50
 8009e6e:	d03c      	beq.n	8009eea <HAL_TIM_ConfigClockSource+0x14a>
 8009e70:	2b50      	cmp	r3, #80	@ 0x50
 8009e72:	d873      	bhi.n	8009f5c <HAL_TIM_ConfigClockSource+0x1bc>
 8009e74:	2b40      	cmp	r3, #64	@ 0x40
 8009e76:	d058      	beq.n	8009f2a <HAL_TIM_ConfigClockSource+0x18a>
 8009e78:	2b40      	cmp	r3, #64	@ 0x40
 8009e7a:	d86f      	bhi.n	8009f5c <HAL_TIM_ConfigClockSource+0x1bc>
 8009e7c:	2b30      	cmp	r3, #48	@ 0x30
 8009e7e:	d064      	beq.n	8009f4a <HAL_TIM_ConfigClockSource+0x1aa>
 8009e80:	2b30      	cmp	r3, #48	@ 0x30
 8009e82:	d86b      	bhi.n	8009f5c <HAL_TIM_ConfigClockSource+0x1bc>
 8009e84:	2b20      	cmp	r3, #32
 8009e86:	d060      	beq.n	8009f4a <HAL_TIM_ConfigClockSource+0x1aa>
 8009e88:	2b20      	cmp	r3, #32
 8009e8a:	d867      	bhi.n	8009f5c <HAL_TIM_ConfigClockSource+0x1bc>
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d05c      	beq.n	8009f4a <HAL_TIM_ConfigClockSource+0x1aa>
 8009e90:	2b10      	cmp	r3, #16
 8009e92:	d05a      	beq.n	8009f4a <HAL_TIM_ConfigClockSource+0x1aa>
 8009e94:	e062      	b.n	8009f5c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009ea6:	f000 fc95 	bl	800a7d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	689b      	ldr	r3, [r3, #8]
 8009eb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009eb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	68ba      	ldr	r2, [r7, #8]
 8009ec0:	609a      	str	r2, [r3, #8]
      break;
 8009ec2:	e04f      	b.n	8009f64 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009ed4:	f000 fc7e 	bl	800a7d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	689a      	ldr	r2, [r3, #8]
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009ee6:	609a      	str	r2, [r3, #8]
      break;
 8009ee8:	e03c      	b.n	8009f64 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	f000 fbee 	bl	800a6d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	2150      	movs	r1, #80	@ 0x50
 8009f02:	4618      	mov	r0, r3
 8009f04:	f000 fc48 	bl	800a798 <TIM_ITRx_SetConfig>
      break;
 8009f08:	e02c      	b.n	8009f64 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009f16:	461a      	mov	r2, r3
 8009f18:	f000 fc0d 	bl	800a736 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	2160      	movs	r1, #96	@ 0x60
 8009f22:	4618      	mov	r0, r3
 8009f24:	f000 fc38 	bl	800a798 <TIM_ITRx_SetConfig>
      break;
 8009f28:	e01c      	b.n	8009f64 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f36:	461a      	mov	r2, r3
 8009f38:	f000 fbce 	bl	800a6d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	2140      	movs	r1, #64	@ 0x40
 8009f42:	4618      	mov	r0, r3
 8009f44:	f000 fc28 	bl	800a798 <TIM_ITRx_SetConfig>
      break;
 8009f48:	e00c      	b.n	8009f64 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681a      	ldr	r2, [r3, #0]
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	4619      	mov	r1, r3
 8009f54:	4610      	mov	r0, r2
 8009f56:	f000 fc1f 	bl	800a798 <TIM_ITRx_SetConfig>
      break;
 8009f5a:	e003      	b.n	8009f64 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8009f60:	e000      	b.n	8009f64 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009f62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2201      	movs	r2, #1
 8009f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3710      	adds	r7, #16
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
 8009f7e:	bf00      	nop
 8009f80:	ffceff88 	.word	0xffceff88
 8009f84:	00100040 	.word	0x00100040
 8009f88:	00100030 	.word	0x00100030
 8009f8c:	00100020 	.word	0x00100020

08009f90 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b083      	sub	sp, #12
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009f98:	bf00      	nop
 8009f9a:	370c      	adds	r7, #12
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr

08009fa4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009fac:	bf00      	nop
 8009fae:	370c      	adds	r7, #12
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr

08009fb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b083      	sub	sp, #12
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009fc0:	bf00      	nop
 8009fc2:	370c      	adds	r7, #12
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr

08009fcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b083      	sub	sp, #12
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009fd4:	bf00      	nop
 8009fd6:	370c      	adds	r7, #12
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr

08009fe0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b085      	sub	sp, #20
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	4a46      	ldr	r2, [pc, #280]	@ (800a10c <TIM_Base_SetConfig+0x12c>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d013      	beq.n	800a020 <TIM_Base_SetConfig+0x40>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ffe:	d00f      	beq.n	800a020 <TIM_Base_SetConfig+0x40>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	4a43      	ldr	r2, [pc, #268]	@ (800a110 <TIM_Base_SetConfig+0x130>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d00b      	beq.n	800a020 <TIM_Base_SetConfig+0x40>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	4a42      	ldr	r2, [pc, #264]	@ (800a114 <TIM_Base_SetConfig+0x134>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d007      	beq.n	800a020 <TIM_Base_SetConfig+0x40>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	4a41      	ldr	r2, [pc, #260]	@ (800a118 <TIM_Base_SetConfig+0x138>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d003      	beq.n	800a020 <TIM_Base_SetConfig+0x40>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	4a40      	ldr	r2, [pc, #256]	@ (800a11c <TIM_Base_SetConfig+0x13c>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d108      	bne.n	800a032 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a026:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	68fa      	ldr	r2, [r7, #12]
 800a02e:	4313      	orrs	r3, r2
 800a030:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	4a35      	ldr	r2, [pc, #212]	@ (800a10c <TIM_Base_SetConfig+0x12c>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d01f      	beq.n	800a07a <TIM_Base_SetConfig+0x9a>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a040:	d01b      	beq.n	800a07a <TIM_Base_SetConfig+0x9a>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	4a32      	ldr	r2, [pc, #200]	@ (800a110 <TIM_Base_SetConfig+0x130>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d017      	beq.n	800a07a <TIM_Base_SetConfig+0x9a>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	4a31      	ldr	r2, [pc, #196]	@ (800a114 <TIM_Base_SetConfig+0x134>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d013      	beq.n	800a07a <TIM_Base_SetConfig+0x9a>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	4a30      	ldr	r2, [pc, #192]	@ (800a118 <TIM_Base_SetConfig+0x138>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d00f      	beq.n	800a07a <TIM_Base_SetConfig+0x9a>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	4a2f      	ldr	r2, [pc, #188]	@ (800a11c <TIM_Base_SetConfig+0x13c>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d00b      	beq.n	800a07a <TIM_Base_SetConfig+0x9a>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	4a2e      	ldr	r2, [pc, #184]	@ (800a120 <TIM_Base_SetConfig+0x140>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d007      	beq.n	800a07a <TIM_Base_SetConfig+0x9a>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	4a2d      	ldr	r2, [pc, #180]	@ (800a124 <TIM_Base_SetConfig+0x144>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d003      	beq.n	800a07a <TIM_Base_SetConfig+0x9a>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	4a2c      	ldr	r2, [pc, #176]	@ (800a128 <TIM_Base_SetConfig+0x148>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d108      	bne.n	800a08c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a080:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	68db      	ldr	r3, [r3, #12]
 800a086:	68fa      	ldr	r2, [r7, #12]
 800a088:	4313      	orrs	r3, r2
 800a08a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	695b      	ldr	r3, [r3, #20]
 800a096:	4313      	orrs	r3, r2
 800a098:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	68fa      	ldr	r2, [r7, #12]
 800a09e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	689a      	ldr	r2, [r3, #8]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	681a      	ldr	r2, [r3, #0]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	4a16      	ldr	r2, [pc, #88]	@ (800a10c <TIM_Base_SetConfig+0x12c>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d00f      	beq.n	800a0d8 <TIM_Base_SetConfig+0xf8>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	4a18      	ldr	r2, [pc, #96]	@ (800a11c <TIM_Base_SetConfig+0x13c>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d00b      	beq.n	800a0d8 <TIM_Base_SetConfig+0xf8>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	4a17      	ldr	r2, [pc, #92]	@ (800a120 <TIM_Base_SetConfig+0x140>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d007      	beq.n	800a0d8 <TIM_Base_SetConfig+0xf8>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	4a16      	ldr	r2, [pc, #88]	@ (800a124 <TIM_Base_SetConfig+0x144>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d003      	beq.n	800a0d8 <TIM_Base_SetConfig+0xf8>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	4a15      	ldr	r2, [pc, #84]	@ (800a128 <TIM_Base_SetConfig+0x148>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d103      	bne.n	800a0e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	691a      	ldr	r2, [r3, #16]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	691b      	ldr	r3, [r3, #16]
 800a0ea:	f003 0301 	and.w	r3, r3, #1
 800a0ee:	2b01      	cmp	r3, #1
 800a0f0:	d105      	bne.n	800a0fe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	691b      	ldr	r3, [r3, #16]
 800a0f6:	f023 0201 	bic.w	r2, r3, #1
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	611a      	str	r2, [r3, #16]
  }
}
 800a0fe:	bf00      	nop
 800a100:	3714      	adds	r7, #20
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr
 800a10a:	bf00      	nop
 800a10c:	40010000 	.word	0x40010000
 800a110:	40000400 	.word	0x40000400
 800a114:	40000800 	.word	0x40000800
 800a118:	40000c00 	.word	0x40000c00
 800a11c:	40010400 	.word	0x40010400
 800a120:	40014000 	.word	0x40014000
 800a124:	40014400 	.word	0x40014400
 800a128:	40014800 	.word	0x40014800

0800a12c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b087      	sub	sp, #28
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
 800a134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6a1b      	ldr	r3, [r3, #32]
 800a13a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6a1b      	ldr	r3, [r3, #32]
 800a140:	f023 0201 	bic.w	r2, r3, #1
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	699b      	ldr	r3, [r3, #24]
 800a152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a154:	68fa      	ldr	r2, [r7, #12]
 800a156:	4b37      	ldr	r3, [pc, #220]	@ (800a234 <TIM_OC1_SetConfig+0x108>)
 800a158:	4013      	ands	r3, r2
 800a15a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f023 0303 	bic.w	r3, r3, #3
 800a162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	68fa      	ldr	r2, [r7, #12]
 800a16a:	4313      	orrs	r3, r2
 800a16c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	f023 0302 	bic.w	r3, r3, #2
 800a174:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	689b      	ldr	r3, [r3, #8]
 800a17a:	697a      	ldr	r2, [r7, #20]
 800a17c:	4313      	orrs	r3, r2
 800a17e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	4a2d      	ldr	r2, [pc, #180]	@ (800a238 <TIM_OC1_SetConfig+0x10c>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d00f      	beq.n	800a1a8 <TIM_OC1_SetConfig+0x7c>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	4a2c      	ldr	r2, [pc, #176]	@ (800a23c <TIM_OC1_SetConfig+0x110>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d00b      	beq.n	800a1a8 <TIM_OC1_SetConfig+0x7c>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	4a2b      	ldr	r2, [pc, #172]	@ (800a240 <TIM_OC1_SetConfig+0x114>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d007      	beq.n	800a1a8 <TIM_OC1_SetConfig+0x7c>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	4a2a      	ldr	r2, [pc, #168]	@ (800a244 <TIM_OC1_SetConfig+0x118>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d003      	beq.n	800a1a8 <TIM_OC1_SetConfig+0x7c>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	4a29      	ldr	r2, [pc, #164]	@ (800a248 <TIM_OC1_SetConfig+0x11c>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d10c      	bne.n	800a1c2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	f023 0308 	bic.w	r3, r3, #8
 800a1ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	68db      	ldr	r3, [r3, #12]
 800a1b4:	697a      	ldr	r2, [r7, #20]
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	f023 0304 	bic.w	r3, r3, #4
 800a1c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	4a1c      	ldr	r2, [pc, #112]	@ (800a238 <TIM_OC1_SetConfig+0x10c>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d00f      	beq.n	800a1ea <TIM_OC1_SetConfig+0xbe>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	4a1b      	ldr	r2, [pc, #108]	@ (800a23c <TIM_OC1_SetConfig+0x110>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d00b      	beq.n	800a1ea <TIM_OC1_SetConfig+0xbe>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	4a1a      	ldr	r2, [pc, #104]	@ (800a240 <TIM_OC1_SetConfig+0x114>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d007      	beq.n	800a1ea <TIM_OC1_SetConfig+0xbe>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	4a19      	ldr	r2, [pc, #100]	@ (800a244 <TIM_OC1_SetConfig+0x118>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d003      	beq.n	800a1ea <TIM_OC1_SetConfig+0xbe>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	4a18      	ldr	r2, [pc, #96]	@ (800a248 <TIM_OC1_SetConfig+0x11c>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d111      	bne.n	800a20e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a1f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a1f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	695b      	ldr	r3, [r3, #20]
 800a1fe:	693a      	ldr	r2, [r7, #16]
 800a200:	4313      	orrs	r3, r2
 800a202:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	699b      	ldr	r3, [r3, #24]
 800a208:	693a      	ldr	r2, [r7, #16]
 800a20a:	4313      	orrs	r3, r2
 800a20c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	693a      	ldr	r2, [r7, #16]
 800a212:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	68fa      	ldr	r2, [r7, #12]
 800a218:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	685a      	ldr	r2, [r3, #4]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	697a      	ldr	r2, [r7, #20]
 800a226:	621a      	str	r2, [r3, #32]
}
 800a228:	bf00      	nop
 800a22a:	371c      	adds	r7, #28
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr
 800a234:	fffeff8f 	.word	0xfffeff8f
 800a238:	40010000 	.word	0x40010000
 800a23c:	40010400 	.word	0x40010400
 800a240:	40014000 	.word	0x40014000
 800a244:	40014400 	.word	0x40014400
 800a248:	40014800 	.word	0x40014800

0800a24c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b087      	sub	sp, #28
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6a1b      	ldr	r3, [r3, #32]
 800a25a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6a1b      	ldr	r3, [r3, #32]
 800a260:	f023 0210 	bic.w	r2, r3, #16
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	699b      	ldr	r3, [r3, #24]
 800a272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a274:	68fa      	ldr	r2, [r7, #12]
 800a276:	4b34      	ldr	r3, [pc, #208]	@ (800a348 <TIM_OC2_SetConfig+0xfc>)
 800a278:	4013      	ands	r3, r2
 800a27a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a282:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	021b      	lsls	r3, r3, #8
 800a28a:	68fa      	ldr	r2, [r7, #12]
 800a28c:	4313      	orrs	r3, r2
 800a28e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	f023 0320 	bic.w	r3, r3, #32
 800a296:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	689b      	ldr	r3, [r3, #8]
 800a29c:	011b      	lsls	r3, r3, #4
 800a29e:	697a      	ldr	r2, [r7, #20]
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	4a29      	ldr	r2, [pc, #164]	@ (800a34c <TIM_OC2_SetConfig+0x100>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d003      	beq.n	800a2b4 <TIM_OC2_SetConfig+0x68>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	4a28      	ldr	r2, [pc, #160]	@ (800a350 <TIM_OC2_SetConfig+0x104>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d10d      	bne.n	800a2d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a2ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	68db      	ldr	r3, [r3, #12]
 800a2c0:	011b      	lsls	r3, r3, #4
 800a2c2:	697a      	ldr	r2, [r7, #20]
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a2ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	4a1e      	ldr	r2, [pc, #120]	@ (800a34c <TIM_OC2_SetConfig+0x100>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d00f      	beq.n	800a2f8 <TIM_OC2_SetConfig+0xac>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	4a1d      	ldr	r2, [pc, #116]	@ (800a350 <TIM_OC2_SetConfig+0x104>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d00b      	beq.n	800a2f8 <TIM_OC2_SetConfig+0xac>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	4a1c      	ldr	r2, [pc, #112]	@ (800a354 <TIM_OC2_SetConfig+0x108>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d007      	beq.n	800a2f8 <TIM_OC2_SetConfig+0xac>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	4a1b      	ldr	r2, [pc, #108]	@ (800a358 <TIM_OC2_SetConfig+0x10c>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d003      	beq.n	800a2f8 <TIM_OC2_SetConfig+0xac>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	4a1a      	ldr	r2, [pc, #104]	@ (800a35c <TIM_OC2_SetConfig+0x110>)
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	d113      	bne.n	800a320 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a2fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a306:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	695b      	ldr	r3, [r3, #20]
 800a30c:	009b      	lsls	r3, r3, #2
 800a30e:	693a      	ldr	r2, [r7, #16]
 800a310:	4313      	orrs	r3, r2
 800a312:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	699b      	ldr	r3, [r3, #24]
 800a318:	009b      	lsls	r3, r3, #2
 800a31a:	693a      	ldr	r2, [r7, #16]
 800a31c:	4313      	orrs	r3, r2
 800a31e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	693a      	ldr	r2, [r7, #16]
 800a324:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	68fa      	ldr	r2, [r7, #12]
 800a32a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	685a      	ldr	r2, [r3, #4]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	697a      	ldr	r2, [r7, #20]
 800a338:	621a      	str	r2, [r3, #32]
}
 800a33a:	bf00      	nop
 800a33c:	371c      	adds	r7, #28
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr
 800a346:	bf00      	nop
 800a348:	feff8fff 	.word	0xfeff8fff
 800a34c:	40010000 	.word	0x40010000
 800a350:	40010400 	.word	0x40010400
 800a354:	40014000 	.word	0x40014000
 800a358:	40014400 	.word	0x40014400
 800a35c:	40014800 	.word	0x40014800

0800a360 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a360:	b480      	push	{r7}
 800a362:	b087      	sub	sp, #28
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6a1b      	ldr	r3, [r3, #32]
 800a36e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6a1b      	ldr	r3, [r3, #32]
 800a374:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	69db      	ldr	r3, [r3, #28]
 800a386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a388:	68fa      	ldr	r2, [r7, #12]
 800a38a:	4b33      	ldr	r3, [pc, #204]	@ (800a458 <TIM_OC3_SetConfig+0xf8>)
 800a38c:	4013      	ands	r3, r2
 800a38e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f023 0303 	bic.w	r3, r3, #3
 800a396:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	68fa      	ldr	r2, [r7, #12]
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a3a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	689b      	ldr	r3, [r3, #8]
 800a3ae:	021b      	lsls	r3, r3, #8
 800a3b0:	697a      	ldr	r2, [r7, #20]
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	4a28      	ldr	r2, [pc, #160]	@ (800a45c <TIM_OC3_SetConfig+0xfc>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d003      	beq.n	800a3c6 <TIM_OC3_SetConfig+0x66>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	4a27      	ldr	r2, [pc, #156]	@ (800a460 <TIM_OC3_SetConfig+0x100>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d10d      	bne.n	800a3e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a3cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	68db      	ldr	r3, [r3, #12]
 800a3d2:	021b      	lsls	r3, r3, #8
 800a3d4:	697a      	ldr	r2, [r7, #20]
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a3e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	4a1d      	ldr	r2, [pc, #116]	@ (800a45c <TIM_OC3_SetConfig+0xfc>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d00f      	beq.n	800a40a <TIM_OC3_SetConfig+0xaa>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	4a1c      	ldr	r2, [pc, #112]	@ (800a460 <TIM_OC3_SetConfig+0x100>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d00b      	beq.n	800a40a <TIM_OC3_SetConfig+0xaa>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	4a1b      	ldr	r2, [pc, #108]	@ (800a464 <TIM_OC3_SetConfig+0x104>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d007      	beq.n	800a40a <TIM_OC3_SetConfig+0xaa>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	4a1a      	ldr	r2, [pc, #104]	@ (800a468 <TIM_OC3_SetConfig+0x108>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d003      	beq.n	800a40a <TIM_OC3_SetConfig+0xaa>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	4a19      	ldr	r2, [pc, #100]	@ (800a46c <TIM_OC3_SetConfig+0x10c>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d113      	bne.n	800a432 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a410:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a418:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	695b      	ldr	r3, [r3, #20]
 800a41e:	011b      	lsls	r3, r3, #4
 800a420:	693a      	ldr	r2, [r7, #16]
 800a422:	4313      	orrs	r3, r2
 800a424:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	699b      	ldr	r3, [r3, #24]
 800a42a:	011b      	lsls	r3, r3, #4
 800a42c:	693a      	ldr	r2, [r7, #16]
 800a42e:	4313      	orrs	r3, r2
 800a430:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	693a      	ldr	r2, [r7, #16]
 800a436:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	68fa      	ldr	r2, [r7, #12]
 800a43c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	685a      	ldr	r2, [r3, #4]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	697a      	ldr	r2, [r7, #20]
 800a44a:	621a      	str	r2, [r3, #32]
}
 800a44c:	bf00      	nop
 800a44e:	371c      	adds	r7, #28
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr
 800a458:	fffeff8f 	.word	0xfffeff8f
 800a45c:	40010000 	.word	0x40010000
 800a460:	40010400 	.word	0x40010400
 800a464:	40014000 	.word	0x40014000
 800a468:	40014400 	.word	0x40014400
 800a46c:	40014800 	.word	0x40014800

0800a470 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a470:	b480      	push	{r7}
 800a472:	b087      	sub	sp, #28
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6a1b      	ldr	r3, [r3, #32]
 800a47e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6a1b      	ldr	r3, [r3, #32]
 800a484:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	69db      	ldr	r3, [r3, #28]
 800a496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a498:	68fa      	ldr	r2, [r7, #12]
 800a49a:	4b24      	ldr	r3, [pc, #144]	@ (800a52c <TIM_OC4_SetConfig+0xbc>)
 800a49c:	4013      	ands	r3, r2
 800a49e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a4a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	021b      	lsls	r3, r3, #8
 800a4ae:	68fa      	ldr	r2, [r7, #12]
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a4ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	689b      	ldr	r3, [r3, #8]
 800a4c0:	031b      	lsls	r3, r3, #12
 800a4c2:	693a      	ldr	r2, [r7, #16]
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	4a19      	ldr	r2, [pc, #100]	@ (800a530 <TIM_OC4_SetConfig+0xc0>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d00f      	beq.n	800a4f0 <TIM_OC4_SetConfig+0x80>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	4a18      	ldr	r2, [pc, #96]	@ (800a534 <TIM_OC4_SetConfig+0xc4>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d00b      	beq.n	800a4f0 <TIM_OC4_SetConfig+0x80>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	4a17      	ldr	r2, [pc, #92]	@ (800a538 <TIM_OC4_SetConfig+0xc8>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d007      	beq.n	800a4f0 <TIM_OC4_SetConfig+0x80>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	4a16      	ldr	r2, [pc, #88]	@ (800a53c <TIM_OC4_SetConfig+0xcc>)
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d003      	beq.n	800a4f0 <TIM_OC4_SetConfig+0x80>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	4a15      	ldr	r2, [pc, #84]	@ (800a540 <TIM_OC4_SetConfig+0xd0>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d109      	bne.n	800a504 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a4f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	695b      	ldr	r3, [r3, #20]
 800a4fc:	019b      	lsls	r3, r3, #6
 800a4fe:	697a      	ldr	r2, [r7, #20]
 800a500:	4313      	orrs	r3, r2
 800a502:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	697a      	ldr	r2, [r7, #20]
 800a508:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	68fa      	ldr	r2, [r7, #12]
 800a50e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	685a      	ldr	r2, [r3, #4]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	693a      	ldr	r2, [r7, #16]
 800a51c:	621a      	str	r2, [r3, #32]
}
 800a51e:	bf00      	nop
 800a520:	371c      	adds	r7, #28
 800a522:	46bd      	mov	sp, r7
 800a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a528:	4770      	bx	lr
 800a52a:	bf00      	nop
 800a52c:	feff8fff 	.word	0xfeff8fff
 800a530:	40010000 	.word	0x40010000
 800a534:	40010400 	.word	0x40010400
 800a538:	40014000 	.word	0x40014000
 800a53c:	40014400 	.word	0x40014400
 800a540:	40014800 	.word	0x40014800

0800a544 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a544:	b480      	push	{r7}
 800a546:	b087      	sub	sp, #28
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6a1b      	ldr	r3, [r3, #32]
 800a552:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6a1b      	ldr	r3, [r3, #32]
 800a558:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a56a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a56c:	68fa      	ldr	r2, [r7, #12]
 800a56e:	4b21      	ldr	r3, [pc, #132]	@ (800a5f4 <TIM_OC5_SetConfig+0xb0>)
 800a570:	4013      	ands	r3, r2
 800a572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	68fa      	ldr	r2, [r7, #12]
 800a57a:	4313      	orrs	r3, r2
 800a57c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a584:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	689b      	ldr	r3, [r3, #8]
 800a58a:	041b      	lsls	r3, r3, #16
 800a58c:	693a      	ldr	r2, [r7, #16]
 800a58e:	4313      	orrs	r3, r2
 800a590:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	4a18      	ldr	r2, [pc, #96]	@ (800a5f8 <TIM_OC5_SetConfig+0xb4>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d00f      	beq.n	800a5ba <TIM_OC5_SetConfig+0x76>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	4a17      	ldr	r2, [pc, #92]	@ (800a5fc <TIM_OC5_SetConfig+0xb8>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d00b      	beq.n	800a5ba <TIM_OC5_SetConfig+0x76>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	4a16      	ldr	r2, [pc, #88]	@ (800a600 <TIM_OC5_SetConfig+0xbc>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d007      	beq.n	800a5ba <TIM_OC5_SetConfig+0x76>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	4a15      	ldr	r2, [pc, #84]	@ (800a604 <TIM_OC5_SetConfig+0xc0>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d003      	beq.n	800a5ba <TIM_OC5_SetConfig+0x76>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	4a14      	ldr	r2, [pc, #80]	@ (800a608 <TIM_OC5_SetConfig+0xc4>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d109      	bne.n	800a5ce <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a5c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	695b      	ldr	r3, [r3, #20]
 800a5c6:	021b      	lsls	r3, r3, #8
 800a5c8:	697a      	ldr	r2, [r7, #20]
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	697a      	ldr	r2, [r7, #20]
 800a5d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	68fa      	ldr	r2, [r7, #12]
 800a5d8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	685a      	ldr	r2, [r3, #4]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	693a      	ldr	r2, [r7, #16]
 800a5e6:	621a      	str	r2, [r3, #32]
}
 800a5e8:	bf00      	nop
 800a5ea:	371c      	adds	r7, #28
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr
 800a5f4:	fffeff8f 	.word	0xfffeff8f
 800a5f8:	40010000 	.word	0x40010000
 800a5fc:	40010400 	.word	0x40010400
 800a600:	40014000 	.word	0x40014000
 800a604:	40014400 	.word	0x40014400
 800a608:	40014800 	.word	0x40014800

0800a60c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b087      	sub	sp, #28
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6a1b      	ldr	r3, [r3, #32]
 800a61a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6a1b      	ldr	r3, [r3, #32]
 800a620:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a634:	68fa      	ldr	r2, [r7, #12]
 800a636:	4b22      	ldr	r3, [pc, #136]	@ (800a6c0 <TIM_OC6_SetConfig+0xb4>)
 800a638:	4013      	ands	r3, r2
 800a63a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	021b      	lsls	r3, r3, #8
 800a642:	68fa      	ldr	r2, [r7, #12]
 800a644:	4313      	orrs	r3, r2
 800a646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a64e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	689b      	ldr	r3, [r3, #8]
 800a654:	051b      	lsls	r3, r3, #20
 800a656:	693a      	ldr	r2, [r7, #16]
 800a658:	4313      	orrs	r3, r2
 800a65a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	4a19      	ldr	r2, [pc, #100]	@ (800a6c4 <TIM_OC6_SetConfig+0xb8>)
 800a660:	4293      	cmp	r3, r2
 800a662:	d00f      	beq.n	800a684 <TIM_OC6_SetConfig+0x78>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	4a18      	ldr	r2, [pc, #96]	@ (800a6c8 <TIM_OC6_SetConfig+0xbc>)
 800a668:	4293      	cmp	r3, r2
 800a66a:	d00b      	beq.n	800a684 <TIM_OC6_SetConfig+0x78>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	4a17      	ldr	r2, [pc, #92]	@ (800a6cc <TIM_OC6_SetConfig+0xc0>)
 800a670:	4293      	cmp	r3, r2
 800a672:	d007      	beq.n	800a684 <TIM_OC6_SetConfig+0x78>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	4a16      	ldr	r2, [pc, #88]	@ (800a6d0 <TIM_OC6_SetConfig+0xc4>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d003      	beq.n	800a684 <TIM_OC6_SetConfig+0x78>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	4a15      	ldr	r2, [pc, #84]	@ (800a6d4 <TIM_OC6_SetConfig+0xc8>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d109      	bne.n	800a698 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a68a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	695b      	ldr	r3, [r3, #20]
 800a690:	029b      	lsls	r3, r3, #10
 800a692:	697a      	ldr	r2, [r7, #20]
 800a694:	4313      	orrs	r3, r2
 800a696:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	697a      	ldr	r2, [r7, #20]
 800a69c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	68fa      	ldr	r2, [r7, #12]
 800a6a2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	685a      	ldr	r2, [r3, #4]
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	693a      	ldr	r2, [r7, #16]
 800a6b0:	621a      	str	r2, [r3, #32]
}
 800a6b2:	bf00      	nop
 800a6b4:	371c      	adds	r7, #28
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6bc:	4770      	bx	lr
 800a6be:	bf00      	nop
 800a6c0:	feff8fff 	.word	0xfeff8fff
 800a6c4:	40010000 	.word	0x40010000
 800a6c8:	40010400 	.word	0x40010400
 800a6cc:	40014000 	.word	0x40014000
 800a6d0:	40014400 	.word	0x40014400
 800a6d4:	40014800 	.word	0x40014800

0800a6d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b087      	sub	sp, #28
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	60f8      	str	r0, [r7, #12]
 800a6e0:	60b9      	str	r1, [r7, #8]
 800a6e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	6a1b      	ldr	r3, [r3, #32]
 800a6e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	6a1b      	ldr	r3, [r3, #32]
 800a6ee:	f023 0201 	bic.w	r2, r3, #1
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	699b      	ldr	r3, [r3, #24]
 800a6fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a702:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	011b      	lsls	r3, r3, #4
 800a708:	693a      	ldr	r2, [r7, #16]
 800a70a:	4313      	orrs	r3, r2
 800a70c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	f023 030a 	bic.w	r3, r3, #10
 800a714:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a716:	697a      	ldr	r2, [r7, #20]
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	4313      	orrs	r3, r2
 800a71c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	693a      	ldr	r2, [r7, #16]
 800a722:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	697a      	ldr	r2, [r7, #20]
 800a728:	621a      	str	r2, [r3, #32]
}
 800a72a:	bf00      	nop
 800a72c:	371c      	adds	r7, #28
 800a72e:	46bd      	mov	sp, r7
 800a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a734:	4770      	bx	lr

0800a736 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a736:	b480      	push	{r7}
 800a738:	b087      	sub	sp, #28
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	60f8      	str	r0, [r7, #12]
 800a73e:	60b9      	str	r1, [r7, #8]
 800a740:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	6a1b      	ldr	r3, [r3, #32]
 800a746:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	6a1b      	ldr	r3, [r3, #32]
 800a74c:	f023 0210 	bic.w	r2, r3, #16
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	699b      	ldr	r3, [r3, #24]
 800a758:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a760:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	031b      	lsls	r3, r3, #12
 800a766:	693a      	ldr	r2, [r7, #16]
 800a768:	4313      	orrs	r3, r2
 800a76a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a772:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	011b      	lsls	r3, r3, #4
 800a778:	697a      	ldr	r2, [r7, #20]
 800a77a:	4313      	orrs	r3, r2
 800a77c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	693a      	ldr	r2, [r7, #16]
 800a782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	697a      	ldr	r2, [r7, #20]
 800a788:	621a      	str	r2, [r3, #32]
}
 800a78a:	bf00      	nop
 800a78c:	371c      	adds	r7, #28
 800a78e:	46bd      	mov	sp, r7
 800a790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a794:	4770      	bx	lr
	...

0800a798 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a798:	b480      	push	{r7}
 800a79a:	b085      	sub	sp, #20
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	689b      	ldr	r3, [r3, #8]
 800a7a6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a7a8:	68fa      	ldr	r2, [r7, #12]
 800a7aa:	4b09      	ldr	r3, [pc, #36]	@ (800a7d0 <TIM_ITRx_SetConfig+0x38>)
 800a7ac:	4013      	ands	r3, r2
 800a7ae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a7b0:	683a      	ldr	r2, [r7, #0]
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	f043 0307 	orr.w	r3, r3, #7
 800a7ba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	68fa      	ldr	r2, [r7, #12]
 800a7c0:	609a      	str	r2, [r3, #8]
}
 800a7c2:	bf00      	nop
 800a7c4:	3714      	adds	r7, #20
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr
 800a7ce:	bf00      	nop
 800a7d0:	ffcfff8f 	.word	0xffcfff8f

0800a7d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b087      	sub	sp, #28
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]
 800a7e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	689b      	ldr	r3, [r3, #8]
 800a7e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a7ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	021a      	lsls	r2, r3, #8
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	431a      	orrs	r2, r3
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	697a      	ldr	r2, [r7, #20]
 800a7fe:	4313      	orrs	r3, r2
 800a800:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	697a      	ldr	r2, [r7, #20]
 800a806:	609a      	str	r2, [r3, #8]
}
 800a808:	bf00      	nop
 800a80a:	371c      	adds	r7, #28
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr

0800a814 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a814:	b480      	push	{r7}
 800a816:	b087      	sub	sp, #28
 800a818:	af00      	add	r7, sp, #0
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	f003 031f 	and.w	r3, r3, #31
 800a826:	2201      	movs	r2, #1
 800a828:	fa02 f303 	lsl.w	r3, r2, r3
 800a82c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	6a1a      	ldr	r2, [r3, #32]
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	43db      	mvns	r3, r3
 800a836:	401a      	ands	r2, r3
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	6a1a      	ldr	r2, [r3, #32]
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	f003 031f 	and.w	r3, r3, #31
 800a846:	6879      	ldr	r1, [r7, #4]
 800a848:	fa01 f303 	lsl.w	r3, r1, r3
 800a84c:	431a      	orrs	r2, r3
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	621a      	str	r2, [r3, #32]
}
 800a852:	bf00      	nop
 800a854:	371c      	adds	r7, #28
 800a856:	46bd      	mov	sp, r7
 800a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85c:	4770      	bx	lr
	...

0800a860 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a860:	b480      	push	{r7}
 800a862:	b085      	sub	sp, #20
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a870:	2b01      	cmp	r3, #1
 800a872:	d101      	bne.n	800a878 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a874:	2302      	movs	r3, #2
 800a876:	e06d      	b.n	800a954 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2201      	movs	r2, #1
 800a87c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2202      	movs	r2, #2
 800a884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	689b      	ldr	r3, [r3, #8]
 800a896:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4a30      	ldr	r2, [pc, #192]	@ (800a960 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d004      	beq.n	800a8ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4a2f      	ldr	r2, [pc, #188]	@ (800a964 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d108      	bne.n	800a8be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a8b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	685b      	ldr	r3, [r3, #4]
 800a8b8:	68fa      	ldr	r2, [r7, #12]
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	68fa      	ldr	r2, [r7, #12]
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	68fa      	ldr	r2, [r7, #12]
 800a8d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a20      	ldr	r2, [pc, #128]	@ (800a960 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d022      	beq.n	800a928 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8ea:	d01d      	beq.n	800a928 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a1d      	ldr	r2, [pc, #116]	@ (800a968 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d018      	beq.n	800a928 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4a1c      	ldr	r2, [pc, #112]	@ (800a96c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d013      	beq.n	800a928 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4a1a      	ldr	r2, [pc, #104]	@ (800a970 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d00e      	beq.n	800a928 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	4a15      	ldr	r2, [pc, #84]	@ (800a964 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d009      	beq.n	800a928 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4a16      	ldr	r2, [pc, #88]	@ (800a974 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d004      	beq.n	800a928 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4a15      	ldr	r2, [pc, #84]	@ (800a978 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d10c      	bne.n	800a942 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a92e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	689b      	ldr	r3, [r3, #8]
 800a934:	68ba      	ldr	r2, [r7, #8]
 800a936:	4313      	orrs	r3, r2
 800a938:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	68ba      	ldr	r2, [r7, #8]
 800a940:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2201      	movs	r2, #1
 800a946:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2200      	movs	r2, #0
 800a94e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a952:	2300      	movs	r3, #0
}
 800a954:	4618      	mov	r0, r3
 800a956:	3714      	adds	r7, #20
 800a958:	46bd      	mov	sp, r7
 800a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95e:	4770      	bx	lr
 800a960:	40010000 	.word	0x40010000
 800a964:	40010400 	.word	0x40010400
 800a968:	40000400 	.word	0x40000400
 800a96c:	40000800 	.word	0x40000800
 800a970:	40000c00 	.word	0x40000c00
 800a974:	40001800 	.word	0x40001800
 800a978:	40014000 	.word	0x40014000

0800a97c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b083      	sub	sp, #12
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a984:	bf00      	nop
 800a986:	370c      	adds	r7, #12
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr

0800a990 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a990:	b480      	push	{r7}
 800a992:	b083      	sub	sp, #12
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a998:	bf00      	nop
 800a99a:	370c      	adds	r7, #12
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr

0800a9a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b083      	sub	sp, #12
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a9ac:	bf00      	nop
 800a9ae:	370c      	adds	r7, #12
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr

0800a9b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b082      	sub	sp, #8
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d101      	bne.n	800a9ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	e042      	b.n	800aa50 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d106      	bne.n	800a9e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f000 f83b 	bl	800aa58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2224      	movs	r2, #36	@ 0x24
 800a9e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	681a      	ldr	r2, [r3, #0]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f022 0201 	bic.w	r2, r2, #1
 800a9f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d002      	beq.n	800aa08 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f000 fe28 	bl	800b658 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f000 f8bd 	bl	800ab88 <UART_SetConfig>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	2b01      	cmp	r3, #1
 800aa12:	d101      	bne.n	800aa18 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800aa14:	2301      	movs	r3, #1
 800aa16:	e01b      	b.n	800aa50 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	685a      	ldr	r2, [r3, #4]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800aa26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	689a      	ldr	r2, [r3, #8]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800aa36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	681a      	ldr	r2, [r3, #0]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f042 0201 	orr.w	r2, r2, #1
 800aa46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f000 fea7 	bl	800b79c <UART_CheckIdleState>
 800aa4e:	4603      	mov	r3, r0
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3708      	adds	r7, #8
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b083      	sub	sp, #12
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800aa60:	bf00      	nop
 800aa62:	370c      	adds	r7, #12
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr

0800aa6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b08a      	sub	sp, #40	@ 0x28
 800aa70:	af02      	add	r7, sp, #8
 800aa72:	60f8      	str	r0, [r7, #12]
 800aa74:	60b9      	str	r1, [r7, #8]
 800aa76:	603b      	str	r3, [r7, #0]
 800aa78:	4613      	mov	r3, r2
 800aa7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa82:	2b20      	cmp	r3, #32
 800aa84:	d17b      	bne.n	800ab7e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d002      	beq.n	800aa92 <HAL_UART_Transmit+0x26>
 800aa8c:	88fb      	ldrh	r3, [r7, #6]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d101      	bne.n	800aa96 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800aa92:	2301      	movs	r3, #1
 800aa94:	e074      	b.n	800ab80 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2221      	movs	r2, #33	@ 0x21
 800aaa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800aaa6:	f7f7 fe01 	bl	80026ac <HAL_GetTick>
 800aaaa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	88fa      	ldrh	r2, [r7, #6]
 800aab0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	88fa      	ldrh	r2, [r7, #6]
 800aab8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	689b      	ldr	r3, [r3, #8]
 800aac0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aac4:	d108      	bne.n	800aad8 <HAL_UART_Transmit+0x6c>
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	691b      	ldr	r3, [r3, #16]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d104      	bne.n	800aad8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800aace:	2300      	movs	r3, #0
 800aad0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	61bb      	str	r3, [r7, #24]
 800aad6:	e003      	b.n	800aae0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aadc:	2300      	movs	r3, #0
 800aade:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800aae0:	e030      	b.n	800ab44 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	9300      	str	r3, [sp, #0]
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	2200      	movs	r2, #0
 800aaea:	2180      	movs	r1, #128	@ 0x80
 800aaec:	68f8      	ldr	r0, [r7, #12]
 800aaee:	f000 feff 	bl	800b8f0 <UART_WaitOnFlagUntilTimeout>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d005      	beq.n	800ab04 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2220      	movs	r2, #32
 800aafc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ab00:	2303      	movs	r3, #3
 800ab02:	e03d      	b.n	800ab80 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ab04:	69fb      	ldr	r3, [r7, #28]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d10b      	bne.n	800ab22 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ab0a:	69bb      	ldr	r3, [r7, #24]
 800ab0c:	881b      	ldrh	r3, [r3, #0]
 800ab0e:	461a      	mov	r2, r3
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ab18:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ab1a:	69bb      	ldr	r3, [r7, #24]
 800ab1c:	3302      	adds	r3, #2
 800ab1e:	61bb      	str	r3, [r7, #24]
 800ab20:	e007      	b.n	800ab32 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ab22:	69fb      	ldr	r3, [r7, #28]
 800ab24:	781a      	ldrb	r2, [r3, #0]
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ab2c:	69fb      	ldr	r3, [r7, #28]
 800ab2e:	3301      	adds	r3, #1
 800ab30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ab38:	b29b      	uxth	r3, r3
 800ab3a:	3b01      	subs	r3, #1
 800ab3c:	b29a      	uxth	r2, r3
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d1c8      	bne.n	800aae2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	9300      	str	r3, [sp, #0]
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	2200      	movs	r2, #0
 800ab58:	2140      	movs	r1, #64	@ 0x40
 800ab5a:	68f8      	ldr	r0, [r7, #12]
 800ab5c:	f000 fec8 	bl	800b8f0 <UART_WaitOnFlagUntilTimeout>
 800ab60:	4603      	mov	r3, r0
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d005      	beq.n	800ab72 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2220      	movs	r2, #32
 800ab6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800ab6e:	2303      	movs	r3, #3
 800ab70:	e006      	b.n	800ab80 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	2220      	movs	r2, #32
 800ab76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	e000      	b.n	800ab80 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ab7e:	2302      	movs	r3, #2
  }
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3720      	adds	r7, #32
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ab88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ab8c:	b092      	sub	sp, #72	@ 0x48
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ab92:	2300      	movs	r3, #0
 800ab94:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	689a      	ldr	r2, [r3, #8]
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	691b      	ldr	r3, [r3, #16]
 800aba0:	431a      	orrs	r2, r3
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	695b      	ldr	r3, [r3, #20]
 800aba6:	431a      	orrs	r2, r3
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	69db      	ldr	r3, [r3, #28]
 800abac:	4313      	orrs	r3, r2
 800abae:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	681a      	ldr	r2, [r3, #0]
 800abb6:	4bbe      	ldr	r3, [pc, #760]	@ (800aeb0 <UART_SetConfig+0x328>)
 800abb8:	4013      	ands	r3, r2
 800abba:	697a      	ldr	r2, [r7, #20]
 800abbc:	6812      	ldr	r2, [r2, #0]
 800abbe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800abc0:	430b      	orrs	r3, r1
 800abc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	685b      	ldr	r3, [r3, #4]
 800abca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	68da      	ldr	r2, [r3, #12]
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	430a      	orrs	r2, r1
 800abd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	699b      	ldr	r3, [r3, #24]
 800abde:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4ab3      	ldr	r2, [pc, #716]	@ (800aeb4 <UART_SetConfig+0x32c>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d004      	beq.n	800abf4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	6a1b      	ldr	r3, [r3, #32]
 800abee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800abf0:	4313      	orrs	r3, r2
 800abf2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	689a      	ldr	r2, [r3, #8]
 800abfa:	4baf      	ldr	r3, [pc, #700]	@ (800aeb8 <UART_SetConfig+0x330>)
 800abfc:	4013      	ands	r3, r2
 800abfe:	697a      	ldr	r2, [r7, #20]
 800ac00:	6812      	ldr	r2, [r2, #0]
 800ac02:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ac04:	430b      	orrs	r3, r1
 800ac06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac0e:	f023 010f 	bic.w	r1, r3, #15
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	430a      	orrs	r2, r1
 800ac1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	4aa6      	ldr	r2, [pc, #664]	@ (800aebc <UART_SetConfig+0x334>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d177      	bne.n	800ad18 <UART_SetConfig+0x190>
 800ac28:	4ba5      	ldr	r3, [pc, #660]	@ (800aec0 <UART_SetConfig+0x338>)
 800ac2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac2c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ac30:	2b28      	cmp	r3, #40	@ 0x28
 800ac32:	d86d      	bhi.n	800ad10 <UART_SetConfig+0x188>
 800ac34:	a201      	add	r2, pc, #4	@ (adr r2, 800ac3c <UART_SetConfig+0xb4>)
 800ac36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac3a:	bf00      	nop
 800ac3c:	0800ace1 	.word	0x0800ace1
 800ac40:	0800ad11 	.word	0x0800ad11
 800ac44:	0800ad11 	.word	0x0800ad11
 800ac48:	0800ad11 	.word	0x0800ad11
 800ac4c:	0800ad11 	.word	0x0800ad11
 800ac50:	0800ad11 	.word	0x0800ad11
 800ac54:	0800ad11 	.word	0x0800ad11
 800ac58:	0800ad11 	.word	0x0800ad11
 800ac5c:	0800ace9 	.word	0x0800ace9
 800ac60:	0800ad11 	.word	0x0800ad11
 800ac64:	0800ad11 	.word	0x0800ad11
 800ac68:	0800ad11 	.word	0x0800ad11
 800ac6c:	0800ad11 	.word	0x0800ad11
 800ac70:	0800ad11 	.word	0x0800ad11
 800ac74:	0800ad11 	.word	0x0800ad11
 800ac78:	0800ad11 	.word	0x0800ad11
 800ac7c:	0800acf1 	.word	0x0800acf1
 800ac80:	0800ad11 	.word	0x0800ad11
 800ac84:	0800ad11 	.word	0x0800ad11
 800ac88:	0800ad11 	.word	0x0800ad11
 800ac8c:	0800ad11 	.word	0x0800ad11
 800ac90:	0800ad11 	.word	0x0800ad11
 800ac94:	0800ad11 	.word	0x0800ad11
 800ac98:	0800ad11 	.word	0x0800ad11
 800ac9c:	0800acf9 	.word	0x0800acf9
 800aca0:	0800ad11 	.word	0x0800ad11
 800aca4:	0800ad11 	.word	0x0800ad11
 800aca8:	0800ad11 	.word	0x0800ad11
 800acac:	0800ad11 	.word	0x0800ad11
 800acb0:	0800ad11 	.word	0x0800ad11
 800acb4:	0800ad11 	.word	0x0800ad11
 800acb8:	0800ad11 	.word	0x0800ad11
 800acbc:	0800ad01 	.word	0x0800ad01
 800acc0:	0800ad11 	.word	0x0800ad11
 800acc4:	0800ad11 	.word	0x0800ad11
 800acc8:	0800ad11 	.word	0x0800ad11
 800accc:	0800ad11 	.word	0x0800ad11
 800acd0:	0800ad11 	.word	0x0800ad11
 800acd4:	0800ad11 	.word	0x0800ad11
 800acd8:	0800ad11 	.word	0x0800ad11
 800acdc:	0800ad09 	.word	0x0800ad09
 800ace0:	2301      	movs	r3, #1
 800ace2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ace6:	e222      	b.n	800b12e <UART_SetConfig+0x5a6>
 800ace8:	2304      	movs	r3, #4
 800acea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acee:	e21e      	b.n	800b12e <UART_SetConfig+0x5a6>
 800acf0:	2308      	movs	r3, #8
 800acf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acf6:	e21a      	b.n	800b12e <UART_SetConfig+0x5a6>
 800acf8:	2310      	movs	r3, #16
 800acfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acfe:	e216      	b.n	800b12e <UART_SetConfig+0x5a6>
 800ad00:	2320      	movs	r3, #32
 800ad02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad06:	e212      	b.n	800b12e <UART_SetConfig+0x5a6>
 800ad08:	2340      	movs	r3, #64	@ 0x40
 800ad0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad0e:	e20e      	b.n	800b12e <UART_SetConfig+0x5a6>
 800ad10:	2380      	movs	r3, #128	@ 0x80
 800ad12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad16:	e20a      	b.n	800b12e <UART_SetConfig+0x5a6>
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	4a69      	ldr	r2, [pc, #420]	@ (800aec4 <UART_SetConfig+0x33c>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d130      	bne.n	800ad84 <UART_SetConfig+0x1fc>
 800ad22:	4b67      	ldr	r3, [pc, #412]	@ (800aec0 <UART_SetConfig+0x338>)
 800ad24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad26:	f003 0307 	and.w	r3, r3, #7
 800ad2a:	2b05      	cmp	r3, #5
 800ad2c:	d826      	bhi.n	800ad7c <UART_SetConfig+0x1f4>
 800ad2e:	a201      	add	r2, pc, #4	@ (adr r2, 800ad34 <UART_SetConfig+0x1ac>)
 800ad30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad34:	0800ad4d 	.word	0x0800ad4d
 800ad38:	0800ad55 	.word	0x0800ad55
 800ad3c:	0800ad5d 	.word	0x0800ad5d
 800ad40:	0800ad65 	.word	0x0800ad65
 800ad44:	0800ad6d 	.word	0x0800ad6d
 800ad48:	0800ad75 	.word	0x0800ad75
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad52:	e1ec      	b.n	800b12e <UART_SetConfig+0x5a6>
 800ad54:	2304      	movs	r3, #4
 800ad56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad5a:	e1e8      	b.n	800b12e <UART_SetConfig+0x5a6>
 800ad5c:	2308      	movs	r3, #8
 800ad5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad62:	e1e4      	b.n	800b12e <UART_SetConfig+0x5a6>
 800ad64:	2310      	movs	r3, #16
 800ad66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad6a:	e1e0      	b.n	800b12e <UART_SetConfig+0x5a6>
 800ad6c:	2320      	movs	r3, #32
 800ad6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad72:	e1dc      	b.n	800b12e <UART_SetConfig+0x5a6>
 800ad74:	2340      	movs	r3, #64	@ 0x40
 800ad76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad7a:	e1d8      	b.n	800b12e <UART_SetConfig+0x5a6>
 800ad7c:	2380      	movs	r3, #128	@ 0x80
 800ad7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad82:	e1d4      	b.n	800b12e <UART_SetConfig+0x5a6>
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	4a4f      	ldr	r2, [pc, #316]	@ (800aec8 <UART_SetConfig+0x340>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d130      	bne.n	800adf0 <UART_SetConfig+0x268>
 800ad8e:	4b4c      	ldr	r3, [pc, #304]	@ (800aec0 <UART_SetConfig+0x338>)
 800ad90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad92:	f003 0307 	and.w	r3, r3, #7
 800ad96:	2b05      	cmp	r3, #5
 800ad98:	d826      	bhi.n	800ade8 <UART_SetConfig+0x260>
 800ad9a:	a201      	add	r2, pc, #4	@ (adr r2, 800ada0 <UART_SetConfig+0x218>)
 800ad9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ada0:	0800adb9 	.word	0x0800adb9
 800ada4:	0800adc1 	.word	0x0800adc1
 800ada8:	0800adc9 	.word	0x0800adc9
 800adac:	0800add1 	.word	0x0800add1
 800adb0:	0800add9 	.word	0x0800add9
 800adb4:	0800ade1 	.word	0x0800ade1
 800adb8:	2300      	movs	r3, #0
 800adba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adbe:	e1b6      	b.n	800b12e <UART_SetConfig+0x5a6>
 800adc0:	2304      	movs	r3, #4
 800adc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adc6:	e1b2      	b.n	800b12e <UART_SetConfig+0x5a6>
 800adc8:	2308      	movs	r3, #8
 800adca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adce:	e1ae      	b.n	800b12e <UART_SetConfig+0x5a6>
 800add0:	2310      	movs	r3, #16
 800add2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800add6:	e1aa      	b.n	800b12e <UART_SetConfig+0x5a6>
 800add8:	2320      	movs	r3, #32
 800adda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adde:	e1a6      	b.n	800b12e <UART_SetConfig+0x5a6>
 800ade0:	2340      	movs	r3, #64	@ 0x40
 800ade2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ade6:	e1a2      	b.n	800b12e <UART_SetConfig+0x5a6>
 800ade8:	2380      	movs	r3, #128	@ 0x80
 800adea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adee:	e19e      	b.n	800b12e <UART_SetConfig+0x5a6>
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4a35      	ldr	r2, [pc, #212]	@ (800aecc <UART_SetConfig+0x344>)
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d130      	bne.n	800ae5c <UART_SetConfig+0x2d4>
 800adfa:	4b31      	ldr	r3, [pc, #196]	@ (800aec0 <UART_SetConfig+0x338>)
 800adfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adfe:	f003 0307 	and.w	r3, r3, #7
 800ae02:	2b05      	cmp	r3, #5
 800ae04:	d826      	bhi.n	800ae54 <UART_SetConfig+0x2cc>
 800ae06:	a201      	add	r2, pc, #4	@ (adr r2, 800ae0c <UART_SetConfig+0x284>)
 800ae08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae0c:	0800ae25 	.word	0x0800ae25
 800ae10:	0800ae2d 	.word	0x0800ae2d
 800ae14:	0800ae35 	.word	0x0800ae35
 800ae18:	0800ae3d 	.word	0x0800ae3d
 800ae1c:	0800ae45 	.word	0x0800ae45
 800ae20:	0800ae4d 	.word	0x0800ae4d
 800ae24:	2300      	movs	r3, #0
 800ae26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae2a:	e180      	b.n	800b12e <UART_SetConfig+0x5a6>
 800ae2c:	2304      	movs	r3, #4
 800ae2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae32:	e17c      	b.n	800b12e <UART_SetConfig+0x5a6>
 800ae34:	2308      	movs	r3, #8
 800ae36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae3a:	e178      	b.n	800b12e <UART_SetConfig+0x5a6>
 800ae3c:	2310      	movs	r3, #16
 800ae3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae42:	e174      	b.n	800b12e <UART_SetConfig+0x5a6>
 800ae44:	2320      	movs	r3, #32
 800ae46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae4a:	e170      	b.n	800b12e <UART_SetConfig+0x5a6>
 800ae4c:	2340      	movs	r3, #64	@ 0x40
 800ae4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae52:	e16c      	b.n	800b12e <UART_SetConfig+0x5a6>
 800ae54:	2380      	movs	r3, #128	@ 0x80
 800ae56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae5a:	e168      	b.n	800b12e <UART_SetConfig+0x5a6>
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	4a1b      	ldr	r2, [pc, #108]	@ (800aed0 <UART_SetConfig+0x348>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d142      	bne.n	800aeec <UART_SetConfig+0x364>
 800ae66:	4b16      	ldr	r3, [pc, #88]	@ (800aec0 <UART_SetConfig+0x338>)
 800ae68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae6a:	f003 0307 	and.w	r3, r3, #7
 800ae6e:	2b05      	cmp	r3, #5
 800ae70:	d838      	bhi.n	800aee4 <UART_SetConfig+0x35c>
 800ae72:	a201      	add	r2, pc, #4	@ (adr r2, 800ae78 <UART_SetConfig+0x2f0>)
 800ae74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae78:	0800ae91 	.word	0x0800ae91
 800ae7c:	0800ae99 	.word	0x0800ae99
 800ae80:	0800aea1 	.word	0x0800aea1
 800ae84:	0800aea9 	.word	0x0800aea9
 800ae88:	0800aed5 	.word	0x0800aed5
 800ae8c:	0800aedd 	.word	0x0800aedd
 800ae90:	2300      	movs	r3, #0
 800ae92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae96:	e14a      	b.n	800b12e <UART_SetConfig+0x5a6>
 800ae98:	2304      	movs	r3, #4
 800ae9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae9e:	e146      	b.n	800b12e <UART_SetConfig+0x5a6>
 800aea0:	2308      	movs	r3, #8
 800aea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aea6:	e142      	b.n	800b12e <UART_SetConfig+0x5a6>
 800aea8:	2310      	movs	r3, #16
 800aeaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeae:	e13e      	b.n	800b12e <UART_SetConfig+0x5a6>
 800aeb0:	cfff69f3 	.word	0xcfff69f3
 800aeb4:	58000c00 	.word	0x58000c00
 800aeb8:	11fff4ff 	.word	0x11fff4ff
 800aebc:	40011000 	.word	0x40011000
 800aec0:	58024400 	.word	0x58024400
 800aec4:	40004400 	.word	0x40004400
 800aec8:	40004800 	.word	0x40004800
 800aecc:	40004c00 	.word	0x40004c00
 800aed0:	40005000 	.word	0x40005000
 800aed4:	2320      	movs	r3, #32
 800aed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeda:	e128      	b.n	800b12e <UART_SetConfig+0x5a6>
 800aedc:	2340      	movs	r3, #64	@ 0x40
 800aede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aee2:	e124      	b.n	800b12e <UART_SetConfig+0x5a6>
 800aee4:	2380      	movs	r3, #128	@ 0x80
 800aee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeea:	e120      	b.n	800b12e <UART_SetConfig+0x5a6>
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	4acb      	ldr	r2, [pc, #812]	@ (800b220 <UART_SetConfig+0x698>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d176      	bne.n	800afe4 <UART_SetConfig+0x45c>
 800aef6:	4bcb      	ldr	r3, [pc, #812]	@ (800b224 <UART_SetConfig+0x69c>)
 800aef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aefa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aefe:	2b28      	cmp	r3, #40	@ 0x28
 800af00:	d86c      	bhi.n	800afdc <UART_SetConfig+0x454>
 800af02:	a201      	add	r2, pc, #4	@ (adr r2, 800af08 <UART_SetConfig+0x380>)
 800af04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af08:	0800afad 	.word	0x0800afad
 800af0c:	0800afdd 	.word	0x0800afdd
 800af10:	0800afdd 	.word	0x0800afdd
 800af14:	0800afdd 	.word	0x0800afdd
 800af18:	0800afdd 	.word	0x0800afdd
 800af1c:	0800afdd 	.word	0x0800afdd
 800af20:	0800afdd 	.word	0x0800afdd
 800af24:	0800afdd 	.word	0x0800afdd
 800af28:	0800afb5 	.word	0x0800afb5
 800af2c:	0800afdd 	.word	0x0800afdd
 800af30:	0800afdd 	.word	0x0800afdd
 800af34:	0800afdd 	.word	0x0800afdd
 800af38:	0800afdd 	.word	0x0800afdd
 800af3c:	0800afdd 	.word	0x0800afdd
 800af40:	0800afdd 	.word	0x0800afdd
 800af44:	0800afdd 	.word	0x0800afdd
 800af48:	0800afbd 	.word	0x0800afbd
 800af4c:	0800afdd 	.word	0x0800afdd
 800af50:	0800afdd 	.word	0x0800afdd
 800af54:	0800afdd 	.word	0x0800afdd
 800af58:	0800afdd 	.word	0x0800afdd
 800af5c:	0800afdd 	.word	0x0800afdd
 800af60:	0800afdd 	.word	0x0800afdd
 800af64:	0800afdd 	.word	0x0800afdd
 800af68:	0800afc5 	.word	0x0800afc5
 800af6c:	0800afdd 	.word	0x0800afdd
 800af70:	0800afdd 	.word	0x0800afdd
 800af74:	0800afdd 	.word	0x0800afdd
 800af78:	0800afdd 	.word	0x0800afdd
 800af7c:	0800afdd 	.word	0x0800afdd
 800af80:	0800afdd 	.word	0x0800afdd
 800af84:	0800afdd 	.word	0x0800afdd
 800af88:	0800afcd 	.word	0x0800afcd
 800af8c:	0800afdd 	.word	0x0800afdd
 800af90:	0800afdd 	.word	0x0800afdd
 800af94:	0800afdd 	.word	0x0800afdd
 800af98:	0800afdd 	.word	0x0800afdd
 800af9c:	0800afdd 	.word	0x0800afdd
 800afa0:	0800afdd 	.word	0x0800afdd
 800afa4:	0800afdd 	.word	0x0800afdd
 800afa8:	0800afd5 	.word	0x0800afd5
 800afac:	2301      	movs	r3, #1
 800afae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afb2:	e0bc      	b.n	800b12e <UART_SetConfig+0x5a6>
 800afb4:	2304      	movs	r3, #4
 800afb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afba:	e0b8      	b.n	800b12e <UART_SetConfig+0x5a6>
 800afbc:	2308      	movs	r3, #8
 800afbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afc2:	e0b4      	b.n	800b12e <UART_SetConfig+0x5a6>
 800afc4:	2310      	movs	r3, #16
 800afc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afca:	e0b0      	b.n	800b12e <UART_SetConfig+0x5a6>
 800afcc:	2320      	movs	r3, #32
 800afce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afd2:	e0ac      	b.n	800b12e <UART_SetConfig+0x5a6>
 800afd4:	2340      	movs	r3, #64	@ 0x40
 800afd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afda:	e0a8      	b.n	800b12e <UART_SetConfig+0x5a6>
 800afdc:	2380      	movs	r3, #128	@ 0x80
 800afde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afe2:	e0a4      	b.n	800b12e <UART_SetConfig+0x5a6>
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4a8f      	ldr	r2, [pc, #572]	@ (800b228 <UART_SetConfig+0x6a0>)
 800afea:	4293      	cmp	r3, r2
 800afec:	d130      	bne.n	800b050 <UART_SetConfig+0x4c8>
 800afee:	4b8d      	ldr	r3, [pc, #564]	@ (800b224 <UART_SetConfig+0x69c>)
 800aff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aff2:	f003 0307 	and.w	r3, r3, #7
 800aff6:	2b05      	cmp	r3, #5
 800aff8:	d826      	bhi.n	800b048 <UART_SetConfig+0x4c0>
 800affa:	a201      	add	r2, pc, #4	@ (adr r2, 800b000 <UART_SetConfig+0x478>)
 800affc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b000:	0800b019 	.word	0x0800b019
 800b004:	0800b021 	.word	0x0800b021
 800b008:	0800b029 	.word	0x0800b029
 800b00c:	0800b031 	.word	0x0800b031
 800b010:	0800b039 	.word	0x0800b039
 800b014:	0800b041 	.word	0x0800b041
 800b018:	2300      	movs	r3, #0
 800b01a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b01e:	e086      	b.n	800b12e <UART_SetConfig+0x5a6>
 800b020:	2304      	movs	r3, #4
 800b022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b026:	e082      	b.n	800b12e <UART_SetConfig+0x5a6>
 800b028:	2308      	movs	r3, #8
 800b02a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b02e:	e07e      	b.n	800b12e <UART_SetConfig+0x5a6>
 800b030:	2310      	movs	r3, #16
 800b032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b036:	e07a      	b.n	800b12e <UART_SetConfig+0x5a6>
 800b038:	2320      	movs	r3, #32
 800b03a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b03e:	e076      	b.n	800b12e <UART_SetConfig+0x5a6>
 800b040:	2340      	movs	r3, #64	@ 0x40
 800b042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b046:	e072      	b.n	800b12e <UART_SetConfig+0x5a6>
 800b048:	2380      	movs	r3, #128	@ 0x80
 800b04a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b04e:	e06e      	b.n	800b12e <UART_SetConfig+0x5a6>
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	4a75      	ldr	r2, [pc, #468]	@ (800b22c <UART_SetConfig+0x6a4>)
 800b056:	4293      	cmp	r3, r2
 800b058:	d130      	bne.n	800b0bc <UART_SetConfig+0x534>
 800b05a:	4b72      	ldr	r3, [pc, #456]	@ (800b224 <UART_SetConfig+0x69c>)
 800b05c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b05e:	f003 0307 	and.w	r3, r3, #7
 800b062:	2b05      	cmp	r3, #5
 800b064:	d826      	bhi.n	800b0b4 <UART_SetConfig+0x52c>
 800b066:	a201      	add	r2, pc, #4	@ (adr r2, 800b06c <UART_SetConfig+0x4e4>)
 800b068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b06c:	0800b085 	.word	0x0800b085
 800b070:	0800b08d 	.word	0x0800b08d
 800b074:	0800b095 	.word	0x0800b095
 800b078:	0800b09d 	.word	0x0800b09d
 800b07c:	0800b0a5 	.word	0x0800b0a5
 800b080:	0800b0ad 	.word	0x0800b0ad
 800b084:	2300      	movs	r3, #0
 800b086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b08a:	e050      	b.n	800b12e <UART_SetConfig+0x5a6>
 800b08c:	2304      	movs	r3, #4
 800b08e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b092:	e04c      	b.n	800b12e <UART_SetConfig+0x5a6>
 800b094:	2308      	movs	r3, #8
 800b096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b09a:	e048      	b.n	800b12e <UART_SetConfig+0x5a6>
 800b09c:	2310      	movs	r3, #16
 800b09e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0a2:	e044      	b.n	800b12e <UART_SetConfig+0x5a6>
 800b0a4:	2320      	movs	r3, #32
 800b0a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0aa:	e040      	b.n	800b12e <UART_SetConfig+0x5a6>
 800b0ac:	2340      	movs	r3, #64	@ 0x40
 800b0ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0b2:	e03c      	b.n	800b12e <UART_SetConfig+0x5a6>
 800b0b4:	2380      	movs	r3, #128	@ 0x80
 800b0b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0ba:	e038      	b.n	800b12e <UART_SetConfig+0x5a6>
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	4a5b      	ldr	r2, [pc, #364]	@ (800b230 <UART_SetConfig+0x6a8>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d130      	bne.n	800b128 <UART_SetConfig+0x5a0>
 800b0c6:	4b57      	ldr	r3, [pc, #348]	@ (800b224 <UART_SetConfig+0x69c>)
 800b0c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0ca:	f003 0307 	and.w	r3, r3, #7
 800b0ce:	2b05      	cmp	r3, #5
 800b0d0:	d826      	bhi.n	800b120 <UART_SetConfig+0x598>
 800b0d2:	a201      	add	r2, pc, #4	@ (adr r2, 800b0d8 <UART_SetConfig+0x550>)
 800b0d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0d8:	0800b0f1 	.word	0x0800b0f1
 800b0dc:	0800b0f9 	.word	0x0800b0f9
 800b0e0:	0800b101 	.word	0x0800b101
 800b0e4:	0800b109 	.word	0x0800b109
 800b0e8:	0800b111 	.word	0x0800b111
 800b0ec:	0800b119 	.word	0x0800b119
 800b0f0:	2302      	movs	r3, #2
 800b0f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0f6:	e01a      	b.n	800b12e <UART_SetConfig+0x5a6>
 800b0f8:	2304      	movs	r3, #4
 800b0fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0fe:	e016      	b.n	800b12e <UART_SetConfig+0x5a6>
 800b100:	2308      	movs	r3, #8
 800b102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b106:	e012      	b.n	800b12e <UART_SetConfig+0x5a6>
 800b108:	2310      	movs	r3, #16
 800b10a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b10e:	e00e      	b.n	800b12e <UART_SetConfig+0x5a6>
 800b110:	2320      	movs	r3, #32
 800b112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b116:	e00a      	b.n	800b12e <UART_SetConfig+0x5a6>
 800b118:	2340      	movs	r3, #64	@ 0x40
 800b11a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b11e:	e006      	b.n	800b12e <UART_SetConfig+0x5a6>
 800b120:	2380      	movs	r3, #128	@ 0x80
 800b122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b126:	e002      	b.n	800b12e <UART_SetConfig+0x5a6>
 800b128:	2380      	movs	r3, #128	@ 0x80
 800b12a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4a3f      	ldr	r2, [pc, #252]	@ (800b230 <UART_SetConfig+0x6a8>)
 800b134:	4293      	cmp	r3, r2
 800b136:	f040 80f8 	bne.w	800b32a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b13a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b13e:	2b20      	cmp	r3, #32
 800b140:	dc46      	bgt.n	800b1d0 <UART_SetConfig+0x648>
 800b142:	2b02      	cmp	r3, #2
 800b144:	f2c0 8082 	blt.w	800b24c <UART_SetConfig+0x6c4>
 800b148:	3b02      	subs	r3, #2
 800b14a:	2b1e      	cmp	r3, #30
 800b14c:	d87e      	bhi.n	800b24c <UART_SetConfig+0x6c4>
 800b14e:	a201      	add	r2, pc, #4	@ (adr r2, 800b154 <UART_SetConfig+0x5cc>)
 800b150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b154:	0800b1d7 	.word	0x0800b1d7
 800b158:	0800b24d 	.word	0x0800b24d
 800b15c:	0800b1df 	.word	0x0800b1df
 800b160:	0800b24d 	.word	0x0800b24d
 800b164:	0800b24d 	.word	0x0800b24d
 800b168:	0800b24d 	.word	0x0800b24d
 800b16c:	0800b1ef 	.word	0x0800b1ef
 800b170:	0800b24d 	.word	0x0800b24d
 800b174:	0800b24d 	.word	0x0800b24d
 800b178:	0800b24d 	.word	0x0800b24d
 800b17c:	0800b24d 	.word	0x0800b24d
 800b180:	0800b24d 	.word	0x0800b24d
 800b184:	0800b24d 	.word	0x0800b24d
 800b188:	0800b24d 	.word	0x0800b24d
 800b18c:	0800b1ff 	.word	0x0800b1ff
 800b190:	0800b24d 	.word	0x0800b24d
 800b194:	0800b24d 	.word	0x0800b24d
 800b198:	0800b24d 	.word	0x0800b24d
 800b19c:	0800b24d 	.word	0x0800b24d
 800b1a0:	0800b24d 	.word	0x0800b24d
 800b1a4:	0800b24d 	.word	0x0800b24d
 800b1a8:	0800b24d 	.word	0x0800b24d
 800b1ac:	0800b24d 	.word	0x0800b24d
 800b1b0:	0800b24d 	.word	0x0800b24d
 800b1b4:	0800b24d 	.word	0x0800b24d
 800b1b8:	0800b24d 	.word	0x0800b24d
 800b1bc:	0800b24d 	.word	0x0800b24d
 800b1c0:	0800b24d 	.word	0x0800b24d
 800b1c4:	0800b24d 	.word	0x0800b24d
 800b1c8:	0800b24d 	.word	0x0800b24d
 800b1cc:	0800b23f 	.word	0x0800b23f
 800b1d0:	2b40      	cmp	r3, #64	@ 0x40
 800b1d2:	d037      	beq.n	800b244 <UART_SetConfig+0x6bc>
 800b1d4:	e03a      	b.n	800b24c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b1d6:	f7fd fc1b 	bl	8008a10 <HAL_RCCEx_GetD3PCLK1Freq>
 800b1da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b1dc:	e03c      	b.n	800b258 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f7fd fc2a 	bl	8008a3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b1e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1ec:	e034      	b.n	800b258 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1ee:	f107 0318 	add.w	r3, r7, #24
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f7fd fd76 	bl	8008ce4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b1f8:	69fb      	ldr	r3, [r7, #28]
 800b1fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1fc:	e02c      	b.n	800b258 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b1fe:	4b09      	ldr	r3, [pc, #36]	@ (800b224 <UART_SetConfig+0x69c>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	f003 0320 	and.w	r3, r3, #32
 800b206:	2b00      	cmp	r3, #0
 800b208:	d016      	beq.n	800b238 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b20a:	4b06      	ldr	r3, [pc, #24]	@ (800b224 <UART_SetConfig+0x69c>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	08db      	lsrs	r3, r3, #3
 800b210:	f003 0303 	and.w	r3, r3, #3
 800b214:	4a07      	ldr	r2, [pc, #28]	@ (800b234 <UART_SetConfig+0x6ac>)
 800b216:	fa22 f303 	lsr.w	r3, r2, r3
 800b21a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b21c:	e01c      	b.n	800b258 <UART_SetConfig+0x6d0>
 800b21e:	bf00      	nop
 800b220:	40011400 	.word	0x40011400
 800b224:	58024400 	.word	0x58024400
 800b228:	40007800 	.word	0x40007800
 800b22c:	40007c00 	.word	0x40007c00
 800b230:	58000c00 	.word	0x58000c00
 800b234:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b238:	4b9d      	ldr	r3, [pc, #628]	@ (800b4b0 <UART_SetConfig+0x928>)
 800b23a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b23c:	e00c      	b.n	800b258 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b23e:	4b9d      	ldr	r3, [pc, #628]	@ (800b4b4 <UART_SetConfig+0x92c>)
 800b240:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b242:	e009      	b.n	800b258 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b244:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b248:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b24a:	e005      	b.n	800b258 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b24c:	2300      	movs	r3, #0
 800b24e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b250:	2301      	movs	r3, #1
 800b252:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b256:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	f000 81de 	beq.w	800b61c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b264:	4a94      	ldr	r2, [pc, #592]	@ (800b4b8 <UART_SetConfig+0x930>)
 800b266:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b26a:	461a      	mov	r2, r3
 800b26c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b26e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b272:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b274:	697b      	ldr	r3, [r7, #20]
 800b276:	685a      	ldr	r2, [r3, #4]
 800b278:	4613      	mov	r3, r2
 800b27a:	005b      	lsls	r3, r3, #1
 800b27c:	4413      	add	r3, r2
 800b27e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b280:	429a      	cmp	r2, r3
 800b282:	d305      	bcc.n	800b290 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	685b      	ldr	r3, [r3, #4]
 800b288:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b28a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b28c:	429a      	cmp	r2, r3
 800b28e:	d903      	bls.n	800b298 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b290:	2301      	movs	r3, #1
 800b292:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b296:	e1c1      	b.n	800b61c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b298:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b29a:	2200      	movs	r2, #0
 800b29c:	60bb      	str	r3, [r7, #8]
 800b29e:	60fa      	str	r2, [r7, #12]
 800b2a0:	697b      	ldr	r3, [r7, #20]
 800b2a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2a4:	4a84      	ldr	r2, [pc, #528]	@ (800b4b8 <UART_SetConfig+0x930>)
 800b2a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2aa:	b29b      	uxth	r3, r3
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	603b      	str	r3, [r7, #0]
 800b2b0:	607a      	str	r2, [r7, #4]
 800b2b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b2ba:	f7f5 f869 	bl	8000390 <__aeabi_uldivmod>
 800b2be:	4602      	mov	r2, r0
 800b2c0:	460b      	mov	r3, r1
 800b2c2:	4610      	mov	r0, r2
 800b2c4:	4619      	mov	r1, r3
 800b2c6:	f04f 0200 	mov.w	r2, #0
 800b2ca:	f04f 0300 	mov.w	r3, #0
 800b2ce:	020b      	lsls	r3, r1, #8
 800b2d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b2d4:	0202      	lsls	r2, r0, #8
 800b2d6:	6979      	ldr	r1, [r7, #20]
 800b2d8:	6849      	ldr	r1, [r1, #4]
 800b2da:	0849      	lsrs	r1, r1, #1
 800b2dc:	2000      	movs	r0, #0
 800b2de:	460c      	mov	r4, r1
 800b2e0:	4605      	mov	r5, r0
 800b2e2:	eb12 0804 	adds.w	r8, r2, r4
 800b2e6:	eb43 0905 	adc.w	r9, r3, r5
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	685b      	ldr	r3, [r3, #4]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	469a      	mov	sl, r3
 800b2f2:	4693      	mov	fp, r2
 800b2f4:	4652      	mov	r2, sl
 800b2f6:	465b      	mov	r3, fp
 800b2f8:	4640      	mov	r0, r8
 800b2fa:	4649      	mov	r1, r9
 800b2fc:	f7f5 f848 	bl	8000390 <__aeabi_uldivmod>
 800b300:	4602      	mov	r2, r0
 800b302:	460b      	mov	r3, r1
 800b304:	4613      	mov	r3, r2
 800b306:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b30a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b30e:	d308      	bcc.n	800b322 <UART_SetConfig+0x79a>
 800b310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b312:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b316:	d204      	bcs.n	800b322 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b31e:	60da      	str	r2, [r3, #12]
 800b320:	e17c      	b.n	800b61c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b322:	2301      	movs	r3, #1
 800b324:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b328:	e178      	b.n	800b61c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	69db      	ldr	r3, [r3, #28]
 800b32e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b332:	f040 80c5 	bne.w	800b4c0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b336:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b33a:	2b20      	cmp	r3, #32
 800b33c:	dc48      	bgt.n	800b3d0 <UART_SetConfig+0x848>
 800b33e:	2b00      	cmp	r3, #0
 800b340:	db7b      	blt.n	800b43a <UART_SetConfig+0x8b2>
 800b342:	2b20      	cmp	r3, #32
 800b344:	d879      	bhi.n	800b43a <UART_SetConfig+0x8b2>
 800b346:	a201      	add	r2, pc, #4	@ (adr r2, 800b34c <UART_SetConfig+0x7c4>)
 800b348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b34c:	0800b3d7 	.word	0x0800b3d7
 800b350:	0800b3df 	.word	0x0800b3df
 800b354:	0800b43b 	.word	0x0800b43b
 800b358:	0800b43b 	.word	0x0800b43b
 800b35c:	0800b3e7 	.word	0x0800b3e7
 800b360:	0800b43b 	.word	0x0800b43b
 800b364:	0800b43b 	.word	0x0800b43b
 800b368:	0800b43b 	.word	0x0800b43b
 800b36c:	0800b3f7 	.word	0x0800b3f7
 800b370:	0800b43b 	.word	0x0800b43b
 800b374:	0800b43b 	.word	0x0800b43b
 800b378:	0800b43b 	.word	0x0800b43b
 800b37c:	0800b43b 	.word	0x0800b43b
 800b380:	0800b43b 	.word	0x0800b43b
 800b384:	0800b43b 	.word	0x0800b43b
 800b388:	0800b43b 	.word	0x0800b43b
 800b38c:	0800b407 	.word	0x0800b407
 800b390:	0800b43b 	.word	0x0800b43b
 800b394:	0800b43b 	.word	0x0800b43b
 800b398:	0800b43b 	.word	0x0800b43b
 800b39c:	0800b43b 	.word	0x0800b43b
 800b3a0:	0800b43b 	.word	0x0800b43b
 800b3a4:	0800b43b 	.word	0x0800b43b
 800b3a8:	0800b43b 	.word	0x0800b43b
 800b3ac:	0800b43b 	.word	0x0800b43b
 800b3b0:	0800b43b 	.word	0x0800b43b
 800b3b4:	0800b43b 	.word	0x0800b43b
 800b3b8:	0800b43b 	.word	0x0800b43b
 800b3bc:	0800b43b 	.word	0x0800b43b
 800b3c0:	0800b43b 	.word	0x0800b43b
 800b3c4:	0800b43b 	.word	0x0800b43b
 800b3c8:	0800b43b 	.word	0x0800b43b
 800b3cc:	0800b42d 	.word	0x0800b42d
 800b3d0:	2b40      	cmp	r3, #64	@ 0x40
 800b3d2:	d02e      	beq.n	800b432 <UART_SetConfig+0x8aa>
 800b3d4:	e031      	b.n	800b43a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b3d6:	f7fc f8e5 	bl	80075a4 <HAL_RCC_GetPCLK1Freq>
 800b3da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b3dc:	e033      	b.n	800b446 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b3de:	f7fc f8f7 	bl	80075d0 <HAL_RCC_GetPCLK2Freq>
 800b3e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b3e4:	e02f      	b.n	800b446 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f7fd fb26 	bl	8008a3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b3f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3f4:	e027      	b.n	800b446 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b3f6:	f107 0318 	add.w	r3, r7, #24
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f7fd fc72 	bl	8008ce4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b400:	69fb      	ldr	r3, [r7, #28]
 800b402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b404:	e01f      	b.n	800b446 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b406:	4b2d      	ldr	r3, [pc, #180]	@ (800b4bc <UART_SetConfig+0x934>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f003 0320 	and.w	r3, r3, #32
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d009      	beq.n	800b426 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b412:	4b2a      	ldr	r3, [pc, #168]	@ (800b4bc <UART_SetConfig+0x934>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	08db      	lsrs	r3, r3, #3
 800b418:	f003 0303 	and.w	r3, r3, #3
 800b41c:	4a24      	ldr	r2, [pc, #144]	@ (800b4b0 <UART_SetConfig+0x928>)
 800b41e:	fa22 f303 	lsr.w	r3, r2, r3
 800b422:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b424:	e00f      	b.n	800b446 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b426:	4b22      	ldr	r3, [pc, #136]	@ (800b4b0 <UART_SetConfig+0x928>)
 800b428:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b42a:	e00c      	b.n	800b446 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b42c:	4b21      	ldr	r3, [pc, #132]	@ (800b4b4 <UART_SetConfig+0x92c>)
 800b42e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b430:	e009      	b.n	800b446 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b432:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b438:	e005      	b.n	800b446 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b43a:	2300      	movs	r3, #0
 800b43c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b43e:	2301      	movs	r3, #1
 800b440:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b444:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b446:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b448:	2b00      	cmp	r3, #0
 800b44a:	f000 80e7 	beq.w	800b61c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b452:	4a19      	ldr	r2, [pc, #100]	@ (800b4b8 <UART_SetConfig+0x930>)
 800b454:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b458:	461a      	mov	r2, r3
 800b45a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b45c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b460:	005a      	lsls	r2, r3, #1
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	685b      	ldr	r3, [r3, #4]
 800b466:	085b      	lsrs	r3, r3, #1
 800b468:	441a      	add	r2, r3
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b472:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b476:	2b0f      	cmp	r3, #15
 800b478:	d916      	bls.n	800b4a8 <UART_SetConfig+0x920>
 800b47a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b47c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b480:	d212      	bcs.n	800b4a8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b484:	b29b      	uxth	r3, r3
 800b486:	f023 030f 	bic.w	r3, r3, #15
 800b48a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b48c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b48e:	085b      	lsrs	r3, r3, #1
 800b490:	b29b      	uxth	r3, r3
 800b492:	f003 0307 	and.w	r3, r3, #7
 800b496:	b29a      	uxth	r2, r3
 800b498:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b49a:	4313      	orrs	r3, r2
 800b49c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b4a4:	60da      	str	r2, [r3, #12]
 800b4a6:	e0b9      	b.n	800b61c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b4ae:	e0b5      	b.n	800b61c <UART_SetConfig+0xa94>
 800b4b0:	03d09000 	.word	0x03d09000
 800b4b4:	003d0900 	.word	0x003d0900
 800b4b8:	08012870 	.word	0x08012870
 800b4bc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b4c0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b4c4:	2b20      	cmp	r3, #32
 800b4c6:	dc49      	bgt.n	800b55c <UART_SetConfig+0x9d4>
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	db7c      	blt.n	800b5c6 <UART_SetConfig+0xa3e>
 800b4cc:	2b20      	cmp	r3, #32
 800b4ce:	d87a      	bhi.n	800b5c6 <UART_SetConfig+0xa3e>
 800b4d0:	a201      	add	r2, pc, #4	@ (adr r2, 800b4d8 <UART_SetConfig+0x950>)
 800b4d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4d6:	bf00      	nop
 800b4d8:	0800b563 	.word	0x0800b563
 800b4dc:	0800b56b 	.word	0x0800b56b
 800b4e0:	0800b5c7 	.word	0x0800b5c7
 800b4e4:	0800b5c7 	.word	0x0800b5c7
 800b4e8:	0800b573 	.word	0x0800b573
 800b4ec:	0800b5c7 	.word	0x0800b5c7
 800b4f0:	0800b5c7 	.word	0x0800b5c7
 800b4f4:	0800b5c7 	.word	0x0800b5c7
 800b4f8:	0800b583 	.word	0x0800b583
 800b4fc:	0800b5c7 	.word	0x0800b5c7
 800b500:	0800b5c7 	.word	0x0800b5c7
 800b504:	0800b5c7 	.word	0x0800b5c7
 800b508:	0800b5c7 	.word	0x0800b5c7
 800b50c:	0800b5c7 	.word	0x0800b5c7
 800b510:	0800b5c7 	.word	0x0800b5c7
 800b514:	0800b5c7 	.word	0x0800b5c7
 800b518:	0800b593 	.word	0x0800b593
 800b51c:	0800b5c7 	.word	0x0800b5c7
 800b520:	0800b5c7 	.word	0x0800b5c7
 800b524:	0800b5c7 	.word	0x0800b5c7
 800b528:	0800b5c7 	.word	0x0800b5c7
 800b52c:	0800b5c7 	.word	0x0800b5c7
 800b530:	0800b5c7 	.word	0x0800b5c7
 800b534:	0800b5c7 	.word	0x0800b5c7
 800b538:	0800b5c7 	.word	0x0800b5c7
 800b53c:	0800b5c7 	.word	0x0800b5c7
 800b540:	0800b5c7 	.word	0x0800b5c7
 800b544:	0800b5c7 	.word	0x0800b5c7
 800b548:	0800b5c7 	.word	0x0800b5c7
 800b54c:	0800b5c7 	.word	0x0800b5c7
 800b550:	0800b5c7 	.word	0x0800b5c7
 800b554:	0800b5c7 	.word	0x0800b5c7
 800b558:	0800b5b9 	.word	0x0800b5b9
 800b55c:	2b40      	cmp	r3, #64	@ 0x40
 800b55e:	d02e      	beq.n	800b5be <UART_SetConfig+0xa36>
 800b560:	e031      	b.n	800b5c6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b562:	f7fc f81f 	bl	80075a4 <HAL_RCC_GetPCLK1Freq>
 800b566:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b568:	e033      	b.n	800b5d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b56a:	f7fc f831 	bl	80075d0 <HAL_RCC_GetPCLK2Freq>
 800b56e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b570:	e02f      	b.n	800b5d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b572:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b576:	4618      	mov	r0, r3
 800b578:	f7fd fa60 	bl	8008a3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b57c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b57e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b580:	e027      	b.n	800b5d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b582:	f107 0318 	add.w	r3, r7, #24
 800b586:	4618      	mov	r0, r3
 800b588:	f7fd fbac 	bl	8008ce4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b58c:	69fb      	ldr	r3, [r7, #28]
 800b58e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b590:	e01f      	b.n	800b5d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b592:	4b2d      	ldr	r3, [pc, #180]	@ (800b648 <UART_SetConfig+0xac0>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f003 0320 	and.w	r3, r3, #32
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d009      	beq.n	800b5b2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b59e:	4b2a      	ldr	r3, [pc, #168]	@ (800b648 <UART_SetConfig+0xac0>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	08db      	lsrs	r3, r3, #3
 800b5a4:	f003 0303 	and.w	r3, r3, #3
 800b5a8:	4a28      	ldr	r2, [pc, #160]	@ (800b64c <UART_SetConfig+0xac4>)
 800b5aa:	fa22 f303 	lsr.w	r3, r2, r3
 800b5ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b5b0:	e00f      	b.n	800b5d2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b5b2:	4b26      	ldr	r3, [pc, #152]	@ (800b64c <UART_SetConfig+0xac4>)
 800b5b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5b6:	e00c      	b.n	800b5d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b5b8:	4b25      	ldr	r3, [pc, #148]	@ (800b650 <UART_SetConfig+0xac8>)
 800b5ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5bc:	e009      	b.n	800b5d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b5be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b5c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5c4:	e005      	b.n	800b5d2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b5d0:	bf00      	nop
    }

    if (pclk != 0U)
 800b5d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d021      	beq.n	800b61c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5dc:	4a1d      	ldr	r2, [pc, #116]	@ (800b654 <UART_SetConfig+0xacc>)
 800b5de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5e6:	fbb3 f2f2 	udiv	r2, r3, r2
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	685b      	ldr	r3, [r3, #4]
 800b5ee:	085b      	lsrs	r3, r3, #1
 800b5f0:	441a      	add	r2, r3
 800b5f2:	697b      	ldr	r3, [r7, #20]
 800b5f4:	685b      	ldr	r3, [r3, #4]
 800b5f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b5fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5fe:	2b0f      	cmp	r3, #15
 800b600:	d909      	bls.n	800b616 <UART_SetConfig+0xa8e>
 800b602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b604:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b608:	d205      	bcs.n	800b616 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b60a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b60c:	b29a      	uxth	r2, r3
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	60da      	str	r2, [r3, #12]
 800b614:	e002      	b.n	800b61c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b616:	2301      	movs	r3, #1
 800b618:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b61c:	697b      	ldr	r3, [r7, #20]
 800b61e:	2201      	movs	r2, #1
 800b620:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	2201      	movs	r2, #1
 800b628:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b62c:	697b      	ldr	r3, [r7, #20]
 800b62e:	2200      	movs	r2, #0
 800b630:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	2200      	movs	r2, #0
 800b636:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b638:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3748      	adds	r7, #72	@ 0x48
 800b640:	46bd      	mov	sp, r7
 800b642:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b646:	bf00      	nop
 800b648:	58024400 	.word	0x58024400
 800b64c:	03d09000 	.word	0x03d09000
 800b650:	003d0900 	.word	0x003d0900
 800b654:	08012870 	.word	0x08012870

0800b658 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b658:	b480      	push	{r7}
 800b65a:	b083      	sub	sp, #12
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b664:	f003 0308 	and.w	r3, r3, #8
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d00a      	beq.n	800b682 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	685b      	ldr	r3, [r3, #4]
 800b672:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	430a      	orrs	r2, r1
 800b680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b686:	f003 0301 	and.w	r3, r3, #1
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d00a      	beq.n	800b6a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	430a      	orrs	r2, r1
 800b6a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6a8:	f003 0302 	and.w	r3, r3, #2
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d00a      	beq.n	800b6c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	685b      	ldr	r3, [r3, #4]
 800b6b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	430a      	orrs	r2, r1
 800b6c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6ca:	f003 0304 	and.w	r3, r3, #4
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d00a      	beq.n	800b6e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	685b      	ldr	r3, [r3, #4]
 800b6d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	430a      	orrs	r2, r1
 800b6e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6ec:	f003 0310 	and.w	r3, r3, #16
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d00a      	beq.n	800b70a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	689b      	ldr	r3, [r3, #8]
 800b6fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	430a      	orrs	r2, r1
 800b708:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b70e:	f003 0320 	and.w	r3, r3, #32
 800b712:	2b00      	cmp	r3, #0
 800b714:	d00a      	beq.n	800b72c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	689b      	ldr	r3, [r3, #8]
 800b71c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	430a      	orrs	r2, r1
 800b72a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b734:	2b00      	cmp	r3, #0
 800b736:	d01a      	beq.n	800b76e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	685b      	ldr	r3, [r3, #4]
 800b73e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	430a      	orrs	r2, r1
 800b74c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b752:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b756:	d10a      	bne.n	800b76e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	685b      	ldr	r3, [r3, #4]
 800b75e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	430a      	orrs	r2, r1
 800b76c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b776:	2b00      	cmp	r3, #0
 800b778:	d00a      	beq.n	800b790 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	685b      	ldr	r3, [r3, #4]
 800b780:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	430a      	orrs	r2, r1
 800b78e:	605a      	str	r2, [r3, #4]
  }
}
 800b790:	bf00      	nop
 800b792:	370c      	adds	r7, #12
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr

0800b79c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b098      	sub	sp, #96	@ 0x60
 800b7a0:	af02      	add	r7, sp, #8
 800b7a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b7ac:	f7f6 ff7e 	bl	80026ac <HAL_GetTick>
 800b7b0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f003 0308 	and.w	r3, r3, #8
 800b7bc:	2b08      	cmp	r3, #8
 800b7be:	d12f      	bne.n	800b820 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b7c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b7c4:	9300      	str	r3, [sp, #0]
 800b7c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f000 f88e 	bl	800b8f0 <UART_WaitOnFlagUntilTimeout>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d022      	beq.n	800b820 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7e2:	e853 3f00 	ldrex	r3, [r3]
 800b7e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b7e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b7ee:	653b      	str	r3, [r7, #80]	@ 0x50
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	461a      	mov	r2, r3
 800b7f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b7f8:	647b      	str	r3, [r7, #68]	@ 0x44
 800b7fa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b7fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b800:	e841 2300 	strex	r3, r2, [r1]
 800b804:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b806:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d1e6      	bne.n	800b7da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2220      	movs	r2, #32
 800b810:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2200      	movs	r2, #0
 800b818:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b81c:	2303      	movs	r3, #3
 800b81e:	e063      	b.n	800b8e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f003 0304 	and.w	r3, r3, #4
 800b82a:	2b04      	cmp	r3, #4
 800b82c:	d149      	bne.n	800b8c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b82e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b832:	9300      	str	r3, [sp, #0]
 800b834:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b836:	2200      	movs	r2, #0
 800b838:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f000 f857 	bl	800b8f0 <UART_WaitOnFlagUntilTimeout>
 800b842:	4603      	mov	r3, r0
 800b844:	2b00      	cmp	r3, #0
 800b846:	d03c      	beq.n	800b8c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b84e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b850:	e853 3f00 	ldrex	r3, [r3]
 800b854:	623b      	str	r3, [r7, #32]
   return(result);
 800b856:	6a3b      	ldr	r3, [r7, #32]
 800b858:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b85c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	461a      	mov	r2, r3
 800b864:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b866:	633b      	str	r3, [r7, #48]	@ 0x30
 800b868:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b86a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b86c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b86e:	e841 2300 	strex	r3, r2, [r1]
 800b872:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b876:	2b00      	cmp	r3, #0
 800b878:	d1e6      	bne.n	800b848 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	3308      	adds	r3, #8
 800b880:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	e853 3f00 	ldrex	r3, [r3]
 800b888:	60fb      	str	r3, [r7, #12]
   return(result);
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	f023 0301 	bic.w	r3, r3, #1
 800b890:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	3308      	adds	r3, #8
 800b898:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b89a:	61fa      	str	r2, [r7, #28]
 800b89c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b89e:	69b9      	ldr	r1, [r7, #24]
 800b8a0:	69fa      	ldr	r2, [r7, #28]
 800b8a2:	e841 2300 	strex	r3, r2, [r1]
 800b8a6:	617b      	str	r3, [r7, #20]
   return(result);
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d1e5      	bne.n	800b87a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2220      	movs	r2, #32
 800b8b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b8be:	2303      	movs	r3, #3
 800b8c0:	e012      	b.n	800b8e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2220      	movs	r2, #32
 800b8c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2220      	movs	r2, #32
 800b8ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b8e6:	2300      	movs	r3, #0
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3758      	adds	r7, #88	@ 0x58
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}

0800b8f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b084      	sub	sp, #16
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	60f8      	str	r0, [r7, #12]
 800b8f8:	60b9      	str	r1, [r7, #8]
 800b8fa:	603b      	str	r3, [r7, #0]
 800b8fc:	4613      	mov	r3, r2
 800b8fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b900:	e04f      	b.n	800b9a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b902:	69bb      	ldr	r3, [r7, #24]
 800b904:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b908:	d04b      	beq.n	800b9a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b90a:	f7f6 fecf 	bl	80026ac <HAL_GetTick>
 800b90e:	4602      	mov	r2, r0
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	1ad3      	subs	r3, r2, r3
 800b914:	69ba      	ldr	r2, [r7, #24]
 800b916:	429a      	cmp	r2, r3
 800b918:	d302      	bcc.n	800b920 <UART_WaitOnFlagUntilTimeout+0x30>
 800b91a:	69bb      	ldr	r3, [r7, #24]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d101      	bne.n	800b924 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b920:	2303      	movs	r3, #3
 800b922:	e04e      	b.n	800b9c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f003 0304 	and.w	r3, r3, #4
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d037      	beq.n	800b9a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	2b80      	cmp	r3, #128	@ 0x80
 800b936:	d034      	beq.n	800b9a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	2b40      	cmp	r3, #64	@ 0x40
 800b93c:	d031      	beq.n	800b9a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	69db      	ldr	r3, [r3, #28]
 800b944:	f003 0308 	and.w	r3, r3, #8
 800b948:	2b08      	cmp	r3, #8
 800b94a:	d110      	bne.n	800b96e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	2208      	movs	r2, #8
 800b952:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b954:	68f8      	ldr	r0, [r7, #12]
 800b956:	f000 f839 	bl	800b9cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2208      	movs	r2, #8
 800b95e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	2200      	movs	r2, #0
 800b966:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b96a:	2301      	movs	r3, #1
 800b96c:	e029      	b.n	800b9c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	69db      	ldr	r3, [r3, #28]
 800b974:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b978:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b97c:	d111      	bne.n	800b9a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b986:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b988:	68f8      	ldr	r0, [r7, #12]
 800b98a:	f000 f81f 	bl	800b9cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	2220      	movs	r2, #32
 800b992:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	2200      	movs	r2, #0
 800b99a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b99e:	2303      	movs	r3, #3
 800b9a0:	e00f      	b.n	800b9c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	69da      	ldr	r2, [r3, #28]
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	4013      	ands	r3, r2
 800b9ac:	68ba      	ldr	r2, [r7, #8]
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	bf0c      	ite	eq
 800b9b2:	2301      	moveq	r3, #1
 800b9b4:	2300      	movne	r3, #0
 800b9b6:	b2db      	uxtb	r3, r3
 800b9b8:	461a      	mov	r2, r3
 800b9ba:	79fb      	ldrb	r3, [r7, #7]
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	d0a0      	beq.n	800b902 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b9c0:	2300      	movs	r3, #0
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3710      	adds	r7, #16
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}
	...

0800b9cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b095      	sub	sp, #84	@ 0x54
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9dc:	e853 3f00 	ldrex	r3, [r3]
 800b9e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b9e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b9e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	461a      	mov	r2, r3
 800b9f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9f2:	643b      	str	r3, [r7, #64]	@ 0x40
 800b9f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b9f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b9fa:	e841 2300 	strex	r3, r2, [r1]
 800b9fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ba00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d1e6      	bne.n	800b9d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	3308      	adds	r3, #8
 800ba0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba0e:	6a3b      	ldr	r3, [r7, #32]
 800ba10:	e853 3f00 	ldrex	r3, [r3]
 800ba14:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba16:	69fa      	ldr	r2, [r7, #28]
 800ba18:	4b1e      	ldr	r3, [pc, #120]	@ (800ba94 <UART_EndRxTransfer+0xc8>)
 800ba1a:	4013      	ands	r3, r2
 800ba1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	3308      	adds	r3, #8
 800ba24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ba26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ba28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ba2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba2e:	e841 2300 	strex	r3, r2, [r1]
 800ba32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ba34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d1e5      	bne.n	800ba06 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba3e:	2b01      	cmp	r3, #1
 800ba40:	d118      	bne.n	800ba74 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	e853 3f00 	ldrex	r3, [r3]
 800ba4e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	f023 0310 	bic.w	r3, r3, #16
 800ba56:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba60:	61bb      	str	r3, [r7, #24]
 800ba62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba64:	6979      	ldr	r1, [r7, #20]
 800ba66:	69ba      	ldr	r2, [r7, #24]
 800ba68:	e841 2300 	strex	r3, r2, [r1]
 800ba6c:	613b      	str	r3, [r7, #16]
   return(result);
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d1e6      	bne.n	800ba42 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2220      	movs	r2, #32
 800ba78:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2200      	movs	r2, #0
 800ba86:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ba88:	bf00      	nop
 800ba8a:	3754      	adds	r7, #84	@ 0x54
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba92:	4770      	bx	lr
 800ba94:	effffffe 	.word	0xeffffffe

0800ba98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ba98:	b084      	sub	sp, #16
 800ba9a:	b580      	push	{r7, lr}
 800ba9c:	b084      	sub	sp, #16
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	6078      	str	r0, [r7, #4]
 800baa2:	f107 001c 	add.w	r0, r7, #28
 800baa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800baaa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800baae:	2b01      	cmp	r3, #1
 800bab0:	d121      	bne.n	800baf6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bab6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	68da      	ldr	r2, [r3, #12]
 800bac2:	4b2c      	ldr	r3, [pc, #176]	@ (800bb74 <USB_CoreInit+0xdc>)
 800bac4:	4013      	ands	r3, r2
 800bac6:	687a      	ldr	r2, [r7, #4]
 800bac8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	68db      	ldr	r3, [r3, #12]
 800bace:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bad6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bada:	2b01      	cmp	r3, #1
 800badc:	d105      	bne.n	800baea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	68db      	ldr	r3, [r3, #12]
 800bae2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f001 faf6 	bl	800d0dc <USB_CoreReset>
 800baf0:	4603      	mov	r3, r0
 800baf2:	73fb      	strb	r3, [r7, #15]
 800baf4:	e01b      	b.n	800bb2e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	68db      	ldr	r3, [r3, #12]
 800bafa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f001 faea 	bl	800d0dc <USB_CoreReset>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bb0c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d106      	bne.n	800bb22 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb18:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	639a      	str	r2, [r3, #56]	@ 0x38
 800bb20:	e005      	b.n	800bb2e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb26:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bb2e:	7fbb      	ldrb	r3, [r7, #30]
 800bb30:	2b01      	cmp	r3, #1
 800bb32:	d116      	bne.n	800bb62 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb38:	b29a      	uxth	r2, r3
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bb42:	4b0d      	ldr	r3, [pc, #52]	@ (800bb78 <USB_CoreInit+0xe0>)
 800bb44:	4313      	orrs	r3, r2
 800bb46:	687a      	ldr	r2, [r7, #4]
 800bb48:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	689b      	ldr	r3, [r3, #8]
 800bb4e:	f043 0206 	orr.w	r2, r3, #6
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	689b      	ldr	r3, [r3, #8]
 800bb5a:	f043 0220 	orr.w	r2, r3, #32
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bb62:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3710      	adds	r7, #16
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bb6e:	b004      	add	sp, #16
 800bb70:	4770      	bx	lr
 800bb72:	bf00      	nop
 800bb74:	ffbdffbf 	.word	0xffbdffbf
 800bb78:	03ee0000 	.word	0x03ee0000

0800bb7c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b087      	sub	sp, #28
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	60f8      	str	r0, [r7, #12]
 800bb84:	60b9      	str	r1, [r7, #8]
 800bb86:	4613      	mov	r3, r2
 800bb88:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800bb8a:	79fb      	ldrb	r3, [r7, #7]
 800bb8c:	2b02      	cmp	r3, #2
 800bb8e:	d165      	bne.n	800bc5c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	4a41      	ldr	r2, [pc, #260]	@ (800bc98 <USB_SetTurnaroundTime+0x11c>)
 800bb94:	4293      	cmp	r3, r2
 800bb96:	d906      	bls.n	800bba6 <USB_SetTurnaroundTime+0x2a>
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	4a40      	ldr	r2, [pc, #256]	@ (800bc9c <USB_SetTurnaroundTime+0x120>)
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	d202      	bcs.n	800bba6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800bba0:	230f      	movs	r3, #15
 800bba2:	617b      	str	r3, [r7, #20]
 800bba4:	e062      	b.n	800bc6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	4a3c      	ldr	r2, [pc, #240]	@ (800bc9c <USB_SetTurnaroundTime+0x120>)
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	d306      	bcc.n	800bbbc <USB_SetTurnaroundTime+0x40>
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	4a3b      	ldr	r2, [pc, #236]	@ (800bca0 <USB_SetTurnaroundTime+0x124>)
 800bbb2:	4293      	cmp	r3, r2
 800bbb4:	d202      	bcs.n	800bbbc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800bbb6:	230e      	movs	r3, #14
 800bbb8:	617b      	str	r3, [r7, #20]
 800bbba:	e057      	b.n	800bc6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	4a38      	ldr	r2, [pc, #224]	@ (800bca0 <USB_SetTurnaroundTime+0x124>)
 800bbc0:	4293      	cmp	r3, r2
 800bbc2:	d306      	bcc.n	800bbd2 <USB_SetTurnaroundTime+0x56>
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	4a37      	ldr	r2, [pc, #220]	@ (800bca4 <USB_SetTurnaroundTime+0x128>)
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	d202      	bcs.n	800bbd2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800bbcc:	230d      	movs	r3, #13
 800bbce:	617b      	str	r3, [r7, #20]
 800bbd0:	e04c      	b.n	800bc6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	4a33      	ldr	r2, [pc, #204]	@ (800bca4 <USB_SetTurnaroundTime+0x128>)
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	d306      	bcc.n	800bbe8 <USB_SetTurnaroundTime+0x6c>
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	4a32      	ldr	r2, [pc, #200]	@ (800bca8 <USB_SetTurnaroundTime+0x12c>)
 800bbde:	4293      	cmp	r3, r2
 800bbe0:	d802      	bhi.n	800bbe8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800bbe2:	230c      	movs	r3, #12
 800bbe4:	617b      	str	r3, [r7, #20]
 800bbe6:	e041      	b.n	800bc6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	4a2f      	ldr	r2, [pc, #188]	@ (800bca8 <USB_SetTurnaroundTime+0x12c>)
 800bbec:	4293      	cmp	r3, r2
 800bbee:	d906      	bls.n	800bbfe <USB_SetTurnaroundTime+0x82>
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	4a2e      	ldr	r2, [pc, #184]	@ (800bcac <USB_SetTurnaroundTime+0x130>)
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	d802      	bhi.n	800bbfe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800bbf8:	230b      	movs	r3, #11
 800bbfa:	617b      	str	r3, [r7, #20]
 800bbfc:	e036      	b.n	800bc6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	4a2a      	ldr	r2, [pc, #168]	@ (800bcac <USB_SetTurnaroundTime+0x130>)
 800bc02:	4293      	cmp	r3, r2
 800bc04:	d906      	bls.n	800bc14 <USB_SetTurnaroundTime+0x98>
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	4a29      	ldr	r2, [pc, #164]	@ (800bcb0 <USB_SetTurnaroundTime+0x134>)
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	d802      	bhi.n	800bc14 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800bc0e:	230a      	movs	r3, #10
 800bc10:	617b      	str	r3, [r7, #20]
 800bc12:	e02b      	b.n	800bc6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	4a26      	ldr	r2, [pc, #152]	@ (800bcb0 <USB_SetTurnaroundTime+0x134>)
 800bc18:	4293      	cmp	r3, r2
 800bc1a:	d906      	bls.n	800bc2a <USB_SetTurnaroundTime+0xae>
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	4a25      	ldr	r2, [pc, #148]	@ (800bcb4 <USB_SetTurnaroundTime+0x138>)
 800bc20:	4293      	cmp	r3, r2
 800bc22:	d202      	bcs.n	800bc2a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800bc24:	2309      	movs	r3, #9
 800bc26:	617b      	str	r3, [r7, #20]
 800bc28:	e020      	b.n	800bc6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	4a21      	ldr	r2, [pc, #132]	@ (800bcb4 <USB_SetTurnaroundTime+0x138>)
 800bc2e:	4293      	cmp	r3, r2
 800bc30:	d306      	bcc.n	800bc40 <USB_SetTurnaroundTime+0xc4>
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	4a20      	ldr	r2, [pc, #128]	@ (800bcb8 <USB_SetTurnaroundTime+0x13c>)
 800bc36:	4293      	cmp	r3, r2
 800bc38:	d802      	bhi.n	800bc40 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800bc3a:	2308      	movs	r3, #8
 800bc3c:	617b      	str	r3, [r7, #20]
 800bc3e:	e015      	b.n	800bc6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	4a1d      	ldr	r2, [pc, #116]	@ (800bcb8 <USB_SetTurnaroundTime+0x13c>)
 800bc44:	4293      	cmp	r3, r2
 800bc46:	d906      	bls.n	800bc56 <USB_SetTurnaroundTime+0xda>
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	4a1c      	ldr	r2, [pc, #112]	@ (800bcbc <USB_SetTurnaroundTime+0x140>)
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	d202      	bcs.n	800bc56 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800bc50:	2307      	movs	r3, #7
 800bc52:	617b      	str	r3, [r7, #20]
 800bc54:	e00a      	b.n	800bc6c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800bc56:	2306      	movs	r3, #6
 800bc58:	617b      	str	r3, [r7, #20]
 800bc5a:	e007      	b.n	800bc6c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800bc5c:	79fb      	ldrb	r3, [r7, #7]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d102      	bne.n	800bc68 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800bc62:	2309      	movs	r3, #9
 800bc64:	617b      	str	r3, [r7, #20]
 800bc66:	e001      	b.n	800bc6c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800bc68:	2309      	movs	r3, #9
 800bc6a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	68db      	ldr	r3, [r3, #12]
 800bc70:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	68da      	ldr	r2, [r3, #12]
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	029b      	lsls	r3, r3, #10
 800bc80:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800bc84:	431a      	orrs	r2, r3
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bc8a:	2300      	movs	r3, #0
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	371c      	adds	r7, #28
 800bc90:	46bd      	mov	sp, r7
 800bc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc96:	4770      	bx	lr
 800bc98:	00d8acbf 	.word	0x00d8acbf
 800bc9c:	00e4e1c0 	.word	0x00e4e1c0
 800bca0:	00f42400 	.word	0x00f42400
 800bca4:	01067380 	.word	0x01067380
 800bca8:	011a499f 	.word	0x011a499f
 800bcac:	01312cff 	.word	0x01312cff
 800bcb0:	014ca43f 	.word	0x014ca43f
 800bcb4:	016e3600 	.word	0x016e3600
 800bcb8:	01a6ab1f 	.word	0x01a6ab1f
 800bcbc:	01e84800 	.word	0x01e84800

0800bcc0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b083      	sub	sp, #12
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	689b      	ldr	r3, [r3, #8]
 800bccc:	f043 0201 	orr.w	r2, r3, #1
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bcd4:	2300      	movs	r3, #0
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	370c      	adds	r7, #12
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce0:	4770      	bx	lr

0800bce2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bce2:	b480      	push	{r7}
 800bce4:	b083      	sub	sp, #12
 800bce6:	af00      	add	r7, sp, #0
 800bce8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	689b      	ldr	r3, [r3, #8]
 800bcee:	f023 0201 	bic.w	r2, r3, #1
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bcf6:	2300      	movs	r3, #0
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	370c      	adds	r7, #12
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr

0800bd04 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b084      	sub	sp, #16
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	460b      	mov	r3, r1
 800bd0e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bd10:	2300      	movs	r3, #0
 800bd12:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	68db      	ldr	r3, [r3, #12]
 800bd18:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bd20:	78fb      	ldrb	r3, [r7, #3]
 800bd22:	2b01      	cmp	r3, #1
 800bd24:	d115      	bne.n	800bd52 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	68db      	ldr	r3, [r3, #12]
 800bd2a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800bd32:	200a      	movs	r0, #10
 800bd34:	f7f6 fcc6 	bl	80026c4 <HAL_Delay>
      ms += 10U;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	330a      	adds	r3, #10
 800bd3c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f001 f93b 	bl	800cfba <USB_GetMode>
 800bd44:	4603      	mov	r3, r0
 800bd46:	2b01      	cmp	r3, #1
 800bd48:	d01e      	beq.n	800bd88 <USB_SetCurrentMode+0x84>
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	2bc7      	cmp	r3, #199	@ 0xc7
 800bd4e:	d9f0      	bls.n	800bd32 <USB_SetCurrentMode+0x2e>
 800bd50:	e01a      	b.n	800bd88 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bd52:	78fb      	ldrb	r3, [r7, #3]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d115      	bne.n	800bd84 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	68db      	ldr	r3, [r3, #12]
 800bd5c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800bd64:	200a      	movs	r0, #10
 800bd66:	f7f6 fcad 	bl	80026c4 <HAL_Delay>
      ms += 10U;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	330a      	adds	r3, #10
 800bd6e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f001 f922 	bl	800cfba <USB_GetMode>
 800bd76:	4603      	mov	r3, r0
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d005      	beq.n	800bd88 <USB_SetCurrentMode+0x84>
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	2bc7      	cmp	r3, #199	@ 0xc7
 800bd80:	d9f0      	bls.n	800bd64 <USB_SetCurrentMode+0x60>
 800bd82:	e001      	b.n	800bd88 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bd84:	2301      	movs	r3, #1
 800bd86:	e005      	b.n	800bd94 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	2bc8      	cmp	r3, #200	@ 0xc8
 800bd8c:	d101      	bne.n	800bd92 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bd8e:	2301      	movs	r3, #1
 800bd90:	e000      	b.n	800bd94 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bd92:	2300      	movs	r3, #0
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	3710      	adds	r7, #16
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd80      	pop	{r7, pc}

0800bd9c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bd9c:	b084      	sub	sp, #16
 800bd9e:	b580      	push	{r7, lr}
 800bda0:	b086      	sub	sp, #24
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	6078      	str	r0, [r7, #4]
 800bda6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800bdaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	613b      	str	r3, [r7, #16]
 800bdba:	e009      	b.n	800bdd0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bdbc:	687a      	ldr	r2, [r7, #4]
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	3340      	adds	r3, #64	@ 0x40
 800bdc2:	009b      	lsls	r3, r3, #2
 800bdc4:	4413      	add	r3, r2
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	3301      	adds	r3, #1
 800bdce:	613b      	str	r3, [r7, #16]
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	2b0e      	cmp	r3, #14
 800bdd4:	d9f2      	bls.n	800bdbc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bdd6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d11c      	bne.n	800be18 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bde4:	685b      	ldr	r3, [r3, #4]
 800bde6:	68fa      	ldr	r2, [r7, #12]
 800bde8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bdec:	f043 0302 	orr.w	r3, r3, #2
 800bdf0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdf6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	601a      	str	r2, [r3, #0]
 800be16:	e005      	b.n	800be24 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be1c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800be2a:	461a      	mov	r2, r3
 800be2c:	2300      	movs	r3, #0
 800be2e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800be30:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800be34:	2b01      	cmp	r3, #1
 800be36:	d10d      	bne.n	800be54 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800be38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d104      	bne.n	800be4a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800be40:	2100      	movs	r1, #0
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f000 f968 	bl	800c118 <USB_SetDevSpeed>
 800be48:	e008      	b.n	800be5c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800be4a:	2101      	movs	r1, #1
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f000 f963 	bl	800c118 <USB_SetDevSpeed>
 800be52:	e003      	b.n	800be5c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800be54:	2103      	movs	r1, #3
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f000 f95e 	bl	800c118 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800be5c:	2110      	movs	r1, #16
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f000 f8fa 	bl	800c058 <USB_FlushTxFifo>
 800be64:	4603      	mov	r3, r0
 800be66:	2b00      	cmp	r3, #0
 800be68:	d001      	beq.n	800be6e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800be6a:	2301      	movs	r3, #1
 800be6c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f000 f924 	bl	800c0bc <USB_FlushRxFifo>
 800be74:	4603      	mov	r3, r0
 800be76:	2b00      	cmp	r3, #0
 800be78:	d001      	beq.n	800be7e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800be7a:	2301      	movs	r3, #1
 800be7c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be84:	461a      	mov	r2, r3
 800be86:	2300      	movs	r3, #0
 800be88:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be90:	461a      	mov	r2, r3
 800be92:	2300      	movs	r3, #0
 800be94:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be9c:	461a      	mov	r2, r3
 800be9e:	2300      	movs	r3, #0
 800bea0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bea2:	2300      	movs	r3, #0
 800bea4:	613b      	str	r3, [r7, #16]
 800bea6:	e043      	b.n	800bf30 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bea8:	693b      	ldr	r3, [r7, #16]
 800beaa:	015a      	lsls	r2, r3, #5
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	4413      	add	r3, r2
 800beb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800beba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bebe:	d118      	bne.n	800bef2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800bec0:	693b      	ldr	r3, [r7, #16]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d10a      	bne.n	800bedc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bec6:	693b      	ldr	r3, [r7, #16]
 800bec8:	015a      	lsls	r2, r3, #5
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	4413      	add	r3, r2
 800bece:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bed2:	461a      	mov	r2, r3
 800bed4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800bed8:	6013      	str	r3, [r2, #0]
 800beda:	e013      	b.n	800bf04 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	015a      	lsls	r2, r3, #5
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	4413      	add	r3, r2
 800bee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bee8:	461a      	mov	r2, r3
 800beea:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800beee:	6013      	str	r3, [r2, #0]
 800bef0:	e008      	b.n	800bf04 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	015a      	lsls	r2, r3, #5
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	4413      	add	r3, r2
 800befa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800befe:	461a      	mov	r2, r3
 800bf00:	2300      	movs	r3, #0
 800bf02:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	015a      	lsls	r2, r3, #5
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	4413      	add	r3, r2
 800bf0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf10:	461a      	mov	r2, r3
 800bf12:	2300      	movs	r3, #0
 800bf14:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bf16:	693b      	ldr	r3, [r7, #16]
 800bf18:	015a      	lsls	r2, r3, #5
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	4413      	add	r3, r2
 800bf1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf22:	461a      	mov	r2, r3
 800bf24:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bf28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	3301      	adds	r3, #1
 800bf2e:	613b      	str	r3, [r7, #16]
 800bf30:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bf34:	461a      	mov	r2, r3
 800bf36:	693b      	ldr	r3, [r7, #16]
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	d3b5      	bcc.n	800bea8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	613b      	str	r3, [r7, #16]
 800bf40:	e043      	b.n	800bfca <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	015a      	lsls	r2, r3, #5
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	4413      	add	r3, r2
 800bf4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bf54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bf58:	d118      	bne.n	800bf8c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d10a      	bne.n	800bf76 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	015a      	lsls	r2, r3, #5
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	4413      	add	r3, r2
 800bf68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf6c:	461a      	mov	r2, r3
 800bf6e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800bf72:	6013      	str	r3, [r2, #0]
 800bf74:	e013      	b.n	800bf9e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	015a      	lsls	r2, r3, #5
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	4413      	add	r3, r2
 800bf7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf82:	461a      	mov	r2, r3
 800bf84:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800bf88:	6013      	str	r3, [r2, #0]
 800bf8a:	e008      	b.n	800bf9e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bf8c:	693b      	ldr	r3, [r7, #16]
 800bf8e:	015a      	lsls	r2, r3, #5
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	4413      	add	r3, r2
 800bf94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf98:	461a      	mov	r2, r3
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	015a      	lsls	r2, r3, #5
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	4413      	add	r3, r2
 800bfa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bfaa:	461a      	mov	r2, r3
 800bfac:	2300      	movs	r3, #0
 800bfae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	015a      	lsls	r2, r3, #5
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	4413      	add	r3, r2
 800bfb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bfc2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	3301      	adds	r3, #1
 800bfc8:	613b      	str	r3, [r7, #16]
 800bfca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bfce:	461a      	mov	r2, r3
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	4293      	cmp	r3, r2
 800bfd4:	d3b5      	bcc.n	800bf42 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bfdc:	691b      	ldr	r3, [r3, #16]
 800bfde:	68fa      	ldr	r2, [r7, #12]
 800bfe0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bfe4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bfe8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2200      	movs	r2, #0
 800bfee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800bff6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bff8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d105      	bne.n	800c00c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	699b      	ldr	r3, [r3, #24]
 800c004:	f043 0210 	orr.w	r2, r3, #16
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	699a      	ldr	r2, [r3, #24]
 800c010:	4b0f      	ldr	r3, [pc, #60]	@ (800c050 <USB_DevInit+0x2b4>)
 800c012:	4313      	orrs	r3, r2
 800c014:	687a      	ldr	r2, [r7, #4]
 800c016:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c018:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d005      	beq.n	800c02c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	699b      	ldr	r3, [r3, #24]
 800c024:	f043 0208 	orr.w	r2, r3, #8
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c02c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c030:	2b01      	cmp	r3, #1
 800c032:	d105      	bne.n	800c040 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	699a      	ldr	r2, [r3, #24]
 800c038:	4b06      	ldr	r3, [pc, #24]	@ (800c054 <USB_DevInit+0x2b8>)
 800c03a:	4313      	orrs	r3, r2
 800c03c:	687a      	ldr	r2, [r7, #4]
 800c03e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c040:	7dfb      	ldrb	r3, [r7, #23]
}
 800c042:	4618      	mov	r0, r3
 800c044:	3718      	adds	r7, #24
 800c046:	46bd      	mov	sp, r7
 800c048:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c04c:	b004      	add	sp, #16
 800c04e:	4770      	bx	lr
 800c050:	803c3800 	.word	0x803c3800
 800c054:	40000004 	.word	0x40000004

0800c058 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c058:	b480      	push	{r7}
 800c05a:	b085      	sub	sp, #20
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c062:	2300      	movs	r3, #0
 800c064:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	3301      	adds	r3, #1
 800c06a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c072:	d901      	bls.n	800c078 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c074:	2303      	movs	r3, #3
 800c076:	e01b      	b.n	800c0b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	691b      	ldr	r3, [r3, #16]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	daf2      	bge.n	800c066 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c080:	2300      	movs	r3, #0
 800c082:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	019b      	lsls	r3, r3, #6
 800c088:	f043 0220 	orr.w	r2, r3, #32
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	3301      	adds	r3, #1
 800c094:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c09c:	d901      	bls.n	800c0a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c09e:	2303      	movs	r3, #3
 800c0a0:	e006      	b.n	800c0b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	691b      	ldr	r3, [r3, #16]
 800c0a6:	f003 0320 	and.w	r3, r3, #32
 800c0aa:	2b20      	cmp	r3, #32
 800c0ac:	d0f0      	beq.n	800c090 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c0ae:	2300      	movs	r3, #0
}
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	3714      	adds	r7, #20
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ba:	4770      	bx	lr

0800c0bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c0bc:	b480      	push	{r7}
 800c0be:	b085      	sub	sp, #20
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	3301      	adds	r3, #1
 800c0cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c0d4:	d901      	bls.n	800c0da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c0d6:	2303      	movs	r3, #3
 800c0d8:	e018      	b.n	800c10c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	691b      	ldr	r3, [r3, #16]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	daf2      	bge.n	800c0c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2210      	movs	r2, #16
 800c0ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c0f8:	d901      	bls.n	800c0fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c0fa:	2303      	movs	r3, #3
 800c0fc:	e006      	b.n	800c10c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	691b      	ldr	r3, [r3, #16]
 800c102:	f003 0310 	and.w	r3, r3, #16
 800c106:	2b10      	cmp	r3, #16
 800c108:	d0f0      	beq.n	800c0ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c10a:	2300      	movs	r3, #0
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3714      	adds	r7, #20
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr

0800c118 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c118:	b480      	push	{r7}
 800c11a:	b085      	sub	sp, #20
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
 800c120:	460b      	mov	r3, r1
 800c122:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c12e:	681a      	ldr	r2, [r3, #0]
 800c130:	78fb      	ldrb	r3, [r7, #3]
 800c132:	68f9      	ldr	r1, [r7, #12]
 800c134:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c138:	4313      	orrs	r3, r2
 800c13a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c13c:	2300      	movs	r3, #0
}
 800c13e:	4618      	mov	r0, r3
 800c140:	3714      	adds	r7, #20
 800c142:	46bd      	mov	sp, r7
 800c144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c148:	4770      	bx	lr

0800c14a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800c14a:	b480      	push	{r7}
 800c14c:	b087      	sub	sp, #28
 800c14e:	af00      	add	r7, sp, #0
 800c150:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c15c:	689b      	ldr	r3, [r3, #8]
 800c15e:	f003 0306 	and.w	r3, r3, #6
 800c162:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d102      	bne.n	800c170 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c16a:	2300      	movs	r3, #0
 800c16c:	75fb      	strb	r3, [r7, #23]
 800c16e:	e00a      	b.n	800c186 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	2b02      	cmp	r3, #2
 800c174:	d002      	beq.n	800c17c <USB_GetDevSpeed+0x32>
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	2b06      	cmp	r3, #6
 800c17a:	d102      	bne.n	800c182 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c17c:	2302      	movs	r3, #2
 800c17e:	75fb      	strb	r3, [r7, #23]
 800c180:	e001      	b.n	800c186 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c182:	230f      	movs	r3, #15
 800c184:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c186:	7dfb      	ldrb	r3, [r7, #23]
}
 800c188:	4618      	mov	r0, r3
 800c18a:	371c      	adds	r7, #28
 800c18c:	46bd      	mov	sp, r7
 800c18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c192:	4770      	bx	lr

0800c194 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c194:	b480      	push	{r7}
 800c196:	b085      	sub	sp, #20
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	781b      	ldrb	r3, [r3, #0]
 800c1a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	785b      	ldrb	r3, [r3, #1]
 800c1ac:	2b01      	cmp	r3, #1
 800c1ae:	d139      	bne.n	800c224 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c1b6:	69da      	ldr	r2, [r3, #28]
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	781b      	ldrb	r3, [r3, #0]
 800c1bc:	f003 030f 	and.w	r3, r3, #15
 800c1c0:	2101      	movs	r1, #1
 800c1c2:	fa01 f303 	lsl.w	r3, r1, r3
 800c1c6:	b29b      	uxth	r3, r3
 800c1c8:	68f9      	ldr	r1, [r7, #12]
 800c1ca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c1ce:	4313      	orrs	r3, r2
 800c1d0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	015a      	lsls	r2, r3, #5
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	4413      	add	r3, r2
 800c1da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d153      	bne.n	800c290 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	015a      	lsls	r2, r3, #5
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	4413      	add	r3, r2
 800c1f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1f4:	681a      	ldr	r2, [r3, #0]
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	689b      	ldr	r3, [r3, #8]
 800c1fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	791b      	ldrb	r3, [r3, #4]
 800c202:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c204:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	059b      	lsls	r3, r3, #22
 800c20a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c20c:	431a      	orrs	r2, r3
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	0159      	lsls	r1, r3, #5
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	440b      	add	r3, r1
 800c216:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c21a:	4619      	mov	r1, r3
 800c21c:	4b20      	ldr	r3, [pc, #128]	@ (800c2a0 <USB_ActivateEndpoint+0x10c>)
 800c21e:	4313      	orrs	r3, r2
 800c220:	600b      	str	r3, [r1, #0]
 800c222:	e035      	b.n	800c290 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c22a:	69da      	ldr	r2, [r3, #28]
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	781b      	ldrb	r3, [r3, #0]
 800c230:	f003 030f 	and.w	r3, r3, #15
 800c234:	2101      	movs	r1, #1
 800c236:	fa01 f303 	lsl.w	r3, r1, r3
 800c23a:	041b      	lsls	r3, r3, #16
 800c23c:	68f9      	ldr	r1, [r7, #12]
 800c23e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c242:	4313      	orrs	r3, r2
 800c244:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	015a      	lsls	r2, r3, #5
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	4413      	add	r3, r2
 800c24e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d119      	bne.n	800c290 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	015a      	lsls	r2, r3, #5
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	4413      	add	r3, r2
 800c264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c268:	681a      	ldr	r2, [r3, #0]
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	689b      	ldr	r3, [r3, #8]
 800c26e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	791b      	ldrb	r3, [r3, #4]
 800c276:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c278:	430b      	orrs	r3, r1
 800c27a:	431a      	orrs	r2, r3
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	0159      	lsls	r1, r3, #5
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	440b      	add	r3, r1
 800c284:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c288:	4619      	mov	r1, r3
 800c28a:	4b05      	ldr	r3, [pc, #20]	@ (800c2a0 <USB_ActivateEndpoint+0x10c>)
 800c28c:	4313      	orrs	r3, r2
 800c28e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c290:	2300      	movs	r3, #0
}
 800c292:	4618      	mov	r0, r3
 800c294:	3714      	adds	r7, #20
 800c296:	46bd      	mov	sp, r7
 800c298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29c:	4770      	bx	lr
 800c29e:	bf00      	nop
 800c2a0:	10008000 	.word	0x10008000

0800c2a4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b085      	sub	sp, #20
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
 800c2ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	781b      	ldrb	r3, [r3, #0]
 800c2b6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	785b      	ldrb	r3, [r3, #1]
 800c2bc:	2b01      	cmp	r3, #1
 800c2be:	d161      	bne.n	800c384 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	015a      	lsls	r2, r3, #5
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	4413      	add	r3, r2
 800c2c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c2d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c2d6:	d11f      	bne.n	800c318 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	015a      	lsls	r2, r3, #5
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	4413      	add	r3, r2
 800c2e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	68ba      	ldr	r2, [r7, #8]
 800c2e8:	0151      	lsls	r1, r2, #5
 800c2ea:	68fa      	ldr	r2, [r7, #12]
 800c2ec:	440a      	add	r2, r1
 800c2ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c2f2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c2f6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	015a      	lsls	r2, r3, #5
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	4413      	add	r3, r2
 800c300:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	68ba      	ldr	r2, [r7, #8]
 800c308:	0151      	lsls	r1, r2, #5
 800c30a:	68fa      	ldr	r2, [r7, #12]
 800c30c:	440a      	add	r2, r1
 800c30e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c312:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c316:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c31e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	781b      	ldrb	r3, [r3, #0]
 800c324:	f003 030f 	and.w	r3, r3, #15
 800c328:	2101      	movs	r1, #1
 800c32a:	fa01 f303 	lsl.w	r3, r1, r3
 800c32e:	b29b      	uxth	r3, r3
 800c330:	43db      	mvns	r3, r3
 800c332:	68f9      	ldr	r1, [r7, #12]
 800c334:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c338:	4013      	ands	r3, r2
 800c33a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c342:	69da      	ldr	r2, [r3, #28]
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	781b      	ldrb	r3, [r3, #0]
 800c348:	f003 030f 	and.w	r3, r3, #15
 800c34c:	2101      	movs	r1, #1
 800c34e:	fa01 f303 	lsl.w	r3, r1, r3
 800c352:	b29b      	uxth	r3, r3
 800c354:	43db      	mvns	r3, r3
 800c356:	68f9      	ldr	r1, [r7, #12]
 800c358:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c35c:	4013      	ands	r3, r2
 800c35e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	015a      	lsls	r2, r3, #5
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	4413      	add	r3, r2
 800c368:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c36c:	681a      	ldr	r2, [r3, #0]
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	0159      	lsls	r1, r3, #5
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	440b      	add	r3, r1
 800c376:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c37a:	4619      	mov	r1, r3
 800c37c:	4b35      	ldr	r3, [pc, #212]	@ (800c454 <USB_DeactivateEndpoint+0x1b0>)
 800c37e:	4013      	ands	r3, r2
 800c380:	600b      	str	r3, [r1, #0]
 800c382:	e060      	b.n	800c446 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	015a      	lsls	r2, r3, #5
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	4413      	add	r3, r2
 800c38c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c396:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c39a:	d11f      	bne.n	800c3dc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	015a      	lsls	r2, r3, #5
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	4413      	add	r3, r2
 800c3a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	68ba      	ldr	r2, [r7, #8]
 800c3ac:	0151      	lsls	r1, r2, #5
 800c3ae:	68fa      	ldr	r2, [r7, #12]
 800c3b0:	440a      	add	r2, r1
 800c3b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c3b6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c3ba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	015a      	lsls	r2, r3, #5
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	4413      	add	r3, r2
 800c3c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	68ba      	ldr	r2, [r7, #8]
 800c3cc:	0151      	lsls	r1, r2, #5
 800c3ce:	68fa      	ldr	r2, [r7, #12]
 800c3d0:	440a      	add	r2, r1
 800c3d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c3d6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c3da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c3e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	f003 030f 	and.w	r3, r3, #15
 800c3ec:	2101      	movs	r1, #1
 800c3ee:	fa01 f303 	lsl.w	r3, r1, r3
 800c3f2:	041b      	lsls	r3, r3, #16
 800c3f4:	43db      	mvns	r3, r3
 800c3f6:	68f9      	ldr	r1, [r7, #12]
 800c3f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c3fc:	4013      	ands	r3, r2
 800c3fe:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c406:	69da      	ldr	r2, [r3, #28]
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	781b      	ldrb	r3, [r3, #0]
 800c40c:	f003 030f 	and.w	r3, r3, #15
 800c410:	2101      	movs	r1, #1
 800c412:	fa01 f303 	lsl.w	r3, r1, r3
 800c416:	041b      	lsls	r3, r3, #16
 800c418:	43db      	mvns	r3, r3
 800c41a:	68f9      	ldr	r1, [r7, #12]
 800c41c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c420:	4013      	ands	r3, r2
 800c422:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	015a      	lsls	r2, r3, #5
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	4413      	add	r3, r2
 800c42c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c430:	681a      	ldr	r2, [r3, #0]
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	0159      	lsls	r1, r3, #5
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	440b      	add	r3, r1
 800c43a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c43e:	4619      	mov	r1, r3
 800c440:	4b05      	ldr	r3, [pc, #20]	@ (800c458 <USB_DeactivateEndpoint+0x1b4>)
 800c442:	4013      	ands	r3, r2
 800c444:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c446:	2300      	movs	r3, #0
}
 800c448:	4618      	mov	r0, r3
 800c44a:	3714      	adds	r7, #20
 800c44c:	46bd      	mov	sp, r7
 800c44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c452:	4770      	bx	lr
 800c454:	ec337800 	.word	0xec337800
 800c458:	eff37800 	.word	0xeff37800

0800c45c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b08a      	sub	sp, #40	@ 0x28
 800c460:	af02      	add	r7, sp, #8
 800c462:	60f8      	str	r0, [r7, #12]
 800c464:	60b9      	str	r1, [r7, #8]
 800c466:	4613      	mov	r3, r2
 800c468:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	781b      	ldrb	r3, [r3, #0]
 800c472:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	785b      	ldrb	r3, [r3, #1]
 800c478:	2b01      	cmp	r3, #1
 800c47a:	f040 8181 	bne.w	800c780 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	691b      	ldr	r3, [r3, #16]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d132      	bne.n	800c4ec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c486:	69bb      	ldr	r3, [r7, #24]
 800c488:	015a      	lsls	r2, r3, #5
 800c48a:	69fb      	ldr	r3, [r7, #28]
 800c48c:	4413      	add	r3, r2
 800c48e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c492:	691a      	ldr	r2, [r3, #16]
 800c494:	69bb      	ldr	r3, [r7, #24]
 800c496:	0159      	lsls	r1, r3, #5
 800c498:	69fb      	ldr	r3, [r7, #28]
 800c49a:	440b      	add	r3, r1
 800c49c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4a0:	4619      	mov	r1, r3
 800c4a2:	4ba5      	ldr	r3, [pc, #660]	@ (800c738 <USB_EPStartXfer+0x2dc>)
 800c4a4:	4013      	ands	r3, r2
 800c4a6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c4a8:	69bb      	ldr	r3, [r7, #24]
 800c4aa:	015a      	lsls	r2, r3, #5
 800c4ac:	69fb      	ldr	r3, [r7, #28]
 800c4ae:	4413      	add	r3, r2
 800c4b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4b4:	691b      	ldr	r3, [r3, #16]
 800c4b6:	69ba      	ldr	r2, [r7, #24]
 800c4b8:	0151      	lsls	r1, r2, #5
 800c4ba:	69fa      	ldr	r2, [r7, #28]
 800c4bc:	440a      	add	r2, r1
 800c4be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c4c2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c4c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c4c8:	69bb      	ldr	r3, [r7, #24]
 800c4ca:	015a      	lsls	r2, r3, #5
 800c4cc:	69fb      	ldr	r3, [r7, #28]
 800c4ce:	4413      	add	r3, r2
 800c4d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4d4:	691a      	ldr	r2, [r3, #16]
 800c4d6:	69bb      	ldr	r3, [r7, #24]
 800c4d8:	0159      	lsls	r1, r3, #5
 800c4da:	69fb      	ldr	r3, [r7, #28]
 800c4dc:	440b      	add	r3, r1
 800c4de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4e2:	4619      	mov	r1, r3
 800c4e4:	4b95      	ldr	r3, [pc, #596]	@ (800c73c <USB_EPStartXfer+0x2e0>)
 800c4e6:	4013      	ands	r3, r2
 800c4e8:	610b      	str	r3, [r1, #16]
 800c4ea:	e092      	b.n	800c612 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c4ec:	69bb      	ldr	r3, [r7, #24]
 800c4ee:	015a      	lsls	r2, r3, #5
 800c4f0:	69fb      	ldr	r3, [r7, #28]
 800c4f2:	4413      	add	r3, r2
 800c4f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4f8:	691a      	ldr	r2, [r3, #16]
 800c4fa:	69bb      	ldr	r3, [r7, #24]
 800c4fc:	0159      	lsls	r1, r3, #5
 800c4fe:	69fb      	ldr	r3, [r7, #28]
 800c500:	440b      	add	r3, r1
 800c502:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c506:	4619      	mov	r1, r3
 800c508:	4b8c      	ldr	r3, [pc, #560]	@ (800c73c <USB_EPStartXfer+0x2e0>)
 800c50a:	4013      	ands	r3, r2
 800c50c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c50e:	69bb      	ldr	r3, [r7, #24]
 800c510:	015a      	lsls	r2, r3, #5
 800c512:	69fb      	ldr	r3, [r7, #28]
 800c514:	4413      	add	r3, r2
 800c516:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c51a:	691a      	ldr	r2, [r3, #16]
 800c51c:	69bb      	ldr	r3, [r7, #24]
 800c51e:	0159      	lsls	r1, r3, #5
 800c520:	69fb      	ldr	r3, [r7, #28]
 800c522:	440b      	add	r3, r1
 800c524:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c528:	4619      	mov	r1, r3
 800c52a:	4b83      	ldr	r3, [pc, #524]	@ (800c738 <USB_EPStartXfer+0x2dc>)
 800c52c:	4013      	ands	r3, r2
 800c52e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800c530:	69bb      	ldr	r3, [r7, #24]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d11a      	bne.n	800c56c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	691a      	ldr	r2, [r3, #16]
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	689b      	ldr	r3, [r3, #8]
 800c53e:	429a      	cmp	r2, r3
 800c540:	d903      	bls.n	800c54a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	689a      	ldr	r2, [r3, #8]
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c54a:	69bb      	ldr	r3, [r7, #24]
 800c54c:	015a      	lsls	r2, r3, #5
 800c54e:	69fb      	ldr	r3, [r7, #28]
 800c550:	4413      	add	r3, r2
 800c552:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c556:	691b      	ldr	r3, [r3, #16]
 800c558:	69ba      	ldr	r2, [r7, #24]
 800c55a:	0151      	lsls	r1, r2, #5
 800c55c:	69fa      	ldr	r2, [r7, #28]
 800c55e:	440a      	add	r2, r1
 800c560:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c564:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c568:	6113      	str	r3, [r2, #16]
 800c56a:	e01b      	b.n	800c5a4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c56c:	69bb      	ldr	r3, [r7, #24]
 800c56e:	015a      	lsls	r2, r3, #5
 800c570:	69fb      	ldr	r3, [r7, #28]
 800c572:	4413      	add	r3, r2
 800c574:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c578:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	6919      	ldr	r1, [r3, #16]
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	689b      	ldr	r3, [r3, #8]
 800c582:	440b      	add	r3, r1
 800c584:	1e59      	subs	r1, r3, #1
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	689b      	ldr	r3, [r3, #8]
 800c58a:	fbb1 f3f3 	udiv	r3, r1, r3
 800c58e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c590:	4b6b      	ldr	r3, [pc, #428]	@ (800c740 <USB_EPStartXfer+0x2e4>)
 800c592:	400b      	ands	r3, r1
 800c594:	69b9      	ldr	r1, [r7, #24]
 800c596:	0148      	lsls	r0, r1, #5
 800c598:	69f9      	ldr	r1, [r7, #28]
 800c59a:	4401      	add	r1, r0
 800c59c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c5a0:	4313      	orrs	r3, r2
 800c5a2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c5a4:	69bb      	ldr	r3, [r7, #24]
 800c5a6:	015a      	lsls	r2, r3, #5
 800c5a8:	69fb      	ldr	r3, [r7, #28]
 800c5aa:	4413      	add	r3, r2
 800c5ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c5b0:	691a      	ldr	r2, [r3, #16]
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	691b      	ldr	r3, [r3, #16]
 800c5b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c5ba:	69b9      	ldr	r1, [r7, #24]
 800c5bc:	0148      	lsls	r0, r1, #5
 800c5be:	69f9      	ldr	r1, [r7, #28]
 800c5c0:	4401      	add	r1, r0
 800c5c2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c5c6:	4313      	orrs	r3, r2
 800c5c8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	791b      	ldrb	r3, [r3, #4]
 800c5ce:	2b01      	cmp	r3, #1
 800c5d0:	d11f      	bne.n	800c612 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c5d2:	69bb      	ldr	r3, [r7, #24]
 800c5d4:	015a      	lsls	r2, r3, #5
 800c5d6:	69fb      	ldr	r3, [r7, #28]
 800c5d8:	4413      	add	r3, r2
 800c5da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c5de:	691b      	ldr	r3, [r3, #16]
 800c5e0:	69ba      	ldr	r2, [r7, #24]
 800c5e2:	0151      	lsls	r1, r2, #5
 800c5e4:	69fa      	ldr	r2, [r7, #28]
 800c5e6:	440a      	add	r2, r1
 800c5e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c5ec:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800c5f0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c5f2:	69bb      	ldr	r3, [r7, #24]
 800c5f4:	015a      	lsls	r2, r3, #5
 800c5f6:	69fb      	ldr	r3, [r7, #28]
 800c5f8:	4413      	add	r3, r2
 800c5fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c5fe:	691b      	ldr	r3, [r3, #16]
 800c600:	69ba      	ldr	r2, [r7, #24]
 800c602:	0151      	lsls	r1, r2, #5
 800c604:	69fa      	ldr	r2, [r7, #28]
 800c606:	440a      	add	r2, r1
 800c608:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c60c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c610:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c612:	79fb      	ldrb	r3, [r7, #7]
 800c614:	2b01      	cmp	r3, #1
 800c616:	d14b      	bne.n	800c6b0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	69db      	ldr	r3, [r3, #28]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d009      	beq.n	800c634 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c620:	69bb      	ldr	r3, [r7, #24]
 800c622:	015a      	lsls	r2, r3, #5
 800c624:	69fb      	ldr	r3, [r7, #28]
 800c626:	4413      	add	r3, r2
 800c628:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c62c:	461a      	mov	r2, r3
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	69db      	ldr	r3, [r3, #28]
 800c632:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	791b      	ldrb	r3, [r3, #4]
 800c638:	2b01      	cmp	r3, #1
 800c63a:	d128      	bne.n	800c68e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c63c:	69fb      	ldr	r3, [r7, #28]
 800c63e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c642:	689b      	ldr	r3, [r3, #8]
 800c644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d110      	bne.n	800c66e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c64c:	69bb      	ldr	r3, [r7, #24]
 800c64e:	015a      	lsls	r2, r3, #5
 800c650:	69fb      	ldr	r3, [r7, #28]
 800c652:	4413      	add	r3, r2
 800c654:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	69ba      	ldr	r2, [r7, #24]
 800c65c:	0151      	lsls	r1, r2, #5
 800c65e:	69fa      	ldr	r2, [r7, #28]
 800c660:	440a      	add	r2, r1
 800c662:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c666:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c66a:	6013      	str	r3, [r2, #0]
 800c66c:	e00f      	b.n	800c68e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c66e:	69bb      	ldr	r3, [r7, #24]
 800c670:	015a      	lsls	r2, r3, #5
 800c672:	69fb      	ldr	r3, [r7, #28]
 800c674:	4413      	add	r3, r2
 800c676:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	69ba      	ldr	r2, [r7, #24]
 800c67e:	0151      	lsls	r1, r2, #5
 800c680:	69fa      	ldr	r2, [r7, #28]
 800c682:	440a      	add	r2, r1
 800c684:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c688:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c68c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c68e:	69bb      	ldr	r3, [r7, #24]
 800c690:	015a      	lsls	r2, r3, #5
 800c692:	69fb      	ldr	r3, [r7, #28]
 800c694:	4413      	add	r3, r2
 800c696:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	69ba      	ldr	r2, [r7, #24]
 800c69e:	0151      	lsls	r1, r2, #5
 800c6a0:	69fa      	ldr	r2, [r7, #28]
 800c6a2:	440a      	add	r2, r1
 800c6a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c6a8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c6ac:	6013      	str	r3, [r2, #0]
 800c6ae:	e16a      	b.n	800c986 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c6b0:	69bb      	ldr	r3, [r7, #24]
 800c6b2:	015a      	lsls	r2, r3, #5
 800c6b4:	69fb      	ldr	r3, [r7, #28]
 800c6b6:	4413      	add	r3, r2
 800c6b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	69ba      	ldr	r2, [r7, #24]
 800c6c0:	0151      	lsls	r1, r2, #5
 800c6c2:	69fa      	ldr	r2, [r7, #28]
 800c6c4:	440a      	add	r2, r1
 800c6c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c6ca:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c6ce:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	791b      	ldrb	r3, [r3, #4]
 800c6d4:	2b01      	cmp	r3, #1
 800c6d6:	d015      	beq.n	800c704 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	691b      	ldr	r3, [r3, #16]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	f000 8152 	beq.w	800c986 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c6e2:	69fb      	ldr	r3, [r7, #28]
 800c6e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c6e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	781b      	ldrb	r3, [r3, #0]
 800c6ee:	f003 030f 	and.w	r3, r3, #15
 800c6f2:	2101      	movs	r1, #1
 800c6f4:	fa01 f303 	lsl.w	r3, r1, r3
 800c6f8:	69f9      	ldr	r1, [r7, #28]
 800c6fa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c6fe:	4313      	orrs	r3, r2
 800c700:	634b      	str	r3, [r1, #52]	@ 0x34
 800c702:	e140      	b.n	800c986 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c704:	69fb      	ldr	r3, [r7, #28]
 800c706:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c70a:	689b      	ldr	r3, [r3, #8]
 800c70c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c710:	2b00      	cmp	r3, #0
 800c712:	d117      	bne.n	800c744 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c714:	69bb      	ldr	r3, [r7, #24]
 800c716:	015a      	lsls	r2, r3, #5
 800c718:	69fb      	ldr	r3, [r7, #28]
 800c71a:	4413      	add	r3, r2
 800c71c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	69ba      	ldr	r2, [r7, #24]
 800c724:	0151      	lsls	r1, r2, #5
 800c726:	69fa      	ldr	r2, [r7, #28]
 800c728:	440a      	add	r2, r1
 800c72a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c72e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c732:	6013      	str	r3, [r2, #0]
 800c734:	e016      	b.n	800c764 <USB_EPStartXfer+0x308>
 800c736:	bf00      	nop
 800c738:	e007ffff 	.word	0xe007ffff
 800c73c:	fff80000 	.word	0xfff80000
 800c740:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c744:	69bb      	ldr	r3, [r7, #24]
 800c746:	015a      	lsls	r2, r3, #5
 800c748:	69fb      	ldr	r3, [r7, #28]
 800c74a:	4413      	add	r3, r2
 800c74c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	69ba      	ldr	r2, [r7, #24]
 800c754:	0151      	lsls	r1, r2, #5
 800c756:	69fa      	ldr	r2, [r7, #28]
 800c758:	440a      	add	r2, r1
 800c75a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c75e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c762:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	68d9      	ldr	r1, [r3, #12]
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	781a      	ldrb	r2, [r3, #0]
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	691b      	ldr	r3, [r3, #16]
 800c770:	b298      	uxth	r0, r3
 800c772:	79fb      	ldrb	r3, [r7, #7]
 800c774:	9300      	str	r3, [sp, #0]
 800c776:	4603      	mov	r3, r0
 800c778:	68f8      	ldr	r0, [r7, #12]
 800c77a:	f000 f9b9 	bl	800caf0 <USB_WritePacket>
 800c77e:	e102      	b.n	800c986 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c780:	69bb      	ldr	r3, [r7, #24]
 800c782:	015a      	lsls	r2, r3, #5
 800c784:	69fb      	ldr	r3, [r7, #28]
 800c786:	4413      	add	r3, r2
 800c788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c78c:	691a      	ldr	r2, [r3, #16]
 800c78e:	69bb      	ldr	r3, [r7, #24]
 800c790:	0159      	lsls	r1, r3, #5
 800c792:	69fb      	ldr	r3, [r7, #28]
 800c794:	440b      	add	r3, r1
 800c796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c79a:	4619      	mov	r1, r3
 800c79c:	4b7c      	ldr	r3, [pc, #496]	@ (800c990 <USB_EPStartXfer+0x534>)
 800c79e:	4013      	ands	r3, r2
 800c7a0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c7a2:	69bb      	ldr	r3, [r7, #24]
 800c7a4:	015a      	lsls	r2, r3, #5
 800c7a6:	69fb      	ldr	r3, [r7, #28]
 800c7a8:	4413      	add	r3, r2
 800c7aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7ae:	691a      	ldr	r2, [r3, #16]
 800c7b0:	69bb      	ldr	r3, [r7, #24]
 800c7b2:	0159      	lsls	r1, r3, #5
 800c7b4:	69fb      	ldr	r3, [r7, #28]
 800c7b6:	440b      	add	r3, r1
 800c7b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7bc:	4619      	mov	r1, r3
 800c7be:	4b75      	ldr	r3, [pc, #468]	@ (800c994 <USB_EPStartXfer+0x538>)
 800c7c0:	4013      	ands	r3, r2
 800c7c2:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800c7c4:	69bb      	ldr	r3, [r7, #24]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d12f      	bne.n	800c82a <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	691b      	ldr	r3, [r3, #16]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d003      	beq.n	800c7da <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	689a      	ldr	r2, [r3, #8]
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	689a      	ldr	r2, [r3, #8]
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c7e2:	69bb      	ldr	r3, [r7, #24]
 800c7e4:	015a      	lsls	r2, r3, #5
 800c7e6:	69fb      	ldr	r3, [r7, #28]
 800c7e8:	4413      	add	r3, r2
 800c7ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7ee:	691a      	ldr	r2, [r3, #16]
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	6a1b      	ldr	r3, [r3, #32]
 800c7f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c7f8:	69b9      	ldr	r1, [r7, #24]
 800c7fa:	0148      	lsls	r0, r1, #5
 800c7fc:	69f9      	ldr	r1, [r7, #28]
 800c7fe:	4401      	add	r1, r0
 800c800:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c804:	4313      	orrs	r3, r2
 800c806:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c808:	69bb      	ldr	r3, [r7, #24]
 800c80a:	015a      	lsls	r2, r3, #5
 800c80c:	69fb      	ldr	r3, [r7, #28]
 800c80e:	4413      	add	r3, r2
 800c810:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c814:	691b      	ldr	r3, [r3, #16]
 800c816:	69ba      	ldr	r2, [r7, #24]
 800c818:	0151      	lsls	r1, r2, #5
 800c81a:	69fa      	ldr	r2, [r7, #28]
 800c81c:	440a      	add	r2, r1
 800c81e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c822:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c826:	6113      	str	r3, [r2, #16]
 800c828:	e05f      	b.n	800c8ea <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	691b      	ldr	r3, [r3, #16]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d123      	bne.n	800c87a <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c832:	69bb      	ldr	r3, [r7, #24]
 800c834:	015a      	lsls	r2, r3, #5
 800c836:	69fb      	ldr	r3, [r7, #28]
 800c838:	4413      	add	r3, r2
 800c83a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c83e:	691a      	ldr	r2, [r3, #16]
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	689b      	ldr	r3, [r3, #8]
 800c844:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c848:	69b9      	ldr	r1, [r7, #24]
 800c84a:	0148      	lsls	r0, r1, #5
 800c84c:	69f9      	ldr	r1, [r7, #28]
 800c84e:	4401      	add	r1, r0
 800c850:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c854:	4313      	orrs	r3, r2
 800c856:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c858:	69bb      	ldr	r3, [r7, #24]
 800c85a:	015a      	lsls	r2, r3, #5
 800c85c:	69fb      	ldr	r3, [r7, #28]
 800c85e:	4413      	add	r3, r2
 800c860:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c864:	691b      	ldr	r3, [r3, #16]
 800c866:	69ba      	ldr	r2, [r7, #24]
 800c868:	0151      	lsls	r1, r2, #5
 800c86a:	69fa      	ldr	r2, [r7, #28]
 800c86c:	440a      	add	r2, r1
 800c86e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c872:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c876:	6113      	str	r3, [r2, #16]
 800c878:	e037      	b.n	800c8ea <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	691a      	ldr	r2, [r3, #16]
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	689b      	ldr	r3, [r3, #8]
 800c882:	4413      	add	r3, r2
 800c884:	1e5a      	subs	r2, r3, #1
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	689b      	ldr	r3, [r3, #8]
 800c88a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c88e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	689b      	ldr	r3, [r3, #8]
 800c894:	8afa      	ldrh	r2, [r7, #22]
 800c896:	fb03 f202 	mul.w	r2, r3, r2
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c89e:	69bb      	ldr	r3, [r7, #24]
 800c8a0:	015a      	lsls	r2, r3, #5
 800c8a2:	69fb      	ldr	r3, [r7, #28]
 800c8a4:	4413      	add	r3, r2
 800c8a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c8aa:	691a      	ldr	r2, [r3, #16]
 800c8ac:	8afb      	ldrh	r3, [r7, #22]
 800c8ae:	04d9      	lsls	r1, r3, #19
 800c8b0:	4b39      	ldr	r3, [pc, #228]	@ (800c998 <USB_EPStartXfer+0x53c>)
 800c8b2:	400b      	ands	r3, r1
 800c8b4:	69b9      	ldr	r1, [r7, #24]
 800c8b6:	0148      	lsls	r0, r1, #5
 800c8b8:	69f9      	ldr	r1, [r7, #28]
 800c8ba:	4401      	add	r1, r0
 800c8bc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c8c0:	4313      	orrs	r3, r2
 800c8c2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c8c4:	69bb      	ldr	r3, [r7, #24]
 800c8c6:	015a      	lsls	r2, r3, #5
 800c8c8:	69fb      	ldr	r3, [r7, #28]
 800c8ca:	4413      	add	r3, r2
 800c8cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c8d0:	691a      	ldr	r2, [r3, #16]
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	6a1b      	ldr	r3, [r3, #32]
 800c8d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c8da:	69b9      	ldr	r1, [r7, #24]
 800c8dc:	0148      	lsls	r0, r1, #5
 800c8de:	69f9      	ldr	r1, [r7, #28]
 800c8e0:	4401      	add	r1, r0
 800c8e2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c8e6:	4313      	orrs	r3, r2
 800c8e8:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800c8ea:	79fb      	ldrb	r3, [r7, #7]
 800c8ec:	2b01      	cmp	r3, #1
 800c8ee:	d10d      	bne.n	800c90c <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	68db      	ldr	r3, [r3, #12]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d009      	beq.n	800c90c <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	68d9      	ldr	r1, [r3, #12]
 800c8fc:	69bb      	ldr	r3, [r7, #24]
 800c8fe:	015a      	lsls	r2, r3, #5
 800c900:	69fb      	ldr	r3, [r7, #28]
 800c902:	4413      	add	r3, r2
 800c904:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c908:	460a      	mov	r2, r1
 800c90a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	791b      	ldrb	r3, [r3, #4]
 800c910:	2b01      	cmp	r3, #1
 800c912:	d128      	bne.n	800c966 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c914:	69fb      	ldr	r3, [r7, #28]
 800c916:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c91a:	689b      	ldr	r3, [r3, #8]
 800c91c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c920:	2b00      	cmp	r3, #0
 800c922:	d110      	bne.n	800c946 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c924:	69bb      	ldr	r3, [r7, #24]
 800c926:	015a      	lsls	r2, r3, #5
 800c928:	69fb      	ldr	r3, [r7, #28]
 800c92a:	4413      	add	r3, r2
 800c92c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	69ba      	ldr	r2, [r7, #24]
 800c934:	0151      	lsls	r1, r2, #5
 800c936:	69fa      	ldr	r2, [r7, #28]
 800c938:	440a      	add	r2, r1
 800c93a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c93e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c942:	6013      	str	r3, [r2, #0]
 800c944:	e00f      	b.n	800c966 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c946:	69bb      	ldr	r3, [r7, #24]
 800c948:	015a      	lsls	r2, r3, #5
 800c94a:	69fb      	ldr	r3, [r7, #28]
 800c94c:	4413      	add	r3, r2
 800c94e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	69ba      	ldr	r2, [r7, #24]
 800c956:	0151      	lsls	r1, r2, #5
 800c958:	69fa      	ldr	r2, [r7, #28]
 800c95a:	440a      	add	r2, r1
 800c95c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c960:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c964:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c966:	69bb      	ldr	r3, [r7, #24]
 800c968:	015a      	lsls	r2, r3, #5
 800c96a:	69fb      	ldr	r3, [r7, #28]
 800c96c:	4413      	add	r3, r2
 800c96e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	69ba      	ldr	r2, [r7, #24]
 800c976:	0151      	lsls	r1, r2, #5
 800c978:	69fa      	ldr	r2, [r7, #28]
 800c97a:	440a      	add	r2, r1
 800c97c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c980:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c984:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c986:	2300      	movs	r3, #0
}
 800c988:	4618      	mov	r0, r3
 800c98a:	3720      	adds	r7, #32
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}
 800c990:	fff80000 	.word	0xfff80000
 800c994:	e007ffff 	.word	0xe007ffff
 800c998:	1ff80000 	.word	0x1ff80000

0800c99c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c99c:	b480      	push	{r7}
 800c99e:	b087      	sub	sp, #28
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
 800c9a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	785b      	ldrb	r3, [r3, #1]
 800c9b6:	2b01      	cmp	r3, #1
 800c9b8:	d14a      	bne.n	800ca50 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	781b      	ldrb	r3, [r3, #0]
 800c9be:	015a      	lsls	r2, r3, #5
 800c9c0:	693b      	ldr	r3, [r7, #16]
 800c9c2:	4413      	add	r3, r2
 800c9c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c9ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c9d2:	f040 8086 	bne.w	800cae2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	781b      	ldrb	r3, [r3, #0]
 800c9da:	015a      	lsls	r2, r3, #5
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	4413      	add	r3, r2
 800c9e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	683a      	ldr	r2, [r7, #0]
 800c9e8:	7812      	ldrb	r2, [r2, #0]
 800c9ea:	0151      	lsls	r1, r2, #5
 800c9ec:	693a      	ldr	r2, [r7, #16]
 800c9ee:	440a      	add	r2, r1
 800c9f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c9f4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c9f8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	781b      	ldrb	r3, [r3, #0]
 800c9fe:	015a      	lsls	r2, r3, #5
 800ca00:	693b      	ldr	r3, [r7, #16]
 800ca02:	4413      	add	r3, r2
 800ca04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	683a      	ldr	r2, [r7, #0]
 800ca0c:	7812      	ldrb	r2, [r2, #0]
 800ca0e:	0151      	lsls	r1, r2, #5
 800ca10:	693a      	ldr	r2, [r7, #16]
 800ca12:	440a      	add	r2, r1
 800ca14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ca18:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ca1c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	3301      	adds	r3, #1
 800ca22:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	d902      	bls.n	800ca34 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ca2e:	2301      	movs	r3, #1
 800ca30:	75fb      	strb	r3, [r7, #23]
          break;
 800ca32:	e056      	b.n	800cae2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	781b      	ldrb	r3, [r3, #0]
 800ca38:	015a      	lsls	r2, r3, #5
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	4413      	add	r3, r2
 800ca3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ca48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ca4c:	d0e7      	beq.n	800ca1e <USB_EPStopXfer+0x82>
 800ca4e:	e048      	b.n	800cae2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	781b      	ldrb	r3, [r3, #0]
 800ca54:	015a      	lsls	r2, r3, #5
 800ca56:	693b      	ldr	r3, [r7, #16]
 800ca58:	4413      	add	r3, r2
 800ca5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ca64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ca68:	d13b      	bne.n	800cae2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	781b      	ldrb	r3, [r3, #0]
 800ca6e:	015a      	lsls	r2, r3, #5
 800ca70:	693b      	ldr	r3, [r7, #16]
 800ca72:	4413      	add	r3, r2
 800ca74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	683a      	ldr	r2, [r7, #0]
 800ca7c:	7812      	ldrb	r2, [r2, #0]
 800ca7e:	0151      	lsls	r1, r2, #5
 800ca80:	693a      	ldr	r2, [r7, #16]
 800ca82:	440a      	add	r2, r1
 800ca84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ca88:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ca8c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	781b      	ldrb	r3, [r3, #0]
 800ca92:	015a      	lsls	r2, r3, #5
 800ca94:	693b      	ldr	r3, [r7, #16]
 800ca96:	4413      	add	r3, r2
 800ca98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	683a      	ldr	r2, [r7, #0]
 800caa0:	7812      	ldrb	r2, [r2, #0]
 800caa2:	0151      	lsls	r1, r2, #5
 800caa4:	693a      	ldr	r2, [r7, #16]
 800caa6:	440a      	add	r2, r1
 800caa8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800caac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cab0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	3301      	adds	r3, #1
 800cab6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	f242 7210 	movw	r2, #10000	@ 0x2710
 800cabe:	4293      	cmp	r3, r2
 800cac0:	d902      	bls.n	800cac8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800cac2:	2301      	movs	r3, #1
 800cac4:	75fb      	strb	r3, [r7, #23]
          break;
 800cac6:	e00c      	b.n	800cae2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	781b      	ldrb	r3, [r3, #0]
 800cacc:	015a      	lsls	r2, r3, #5
 800cace:	693b      	ldr	r3, [r7, #16]
 800cad0:	4413      	add	r3, r2
 800cad2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cadc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cae0:	d0e7      	beq.n	800cab2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800cae2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cae4:	4618      	mov	r0, r3
 800cae6:	371c      	adds	r7, #28
 800cae8:	46bd      	mov	sp, r7
 800caea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caee:	4770      	bx	lr

0800caf0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800caf0:	b480      	push	{r7}
 800caf2:	b089      	sub	sp, #36	@ 0x24
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	60f8      	str	r0, [r7, #12]
 800caf8:	60b9      	str	r1, [r7, #8]
 800cafa:	4611      	mov	r1, r2
 800cafc:	461a      	mov	r2, r3
 800cafe:	460b      	mov	r3, r1
 800cb00:	71fb      	strb	r3, [r7, #7]
 800cb02:	4613      	mov	r3, r2
 800cb04:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800cb0a:	68bb      	ldr	r3, [r7, #8]
 800cb0c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800cb0e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d123      	bne.n	800cb5e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800cb16:	88bb      	ldrh	r3, [r7, #4]
 800cb18:	3303      	adds	r3, #3
 800cb1a:	089b      	lsrs	r3, r3, #2
 800cb1c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800cb1e:	2300      	movs	r3, #0
 800cb20:	61bb      	str	r3, [r7, #24]
 800cb22:	e018      	b.n	800cb56 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cb24:	79fb      	ldrb	r3, [r7, #7]
 800cb26:	031a      	lsls	r2, r3, #12
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	4413      	add	r3, r2
 800cb2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cb30:	461a      	mov	r2, r3
 800cb32:	69fb      	ldr	r3, [r7, #28]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	6013      	str	r3, [r2, #0]
      pSrc++;
 800cb38:	69fb      	ldr	r3, [r7, #28]
 800cb3a:	3301      	adds	r3, #1
 800cb3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cb3e:	69fb      	ldr	r3, [r7, #28]
 800cb40:	3301      	adds	r3, #1
 800cb42:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cb44:	69fb      	ldr	r3, [r7, #28]
 800cb46:	3301      	adds	r3, #1
 800cb48:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cb4a:	69fb      	ldr	r3, [r7, #28]
 800cb4c:	3301      	adds	r3, #1
 800cb4e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800cb50:	69bb      	ldr	r3, [r7, #24]
 800cb52:	3301      	adds	r3, #1
 800cb54:	61bb      	str	r3, [r7, #24]
 800cb56:	69ba      	ldr	r2, [r7, #24]
 800cb58:	693b      	ldr	r3, [r7, #16]
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	d3e2      	bcc.n	800cb24 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800cb5e:	2300      	movs	r3, #0
}
 800cb60:	4618      	mov	r0, r3
 800cb62:	3724      	adds	r7, #36	@ 0x24
 800cb64:	46bd      	mov	sp, r7
 800cb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6a:	4770      	bx	lr

0800cb6c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cb6c:	b480      	push	{r7}
 800cb6e:	b08b      	sub	sp, #44	@ 0x2c
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	60f8      	str	r0, [r7, #12]
 800cb74:	60b9      	str	r1, [r7, #8]
 800cb76:	4613      	mov	r3, r2
 800cb78:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800cb7e:	68bb      	ldr	r3, [r7, #8]
 800cb80:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800cb82:	88fb      	ldrh	r3, [r7, #6]
 800cb84:	089b      	lsrs	r3, r3, #2
 800cb86:	b29b      	uxth	r3, r3
 800cb88:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800cb8a:	88fb      	ldrh	r3, [r7, #6]
 800cb8c:	f003 0303 	and.w	r3, r3, #3
 800cb90:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800cb92:	2300      	movs	r3, #0
 800cb94:	623b      	str	r3, [r7, #32]
 800cb96:	e014      	b.n	800cbc2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cb98:	69bb      	ldr	r3, [r7, #24]
 800cb9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cb9e:	681a      	ldr	r2, [r3, #0]
 800cba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cba2:	601a      	str	r2, [r3, #0]
    pDest++;
 800cba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cba6:	3301      	adds	r3, #1
 800cba8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800cbaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbac:	3301      	adds	r3, #1
 800cbae:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800cbb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbb2:	3301      	adds	r3, #1
 800cbb4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800cbb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbb8:	3301      	adds	r3, #1
 800cbba:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800cbbc:	6a3b      	ldr	r3, [r7, #32]
 800cbbe:	3301      	adds	r3, #1
 800cbc0:	623b      	str	r3, [r7, #32]
 800cbc2:	6a3a      	ldr	r2, [r7, #32]
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	d3e6      	bcc.n	800cb98 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800cbca:	8bfb      	ldrh	r3, [r7, #30]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d01e      	beq.n	800cc0e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800cbd4:	69bb      	ldr	r3, [r7, #24]
 800cbd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cbda:	461a      	mov	r2, r3
 800cbdc:	f107 0310 	add.w	r3, r7, #16
 800cbe0:	6812      	ldr	r2, [r2, #0]
 800cbe2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800cbe4:	693a      	ldr	r2, [r7, #16]
 800cbe6:	6a3b      	ldr	r3, [r7, #32]
 800cbe8:	b2db      	uxtb	r3, r3
 800cbea:	00db      	lsls	r3, r3, #3
 800cbec:	fa22 f303 	lsr.w	r3, r2, r3
 800cbf0:	b2da      	uxtb	r2, r3
 800cbf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbf4:	701a      	strb	r2, [r3, #0]
      i++;
 800cbf6:	6a3b      	ldr	r3, [r7, #32]
 800cbf8:	3301      	adds	r3, #1
 800cbfa:	623b      	str	r3, [r7, #32]
      pDest++;
 800cbfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbfe:	3301      	adds	r3, #1
 800cc00:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800cc02:	8bfb      	ldrh	r3, [r7, #30]
 800cc04:	3b01      	subs	r3, #1
 800cc06:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800cc08:	8bfb      	ldrh	r3, [r7, #30]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d1ea      	bne.n	800cbe4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800cc0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cc10:	4618      	mov	r0, r3
 800cc12:	372c      	adds	r7, #44	@ 0x2c
 800cc14:	46bd      	mov	sp, r7
 800cc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1a:	4770      	bx	lr

0800cc1c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	b085      	sub	sp, #20
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
 800cc24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	781b      	ldrb	r3, [r3, #0]
 800cc2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	785b      	ldrb	r3, [r3, #1]
 800cc34:	2b01      	cmp	r3, #1
 800cc36:	d12c      	bne.n	800cc92 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	015a      	lsls	r2, r3, #5
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	4413      	add	r3, r2
 800cc40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	db12      	blt.n	800cc70 <USB_EPSetStall+0x54>
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d00f      	beq.n	800cc70 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	015a      	lsls	r2, r3, #5
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	4413      	add	r3, r2
 800cc58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	68ba      	ldr	r2, [r7, #8]
 800cc60:	0151      	lsls	r1, r2, #5
 800cc62:	68fa      	ldr	r2, [r7, #12]
 800cc64:	440a      	add	r2, r1
 800cc66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cc6a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800cc6e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	015a      	lsls	r2, r3, #5
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	4413      	add	r3, r2
 800cc78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	68ba      	ldr	r2, [r7, #8]
 800cc80:	0151      	lsls	r1, r2, #5
 800cc82:	68fa      	ldr	r2, [r7, #12]
 800cc84:	440a      	add	r2, r1
 800cc86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cc8a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800cc8e:	6013      	str	r3, [r2, #0]
 800cc90:	e02b      	b.n	800ccea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	015a      	lsls	r2, r3, #5
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	4413      	add	r3, r2
 800cc9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	db12      	blt.n	800ccca <USB_EPSetStall+0xae>
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d00f      	beq.n	800ccca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	015a      	lsls	r2, r3, #5
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	4413      	add	r3, r2
 800ccb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	68ba      	ldr	r2, [r7, #8]
 800ccba:	0151      	lsls	r1, r2, #5
 800ccbc:	68fa      	ldr	r2, [r7, #12]
 800ccbe:	440a      	add	r2, r1
 800ccc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ccc4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ccc8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ccca:	68bb      	ldr	r3, [r7, #8]
 800cccc:	015a      	lsls	r2, r3, #5
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	4413      	add	r3, r2
 800ccd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	68ba      	ldr	r2, [r7, #8]
 800ccda:	0151      	lsls	r1, r2, #5
 800ccdc:	68fa      	ldr	r2, [r7, #12]
 800ccde:	440a      	add	r2, r1
 800cce0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cce4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800cce8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ccea:	2300      	movs	r3, #0
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	3714      	adds	r7, #20
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf6:	4770      	bx	lr

0800ccf8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b085      	sub	sp, #20
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	785b      	ldrb	r3, [r3, #1]
 800cd10:	2b01      	cmp	r3, #1
 800cd12:	d128      	bne.n	800cd66 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	015a      	lsls	r2, r3, #5
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	4413      	add	r3, r2
 800cd1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	68ba      	ldr	r2, [r7, #8]
 800cd24:	0151      	lsls	r1, r2, #5
 800cd26:	68fa      	ldr	r2, [r7, #12]
 800cd28:	440a      	add	r2, r1
 800cd2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cd2e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cd32:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	791b      	ldrb	r3, [r3, #4]
 800cd38:	2b03      	cmp	r3, #3
 800cd3a:	d003      	beq.n	800cd44 <USB_EPClearStall+0x4c>
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	791b      	ldrb	r3, [r3, #4]
 800cd40:	2b02      	cmp	r3, #2
 800cd42:	d138      	bne.n	800cdb6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	015a      	lsls	r2, r3, #5
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	4413      	add	r3, r2
 800cd4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	68ba      	ldr	r2, [r7, #8]
 800cd54:	0151      	lsls	r1, r2, #5
 800cd56:	68fa      	ldr	r2, [r7, #12]
 800cd58:	440a      	add	r2, r1
 800cd5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cd5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cd62:	6013      	str	r3, [r2, #0]
 800cd64:	e027      	b.n	800cdb6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cd66:	68bb      	ldr	r3, [r7, #8]
 800cd68:	015a      	lsls	r2, r3, #5
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	4413      	add	r3, r2
 800cd6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	68ba      	ldr	r2, [r7, #8]
 800cd76:	0151      	lsls	r1, r2, #5
 800cd78:	68fa      	ldr	r2, [r7, #12]
 800cd7a:	440a      	add	r2, r1
 800cd7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cd80:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cd84:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	791b      	ldrb	r3, [r3, #4]
 800cd8a:	2b03      	cmp	r3, #3
 800cd8c:	d003      	beq.n	800cd96 <USB_EPClearStall+0x9e>
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	791b      	ldrb	r3, [r3, #4]
 800cd92:	2b02      	cmp	r3, #2
 800cd94:	d10f      	bne.n	800cdb6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cd96:	68bb      	ldr	r3, [r7, #8]
 800cd98:	015a      	lsls	r2, r3, #5
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	4413      	add	r3, r2
 800cd9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	68ba      	ldr	r2, [r7, #8]
 800cda6:	0151      	lsls	r1, r2, #5
 800cda8:	68fa      	ldr	r2, [r7, #12]
 800cdaa:	440a      	add	r2, r1
 800cdac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cdb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cdb4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800cdb6:	2300      	movs	r3, #0
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3714      	adds	r7, #20
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc2:	4770      	bx	lr

0800cdc4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	b085      	sub	sp, #20
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
 800cdcc:	460b      	mov	r3, r1
 800cdce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	68fa      	ldr	r2, [r7, #12]
 800cdde:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cde2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800cde6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cdee:	681a      	ldr	r2, [r3, #0]
 800cdf0:	78fb      	ldrb	r3, [r7, #3]
 800cdf2:	011b      	lsls	r3, r3, #4
 800cdf4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800cdf8:	68f9      	ldr	r1, [r7, #12]
 800cdfa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cdfe:	4313      	orrs	r3, r2
 800ce00:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ce02:	2300      	movs	r3, #0
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	3714      	adds	r7, #20
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0e:	4770      	bx	lr

0800ce10 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ce10:	b480      	push	{r7}
 800ce12:	b085      	sub	sp, #20
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	68fa      	ldr	r2, [r7, #12]
 800ce26:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ce2a:	f023 0303 	bic.w	r3, r3, #3
 800ce2e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ce36:	685b      	ldr	r3, [r3, #4]
 800ce38:	68fa      	ldr	r2, [r7, #12]
 800ce3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ce3e:	f023 0302 	bic.w	r3, r3, #2
 800ce42:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ce44:	2300      	movs	r3, #0
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3714      	adds	r7, #20
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce50:	4770      	bx	lr

0800ce52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ce52:	b480      	push	{r7}
 800ce54:	b085      	sub	sp, #20
 800ce56:	af00      	add	r7, sp, #0
 800ce58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	68fa      	ldr	r2, [r7, #12]
 800ce68:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ce6c:	f023 0303 	bic.w	r3, r3, #3
 800ce70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ce78:	685b      	ldr	r3, [r3, #4]
 800ce7a:	68fa      	ldr	r2, [r7, #12]
 800ce7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ce80:	f043 0302 	orr.w	r3, r3, #2
 800ce84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ce86:	2300      	movs	r3, #0
}
 800ce88:	4618      	mov	r0, r3
 800ce8a:	3714      	adds	r7, #20
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce92:	4770      	bx	lr

0800ce94 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ce94:	b480      	push	{r7}
 800ce96:	b085      	sub	sp, #20
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	695b      	ldr	r3, [r3, #20]
 800cea0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	699b      	ldr	r3, [r3, #24]
 800cea6:	68fa      	ldr	r2, [r7, #12]
 800cea8:	4013      	ands	r3, r2
 800ceaa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ceac:	68fb      	ldr	r3, [r7, #12]
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	3714      	adds	r7, #20
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb8:	4770      	bx	lr

0800ceba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ceba:	b480      	push	{r7}
 800cebc:	b085      	sub	sp, #20
 800cebe:	af00      	add	r7, sp, #0
 800cec0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cecc:	699b      	ldr	r3, [r3, #24]
 800cece:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ced6:	69db      	ldr	r3, [r3, #28]
 800ced8:	68ba      	ldr	r2, [r7, #8]
 800ceda:	4013      	ands	r3, r2
 800cedc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800cede:	68bb      	ldr	r3, [r7, #8]
 800cee0:	0c1b      	lsrs	r3, r3, #16
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3714      	adds	r7, #20
 800cee6:	46bd      	mov	sp, r7
 800cee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceec:	4770      	bx	lr

0800ceee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ceee:	b480      	push	{r7}
 800cef0:	b085      	sub	sp, #20
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cf00:	699b      	ldr	r3, [r3, #24]
 800cf02:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cf0a:	69db      	ldr	r3, [r3, #28]
 800cf0c:	68ba      	ldr	r2, [r7, #8]
 800cf0e:	4013      	ands	r3, r2
 800cf10:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	b29b      	uxth	r3, r3
}
 800cf16:	4618      	mov	r0, r3
 800cf18:	3714      	adds	r7, #20
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf20:	4770      	bx	lr

0800cf22 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cf22:	b480      	push	{r7}
 800cf24:	b085      	sub	sp, #20
 800cf26:	af00      	add	r7, sp, #0
 800cf28:	6078      	str	r0, [r7, #4]
 800cf2a:	460b      	mov	r3, r1
 800cf2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800cf32:	78fb      	ldrb	r3, [r7, #3]
 800cf34:	015a      	lsls	r2, r3, #5
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	4413      	add	r3, r2
 800cf3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf3e:	689b      	ldr	r3, [r3, #8]
 800cf40:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cf48:	695b      	ldr	r3, [r3, #20]
 800cf4a:	68ba      	ldr	r2, [r7, #8]
 800cf4c:	4013      	ands	r3, r2
 800cf4e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cf50:	68bb      	ldr	r3, [r7, #8]
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3714      	adds	r7, #20
 800cf56:	46bd      	mov	sp, r7
 800cf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5c:	4770      	bx	lr

0800cf5e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cf5e:	b480      	push	{r7}
 800cf60:	b087      	sub	sp, #28
 800cf62:	af00      	add	r7, sp, #0
 800cf64:	6078      	str	r0, [r7, #4]
 800cf66:	460b      	mov	r3, r1
 800cf68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800cf6e:	697b      	ldr	r3, [r7, #20]
 800cf70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cf74:	691b      	ldr	r3, [r3, #16]
 800cf76:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cf7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf80:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800cf82:	78fb      	ldrb	r3, [r7, #3]
 800cf84:	f003 030f 	and.w	r3, r3, #15
 800cf88:	68fa      	ldr	r2, [r7, #12]
 800cf8a:	fa22 f303 	lsr.w	r3, r2, r3
 800cf8e:	01db      	lsls	r3, r3, #7
 800cf90:	b2db      	uxtb	r3, r3
 800cf92:	693a      	ldr	r2, [r7, #16]
 800cf94:	4313      	orrs	r3, r2
 800cf96:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800cf98:	78fb      	ldrb	r3, [r7, #3]
 800cf9a:	015a      	lsls	r2, r3, #5
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	4413      	add	r3, r2
 800cfa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cfa4:	689b      	ldr	r3, [r3, #8]
 800cfa6:	693a      	ldr	r2, [r7, #16]
 800cfa8:	4013      	ands	r3, r2
 800cfaa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cfac:	68bb      	ldr	r3, [r7, #8]
}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	371c      	adds	r7, #28
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb8:	4770      	bx	lr

0800cfba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800cfba:	b480      	push	{r7}
 800cfbc:	b083      	sub	sp, #12
 800cfbe:	af00      	add	r7, sp, #0
 800cfc0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	695b      	ldr	r3, [r3, #20]
 800cfc6:	f003 0301 	and.w	r3, r3, #1
}
 800cfca:	4618      	mov	r0, r3
 800cfcc:	370c      	adds	r7, #12
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd4:	4770      	bx	lr
	...

0800cfd8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b085      	sub	sp, #20
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cfea:	681a      	ldr	r2, [r3, #0]
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cff2:	4619      	mov	r1, r3
 800cff4:	4b09      	ldr	r3, [pc, #36]	@ (800d01c <USB_ActivateSetup+0x44>)
 800cff6:	4013      	ands	r3, r2
 800cff8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d000:	685b      	ldr	r3, [r3, #4]
 800d002:	68fa      	ldr	r2, [r7, #12]
 800d004:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d008:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d00c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d00e:	2300      	movs	r3, #0
}
 800d010:	4618      	mov	r0, r3
 800d012:	3714      	adds	r7, #20
 800d014:	46bd      	mov	sp, r7
 800d016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01a:	4770      	bx	lr
 800d01c:	fffff800 	.word	0xfffff800

0800d020 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800d020:	b480      	push	{r7}
 800d022:	b087      	sub	sp, #28
 800d024:	af00      	add	r7, sp, #0
 800d026:	60f8      	str	r0, [r7, #12]
 800d028:	460b      	mov	r3, r1
 800d02a:	607a      	str	r2, [r7, #4]
 800d02c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	333c      	adds	r3, #60	@ 0x3c
 800d036:	3304      	adds	r3, #4
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d03c:	693b      	ldr	r3, [r7, #16]
 800d03e:	4a26      	ldr	r2, [pc, #152]	@ (800d0d8 <USB_EP0_OutStart+0xb8>)
 800d040:	4293      	cmp	r3, r2
 800d042:	d90a      	bls.n	800d05a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d044:	697b      	ldr	r3, [r7, #20]
 800d046:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d050:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d054:	d101      	bne.n	800d05a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d056:	2300      	movs	r3, #0
 800d058:	e037      	b.n	800d0ca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d060:	461a      	mov	r2, r3
 800d062:	2300      	movs	r3, #0
 800d064:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d066:	697b      	ldr	r3, [r7, #20]
 800d068:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d06c:	691b      	ldr	r3, [r3, #16]
 800d06e:	697a      	ldr	r2, [r7, #20]
 800d070:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d074:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d078:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d080:	691b      	ldr	r3, [r3, #16]
 800d082:	697a      	ldr	r2, [r7, #20]
 800d084:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d088:	f043 0318 	orr.w	r3, r3, #24
 800d08c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d094:	691b      	ldr	r3, [r3, #16]
 800d096:	697a      	ldr	r2, [r7, #20]
 800d098:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d09c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800d0a0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d0a2:	7afb      	ldrb	r3, [r7, #11]
 800d0a4:	2b01      	cmp	r3, #1
 800d0a6:	d10f      	bne.n	800d0c8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d0a8:	697b      	ldr	r3, [r7, #20]
 800d0aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d0ae:	461a      	mov	r2, r3
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d0b4:	697b      	ldr	r3, [r7, #20]
 800d0b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	697a      	ldr	r2, [r7, #20]
 800d0be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d0c2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800d0c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d0c8:	2300      	movs	r3, #0
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	371c      	adds	r7, #28
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d4:	4770      	bx	lr
 800d0d6:	bf00      	nop
 800d0d8:	4f54300a 	.word	0x4f54300a

0800d0dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d0dc:	b480      	push	{r7}
 800d0de:	b085      	sub	sp, #20
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	3301      	adds	r3, #1
 800d0ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d0f4:	d901      	bls.n	800d0fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d0f6:	2303      	movs	r3, #3
 800d0f8:	e01b      	b.n	800d132 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	691b      	ldr	r3, [r3, #16]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	daf2      	bge.n	800d0e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d102:	2300      	movs	r3, #0
 800d104:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	691b      	ldr	r3, [r3, #16]
 800d10a:	f043 0201 	orr.w	r2, r3, #1
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	3301      	adds	r3, #1
 800d116:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d11e:	d901      	bls.n	800d124 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d120:	2303      	movs	r3, #3
 800d122:	e006      	b.n	800d132 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	691b      	ldr	r3, [r3, #16]
 800d128:	f003 0301 	and.w	r3, r3, #1
 800d12c:	2b01      	cmp	r3, #1
 800d12e:	d0f0      	beq.n	800d112 <USB_CoreReset+0x36>

  return HAL_OK;
 800d130:	2300      	movs	r3, #0
}
 800d132:	4618      	mov	r0, r3
 800d134:	3714      	adds	r7, #20
 800d136:	46bd      	mov	sp, r7
 800d138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13c:	4770      	bx	lr
	...

0800d140 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b084      	sub	sp, #16
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
 800d148:	460b      	mov	r3, r1
 800d14a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d14c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800d150:	f002 fcfe 	bl	800fb50 <USBD_static_malloc>
 800d154:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d109      	bne.n	800d170 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	32b0      	adds	r2, #176	@ 0xb0
 800d166:	2100      	movs	r1, #0
 800d168:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d16c:	2302      	movs	r3, #2
 800d16e:	e0d4      	b.n	800d31a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800d170:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800d174:	2100      	movs	r1, #0
 800d176:	68f8      	ldr	r0, [r7, #12]
 800d178:	f003 fa8b 	bl	8010692 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	32b0      	adds	r2, #176	@ 0xb0
 800d186:	68f9      	ldr	r1, [r7, #12]
 800d188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	32b0      	adds	r2, #176	@ 0xb0
 800d196:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	7c1b      	ldrb	r3, [r3, #16]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d138      	bne.n	800d21a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d1a8:	4b5e      	ldr	r3, [pc, #376]	@ (800d324 <USBD_CDC_Init+0x1e4>)
 800d1aa:	7819      	ldrb	r1, [r3, #0]
 800d1ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d1b0:	2202      	movs	r2, #2
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f002 fba9 	bl	800f90a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d1b8:	4b5a      	ldr	r3, [pc, #360]	@ (800d324 <USBD_CDC_Init+0x1e4>)
 800d1ba:	781b      	ldrb	r3, [r3, #0]
 800d1bc:	f003 020f 	and.w	r2, r3, #15
 800d1c0:	6879      	ldr	r1, [r7, #4]
 800d1c2:	4613      	mov	r3, r2
 800d1c4:	009b      	lsls	r3, r3, #2
 800d1c6:	4413      	add	r3, r2
 800d1c8:	009b      	lsls	r3, r3, #2
 800d1ca:	440b      	add	r3, r1
 800d1cc:	3324      	adds	r3, #36	@ 0x24
 800d1ce:	2201      	movs	r2, #1
 800d1d0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d1d2:	4b55      	ldr	r3, [pc, #340]	@ (800d328 <USBD_CDC_Init+0x1e8>)
 800d1d4:	7819      	ldrb	r1, [r3, #0]
 800d1d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d1da:	2202      	movs	r2, #2
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	f002 fb94 	bl	800f90a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d1e2:	4b51      	ldr	r3, [pc, #324]	@ (800d328 <USBD_CDC_Init+0x1e8>)
 800d1e4:	781b      	ldrb	r3, [r3, #0]
 800d1e6:	f003 020f 	and.w	r2, r3, #15
 800d1ea:	6879      	ldr	r1, [r7, #4]
 800d1ec:	4613      	mov	r3, r2
 800d1ee:	009b      	lsls	r3, r3, #2
 800d1f0:	4413      	add	r3, r2
 800d1f2:	009b      	lsls	r3, r3, #2
 800d1f4:	440b      	add	r3, r1
 800d1f6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d1fa:	2201      	movs	r2, #1
 800d1fc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d1fe:	4b4b      	ldr	r3, [pc, #300]	@ (800d32c <USBD_CDC_Init+0x1ec>)
 800d200:	781b      	ldrb	r3, [r3, #0]
 800d202:	f003 020f 	and.w	r2, r3, #15
 800d206:	6879      	ldr	r1, [r7, #4]
 800d208:	4613      	mov	r3, r2
 800d20a:	009b      	lsls	r3, r3, #2
 800d20c:	4413      	add	r3, r2
 800d20e:	009b      	lsls	r3, r3, #2
 800d210:	440b      	add	r3, r1
 800d212:	3326      	adds	r3, #38	@ 0x26
 800d214:	2210      	movs	r2, #16
 800d216:	801a      	strh	r2, [r3, #0]
 800d218:	e035      	b.n	800d286 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d21a:	4b42      	ldr	r3, [pc, #264]	@ (800d324 <USBD_CDC_Init+0x1e4>)
 800d21c:	7819      	ldrb	r1, [r3, #0]
 800d21e:	2340      	movs	r3, #64	@ 0x40
 800d220:	2202      	movs	r2, #2
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f002 fb71 	bl	800f90a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d228:	4b3e      	ldr	r3, [pc, #248]	@ (800d324 <USBD_CDC_Init+0x1e4>)
 800d22a:	781b      	ldrb	r3, [r3, #0]
 800d22c:	f003 020f 	and.w	r2, r3, #15
 800d230:	6879      	ldr	r1, [r7, #4]
 800d232:	4613      	mov	r3, r2
 800d234:	009b      	lsls	r3, r3, #2
 800d236:	4413      	add	r3, r2
 800d238:	009b      	lsls	r3, r3, #2
 800d23a:	440b      	add	r3, r1
 800d23c:	3324      	adds	r3, #36	@ 0x24
 800d23e:	2201      	movs	r2, #1
 800d240:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d242:	4b39      	ldr	r3, [pc, #228]	@ (800d328 <USBD_CDC_Init+0x1e8>)
 800d244:	7819      	ldrb	r1, [r3, #0]
 800d246:	2340      	movs	r3, #64	@ 0x40
 800d248:	2202      	movs	r2, #2
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	f002 fb5d 	bl	800f90a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d250:	4b35      	ldr	r3, [pc, #212]	@ (800d328 <USBD_CDC_Init+0x1e8>)
 800d252:	781b      	ldrb	r3, [r3, #0]
 800d254:	f003 020f 	and.w	r2, r3, #15
 800d258:	6879      	ldr	r1, [r7, #4]
 800d25a:	4613      	mov	r3, r2
 800d25c:	009b      	lsls	r3, r3, #2
 800d25e:	4413      	add	r3, r2
 800d260:	009b      	lsls	r3, r3, #2
 800d262:	440b      	add	r3, r1
 800d264:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d268:	2201      	movs	r2, #1
 800d26a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d26c:	4b2f      	ldr	r3, [pc, #188]	@ (800d32c <USBD_CDC_Init+0x1ec>)
 800d26e:	781b      	ldrb	r3, [r3, #0]
 800d270:	f003 020f 	and.w	r2, r3, #15
 800d274:	6879      	ldr	r1, [r7, #4]
 800d276:	4613      	mov	r3, r2
 800d278:	009b      	lsls	r3, r3, #2
 800d27a:	4413      	add	r3, r2
 800d27c:	009b      	lsls	r3, r3, #2
 800d27e:	440b      	add	r3, r1
 800d280:	3326      	adds	r3, #38	@ 0x26
 800d282:	2210      	movs	r2, #16
 800d284:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d286:	4b29      	ldr	r3, [pc, #164]	@ (800d32c <USBD_CDC_Init+0x1ec>)
 800d288:	7819      	ldrb	r1, [r3, #0]
 800d28a:	2308      	movs	r3, #8
 800d28c:	2203      	movs	r2, #3
 800d28e:	6878      	ldr	r0, [r7, #4]
 800d290:	f002 fb3b 	bl	800f90a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d294:	4b25      	ldr	r3, [pc, #148]	@ (800d32c <USBD_CDC_Init+0x1ec>)
 800d296:	781b      	ldrb	r3, [r3, #0]
 800d298:	f003 020f 	and.w	r2, r3, #15
 800d29c:	6879      	ldr	r1, [r7, #4]
 800d29e:	4613      	mov	r3, r2
 800d2a0:	009b      	lsls	r3, r3, #2
 800d2a2:	4413      	add	r3, r2
 800d2a4:	009b      	lsls	r3, r3, #2
 800d2a6:	440b      	add	r3, r1
 800d2a8:	3324      	adds	r3, #36	@ 0x24
 800d2aa:	2201      	movs	r2, #1
 800d2ac:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d2bc:	687a      	ldr	r2, [r7, #4]
 800d2be:	33b0      	adds	r3, #176	@ 0xb0
 800d2c0:	009b      	lsls	r3, r3, #2
 800d2c2:	4413      	add	r3, r2
 800d2c4:	685b      	ldr	r3, [r3, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d101      	bne.n	800d2e8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800d2e4:	2302      	movs	r3, #2
 800d2e6:	e018      	b.n	800d31a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	7c1b      	ldrb	r3, [r3, #16]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d10a      	bne.n	800d306 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d2f0:	4b0d      	ldr	r3, [pc, #52]	@ (800d328 <USBD_CDC_Init+0x1e8>)
 800d2f2:	7819      	ldrb	r1, [r3, #0]
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d2fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f002 fbf2 	bl	800fae8 <USBD_LL_PrepareReceive>
 800d304:	e008      	b.n	800d318 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d306:	4b08      	ldr	r3, [pc, #32]	@ (800d328 <USBD_CDC_Init+0x1e8>)
 800d308:	7819      	ldrb	r1, [r3, #0]
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d310:	2340      	movs	r3, #64	@ 0x40
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	f002 fbe8 	bl	800fae8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d318:	2300      	movs	r3, #0
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	3710      	adds	r7, #16
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}
 800d322:	bf00      	nop
 800d324:	240000bf 	.word	0x240000bf
 800d328:	240000c0 	.word	0x240000c0
 800d32c:	240000c1 	.word	0x240000c1

0800d330 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b082      	sub	sp, #8
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
 800d338:	460b      	mov	r3, r1
 800d33a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d33c:	4b3a      	ldr	r3, [pc, #232]	@ (800d428 <USBD_CDC_DeInit+0xf8>)
 800d33e:	781b      	ldrb	r3, [r3, #0]
 800d340:	4619      	mov	r1, r3
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f002 fb07 	bl	800f956 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d348:	4b37      	ldr	r3, [pc, #220]	@ (800d428 <USBD_CDC_DeInit+0xf8>)
 800d34a:	781b      	ldrb	r3, [r3, #0]
 800d34c:	f003 020f 	and.w	r2, r3, #15
 800d350:	6879      	ldr	r1, [r7, #4]
 800d352:	4613      	mov	r3, r2
 800d354:	009b      	lsls	r3, r3, #2
 800d356:	4413      	add	r3, r2
 800d358:	009b      	lsls	r3, r3, #2
 800d35a:	440b      	add	r3, r1
 800d35c:	3324      	adds	r3, #36	@ 0x24
 800d35e:	2200      	movs	r2, #0
 800d360:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d362:	4b32      	ldr	r3, [pc, #200]	@ (800d42c <USBD_CDC_DeInit+0xfc>)
 800d364:	781b      	ldrb	r3, [r3, #0]
 800d366:	4619      	mov	r1, r3
 800d368:	6878      	ldr	r0, [r7, #4]
 800d36a:	f002 faf4 	bl	800f956 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d36e:	4b2f      	ldr	r3, [pc, #188]	@ (800d42c <USBD_CDC_DeInit+0xfc>)
 800d370:	781b      	ldrb	r3, [r3, #0]
 800d372:	f003 020f 	and.w	r2, r3, #15
 800d376:	6879      	ldr	r1, [r7, #4]
 800d378:	4613      	mov	r3, r2
 800d37a:	009b      	lsls	r3, r3, #2
 800d37c:	4413      	add	r3, r2
 800d37e:	009b      	lsls	r3, r3, #2
 800d380:	440b      	add	r3, r1
 800d382:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d386:	2200      	movs	r2, #0
 800d388:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d38a:	4b29      	ldr	r3, [pc, #164]	@ (800d430 <USBD_CDC_DeInit+0x100>)
 800d38c:	781b      	ldrb	r3, [r3, #0]
 800d38e:	4619      	mov	r1, r3
 800d390:	6878      	ldr	r0, [r7, #4]
 800d392:	f002 fae0 	bl	800f956 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d396:	4b26      	ldr	r3, [pc, #152]	@ (800d430 <USBD_CDC_DeInit+0x100>)
 800d398:	781b      	ldrb	r3, [r3, #0]
 800d39a:	f003 020f 	and.w	r2, r3, #15
 800d39e:	6879      	ldr	r1, [r7, #4]
 800d3a0:	4613      	mov	r3, r2
 800d3a2:	009b      	lsls	r3, r3, #2
 800d3a4:	4413      	add	r3, r2
 800d3a6:	009b      	lsls	r3, r3, #2
 800d3a8:	440b      	add	r3, r1
 800d3aa:	3324      	adds	r3, #36	@ 0x24
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d3b0:	4b1f      	ldr	r3, [pc, #124]	@ (800d430 <USBD_CDC_DeInit+0x100>)
 800d3b2:	781b      	ldrb	r3, [r3, #0]
 800d3b4:	f003 020f 	and.w	r2, r3, #15
 800d3b8:	6879      	ldr	r1, [r7, #4]
 800d3ba:	4613      	mov	r3, r2
 800d3bc:	009b      	lsls	r3, r3, #2
 800d3be:	4413      	add	r3, r2
 800d3c0:	009b      	lsls	r3, r3, #2
 800d3c2:	440b      	add	r3, r1
 800d3c4:	3326      	adds	r3, #38	@ 0x26
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	32b0      	adds	r2, #176	@ 0xb0
 800d3d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d01f      	beq.n	800d41c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d3e2:	687a      	ldr	r2, [r7, #4]
 800d3e4:	33b0      	adds	r3, #176	@ 0xb0
 800d3e6:	009b      	lsls	r3, r3, #2
 800d3e8:	4413      	add	r3, r2
 800d3ea:	685b      	ldr	r3, [r3, #4]
 800d3ec:	685b      	ldr	r3, [r3, #4]
 800d3ee:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	32b0      	adds	r2, #176	@ 0xb0
 800d3fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3fe:	4618      	mov	r0, r3
 800d400:	f002 fbb4 	bl	800fb6c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	32b0      	adds	r2, #176	@ 0xb0
 800d40e:	2100      	movs	r1, #0
 800d410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	2200      	movs	r2, #0
 800d418:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d41c:	2300      	movs	r3, #0
}
 800d41e:	4618      	mov	r0, r3
 800d420:	3708      	adds	r7, #8
 800d422:	46bd      	mov	sp, r7
 800d424:	bd80      	pop	{r7, pc}
 800d426:	bf00      	nop
 800d428:	240000bf 	.word	0x240000bf
 800d42c:	240000c0 	.word	0x240000c0
 800d430:	240000c1 	.word	0x240000c1

0800d434 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b086      	sub	sp, #24
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
 800d43c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	32b0      	adds	r2, #176	@ 0xb0
 800d448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d44c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d44e:	2300      	movs	r3, #0
 800d450:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d452:	2300      	movs	r3, #0
 800d454:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d456:	2300      	movs	r3, #0
 800d458:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d45a:	693b      	ldr	r3, [r7, #16]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d101      	bne.n	800d464 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d460:	2303      	movs	r3, #3
 800d462:	e0bf      	b.n	800d5e4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	781b      	ldrb	r3, [r3, #0]
 800d468:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d050      	beq.n	800d512 <USBD_CDC_Setup+0xde>
 800d470:	2b20      	cmp	r3, #32
 800d472:	f040 80af 	bne.w	800d5d4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	88db      	ldrh	r3, [r3, #6]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d03a      	beq.n	800d4f4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	b25b      	sxtb	r3, r3
 800d484:	2b00      	cmp	r3, #0
 800d486:	da1b      	bge.n	800d4c0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d48e:	687a      	ldr	r2, [r7, #4]
 800d490:	33b0      	adds	r3, #176	@ 0xb0
 800d492:	009b      	lsls	r3, r3, #2
 800d494:	4413      	add	r3, r2
 800d496:	685b      	ldr	r3, [r3, #4]
 800d498:	689b      	ldr	r3, [r3, #8]
 800d49a:	683a      	ldr	r2, [r7, #0]
 800d49c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d49e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d4a0:	683a      	ldr	r2, [r7, #0]
 800d4a2:	88d2      	ldrh	r2, [r2, #6]
 800d4a4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	88db      	ldrh	r3, [r3, #6]
 800d4aa:	2b07      	cmp	r3, #7
 800d4ac:	bf28      	it	cs
 800d4ae:	2307      	movcs	r3, #7
 800d4b0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d4b2:	693b      	ldr	r3, [r7, #16]
 800d4b4:	89fa      	ldrh	r2, [r7, #14]
 800d4b6:	4619      	mov	r1, r3
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f001 fdbd 	bl	800f038 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d4be:	e090      	b.n	800d5e2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	785a      	ldrb	r2, [r3, #1]
 800d4c4:	693b      	ldr	r3, [r7, #16]
 800d4c6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	88db      	ldrh	r3, [r3, #6]
 800d4ce:	2b3f      	cmp	r3, #63	@ 0x3f
 800d4d0:	d803      	bhi.n	800d4da <USBD_CDC_Setup+0xa6>
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	88db      	ldrh	r3, [r3, #6]
 800d4d6:	b2da      	uxtb	r2, r3
 800d4d8:	e000      	b.n	800d4dc <USBD_CDC_Setup+0xa8>
 800d4da:	2240      	movs	r2, #64	@ 0x40
 800d4dc:	693b      	ldr	r3, [r7, #16]
 800d4de:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d4e2:	6939      	ldr	r1, [r7, #16]
 800d4e4:	693b      	ldr	r3, [r7, #16]
 800d4e6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800d4ea:	461a      	mov	r2, r3
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f001 fdcf 	bl	800f090 <USBD_CtlPrepareRx>
      break;
 800d4f2:	e076      	b.n	800d5e2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d4fa:	687a      	ldr	r2, [r7, #4]
 800d4fc:	33b0      	adds	r3, #176	@ 0xb0
 800d4fe:	009b      	lsls	r3, r3, #2
 800d500:	4413      	add	r3, r2
 800d502:	685b      	ldr	r3, [r3, #4]
 800d504:	689b      	ldr	r3, [r3, #8]
 800d506:	683a      	ldr	r2, [r7, #0]
 800d508:	7850      	ldrb	r0, [r2, #1]
 800d50a:	2200      	movs	r2, #0
 800d50c:	6839      	ldr	r1, [r7, #0]
 800d50e:	4798      	blx	r3
      break;
 800d510:	e067      	b.n	800d5e2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	785b      	ldrb	r3, [r3, #1]
 800d516:	2b0b      	cmp	r3, #11
 800d518:	d851      	bhi.n	800d5be <USBD_CDC_Setup+0x18a>
 800d51a:	a201      	add	r2, pc, #4	@ (adr r2, 800d520 <USBD_CDC_Setup+0xec>)
 800d51c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d520:	0800d551 	.word	0x0800d551
 800d524:	0800d5cd 	.word	0x0800d5cd
 800d528:	0800d5bf 	.word	0x0800d5bf
 800d52c:	0800d5bf 	.word	0x0800d5bf
 800d530:	0800d5bf 	.word	0x0800d5bf
 800d534:	0800d5bf 	.word	0x0800d5bf
 800d538:	0800d5bf 	.word	0x0800d5bf
 800d53c:	0800d5bf 	.word	0x0800d5bf
 800d540:	0800d5bf 	.word	0x0800d5bf
 800d544:	0800d5bf 	.word	0x0800d5bf
 800d548:	0800d57b 	.word	0x0800d57b
 800d54c:	0800d5a5 	.word	0x0800d5a5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d556:	b2db      	uxtb	r3, r3
 800d558:	2b03      	cmp	r3, #3
 800d55a:	d107      	bne.n	800d56c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d55c:	f107 030a 	add.w	r3, r7, #10
 800d560:	2202      	movs	r2, #2
 800d562:	4619      	mov	r1, r3
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f001 fd67 	bl	800f038 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d56a:	e032      	b.n	800d5d2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d56c:	6839      	ldr	r1, [r7, #0]
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	f001 fce5 	bl	800ef3e <USBD_CtlError>
            ret = USBD_FAIL;
 800d574:	2303      	movs	r3, #3
 800d576:	75fb      	strb	r3, [r7, #23]
          break;
 800d578:	e02b      	b.n	800d5d2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d580:	b2db      	uxtb	r3, r3
 800d582:	2b03      	cmp	r3, #3
 800d584:	d107      	bne.n	800d596 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d586:	f107 030d 	add.w	r3, r7, #13
 800d58a:	2201      	movs	r2, #1
 800d58c:	4619      	mov	r1, r3
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f001 fd52 	bl	800f038 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d594:	e01d      	b.n	800d5d2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d596:	6839      	ldr	r1, [r7, #0]
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f001 fcd0 	bl	800ef3e <USBD_CtlError>
            ret = USBD_FAIL;
 800d59e:	2303      	movs	r3, #3
 800d5a0:	75fb      	strb	r3, [r7, #23]
          break;
 800d5a2:	e016      	b.n	800d5d2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d5aa:	b2db      	uxtb	r3, r3
 800d5ac:	2b03      	cmp	r3, #3
 800d5ae:	d00f      	beq.n	800d5d0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d5b0:	6839      	ldr	r1, [r7, #0]
 800d5b2:	6878      	ldr	r0, [r7, #4]
 800d5b4:	f001 fcc3 	bl	800ef3e <USBD_CtlError>
            ret = USBD_FAIL;
 800d5b8:	2303      	movs	r3, #3
 800d5ba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d5bc:	e008      	b.n	800d5d0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d5be:	6839      	ldr	r1, [r7, #0]
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f001 fcbc 	bl	800ef3e <USBD_CtlError>
          ret = USBD_FAIL;
 800d5c6:	2303      	movs	r3, #3
 800d5c8:	75fb      	strb	r3, [r7, #23]
          break;
 800d5ca:	e002      	b.n	800d5d2 <USBD_CDC_Setup+0x19e>
          break;
 800d5cc:	bf00      	nop
 800d5ce:	e008      	b.n	800d5e2 <USBD_CDC_Setup+0x1ae>
          break;
 800d5d0:	bf00      	nop
      }
      break;
 800d5d2:	e006      	b.n	800d5e2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d5d4:	6839      	ldr	r1, [r7, #0]
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f001 fcb1 	bl	800ef3e <USBD_CtlError>
      ret = USBD_FAIL;
 800d5dc:	2303      	movs	r3, #3
 800d5de:	75fb      	strb	r3, [r7, #23]
      break;
 800d5e0:	bf00      	nop
  }

  return (uint8_t)ret;
 800d5e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	3718      	adds	r7, #24
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}

0800d5ec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b084      	sub	sp, #16
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
 800d5f4:	460b      	mov	r3, r1
 800d5f6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d5fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	32b0      	adds	r2, #176	@ 0xb0
 800d60a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d101      	bne.n	800d616 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d612:	2303      	movs	r3, #3
 800d614:	e065      	b.n	800d6e2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	32b0      	adds	r2, #176	@ 0xb0
 800d620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d624:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d626:	78fb      	ldrb	r3, [r7, #3]
 800d628:	f003 020f 	and.w	r2, r3, #15
 800d62c:	6879      	ldr	r1, [r7, #4]
 800d62e:	4613      	mov	r3, r2
 800d630:	009b      	lsls	r3, r3, #2
 800d632:	4413      	add	r3, r2
 800d634:	009b      	lsls	r3, r3, #2
 800d636:	440b      	add	r3, r1
 800d638:	3318      	adds	r3, #24
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d02f      	beq.n	800d6a0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d640:	78fb      	ldrb	r3, [r7, #3]
 800d642:	f003 020f 	and.w	r2, r3, #15
 800d646:	6879      	ldr	r1, [r7, #4]
 800d648:	4613      	mov	r3, r2
 800d64a:	009b      	lsls	r3, r3, #2
 800d64c:	4413      	add	r3, r2
 800d64e:	009b      	lsls	r3, r3, #2
 800d650:	440b      	add	r3, r1
 800d652:	3318      	adds	r3, #24
 800d654:	681a      	ldr	r2, [r3, #0]
 800d656:	78fb      	ldrb	r3, [r7, #3]
 800d658:	f003 010f 	and.w	r1, r3, #15
 800d65c:	68f8      	ldr	r0, [r7, #12]
 800d65e:	460b      	mov	r3, r1
 800d660:	00db      	lsls	r3, r3, #3
 800d662:	440b      	add	r3, r1
 800d664:	009b      	lsls	r3, r3, #2
 800d666:	4403      	add	r3, r0
 800d668:	331c      	adds	r3, #28
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	fbb2 f1f3 	udiv	r1, r2, r3
 800d670:	fb01 f303 	mul.w	r3, r1, r3
 800d674:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d676:	2b00      	cmp	r3, #0
 800d678:	d112      	bne.n	800d6a0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d67a:	78fb      	ldrb	r3, [r7, #3]
 800d67c:	f003 020f 	and.w	r2, r3, #15
 800d680:	6879      	ldr	r1, [r7, #4]
 800d682:	4613      	mov	r3, r2
 800d684:	009b      	lsls	r3, r3, #2
 800d686:	4413      	add	r3, r2
 800d688:	009b      	lsls	r3, r3, #2
 800d68a:	440b      	add	r3, r1
 800d68c:	3318      	adds	r3, #24
 800d68e:	2200      	movs	r2, #0
 800d690:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d692:	78f9      	ldrb	r1, [r7, #3]
 800d694:	2300      	movs	r3, #0
 800d696:	2200      	movs	r2, #0
 800d698:	6878      	ldr	r0, [r7, #4]
 800d69a:	f002 fa04 	bl	800faa6 <USBD_LL_Transmit>
 800d69e:	e01f      	b.n	800d6e0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d6ae:	687a      	ldr	r2, [r7, #4]
 800d6b0:	33b0      	adds	r3, #176	@ 0xb0
 800d6b2:	009b      	lsls	r3, r3, #2
 800d6b4:	4413      	add	r3, r2
 800d6b6:	685b      	ldr	r3, [r3, #4]
 800d6b8:	691b      	ldr	r3, [r3, #16]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d010      	beq.n	800d6e0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d6c4:	687a      	ldr	r2, [r7, #4]
 800d6c6:	33b0      	adds	r3, #176	@ 0xb0
 800d6c8:	009b      	lsls	r3, r3, #2
 800d6ca:	4413      	add	r3, r2
 800d6cc:	685b      	ldr	r3, [r3, #4]
 800d6ce:	691b      	ldr	r3, [r3, #16]
 800d6d0:	68ba      	ldr	r2, [r7, #8]
 800d6d2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800d6d6:	68ba      	ldr	r2, [r7, #8]
 800d6d8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800d6dc:	78fa      	ldrb	r2, [r7, #3]
 800d6de:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d6e0:	2300      	movs	r3, #0
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3710      	adds	r7, #16
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}

0800d6ea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d6ea:	b580      	push	{r7, lr}
 800d6ec:	b084      	sub	sp, #16
 800d6ee:	af00      	add	r7, sp, #0
 800d6f0:	6078      	str	r0, [r7, #4]
 800d6f2:	460b      	mov	r3, r1
 800d6f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	32b0      	adds	r2, #176	@ 0xb0
 800d700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d704:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	32b0      	adds	r2, #176	@ 0xb0
 800d710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d101      	bne.n	800d71c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d718:	2303      	movs	r3, #3
 800d71a:	e01a      	b.n	800d752 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d71c:	78fb      	ldrb	r3, [r7, #3]
 800d71e:	4619      	mov	r1, r3
 800d720:	6878      	ldr	r0, [r7, #4]
 800d722:	f002 fa02 	bl	800fb2a <USBD_LL_GetRxDataSize>
 800d726:	4602      	mov	r2, r0
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d734:	687a      	ldr	r2, [r7, #4]
 800d736:	33b0      	adds	r3, #176	@ 0xb0
 800d738:	009b      	lsls	r3, r3, #2
 800d73a:	4413      	add	r3, r2
 800d73c:	685b      	ldr	r3, [r3, #4]
 800d73e:	68db      	ldr	r3, [r3, #12]
 800d740:	68fa      	ldr	r2, [r7, #12]
 800d742:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800d746:	68fa      	ldr	r2, [r7, #12]
 800d748:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800d74c:	4611      	mov	r1, r2
 800d74e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d750:	2300      	movs	r3, #0
}
 800d752:	4618      	mov	r0, r3
 800d754:	3710      	adds	r7, #16
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}

0800d75a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d75a:	b580      	push	{r7, lr}
 800d75c:	b084      	sub	sp, #16
 800d75e:	af00      	add	r7, sp, #0
 800d760:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	32b0      	adds	r2, #176	@ 0xb0
 800d76c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d770:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d101      	bne.n	800d77c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d778:	2303      	movs	r3, #3
 800d77a:	e024      	b.n	800d7c6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d782:	687a      	ldr	r2, [r7, #4]
 800d784:	33b0      	adds	r3, #176	@ 0xb0
 800d786:	009b      	lsls	r3, r3, #2
 800d788:	4413      	add	r3, r2
 800d78a:	685b      	ldr	r3, [r3, #4]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d019      	beq.n	800d7c4 <USBD_CDC_EP0_RxReady+0x6a>
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d796:	2bff      	cmp	r3, #255	@ 0xff
 800d798:	d014      	beq.n	800d7c4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d7a0:	687a      	ldr	r2, [r7, #4]
 800d7a2:	33b0      	adds	r3, #176	@ 0xb0
 800d7a4:	009b      	lsls	r3, r3, #2
 800d7a6:	4413      	add	r3, r2
 800d7a8:	685b      	ldr	r3, [r3, #4]
 800d7aa:	689b      	ldr	r3, [r3, #8]
 800d7ac:	68fa      	ldr	r2, [r7, #12]
 800d7ae:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800d7b2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d7b4:	68fa      	ldr	r2, [r7, #12]
 800d7b6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d7ba:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	22ff      	movs	r2, #255	@ 0xff
 800d7c0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800d7c4:	2300      	movs	r3, #0
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3710      	adds	r7, #16
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}
	...

0800d7d0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b086      	sub	sp, #24
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d7d8:	2182      	movs	r1, #130	@ 0x82
 800d7da:	4818      	ldr	r0, [pc, #96]	@ (800d83c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d7dc:	f000 fd4f 	bl	800e27e <USBD_GetEpDesc>
 800d7e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d7e2:	2101      	movs	r1, #1
 800d7e4:	4815      	ldr	r0, [pc, #84]	@ (800d83c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d7e6:	f000 fd4a 	bl	800e27e <USBD_GetEpDesc>
 800d7ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d7ec:	2181      	movs	r1, #129	@ 0x81
 800d7ee:	4813      	ldr	r0, [pc, #76]	@ (800d83c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d7f0:	f000 fd45 	bl	800e27e <USBD_GetEpDesc>
 800d7f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d002      	beq.n	800d802 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d7fc:	697b      	ldr	r3, [r7, #20]
 800d7fe:	2210      	movs	r2, #16
 800d800:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d006      	beq.n	800d816 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d808:	693b      	ldr	r3, [r7, #16]
 800d80a:	2200      	movs	r2, #0
 800d80c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d810:	711a      	strb	r2, [r3, #4]
 800d812:	2200      	movs	r2, #0
 800d814:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d006      	beq.n	800d82a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	2200      	movs	r2, #0
 800d820:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d824:	711a      	strb	r2, [r3, #4]
 800d826:	2200      	movs	r2, #0
 800d828:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2243      	movs	r2, #67	@ 0x43
 800d82e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d830:	4b02      	ldr	r3, [pc, #8]	@ (800d83c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d832:	4618      	mov	r0, r3
 800d834:	3718      	adds	r7, #24
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}
 800d83a:	bf00      	nop
 800d83c:	2400007c 	.word	0x2400007c

0800d840 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b086      	sub	sp, #24
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d848:	2182      	movs	r1, #130	@ 0x82
 800d84a:	4818      	ldr	r0, [pc, #96]	@ (800d8ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d84c:	f000 fd17 	bl	800e27e <USBD_GetEpDesc>
 800d850:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d852:	2101      	movs	r1, #1
 800d854:	4815      	ldr	r0, [pc, #84]	@ (800d8ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d856:	f000 fd12 	bl	800e27e <USBD_GetEpDesc>
 800d85a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d85c:	2181      	movs	r1, #129	@ 0x81
 800d85e:	4813      	ldr	r0, [pc, #76]	@ (800d8ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d860:	f000 fd0d 	bl	800e27e <USBD_GetEpDesc>
 800d864:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d866:	697b      	ldr	r3, [r7, #20]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d002      	beq.n	800d872 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d86c:	697b      	ldr	r3, [r7, #20]
 800d86e:	2210      	movs	r2, #16
 800d870:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d872:	693b      	ldr	r3, [r7, #16]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d006      	beq.n	800d886 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d878:	693b      	ldr	r3, [r7, #16]
 800d87a:	2200      	movs	r2, #0
 800d87c:	711a      	strb	r2, [r3, #4]
 800d87e:	2200      	movs	r2, #0
 800d880:	f042 0202 	orr.w	r2, r2, #2
 800d884:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d006      	beq.n	800d89a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	2200      	movs	r2, #0
 800d890:	711a      	strb	r2, [r3, #4]
 800d892:	2200      	movs	r2, #0
 800d894:	f042 0202 	orr.w	r2, r2, #2
 800d898:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2243      	movs	r2, #67	@ 0x43
 800d89e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d8a0:	4b02      	ldr	r3, [pc, #8]	@ (800d8ac <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3718      	adds	r7, #24
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}
 800d8aa:	bf00      	nop
 800d8ac:	2400007c 	.word	0x2400007c

0800d8b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b086      	sub	sp, #24
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d8b8:	2182      	movs	r1, #130	@ 0x82
 800d8ba:	4818      	ldr	r0, [pc, #96]	@ (800d91c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d8bc:	f000 fcdf 	bl	800e27e <USBD_GetEpDesc>
 800d8c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d8c2:	2101      	movs	r1, #1
 800d8c4:	4815      	ldr	r0, [pc, #84]	@ (800d91c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d8c6:	f000 fcda 	bl	800e27e <USBD_GetEpDesc>
 800d8ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d8cc:	2181      	movs	r1, #129	@ 0x81
 800d8ce:	4813      	ldr	r0, [pc, #76]	@ (800d91c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d8d0:	f000 fcd5 	bl	800e27e <USBD_GetEpDesc>
 800d8d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d8d6:	697b      	ldr	r3, [r7, #20]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d002      	beq.n	800d8e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d8dc:	697b      	ldr	r3, [r7, #20]
 800d8de:	2210      	movs	r2, #16
 800d8e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d8e2:	693b      	ldr	r3, [r7, #16]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d006      	beq.n	800d8f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d8e8:	693b      	ldr	r3, [r7, #16]
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d8f0:	711a      	strb	r2, [r3, #4]
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d006      	beq.n	800d90a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	2200      	movs	r2, #0
 800d900:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d904:	711a      	strb	r2, [r3, #4]
 800d906:	2200      	movs	r2, #0
 800d908:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	2243      	movs	r2, #67	@ 0x43
 800d90e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d910:	4b02      	ldr	r3, [pc, #8]	@ (800d91c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d912:	4618      	mov	r0, r3
 800d914:	3718      	adds	r7, #24
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}
 800d91a:	bf00      	nop
 800d91c:	2400007c 	.word	0x2400007c

0800d920 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d920:	b480      	push	{r7}
 800d922:	b083      	sub	sp, #12
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	220a      	movs	r2, #10
 800d92c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d92e:	4b03      	ldr	r3, [pc, #12]	@ (800d93c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d930:	4618      	mov	r0, r3
 800d932:	370c      	adds	r7, #12
 800d934:	46bd      	mov	sp, r7
 800d936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93a:	4770      	bx	lr
 800d93c:	24000038 	.word	0x24000038

0800d940 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d940:	b480      	push	{r7}
 800d942:	b083      	sub	sp, #12
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
 800d948:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d101      	bne.n	800d954 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d950:	2303      	movs	r3, #3
 800d952:	e009      	b.n	800d968 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d95a:	687a      	ldr	r2, [r7, #4]
 800d95c:	33b0      	adds	r3, #176	@ 0xb0
 800d95e:	009b      	lsls	r3, r3, #2
 800d960:	4413      	add	r3, r2
 800d962:	683a      	ldr	r2, [r7, #0]
 800d964:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d966:	2300      	movs	r3, #0
}
 800d968:	4618      	mov	r0, r3
 800d96a:	370c      	adds	r7, #12
 800d96c:	46bd      	mov	sp, r7
 800d96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d972:	4770      	bx	lr

0800d974 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d974:	b480      	push	{r7}
 800d976:	b087      	sub	sp, #28
 800d978:	af00      	add	r7, sp, #0
 800d97a:	60f8      	str	r0, [r7, #12]
 800d97c:	60b9      	str	r1, [r7, #8]
 800d97e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	32b0      	adds	r2, #176	@ 0xb0
 800d98a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d98e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d990:	697b      	ldr	r3, [r7, #20]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d101      	bne.n	800d99a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d996:	2303      	movs	r3, #3
 800d998:	e008      	b.n	800d9ac <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d99a:	697b      	ldr	r3, [r7, #20]
 800d99c:	68ba      	ldr	r2, [r7, #8]
 800d99e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800d9a2:	697b      	ldr	r3, [r7, #20]
 800d9a4:	687a      	ldr	r2, [r7, #4]
 800d9a6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800d9aa:	2300      	movs	r3, #0
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	371c      	adds	r7, #28
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b6:	4770      	bx	lr

0800d9b8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d9b8:	b480      	push	{r7}
 800d9ba:	b085      	sub	sp, #20
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
 800d9c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	32b0      	adds	r2, #176	@ 0xb0
 800d9cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9d0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d101      	bne.n	800d9dc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d9d8:	2303      	movs	r3, #3
 800d9da:	e004      	b.n	800d9e6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	683a      	ldr	r2, [r7, #0]
 800d9e0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800d9e4:	2300      	movs	r3, #0
}
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	3714      	adds	r7, #20
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f0:	4770      	bx	lr
	...

0800d9f4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b084      	sub	sp, #16
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	32b0      	adds	r2, #176	@ 0xb0
 800da06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da0a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800da0c:	2301      	movs	r3, #1
 800da0e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800da10:	68bb      	ldr	r3, [r7, #8]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d101      	bne.n	800da1a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800da16:	2303      	movs	r3, #3
 800da18:	e025      	b.n	800da66 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800da20:	2b00      	cmp	r3, #0
 800da22:	d11f      	bne.n	800da64 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	2201      	movs	r2, #1
 800da28:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800da2c:	4b10      	ldr	r3, [pc, #64]	@ (800da70 <USBD_CDC_TransmitPacket+0x7c>)
 800da2e:	781b      	ldrb	r3, [r3, #0]
 800da30:	f003 020f 	and.w	r2, r3, #15
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800da3a:	6878      	ldr	r0, [r7, #4]
 800da3c:	4613      	mov	r3, r2
 800da3e:	009b      	lsls	r3, r3, #2
 800da40:	4413      	add	r3, r2
 800da42:	009b      	lsls	r3, r3, #2
 800da44:	4403      	add	r3, r0
 800da46:	3318      	adds	r3, #24
 800da48:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800da4a:	4b09      	ldr	r3, [pc, #36]	@ (800da70 <USBD_CDC_TransmitPacket+0x7c>)
 800da4c:	7819      	ldrb	r1, [r3, #0]
 800da4e:	68bb      	ldr	r3, [r7, #8]
 800da50:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800da54:	68bb      	ldr	r3, [r7, #8]
 800da56:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	f002 f823 	bl	800faa6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800da60:	2300      	movs	r3, #0
 800da62:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800da64:	7bfb      	ldrb	r3, [r7, #15]
}
 800da66:	4618      	mov	r0, r3
 800da68:	3710      	adds	r7, #16
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}
 800da6e:	bf00      	nop
 800da70:	240000bf 	.word	0x240000bf

0800da74 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b084      	sub	sp, #16
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	32b0      	adds	r2, #176	@ 0xb0
 800da86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da8a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	32b0      	adds	r2, #176	@ 0xb0
 800da96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d101      	bne.n	800daa2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800da9e:	2303      	movs	r3, #3
 800daa0:	e018      	b.n	800dad4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	7c1b      	ldrb	r3, [r3, #16]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d10a      	bne.n	800dac0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800daaa:	4b0c      	ldr	r3, [pc, #48]	@ (800dadc <USBD_CDC_ReceivePacket+0x68>)
 800daac:	7819      	ldrb	r1, [r3, #0]
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dab4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dab8:	6878      	ldr	r0, [r7, #4]
 800daba:	f002 f815 	bl	800fae8 <USBD_LL_PrepareReceive>
 800dabe:	e008      	b.n	800dad2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dac0:	4b06      	ldr	r3, [pc, #24]	@ (800dadc <USBD_CDC_ReceivePacket+0x68>)
 800dac2:	7819      	ldrb	r1, [r3, #0]
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800daca:	2340      	movs	r3, #64	@ 0x40
 800dacc:	6878      	ldr	r0, [r7, #4]
 800dace:	f002 f80b 	bl	800fae8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dad2:	2300      	movs	r3, #0
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	3710      	adds	r7, #16
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}
 800dadc:	240000c0 	.word	0x240000c0

0800dae0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b086      	sub	sp, #24
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	60f8      	str	r0, [r7, #12]
 800dae8:	60b9      	str	r1, [r7, #8]
 800daea:	4613      	mov	r3, r2
 800daec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d101      	bne.n	800daf8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800daf4:	2303      	movs	r3, #3
 800daf6:	e01f      	b.n	800db38 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	2200      	movs	r2, #0
 800dafc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	2200      	movs	r2, #0
 800db04:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	2200      	movs	r2, #0
 800db0c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800db10:	68bb      	ldr	r3, [r7, #8]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d003      	beq.n	800db1e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	68ba      	ldr	r2, [r7, #8]
 800db1a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	2201      	movs	r2, #1
 800db22:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	79fa      	ldrb	r2, [r7, #7]
 800db2a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800db2c:	68f8      	ldr	r0, [r7, #12]
 800db2e:	f001 fe81 	bl	800f834 <USBD_LL_Init>
 800db32:	4603      	mov	r3, r0
 800db34:	75fb      	strb	r3, [r7, #23]

  return ret;
 800db36:	7dfb      	ldrb	r3, [r7, #23]
}
 800db38:	4618      	mov	r0, r3
 800db3a:	3718      	adds	r7, #24
 800db3c:	46bd      	mov	sp, r7
 800db3e:	bd80      	pop	{r7, pc}

0800db40 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b084      	sub	sp, #16
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
 800db48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800db4a:	2300      	movs	r3, #0
 800db4c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d101      	bne.n	800db58 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800db54:	2303      	movs	r3, #3
 800db56:	e025      	b.n	800dba4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	683a      	ldr	r2, [r7, #0]
 800db5c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	32ae      	adds	r2, #174	@ 0xae
 800db6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db70:	2b00      	cmp	r3, #0
 800db72:	d00f      	beq.n	800db94 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	32ae      	adds	r2, #174	@ 0xae
 800db7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db84:	f107 020e 	add.w	r2, r7, #14
 800db88:	4610      	mov	r0, r2
 800db8a:	4798      	blx	r3
 800db8c:	4602      	mov	r2, r0
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800db9a:	1c5a      	adds	r2, r3, #1
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800dba2:	2300      	movs	r3, #0
}
 800dba4:	4618      	mov	r0, r3
 800dba6:	3710      	adds	r7, #16
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}

0800dbac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b082      	sub	sp, #8
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f001 fe8d 	bl	800f8d4 <USBD_LL_Start>
 800dbba:	4603      	mov	r3, r0
}
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	3708      	adds	r7, #8
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}

0800dbc4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800dbc4:	b480      	push	{r7}
 800dbc6:	b083      	sub	sp, #12
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dbcc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800dbce:	4618      	mov	r0, r3
 800dbd0:	370c      	adds	r7, #12
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd8:	4770      	bx	lr

0800dbda <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dbda:	b580      	push	{r7, lr}
 800dbdc:	b084      	sub	sp, #16
 800dbde:	af00      	add	r7, sp, #0
 800dbe0:	6078      	str	r0, [r7, #4]
 800dbe2:	460b      	mov	r3, r1
 800dbe4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d009      	beq.n	800dc08 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	78fa      	ldrb	r2, [r7, #3]
 800dbfe:	4611      	mov	r1, r2
 800dc00:	6878      	ldr	r0, [r7, #4]
 800dc02:	4798      	blx	r3
 800dc04:	4603      	mov	r3, r0
 800dc06:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800dc08:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3710      	adds	r7, #16
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}

0800dc12 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dc12:	b580      	push	{r7, lr}
 800dc14:	b084      	sub	sp, #16
 800dc16:	af00      	add	r7, sp, #0
 800dc18:	6078      	str	r0, [r7, #4]
 800dc1a:	460b      	mov	r3, r1
 800dc1c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc28:	685b      	ldr	r3, [r3, #4]
 800dc2a:	78fa      	ldrb	r2, [r7, #3]
 800dc2c:	4611      	mov	r1, r2
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	4798      	blx	r3
 800dc32:	4603      	mov	r3, r0
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d001      	beq.n	800dc3c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800dc38:	2303      	movs	r3, #3
 800dc3a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800dc3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3710      	adds	r7, #16
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}

0800dc46 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800dc46:	b580      	push	{r7, lr}
 800dc48:	b084      	sub	sp, #16
 800dc4a:	af00      	add	r7, sp, #0
 800dc4c:	6078      	str	r0, [r7, #4]
 800dc4e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800dc56:	6839      	ldr	r1, [r7, #0]
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f001 f936 	bl	800eeca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	2201      	movs	r2, #1
 800dc62:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800dc6c:	461a      	mov	r2, r3
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800dc7a:	f003 031f 	and.w	r3, r3, #31
 800dc7e:	2b02      	cmp	r3, #2
 800dc80:	d01a      	beq.n	800dcb8 <USBD_LL_SetupStage+0x72>
 800dc82:	2b02      	cmp	r3, #2
 800dc84:	d822      	bhi.n	800dccc <USBD_LL_SetupStage+0x86>
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d002      	beq.n	800dc90 <USBD_LL_SetupStage+0x4a>
 800dc8a:	2b01      	cmp	r3, #1
 800dc8c:	d00a      	beq.n	800dca4 <USBD_LL_SetupStage+0x5e>
 800dc8e:	e01d      	b.n	800dccc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800dc96:	4619      	mov	r1, r3
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	f000 fb63 	bl	800e364 <USBD_StdDevReq>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	73fb      	strb	r3, [r7, #15]
      break;
 800dca2:	e020      	b.n	800dce6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800dcaa:	4619      	mov	r1, r3
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f000 fbcb 	bl	800e448 <USBD_StdItfReq>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	73fb      	strb	r3, [r7, #15]
      break;
 800dcb6:	e016      	b.n	800dce6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800dcbe:	4619      	mov	r1, r3
 800dcc0:	6878      	ldr	r0, [r7, #4]
 800dcc2:	f000 fc2d 	bl	800e520 <USBD_StdEPReq>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	73fb      	strb	r3, [r7, #15]
      break;
 800dcca:	e00c      	b.n	800dce6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800dcd2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800dcd6:	b2db      	uxtb	r3, r3
 800dcd8:	4619      	mov	r1, r3
 800dcda:	6878      	ldr	r0, [r7, #4]
 800dcdc:	f001 fe5a 	bl	800f994 <USBD_LL_StallEP>
 800dce0:	4603      	mov	r3, r0
 800dce2:	73fb      	strb	r3, [r7, #15]
      break;
 800dce4:	bf00      	nop
  }

  return ret;
 800dce6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dce8:	4618      	mov	r0, r3
 800dcea:	3710      	adds	r7, #16
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}

0800dcf0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b086      	sub	sp, #24
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	60f8      	str	r0, [r7, #12]
 800dcf8:	460b      	mov	r3, r1
 800dcfa:	607a      	str	r2, [r7, #4]
 800dcfc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800dd02:	7afb      	ldrb	r3, [r7, #11]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d16e      	bne.n	800dde6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800dd0e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800dd16:	2b03      	cmp	r3, #3
 800dd18:	f040 8098 	bne.w	800de4c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800dd1c:	693b      	ldr	r3, [r7, #16]
 800dd1e:	689a      	ldr	r2, [r3, #8]
 800dd20:	693b      	ldr	r3, [r7, #16]
 800dd22:	68db      	ldr	r3, [r3, #12]
 800dd24:	429a      	cmp	r2, r3
 800dd26:	d913      	bls.n	800dd50 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800dd28:	693b      	ldr	r3, [r7, #16]
 800dd2a:	689a      	ldr	r2, [r3, #8]
 800dd2c:	693b      	ldr	r3, [r7, #16]
 800dd2e:	68db      	ldr	r3, [r3, #12]
 800dd30:	1ad2      	subs	r2, r2, r3
 800dd32:	693b      	ldr	r3, [r7, #16]
 800dd34:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	68da      	ldr	r2, [r3, #12]
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	689b      	ldr	r3, [r3, #8]
 800dd3e:	4293      	cmp	r3, r2
 800dd40:	bf28      	it	cs
 800dd42:	4613      	movcs	r3, r2
 800dd44:	461a      	mov	r2, r3
 800dd46:	6879      	ldr	r1, [r7, #4]
 800dd48:	68f8      	ldr	r0, [r7, #12]
 800dd4a:	f001 f9be 	bl	800f0ca <USBD_CtlContinueRx>
 800dd4e:	e07d      	b.n	800de4c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800dd56:	f003 031f 	and.w	r3, r3, #31
 800dd5a:	2b02      	cmp	r3, #2
 800dd5c:	d014      	beq.n	800dd88 <USBD_LL_DataOutStage+0x98>
 800dd5e:	2b02      	cmp	r3, #2
 800dd60:	d81d      	bhi.n	800dd9e <USBD_LL_DataOutStage+0xae>
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d002      	beq.n	800dd6c <USBD_LL_DataOutStage+0x7c>
 800dd66:	2b01      	cmp	r3, #1
 800dd68:	d003      	beq.n	800dd72 <USBD_LL_DataOutStage+0x82>
 800dd6a:	e018      	b.n	800dd9e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	75bb      	strb	r3, [r7, #22]
            break;
 800dd70:	e018      	b.n	800dda4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800dd78:	b2db      	uxtb	r3, r3
 800dd7a:	4619      	mov	r1, r3
 800dd7c:	68f8      	ldr	r0, [r7, #12]
 800dd7e:	f000 fa64 	bl	800e24a <USBD_CoreFindIF>
 800dd82:	4603      	mov	r3, r0
 800dd84:	75bb      	strb	r3, [r7, #22]
            break;
 800dd86:	e00d      	b.n	800dda4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800dd8e:	b2db      	uxtb	r3, r3
 800dd90:	4619      	mov	r1, r3
 800dd92:	68f8      	ldr	r0, [r7, #12]
 800dd94:	f000 fa66 	bl	800e264 <USBD_CoreFindEP>
 800dd98:	4603      	mov	r3, r0
 800dd9a:	75bb      	strb	r3, [r7, #22]
            break;
 800dd9c:	e002      	b.n	800dda4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800dd9e:	2300      	movs	r3, #0
 800dda0:	75bb      	strb	r3, [r7, #22]
            break;
 800dda2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800dda4:	7dbb      	ldrb	r3, [r7, #22]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d119      	bne.n	800ddde <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ddb0:	b2db      	uxtb	r3, r3
 800ddb2:	2b03      	cmp	r3, #3
 800ddb4:	d113      	bne.n	800ddde <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ddb6:	7dba      	ldrb	r2, [r7, #22]
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	32ae      	adds	r2, #174	@ 0xae
 800ddbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddc0:	691b      	ldr	r3, [r3, #16]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d00b      	beq.n	800ddde <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ddc6:	7dba      	ldrb	r2, [r7, #22]
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ddce:	7dba      	ldrb	r2, [r7, #22]
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	32ae      	adds	r2, #174	@ 0xae
 800ddd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddd8:	691b      	ldr	r3, [r3, #16]
 800ddda:	68f8      	ldr	r0, [r7, #12]
 800dddc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ddde:	68f8      	ldr	r0, [r7, #12]
 800dde0:	f001 f984 	bl	800f0ec <USBD_CtlSendStatus>
 800dde4:	e032      	b.n	800de4c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800dde6:	7afb      	ldrb	r3, [r7, #11]
 800dde8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ddec:	b2db      	uxtb	r3, r3
 800ddee:	4619      	mov	r1, r3
 800ddf0:	68f8      	ldr	r0, [r7, #12]
 800ddf2:	f000 fa37 	bl	800e264 <USBD_CoreFindEP>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ddfa:	7dbb      	ldrb	r3, [r7, #22]
 800ddfc:	2bff      	cmp	r3, #255	@ 0xff
 800ddfe:	d025      	beq.n	800de4c <USBD_LL_DataOutStage+0x15c>
 800de00:	7dbb      	ldrb	r3, [r7, #22]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d122      	bne.n	800de4c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800de0c:	b2db      	uxtb	r3, r3
 800de0e:	2b03      	cmp	r3, #3
 800de10:	d117      	bne.n	800de42 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800de12:	7dba      	ldrb	r2, [r7, #22]
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	32ae      	adds	r2, #174	@ 0xae
 800de18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de1c:	699b      	ldr	r3, [r3, #24]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d00f      	beq.n	800de42 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800de22:	7dba      	ldrb	r2, [r7, #22]
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800de2a:	7dba      	ldrb	r2, [r7, #22]
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	32ae      	adds	r2, #174	@ 0xae
 800de30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de34:	699b      	ldr	r3, [r3, #24]
 800de36:	7afa      	ldrb	r2, [r7, #11]
 800de38:	4611      	mov	r1, r2
 800de3a:	68f8      	ldr	r0, [r7, #12]
 800de3c:	4798      	blx	r3
 800de3e:	4603      	mov	r3, r0
 800de40:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800de42:	7dfb      	ldrb	r3, [r7, #23]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d001      	beq.n	800de4c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800de48:	7dfb      	ldrb	r3, [r7, #23]
 800de4a:	e000      	b.n	800de4e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800de4c:	2300      	movs	r3, #0
}
 800de4e:	4618      	mov	r0, r3
 800de50:	3718      	adds	r7, #24
 800de52:	46bd      	mov	sp, r7
 800de54:	bd80      	pop	{r7, pc}

0800de56 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800de56:	b580      	push	{r7, lr}
 800de58:	b086      	sub	sp, #24
 800de5a:	af00      	add	r7, sp, #0
 800de5c:	60f8      	str	r0, [r7, #12]
 800de5e:	460b      	mov	r3, r1
 800de60:	607a      	str	r2, [r7, #4]
 800de62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800de64:	7afb      	ldrb	r3, [r7, #11]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d16f      	bne.n	800df4a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	3314      	adds	r3, #20
 800de6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800de76:	2b02      	cmp	r3, #2
 800de78:	d15a      	bne.n	800df30 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800de7a:	693b      	ldr	r3, [r7, #16]
 800de7c:	689a      	ldr	r2, [r3, #8]
 800de7e:	693b      	ldr	r3, [r7, #16]
 800de80:	68db      	ldr	r3, [r3, #12]
 800de82:	429a      	cmp	r2, r3
 800de84:	d914      	bls.n	800deb0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800de86:	693b      	ldr	r3, [r7, #16]
 800de88:	689a      	ldr	r2, [r3, #8]
 800de8a:	693b      	ldr	r3, [r7, #16]
 800de8c:	68db      	ldr	r3, [r3, #12]
 800de8e:	1ad2      	subs	r2, r2, r3
 800de90:	693b      	ldr	r3, [r7, #16]
 800de92:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800de94:	693b      	ldr	r3, [r7, #16]
 800de96:	689b      	ldr	r3, [r3, #8]
 800de98:	461a      	mov	r2, r3
 800de9a:	6879      	ldr	r1, [r7, #4]
 800de9c:	68f8      	ldr	r0, [r7, #12]
 800de9e:	f001 f8e6 	bl	800f06e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dea2:	2300      	movs	r3, #0
 800dea4:	2200      	movs	r2, #0
 800dea6:	2100      	movs	r1, #0
 800dea8:	68f8      	ldr	r0, [r7, #12]
 800deaa:	f001 fe1d 	bl	800fae8 <USBD_LL_PrepareReceive>
 800deae:	e03f      	b.n	800df30 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800deb0:	693b      	ldr	r3, [r7, #16]
 800deb2:	68da      	ldr	r2, [r3, #12]
 800deb4:	693b      	ldr	r3, [r7, #16]
 800deb6:	689b      	ldr	r3, [r3, #8]
 800deb8:	429a      	cmp	r2, r3
 800deba:	d11c      	bne.n	800def6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800debc:	693b      	ldr	r3, [r7, #16]
 800debe:	685a      	ldr	r2, [r3, #4]
 800dec0:	693b      	ldr	r3, [r7, #16]
 800dec2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800dec4:	429a      	cmp	r2, r3
 800dec6:	d316      	bcc.n	800def6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800dec8:	693b      	ldr	r3, [r7, #16]
 800deca:	685a      	ldr	r2, [r3, #4]
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ded2:	429a      	cmp	r2, r3
 800ded4:	d20f      	bcs.n	800def6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ded6:	2200      	movs	r2, #0
 800ded8:	2100      	movs	r1, #0
 800deda:	68f8      	ldr	r0, [r7, #12]
 800dedc:	f001 f8c7 	bl	800f06e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	2200      	movs	r2, #0
 800dee4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dee8:	2300      	movs	r3, #0
 800deea:	2200      	movs	r2, #0
 800deec:	2100      	movs	r1, #0
 800deee:	68f8      	ldr	r0, [r7, #12]
 800def0:	f001 fdfa 	bl	800fae8 <USBD_LL_PrepareReceive>
 800def4:	e01c      	b.n	800df30 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800defc:	b2db      	uxtb	r3, r3
 800defe:	2b03      	cmp	r3, #3
 800df00:	d10f      	bne.n	800df22 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800df08:	68db      	ldr	r3, [r3, #12]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d009      	beq.n	800df22 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	2200      	movs	r2, #0
 800df12:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800df1c:	68db      	ldr	r3, [r3, #12]
 800df1e:	68f8      	ldr	r0, [r7, #12]
 800df20:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800df22:	2180      	movs	r1, #128	@ 0x80
 800df24:	68f8      	ldr	r0, [r7, #12]
 800df26:	f001 fd35 	bl	800f994 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800df2a:	68f8      	ldr	r0, [r7, #12]
 800df2c:	f001 f8f1 	bl	800f112 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800df36:	2b00      	cmp	r3, #0
 800df38:	d03a      	beq.n	800dfb0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800df3a:	68f8      	ldr	r0, [r7, #12]
 800df3c:	f7ff fe42 	bl	800dbc4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	2200      	movs	r2, #0
 800df44:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800df48:	e032      	b.n	800dfb0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800df4a:	7afb      	ldrb	r3, [r7, #11]
 800df4c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800df50:	b2db      	uxtb	r3, r3
 800df52:	4619      	mov	r1, r3
 800df54:	68f8      	ldr	r0, [r7, #12]
 800df56:	f000 f985 	bl	800e264 <USBD_CoreFindEP>
 800df5a:	4603      	mov	r3, r0
 800df5c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800df5e:	7dfb      	ldrb	r3, [r7, #23]
 800df60:	2bff      	cmp	r3, #255	@ 0xff
 800df62:	d025      	beq.n	800dfb0 <USBD_LL_DataInStage+0x15a>
 800df64:	7dfb      	ldrb	r3, [r7, #23]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d122      	bne.n	800dfb0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800df70:	b2db      	uxtb	r3, r3
 800df72:	2b03      	cmp	r3, #3
 800df74:	d11c      	bne.n	800dfb0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800df76:	7dfa      	ldrb	r2, [r7, #23]
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	32ae      	adds	r2, #174	@ 0xae
 800df7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df80:	695b      	ldr	r3, [r3, #20]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d014      	beq.n	800dfb0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800df86:	7dfa      	ldrb	r2, [r7, #23]
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800df8e:	7dfa      	ldrb	r2, [r7, #23]
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	32ae      	adds	r2, #174	@ 0xae
 800df94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df98:	695b      	ldr	r3, [r3, #20]
 800df9a:	7afa      	ldrb	r2, [r7, #11]
 800df9c:	4611      	mov	r1, r2
 800df9e:	68f8      	ldr	r0, [r7, #12]
 800dfa0:	4798      	blx	r3
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800dfa6:	7dbb      	ldrb	r3, [r7, #22]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d001      	beq.n	800dfb0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800dfac:	7dbb      	ldrb	r3, [r7, #22]
 800dfae:	e000      	b.n	800dfb2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800dfb0:	2300      	movs	r3, #0
}
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	3718      	adds	r7, #24
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}

0800dfba <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800dfba:	b580      	push	{r7, lr}
 800dfbc:	b084      	sub	sp, #16
 800dfbe:	af00      	add	r7, sp, #0
 800dfc0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2201      	movs	r2, #1
 800dfca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	2200      	movs	r2, #0
 800dfda:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	2200      	movs	r2, #0
 800dfe0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d014      	beq.n	800e020 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dffc:	685b      	ldr	r3, [r3, #4]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d00e      	beq.n	800e020 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e008:	685b      	ldr	r3, [r3, #4]
 800e00a:	687a      	ldr	r2, [r7, #4]
 800e00c:	6852      	ldr	r2, [r2, #4]
 800e00e:	b2d2      	uxtb	r2, r2
 800e010:	4611      	mov	r1, r2
 800e012:	6878      	ldr	r0, [r7, #4]
 800e014:	4798      	blx	r3
 800e016:	4603      	mov	r3, r0
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d001      	beq.n	800e020 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800e01c:	2303      	movs	r3, #3
 800e01e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e020:	2340      	movs	r3, #64	@ 0x40
 800e022:	2200      	movs	r2, #0
 800e024:	2100      	movs	r1, #0
 800e026:	6878      	ldr	r0, [r7, #4]
 800e028:	f001 fc6f 	bl	800f90a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2201      	movs	r2, #1
 800e030:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2240      	movs	r2, #64	@ 0x40
 800e038:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e03c:	2340      	movs	r3, #64	@ 0x40
 800e03e:	2200      	movs	r2, #0
 800e040:	2180      	movs	r1, #128	@ 0x80
 800e042:	6878      	ldr	r0, [r7, #4]
 800e044:	f001 fc61 	bl	800f90a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2201      	movs	r2, #1
 800e04c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	2240      	movs	r2, #64	@ 0x40
 800e052:	621a      	str	r2, [r3, #32]

  return ret;
 800e054:	7bfb      	ldrb	r3, [r7, #15]
}
 800e056:	4618      	mov	r0, r3
 800e058:	3710      	adds	r7, #16
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}

0800e05e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e05e:	b480      	push	{r7}
 800e060:	b083      	sub	sp, #12
 800e062:	af00      	add	r7, sp, #0
 800e064:	6078      	str	r0, [r7, #4]
 800e066:	460b      	mov	r3, r1
 800e068:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	78fa      	ldrb	r2, [r7, #3]
 800e06e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e070:	2300      	movs	r3, #0
}
 800e072:	4618      	mov	r0, r3
 800e074:	370c      	adds	r7, #12
 800e076:	46bd      	mov	sp, r7
 800e078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07c:	4770      	bx	lr

0800e07e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e07e:	b480      	push	{r7}
 800e080:	b083      	sub	sp, #12
 800e082:	af00      	add	r7, sp, #0
 800e084:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e08c:	b2db      	uxtb	r3, r3
 800e08e:	2b04      	cmp	r3, #4
 800e090:	d006      	beq.n	800e0a0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e098:	b2da      	uxtb	r2, r3
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2204      	movs	r2, #4
 800e0a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800e0a8:	2300      	movs	r3, #0
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	370c      	adds	r7, #12
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b4:	4770      	bx	lr

0800e0b6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e0b6:	b480      	push	{r7}
 800e0b8:	b083      	sub	sp, #12
 800e0ba:	af00      	add	r7, sp, #0
 800e0bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e0c4:	b2db      	uxtb	r3, r3
 800e0c6:	2b04      	cmp	r3, #4
 800e0c8:	d106      	bne.n	800e0d8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800e0d0:	b2da      	uxtb	r2, r3
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800e0d8:	2300      	movs	r3, #0
}
 800e0da:	4618      	mov	r0, r3
 800e0dc:	370c      	adds	r7, #12
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e4:	4770      	bx	lr

0800e0e6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e0e6:	b580      	push	{r7, lr}
 800e0e8:	b082      	sub	sp, #8
 800e0ea:	af00      	add	r7, sp, #0
 800e0ec:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e0f4:	b2db      	uxtb	r3, r3
 800e0f6:	2b03      	cmp	r3, #3
 800e0f8:	d110      	bne.n	800e11c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e100:	2b00      	cmp	r3, #0
 800e102:	d00b      	beq.n	800e11c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e10a:	69db      	ldr	r3, [r3, #28]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d005      	beq.n	800e11c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e116:	69db      	ldr	r3, [r3, #28]
 800e118:	6878      	ldr	r0, [r7, #4]
 800e11a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800e11c:	2300      	movs	r3, #0
}
 800e11e:	4618      	mov	r0, r3
 800e120:	3708      	adds	r7, #8
 800e122:	46bd      	mov	sp, r7
 800e124:	bd80      	pop	{r7, pc}

0800e126 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e126:	b580      	push	{r7, lr}
 800e128:	b082      	sub	sp, #8
 800e12a:	af00      	add	r7, sp, #0
 800e12c:	6078      	str	r0, [r7, #4]
 800e12e:	460b      	mov	r3, r1
 800e130:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	32ae      	adds	r2, #174	@ 0xae
 800e13c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d101      	bne.n	800e148 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800e144:	2303      	movs	r3, #3
 800e146:	e01c      	b.n	800e182 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e14e:	b2db      	uxtb	r3, r3
 800e150:	2b03      	cmp	r3, #3
 800e152:	d115      	bne.n	800e180 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	32ae      	adds	r2, #174	@ 0xae
 800e15e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e162:	6a1b      	ldr	r3, [r3, #32]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d00b      	beq.n	800e180 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	32ae      	adds	r2, #174	@ 0xae
 800e172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e176:	6a1b      	ldr	r3, [r3, #32]
 800e178:	78fa      	ldrb	r2, [r7, #3]
 800e17a:	4611      	mov	r1, r2
 800e17c:	6878      	ldr	r0, [r7, #4]
 800e17e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e180:	2300      	movs	r3, #0
}
 800e182:	4618      	mov	r0, r3
 800e184:	3708      	adds	r7, #8
 800e186:	46bd      	mov	sp, r7
 800e188:	bd80      	pop	{r7, pc}

0800e18a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e18a:	b580      	push	{r7, lr}
 800e18c:	b082      	sub	sp, #8
 800e18e:	af00      	add	r7, sp, #0
 800e190:	6078      	str	r0, [r7, #4]
 800e192:	460b      	mov	r3, r1
 800e194:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	32ae      	adds	r2, #174	@ 0xae
 800e1a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d101      	bne.n	800e1ac <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800e1a8:	2303      	movs	r3, #3
 800e1aa:	e01c      	b.n	800e1e6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e1b2:	b2db      	uxtb	r3, r3
 800e1b4:	2b03      	cmp	r3, #3
 800e1b6:	d115      	bne.n	800e1e4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	32ae      	adds	r2, #174	@ 0xae
 800e1c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d00b      	beq.n	800e1e4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	32ae      	adds	r2, #174	@ 0xae
 800e1d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1dc:	78fa      	ldrb	r2, [r7, #3]
 800e1de:	4611      	mov	r1, r2
 800e1e0:	6878      	ldr	r0, [r7, #4]
 800e1e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e1e4:	2300      	movs	r3, #0
}
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	3708      	adds	r7, #8
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bd80      	pop	{r7, pc}

0800e1ee <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e1ee:	b480      	push	{r7}
 800e1f0:	b083      	sub	sp, #12
 800e1f2:	af00      	add	r7, sp, #0
 800e1f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e1f6:	2300      	movs	r3, #0
}
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	370c      	adds	r7, #12
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e202:	4770      	bx	lr

0800e204 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b084      	sub	sp, #16
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800e20c:	2300      	movs	r3, #0
 800e20e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2201      	movs	r2, #1
 800e214:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d00e      	beq.n	800e240 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e228:	685b      	ldr	r3, [r3, #4]
 800e22a:	687a      	ldr	r2, [r7, #4]
 800e22c:	6852      	ldr	r2, [r2, #4]
 800e22e:	b2d2      	uxtb	r2, r2
 800e230:	4611      	mov	r1, r2
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	4798      	blx	r3
 800e236:	4603      	mov	r3, r0
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d001      	beq.n	800e240 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800e23c:	2303      	movs	r3, #3
 800e23e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e240:	7bfb      	ldrb	r3, [r7, #15]
}
 800e242:	4618      	mov	r0, r3
 800e244:	3710      	adds	r7, #16
 800e246:	46bd      	mov	sp, r7
 800e248:	bd80      	pop	{r7, pc}

0800e24a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e24a:	b480      	push	{r7}
 800e24c:	b083      	sub	sp, #12
 800e24e:	af00      	add	r7, sp, #0
 800e250:	6078      	str	r0, [r7, #4]
 800e252:	460b      	mov	r3, r1
 800e254:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e256:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e258:	4618      	mov	r0, r3
 800e25a:	370c      	adds	r7, #12
 800e25c:	46bd      	mov	sp, r7
 800e25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e262:	4770      	bx	lr

0800e264 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e264:	b480      	push	{r7}
 800e266:	b083      	sub	sp, #12
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
 800e26c:	460b      	mov	r3, r1
 800e26e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e270:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e272:	4618      	mov	r0, r3
 800e274:	370c      	adds	r7, #12
 800e276:	46bd      	mov	sp, r7
 800e278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27c:	4770      	bx	lr

0800e27e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e27e:	b580      	push	{r7, lr}
 800e280:	b086      	sub	sp, #24
 800e282:	af00      	add	r7, sp, #0
 800e284:	6078      	str	r0, [r7, #4]
 800e286:	460b      	mov	r3, r1
 800e288:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e292:	2300      	movs	r3, #0
 800e294:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	885b      	ldrh	r3, [r3, #2]
 800e29a:	b29b      	uxth	r3, r3
 800e29c:	68fa      	ldr	r2, [r7, #12]
 800e29e:	7812      	ldrb	r2, [r2, #0]
 800e2a0:	4293      	cmp	r3, r2
 800e2a2:	d91f      	bls.n	800e2e4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	781b      	ldrb	r3, [r3, #0]
 800e2a8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e2aa:	e013      	b.n	800e2d4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e2ac:	f107 030a 	add.w	r3, r7, #10
 800e2b0:	4619      	mov	r1, r3
 800e2b2:	6978      	ldr	r0, [r7, #20]
 800e2b4:	f000 f81b 	bl	800e2ee <USBD_GetNextDesc>
 800e2b8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e2ba:	697b      	ldr	r3, [r7, #20]
 800e2bc:	785b      	ldrb	r3, [r3, #1]
 800e2be:	2b05      	cmp	r3, #5
 800e2c0:	d108      	bne.n	800e2d4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e2c2:	697b      	ldr	r3, [r7, #20]
 800e2c4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e2c6:	693b      	ldr	r3, [r7, #16]
 800e2c8:	789b      	ldrb	r3, [r3, #2]
 800e2ca:	78fa      	ldrb	r2, [r7, #3]
 800e2cc:	429a      	cmp	r2, r3
 800e2ce:	d008      	beq.n	800e2e2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	885b      	ldrh	r3, [r3, #2]
 800e2d8:	b29a      	uxth	r2, r3
 800e2da:	897b      	ldrh	r3, [r7, #10]
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	d8e5      	bhi.n	800e2ac <USBD_GetEpDesc+0x2e>
 800e2e0:	e000      	b.n	800e2e4 <USBD_GetEpDesc+0x66>
          break;
 800e2e2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e2e4:	693b      	ldr	r3, [r7, #16]
}
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	3718      	adds	r7, #24
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd80      	pop	{r7, pc}

0800e2ee <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e2ee:	b480      	push	{r7}
 800e2f0:	b085      	sub	sp, #20
 800e2f2:	af00      	add	r7, sp, #0
 800e2f4:	6078      	str	r0, [r7, #4]
 800e2f6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	881b      	ldrh	r3, [r3, #0]
 800e300:	68fa      	ldr	r2, [r7, #12]
 800e302:	7812      	ldrb	r2, [r2, #0]
 800e304:	4413      	add	r3, r2
 800e306:	b29a      	uxth	r2, r3
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	781b      	ldrb	r3, [r3, #0]
 800e310:	461a      	mov	r2, r3
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	4413      	add	r3, r2
 800e316:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e318:	68fb      	ldr	r3, [r7, #12]
}
 800e31a:	4618      	mov	r0, r3
 800e31c:	3714      	adds	r7, #20
 800e31e:	46bd      	mov	sp, r7
 800e320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e324:	4770      	bx	lr

0800e326 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e326:	b480      	push	{r7}
 800e328:	b087      	sub	sp, #28
 800e32a:	af00      	add	r7, sp, #0
 800e32c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e332:	697b      	ldr	r3, [r7, #20]
 800e334:	781b      	ldrb	r3, [r3, #0]
 800e336:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e338:	697b      	ldr	r3, [r7, #20]
 800e33a:	3301      	adds	r3, #1
 800e33c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e33e:	697b      	ldr	r3, [r7, #20]
 800e340:	781b      	ldrb	r3, [r3, #0]
 800e342:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e344:	8a3b      	ldrh	r3, [r7, #16]
 800e346:	021b      	lsls	r3, r3, #8
 800e348:	b21a      	sxth	r2, r3
 800e34a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e34e:	4313      	orrs	r3, r2
 800e350:	b21b      	sxth	r3, r3
 800e352:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e354:	89fb      	ldrh	r3, [r7, #14]
}
 800e356:	4618      	mov	r0, r3
 800e358:	371c      	adds	r7, #28
 800e35a:	46bd      	mov	sp, r7
 800e35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e360:	4770      	bx	lr
	...

0800e364 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b084      	sub	sp, #16
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
 800e36c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e36e:	2300      	movs	r3, #0
 800e370:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e372:	683b      	ldr	r3, [r7, #0]
 800e374:	781b      	ldrb	r3, [r3, #0]
 800e376:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e37a:	2b40      	cmp	r3, #64	@ 0x40
 800e37c:	d005      	beq.n	800e38a <USBD_StdDevReq+0x26>
 800e37e:	2b40      	cmp	r3, #64	@ 0x40
 800e380:	d857      	bhi.n	800e432 <USBD_StdDevReq+0xce>
 800e382:	2b00      	cmp	r3, #0
 800e384:	d00f      	beq.n	800e3a6 <USBD_StdDevReq+0x42>
 800e386:	2b20      	cmp	r3, #32
 800e388:	d153      	bne.n	800e432 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	32ae      	adds	r2, #174	@ 0xae
 800e394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e398:	689b      	ldr	r3, [r3, #8]
 800e39a:	6839      	ldr	r1, [r7, #0]
 800e39c:	6878      	ldr	r0, [r7, #4]
 800e39e:	4798      	blx	r3
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	73fb      	strb	r3, [r7, #15]
      break;
 800e3a4:	e04a      	b.n	800e43c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	785b      	ldrb	r3, [r3, #1]
 800e3aa:	2b09      	cmp	r3, #9
 800e3ac:	d83b      	bhi.n	800e426 <USBD_StdDevReq+0xc2>
 800e3ae:	a201      	add	r2, pc, #4	@ (adr r2, 800e3b4 <USBD_StdDevReq+0x50>)
 800e3b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3b4:	0800e409 	.word	0x0800e409
 800e3b8:	0800e41d 	.word	0x0800e41d
 800e3bc:	0800e427 	.word	0x0800e427
 800e3c0:	0800e413 	.word	0x0800e413
 800e3c4:	0800e427 	.word	0x0800e427
 800e3c8:	0800e3e7 	.word	0x0800e3e7
 800e3cc:	0800e3dd 	.word	0x0800e3dd
 800e3d0:	0800e427 	.word	0x0800e427
 800e3d4:	0800e3ff 	.word	0x0800e3ff
 800e3d8:	0800e3f1 	.word	0x0800e3f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e3dc:	6839      	ldr	r1, [r7, #0]
 800e3de:	6878      	ldr	r0, [r7, #4]
 800e3e0:	f000 fa3c 	bl	800e85c <USBD_GetDescriptor>
          break;
 800e3e4:	e024      	b.n	800e430 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e3e6:	6839      	ldr	r1, [r7, #0]
 800e3e8:	6878      	ldr	r0, [r7, #4]
 800e3ea:	f000 fbcb 	bl	800eb84 <USBD_SetAddress>
          break;
 800e3ee:	e01f      	b.n	800e430 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e3f0:	6839      	ldr	r1, [r7, #0]
 800e3f2:	6878      	ldr	r0, [r7, #4]
 800e3f4:	f000 fc0a 	bl	800ec0c <USBD_SetConfig>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	73fb      	strb	r3, [r7, #15]
          break;
 800e3fc:	e018      	b.n	800e430 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e3fe:	6839      	ldr	r1, [r7, #0]
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f000 fcad 	bl	800ed60 <USBD_GetConfig>
          break;
 800e406:	e013      	b.n	800e430 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e408:	6839      	ldr	r1, [r7, #0]
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f000 fcde 	bl	800edcc <USBD_GetStatus>
          break;
 800e410:	e00e      	b.n	800e430 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e412:	6839      	ldr	r1, [r7, #0]
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f000 fd0d 	bl	800ee34 <USBD_SetFeature>
          break;
 800e41a:	e009      	b.n	800e430 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e41c:	6839      	ldr	r1, [r7, #0]
 800e41e:	6878      	ldr	r0, [r7, #4]
 800e420:	f000 fd31 	bl	800ee86 <USBD_ClrFeature>
          break;
 800e424:	e004      	b.n	800e430 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e426:	6839      	ldr	r1, [r7, #0]
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	f000 fd88 	bl	800ef3e <USBD_CtlError>
          break;
 800e42e:	bf00      	nop
      }
      break;
 800e430:	e004      	b.n	800e43c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e432:	6839      	ldr	r1, [r7, #0]
 800e434:	6878      	ldr	r0, [r7, #4]
 800e436:	f000 fd82 	bl	800ef3e <USBD_CtlError>
      break;
 800e43a:	bf00      	nop
  }

  return ret;
 800e43c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e43e:	4618      	mov	r0, r3
 800e440:	3710      	adds	r7, #16
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}
 800e446:	bf00      	nop

0800e448 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b084      	sub	sp, #16
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
 800e450:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e452:	2300      	movs	r3, #0
 800e454:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	781b      	ldrb	r3, [r3, #0]
 800e45a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e45e:	2b40      	cmp	r3, #64	@ 0x40
 800e460:	d005      	beq.n	800e46e <USBD_StdItfReq+0x26>
 800e462:	2b40      	cmp	r3, #64	@ 0x40
 800e464:	d852      	bhi.n	800e50c <USBD_StdItfReq+0xc4>
 800e466:	2b00      	cmp	r3, #0
 800e468:	d001      	beq.n	800e46e <USBD_StdItfReq+0x26>
 800e46a:	2b20      	cmp	r3, #32
 800e46c:	d14e      	bne.n	800e50c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e474:	b2db      	uxtb	r3, r3
 800e476:	3b01      	subs	r3, #1
 800e478:	2b02      	cmp	r3, #2
 800e47a:	d840      	bhi.n	800e4fe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	889b      	ldrh	r3, [r3, #4]
 800e480:	b2db      	uxtb	r3, r3
 800e482:	2b01      	cmp	r3, #1
 800e484:	d836      	bhi.n	800e4f4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	889b      	ldrh	r3, [r3, #4]
 800e48a:	b2db      	uxtb	r3, r3
 800e48c:	4619      	mov	r1, r3
 800e48e:	6878      	ldr	r0, [r7, #4]
 800e490:	f7ff fedb 	bl	800e24a <USBD_CoreFindIF>
 800e494:	4603      	mov	r3, r0
 800e496:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e498:	7bbb      	ldrb	r3, [r7, #14]
 800e49a:	2bff      	cmp	r3, #255	@ 0xff
 800e49c:	d01d      	beq.n	800e4da <USBD_StdItfReq+0x92>
 800e49e:	7bbb      	ldrb	r3, [r7, #14]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d11a      	bne.n	800e4da <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e4a4:	7bba      	ldrb	r2, [r7, #14]
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	32ae      	adds	r2, #174	@ 0xae
 800e4aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4ae:	689b      	ldr	r3, [r3, #8]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d00f      	beq.n	800e4d4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e4b4:	7bba      	ldrb	r2, [r7, #14]
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e4bc:	7bba      	ldrb	r2, [r7, #14]
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	32ae      	adds	r2, #174	@ 0xae
 800e4c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4c6:	689b      	ldr	r3, [r3, #8]
 800e4c8:	6839      	ldr	r1, [r7, #0]
 800e4ca:	6878      	ldr	r0, [r7, #4]
 800e4cc:	4798      	blx	r3
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e4d2:	e004      	b.n	800e4de <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e4d4:	2303      	movs	r3, #3
 800e4d6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e4d8:	e001      	b.n	800e4de <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e4da:	2303      	movs	r3, #3
 800e4dc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e4de:	683b      	ldr	r3, [r7, #0]
 800e4e0:	88db      	ldrh	r3, [r3, #6]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d110      	bne.n	800e508 <USBD_StdItfReq+0xc0>
 800e4e6:	7bfb      	ldrb	r3, [r7, #15]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d10d      	bne.n	800e508 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e4ec:	6878      	ldr	r0, [r7, #4]
 800e4ee:	f000 fdfd 	bl	800f0ec <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e4f2:	e009      	b.n	800e508 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e4f4:	6839      	ldr	r1, [r7, #0]
 800e4f6:	6878      	ldr	r0, [r7, #4]
 800e4f8:	f000 fd21 	bl	800ef3e <USBD_CtlError>
          break;
 800e4fc:	e004      	b.n	800e508 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e4fe:	6839      	ldr	r1, [r7, #0]
 800e500:	6878      	ldr	r0, [r7, #4]
 800e502:	f000 fd1c 	bl	800ef3e <USBD_CtlError>
          break;
 800e506:	e000      	b.n	800e50a <USBD_StdItfReq+0xc2>
          break;
 800e508:	bf00      	nop
      }
      break;
 800e50a:	e004      	b.n	800e516 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e50c:	6839      	ldr	r1, [r7, #0]
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f000 fd15 	bl	800ef3e <USBD_CtlError>
      break;
 800e514:	bf00      	nop
  }

  return ret;
 800e516:	7bfb      	ldrb	r3, [r7, #15]
}
 800e518:	4618      	mov	r0, r3
 800e51a:	3710      	adds	r7, #16
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd80      	pop	{r7, pc}

0800e520 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b084      	sub	sp, #16
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
 800e528:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e52a:	2300      	movs	r3, #0
 800e52c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	889b      	ldrh	r3, [r3, #4]
 800e532:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	781b      	ldrb	r3, [r3, #0]
 800e538:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e53c:	2b40      	cmp	r3, #64	@ 0x40
 800e53e:	d007      	beq.n	800e550 <USBD_StdEPReq+0x30>
 800e540:	2b40      	cmp	r3, #64	@ 0x40
 800e542:	f200 817f 	bhi.w	800e844 <USBD_StdEPReq+0x324>
 800e546:	2b00      	cmp	r3, #0
 800e548:	d02a      	beq.n	800e5a0 <USBD_StdEPReq+0x80>
 800e54a:	2b20      	cmp	r3, #32
 800e54c:	f040 817a 	bne.w	800e844 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e550:	7bbb      	ldrb	r3, [r7, #14]
 800e552:	4619      	mov	r1, r3
 800e554:	6878      	ldr	r0, [r7, #4]
 800e556:	f7ff fe85 	bl	800e264 <USBD_CoreFindEP>
 800e55a:	4603      	mov	r3, r0
 800e55c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e55e:	7b7b      	ldrb	r3, [r7, #13]
 800e560:	2bff      	cmp	r3, #255	@ 0xff
 800e562:	f000 8174 	beq.w	800e84e <USBD_StdEPReq+0x32e>
 800e566:	7b7b      	ldrb	r3, [r7, #13]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	f040 8170 	bne.w	800e84e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e56e:	7b7a      	ldrb	r2, [r7, #13]
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e576:	7b7a      	ldrb	r2, [r7, #13]
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	32ae      	adds	r2, #174	@ 0xae
 800e57c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e580:	689b      	ldr	r3, [r3, #8]
 800e582:	2b00      	cmp	r3, #0
 800e584:	f000 8163 	beq.w	800e84e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e588:	7b7a      	ldrb	r2, [r7, #13]
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	32ae      	adds	r2, #174	@ 0xae
 800e58e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e592:	689b      	ldr	r3, [r3, #8]
 800e594:	6839      	ldr	r1, [r7, #0]
 800e596:	6878      	ldr	r0, [r7, #4]
 800e598:	4798      	blx	r3
 800e59a:	4603      	mov	r3, r0
 800e59c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e59e:	e156      	b.n	800e84e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e5a0:	683b      	ldr	r3, [r7, #0]
 800e5a2:	785b      	ldrb	r3, [r3, #1]
 800e5a4:	2b03      	cmp	r3, #3
 800e5a6:	d008      	beq.n	800e5ba <USBD_StdEPReq+0x9a>
 800e5a8:	2b03      	cmp	r3, #3
 800e5aa:	f300 8145 	bgt.w	800e838 <USBD_StdEPReq+0x318>
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	f000 809b 	beq.w	800e6ea <USBD_StdEPReq+0x1ca>
 800e5b4:	2b01      	cmp	r3, #1
 800e5b6:	d03c      	beq.n	800e632 <USBD_StdEPReq+0x112>
 800e5b8:	e13e      	b.n	800e838 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e5c0:	b2db      	uxtb	r3, r3
 800e5c2:	2b02      	cmp	r3, #2
 800e5c4:	d002      	beq.n	800e5cc <USBD_StdEPReq+0xac>
 800e5c6:	2b03      	cmp	r3, #3
 800e5c8:	d016      	beq.n	800e5f8 <USBD_StdEPReq+0xd8>
 800e5ca:	e02c      	b.n	800e626 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e5cc:	7bbb      	ldrb	r3, [r7, #14]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d00d      	beq.n	800e5ee <USBD_StdEPReq+0xce>
 800e5d2:	7bbb      	ldrb	r3, [r7, #14]
 800e5d4:	2b80      	cmp	r3, #128	@ 0x80
 800e5d6:	d00a      	beq.n	800e5ee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e5d8:	7bbb      	ldrb	r3, [r7, #14]
 800e5da:	4619      	mov	r1, r3
 800e5dc:	6878      	ldr	r0, [r7, #4]
 800e5de:	f001 f9d9 	bl	800f994 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e5e2:	2180      	movs	r1, #128	@ 0x80
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f001 f9d5 	bl	800f994 <USBD_LL_StallEP>
 800e5ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e5ec:	e020      	b.n	800e630 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e5ee:	6839      	ldr	r1, [r7, #0]
 800e5f0:	6878      	ldr	r0, [r7, #4]
 800e5f2:	f000 fca4 	bl	800ef3e <USBD_CtlError>
              break;
 800e5f6:	e01b      	b.n	800e630 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	885b      	ldrh	r3, [r3, #2]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d10e      	bne.n	800e61e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e600:	7bbb      	ldrb	r3, [r7, #14]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d00b      	beq.n	800e61e <USBD_StdEPReq+0xfe>
 800e606:	7bbb      	ldrb	r3, [r7, #14]
 800e608:	2b80      	cmp	r3, #128	@ 0x80
 800e60a:	d008      	beq.n	800e61e <USBD_StdEPReq+0xfe>
 800e60c:	683b      	ldr	r3, [r7, #0]
 800e60e:	88db      	ldrh	r3, [r3, #6]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d104      	bne.n	800e61e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e614:	7bbb      	ldrb	r3, [r7, #14]
 800e616:	4619      	mov	r1, r3
 800e618:	6878      	ldr	r0, [r7, #4]
 800e61a:	f001 f9bb 	bl	800f994 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e61e:	6878      	ldr	r0, [r7, #4]
 800e620:	f000 fd64 	bl	800f0ec <USBD_CtlSendStatus>

              break;
 800e624:	e004      	b.n	800e630 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e626:	6839      	ldr	r1, [r7, #0]
 800e628:	6878      	ldr	r0, [r7, #4]
 800e62a:	f000 fc88 	bl	800ef3e <USBD_CtlError>
              break;
 800e62e:	bf00      	nop
          }
          break;
 800e630:	e107      	b.n	800e842 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e638:	b2db      	uxtb	r3, r3
 800e63a:	2b02      	cmp	r3, #2
 800e63c:	d002      	beq.n	800e644 <USBD_StdEPReq+0x124>
 800e63e:	2b03      	cmp	r3, #3
 800e640:	d016      	beq.n	800e670 <USBD_StdEPReq+0x150>
 800e642:	e04b      	b.n	800e6dc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e644:	7bbb      	ldrb	r3, [r7, #14]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d00d      	beq.n	800e666 <USBD_StdEPReq+0x146>
 800e64a:	7bbb      	ldrb	r3, [r7, #14]
 800e64c:	2b80      	cmp	r3, #128	@ 0x80
 800e64e:	d00a      	beq.n	800e666 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e650:	7bbb      	ldrb	r3, [r7, #14]
 800e652:	4619      	mov	r1, r3
 800e654:	6878      	ldr	r0, [r7, #4]
 800e656:	f001 f99d 	bl	800f994 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e65a:	2180      	movs	r1, #128	@ 0x80
 800e65c:	6878      	ldr	r0, [r7, #4]
 800e65e:	f001 f999 	bl	800f994 <USBD_LL_StallEP>
 800e662:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e664:	e040      	b.n	800e6e8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e666:	6839      	ldr	r1, [r7, #0]
 800e668:	6878      	ldr	r0, [r7, #4]
 800e66a:	f000 fc68 	bl	800ef3e <USBD_CtlError>
              break;
 800e66e:	e03b      	b.n	800e6e8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	885b      	ldrh	r3, [r3, #2]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d136      	bne.n	800e6e6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e678:	7bbb      	ldrb	r3, [r7, #14]
 800e67a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d004      	beq.n	800e68c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e682:	7bbb      	ldrb	r3, [r7, #14]
 800e684:	4619      	mov	r1, r3
 800e686:	6878      	ldr	r0, [r7, #4]
 800e688:	f001 f9a3 	bl	800f9d2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e68c:	6878      	ldr	r0, [r7, #4]
 800e68e:	f000 fd2d 	bl	800f0ec <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e692:	7bbb      	ldrb	r3, [r7, #14]
 800e694:	4619      	mov	r1, r3
 800e696:	6878      	ldr	r0, [r7, #4]
 800e698:	f7ff fde4 	bl	800e264 <USBD_CoreFindEP>
 800e69c:	4603      	mov	r3, r0
 800e69e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e6a0:	7b7b      	ldrb	r3, [r7, #13]
 800e6a2:	2bff      	cmp	r3, #255	@ 0xff
 800e6a4:	d01f      	beq.n	800e6e6 <USBD_StdEPReq+0x1c6>
 800e6a6:	7b7b      	ldrb	r3, [r7, #13]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d11c      	bne.n	800e6e6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e6ac:	7b7a      	ldrb	r2, [r7, #13]
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e6b4:	7b7a      	ldrb	r2, [r7, #13]
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	32ae      	adds	r2, #174	@ 0xae
 800e6ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6be:	689b      	ldr	r3, [r3, #8]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d010      	beq.n	800e6e6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e6c4:	7b7a      	ldrb	r2, [r7, #13]
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	32ae      	adds	r2, #174	@ 0xae
 800e6ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6ce:	689b      	ldr	r3, [r3, #8]
 800e6d0:	6839      	ldr	r1, [r7, #0]
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	4798      	blx	r3
 800e6d6:	4603      	mov	r3, r0
 800e6d8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e6da:	e004      	b.n	800e6e6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e6dc:	6839      	ldr	r1, [r7, #0]
 800e6de:	6878      	ldr	r0, [r7, #4]
 800e6e0:	f000 fc2d 	bl	800ef3e <USBD_CtlError>
              break;
 800e6e4:	e000      	b.n	800e6e8 <USBD_StdEPReq+0x1c8>
              break;
 800e6e6:	bf00      	nop
          }
          break;
 800e6e8:	e0ab      	b.n	800e842 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e6f0:	b2db      	uxtb	r3, r3
 800e6f2:	2b02      	cmp	r3, #2
 800e6f4:	d002      	beq.n	800e6fc <USBD_StdEPReq+0x1dc>
 800e6f6:	2b03      	cmp	r3, #3
 800e6f8:	d032      	beq.n	800e760 <USBD_StdEPReq+0x240>
 800e6fa:	e097      	b.n	800e82c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e6fc:	7bbb      	ldrb	r3, [r7, #14]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d007      	beq.n	800e712 <USBD_StdEPReq+0x1f2>
 800e702:	7bbb      	ldrb	r3, [r7, #14]
 800e704:	2b80      	cmp	r3, #128	@ 0x80
 800e706:	d004      	beq.n	800e712 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e708:	6839      	ldr	r1, [r7, #0]
 800e70a:	6878      	ldr	r0, [r7, #4]
 800e70c:	f000 fc17 	bl	800ef3e <USBD_CtlError>
                break;
 800e710:	e091      	b.n	800e836 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e712:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e716:	2b00      	cmp	r3, #0
 800e718:	da0b      	bge.n	800e732 <USBD_StdEPReq+0x212>
 800e71a:	7bbb      	ldrb	r3, [r7, #14]
 800e71c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e720:	4613      	mov	r3, r2
 800e722:	009b      	lsls	r3, r3, #2
 800e724:	4413      	add	r3, r2
 800e726:	009b      	lsls	r3, r3, #2
 800e728:	3310      	adds	r3, #16
 800e72a:	687a      	ldr	r2, [r7, #4]
 800e72c:	4413      	add	r3, r2
 800e72e:	3304      	adds	r3, #4
 800e730:	e00b      	b.n	800e74a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e732:	7bbb      	ldrb	r3, [r7, #14]
 800e734:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e738:	4613      	mov	r3, r2
 800e73a:	009b      	lsls	r3, r3, #2
 800e73c:	4413      	add	r3, r2
 800e73e:	009b      	lsls	r3, r3, #2
 800e740:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e744:	687a      	ldr	r2, [r7, #4]
 800e746:	4413      	add	r3, r2
 800e748:	3304      	adds	r3, #4
 800e74a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e74c:	68bb      	ldr	r3, [r7, #8]
 800e74e:	2200      	movs	r2, #0
 800e750:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e752:	68bb      	ldr	r3, [r7, #8]
 800e754:	2202      	movs	r2, #2
 800e756:	4619      	mov	r1, r3
 800e758:	6878      	ldr	r0, [r7, #4]
 800e75a:	f000 fc6d 	bl	800f038 <USBD_CtlSendData>
              break;
 800e75e:	e06a      	b.n	800e836 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e760:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e764:	2b00      	cmp	r3, #0
 800e766:	da11      	bge.n	800e78c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e768:	7bbb      	ldrb	r3, [r7, #14]
 800e76a:	f003 020f 	and.w	r2, r3, #15
 800e76e:	6879      	ldr	r1, [r7, #4]
 800e770:	4613      	mov	r3, r2
 800e772:	009b      	lsls	r3, r3, #2
 800e774:	4413      	add	r3, r2
 800e776:	009b      	lsls	r3, r3, #2
 800e778:	440b      	add	r3, r1
 800e77a:	3324      	adds	r3, #36	@ 0x24
 800e77c:	881b      	ldrh	r3, [r3, #0]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d117      	bne.n	800e7b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e782:	6839      	ldr	r1, [r7, #0]
 800e784:	6878      	ldr	r0, [r7, #4]
 800e786:	f000 fbda 	bl	800ef3e <USBD_CtlError>
                  break;
 800e78a:	e054      	b.n	800e836 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e78c:	7bbb      	ldrb	r3, [r7, #14]
 800e78e:	f003 020f 	and.w	r2, r3, #15
 800e792:	6879      	ldr	r1, [r7, #4]
 800e794:	4613      	mov	r3, r2
 800e796:	009b      	lsls	r3, r3, #2
 800e798:	4413      	add	r3, r2
 800e79a:	009b      	lsls	r3, r3, #2
 800e79c:	440b      	add	r3, r1
 800e79e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e7a2:	881b      	ldrh	r3, [r3, #0]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d104      	bne.n	800e7b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e7a8:	6839      	ldr	r1, [r7, #0]
 800e7aa:	6878      	ldr	r0, [r7, #4]
 800e7ac:	f000 fbc7 	bl	800ef3e <USBD_CtlError>
                  break;
 800e7b0:	e041      	b.n	800e836 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e7b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	da0b      	bge.n	800e7d2 <USBD_StdEPReq+0x2b2>
 800e7ba:	7bbb      	ldrb	r3, [r7, #14]
 800e7bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e7c0:	4613      	mov	r3, r2
 800e7c2:	009b      	lsls	r3, r3, #2
 800e7c4:	4413      	add	r3, r2
 800e7c6:	009b      	lsls	r3, r3, #2
 800e7c8:	3310      	adds	r3, #16
 800e7ca:	687a      	ldr	r2, [r7, #4]
 800e7cc:	4413      	add	r3, r2
 800e7ce:	3304      	adds	r3, #4
 800e7d0:	e00b      	b.n	800e7ea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e7d2:	7bbb      	ldrb	r3, [r7, #14]
 800e7d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e7d8:	4613      	mov	r3, r2
 800e7da:	009b      	lsls	r3, r3, #2
 800e7dc:	4413      	add	r3, r2
 800e7de:	009b      	lsls	r3, r3, #2
 800e7e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e7e4:	687a      	ldr	r2, [r7, #4]
 800e7e6:	4413      	add	r3, r2
 800e7e8:	3304      	adds	r3, #4
 800e7ea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e7ec:	7bbb      	ldrb	r3, [r7, #14]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d002      	beq.n	800e7f8 <USBD_StdEPReq+0x2d8>
 800e7f2:	7bbb      	ldrb	r3, [r7, #14]
 800e7f4:	2b80      	cmp	r3, #128	@ 0x80
 800e7f6:	d103      	bne.n	800e800 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e7f8:	68bb      	ldr	r3, [r7, #8]
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	601a      	str	r2, [r3, #0]
 800e7fe:	e00e      	b.n	800e81e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e800:	7bbb      	ldrb	r3, [r7, #14]
 800e802:	4619      	mov	r1, r3
 800e804:	6878      	ldr	r0, [r7, #4]
 800e806:	f001 f903 	bl	800fa10 <USBD_LL_IsStallEP>
 800e80a:	4603      	mov	r3, r0
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d003      	beq.n	800e818 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e810:	68bb      	ldr	r3, [r7, #8]
 800e812:	2201      	movs	r2, #1
 800e814:	601a      	str	r2, [r3, #0]
 800e816:	e002      	b.n	800e81e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e818:	68bb      	ldr	r3, [r7, #8]
 800e81a:	2200      	movs	r2, #0
 800e81c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e81e:	68bb      	ldr	r3, [r7, #8]
 800e820:	2202      	movs	r2, #2
 800e822:	4619      	mov	r1, r3
 800e824:	6878      	ldr	r0, [r7, #4]
 800e826:	f000 fc07 	bl	800f038 <USBD_CtlSendData>
              break;
 800e82a:	e004      	b.n	800e836 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e82c:	6839      	ldr	r1, [r7, #0]
 800e82e:	6878      	ldr	r0, [r7, #4]
 800e830:	f000 fb85 	bl	800ef3e <USBD_CtlError>
              break;
 800e834:	bf00      	nop
          }
          break;
 800e836:	e004      	b.n	800e842 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e838:	6839      	ldr	r1, [r7, #0]
 800e83a:	6878      	ldr	r0, [r7, #4]
 800e83c:	f000 fb7f 	bl	800ef3e <USBD_CtlError>
          break;
 800e840:	bf00      	nop
      }
      break;
 800e842:	e005      	b.n	800e850 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e844:	6839      	ldr	r1, [r7, #0]
 800e846:	6878      	ldr	r0, [r7, #4]
 800e848:	f000 fb79 	bl	800ef3e <USBD_CtlError>
      break;
 800e84c:	e000      	b.n	800e850 <USBD_StdEPReq+0x330>
      break;
 800e84e:	bf00      	nop
  }

  return ret;
 800e850:	7bfb      	ldrb	r3, [r7, #15]
}
 800e852:	4618      	mov	r0, r3
 800e854:	3710      	adds	r7, #16
 800e856:	46bd      	mov	sp, r7
 800e858:	bd80      	pop	{r7, pc}
	...

0800e85c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b084      	sub	sp, #16
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
 800e864:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e866:	2300      	movs	r3, #0
 800e868:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e86a:	2300      	movs	r3, #0
 800e86c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e86e:	2300      	movs	r3, #0
 800e870:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	885b      	ldrh	r3, [r3, #2]
 800e876:	0a1b      	lsrs	r3, r3, #8
 800e878:	b29b      	uxth	r3, r3
 800e87a:	3b01      	subs	r3, #1
 800e87c:	2b0e      	cmp	r3, #14
 800e87e:	f200 8152 	bhi.w	800eb26 <USBD_GetDescriptor+0x2ca>
 800e882:	a201      	add	r2, pc, #4	@ (adr r2, 800e888 <USBD_GetDescriptor+0x2c>)
 800e884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e888:	0800e8f9 	.word	0x0800e8f9
 800e88c:	0800e911 	.word	0x0800e911
 800e890:	0800e951 	.word	0x0800e951
 800e894:	0800eb27 	.word	0x0800eb27
 800e898:	0800eb27 	.word	0x0800eb27
 800e89c:	0800eac7 	.word	0x0800eac7
 800e8a0:	0800eaf3 	.word	0x0800eaf3
 800e8a4:	0800eb27 	.word	0x0800eb27
 800e8a8:	0800eb27 	.word	0x0800eb27
 800e8ac:	0800eb27 	.word	0x0800eb27
 800e8b0:	0800eb27 	.word	0x0800eb27
 800e8b4:	0800eb27 	.word	0x0800eb27
 800e8b8:	0800eb27 	.word	0x0800eb27
 800e8bc:	0800eb27 	.word	0x0800eb27
 800e8c0:	0800e8c5 	.word	0x0800e8c5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e8ca:	69db      	ldr	r3, [r3, #28]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d00b      	beq.n	800e8e8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e8d6:	69db      	ldr	r3, [r3, #28]
 800e8d8:	687a      	ldr	r2, [r7, #4]
 800e8da:	7c12      	ldrb	r2, [r2, #16]
 800e8dc:	f107 0108 	add.w	r1, r7, #8
 800e8e0:	4610      	mov	r0, r2
 800e8e2:	4798      	blx	r3
 800e8e4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e8e6:	e126      	b.n	800eb36 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e8e8:	6839      	ldr	r1, [r7, #0]
 800e8ea:	6878      	ldr	r0, [r7, #4]
 800e8ec:	f000 fb27 	bl	800ef3e <USBD_CtlError>
        err++;
 800e8f0:	7afb      	ldrb	r3, [r7, #11]
 800e8f2:	3301      	adds	r3, #1
 800e8f4:	72fb      	strb	r3, [r7, #11]
      break;
 800e8f6:	e11e      	b.n	800eb36 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	687a      	ldr	r2, [r7, #4]
 800e902:	7c12      	ldrb	r2, [r2, #16]
 800e904:	f107 0108 	add.w	r1, r7, #8
 800e908:	4610      	mov	r0, r2
 800e90a:	4798      	blx	r3
 800e90c:	60f8      	str	r0, [r7, #12]
      break;
 800e90e:	e112      	b.n	800eb36 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	7c1b      	ldrb	r3, [r3, #16]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d10d      	bne.n	800e934 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e91e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e920:	f107 0208 	add.w	r2, r7, #8
 800e924:	4610      	mov	r0, r2
 800e926:	4798      	blx	r3
 800e928:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	3301      	adds	r3, #1
 800e92e:	2202      	movs	r2, #2
 800e930:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e932:	e100      	b.n	800eb36 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e93a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e93c:	f107 0208 	add.w	r2, r7, #8
 800e940:	4610      	mov	r0, r2
 800e942:	4798      	blx	r3
 800e944:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	3301      	adds	r3, #1
 800e94a:	2202      	movs	r2, #2
 800e94c:	701a      	strb	r2, [r3, #0]
      break;
 800e94e:	e0f2      	b.n	800eb36 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e950:	683b      	ldr	r3, [r7, #0]
 800e952:	885b      	ldrh	r3, [r3, #2]
 800e954:	b2db      	uxtb	r3, r3
 800e956:	2b05      	cmp	r3, #5
 800e958:	f200 80ac 	bhi.w	800eab4 <USBD_GetDescriptor+0x258>
 800e95c:	a201      	add	r2, pc, #4	@ (adr r2, 800e964 <USBD_GetDescriptor+0x108>)
 800e95e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e962:	bf00      	nop
 800e964:	0800e97d 	.word	0x0800e97d
 800e968:	0800e9b1 	.word	0x0800e9b1
 800e96c:	0800e9e5 	.word	0x0800e9e5
 800e970:	0800ea19 	.word	0x0800ea19
 800e974:	0800ea4d 	.word	0x0800ea4d
 800e978:	0800ea81 	.word	0x0800ea81
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e982:	685b      	ldr	r3, [r3, #4]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d00b      	beq.n	800e9a0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e98e:	685b      	ldr	r3, [r3, #4]
 800e990:	687a      	ldr	r2, [r7, #4]
 800e992:	7c12      	ldrb	r2, [r2, #16]
 800e994:	f107 0108 	add.w	r1, r7, #8
 800e998:	4610      	mov	r0, r2
 800e99a:	4798      	blx	r3
 800e99c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e99e:	e091      	b.n	800eac4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e9a0:	6839      	ldr	r1, [r7, #0]
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	f000 facb 	bl	800ef3e <USBD_CtlError>
            err++;
 800e9a8:	7afb      	ldrb	r3, [r7, #11]
 800e9aa:	3301      	adds	r3, #1
 800e9ac:	72fb      	strb	r3, [r7, #11]
          break;
 800e9ae:	e089      	b.n	800eac4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e9b6:	689b      	ldr	r3, [r3, #8]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d00b      	beq.n	800e9d4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e9c2:	689b      	ldr	r3, [r3, #8]
 800e9c4:	687a      	ldr	r2, [r7, #4]
 800e9c6:	7c12      	ldrb	r2, [r2, #16]
 800e9c8:	f107 0108 	add.w	r1, r7, #8
 800e9cc:	4610      	mov	r0, r2
 800e9ce:	4798      	blx	r3
 800e9d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e9d2:	e077      	b.n	800eac4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e9d4:	6839      	ldr	r1, [r7, #0]
 800e9d6:	6878      	ldr	r0, [r7, #4]
 800e9d8:	f000 fab1 	bl	800ef3e <USBD_CtlError>
            err++;
 800e9dc:	7afb      	ldrb	r3, [r7, #11]
 800e9de:	3301      	adds	r3, #1
 800e9e0:	72fb      	strb	r3, [r7, #11]
          break;
 800e9e2:	e06f      	b.n	800eac4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e9ea:	68db      	ldr	r3, [r3, #12]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d00b      	beq.n	800ea08 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e9f6:	68db      	ldr	r3, [r3, #12]
 800e9f8:	687a      	ldr	r2, [r7, #4]
 800e9fa:	7c12      	ldrb	r2, [r2, #16]
 800e9fc:	f107 0108 	add.w	r1, r7, #8
 800ea00:	4610      	mov	r0, r2
 800ea02:	4798      	blx	r3
 800ea04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ea06:	e05d      	b.n	800eac4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ea08:	6839      	ldr	r1, [r7, #0]
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	f000 fa97 	bl	800ef3e <USBD_CtlError>
            err++;
 800ea10:	7afb      	ldrb	r3, [r7, #11]
 800ea12:	3301      	adds	r3, #1
 800ea14:	72fb      	strb	r3, [r7, #11]
          break;
 800ea16:	e055      	b.n	800eac4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ea1e:	691b      	ldr	r3, [r3, #16]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d00b      	beq.n	800ea3c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ea2a:	691b      	ldr	r3, [r3, #16]
 800ea2c:	687a      	ldr	r2, [r7, #4]
 800ea2e:	7c12      	ldrb	r2, [r2, #16]
 800ea30:	f107 0108 	add.w	r1, r7, #8
 800ea34:	4610      	mov	r0, r2
 800ea36:	4798      	blx	r3
 800ea38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ea3a:	e043      	b.n	800eac4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ea3c:	6839      	ldr	r1, [r7, #0]
 800ea3e:	6878      	ldr	r0, [r7, #4]
 800ea40:	f000 fa7d 	bl	800ef3e <USBD_CtlError>
            err++;
 800ea44:	7afb      	ldrb	r3, [r7, #11]
 800ea46:	3301      	adds	r3, #1
 800ea48:	72fb      	strb	r3, [r7, #11]
          break;
 800ea4a:	e03b      	b.n	800eac4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ea52:	695b      	ldr	r3, [r3, #20]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d00b      	beq.n	800ea70 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ea5e:	695b      	ldr	r3, [r3, #20]
 800ea60:	687a      	ldr	r2, [r7, #4]
 800ea62:	7c12      	ldrb	r2, [r2, #16]
 800ea64:	f107 0108 	add.w	r1, r7, #8
 800ea68:	4610      	mov	r0, r2
 800ea6a:	4798      	blx	r3
 800ea6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ea6e:	e029      	b.n	800eac4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ea70:	6839      	ldr	r1, [r7, #0]
 800ea72:	6878      	ldr	r0, [r7, #4]
 800ea74:	f000 fa63 	bl	800ef3e <USBD_CtlError>
            err++;
 800ea78:	7afb      	ldrb	r3, [r7, #11]
 800ea7a:	3301      	adds	r3, #1
 800ea7c:	72fb      	strb	r3, [r7, #11]
          break;
 800ea7e:	e021      	b.n	800eac4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ea86:	699b      	ldr	r3, [r3, #24]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d00b      	beq.n	800eaa4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ea92:	699b      	ldr	r3, [r3, #24]
 800ea94:	687a      	ldr	r2, [r7, #4]
 800ea96:	7c12      	ldrb	r2, [r2, #16]
 800ea98:	f107 0108 	add.w	r1, r7, #8
 800ea9c:	4610      	mov	r0, r2
 800ea9e:	4798      	blx	r3
 800eaa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eaa2:	e00f      	b.n	800eac4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eaa4:	6839      	ldr	r1, [r7, #0]
 800eaa6:	6878      	ldr	r0, [r7, #4]
 800eaa8:	f000 fa49 	bl	800ef3e <USBD_CtlError>
            err++;
 800eaac:	7afb      	ldrb	r3, [r7, #11]
 800eaae:	3301      	adds	r3, #1
 800eab0:	72fb      	strb	r3, [r7, #11]
          break;
 800eab2:	e007      	b.n	800eac4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800eab4:	6839      	ldr	r1, [r7, #0]
 800eab6:	6878      	ldr	r0, [r7, #4]
 800eab8:	f000 fa41 	bl	800ef3e <USBD_CtlError>
          err++;
 800eabc:	7afb      	ldrb	r3, [r7, #11]
 800eabe:	3301      	adds	r3, #1
 800eac0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800eac2:	bf00      	nop
      }
      break;
 800eac4:	e037      	b.n	800eb36 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	7c1b      	ldrb	r3, [r3, #16]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d109      	bne.n	800eae2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ead4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ead6:	f107 0208 	add.w	r2, r7, #8
 800eada:	4610      	mov	r0, r2
 800eadc:	4798      	blx	r3
 800eade:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800eae0:	e029      	b.n	800eb36 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800eae2:	6839      	ldr	r1, [r7, #0]
 800eae4:	6878      	ldr	r0, [r7, #4]
 800eae6:	f000 fa2a 	bl	800ef3e <USBD_CtlError>
        err++;
 800eaea:	7afb      	ldrb	r3, [r7, #11]
 800eaec:	3301      	adds	r3, #1
 800eaee:	72fb      	strb	r3, [r7, #11]
      break;
 800eaf0:	e021      	b.n	800eb36 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	7c1b      	ldrb	r3, [r3, #16]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d10d      	bne.n	800eb16 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eb00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb02:	f107 0208 	add.w	r2, r7, #8
 800eb06:	4610      	mov	r0, r2
 800eb08:	4798      	blx	r3
 800eb0a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	3301      	adds	r3, #1
 800eb10:	2207      	movs	r2, #7
 800eb12:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800eb14:	e00f      	b.n	800eb36 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800eb16:	6839      	ldr	r1, [r7, #0]
 800eb18:	6878      	ldr	r0, [r7, #4]
 800eb1a:	f000 fa10 	bl	800ef3e <USBD_CtlError>
        err++;
 800eb1e:	7afb      	ldrb	r3, [r7, #11]
 800eb20:	3301      	adds	r3, #1
 800eb22:	72fb      	strb	r3, [r7, #11]
      break;
 800eb24:	e007      	b.n	800eb36 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800eb26:	6839      	ldr	r1, [r7, #0]
 800eb28:	6878      	ldr	r0, [r7, #4]
 800eb2a:	f000 fa08 	bl	800ef3e <USBD_CtlError>
      err++;
 800eb2e:	7afb      	ldrb	r3, [r7, #11]
 800eb30:	3301      	adds	r3, #1
 800eb32:	72fb      	strb	r3, [r7, #11]
      break;
 800eb34:	bf00      	nop
  }

  if (err != 0U)
 800eb36:	7afb      	ldrb	r3, [r7, #11]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d11e      	bne.n	800eb7a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800eb3c:	683b      	ldr	r3, [r7, #0]
 800eb3e:	88db      	ldrh	r3, [r3, #6]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d016      	beq.n	800eb72 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800eb44:	893b      	ldrh	r3, [r7, #8]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d00e      	beq.n	800eb68 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	88da      	ldrh	r2, [r3, #6]
 800eb4e:	893b      	ldrh	r3, [r7, #8]
 800eb50:	4293      	cmp	r3, r2
 800eb52:	bf28      	it	cs
 800eb54:	4613      	movcs	r3, r2
 800eb56:	b29b      	uxth	r3, r3
 800eb58:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800eb5a:	893b      	ldrh	r3, [r7, #8]
 800eb5c:	461a      	mov	r2, r3
 800eb5e:	68f9      	ldr	r1, [r7, #12]
 800eb60:	6878      	ldr	r0, [r7, #4]
 800eb62:	f000 fa69 	bl	800f038 <USBD_CtlSendData>
 800eb66:	e009      	b.n	800eb7c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800eb68:	6839      	ldr	r1, [r7, #0]
 800eb6a:	6878      	ldr	r0, [r7, #4]
 800eb6c:	f000 f9e7 	bl	800ef3e <USBD_CtlError>
 800eb70:	e004      	b.n	800eb7c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800eb72:	6878      	ldr	r0, [r7, #4]
 800eb74:	f000 faba 	bl	800f0ec <USBD_CtlSendStatus>
 800eb78:	e000      	b.n	800eb7c <USBD_GetDescriptor+0x320>
    return;
 800eb7a:	bf00      	nop
  }
}
 800eb7c:	3710      	adds	r7, #16
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}
 800eb82:	bf00      	nop

0800eb84 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b084      	sub	sp, #16
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
 800eb8c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800eb8e:	683b      	ldr	r3, [r7, #0]
 800eb90:	889b      	ldrh	r3, [r3, #4]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d131      	bne.n	800ebfa <USBD_SetAddress+0x76>
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	88db      	ldrh	r3, [r3, #6]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d12d      	bne.n	800ebfa <USBD_SetAddress+0x76>
 800eb9e:	683b      	ldr	r3, [r7, #0]
 800eba0:	885b      	ldrh	r3, [r3, #2]
 800eba2:	2b7f      	cmp	r3, #127	@ 0x7f
 800eba4:	d829      	bhi.n	800ebfa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	885b      	ldrh	r3, [r3, #2]
 800ebaa:	b2db      	uxtb	r3, r3
 800ebac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ebb0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ebb8:	b2db      	uxtb	r3, r3
 800ebba:	2b03      	cmp	r3, #3
 800ebbc:	d104      	bne.n	800ebc8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ebbe:	6839      	ldr	r1, [r7, #0]
 800ebc0:	6878      	ldr	r0, [r7, #4]
 800ebc2:	f000 f9bc 	bl	800ef3e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ebc6:	e01d      	b.n	800ec04 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	7bfa      	ldrb	r2, [r7, #15]
 800ebcc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ebd0:	7bfb      	ldrb	r3, [r7, #15]
 800ebd2:	4619      	mov	r1, r3
 800ebd4:	6878      	ldr	r0, [r7, #4]
 800ebd6:	f000 ff47 	bl	800fa68 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ebda:	6878      	ldr	r0, [r7, #4]
 800ebdc:	f000 fa86 	bl	800f0ec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ebe0:	7bfb      	ldrb	r3, [r7, #15]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d004      	beq.n	800ebf0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	2202      	movs	r2, #2
 800ebea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ebee:	e009      	b.n	800ec04 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2201      	movs	r2, #1
 800ebf4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ebf8:	e004      	b.n	800ec04 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ebfa:	6839      	ldr	r1, [r7, #0]
 800ebfc:	6878      	ldr	r0, [r7, #4]
 800ebfe:	f000 f99e 	bl	800ef3e <USBD_CtlError>
  }
}
 800ec02:	bf00      	nop
 800ec04:	bf00      	nop
 800ec06:	3710      	adds	r7, #16
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}

0800ec0c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b084      	sub	sp, #16
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
 800ec14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ec16:	2300      	movs	r3, #0
 800ec18:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	885b      	ldrh	r3, [r3, #2]
 800ec1e:	b2da      	uxtb	r2, r3
 800ec20:	4b4e      	ldr	r3, [pc, #312]	@ (800ed5c <USBD_SetConfig+0x150>)
 800ec22:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ec24:	4b4d      	ldr	r3, [pc, #308]	@ (800ed5c <USBD_SetConfig+0x150>)
 800ec26:	781b      	ldrb	r3, [r3, #0]
 800ec28:	2b01      	cmp	r3, #1
 800ec2a:	d905      	bls.n	800ec38 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ec2c:	6839      	ldr	r1, [r7, #0]
 800ec2e:	6878      	ldr	r0, [r7, #4]
 800ec30:	f000 f985 	bl	800ef3e <USBD_CtlError>
    return USBD_FAIL;
 800ec34:	2303      	movs	r3, #3
 800ec36:	e08c      	b.n	800ed52 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ec3e:	b2db      	uxtb	r3, r3
 800ec40:	2b02      	cmp	r3, #2
 800ec42:	d002      	beq.n	800ec4a <USBD_SetConfig+0x3e>
 800ec44:	2b03      	cmp	r3, #3
 800ec46:	d029      	beq.n	800ec9c <USBD_SetConfig+0x90>
 800ec48:	e075      	b.n	800ed36 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ec4a:	4b44      	ldr	r3, [pc, #272]	@ (800ed5c <USBD_SetConfig+0x150>)
 800ec4c:	781b      	ldrb	r3, [r3, #0]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d020      	beq.n	800ec94 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ec52:	4b42      	ldr	r3, [pc, #264]	@ (800ed5c <USBD_SetConfig+0x150>)
 800ec54:	781b      	ldrb	r3, [r3, #0]
 800ec56:	461a      	mov	r2, r3
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ec5c:	4b3f      	ldr	r3, [pc, #252]	@ (800ed5c <USBD_SetConfig+0x150>)
 800ec5e:	781b      	ldrb	r3, [r3, #0]
 800ec60:	4619      	mov	r1, r3
 800ec62:	6878      	ldr	r0, [r7, #4]
 800ec64:	f7fe ffb9 	bl	800dbda <USBD_SetClassConfig>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ec6c:	7bfb      	ldrb	r3, [r7, #15]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d008      	beq.n	800ec84 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ec72:	6839      	ldr	r1, [r7, #0]
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	f000 f962 	bl	800ef3e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	2202      	movs	r2, #2
 800ec7e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ec82:	e065      	b.n	800ed50 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ec84:	6878      	ldr	r0, [r7, #4]
 800ec86:	f000 fa31 	bl	800f0ec <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	2203      	movs	r2, #3
 800ec8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ec92:	e05d      	b.n	800ed50 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ec94:	6878      	ldr	r0, [r7, #4]
 800ec96:	f000 fa29 	bl	800f0ec <USBD_CtlSendStatus>
      break;
 800ec9a:	e059      	b.n	800ed50 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ec9c:	4b2f      	ldr	r3, [pc, #188]	@ (800ed5c <USBD_SetConfig+0x150>)
 800ec9e:	781b      	ldrb	r3, [r3, #0]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d112      	bne.n	800ecca <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	2202      	movs	r2, #2
 800eca8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800ecac:	4b2b      	ldr	r3, [pc, #172]	@ (800ed5c <USBD_SetConfig+0x150>)
 800ecae:	781b      	ldrb	r3, [r3, #0]
 800ecb0:	461a      	mov	r2, r3
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ecb6:	4b29      	ldr	r3, [pc, #164]	@ (800ed5c <USBD_SetConfig+0x150>)
 800ecb8:	781b      	ldrb	r3, [r3, #0]
 800ecba:	4619      	mov	r1, r3
 800ecbc:	6878      	ldr	r0, [r7, #4]
 800ecbe:	f7fe ffa8 	bl	800dc12 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ecc2:	6878      	ldr	r0, [r7, #4]
 800ecc4:	f000 fa12 	bl	800f0ec <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ecc8:	e042      	b.n	800ed50 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ecca:	4b24      	ldr	r3, [pc, #144]	@ (800ed5c <USBD_SetConfig+0x150>)
 800eccc:	781b      	ldrb	r3, [r3, #0]
 800ecce:	461a      	mov	r2, r3
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	685b      	ldr	r3, [r3, #4]
 800ecd4:	429a      	cmp	r2, r3
 800ecd6:	d02a      	beq.n	800ed2e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	685b      	ldr	r3, [r3, #4]
 800ecdc:	b2db      	uxtb	r3, r3
 800ecde:	4619      	mov	r1, r3
 800ece0:	6878      	ldr	r0, [r7, #4]
 800ece2:	f7fe ff96 	bl	800dc12 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ece6:	4b1d      	ldr	r3, [pc, #116]	@ (800ed5c <USBD_SetConfig+0x150>)
 800ece8:	781b      	ldrb	r3, [r3, #0]
 800ecea:	461a      	mov	r2, r3
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ecf0:	4b1a      	ldr	r3, [pc, #104]	@ (800ed5c <USBD_SetConfig+0x150>)
 800ecf2:	781b      	ldrb	r3, [r3, #0]
 800ecf4:	4619      	mov	r1, r3
 800ecf6:	6878      	ldr	r0, [r7, #4]
 800ecf8:	f7fe ff6f 	bl	800dbda <USBD_SetClassConfig>
 800ecfc:	4603      	mov	r3, r0
 800ecfe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ed00:	7bfb      	ldrb	r3, [r7, #15]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d00f      	beq.n	800ed26 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ed06:	6839      	ldr	r1, [r7, #0]
 800ed08:	6878      	ldr	r0, [r7, #4]
 800ed0a:	f000 f918 	bl	800ef3e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	685b      	ldr	r3, [r3, #4]
 800ed12:	b2db      	uxtb	r3, r3
 800ed14:	4619      	mov	r1, r3
 800ed16:	6878      	ldr	r0, [r7, #4]
 800ed18:	f7fe ff7b 	bl	800dc12 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2202      	movs	r2, #2
 800ed20:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ed24:	e014      	b.n	800ed50 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ed26:	6878      	ldr	r0, [r7, #4]
 800ed28:	f000 f9e0 	bl	800f0ec <USBD_CtlSendStatus>
      break;
 800ed2c:	e010      	b.n	800ed50 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ed2e:	6878      	ldr	r0, [r7, #4]
 800ed30:	f000 f9dc 	bl	800f0ec <USBD_CtlSendStatus>
      break;
 800ed34:	e00c      	b.n	800ed50 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ed36:	6839      	ldr	r1, [r7, #0]
 800ed38:	6878      	ldr	r0, [r7, #4]
 800ed3a:	f000 f900 	bl	800ef3e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ed3e:	4b07      	ldr	r3, [pc, #28]	@ (800ed5c <USBD_SetConfig+0x150>)
 800ed40:	781b      	ldrb	r3, [r3, #0]
 800ed42:	4619      	mov	r1, r3
 800ed44:	6878      	ldr	r0, [r7, #4]
 800ed46:	f7fe ff64 	bl	800dc12 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ed4a:	2303      	movs	r3, #3
 800ed4c:	73fb      	strb	r3, [r7, #15]
      break;
 800ed4e:	bf00      	nop
  }

  return ret;
 800ed50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed52:	4618      	mov	r0, r3
 800ed54:	3710      	adds	r7, #16
 800ed56:	46bd      	mov	sp, r7
 800ed58:	bd80      	pop	{r7, pc}
 800ed5a:	bf00      	nop
 800ed5c:	240009a4 	.word	0x240009a4

0800ed60 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b082      	sub	sp, #8
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
 800ed68:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ed6a:	683b      	ldr	r3, [r7, #0]
 800ed6c:	88db      	ldrh	r3, [r3, #6]
 800ed6e:	2b01      	cmp	r3, #1
 800ed70:	d004      	beq.n	800ed7c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ed72:	6839      	ldr	r1, [r7, #0]
 800ed74:	6878      	ldr	r0, [r7, #4]
 800ed76:	f000 f8e2 	bl	800ef3e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ed7a:	e023      	b.n	800edc4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed82:	b2db      	uxtb	r3, r3
 800ed84:	2b02      	cmp	r3, #2
 800ed86:	dc02      	bgt.n	800ed8e <USBD_GetConfig+0x2e>
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	dc03      	bgt.n	800ed94 <USBD_GetConfig+0x34>
 800ed8c:	e015      	b.n	800edba <USBD_GetConfig+0x5a>
 800ed8e:	2b03      	cmp	r3, #3
 800ed90:	d00b      	beq.n	800edaa <USBD_GetConfig+0x4a>
 800ed92:	e012      	b.n	800edba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2200      	movs	r2, #0
 800ed98:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	3308      	adds	r3, #8
 800ed9e:	2201      	movs	r2, #1
 800eda0:	4619      	mov	r1, r3
 800eda2:	6878      	ldr	r0, [r7, #4]
 800eda4:	f000 f948 	bl	800f038 <USBD_CtlSendData>
        break;
 800eda8:	e00c      	b.n	800edc4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	3304      	adds	r3, #4
 800edae:	2201      	movs	r2, #1
 800edb0:	4619      	mov	r1, r3
 800edb2:	6878      	ldr	r0, [r7, #4]
 800edb4:	f000 f940 	bl	800f038 <USBD_CtlSendData>
        break;
 800edb8:	e004      	b.n	800edc4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800edba:	6839      	ldr	r1, [r7, #0]
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	f000 f8be 	bl	800ef3e <USBD_CtlError>
        break;
 800edc2:	bf00      	nop
}
 800edc4:	bf00      	nop
 800edc6:	3708      	adds	r7, #8
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}

0800edcc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	b082      	sub	sp, #8
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
 800edd4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eddc:	b2db      	uxtb	r3, r3
 800edde:	3b01      	subs	r3, #1
 800ede0:	2b02      	cmp	r3, #2
 800ede2:	d81e      	bhi.n	800ee22 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	88db      	ldrh	r3, [r3, #6]
 800ede8:	2b02      	cmp	r3, #2
 800edea:	d004      	beq.n	800edf6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800edec:	6839      	ldr	r1, [r7, #0]
 800edee:	6878      	ldr	r0, [r7, #4]
 800edf0:	f000 f8a5 	bl	800ef3e <USBD_CtlError>
        break;
 800edf4:	e01a      	b.n	800ee2c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	2201      	movs	r2, #1
 800edfa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d005      	beq.n	800ee12 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	68db      	ldr	r3, [r3, #12]
 800ee0a:	f043 0202 	orr.w	r2, r3, #2
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	330c      	adds	r3, #12
 800ee16:	2202      	movs	r2, #2
 800ee18:	4619      	mov	r1, r3
 800ee1a:	6878      	ldr	r0, [r7, #4]
 800ee1c:	f000 f90c 	bl	800f038 <USBD_CtlSendData>
      break;
 800ee20:	e004      	b.n	800ee2c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ee22:	6839      	ldr	r1, [r7, #0]
 800ee24:	6878      	ldr	r0, [r7, #4]
 800ee26:	f000 f88a 	bl	800ef3e <USBD_CtlError>
      break;
 800ee2a:	bf00      	nop
  }
}
 800ee2c:	bf00      	nop
 800ee2e:	3708      	adds	r7, #8
 800ee30:	46bd      	mov	sp, r7
 800ee32:	bd80      	pop	{r7, pc}

0800ee34 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b082      	sub	sp, #8
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
 800ee3c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ee3e:	683b      	ldr	r3, [r7, #0]
 800ee40:	885b      	ldrh	r3, [r3, #2]
 800ee42:	2b01      	cmp	r3, #1
 800ee44:	d107      	bne.n	800ee56 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	2201      	movs	r2, #1
 800ee4a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ee4e:	6878      	ldr	r0, [r7, #4]
 800ee50:	f000 f94c 	bl	800f0ec <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ee54:	e013      	b.n	800ee7e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ee56:	683b      	ldr	r3, [r7, #0]
 800ee58:	885b      	ldrh	r3, [r3, #2]
 800ee5a:	2b02      	cmp	r3, #2
 800ee5c:	d10b      	bne.n	800ee76 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ee5e:	683b      	ldr	r3, [r7, #0]
 800ee60:	889b      	ldrh	r3, [r3, #4]
 800ee62:	0a1b      	lsrs	r3, r3, #8
 800ee64:	b29b      	uxth	r3, r3
 800ee66:	b2da      	uxtb	r2, r3
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ee6e:	6878      	ldr	r0, [r7, #4]
 800ee70:	f000 f93c 	bl	800f0ec <USBD_CtlSendStatus>
}
 800ee74:	e003      	b.n	800ee7e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ee76:	6839      	ldr	r1, [r7, #0]
 800ee78:	6878      	ldr	r0, [r7, #4]
 800ee7a:	f000 f860 	bl	800ef3e <USBD_CtlError>
}
 800ee7e:	bf00      	nop
 800ee80:	3708      	adds	r7, #8
 800ee82:	46bd      	mov	sp, r7
 800ee84:	bd80      	pop	{r7, pc}

0800ee86 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee86:	b580      	push	{r7, lr}
 800ee88:	b082      	sub	sp, #8
 800ee8a:	af00      	add	r7, sp, #0
 800ee8c:	6078      	str	r0, [r7, #4]
 800ee8e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ee96:	b2db      	uxtb	r3, r3
 800ee98:	3b01      	subs	r3, #1
 800ee9a:	2b02      	cmp	r3, #2
 800ee9c:	d80b      	bhi.n	800eeb6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	885b      	ldrh	r3, [r3, #2]
 800eea2:	2b01      	cmp	r3, #1
 800eea4:	d10c      	bne.n	800eec0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	2200      	movs	r2, #0
 800eeaa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800eeae:	6878      	ldr	r0, [r7, #4]
 800eeb0:	f000 f91c 	bl	800f0ec <USBD_CtlSendStatus>
      }
      break;
 800eeb4:	e004      	b.n	800eec0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800eeb6:	6839      	ldr	r1, [r7, #0]
 800eeb8:	6878      	ldr	r0, [r7, #4]
 800eeba:	f000 f840 	bl	800ef3e <USBD_CtlError>
      break;
 800eebe:	e000      	b.n	800eec2 <USBD_ClrFeature+0x3c>
      break;
 800eec0:	bf00      	nop
  }
}
 800eec2:	bf00      	nop
 800eec4:	3708      	adds	r7, #8
 800eec6:	46bd      	mov	sp, r7
 800eec8:	bd80      	pop	{r7, pc}

0800eeca <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800eeca:	b580      	push	{r7, lr}
 800eecc:	b084      	sub	sp, #16
 800eece:	af00      	add	r7, sp, #0
 800eed0:	6078      	str	r0, [r7, #4]
 800eed2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	781a      	ldrb	r2, [r3, #0]
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	3301      	adds	r3, #1
 800eee4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	781a      	ldrb	r2, [r3, #0]
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	3301      	adds	r3, #1
 800eef2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800eef4:	68f8      	ldr	r0, [r7, #12]
 800eef6:	f7ff fa16 	bl	800e326 <SWAPBYTE>
 800eefa:	4603      	mov	r3, r0
 800eefc:	461a      	mov	r2, r3
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	3301      	adds	r3, #1
 800ef06:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	3301      	adds	r3, #1
 800ef0c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ef0e:	68f8      	ldr	r0, [r7, #12]
 800ef10:	f7ff fa09 	bl	800e326 <SWAPBYTE>
 800ef14:	4603      	mov	r3, r0
 800ef16:	461a      	mov	r2, r3
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	3301      	adds	r3, #1
 800ef20:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	3301      	adds	r3, #1
 800ef26:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ef28:	68f8      	ldr	r0, [r7, #12]
 800ef2a:	f7ff f9fc 	bl	800e326 <SWAPBYTE>
 800ef2e:	4603      	mov	r3, r0
 800ef30:	461a      	mov	r2, r3
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	80da      	strh	r2, [r3, #6]
}
 800ef36:	bf00      	nop
 800ef38:	3710      	adds	r7, #16
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}

0800ef3e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef3e:	b580      	push	{r7, lr}
 800ef40:	b082      	sub	sp, #8
 800ef42:	af00      	add	r7, sp, #0
 800ef44:	6078      	str	r0, [r7, #4]
 800ef46:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ef48:	2180      	movs	r1, #128	@ 0x80
 800ef4a:	6878      	ldr	r0, [r7, #4]
 800ef4c:	f000 fd22 	bl	800f994 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ef50:	2100      	movs	r1, #0
 800ef52:	6878      	ldr	r0, [r7, #4]
 800ef54:	f000 fd1e 	bl	800f994 <USBD_LL_StallEP>
}
 800ef58:	bf00      	nop
 800ef5a:	3708      	adds	r7, #8
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	bd80      	pop	{r7, pc}

0800ef60 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b086      	sub	sp, #24
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	60f8      	str	r0, [r7, #12]
 800ef68:	60b9      	str	r1, [r7, #8]
 800ef6a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d042      	beq.n	800effc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800ef7a:	6938      	ldr	r0, [r7, #16]
 800ef7c:	f000 f842 	bl	800f004 <USBD_GetLen>
 800ef80:	4603      	mov	r3, r0
 800ef82:	3301      	adds	r3, #1
 800ef84:	005b      	lsls	r3, r3, #1
 800ef86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ef8a:	d808      	bhi.n	800ef9e <USBD_GetString+0x3e>
 800ef8c:	6938      	ldr	r0, [r7, #16]
 800ef8e:	f000 f839 	bl	800f004 <USBD_GetLen>
 800ef92:	4603      	mov	r3, r0
 800ef94:	3301      	adds	r3, #1
 800ef96:	b29b      	uxth	r3, r3
 800ef98:	005b      	lsls	r3, r3, #1
 800ef9a:	b29a      	uxth	r2, r3
 800ef9c:	e001      	b.n	800efa2 <USBD_GetString+0x42>
 800ef9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800efa6:	7dfb      	ldrb	r3, [r7, #23]
 800efa8:	68ba      	ldr	r2, [r7, #8]
 800efaa:	4413      	add	r3, r2
 800efac:	687a      	ldr	r2, [r7, #4]
 800efae:	7812      	ldrb	r2, [r2, #0]
 800efb0:	701a      	strb	r2, [r3, #0]
  idx++;
 800efb2:	7dfb      	ldrb	r3, [r7, #23]
 800efb4:	3301      	adds	r3, #1
 800efb6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800efb8:	7dfb      	ldrb	r3, [r7, #23]
 800efba:	68ba      	ldr	r2, [r7, #8]
 800efbc:	4413      	add	r3, r2
 800efbe:	2203      	movs	r2, #3
 800efc0:	701a      	strb	r2, [r3, #0]
  idx++;
 800efc2:	7dfb      	ldrb	r3, [r7, #23]
 800efc4:	3301      	adds	r3, #1
 800efc6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800efc8:	e013      	b.n	800eff2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800efca:	7dfb      	ldrb	r3, [r7, #23]
 800efcc:	68ba      	ldr	r2, [r7, #8]
 800efce:	4413      	add	r3, r2
 800efd0:	693a      	ldr	r2, [r7, #16]
 800efd2:	7812      	ldrb	r2, [r2, #0]
 800efd4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800efd6:	693b      	ldr	r3, [r7, #16]
 800efd8:	3301      	adds	r3, #1
 800efda:	613b      	str	r3, [r7, #16]
    idx++;
 800efdc:	7dfb      	ldrb	r3, [r7, #23]
 800efde:	3301      	adds	r3, #1
 800efe0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800efe2:	7dfb      	ldrb	r3, [r7, #23]
 800efe4:	68ba      	ldr	r2, [r7, #8]
 800efe6:	4413      	add	r3, r2
 800efe8:	2200      	movs	r2, #0
 800efea:	701a      	strb	r2, [r3, #0]
    idx++;
 800efec:	7dfb      	ldrb	r3, [r7, #23]
 800efee:	3301      	adds	r3, #1
 800eff0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800eff2:	693b      	ldr	r3, [r7, #16]
 800eff4:	781b      	ldrb	r3, [r3, #0]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d1e7      	bne.n	800efca <USBD_GetString+0x6a>
 800effa:	e000      	b.n	800effe <USBD_GetString+0x9e>
    return;
 800effc:	bf00      	nop
  }
}
 800effe:	3718      	adds	r7, #24
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}

0800f004 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f004:	b480      	push	{r7}
 800f006:	b085      	sub	sp, #20
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f00c:	2300      	movs	r3, #0
 800f00e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f014:	e005      	b.n	800f022 <USBD_GetLen+0x1e>
  {
    len++;
 800f016:	7bfb      	ldrb	r3, [r7, #15]
 800f018:	3301      	adds	r3, #1
 800f01a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f01c:	68bb      	ldr	r3, [r7, #8]
 800f01e:	3301      	adds	r3, #1
 800f020:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f022:	68bb      	ldr	r3, [r7, #8]
 800f024:	781b      	ldrb	r3, [r3, #0]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d1f5      	bne.n	800f016 <USBD_GetLen+0x12>
  }

  return len;
 800f02a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f02c:	4618      	mov	r0, r3
 800f02e:	3714      	adds	r7, #20
 800f030:	46bd      	mov	sp, r7
 800f032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f036:	4770      	bx	lr

0800f038 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b084      	sub	sp, #16
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	60f8      	str	r0, [r7, #12]
 800f040:	60b9      	str	r1, [r7, #8]
 800f042:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	2202      	movs	r2, #2
 800f048:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	687a      	ldr	r2, [r7, #4]
 800f050:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	687a      	ldr	r2, [r7, #4]
 800f056:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	68ba      	ldr	r2, [r7, #8]
 800f05c:	2100      	movs	r1, #0
 800f05e:	68f8      	ldr	r0, [r7, #12]
 800f060:	f000 fd21 	bl	800faa6 <USBD_LL_Transmit>

  return USBD_OK;
 800f064:	2300      	movs	r3, #0
}
 800f066:	4618      	mov	r0, r3
 800f068:	3710      	adds	r7, #16
 800f06a:	46bd      	mov	sp, r7
 800f06c:	bd80      	pop	{r7, pc}

0800f06e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f06e:	b580      	push	{r7, lr}
 800f070:	b084      	sub	sp, #16
 800f072:	af00      	add	r7, sp, #0
 800f074:	60f8      	str	r0, [r7, #12]
 800f076:	60b9      	str	r1, [r7, #8]
 800f078:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	68ba      	ldr	r2, [r7, #8]
 800f07e:	2100      	movs	r1, #0
 800f080:	68f8      	ldr	r0, [r7, #12]
 800f082:	f000 fd10 	bl	800faa6 <USBD_LL_Transmit>

  return USBD_OK;
 800f086:	2300      	movs	r3, #0
}
 800f088:	4618      	mov	r0, r3
 800f08a:	3710      	adds	r7, #16
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}

0800f090 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b084      	sub	sp, #16
 800f094:	af00      	add	r7, sp, #0
 800f096:	60f8      	str	r0, [r7, #12]
 800f098:	60b9      	str	r1, [r7, #8]
 800f09a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	2203      	movs	r2, #3
 800f0a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	687a      	ldr	r2, [r7, #4]
 800f0a8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	687a      	ldr	r2, [r7, #4]
 800f0b0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	68ba      	ldr	r2, [r7, #8]
 800f0b8:	2100      	movs	r1, #0
 800f0ba:	68f8      	ldr	r0, [r7, #12]
 800f0bc:	f000 fd14 	bl	800fae8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f0c0:	2300      	movs	r3, #0
}
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	3710      	adds	r7, #16
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	bd80      	pop	{r7, pc}

0800f0ca <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f0ca:	b580      	push	{r7, lr}
 800f0cc:	b084      	sub	sp, #16
 800f0ce:	af00      	add	r7, sp, #0
 800f0d0:	60f8      	str	r0, [r7, #12]
 800f0d2:	60b9      	str	r1, [r7, #8]
 800f0d4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	68ba      	ldr	r2, [r7, #8]
 800f0da:	2100      	movs	r1, #0
 800f0dc:	68f8      	ldr	r0, [r7, #12]
 800f0de:	f000 fd03 	bl	800fae8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f0e2:	2300      	movs	r3, #0
}
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	3710      	adds	r7, #16
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	bd80      	pop	{r7, pc}

0800f0ec <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b082      	sub	sp, #8
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	2204      	movs	r2, #4
 800f0f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	2200      	movs	r2, #0
 800f100:	2100      	movs	r1, #0
 800f102:	6878      	ldr	r0, [r7, #4]
 800f104:	f000 fccf 	bl	800faa6 <USBD_LL_Transmit>

  return USBD_OK;
 800f108:	2300      	movs	r3, #0
}
 800f10a:	4618      	mov	r0, r3
 800f10c:	3708      	adds	r7, #8
 800f10e:	46bd      	mov	sp, r7
 800f110:	bd80      	pop	{r7, pc}

0800f112 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f112:	b580      	push	{r7, lr}
 800f114:	b082      	sub	sp, #8
 800f116:	af00      	add	r7, sp, #0
 800f118:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2205      	movs	r2, #5
 800f11e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f122:	2300      	movs	r3, #0
 800f124:	2200      	movs	r2, #0
 800f126:	2100      	movs	r1, #0
 800f128:	6878      	ldr	r0, [r7, #4]
 800f12a:	f000 fcdd 	bl	800fae8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f12e:	2300      	movs	r3, #0
}
 800f130:	4618      	mov	r0, r3
 800f132:	3708      	adds	r7, #8
 800f134:	46bd      	mov	sp, r7
 800f136:	bd80      	pop	{r7, pc}

0800f138 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f13c:	2200      	movs	r2, #0
 800f13e:	4913      	ldr	r1, [pc, #76]	@ (800f18c <MX_USB_DEVICE_Init+0x54>)
 800f140:	4813      	ldr	r0, [pc, #76]	@ (800f190 <MX_USB_DEVICE_Init+0x58>)
 800f142:	f7fe fccd 	bl	800dae0 <USBD_Init>
 800f146:	4603      	mov	r3, r0
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d001      	beq.n	800f150 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f14c:	f7f1 ff86 	bl	800105c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f150:	4910      	ldr	r1, [pc, #64]	@ (800f194 <MX_USB_DEVICE_Init+0x5c>)
 800f152:	480f      	ldr	r0, [pc, #60]	@ (800f190 <MX_USB_DEVICE_Init+0x58>)
 800f154:	f7fe fcf4 	bl	800db40 <USBD_RegisterClass>
 800f158:	4603      	mov	r3, r0
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d001      	beq.n	800f162 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f15e:	f7f1 ff7d 	bl	800105c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f162:	490d      	ldr	r1, [pc, #52]	@ (800f198 <MX_USB_DEVICE_Init+0x60>)
 800f164:	480a      	ldr	r0, [pc, #40]	@ (800f190 <MX_USB_DEVICE_Init+0x58>)
 800f166:	f7fe fbeb 	bl	800d940 <USBD_CDC_RegisterInterface>
 800f16a:	4603      	mov	r3, r0
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d001      	beq.n	800f174 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f170:	f7f1 ff74 	bl	800105c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f174:	4806      	ldr	r0, [pc, #24]	@ (800f190 <MX_USB_DEVICE_Init+0x58>)
 800f176:	f7fe fd19 	bl	800dbac <USBD_Start>
 800f17a:	4603      	mov	r3, r0
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d001      	beq.n	800f184 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f180:	f7f1 ff6c 	bl	800105c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800f184:	f7f7 fa44 	bl	8006610 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f188:	bf00      	nop
 800f18a:	bd80      	pop	{r7, pc}
 800f18c:	240000d8 	.word	0x240000d8
 800f190:	240009a8 	.word	0x240009a8
 800f194:	24000044 	.word	0x24000044
 800f198:	240000c4 	.word	0x240000c4

0800f19c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	4905      	ldr	r1, [pc, #20]	@ (800f1b8 <CDC_Init_FS+0x1c>)
 800f1a4:	4805      	ldr	r0, [pc, #20]	@ (800f1bc <CDC_Init_FS+0x20>)
 800f1a6:	f7fe fbe5 	bl	800d974 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f1aa:	4905      	ldr	r1, [pc, #20]	@ (800f1c0 <CDC_Init_FS+0x24>)
 800f1ac:	4803      	ldr	r0, [pc, #12]	@ (800f1bc <CDC_Init_FS+0x20>)
 800f1ae:	f7fe fc03 	bl	800d9b8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f1b2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	bd80      	pop	{r7, pc}
 800f1b8:	24001484 	.word	0x24001484
 800f1bc:	240009a8 	.word	0x240009a8
 800f1c0:	24000c84 	.word	0x24000c84

0800f1c4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f1c4:	b480      	push	{r7}
 800f1c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f1c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d2:	4770      	bx	lr

0800f1d4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f1d4:	b480      	push	{r7}
 800f1d6:	b083      	sub	sp, #12
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	4603      	mov	r3, r0
 800f1dc:	6039      	str	r1, [r7, #0]
 800f1de:	71fb      	strb	r3, [r7, #7]
 800f1e0:	4613      	mov	r3, r2
 800f1e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f1e4:	79fb      	ldrb	r3, [r7, #7]
 800f1e6:	2b23      	cmp	r3, #35	@ 0x23
 800f1e8:	d84a      	bhi.n	800f280 <CDC_Control_FS+0xac>
 800f1ea:	a201      	add	r2, pc, #4	@ (adr r2, 800f1f0 <CDC_Control_FS+0x1c>)
 800f1ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1f0:	0800f281 	.word	0x0800f281
 800f1f4:	0800f281 	.word	0x0800f281
 800f1f8:	0800f281 	.word	0x0800f281
 800f1fc:	0800f281 	.word	0x0800f281
 800f200:	0800f281 	.word	0x0800f281
 800f204:	0800f281 	.word	0x0800f281
 800f208:	0800f281 	.word	0x0800f281
 800f20c:	0800f281 	.word	0x0800f281
 800f210:	0800f281 	.word	0x0800f281
 800f214:	0800f281 	.word	0x0800f281
 800f218:	0800f281 	.word	0x0800f281
 800f21c:	0800f281 	.word	0x0800f281
 800f220:	0800f281 	.word	0x0800f281
 800f224:	0800f281 	.word	0x0800f281
 800f228:	0800f281 	.word	0x0800f281
 800f22c:	0800f281 	.word	0x0800f281
 800f230:	0800f281 	.word	0x0800f281
 800f234:	0800f281 	.word	0x0800f281
 800f238:	0800f281 	.word	0x0800f281
 800f23c:	0800f281 	.word	0x0800f281
 800f240:	0800f281 	.word	0x0800f281
 800f244:	0800f281 	.word	0x0800f281
 800f248:	0800f281 	.word	0x0800f281
 800f24c:	0800f281 	.word	0x0800f281
 800f250:	0800f281 	.word	0x0800f281
 800f254:	0800f281 	.word	0x0800f281
 800f258:	0800f281 	.word	0x0800f281
 800f25c:	0800f281 	.word	0x0800f281
 800f260:	0800f281 	.word	0x0800f281
 800f264:	0800f281 	.word	0x0800f281
 800f268:	0800f281 	.word	0x0800f281
 800f26c:	0800f281 	.word	0x0800f281
 800f270:	0800f281 	.word	0x0800f281
 800f274:	0800f281 	.word	0x0800f281
 800f278:	0800f281 	.word	0x0800f281
 800f27c:	0800f281 	.word	0x0800f281
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f280:	bf00      	nop
  }

  return (USBD_OK);
 800f282:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f284:	4618      	mov	r0, r3
 800f286:	370c      	adds	r7, #12
 800f288:	46bd      	mov	sp, r7
 800f28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28e:	4770      	bx	lr

0800f290 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b082      	sub	sp, #8
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
 800f298:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f29a:	6879      	ldr	r1, [r7, #4]
 800f29c:	4805      	ldr	r0, [pc, #20]	@ (800f2b4 <CDC_Receive_FS+0x24>)
 800f29e:	f7fe fb8b 	bl	800d9b8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f2a2:	4804      	ldr	r0, [pc, #16]	@ (800f2b4 <CDC_Receive_FS+0x24>)
 800f2a4:	f7fe fbe6 	bl	800da74 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f2a8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	3708      	adds	r7, #8
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	bd80      	pop	{r7, pc}
 800f2b2:	bf00      	nop
 800f2b4:	240009a8 	.word	0x240009a8

0800f2b8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b084      	sub	sp, #16
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
 800f2c0:	460b      	mov	r3, r1
 800f2c2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f2c8:	4b0d      	ldr	r3, [pc, #52]	@ (800f300 <CDC_Transmit_FS+0x48>)
 800f2ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f2ce:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f2d0:	68bb      	ldr	r3, [r7, #8]
 800f2d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d001      	beq.n	800f2de <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f2da:	2301      	movs	r3, #1
 800f2dc:	e00b      	b.n	800f2f6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f2de:	887b      	ldrh	r3, [r7, #2]
 800f2e0:	461a      	mov	r2, r3
 800f2e2:	6879      	ldr	r1, [r7, #4]
 800f2e4:	4806      	ldr	r0, [pc, #24]	@ (800f300 <CDC_Transmit_FS+0x48>)
 800f2e6:	f7fe fb45 	bl	800d974 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f2ea:	4805      	ldr	r0, [pc, #20]	@ (800f300 <CDC_Transmit_FS+0x48>)
 800f2ec:	f7fe fb82 	bl	800d9f4 <USBD_CDC_TransmitPacket>
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f2f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	3710      	adds	r7, #16
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	bd80      	pop	{r7, pc}
 800f2fe:	bf00      	nop
 800f300:	240009a8 	.word	0x240009a8

0800f304 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f304:	b480      	push	{r7}
 800f306:	b087      	sub	sp, #28
 800f308:	af00      	add	r7, sp, #0
 800f30a:	60f8      	str	r0, [r7, #12]
 800f30c:	60b9      	str	r1, [r7, #8]
 800f30e:	4613      	mov	r3, r2
 800f310:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f312:	2300      	movs	r3, #0
 800f314:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f316:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	371c      	adds	r7, #28
 800f31e:	46bd      	mov	sp, r7
 800f320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f324:	4770      	bx	lr
	...

0800f328 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f328:	b480      	push	{r7}
 800f32a:	b083      	sub	sp, #12
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	4603      	mov	r3, r0
 800f330:	6039      	str	r1, [r7, #0]
 800f332:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	2212      	movs	r2, #18
 800f338:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f33a:	4b03      	ldr	r3, [pc, #12]	@ (800f348 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f33c:	4618      	mov	r0, r3
 800f33e:	370c      	adds	r7, #12
 800f340:	46bd      	mov	sp, r7
 800f342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f346:	4770      	bx	lr
 800f348:	240000f8 	.word	0x240000f8

0800f34c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f34c:	b480      	push	{r7}
 800f34e:	b083      	sub	sp, #12
 800f350:	af00      	add	r7, sp, #0
 800f352:	4603      	mov	r3, r0
 800f354:	6039      	str	r1, [r7, #0]
 800f356:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f358:	683b      	ldr	r3, [r7, #0]
 800f35a:	2204      	movs	r2, #4
 800f35c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f35e:	4b03      	ldr	r3, [pc, #12]	@ (800f36c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f360:	4618      	mov	r0, r3
 800f362:	370c      	adds	r7, #12
 800f364:	46bd      	mov	sp, r7
 800f366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36a:	4770      	bx	lr
 800f36c:	2400010c 	.word	0x2400010c

0800f370 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b082      	sub	sp, #8
 800f374:	af00      	add	r7, sp, #0
 800f376:	4603      	mov	r3, r0
 800f378:	6039      	str	r1, [r7, #0]
 800f37a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f37c:	79fb      	ldrb	r3, [r7, #7]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d105      	bne.n	800f38e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f382:	683a      	ldr	r2, [r7, #0]
 800f384:	4907      	ldr	r1, [pc, #28]	@ (800f3a4 <USBD_FS_ProductStrDescriptor+0x34>)
 800f386:	4808      	ldr	r0, [pc, #32]	@ (800f3a8 <USBD_FS_ProductStrDescriptor+0x38>)
 800f388:	f7ff fdea 	bl	800ef60 <USBD_GetString>
 800f38c:	e004      	b.n	800f398 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f38e:	683a      	ldr	r2, [r7, #0]
 800f390:	4904      	ldr	r1, [pc, #16]	@ (800f3a4 <USBD_FS_ProductStrDescriptor+0x34>)
 800f392:	4805      	ldr	r0, [pc, #20]	@ (800f3a8 <USBD_FS_ProductStrDescriptor+0x38>)
 800f394:	f7ff fde4 	bl	800ef60 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f398:	4b02      	ldr	r3, [pc, #8]	@ (800f3a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f39a:	4618      	mov	r0, r3
 800f39c:	3708      	adds	r7, #8
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	bd80      	pop	{r7, pc}
 800f3a2:	bf00      	nop
 800f3a4:	24001c84 	.word	0x24001c84
 800f3a8:	08012804 	.word	0x08012804

0800f3ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b082      	sub	sp, #8
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	6039      	str	r1, [r7, #0]
 800f3b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f3b8:	683a      	ldr	r2, [r7, #0]
 800f3ba:	4904      	ldr	r1, [pc, #16]	@ (800f3cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f3bc:	4804      	ldr	r0, [pc, #16]	@ (800f3d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f3be:	f7ff fdcf 	bl	800ef60 <USBD_GetString>
  return USBD_StrDesc;
 800f3c2:	4b02      	ldr	r3, [pc, #8]	@ (800f3cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	3708      	adds	r7, #8
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	bd80      	pop	{r7, pc}
 800f3cc:	24001c84 	.word	0x24001c84
 800f3d0:	0801281c 	.word	0x0801281c

0800f3d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b082      	sub	sp, #8
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	4603      	mov	r3, r0
 800f3dc:	6039      	str	r1, [r7, #0]
 800f3de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f3e0:	683b      	ldr	r3, [r7, #0]
 800f3e2:	221a      	movs	r2, #26
 800f3e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f3e6:	f000 f843 	bl	800f470 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f3ea:	4b02      	ldr	r3, [pc, #8]	@ (800f3f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	3708      	adds	r7, #8
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	bd80      	pop	{r7, pc}
 800f3f4:	24000110 	.word	0x24000110

0800f3f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b082      	sub	sp, #8
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	4603      	mov	r3, r0
 800f400:	6039      	str	r1, [r7, #0]
 800f402:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f404:	79fb      	ldrb	r3, [r7, #7]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d105      	bne.n	800f416 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f40a:	683a      	ldr	r2, [r7, #0]
 800f40c:	4907      	ldr	r1, [pc, #28]	@ (800f42c <USBD_FS_ConfigStrDescriptor+0x34>)
 800f40e:	4808      	ldr	r0, [pc, #32]	@ (800f430 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f410:	f7ff fda6 	bl	800ef60 <USBD_GetString>
 800f414:	e004      	b.n	800f420 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f416:	683a      	ldr	r2, [r7, #0]
 800f418:	4904      	ldr	r1, [pc, #16]	@ (800f42c <USBD_FS_ConfigStrDescriptor+0x34>)
 800f41a:	4805      	ldr	r0, [pc, #20]	@ (800f430 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f41c:	f7ff fda0 	bl	800ef60 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f420:	4b02      	ldr	r3, [pc, #8]	@ (800f42c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f422:	4618      	mov	r0, r3
 800f424:	3708      	adds	r7, #8
 800f426:	46bd      	mov	sp, r7
 800f428:	bd80      	pop	{r7, pc}
 800f42a:	bf00      	nop
 800f42c:	24001c84 	.word	0x24001c84
 800f430:	08012830 	.word	0x08012830

0800f434 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f434:	b580      	push	{r7, lr}
 800f436:	b082      	sub	sp, #8
 800f438:	af00      	add	r7, sp, #0
 800f43a:	4603      	mov	r3, r0
 800f43c:	6039      	str	r1, [r7, #0]
 800f43e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f440:	79fb      	ldrb	r3, [r7, #7]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d105      	bne.n	800f452 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f446:	683a      	ldr	r2, [r7, #0]
 800f448:	4907      	ldr	r1, [pc, #28]	@ (800f468 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f44a:	4808      	ldr	r0, [pc, #32]	@ (800f46c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f44c:	f7ff fd88 	bl	800ef60 <USBD_GetString>
 800f450:	e004      	b.n	800f45c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f452:	683a      	ldr	r2, [r7, #0]
 800f454:	4904      	ldr	r1, [pc, #16]	@ (800f468 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f456:	4805      	ldr	r0, [pc, #20]	@ (800f46c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f458:	f7ff fd82 	bl	800ef60 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f45c:	4b02      	ldr	r3, [pc, #8]	@ (800f468 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f45e:	4618      	mov	r0, r3
 800f460:	3708      	adds	r7, #8
 800f462:	46bd      	mov	sp, r7
 800f464:	bd80      	pop	{r7, pc}
 800f466:	bf00      	nop
 800f468:	24001c84 	.word	0x24001c84
 800f46c:	0801283c 	.word	0x0801283c

0800f470 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b084      	sub	sp, #16
 800f474:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f476:	4b0f      	ldr	r3, [pc, #60]	@ (800f4b4 <Get_SerialNum+0x44>)
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f47c:	4b0e      	ldr	r3, [pc, #56]	@ (800f4b8 <Get_SerialNum+0x48>)
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f482:	4b0e      	ldr	r3, [pc, #56]	@ (800f4bc <Get_SerialNum+0x4c>)
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f488:	68fa      	ldr	r2, [r7, #12]
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	4413      	add	r3, r2
 800f48e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d009      	beq.n	800f4aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f496:	2208      	movs	r2, #8
 800f498:	4909      	ldr	r1, [pc, #36]	@ (800f4c0 <Get_SerialNum+0x50>)
 800f49a:	68f8      	ldr	r0, [r7, #12]
 800f49c:	f000 f814 	bl	800f4c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f4a0:	2204      	movs	r2, #4
 800f4a2:	4908      	ldr	r1, [pc, #32]	@ (800f4c4 <Get_SerialNum+0x54>)
 800f4a4:	68b8      	ldr	r0, [r7, #8]
 800f4a6:	f000 f80f 	bl	800f4c8 <IntToUnicode>
  }
}
 800f4aa:	bf00      	nop
 800f4ac:	3710      	adds	r7, #16
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	bd80      	pop	{r7, pc}
 800f4b2:	bf00      	nop
 800f4b4:	1ff1e800 	.word	0x1ff1e800
 800f4b8:	1ff1e804 	.word	0x1ff1e804
 800f4bc:	1ff1e808 	.word	0x1ff1e808
 800f4c0:	24000112 	.word	0x24000112
 800f4c4:	24000122 	.word	0x24000122

0800f4c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f4c8:	b480      	push	{r7}
 800f4ca:	b087      	sub	sp, #28
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	60f8      	str	r0, [r7, #12]
 800f4d0:	60b9      	str	r1, [r7, #8]
 800f4d2:	4613      	mov	r3, r2
 800f4d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f4da:	2300      	movs	r3, #0
 800f4dc:	75fb      	strb	r3, [r7, #23]
 800f4de:	e027      	b.n	800f530 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	0f1b      	lsrs	r3, r3, #28
 800f4e4:	2b09      	cmp	r3, #9
 800f4e6:	d80b      	bhi.n	800f500 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	0f1b      	lsrs	r3, r3, #28
 800f4ec:	b2da      	uxtb	r2, r3
 800f4ee:	7dfb      	ldrb	r3, [r7, #23]
 800f4f0:	005b      	lsls	r3, r3, #1
 800f4f2:	4619      	mov	r1, r3
 800f4f4:	68bb      	ldr	r3, [r7, #8]
 800f4f6:	440b      	add	r3, r1
 800f4f8:	3230      	adds	r2, #48	@ 0x30
 800f4fa:	b2d2      	uxtb	r2, r2
 800f4fc:	701a      	strb	r2, [r3, #0]
 800f4fe:	e00a      	b.n	800f516 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	0f1b      	lsrs	r3, r3, #28
 800f504:	b2da      	uxtb	r2, r3
 800f506:	7dfb      	ldrb	r3, [r7, #23]
 800f508:	005b      	lsls	r3, r3, #1
 800f50a:	4619      	mov	r1, r3
 800f50c:	68bb      	ldr	r3, [r7, #8]
 800f50e:	440b      	add	r3, r1
 800f510:	3237      	adds	r2, #55	@ 0x37
 800f512:	b2d2      	uxtb	r2, r2
 800f514:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	011b      	lsls	r3, r3, #4
 800f51a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f51c:	7dfb      	ldrb	r3, [r7, #23]
 800f51e:	005b      	lsls	r3, r3, #1
 800f520:	3301      	adds	r3, #1
 800f522:	68ba      	ldr	r2, [r7, #8]
 800f524:	4413      	add	r3, r2
 800f526:	2200      	movs	r2, #0
 800f528:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f52a:	7dfb      	ldrb	r3, [r7, #23]
 800f52c:	3301      	adds	r3, #1
 800f52e:	75fb      	strb	r3, [r7, #23]
 800f530:	7dfa      	ldrb	r2, [r7, #23]
 800f532:	79fb      	ldrb	r3, [r7, #7]
 800f534:	429a      	cmp	r2, r3
 800f536:	d3d3      	bcc.n	800f4e0 <IntToUnicode+0x18>
  }
}
 800f538:	bf00      	nop
 800f53a:	bf00      	nop
 800f53c:	371c      	adds	r7, #28
 800f53e:	46bd      	mov	sp, r7
 800f540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f544:	4770      	bx	lr
	...

0800f548 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f548:	b580      	push	{r7, lr}
 800f54a:	b0ba      	sub	sp, #232	@ 0xe8
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f550:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800f554:	2200      	movs	r2, #0
 800f556:	601a      	str	r2, [r3, #0]
 800f558:	605a      	str	r2, [r3, #4]
 800f55a:	609a      	str	r2, [r3, #8]
 800f55c:	60da      	str	r2, [r3, #12]
 800f55e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f560:	f107 0310 	add.w	r3, r7, #16
 800f564:	22c0      	movs	r2, #192	@ 0xc0
 800f566:	2100      	movs	r1, #0
 800f568:	4618      	mov	r0, r3
 800f56a:	f001 f892 	bl	8010692 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	4a34      	ldr	r2, [pc, #208]	@ (800f644 <HAL_PCD_MspInit+0xfc>)
 800f574:	4293      	cmp	r3, r2
 800f576:	d161      	bne.n	800f63c <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f578:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800f57c:	f04f 0300 	mov.w	r3, #0
 800f580:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800f584:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800f588:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f58c:	f107 0310 	add.w	r3, r7, #16
 800f590:	4618      	mov	r0, r3
 800f592:	f7f8 f833 	bl	80075fc <HAL_RCCEx_PeriphCLKConfig>
 800f596:	4603      	mov	r3, r0
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d001      	beq.n	800f5a0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800f59c:	f7f1 fd5e 	bl	800105c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800f5a0:	f7f7 f836 	bl	8006610 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f5a4:	4b28      	ldr	r3, [pc, #160]	@ (800f648 <HAL_PCD_MspInit+0x100>)
 800f5a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f5aa:	4a27      	ldr	r2, [pc, #156]	@ (800f648 <HAL_PCD_MspInit+0x100>)
 800f5ac:	f043 0301 	orr.w	r3, r3, #1
 800f5b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800f5b4:	4b24      	ldr	r3, [pc, #144]	@ (800f648 <HAL_PCD_MspInit+0x100>)
 800f5b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f5ba:	f003 0301 	and.w	r3, r3, #1
 800f5be:	60fb      	str	r3, [r7, #12]
 800f5c0:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800f5c2:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800f5c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f5ca:	2302      	movs	r3, #2
 800f5cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800f5dc:	230a      	movs	r3, #10
 800f5de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f5e2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800f5e6:	4619      	mov	r1, r3
 800f5e8:	4818      	ldr	r0, [pc, #96]	@ (800f64c <HAL_PCD_MspInit+0x104>)
 800f5ea:	f7f5 fb07 	bl	8004bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800f5ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f5f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f602:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800f606:	4619      	mov	r1, r3
 800f608:	4810      	ldr	r0, [pc, #64]	@ (800f64c <HAL_PCD_MspInit+0x104>)
 800f60a:	f7f5 faf7 	bl	8004bfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f60e:	4b0e      	ldr	r3, [pc, #56]	@ (800f648 <HAL_PCD_MspInit+0x100>)
 800f610:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800f614:	4a0c      	ldr	r2, [pc, #48]	@ (800f648 <HAL_PCD_MspInit+0x100>)
 800f616:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f61a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800f61e:	4b0a      	ldr	r3, [pc, #40]	@ (800f648 <HAL_PCD_MspInit+0x100>)
 800f620:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800f624:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f628:	60bb      	str	r3, [r7, #8]
 800f62a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f62c:	2200      	movs	r2, #0
 800f62e:	2100      	movs	r1, #0
 800f630:	2065      	movs	r0, #101	@ 0x65
 800f632:	f7f3 f952 	bl	80028da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f636:	2065      	movs	r0, #101	@ 0x65
 800f638:	f7f3 f969 	bl	800290e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f63c:	bf00      	nop
 800f63e:	37e8      	adds	r7, #232	@ 0xe8
 800f640:	46bd      	mov	sp, r7
 800f642:	bd80      	pop	{r7, pc}
 800f644:	40080000 	.word	0x40080000
 800f648:	58024400 	.word	0x58024400
 800f64c:	58020000 	.word	0x58020000

0800f650 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b082      	sub	sp, #8
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800f664:	4619      	mov	r1, r3
 800f666:	4610      	mov	r0, r2
 800f668:	f7fe faed 	bl	800dc46 <USBD_LL_SetupStage>
}
 800f66c:	bf00      	nop
 800f66e:	3708      	adds	r7, #8
 800f670:	46bd      	mov	sp, r7
 800f672:	bd80      	pop	{r7, pc}

0800f674 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b082      	sub	sp, #8
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
 800f67c:	460b      	mov	r3, r1
 800f67e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800f686:	78fa      	ldrb	r2, [r7, #3]
 800f688:	6879      	ldr	r1, [r7, #4]
 800f68a:	4613      	mov	r3, r2
 800f68c:	00db      	lsls	r3, r3, #3
 800f68e:	4413      	add	r3, r2
 800f690:	009b      	lsls	r3, r3, #2
 800f692:	440b      	add	r3, r1
 800f694:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f698:	681a      	ldr	r2, [r3, #0]
 800f69a:	78fb      	ldrb	r3, [r7, #3]
 800f69c:	4619      	mov	r1, r3
 800f69e:	f7fe fb27 	bl	800dcf0 <USBD_LL_DataOutStage>
}
 800f6a2:	bf00      	nop
 800f6a4:	3708      	adds	r7, #8
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	bd80      	pop	{r7, pc}

0800f6aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6aa:	b580      	push	{r7, lr}
 800f6ac:	b082      	sub	sp, #8
 800f6ae:	af00      	add	r7, sp, #0
 800f6b0:	6078      	str	r0, [r7, #4]
 800f6b2:	460b      	mov	r3, r1
 800f6b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800f6bc:	78fa      	ldrb	r2, [r7, #3]
 800f6be:	6879      	ldr	r1, [r7, #4]
 800f6c0:	4613      	mov	r3, r2
 800f6c2:	00db      	lsls	r3, r3, #3
 800f6c4:	4413      	add	r3, r2
 800f6c6:	009b      	lsls	r3, r3, #2
 800f6c8:	440b      	add	r3, r1
 800f6ca:	3320      	adds	r3, #32
 800f6cc:	681a      	ldr	r2, [r3, #0]
 800f6ce:	78fb      	ldrb	r3, [r7, #3]
 800f6d0:	4619      	mov	r1, r3
 800f6d2:	f7fe fbc0 	bl	800de56 <USBD_LL_DataInStage>
}
 800f6d6:	bf00      	nop
 800f6d8:	3708      	adds	r7, #8
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	bd80      	pop	{r7, pc}

0800f6de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6de:	b580      	push	{r7, lr}
 800f6e0:	b082      	sub	sp, #8
 800f6e2:	af00      	add	r7, sp, #0
 800f6e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	f7fe fcfa 	bl	800e0e6 <USBD_LL_SOF>
}
 800f6f2:	bf00      	nop
 800f6f4:	3708      	adds	r7, #8
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	bd80      	pop	{r7, pc}

0800f6fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6fa:	b580      	push	{r7, lr}
 800f6fc:	b084      	sub	sp, #16
 800f6fe:	af00      	add	r7, sp, #0
 800f700:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f702:	2301      	movs	r3, #1
 800f704:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	79db      	ldrb	r3, [r3, #7]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d102      	bne.n	800f714 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f70e:	2300      	movs	r3, #0
 800f710:	73fb      	strb	r3, [r7, #15]
 800f712:	e008      	b.n	800f726 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	79db      	ldrb	r3, [r3, #7]
 800f718:	2b02      	cmp	r3, #2
 800f71a:	d102      	bne.n	800f722 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f71c:	2301      	movs	r3, #1
 800f71e:	73fb      	strb	r3, [r7, #15]
 800f720:	e001      	b.n	800f726 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f722:	f7f1 fc9b 	bl	800105c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f72c:	7bfa      	ldrb	r2, [r7, #15]
 800f72e:	4611      	mov	r1, r2
 800f730:	4618      	mov	r0, r3
 800f732:	f7fe fc94 	bl	800e05e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f73c:	4618      	mov	r0, r3
 800f73e:	f7fe fc3c 	bl	800dfba <USBD_LL_Reset>
}
 800f742:	bf00      	nop
 800f744:	3710      	adds	r7, #16
 800f746:	46bd      	mov	sp, r7
 800f748:	bd80      	pop	{r7, pc}
	...

0800f74c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b082      	sub	sp, #8
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f75a:	4618      	mov	r0, r3
 800f75c:	f7fe fc8f 	bl	800e07e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	687a      	ldr	r2, [r7, #4]
 800f76c:	6812      	ldr	r2, [r2, #0]
 800f76e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f772:	f043 0301 	orr.w	r3, r3, #1
 800f776:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	7adb      	ldrb	r3, [r3, #11]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d005      	beq.n	800f78c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f780:	4b04      	ldr	r3, [pc, #16]	@ (800f794 <HAL_PCD_SuspendCallback+0x48>)
 800f782:	691b      	ldr	r3, [r3, #16]
 800f784:	4a03      	ldr	r2, [pc, #12]	@ (800f794 <HAL_PCD_SuspendCallback+0x48>)
 800f786:	f043 0306 	orr.w	r3, r3, #6
 800f78a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f78c:	bf00      	nop
 800f78e:	3708      	adds	r7, #8
 800f790:	46bd      	mov	sp, r7
 800f792:	bd80      	pop	{r7, pc}
 800f794:	e000ed00 	.word	0xe000ed00

0800f798 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b082      	sub	sp, #8
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	f7fe fc85 	bl	800e0b6 <USBD_LL_Resume>
}
 800f7ac:	bf00      	nop
 800f7ae:	3708      	adds	r7, #8
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	bd80      	pop	{r7, pc}

0800f7b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b082      	sub	sp, #8
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
 800f7bc:	460b      	mov	r3, r1
 800f7be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f7c6:	78fa      	ldrb	r2, [r7, #3]
 800f7c8:	4611      	mov	r1, r2
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	f7fe fcdd 	bl	800e18a <USBD_LL_IsoOUTIncomplete>
}
 800f7d0:	bf00      	nop
 800f7d2:	3708      	adds	r7, #8
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bd80      	pop	{r7, pc}

0800f7d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b082      	sub	sp, #8
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
 800f7e0:	460b      	mov	r3, r1
 800f7e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f7ea:	78fa      	ldrb	r2, [r7, #3]
 800f7ec:	4611      	mov	r1, r2
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	f7fe fc99 	bl	800e126 <USBD_LL_IsoINIncomplete>
}
 800f7f4:	bf00      	nop
 800f7f6:	3708      	adds	r7, #8
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	bd80      	pop	{r7, pc}

0800f7fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b082      	sub	sp, #8
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f80a:	4618      	mov	r0, r3
 800f80c:	f7fe fcef 	bl	800e1ee <USBD_LL_DevConnected>
}
 800f810:	bf00      	nop
 800f812:	3708      	adds	r7, #8
 800f814:	46bd      	mov	sp, r7
 800f816:	bd80      	pop	{r7, pc}

0800f818 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b082      	sub	sp, #8
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f826:	4618      	mov	r0, r3
 800f828:	f7fe fcec 	bl	800e204 <USBD_LL_DevDisconnected>
}
 800f82c:	bf00      	nop
 800f82e:	3708      	adds	r7, #8
 800f830:	46bd      	mov	sp, r7
 800f832:	bd80      	pop	{r7, pc}

0800f834 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f834:	b580      	push	{r7, lr}
 800f836:	b082      	sub	sp, #8
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	781b      	ldrb	r3, [r3, #0]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d13e      	bne.n	800f8c2 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f844:	4a21      	ldr	r2, [pc, #132]	@ (800f8cc <USBD_LL_Init+0x98>)
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	4a1f      	ldr	r2, [pc, #124]	@ (800f8cc <USBD_LL_Init+0x98>)
 800f850:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f854:	4b1d      	ldr	r3, [pc, #116]	@ (800f8cc <USBD_LL_Init+0x98>)
 800f856:	4a1e      	ldr	r2, [pc, #120]	@ (800f8d0 <USBD_LL_Init+0x9c>)
 800f858:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800f85a:	4b1c      	ldr	r3, [pc, #112]	@ (800f8cc <USBD_LL_Init+0x98>)
 800f85c:	2209      	movs	r2, #9
 800f85e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f860:	4b1a      	ldr	r3, [pc, #104]	@ (800f8cc <USBD_LL_Init+0x98>)
 800f862:	2202      	movs	r2, #2
 800f864:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f866:	4b19      	ldr	r3, [pc, #100]	@ (800f8cc <USBD_LL_Init+0x98>)
 800f868:	2200      	movs	r2, #0
 800f86a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f86c:	4b17      	ldr	r3, [pc, #92]	@ (800f8cc <USBD_LL_Init+0x98>)
 800f86e:	2202      	movs	r2, #2
 800f870:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800f872:	4b16      	ldr	r3, [pc, #88]	@ (800f8cc <USBD_LL_Init+0x98>)
 800f874:	2201      	movs	r2, #1
 800f876:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f878:	4b14      	ldr	r3, [pc, #80]	@ (800f8cc <USBD_LL_Init+0x98>)
 800f87a:	2200      	movs	r2, #0
 800f87c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f87e:	4b13      	ldr	r3, [pc, #76]	@ (800f8cc <USBD_LL_Init+0x98>)
 800f880:	2200      	movs	r2, #0
 800f882:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800f884:	4b11      	ldr	r3, [pc, #68]	@ (800f8cc <USBD_LL_Init+0x98>)
 800f886:	2201      	movs	r2, #1
 800f888:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800f88a:	4b10      	ldr	r3, [pc, #64]	@ (800f8cc <USBD_LL_Init+0x98>)
 800f88c:	2201      	movs	r2, #1
 800f88e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f890:	4b0e      	ldr	r3, [pc, #56]	@ (800f8cc <USBD_LL_Init+0x98>)
 800f892:	2200      	movs	r2, #0
 800f894:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f896:	480d      	ldr	r0, [pc, #52]	@ (800f8cc <USBD_LL_Init+0x98>)
 800f898:	f7f5 fbc2 	bl	8005020 <HAL_PCD_Init>
 800f89c:	4603      	mov	r3, r0
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d001      	beq.n	800f8a6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800f8a2:	f7f1 fbdb 	bl	800105c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f8a6:	2180      	movs	r1, #128	@ 0x80
 800f8a8:	4808      	ldr	r0, [pc, #32]	@ (800f8cc <USBD_LL_Init+0x98>)
 800f8aa:	f7f6 fe16 	bl	80064da <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f8ae:	2240      	movs	r2, #64	@ 0x40
 800f8b0:	2100      	movs	r1, #0
 800f8b2:	4806      	ldr	r0, [pc, #24]	@ (800f8cc <USBD_LL_Init+0x98>)
 800f8b4:	f7f6 fdca 	bl	800644c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f8b8:	2280      	movs	r2, #128	@ 0x80
 800f8ba:	2101      	movs	r1, #1
 800f8bc:	4803      	ldr	r0, [pc, #12]	@ (800f8cc <USBD_LL_Init+0x98>)
 800f8be:	f7f6 fdc5 	bl	800644c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800f8c2:	2300      	movs	r3, #0
}
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	3708      	adds	r7, #8
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	bd80      	pop	{r7, pc}
 800f8cc:	24001e84 	.word	0x24001e84
 800f8d0:	40080000 	.word	0x40080000

0800f8d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	b084      	sub	sp, #16
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f8dc:	2300      	movs	r3, #0
 800f8de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	f7f5 fca4 	bl	8005238 <HAL_PCD_Start>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f8f4:	7bfb      	ldrb	r3, [r7, #15]
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	f000 f942 	bl	800fb80 <USBD_Get_USB_Status>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f900:	7bbb      	ldrb	r3, [r7, #14]
}
 800f902:	4618      	mov	r0, r3
 800f904:	3710      	adds	r7, #16
 800f906:	46bd      	mov	sp, r7
 800f908:	bd80      	pop	{r7, pc}

0800f90a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f90a:	b580      	push	{r7, lr}
 800f90c:	b084      	sub	sp, #16
 800f90e:	af00      	add	r7, sp, #0
 800f910:	6078      	str	r0, [r7, #4]
 800f912:	4608      	mov	r0, r1
 800f914:	4611      	mov	r1, r2
 800f916:	461a      	mov	r2, r3
 800f918:	4603      	mov	r3, r0
 800f91a:	70fb      	strb	r3, [r7, #3]
 800f91c:	460b      	mov	r3, r1
 800f91e:	70bb      	strb	r3, [r7, #2]
 800f920:	4613      	mov	r3, r2
 800f922:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f924:	2300      	movs	r3, #0
 800f926:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f928:	2300      	movs	r3, #0
 800f92a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f932:	78bb      	ldrb	r3, [r7, #2]
 800f934:	883a      	ldrh	r2, [r7, #0]
 800f936:	78f9      	ldrb	r1, [r7, #3]
 800f938:	f7f6 f9a5 	bl	8005c86 <HAL_PCD_EP_Open>
 800f93c:	4603      	mov	r3, r0
 800f93e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f940:	7bfb      	ldrb	r3, [r7, #15]
 800f942:	4618      	mov	r0, r3
 800f944:	f000 f91c 	bl	800fb80 <USBD_Get_USB_Status>
 800f948:	4603      	mov	r3, r0
 800f94a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f94c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f94e:	4618      	mov	r0, r3
 800f950:	3710      	adds	r7, #16
 800f952:	46bd      	mov	sp, r7
 800f954:	bd80      	pop	{r7, pc}

0800f956 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f956:	b580      	push	{r7, lr}
 800f958:	b084      	sub	sp, #16
 800f95a:	af00      	add	r7, sp, #0
 800f95c:	6078      	str	r0, [r7, #4]
 800f95e:	460b      	mov	r3, r1
 800f960:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f962:	2300      	movs	r3, #0
 800f964:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f966:	2300      	movs	r3, #0
 800f968:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f970:	78fa      	ldrb	r2, [r7, #3]
 800f972:	4611      	mov	r1, r2
 800f974:	4618      	mov	r0, r3
 800f976:	f7f6 f9ee 	bl	8005d56 <HAL_PCD_EP_Close>
 800f97a:	4603      	mov	r3, r0
 800f97c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f97e:	7bfb      	ldrb	r3, [r7, #15]
 800f980:	4618      	mov	r0, r3
 800f982:	f000 f8fd 	bl	800fb80 <USBD_Get_USB_Status>
 800f986:	4603      	mov	r3, r0
 800f988:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f98a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f98c:	4618      	mov	r0, r3
 800f98e:	3710      	adds	r7, #16
 800f990:	46bd      	mov	sp, r7
 800f992:	bd80      	pop	{r7, pc}

0800f994 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b084      	sub	sp, #16
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
 800f99c:	460b      	mov	r3, r1
 800f99e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f9ae:	78fa      	ldrb	r2, [r7, #3]
 800f9b0:	4611      	mov	r1, r2
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	f7f6 faa6 	bl	8005f04 <HAL_PCD_EP_SetStall>
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f9bc:	7bfb      	ldrb	r3, [r7, #15]
 800f9be:	4618      	mov	r0, r3
 800f9c0:	f000 f8de 	bl	800fb80 <USBD_Get_USB_Status>
 800f9c4:	4603      	mov	r3, r0
 800f9c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f9c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	3710      	adds	r7, #16
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bd80      	pop	{r7, pc}

0800f9d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f9d2:	b580      	push	{r7, lr}
 800f9d4:	b084      	sub	sp, #16
 800f9d6:	af00      	add	r7, sp, #0
 800f9d8:	6078      	str	r0, [r7, #4]
 800f9da:	460b      	mov	r3, r1
 800f9dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9de:	2300      	movs	r3, #0
 800f9e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f9ec:	78fa      	ldrb	r2, [r7, #3]
 800f9ee:	4611      	mov	r1, r2
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	f7f6 faea 	bl	8005fca <HAL_PCD_EP_ClrStall>
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f9fa:	7bfb      	ldrb	r3, [r7, #15]
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	f000 f8bf 	bl	800fb80 <USBD_Get_USB_Status>
 800fa02:	4603      	mov	r3, r0
 800fa04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa06:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa08:	4618      	mov	r0, r3
 800fa0a:	3710      	adds	r7, #16
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	bd80      	pop	{r7, pc}

0800fa10 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fa10:	b480      	push	{r7}
 800fa12:	b085      	sub	sp, #20
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
 800fa18:	460b      	mov	r3, r1
 800fa1a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fa22:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fa24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	da0b      	bge.n	800fa44 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fa2c:	78fb      	ldrb	r3, [r7, #3]
 800fa2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fa32:	68f9      	ldr	r1, [r7, #12]
 800fa34:	4613      	mov	r3, r2
 800fa36:	00db      	lsls	r3, r3, #3
 800fa38:	4413      	add	r3, r2
 800fa3a:	009b      	lsls	r3, r3, #2
 800fa3c:	440b      	add	r3, r1
 800fa3e:	3316      	adds	r3, #22
 800fa40:	781b      	ldrb	r3, [r3, #0]
 800fa42:	e00b      	b.n	800fa5c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fa44:	78fb      	ldrb	r3, [r7, #3]
 800fa46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fa4a:	68f9      	ldr	r1, [r7, #12]
 800fa4c:	4613      	mov	r3, r2
 800fa4e:	00db      	lsls	r3, r3, #3
 800fa50:	4413      	add	r3, r2
 800fa52:	009b      	lsls	r3, r3, #2
 800fa54:	440b      	add	r3, r1
 800fa56:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800fa5a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	3714      	adds	r7, #20
 800fa60:	46bd      	mov	sp, r7
 800fa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa66:	4770      	bx	lr

0800fa68 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b084      	sub	sp, #16
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
 800fa70:	460b      	mov	r3, r1
 800fa72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa74:	2300      	movs	r3, #0
 800fa76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa78:	2300      	movs	r3, #0
 800fa7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fa82:	78fa      	ldrb	r2, [r7, #3]
 800fa84:	4611      	mov	r1, r2
 800fa86:	4618      	mov	r0, r3
 800fa88:	f7f6 f8d9 	bl	8005c3e <HAL_PCD_SetAddress>
 800fa8c:	4603      	mov	r3, r0
 800fa8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa90:	7bfb      	ldrb	r3, [r7, #15]
 800fa92:	4618      	mov	r0, r3
 800fa94:	f000 f874 	bl	800fb80 <USBD_Get_USB_Status>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa9e:	4618      	mov	r0, r3
 800faa0:	3710      	adds	r7, #16
 800faa2:	46bd      	mov	sp, r7
 800faa4:	bd80      	pop	{r7, pc}

0800faa6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800faa6:	b580      	push	{r7, lr}
 800faa8:	b086      	sub	sp, #24
 800faaa:	af00      	add	r7, sp, #0
 800faac:	60f8      	str	r0, [r7, #12]
 800faae:	607a      	str	r2, [r7, #4]
 800fab0:	603b      	str	r3, [r7, #0]
 800fab2:	460b      	mov	r3, r1
 800fab4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fab6:	2300      	movs	r3, #0
 800fab8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800faba:	2300      	movs	r3, #0
 800fabc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800fac4:	7af9      	ldrb	r1, [r7, #11]
 800fac6:	683b      	ldr	r3, [r7, #0]
 800fac8:	687a      	ldr	r2, [r7, #4]
 800faca:	f7f6 f9e1 	bl	8005e90 <HAL_PCD_EP_Transmit>
 800face:	4603      	mov	r3, r0
 800fad0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fad2:	7dfb      	ldrb	r3, [r7, #23]
 800fad4:	4618      	mov	r0, r3
 800fad6:	f000 f853 	bl	800fb80 <USBD_Get_USB_Status>
 800fada:	4603      	mov	r3, r0
 800fadc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fade:	7dbb      	ldrb	r3, [r7, #22]
}
 800fae0:	4618      	mov	r0, r3
 800fae2:	3718      	adds	r7, #24
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bd80      	pop	{r7, pc}

0800fae8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b086      	sub	sp, #24
 800faec:	af00      	add	r7, sp, #0
 800faee:	60f8      	str	r0, [r7, #12]
 800faf0:	607a      	str	r2, [r7, #4]
 800faf2:	603b      	str	r3, [r7, #0]
 800faf4:	460b      	mov	r3, r1
 800faf6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800faf8:	2300      	movs	r3, #0
 800fafa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fafc:	2300      	movs	r3, #0
 800fafe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800fb06:	7af9      	ldrb	r1, [r7, #11]
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	687a      	ldr	r2, [r7, #4]
 800fb0c:	f7f6 f96d 	bl	8005dea <HAL_PCD_EP_Receive>
 800fb10:	4603      	mov	r3, r0
 800fb12:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb14:	7dfb      	ldrb	r3, [r7, #23]
 800fb16:	4618      	mov	r0, r3
 800fb18:	f000 f832 	bl	800fb80 <USBD_Get_USB_Status>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fb20:	7dbb      	ldrb	r3, [r7, #22]
}
 800fb22:	4618      	mov	r0, r3
 800fb24:	3718      	adds	r7, #24
 800fb26:	46bd      	mov	sp, r7
 800fb28:	bd80      	pop	{r7, pc}

0800fb2a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fb2a:	b580      	push	{r7, lr}
 800fb2c:	b082      	sub	sp, #8
 800fb2e:	af00      	add	r7, sp, #0
 800fb30:	6078      	str	r0, [r7, #4]
 800fb32:	460b      	mov	r3, r1
 800fb34:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fb3c:	78fa      	ldrb	r2, [r7, #3]
 800fb3e:	4611      	mov	r1, r2
 800fb40:	4618      	mov	r0, r3
 800fb42:	f7f6 f98d 	bl	8005e60 <HAL_PCD_EP_GetRxCount>
 800fb46:	4603      	mov	r3, r0
}
 800fb48:	4618      	mov	r0, r3
 800fb4a:	3708      	adds	r7, #8
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	bd80      	pop	{r7, pc}

0800fb50 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fb50:	b480      	push	{r7}
 800fb52:	b083      	sub	sp, #12
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fb58:	4b03      	ldr	r3, [pc, #12]	@ (800fb68 <USBD_static_malloc+0x18>)
}
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	370c      	adds	r7, #12
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb64:	4770      	bx	lr
 800fb66:	bf00      	nop
 800fb68:	24002368 	.word	0x24002368

0800fb6c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fb6c:	b480      	push	{r7}
 800fb6e:	b083      	sub	sp, #12
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800fb74:	bf00      	nop
 800fb76:	370c      	adds	r7, #12
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7e:	4770      	bx	lr

0800fb80 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fb80:	b480      	push	{r7}
 800fb82:	b085      	sub	sp, #20
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	4603      	mov	r3, r0
 800fb88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fb8e:	79fb      	ldrb	r3, [r7, #7]
 800fb90:	2b03      	cmp	r3, #3
 800fb92:	d817      	bhi.n	800fbc4 <USBD_Get_USB_Status+0x44>
 800fb94:	a201      	add	r2, pc, #4	@ (adr r2, 800fb9c <USBD_Get_USB_Status+0x1c>)
 800fb96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb9a:	bf00      	nop
 800fb9c:	0800fbad 	.word	0x0800fbad
 800fba0:	0800fbb3 	.word	0x0800fbb3
 800fba4:	0800fbb9 	.word	0x0800fbb9
 800fba8:	0800fbbf 	.word	0x0800fbbf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fbac:	2300      	movs	r3, #0
 800fbae:	73fb      	strb	r3, [r7, #15]
    break;
 800fbb0:	e00b      	b.n	800fbca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fbb2:	2303      	movs	r3, #3
 800fbb4:	73fb      	strb	r3, [r7, #15]
    break;
 800fbb6:	e008      	b.n	800fbca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fbb8:	2301      	movs	r3, #1
 800fbba:	73fb      	strb	r3, [r7, #15]
    break;
 800fbbc:	e005      	b.n	800fbca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fbbe:	2303      	movs	r3, #3
 800fbc0:	73fb      	strb	r3, [r7, #15]
    break;
 800fbc2:	e002      	b.n	800fbca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fbc4:	2303      	movs	r3, #3
 800fbc6:	73fb      	strb	r3, [r7, #15]
    break;
 800fbc8:	bf00      	nop
  }
  return usb_status;
 800fbca:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbcc:	4618      	mov	r0, r3
 800fbce:	3714      	adds	r7, #20
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd6:	4770      	bx	lr

0800fbd8 <__cvt>:
 800fbd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbda:	ed2d 8b02 	vpush	{d8}
 800fbde:	eeb0 8b40 	vmov.f64	d8, d0
 800fbe2:	b085      	sub	sp, #20
 800fbe4:	4617      	mov	r7, r2
 800fbe6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800fbe8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fbea:	ee18 2a90 	vmov	r2, s17
 800fbee:	f025 0520 	bic.w	r5, r5, #32
 800fbf2:	2a00      	cmp	r2, #0
 800fbf4:	bfb6      	itet	lt
 800fbf6:	222d      	movlt	r2, #45	@ 0x2d
 800fbf8:	2200      	movge	r2, #0
 800fbfa:	eeb1 8b40 	vneglt.f64	d8, d0
 800fbfe:	2d46      	cmp	r5, #70	@ 0x46
 800fc00:	460c      	mov	r4, r1
 800fc02:	701a      	strb	r2, [r3, #0]
 800fc04:	d004      	beq.n	800fc10 <__cvt+0x38>
 800fc06:	2d45      	cmp	r5, #69	@ 0x45
 800fc08:	d100      	bne.n	800fc0c <__cvt+0x34>
 800fc0a:	3401      	adds	r4, #1
 800fc0c:	2102      	movs	r1, #2
 800fc0e:	e000      	b.n	800fc12 <__cvt+0x3a>
 800fc10:	2103      	movs	r1, #3
 800fc12:	ab03      	add	r3, sp, #12
 800fc14:	9301      	str	r3, [sp, #4]
 800fc16:	ab02      	add	r3, sp, #8
 800fc18:	9300      	str	r3, [sp, #0]
 800fc1a:	4622      	mov	r2, r4
 800fc1c:	4633      	mov	r3, r6
 800fc1e:	eeb0 0b48 	vmov.f64	d0, d8
 800fc22:	f000 fe41 	bl	80108a8 <_dtoa_r>
 800fc26:	2d47      	cmp	r5, #71	@ 0x47
 800fc28:	d114      	bne.n	800fc54 <__cvt+0x7c>
 800fc2a:	07fb      	lsls	r3, r7, #31
 800fc2c:	d50a      	bpl.n	800fc44 <__cvt+0x6c>
 800fc2e:	1902      	adds	r2, r0, r4
 800fc30:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fc34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc38:	bf08      	it	eq
 800fc3a:	9203      	streq	r2, [sp, #12]
 800fc3c:	2130      	movs	r1, #48	@ 0x30
 800fc3e:	9b03      	ldr	r3, [sp, #12]
 800fc40:	4293      	cmp	r3, r2
 800fc42:	d319      	bcc.n	800fc78 <__cvt+0xa0>
 800fc44:	9b03      	ldr	r3, [sp, #12]
 800fc46:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fc48:	1a1b      	subs	r3, r3, r0
 800fc4a:	6013      	str	r3, [r2, #0]
 800fc4c:	b005      	add	sp, #20
 800fc4e:	ecbd 8b02 	vpop	{d8}
 800fc52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc54:	2d46      	cmp	r5, #70	@ 0x46
 800fc56:	eb00 0204 	add.w	r2, r0, r4
 800fc5a:	d1e9      	bne.n	800fc30 <__cvt+0x58>
 800fc5c:	7803      	ldrb	r3, [r0, #0]
 800fc5e:	2b30      	cmp	r3, #48	@ 0x30
 800fc60:	d107      	bne.n	800fc72 <__cvt+0x9a>
 800fc62:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fc66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc6a:	bf1c      	itt	ne
 800fc6c:	f1c4 0401 	rsbne	r4, r4, #1
 800fc70:	6034      	strne	r4, [r6, #0]
 800fc72:	6833      	ldr	r3, [r6, #0]
 800fc74:	441a      	add	r2, r3
 800fc76:	e7db      	b.n	800fc30 <__cvt+0x58>
 800fc78:	1c5c      	adds	r4, r3, #1
 800fc7a:	9403      	str	r4, [sp, #12]
 800fc7c:	7019      	strb	r1, [r3, #0]
 800fc7e:	e7de      	b.n	800fc3e <__cvt+0x66>

0800fc80 <__exponent>:
 800fc80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fc82:	2900      	cmp	r1, #0
 800fc84:	bfba      	itte	lt
 800fc86:	4249      	neglt	r1, r1
 800fc88:	232d      	movlt	r3, #45	@ 0x2d
 800fc8a:	232b      	movge	r3, #43	@ 0x2b
 800fc8c:	2909      	cmp	r1, #9
 800fc8e:	7002      	strb	r2, [r0, #0]
 800fc90:	7043      	strb	r3, [r0, #1]
 800fc92:	dd29      	ble.n	800fce8 <__exponent+0x68>
 800fc94:	f10d 0307 	add.w	r3, sp, #7
 800fc98:	461d      	mov	r5, r3
 800fc9a:	270a      	movs	r7, #10
 800fc9c:	461a      	mov	r2, r3
 800fc9e:	fbb1 f6f7 	udiv	r6, r1, r7
 800fca2:	fb07 1416 	mls	r4, r7, r6, r1
 800fca6:	3430      	adds	r4, #48	@ 0x30
 800fca8:	f802 4c01 	strb.w	r4, [r2, #-1]
 800fcac:	460c      	mov	r4, r1
 800fcae:	2c63      	cmp	r4, #99	@ 0x63
 800fcb0:	f103 33ff 	add.w	r3, r3, #4294967295
 800fcb4:	4631      	mov	r1, r6
 800fcb6:	dcf1      	bgt.n	800fc9c <__exponent+0x1c>
 800fcb8:	3130      	adds	r1, #48	@ 0x30
 800fcba:	1e94      	subs	r4, r2, #2
 800fcbc:	f803 1c01 	strb.w	r1, [r3, #-1]
 800fcc0:	1c41      	adds	r1, r0, #1
 800fcc2:	4623      	mov	r3, r4
 800fcc4:	42ab      	cmp	r3, r5
 800fcc6:	d30a      	bcc.n	800fcde <__exponent+0x5e>
 800fcc8:	f10d 0309 	add.w	r3, sp, #9
 800fccc:	1a9b      	subs	r3, r3, r2
 800fcce:	42ac      	cmp	r4, r5
 800fcd0:	bf88      	it	hi
 800fcd2:	2300      	movhi	r3, #0
 800fcd4:	3302      	adds	r3, #2
 800fcd6:	4403      	add	r3, r0
 800fcd8:	1a18      	subs	r0, r3, r0
 800fcda:	b003      	add	sp, #12
 800fcdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcde:	f813 6b01 	ldrb.w	r6, [r3], #1
 800fce2:	f801 6f01 	strb.w	r6, [r1, #1]!
 800fce6:	e7ed      	b.n	800fcc4 <__exponent+0x44>
 800fce8:	2330      	movs	r3, #48	@ 0x30
 800fcea:	3130      	adds	r1, #48	@ 0x30
 800fcec:	7083      	strb	r3, [r0, #2]
 800fcee:	70c1      	strb	r1, [r0, #3]
 800fcf0:	1d03      	adds	r3, r0, #4
 800fcf2:	e7f1      	b.n	800fcd8 <__exponent+0x58>
 800fcf4:	0000      	movs	r0, r0
	...

0800fcf8 <_printf_float>:
 800fcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcfc:	b08d      	sub	sp, #52	@ 0x34
 800fcfe:	460c      	mov	r4, r1
 800fd00:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800fd04:	4616      	mov	r6, r2
 800fd06:	461f      	mov	r7, r3
 800fd08:	4605      	mov	r5, r0
 800fd0a:	f000 fccb 	bl	80106a4 <_localeconv_r>
 800fd0e:	f8d0 b000 	ldr.w	fp, [r0]
 800fd12:	4658      	mov	r0, fp
 800fd14:	f7f0 fb34 	bl	8000380 <strlen>
 800fd18:	2300      	movs	r3, #0
 800fd1a:	930a      	str	r3, [sp, #40]	@ 0x28
 800fd1c:	f8d8 3000 	ldr.w	r3, [r8]
 800fd20:	f894 9018 	ldrb.w	r9, [r4, #24]
 800fd24:	6822      	ldr	r2, [r4, #0]
 800fd26:	9005      	str	r0, [sp, #20]
 800fd28:	3307      	adds	r3, #7
 800fd2a:	f023 0307 	bic.w	r3, r3, #7
 800fd2e:	f103 0108 	add.w	r1, r3, #8
 800fd32:	f8c8 1000 	str.w	r1, [r8]
 800fd36:	ed93 0b00 	vldr	d0, [r3]
 800fd3a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800ff98 <_printf_float+0x2a0>
 800fd3e:	eeb0 7bc0 	vabs.f64	d7, d0
 800fd42:	eeb4 7b46 	vcmp.f64	d7, d6
 800fd46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd4a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800fd4e:	dd24      	ble.n	800fd9a <_printf_float+0xa2>
 800fd50:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800fd54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd58:	d502      	bpl.n	800fd60 <_printf_float+0x68>
 800fd5a:	232d      	movs	r3, #45	@ 0x2d
 800fd5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fd60:	498f      	ldr	r1, [pc, #572]	@ (800ffa0 <_printf_float+0x2a8>)
 800fd62:	4b90      	ldr	r3, [pc, #576]	@ (800ffa4 <_printf_float+0x2ac>)
 800fd64:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800fd68:	bf94      	ite	ls
 800fd6a:	4688      	movls	r8, r1
 800fd6c:	4698      	movhi	r8, r3
 800fd6e:	f022 0204 	bic.w	r2, r2, #4
 800fd72:	2303      	movs	r3, #3
 800fd74:	6123      	str	r3, [r4, #16]
 800fd76:	6022      	str	r2, [r4, #0]
 800fd78:	f04f 0a00 	mov.w	sl, #0
 800fd7c:	9700      	str	r7, [sp, #0]
 800fd7e:	4633      	mov	r3, r6
 800fd80:	aa0b      	add	r2, sp, #44	@ 0x2c
 800fd82:	4621      	mov	r1, r4
 800fd84:	4628      	mov	r0, r5
 800fd86:	f000 f9d1 	bl	801012c <_printf_common>
 800fd8a:	3001      	adds	r0, #1
 800fd8c:	f040 8089 	bne.w	800fea2 <_printf_float+0x1aa>
 800fd90:	f04f 30ff 	mov.w	r0, #4294967295
 800fd94:	b00d      	add	sp, #52	@ 0x34
 800fd96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd9a:	eeb4 0b40 	vcmp.f64	d0, d0
 800fd9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fda2:	d709      	bvc.n	800fdb8 <_printf_float+0xc0>
 800fda4:	ee10 3a90 	vmov	r3, s1
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	bfbc      	itt	lt
 800fdac:	232d      	movlt	r3, #45	@ 0x2d
 800fdae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800fdb2:	497d      	ldr	r1, [pc, #500]	@ (800ffa8 <_printf_float+0x2b0>)
 800fdb4:	4b7d      	ldr	r3, [pc, #500]	@ (800ffac <_printf_float+0x2b4>)
 800fdb6:	e7d5      	b.n	800fd64 <_printf_float+0x6c>
 800fdb8:	6863      	ldr	r3, [r4, #4]
 800fdba:	1c59      	adds	r1, r3, #1
 800fdbc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800fdc0:	d139      	bne.n	800fe36 <_printf_float+0x13e>
 800fdc2:	2306      	movs	r3, #6
 800fdc4:	6063      	str	r3, [r4, #4]
 800fdc6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800fdca:	2300      	movs	r3, #0
 800fdcc:	6022      	str	r2, [r4, #0]
 800fdce:	9303      	str	r3, [sp, #12]
 800fdd0:	ab0a      	add	r3, sp, #40	@ 0x28
 800fdd2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800fdd6:	ab09      	add	r3, sp, #36	@ 0x24
 800fdd8:	9300      	str	r3, [sp, #0]
 800fdda:	6861      	ldr	r1, [r4, #4]
 800fddc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800fde0:	4628      	mov	r0, r5
 800fde2:	f7ff fef9 	bl	800fbd8 <__cvt>
 800fde6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fdea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fdec:	4680      	mov	r8, r0
 800fdee:	d129      	bne.n	800fe44 <_printf_float+0x14c>
 800fdf0:	1cc8      	adds	r0, r1, #3
 800fdf2:	db02      	blt.n	800fdfa <_printf_float+0x102>
 800fdf4:	6863      	ldr	r3, [r4, #4]
 800fdf6:	4299      	cmp	r1, r3
 800fdf8:	dd41      	ble.n	800fe7e <_printf_float+0x186>
 800fdfa:	f1a9 0902 	sub.w	r9, r9, #2
 800fdfe:	fa5f f989 	uxtb.w	r9, r9
 800fe02:	3901      	subs	r1, #1
 800fe04:	464a      	mov	r2, r9
 800fe06:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800fe0a:	9109      	str	r1, [sp, #36]	@ 0x24
 800fe0c:	f7ff ff38 	bl	800fc80 <__exponent>
 800fe10:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fe12:	1813      	adds	r3, r2, r0
 800fe14:	2a01      	cmp	r2, #1
 800fe16:	4682      	mov	sl, r0
 800fe18:	6123      	str	r3, [r4, #16]
 800fe1a:	dc02      	bgt.n	800fe22 <_printf_float+0x12a>
 800fe1c:	6822      	ldr	r2, [r4, #0]
 800fe1e:	07d2      	lsls	r2, r2, #31
 800fe20:	d501      	bpl.n	800fe26 <_printf_float+0x12e>
 800fe22:	3301      	adds	r3, #1
 800fe24:	6123      	str	r3, [r4, #16]
 800fe26:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d0a6      	beq.n	800fd7c <_printf_float+0x84>
 800fe2e:	232d      	movs	r3, #45	@ 0x2d
 800fe30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fe34:	e7a2      	b.n	800fd7c <_printf_float+0x84>
 800fe36:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fe3a:	d1c4      	bne.n	800fdc6 <_printf_float+0xce>
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d1c2      	bne.n	800fdc6 <_printf_float+0xce>
 800fe40:	2301      	movs	r3, #1
 800fe42:	e7bf      	b.n	800fdc4 <_printf_float+0xcc>
 800fe44:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800fe48:	d9db      	bls.n	800fe02 <_printf_float+0x10a>
 800fe4a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800fe4e:	d118      	bne.n	800fe82 <_printf_float+0x18a>
 800fe50:	2900      	cmp	r1, #0
 800fe52:	6863      	ldr	r3, [r4, #4]
 800fe54:	dd0b      	ble.n	800fe6e <_printf_float+0x176>
 800fe56:	6121      	str	r1, [r4, #16]
 800fe58:	b913      	cbnz	r3, 800fe60 <_printf_float+0x168>
 800fe5a:	6822      	ldr	r2, [r4, #0]
 800fe5c:	07d0      	lsls	r0, r2, #31
 800fe5e:	d502      	bpl.n	800fe66 <_printf_float+0x16e>
 800fe60:	3301      	adds	r3, #1
 800fe62:	440b      	add	r3, r1
 800fe64:	6123      	str	r3, [r4, #16]
 800fe66:	65a1      	str	r1, [r4, #88]	@ 0x58
 800fe68:	f04f 0a00 	mov.w	sl, #0
 800fe6c:	e7db      	b.n	800fe26 <_printf_float+0x12e>
 800fe6e:	b913      	cbnz	r3, 800fe76 <_printf_float+0x17e>
 800fe70:	6822      	ldr	r2, [r4, #0]
 800fe72:	07d2      	lsls	r2, r2, #31
 800fe74:	d501      	bpl.n	800fe7a <_printf_float+0x182>
 800fe76:	3302      	adds	r3, #2
 800fe78:	e7f4      	b.n	800fe64 <_printf_float+0x16c>
 800fe7a:	2301      	movs	r3, #1
 800fe7c:	e7f2      	b.n	800fe64 <_printf_float+0x16c>
 800fe7e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800fe82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fe84:	4299      	cmp	r1, r3
 800fe86:	db05      	blt.n	800fe94 <_printf_float+0x19c>
 800fe88:	6823      	ldr	r3, [r4, #0]
 800fe8a:	6121      	str	r1, [r4, #16]
 800fe8c:	07d8      	lsls	r0, r3, #31
 800fe8e:	d5ea      	bpl.n	800fe66 <_printf_float+0x16e>
 800fe90:	1c4b      	adds	r3, r1, #1
 800fe92:	e7e7      	b.n	800fe64 <_printf_float+0x16c>
 800fe94:	2900      	cmp	r1, #0
 800fe96:	bfd4      	ite	le
 800fe98:	f1c1 0202 	rsble	r2, r1, #2
 800fe9c:	2201      	movgt	r2, #1
 800fe9e:	4413      	add	r3, r2
 800fea0:	e7e0      	b.n	800fe64 <_printf_float+0x16c>
 800fea2:	6823      	ldr	r3, [r4, #0]
 800fea4:	055a      	lsls	r2, r3, #21
 800fea6:	d407      	bmi.n	800feb8 <_printf_float+0x1c0>
 800fea8:	6923      	ldr	r3, [r4, #16]
 800feaa:	4642      	mov	r2, r8
 800feac:	4631      	mov	r1, r6
 800feae:	4628      	mov	r0, r5
 800feb0:	47b8      	blx	r7
 800feb2:	3001      	adds	r0, #1
 800feb4:	d12a      	bne.n	800ff0c <_printf_float+0x214>
 800feb6:	e76b      	b.n	800fd90 <_printf_float+0x98>
 800feb8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800febc:	f240 80e0 	bls.w	8010080 <_printf_float+0x388>
 800fec0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800fec4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fecc:	d133      	bne.n	800ff36 <_printf_float+0x23e>
 800fece:	4a38      	ldr	r2, [pc, #224]	@ (800ffb0 <_printf_float+0x2b8>)
 800fed0:	2301      	movs	r3, #1
 800fed2:	4631      	mov	r1, r6
 800fed4:	4628      	mov	r0, r5
 800fed6:	47b8      	blx	r7
 800fed8:	3001      	adds	r0, #1
 800feda:	f43f af59 	beq.w	800fd90 <_printf_float+0x98>
 800fede:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800fee2:	4543      	cmp	r3, r8
 800fee4:	db02      	blt.n	800feec <_printf_float+0x1f4>
 800fee6:	6823      	ldr	r3, [r4, #0]
 800fee8:	07d8      	lsls	r0, r3, #31
 800feea:	d50f      	bpl.n	800ff0c <_printf_float+0x214>
 800feec:	9b05      	ldr	r3, [sp, #20]
 800feee:	465a      	mov	r2, fp
 800fef0:	4631      	mov	r1, r6
 800fef2:	4628      	mov	r0, r5
 800fef4:	47b8      	blx	r7
 800fef6:	3001      	adds	r0, #1
 800fef8:	f43f af4a 	beq.w	800fd90 <_printf_float+0x98>
 800fefc:	f04f 0900 	mov.w	r9, #0
 800ff00:	f108 38ff 	add.w	r8, r8, #4294967295
 800ff04:	f104 0a1a 	add.w	sl, r4, #26
 800ff08:	45c8      	cmp	r8, r9
 800ff0a:	dc09      	bgt.n	800ff20 <_printf_float+0x228>
 800ff0c:	6823      	ldr	r3, [r4, #0]
 800ff0e:	079b      	lsls	r3, r3, #30
 800ff10:	f100 8107 	bmi.w	8010122 <_printf_float+0x42a>
 800ff14:	68e0      	ldr	r0, [r4, #12]
 800ff16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ff18:	4298      	cmp	r0, r3
 800ff1a:	bfb8      	it	lt
 800ff1c:	4618      	movlt	r0, r3
 800ff1e:	e739      	b.n	800fd94 <_printf_float+0x9c>
 800ff20:	2301      	movs	r3, #1
 800ff22:	4652      	mov	r2, sl
 800ff24:	4631      	mov	r1, r6
 800ff26:	4628      	mov	r0, r5
 800ff28:	47b8      	blx	r7
 800ff2a:	3001      	adds	r0, #1
 800ff2c:	f43f af30 	beq.w	800fd90 <_printf_float+0x98>
 800ff30:	f109 0901 	add.w	r9, r9, #1
 800ff34:	e7e8      	b.n	800ff08 <_printf_float+0x210>
 800ff36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	dc3b      	bgt.n	800ffb4 <_printf_float+0x2bc>
 800ff3c:	4a1c      	ldr	r2, [pc, #112]	@ (800ffb0 <_printf_float+0x2b8>)
 800ff3e:	2301      	movs	r3, #1
 800ff40:	4631      	mov	r1, r6
 800ff42:	4628      	mov	r0, r5
 800ff44:	47b8      	blx	r7
 800ff46:	3001      	adds	r0, #1
 800ff48:	f43f af22 	beq.w	800fd90 <_printf_float+0x98>
 800ff4c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ff50:	ea59 0303 	orrs.w	r3, r9, r3
 800ff54:	d102      	bne.n	800ff5c <_printf_float+0x264>
 800ff56:	6823      	ldr	r3, [r4, #0]
 800ff58:	07d9      	lsls	r1, r3, #31
 800ff5a:	d5d7      	bpl.n	800ff0c <_printf_float+0x214>
 800ff5c:	9b05      	ldr	r3, [sp, #20]
 800ff5e:	465a      	mov	r2, fp
 800ff60:	4631      	mov	r1, r6
 800ff62:	4628      	mov	r0, r5
 800ff64:	47b8      	blx	r7
 800ff66:	3001      	adds	r0, #1
 800ff68:	f43f af12 	beq.w	800fd90 <_printf_float+0x98>
 800ff6c:	f04f 0a00 	mov.w	sl, #0
 800ff70:	f104 0b1a 	add.w	fp, r4, #26
 800ff74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff76:	425b      	negs	r3, r3
 800ff78:	4553      	cmp	r3, sl
 800ff7a:	dc01      	bgt.n	800ff80 <_printf_float+0x288>
 800ff7c:	464b      	mov	r3, r9
 800ff7e:	e794      	b.n	800feaa <_printf_float+0x1b2>
 800ff80:	2301      	movs	r3, #1
 800ff82:	465a      	mov	r2, fp
 800ff84:	4631      	mov	r1, r6
 800ff86:	4628      	mov	r0, r5
 800ff88:	47b8      	blx	r7
 800ff8a:	3001      	adds	r0, #1
 800ff8c:	f43f af00 	beq.w	800fd90 <_printf_float+0x98>
 800ff90:	f10a 0a01 	add.w	sl, sl, #1
 800ff94:	e7ee      	b.n	800ff74 <_printf_float+0x27c>
 800ff96:	bf00      	nop
 800ff98:	ffffffff 	.word	0xffffffff
 800ff9c:	7fefffff 	.word	0x7fefffff
 800ffa0:	08012888 	.word	0x08012888
 800ffa4:	0801288c 	.word	0x0801288c
 800ffa8:	08012890 	.word	0x08012890
 800ffac:	08012894 	.word	0x08012894
 800ffb0:	08012898 	.word	0x08012898
 800ffb4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ffb6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ffba:	4553      	cmp	r3, sl
 800ffbc:	bfa8      	it	ge
 800ffbe:	4653      	movge	r3, sl
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	4699      	mov	r9, r3
 800ffc4:	dc37      	bgt.n	8010036 <_printf_float+0x33e>
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	9307      	str	r3, [sp, #28]
 800ffca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ffce:	f104 021a 	add.w	r2, r4, #26
 800ffd2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ffd4:	9907      	ldr	r1, [sp, #28]
 800ffd6:	9306      	str	r3, [sp, #24]
 800ffd8:	eba3 0309 	sub.w	r3, r3, r9
 800ffdc:	428b      	cmp	r3, r1
 800ffde:	dc31      	bgt.n	8010044 <_printf_float+0x34c>
 800ffe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ffe2:	459a      	cmp	sl, r3
 800ffe4:	dc3b      	bgt.n	801005e <_printf_float+0x366>
 800ffe6:	6823      	ldr	r3, [r4, #0]
 800ffe8:	07da      	lsls	r2, r3, #31
 800ffea:	d438      	bmi.n	801005e <_printf_float+0x366>
 800ffec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ffee:	ebaa 0903 	sub.w	r9, sl, r3
 800fff2:	9b06      	ldr	r3, [sp, #24]
 800fff4:	ebaa 0303 	sub.w	r3, sl, r3
 800fff8:	4599      	cmp	r9, r3
 800fffa:	bfa8      	it	ge
 800fffc:	4699      	movge	r9, r3
 800fffe:	f1b9 0f00 	cmp.w	r9, #0
 8010002:	dc34      	bgt.n	801006e <_printf_float+0x376>
 8010004:	f04f 0800 	mov.w	r8, #0
 8010008:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801000c:	f104 0b1a 	add.w	fp, r4, #26
 8010010:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010012:	ebaa 0303 	sub.w	r3, sl, r3
 8010016:	eba3 0309 	sub.w	r3, r3, r9
 801001a:	4543      	cmp	r3, r8
 801001c:	f77f af76 	ble.w	800ff0c <_printf_float+0x214>
 8010020:	2301      	movs	r3, #1
 8010022:	465a      	mov	r2, fp
 8010024:	4631      	mov	r1, r6
 8010026:	4628      	mov	r0, r5
 8010028:	47b8      	blx	r7
 801002a:	3001      	adds	r0, #1
 801002c:	f43f aeb0 	beq.w	800fd90 <_printf_float+0x98>
 8010030:	f108 0801 	add.w	r8, r8, #1
 8010034:	e7ec      	b.n	8010010 <_printf_float+0x318>
 8010036:	4642      	mov	r2, r8
 8010038:	4631      	mov	r1, r6
 801003a:	4628      	mov	r0, r5
 801003c:	47b8      	blx	r7
 801003e:	3001      	adds	r0, #1
 8010040:	d1c1      	bne.n	800ffc6 <_printf_float+0x2ce>
 8010042:	e6a5      	b.n	800fd90 <_printf_float+0x98>
 8010044:	2301      	movs	r3, #1
 8010046:	4631      	mov	r1, r6
 8010048:	4628      	mov	r0, r5
 801004a:	9206      	str	r2, [sp, #24]
 801004c:	47b8      	blx	r7
 801004e:	3001      	adds	r0, #1
 8010050:	f43f ae9e 	beq.w	800fd90 <_printf_float+0x98>
 8010054:	9b07      	ldr	r3, [sp, #28]
 8010056:	9a06      	ldr	r2, [sp, #24]
 8010058:	3301      	adds	r3, #1
 801005a:	9307      	str	r3, [sp, #28]
 801005c:	e7b9      	b.n	800ffd2 <_printf_float+0x2da>
 801005e:	9b05      	ldr	r3, [sp, #20]
 8010060:	465a      	mov	r2, fp
 8010062:	4631      	mov	r1, r6
 8010064:	4628      	mov	r0, r5
 8010066:	47b8      	blx	r7
 8010068:	3001      	adds	r0, #1
 801006a:	d1bf      	bne.n	800ffec <_printf_float+0x2f4>
 801006c:	e690      	b.n	800fd90 <_printf_float+0x98>
 801006e:	9a06      	ldr	r2, [sp, #24]
 8010070:	464b      	mov	r3, r9
 8010072:	4442      	add	r2, r8
 8010074:	4631      	mov	r1, r6
 8010076:	4628      	mov	r0, r5
 8010078:	47b8      	blx	r7
 801007a:	3001      	adds	r0, #1
 801007c:	d1c2      	bne.n	8010004 <_printf_float+0x30c>
 801007e:	e687      	b.n	800fd90 <_printf_float+0x98>
 8010080:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8010084:	f1b9 0f01 	cmp.w	r9, #1
 8010088:	dc01      	bgt.n	801008e <_printf_float+0x396>
 801008a:	07db      	lsls	r3, r3, #31
 801008c:	d536      	bpl.n	80100fc <_printf_float+0x404>
 801008e:	2301      	movs	r3, #1
 8010090:	4642      	mov	r2, r8
 8010092:	4631      	mov	r1, r6
 8010094:	4628      	mov	r0, r5
 8010096:	47b8      	blx	r7
 8010098:	3001      	adds	r0, #1
 801009a:	f43f ae79 	beq.w	800fd90 <_printf_float+0x98>
 801009e:	9b05      	ldr	r3, [sp, #20]
 80100a0:	465a      	mov	r2, fp
 80100a2:	4631      	mov	r1, r6
 80100a4:	4628      	mov	r0, r5
 80100a6:	47b8      	blx	r7
 80100a8:	3001      	adds	r0, #1
 80100aa:	f43f ae71 	beq.w	800fd90 <_printf_float+0x98>
 80100ae:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80100b2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80100b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100ba:	f109 39ff 	add.w	r9, r9, #4294967295
 80100be:	d018      	beq.n	80100f2 <_printf_float+0x3fa>
 80100c0:	464b      	mov	r3, r9
 80100c2:	f108 0201 	add.w	r2, r8, #1
 80100c6:	4631      	mov	r1, r6
 80100c8:	4628      	mov	r0, r5
 80100ca:	47b8      	blx	r7
 80100cc:	3001      	adds	r0, #1
 80100ce:	d10c      	bne.n	80100ea <_printf_float+0x3f2>
 80100d0:	e65e      	b.n	800fd90 <_printf_float+0x98>
 80100d2:	2301      	movs	r3, #1
 80100d4:	465a      	mov	r2, fp
 80100d6:	4631      	mov	r1, r6
 80100d8:	4628      	mov	r0, r5
 80100da:	47b8      	blx	r7
 80100dc:	3001      	adds	r0, #1
 80100de:	f43f ae57 	beq.w	800fd90 <_printf_float+0x98>
 80100e2:	f108 0801 	add.w	r8, r8, #1
 80100e6:	45c8      	cmp	r8, r9
 80100e8:	dbf3      	blt.n	80100d2 <_printf_float+0x3da>
 80100ea:	4653      	mov	r3, sl
 80100ec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80100f0:	e6dc      	b.n	800feac <_printf_float+0x1b4>
 80100f2:	f04f 0800 	mov.w	r8, #0
 80100f6:	f104 0b1a 	add.w	fp, r4, #26
 80100fa:	e7f4      	b.n	80100e6 <_printf_float+0x3ee>
 80100fc:	2301      	movs	r3, #1
 80100fe:	4642      	mov	r2, r8
 8010100:	e7e1      	b.n	80100c6 <_printf_float+0x3ce>
 8010102:	2301      	movs	r3, #1
 8010104:	464a      	mov	r2, r9
 8010106:	4631      	mov	r1, r6
 8010108:	4628      	mov	r0, r5
 801010a:	47b8      	blx	r7
 801010c:	3001      	adds	r0, #1
 801010e:	f43f ae3f 	beq.w	800fd90 <_printf_float+0x98>
 8010112:	f108 0801 	add.w	r8, r8, #1
 8010116:	68e3      	ldr	r3, [r4, #12]
 8010118:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801011a:	1a5b      	subs	r3, r3, r1
 801011c:	4543      	cmp	r3, r8
 801011e:	dcf0      	bgt.n	8010102 <_printf_float+0x40a>
 8010120:	e6f8      	b.n	800ff14 <_printf_float+0x21c>
 8010122:	f04f 0800 	mov.w	r8, #0
 8010126:	f104 0919 	add.w	r9, r4, #25
 801012a:	e7f4      	b.n	8010116 <_printf_float+0x41e>

0801012c <_printf_common>:
 801012c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010130:	4616      	mov	r6, r2
 8010132:	4698      	mov	r8, r3
 8010134:	688a      	ldr	r2, [r1, #8]
 8010136:	690b      	ldr	r3, [r1, #16]
 8010138:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801013c:	4293      	cmp	r3, r2
 801013e:	bfb8      	it	lt
 8010140:	4613      	movlt	r3, r2
 8010142:	6033      	str	r3, [r6, #0]
 8010144:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010148:	4607      	mov	r7, r0
 801014a:	460c      	mov	r4, r1
 801014c:	b10a      	cbz	r2, 8010152 <_printf_common+0x26>
 801014e:	3301      	adds	r3, #1
 8010150:	6033      	str	r3, [r6, #0]
 8010152:	6823      	ldr	r3, [r4, #0]
 8010154:	0699      	lsls	r1, r3, #26
 8010156:	bf42      	ittt	mi
 8010158:	6833      	ldrmi	r3, [r6, #0]
 801015a:	3302      	addmi	r3, #2
 801015c:	6033      	strmi	r3, [r6, #0]
 801015e:	6825      	ldr	r5, [r4, #0]
 8010160:	f015 0506 	ands.w	r5, r5, #6
 8010164:	d106      	bne.n	8010174 <_printf_common+0x48>
 8010166:	f104 0a19 	add.w	sl, r4, #25
 801016a:	68e3      	ldr	r3, [r4, #12]
 801016c:	6832      	ldr	r2, [r6, #0]
 801016e:	1a9b      	subs	r3, r3, r2
 8010170:	42ab      	cmp	r3, r5
 8010172:	dc26      	bgt.n	80101c2 <_printf_common+0x96>
 8010174:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010178:	6822      	ldr	r2, [r4, #0]
 801017a:	3b00      	subs	r3, #0
 801017c:	bf18      	it	ne
 801017e:	2301      	movne	r3, #1
 8010180:	0692      	lsls	r2, r2, #26
 8010182:	d42b      	bmi.n	80101dc <_printf_common+0xb0>
 8010184:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010188:	4641      	mov	r1, r8
 801018a:	4638      	mov	r0, r7
 801018c:	47c8      	blx	r9
 801018e:	3001      	adds	r0, #1
 8010190:	d01e      	beq.n	80101d0 <_printf_common+0xa4>
 8010192:	6823      	ldr	r3, [r4, #0]
 8010194:	6922      	ldr	r2, [r4, #16]
 8010196:	f003 0306 	and.w	r3, r3, #6
 801019a:	2b04      	cmp	r3, #4
 801019c:	bf02      	ittt	eq
 801019e:	68e5      	ldreq	r5, [r4, #12]
 80101a0:	6833      	ldreq	r3, [r6, #0]
 80101a2:	1aed      	subeq	r5, r5, r3
 80101a4:	68a3      	ldr	r3, [r4, #8]
 80101a6:	bf0c      	ite	eq
 80101a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80101ac:	2500      	movne	r5, #0
 80101ae:	4293      	cmp	r3, r2
 80101b0:	bfc4      	itt	gt
 80101b2:	1a9b      	subgt	r3, r3, r2
 80101b4:	18ed      	addgt	r5, r5, r3
 80101b6:	2600      	movs	r6, #0
 80101b8:	341a      	adds	r4, #26
 80101ba:	42b5      	cmp	r5, r6
 80101bc:	d11a      	bne.n	80101f4 <_printf_common+0xc8>
 80101be:	2000      	movs	r0, #0
 80101c0:	e008      	b.n	80101d4 <_printf_common+0xa8>
 80101c2:	2301      	movs	r3, #1
 80101c4:	4652      	mov	r2, sl
 80101c6:	4641      	mov	r1, r8
 80101c8:	4638      	mov	r0, r7
 80101ca:	47c8      	blx	r9
 80101cc:	3001      	adds	r0, #1
 80101ce:	d103      	bne.n	80101d8 <_printf_common+0xac>
 80101d0:	f04f 30ff 	mov.w	r0, #4294967295
 80101d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101d8:	3501      	adds	r5, #1
 80101da:	e7c6      	b.n	801016a <_printf_common+0x3e>
 80101dc:	18e1      	adds	r1, r4, r3
 80101de:	1c5a      	adds	r2, r3, #1
 80101e0:	2030      	movs	r0, #48	@ 0x30
 80101e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80101e6:	4422      	add	r2, r4
 80101e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80101ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80101f0:	3302      	adds	r3, #2
 80101f2:	e7c7      	b.n	8010184 <_printf_common+0x58>
 80101f4:	2301      	movs	r3, #1
 80101f6:	4622      	mov	r2, r4
 80101f8:	4641      	mov	r1, r8
 80101fa:	4638      	mov	r0, r7
 80101fc:	47c8      	blx	r9
 80101fe:	3001      	adds	r0, #1
 8010200:	d0e6      	beq.n	80101d0 <_printf_common+0xa4>
 8010202:	3601      	adds	r6, #1
 8010204:	e7d9      	b.n	80101ba <_printf_common+0x8e>
	...

08010208 <_printf_i>:
 8010208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801020c:	7e0f      	ldrb	r7, [r1, #24]
 801020e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010210:	2f78      	cmp	r7, #120	@ 0x78
 8010212:	4691      	mov	r9, r2
 8010214:	4680      	mov	r8, r0
 8010216:	460c      	mov	r4, r1
 8010218:	469a      	mov	sl, r3
 801021a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801021e:	d807      	bhi.n	8010230 <_printf_i+0x28>
 8010220:	2f62      	cmp	r7, #98	@ 0x62
 8010222:	d80a      	bhi.n	801023a <_printf_i+0x32>
 8010224:	2f00      	cmp	r7, #0
 8010226:	f000 80d2 	beq.w	80103ce <_printf_i+0x1c6>
 801022a:	2f58      	cmp	r7, #88	@ 0x58
 801022c:	f000 80b9 	beq.w	80103a2 <_printf_i+0x19a>
 8010230:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010234:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010238:	e03a      	b.n	80102b0 <_printf_i+0xa8>
 801023a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801023e:	2b15      	cmp	r3, #21
 8010240:	d8f6      	bhi.n	8010230 <_printf_i+0x28>
 8010242:	a101      	add	r1, pc, #4	@ (adr r1, 8010248 <_printf_i+0x40>)
 8010244:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010248:	080102a1 	.word	0x080102a1
 801024c:	080102b5 	.word	0x080102b5
 8010250:	08010231 	.word	0x08010231
 8010254:	08010231 	.word	0x08010231
 8010258:	08010231 	.word	0x08010231
 801025c:	08010231 	.word	0x08010231
 8010260:	080102b5 	.word	0x080102b5
 8010264:	08010231 	.word	0x08010231
 8010268:	08010231 	.word	0x08010231
 801026c:	08010231 	.word	0x08010231
 8010270:	08010231 	.word	0x08010231
 8010274:	080103b5 	.word	0x080103b5
 8010278:	080102df 	.word	0x080102df
 801027c:	0801036f 	.word	0x0801036f
 8010280:	08010231 	.word	0x08010231
 8010284:	08010231 	.word	0x08010231
 8010288:	080103d7 	.word	0x080103d7
 801028c:	08010231 	.word	0x08010231
 8010290:	080102df 	.word	0x080102df
 8010294:	08010231 	.word	0x08010231
 8010298:	08010231 	.word	0x08010231
 801029c:	08010377 	.word	0x08010377
 80102a0:	6833      	ldr	r3, [r6, #0]
 80102a2:	1d1a      	adds	r2, r3, #4
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	6032      	str	r2, [r6, #0]
 80102a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80102ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80102b0:	2301      	movs	r3, #1
 80102b2:	e09d      	b.n	80103f0 <_printf_i+0x1e8>
 80102b4:	6833      	ldr	r3, [r6, #0]
 80102b6:	6820      	ldr	r0, [r4, #0]
 80102b8:	1d19      	adds	r1, r3, #4
 80102ba:	6031      	str	r1, [r6, #0]
 80102bc:	0606      	lsls	r6, r0, #24
 80102be:	d501      	bpl.n	80102c4 <_printf_i+0xbc>
 80102c0:	681d      	ldr	r5, [r3, #0]
 80102c2:	e003      	b.n	80102cc <_printf_i+0xc4>
 80102c4:	0645      	lsls	r5, r0, #25
 80102c6:	d5fb      	bpl.n	80102c0 <_printf_i+0xb8>
 80102c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80102cc:	2d00      	cmp	r5, #0
 80102ce:	da03      	bge.n	80102d8 <_printf_i+0xd0>
 80102d0:	232d      	movs	r3, #45	@ 0x2d
 80102d2:	426d      	negs	r5, r5
 80102d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80102d8:	4859      	ldr	r0, [pc, #356]	@ (8010440 <_printf_i+0x238>)
 80102da:	230a      	movs	r3, #10
 80102dc:	e011      	b.n	8010302 <_printf_i+0xfa>
 80102de:	6821      	ldr	r1, [r4, #0]
 80102e0:	6833      	ldr	r3, [r6, #0]
 80102e2:	0608      	lsls	r0, r1, #24
 80102e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80102e8:	d402      	bmi.n	80102f0 <_printf_i+0xe8>
 80102ea:	0649      	lsls	r1, r1, #25
 80102ec:	bf48      	it	mi
 80102ee:	b2ad      	uxthmi	r5, r5
 80102f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80102f2:	4853      	ldr	r0, [pc, #332]	@ (8010440 <_printf_i+0x238>)
 80102f4:	6033      	str	r3, [r6, #0]
 80102f6:	bf14      	ite	ne
 80102f8:	230a      	movne	r3, #10
 80102fa:	2308      	moveq	r3, #8
 80102fc:	2100      	movs	r1, #0
 80102fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010302:	6866      	ldr	r6, [r4, #4]
 8010304:	60a6      	str	r6, [r4, #8]
 8010306:	2e00      	cmp	r6, #0
 8010308:	bfa2      	ittt	ge
 801030a:	6821      	ldrge	r1, [r4, #0]
 801030c:	f021 0104 	bicge.w	r1, r1, #4
 8010310:	6021      	strge	r1, [r4, #0]
 8010312:	b90d      	cbnz	r5, 8010318 <_printf_i+0x110>
 8010314:	2e00      	cmp	r6, #0
 8010316:	d04b      	beq.n	80103b0 <_printf_i+0x1a8>
 8010318:	4616      	mov	r6, r2
 801031a:	fbb5 f1f3 	udiv	r1, r5, r3
 801031e:	fb03 5711 	mls	r7, r3, r1, r5
 8010322:	5dc7      	ldrb	r7, [r0, r7]
 8010324:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010328:	462f      	mov	r7, r5
 801032a:	42bb      	cmp	r3, r7
 801032c:	460d      	mov	r5, r1
 801032e:	d9f4      	bls.n	801031a <_printf_i+0x112>
 8010330:	2b08      	cmp	r3, #8
 8010332:	d10b      	bne.n	801034c <_printf_i+0x144>
 8010334:	6823      	ldr	r3, [r4, #0]
 8010336:	07df      	lsls	r7, r3, #31
 8010338:	d508      	bpl.n	801034c <_printf_i+0x144>
 801033a:	6923      	ldr	r3, [r4, #16]
 801033c:	6861      	ldr	r1, [r4, #4]
 801033e:	4299      	cmp	r1, r3
 8010340:	bfde      	ittt	le
 8010342:	2330      	movle	r3, #48	@ 0x30
 8010344:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010348:	f106 36ff 	addle.w	r6, r6, #4294967295
 801034c:	1b92      	subs	r2, r2, r6
 801034e:	6122      	str	r2, [r4, #16]
 8010350:	f8cd a000 	str.w	sl, [sp]
 8010354:	464b      	mov	r3, r9
 8010356:	aa03      	add	r2, sp, #12
 8010358:	4621      	mov	r1, r4
 801035a:	4640      	mov	r0, r8
 801035c:	f7ff fee6 	bl	801012c <_printf_common>
 8010360:	3001      	adds	r0, #1
 8010362:	d14a      	bne.n	80103fa <_printf_i+0x1f2>
 8010364:	f04f 30ff 	mov.w	r0, #4294967295
 8010368:	b004      	add	sp, #16
 801036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801036e:	6823      	ldr	r3, [r4, #0]
 8010370:	f043 0320 	orr.w	r3, r3, #32
 8010374:	6023      	str	r3, [r4, #0]
 8010376:	4833      	ldr	r0, [pc, #204]	@ (8010444 <_printf_i+0x23c>)
 8010378:	2778      	movs	r7, #120	@ 0x78
 801037a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801037e:	6823      	ldr	r3, [r4, #0]
 8010380:	6831      	ldr	r1, [r6, #0]
 8010382:	061f      	lsls	r7, r3, #24
 8010384:	f851 5b04 	ldr.w	r5, [r1], #4
 8010388:	d402      	bmi.n	8010390 <_printf_i+0x188>
 801038a:	065f      	lsls	r7, r3, #25
 801038c:	bf48      	it	mi
 801038e:	b2ad      	uxthmi	r5, r5
 8010390:	6031      	str	r1, [r6, #0]
 8010392:	07d9      	lsls	r1, r3, #31
 8010394:	bf44      	itt	mi
 8010396:	f043 0320 	orrmi.w	r3, r3, #32
 801039a:	6023      	strmi	r3, [r4, #0]
 801039c:	b11d      	cbz	r5, 80103a6 <_printf_i+0x19e>
 801039e:	2310      	movs	r3, #16
 80103a0:	e7ac      	b.n	80102fc <_printf_i+0xf4>
 80103a2:	4827      	ldr	r0, [pc, #156]	@ (8010440 <_printf_i+0x238>)
 80103a4:	e7e9      	b.n	801037a <_printf_i+0x172>
 80103a6:	6823      	ldr	r3, [r4, #0]
 80103a8:	f023 0320 	bic.w	r3, r3, #32
 80103ac:	6023      	str	r3, [r4, #0]
 80103ae:	e7f6      	b.n	801039e <_printf_i+0x196>
 80103b0:	4616      	mov	r6, r2
 80103b2:	e7bd      	b.n	8010330 <_printf_i+0x128>
 80103b4:	6833      	ldr	r3, [r6, #0]
 80103b6:	6825      	ldr	r5, [r4, #0]
 80103b8:	6961      	ldr	r1, [r4, #20]
 80103ba:	1d18      	adds	r0, r3, #4
 80103bc:	6030      	str	r0, [r6, #0]
 80103be:	062e      	lsls	r6, r5, #24
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	d501      	bpl.n	80103c8 <_printf_i+0x1c0>
 80103c4:	6019      	str	r1, [r3, #0]
 80103c6:	e002      	b.n	80103ce <_printf_i+0x1c6>
 80103c8:	0668      	lsls	r0, r5, #25
 80103ca:	d5fb      	bpl.n	80103c4 <_printf_i+0x1bc>
 80103cc:	8019      	strh	r1, [r3, #0]
 80103ce:	2300      	movs	r3, #0
 80103d0:	6123      	str	r3, [r4, #16]
 80103d2:	4616      	mov	r6, r2
 80103d4:	e7bc      	b.n	8010350 <_printf_i+0x148>
 80103d6:	6833      	ldr	r3, [r6, #0]
 80103d8:	1d1a      	adds	r2, r3, #4
 80103da:	6032      	str	r2, [r6, #0]
 80103dc:	681e      	ldr	r6, [r3, #0]
 80103de:	6862      	ldr	r2, [r4, #4]
 80103e0:	2100      	movs	r1, #0
 80103e2:	4630      	mov	r0, r6
 80103e4:	f7ef ff7c 	bl	80002e0 <memchr>
 80103e8:	b108      	cbz	r0, 80103ee <_printf_i+0x1e6>
 80103ea:	1b80      	subs	r0, r0, r6
 80103ec:	6060      	str	r0, [r4, #4]
 80103ee:	6863      	ldr	r3, [r4, #4]
 80103f0:	6123      	str	r3, [r4, #16]
 80103f2:	2300      	movs	r3, #0
 80103f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80103f8:	e7aa      	b.n	8010350 <_printf_i+0x148>
 80103fa:	6923      	ldr	r3, [r4, #16]
 80103fc:	4632      	mov	r2, r6
 80103fe:	4649      	mov	r1, r9
 8010400:	4640      	mov	r0, r8
 8010402:	47d0      	blx	sl
 8010404:	3001      	adds	r0, #1
 8010406:	d0ad      	beq.n	8010364 <_printf_i+0x15c>
 8010408:	6823      	ldr	r3, [r4, #0]
 801040a:	079b      	lsls	r3, r3, #30
 801040c:	d413      	bmi.n	8010436 <_printf_i+0x22e>
 801040e:	68e0      	ldr	r0, [r4, #12]
 8010410:	9b03      	ldr	r3, [sp, #12]
 8010412:	4298      	cmp	r0, r3
 8010414:	bfb8      	it	lt
 8010416:	4618      	movlt	r0, r3
 8010418:	e7a6      	b.n	8010368 <_printf_i+0x160>
 801041a:	2301      	movs	r3, #1
 801041c:	4632      	mov	r2, r6
 801041e:	4649      	mov	r1, r9
 8010420:	4640      	mov	r0, r8
 8010422:	47d0      	blx	sl
 8010424:	3001      	adds	r0, #1
 8010426:	d09d      	beq.n	8010364 <_printf_i+0x15c>
 8010428:	3501      	adds	r5, #1
 801042a:	68e3      	ldr	r3, [r4, #12]
 801042c:	9903      	ldr	r1, [sp, #12]
 801042e:	1a5b      	subs	r3, r3, r1
 8010430:	42ab      	cmp	r3, r5
 8010432:	dcf2      	bgt.n	801041a <_printf_i+0x212>
 8010434:	e7eb      	b.n	801040e <_printf_i+0x206>
 8010436:	2500      	movs	r5, #0
 8010438:	f104 0619 	add.w	r6, r4, #25
 801043c:	e7f5      	b.n	801042a <_printf_i+0x222>
 801043e:	bf00      	nop
 8010440:	0801289a 	.word	0x0801289a
 8010444:	080128ab 	.word	0x080128ab

08010448 <std>:
 8010448:	2300      	movs	r3, #0
 801044a:	b510      	push	{r4, lr}
 801044c:	4604      	mov	r4, r0
 801044e:	e9c0 3300 	strd	r3, r3, [r0]
 8010452:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010456:	6083      	str	r3, [r0, #8]
 8010458:	8181      	strh	r1, [r0, #12]
 801045a:	6643      	str	r3, [r0, #100]	@ 0x64
 801045c:	81c2      	strh	r2, [r0, #14]
 801045e:	6183      	str	r3, [r0, #24]
 8010460:	4619      	mov	r1, r3
 8010462:	2208      	movs	r2, #8
 8010464:	305c      	adds	r0, #92	@ 0x5c
 8010466:	f000 f914 	bl	8010692 <memset>
 801046a:	4b0d      	ldr	r3, [pc, #52]	@ (80104a0 <std+0x58>)
 801046c:	6263      	str	r3, [r4, #36]	@ 0x24
 801046e:	4b0d      	ldr	r3, [pc, #52]	@ (80104a4 <std+0x5c>)
 8010470:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010472:	4b0d      	ldr	r3, [pc, #52]	@ (80104a8 <std+0x60>)
 8010474:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010476:	4b0d      	ldr	r3, [pc, #52]	@ (80104ac <std+0x64>)
 8010478:	6323      	str	r3, [r4, #48]	@ 0x30
 801047a:	4b0d      	ldr	r3, [pc, #52]	@ (80104b0 <std+0x68>)
 801047c:	6224      	str	r4, [r4, #32]
 801047e:	429c      	cmp	r4, r3
 8010480:	d006      	beq.n	8010490 <std+0x48>
 8010482:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010486:	4294      	cmp	r4, r2
 8010488:	d002      	beq.n	8010490 <std+0x48>
 801048a:	33d0      	adds	r3, #208	@ 0xd0
 801048c:	429c      	cmp	r4, r3
 801048e:	d105      	bne.n	801049c <std+0x54>
 8010490:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010498:	f000 b978 	b.w	801078c <__retarget_lock_init_recursive>
 801049c:	bd10      	pop	{r4, pc}
 801049e:	bf00      	nop
 80104a0:	0801060d 	.word	0x0801060d
 80104a4:	0801062f 	.word	0x0801062f
 80104a8:	08010667 	.word	0x08010667
 80104ac:	0801068b 	.word	0x0801068b
 80104b0:	24002588 	.word	0x24002588

080104b4 <stdio_exit_handler>:
 80104b4:	4a02      	ldr	r2, [pc, #8]	@ (80104c0 <stdio_exit_handler+0xc>)
 80104b6:	4903      	ldr	r1, [pc, #12]	@ (80104c4 <stdio_exit_handler+0x10>)
 80104b8:	4803      	ldr	r0, [pc, #12]	@ (80104c8 <stdio_exit_handler+0x14>)
 80104ba:	f000 b869 	b.w	8010590 <_fwalk_sglue>
 80104be:	bf00      	nop
 80104c0:	2400012c 	.word	0x2400012c
 80104c4:	08012011 	.word	0x08012011
 80104c8:	2400013c 	.word	0x2400013c

080104cc <cleanup_stdio>:
 80104cc:	6841      	ldr	r1, [r0, #4]
 80104ce:	4b0c      	ldr	r3, [pc, #48]	@ (8010500 <cleanup_stdio+0x34>)
 80104d0:	4299      	cmp	r1, r3
 80104d2:	b510      	push	{r4, lr}
 80104d4:	4604      	mov	r4, r0
 80104d6:	d001      	beq.n	80104dc <cleanup_stdio+0x10>
 80104d8:	f001 fd9a 	bl	8012010 <_fflush_r>
 80104dc:	68a1      	ldr	r1, [r4, #8]
 80104de:	4b09      	ldr	r3, [pc, #36]	@ (8010504 <cleanup_stdio+0x38>)
 80104e0:	4299      	cmp	r1, r3
 80104e2:	d002      	beq.n	80104ea <cleanup_stdio+0x1e>
 80104e4:	4620      	mov	r0, r4
 80104e6:	f001 fd93 	bl	8012010 <_fflush_r>
 80104ea:	68e1      	ldr	r1, [r4, #12]
 80104ec:	4b06      	ldr	r3, [pc, #24]	@ (8010508 <cleanup_stdio+0x3c>)
 80104ee:	4299      	cmp	r1, r3
 80104f0:	d004      	beq.n	80104fc <cleanup_stdio+0x30>
 80104f2:	4620      	mov	r0, r4
 80104f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104f8:	f001 bd8a 	b.w	8012010 <_fflush_r>
 80104fc:	bd10      	pop	{r4, pc}
 80104fe:	bf00      	nop
 8010500:	24002588 	.word	0x24002588
 8010504:	240025f0 	.word	0x240025f0
 8010508:	24002658 	.word	0x24002658

0801050c <global_stdio_init.part.0>:
 801050c:	b510      	push	{r4, lr}
 801050e:	4b0b      	ldr	r3, [pc, #44]	@ (801053c <global_stdio_init.part.0+0x30>)
 8010510:	4c0b      	ldr	r4, [pc, #44]	@ (8010540 <global_stdio_init.part.0+0x34>)
 8010512:	4a0c      	ldr	r2, [pc, #48]	@ (8010544 <global_stdio_init.part.0+0x38>)
 8010514:	601a      	str	r2, [r3, #0]
 8010516:	4620      	mov	r0, r4
 8010518:	2200      	movs	r2, #0
 801051a:	2104      	movs	r1, #4
 801051c:	f7ff ff94 	bl	8010448 <std>
 8010520:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010524:	2201      	movs	r2, #1
 8010526:	2109      	movs	r1, #9
 8010528:	f7ff ff8e 	bl	8010448 <std>
 801052c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010530:	2202      	movs	r2, #2
 8010532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010536:	2112      	movs	r1, #18
 8010538:	f7ff bf86 	b.w	8010448 <std>
 801053c:	240026c0 	.word	0x240026c0
 8010540:	24002588 	.word	0x24002588
 8010544:	080104b5 	.word	0x080104b5

08010548 <__sfp_lock_acquire>:
 8010548:	4801      	ldr	r0, [pc, #4]	@ (8010550 <__sfp_lock_acquire+0x8>)
 801054a:	f000 b920 	b.w	801078e <__retarget_lock_acquire_recursive>
 801054e:	bf00      	nop
 8010550:	240026c9 	.word	0x240026c9

08010554 <__sfp_lock_release>:
 8010554:	4801      	ldr	r0, [pc, #4]	@ (801055c <__sfp_lock_release+0x8>)
 8010556:	f000 b91b 	b.w	8010790 <__retarget_lock_release_recursive>
 801055a:	bf00      	nop
 801055c:	240026c9 	.word	0x240026c9

08010560 <__sinit>:
 8010560:	b510      	push	{r4, lr}
 8010562:	4604      	mov	r4, r0
 8010564:	f7ff fff0 	bl	8010548 <__sfp_lock_acquire>
 8010568:	6a23      	ldr	r3, [r4, #32]
 801056a:	b11b      	cbz	r3, 8010574 <__sinit+0x14>
 801056c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010570:	f7ff bff0 	b.w	8010554 <__sfp_lock_release>
 8010574:	4b04      	ldr	r3, [pc, #16]	@ (8010588 <__sinit+0x28>)
 8010576:	6223      	str	r3, [r4, #32]
 8010578:	4b04      	ldr	r3, [pc, #16]	@ (801058c <__sinit+0x2c>)
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d1f5      	bne.n	801056c <__sinit+0xc>
 8010580:	f7ff ffc4 	bl	801050c <global_stdio_init.part.0>
 8010584:	e7f2      	b.n	801056c <__sinit+0xc>
 8010586:	bf00      	nop
 8010588:	080104cd 	.word	0x080104cd
 801058c:	240026c0 	.word	0x240026c0

08010590 <_fwalk_sglue>:
 8010590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010594:	4607      	mov	r7, r0
 8010596:	4688      	mov	r8, r1
 8010598:	4614      	mov	r4, r2
 801059a:	2600      	movs	r6, #0
 801059c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80105a0:	f1b9 0901 	subs.w	r9, r9, #1
 80105a4:	d505      	bpl.n	80105b2 <_fwalk_sglue+0x22>
 80105a6:	6824      	ldr	r4, [r4, #0]
 80105a8:	2c00      	cmp	r4, #0
 80105aa:	d1f7      	bne.n	801059c <_fwalk_sglue+0xc>
 80105ac:	4630      	mov	r0, r6
 80105ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105b2:	89ab      	ldrh	r3, [r5, #12]
 80105b4:	2b01      	cmp	r3, #1
 80105b6:	d907      	bls.n	80105c8 <_fwalk_sglue+0x38>
 80105b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80105bc:	3301      	adds	r3, #1
 80105be:	d003      	beq.n	80105c8 <_fwalk_sglue+0x38>
 80105c0:	4629      	mov	r1, r5
 80105c2:	4638      	mov	r0, r7
 80105c4:	47c0      	blx	r8
 80105c6:	4306      	orrs	r6, r0
 80105c8:	3568      	adds	r5, #104	@ 0x68
 80105ca:	e7e9      	b.n	80105a0 <_fwalk_sglue+0x10>

080105cc <siprintf>:
 80105cc:	b40e      	push	{r1, r2, r3}
 80105ce:	b500      	push	{lr}
 80105d0:	b09c      	sub	sp, #112	@ 0x70
 80105d2:	ab1d      	add	r3, sp, #116	@ 0x74
 80105d4:	9002      	str	r0, [sp, #8]
 80105d6:	9006      	str	r0, [sp, #24]
 80105d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80105dc:	4809      	ldr	r0, [pc, #36]	@ (8010604 <siprintf+0x38>)
 80105de:	9107      	str	r1, [sp, #28]
 80105e0:	9104      	str	r1, [sp, #16]
 80105e2:	4909      	ldr	r1, [pc, #36]	@ (8010608 <siprintf+0x3c>)
 80105e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80105e8:	9105      	str	r1, [sp, #20]
 80105ea:	6800      	ldr	r0, [r0, #0]
 80105ec:	9301      	str	r3, [sp, #4]
 80105ee:	a902      	add	r1, sp, #8
 80105f0:	f001 fb8e 	bl	8011d10 <_svfiprintf_r>
 80105f4:	9b02      	ldr	r3, [sp, #8]
 80105f6:	2200      	movs	r2, #0
 80105f8:	701a      	strb	r2, [r3, #0]
 80105fa:	b01c      	add	sp, #112	@ 0x70
 80105fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8010600:	b003      	add	sp, #12
 8010602:	4770      	bx	lr
 8010604:	24000138 	.word	0x24000138
 8010608:	ffff0208 	.word	0xffff0208

0801060c <__sread>:
 801060c:	b510      	push	{r4, lr}
 801060e:	460c      	mov	r4, r1
 8010610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010614:	f000 f86c 	bl	80106f0 <_read_r>
 8010618:	2800      	cmp	r0, #0
 801061a:	bfab      	itete	ge
 801061c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801061e:	89a3      	ldrhlt	r3, [r4, #12]
 8010620:	181b      	addge	r3, r3, r0
 8010622:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010626:	bfac      	ite	ge
 8010628:	6563      	strge	r3, [r4, #84]	@ 0x54
 801062a:	81a3      	strhlt	r3, [r4, #12]
 801062c:	bd10      	pop	{r4, pc}

0801062e <__swrite>:
 801062e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010632:	461f      	mov	r7, r3
 8010634:	898b      	ldrh	r3, [r1, #12]
 8010636:	05db      	lsls	r3, r3, #23
 8010638:	4605      	mov	r5, r0
 801063a:	460c      	mov	r4, r1
 801063c:	4616      	mov	r6, r2
 801063e:	d505      	bpl.n	801064c <__swrite+0x1e>
 8010640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010644:	2302      	movs	r3, #2
 8010646:	2200      	movs	r2, #0
 8010648:	f000 f840 	bl	80106cc <_lseek_r>
 801064c:	89a3      	ldrh	r3, [r4, #12]
 801064e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010652:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010656:	81a3      	strh	r3, [r4, #12]
 8010658:	4632      	mov	r2, r6
 801065a:	463b      	mov	r3, r7
 801065c:	4628      	mov	r0, r5
 801065e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010662:	f000 b857 	b.w	8010714 <_write_r>

08010666 <__sseek>:
 8010666:	b510      	push	{r4, lr}
 8010668:	460c      	mov	r4, r1
 801066a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801066e:	f000 f82d 	bl	80106cc <_lseek_r>
 8010672:	1c43      	adds	r3, r0, #1
 8010674:	89a3      	ldrh	r3, [r4, #12]
 8010676:	bf15      	itete	ne
 8010678:	6560      	strne	r0, [r4, #84]	@ 0x54
 801067a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801067e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010682:	81a3      	strheq	r3, [r4, #12]
 8010684:	bf18      	it	ne
 8010686:	81a3      	strhne	r3, [r4, #12]
 8010688:	bd10      	pop	{r4, pc}

0801068a <__sclose>:
 801068a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801068e:	f000 b80d 	b.w	80106ac <_close_r>

08010692 <memset>:
 8010692:	4402      	add	r2, r0
 8010694:	4603      	mov	r3, r0
 8010696:	4293      	cmp	r3, r2
 8010698:	d100      	bne.n	801069c <memset+0xa>
 801069a:	4770      	bx	lr
 801069c:	f803 1b01 	strb.w	r1, [r3], #1
 80106a0:	e7f9      	b.n	8010696 <memset+0x4>
	...

080106a4 <_localeconv_r>:
 80106a4:	4800      	ldr	r0, [pc, #0]	@ (80106a8 <_localeconv_r+0x4>)
 80106a6:	4770      	bx	lr
 80106a8:	24000278 	.word	0x24000278

080106ac <_close_r>:
 80106ac:	b538      	push	{r3, r4, r5, lr}
 80106ae:	4d06      	ldr	r5, [pc, #24]	@ (80106c8 <_close_r+0x1c>)
 80106b0:	2300      	movs	r3, #0
 80106b2:	4604      	mov	r4, r0
 80106b4:	4608      	mov	r0, r1
 80106b6:	602b      	str	r3, [r5, #0]
 80106b8:	f7f0 ffd8 	bl	800166c <_close>
 80106bc:	1c43      	adds	r3, r0, #1
 80106be:	d102      	bne.n	80106c6 <_close_r+0x1a>
 80106c0:	682b      	ldr	r3, [r5, #0]
 80106c2:	b103      	cbz	r3, 80106c6 <_close_r+0x1a>
 80106c4:	6023      	str	r3, [r4, #0]
 80106c6:	bd38      	pop	{r3, r4, r5, pc}
 80106c8:	240026c4 	.word	0x240026c4

080106cc <_lseek_r>:
 80106cc:	b538      	push	{r3, r4, r5, lr}
 80106ce:	4d07      	ldr	r5, [pc, #28]	@ (80106ec <_lseek_r+0x20>)
 80106d0:	4604      	mov	r4, r0
 80106d2:	4608      	mov	r0, r1
 80106d4:	4611      	mov	r1, r2
 80106d6:	2200      	movs	r2, #0
 80106d8:	602a      	str	r2, [r5, #0]
 80106da:	461a      	mov	r2, r3
 80106dc:	f7f0 ffed 	bl	80016ba <_lseek>
 80106e0:	1c43      	adds	r3, r0, #1
 80106e2:	d102      	bne.n	80106ea <_lseek_r+0x1e>
 80106e4:	682b      	ldr	r3, [r5, #0]
 80106e6:	b103      	cbz	r3, 80106ea <_lseek_r+0x1e>
 80106e8:	6023      	str	r3, [r4, #0]
 80106ea:	bd38      	pop	{r3, r4, r5, pc}
 80106ec:	240026c4 	.word	0x240026c4

080106f0 <_read_r>:
 80106f0:	b538      	push	{r3, r4, r5, lr}
 80106f2:	4d07      	ldr	r5, [pc, #28]	@ (8010710 <_read_r+0x20>)
 80106f4:	4604      	mov	r4, r0
 80106f6:	4608      	mov	r0, r1
 80106f8:	4611      	mov	r1, r2
 80106fa:	2200      	movs	r2, #0
 80106fc:	602a      	str	r2, [r5, #0]
 80106fe:	461a      	mov	r2, r3
 8010700:	f7f0 ff7b 	bl	80015fa <_read>
 8010704:	1c43      	adds	r3, r0, #1
 8010706:	d102      	bne.n	801070e <_read_r+0x1e>
 8010708:	682b      	ldr	r3, [r5, #0]
 801070a:	b103      	cbz	r3, 801070e <_read_r+0x1e>
 801070c:	6023      	str	r3, [r4, #0]
 801070e:	bd38      	pop	{r3, r4, r5, pc}
 8010710:	240026c4 	.word	0x240026c4

08010714 <_write_r>:
 8010714:	b538      	push	{r3, r4, r5, lr}
 8010716:	4d07      	ldr	r5, [pc, #28]	@ (8010734 <_write_r+0x20>)
 8010718:	4604      	mov	r4, r0
 801071a:	4608      	mov	r0, r1
 801071c:	4611      	mov	r1, r2
 801071e:	2200      	movs	r2, #0
 8010720:	602a      	str	r2, [r5, #0]
 8010722:	461a      	mov	r2, r3
 8010724:	f7f0 ff86 	bl	8001634 <_write>
 8010728:	1c43      	adds	r3, r0, #1
 801072a:	d102      	bne.n	8010732 <_write_r+0x1e>
 801072c:	682b      	ldr	r3, [r5, #0]
 801072e:	b103      	cbz	r3, 8010732 <_write_r+0x1e>
 8010730:	6023      	str	r3, [r4, #0]
 8010732:	bd38      	pop	{r3, r4, r5, pc}
 8010734:	240026c4 	.word	0x240026c4

08010738 <__errno>:
 8010738:	4b01      	ldr	r3, [pc, #4]	@ (8010740 <__errno+0x8>)
 801073a:	6818      	ldr	r0, [r3, #0]
 801073c:	4770      	bx	lr
 801073e:	bf00      	nop
 8010740:	24000138 	.word	0x24000138

08010744 <__libc_init_array>:
 8010744:	b570      	push	{r4, r5, r6, lr}
 8010746:	4d0d      	ldr	r5, [pc, #52]	@ (801077c <__libc_init_array+0x38>)
 8010748:	4c0d      	ldr	r4, [pc, #52]	@ (8010780 <__libc_init_array+0x3c>)
 801074a:	1b64      	subs	r4, r4, r5
 801074c:	10a4      	asrs	r4, r4, #2
 801074e:	2600      	movs	r6, #0
 8010750:	42a6      	cmp	r6, r4
 8010752:	d109      	bne.n	8010768 <__libc_init_array+0x24>
 8010754:	4d0b      	ldr	r5, [pc, #44]	@ (8010784 <__libc_init_array+0x40>)
 8010756:	4c0c      	ldr	r4, [pc, #48]	@ (8010788 <__libc_init_array+0x44>)
 8010758:	f002 f838 	bl	80127cc <_init>
 801075c:	1b64      	subs	r4, r4, r5
 801075e:	10a4      	asrs	r4, r4, #2
 8010760:	2600      	movs	r6, #0
 8010762:	42a6      	cmp	r6, r4
 8010764:	d105      	bne.n	8010772 <__libc_init_array+0x2e>
 8010766:	bd70      	pop	{r4, r5, r6, pc}
 8010768:	f855 3b04 	ldr.w	r3, [r5], #4
 801076c:	4798      	blx	r3
 801076e:	3601      	adds	r6, #1
 8010770:	e7ee      	b.n	8010750 <__libc_init_array+0xc>
 8010772:	f855 3b04 	ldr.w	r3, [r5], #4
 8010776:	4798      	blx	r3
 8010778:	3601      	adds	r6, #1
 801077a:	e7f2      	b.n	8010762 <__libc_init_array+0x1e>
 801077c:	08012c08 	.word	0x08012c08
 8010780:	08012c08 	.word	0x08012c08
 8010784:	08012c08 	.word	0x08012c08
 8010788:	08012c0c 	.word	0x08012c0c

0801078c <__retarget_lock_init_recursive>:
 801078c:	4770      	bx	lr

0801078e <__retarget_lock_acquire_recursive>:
 801078e:	4770      	bx	lr

08010790 <__retarget_lock_release_recursive>:
 8010790:	4770      	bx	lr

08010792 <quorem>:
 8010792:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010796:	6903      	ldr	r3, [r0, #16]
 8010798:	690c      	ldr	r4, [r1, #16]
 801079a:	42a3      	cmp	r3, r4
 801079c:	4607      	mov	r7, r0
 801079e:	db7e      	blt.n	801089e <quorem+0x10c>
 80107a0:	3c01      	subs	r4, #1
 80107a2:	f101 0814 	add.w	r8, r1, #20
 80107a6:	00a3      	lsls	r3, r4, #2
 80107a8:	f100 0514 	add.w	r5, r0, #20
 80107ac:	9300      	str	r3, [sp, #0]
 80107ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80107b2:	9301      	str	r3, [sp, #4]
 80107b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80107b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80107bc:	3301      	adds	r3, #1
 80107be:	429a      	cmp	r2, r3
 80107c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80107c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80107c8:	d32e      	bcc.n	8010828 <quorem+0x96>
 80107ca:	f04f 0a00 	mov.w	sl, #0
 80107ce:	46c4      	mov	ip, r8
 80107d0:	46ae      	mov	lr, r5
 80107d2:	46d3      	mov	fp, sl
 80107d4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80107d8:	b298      	uxth	r0, r3
 80107da:	fb06 a000 	mla	r0, r6, r0, sl
 80107de:	0c02      	lsrs	r2, r0, #16
 80107e0:	0c1b      	lsrs	r3, r3, #16
 80107e2:	fb06 2303 	mla	r3, r6, r3, r2
 80107e6:	f8de 2000 	ldr.w	r2, [lr]
 80107ea:	b280      	uxth	r0, r0
 80107ec:	b292      	uxth	r2, r2
 80107ee:	1a12      	subs	r2, r2, r0
 80107f0:	445a      	add	r2, fp
 80107f2:	f8de 0000 	ldr.w	r0, [lr]
 80107f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80107fa:	b29b      	uxth	r3, r3
 80107fc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010800:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010804:	b292      	uxth	r2, r2
 8010806:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801080a:	45e1      	cmp	r9, ip
 801080c:	f84e 2b04 	str.w	r2, [lr], #4
 8010810:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010814:	d2de      	bcs.n	80107d4 <quorem+0x42>
 8010816:	9b00      	ldr	r3, [sp, #0]
 8010818:	58eb      	ldr	r3, [r5, r3]
 801081a:	b92b      	cbnz	r3, 8010828 <quorem+0x96>
 801081c:	9b01      	ldr	r3, [sp, #4]
 801081e:	3b04      	subs	r3, #4
 8010820:	429d      	cmp	r5, r3
 8010822:	461a      	mov	r2, r3
 8010824:	d32f      	bcc.n	8010886 <quorem+0xf4>
 8010826:	613c      	str	r4, [r7, #16]
 8010828:	4638      	mov	r0, r7
 801082a:	f001 f90d 	bl	8011a48 <__mcmp>
 801082e:	2800      	cmp	r0, #0
 8010830:	db25      	blt.n	801087e <quorem+0xec>
 8010832:	4629      	mov	r1, r5
 8010834:	2000      	movs	r0, #0
 8010836:	f858 2b04 	ldr.w	r2, [r8], #4
 801083a:	f8d1 c000 	ldr.w	ip, [r1]
 801083e:	fa1f fe82 	uxth.w	lr, r2
 8010842:	fa1f f38c 	uxth.w	r3, ip
 8010846:	eba3 030e 	sub.w	r3, r3, lr
 801084a:	4403      	add	r3, r0
 801084c:	0c12      	lsrs	r2, r2, #16
 801084e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010852:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010856:	b29b      	uxth	r3, r3
 8010858:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801085c:	45c1      	cmp	r9, r8
 801085e:	f841 3b04 	str.w	r3, [r1], #4
 8010862:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010866:	d2e6      	bcs.n	8010836 <quorem+0xa4>
 8010868:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801086c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010870:	b922      	cbnz	r2, 801087c <quorem+0xea>
 8010872:	3b04      	subs	r3, #4
 8010874:	429d      	cmp	r5, r3
 8010876:	461a      	mov	r2, r3
 8010878:	d30b      	bcc.n	8010892 <quorem+0x100>
 801087a:	613c      	str	r4, [r7, #16]
 801087c:	3601      	adds	r6, #1
 801087e:	4630      	mov	r0, r6
 8010880:	b003      	add	sp, #12
 8010882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010886:	6812      	ldr	r2, [r2, #0]
 8010888:	3b04      	subs	r3, #4
 801088a:	2a00      	cmp	r2, #0
 801088c:	d1cb      	bne.n	8010826 <quorem+0x94>
 801088e:	3c01      	subs	r4, #1
 8010890:	e7c6      	b.n	8010820 <quorem+0x8e>
 8010892:	6812      	ldr	r2, [r2, #0]
 8010894:	3b04      	subs	r3, #4
 8010896:	2a00      	cmp	r2, #0
 8010898:	d1ef      	bne.n	801087a <quorem+0xe8>
 801089a:	3c01      	subs	r4, #1
 801089c:	e7ea      	b.n	8010874 <quorem+0xe2>
 801089e:	2000      	movs	r0, #0
 80108a0:	e7ee      	b.n	8010880 <quorem+0xee>
 80108a2:	0000      	movs	r0, r0
 80108a4:	0000      	movs	r0, r0
	...

080108a8 <_dtoa_r>:
 80108a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108ac:	ed2d 8b02 	vpush	{d8}
 80108b0:	69c7      	ldr	r7, [r0, #28]
 80108b2:	b091      	sub	sp, #68	@ 0x44
 80108b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80108b8:	ec55 4b10 	vmov	r4, r5, d0
 80108bc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80108be:	9107      	str	r1, [sp, #28]
 80108c0:	4681      	mov	r9, r0
 80108c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80108c4:	930d      	str	r3, [sp, #52]	@ 0x34
 80108c6:	b97f      	cbnz	r7, 80108e8 <_dtoa_r+0x40>
 80108c8:	2010      	movs	r0, #16
 80108ca:	f000 fd8d 	bl	80113e8 <malloc>
 80108ce:	4602      	mov	r2, r0
 80108d0:	f8c9 001c 	str.w	r0, [r9, #28]
 80108d4:	b920      	cbnz	r0, 80108e0 <_dtoa_r+0x38>
 80108d6:	4ba0      	ldr	r3, [pc, #640]	@ (8010b58 <_dtoa_r+0x2b0>)
 80108d8:	21ef      	movs	r1, #239	@ 0xef
 80108da:	48a0      	ldr	r0, [pc, #640]	@ (8010b5c <_dtoa_r+0x2b4>)
 80108dc:	f001 fbf8 	bl	80120d0 <__assert_func>
 80108e0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80108e4:	6007      	str	r7, [r0, #0]
 80108e6:	60c7      	str	r7, [r0, #12]
 80108e8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80108ec:	6819      	ldr	r1, [r3, #0]
 80108ee:	b159      	cbz	r1, 8010908 <_dtoa_r+0x60>
 80108f0:	685a      	ldr	r2, [r3, #4]
 80108f2:	604a      	str	r2, [r1, #4]
 80108f4:	2301      	movs	r3, #1
 80108f6:	4093      	lsls	r3, r2
 80108f8:	608b      	str	r3, [r1, #8]
 80108fa:	4648      	mov	r0, r9
 80108fc:	f000 fe6a 	bl	80115d4 <_Bfree>
 8010900:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010904:	2200      	movs	r2, #0
 8010906:	601a      	str	r2, [r3, #0]
 8010908:	1e2b      	subs	r3, r5, #0
 801090a:	bfbb      	ittet	lt
 801090c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010910:	9303      	strlt	r3, [sp, #12]
 8010912:	2300      	movge	r3, #0
 8010914:	2201      	movlt	r2, #1
 8010916:	bfac      	ite	ge
 8010918:	6033      	strge	r3, [r6, #0]
 801091a:	6032      	strlt	r2, [r6, #0]
 801091c:	4b90      	ldr	r3, [pc, #576]	@ (8010b60 <_dtoa_r+0x2b8>)
 801091e:	9e03      	ldr	r6, [sp, #12]
 8010920:	43b3      	bics	r3, r6
 8010922:	d110      	bne.n	8010946 <_dtoa_r+0x9e>
 8010924:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010926:	f242 730f 	movw	r3, #9999	@ 0x270f
 801092a:	6013      	str	r3, [r2, #0]
 801092c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8010930:	4323      	orrs	r3, r4
 8010932:	f000 84de 	beq.w	80112f2 <_dtoa_r+0xa4a>
 8010936:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010938:	4f8a      	ldr	r7, [pc, #552]	@ (8010b64 <_dtoa_r+0x2bc>)
 801093a:	2b00      	cmp	r3, #0
 801093c:	f000 84e0 	beq.w	8011300 <_dtoa_r+0xa58>
 8010940:	1cfb      	adds	r3, r7, #3
 8010942:	f000 bcdb 	b.w	80112fc <_dtoa_r+0xa54>
 8010946:	ed9d 8b02 	vldr	d8, [sp, #8]
 801094a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801094e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010952:	d10a      	bne.n	801096a <_dtoa_r+0xc2>
 8010954:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010956:	2301      	movs	r3, #1
 8010958:	6013      	str	r3, [r2, #0]
 801095a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801095c:	b113      	cbz	r3, 8010964 <_dtoa_r+0xbc>
 801095e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8010960:	4b81      	ldr	r3, [pc, #516]	@ (8010b68 <_dtoa_r+0x2c0>)
 8010962:	6013      	str	r3, [r2, #0]
 8010964:	4f81      	ldr	r7, [pc, #516]	@ (8010b6c <_dtoa_r+0x2c4>)
 8010966:	f000 bccb 	b.w	8011300 <_dtoa_r+0xa58>
 801096a:	aa0e      	add	r2, sp, #56	@ 0x38
 801096c:	a90f      	add	r1, sp, #60	@ 0x3c
 801096e:	4648      	mov	r0, r9
 8010970:	eeb0 0b48 	vmov.f64	d0, d8
 8010974:	f001 f918 	bl	8011ba8 <__d2b>
 8010978:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801097c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801097e:	9001      	str	r0, [sp, #4]
 8010980:	2b00      	cmp	r3, #0
 8010982:	d045      	beq.n	8010a10 <_dtoa_r+0x168>
 8010984:	eeb0 7b48 	vmov.f64	d7, d8
 8010988:	ee18 1a90 	vmov	r1, s17
 801098c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010990:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8010994:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8010998:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801099c:	2500      	movs	r5, #0
 801099e:	ee07 1a90 	vmov	s15, r1
 80109a2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80109a6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8010b40 <_dtoa_r+0x298>
 80109aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80109ae:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8010b48 <_dtoa_r+0x2a0>
 80109b2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80109b6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8010b50 <_dtoa_r+0x2a8>
 80109ba:	ee07 3a90 	vmov	s15, r3
 80109be:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80109c2:	eeb0 7b46 	vmov.f64	d7, d6
 80109c6:	eea4 7b05 	vfma.f64	d7, d4, d5
 80109ca:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80109ce:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80109d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109d6:	ee16 8a90 	vmov	r8, s13
 80109da:	d508      	bpl.n	80109ee <_dtoa_r+0x146>
 80109dc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80109e0:	eeb4 6b47 	vcmp.f64	d6, d7
 80109e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109e8:	bf18      	it	ne
 80109ea:	f108 38ff 	addne.w	r8, r8, #4294967295
 80109ee:	f1b8 0f16 	cmp.w	r8, #22
 80109f2:	d82b      	bhi.n	8010a4c <_dtoa_r+0x1a4>
 80109f4:	495e      	ldr	r1, [pc, #376]	@ (8010b70 <_dtoa_r+0x2c8>)
 80109f6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80109fa:	ed91 7b00 	vldr	d7, [r1]
 80109fe:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a06:	d501      	bpl.n	8010a0c <_dtoa_r+0x164>
 8010a08:	f108 38ff 	add.w	r8, r8, #4294967295
 8010a0c:	2100      	movs	r1, #0
 8010a0e:	e01e      	b.n	8010a4e <_dtoa_r+0x1a6>
 8010a10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010a12:	4413      	add	r3, r2
 8010a14:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8010a18:	2920      	cmp	r1, #32
 8010a1a:	bfc1      	itttt	gt
 8010a1c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8010a20:	408e      	lslgt	r6, r1
 8010a22:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8010a26:	fa24 f101 	lsrgt.w	r1, r4, r1
 8010a2a:	bfd6      	itet	le
 8010a2c:	f1c1 0120 	rsble	r1, r1, #32
 8010a30:	4331      	orrgt	r1, r6
 8010a32:	fa04 f101 	lslle.w	r1, r4, r1
 8010a36:	ee07 1a90 	vmov	s15, r1
 8010a3a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010a3e:	3b01      	subs	r3, #1
 8010a40:	ee17 1a90 	vmov	r1, s15
 8010a44:	2501      	movs	r5, #1
 8010a46:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8010a4a:	e7a8      	b.n	801099e <_dtoa_r+0xf6>
 8010a4c:	2101      	movs	r1, #1
 8010a4e:	1ad2      	subs	r2, r2, r3
 8010a50:	1e53      	subs	r3, r2, #1
 8010a52:	9306      	str	r3, [sp, #24]
 8010a54:	bf45      	ittet	mi
 8010a56:	f1c2 0301 	rsbmi	r3, r2, #1
 8010a5a:	9305      	strmi	r3, [sp, #20]
 8010a5c:	2300      	movpl	r3, #0
 8010a5e:	2300      	movmi	r3, #0
 8010a60:	bf4c      	ite	mi
 8010a62:	9306      	strmi	r3, [sp, #24]
 8010a64:	9305      	strpl	r3, [sp, #20]
 8010a66:	f1b8 0f00 	cmp.w	r8, #0
 8010a6a:	910c      	str	r1, [sp, #48]	@ 0x30
 8010a6c:	db18      	blt.n	8010aa0 <_dtoa_r+0x1f8>
 8010a6e:	9b06      	ldr	r3, [sp, #24]
 8010a70:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8010a74:	4443      	add	r3, r8
 8010a76:	9306      	str	r3, [sp, #24]
 8010a78:	2300      	movs	r3, #0
 8010a7a:	9a07      	ldr	r2, [sp, #28]
 8010a7c:	2a09      	cmp	r2, #9
 8010a7e:	d849      	bhi.n	8010b14 <_dtoa_r+0x26c>
 8010a80:	2a05      	cmp	r2, #5
 8010a82:	bfc4      	itt	gt
 8010a84:	3a04      	subgt	r2, #4
 8010a86:	9207      	strgt	r2, [sp, #28]
 8010a88:	9a07      	ldr	r2, [sp, #28]
 8010a8a:	f1a2 0202 	sub.w	r2, r2, #2
 8010a8e:	bfcc      	ite	gt
 8010a90:	2400      	movgt	r4, #0
 8010a92:	2401      	movle	r4, #1
 8010a94:	2a03      	cmp	r2, #3
 8010a96:	d848      	bhi.n	8010b2a <_dtoa_r+0x282>
 8010a98:	e8df f002 	tbb	[pc, r2]
 8010a9c:	3a2c2e0b 	.word	0x3a2c2e0b
 8010aa0:	9b05      	ldr	r3, [sp, #20]
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	eba3 0308 	sub.w	r3, r3, r8
 8010aa8:	9305      	str	r3, [sp, #20]
 8010aaa:	920a      	str	r2, [sp, #40]	@ 0x28
 8010aac:	f1c8 0300 	rsb	r3, r8, #0
 8010ab0:	e7e3      	b.n	8010a7a <_dtoa_r+0x1d2>
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	9208      	str	r2, [sp, #32]
 8010ab6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010ab8:	2a00      	cmp	r2, #0
 8010aba:	dc39      	bgt.n	8010b30 <_dtoa_r+0x288>
 8010abc:	f04f 0b01 	mov.w	fp, #1
 8010ac0:	46da      	mov	sl, fp
 8010ac2:	465a      	mov	r2, fp
 8010ac4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8010ac8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8010acc:	2100      	movs	r1, #0
 8010ace:	2004      	movs	r0, #4
 8010ad0:	f100 0614 	add.w	r6, r0, #20
 8010ad4:	4296      	cmp	r6, r2
 8010ad6:	d930      	bls.n	8010b3a <_dtoa_r+0x292>
 8010ad8:	6079      	str	r1, [r7, #4]
 8010ada:	4648      	mov	r0, r9
 8010adc:	9304      	str	r3, [sp, #16]
 8010ade:	f000 fd39 	bl	8011554 <_Balloc>
 8010ae2:	9b04      	ldr	r3, [sp, #16]
 8010ae4:	4607      	mov	r7, r0
 8010ae6:	2800      	cmp	r0, #0
 8010ae8:	d146      	bne.n	8010b78 <_dtoa_r+0x2d0>
 8010aea:	4b22      	ldr	r3, [pc, #136]	@ (8010b74 <_dtoa_r+0x2cc>)
 8010aec:	4602      	mov	r2, r0
 8010aee:	f240 11af 	movw	r1, #431	@ 0x1af
 8010af2:	e6f2      	b.n	80108da <_dtoa_r+0x32>
 8010af4:	2201      	movs	r2, #1
 8010af6:	e7dd      	b.n	8010ab4 <_dtoa_r+0x20c>
 8010af8:	2200      	movs	r2, #0
 8010afa:	9208      	str	r2, [sp, #32]
 8010afc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010afe:	eb08 0b02 	add.w	fp, r8, r2
 8010b02:	f10b 0a01 	add.w	sl, fp, #1
 8010b06:	4652      	mov	r2, sl
 8010b08:	2a01      	cmp	r2, #1
 8010b0a:	bfb8      	it	lt
 8010b0c:	2201      	movlt	r2, #1
 8010b0e:	e7db      	b.n	8010ac8 <_dtoa_r+0x220>
 8010b10:	2201      	movs	r2, #1
 8010b12:	e7f2      	b.n	8010afa <_dtoa_r+0x252>
 8010b14:	2401      	movs	r4, #1
 8010b16:	2200      	movs	r2, #0
 8010b18:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8010b1c:	f04f 3bff 	mov.w	fp, #4294967295
 8010b20:	2100      	movs	r1, #0
 8010b22:	46da      	mov	sl, fp
 8010b24:	2212      	movs	r2, #18
 8010b26:	9109      	str	r1, [sp, #36]	@ 0x24
 8010b28:	e7ce      	b.n	8010ac8 <_dtoa_r+0x220>
 8010b2a:	2201      	movs	r2, #1
 8010b2c:	9208      	str	r2, [sp, #32]
 8010b2e:	e7f5      	b.n	8010b1c <_dtoa_r+0x274>
 8010b30:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8010b34:	46da      	mov	sl, fp
 8010b36:	465a      	mov	r2, fp
 8010b38:	e7c6      	b.n	8010ac8 <_dtoa_r+0x220>
 8010b3a:	3101      	adds	r1, #1
 8010b3c:	0040      	lsls	r0, r0, #1
 8010b3e:	e7c7      	b.n	8010ad0 <_dtoa_r+0x228>
 8010b40:	636f4361 	.word	0x636f4361
 8010b44:	3fd287a7 	.word	0x3fd287a7
 8010b48:	8b60c8b3 	.word	0x8b60c8b3
 8010b4c:	3fc68a28 	.word	0x3fc68a28
 8010b50:	509f79fb 	.word	0x509f79fb
 8010b54:	3fd34413 	.word	0x3fd34413
 8010b58:	080128c9 	.word	0x080128c9
 8010b5c:	080128e0 	.word	0x080128e0
 8010b60:	7ff00000 	.word	0x7ff00000
 8010b64:	080128c5 	.word	0x080128c5
 8010b68:	08012899 	.word	0x08012899
 8010b6c:	08012898 	.word	0x08012898
 8010b70:	080129d8 	.word	0x080129d8
 8010b74:	08012938 	.word	0x08012938
 8010b78:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8010b7c:	f1ba 0f0e 	cmp.w	sl, #14
 8010b80:	6010      	str	r0, [r2, #0]
 8010b82:	d86f      	bhi.n	8010c64 <_dtoa_r+0x3bc>
 8010b84:	2c00      	cmp	r4, #0
 8010b86:	d06d      	beq.n	8010c64 <_dtoa_r+0x3bc>
 8010b88:	f1b8 0f00 	cmp.w	r8, #0
 8010b8c:	f340 80c2 	ble.w	8010d14 <_dtoa_r+0x46c>
 8010b90:	4aca      	ldr	r2, [pc, #808]	@ (8010ebc <_dtoa_r+0x614>)
 8010b92:	f008 010f 	and.w	r1, r8, #15
 8010b96:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8010b9a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8010b9e:	ed92 7b00 	vldr	d7, [r2]
 8010ba2:	ea4f 1128 	mov.w	r1, r8, asr #4
 8010ba6:	f000 80a9 	beq.w	8010cfc <_dtoa_r+0x454>
 8010baa:	4ac5      	ldr	r2, [pc, #788]	@ (8010ec0 <_dtoa_r+0x618>)
 8010bac:	ed92 6b08 	vldr	d6, [r2, #32]
 8010bb0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8010bb4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010bb8:	f001 010f 	and.w	r1, r1, #15
 8010bbc:	2203      	movs	r2, #3
 8010bbe:	48c0      	ldr	r0, [pc, #768]	@ (8010ec0 <_dtoa_r+0x618>)
 8010bc0:	2900      	cmp	r1, #0
 8010bc2:	f040 809d 	bne.w	8010d00 <_dtoa_r+0x458>
 8010bc6:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010bca:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010bce:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010bd2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010bd4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010bd8:	2900      	cmp	r1, #0
 8010bda:	f000 80c1 	beq.w	8010d60 <_dtoa_r+0x4b8>
 8010bde:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8010be2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bea:	f140 80b9 	bpl.w	8010d60 <_dtoa_r+0x4b8>
 8010bee:	f1ba 0f00 	cmp.w	sl, #0
 8010bf2:	f000 80b5 	beq.w	8010d60 <_dtoa_r+0x4b8>
 8010bf6:	f1bb 0f00 	cmp.w	fp, #0
 8010bfa:	dd31      	ble.n	8010c60 <_dtoa_r+0x3b8>
 8010bfc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8010c00:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010c04:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010c08:	f108 31ff 	add.w	r1, r8, #4294967295
 8010c0c:	9104      	str	r1, [sp, #16]
 8010c0e:	3201      	adds	r2, #1
 8010c10:	465c      	mov	r4, fp
 8010c12:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010c16:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8010c1a:	ee07 2a90 	vmov	s15, r2
 8010c1e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010c22:	eea7 5b06 	vfma.f64	d5, d7, d6
 8010c26:	ee15 2a90 	vmov	r2, s11
 8010c2a:	ec51 0b15 	vmov	r0, r1, d5
 8010c2e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8010c32:	2c00      	cmp	r4, #0
 8010c34:	f040 8098 	bne.w	8010d68 <_dtoa_r+0x4c0>
 8010c38:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8010c3c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010c40:	ec41 0b17 	vmov	d7, r0, r1
 8010c44:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c4c:	f300 8261 	bgt.w	8011112 <_dtoa_r+0x86a>
 8010c50:	eeb1 7b47 	vneg.f64	d7, d7
 8010c54:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c5c:	f100 80f5 	bmi.w	8010e4a <_dtoa_r+0x5a2>
 8010c60:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010c64:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010c66:	2a00      	cmp	r2, #0
 8010c68:	f2c0 812c 	blt.w	8010ec4 <_dtoa_r+0x61c>
 8010c6c:	f1b8 0f0e 	cmp.w	r8, #14
 8010c70:	f300 8128 	bgt.w	8010ec4 <_dtoa_r+0x61c>
 8010c74:	4b91      	ldr	r3, [pc, #580]	@ (8010ebc <_dtoa_r+0x614>)
 8010c76:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010c7a:	ed93 6b00 	vldr	d6, [r3]
 8010c7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	da03      	bge.n	8010c8c <_dtoa_r+0x3e4>
 8010c84:	f1ba 0f00 	cmp.w	sl, #0
 8010c88:	f340 80d2 	ble.w	8010e30 <_dtoa_r+0x588>
 8010c8c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8010c90:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010c94:	463e      	mov	r6, r7
 8010c96:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8010c9a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8010c9e:	ee15 3a10 	vmov	r3, s10
 8010ca2:	3330      	adds	r3, #48	@ 0x30
 8010ca4:	f806 3b01 	strb.w	r3, [r6], #1
 8010ca8:	1bf3      	subs	r3, r6, r7
 8010caa:	459a      	cmp	sl, r3
 8010cac:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010cb0:	eea3 7b46 	vfms.f64	d7, d3, d6
 8010cb4:	f040 80f8 	bne.w	8010ea8 <_dtoa_r+0x600>
 8010cb8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010cbc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cc4:	f300 80dd 	bgt.w	8010e82 <_dtoa_r+0x5da>
 8010cc8:	eeb4 7b46 	vcmp.f64	d7, d6
 8010ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cd0:	d104      	bne.n	8010cdc <_dtoa_r+0x434>
 8010cd2:	ee15 3a10 	vmov	r3, s10
 8010cd6:	07db      	lsls	r3, r3, #31
 8010cd8:	f100 80d3 	bmi.w	8010e82 <_dtoa_r+0x5da>
 8010cdc:	9901      	ldr	r1, [sp, #4]
 8010cde:	4648      	mov	r0, r9
 8010ce0:	f000 fc78 	bl	80115d4 <_Bfree>
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010ce8:	7033      	strb	r3, [r6, #0]
 8010cea:	f108 0301 	add.w	r3, r8, #1
 8010cee:	6013      	str	r3, [r2, #0]
 8010cf0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	f000 8304 	beq.w	8011300 <_dtoa_r+0xa58>
 8010cf8:	601e      	str	r6, [r3, #0]
 8010cfa:	e301      	b.n	8011300 <_dtoa_r+0xa58>
 8010cfc:	2202      	movs	r2, #2
 8010cfe:	e75e      	b.n	8010bbe <_dtoa_r+0x316>
 8010d00:	07cc      	lsls	r4, r1, #31
 8010d02:	d504      	bpl.n	8010d0e <_dtoa_r+0x466>
 8010d04:	ed90 6b00 	vldr	d6, [r0]
 8010d08:	3201      	adds	r2, #1
 8010d0a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010d0e:	1049      	asrs	r1, r1, #1
 8010d10:	3008      	adds	r0, #8
 8010d12:	e755      	b.n	8010bc0 <_dtoa_r+0x318>
 8010d14:	d022      	beq.n	8010d5c <_dtoa_r+0x4b4>
 8010d16:	f1c8 0100 	rsb	r1, r8, #0
 8010d1a:	4a68      	ldr	r2, [pc, #416]	@ (8010ebc <_dtoa_r+0x614>)
 8010d1c:	f001 000f 	and.w	r0, r1, #15
 8010d20:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010d24:	ed92 7b00 	vldr	d7, [r2]
 8010d28:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010d2c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010d30:	4863      	ldr	r0, [pc, #396]	@ (8010ec0 <_dtoa_r+0x618>)
 8010d32:	1109      	asrs	r1, r1, #4
 8010d34:	2400      	movs	r4, #0
 8010d36:	2202      	movs	r2, #2
 8010d38:	b929      	cbnz	r1, 8010d46 <_dtoa_r+0x49e>
 8010d3a:	2c00      	cmp	r4, #0
 8010d3c:	f43f af49 	beq.w	8010bd2 <_dtoa_r+0x32a>
 8010d40:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010d44:	e745      	b.n	8010bd2 <_dtoa_r+0x32a>
 8010d46:	07ce      	lsls	r6, r1, #31
 8010d48:	d505      	bpl.n	8010d56 <_dtoa_r+0x4ae>
 8010d4a:	ed90 6b00 	vldr	d6, [r0]
 8010d4e:	3201      	adds	r2, #1
 8010d50:	2401      	movs	r4, #1
 8010d52:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010d56:	1049      	asrs	r1, r1, #1
 8010d58:	3008      	adds	r0, #8
 8010d5a:	e7ed      	b.n	8010d38 <_dtoa_r+0x490>
 8010d5c:	2202      	movs	r2, #2
 8010d5e:	e738      	b.n	8010bd2 <_dtoa_r+0x32a>
 8010d60:	f8cd 8010 	str.w	r8, [sp, #16]
 8010d64:	4654      	mov	r4, sl
 8010d66:	e754      	b.n	8010c12 <_dtoa_r+0x36a>
 8010d68:	4a54      	ldr	r2, [pc, #336]	@ (8010ebc <_dtoa_r+0x614>)
 8010d6a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8010d6e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8010d72:	9a08      	ldr	r2, [sp, #32]
 8010d74:	ec41 0b17 	vmov	d7, r0, r1
 8010d78:	443c      	add	r4, r7
 8010d7a:	b34a      	cbz	r2, 8010dd0 <_dtoa_r+0x528>
 8010d7c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8010d80:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8010d84:	463e      	mov	r6, r7
 8010d86:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8010d8a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8010d8e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010d92:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010d96:	ee14 2a90 	vmov	r2, s9
 8010d9a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010d9e:	3230      	adds	r2, #48	@ 0x30
 8010da0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010da4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dac:	f806 2b01 	strb.w	r2, [r6], #1
 8010db0:	d438      	bmi.n	8010e24 <_dtoa_r+0x57c>
 8010db2:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010db6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8010dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dbe:	d462      	bmi.n	8010e86 <_dtoa_r+0x5de>
 8010dc0:	42a6      	cmp	r6, r4
 8010dc2:	f43f af4d 	beq.w	8010c60 <_dtoa_r+0x3b8>
 8010dc6:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010dca:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010dce:	e7e0      	b.n	8010d92 <_dtoa_r+0x4ea>
 8010dd0:	4621      	mov	r1, r4
 8010dd2:	463e      	mov	r6, r7
 8010dd4:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010dd8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8010ddc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010de0:	ee14 2a90 	vmov	r2, s9
 8010de4:	3230      	adds	r2, #48	@ 0x30
 8010de6:	f806 2b01 	strb.w	r2, [r6], #1
 8010dea:	42a6      	cmp	r6, r4
 8010dec:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010df0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010df4:	d119      	bne.n	8010e2a <_dtoa_r+0x582>
 8010df6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8010dfa:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010dfe:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e06:	dc3e      	bgt.n	8010e86 <_dtoa_r+0x5de>
 8010e08:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010e0c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e14:	f57f af24 	bpl.w	8010c60 <_dtoa_r+0x3b8>
 8010e18:	460e      	mov	r6, r1
 8010e1a:	3901      	subs	r1, #1
 8010e1c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010e20:	2b30      	cmp	r3, #48	@ 0x30
 8010e22:	d0f9      	beq.n	8010e18 <_dtoa_r+0x570>
 8010e24:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010e28:	e758      	b.n	8010cdc <_dtoa_r+0x434>
 8010e2a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010e2e:	e7d5      	b.n	8010ddc <_dtoa_r+0x534>
 8010e30:	d10b      	bne.n	8010e4a <_dtoa_r+0x5a2>
 8010e32:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8010e36:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010e3a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010e3e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e46:	f2c0 8161 	blt.w	801110c <_dtoa_r+0x864>
 8010e4a:	2400      	movs	r4, #0
 8010e4c:	4625      	mov	r5, r4
 8010e4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e50:	43db      	mvns	r3, r3
 8010e52:	9304      	str	r3, [sp, #16]
 8010e54:	463e      	mov	r6, r7
 8010e56:	f04f 0800 	mov.w	r8, #0
 8010e5a:	4621      	mov	r1, r4
 8010e5c:	4648      	mov	r0, r9
 8010e5e:	f000 fbb9 	bl	80115d4 <_Bfree>
 8010e62:	2d00      	cmp	r5, #0
 8010e64:	d0de      	beq.n	8010e24 <_dtoa_r+0x57c>
 8010e66:	f1b8 0f00 	cmp.w	r8, #0
 8010e6a:	d005      	beq.n	8010e78 <_dtoa_r+0x5d0>
 8010e6c:	45a8      	cmp	r8, r5
 8010e6e:	d003      	beq.n	8010e78 <_dtoa_r+0x5d0>
 8010e70:	4641      	mov	r1, r8
 8010e72:	4648      	mov	r0, r9
 8010e74:	f000 fbae 	bl	80115d4 <_Bfree>
 8010e78:	4629      	mov	r1, r5
 8010e7a:	4648      	mov	r0, r9
 8010e7c:	f000 fbaa 	bl	80115d4 <_Bfree>
 8010e80:	e7d0      	b.n	8010e24 <_dtoa_r+0x57c>
 8010e82:	f8cd 8010 	str.w	r8, [sp, #16]
 8010e86:	4633      	mov	r3, r6
 8010e88:	461e      	mov	r6, r3
 8010e8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010e8e:	2a39      	cmp	r2, #57	@ 0x39
 8010e90:	d106      	bne.n	8010ea0 <_dtoa_r+0x5f8>
 8010e92:	429f      	cmp	r7, r3
 8010e94:	d1f8      	bne.n	8010e88 <_dtoa_r+0x5e0>
 8010e96:	9a04      	ldr	r2, [sp, #16]
 8010e98:	3201      	adds	r2, #1
 8010e9a:	9204      	str	r2, [sp, #16]
 8010e9c:	2230      	movs	r2, #48	@ 0x30
 8010e9e:	703a      	strb	r2, [r7, #0]
 8010ea0:	781a      	ldrb	r2, [r3, #0]
 8010ea2:	3201      	adds	r2, #1
 8010ea4:	701a      	strb	r2, [r3, #0]
 8010ea6:	e7bd      	b.n	8010e24 <_dtoa_r+0x57c>
 8010ea8:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010eac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eb4:	f47f aeef 	bne.w	8010c96 <_dtoa_r+0x3ee>
 8010eb8:	e710      	b.n	8010cdc <_dtoa_r+0x434>
 8010eba:	bf00      	nop
 8010ebc:	080129d8 	.word	0x080129d8
 8010ec0:	080129b0 	.word	0x080129b0
 8010ec4:	9908      	ldr	r1, [sp, #32]
 8010ec6:	2900      	cmp	r1, #0
 8010ec8:	f000 80e3 	beq.w	8011092 <_dtoa_r+0x7ea>
 8010ecc:	9907      	ldr	r1, [sp, #28]
 8010ece:	2901      	cmp	r1, #1
 8010ed0:	f300 80c8 	bgt.w	8011064 <_dtoa_r+0x7bc>
 8010ed4:	2d00      	cmp	r5, #0
 8010ed6:	f000 80c1 	beq.w	801105c <_dtoa_r+0x7b4>
 8010eda:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010ede:	9e05      	ldr	r6, [sp, #20]
 8010ee0:	461c      	mov	r4, r3
 8010ee2:	9304      	str	r3, [sp, #16]
 8010ee4:	9b05      	ldr	r3, [sp, #20]
 8010ee6:	4413      	add	r3, r2
 8010ee8:	9305      	str	r3, [sp, #20]
 8010eea:	9b06      	ldr	r3, [sp, #24]
 8010eec:	2101      	movs	r1, #1
 8010eee:	4413      	add	r3, r2
 8010ef0:	4648      	mov	r0, r9
 8010ef2:	9306      	str	r3, [sp, #24]
 8010ef4:	f000 fc22 	bl	801173c <__i2b>
 8010ef8:	9b04      	ldr	r3, [sp, #16]
 8010efa:	4605      	mov	r5, r0
 8010efc:	b166      	cbz	r6, 8010f18 <_dtoa_r+0x670>
 8010efe:	9a06      	ldr	r2, [sp, #24]
 8010f00:	2a00      	cmp	r2, #0
 8010f02:	dd09      	ble.n	8010f18 <_dtoa_r+0x670>
 8010f04:	42b2      	cmp	r2, r6
 8010f06:	9905      	ldr	r1, [sp, #20]
 8010f08:	bfa8      	it	ge
 8010f0a:	4632      	movge	r2, r6
 8010f0c:	1a89      	subs	r1, r1, r2
 8010f0e:	9105      	str	r1, [sp, #20]
 8010f10:	9906      	ldr	r1, [sp, #24]
 8010f12:	1ab6      	subs	r6, r6, r2
 8010f14:	1a8a      	subs	r2, r1, r2
 8010f16:	9206      	str	r2, [sp, #24]
 8010f18:	b1fb      	cbz	r3, 8010f5a <_dtoa_r+0x6b2>
 8010f1a:	9a08      	ldr	r2, [sp, #32]
 8010f1c:	2a00      	cmp	r2, #0
 8010f1e:	f000 80bc 	beq.w	801109a <_dtoa_r+0x7f2>
 8010f22:	b19c      	cbz	r4, 8010f4c <_dtoa_r+0x6a4>
 8010f24:	4629      	mov	r1, r5
 8010f26:	4622      	mov	r2, r4
 8010f28:	4648      	mov	r0, r9
 8010f2a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010f2c:	f000 fcc6 	bl	80118bc <__pow5mult>
 8010f30:	9a01      	ldr	r2, [sp, #4]
 8010f32:	4601      	mov	r1, r0
 8010f34:	4605      	mov	r5, r0
 8010f36:	4648      	mov	r0, r9
 8010f38:	f000 fc16 	bl	8011768 <__multiply>
 8010f3c:	9901      	ldr	r1, [sp, #4]
 8010f3e:	9004      	str	r0, [sp, #16]
 8010f40:	4648      	mov	r0, r9
 8010f42:	f000 fb47 	bl	80115d4 <_Bfree>
 8010f46:	9a04      	ldr	r2, [sp, #16]
 8010f48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010f4a:	9201      	str	r2, [sp, #4]
 8010f4c:	1b1a      	subs	r2, r3, r4
 8010f4e:	d004      	beq.n	8010f5a <_dtoa_r+0x6b2>
 8010f50:	9901      	ldr	r1, [sp, #4]
 8010f52:	4648      	mov	r0, r9
 8010f54:	f000 fcb2 	bl	80118bc <__pow5mult>
 8010f58:	9001      	str	r0, [sp, #4]
 8010f5a:	2101      	movs	r1, #1
 8010f5c:	4648      	mov	r0, r9
 8010f5e:	f000 fbed 	bl	801173c <__i2b>
 8010f62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010f64:	4604      	mov	r4, r0
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	f000 81d0 	beq.w	801130c <_dtoa_r+0xa64>
 8010f6c:	461a      	mov	r2, r3
 8010f6e:	4601      	mov	r1, r0
 8010f70:	4648      	mov	r0, r9
 8010f72:	f000 fca3 	bl	80118bc <__pow5mult>
 8010f76:	9b07      	ldr	r3, [sp, #28]
 8010f78:	2b01      	cmp	r3, #1
 8010f7a:	4604      	mov	r4, r0
 8010f7c:	f300 8095 	bgt.w	80110aa <_dtoa_r+0x802>
 8010f80:	9b02      	ldr	r3, [sp, #8]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	f040 808b 	bne.w	801109e <_dtoa_r+0x7f6>
 8010f88:	9b03      	ldr	r3, [sp, #12]
 8010f8a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8010f8e:	2a00      	cmp	r2, #0
 8010f90:	f040 8087 	bne.w	80110a2 <_dtoa_r+0x7fa>
 8010f94:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8010f98:	0d12      	lsrs	r2, r2, #20
 8010f9a:	0512      	lsls	r2, r2, #20
 8010f9c:	2a00      	cmp	r2, #0
 8010f9e:	f000 8082 	beq.w	80110a6 <_dtoa_r+0x7fe>
 8010fa2:	9b05      	ldr	r3, [sp, #20]
 8010fa4:	3301      	adds	r3, #1
 8010fa6:	9305      	str	r3, [sp, #20]
 8010fa8:	9b06      	ldr	r3, [sp, #24]
 8010faa:	3301      	adds	r3, #1
 8010fac:	9306      	str	r3, [sp, #24]
 8010fae:	2301      	movs	r3, #1
 8010fb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010fb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	f000 81af 	beq.w	8011318 <_dtoa_r+0xa70>
 8010fba:	6922      	ldr	r2, [r4, #16]
 8010fbc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010fc0:	6910      	ldr	r0, [r2, #16]
 8010fc2:	f000 fb6f 	bl	80116a4 <__hi0bits>
 8010fc6:	f1c0 0020 	rsb	r0, r0, #32
 8010fca:	9b06      	ldr	r3, [sp, #24]
 8010fcc:	4418      	add	r0, r3
 8010fce:	f010 001f 	ands.w	r0, r0, #31
 8010fd2:	d076      	beq.n	80110c2 <_dtoa_r+0x81a>
 8010fd4:	f1c0 0220 	rsb	r2, r0, #32
 8010fd8:	2a04      	cmp	r2, #4
 8010fda:	dd69      	ble.n	80110b0 <_dtoa_r+0x808>
 8010fdc:	9b05      	ldr	r3, [sp, #20]
 8010fde:	f1c0 001c 	rsb	r0, r0, #28
 8010fe2:	4403      	add	r3, r0
 8010fe4:	9305      	str	r3, [sp, #20]
 8010fe6:	9b06      	ldr	r3, [sp, #24]
 8010fe8:	4406      	add	r6, r0
 8010fea:	4403      	add	r3, r0
 8010fec:	9306      	str	r3, [sp, #24]
 8010fee:	9b05      	ldr	r3, [sp, #20]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	dd05      	ble.n	8011000 <_dtoa_r+0x758>
 8010ff4:	9901      	ldr	r1, [sp, #4]
 8010ff6:	461a      	mov	r2, r3
 8010ff8:	4648      	mov	r0, r9
 8010ffa:	f000 fcb9 	bl	8011970 <__lshift>
 8010ffe:	9001      	str	r0, [sp, #4]
 8011000:	9b06      	ldr	r3, [sp, #24]
 8011002:	2b00      	cmp	r3, #0
 8011004:	dd05      	ble.n	8011012 <_dtoa_r+0x76a>
 8011006:	4621      	mov	r1, r4
 8011008:	461a      	mov	r2, r3
 801100a:	4648      	mov	r0, r9
 801100c:	f000 fcb0 	bl	8011970 <__lshift>
 8011010:	4604      	mov	r4, r0
 8011012:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011014:	2b00      	cmp	r3, #0
 8011016:	d056      	beq.n	80110c6 <_dtoa_r+0x81e>
 8011018:	9801      	ldr	r0, [sp, #4]
 801101a:	4621      	mov	r1, r4
 801101c:	f000 fd14 	bl	8011a48 <__mcmp>
 8011020:	2800      	cmp	r0, #0
 8011022:	da50      	bge.n	80110c6 <_dtoa_r+0x81e>
 8011024:	f108 33ff 	add.w	r3, r8, #4294967295
 8011028:	9304      	str	r3, [sp, #16]
 801102a:	9901      	ldr	r1, [sp, #4]
 801102c:	2300      	movs	r3, #0
 801102e:	220a      	movs	r2, #10
 8011030:	4648      	mov	r0, r9
 8011032:	f000 faf1 	bl	8011618 <__multadd>
 8011036:	9b08      	ldr	r3, [sp, #32]
 8011038:	9001      	str	r0, [sp, #4]
 801103a:	2b00      	cmp	r3, #0
 801103c:	f000 816e 	beq.w	801131c <_dtoa_r+0xa74>
 8011040:	4629      	mov	r1, r5
 8011042:	2300      	movs	r3, #0
 8011044:	220a      	movs	r2, #10
 8011046:	4648      	mov	r0, r9
 8011048:	f000 fae6 	bl	8011618 <__multadd>
 801104c:	f1bb 0f00 	cmp.w	fp, #0
 8011050:	4605      	mov	r5, r0
 8011052:	dc64      	bgt.n	801111e <_dtoa_r+0x876>
 8011054:	9b07      	ldr	r3, [sp, #28]
 8011056:	2b02      	cmp	r3, #2
 8011058:	dc3e      	bgt.n	80110d8 <_dtoa_r+0x830>
 801105a:	e060      	b.n	801111e <_dtoa_r+0x876>
 801105c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801105e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8011062:	e73c      	b.n	8010ede <_dtoa_r+0x636>
 8011064:	f10a 34ff 	add.w	r4, sl, #4294967295
 8011068:	42a3      	cmp	r3, r4
 801106a:	bfbf      	itttt	lt
 801106c:	1ae2      	sublt	r2, r4, r3
 801106e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011070:	189b      	addlt	r3, r3, r2
 8011072:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8011074:	bfae      	itee	ge
 8011076:	1b1c      	subge	r4, r3, r4
 8011078:	4623      	movlt	r3, r4
 801107a:	2400      	movlt	r4, #0
 801107c:	f1ba 0f00 	cmp.w	sl, #0
 8011080:	bfb5      	itete	lt
 8011082:	9a05      	ldrlt	r2, [sp, #20]
 8011084:	9e05      	ldrge	r6, [sp, #20]
 8011086:	eba2 060a 	sublt.w	r6, r2, sl
 801108a:	4652      	movge	r2, sl
 801108c:	bfb8      	it	lt
 801108e:	2200      	movlt	r2, #0
 8011090:	e727      	b.n	8010ee2 <_dtoa_r+0x63a>
 8011092:	9e05      	ldr	r6, [sp, #20]
 8011094:	9d08      	ldr	r5, [sp, #32]
 8011096:	461c      	mov	r4, r3
 8011098:	e730      	b.n	8010efc <_dtoa_r+0x654>
 801109a:	461a      	mov	r2, r3
 801109c:	e758      	b.n	8010f50 <_dtoa_r+0x6a8>
 801109e:	2300      	movs	r3, #0
 80110a0:	e786      	b.n	8010fb0 <_dtoa_r+0x708>
 80110a2:	9b02      	ldr	r3, [sp, #8]
 80110a4:	e784      	b.n	8010fb0 <_dtoa_r+0x708>
 80110a6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80110a8:	e783      	b.n	8010fb2 <_dtoa_r+0x70a>
 80110aa:	2300      	movs	r3, #0
 80110ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80110ae:	e784      	b.n	8010fba <_dtoa_r+0x712>
 80110b0:	d09d      	beq.n	8010fee <_dtoa_r+0x746>
 80110b2:	9b05      	ldr	r3, [sp, #20]
 80110b4:	321c      	adds	r2, #28
 80110b6:	4413      	add	r3, r2
 80110b8:	9305      	str	r3, [sp, #20]
 80110ba:	9b06      	ldr	r3, [sp, #24]
 80110bc:	4416      	add	r6, r2
 80110be:	4413      	add	r3, r2
 80110c0:	e794      	b.n	8010fec <_dtoa_r+0x744>
 80110c2:	4602      	mov	r2, r0
 80110c4:	e7f5      	b.n	80110b2 <_dtoa_r+0x80a>
 80110c6:	f1ba 0f00 	cmp.w	sl, #0
 80110ca:	f8cd 8010 	str.w	r8, [sp, #16]
 80110ce:	46d3      	mov	fp, sl
 80110d0:	dc21      	bgt.n	8011116 <_dtoa_r+0x86e>
 80110d2:	9b07      	ldr	r3, [sp, #28]
 80110d4:	2b02      	cmp	r3, #2
 80110d6:	dd1e      	ble.n	8011116 <_dtoa_r+0x86e>
 80110d8:	f1bb 0f00 	cmp.w	fp, #0
 80110dc:	f47f aeb7 	bne.w	8010e4e <_dtoa_r+0x5a6>
 80110e0:	4621      	mov	r1, r4
 80110e2:	465b      	mov	r3, fp
 80110e4:	2205      	movs	r2, #5
 80110e6:	4648      	mov	r0, r9
 80110e8:	f000 fa96 	bl	8011618 <__multadd>
 80110ec:	4601      	mov	r1, r0
 80110ee:	4604      	mov	r4, r0
 80110f0:	9801      	ldr	r0, [sp, #4]
 80110f2:	f000 fca9 	bl	8011a48 <__mcmp>
 80110f6:	2800      	cmp	r0, #0
 80110f8:	f77f aea9 	ble.w	8010e4e <_dtoa_r+0x5a6>
 80110fc:	463e      	mov	r6, r7
 80110fe:	2331      	movs	r3, #49	@ 0x31
 8011100:	f806 3b01 	strb.w	r3, [r6], #1
 8011104:	9b04      	ldr	r3, [sp, #16]
 8011106:	3301      	adds	r3, #1
 8011108:	9304      	str	r3, [sp, #16]
 801110a:	e6a4      	b.n	8010e56 <_dtoa_r+0x5ae>
 801110c:	f8cd 8010 	str.w	r8, [sp, #16]
 8011110:	4654      	mov	r4, sl
 8011112:	4625      	mov	r5, r4
 8011114:	e7f2      	b.n	80110fc <_dtoa_r+0x854>
 8011116:	9b08      	ldr	r3, [sp, #32]
 8011118:	2b00      	cmp	r3, #0
 801111a:	f000 8103 	beq.w	8011324 <_dtoa_r+0xa7c>
 801111e:	2e00      	cmp	r6, #0
 8011120:	dd05      	ble.n	801112e <_dtoa_r+0x886>
 8011122:	4629      	mov	r1, r5
 8011124:	4632      	mov	r2, r6
 8011126:	4648      	mov	r0, r9
 8011128:	f000 fc22 	bl	8011970 <__lshift>
 801112c:	4605      	mov	r5, r0
 801112e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011130:	2b00      	cmp	r3, #0
 8011132:	d058      	beq.n	80111e6 <_dtoa_r+0x93e>
 8011134:	6869      	ldr	r1, [r5, #4]
 8011136:	4648      	mov	r0, r9
 8011138:	f000 fa0c 	bl	8011554 <_Balloc>
 801113c:	4606      	mov	r6, r0
 801113e:	b928      	cbnz	r0, 801114c <_dtoa_r+0x8a4>
 8011140:	4b82      	ldr	r3, [pc, #520]	@ (801134c <_dtoa_r+0xaa4>)
 8011142:	4602      	mov	r2, r0
 8011144:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011148:	f7ff bbc7 	b.w	80108da <_dtoa_r+0x32>
 801114c:	692a      	ldr	r2, [r5, #16]
 801114e:	3202      	adds	r2, #2
 8011150:	0092      	lsls	r2, r2, #2
 8011152:	f105 010c 	add.w	r1, r5, #12
 8011156:	300c      	adds	r0, #12
 8011158:	f000 ffac 	bl	80120b4 <memcpy>
 801115c:	2201      	movs	r2, #1
 801115e:	4631      	mov	r1, r6
 8011160:	4648      	mov	r0, r9
 8011162:	f000 fc05 	bl	8011970 <__lshift>
 8011166:	1c7b      	adds	r3, r7, #1
 8011168:	9305      	str	r3, [sp, #20]
 801116a:	eb07 030b 	add.w	r3, r7, fp
 801116e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011170:	9b02      	ldr	r3, [sp, #8]
 8011172:	f003 0301 	and.w	r3, r3, #1
 8011176:	46a8      	mov	r8, r5
 8011178:	9308      	str	r3, [sp, #32]
 801117a:	4605      	mov	r5, r0
 801117c:	9b05      	ldr	r3, [sp, #20]
 801117e:	9801      	ldr	r0, [sp, #4]
 8011180:	4621      	mov	r1, r4
 8011182:	f103 3bff 	add.w	fp, r3, #4294967295
 8011186:	f7ff fb04 	bl	8010792 <quorem>
 801118a:	4641      	mov	r1, r8
 801118c:	9002      	str	r0, [sp, #8]
 801118e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8011192:	9801      	ldr	r0, [sp, #4]
 8011194:	f000 fc58 	bl	8011a48 <__mcmp>
 8011198:	462a      	mov	r2, r5
 801119a:	9006      	str	r0, [sp, #24]
 801119c:	4621      	mov	r1, r4
 801119e:	4648      	mov	r0, r9
 80111a0:	f000 fc6e 	bl	8011a80 <__mdiff>
 80111a4:	68c2      	ldr	r2, [r0, #12]
 80111a6:	4606      	mov	r6, r0
 80111a8:	b9fa      	cbnz	r2, 80111ea <_dtoa_r+0x942>
 80111aa:	4601      	mov	r1, r0
 80111ac:	9801      	ldr	r0, [sp, #4]
 80111ae:	f000 fc4b 	bl	8011a48 <__mcmp>
 80111b2:	4602      	mov	r2, r0
 80111b4:	4631      	mov	r1, r6
 80111b6:	4648      	mov	r0, r9
 80111b8:	920a      	str	r2, [sp, #40]	@ 0x28
 80111ba:	f000 fa0b 	bl	80115d4 <_Bfree>
 80111be:	9b07      	ldr	r3, [sp, #28]
 80111c0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80111c2:	9e05      	ldr	r6, [sp, #20]
 80111c4:	ea43 0102 	orr.w	r1, r3, r2
 80111c8:	9b08      	ldr	r3, [sp, #32]
 80111ca:	4319      	orrs	r1, r3
 80111cc:	d10f      	bne.n	80111ee <_dtoa_r+0x946>
 80111ce:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80111d2:	d028      	beq.n	8011226 <_dtoa_r+0x97e>
 80111d4:	9b06      	ldr	r3, [sp, #24]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	dd02      	ble.n	80111e0 <_dtoa_r+0x938>
 80111da:	9b02      	ldr	r3, [sp, #8]
 80111dc:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80111e0:	f88b a000 	strb.w	sl, [fp]
 80111e4:	e639      	b.n	8010e5a <_dtoa_r+0x5b2>
 80111e6:	4628      	mov	r0, r5
 80111e8:	e7bd      	b.n	8011166 <_dtoa_r+0x8be>
 80111ea:	2201      	movs	r2, #1
 80111ec:	e7e2      	b.n	80111b4 <_dtoa_r+0x90c>
 80111ee:	9b06      	ldr	r3, [sp, #24]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	db04      	blt.n	80111fe <_dtoa_r+0x956>
 80111f4:	9907      	ldr	r1, [sp, #28]
 80111f6:	430b      	orrs	r3, r1
 80111f8:	9908      	ldr	r1, [sp, #32]
 80111fa:	430b      	orrs	r3, r1
 80111fc:	d120      	bne.n	8011240 <_dtoa_r+0x998>
 80111fe:	2a00      	cmp	r2, #0
 8011200:	ddee      	ble.n	80111e0 <_dtoa_r+0x938>
 8011202:	9901      	ldr	r1, [sp, #4]
 8011204:	2201      	movs	r2, #1
 8011206:	4648      	mov	r0, r9
 8011208:	f000 fbb2 	bl	8011970 <__lshift>
 801120c:	4621      	mov	r1, r4
 801120e:	9001      	str	r0, [sp, #4]
 8011210:	f000 fc1a 	bl	8011a48 <__mcmp>
 8011214:	2800      	cmp	r0, #0
 8011216:	dc03      	bgt.n	8011220 <_dtoa_r+0x978>
 8011218:	d1e2      	bne.n	80111e0 <_dtoa_r+0x938>
 801121a:	f01a 0f01 	tst.w	sl, #1
 801121e:	d0df      	beq.n	80111e0 <_dtoa_r+0x938>
 8011220:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8011224:	d1d9      	bne.n	80111da <_dtoa_r+0x932>
 8011226:	2339      	movs	r3, #57	@ 0x39
 8011228:	f88b 3000 	strb.w	r3, [fp]
 801122c:	4633      	mov	r3, r6
 801122e:	461e      	mov	r6, r3
 8011230:	3b01      	subs	r3, #1
 8011232:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011236:	2a39      	cmp	r2, #57	@ 0x39
 8011238:	d053      	beq.n	80112e2 <_dtoa_r+0xa3a>
 801123a:	3201      	adds	r2, #1
 801123c:	701a      	strb	r2, [r3, #0]
 801123e:	e60c      	b.n	8010e5a <_dtoa_r+0x5b2>
 8011240:	2a00      	cmp	r2, #0
 8011242:	dd07      	ble.n	8011254 <_dtoa_r+0x9ac>
 8011244:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8011248:	d0ed      	beq.n	8011226 <_dtoa_r+0x97e>
 801124a:	f10a 0301 	add.w	r3, sl, #1
 801124e:	f88b 3000 	strb.w	r3, [fp]
 8011252:	e602      	b.n	8010e5a <_dtoa_r+0x5b2>
 8011254:	9b05      	ldr	r3, [sp, #20]
 8011256:	9a05      	ldr	r2, [sp, #20]
 8011258:	f803 ac01 	strb.w	sl, [r3, #-1]
 801125c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801125e:	4293      	cmp	r3, r2
 8011260:	d029      	beq.n	80112b6 <_dtoa_r+0xa0e>
 8011262:	9901      	ldr	r1, [sp, #4]
 8011264:	2300      	movs	r3, #0
 8011266:	220a      	movs	r2, #10
 8011268:	4648      	mov	r0, r9
 801126a:	f000 f9d5 	bl	8011618 <__multadd>
 801126e:	45a8      	cmp	r8, r5
 8011270:	9001      	str	r0, [sp, #4]
 8011272:	f04f 0300 	mov.w	r3, #0
 8011276:	f04f 020a 	mov.w	r2, #10
 801127a:	4641      	mov	r1, r8
 801127c:	4648      	mov	r0, r9
 801127e:	d107      	bne.n	8011290 <_dtoa_r+0x9e8>
 8011280:	f000 f9ca 	bl	8011618 <__multadd>
 8011284:	4680      	mov	r8, r0
 8011286:	4605      	mov	r5, r0
 8011288:	9b05      	ldr	r3, [sp, #20]
 801128a:	3301      	adds	r3, #1
 801128c:	9305      	str	r3, [sp, #20]
 801128e:	e775      	b.n	801117c <_dtoa_r+0x8d4>
 8011290:	f000 f9c2 	bl	8011618 <__multadd>
 8011294:	4629      	mov	r1, r5
 8011296:	4680      	mov	r8, r0
 8011298:	2300      	movs	r3, #0
 801129a:	220a      	movs	r2, #10
 801129c:	4648      	mov	r0, r9
 801129e:	f000 f9bb 	bl	8011618 <__multadd>
 80112a2:	4605      	mov	r5, r0
 80112a4:	e7f0      	b.n	8011288 <_dtoa_r+0x9e0>
 80112a6:	f1bb 0f00 	cmp.w	fp, #0
 80112aa:	bfcc      	ite	gt
 80112ac:	465e      	movgt	r6, fp
 80112ae:	2601      	movle	r6, #1
 80112b0:	443e      	add	r6, r7
 80112b2:	f04f 0800 	mov.w	r8, #0
 80112b6:	9901      	ldr	r1, [sp, #4]
 80112b8:	2201      	movs	r2, #1
 80112ba:	4648      	mov	r0, r9
 80112bc:	f000 fb58 	bl	8011970 <__lshift>
 80112c0:	4621      	mov	r1, r4
 80112c2:	9001      	str	r0, [sp, #4]
 80112c4:	f000 fbc0 	bl	8011a48 <__mcmp>
 80112c8:	2800      	cmp	r0, #0
 80112ca:	dcaf      	bgt.n	801122c <_dtoa_r+0x984>
 80112cc:	d102      	bne.n	80112d4 <_dtoa_r+0xa2c>
 80112ce:	f01a 0f01 	tst.w	sl, #1
 80112d2:	d1ab      	bne.n	801122c <_dtoa_r+0x984>
 80112d4:	4633      	mov	r3, r6
 80112d6:	461e      	mov	r6, r3
 80112d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80112dc:	2a30      	cmp	r2, #48	@ 0x30
 80112de:	d0fa      	beq.n	80112d6 <_dtoa_r+0xa2e>
 80112e0:	e5bb      	b.n	8010e5a <_dtoa_r+0x5b2>
 80112e2:	429f      	cmp	r7, r3
 80112e4:	d1a3      	bne.n	801122e <_dtoa_r+0x986>
 80112e6:	9b04      	ldr	r3, [sp, #16]
 80112e8:	3301      	adds	r3, #1
 80112ea:	9304      	str	r3, [sp, #16]
 80112ec:	2331      	movs	r3, #49	@ 0x31
 80112ee:	703b      	strb	r3, [r7, #0]
 80112f0:	e5b3      	b.n	8010e5a <_dtoa_r+0x5b2>
 80112f2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80112f4:	4f16      	ldr	r7, [pc, #88]	@ (8011350 <_dtoa_r+0xaa8>)
 80112f6:	b11b      	cbz	r3, 8011300 <_dtoa_r+0xa58>
 80112f8:	f107 0308 	add.w	r3, r7, #8
 80112fc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80112fe:	6013      	str	r3, [r2, #0]
 8011300:	4638      	mov	r0, r7
 8011302:	b011      	add	sp, #68	@ 0x44
 8011304:	ecbd 8b02 	vpop	{d8}
 8011308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801130c:	9b07      	ldr	r3, [sp, #28]
 801130e:	2b01      	cmp	r3, #1
 8011310:	f77f ae36 	ble.w	8010f80 <_dtoa_r+0x6d8>
 8011314:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011316:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011318:	2001      	movs	r0, #1
 801131a:	e656      	b.n	8010fca <_dtoa_r+0x722>
 801131c:	f1bb 0f00 	cmp.w	fp, #0
 8011320:	f77f aed7 	ble.w	80110d2 <_dtoa_r+0x82a>
 8011324:	463e      	mov	r6, r7
 8011326:	9801      	ldr	r0, [sp, #4]
 8011328:	4621      	mov	r1, r4
 801132a:	f7ff fa32 	bl	8010792 <quorem>
 801132e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8011332:	f806 ab01 	strb.w	sl, [r6], #1
 8011336:	1bf2      	subs	r2, r6, r7
 8011338:	4593      	cmp	fp, r2
 801133a:	ddb4      	ble.n	80112a6 <_dtoa_r+0x9fe>
 801133c:	9901      	ldr	r1, [sp, #4]
 801133e:	2300      	movs	r3, #0
 8011340:	220a      	movs	r2, #10
 8011342:	4648      	mov	r0, r9
 8011344:	f000 f968 	bl	8011618 <__multadd>
 8011348:	9001      	str	r0, [sp, #4]
 801134a:	e7ec      	b.n	8011326 <_dtoa_r+0xa7e>
 801134c:	08012938 	.word	0x08012938
 8011350:	080128bc 	.word	0x080128bc

08011354 <_free_r>:
 8011354:	b538      	push	{r3, r4, r5, lr}
 8011356:	4605      	mov	r5, r0
 8011358:	2900      	cmp	r1, #0
 801135a:	d041      	beq.n	80113e0 <_free_r+0x8c>
 801135c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011360:	1f0c      	subs	r4, r1, #4
 8011362:	2b00      	cmp	r3, #0
 8011364:	bfb8      	it	lt
 8011366:	18e4      	addlt	r4, r4, r3
 8011368:	f000 f8e8 	bl	801153c <__malloc_lock>
 801136c:	4a1d      	ldr	r2, [pc, #116]	@ (80113e4 <_free_r+0x90>)
 801136e:	6813      	ldr	r3, [r2, #0]
 8011370:	b933      	cbnz	r3, 8011380 <_free_r+0x2c>
 8011372:	6063      	str	r3, [r4, #4]
 8011374:	6014      	str	r4, [r2, #0]
 8011376:	4628      	mov	r0, r5
 8011378:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801137c:	f000 b8e4 	b.w	8011548 <__malloc_unlock>
 8011380:	42a3      	cmp	r3, r4
 8011382:	d908      	bls.n	8011396 <_free_r+0x42>
 8011384:	6820      	ldr	r0, [r4, #0]
 8011386:	1821      	adds	r1, r4, r0
 8011388:	428b      	cmp	r3, r1
 801138a:	bf01      	itttt	eq
 801138c:	6819      	ldreq	r1, [r3, #0]
 801138e:	685b      	ldreq	r3, [r3, #4]
 8011390:	1809      	addeq	r1, r1, r0
 8011392:	6021      	streq	r1, [r4, #0]
 8011394:	e7ed      	b.n	8011372 <_free_r+0x1e>
 8011396:	461a      	mov	r2, r3
 8011398:	685b      	ldr	r3, [r3, #4]
 801139a:	b10b      	cbz	r3, 80113a0 <_free_r+0x4c>
 801139c:	42a3      	cmp	r3, r4
 801139e:	d9fa      	bls.n	8011396 <_free_r+0x42>
 80113a0:	6811      	ldr	r1, [r2, #0]
 80113a2:	1850      	adds	r0, r2, r1
 80113a4:	42a0      	cmp	r0, r4
 80113a6:	d10b      	bne.n	80113c0 <_free_r+0x6c>
 80113a8:	6820      	ldr	r0, [r4, #0]
 80113aa:	4401      	add	r1, r0
 80113ac:	1850      	adds	r0, r2, r1
 80113ae:	4283      	cmp	r3, r0
 80113b0:	6011      	str	r1, [r2, #0]
 80113b2:	d1e0      	bne.n	8011376 <_free_r+0x22>
 80113b4:	6818      	ldr	r0, [r3, #0]
 80113b6:	685b      	ldr	r3, [r3, #4]
 80113b8:	6053      	str	r3, [r2, #4]
 80113ba:	4408      	add	r0, r1
 80113bc:	6010      	str	r0, [r2, #0]
 80113be:	e7da      	b.n	8011376 <_free_r+0x22>
 80113c0:	d902      	bls.n	80113c8 <_free_r+0x74>
 80113c2:	230c      	movs	r3, #12
 80113c4:	602b      	str	r3, [r5, #0]
 80113c6:	e7d6      	b.n	8011376 <_free_r+0x22>
 80113c8:	6820      	ldr	r0, [r4, #0]
 80113ca:	1821      	adds	r1, r4, r0
 80113cc:	428b      	cmp	r3, r1
 80113ce:	bf04      	itt	eq
 80113d0:	6819      	ldreq	r1, [r3, #0]
 80113d2:	685b      	ldreq	r3, [r3, #4]
 80113d4:	6063      	str	r3, [r4, #4]
 80113d6:	bf04      	itt	eq
 80113d8:	1809      	addeq	r1, r1, r0
 80113da:	6021      	streq	r1, [r4, #0]
 80113dc:	6054      	str	r4, [r2, #4]
 80113de:	e7ca      	b.n	8011376 <_free_r+0x22>
 80113e0:	bd38      	pop	{r3, r4, r5, pc}
 80113e2:	bf00      	nop
 80113e4:	240026d0 	.word	0x240026d0

080113e8 <malloc>:
 80113e8:	4b02      	ldr	r3, [pc, #8]	@ (80113f4 <malloc+0xc>)
 80113ea:	4601      	mov	r1, r0
 80113ec:	6818      	ldr	r0, [r3, #0]
 80113ee:	f000 b825 	b.w	801143c <_malloc_r>
 80113f2:	bf00      	nop
 80113f4:	24000138 	.word	0x24000138

080113f8 <sbrk_aligned>:
 80113f8:	b570      	push	{r4, r5, r6, lr}
 80113fa:	4e0f      	ldr	r6, [pc, #60]	@ (8011438 <sbrk_aligned+0x40>)
 80113fc:	460c      	mov	r4, r1
 80113fe:	6831      	ldr	r1, [r6, #0]
 8011400:	4605      	mov	r5, r0
 8011402:	b911      	cbnz	r1, 801140a <sbrk_aligned+0x12>
 8011404:	f000 fe46 	bl	8012094 <_sbrk_r>
 8011408:	6030      	str	r0, [r6, #0]
 801140a:	4621      	mov	r1, r4
 801140c:	4628      	mov	r0, r5
 801140e:	f000 fe41 	bl	8012094 <_sbrk_r>
 8011412:	1c43      	adds	r3, r0, #1
 8011414:	d103      	bne.n	801141e <sbrk_aligned+0x26>
 8011416:	f04f 34ff 	mov.w	r4, #4294967295
 801141a:	4620      	mov	r0, r4
 801141c:	bd70      	pop	{r4, r5, r6, pc}
 801141e:	1cc4      	adds	r4, r0, #3
 8011420:	f024 0403 	bic.w	r4, r4, #3
 8011424:	42a0      	cmp	r0, r4
 8011426:	d0f8      	beq.n	801141a <sbrk_aligned+0x22>
 8011428:	1a21      	subs	r1, r4, r0
 801142a:	4628      	mov	r0, r5
 801142c:	f000 fe32 	bl	8012094 <_sbrk_r>
 8011430:	3001      	adds	r0, #1
 8011432:	d1f2      	bne.n	801141a <sbrk_aligned+0x22>
 8011434:	e7ef      	b.n	8011416 <sbrk_aligned+0x1e>
 8011436:	bf00      	nop
 8011438:	240026cc 	.word	0x240026cc

0801143c <_malloc_r>:
 801143c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011440:	1ccd      	adds	r5, r1, #3
 8011442:	f025 0503 	bic.w	r5, r5, #3
 8011446:	3508      	adds	r5, #8
 8011448:	2d0c      	cmp	r5, #12
 801144a:	bf38      	it	cc
 801144c:	250c      	movcc	r5, #12
 801144e:	2d00      	cmp	r5, #0
 8011450:	4606      	mov	r6, r0
 8011452:	db01      	blt.n	8011458 <_malloc_r+0x1c>
 8011454:	42a9      	cmp	r1, r5
 8011456:	d904      	bls.n	8011462 <_malloc_r+0x26>
 8011458:	230c      	movs	r3, #12
 801145a:	6033      	str	r3, [r6, #0]
 801145c:	2000      	movs	r0, #0
 801145e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011462:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011538 <_malloc_r+0xfc>
 8011466:	f000 f869 	bl	801153c <__malloc_lock>
 801146a:	f8d8 3000 	ldr.w	r3, [r8]
 801146e:	461c      	mov	r4, r3
 8011470:	bb44      	cbnz	r4, 80114c4 <_malloc_r+0x88>
 8011472:	4629      	mov	r1, r5
 8011474:	4630      	mov	r0, r6
 8011476:	f7ff ffbf 	bl	80113f8 <sbrk_aligned>
 801147a:	1c43      	adds	r3, r0, #1
 801147c:	4604      	mov	r4, r0
 801147e:	d158      	bne.n	8011532 <_malloc_r+0xf6>
 8011480:	f8d8 4000 	ldr.w	r4, [r8]
 8011484:	4627      	mov	r7, r4
 8011486:	2f00      	cmp	r7, #0
 8011488:	d143      	bne.n	8011512 <_malloc_r+0xd6>
 801148a:	2c00      	cmp	r4, #0
 801148c:	d04b      	beq.n	8011526 <_malloc_r+0xea>
 801148e:	6823      	ldr	r3, [r4, #0]
 8011490:	4639      	mov	r1, r7
 8011492:	4630      	mov	r0, r6
 8011494:	eb04 0903 	add.w	r9, r4, r3
 8011498:	f000 fdfc 	bl	8012094 <_sbrk_r>
 801149c:	4581      	cmp	r9, r0
 801149e:	d142      	bne.n	8011526 <_malloc_r+0xea>
 80114a0:	6821      	ldr	r1, [r4, #0]
 80114a2:	1a6d      	subs	r5, r5, r1
 80114a4:	4629      	mov	r1, r5
 80114a6:	4630      	mov	r0, r6
 80114a8:	f7ff ffa6 	bl	80113f8 <sbrk_aligned>
 80114ac:	3001      	adds	r0, #1
 80114ae:	d03a      	beq.n	8011526 <_malloc_r+0xea>
 80114b0:	6823      	ldr	r3, [r4, #0]
 80114b2:	442b      	add	r3, r5
 80114b4:	6023      	str	r3, [r4, #0]
 80114b6:	f8d8 3000 	ldr.w	r3, [r8]
 80114ba:	685a      	ldr	r2, [r3, #4]
 80114bc:	bb62      	cbnz	r2, 8011518 <_malloc_r+0xdc>
 80114be:	f8c8 7000 	str.w	r7, [r8]
 80114c2:	e00f      	b.n	80114e4 <_malloc_r+0xa8>
 80114c4:	6822      	ldr	r2, [r4, #0]
 80114c6:	1b52      	subs	r2, r2, r5
 80114c8:	d420      	bmi.n	801150c <_malloc_r+0xd0>
 80114ca:	2a0b      	cmp	r2, #11
 80114cc:	d917      	bls.n	80114fe <_malloc_r+0xc2>
 80114ce:	1961      	adds	r1, r4, r5
 80114d0:	42a3      	cmp	r3, r4
 80114d2:	6025      	str	r5, [r4, #0]
 80114d4:	bf18      	it	ne
 80114d6:	6059      	strne	r1, [r3, #4]
 80114d8:	6863      	ldr	r3, [r4, #4]
 80114da:	bf08      	it	eq
 80114dc:	f8c8 1000 	streq.w	r1, [r8]
 80114e0:	5162      	str	r2, [r4, r5]
 80114e2:	604b      	str	r3, [r1, #4]
 80114e4:	4630      	mov	r0, r6
 80114e6:	f000 f82f 	bl	8011548 <__malloc_unlock>
 80114ea:	f104 000b 	add.w	r0, r4, #11
 80114ee:	1d23      	adds	r3, r4, #4
 80114f0:	f020 0007 	bic.w	r0, r0, #7
 80114f4:	1ac2      	subs	r2, r0, r3
 80114f6:	bf1c      	itt	ne
 80114f8:	1a1b      	subne	r3, r3, r0
 80114fa:	50a3      	strne	r3, [r4, r2]
 80114fc:	e7af      	b.n	801145e <_malloc_r+0x22>
 80114fe:	6862      	ldr	r2, [r4, #4]
 8011500:	42a3      	cmp	r3, r4
 8011502:	bf0c      	ite	eq
 8011504:	f8c8 2000 	streq.w	r2, [r8]
 8011508:	605a      	strne	r2, [r3, #4]
 801150a:	e7eb      	b.n	80114e4 <_malloc_r+0xa8>
 801150c:	4623      	mov	r3, r4
 801150e:	6864      	ldr	r4, [r4, #4]
 8011510:	e7ae      	b.n	8011470 <_malloc_r+0x34>
 8011512:	463c      	mov	r4, r7
 8011514:	687f      	ldr	r7, [r7, #4]
 8011516:	e7b6      	b.n	8011486 <_malloc_r+0x4a>
 8011518:	461a      	mov	r2, r3
 801151a:	685b      	ldr	r3, [r3, #4]
 801151c:	42a3      	cmp	r3, r4
 801151e:	d1fb      	bne.n	8011518 <_malloc_r+0xdc>
 8011520:	2300      	movs	r3, #0
 8011522:	6053      	str	r3, [r2, #4]
 8011524:	e7de      	b.n	80114e4 <_malloc_r+0xa8>
 8011526:	230c      	movs	r3, #12
 8011528:	6033      	str	r3, [r6, #0]
 801152a:	4630      	mov	r0, r6
 801152c:	f000 f80c 	bl	8011548 <__malloc_unlock>
 8011530:	e794      	b.n	801145c <_malloc_r+0x20>
 8011532:	6005      	str	r5, [r0, #0]
 8011534:	e7d6      	b.n	80114e4 <_malloc_r+0xa8>
 8011536:	bf00      	nop
 8011538:	240026d0 	.word	0x240026d0

0801153c <__malloc_lock>:
 801153c:	4801      	ldr	r0, [pc, #4]	@ (8011544 <__malloc_lock+0x8>)
 801153e:	f7ff b926 	b.w	801078e <__retarget_lock_acquire_recursive>
 8011542:	bf00      	nop
 8011544:	240026c8 	.word	0x240026c8

08011548 <__malloc_unlock>:
 8011548:	4801      	ldr	r0, [pc, #4]	@ (8011550 <__malloc_unlock+0x8>)
 801154a:	f7ff b921 	b.w	8010790 <__retarget_lock_release_recursive>
 801154e:	bf00      	nop
 8011550:	240026c8 	.word	0x240026c8

08011554 <_Balloc>:
 8011554:	b570      	push	{r4, r5, r6, lr}
 8011556:	69c6      	ldr	r6, [r0, #28]
 8011558:	4604      	mov	r4, r0
 801155a:	460d      	mov	r5, r1
 801155c:	b976      	cbnz	r6, 801157c <_Balloc+0x28>
 801155e:	2010      	movs	r0, #16
 8011560:	f7ff ff42 	bl	80113e8 <malloc>
 8011564:	4602      	mov	r2, r0
 8011566:	61e0      	str	r0, [r4, #28]
 8011568:	b920      	cbnz	r0, 8011574 <_Balloc+0x20>
 801156a:	4b18      	ldr	r3, [pc, #96]	@ (80115cc <_Balloc+0x78>)
 801156c:	4818      	ldr	r0, [pc, #96]	@ (80115d0 <_Balloc+0x7c>)
 801156e:	216b      	movs	r1, #107	@ 0x6b
 8011570:	f000 fdae 	bl	80120d0 <__assert_func>
 8011574:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011578:	6006      	str	r6, [r0, #0]
 801157a:	60c6      	str	r6, [r0, #12]
 801157c:	69e6      	ldr	r6, [r4, #28]
 801157e:	68f3      	ldr	r3, [r6, #12]
 8011580:	b183      	cbz	r3, 80115a4 <_Balloc+0x50>
 8011582:	69e3      	ldr	r3, [r4, #28]
 8011584:	68db      	ldr	r3, [r3, #12]
 8011586:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801158a:	b9b8      	cbnz	r0, 80115bc <_Balloc+0x68>
 801158c:	2101      	movs	r1, #1
 801158e:	fa01 f605 	lsl.w	r6, r1, r5
 8011592:	1d72      	adds	r2, r6, #5
 8011594:	0092      	lsls	r2, r2, #2
 8011596:	4620      	mov	r0, r4
 8011598:	f000 fdb8 	bl	801210c <_calloc_r>
 801159c:	b160      	cbz	r0, 80115b8 <_Balloc+0x64>
 801159e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80115a2:	e00e      	b.n	80115c2 <_Balloc+0x6e>
 80115a4:	2221      	movs	r2, #33	@ 0x21
 80115a6:	2104      	movs	r1, #4
 80115a8:	4620      	mov	r0, r4
 80115aa:	f000 fdaf 	bl	801210c <_calloc_r>
 80115ae:	69e3      	ldr	r3, [r4, #28]
 80115b0:	60f0      	str	r0, [r6, #12]
 80115b2:	68db      	ldr	r3, [r3, #12]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d1e4      	bne.n	8011582 <_Balloc+0x2e>
 80115b8:	2000      	movs	r0, #0
 80115ba:	bd70      	pop	{r4, r5, r6, pc}
 80115bc:	6802      	ldr	r2, [r0, #0]
 80115be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80115c2:	2300      	movs	r3, #0
 80115c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80115c8:	e7f7      	b.n	80115ba <_Balloc+0x66>
 80115ca:	bf00      	nop
 80115cc:	080128c9 	.word	0x080128c9
 80115d0:	08012949 	.word	0x08012949

080115d4 <_Bfree>:
 80115d4:	b570      	push	{r4, r5, r6, lr}
 80115d6:	69c6      	ldr	r6, [r0, #28]
 80115d8:	4605      	mov	r5, r0
 80115da:	460c      	mov	r4, r1
 80115dc:	b976      	cbnz	r6, 80115fc <_Bfree+0x28>
 80115de:	2010      	movs	r0, #16
 80115e0:	f7ff ff02 	bl	80113e8 <malloc>
 80115e4:	4602      	mov	r2, r0
 80115e6:	61e8      	str	r0, [r5, #28]
 80115e8:	b920      	cbnz	r0, 80115f4 <_Bfree+0x20>
 80115ea:	4b09      	ldr	r3, [pc, #36]	@ (8011610 <_Bfree+0x3c>)
 80115ec:	4809      	ldr	r0, [pc, #36]	@ (8011614 <_Bfree+0x40>)
 80115ee:	218f      	movs	r1, #143	@ 0x8f
 80115f0:	f000 fd6e 	bl	80120d0 <__assert_func>
 80115f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80115f8:	6006      	str	r6, [r0, #0]
 80115fa:	60c6      	str	r6, [r0, #12]
 80115fc:	b13c      	cbz	r4, 801160e <_Bfree+0x3a>
 80115fe:	69eb      	ldr	r3, [r5, #28]
 8011600:	6862      	ldr	r2, [r4, #4]
 8011602:	68db      	ldr	r3, [r3, #12]
 8011604:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011608:	6021      	str	r1, [r4, #0]
 801160a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801160e:	bd70      	pop	{r4, r5, r6, pc}
 8011610:	080128c9 	.word	0x080128c9
 8011614:	08012949 	.word	0x08012949

08011618 <__multadd>:
 8011618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801161c:	690d      	ldr	r5, [r1, #16]
 801161e:	4607      	mov	r7, r0
 8011620:	460c      	mov	r4, r1
 8011622:	461e      	mov	r6, r3
 8011624:	f101 0c14 	add.w	ip, r1, #20
 8011628:	2000      	movs	r0, #0
 801162a:	f8dc 3000 	ldr.w	r3, [ip]
 801162e:	b299      	uxth	r1, r3
 8011630:	fb02 6101 	mla	r1, r2, r1, r6
 8011634:	0c1e      	lsrs	r6, r3, #16
 8011636:	0c0b      	lsrs	r3, r1, #16
 8011638:	fb02 3306 	mla	r3, r2, r6, r3
 801163c:	b289      	uxth	r1, r1
 801163e:	3001      	adds	r0, #1
 8011640:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011644:	4285      	cmp	r5, r0
 8011646:	f84c 1b04 	str.w	r1, [ip], #4
 801164a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801164e:	dcec      	bgt.n	801162a <__multadd+0x12>
 8011650:	b30e      	cbz	r6, 8011696 <__multadd+0x7e>
 8011652:	68a3      	ldr	r3, [r4, #8]
 8011654:	42ab      	cmp	r3, r5
 8011656:	dc19      	bgt.n	801168c <__multadd+0x74>
 8011658:	6861      	ldr	r1, [r4, #4]
 801165a:	4638      	mov	r0, r7
 801165c:	3101      	adds	r1, #1
 801165e:	f7ff ff79 	bl	8011554 <_Balloc>
 8011662:	4680      	mov	r8, r0
 8011664:	b928      	cbnz	r0, 8011672 <__multadd+0x5a>
 8011666:	4602      	mov	r2, r0
 8011668:	4b0c      	ldr	r3, [pc, #48]	@ (801169c <__multadd+0x84>)
 801166a:	480d      	ldr	r0, [pc, #52]	@ (80116a0 <__multadd+0x88>)
 801166c:	21ba      	movs	r1, #186	@ 0xba
 801166e:	f000 fd2f 	bl	80120d0 <__assert_func>
 8011672:	6922      	ldr	r2, [r4, #16]
 8011674:	3202      	adds	r2, #2
 8011676:	f104 010c 	add.w	r1, r4, #12
 801167a:	0092      	lsls	r2, r2, #2
 801167c:	300c      	adds	r0, #12
 801167e:	f000 fd19 	bl	80120b4 <memcpy>
 8011682:	4621      	mov	r1, r4
 8011684:	4638      	mov	r0, r7
 8011686:	f7ff ffa5 	bl	80115d4 <_Bfree>
 801168a:	4644      	mov	r4, r8
 801168c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011690:	3501      	adds	r5, #1
 8011692:	615e      	str	r6, [r3, #20]
 8011694:	6125      	str	r5, [r4, #16]
 8011696:	4620      	mov	r0, r4
 8011698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801169c:	08012938 	.word	0x08012938
 80116a0:	08012949 	.word	0x08012949

080116a4 <__hi0bits>:
 80116a4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80116a8:	4603      	mov	r3, r0
 80116aa:	bf36      	itet	cc
 80116ac:	0403      	lslcc	r3, r0, #16
 80116ae:	2000      	movcs	r0, #0
 80116b0:	2010      	movcc	r0, #16
 80116b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80116b6:	bf3c      	itt	cc
 80116b8:	021b      	lslcc	r3, r3, #8
 80116ba:	3008      	addcc	r0, #8
 80116bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80116c0:	bf3c      	itt	cc
 80116c2:	011b      	lslcc	r3, r3, #4
 80116c4:	3004      	addcc	r0, #4
 80116c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80116ca:	bf3c      	itt	cc
 80116cc:	009b      	lslcc	r3, r3, #2
 80116ce:	3002      	addcc	r0, #2
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	db05      	blt.n	80116e0 <__hi0bits+0x3c>
 80116d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80116d8:	f100 0001 	add.w	r0, r0, #1
 80116dc:	bf08      	it	eq
 80116de:	2020      	moveq	r0, #32
 80116e0:	4770      	bx	lr

080116e2 <__lo0bits>:
 80116e2:	6803      	ldr	r3, [r0, #0]
 80116e4:	4602      	mov	r2, r0
 80116e6:	f013 0007 	ands.w	r0, r3, #7
 80116ea:	d00b      	beq.n	8011704 <__lo0bits+0x22>
 80116ec:	07d9      	lsls	r1, r3, #31
 80116ee:	d421      	bmi.n	8011734 <__lo0bits+0x52>
 80116f0:	0798      	lsls	r0, r3, #30
 80116f2:	bf49      	itett	mi
 80116f4:	085b      	lsrmi	r3, r3, #1
 80116f6:	089b      	lsrpl	r3, r3, #2
 80116f8:	2001      	movmi	r0, #1
 80116fa:	6013      	strmi	r3, [r2, #0]
 80116fc:	bf5c      	itt	pl
 80116fe:	6013      	strpl	r3, [r2, #0]
 8011700:	2002      	movpl	r0, #2
 8011702:	4770      	bx	lr
 8011704:	b299      	uxth	r1, r3
 8011706:	b909      	cbnz	r1, 801170c <__lo0bits+0x2a>
 8011708:	0c1b      	lsrs	r3, r3, #16
 801170a:	2010      	movs	r0, #16
 801170c:	b2d9      	uxtb	r1, r3
 801170e:	b909      	cbnz	r1, 8011714 <__lo0bits+0x32>
 8011710:	3008      	adds	r0, #8
 8011712:	0a1b      	lsrs	r3, r3, #8
 8011714:	0719      	lsls	r1, r3, #28
 8011716:	bf04      	itt	eq
 8011718:	091b      	lsreq	r3, r3, #4
 801171a:	3004      	addeq	r0, #4
 801171c:	0799      	lsls	r1, r3, #30
 801171e:	bf04      	itt	eq
 8011720:	089b      	lsreq	r3, r3, #2
 8011722:	3002      	addeq	r0, #2
 8011724:	07d9      	lsls	r1, r3, #31
 8011726:	d403      	bmi.n	8011730 <__lo0bits+0x4e>
 8011728:	085b      	lsrs	r3, r3, #1
 801172a:	f100 0001 	add.w	r0, r0, #1
 801172e:	d003      	beq.n	8011738 <__lo0bits+0x56>
 8011730:	6013      	str	r3, [r2, #0]
 8011732:	4770      	bx	lr
 8011734:	2000      	movs	r0, #0
 8011736:	4770      	bx	lr
 8011738:	2020      	movs	r0, #32
 801173a:	4770      	bx	lr

0801173c <__i2b>:
 801173c:	b510      	push	{r4, lr}
 801173e:	460c      	mov	r4, r1
 8011740:	2101      	movs	r1, #1
 8011742:	f7ff ff07 	bl	8011554 <_Balloc>
 8011746:	4602      	mov	r2, r0
 8011748:	b928      	cbnz	r0, 8011756 <__i2b+0x1a>
 801174a:	4b05      	ldr	r3, [pc, #20]	@ (8011760 <__i2b+0x24>)
 801174c:	4805      	ldr	r0, [pc, #20]	@ (8011764 <__i2b+0x28>)
 801174e:	f240 1145 	movw	r1, #325	@ 0x145
 8011752:	f000 fcbd 	bl	80120d0 <__assert_func>
 8011756:	2301      	movs	r3, #1
 8011758:	6144      	str	r4, [r0, #20]
 801175a:	6103      	str	r3, [r0, #16]
 801175c:	bd10      	pop	{r4, pc}
 801175e:	bf00      	nop
 8011760:	08012938 	.word	0x08012938
 8011764:	08012949 	.word	0x08012949

08011768 <__multiply>:
 8011768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801176c:	4614      	mov	r4, r2
 801176e:	690a      	ldr	r2, [r1, #16]
 8011770:	6923      	ldr	r3, [r4, #16]
 8011772:	429a      	cmp	r2, r3
 8011774:	bfa8      	it	ge
 8011776:	4623      	movge	r3, r4
 8011778:	460f      	mov	r7, r1
 801177a:	bfa4      	itt	ge
 801177c:	460c      	movge	r4, r1
 801177e:	461f      	movge	r7, r3
 8011780:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011784:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011788:	68a3      	ldr	r3, [r4, #8]
 801178a:	6861      	ldr	r1, [r4, #4]
 801178c:	eb0a 0609 	add.w	r6, sl, r9
 8011790:	42b3      	cmp	r3, r6
 8011792:	b085      	sub	sp, #20
 8011794:	bfb8      	it	lt
 8011796:	3101      	addlt	r1, #1
 8011798:	f7ff fedc 	bl	8011554 <_Balloc>
 801179c:	b930      	cbnz	r0, 80117ac <__multiply+0x44>
 801179e:	4602      	mov	r2, r0
 80117a0:	4b44      	ldr	r3, [pc, #272]	@ (80118b4 <__multiply+0x14c>)
 80117a2:	4845      	ldr	r0, [pc, #276]	@ (80118b8 <__multiply+0x150>)
 80117a4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80117a8:	f000 fc92 	bl	80120d0 <__assert_func>
 80117ac:	f100 0514 	add.w	r5, r0, #20
 80117b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80117b4:	462b      	mov	r3, r5
 80117b6:	2200      	movs	r2, #0
 80117b8:	4543      	cmp	r3, r8
 80117ba:	d321      	bcc.n	8011800 <__multiply+0x98>
 80117bc:	f107 0114 	add.w	r1, r7, #20
 80117c0:	f104 0214 	add.w	r2, r4, #20
 80117c4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80117c8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80117cc:	9302      	str	r3, [sp, #8]
 80117ce:	1b13      	subs	r3, r2, r4
 80117d0:	3b15      	subs	r3, #21
 80117d2:	f023 0303 	bic.w	r3, r3, #3
 80117d6:	3304      	adds	r3, #4
 80117d8:	f104 0715 	add.w	r7, r4, #21
 80117dc:	42ba      	cmp	r2, r7
 80117de:	bf38      	it	cc
 80117e0:	2304      	movcc	r3, #4
 80117e2:	9301      	str	r3, [sp, #4]
 80117e4:	9b02      	ldr	r3, [sp, #8]
 80117e6:	9103      	str	r1, [sp, #12]
 80117e8:	428b      	cmp	r3, r1
 80117ea:	d80c      	bhi.n	8011806 <__multiply+0x9e>
 80117ec:	2e00      	cmp	r6, #0
 80117ee:	dd03      	ble.n	80117f8 <__multiply+0x90>
 80117f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d05b      	beq.n	80118b0 <__multiply+0x148>
 80117f8:	6106      	str	r6, [r0, #16]
 80117fa:	b005      	add	sp, #20
 80117fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011800:	f843 2b04 	str.w	r2, [r3], #4
 8011804:	e7d8      	b.n	80117b8 <__multiply+0x50>
 8011806:	f8b1 a000 	ldrh.w	sl, [r1]
 801180a:	f1ba 0f00 	cmp.w	sl, #0
 801180e:	d024      	beq.n	801185a <__multiply+0xf2>
 8011810:	f104 0e14 	add.w	lr, r4, #20
 8011814:	46a9      	mov	r9, r5
 8011816:	f04f 0c00 	mov.w	ip, #0
 801181a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801181e:	f8d9 3000 	ldr.w	r3, [r9]
 8011822:	fa1f fb87 	uxth.w	fp, r7
 8011826:	b29b      	uxth	r3, r3
 8011828:	fb0a 330b 	mla	r3, sl, fp, r3
 801182c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011830:	f8d9 7000 	ldr.w	r7, [r9]
 8011834:	4463      	add	r3, ip
 8011836:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801183a:	fb0a c70b 	mla	r7, sl, fp, ip
 801183e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011842:	b29b      	uxth	r3, r3
 8011844:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011848:	4572      	cmp	r2, lr
 801184a:	f849 3b04 	str.w	r3, [r9], #4
 801184e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011852:	d8e2      	bhi.n	801181a <__multiply+0xb2>
 8011854:	9b01      	ldr	r3, [sp, #4]
 8011856:	f845 c003 	str.w	ip, [r5, r3]
 801185a:	9b03      	ldr	r3, [sp, #12]
 801185c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011860:	3104      	adds	r1, #4
 8011862:	f1b9 0f00 	cmp.w	r9, #0
 8011866:	d021      	beq.n	80118ac <__multiply+0x144>
 8011868:	682b      	ldr	r3, [r5, #0]
 801186a:	f104 0c14 	add.w	ip, r4, #20
 801186e:	46ae      	mov	lr, r5
 8011870:	f04f 0a00 	mov.w	sl, #0
 8011874:	f8bc b000 	ldrh.w	fp, [ip]
 8011878:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801187c:	fb09 770b 	mla	r7, r9, fp, r7
 8011880:	4457      	add	r7, sl
 8011882:	b29b      	uxth	r3, r3
 8011884:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011888:	f84e 3b04 	str.w	r3, [lr], #4
 801188c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011890:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011894:	f8be 3000 	ldrh.w	r3, [lr]
 8011898:	fb09 330a 	mla	r3, r9, sl, r3
 801189c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80118a0:	4562      	cmp	r2, ip
 80118a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80118a6:	d8e5      	bhi.n	8011874 <__multiply+0x10c>
 80118a8:	9f01      	ldr	r7, [sp, #4]
 80118aa:	51eb      	str	r3, [r5, r7]
 80118ac:	3504      	adds	r5, #4
 80118ae:	e799      	b.n	80117e4 <__multiply+0x7c>
 80118b0:	3e01      	subs	r6, #1
 80118b2:	e79b      	b.n	80117ec <__multiply+0x84>
 80118b4:	08012938 	.word	0x08012938
 80118b8:	08012949 	.word	0x08012949

080118bc <__pow5mult>:
 80118bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118c0:	4615      	mov	r5, r2
 80118c2:	f012 0203 	ands.w	r2, r2, #3
 80118c6:	4607      	mov	r7, r0
 80118c8:	460e      	mov	r6, r1
 80118ca:	d007      	beq.n	80118dc <__pow5mult+0x20>
 80118cc:	4c25      	ldr	r4, [pc, #148]	@ (8011964 <__pow5mult+0xa8>)
 80118ce:	3a01      	subs	r2, #1
 80118d0:	2300      	movs	r3, #0
 80118d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80118d6:	f7ff fe9f 	bl	8011618 <__multadd>
 80118da:	4606      	mov	r6, r0
 80118dc:	10ad      	asrs	r5, r5, #2
 80118de:	d03d      	beq.n	801195c <__pow5mult+0xa0>
 80118e0:	69fc      	ldr	r4, [r7, #28]
 80118e2:	b97c      	cbnz	r4, 8011904 <__pow5mult+0x48>
 80118e4:	2010      	movs	r0, #16
 80118e6:	f7ff fd7f 	bl	80113e8 <malloc>
 80118ea:	4602      	mov	r2, r0
 80118ec:	61f8      	str	r0, [r7, #28]
 80118ee:	b928      	cbnz	r0, 80118fc <__pow5mult+0x40>
 80118f0:	4b1d      	ldr	r3, [pc, #116]	@ (8011968 <__pow5mult+0xac>)
 80118f2:	481e      	ldr	r0, [pc, #120]	@ (801196c <__pow5mult+0xb0>)
 80118f4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80118f8:	f000 fbea 	bl	80120d0 <__assert_func>
 80118fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011900:	6004      	str	r4, [r0, #0]
 8011902:	60c4      	str	r4, [r0, #12]
 8011904:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011908:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801190c:	b94c      	cbnz	r4, 8011922 <__pow5mult+0x66>
 801190e:	f240 2171 	movw	r1, #625	@ 0x271
 8011912:	4638      	mov	r0, r7
 8011914:	f7ff ff12 	bl	801173c <__i2b>
 8011918:	2300      	movs	r3, #0
 801191a:	f8c8 0008 	str.w	r0, [r8, #8]
 801191e:	4604      	mov	r4, r0
 8011920:	6003      	str	r3, [r0, #0]
 8011922:	f04f 0900 	mov.w	r9, #0
 8011926:	07eb      	lsls	r3, r5, #31
 8011928:	d50a      	bpl.n	8011940 <__pow5mult+0x84>
 801192a:	4631      	mov	r1, r6
 801192c:	4622      	mov	r2, r4
 801192e:	4638      	mov	r0, r7
 8011930:	f7ff ff1a 	bl	8011768 <__multiply>
 8011934:	4631      	mov	r1, r6
 8011936:	4680      	mov	r8, r0
 8011938:	4638      	mov	r0, r7
 801193a:	f7ff fe4b 	bl	80115d4 <_Bfree>
 801193e:	4646      	mov	r6, r8
 8011940:	106d      	asrs	r5, r5, #1
 8011942:	d00b      	beq.n	801195c <__pow5mult+0xa0>
 8011944:	6820      	ldr	r0, [r4, #0]
 8011946:	b938      	cbnz	r0, 8011958 <__pow5mult+0x9c>
 8011948:	4622      	mov	r2, r4
 801194a:	4621      	mov	r1, r4
 801194c:	4638      	mov	r0, r7
 801194e:	f7ff ff0b 	bl	8011768 <__multiply>
 8011952:	6020      	str	r0, [r4, #0]
 8011954:	f8c0 9000 	str.w	r9, [r0]
 8011958:	4604      	mov	r4, r0
 801195a:	e7e4      	b.n	8011926 <__pow5mult+0x6a>
 801195c:	4630      	mov	r0, r6
 801195e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011962:	bf00      	nop
 8011964:	080129a4 	.word	0x080129a4
 8011968:	080128c9 	.word	0x080128c9
 801196c:	08012949 	.word	0x08012949

08011970 <__lshift>:
 8011970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011974:	460c      	mov	r4, r1
 8011976:	6849      	ldr	r1, [r1, #4]
 8011978:	6923      	ldr	r3, [r4, #16]
 801197a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801197e:	68a3      	ldr	r3, [r4, #8]
 8011980:	4607      	mov	r7, r0
 8011982:	4691      	mov	r9, r2
 8011984:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011988:	f108 0601 	add.w	r6, r8, #1
 801198c:	42b3      	cmp	r3, r6
 801198e:	db0b      	blt.n	80119a8 <__lshift+0x38>
 8011990:	4638      	mov	r0, r7
 8011992:	f7ff fddf 	bl	8011554 <_Balloc>
 8011996:	4605      	mov	r5, r0
 8011998:	b948      	cbnz	r0, 80119ae <__lshift+0x3e>
 801199a:	4602      	mov	r2, r0
 801199c:	4b28      	ldr	r3, [pc, #160]	@ (8011a40 <__lshift+0xd0>)
 801199e:	4829      	ldr	r0, [pc, #164]	@ (8011a44 <__lshift+0xd4>)
 80119a0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80119a4:	f000 fb94 	bl	80120d0 <__assert_func>
 80119a8:	3101      	adds	r1, #1
 80119aa:	005b      	lsls	r3, r3, #1
 80119ac:	e7ee      	b.n	801198c <__lshift+0x1c>
 80119ae:	2300      	movs	r3, #0
 80119b0:	f100 0114 	add.w	r1, r0, #20
 80119b4:	f100 0210 	add.w	r2, r0, #16
 80119b8:	4618      	mov	r0, r3
 80119ba:	4553      	cmp	r3, sl
 80119bc:	db33      	blt.n	8011a26 <__lshift+0xb6>
 80119be:	6920      	ldr	r0, [r4, #16]
 80119c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80119c4:	f104 0314 	add.w	r3, r4, #20
 80119c8:	f019 091f 	ands.w	r9, r9, #31
 80119cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80119d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80119d4:	d02b      	beq.n	8011a2e <__lshift+0xbe>
 80119d6:	f1c9 0e20 	rsb	lr, r9, #32
 80119da:	468a      	mov	sl, r1
 80119dc:	2200      	movs	r2, #0
 80119de:	6818      	ldr	r0, [r3, #0]
 80119e0:	fa00 f009 	lsl.w	r0, r0, r9
 80119e4:	4310      	orrs	r0, r2
 80119e6:	f84a 0b04 	str.w	r0, [sl], #4
 80119ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80119ee:	459c      	cmp	ip, r3
 80119f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80119f4:	d8f3      	bhi.n	80119de <__lshift+0x6e>
 80119f6:	ebac 0304 	sub.w	r3, ip, r4
 80119fa:	3b15      	subs	r3, #21
 80119fc:	f023 0303 	bic.w	r3, r3, #3
 8011a00:	3304      	adds	r3, #4
 8011a02:	f104 0015 	add.w	r0, r4, #21
 8011a06:	4584      	cmp	ip, r0
 8011a08:	bf38      	it	cc
 8011a0a:	2304      	movcc	r3, #4
 8011a0c:	50ca      	str	r2, [r1, r3]
 8011a0e:	b10a      	cbz	r2, 8011a14 <__lshift+0xa4>
 8011a10:	f108 0602 	add.w	r6, r8, #2
 8011a14:	3e01      	subs	r6, #1
 8011a16:	4638      	mov	r0, r7
 8011a18:	612e      	str	r6, [r5, #16]
 8011a1a:	4621      	mov	r1, r4
 8011a1c:	f7ff fdda 	bl	80115d4 <_Bfree>
 8011a20:	4628      	mov	r0, r5
 8011a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a26:	f842 0f04 	str.w	r0, [r2, #4]!
 8011a2a:	3301      	adds	r3, #1
 8011a2c:	e7c5      	b.n	80119ba <__lshift+0x4a>
 8011a2e:	3904      	subs	r1, #4
 8011a30:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a34:	f841 2f04 	str.w	r2, [r1, #4]!
 8011a38:	459c      	cmp	ip, r3
 8011a3a:	d8f9      	bhi.n	8011a30 <__lshift+0xc0>
 8011a3c:	e7ea      	b.n	8011a14 <__lshift+0xa4>
 8011a3e:	bf00      	nop
 8011a40:	08012938 	.word	0x08012938
 8011a44:	08012949 	.word	0x08012949

08011a48 <__mcmp>:
 8011a48:	690a      	ldr	r2, [r1, #16]
 8011a4a:	4603      	mov	r3, r0
 8011a4c:	6900      	ldr	r0, [r0, #16]
 8011a4e:	1a80      	subs	r0, r0, r2
 8011a50:	b530      	push	{r4, r5, lr}
 8011a52:	d10e      	bne.n	8011a72 <__mcmp+0x2a>
 8011a54:	3314      	adds	r3, #20
 8011a56:	3114      	adds	r1, #20
 8011a58:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011a5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011a60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011a64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011a68:	4295      	cmp	r5, r2
 8011a6a:	d003      	beq.n	8011a74 <__mcmp+0x2c>
 8011a6c:	d205      	bcs.n	8011a7a <__mcmp+0x32>
 8011a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8011a72:	bd30      	pop	{r4, r5, pc}
 8011a74:	42a3      	cmp	r3, r4
 8011a76:	d3f3      	bcc.n	8011a60 <__mcmp+0x18>
 8011a78:	e7fb      	b.n	8011a72 <__mcmp+0x2a>
 8011a7a:	2001      	movs	r0, #1
 8011a7c:	e7f9      	b.n	8011a72 <__mcmp+0x2a>
	...

08011a80 <__mdiff>:
 8011a80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a84:	4689      	mov	r9, r1
 8011a86:	4606      	mov	r6, r0
 8011a88:	4611      	mov	r1, r2
 8011a8a:	4648      	mov	r0, r9
 8011a8c:	4614      	mov	r4, r2
 8011a8e:	f7ff ffdb 	bl	8011a48 <__mcmp>
 8011a92:	1e05      	subs	r5, r0, #0
 8011a94:	d112      	bne.n	8011abc <__mdiff+0x3c>
 8011a96:	4629      	mov	r1, r5
 8011a98:	4630      	mov	r0, r6
 8011a9a:	f7ff fd5b 	bl	8011554 <_Balloc>
 8011a9e:	4602      	mov	r2, r0
 8011aa0:	b928      	cbnz	r0, 8011aae <__mdiff+0x2e>
 8011aa2:	4b3f      	ldr	r3, [pc, #252]	@ (8011ba0 <__mdiff+0x120>)
 8011aa4:	f240 2137 	movw	r1, #567	@ 0x237
 8011aa8:	483e      	ldr	r0, [pc, #248]	@ (8011ba4 <__mdiff+0x124>)
 8011aaa:	f000 fb11 	bl	80120d0 <__assert_func>
 8011aae:	2301      	movs	r3, #1
 8011ab0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011ab4:	4610      	mov	r0, r2
 8011ab6:	b003      	add	sp, #12
 8011ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011abc:	bfbc      	itt	lt
 8011abe:	464b      	movlt	r3, r9
 8011ac0:	46a1      	movlt	r9, r4
 8011ac2:	4630      	mov	r0, r6
 8011ac4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011ac8:	bfba      	itte	lt
 8011aca:	461c      	movlt	r4, r3
 8011acc:	2501      	movlt	r5, #1
 8011ace:	2500      	movge	r5, #0
 8011ad0:	f7ff fd40 	bl	8011554 <_Balloc>
 8011ad4:	4602      	mov	r2, r0
 8011ad6:	b918      	cbnz	r0, 8011ae0 <__mdiff+0x60>
 8011ad8:	4b31      	ldr	r3, [pc, #196]	@ (8011ba0 <__mdiff+0x120>)
 8011ada:	f240 2145 	movw	r1, #581	@ 0x245
 8011ade:	e7e3      	b.n	8011aa8 <__mdiff+0x28>
 8011ae0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011ae4:	6926      	ldr	r6, [r4, #16]
 8011ae6:	60c5      	str	r5, [r0, #12]
 8011ae8:	f109 0310 	add.w	r3, r9, #16
 8011aec:	f109 0514 	add.w	r5, r9, #20
 8011af0:	f104 0e14 	add.w	lr, r4, #20
 8011af4:	f100 0b14 	add.w	fp, r0, #20
 8011af8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011afc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011b00:	9301      	str	r3, [sp, #4]
 8011b02:	46d9      	mov	r9, fp
 8011b04:	f04f 0c00 	mov.w	ip, #0
 8011b08:	9b01      	ldr	r3, [sp, #4]
 8011b0a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011b0e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011b12:	9301      	str	r3, [sp, #4]
 8011b14:	fa1f f38a 	uxth.w	r3, sl
 8011b18:	4619      	mov	r1, r3
 8011b1a:	b283      	uxth	r3, r0
 8011b1c:	1acb      	subs	r3, r1, r3
 8011b1e:	0c00      	lsrs	r0, r0, #16
 8011b20:	4463      	add	r3, ip
 8011b22:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011b26:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011b2a:	b29b      	uxth	r3, r3
 8011b2c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011b30:	4576      	cmp	r6, lr
 8011b32:	f849 3b04 	str.w	r3, [r9], #4
 8011b36:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011b3a:	d8e5      	bhi.n	8011b08 <__mdiff+0x88>
 8011b3c:	1b33      	subs	r3, r6, r4
 8011b3e:	3b15      	subs	r3, #21
 8011b40:	f023 0303 	bic.w	r3, r3, #3
 8011b44:	3415      	adds	r4, #21
 8011b46:	3304      	adds	r3, #4
 8011b48:	42a6      	cmp	r6, r4
 8011b4a:	bf38      	it	cc
 8011b4c:	2304      	movcc	r3, #4
 8011b4e:	441d      	add	r5, r3
 8011b50:	445b      	add	r3, fp
 8011b52:	461e      	mov	r6, r3
 8011b54:	462c      	mov	r4, r5
 8011b56:	4544      	cmp	r4, r8
 8011b58:	d30e      	bcc.n	8011b78 <__mdiff+0xf8>
 8011b5a:	f108 0103 	add.w	r1, r8, #3
 8011b5e:	1b49      	subs	r1, r1, r5
 8011b60:	f021 0103 	bic.w	r1, r1, #3
 8011b64:	3d03      	subs	r5, #3
 8011b66:	45a8      	cmp	r8, r5
 8011b68:	bf38      	it	cc
 8011b6a:	2100      	movcc	r1, #0
 8011b6c:	440b      	add	r3, r1
 8011b6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011b72:	b191      	cbz	r1, 8011b9a <__mdiff+0x11a>
 8011b74:	6117      	str	r7, [r2, #16]
 8011b76:	e79d      	b.n	8011ab4 <__mdiff+0x34>
 8011b78:	f854 1b04 	ldr.w	r1, [r4], #4
 8011b7c:	46e6      	mov	lr, ip
 8011b7e:	0c08      	lsrs	r0, r1, #16
 8011b80:	fa1c fc81 	uxtah	ip, ip, r1
 8011b84:	4471      	add	r1, lr
 8011b86:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011b8a:	b289      	uxth	r1, r1
 8011b8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011b90:	f846 1b04 	str.w	r1, [r6], #4
 8011b94:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011b98:	e7dd      	b.n	8011b56 <__mdiff+0xd6>
 8011b9a:	3f01      	subs	r7, #1
 8011b9c:	e7e7      	b.n	8011b6e <__mdiff+0xee>
 8011b9e:	bf00      	nop
 8011ba0:	08012938 	.word	0x08012938
 8011ba4:	08012949 	.word	0x08012949

08011ba8 <__d2b>:
 8011ba8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011bac:	460f      	mov	r7, r1
 8011bae:	2101      	movs	r1, #1
 8011bb0:	ec59 8b10 	vmov	r8, r9, d0
 8011bb4:	4616      	mov	r6, r2
 8011bb6:	f7ff fccd 	bl	8011554 <_Balloc>
 8011bba:	4604      	mov	r4, r0
 8011bbc:	b930      	cbnz	r0, 8011bcc <__d2b+0x24>
 8011bbe:	4602      	mov	r2, r0
 8011bc0:	4b23      	ldr	r3, [pc, #140]	@ (8011c50 <__d2b+0xa8>)
 8011bc2:	4824      	ldr	r0, [pc, #144]	@ (8011c54 <__d2b+0xac>)
 8011bc4:	f240 310f 	movw	r1, #783	@ 0x30f
 8011bc8:	f000 fa82 	bl	80120d0 <__assert_func>
 8011bcc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011bd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011bd4:	b10d      	cbz	r5, 8011bda <__d2b+0x32>
 8011bd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011bda:	9301      	str	r3, [sp, #4]
 8011bdc:	f1b8 0300 	subs.w	r3, r8, #0
 8011be0:	d023      	beq.n	8011c2a <__d2b+0x82>
 8011be2:	4668      	mov	r0, sp
 8011be4:	9300      	str	r3, [sp, #0]
 8011be6:	f7ff fd7c 	bl	80116e2 <__lo0bits>
 8011bea:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011bee:	b1d0      	cbz	r0, 8011c26 <__d2b+0x7e>
 8011bf0:	f1c0 0320 	rsb	r3, r0, #32
 8011bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8011bf8:	430b      	orrs	r3, r1
 8011bfa:	40c2      	lsrs	r2, r0
 8011bfc:	6163      	str	r3, [r4, #20]
 8011bfe:	9201      	str	r2, [sp, #4]
 8011c00:	9b01      	ldr	r3, [sp, #4]
 8011c02:	61a3      	str	r3, [r4, #24]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	bf0c      	ite	eq
 8011c08:	2201      	moveq	r2, #1
 8011c0a:	2202      	movne	r2, #2
 8011c0c:	6122      	str	r2, [r4, #16]
 8011c0e:	b1a5      	cbz	r5, 8011c3a <__d2b+0x92>
 8011c10:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011c14:	4405      	add	r5, r0
 8011c16:	603d      	str	r5, [r7, #0]
 8011c18:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011c1c:	6030      	str	r0, [r6, #0]
 8011c1e:	4620      	mov	r0, r4
 8011c20:	b003      	add	sp, #12
 8011c22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c26:	6161      	str	r1, [r4, #20]
 8011c28:	e7ea      	b.n	8011c00 <__d2b+0x58>
 8011c2a:	a801      	add	r0, sp, #4
 8011c2c:	f7ff fd59 	bl	80116e2 <__lo0bits>
 8011c30:	9b01      	ldr	r3, [sp, #4]
 8011c32:	6163      	str	r3, [r4, #20]
 8011c34:	3020      	adds	r0, #32
 8011c36:	2201      	movs	r2, #1
 8011c38:	e7e8      	b.n	8011c0c <__d2b+0x64>
 8011c3a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011c3e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011c42:	6038      	str	r0, [r7, #0]
 8011c44:	6918      	ldr	r0, [r3, #16]
 8011c46:	f7ff fd2d 	bl	80116a4 <__hi0bits>
 8011c4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011c4e:	e7e5      	b.n	8011c1c <__d2b+0x74>
 8011c50:	08012938 	.word	0x08012938
 8011c54:	08012949 	.word	0x08012949

08011c58 <__ssputs_r>:
 8011c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c5c:	688e      	ldr	r6, [r1, #8]
 8011c5e:	461f      	mov	r7, r3
 8011c60:	42be      	cmp	r6, r7
 8011c62:	680b      	ldr	r3, [r1, #0]
 8011c64:	4682      	mov	sl, r0
 8011c66:	460c      	mov	r4, r1
 8011c68:	4690      	mov	r8, r2
 8011c6a:	d82d      	bhi.n	8011cc8 <__ssputs_r+0x70>
 8011c6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011c70:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011c74:	d026      	beq.n	8011cc4 <__ssputs_r+0x6c>
 8011c76:	6965      	ldr	r5, [r4, #20]
 8011c78:	6909      	ldr	r1, [r1, #16]
 8011c7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011c7e:	eba3 0901 	sub.w	r9, r3, r1
 8011c82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011c86:	1c7b      	adds	r3, r7, #1
 8011c88:	444b      	add	r3, r9
 8011c8a:	106d      	asrs	r5, r5, #1
 8011c8c:	429d      	cmp	r5, r3
 8011c8e:	bf38      	it	cc
 8011c90:	461d      	movcc	r5, r3
 8011c92:	0553      	lsls	r3, r2, #21
 8011c94:	d527      	bpl.n	8011ce6 <__ssputs_r+0x8e>
 8011c96:	4629      	mov	r1, r5
 8011c98:	f7ff fbd0 	bl	801143c <_malloc_r>
 8011c9c:	4606      	mov	r6, r0
 8011c9e:	b360      	cbz	r0, 8011cfa <__ssputs_r+0xa2>
 8011ca0:	6921      	ldr	r1, [r4, #16]
 8011ca2:	464a      	mov	r2, r9
 8011ca4:	f000 fa06 	bl	80120b4 <memcpy>
 8011ca8:	89a3      	ldrh	r3, [r4, #12]
 8011caa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011cae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011cb2:	81a3      	strh	r3, [r4, #12]
 8011cb4:	6126      	str	r6, [r4, #16]
 8011cb6:	6165      	str	r5, [r4, #20]
 8011cb8:	444e      	add	r6, r9
 8011cba:	eba5 0509 	sub.w	r5, r5, r9
 8011cbe:	6026      	str	r6, [r4, #0]
 8011cc0:	60a5      	str	r5, [r4, #8]
 8011cc2:	463e      	mov	r6, r7
 8011cc4:	42be      	cmp	r6, r7
 8011cc6:	d900      	bls.n	8011cca <__ssputs_r+0x72>
 8011cc8:	463e      	mov	r6, r7
 8011cca:	6820      	ldr	r0, [r4, #0]
 8011ccc:	4632      	mov	r2, r6
 8011cce:	4641      	mov	r1, r8
 8011cd0:	f000 f9c6 	bl	8012060 <memmove>
 8011cd4:	68a3      	ldr	r3, [r4, #8]
 8011cd6:	1b9b      	subs	r3, r3, r6
 8011cd8:	60a3      	str	r3, [r4, #8]
 8011cda:	6823      	ldr	r3, [r4, #0]
 8011cdc:	4433      	add	r3, r6
 8011cde:	6023      	str	r3, [r4, #0]
 8011ce0:	2000      	movs	r0, #0
 8011ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ce6:	462a      	mov	r2, r5
 8011ce8:	f000 fa36 	bl	8012158 <_realloc_r>
 8011cec:	4606      	mov	r6, r0
 8011cee:	2800      	cmp	r0, #0
 8011cf0:	d1e0      	bne.n	8011cb4 <__ssputs_r+0x5c>
 8011cf2:	6921      	ldr	r1, [r4, #16]
 8011cf4:	4650      	mov	r0, sl
 8011cf6:	f7ff fb2d 	bl	8011354 <_free_r>
 8011cfa:	230c      	movs	r3, #12
 8011cfc:	f8ca 3000 	str.w	r3, [sl]
 8011d00:	89a3      	ldrh	r3, [r4, #12]
 8011d02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d06:	81a3      	strh	r3, [r4, #12]
 8011d08:	f04f 30ff 	mov.w	r0, #4294967295
 8011d0c:	e7e9      	b.n	8011ce2 <__ssputs_r+0x8a>
	...

08011d10 <_svfiprintf_r>:
 8011d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d14:	4698      	mov	r8, r3
 8011d16:	898b      	ldrh	r3, [r1, #12]
 8011d18:	061b      	lsls	r3, r3, #24
 8011d1a:	b09d      	sub	sp, #116	@ 0x74
 8011d1c:	4607      	mov	r7, r0
 8011d1e:	460d      	mov	r5, r1
 8011d20:	4614      	mov	r4, r2
 8011d22:	d510      	bpl.n	8011d46 <_svfiprintf_r+0x36>
 8011d24:	690b      	ldr	r3, [r1, #16]
 8011d26:	b973      	cbnz	r3, 8011d46 <_svfiprintf_r+0x36>
 8011d28:	2140      	movs	r1, #64	@ 0x40
 8011d2a:	f7ff fb87 	bl	801143c <_malloc_r>
 8011d2e:	6028      	str	r0, [r5, #0]
 8011d30:	6128      	str	r0, [r5, #16]
 8011d32:	b930      	cbnz	r0, 8011d42 <_svfiprintf_r+0x32>
 8011d34:	230c      	movs	r3, #12
 8011d36:	603b      	str	r3, [r7, #0]
 8011d38:	f04f 30ff 	mov.w	r0, #4294967295
 8011d3c:	b01d      	add	sp, #116	@ 0x74
 8011d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d42:	2340      	movs	r3, #64	@ 0x40
 8011d44:	616b      	str	r3, [r5, #20]
 8011d46:	2300      	movs	r3, #0
 8011d48:	9309      	str	r3, [sp, #36]	@ 0x24
 8011d4a:	2320      	movs	r3, #32
 8011d4c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011d50:	f8cd 800c 	str.w	r8, [sp, #12]
 8011d54:	2330      	movs	r3, #48	@ 0x30
 8011d56:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011ef4 <_svfiprintf_r+0x1e4>
 8011d5a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011d5e:	f04f 0901 	mov.w	r9, #1
 8011d62:	4623      	mov	r3, r4
 8011d64:	469a      	mov	sl, r3
 8011d66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d6a:	b10a      	cbz	r2, 8011d70 <_svfiprintf_r+0x60>
 8011d6c:	2a25      	cmp	r2, #37	@ 0x25
 8011d6e:	d1f9      	bne.n	8011d64 <_svfiprintf_r+0x54>
 8011d70:	ebba 0b04 	subs.w	fp, sl, r4
 8011d74:	d00b      	beq.n	8011d8e <_svfiprintf_r+0x7e>
 8011d76:	465b      	mov	r3, fp
 8011d78:	4622      	mov	r2, r4
 8011d7a:	4629      	mov	r1, r5
 8011d7c:	4638      	mov	r0, r7
 8011d7e:	f7ff ff6b 	bl	8011c58 <__ssputs_r>
 8011d82:	3001      	adds	r0, #1
 8011d84:	f000 80a7 	beq.w	8011ed6 <_svfiprintf_r+0x1c6>
 8011d88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011d8a:	445a      	add	r2, fp
 8011d8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8011d8e:	f89a 3000 	ldrb.w	r3, [sl]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	f000 809f 	beq.w	8011ed6 <_svfiprintf_r+0x1c6>
 8011d98:	2300      	movs	r3, #0
 8011d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8011d9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011da2:	f10a 0a01 	add.w	sl, sl, #1
 8011da6:	9304      	str	r3, [sp, #16]
 8011da8:	9307      	str	r3, [sp, #28]
 8011daa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011dae:	931a      	str	r3, [sp, #104]	@ 0x68
 8011db0:	4654      	mov	r4, sl
 8011db2:	2205      	movs	r2, #5
 8011db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011db8:	484e      	ldr	r0, [pc, #312]	@ (8011ef4 <_svfiprintf_r+0x1e4>)
 8011dba:	f7ee fa91 	bl	80002e0 <memchr>
 8011dbe:	9a04      	ldr	r2, [sp, #16]
 8011dc0:	b9d8      	cbnz	r0, 8011dfa <_svfiprintf_r+0xea>
 8011dc2:	06d0      	lsls	r0, r2, #27
 8011dc4:	bf44      	itt	mi
 8011dc6:	2320      	movmi	r3, #32
 8011dc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011dcc:	0711      	lsls	r1, r2, #28
 8011dce:	bf44      	itt	mi
 8011dd0:	232b      	movmi	r3, #43	@ 0x2b
 8011dd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011dd6:	f89a 3000 	ldrb.w	r3, [sl]
 8011dda:	2b2a      	cmp	r3, #42	@ 0x2a
 8011ddc:	d015      	beq.n	8011e0a <_svfiprintf_r+0xfa>
 8011dde:	9a07      	ldr	r2, [sp, #28]
 8011de0:	4654      	mov	r4, sl
 8011de2:	2000      	movs	r0, #0
 8011de4:	f04f 0c0a 	mov.w	ip, #10
 8011de8:	4621      	mov	r1, r4
 8011dea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011dee:	3b30      	subs	r3, #48	@ 0x30
 8011df0:	2b09      	cmp	r3, #9
 8011df2:	d94b      	bls.n	8011e8c <_svfiprintf_r+0x17c>
 8011df4:	b1b0      	cbz	r0, 8011e24 <_svfiprintf_r+0x114>
 8011df6:	9207      	str	r2, [sp, #28]
 8011df8:	e014      	b.n	8011e24 <_svfiprintf_r+0x114>
 8011dfa:	eba0 0308 	sub.w	r3, r0, r8
 8011dfe:	fa09 f303 	lsl.w	r3, r9, r3
 8011e02:	4313      	orrs	r3, r2
 8011e04:	9304      	str	r3, [sp, #16]
 8011e06:	46a2      	mov	sl, r4
 8011e08:	e7d2      	b.n	8011db0 <_svfiprintf_r+0xa0>
 8011e0a:	9b03      	ldr	r3, [sp, #12]
 8011e0c:	1d19      	adds	r1, r3, #4
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	9103      	str	r1, [sp, #12]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	bfbb      	ittet	lt
 8011e16:	425b      	neglt	r3, r3
 8011e18:	f042 0202 	orrlt.w	r2, r2, #2
 8011e1c:	9307      	strge	r3, [sp, #28]
 8011e1e:	9307      	strlt	r3, [sp, #28]
 8011e20:	bfb8      	it	lt
 8011e22:	9204      	strlt	r2, [sp, #16]
 8011e24:	7823      	ldrb	r3, [r4, #0]
 8011e26:	2b2e      	cmp	r3, #46	@ 0x2e
 8011e28:	d10a      	bne.n	8011e40 <_svfiprintf_r+0x130>
 8011e2a:	7863      	ldrb	r3, [r4, #1]
 8011e2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8011e2e:	d132      	bne.n	8011e96 <_svfiprintf_r+0x186>
 8011e30:	9b03      	ldr	r3, [sp, #12]
 8011e32:	1d1a      	adds	r2, r3, #4
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	9203      	str	r2, [sp, #12]
 8011e38:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011e3c:	3402      	adds	r4, #2
 8011e3e:	9305      	str	r3, [sp, #20]
 8011e40:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011f04 <_svfiprintf_r+0x1f4>
 8011e44:	7821      	ldrb	r1, [r4, #0]
 8011e46:	2203      	movs	r2, #3
 8011e48:	4650      	mov	r0, sl
 8011e4a:	f7ee fa49 	bl	80002e0 <memchr>
 8011e4e:	b138      	cbz	r0, 8011e60 <_svfiprintf_r+0x150>
 8011e50:	9b04      	ldr	r3, [sp, #16]
 8011e52:	eba0 000a 	sub.w	r0, r0, sl
 8011e56:	2240      	movs	r2, #64	@ 0x40
 8011e58:	4082      	lsls	r2, r0
 8011e5a:	4313      	orrs	r3, r2
 8011e5c:	3401      	adds	r4, #1
 8011e5e:	9304      	str	r3, [sp, #16]
 8011e60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e64:	4824      	ldr	r0, [pc, #144]	@ (8011ef8 <_svfiprintf_r+0x1e8>)
 8011e66:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011e6a:	2206      	movs	r2, #6
 8011e6c:	f7ee fa38 	bl	80002e0 <memchr>
 8011e70:	2800      	cmp	r0, #0
 8011e72:	d036      	beq.n	8011ee2 <_svfiprintf_r+0x1d2>
 8011e74:	4b21      	ldr	r3, [pc, #132]	@ (8011efc <_svfiprintf_r+0x1ec>)
 8011e76:	bb1b      	cbnz	r3, 8011ec0 <_svfiprintf_r+0x1b0>
 8011e78:	9b03      	ldr	r3, [sp, #12]
 8011e7a:	3307      	adds	r3, #7
 8011e7c:	f023 0307 	bic.w	r3, r3, #7
 8011e80:	3308      	adds	r3, #8
 8011e82:	9303      	str	r3, [sp, #12]
 8011e84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e86:	4433      	add	r3, r6
 8011e88:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e8a:	e76a      	b.n	8011d62 <_svfiprintf_r+0x52>
 8011e8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011e90:	460c      	mov	r4, r1
 8011e92:	2001      	movs	r0, #1
 8011e94:	e7a8      	b.n	8011de8 <_svfiprintf_r+0xd8>
 8011e96:	2300      	movs	r3, #0
 8011e98:	3401      	adds	r4, #1
 8011e9a:	9305      	str	r3, [sp, #20]
 8011e9c:	4619      	mov	r1, r3
 8011e9e:	f04f 0c0a 	mov.w	ip, #10
 8011ea2:	4620      	mov	r0, r4
 8011ea4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011ea8:	3a30      	subs	r2, #48	@ 0x30
 8011eaa:	2a09      	cmp	r2, #9
 8011eac:	d903      	bls.n	8011eb6 <_svfiprintf_r+0x1a6>
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d0c6      	beq.n	8011e40 <_svfiprintf_r+0x130>
 8011eb2:	9105      	str	r1, [sp, #20]
 8011eb4:	e7c4      	b.n	8011e40 <_svfiprintf_r+0x130>
 8011eb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8011eba:	4604      	mov	r4, r0
 8011ebc:	2301      	movs	r3, #1
 8011ebe:	e7f0      	b.n	8011ea2 <_svfiprintf_r+0x192>
 8011ec0:	ab03      	add	r3, sp, #12
 8011ec2:	9300      	str	r3, [sp, #0]
 8011ec4:	462a      	mov	r2, r5
 8011ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8011f00 <_svfiprintf_r+0x1f0>)
 8011ec8:	a904      	add	r1, sp, #16
 8011eca:	4638      	mov	r0, r7
 8011ecc:	f7fd ff14 	bl	800fcf8 <_printf_float>
 8011ed0:	1c42      	adds	r2, r0, #1
 8011ed2:	4606      	mov	r6, r0
 8011ed4:	d1d6      	bne.n	8011e84 <_svfiprintf_r+0x174>
 8011ed6:	89ab      	ldrh	r3, [r5, #12]
 8011ed8:	065b      	lsls	r3, r3, #25
 8011eda:	f53f af2d 	bmi.w	8011d38 <_svfiprintf_r+0x28>
 8011ede:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011ee0:	e72c      	b.n	8011d3c <_svfiprintf_r+0x2c>
 8011ee2:	ab03      	add	r3, sp, #12
 8011ee4:	9300      	str	r3, [sp, #0]
 8011ee6:	462a      	mov	r2, r5
 8011ee8:	4b05      	ldr	r3, [pc, #20]	@ (8011f00 <_svfiprintf_r+0x1f0>)
 8011eea:	a904      	add	r1, sp, #16
 8011eec:	4638      	mov	r0, r7
 8011eee:	f7fe f98b 	bl	8010208 <_printf_i>
 8011ef2:	e7ed      	b.n	8011ed0 <_svfiprintf_r+0x1c0>
 8011ef4:	08012aa0 	.word	0x08012aa0
 8011ef8:	08012aaa 	.word	0x08012aaa
 8011efc:	0800fcf9 	.word	0x0800fcf9
 8011f00:	08011c59 	.word	0x08011c59
 8011f04:	08012aa6 	.word	0x08012aa6

08011f08 <__sflush_r>:
 8011f08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f10:	0716      	lsls	r6, r2, #28
 8011f12:	4605      	mov	r5, r0
 8011f14:	460c      	mov	r4, r1
 8011f16:	d454      	bmi.n	8011fc2 <__sflush_r+0xba>
 8011f18:	684b      	ldr	r3, [r1, #4]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	dc02      	bgt.n	8011f24 <__sflush_r+0x1c>
 8011f1e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	dd48      	ble.n	8011fb6 <__sflush_r+0xae>
 8011f24:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011f26:	2e00      	cmp	r6, #0
 8011f28:	d045      	beq.n	8011fb6 <__sflush_r+0xae>
 8011f2a:	2300      	movs	r3, #0
 8011f2c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011f30:	682f      	ldr	r7, [r5, #0]
 8011f32:	6a21      	ldr	r1, [r4, #32]
 8011f34:	602b      	str	r3, [r5, #0]
 8011f36:	d030      	beq.n	8011f9a <__sflush_r+0x92>
 8011f38:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011f3a:	89a3      	ldrh	r3, [r4, #12]
 8011f3c:	0759      	lsls	r1, r3, #29
 8011f3e:	d505      	bpl.n	8011f4c <__sflush_r+0x44>
 8011f40:	6863      	ldr	r3, [r4, #4]
 8011f42:	1ad2      	subs	r2, r2, r3
 8011f44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011f46:	b10b      	cbz	r3, 8011f4c <__sflush_r+0x44>
 8011f48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011f4a:	1ad2      	subs	r2, r2, r3
 8011f4c:	2300      	movs	r3, #0
 8011f4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011f50:	6a21      	ldr	r1, [r4, #32]
 8011f52:	4628      	mov	r0, r5
 8011f54:	47b0      	blx	r6
 8011f56:	1c43      	adds	r3, r0, #1
 8011f58:	89a3      	ldrh	r3, [r4, #12]
 8011f5a:	d106      	bne.n	8011f6a <__sflush_r+0x62>
 8011f5c:	6829      	ldr	r1, [r5, #0]
 8011f5e:	291d      	cmp	r1, #29
 8011f60:	d82b      	bhi.n	8011fba <__sflush_r+0xb2>
 8011f62:	4a2a      	ldr	r2, [pc, #168]	@ (801200c <__sflush_r+0x104>)
 8011f64:	410a      	asrs	r2, r1
 8011f66:	07d6      	lsls	r6, r2, #31
 8011f68:	d427      	bmi.n	8011fba <__sflush_r+0xb2>
 8011f6a:	2200      	movs	r2, #0
 8011f6c:	6062      	str	r2, [r4, #4]
 8011f6e:	04d9      	lsls	r1, r3, #19
 8011f70:	6922      	ldr	r2, [r4, #16]
 8011f72:	6022      	str	r2, [r4, #0]
 8011f74:	d504      	bpl.n	8011f80 <__sflush_r+0x78>
 8011f76:	1c42      	adds	r2, r0, #1
 8011f78:	d101      	bne.n	8011f7e <__sflush_r+0x76>
 8011f7a:	682b      	ldr	r3, [r5, #0]
 8011f7c:	b903      	cbnz	r3, 8011f80 <__sflush_r+0x78>
 8011f7e:	6560      	str	r0, [r4, #84]	@ 0x54
 8011f80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011f82:	602f      	str	r7, [r5, #0]
 8011f84:	b1b9      	cbz	r1, 8011fb6 <__sflush_r+0xae>
 8011f86:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011f8a:	4299      	cmp	r1, r3
 8011f8c:	d002      	beq.n	8011f94 <__sflush_r+0x8c>
 8011f8e:	4628      	mov	r0, r5
 8011f90:	f7ff f9e0 	bl	8011354 <_free_r>
 8011f94:	2300      	movs	r3, #0
 8011f96:	6363      	str	r3, [r4, #52]	@ 0x34
 8011f98:	e00d      	b.n	8011fb6 <__sflush_r+0xae>
 8011f9a:	2301      	movs	r3, #1
 8011f9c:	4628      	mov	r0, r5
 8011f9e:	47b0      	blx	r6
 8011fa0:	4602      	mov	r2, r0
 8011fa2:	1c50      	adds	r0, r2, #1
 8011fa4:	d1c9      	bne.n	8011f3a <__sflush_r+0x32>
 8011fa6:	682b      	ldr	r3, [r5, #0]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d0c6      	beq.n	8011f3a <__sflush_r+0x32>
 8011fac:	2b1d      	cmp	r3, #29
 8011fae:	d001      	beq.n	8011fb4 <__sflush_r+0xac>
 8011fb0:	2b16      	cmp	r3, #22
 8011fb2:	d11e      	bne.n	8011ff2 <__sflush_r+0xea>
 8011fb4:	602f      	str	r7, [r5, #0]
 8011fb6:	2000      	movs	r0, #0
 8011fb8:	e022      	b.n	8012000 <__sflush_r+0xf8>
 8011fba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011fbe:	b21b      	sxth	r3, r3
 8011fc0:	e01b      	b.n	8011ffa <__sflush_r+0xf2>
 8011fc2:	690f      	ldr	r7, [r1, #16]
 8011fc4:	2f00      	cmp	r7, #0
 8011fc6:	d0f6      	beq.n	8011fb6 <__sflush_r+0xae>
 8011fc8:	0793      	lsls	r3, r2, #30
 8011fca:	680e      	ldr	r6, [r1, #0]
 8011fcc:	bf08      	it	eq
 8011fce:	694b      	ldreq	r3, [r1, #20]
 8011fd0:	600f      	str	r7, [r1, #0]
 8011fd2:	bf18      	it	ne
 8011fd4:	2300      	movne	r3, #0
 8011fd6:	eba6 0807 	sub.w	r8, r6, r7
 8011fda:	608b      	str	r3, [r1, #8]
 8011fdc:	f1b8 0f00 	cmp.w	r8, #0
 8011fe0:	dde9      	ble.n	8011fb6 <__sflush_r+0xae>
 8011fe2:	6a21      	ldr	r1, [r4, #32]
 8011fe4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011fe6:	4643      	mov	r3, r8
 8011fe8:	463a      	mov	r2, r7
 8011fea:	4628      	mov	r0, r5
 8011fec:	47b0      	blx	r6
 8011fee:	2800      	cmp	r0, #0
 8011ff0:	dc08      	bgt.n	8012004 <__sflush_r+0xfc>
 8011ff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ff6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ffa:	81a3      	strh	r3, [r4, #12]
 8011ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8012000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012004:	4407      	add	r7, r0
 8012006:	eba8 0800 	sub.w	r8, r8, r0
 801200a:	e7e7      	b.n	8011fdc <__sflush_r+0xd4>
 801200c:	dfbffffe 	.word	0xdfbffffe

08012010 <_fflush_r>:
 8012010:	b538      	push	{r3, r4, r5, lr}
 8012012:	690b      	ldr	r3, [r1, #16]
 8012014:	4605      	mov	r5, r0
 8012016:	460c      	mov	r4, r1
 8012018:	b913      	cbnz	r3, 8012020 <_fflush_r+0x10>
 801201a:	2500      	movs	r5, #0
 801201c:	4628      	mov	r0, r5
 801201e:	bd38      	pop	{r3, r4, r5, pc}
 8012020:	b118      	cbz	r0, 801202a <_fflush_r+0x1a>
 8012022:	6a03      	ldr	r3, [r0, #32]
 8012024:	b90b      	cbnz	r3, 801202a <_fflush_r+0x1a>
 8012026:	f7fe fa9b 	bl	8010560 <__sinit>
 801202a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d0f3      	beq.n	801201a <_fflush_r+0xa>
 8012032:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012034:	07d0      	lsls	r0, r2, #31
 8012036:	d404      	bmi.n	8012042 <_fflush_r+0x32>
 8012038:	0599      	lsls	r1, r3, #22
 801203a:	d402      	bmi.n	8012042 <_fflush_r+0x32>
 801203c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801203e:	f7fe fba6 	bl	801078e <__retarget_lock_acquire_recursive>
 8012042:	4628      	mov	r0, r5
 8012044:	4621      	mov	r1, r4
 8012046:	f7ff ff5f 	bl	8011f08 <__sflush_r>
 801204a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801204c:	07da      	lsls	r2, r3, #31
 801204e:	4605      	mov	r5, r0
 8012050:	d4e4      	bmi.n	801201c <_fflush_r+0xc>
 8012052:	89a3      	ldrh	r3, [r4, #12]
 8012054:	059b      	lsls	r3, r3, #22
 8012056:	d4e1      	bmi.n	801201c <_fflush_r+0xc>
 8012058:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801205a:	f7fe fb99 	bl	8010790 <__retarget_lock_release_recursive>
 801205e:	e7dd      	b.n	801201c <_fflush_r+0xc>

08012060 <memmove>:
 8012060:	4288      	cmp	r0, r1
 8012062:	b510      	push	{r4, lr}
 8012064:	eb01 0402 	add.w	r4, r1, r2
 8012068:	d902      	bls.n	8012070 <memmove+0x10>
 801206a:	4284      	cmp	r4, r0
 801206c:	4623      	mov	r3, r4
 801206e:	d807      	bhi.n	8012080 <memmove+0x20>
 8012070:	1e43      	subs	r3, r0, #1
 8012072:	42a1      	cmp	r1, r4
 8012074:	d008      	beq.n	8012088 <memmove+0x28>
 8012076:	f811 2b01 	ldrb.w	r2, [r1], #1
 801207a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801207e:	e7f8      	b.n	8012072 <memmove+0x12>
 8012080:	4402      	add	r2, r0
 8012082:	4601      	mov	r1, r0
 8012084:	428a      	cmp	r2, r1
 8012086:	d100      	bne.n	801208a <memmove+0x2a>
 8012088:	bd10      	pop	{r4, pc}
 801208a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801208e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012092:	e7f7      	b.n	8012084 <memmove+0x24>

08012094 <_sbrk_r>:
 8012094:	b538      	push	{r3, r4, r5, lr}
 8012096:	4d06      	ldr	r5, [pc, #24]	@ (80120b0 <_sbrk_r+0x1c>)
 8012098:	2300      	movs	r3, #0
 801209a:	4604      	mov	r4, r0
 801209c:	4608      	mov	r0, r1
 801209e:	602b      	str	r3, [r5, #0]
 80120a0:	f7ef fb18 	bl	80016d4 <_sbrk>
 80120a4:	1c43      	adds	r3, r0, #1
 80120a6:	d102      	bne.n	80120ae <_sbrk_r+0x1a>
 80120a8:	682b      	ldr	r3, [r5, #0]
 80120aa:	b103      	cbz	r3, 80120ae <_sbrk_r+0x1a>
 80120ac:	6023      	str	r3, [r4, #0]
 80120ae:	bd38      	pop	{r3, r4, r5, pc}
 80120b0:	240026c4 	.word	0x240026c4

080120b4 <memcpy>:
 80120b4:	440a      	add	r2, r1
 80120b6:	4291      	cmp	r1, r2
 80120b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80120bc:	d100      	bne.n	80120c0 <memcpy+0xc>
 80120be:	4770      	bx	lr
 80120c0:	b510      	push	{r4, lr}
 80120c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80120c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80120ca:	4291      	cmp	r1, r2
 80120cc:	d1f9      	bne.n	80120c2 <memcpy+0xe>
 80120ce:	bd10      	pop	{r4, pc}

080120d0 <__assert_func>:
 80120d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80120d2:	4614      	mov	r4, r2
 80120d4:	461a      	mov	r2, r3
 80120d6:	4b09      	ldr	r3, [pc, #36]	@ (80120fc <__assert_func+0x2c>)
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	4605      	mov	r5, r0
 80120dc:	68d8      	ldr	r0, [r3, #12]
 80120de:	b954      	cbnz	r4, 80120f6 <__assert_func+0x26>
 80120e0:	4b07      	ldr	r3, [pc, #28]	@ (8012100 <__assert_func+0x30>)
 80120e2:	461c      	mov	r4, r3
 80120e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80120e8:	9100      	str	r1, [sp, #0]
 80120ea:	462b      	mov	r3, r5
 80120ec:	4905      	ldr	r1, [pc, #20]	@ (8012104 <__assert_func+0x34>)
 80120ee:	f000 f86f 	bl	80121d0 <fiprintf>
 80120f2:	f000 f87f 	bl	80121f4 <abort>
 80120f6:	4b04      	ldr	r3, [pc, #16]	@ (8012108 <__assert_func+0x38>)
 80120f8:	e7f4      	b.n	80120e4 <__assert_func+0x14>
 80120fa:	bf00      	nop
 80120fc:	24000138 	.word	0x24000138
 8012100:	08012af6 	.word	0x08012af6
 8012104:	08012ac8 	.word	0x08012ac8
 8012108:	08012abb 	.word	0x08012abb

0801210c <_calloc_r>:
 801210c:	b570      	push	{r4, r5, r6, lr}
 801210e:	fba1 5402 	umull	r5, r4, r1, r2
 8012112:	b93c      	cbnz	r4, 8012124 <_calloc_r+0x18>
 8012114:	4629      	mov	r1, r5
 8012116:	f7ff f991 	bl	801143c <_malloc_r>
 801211a:	4606      	mov	r6, r0
 801211c:	b928      	cbnz	r0, 801212a <_calloc_r+0x1e>
 801211e:	2600      	movs	r6, #0
 8012120:	4630      	mov	r0, r6
 8012122:	bd70      	pop	{r4, r5, r6, pc}
 8012124:	220c      	movs	r2, #12
 8012126:	6002      	str	r2, [r0, #0]
 8012128:	e7f9      	b.n	801211e <_calloc_r+0x12>
 801212a:	462a      	mov	r2, r5
 801212c:	4621      	mov	r1, r4
 801212e:	f7fe fab0 	bl	8010692 <memset>
 8012132:	e7f5      	b.n	8012120 <_calloc_r+0x14>

08012134 <__ascii_mbtowc>:
 8012134:	b082      	sub	sp, #8
 8012136:	b901      	cbnz	r1, 801213a <__ascii_mbtowc+0x6>
 8012138:	a901      	add	r1, sp, #4
 801213a:	b142      	cbz	r2, 801214e <__ascii_mbtowc+0x1a>
 801213c:	b14b      	cbz	r3, 8012152 <__ascii_mbtowc+0x1e>
 801213e:	7813      	ldrb	r3, [r2, #0]
 8012140:	600b      	str	r3, [r1, #0]
 8012142:	7812      	ldrb	r2, [r2, #0]
 8012144:	1e10      	subs	r0, r2, #0
 8012146:	bf18      	it	ne
 8012148:	2001      	movne	r0, #1
 801214a:	b002      	add	sp, #8
 801214c:	4770      	bx	lr
 801214e:	4610      	mov	r0, r2
 8012150:	e7fb      	b.n	801214a <__ascii_mbtowc+0x16>
 8012152:	f06f 0001 	mvn.w	r0, #1
 8012156:	e7f8      	b.n	801214a <__ascii_mbtowc+0x16>

08012158 <_realloc_r>:
 8012158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801215c:	4680      	mov	r8, r0
 801215e:	4615      	mov	r5, r2
 8012160:	460c      	mov	r4, r1
 8012162:	b921      	cbnz	r1, 801216e <_realloc_r+0x16>
 8012164:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012168:	4611      	mov	r1, r2
 801216a:	f7ff b967 	b.w	801143c <_malloc_r>
 801216e:	b92a      	cbnz	r2, 801217c <_realloc_r+0x24>
 8012170:	f7ff f8f0 	bl	8011354 <_free_r>
 8012174:	2400      	movs	r4, #0
 8012176:	4620      	mov	r0, r4
 8012178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801217c:	f000 f841 	bl	8012202 <_malloc_usable_size_r>
 8012180:	4285      	cmp	r5, r0
 8012182:	4606      	mov	r6, r0
 8012184:	d802      	bhi.n	801218c <_realloc_r+0x34>
 8012186:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801218a:	d8f4      	bhi.n	8012176 <_realloc_r+0x1e>
 801218c:	4629      	mov	r1, r5
 801218e:	4640      	mov	r0, r8
 8012190:	f7ff f954 	bl	801143c <_malloc_r>
 8012194:	4607      	mov	r7, r0
 8012196:	2800      	cmp	r0, #0
 8012198:	d0ec      	beq.n	8012174 <_realloc_r+0x1c>
 801219a:	42b5      	cmp	r5, r6
 801219c:	462a      	mov	r2, r5
 801219e:	4621      	mov	r1, r4
 80121a0:	bf28      	it	cs
 80121a2:	4632      	movcs	r2, r6
 80121a4:	f7ff ff86 	bl	80120b4 <memcpy>
 80121a8:	4621      	mov	r1, r4
 80121aa:	4640      	mov	r0, r8
 80121ac:	f7ff f8d2 	bl	8011354 <_free_r>
 80121b0:	463c      	mov	r4, r7
 80121b2:	e7e0      	b.n	8012176 <_realloc_r+0x1e>

080121b4 <__ascii_wctomb>:
 80121b4:	4603      	mov	r3, r0
 80121b6:	4608      	mov	r0, r1
 80121b8:	b141      	cbz	r1, 80121cc <__ascii_wctomb+0x18>
 80121ba:	2aff      	cmp	r2, #255	@ 0xff
 80121bc:	d904      	bls.n	80121c8 <__ascii_wctomb+0x14>
 80121be:	228a      	movs	r2, #138	@ 0x8a
 80121c0:	601a      	str	r2, [r3, #0]
 80121c2:	f04f 30ff 	mov.w	r0, #4294967295
 80121c6:	4770      	bx	lr
 80121c8:	700a      	strb	r2, [r1, #0]
 80121ca:	2001      	movs	r0, #1
 80121cc:	4770      	bx	lr
	...

080121d0 <fiprintf>:
 80121d0:	b40e      	push	{r1, r2, r3}
 80121d2:	b503      	push	{r0, r1, lr}
 80121d4:	4601      	mov	r1, r0
 80121d6:	ab03      	add	r3, sp, #12
 80121d8:	4805      	ldr	r0, [pc, #20]	@ (80121f0 <fiprintf+0x20>)
 80121da:	f853 2b04 	ldr.w	r2, [r3], #4
 80121de:	6800      	ldr	r0, [r0, #0]
 80121e0:	9301      	str	r3, [sp, #4]
 80121e2:	f000 f83f 	bl	8012264 <_vfiprintf_r>
 80121e6:	b002      	add	sp, #8
 80121e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80121ec:	b003      	add	sp, #12
 80121ee:	4770      	bx	lr
 80121f0:	24000138 	.word	0x24000138

080121f4 <abort>:
 80121f4:	b508      	push	{r3, lr}
 80121f6:	2006      	movs	r0, #6
 80121f8:	f000 fa08 	bl	801260c <raise>
 80121fc:	2001      	movs	r0, #1
 80121fe:	f7ef f9f1 	bl	80015e4 <_exit>

08012202 <_malloc_usable_size_r>:
 8012202:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012206:	1f18      	subs	r0, r3, #4
 8012208:	2b00      	cmp	r3, #0
 801220a:	bfbc      	itt	lt
 801220c:	580b      	ldrlt	r3, [r1, r0]
 801220e:	18c0      	addlt	r0, r0, r3
 8012210:	4770      	bx	lr

08012212 <__sfputc_r>:
 8012212:	6893      	ldr	r3, [r2, #8]
 8012214:	3b01      	subs	r3, #1
 8012216:	2b00      	cmp	r3, #0
 8012218:	b410      	push	{r4}
 801221a:	6093      	str	r3, [r2, #8]
 801221c:	da08      	bge.n	8012230 <__sfputc_r+0x1e>
 801221e:	6994      	ldr	r4, [r2, #24]
 8012220:	42a3      	cmp	r3, r4
 8012222:	db01      	blt.n	8012228 <__sfputc_r+0x16>
 8012224:	290a      	cmp	r1, #10
 8012226:	d103      	bne.n	8012230 <__sfputc_r+0x1e>
 8012228:	f85d 4b04 	ldr.w	r4, [sp], #4
 801222c:	f000 b932 	b.w	8012494 <__swbuf_r>
 8012230:	6813      	ldr	r3, [r2, #0]
 8012232:	1c58      	adds	r0, r3, #1
 8012234:	6010      	str	r0, [r2, #0]
 8012236:	7019      	strb	r1, [r3, #0]
 8012238:	4608      	mov	r0, r1
 801223a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801223e:	4770      	bx	lr

08012240 <__sfputs_r>:
 8012240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012242:	4606      	mov	r6, r0
 8012244:	460f      	mov	r7, r1
 8012246:	4614      	mov	r4, r2
 8012248:	18d5      	adds	r5, r2, r3
 801224a:	42ac      	cmp	r4, r5
 801224c:	d101      	bne.n	8012252 <__sfputs_r+0x12>
 801224e:	2000      	movs	r0, #0
 8012250:	e007      	b.n	8012262 <__sfputs_r+0x22>
 8012252:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012256:	463a      	mov	r2, r7
 8012258:	4630      	mov	r0, r6
 801225a:	f7ff ffda 	bl	8012212 <__sfputc_r>
 801225e:	1c43      	adds	r3, r0, #1
 8012260:	d1f3      	bne.n	801224a <__sfputs_r+0xa>
 8012262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012264 <_vfiprintf_r>:
 8012264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012268:	460d      	mov	r5, r1
 801226a:	b09d      	sub	sp, #116	@ 0x74
 801226c:	4614      	mov	r4, r2
 801226e:	4698      	mov	r8, r3
 8012270:	4606      	mov	r6, r0
 8012272:	b118      	cbz	r0, 801227c <_vfiprintf_r+0x18>
 8012274:	6a03      	ldr	r3, [r0, #32]
 8012276:	b90b      	cbnz	r3, 801227c <_vfiprintf_r+0x18>
 8012278:	f7fe f972 	bl	8010560 <__sinit>
 801227c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801227e:	07d9      	lsls	r1, r3, #31
 8012280:	d405      	bmi.n	801228e <_vfiprintf_r+0x2a>
 8012282:	89ab      	ldrh	r3, [r5, #12]
 8012284:	059a      	lsls	r2, r3, #22
 8012286:	d402      	bmi.n	801228e <_vfiprintf_r+0x2a>
 8012288:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801228a:	f7fe fa80 	bl	801078e <__retarget_lock_acquire_recursive>
 801228e:	89ab      	ldrh	r3, [r5, #12]
 8012290:	071b      	lsls	r3, r3, #28
 8012292:	d501      	bpl.n	8012298 <_vfiprintf_r+0x34>
 8012294:	692b      	ldr	r3, [r5, #16]
 8012296:	b99b      	cbnz	r3, 80122c0 <_vfiprintf_r+0x5c>
 8012298:	4629      	mov	r1, r5
 801229a:	4630      	mov	r0, r6
 801229c:	f000 f938 	bl	8012510 <__swsetup_r>
 80122a0:	b170      	cbz	r0, 80122c0 <_vfiprintf_r+0x5c>
 80122a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80122a4:	07dc      	lsls	r4, r3, #31
 80122a6:	d504      	bpl.n	80122b2 <_vfiprintf_r+0x4e>
 80122a8:	f04f 30ff 	mov.w	r0, #4294967295
 80122ac:	b01d      	add	sp, #116	@ 0x74
 80122ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122b2:	89ab      	ldrh	r3, [r5, #12]
 80122b4:	0598      	lsls	r0, r3, #22
 80122b6:	d4f7      	bmi.n	80122a8 <_vfiprintf_r+0x44>
 80122b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80122ba:	f7fe fa69 	bl	8010790 <__retarget_lock_release_recursive>
 80122be:	e7f3      	b.n	80122a8 <_vfiprintf_r+0x44>
 80122c0:	2300      	movs	r3, #0
 80122c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80122c4:	2320      	movs	r3, #32
 80122c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80122ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80122ce:	2330      	movs	r3, #48	@ 0x30
 80122d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012480 <_vfiprintf_r+0x21c>
 80122d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80122d8:	f04f 0901 	mov.w	r9, #1
 80122dc:	4623      	mov	r3, r4
 80122de:	469a      	mov	sl, r3
 80122e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80122e4:	b10a      	cbz	r2, 80122ea <_vfiprintf_r+0x86>
 80122e6:	2a25      	cmp	r2, #37	@ 0x25
 80122e8:	d1f9      	bne.n	80122de <_vfiprintf_r+0x7a>
 80122ea:	ebba 0b04 	subs.w	fp, sl, r4
 80122ee:	d00b      	beq.n	8012308 <_vfiprintf_r+0xa4>
 80122f0:	465b      	mov	r3, fp
 80122f2:	4622      	mov	r2, r4
 80122f4:	4629      	mov	r1, r5
 80122f6:	4630      	mov	r0, r6
 80122f8:	f7ff ffa2 	bl	8012240 <__sfputs_r>
 80122fc:	3001      	adds	r0, #1
 80122fe:	f000 80a7 	beq.w	8012450 <_vfiprintf_r+0x1ec>
 8012302:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012304:	445a      	add	r2, fp
 8012306:	9209      	str	r2, [sp, #36]	@ 0x24
 8012308:	f89a 3000 	ldrb.w	r3, [sl]
 801230c:	2b00      	cmp	r3, #0
 801230e:	f000 809f 	beq.w	8012450 <_vfiprintf_r+0x1ec>
 8012312:	2300      	movs	r3, #0
 8012314:	f04f 32ff 	mov.w	r2, #4294967295
 8012318:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801231c:	f10a 0a01 	add.w	sl, sl, #1
 8012320:	9304      	str	r3, [sp, #16]
 8012322:	9307      	str	r3, [sp, #28]
 8012324:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012328:	931a      	str	r3, [sp, #104]	@ 0x68
 801232a:	4654      	mov	r4, sl
 801232c:	2205      	movs	r2, #5
 801232e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012332:	4853      	ldr	r0, [pc, #332]	@ (8012480 <_vfiprintf_r+0x21c>)
 8012334:	f7ed ffd4 	bl	80002e0 <memchr>
 8012338:	9a04      	ldr	r2, [sp, #16]
 801233a:	b9d8      	cbnz	r0, 8012374 <_vfiprintf_r+0x110>
 801233c:	06d1      	lsls	r1, r2, #27
 801233e:	bf44      	itt	mi
 8012340:	2320      	movmi	r3, #32
 8012342:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012346:	0713      	lsls	r3, r2, #28
 8012348:	bf44      	itt	mi
 801234a:	232b      	movmi	r3, #43	@ 0x2b
 801234c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012350:	f89a 3000 	ldrb.w	r3, [sl]
 8012354:	2b2a      	cmp	r3, #42	@ 0x2a
 8012356:	d015      	beq.n	8012384 <_vfiprintf_r+0x120>
 8012358:	9a07      	ldr	r2, [sp, #28]
 801235a:	4654      	mov	r4, sl
 801235c:	2000      	movs	r0, #0
 801235e:	f04f 0c0a 	mov.w	ip, #10
 8012362:	4621      	mov	r1, r4
 8012364:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012368:	3b30      	subs	r3, #48	@ 0x30
 801236a:	2b09      	cmp	r3, #9
 801236c:	d94b      	bls.n	8012406 <_vfiprintf_r+0x1a2>
 801236e:	b1b0      	cbz	r0, 801239e <_vfiprintf_r+0x13a>
 8012370:	9207      	str	r2, [sp, #28]
 8012372:	e014      	b.n	801239e <_vfiprintf_r+0x13a>
 8012374:	eba0 0308 	sub.w	r3, r0, r8
 8012378:	fa09 f303 	lsl.w	r3, r9, r3
 801237c:	4313      	orrs	r3, r2
 801237e:	9304      	str	r3, [sp, #16]
 8012380:	46a2      	mov	sl, r4
 8012382:	e7d2      	b.n	801232a <_vfiprintf_r+0xc6>
 8012384:	9b03      	ldr	r3, [sp, #12]
 8012386:	1d19      	adds	r1, r3, #4
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	9103      	str	r1, [sp, #12]
 801238c:	2b00      	cmp	r3, #0
 801238e:	bfbb      	ittet	lt
 8012390:	425b      	neglt	r3, r3
 8012392:	f042 0202 	orrlt.w	r2, r2, #2
 8012396:	9307      	strge	r3, [sp, #28]
 8012398:	9307      	strlt	r3, [sp, #28]
 801239a:	bfb8      	it	lt
 801239c:	9204      	strlt	r2, [sp, #16]
 801239e:	7823      	ldrb	r3, [r4, #0]
 80123a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80123a2:	d10a      	bne.n	80123ba <_vfiprintf_r+0x156>
 80123a4:	7863      	ldrb	r3, [r4, #1]
 80123a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80123a8:	d132      	bne.n	8012410 <_vfiprintf_r+0x1ac>
 80123aa:	9b03      	ldr	r3, [sp, #12]
 80123ac:	1d1a      	adds	r2, r3, #4
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	9203      	str	r2, [sp, #12]
 80123b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80123b6:	3402      	adds	r4, #2
 80123b8:	9305      	str	r3, [sp, #20]
 80123ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012490 <_vfiprintf_r+0x22c>
 80123be:	7821      	ldrb	r1, [r4, #0]
 80123c0:	2203      	movs	r2, #3
 80123c2:	4650      	mov	r0, sl
 80123c4:	f7ed ff8c 	bl	80002e0 <memchr>
 80123c8:	b138      	cbz	r0, 80123da <_vfiprintf_r+0x176>
 80123ca:	9b04      	ldr	r3, [sp, #16]
 80123cc:	eba0 000a 	sub.w	r0, r0, sl
 80123d0:	2240      	movs	r2, #64	@ 0x40
 80123d2:	4082      	lsls	r2, r0
 80123d4:	4313      	orrs	r3, r2
 80123d6:	3401      	adds	r4, #1
 80123d8:	9304      	str	r3, [sp, #16]
 80123da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123de:	4829      	ldr	r0, [pc, #164]	@ (8012484 <_vfiprintf_r+0x220>)
 80123e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80123e4:	2206      	movs	r2, #6
 80123e6:	f7ed ff7b 	bl	80002e0 <memchr>
 80123ea:	2800      	cmp	r0, #0
 80123ec:	d03f      	beq.n	801246e <_vfiprintf_r+0x20a>
 80123ee:	4b26      	ldr	r3, [pc, #152]	@ (8012488 <_vfiprintf_r+0x224>)
 80123f0:	bb1b      	cbnz	r3, 801243a <_vfiprintf_r+0x1d6>
 80123f2:	9b03      	ldr	r3, [sp, #12]
 80123f4:	3307      	adds	r3, #7
 80123f6:	f023 0307 	bic.w	r3, r3, #7
 80123fa:	3308      	adds	r3, #8
 80123fc:	9303      	str	r3, [sp, #12]
 80123fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012400:	443b      	add	r3, r7
 8012402:	9309      	str	r3, [sp, #36]	@ 0x24
 8012404:	e76a      	b.n	80122dc <_vfiprintf_r+0x78>
 8012406:	fb0c 3202 	mla	r2, ip, r2, r3
 801240a:	460c      	mov	r4, r1
 801240c:	2001      	movs	r0, #1
 801240e:	e7a8      	b.n	8012362 <_vfiprintf_r+0xfe>
 8012410:	2300      	movs	r3, #0
 8012412:	3401      	adds	r4, #1
 8012414:	9305      	str	r3, [sp, #20]
 8012416:	4619      	mov	r1, r3
 8012418:	f04f 0c0a 	mov.w	ip, #10
 801241c:	4620      	mov	r0, r4
 801241e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012422:	3a30      	subs	r2, #48	@ 0x30
 8012424:	2a09      	cmp	r2, #9
 8012426:	d903      	bls.n	8012430 <_vfiprintf_r+0x1cc>
 8012428:	2b00      	cmp	r3, #0
 801242a:	d0c6      	beq.n	80123ba <_vfiprintf_r+0x156>
 801242c:	9105      	str	r1, [sp, #20]
 801242e:	e7c4      	b.n	80123ba <_vfiprintf_r+0x156>
 8012430:	fb0c 2101 	mla	r1, ip, r1, r2
 8012434:	4604      	mov	r4, r0
 8012436:	2301      	movs	r3, #1
 8012438:	e7f0      	b.n	801241c <_vfiprintf_r+0x1b8>
 801243a:	ab03      	add	r3, sp, #12
 801243c:	9300      	str	r3, [sp, #0]
 801243e:	462a      	mov	r2, r5
 8012440:	4b12      	ldr	r3, [pc, #72]	@ (801248c <_vfiprintf_r+0x228>)
 8012442:	a904      	add	r1, sp, #16
 8012444:	4630      	mov	r0, r6
 8012446:	f7fd fc57 	bl	800fcf8 <_printf_float>
 801244a:	4607      	mov	r7, r0
 801244c:	1c78      	adds	r0, r7, #1
 801244e:	d1d6      	bne.n	80123fe <_vfiprintf_r+0x19a>
 8012450:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012452:	07d9      	lsls	r1, r3, #31
 8012454:	d405      	bmi.n	8012462 <_vfiprintf_r+0x1fe>
 8012456:	89ab      	ldrh	r3, [r5, #12]
 8012458:	059a      	lsls	r2, r3, #22
 801245a:	d402      	bmi.n	8012462 <_vfiprintf_r+0x1fe>
 801245c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801245e:	f7fe f997 	bl	8010790 <__retarget_lock_release_recursive>
 8012462:	89ab      	ldrh	r3, [r5, #12]
 8012464:	065b      	lsls	r3, r3, #25
 8012466:	f53f af1f 	bmi.w	80122a8 <_vfiprintf_r+0x44>
 801246a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801246c:	e71e      	b.n	80122ac <_vfiprintf_r+0x48>
 801246e:	ab03      	add	r3, sp, #12
 8012470:	9300      	str	r3, [sp, #0]
 8012472:	462a      	mov	r2, r5
 8012474:	4b05      	ldr	r3, [pc, #20]	@ (801248c <_vfiprintf_r+0x228>)
 8012476:	a904      	add	r1, sp, #16
 8012478:	4630      	mov	r0, r6
 801247a:	f7fd fec5 	bl	8010208 <_printf_i>
 801247e:	e7e4      	b.n	801244a <_vfiprintf_r+0x1e6>
 8012480:	08012aa0 	.word	0x08012aa0
 8012484:	08012aaa 	.word	0x08012aaa
 8012488:	0800fcf9 	.word	0x0800fcf9
 801248c:	08012241 	.word	0x08012241
 8012490:	08012aa6 	.word	0x08012aa6

08012494 <__swbuf_r>:
 8012494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012496:	460e      	mov	r6, r1
 8012498:	4614      	mov	r4, r2
 801249a:	4605      	mov	r5, r0
 801249c:	b118      	cbz	r0, 80124a6 <__swbuf_r+0x12>
 801249e:	6a03      	ldr	r3, [r0, #32]
 80124a0:	b90b      	cbnz	r3, 80124a6 <__swbuf_r+0x12>
 80124a2:	f7fe f85d 	bl	8010560 <__sinit>
 80124a6:	69a3      	ldr	r3, [r4, #24]
 80124a8:	60a3      	str	r3, [r4, #8]
 80124aa:	89a3      	ldrh	r3, [r4, #12]
 80124ac:	071a      	lsls	r2, r3, #28
 80124ae:	d501      	bpl.n	80124b4 <__swbuf_r+0x20>
 80124b0:	6923      	ldr	r3, [r4, #16]
 80124b2:	b943      	cbnz	r3, 80124c6 <__swbuf_r+0x32>
 80124b4:	4621      	mov	r1, r4
 80124b6:	4628      	mov	r0, r5
 80124b8:	f000 f82a 	bl	8012510 <__swsetup_r>
 80124bc:	b118      	cbz	r0, 80124c6 <__swbuf_r+0x32>
 80124be:	f04f 37ff 	mov.w	r7, #4294967295
 80124c2:	4638      	mov	r0, r7
 80124c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80124c6:	6823      	ldr	r3, [r4, #0]
 80124c8:	6922      	ldr	r2, [r4, #16]
 80124ca:	1a98      	subs	r0, r3, r2
 80124cc:	6963      	ldr	r3, [r4, #20]
 80124ce:	b2f6      	uxtb	r6, r6
 80124d0:	4283      	cmp	r3, r0
 80124d2:	4637      	mov	r7, r6
 80124d4:	dc05      	bgt.n	80124e2 <__swbuf_r+0x4e>
 80124d6:	4621      	mov	r1, r4
 80124d8:	4628      	mov	r0, r5
 80124da:	f7ff fd99 	bl	8012010 <_fflush_r>
 80124de:	2800      	cmp	r0, #0
 80124e0:	d1ed      	bne.n	80124be <__swbuf_r+0x2a>
 80124e2:	68a3      	ldr	r3, [r4, #8]
 80124e4:	3b01      	subs	r3, #1
 80124e6:	60a3      	str	r3, [r4, #8]
 80124e8:	6823      	ldr	r3, [r4, #0]
 80124ea:	1c5a      	adds	r2, r3, #1
 80124ec:	6022      	str	r2, [r4, #0]
 80124ee:	701e      	strb	r6, [r3, #0]
 80124f0:	6962      	ldr	r2, [r4, #20]
 80124f2:	1c43      	adds	r3, r0, #1
 80124f4:	429a      	cmp	r2, r3
 80124f6:	d004      	beq.n	8012502 <__swbuf_r+0x6e>
 80124f8:	89a3      	ldrh	r3, [r4, #12]
 80124fa:	07db      	lsls	r3, r3, #31
 80124fc:	d5e1      	bpl.n	80124c2 <__swbuf_r+0x2e>
 80124fe:	2e0a      	cmp	r6, #10
 8012500:	d1df      	bne.n	80124c2 <__swbuf_r+0x2e>
 8012502:	4621      	mov	r1, r4
 8012504:	4628      	mov	r0, r5
 8012506:	f7ff fd83 	bl	8012010 <_fflush_r>
 801250a:	2800      	cmp	r0, #0
 801250c:	d0d9      	beq.n	80124c2 <__swbuf_r+0x2e>
 801250e:	e7d6      	b.n	80124be <__swbuf_r+0x2a>

08012510 <__swsetup_r>:
 8012510:	b538      	push	{r3, r4, r5, lr}
 8012512:	4b29      	ldr	r3, [pc, #164]	@ (80125b8 <__swsetup_r+0xa8>)
 8012514:	4605      	mov	r5, r0
 8012516:	6818      	ldr	r0, [r3, #0]
 8012518:	460c      	mov	r4, r1
 801251a:	b118      	cbz	r0, 8012524 <__swsetup_r+0x14>
 801251c:	6a03      	ldr	r3, [r0, #32]
 801251e:	b90b      	cbnz	r3, 8012524 <__swsetup_r+0x14>
 8012520:	f7fe f81e 	bl	8010560 <__sinit>
 8012524:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012528:	0719      	lsls	r1, r3, #28
 801252a:	d422      	bmi.n	8012572 <__swsetup_r+0x62>
 801252c:	06da      	lsls	r2, r3, #27
 801252e:	d407      	bmi.n	8012540 <__swsetup_r+0x30>
 8012530:	2209      	movs	r2, #9
 8012532:	602a      	str	r2, [r5, #0]
 8012534:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012538:	81a3      	strh	r3, [r4, #12]
 801253a:	f04f 30ff 	mov.w	r0, #4294967295
 801253e:	e033      	b.n	80125a8 <__swsetup_r+0x98>
 8012540:	0758      	lsls	r0, r3, #29
 8012542:	d512      	bpl.n	801256a <__swsetup_r+0x5a>
 8012544:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012546:	b141      	cbz	r1, 801255a <__swsetup_r+0x4a>
 8012548:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801254c:	4299      	cmp	r1, r3
 801254e:	d002      	beq.n	8012556 <__swsetup_r+0x46>
 8012550:	4628      	mov	r0, r5
 8012552:	f7fe feff 	bl	8011354 <_free_r>
 8012556:	2300      	movs	r3, #0
 8012558:	6363      	str	r3, [r4, #52]	@ 0x34
 801255a:	89a3      	ldrh	r3, [r4, #12]
 801255c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012560:	81a3      	strh	r3, [r4, #12]
 8012562:	2300      	movs	r3, #0
 8012564:	6063      	str	r3, [r4, #4]
 8012566:	6923      	ldr	r3, [r4, #16]
 8012568:	6023      	str	r3, [r4, #0]
 801256a:	89a3      	ldrh	r3, [r4, #12]
 801256c:	f043 0308 	orr.w	r3, r3, #8
 8012570:	81a3      	strh	r3, [r4, #12]
 8012572:	6923      	ldr	r3, [r4, #16]
 8012574:	b94b      	cbnz	r3, 801258a <__swsetup_r+0x7a>
 8012576:	89a3      	ldrh	r3, [r4, #12]
 8012578:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801257c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012580:	d003      	beq.n	801258a <__swsetup_r+0x7a>
 8012582:	4621      	mov	r1, r4
 8012584:	4628      	mov	r0, r5
 8012586:	f000 f883 	bl	8012690 <__smakebuf_r>
 801258a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801258e:	f013 0201 	ands.w	r2, r3, #1
 8012592:	d00a      	beq.n	80125aa <__swsetup_r+0x9a>
 8012594:	2200      	movs	r2, #0
 8012596:	60a2      	str	r2, [r4, #8]
 8012598:	6962      	ldr	r2, [r4, #20]
 801259a:	4252      	negs	r2, r2
 801259c:	61a2      	str	r2, [r4, #24]
 801259e:	6922      	ldr	r2, [r4, #16]
 80125a0:	b942      	cbnz	r2, 80125b4 <__swsetup_r+0xa4>
 80125a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80125a6:	d1c5      	bne.n	8012534 <__swsetup_r+0x24>
 80125a8:	bd38      	pop	{r3, r4, r5, pc}
 80125aa:	0799      	lsls	r1, r3, #30
 80125ac:	bf58      	it	pl
 80125ae:	6962      	ldrpl	r2, [r4, #20]
 80125b0:	60a2      	str	r2, [r4, #8]
 80125b2:	e7f4      	b.n	801259e <__swsetup_r+0x8e>
 80125b4:	2000      	movs	r0, #0
 80125b6:	e7f7      	b.n	80125a8 <__swsetup_r+0x98>
 80125b8:	24000138 	.word	0x24000138

080125bc <_raise_r>:
 80125bc:	291f      	cmp	r1, #31
 80125be:	b538      	push	{r3, r4, r5, lr}
 80125c0:	4605      	mov	r5, r0
 80125c2:	460c      	mov	r4, r1
 80125c4:	d904      	bls.n	80125d0 <_raise_r+0x14>
 80125c6:	2316      	movs	r3, #22
 80125c8:	6003      	str	r3, [r0, #0]
 80125ca:	f04f 30ff 	mov.w	r0, #4294967295
 80125ce:	bd38      	pop	{r3, r4, r5, pc}
 80125d0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80125d2:	b112      	cbz	r2, 80125da <_raise_r+0x1e>
 80125d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80125d8:	b94b      	cbnz	r3, 80125ee <_raise_r+0x32>
 80125da:	4628      	mov	r0, r5
 80125dc:	f000 f830 	bl	8012640 <_getpid_r>
 80125e0:	4622      	mov	r2, r4
 80125e2:	4601      	mov	r1, r0
 80125e4:	4628      	mov	r0, r5
 80125e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80125ea:	f000 b817 	b.w	801261c <_kill_r>
 80125ee:	2b01      	cmp	r3, #1
 80125f0:	d00a      	beq.n	8012608 <_raise_r+0x4c>
 80125f2:	1c59      	adds	r1, r3, #1
 80125f4:	d103      	bne.n	80125fe <_raise_r+0x42>
 80125f6:	2316      	movs	r3, #22
 80125f8:	6003      	str	r3, [r0, #0]
 80125fa:	2001      	movs	r0, #1
 80125fc:	e7e7      	b.n	80125ce <_raise_r+0x12>
 80125fe:	2100      	movs	r1, #0
 8012600:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012604:	4620      	mov	r0, r4
 8012606:	4798      	blx	r3
 8012608:	2000      	movs	r0, #0
 801260a:	e7e0      	b.n	80125ce <_raise_r+0x12>

0801260c <raise>:
 801260c:	4b02      	ldr	r3, [pc, #8]	@ (8012618 <raise+0xc>)
 801260e:	4601      	mov	r1, r0
 8012610:	6818      	ldr	r0, [r3, #0]
 8012612:	f7ff bfd3 	b.w	80125bc <_raise_r>
 8012616:	bf00      	nop
 8012618:	24000138 	.word	0x24000138

0801261c <_kill_r>:
 801261c:	b538      	push	{r3, r4, r5, lr}
 801261e:	4d07      	ldr	r5, [pc, #28]	@ (801263c <_kill_r+0x20>)
 8012620:	2300      	movs	r3, #0
 8012622:	4604      	mov	r4, r0
 8012624:	4608      	mov	r0, r1
 8012626:	4611      	mov	r1, r2
 8012628:	602b      	str	r3, [r5, #0]
 801262a:	f7ee ffcb 	bl	80015c4 <_kill>
 801262e:	1c43      	adds	r3, r0, #1
 8012630:	d102      	bne.n	8012638 <_kill_r+0x1c>
 8012632:	682b      	ldr	r3, [r5, #0]
 8012634:	b103      	cbz	r3, 8012638 <_kill_r+0x1c>
 8012636:	6023      	str	r3, [r4, #0]
 8012638:	bd38      	pop	{r3, r4, r5, pc}
 801263a:	bf00      	nop
 801263c:	240026c4 	.word	0x240026c4

08012640 <_getpid_r>:
 8012640:	f7ee bfb8 	b.w	80015b4 <_getpid>

08012644 <__swhatbuf_r>:
 8012644:	b570      	push	{r4, r5, r6, lr}
 8012646:	460c      	mov	r4, r1
 8012648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801264c:	2900      	cmp	r1, #0
 801264e:	b096      	sub	sp, #88	@ 0x58
 8012650:	4615      	mov	r5, r2
 8012652:	461e      	mov	r6, r3
 8012654:	da0d      	bge.n	8012672 <__swhatbuf_r+0x2e>
 8012656:	89a3      	ldrh	r3, [r4, #12]
 8012658:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801265c:	f04f 0100 	mov.w	r1, #0
 8012660:	bf14      	ite	ne
 8012662:	2340      	movne	r3, #64	@ 0x40
 8012664:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012668:	2000      	movs	r0, #0
 801266a:	6031      	str	r1, [r6, #0]
 801266c:	602b      	str	r3, [r5, #0]
 801266e:	b016      	add	sp, #88	@ 0x58
 8012670:	bd70      	pop	{r4, r5, r6, pc}
 8012672:	466a      	mov	r2, sp
 8012674:	f000 f848 	bl	8012708 <_fstat_r>
 8012678:	2800      	cmp	r0, #0
 801267a:	dbec      	blt.n	8012656 <__swhatbuf_r+0x12>
 801267c:	9901      	ldr	r1, [sp, #4]
 801267e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012682:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012686:	4259      	negs	r1, r3
 8012688:	4159      	adcs	r1, r3
 801268a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801268e:	e7eb      	b.n	8012668 <__swhatbuf_r+0x24>

08012690 <__smakebuf_r>:
 8012690:	898b      	ldrh	r3, [r1, #12]
 8012692:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012694:	079d      	lsls	r5, r3, #30
 8012696:	4606      	mov	r6, r0
 8012698:	460c      	mov	r4, r1
 801269a:	d507      	bpl.n	80126ac <__smakebuf_r+0x1c>
 801269c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80126a0:	6023      	str	r3, [r4, #0]
 80126a2:	6123      	str	r3, [r4, #16]
 80126a4:	2301      	movs	r3, #1
 80126a6:	6163      	str	r3, [r4, #20]
 80126a8:	b003      	add	sp, #12
 80126aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126ac:	ab01      	add	r3, sp, #4
 80126ae:	466a      	mov	r2, sp
 80126b0:	f7ff ffc8 	bl	8012644 <__swhatbuf_r>
 80126b4:	9f00      	ldr	r7, [sp, #0]
 80126b6:	4605      	mov	r5, r0
 80126b8:	4639      	mov	r1, r7
 80126ba:	4630      	mov	r0, r6
 80126bc:	f7fe febe 	bl	801143c <_malloc_r>
 80126c0:	b948      	cbnz	r0, 80126d6 <__smakebuf_r+0x46>
 80126c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80126c6:	059a      	lsls	r2, r3, #22
 80126c8:	d4ee      	bmi.n	80126a8 <__smakebuf_r+0x18>
 80126ca:	f023 0303 	bic.w	r3, r3, #3
 80126ce:	f043 0302 	orr.w	r3, r3, #2
 80126d2:	81a3      	strh	r3, [r4, #12]
 80126d4:	e7e2      	b.n	801269c <__smakebuf_r+0xc>
 80126d6:	89a3      	ldrh	r3, [r4, #12]
 80126d8:	6020      	str	r0, [r4, #0]
 80126da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80126de:	81a3      	strh	r3, [r4, #12]
 80126e0:	9b01      	ldr	r3, [sp, #4]
 80126e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80126e6:	b15b      	cbz	r3, 8012700 <__smakebuf_r+0x70>
 80126e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80126ec:	4630      	mov	r0, r6
 80126ee:	f000 f81d 	bl	801272c <_isatty_r>
 80126f2:	b128      	cbz	r0, 8012700 <__smakebuf_r+0x70>
 80126f4:	89a3      	ldrh	r3, [r4, #12]
 80126f6:	f023 0303 	bic.w	r3, r3, #3
 80126fa:	f043 0301 	orr.w	r3, r3, #1
 80126fe:	81a3      	strh	r3, [r4, #12]
 8012700:	89a3      	ldrh	r3, [r4, #12]
 8012702:	431d      	orrs	r5, r3
 8012704:	81a5      	strh	r5, [r4, #12]
 8012706:	e7cf      	b.n	80126a8 <__smakebuf_r+0x18>

08012708 <_fstat_r>:
 8012708:	b538      	push	{r3, r4, r5, lr}
 801270a:	4d07      	ldr	r5, [pc, #28]	@ (8012728 <_fstat_r+0x20>)
 801270c:	2300      	movs	r3, #0
 801270e:	4604      	mov	r4, r0
 8012710:	4608      	mov	r0, r1
 8012712:	4611      	mov	r1, r2
 8012714:	602b      	str	r3, [r5, #0]
 8012716:	f7ee ffb5 	bl	8001684 <_fstat>
 801271a:	1c43      	adds	r3, r0, #1
 801271c:	d102      	bne.n	8012724 <_fstat_r+0x1c>
 801271e:	682b      	ldr	r3, [r5, #0]
 8012720:	b103      	cbz	r3, 8012724 <_fstat_r+0x1c>
 8012722:	6023      	str	r3, [r4, #0]
 8012724:	bd38      	pop	{r3, r4, r5, pc}
 8012726:	bf00      	nop
 8012728:	240026c4 	.word	0x240026c4

0801272c <_isatty_r>:
 801272c:	b538      	push	{r3, r4, r5, lr}
 801272e:	4d06      	ldr	r5, [pc, #24]	@ (8012748 <_isatty_r+0x1c>)
 8012730:	2300      	movs	r3, #0
 8012732:	4604      	mov	r4, r0
 8012734:	4608      	mov	r0, r1
 8012736:	602b      	str	r3, [r5, #0]
 8012738:	f7ee ffb4 	bl	80016a4 <_isatty>
 801273c:	1c43      	adds	r3, r0, #1
 801273e:	d102      	bne.n	8012746 <_isatty_r+0x1a>
 8012740:	682b      	ldr	r3, [r5, #0]
 8012742:	b103      	cbz	r3, 8012746 <_isatty_r+0x1a>
 8012744:	6023      	str	r3, [r4, #0]
 8012746:	bd38      	pop	{r3, r4, r5, pc}
 8012748:	240026c4 	.word	0x240026c4

0801274c <lrintf>:
 801274c:	ee10 3a10 	vmov	r3, s0
 8012750:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012754:	f1a2 007f 	sub.w	r0, r2, #127	@ 0x7f
 8012758:	281e      	cmp	r0, #30
 801275a:	b082      	sub	sp, #8
 801275c:	dc2f      	bgt.n	80127be <lrintf+0x72>
 801275e:	1c41      	adds	r1, r0, #1
 8012760:	da02      	bge.n	8012768 <lrintf+0x1c>
 8012762:	2000      	movs	r0, #0
 8012764:	b002      	add	sp, #8
 8012766:	4770      	bx	lr
 8012768:	2816      	cmp	r0, #22
 801276a:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 801276e:	dd0a      	ble.n	8012786 <lrintf+0x3a>
 8012770:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012774:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8012778:	3a96      	subs	r2, #150	@ 0x96
 801277a:	fa03 f002 	lsl.w	r0, r3, r2
 801277e:	2900      	cmp	r1, #0
 8012780:	d0f0      	beq.n	8012764 <lrintf+0x18>
 8012782:	4240      	negs	r0, r0
 8012784:	e7ee      	b.n	8012764 <lrintf+0x18>
 8012786:	4b10      	ldr	r3, [pc, #64]	@ (80127c8 <lrintf+0x7c>)
 8012788:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801278c:	ed93 7a00 	vldr	s14, [r3]
 8012790:	ee37 0a00 	vadd.f32	s0, s14, s0
 8012794:	ed8d 0a01 	vstr	s0, [sp, #4]
 8012798:	eddd 7a01 	vldr	s15, [sp, #4]
 801279c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80127a0:	ee17 3a90 	vmov	r3, s15
 80127a4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80127a8:	d0db      	beq.n	8012762 <lrintf+0x16>
 80127aa:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80127ae:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 80127b2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80127b6:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80127ba:	40d8      	lsrs	r0, r3
 80127bc:	e7df      	b.n	801277e <lrintf+0x32>
 80127be:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80127c2:	ee17 0a90 	vmov	r0, s15
 80127c6:	e7cd      	b.n	8012764 <lrintf+0x18>
 80127c8:	08012bf8 	.word	0x08012bf8

080127cc <_init>:
 80127cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127ce:	bf00      	nop
 80127d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80127d2:	bc08      	pop	{r3}
 80127d4:	469e      	mov	lr, r3
 80127d6:	4770      	bx	lr

080127d8 <_fini>:
 80127d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127da:	bf00      	nop
 80127dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80127de:	bc08      	pop	{r3}
 80127e0:	469e      	mov	lr, r3
 80127e2:	4770      	bx	lr
