
Rx_M4_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000810c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080083a4  080083a4  000093a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083e8  080083e8  0000a02c  2**0
                  CONTENTS
  4 .ARM          00000008  080083e8  080083e8  000093e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083f0  080083f0  0000a02c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083f0  080083f0  000093f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080083f4  080083f4  000093f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  24000000  080083f8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000508  2400002c  08008424  0000a02c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000534  08008424  0000a534  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a02c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018eae  00000000  00000000  0000a05a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003093  00000000  00000000  00022f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  00025fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e9a  00000000  00000000  00027268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b9de  00000000  00000000  00028102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b3e0  00000000  00000000  00063ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00187df7  00000000  00000000  0007eec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00206cb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ebc  00000000  00000000  00206cfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  0020bbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400002c 	.word	0x2400002c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800838c 	.word	0x0800838c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000030 	.word	0x24000030
 80002d4:	0800838c 	.word	0x0800838c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <SystemInit+0xfc>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a3c      	ldr	r2, [pc, #240]	@ (80006c4 <SystemInit+0xfc>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <SystemInit+0xfc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <SystemInit+0xfc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <SystemInit+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <SystemInit+0x100>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <SystemInit+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <SystemInit+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <SystemInit+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <SystemInit+0x104>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	492c      	ldr	r1, [pc, #176]	@ (80006cc <SystemInit+0x104>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemInit+0x108>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemInit+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x100>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemInit+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <SystemInit+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemInit+0x104>)
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemInit+0x10c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemInit+0x104>)
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemInit+0x110>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <SystemInit+0x104>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <SystemInit+0x114>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <SystemInit+0x104>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <SystemInit+0x114>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SystemInit+0x104>)
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemInit+0x114>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <SystemInit+0x104>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <SystemInit+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SystemInit+0x118>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <SystemInit+0x118>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <SystemInit+0x120>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <SystemInit+0x124>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <SystemInit+0x128>)
 80006b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	52002000 	.word	0x52002000
 80006cc:	58024400 	.word	0x58024400
 80006d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	01010280 	.word	0x01010280
 80006e0:	580000c0 	.word	0x580000c0
 80006e4:	5c001000 	.word	0x5c001000
 80006e8:	ffff0000 	.word	0xffff0000
 80006ec:	51008108 	.word	0x51008108
 80006f0:	52004000 	.word	0x52004000

080006f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006fa:	4b19      	ldr	r3, [pc, #100]	@ (8000760 <MX_DMA_Init+0x6c>)
 80006fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000700:	4a17      	ldr	r2, [pc, #92]	@ (8000760 <MX_DMA_Init+0x6c>)
 8000702:	f043 0301 	orr.w	r3, r3, #1
 8000706:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800070a:	4b15      	ldr	r3, [pc, #84]	@ (8000760 <MX_DMA_Init+0x6c>)
 800070c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000710:	f003 0301 	and.w	r3, r3, #1
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000718:	2200      	movs	r2, #0
 800071a:	2100      	movs	r1, #0
 800071c:	200c      	movs	r0, #12
 800071e:	f001 fb94 	bl	8001e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000722:	200c      	movs	r0, #12
 8000724:	f001 fbab 	bl	8001e7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000728:	2200      	movs	r2, #0
 800072a:	2100      	movs	r1, #0
 800072c:	200e      	movs	r0, #14
 800072e:	f001 fb8c 	bl	8001e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000732:	200e      	movs	r0, #14
 8000734:	f001 fba3 	bl	8001e7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000738:	2200      	movs	r2, #0
 800073a:	2100      	movs	r1, #0
 800073c:	200f      	movs	r0, #15
 800073e:	f001 fb84 	bl	8001e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000742:	200f      	movs	r0, #15
 8000744:	f001 fb9b 	bl	8001e7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000748:	2200      	movs	r2, #0
 800074a:	2100      	movs	r1, #0
 800074c:	2010      	movs	r0, #16
 800074e:	f001 fb7c 	bl	8001e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000752:	2010      	movs	r0, #16
 8000754:	f001 fb93 	bl	8001e7e <HAL_NVIC_EnableIRQ>

}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	58024400 	.word	0x58024400

08000764 <dshot_init>:
static void dshot_enable_dma_request();


/* Functions */
void dshot_init(dshot_type_e dshot_type)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
	dshot_set_timer(dshot_type);
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	4618      	mov	r0, r3
 8000772:	f000 f833 	bl	80007dc <dshot_set_timer>
	dshot_put_tc_callback_function();
 8000776:	f000 f8d3 	bl	8000920 <dshot_put_tc_callback_function>
	dshot_start_pwm();
 800077a:	f000 f8ef 	bl	800095c <dshot_start_pwm>
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <dshot_write>:

void dshot_write(uint16_t* motor_value)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	b082      	sub	sp, #8
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer_all(motor_value);
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f000 f962 	bl	8000a58 <dshot_prepare_dmabuffer_all>
	dshot_dma_start();
 8000794:	f000 f98c 	bl	8000ab0 <dshot_dma_start>
	dshot_enable_dma_request();
 8000798:	f000 f9c2 	bl	8000b20 <dshot_enable_dma_request>
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <dshot_choose_type>:


/* Static functions */
static uint32_t dshot_choose_type(dshot_type_e dshot_type)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
	switch (dshot_type)
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d003      	beq.n	80007bc <dshot_choose_type+0x18>
 80007b4:	2b02      	cmp	r3, #2
 80007b6:	d103      	bne.n	80007c0 <dshot_choose_type+0x1c>
	{
		case(DSHOT600):
				return DSHOT600_HZ;
 80007b8:	4b05      	ldr	r3, [pc, #20]	@ (80007d0 <dshot_choose_type+0x2c>)
 80007ba:	e002      	b.n	80007c2 <dshot_choose_type+0x1e>

		case(DSHOT300):
				return DSHOT300_HZ;
 80007bc:	4b05      	ldr	r3, [pc, #20]	@ (80007d4 <dshot_choose_type+0x30>)
 80007be:	e000      	b.n	80007c2 <dshot_choose_type+0x1e>

		default:
		case(DSHOT150):
				return DSHOT150_HZ;
 80007c0:	4b05      	ldr	r3, [pc, #20]	@ (80007d8 <dshot_choose_type+0x34>)
	}
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	00b71b00 	.word	0x00b71b00
 80007d4:	005b8d80 	.word	0x005b8d80
 80007d8:	002dc6c0 	.word	0x002dc6c0

080007dc <dshot_set_timer>:

static void dshot_set_timer(dshot_type_e dshot_type)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	ed2d 8b02 	vpush	{d8}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
	uint16_t dshot_prescaler;
	uint32_t timer_clock = TIMER_CLOCK; // all timer clock is same as SystemCoreClock in stm32f411
 80007ea:	4b27      	ldr	r3, [pc, #156]	@ (8000888 <dshot_set_timer+0xac>)
 80007ec:	60fb      	str	r3, [r7, #12]

	// Calculate prescaler by dshot type
	dshot_prescaler = lrintf((float) timer_clock / dshot_choose_type(dshot_type) + 0.01f) - 1;
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	ee07 3a90 	vmov	s15, r3
 80007f4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff ffd2 	bl	80007a4 <dshot_choose_type>
 8000800:	ee07 0a90 	vmov	s15, r0
 8000804:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000808:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800080c:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800088c <dshot_set_timer+0xb0>
 8000810:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000814:	eeb0 0a67 	vmov.f32	s0, s15
 8000818:	f007 fd78 	bl	800830c <lrintf>
 800081c:	4603      	mov	r3, r0
 800081e:	b29b      	uxth	r3, r3
 8000820:	3b01      	subs	r3, #1
 8000822:	817b      	strh	r3, [r7, #10]

	// motor1
	__HAL_TIM_SET_PRESCALER(MOTOR_1_TIM, dshot_prescaler);
 8000824:	4b1a      	ldr	r3, [pc, #104]	@ (8000890 <dshot_set_timer+0xb4>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	897a      	ldrh	r2, [r7, #10]
 800082a:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_1_TIM, MOTOR_BITLENGTH);
 800082c:	4b18      	ldr	r3, [pc, #96]	@ (8000890 <dshot_set_timer+0xb4>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2214      	movs	r2, #20
 8000832:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000834:	4b16      	ldr	r3, [pc, #88]	@ (8000890 <dshot_set_timer+0xb4>)
 8000836:	2214      	movs	r2, #20
 8000838:	60da      	str	r2, [r3, #12]

	// motor2
	__HAL_TIM_SET_PRESCALER(MOTOR_2_TIM, dshot_prescaler);
 800083a:	4b16      	ldr	r3, [pc, #88]	@ (8000894 <dshot_set_timer+0xb8>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	897a      	ldrh	r2, [r7, #10]
 8000840:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_2_TIM, MOTOR_BITLENGTH);
 8000842:	4b14      	ldr	r3, [pc, #80]	@ (8000894 <dshot_set_timer+0xb8>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2214      	movs	r2, #20
 8000848:	62da      	str	r2, [r3, #44]	@ 0x2c
 800084a:	4b12      	ldr	r3, [pc, #72]	@ (8000894 <dshot_set_timer+0xb8>)
 800084c:	2214      	movs	r2, #20
 800084e:	60da      	str	r2, [r3, #12]

	// motor3
	__HAL_TIM_SET_PRESCALER(MOTOR_3_TIM, dshot_prescaler);
 8000850:	4b10      	ldr	r3, [pc, #64]	@ (8000894 <dshot_set_timer+0xb8>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	897a      	ldrh	r2, [r7, #10]
 8000856:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_3_TIM, MOTOR_BITLENGTH);
 8000858:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <dshot_set_timer+0xb8>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2214      	movs	r2, #20
 800085e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000860:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <dshot_set_timer+0xb8>)
 8000862:	2214      	movs	r2, #20
 8000864:	60da      	str	r2, [r3, #12]

	// motor4
	__HAL_TIM_SET_PRESCALER(MOTOR_4_TIM, dshot_prescaler);
 8000866:	4b0a      	ldr	r3, [pc, #40]	@ (8000890 <dshot_set_timer+0xb4>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	897a      	ldrh	r2, [r7, #10]
 800086c:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_4_TIM, MOTOR_BITLENGTH);
 800086e:	4b08      	ldr	r3, [pc, #32]	@ (8000890 <dshot_set_timer+0xb4>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2214      	movs	r2, #20
 8000874:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000876:	4b06      	ldr	r3, [pc, #24]	@ (8000890 <dshot_set_timer+0xb4>)
 8000878:	2214      	movs	r2, #20
 800087a:	60da      	str	r2, [r3, #12]
}
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	ecbd 8b02 	vpop	{d8}
 8000886:	bd80      	pop	{r7, pc}
 8000888:	05f5e100 	.word	0x05f5e100
 800088c:	3c23d70a 	.word	0x3c23d70a
 8000890:	24000268 	.word	0x24000268
 8000894:	24000184 	.word	0x24000184

08000898 <dshot_dma_tc_callback>:

// __HAL_TIM_DISABLE_DMA is needed to eliminate the delay between different dshot signals
// I don't know why :(
static void dshot_dma_tc_callback(DMA_HandleTypeDef *hdma)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80008a4:	60fb      	str	r3, [r7, #12]

	if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d108      	bne.n	80008c2 <dshot_dma_tc_callback+0x2a>
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	68da      	ldr	r2, [r3, #12]
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80008be:	60da      	str	r2, [r3, #12]
	}
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
	}
}
 80008c0:	e028      	b.n	8000914 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC2])
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d108      	bne.n	80008de <dshot_dma_tc_callback+0x46>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	68da      	ldr	r2, [r3, #12]
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80008da:	60da      	str	r2, [r3, #12]
}
 80008dc:	e01a      	b.n	8000914 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC3])
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d108      	bne.n	80008fa <dshot_dma_tc_callback+0x62>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	68da      	ldr	r2, [r3, #12]
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80008f6:	60da      	str	r2, [r3, #12]
}
 80008f8:	e00c      	b.n	8000914 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	429a      	cmp	r2, r3
 8000902:	d107      	bne.n	8000914 <dshot_dma_tc_callback+0x7c>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	68da      	ldr	r2, [r3, #12]
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000912:	60da      	str	r2, [r3, #12]
}
 8000914:	bf00      	nop
 8000916:	3714      	adds	r7, #20
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <dshot_put_tc_callback_function>:

static void dshot_put_tc_callback_function()
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
	// TIM_DMA_ID_CCx depends on timer channel
	MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = dshot_dma_tc_callback;
 8000924:	4b0a      	ldr	r3, [pc, #40]	@ (8000950 <dshot_put_tc_callback_function+0x30>)
 8000926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000928:	4a0a      	ldr	r2, [pc, #40]	@ (8000954 <dshot_put_tc_callback_function+0x34>)
 800092a:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = dshot_dma_tc_callback;
 800092c:	4b0a      	ldr	r3, [pc, #40]	@ (8000958 <dshot_put_tc_callback_function+0x38>)
 800092e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000930:	4a08      	ldr	r2, [pc, #32]	@ (8000954 <dshot_put_tc_callback_function+0x34>)
 8000932:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dshot_dma_tc_callback;
 8000934:	4b08      	ldr	r3, [pc, #32]	@ (8000958 <dshot_put_tc_callback_function+0x38>)
 8000936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000938:	4a06      	ldr	r2, [pc, #24]	@ (8000954 <dshot_put_tc_callback_function+0x34>)
 800093a:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = dshot_dma_tc_callback;
 800093c:	4b04      	ldr	r3, [pc, #16]	@ (8000950 <dshot_put_tc_callback_function+0x30>)
 800093e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000940:	4a04      	ldr	r2, [pc, #16]	@ (8000954 <dshot_put_tc_callback_function+0x34>)
 8000942:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	24000268 	.word	0x24000268
 8000954:	08000899 	.word	0x08000899
 8000958:	24000184 	.word	0x24000184

0800095c <dshot_start_pwm>:

static void dshot_start_pwm()
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
	// Start the timer channel now.
    // Enabling/disabling DMA request can restart a new cycle without PWM start/stop.
  	HAL_TIM_PWM_Start(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL);
 8000960:	210c      	movs	r1, #12
 8000962:	4808      	ldr	r0, [pc, #32]	@ (8000984 <dshot_start_pwm+0x28>)
 8000964:	f005 fa3a 	bl	8005ddc <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL);
 8000968:	2108      	movs	r1, #8
 800096a:	4807      	ldr	r0, [pc, #28]	@ (8000988 <dshot_start_pwm+0x2c>)
 800096c:	f005 fa36 	bl	8005ddc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL);
 8000970:	2100      	movs	r1, #0
 8000972:	4805      	ldr	r0, [pc, #20]	@ (8000988 <dshot_start_pwm+0x2c>)
 8000974:	f005 fa32 	bl	8005ddc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL);
 8000978:	2104      	movs	r1, #4
 800097a:	4802      	ldr	r0, [pc, #8]	@ (8000984 <dshot_start_pwm+0x28>)
 800097c:	f005 fa2e 	bl	8005ddc <HAL_TIM_PWM_Start>
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	24000268 	.word	0x24000268
 8000988:	24000184 	.word	0x24000184

0800098c <dshot_prepare_packet>:

static uint16_t dshot_prepare_packet(uint16_t value)
{
 800098c:	b480      	push	{r7}
 800098e:	b087      	sub	sp, #28
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	80fb      	strh	r3, [r7, #6]
	uint16_t packet;
	bool dshot_telemetry = false;
 8000996:	2300      	movs	r3, #0
 8000998:	72fb      	strb	r3, [r7, #11]

	packet = (value << 1) | (dshot_telemetry ? 1 : 0);
 800099a:	88fb      	ldrh	r3, [r7, #6]
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	b21a      	sxth	r2, r3
 80009a0:	7afb      	ldrb	r3, [r7, #11]
 80009a2:	b21b      	sxth	r3, r3
 80009a4:	4313      	orrs	r3, r2
 80009a6:	b21b      	sxth	r3, r3
 80009a8:	813b      	strh	r3, [r7, #8]

	// compute checksum
	unsigned csum = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
	unsigned csum_data = packet;
 80009ae:	893b      	ldrh	r3, [r7, #8]
 80009b0:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < 3; i++)
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	e009      	b.n	80009cc <dshot_prepare_packet+0x40>
	{
        csum ^=  csum_data; // xor data by nibbles
 80009b8:	697a      	ldr	r2, [r7, #20]
 80009ba:	693b      	ldr	r3, [r7, #16]
 80009bc:	4053      	eors	r3, r2
 80009be:	617b      	str	r3, [r7, #20]
        csum_data >>= 4;
 80009c0:	693b      	ldr	r3, [r7, #16]
 80009c2:	091b      	lsrs	r3, r3, #4
 80009c4:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 3; i++)
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	3301      	adds	r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	2b02      	cmp	r3, #2
 80009d0:	ddf2      	ble.n	80009b8 <dshot_prepare_packet+0x2c>
	}

	csum &= 0xf;
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	f003 030f 	and.w	r3, r3, #15
 80009d8:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 80009da:	893b      	ldrh	r3, [r7, #8]
 80009dc:	011b      	lsls	r3, r3, #4
 80009de:	b29a      	uxth	r2, r3
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	4313      	orrs	r3, r2
 80009e6:	813b      	strh	r3, [r7, #8]

	return packet;
 80009e8:	893b      	ldrh	r3, [r7, #8]
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	371c      	adds	r7, #28
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <dshot_prepare_dmabuffer>:

// Convert 16 bits packet to 16 pwm signal
static void dshot_prepare_dmabuffer(uint32_t* motor_dmabuffer, uint16_t value)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b084      	sub	sp, #16
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
 80009fe:	460b      	mov	r3, r1
 8000a00:	807b      	strh	r3, [r7, #2]
	uint16_t packet;
	packet = dshot_prepare_packet(value);
 8000a02:	887b      	ldrh	r3, [r7, #2]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff ffc1 	bl	800098c <dshot_prepare_packet>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	81fb      	strh	r3, [r7, #14]

	for(int i = 0; i < 16; i++)
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	e011      	b.n	8000a38 <dshot_prepare_dmabuffer+0x42>
	{
		motor_dmabuffer[i] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;
 8000a14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	da01      	bge.n	8000a20 <dshot_prepare_dmabuffer+0x2a>
 8000a1c:	220e      	movs	r2, #14
 8000a1e:	e000      	b.n	8000a22 <dshot_prepare_dmabuffer+0x2c>
 8000a20:	2207      	movs	r2, #7
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	6879      	ldr	r1, [r7, #4]
 8000a28:	440b      	add	r3, r1
 8000a2a:	601a      	str	r2, [r3, #0]
		packet <<= 1;
 8000a2c:	89fb      	ldrh	r3, [r7, #14]
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < 16; i++)
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	3301      	adds	r3, #1
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	2b0f      	cmp	r3, #15
 8000a3c:	ddea      	ble.n	8000a14 <dshot_prepare_dmabuffer+0x1e>
	}

	motor_dmabuffer[16] = 0;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	3340      	adds	r3, #64	@ 0x40
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
	motor_dmabuffer[17] = 0;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	3344      	adds	r3, #68	@ 0x44
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
}
 8000a4e:	bf00      	nop
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
	...

08000a58 <dshot_prepare_dmabuffer_all>:

static void dshot_prepare_dmabuffer_all(uint16_t* motor_value)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer(motor1_dmabuffer, motor_value[0]);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	881b      	ldrh	r3, [r3, #0]
 8000a64:	4619      	mov	r1, r3
 8000a66:	480e      	ldr	r0, [pc, #56]	@ (8000aa0 <dshot_prepare_dmabuffer_all+0x48>)
 8000a68:	f7ff ffc5 	bl	80009f6 <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor2_dmabuffer, motor_value[1]);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3302      	adds	r3, #2
 8000a70:	881b      	ldrh	r3, [r3, #0]
 8000a72:	4619      	mov	r1, r3
 8000a74:	480b      	ldr	r0, [pc, #44]	@ (8000aa4 <dshot_prepare_dmabuffer_all+0x4c>)
 8000a76:	f7ff ffbe 	bl	80009f6 <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor3_dmabuffer, motor_value[2]);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	881b      	ldrh	r3, [r3, #0]
 8000a80:	4619      	mov	r1, r3
 8000a82:	4809      	ldr	r0, [pc, #36]	@ (8000aa8 <dshot_prepare_dmabuffer_all+0x50>)
 8000a84:	f7ff ffb7 	bl	80009f6 <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor4_dmabuffer, motor_value[3]);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3306      	adds	r3, #6
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4806      	ldr	r0, [pc, #24]	@ (8000aac <dshot_prepare_dmabuffer_all+0x54>)
 8000a92:	f7ff ffb0 	bl	80009f6 <dshot_prepare_dmabuffer>
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	24000048 	.word	0x24000048
 8000aa4:	24000090 	.word	0x24000090
 8000aa8:	240000d8 	.word	0x240000d8
 8000aac:	24000120 	.word	0x24000120

08000ab0 <dshot_dma_start>:

static void dshot_dma_start()
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	HAL_DMA_Start_IT(MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4], (uint32_t)motor1_dmabuffer, (uint32_t)&MOTOR_1_TIM->Instance->CCR4, DSHOT_DMA_BUFFER_SIZE);
 8000ab4:	4b14      	ldr	r3, [pc, #80]	@ (8000b08 <dshot_dma_start+0x58>)
 8000ab6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000ab8:	4914      	ldr	r1, [pc, #80]	@ (8000b0c <dshot_dma_start+0x5c>)
 8000aba:	4b13      	ldr	r3, [pc, #76]	@ (8000b08 <dshot_dma_start+0x58>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	3340      	adds	r3, #64	@ 0x40
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	2312      	movs	r3, #18
 8000ac4:	f001 fd66 	bl	8002594 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3], (uint32_t)motor2_dmabuffer, (uint32_t)&MOTOR_2_TIM->Instance->CCR3, DSHOT_DMA_BUFFER_SIZE);
 8000ac8:	4b11      	ldr	r3, [pc, #68]	@ (8000b10 <dshot_dma_start+0x60>)
 8000aca:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8000acc:	4911      	ldr	r1, [pc, #68]	@ (8000b14 <dshot_dma_start+0x64>)
 8000ace:	4b10      	ldr	r3, [pc, #64]	@ (8000b10 <dshot_dma_start+0x60>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	333c      	adds	r3, #60	@ 0x3c
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	2312      	movs	r3, #18
 8000ad8:	f001 fd5c 	bl	8002594 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1], (uint32_t)motor3_dmabuffer, (uint32_t)&MOTOR_3_TIM->Instance->CCR1, DSHOT_DMA_BUFFER_SIZE);
 8000adc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b10 <dshot_dma_start+0x60>)
 8000ade:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8000ae0:	490d      	ldr	r1, [pc, #52]	@ (8000b18 <dshot_dma_start+0x68>)
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b10 <dshot_dma_start+0x60>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	3334      	adds	r3, #52	@ 0x34
 8000ae8:	461a      	mov	r2, r3
 8000aea:	2312      	movs	r3, #18
 8000aec:	f001 fd52 	bl	8002594 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2], (uint32_t)motor4_dmabuffer, (uint32_t)&MOTOR_4_TIM->Instance->CCR2, DSHOT_DMA_BUFFER_SIZE);
 8000af0:	4b05      	ldr	r3, [pc, #20]	@ (8000b08 <dshot_dma_start+0x58>)
 8000af2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000af4:	4909      	ldr	r1, [pc, #36]	@ (8000b1c <dshot_dma_start+0x6c>)
 8000af6:	4b04      	ldr	r3, [pc, #16]	@ (8000b08 <dshot_dma_start+0x58>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	3338      	adds	r3, #56	@ 0x38
 8000afc:	461a      	mov	r2, r3
 8000afe:	2312      	movs	r3, #18
 8000b00:	f001 fd48 	bl	8002594 <HAL_DMA_Start_IT>
}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	24000268 	.word	0x24000268
 8000b0c:	24000048 	.word	0x24000048
 8000b10:	24000184 	.word	0x24000184
 8000b14:	24000090 	.word	0x24000090
 8000b18:	240000d8 	.word	0x240000d8
 8000b1c:	24000120 	.word	0x24000120

08000b20 <dshot_enable_dma_request>:

static void dshot_enable_dma_request()
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE_DMA(MOTOR_1_TIM, TIM_DMA_CC4);
 8000b24:	4b12      	ldr	r3, [pc, #72]	@ (8000b70 <dshot_enable_dma_request+0x50>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	68da      	ldr	r2, [r3, #12]
 8000b2a:	4b11      	ldr	r3, [pc, #68]	@ (8000b70 <dshot_enable_dma_request+0x50>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000b32:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_2_TIM, TIM_DMA_CC3);
 8000b34:	4b0f      	ldr	r3, [pc, #60]	@ (8000b74 <dshot_enable_dma_request+0x54>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	68da      	ldr	r2, [r3, #12]
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b74 <dshot_enable_dma_request+0x54>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000b42:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_3_TIM, TIM_DMA_CC1);
 8000b44:	4b0b      	ldr	r3, [pc, #44]	@ (8000b74 <dshot_enable_dma_request+0x54>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	68da      	ldr	r2, [r3, #12]
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b74 <dshot_enable_dma_request+0x54>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000b52:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_4_TIM, TIM_DMA_CC2);
 8000b54:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <dshot_enable_dma_request+0x50>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	68da      	ldr	r2, [r3, #12]
 8000b5a:	4b05      	ldr	r3, [pc, #20]	@ (8000b70 <dshot_enable_dma_request+0x50>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000b62:	60da      	str	r2, [r3, #12]
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	24000268 	.word	0x24000268
 8000b74:	24000184 	.word	0x24000184

08000b78 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	@ 0x28
 8000b7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
 8000b8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8e:	4b51      	ldr	r3, [pc, #324]	@ (8000cd4 <MX_GPIO_Init+0x15c>)
 8000b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b94:	4a4f      	ldr	r2, [pc, #316]	@ (8000cd4 <MX_GPIO_Init+0x15c>)
 8000b96:	f043 0304 	orr.w	r3, r3, #4
 8000b9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b9e:	4b4d      	ldr	r3, [pc, #308]	@ (8000cd4 <MX_GPIO_Init+0x15c>)
 8000ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba4:	f003 0304 	and.w	r3, r3, #4
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bac:	4b49      	ldr	r3, [pc, #292]	@ (8000cd4 <MX_GPIO_Init+0x15c>)
 8000bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb2:	4a48      	ldr	r2, [pc, #288]	@ (8000cd4 <MX_GPIO_Init+0x15c>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bbc:	4b45      	ldr	r3, [pc, #276]	@ (8000cd4 <MX_GPIO_Init+0x15c>)
 8000bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bca:	4b42      	ldr	r3, [pc, #264]	@ (8000cd4 <MX_GPIO_Init+0x15c>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd0:	4a40      	ldr	r2, [pc, #256]	@ (8000cd4 <MX_GPIO_Init+0x15c>)
 8000bd2:	f043 0302 	orr.w	r3, r3, #2
 8000bd6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bda:	4b3e      	ldr	r3, [pc, #248]	@ (8000cd4 <MX_GPIO_Init+0x15c>)
 8000bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be0:	f003 0302 	and.w	r3, r3, #2
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be8:	4b3a      	ldr	r3, [pc, #232]	@ (8000cd4 <MX_GPIO_Init+0x15c>)
 8000bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bee:	4a39      	ldr	r2, [pc, #228]	@ (8000cd4 <MX_GPIO_Init+0x15c>)
 8000bf0:	f043 0308 	orr.w	r3, r3, #8
 8000bf4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bf8:	4b36      	ldr	r3, [pc, #216]	@ (8000cd4 <MX_GPIO_Init+0x15c>)
 8000bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bfe:	f003 0308 	and.w	r3, r3, #8
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c06:	4b33      	ldr	r3, [pc, #204]	@ (8000cd4 <MX_GPIO_Init+0x15c>)
 8000c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c0c:	4a31      	ldr	r2, [pc, #196]	@ (8000cd4 <MX_GPIO_Init+0x15c>)
 8000c0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c16:	4b2f      	ldr	r3, [pc, #188]	@ (8000cd4 <MX_GPIO_Init+0x15c>)
 8000c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c20:	603b      	str	r3, [r7, #0]
 8000c22:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000c24:	2332      	movs	r3, #50	@ 0x32
 8000c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c30:	2300      	movs	r3, #0
 8000c32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c34:	230b      	movs	r3, #11
 8000c36:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4826      	ldr	r0, [pc, #152]	@ (8000cd8 <MX_GPIO_Init+0x160>)
 8000c40:	f003 fa94 	bl	800416c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c44:	2380      	movs	r3, #128	@ 0x80
 8000c46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c54:	230b      	movs	r3, #11
 8000c56:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	481f      	ldr	r0, [pc, #124]	@ (8000cdc <MX_GPIO_Init+0x164>)
 8000c60:	f003 fa84 	bl	800416c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2300      	movs	r3, #0
 8000c74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c76:	230b      	movs	r3, #11
 8000c78:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4817      	ldr	r0, [pc, #92]	@ (8000ce0 <MX_GPIO_Init+0x168>)
 8000c82:	f003 fa73 	bl	800416c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000c86:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c94:	2300      	movs	r3, #0
 8000c96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000c98:	230a      	movs	r3, #10
 8000c9a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	480e      	ldr	r0, [pc, #56]	@ (8000cdc <MX_GPIO_Init+0x164>)
 8000ca4:	f003 fa62 	bl	800416c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000ca8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000cac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cba:	230b      	movs	r3, #11
 8000cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4807      	ldr	r0, [pc, #28]	@ (8000ce4 <MX_GPIO_Init+0x16c>)
 8000cc6:	f003 fa51 	bl	800416c <HAL_GPIO_Init>

}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	@ 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	58024400 	.word	0x58024400
 8000cd8:	58020800 	.word	0x58020800
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	58020400 	.word	0x58020400
 8000ce4:	58021800 	.word	0x58021800

08000ce8 <HAL_TIM_IC_CaptureCallback>:
		}
		xfr_ptr->sts_4to7 = 0; // M4 to M7 buffer is empty
	}
	return buffer; // return the buffer (pointer)
}
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
	contador = __HAL_TIM_GET_COUNTER(&htim4);
 8000cf0:	4b05      	ldr	r3, [pc, #20]	@ (8000d08 <HAL_TIM_IC_CaptureCallback+0x20>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cf6:	4a05      	ldr	r2, [pc, #20]	@ (8000d0c <HAL_TIM_IC_CaptureCallback+0x24>)
 8000cf8:	6013      	str	r3, [r2, #0]
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	2400021c 	.word	0x2400021c
 8000d0c:	24000178 	.word	0x24000178

08000d10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000d16:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d1a:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000d1c:	bf00      	nop
 8000d1e:	4b53      	ldr	r3, [pc, #332]	@ (8000e6c <main+0x15c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d004      	beq.n	8000d34 <main+0x24>
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	1e5a      	subs	r2, r3, #1
 8000d2e:	60fa      	str	r2, [r7, #12]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	dcf4      	bgt.n	8000d1e <main+0xe>
  if ( timeout < 0 )
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	da01      	bge.n	8000d3e <main+0x2e>
  {
  Error_Handler();
 8000d3a:	f000 f923 	bl	8000f84 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d3e:	f000 fee7 	bl	8001b10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d42:	f000 f8a1 	bl	8000e88 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000d46:	4b49      	ldr	r3, [pc, #292]	@ (8000e6c <main+0x15c>)
 8000d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d4c:	4a47      	ldr	r2, [pc, #284]	@ (8000e6c <main+0x15c>)
 8000d4e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d56:	4b45      	ldr	r3, [pc, #276]	@ (8000e6c <main+0x15c>)
 8000d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000d64:	2000      	movs	r0, #0
 8000d66:	f003 fbe5 	bl	8004534 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	f003 fbfb 	bl	8004568 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000d72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d76:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000d78:	bf00      	nop
 8000d7a:	4b3c      	ldr	r3, [pc, #240]	@ (8000e6c <main+0x15c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d104      	bne.n	8000d90 <main+0x80>
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	1e5a      	subs	r2, r3, #1
 8000d8a:	60fa      	str	r2, [r7, #12]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	dcf4      	bgt.n	8000d7a <main+0x6a>
if ( timeout < 0 )
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	da01      	bge.n	8000d9a <main+0x8a>
{
Error_Handler();
 8000d96:	f000 f8f5 	bl	8000f84 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d9a:	f7ff feed 	bl	8000b78 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d9e:	f7ff fca9 	bl	80006f4 <MX_DMA_Init>
  MX_TIM2_Init();
 8000da2:	f000 f97f 	bl	80010a4 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000da6:	f000 fa85 	bl	80012b4 <MX_TIM5_Init>
  MX_TIM3_Init();
 8000daa:	f000 f9df 	bl	800116c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000dae:	f000 fa2b 	bl	8001208 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  int count = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60bb      	str	r3, [r7, #8]
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000db6:	213c      	movs	r1, #60	@ 0x3c
 8000db8:	482d      	ldr	r0, [pc, #180]	@ (8000e70 <main+0x160>)
 8000dba:	f005 f9c3 	bl	8006144 <HAL_TIM_Encoder_Start_IT>
	uint8_t * xfr_data; // pointer to transfer data


	//initialize inter-core status pointers
	xfr_ptr->sts_4to7 = 0;
 8000dbe:	4b2d      	ldr	r3, [pc, #180]	@ (8000e74 <main+0x164>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	701a      	strb	r2, [r3, #0]
	xfr_ptr->sts_7to4 = 0;
 8000dc4:	4b2b      	ldr	r3, [pc, #172]	@ (8000e74 <main+0x164>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	705a      	strb	r2, [r3, #1]

	dshot_init(DSHOT150);
 8000dca:	2000      	movs	r0, #0
 8000dcc:	f7ff fcca 	bl	8000764 <dshot_init>
	  if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8000dd0:	4829      	ldr	r0, [pc, #164]	@ (8000e78 <main+0x168>)
 8000dd2:	f004 ff33 	bl	8005c3c <HAL_TIM_Base_Start_IT>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <main+0xd0>
	    {
	      /* Starting Error */
	      Error_Handler();
 8000ddc:	f000 f8d2 	bl	8000f84 <Error_Handler>
	    }
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000de0:	2000      	movs	r0, #0
 8000de2:	f000 fccd 	bl	8001780 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000de6:	2001      	movs	r0, #1
 8000de8:	f000 fcca 	bl	8001780 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000dec:	2002      	movs	r0, #2
 8000dee:	f000 fcc7 	bl	8001780 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000df2:	2101      	movs	r1, #1
 8000df4:	2000      	movs	r0, #0
 8000df6:	f000 fd39 	bl	800186c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000dfa:	4b20      	ldr	r3, [pc, #128]	@ (8000e7c <main+0x16c>)
 8000dfc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e00:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000e02:	4b1e      	ldr	r3, [pc, #120]	@ (8000e7c <main+0x16c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000e08:	4b1c      	ldr	r3, [pc, #112]	@ (8000e7c <main+0x16c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000e0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000e7c <main+0x16c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000e14:	4b19      	ldr	r3, [pc, #100]	@ (8000e7c <main+0x16c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000e1a:	4918      	ldr	r1, [pc, #96]	@ (8000e7c <main+0x16c>)
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f000 fdb5 	bl	800198c <BSP_COM_Init>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <main+0x11c>
  {
    Error_Handler();
 8000e28:	f000 f8ac 	bl	8000f84 <Error_Handler>
	  	  for(int n=0;n<4;n++){
	  		  motores[n] = (Mensagem[n]*2048)/255;

	  	  }
	  	  */
	  	  contador = __HAL_TIM_GET_COUNTER(&htim4);
 8000e2c:	4b10      	ldr	r3, [pc, #64]	@ (8000e70 <main+0x160>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e32:	4a13      	ldr	r2, [pc, #76]	@ (8000e80 <main+0x170>)
 8000e34:	6013      	str	r3, [r2, #0]
	  	  if(count<2000){
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e3c:	da03      	bge.n	8000e46 <main+0x136>
	  		  motores[0]=0;
 8000e3e:	4b11      	ldr	r3, [pc, #68]	@ (8000e84 <main+0x174>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	801a      	strh	r2, [r3, #0]
 8000e44:	e007      	b.n	8000e56 <main+0x146>
	  	  }  else if(count>=2000){
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e4c:	db03      	blt.n	8000e56 <main+0x146>
	  		motores[0]=1000;
 8000e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e84 <main+0x174>)
 8000e50:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e54:	801a      	strh	r2, [r3, #0]
	  	  }
	  	  count++;
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	60bb      	str	r3, [r7, #8]
	  	  dshot_write(motores);
 8000e5c:	4809      	ldr	r0, [pc, #36]	@ (8000e84 <main+0x174>)
 8000e5e:	f7ff fc92 	bl	8000786 <dshot_write>

	  	  HAL_Delay(1);
 8000e62:	2001      	movs	r0, #1
 8000e64:	f000 fee6 	bl	8001c34 <HAL_Delay>
	  	  contador = __HAL_TIM_GET_COUNTER(&htim4);
 8000e68:	e7e0      	b.n	8000e2c <main+0x11c>
 8000e6a:	bf00      	nop
 8000e6c:	58024400 	.word	0x58024400
 8000e70:	2400021c 	.word	0x2400021c
 8000e74:	38001000 	.word	0x38001000
 8000e78:	240001d0 	.word	0x240001d0
 8000e7c:	24000168 	.word	0x24000168
 8000e80:	24000178 	.word	0x24000178
 8000e84:	2400017c 	.word	0x2400017c

08000e88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b09c      	sub	sp, #112	@ 0x70
 8000e8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e92:	224c      	movs	r2, #76	@ 0x4c
 8000e94:	2100      	movs	r1, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f007 fa0c 	bl	80082b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	2220      	movs	r2, #32
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f007 fa06 	bl	80082b4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000ea8:	2004      	movs	r0, #4
 8000eaa:	f003 fb71 	bl	8004590 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000eae:	2300      	movs	r3, #0
 8000eb0:	603b      	str	r3, [r7, #0]
 8000eb2:	4b32      	ldr	r3, [pc, #200]	@ (8000f7c <SystemClock_Config+0xf4>)
 8000eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eb6:	4a31      	ldr	r2, [pc, #196]	@ (8000f7c <SystemClock_Config+0xf4>)
 8000eb8:	f023 0301 	bic.w	r3, r3, #1
 8000ebc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000ebe:	4b2f      	ldr	r3, [pc, #188]	@ (8000f7c <SystemClock_Config+0xf4>)
 8000ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	603b      	str	r3, [r7, #0]
 8000ec8:	4b2d      	ldr	r3, [pc, #180]	@ (8000f80 <SystemClock_Config+0xf8>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ed0:	4a2b      	ldr	r2, [pc, #172]	@ (8000f80 <SystemClock_Config+0xf8>)
 8000ed2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ed6:	6193      	str	r3, [r2, #24]
 8000ed8:	4b29      	ldr	r3, [pc, #164]	@ (8000f80 <SystemClock_Config+0xf8>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ee0:	603b      	str	r3, [r7, #0]
 8000ee2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ee4:	bf00      	nop
 8000ee6:	4b26      	ldr	r3, [pc, #152]	@ (8000f80 <SystemClock_Config+0xf8>)
 8000ee8:	699b      	ldr	r3, [r3, #24]
 8000eea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000eee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ef2:	d1f8      	bne.n	8000ee6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000efc:	2340      	movs	r3, #64	@ 0x40
 8000efe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f00:	2302      	movs	r3, #2
 8000f02:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f04:	2300      	movs	r3, #0
 8000f06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f08:	2304      	movs	r3, #4
 8000f0a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8000f0c:	2319      	movs	r3, #25
 8000f0e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f10:	2302      	movs	r3, #2
 8000f12:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000f14:	2305      	movs	r3, #5
 8000f16:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f1c:	230c      	movs	r3, #12
 8000f1e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f003 fb89 	bl	8004644 <HAL_RCC_OscConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000f38:	f000 f824 	bl	8000f84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3c:	233f      	movs	r3, #63	@ 0x3f
 8000f3e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f40:	2303      	movs	r3, #3
 8000f42:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f44:	2300      	movs	r3, #0
 8000f46:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f4c:	2340      	movs	r3, #64	@ 0x40
 8000f4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f50:	2340      	movs	r3, #64	@ 0x40
 8000f52:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f58:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f5a:	2340      	movs	r3, #64	@ 0x40
 8000f5c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	2104      	movs	r1, #4
 8000f62:	4618      	mov	r0, r3
 8000f64:	f003 ffc8 	bl	8004ef8 <HAL_RCC_ClockConfig>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000f6e:	f000 f809 	bl	8000f84 <Error_Handler>
  }
}
 8000f72:	bf00      	nop
 8000f74:	3770      	adds	r7, #112	@ 0x70
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	58000400 	.word	0x58000400
 8000f80:	58024800 	.word	0x58024800

08000f84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f88:	b672      	cpsid	i
}
 8000f8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f8c:	bf00      	nop
 8000f8e:	e7fd      	b.n	8000f8c <Error_Handler+0x8>

08000f90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f96:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc0 <HAL_MspInit+0x30>)
 8000f98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f9c:	4a08      	ldr	r2, [pc, #32]	@ (8000fc0 <HAL_MspInit+0x30>)
 8000f9e:	f043 0302 	orr.w	r3, r3, #2
 8000fa2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000fa6:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <HAL_MspInit+0x30>)
 8000fa8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fac:	f003 0302 	and.w	r3, r3, #2
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	58024400 	.word	0x58024400

08000fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <NMI_Handler+0x4>

08000fcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <HardFault_Handler+0x4>

08000fd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <MemManage_Handler+0x4>

08000fdc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <BusFault_Handler+0x4>

08000fe4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <UsageFault_Handler+0x4>

08000fec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800101a:	f000 fdeb 	bl	8001bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8001028:	4802      	ldr	r0, [pc, #8]	@ (8001034 <DMA1_Stream1_IRQHandler+0x10>)
 800102a:	f001 fd1d 	bl	8002a68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	2400032c 	.word	0x2400032c

08001038 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 800103c:	4802      	ldr	r0, [pc, #8]	@ (8001048 <DMA1_Stream3_IRQHandler+0x10>)
 800103e:	f001 fd13 	bl	8002a68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	2400041c 	.word	0x2400041c

0800104c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8001050:	4802      	ldr	r0, [pc, #8]	@ (800105c <DMA1_Stream4_IRQHandler+0x10>)
 8001052:	f001 fd09 	bl	8002a68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	240003a4 	.word	0x240003a4

08001060 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001064:	4802      	ldr	r0, [pc, #8]	@ (8001070 <DMA1_Stream5_IRQHandler+0x10>)
 8001066:	f001 fcff 	bl	8002a68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	240002b4 	.word	0x240002b4

08001074 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001078:	4804      	ldr	r0, [pc, #16]	@ (800108c <TIM3_IRQHandler+0x18>)
 800107a:	f005 f911 	bl	80062a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 800107e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001082:	4803      	ldr	r0, [pc, #12]	@ (8001090 <TIM3_IRQHandler+0x1c>)
 8001084:	f003 fa3b 	bl	80044fe <HAL_GPIO_TogglePin>
  /* USER CODE END TIM3_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	240001d0 	.word	0x240001d0
 8001090:	58020400 	.word	0x58020400

08001094 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001098:	2000      	movs	r0, #0
 800109a:	f000 fc59 	bl	8001950 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim5_ch2;
DMA_HandleTypeDef hdma_tim5_ch4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	@ 0x28
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010aa:	f107 031c 	add.w	r3, r7, #28
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010b6:	463b      	mov	r3, r7
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
 80010c4:	615a      	str	r2, [r3, #20]
 80010c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010c8:	4b27      	ldr	r3, [pc, #156]	@ (8001168 <MX_TIM2_Init+0xc4>)
 80010ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010d0:	4b25      	ldr	r3, [pc, #148]	@ (8001168 <MX_TIM2_Init+0xc4>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d6:	4b24      	ldr	r3, [pc, #144]	@ (8001168 <MX_TIM2_Init+0xc4>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80010dc:	4b22      	ldr	r3, [pc, #136]	@ (8001168 <MX_TIM2_Init+0xc4>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e2:	4b21      	ldr	r3, [pc, #132]	@ (8001168 <MX_TIM2_Init+0xc4>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001168 <MX_TIM2_Init+0xc4>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010ee:	481e      	ldr	r0, [pc, #120]	@ (8001168 <MX_TIM2_Init+0xc4>)
 80010f0:	f004 fe1c 	bl	8005d2c <HAL_TIM_PWM_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80010fa:	f7ff ff43 	bl	8000f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001102:	2300      	movs	r3, #0
 8001104:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001106:	f107 031c 	add.w	r3, r7, #28
 800110a:	4619      	mov	r1, r3
 800110c:	4816      	ldr	r0, [pc, #88]	@ (8001168 <MX_TIM2_Init+0xc4>)
 800110e:	f006 f843 	bl	8007198 <HAL_TIMEx_MasterConfigSynchronization>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001118:	f7ff ff34 	bl	8000f84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800111c:	2360      	movs	r3, #96	@ 0x60
 800111e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001124:	2300      	movs	r3, #0
 8001126:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800112c:	463b      	mov	r3, r7
 800112e:	2200      	movs	r2, #0
 8001130:	4619      	mov	r1, r3
 8001132:	480d      	ldr	r0, [pc, #52]	@ (8001168 <MX_TIM2_Init+0xc4>)
 8001134:	f005 f9bc 	bl	80064b0 <HAL_TIM_PWM_ConfigChannel>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800113e:	f7ff ff21 	bl	8000f84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001142:	463b      	mov	r3, r7
 8001144:	2208      	movs	r2, #8
 8001146:	4619      	mov	r1, r3
 8001148:	4807      	ldr	r0, [pc, #28]	@ (8001168 <MX_TIM2_Init+0xc4>)
 800114a:	f005 f9b1 	bl	80064b0 <HAL_TIM_PWM_ConfigChannel>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001154:	f7ff ff16 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001158:	4803      	ldr	r0, [pc, #12]	@ (8001168 <MX_TIM2_Init+0xc4>)
 800115a:	f000 fa87 	bl	800166c <HAL_TIM_MspPostInit>

}
 800115e:	bf00      	nop
 8001160:	3728      	adds	r7, #40	@ 0x28
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	24000184 	.word	0x24000184

0800116c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001172:	f107 0310 	add.w	r3, r7, #16
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001180:	1d3b      	adds	r3, r7, #4
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800118a:	4b1d      	ldr	r3, [pc, #116]	@ (8001200 <MX_TIM3_Init+0x94>)
 800118c:	4a1d      	ldr	r2, [pc, #116]	@ (8001204 <MX_TIM3_Init+0x98>)
 800118e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 8001190:	4b1b      	ldr	r3, [pc, #108]	@ (8001200 <MX_TIM3_Init+0x94>)
 8001192:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001196:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001198:	4b19      	ldr	r3, [pc, #100]	@ (8001200 <MX_TIM3_Init+0x94>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800119e:	4b18      	ldr	r3, [pc, #96]	@ (8001200 <MX_TIM3_Init+0x94>)
 80011a0:	2263      	movs	r2, #99	@ 0x63
 80011a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a4:	4b16      	ldr	r3, [pc, #88]	@ (8001200 <MX_TIM3_Init+0x94>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011aa:	4b15      	ldr	r3, [pc, #84]	@ (8001200 <MX_TIM3_Init+0x94>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011b0:	4813      	ldr	r0, [pc, #76]	@ (8001200 <MX_TIM3_Init+0x94>)
 80011b2:	f004 fceb 	bl	8005b8c <HAL_TIM_Base_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80011bc:	f7ff fee2 	bl	8000f84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011c6:	f107 0310 	add.w	r3, r7, #16
 80011ca:	4619      	mov	r1, r3
 80011cc:	480c      	ldr	r0, [pc, #48]	@ (8001200 <MX_TIM3_Init+0x94>)
 80011ce:	f005 fa83 	bl	80066d8 <HAL_TIM_ConfigClockSource>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80011d8:	f7ff fed4 	bl	8000f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011dc:	2300      	movs	r3, #0
 80011de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	4619      	mov	r1, r3
 80011e8:	4805      	ldr	r0, [pc, #20]	@ (8001200 <MX_TIM3_Init+0x94>)
 80011ea:	f005 ffd5 	bl	8007198 <HAL_TIMEx_MasterConfigSynchronization>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80011f4:	f7ff fec6 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	3720      	adds	r7, #32
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	240001d0 	.word	0x240001d0
 8001204:	40000400 	.word	0x40000400

08001208 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08c      	sub	sp, #48	@ 0x30
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800120e:	f107 030c 	add.w	r3, r7, #12
 8001212:	2224      	movs	r2, #36	@ 0x24
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f007 f84c 	bl	80082b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800121c:	463b      	mov	r3, r7
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001226:	4b21      	ldr	r3, [pc, #132]	@ (80012ac <MX_TIM4_Init+0xa4>)
 8001228:	4a21      	ldr	r2, [pc, #132]	@ (80012b0 <MX_TIM4_Init+0xa8>)
 800122a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800122c:	4b1f      	ldr	r3, [pc, #124]	@ (80012ac <MX_TIM4_Init+0xa4>)
 800122e:	2200      	movs	r2, #0
 8001230:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001232:	4b1e      	ldr	r3, [pc, #120]	@ (80012ac <MX_TIM4_Init+0xa4>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001238:	4b1c      	ldr	r3, [pc, #112]	@ (80012ac <MX_TIM4_Init+0xa4>)
 800123a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800123e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001240:	4b1a      	ldr	r3, [pc, #104]	@ (80012ac <MX_TIM4_Init+0xa4>)
 8001242:	2200      	movs	r2, #0
 8001244:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001246:	4b19      	ldr	r3, [pc, #100]	@ (80012ac <MX_TIM4_Init+0xa4>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800124c:	2303      	movs	r3, #3
 800124e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001250:	2302      	movs	r3, #2
 8001252:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001254:	2301      	movs	r3, #1
 8001256:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001258:	2300      	movs	r3, #0
 800125a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001260:	2302      	movs	r3, #2
 8001262:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001264:	2301      	movs	r3, #1
 8001266:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001268:	2300      	movs	r3, #0
 800126a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	4619      	mov	r1, r3
 8001276:	480d      	ldr	r0, [pc, #52]	@ (80012ac <MX_TIM4_Init+0xa4>)
 8001278:	f004 febe 	bl	8005ff8 <HAL_TIM_Encoder_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001282:	f7ff fe7f 	bl	8000f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001286:	2300      	movs	r3, #0
 8001288:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128a:	2300      	movs	r3, #0
 800128c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800128e:	463b      	mov	r3, r7
 8001290:	4619      	mov	r1, r3
 8001292:	4806      	ldr	r0, [pc, #24]	@ (80012ac <MX_TIM4_Init+0xa4>)
 8001294:	f005 ff80 	bl	8007198 <HAL_TIMEx_MasterConfigSynchronization>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800129e:	f7ff fe71 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80012a2:	bf00      	nop
 80012a4:	3730      	adds	r7, #48	@ 0x30
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	2400021c 	.word	0x2400021c
 80012b0:	40000800 	.word	0x40000800

080012b4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	@ 0x28
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ba:	f107 031c 	add.w	r3, r7, #28
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012c6:	463b      	mov	r3, r7
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
 80012d4:	615a      	str	r2, [r3, #20]
 80012d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80012d8:	4b26      	ldr	r3, [pc, #152]	@ (8001374 <MX_TIM5_Init+0xc0>)
 80012da:	4a27      	ldr	r2, [pc, #156]	@ (8001378 <MX_TIM5_Init+0xc4>)
 80012dc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80012de:	4b25      	ldr	r3, [pc, #148]	@ (8001374 <MX_TIM5_Init+0xc0>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e4:	4b23      	ldr	r3, [pc, #140]	@ (8001374 <MX_TIM5_Init+0xc0>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 80012ea:	4b22      	ldr	r3, [pc, #136]	@ (8001374 <MX_TIM5_Init+0xc0>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f0:	4b20      	ldr	r3, [pc, #128]	@ (8001374 <MX_TIM5_Init+0xc0>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001374 <MX_TIM5_Init+0xc0>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80012fc:	481d      	ldr	r0, [pc, #116]	@ (8001374 <MX_TIM5_Init+0xc0>)
 80012fe:	f004 fd15 	bl	8005d2c <HAL_TIM_PWM_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001308:	f7ff fe3c 	bl	8000f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001310:	2300      	movs	r3, #0
 8001312:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	4619      	mov	r1, r3
 800131a:	4816      	ldr	r0, [pc, #88]	@ (8001374 <MX_TIM5_Init+0xc0>)
 800131c:	f005 ff3c 	bl	8007198 <HAL_TIMEx_MasterConfigSynchronization>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001326:	f7ff fe2d 	bl	8000f84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800132a:	2360      	movs	r3, #96	@ 0x60
 800132c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001332:	2300      	movs	r3, #0
 8001334:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800133a:	463b      	mov	r3, r7
 800133c:	2204      	movs	r2, #4
 800133e:	4619      	mov	r1, r3
 8001340:	480c      	ldr	r0, [pc, #48]	@ (8001374 <MX_TIM5_Init+0xc0>)
 8001342:	f005 f8b5 	bl	80064b0 <HAL_TIM_PWM_ConfigChannel>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 800134c:	f7ff fe1a 	bl	8000f84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001350:	463b      	mov	r3, r7
 8001352:	220c      	movs	r2, #12
 8001354:	4619      	mov	r1, r3
 8001356:	4807      	ldr	r0, [pc, #28]	@ (8001374 <MX_TIM5_Init+0xc0>)
 8001358:	f005 f8aa 	bl	80064b0 <HAL_TIM_PWM_ConfigChannel>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001362:	f7ff fe0f 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001366:	4803      	ldr	r0, [pc, #12]	@ (8001374 <MX_TIM5_Init+0xc0>)
 8001368:	f000 f980 	bl	800166c <HAL_TIM_MspPostInit>

}
 800136c:	bf00      	nop
 800136e:	3728      	adds	r7, #40	@ 0x28
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	24000268 	.word	0x24000268
 8001378:	40000c00 	.word	0x40000c00

0800137c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800138c:	d16f      	bne.n	800146e <HAL_TIM_PWM_MspInit+0xf2>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800138e:	4b74      	ldr	r3, [pc, #464]	@ (8001560 <HAL_TIM_PWM_MspInit+0x1e4>)
 8001390:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001394:	4a72      	ldr	r2, [pc, #456]	@ (8001560 <HAL_TIM_PWM_MspInit+0x1e4>)
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800139e:	4b70      	ldr	r3, [pc, #448]	@ (8001560 <HAL_TIM_PWM_MspInit+0x1e4>)
 80013a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 80013ac:	4b6d      	ldr	r3, [pc, #436]	@ (8001564 <HAL_TIM_PWM_MspInit+0x1e8>)
 80013ae:	4a6e      	ldr	r2, [pc, #440]	@ (8001568 <HAL_TIM_PWM_MspInit+0x1ec>)
 80013b0:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 80013b2:	4b6c      	ldr	r3, [pc, #432]	@ (8001564 <HAL_TIM_PWM_MspInit+0x1e8>)
 80013b4:	2212      	movs	r2, #18
 80013b6:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013b8:	4b6a      	ldr	r3, [pc, #424]	@ (8001564 <HAL_TIM_PWM_MspInit+0x1e8>)
 80013ba:	2240      	movs	r2, #64	@ 0x40
 80013bc:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013be:	4b69      	ldr	r3, [pc, #420]	@ (8001564 <HAL_TIM_PWM_MspInit+0x1e8>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80013c4:	4b67      	ldr	r3, [pc, #412]	@ (8001564 <HAL_TIM_PWM_MspInit+0x1e8>)
 80013c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013ca:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013cc:	4b65      	ldr	r3, [pc, #404]	@ (8001564 <HAL_TIM_PWM_MspInit+0x1e8>)
 80013ce:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80013d2:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013d4:	4b63      	ldr	r3, [pc, #396]	@ (8001564 <HAL_TIM_PWM_MspInit+0x1e8>)
 80013d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013da:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 80013dc:	4b61      	ldr	r3, [pc, #388]	@ (8001564 <HAL_TIM_PWM_MspInit+0x1e8>)
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80013e2:	4b60      	ldr	r3, [pc, #384]	@ (8001564 <HAL_TIM_PWM_MspInit+0x1e8>)
 80013e4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80013e8:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013ea:	4b5e      	ldr	r3, [pc, #376]	@ (8001564 <HAL_TIM_PWM_MspInit+0x1e8>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80013f0:	485c      	ldr	r0, [pc, #368]	@ (8001564 <HAL_TIM_PWM_MspInit+0x1e8>)
 80013f2:	f000 fd73 	bl	8001edc <HAL_DMA_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <HAL_TIM_PWM_MspInit+0x84>
    {
      Error_Handler();
 80013fc:	f7ff fdc2 	bl	8000f84 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a58      	ldr	r2, [pc, #352]	@ (8001564 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001404:	625a      	str	r2, [r3, #36]	@ 0x24
 8001406:	4a57      	ldr	r2, [pc, #348]	@ (8001564 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 800140c:	4b57      	ldr	r3, [pc, #348]	@ (800156c <HAL_TIM_PWM_MspInit+0x1f0>)
 800140e:	4a58      	ldr	r2, [pc, #352]	@ (8001570 <HAL_TIM_PWM_MspInit+0x1f4>)
 8001410:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 8001412:	4b56      	ldr	r3, [pc, #344]	@ (800156c <HAL_TIM_PWM_MspInit+0x1f0>)
 8001414:	2214      	movs	r2, #20
 8001416:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001418:	4b54      	ldr	r3, [pc, #336]	@ (800156c <HAL_TIM_PWM_MspInit+0x1f0>)
 800141a:	2240      	movs	r2, #64	@ 0x40
 800141c:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800141e:	4b53      	ldr	r3, [pc, #332]	@ (800156c <HAL_TIM_PWM_MspInit+0x1f0>)
 8001420:	2200      	movs	r2, #0
 8001422:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001424:	4b51      	ldr	r3, [pc, #324]	@ (800156c <HAL_TIM_PWM_MspInit+0x1f0>)
 8001426:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800142a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800142c:	4b4f      	ldr	r3, [pc, #316]	@ (800156c <HAL_TIM_PWM_MspInit+0x1f0>)
 800142e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001432:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001434:	4b4d      	ldr	r3, [pc, #308]	@ (800156c <HAL_TIM_PWM_MspInit+0x1f0>)
 8001436:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800143a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 800143c:	4b4b      	ldr	r3, [pc, #300]	@ (800156c <HAL_TIM_PWM_MspInit+0x1f0>)
 800143e:	2200      	movs	r2, #0
 8001440:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 8001442:	4b4a      	ldr	r3, [pc, #296]	@ (800156c <HAL_TIM_PWM_MspInit+0x1f0>)
 8001444:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001448:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800144a:	4b48      	ldr	r3, [pc, #288]	@ (800156c <HAL_TIM_PWM_MspInit+0x1f0>)
 800144c:	2200      	movs	r2, #0
 800144e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8001450:	4846      	ldr	r0, [pc, #280]	@ (800156c <HAL_TIM_PWM_MspInit+0x1f0>)
 8001452:	f000 fd43 	bl	8001edc <HAL_DMA_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <HAL_TIM_PWM_MspInit+0xe4>
    {
      Error_Handler();
 800145c:	f7ff fd92 	bl	8000f84 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a42      	ldr	r2, [pc, #264]	@ (800156c <HAL_TIM_PWM_MspInit+0x1f0>)
 8001464:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001466:	4a41      	ldr	r2, [pc, #260]	@ (800156c <HAL_TIM_PWM_MspInit+0x1f0>)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800146c:	e073      	b.n	8001556 <HAL_TIM_PWM_MspInit+0x1da>
  else if(tim_pwmHandle->Instance==TIM5)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a40      	ldr	r2, [pc, #256]	@ (8001574 <HAL_TIM_PWM_MspInit+0x1f8>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d16e      	bne.n	8001556 <HAL_TIM_PWM_MspInit+0x1da>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001478:	4b39      	ldr	r3, [pc, #228]	@ (8001560 <HAL_TIM_PWM_MspInit+0x1e4>)
 800147a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800147e:	4a38      	ldr	r2, [pc, #224]	@ (8001560 <HAL_TIM_PWM_MspInit+0x1e4>)
 8001480:	f043 0308 	orr.w	r3, r3, #8
 8001484:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001488:	4b35      	ldr	r3, [pc, #212]	@ (8001560 <HAL_TIM_PWM_MspInit+0x1e4>)
 800148a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800148e:	f003 0308 	and.w	r3, r3, #8
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 8001496:	4b38      	ldr	r3, [pc, #224]	@ (8001578 <HAL_TIM_PWM_MspInit+0x1fc>)
 8001498:	4a38      	ldr	r2, [pc, #224]	@ (800157c <HAL_TIM_PWM_MspInit+0x200>)
 800149a:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Request = DMA_REQUEST_TIM5_CH2;
 800149c:	4b36      	ldr	r3, [pc, #216]	@ (8001578 <HAL_TIM_PWM_MspInit+0x1fc>)
 800149e:	2238      	movs	r2, #56	@ 0x38
 80014a0:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014a2:	4b35      	ldr	r3, [pc, #212]	@ (8001578 <HAL_TIM_PWM_MspInit+0x1fc>)
 80014a4:	2240      	movs	r2, #64	@ 0x40
 80014a6:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80014a8:	4b33      	ldr	r3, [pc, #204]	@ (8001578 <HAL_TIM_PWM_MspInit+0x1fc>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80014ae:	4b32      	ldr	r3, [pc, #200]	@ (8001578 <HAL_TIM_PWM_MspInit+0x1fc>)
 80014b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014b4:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014b6:	4b30      	ldr	r3, [pc, #192]	@ (8001578 <HAL_TIM_PWM_MspInit+0x1fc>)
 80014b8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014bc:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014be:	4b2e      	ldr	r3, [pc, #184]	@ (8001578 <HAL_TIM_PWM_MspInit+0x1fc>)
 80014c0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014c4:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 80014c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001578 <HAL_TIM_PWM_MspInit+0x1fc>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 80014cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001578 <HAL_TIM_PWM_MspInit+0x1fc>)
 80014ce:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80014d2:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014d4:	4b28      	ldr	r3, [pc, #160]	@ (8001578 <HAL_TIM_PWM_MspInit+0x1fc>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 80014da:	4827      	ldr	r0, [pc, #156]	@ (8001578 <HAL_TIM_PWM_MspInit+0x1fc>)
 80014dc:	f000 fcfe 	bl	8001edc <HAL_DMA_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <HAL_TIM_PWM_MspInit+0x16e>
      Error_Handler();
 80014e6:	f7ff fd4d 	bl	8000f84 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a22      	ldr	r2, [pc, #136]	@ (8001578 <HAL_TIM_PWM_MspInit+0x1fc>)
 80014ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80014f0:	4a21      	ldr	r2, [pc, #132]	@ (8001578 <HAL_TIM_PWM_MspInit+0x1fc>)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim5_ch4.Instance = DMA1_Stream3;
 80014f6:	4b22      	ldr	r3, [pc, #136]	@ (8001580 <HAL_TIM_PWM_MspInit+0x204>)
 80014f8:	4a22      	ldr	r2, [pc, #136]	@ (8001584 <HAL_TIM_PWM_MspInit+0x208>)
 80014fa:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 80014fc:	4b20      	ldr	r3, [pc, #128]	@ (8001580 <HAL_TIM_PWM_MspInit+0x204>)
 80014fe:	223a      	movs	r2, #58	@ 0x3a
 8001500:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001502:	4b1f      	ldr	r3, [pc, #124]	@ (8001580 <HAL_TIM_PWM_MspInit+0x204>)
 8001504:	2240      	movs	r2, #64	@ 0x40
 8001506:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001508:	4b1d      	ldr	r3, [pc, #116]	@ (8001580 <HAL_TIM_PWM_MspInit+0x204>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 800150e:	4b1c      	ldr	r3, [pc, #112]	@ (8001580 <HAL_TIM_PWM_MspInit+0x204>)
 8001510:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001514:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001516:	4b1a      	ldr	r3, [pc, #104]	@ (8001580 <HAL_TIM_PWM_MspInit+0x204>)
 8001518:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800151c:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800151e:	4b18      	ldr	r3, [pc, #96]	@ (8001580 <HAL_TIM_PWM_MspInit+0x204>)
 8001520:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001524:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 8001526:	4b16      	ldr	r3, [pc, #88]	@ (8001580 <HAL_TIM_PWM_MspInit+0x204>)
 8001528:	2200      	movs	r2, #0
 800152a:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 800152c:	4b14      	ldr	r3, [pc, #80]	@ (8001580 <HAL_TIM_PWM_MspInit+0x204>)
 800152e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001532:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001534:	4b12      	ldr	r3, [pc, #72]	@ (8001580 <HAL_TIM_PWM_MspInit+0x204>)
 8001536:	2200      	movs	r2, #0
 8001538:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 800153a:	4811      	ldr	r0, [pc, #68]	@ (8001580 <HAL_TIM_PWM_MspInit+0x204>)
 800153c:	f000 fcce 	bl	8001edc <HAL_DMA_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_TIM_PWM_MspInit+0x1ce>
      Error_Handler();
 8001546:	f7ff fd1d 	bl	8000f84 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a0c      	ldr	r2, [pc, #48]	@ (8001580 <HAL_TIM_PWM_MspInit+0x204>)
 800154e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001550:	4a0b      	ldr	r2, [pc, #44]	@ (8001580 <HAL_TIM_PWM_MspInit+0x204>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001556:	bf00      	nop
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	58024400 	.word	0x58024400
 8001564:	240002b4 	.word	0x240002b4
 8001568:	40020088 	.word	0x40020088
 800156c:	2400032c 	.word	0x2400032c
 8001570:	40020028 	.word	0x40020028
 8001574:	40000c00 	.word	0x40000c00
 8001578:	240003a4 	.word	0x240003a4
 800157c:	40020070 	.word	0x40020070
 8001580:	2400041c 	.word	0x2400041c
 8001584:	40020058 	.word	0x40020058

08001588 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a0e      	ldr	r2, [pc, #56]	@ (80015d0 <HAL_TIM_Base_MspInit+0x48>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d116      	bne.n	80015c8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800159a:	4b0e      	ldr	r3, [pc, #56]	@ (80015d4 <HAL_TIM_Base_MspInit+0x4c>)
 800159c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015a0:	4a0c      	ldr	r2, [pc, #48]	@ (80015d4 <HAL_TIM_Base_MspInit+0x4c>)
 80015a2:	f043 0302 	orr.w	r3, r3, #2
 80015a6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80015aa:	4b0a      	ldr	r3, [pc, #40]	@ (80015d4 <HAL_TIM_Base_MspInit+0x4c>)
 80015ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2100      	movs	r1, #0
 80015bc:	201d      	movs	r0, #29
 80015be:	f000 fc44 	bl	8001e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015c2:	201d      	movs	r0, #29
 80015c4:	f000 fc5b 	bl	8001e7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80015c8:	bf00      	nop
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40000400 	.word	0x40000400
 80015d4:	58024400 	.word	0x58024400

080015d8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	@ 0x28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a1a      	ldr	r2, [pc, #104]	@ (8001660 <HAL_TIM_Encoder_MspInit+0x88>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d12e      	bne.n	8001658 <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80015fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001664 <HAL_TIM_Encoder_MspInit+0x8c>)
 80015fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001600:	4a18      	ldr	r2, [pc, #96]	@ (8001664 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001602:	f043 0304 	orr.w	r3, r3, #4
 8001606:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800160a:	4b16      	ldr	r3, [pc, #88]	@ (8001664 <HAL_TIM_Encoder_MspInit+0x8c>)
 800160c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001610:	f003 0304 	and.w	r3, r3, #4
 8001614:	613b      	str	r3, [r7, #16]
 8001616:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001618:	4b12      	ldr	r3, [pc, #72]	@ (8001664 <HAL_TIM_Encoder_MspInit+0x8c>)
 800161a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800161e:	4a11      	ldr	r2, [pc, #68]	@ (8001664 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001620:	f043 0308 	orr.w	r3, r3, #8
 8001624:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001628:	4b0e      	ldr	r3, [pc, #56]	@ (8001664 <HAL_TIM_Encoder_MspInit+0x8c>)
 800162a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800162e:	f003 0308 	and.w	r3, r3, #8
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001636:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800163a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163c:	2302      	movs	r3, #2
 800163e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001644:	2300      	movs	r3, #0
 8001646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001648:	2302      	movs	r3, #2
 800164a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	4619      	mov	r1, r3
 8001652:	4805      	ldr	r0, [pc, #20]	@ (8001668 <HAL_TIM_Encoder_MspInit+0x90>)
 8001654:	f002 fd8a 	bl	800416c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001658:	bf00      	nop
 800165a:	3728      	adds	r7, #40	@ 0x28
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40000800 	.word	0x40000800
 8001664:	58024400 	.word	0x58024400
 8001668:	58020c00 	.word	0x58020c00

0800166c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	@ 0x28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800168c:	d11f      	bne.n	80016ce <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168e:	4b24      	ldr	r3, [pc, #144]	@ (8001720 <HAL_TIM_MspPostInit+0xb4>)
 8001690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001694:	4a22      	ldr	r2, [pc, #136]	@ (8001720 <HAL_TIM_MspPostInit+0xb4>)
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800169e:	4b20      	ldr	r3, [pc, #128]	@ (8001720 <HAL_TIM_MspPostInit+0xb4>)
 80016a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80016ac:	2305      	movs	r3, #5
 80016ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b0:	2302      	movs	r3, #2
 80016b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2300      	movs	r3, #0
 80016ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016bc:	2301      	movs	r3, #1
 80016be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	4619      	mov	r1, r3
 80016c6:	4817      	ldr	r0, [pc, #92]	@ (8001724 <HAL_TIM_MspPostInit+0xb8>)
 80016c8:	f002 fd50 	bl	800416c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80016cc:	e023      	b.n	8001716 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM5)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a15      	ldr	r2, [pc, #84]	@ (8001728 <HAL_TIM_MspPostInit+0xbc>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d11e      	bne.n	8001716 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d8:	4b11      	ldr	r3, [pc, #68]	@ (8001720 <HAL_TIM_MspPostInit+0xb4>)
 80016da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016de:	4a10      	ldr	r2, [pc, #64]	@ (8001720 <HAL_TIM_MspPostInit+0xb4>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001720 <HAL_TIM_MspPostInit+0xb4>)
 80016ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80016f6:	230a      	movs	r3, #10
 80016f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	2302      	movs	r3, #2
 80016fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001702:	2300      	movs	r3, #0
 8001704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001706:	2302      	movs	r3, #2
 8001708:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	4619      	mov	r1, r3
 8001710:	4804      	ldr	r0, [pc, #16]	@ (8001724 <HAL_TIM_MspPostInit+0xb8>)
 8001712:	f002 fd2b 	bl	800416c <HAL_GPIO_Init>
}
 8001716:	bf00      	nop
 8001718:	3728      	adds	r7, #40	@ 0x28
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	58024400 	.word	0x58024400
 8001724:	58020000 	.word	0x58020000
 8001728:	40000c00 	.word	0x40000c00

0800172c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800172c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001764 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001730:	f7fe ff4a 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001734:	480c      	ldr	r0, [pc, #48]	@ (8001768 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001736:	490d      	ldr	r1, [pc, #52]	@ (800176c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001738:	4a0d      	ldr	r2, [pc, #52]	@ (8001770 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800173c:	e002      	b.n	8001744 <LoopCopyDataInit>

0800173e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800173e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001742:	3304      	adds	r3, #4

08001744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001748:	d3f9      	bcc.n	800173e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800174a:	4a0a      	ldr	r2, [pc, #40]	@ (8001774 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800174c:	4c0a      	ldr	r4, [pc, #40]	@ (8001778 <LoopFillZerobss+0x22>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001750:	e001      	b.n	8001756 <LoopFillZerobss>

08001752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001754:	3204      	adds	r2, #4

08001756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001758:	d3fb      	bcc.n	8001752 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800175a:	f006 fdb3 	bl	80082c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800175e:	f7ff fad7 	bl	8000d10 <main>
  bx  lr
 8001762:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001764:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001768:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800176c:	2400002c 	.word	0x2400002c
  ldr r2, =_sidata
 8001770:	080083f8 	.word	0x080083f8
  ldr r2, =_sbss
 8001774:	2400002c 	.word	0x2400002c
  ldr r4, =_ebss
 8001778:	24000534 	.word	0x24000534

0800177c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800177c:	e7fe      	b.n	800177c <ADC3_IRQHandler>
	...

08001780 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08c      	sub	sp, #48	@ 0x30
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800178a:	2300      	movs	r3, #0
 800178c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d009      	beq.n	80017a8 <BSP_LED_Init+0x28>
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d006      	beq.n	80017a8 <BSP_LED_Init+0x28>
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	2b02      	cmp	r3, #2
 800179e:	d003      	beq.n	80017a8 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80017a0:	f06f 0301 	mvn.w	r3, #1
 80017a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017a6:	e055      	b.n	8001854 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d10f      	bne.n	80017ce <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80017ae:	4b2c      	ldr	r3, [pc, #176]	@ (8001860 <BSP_LED_Init+0xe0>)
 80017b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017b4:	4a2a      	ldr	r2, [pc, #168]	@ (8001860 <BSP_LED_Init+0xe0>)
 80017b6:	f043 0302 	orr.w	r3, r3, #2
 80017ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017be:	4b28      	ldr	r3, [pc, #160]	@ (8001860 <BSP_LED_Init+0xe0>)
 80017c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	617b      	str	r3, [r7, #20]
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	e021      	b.n	8001812 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d10f      	bne.n	80017f4 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80017d4:	4b22      	ldr	r3, [pc, #136]	@ (8001860 <BSP_LED_Init+0xe0>)
 80017d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017da:	4a21      	ldr	r2, [pc, #132]	@ (8001860 <BSP_LED_Init+0xe0>)
 80017dc:	f043 0310 	orr.w	r3, r3, #16
 80017e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001860 <BSP_LED_Init+0xe0>)
 80017e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ea:	f003 0310 	and.w	r3, r3, #16
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	e00e      	b.n	8001812 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80017f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001860 <BSP_LED_Init+0xe0>)
 80017f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017fa:	4a19      	ldr	r2, [pc, #100]	@ (8001860 <BSP_LED_Init+0xe0>)
 80017fc:	f043 0302 	orr.w	r3, r3, #2
 8001800:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001804:	4b16      	ldr	r3, [pc, #88]	@ (8001860 <BSP_LED_Init+0xe0>)
 8001806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	4a13      	ldr	r2, [pc, #76]	@ (8001864 <BSP_LED_Init+0xe4>)
 8001816:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800181a:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800181c:	2301      	movs	r3, #1
 800181e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001824:	2303      	movs	r3, #3
 8001826:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	4a0f      	ldr	r2, [pc, #60]	@ (8001868 <BSP_LED_Init+0xe8>)
 800182c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001830:	f107 0218 	add.w	r2, r7, #24
 8001834:	4611      	mov	r1, r2
 8001836:	4618      	mov	r0, r3
 8001838:	f002 fc98 	bl	800416c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	4a0a      	ldr	r2, [pc, #40]	@ (8001868 <BSP_LED_Init+0xe8>)
 8001840:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	4a07      	ldr	r2, [pc, #28]	@ (8001864 <BSP_LED_Init+0xe4>)
 8001848:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800184c:	2200      	movs	r2, #0
 800184e:	4619      	mov	r1, r3
 8001850:	f002 fe3c 	bl	80044cc <HAL_GPIO_WritePin>
  }

  return ret;
 8001854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001856:	4618      	mov	r0, r3
 8001858:	3730      	adds	r7, #48	@ 0x30
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	58024400 	.word	0x58024400
 8001864:	080083b4 	.word	0x080083b4
 8001868:	2400000c 	.word	0x2400000c

0800186c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b088      	sub	sp, #32
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	460a      	mov	r2, r1
 8001876:	71fb      	strb	r3, [r7, #7]
 8001878:	4613      	mov	r3, r2
 800187a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 800187c:	4b2e      	ldr	r3, [pc, #184]	@ (8001938 <BSP_PB_Init+0xcc>)
 800187e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001882:	4a2d      	ldr	r2, [pc, #180]	@ (8001938 <BSP_PB_Init+0xcc>)
 8001884:	f043 0304 	orr.w	r3, r3, #4
 8001888:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800188c:	4b2a      	ldr	r3, [pc, #168]	@ (8001938 <BSP_PB_Init+0xcc>)
 800188e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001892:	f003 0304 	and.w	r3, r3, #4
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800189a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800189e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80018a0:	2302      	movs	r3, #2
 80018a2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80018a4:	2302      	movs	r3, #2
 80018a6:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80018a8:	79bb      	ldrb	r3, [r7, #6]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10c      	bne.n	80018c8 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	4a21      	ldr	r2, [pc, #132]	@ (800193c <BSP_PB_Init+0xd0>)
 80018b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ba:	f107 020c 	add.w	r2, r7, #12
 80018be:	4611      	mov	r1, r2
 80018c0:	4618      	mov	r0, r3
 80018c2:	f002 fc53 	bl	800416c <HAL_GPIO_Init>
 80018c6:	e031      	b.n	800192c <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80018c8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018cc:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	4a1a      	ldr	r2, [pc, #104]	@ (800193c <BSP_PB_Init+0xd0>)
 80018d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d6:	f107 020c 	add.w	r2, r7, #12
 80018da:	4611      	mov	r1, r2
 80018dc:	4618      	mov	r0, r3
 80018de:	f002 fc45 	bl	800416c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	4a16      	ldr	r2, [pc, #88]	@ (8001940 <BSP_PB_Init+0xd4>)
 80018e8:	441a      	add	r2, r3
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	4915      	ldr	r1, [pc, #84]	@ (8001944 <BSP_PB_Init+0xd8>)
 80018ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018f2:	4619      	mov	r1, r3
 80018f4:	4610      	mov	r0, r2
 80018f6:	f002 fbe8 	bl	80040ca <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	4a10      	ldr	r2, [pc, #64]	@ (8001940 <BSP_PB_Init+0xd4>)
 8001900:	1898      	adds	r0, r3, r2
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	4a10      	ldr	r2, [pc, #64]	@ (8001948 <BSP_PB_Init+0xdc>)
 8001906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190a:	461a      	mov	r2, r3
 800190c:	2100      	movs	r1, #0
 800190e:	f002 fbbd 	bl	800408c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001912:	2028      	movs	r0, #40	@ 0x28
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	4a0d      	ldr	r2, [pc, #52]	@ (800194c <BSP_PB_Init+0xe0>)
 8001918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800191c:	2200      	movs	r2, #0
 800191e:	4619      	mov	r1, r3
 8001920:	f000 fa93 	bl	8001e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001924:	2328      	movs	r3, #40	@ 0x28
 8001926:	4618      	mov	r0, r3
 8001928:	f000 faa9 	bl	8001e7e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3720      	adds	r7, #32
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	58024400 	.word	0x58024400
 800193c:	24000018 	.word	0x24000018
 8001940:	24000494 	.word	0x24000494
 8001944:	080083bc 	.word	0x080083bc
 8001948:	2400001c 	.word	0x2400001c
 800194c:	24000020 	.word	0x24000020

08001950 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	4a04      	ldr	r2, [pc, #16]	@ (8001970 <BSP_PB_IRQHandler+0x20>)
 8001960:	4413      	add	r3, r2
 8001962:	4618      	mov	r0, r3
 8001964:	f002 fbc6 	bl	80040f4 <HAL_EXTI_IRQHandler>
}
 8001968:	bf00      	nop
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	24000494 	.word	0x24000494

08001974 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
	...

0800198c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	6039      	str	r1, [r7, #0]
 8001996:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001998:	2300      	movs	r3, #0
 800199a:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80019a2:	f06f 0301 	mvn.w	r3, #1
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	e018      	b.n	80019dc <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	2294      	movs	r2, #148	@ 0x94
 80019ae:	fb02 f303 	mul.w	r3, r2, r3
 80019b2:	4a0d      	ldr	r2, [pc, #52]	@ (80019e8 <BSP_COM_Init+0x5c>)
 80019b4:	4413      	add	r3, r2
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 f852 	bl	8001a60 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	2294      	movs	r2, #148	@ 0x94
 80019c0:	fb02 f303 	mul.w	r3, r2, r3
 80019c4:	4a08      	ldr	r2, [pc, #32]	@ (80019e8 <BSP_COM_Init+0x5c>)
 80019c6:	4413      	add	r3, r2
 80019c8:	6839      	ldr	r1, [r7, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 f80e 	bl	80019ec <MX_USART3_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d002      	beq.n	80019dc <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80019d6:	f06f 0303 	mvn.w	r3, #3
 80019da:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80019dc:	68fb      	ldr	r3, [r7, #12]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	2400049c 	.word	0x2400049c

080019ec <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80019f6:	4b15      	ldr	r3, [pc, #84]	@ (8001a4c <MX_USART3_Init+0x60>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	220c      	movs	r2, #12
 8001a0a:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	895b      	ldrh	r3, [r3, #10]
 8001a10:	461a      	mov	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	891b      	ldrh	r3, [r3, #8]
 8001a22:	461a      	mov	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	899b      	ldrh	r3, [r3, #12]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a38:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f005 fc58 	bl	80072f0 <HAL_UART_Init>
 8001a40:	4603      	mov	r3, r0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	24000008 	.word	0x24000008

08001a50 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001a54:	2000      	movs	r0, #0
 8001a56:	f7ff ff8d 	bl	8001974 <BSP_PB_Callback>
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08a      	sub	sp, #40	@ 0x28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001a68:	4b27      	ldr	r3, [pc, #156]	@ (8001b08 <COM1_MspInit+0xa8>)
 8001a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a6e:	4a26      	ldr	r2, [pc, #152]	@ (8001b08 <COM1_MspInit+0xa8>)
 8001a70:	f043 0308 	orr.w	r3, r3, #8
 8001a74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a78:	4b23      	ldr	r3, [pc, #140]	@ (8001b08 <COM1_MspInit+0xa8>)
 8001a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	613b      	str	r3, [r7, #16]
 8001a84:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001a86:	4b20      	ldr	r3, [pc, #128]	@ (8001b08 <COM1_MspInit+0xa8>)
 8001a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a8c:	4a1e      	ldr	r2, [pc, #120]	@ (8001b08 <COM1_MspInit+0xa8>)
 8001a8e:	f043 0308 	orr.w	r3, r3, #8
 8001a92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a96:	4b1c      	ldr	r3, [pc, #112]	@ (8001b08 <COM1_MspInit+0xa8>)
 8001a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a9c:	f003 0308 	and.w	r3, r3, #8
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001aa4:	4b18      	ldr	r3, [pc, #96]	@ (8001b08 <COM1_MspInit+0xa8>)
 8001aa6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001aaa:	4a17      	ldr	r2, [pc, #92]	@ (8001b08 <COM1_MspInit+0xa8>)
 8001aac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ab0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ab4:	4b14      	ldr	r3, [pc, #80]	@ (8001b08 <COM1_MspInit+0xa8>)
 8001ab6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001aba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8001ac2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ac6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001acc:	2302      	movs	r3, #2
 8001ace:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001ad4:	2307      	movs	r3, #7
 8001ad6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001ad8:	f107 0314 	add.w	r3, r7, #20
 8001adc:	4619      	mov	r1, r3
 8001ade:	480b      	ldr	r0, [pc, #44]	@ (8001b0c <COM1_MspInit+0xac>)
 8001ae0:	f002 fb44 	bl	800416c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001ae4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ae8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001aea:	2302      	movs	r3, #2
 8001aec:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001aee:	2307      	movs	r3, #7
 8001af0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001af2:	f107 0314 	add.w	r3, r7, #20
 8001af6:	4619      	mov	r1, r3
 8001af8:	4804      	ldr	r0, [pc, #16]	@ (8001b0c <COM1_MspInit+0xac>)
 8001afa:	f002 fb37 	bl	800416c <HAL_GPIO_Init>
}
 8001afe:	bf00      	nop
 8001b00:	3728      	adds	r7, #40	@ 0x28
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	58024400 	.word	0x58024400
 8001b0c:	58020c00 	.word	0x58020c00

08001b10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b16:	2003      	movs	r0, #3
 8001b18:	f000 f98c 	bl	8001e34 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b1c:	f003 fba2 	bl	8005264 <HAL_RCC_GetSysClockFreq>
 8001b20:	4602      	mov	r2, r0
 8001b22:	4b15      	ldr	r3, [pc, #84]	@ (8001b78 <HAL_Init+0x68>)
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	0a1b      	lsrs	r3, r3, #8
 8001b28:	f003 030f 	and.w	r3, r3, #15
 8001b2c:	4913      	ldr	r1, [pc, #76]	@ (8001b7c <HAL_Init+0x6c>)
 8001b2e:	5ccb      	ldrb	r3, [r1, r3]
 8001b30:	f003 031f 	and.w	r3, r3, #31
 8001b34:	fa22 f303 	lsr.w	r3, r2, r3
 8001b38:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b78 <HAL_Init+0x68>)
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	f003 030f 	and.w	r3, r3, #15
 8001b42:	4a0e      	ldr	r2, [pc, #56]	@ (8001b7c <HAL_Init+0x6c>)
 8001b44:	5cd3      	ldrb	r3, [r2, r3]
 8001b46:	f003 031f 	and.w	r3, r3, #31
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b50:	4a0b      	ldr	r2, [pc, #44]	@ (8001b80 <HAL_Init+0x70>)
 8001b52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b54:	4a0b      	ldr	r2, [pc, #44]	@ (8001b84 <HAL_Init+0x74>)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	f000 f814 	bl	8001b88 <HAL_InitTick>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e002      	b.n	8001b70 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b6a:	f7ff fa11 	bl	8000f90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	58024400 	.word	0x58024400
 8001b7c:	080083a4 	.word	0x080083a4
 8001b80:	24000004 	.word	0x24000004
 8001b84:	24000000 	.word	0x24000000

08001b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b90:	4b15      	ldr	r3, [pc, #84]	@ (8001be8 <HAL_InitTick+0x60>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e021      	b.n	8001be0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b9c:	4b13      	ldr	r3, [pc, #76]	@ (8001bec <HAL_InitTick+0x64>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	4b11      	ldr	r3, [pc, #68]	@ (8001be8 <HAL_InitTick+0x60>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001baa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f000 f971 	bl	8001e9a <HAL_SYSTICK_Config>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e00e      	b.n	8001be0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b0f      	cmp	r3, #15
 8001bc6:	d80a      	bhi.n	8001bde <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd0:	f000 f93b 	bl	8001e4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bd4:	4a06      	ldr	r2, [pc, #24]	@ (8001bf0 <HAL_InitTick+0x68>)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	e000      	b.n	8001be0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	24000028 	.word	0x24000028
 8001bec:	24000000 	.word	0x24000000
 8001bf0:	24000024 	.word	0x24000024

08001bf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	@ (8001c14 <HAL_IncTick+0x20>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4b06      	ldr	r3, [pc, #24]	@ (8001c18 <HAL_IncTick+0x24>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4413      	add	r3, r2
 8001c04:	4a04      	ldr	r2, [pc, #16]	@ (8001c18 <HAL_IncTick+0x24>)
 8001c06:	6013      	str	r3, [r2, #0]
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	24000028 	.word	0x24000028
 8001c18:	24000530 	.word	0x24000530

08001c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c20:	4b03      	ldr	r3, [pc, #12]	@ (8001c30 <HAL_GetTick+0x14>)
 8001c22:	681b      	ldr	r3, [r3, #0]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	24000530 	.word	0x24000530

08001c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c3c:	f7ff ffee 	bl	8001c1c <HAL_GetTick>
 8001c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c4c:	d005      	beq.n	8001c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c78 <HAL_Delay+0x44>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	461a      	mov	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4413      	add	r3, r2
 8001c58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c5a:	bf00      	nop
 8001c5c:	f7ff ffde 	bl	8001c1c <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d8f7      	bhi.n	8001c5c <HAL_Delay+0x28>
  {
  }
}
 8001c6c:	bf00      	nop
 8001c6e:	bf00      	nop
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	24000028 	.word	0x24000028

08001c7c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001c80:	4b03      	ldr	r3, [pc, #12]	@ (8001c90 <HAL_GetREVID+0x14>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	0c1b      	lsrs	r3, r3, #16
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	5c001000 	.word	0x5c001000

08001c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd4 <__NVIC_SetPriorityGrouping+0x40>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cbc:	4b06      	ldr	r3, [pc, #24]	@ (8001cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cc2:	4a04      	ldr	r2, [pc, #16]	@ (8001cd4 <__NVIC_SetPriorityGrouping+0x40>)
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	60d3      	str	r3, [r2, #12]
}
 8001cc8:	bf00      	nop
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	e000ed00 	.word	0xe000ed00
 8001cd8:	05fa0000 	.word	0x05fa0000

08001cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce0:	4b04      	ldr	r3, [pc, #16]	@ (8001cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	0a1b      	lsrs	r3, r3, #8
 8001ce6:	f003 0307 	and.w	r3, r3, #7
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	db0b      	blt.n	8001d22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d0a:	88fb      	ldrh	r3, [r7, #6]
 8001d0c:	f003 021f 	and.w	r2, r3, #31
 8001d10:	4907      	ldr	r1, [pc, #28]	@ (8001d30 <__NVIC_EnableIRQ+0x38>)
 8001d12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d16:	095b      	lsrs	r3, r3, #5
 8001d18:	2001      	movs	r0, #1
 8001d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	e000e100 	.word	0xe000e100

08001d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	6039      	str	r1, [r7, #0]
 8001d3e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	db0a      	blt.n	8001d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	490c      	ldr	r1, [pc, #48]	@ (8001d80 <__NVIC_SetPriority+0x4c>)
 8001d4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d52:	0112      	lsls	r2, r2, #4
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	440b      	add	r3, r1
 8001d58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d5c:	e00a      	b.n	8001d74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	4908      	ldr	r1, [pc, #32]	@ (8001d84 <__NVIC_SetPriority+0x50>)
 8001d64:	88fb      	ldrh	r3, [r7, #6]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	3b04      	subs	r3, #4
 8001d6c:	0112      	lsls	r2, r2, #4
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	440b      	add	r3, r1
 8001d72:	761a      	strb	r2, [r3, #24]
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000e100 	.word	0xe000e100
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b089      	sub	sp, #36	@ 0x24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f1c3 0307 	rsb	r3, r3, #7
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	bf28      	it	cs
 8001da6:	2304      	movcs	r3, #4
 8001da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	3304      	adds	r3, #4
 8001dae:	2b06      	cmp	r3, #6
 8001db0:	d902      	bls.n	8001db8 <NVIC_EncodePriority+0x30>
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3b03      	subs	r3, #3
 8001db6:	e000      	b.n	8001dba <NVIC_EncodePriority+0x32>
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43da      	mvns	r2, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	401a      	ands	r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dda:	43d9      	mvns	r1, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de0:	4313      	orrs	r3, r2
         );
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3724      	adds	r7, #36	@ 0x24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e00:	d301      	bcc.n	8001e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e02:	2301      	movs	r3, #1
 8001e04:	e00f      	b.n	8001e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e06:	4a0a      	ldr	r2, [pc, #40]	@ (8001e30 <SysTick_Config+0x40>)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e0e:	210f      	movs	r1, #15
 8001e10:	f04f 30ff 	mov.w	r0, #4294967295
 8001e14:	f7ff ff8e 	bl	8001d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e18:	4b05      	ldr	r3, [pc, #20]	@ (8001e30 <SysTick_Config+0x40>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e1e:	4b04      	ldr	r3, [pc, #16]	@ (8001e30 <SysTick_Config+0x40>)
 8001e20:	2207      	movs	r2, #7
 8001e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	e000e010 	.word	0xe000e010

08001e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff ff29 	bl	8001c94 <__NVIC_SetPriorityGrouping>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b086      	sub	sp, #24
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	4603      	mov	r3, r0
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	607a      	str	r2, [r7, #4]
 8001e56:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e58:	f7ff ff40 	bl	8001cdc <__NVIC_GetPriorityGrouping>
 8001e5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	68b9      	ldr	r1, [r7, #8]
 8001e62:	6978      	ldr	r0, [r7, #20]
 8001e64:	f7ff ff90 	bl	8001d88 <NVIC_EncodePriority>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e6e:	4611      	mov	r1, r2
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff ff5f 	bl	8001d34 <__NVIC_SetPriority>
}
 8001e76:	bf00      	nop
 8001e78:	3718      	adds	r7, #24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	4603      	mov	r3, r0
 8001e86:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff ff33 	bl	8001cf8 <__NVIC_EnableIRQ>
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7ff ffa4 	bl	8001df0 <SysTick_Config>
 8001ea8:	4603      	mov	r3, r0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
	...

08001eb4 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001eb8:	4b07      	ldr	r3, [pc, #28]	@ (8001ed8 <HAL_GetCurrentCPUID+0x24>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	091b      	lsrs	r3, r3, #4
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	2b07      	cmp	r3, #7
 8001ec4:	d101      	bne.n	8001eca <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e000      	b.n	8001ecc <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8001eca:	2301      	movs	r3, #1
  }
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001ee4:	f7ff fe9a 	bl	8001c1c <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e316      	b.n	8002522 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a66      	ldr	r2, [pc, #408]	@ (8002094 <HAL_DMA_Init+0x1b8>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d04a      	beq.n	8001f94 <HAL_DMA_Init+0xb8>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a65      	ldr	r2, [pc, #404]	@ (8002098 <HAL_DMA_Init+0x1bc>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d045      	beq.n	8001f94 <HAL_DMA_Init+0xb8>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a63      	ldr	r2, [pc, #396]	@ (800209c <HAL_DMA_Init+0x1c0>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d040      	beq.n	8001f94 <HAL_DMA_Init+0xb8>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a62      	ldr	r2, [pc, #392]	@ (80020a0 <HAL_DMA_Init+0x1c4>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d03b      	beq.n	8001f94 <HAL_DMA_Init+0xb8>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a60      	ldr	r2, [pc, #384]	@ (80020a4 <HAL_DMA_Init+0x1c8>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d036      	beq.n	8001f94 <HAL_DMA_Init+0xb8>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a5f      	ldr	r2, [pc, #380]	@ (80020a8 <HAL_DMA_Init+0x1cc>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d031      	beq.n	8001f94 <HAL_DMA_Init+0xb8>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a5d      	ldr	r2, [pc, #372]	@ (80020ac <HAL_DMA_Init+0x1d0>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d02c      	beq.n	8001f94 <HAL_DMA_Init+0xb8>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a5c      	ldr	r2, [pc, #368]	@ (80020b0 <HAL_DMA_Init+0x1d4>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d027      	beq.n	8001f94 <HAL_DMA_Init+0xb8>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a5a      	ldr	r2, [pc, #360]	@ (80020b4 <HAL_DMA_Init+0x1d8>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d022      	beq.n	8001f94 <HAL_DMA_Init+0xb8>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a59      	ldr	r2, [pc, #356]	@ (80020b8 <HAL_DMA_Init+0x1dc>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d01d      	beq.n	8001f94 <HAL_DMA_Init+0xb8>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a57      	ldr	r2, [pc, #348]	@ (80020bc <HAL_DMA_Init+0x1e0>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d018      	beq.n	8001f94 <HAL_DMA_Init+0xb8>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a56      	ldr	r2, [pc, #344]	@ (80020c0 <HAL_DMA_Init+0x1e4>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d013      	beq.n	8001f94 <HAL_DMA_Init+0xb8>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a54      	ldr	r2, [pc, #336]	@ (80020c4 <HAL_DMA_Init+0x1e8>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d00e      	beq.n	8001f94 <HAL_DMA_Init+0xb8>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a53      	ldr	r2, [pc, #332]	@ (80020c8 <HAL_DMA_Init+0x1ec>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d009      	beq.n	8001f94 <HAL_DMA_Init+0xb8>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a51      	ldr	r2, [pc, #324]	@ (80020cc <HAL_DMA_Init+0x1f0>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d004      	beq.n	8001f94 <HAL_DMA_Init+0xb8>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a50      	ldr	r2, [pc, #320]	@ (80020d0 <HAL_DMA_Init+0x1f4>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d101      	bne.n	8001f98 <HAL_DMA_Init+0xbc>
 8001f94:	2301      	movs	r3, #1
 8001f96:	e000      	b.n	8001f9a <HAL_DMA_Init+0xbe>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 813b 	beq.w	8002216 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a37      	ldr	r2, [pc, #220]	@ (8002094 <HAL_DMA_Init+0x1b8>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d04a      	beq.n	8002050 <HAL_DMA_Init+0x174>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a36      	ldr	r2, [pc, #216]	@ (8002098 <HAL_DMA_Init+0x1bc>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d045      	beq.n	8002050 <HAL_DMA_Init+0x174>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a34      	ldr	r2, [pc, #208]	@ (800209c <HAL_DMA_Init+0x1c0>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d040      	beq.n	8002050 <HAL_DMA_Init+0x174>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a33      	ldr	r2, [pc, #204]	@ (80020a0 <HAL_DMA_Init+0x1c4>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d03b      	beq.n	8002050 <HAL_DMA_Init+0x174>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a31      	ldr	r2, [pc, #196]	@ (80020a4 <HAL_DMA_Init+0x1c8>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d036      	beq.n	8002050 <HAL_DMA_Init+0x174>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a30      	ldr	r2, [pc, #192]	@ (80020a8 <HAL_DMA_Init+0x1cc>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d031      	beq.n	8002050 <HAL_DMA_Init+0x174>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a2e      	ldr	r2, [pc, #184]	@ (80020ac <HAL_DMA_Init+0x1d0>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d02c      	beq.n	8002050 <HAL_DMA_Init+0x174>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a2d      	ldr	r2, [pc, #180]	@ (80020b0 <HAL_DMA_Init+0x1d4>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d027      	beq.n	8002050 <HAL_DMA_Init+0x174>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a2b      	ldr	r2, [pc, #172]	@ (80020b4 <HAL_DMA_Init+0x1d8>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d022      	beq.n	8002050 <HAL_DMA_Init+0x174>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a2a      	ldr	r2, [pc, #168]	@ (80020b8 <HAL_DMA_Init+0x1dc>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d01d      	beq.n	8002050 <HAL_DMA_Init+0x174>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a28      	ldr	r2, [pc, #160]	@ (80020bc <HAL_DMA_Init+0x1e0>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d018      	beq.n	8002050 <HAL_DMA_Init+0x174>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a27      	ldr	r2, [pc, #156]	@ (80020c0 <HAL_DMA_Init+0x1e4>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d013      	beq.n	8002050 <HAL_DMA_Init+0x174>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a25      	ldr	r2, [pc, #148]	@ (80020c4 <HAL_DMA_Init+0x1e8>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d00e      	beq.n	8002050 <HAL_DMA_Init+0x174>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a24      	ldr	r2, [pc, #144]	@ (80020c8 <HAL_DMA_Init+0x1ec>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d009      	beq.n	8002050 <HAL_DMA_Init+0x174>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a22      	ldr	r2, [pc, #136]	@ (80020cc <HAL_DMA_Init+0x1f0>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d004      	beq.n	8002050 <HAL_DMA_Init+0x174>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a21      	ldr	r2, [pc, #132]	@ (80020d0 <HAL_DMA_Init+0x1f4>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d108      	bne.n	8002062 <HAL_DMA_Init+0x186>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0201 	bic.w	r2, r2, #1
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	e007      	b.n	8002072 <HAL_DMA_Init+0x196>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 0201 	bic.w	r2, r2, #1
 8002070:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002072:	e02f      	b.n	80020d4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002074:	f7ff fdd2 	bl	8001c1c <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b05      	cmp	r3, #5
 8002080:	d928      	bls.n	80020d4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2220      	movs	r2, #32
 8002086:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2203      	movs	r2, #3
 800208c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e246      	b.n	8002522 <HAL_DMA_Init+0x646>
 8002094:	40020010 	.word	0x40020010
 8002098:	40020028 	.word	0x40020028
 800209c:	40020040 	.word	0x40020040
 80020a0:	40020058 	.word	0x40020058
 80020a4:	40020070 	.word	0x40020070
 80020a8:	40020088 	.word	0x40020088
 80020ac:	400200a0 	.word	0x400200a0
 80020b0:	400200b8 	.word	0x400200b8
 80020b4:	40020410 	.word	0x40020410
 80020b8:	40020428 	.word	0x40020428
 80020bc:	40020440 	.word	0x40020440
 80020c0:	40020458 	.word	0x40020458
 80020c4:	40020470 	.word	0x40020470
 80020c8:	40020488 	.word	0x40020488
 80020cc:	400204a0 	.word	0x400204a0
 80020d0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1c8      	bne.n	8002074 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	4b83      	ldr	r3, [pc, #524]	@ (80022fc <HAL_DMA_Init+0x420>)
 80020ee:	4013      	ands	r3, r2
 80020f0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80020fa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002106:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002112:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	4313      	orrs	r3, r2
 800211e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002124:	2b04      	cmp	r3, #4
 8002126:	d107      	bne.n	8002138 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002130:	4313      	orrs	r3, r2
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	4313      	orrs	r3, r2
 8002136:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002138:	4b71      	ldr	r3, [pc, #452]	@ (8002300 <HAL_DMA_Init+0x424>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	4b71      	ldr	r3, [pc, #452]	@ (8002304 <HAL_DMA_Init+0x428>)
 800213e:	4013      	ands	r3, r2
 8002140:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002144:	d328      	bcc.n	8002198 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b28      	cmp	r3, #40	@ 0x28
 800214c:	d903      	bls.n	8002156 <HAL_DMA_Init+0x27a>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b2e      	cmp	r3, #46	@ 0x2e
 8002154:	d917      	bls.n	8002186 <HAL_DMA_Init+0x2aa>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b3e      	cmp	r3, #62	@ 0x3e
 800215c:	d903      	bls.n	8002166 <HAL_DMA_Init+0x28a>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b42      	cmp	r3, #66	@ 0x42
 8002164:	d90f      	bls.n	8002186 <HAL_DMA_Init+0x2aa>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b46      	cmp	r3, #70	@ 0x46
 800216c:	d903      	bls.n	8002176 <HAL_DMA_Init+0x29a>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b48      	cmp	r3, #72	@ 0x48
 8002174:	d907      	bls.n	8002186 <HAL_DMA_Init+0x2aa>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b4e      	cmp	r3, #78	@ 0x4e
 800217c:	d905      	bls.n	800218a <HAL_DMA_Init+0x2ae>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b52      	cmp	r3, #82	@ 0x52
 8002184:	d801      	bhi.n	800218a <HAL_DMA_Init+0x2ae>
 8002186:	2301      	movs	r3, #1
 8002188:	e000      	b.n	800218c <HAL_DMA_Init+0x2b0>
 800218a:	2300      	movs	r3, #0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002196:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f023 0307 	bic.w	r3, r3, #7
 80021ae:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021be:	2b04      	cmp	r3, #4
 80021c0:	d117      	bne.n	80021f2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00e      	beq.n	80021f2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f001 fdcf 	bl	8003d78 <DMA_CheckFifoParam>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d008      	beq.n	80021f2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2240      	movs	r2, #64	@ 0x40
 80021e4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e197      	b.n	8002522 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f001 fd0a 	bl	8003c14 <DMA_CalcBaseAndBitshift>
 8002200:	4603      	mov	r3, r0
 8002202:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002208:	f003 031f 	and.w	r3, r3, #31
 800220c:	223f      	movs	r2, #63	@ 0x3f
 800220e:	409a      	lsls	r2, r3
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	e0cd      	b.n	80023b2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a3b      	ldr	r2, [pc, #236]	@ (8002308 <HAL_DMA_Init+0x42c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d022      	beq.n	8002266 <HAL_DMA_Init+0x38a>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a39      	ldr	r2, [pc, #228]	@ (800230c <HAL_DMA_Init+0x430>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d01d      	beq.n	8002266 <HAL_DMA_Init+0x38a>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a38      	ldr	r2, [pc, #224]	@ (8002310 <HAL_DMA_Init+0x434>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d018      	beq.n	8002266 <HAL_DMA_Init+0x38a>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a36      	ldr	r2, [pc, #216]	@ (8002314 <HAL_DMA_Init+0x438>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d013      	beq.n	8002266 <HAL_DMA_Init+0x38a>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a35      	ldr	r2, [pc, #212]	@ (8002318 <HAL_DMA_Init+0x43c>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d00e      	beq.n	8002266 <HAL_DMA_Init+0x38a>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a33      	ldr	r2, [pc, #204]	@ (800231c <HAL_DMA_Init+0x440>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d009      	beq.n	8002266 <HAL_DMA_Init+0x38a>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a32      	ldr	r2, [pc, #200]	@ (8002320 <HAL_DMA_Init+0x444>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d004      	beq.n	8002266 <HAL_DMA_Init+0x38a>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a30      	ldr	r2, [pc, #192]	@ (8002324 <HAL_DMA_Init+0x448>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d101      	bne.n	800226a <HAL_DMA_Init+0x38e>
 8002266:	2301      	movs	r3, #1
 8002268:	e000      	b.n	800226c <HAL_DMA_Init+0x390>
 800226a:	2300      	movs	r3, #0
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 8097 	beq.w	80023a0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a24      	ldr	r2, [pc, #144]	@ (8002308 <HAL_DMA_Init+0x42c>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d021      	beq.n	80022c0 <HAL_DMA_Init+0x3e4>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a22      	ldr	r2, [pc, #136]	@ (800230c <HAL_DMA_Init+0x430>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d01c      	beq.n	80022c0 <HAL_DMA_Init+0x3e4>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a21      	ldr	r2, [pc, #132]	@ (8002310 <HAL_DMA_Init+0x434>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d017      	beq.n	80022c0 <HAL_DMA_Init+0x3e4>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a1f      	ldr	r2, [pc, #124]	@ (8002314 <HAL_DMA_Init+0x438>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d012      	beq.n	80022c0 <HAL_DMA_Init+0x3e4>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a1e      	ldr	r2, [pc, #120]	@ (8002318 <HAL_DMA_Init+0x43c>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d00d      	beq.n	80022c0 <HAL_DMA_Init+0x3e4>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a1c      	ldr	r2, [pc, #112]	@ (800231c <HAL_DMA_Init+0x440>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d008      	beq.n	80022c0 <HAL_DMA_Init+0x3e4>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a1b      	ldr	r2, [pc, #108]	@ (8002320 <HAL_DMA_Init+0x444>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d003      	beq.n	80022c0 <HAL_DMA_Init+0x3e4>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a19      	ldr	r2, [pc, #100]	@ (8002324 <HAL_DMA_Init+0x448>)
 80022be:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2202      	movs	r2, #2
 80022c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	4b13      	ldr	r3, [pc, #76]	@ (8002328 <HAL_DMA_Init+0x44c>)
 80022dc:	4013      	ands	r3, r2
 80022de:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	2b40      	cmp	r3, #64	@ 0x40
 80022e6:	d021      	beq.n	800232c <HAL_DMA_Init+0x450>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	2b80      	cmp	r3, #128	@ 0x80
 80022ee:	d102      	bne.n	80022f6 <HAL_DMA_Init+0x41a>
 80022f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80022f4:	e01b      	b.n	800232e <HAL_DMA_Init+0x452>
 80022f6:	2300      	movs	r3, #0
 80022f8:	e019      	b.n	800232e <HAL_DMA_Init+0x452>
 80022fa:	bf00      	nop
 80022fc:	fe10803f 	.word	0xfe10803f
 8002300:	5c001000 	.word	0x5c001000
 8002304:	ffff0000 	.word	0xffff0000
 8002308:	58025408 	.word	0x58025408
 800230c:	5802541c 	.word	0x5802541c
 8002310:	58025430 	.word	0x58025430
 8002314:	58025444 	.word	0x58025444
 8002318:	58025458 	.word	0x58025458
 800231c:	5802546c 	.word	0x5802546c
 8002320:	58025480 	.word	0x58025480
 8002324:	58025494 	.word	0x58025494
 8002328:	fffe000f 	.word	0xfffe000f
 800232c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	68d2      	ldr	r2, [r2, #12]
 8002332:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002334:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800233c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002344:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800234c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002354:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800235c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	4313      	orrs	r3, r2
 8002362:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	4b6e      	ldr	r3, [pc, #440]	@ (800252c <HAL_DMA_Init+0x650>)
 8002374:	4413      	add	r3, r2
 8002376:	4a6e      	ldr	r2, [pc, #440]	@ (8002530 <HAL_DMA_Init+0x654>)
 8002378:	fba2 2303 	umull	r2, r3, r2, r3
 800237c:	091b      	lsrs	r3, r3, #4
 800237e:	009a      	lsls	r2, r3, #2
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f001 fc45 	bl	8003c14 <DMA_CalcBaseAndBitshift>
 800238a:	4603      	mov	r3, r0
 800238c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002392:	f003 031f 	and.w	r3, r3, #31
 8002396:	2201      	movs	r2, #1
 8002398:	409a      	lsls	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	e008      	b.n	80023b2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2240      	movs	r2, #64	@ 0x40
 80023a4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2203      	movs	r2, #3
 80023aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e0b7      	b.n	8002522 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a5f      	ldr	r2, [pc, #380]	@ (8002534 <HAL_DMA_Init+0x658>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d072      	beq.n	80024a2 <HAL_DMA_Init+0x5c6>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a5d      	ldr	r2, [pc, #372]	@ (8002538 <HAL_DMA_Init+0x65c>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d06d      	beq.n	80024a2 <HAL_DMA_Init+0x5c6>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a5c      	ldr	r2, [pc, #368]	@ (800253c <HAL_DMA_Init+0x660>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d068      	beq.n	80024a2 <HAL_DMA_Init+0x5c6>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a5a      	ldr	r2, [pc, #360]	@ (8002540 <HAL_DMA_Init+0x664>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d063      	beq.n	80024a2 <HAL_DMA_Init+0x5c6>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a59      	ldr	r2, [pc, #356]	@ (8002544 <HAL_DMA_Init+0x668>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d05e      	beq.n	80024a2 <HAL_DMA_Init+0x5c6>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a57      	ldr	r2, [pc, #348]	@ (8002548 <HAL_DMA_Init+0x66c>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d059      	beq.n	80024a2 <HAL_DMA_Init+0x5c6>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a56      	ldr	r2, [pc, #344]	@ (800254c <HAL_DMA_Init+0x670>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d054      	beq.n	80024a2 <HAL_DMA_Init+0x5c6>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a54      	ldr	r2, [pc, #336]	@ (8002550 <HAL_DMA_Init+0x674>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d04f      	beq.n	80024a2 <HAL_DMA_Init+0x5c6>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a53      	ldr	r2, [pc, #332]	@ (8002554 <HAL_DMA_Init+0x678>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d04a      	beq.n	80024a2 <HAL_DMA_Init+0x5c6>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a51      	ldr	r2, [pc, #324]	@ (8002558 <HAL_DMA_Init+0x67c>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d045      	beq.n	80024a2 <HAL_DMA_Init+0x5c6>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a50      	ldr	r2, [pc, #320]	@ (800255c <HAL_DMA_Init+0x680>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d040      	beq.n	80024a2 <HAL_DMA_Init+0x5c6>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a4e      	ldr	r2, [pc, #312]	@ (8002560 <HAL_DMA_Init+0x684>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d03b      	beq.n	80024a2 <HAL_DMA_Init+0x5c6>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a4d      	ldr	r2, [pc, #308]	@ (8002564 <HAL_DMA_Init+0x688>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d036      	beq.n	80024a2 <HAL_DMA_Init+0x5c6>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a4b      	ldr	r2, [pc, #300]	@ (8002568 <HAL_DMA_Init+0x68c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d031      	beq.n	80024a2 <HAL_DMA_Init+0x5c6>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a4a      	ldr	r2, [pc, #296]	@ (800256c <HAL_DMA_Init+0x690>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d02c      	beq.n	80024a2 <HAL_DMA_Init+0x5c6>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a48      	ldr	r2, [pc, #288]	@ (8002570 <HAL_DMA_Init+0x694>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d027      	beq.n	80024a2 <HAL_DMA_Init+0x5c6>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a47      	ldr	r2, [pc, #284]	@ (8002574 <HAL_DMA_Init+0x698>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d022      	beq.n	80024a2 <HAL_DMA_Init+0x5c6>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a45      	ldr	r2, [pc, #276]	@ (8002578 <HAL_DMA_Init+0x69c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d01d      	beq.n	80024a2 <HAL_DMA_Init+0x5c6>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a44      	ldr	r2, [pc, #272]	@ (800257c <HAL_DMA_Init+0x6a0>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d018      	beq.n	80024a2 <HAL_DMA_Init+0x5c6>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a42      	ldr	r2, [pc, #264]	@ (8002580 <HAL_DMA_Init+0x6a4>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d013      	beq.n	80024a2 <HAL_DMA_Init+0x5c6>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a41      	ldr	r2, [pc, #260]	@ (8002584 <HAL_DMA_Init+0x6a8>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d00e      	beq.n	80024a2 <HAL_DMA_Init+0x5c6>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a3f      	ldr	r2, [pc, #252]	@ (8002588 <HAL_DMA_Init+0x6ac>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d009      	beq.n	80024a2 <HAL_DMA_Init+0x5c6>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a3e      	ldr	r2, [pc, #248]	@ (800258c <HAL_DMA_Init+0x6b0>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d004      	beq.n	80024a2 <HAL_DMA_Init+0x5c6>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a3c      	ldr	r2, [pc, #240]	@ (8002590 <HAL_DMA_Init+0x6b4>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d101      	bne.n	80024a6 <HAL_DMA_Init+0x5ca>
 80024a2:	2301      	movs	r3, #1
 80024a4:	e000      	b.n	80024a8 <HAL_DMA_Init+0x5cc>
 80024a6:	2300      	movs	r3, #0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d032      	beq.n	8002512 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f001 fcdf 	bl	8003e70 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	2b80      	cmp	r3, #128	@ 0x80
 80024b8:	d102      	bne.n	80024c0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80024d4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d010      	beq.n	8002500 <HAL_DMA_Init+0x624>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b08      	cmp	r3, #8
 80024e4:	d80c      	bhi.n	8002500 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f001 fd5c 	bl	8003fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80024fc:	605a      	str	r2, [r3, #4]
 80024fe:	e008      	b.n	8002512 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	a7fdabf8 	.word	0xa7fdabf8
 8002530:	cccccccd 	.word	0xcccccccd
 8002534:	40020010 	.word	0x40020010
 8002538:	40020028 	.word	0x40020028
 800253c:	40020040 	.word	0x40020040
 8002540:	40020058 	.word	0x40020058
 8002544:	40020070 	.word	0x40020070
 8002548:	40020088 	.word	0x40020088
 800254c:	400200a0 	.word	0x400200a0
 8002550:	400200b8 	.word	0x400200b8
 8002554:	40020410 	.word	0x40020410
 8002558:	40020428 	.word	0x40020428
 800255c:	40020440 	.word	0x40020440
 8002560:	40020458 	.word	0x40020458
 8002564:	40020470 	.word	0x40020470
 8002568:	40020488 	.word	0x40020488
 800256c:	400204a0 	.word	0x400204a0
 8002570:	400204b8 	.word	0x400204b8
 8002574:	58025408 	.word	0x58025408
 8002578:	5802541c 	.word	0x5802541c
 800257c:	58025430 	.word	0x58025430
 8002580:	58025444 	.word	0x58025444
 8002584:	58025458 	.word	0x58025458
 8002588:	5802546c 	.word	0x5802546c
 800258c:	58025480 	.word	0x58025480
 8002590:	58025494 	.word	0x58025494

08002594 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
 80025a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e226      	b.n	80029fe <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <HAL_DMA_Start_IT+0x2a>
 80025ba:	2302      	movs	r3, #2
 80025bc:	e21f      	b.n	80029fe <HAL_DMA_Start_IT+0x46a>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	f040 820a 	bne.w	80029e8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2202      	movs	r2, #2
 80025d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a68      	ldr	r2, [pc, #416]	@ (8002788 <HAL_DMA_Start_IT+0x1f4>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d04a      	beq.n	8002682 <HAL_DMA_Start_IT+0xee>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a66      	ldr	r2, [pc, #408]	@ (800278c <HAL_DMA_Start_IT+0x1f8>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d045      	beq.n	8002682 <HAL_DMA_Start_IT+0xee>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a65      	ldr	r2, [pc, #404]	@ (8002790 <HAL_DMA_Start_IT+0x1fc>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d040      	beq.n	8002682 <HAL_DMA_Start_IT+0xee>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a63      	ldr	r2, [pc, #396]	@ (8002794 <HAL_DMA_Start_IT+0x200>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d03b      	beq.n	8002682 <HAL_DMA_Start_IT+0xee>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a62      	ldr	r2, [pc, #392]	@ (8002798 <HAL_DMA_Start_IT+0x204>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d036      	beq.n	8002682 <HAL_DMA_Start_IT+0xee>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a60      	ldr	r2, [pc, #384]	@ (800279c <HAL_DMA_Start_IT+0x208>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d031      	beq.n	8002682 <HAL_DMA_Start_IT+0xee>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a5f      	ldr	r2, [pc, #380]	@ (80027a0 <HAL_DMA_Start_IT+0x20c>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d02c      	beq.n	8002682 <HAL_DMA_Start_IT+0xee>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a5d      	ldr	r2, [pc, #372]	@ (80027a4 <HAL_DMA_Start_IT+0x210>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d027      	beq.n	8002682 <HAL_DMA_Start_IT+0xee>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a5c      	ldr	r2, [pc, #368]	@ (80027a8 <HAL_DMA_Start_IT+0x214>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d022      	beq.n	8002682 <HAL_DMA_Start_IT+0xee>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a5a      	ldr	r2, [pc, #360]	@ (80027ac <HAL_DMA_Start_IT+0x218>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d01d      	beq.n	8002682 <HAL_DMA_Start_IT+0xee>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a59      	ldr	r2, [pc, #356]	@ (80027b0 <HAL_DMA_Start_IT+0x21c>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d018      	beq.n	8002682 <HAL_DMA_Start_IT+0xee>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a57      	ldr	r2, [pc, #348]	@ (80027b4 <HAL_DMA_Start_IT+0x220>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d013      	beq.n	8002682 <HAL_DMA_Start_IT+0xee>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a56      	ldr	r2, [pc, #344]	@ (80027b8 <HAL_DMA_Start_IT+0x224>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d00e      	beq.n	8002682 <HAL_DMA_Start_IT+0xee>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a54      	ldr	r2, [pc, #336]	@ (80027bc <HAL_DMA_Start_IT+0x228>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d009      	beq.n	8002682 <HAL_DMA_Start_IT+0xee>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a53      	ldr	r2, [pc, #332]	@ (80027c0 <HAL_DMA_Start_IT+0x22c>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d004      	beq.n	8002682 <HAL_DMA_Start_IT+0xee>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a51      	ldr	r2, [pc, #324]	@ (80027c4 <HAL_DMA_Start_IT+0x230>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d108      	bne.n	8002694 <HAL_DMA_Start_IT+0x100>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0201 	bic.w	r2, r2, #1
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	e007      	b.n	80026a4 <HAL_DMA_Start_IT+0x110>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 0201 	bic.w	r2, r2, #1
 80026a2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	68b9      	ldr	r1, [r7, #8]
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f001 f906 	bl	80038bc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a34      	ldr	r2, [pc, #208]	@ (8002788 <HAL_DMA_Start_IT+0x1f4>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d04a      	beq.n	8002750 <HAL_DMA_Start_IT+0x1bc>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a33      	ldr	r2, [pc, #204]	@ (800278c <HAL_DMA_Start_IT+0x1f8>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d045      	beq.n	8002750 <HAL_DMA_Start_IT+0x1bc>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a31      	ldr	r2, [pc, #196]	@ (8002790 <HAL_DMA_Start_IT+0x1fc>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d040      	beq.n	8002750 <HAL_DMA_Start_IT+0x1bc>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a30      	ldr	r2, [pc, #192]	@ (8002794 <HAL_DMA_Start_IT+0x200>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d03b      	beq.n	8002750 <HAL_DMA_Start_IT+0x1bc>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a2e      	ldr	r2, [pc, #184]	@ (8002798 <HAL_DMA_Start_IT+0x204>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d036      	beq.n	8002750 <HAL_DMA_Start_IT+0x1bc>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a2d      	ldr	r2, [pc, #180]	@ (800279c <HAL_DMA_Start_IT+0x208>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d031      	beq.n	8002750 <HAL_DMA_Start_IT+0x1bc>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a2b      	ldr	r2, [pc, #172]	@ (80027a0 <HAL_DMA_Start_IT+0x20c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d02c      	beq.n	8002750 <HAL_DMA_Start_IT+0x1bc>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a2a      	ldr	r2, [pc, #168]	@ (80027a4 <HAL_DMA_Start_IT+0x210>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d027      	beq.n	8002750 <HAL_DMA_Start_IT+0x1bc>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a28      	ldr	r2, [pc, #160]	@ (80027a8 <HAL_DMA_Start_IT+0x214>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d022      	beq.n	8002750 <HAL_DMA_Start_IT+0x1bc>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a27      	ldr	r2, [pc, #156]	@ (80027ac <HAL_DMA_Start_IT+0x218>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d01d      	beq.n	8002750 <HAL_DMA_Start_IT+0x1bc>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a25      	ldr	r2, [pc, #148]	@ (80027b0 <HAL_DMA_Start_IT+0x21c>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d018      	beq.n	8002750 <HAL_DMA_Start_IT+0x1bc>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a24      	ldr	r2, [pc, #144]	@ (80027b4 <HAL_DMA_Start_IT+0x220>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d013      	beq.n	8002750 <HAL_DMA_Start_IT+0x1bc>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a22      	ldr	r2, [pc, #136]	@ (80027b8 <HAL_DMA_Start_IT+0x224>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d00e      	beq.n	8002750 <HAL_DMA_Start_IT+0x1bc>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a21      	ldr	r2, [pc, #132]	@ (80027bc <HAL_DMA_Start_IT+0x228>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d009      	beq.n	8002750 <HAL_DMA_Start_IT+0x1bc>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a1f      	ldr	r2, [pc, #124]	@ (80027c0 <HAL_DMA_Start_IT+0x22c>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d004      	beq.n	8002750 <HAL_DMA_Start_IT+0x1bc>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a1e      	ldr	r2, [pc, #120]	@ (80027c4 <HAL_DMA_Start_IT+0x230>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d101      	bne.n	8002754 <HAL_DMA_Start_IT+0x1c0>
 8002750:	2301      	movs	r3, #1
 8002752:	e000      	b.n	8002756 <HAL_DMA_Start_IT+0x1c2>
 8002754:	2300      	movs	r3, #0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d036      	beq.n	80027c8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f023 021e 	bic.w	r2, r3, #30
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f042 0216 	orr.w	r2, r2, #22
 800276c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002772:	2b00      	cmp	r3, #0
 8002774:	d03e      	beq.n	80027f4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f042 0208 	orr.w	r2, r2, #8
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	e035      	b.n	80027f4 <HAL_DMA_Start_IT+0x260>
 8002788:	40020010 	.word	0x40020010
 800278c:	40020028 	.word	0x40020028
 8002790:	40020040 	.word	0x40020040
 8002794:	40020058 	.word	0x40020058
 8002798:	40020070 	.word	0x40020070
 800279c:	40020088 	.word	0x40020088
 80027a0:	400200a0 	.word	0x400200a0
 80027a4:	400200b8 	.word	0x400200b8
 80027a8:	40020410 	.word	0x40020410
 80027ac:	40020428 	.word	0x40020428
 80027b0:	40020440 	.word	0x40020440
 80027b4:	40020458 	.word	0x40020458
 80027b8:	40020470 	.word	0x40020470
 80027bc:	40020488 	.word	0x40020488
 80027c0:	400204a0 	.word	0x400204a0
 80027c4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f023 020e 	bic.w	r2, r3, #14
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 020a 	orr.w	r2, r2, #10
 80027da:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d007      	beq.n	80027f4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0204 	orr.w	r2, r2, #4
 80027f2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a83      	ldr	r2, [pc, #524]	@ (8002a08 <HAL_DMA_Start_IT+0x474>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d072      	beq.n	80028e4 <HAL_DMA_Start_IT+0x350>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a82      	ldr	r2, [pc, #520]	@ (8002a0c <HAL_DMA_Start_IT+0x478>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d06d      	beq.n	80028e4 <HAL_DMA_Start_IT+0x350>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a80      	ldr	r2, [pc, #512]	@ (8002a10 <HAL_DMA_Start_IT+0x47c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d068      	beq.n	80028e4 <HAL_DMA_Start_IT+0x350>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a7f      	ldr	r2, [pc, #508]	@ (8002a14 <HAL_DMA_Start_IT+0x480>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d063      	beq.n	80028e4 <HAL_DMA_Start_IT+0x350>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a7d      	ldr	r2, [pc, #500]	@ (8002a18 <HAL_DMA_Start_IT+0x484>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d05e      	beq.n	80028e4 <HAL_DMA_Start_IT+0x350>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a7c      	ldr	r2, [pc, #496]	@ (8002a1c <HAL_DMA_Start_IT+0x488>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d059      	beq.n	80028e4 <HAL_DMA_Start_IT+0x350>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a7a      	ldr	r2, [pc, #488]	@ (8002a20 <HAL_DMA_Start_IT+0x48c>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d054      	beq.n	80028e4 <HAL_DMA_Start_IT+0x350>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a79      	ldr	r2, [pc, #484]	@ (8002a24 <HAL_DMA_Start_IT+0x490>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d04f      	beq.n	80028e4 <HAL_DMA_Start_IT+0x350>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a77      	ldr	r2, [pc, #476]	@ (8002a28 <HAL_DMA_Start_IT+0x494>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d04a      	beq.n	80028e4 <HAL_DMA_Start_IT+0x350>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a76      	ldr	r2, [pc, #472]	@ (8002a2c <HAL_DMA_Start_IT+0x498>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d045      	beq.n	80028e4 <HAL_DMA_Start_IT+0x350>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a74      	ldr	r2, [pc, #464]	@ (8002a30 <HAL_DMA_Start_IT+0x49c>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d040      	beq.n	80028e4 <HAL_DMA_Start_IT+0x350>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a73      	ldr	r2, [pc, #460]	@ (8002a34 <HAL_DMA_Start_IT+0x4a0>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d03b      	beq.n	80028e4 <HAL_DMA_Start_IT+0x350>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a71      	ldr	r2, [pc, #452]	@ (8002a38 <HAL_DMA_Start_IT+0x4a4>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d036      	beq.n	80028e4 <HAL_DMA_Start_IT+0x350>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a70      	ldr	r2, [pc, #448]	@ (8002a3c <HAL_DMA_Start_IT+0x4a8>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d031      	beq.n	80028e4 <HAL_DMA_Start_IT+0x350>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a6e      	ldr	r2, [pc, #440]	@ (8002a40 <HAL_DMA_Start_IT+0x4ac>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d02c      	beq.n	80028e4 <HAL_DMA_Start_IT+0x350>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a6d      	ldr	r2, [pc, #436]	@ (8002a44 <HAL_DMA_Start_IT+0x4b0>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d027      	beq.n	80028e4 <HAL_DMA_Start_IT+0x350>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a6b      	ldr	r2, [pc, #428]	@ (8002a48 <HAL_DMA_Start_IT+0x4b4>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d022      	beq.n	80028e4 <HAL_DMA_Start_IT+0x350>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a6a      	ldr	r2, [pc, #424]	@ (8002a4c <HAL_DMA_Start_IT+0x4b8>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d01d      	beq.n	80028e4 <HAL_DMA_Start_IT+0x350>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a68      	ldr	r2, [pc, #416]	@ (8002a50 <HAL_DMA_Start_IT+0x4bc>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d018      	beq.n	80028e4 <HAL_DMA_Start_IT+0x350>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a67      	ldr	r2, [pc, #412]	@ (8002a54 <HAL_DMA_Start_IT+0x4c0>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d013      	beq.n	80028e4 <HAL_DMA_Start_IT+0x350>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a65      	ldr	r2, [pc, #404]	@ (8002a58 <HAL_DMA_Start_IT+0x4c4>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d00e      	beq.n	80028e4 <HAL_DMA_Start_IT+0x350>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a64      	ldr	r2, [pc, #400]	@ (8002a5c <HAL_DMA_Start_IT+0x4c8>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d009      	beq.n	80028e4 <HAL_DMA_Start_IT+0x350>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a62      	ldr	r2, [pc, #392]	@ (8002a60 <HAL_DMA_Start_IT+0x4cc>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d004      	beq.n	80028e4 <HAL_DMA_Start_IT+0x350>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a61      	ldr	r2, [pc, #388]	@ (8002a64 <HAL_DMA_Start_IT+0x4d0>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d101      	bne.n	80028e8 <HAL_DMA_Start_IT+0x354>
 80028e4:	2301      	movs	r3, #1
 80028e6:	e000      	b.n	80028ea <HAL_DMA_Start_IT+0x356>
 80028e8:	2300      	movs	r3, #0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d01a      	beq.n	8002924 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d007      	beq.n	800290c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002906:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800290a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002910:	2b00      	cmp	r3, #0
 8002912:	d007      	beq.n	8002924 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800291e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002922:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a37      	ldr	r2, [pc, #220]	@ (8002a08 <HAL_DMA_Start_IT+0x474>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d04a      	beq.n	80029c4 <HAL_DMA_Start_IT+0x430>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a36      	ldr	r2, [pc, #216]	@ (8002a0c <HAL_DMA_Start_IT+0x478>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d045      	beq.n	80029c4 <HAL_DMA_Start_IT+0x430>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a34      	ldr	r2, [pc, #208]	@ (8002a10 <HAL_DMA_Start_IT+0x47c>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d040      	beq.n	80029c4 <HAL_DMA_Start_IT+0x430>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a33      	ldr	r2, [pc, #204]	@ (8002a14 <HAL_DMA_Start_IT+0x480>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d03b      	beq.n	80029c4 <HAL_DMA_Start_IT+0x430>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a31      	ldr	r2, [pc, #196]	@ (8002a18 <HAL_DMA_Start_IT+0x484>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d036      	beq.n	80029c4 <HAL_DMA_Start_IT+0x430>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a30      	ldr	r2, [pc, #192]	@ (8002a1c <HAL_DMA_Start_IT+0x488>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d031      	beq.n	80029c4 <HAL_DMA_Start_IT+0x430>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a2e      	ldr	r2, [pc, #184]	@ (8002a20 <HAL_DMA_Start_IT+0x48c>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d02c      	beq.n	80029c4 <HAL_DMA_Start_IT+0x430>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a2d      	ldr	r2, [pc, #180]	@ (8002a24 <HAL_DMA_Start_IT+0x490>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d027      	beq.n	80029c4 <HAL_DMA_Start_IT+0x430>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a2b      	ldr	r2, [pc, #172]	@ (8002a28 <HAL_DMA_Start_IT+0x494>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d022      	beq.n	80029c4 <HAL_DMA_Start_IT+0x430>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a2a      	ldr	r2, [pc, #168]	@ (8002a2c <HAL_DMA_Start_IT+0x498>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d01d      	beq.n	80029c4 <HAL_DMA_Start_IT+0x430>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a28      	ldr	r2, [pc, #160]	@ (8002a30 <HAL_DMA_Start_IT+0x49c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d018      	beq.n	80029c4 <HAL_DMA_Start_IT+0x430>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a27      	ldr	r2, [pc, #156]	@ (8002a34 <HAL_DMA_Start_IT+0x4a0>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d013      	beq.n	80029c4 <HAL_DMA_Start_IT+0x430>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a25      	ldr	r2, [pc, #148]	@ (8002a38 <HAL_DMA_Start_IT+0x4a4>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d00e      	beq.n	80029c4 <HAL_DMA_Start_IT+0x430>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a24      	ldr	r2, [pc, #144]	@ (8002a3c <HAL_DMA_Start_IT+0x4a8>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d009      	beq.n	80029c4 <HAL_DMA_Start_IT+0x430>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a22      	ldr	r2, [pc, #136]	@ (8002a40 <HAL_DMA_Start_IT+0x4ac>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d004      	beq.n	80029c4 <HAL_DMA_Start_IT+0x430>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a21      	ldr	r2, [pc, #132]	@ (8002a44 <HAL_DMA_Start_IT+0x4b0>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d108      	bne.n	80029d6 <HAL_DMA_Start_IT+0x442>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0201 	orr.w	r2, r2, #1
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	e012      	b.n	80029fc <HAL_DMA_Start_IT+0x468>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f042 0201 	orr.w	r2, r2, #1
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	e009      	b.n	80029fc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80029ee:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80029fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40020010 	.word	0x40020010
 8002a0c:	40020028 	.word	0x40020028
 8002a10:	40020040 	.word	0x40020040
 8002a14:	40020058 	.word	0x40020058
 8002a18:	40020070 	.word	0x40020070
 8002a1c:	40020088 	.word	0x40020088
 8002a20:	400200a0 	.word	0x400200a0
 8002a24:	400200b8 	.word	0x400200b8
 8002a28:	40020410 	.word	0x40020410
 8002a2c:	40020428 	.word	0x40020428
 8002a30:	40020440 	.word	0x40020440
 8002a34:	40020458 	.word	0x40020458
 8002a38:	40020470 	.word	0x40020470
 8002a3c:	40020488 	.word	0x40020488
 8002a40:	400204a0 	.word	0x400204a0
 8002a44:	400204b8 	.word	0x400204b8
 8002a48:	58025408 	.word	0x58025408
 8002a4c:	5802541c 	.word	0x5802541c
 8002a50:	58025430 	.word	0x58025430
 8002a54:	58025444 	.word	0x58025444
 8002a58:	58025458 	.word	0x58025458
 8002a5c:	5802546c 	.word	0x5802546c
 8002a60:	58025480 	.word	0x58025480
 8002a64:	58025494 	.word	0x58025494

08002a68 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b08a      	sub	sp, #40	@ 0x28
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a74:	4b67      	ldr	r3, [pc, #412]	@ (8002c14 <HAL_DMA_IRQHandler+0x1ac>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a67      	ldr	r2, [pc, #412]	@ (8002c18 <HAL_DMA_IRQHandler+0x1b0>)
 8002a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7e:	0a9b      	lsrs	r3, r3, #10
 8002a80:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a86:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a8c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a5f      	ldr	r2, [pc, #380]	@ (8002c1c <HAL_DMA_IRQHandler+0x1b4>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d04a      	beq.n	8002b3a <HAL_DMA_IRQHandler+0xd2>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a5d      	ldr	r2, [pc, #372]	@ (8002c20 <HAL_DMA_IRQHandler+0x1b8>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d045      	beq.n	8002b3a <HAL_DMA_IRQHandler+0xd2>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a5c      	ldr	r2, [pc, #368]	@ (8002c24 <HAL_DMA_IRQHandler+0x1bc>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d040      	beq.n	8002b3a <HAL_DMA_IRQHandler+0xd2>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a5a      	ldr	r2, [pc, #360]	@ (8002c28 <HAL_DMA_IRQHandler+0x1c0>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d03b      	beq.n	8002b3a <HAL_DMA_IRQHandler+0xd2>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a59      	ldr	r2, [pc, #356]	@ (8002c2c <HAL_DMA_IRQHandler+0x1c4>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d036      	beq.n	8002b3a <HAL_DMA_IRQHandler+0xd2>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a57      	ldr	r2, [pc, #348]	@ (8002c30 <HAL_DMA_IRQHandler+0x1c8>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d031      	beq.n	8002b3a <HAL_DMA_IRQHandler+0xd2>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a56      	ldr	r2, [pc, #344]	@ (8002c34 <HAL_DMA_IRQHandler+0x1cc>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d02c      	beq.n	8002b3a <HAL_DMA_IRQHandler+0xd2>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a54      	ldr	r2, [pc, #336]	@ (8002c38 <HAL_DMA_IRQHandler+0x1d0>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d027      	beq.n	8002b3a <HAL_DMA_IRQHandler+0xd2>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a53      	ldr	r2, [pc, #332]	@ (8002c3c <HAL_DMA_IRQHandler+0x1d4>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d022      	beq.n	8002b3a <HAL_DMA_IRQHandler+0xd2>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a51      	ldr	r2, [pc, #324]	@ (8002c40 <HAL_DMA_IRQHandler+0x1d8>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d01d      	beq.n	8002b3a <HAL_DMA_IRQHandler+0xd2>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a50      	ldr	r2, [pc, #320]	@ (8002c44 <HAL_DMA_IRQHandler+0x1dc>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d018      	beq.n	8002b3a <HAL_DMA_IRQHandler+0xd2>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a4e      	ldr	r2, [pc, #312]	@ (8002c48 <HAL_DMA_IRQHandler+0x1e0>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d013      	beq.n	8002b3a <HAL_DMA_IRQHandler+0xd2>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a4d      	ldr	r2, [pc, #308]	@ (8002c4c <HAL_DMA_IRQHandler+0x1e4>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d00e      	beq.n	8002b3a <HAL_DMA_IRQHandler+0xd2>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a4b      	ldr	r2, [pc, #300]	@ (8002c50 <HAL_DMA_IRQHandler+0x1e8>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d009      	beq.n	8002b3a <HAL_DMA_IRQHandler+0xd2>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a4a      	ldr	r2, [pc, #296]	@ (8002c54 <HAL_DMA_IRQHandler+0x1ec>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d004      	beq.n	8002b3a <HAL_DMA_IRQHandler+0xd2>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a48      	ldr	r2, [pc, #288]	@ (8002c58 <HAL_DMA_IRQHandler+0x1f0>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d101      	bne.n	8002b3e <HAL_DMA_IRQHandler+0xd6>
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <HAL_DMA_IRQHandler+0xd8>
 8002b3e:	2300      	movs	r3, #0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 842b 	beq.w	800339c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b4a:	f003 031f 	and.w	r3, r3, #31
 8002b4e:	2208      	movs	r2, #8
 8002b50:	409a      	lsls	r2, r3
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	4013      	ands	r3, r2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 80a2 	beq.w	8002ca0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a2e      	ldr	r2, [pc, #184]	@ (8002c1c <HAL_DMA_IRQHandler+0x1b4>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d04a      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x194>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a2d      	ldr	r2, [pc, #180]	@ (8002c20 <HAL_DMA_IRQHandler+0x1b8>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d045      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x194>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a2b      	ldr	r2, [pc, #172]	@ (8002c24 <HAL_DMA_IRQHandler+0x1bc>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d040      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x194>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a2a      	ldr	r2, [pc, #168]	@ (8002c28 <HAL_DMA_IRQHandler+0x1c0>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d03b      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x194>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a28      	ldr	r2, [pc, #160]	@ (8002c2c <HAL_DMA_IRQHandler+0x1c4>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d036      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x194>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a27      	ldr	r2, [pc, #156]	@ (8002c30 <HAL_DMA_IRQHandler+0x1c8>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d031      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x194>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a25      	ldr	r2, [pc, #148]	@ (8002c34 <HAL_DMA_IRQHandler+0x1cc>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d02c      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x194>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a24      	ldr	r2, [pc, #144]	@ (8002c38 <HAL_DMA_IRQHandler+0x1d0>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d027      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x194>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a22      	ldr	r2, [pc, #136]	@ (8002c3c <HAL_DMA_IRQHandler+0x1d4>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d022      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x194>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a21      	ldr	r2, [pc, #132]	@ (8002c40 <HAL_DMA_IRQHandler+0x1d8>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d01d      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x194>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a1f      	ldr	r2, [pc, #124]	@ (8002c44 <HAL_DMA_IRQHandler+0x1dc>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d018      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x194>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a1e      	ldr	r2, [pc, #120]	@ (8002c48 <HAL_DMA_IRQHandler+0x1e0>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d013      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x194>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a1c      	ldr	r2, [pc, #112]	@ (8002c4c <HAL_DMA_IRQHandler+0x1e4>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d00e      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x194>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a1b      	ldr	r2, [pc, #108]	@ (8002c50 <HAL_DMA_IRQHandler+0x1e8>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d009      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x194>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a19      	ldr	r2, [pc, #100]	@ (8002c54 <HAL_DMA_IRQHandler+0x1ec>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d004      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x194>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a18      	ldr	r2, [pc, #96]	@ (8002c58 <HAL_DMA_IRQHandler+0x1f0>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d12f      	bne.n	8002c5c <HAL_DMA_IRQHandler+0x1f4>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0304 	and.w	r3, r3, #4
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	bf14      	ite	ne
 8002c0a:	2301      	movne	r3, #1
 8002c0c:	2300      	moveq	r3, #0
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	e02e      	b.n	8002c70 <HAL_DMA_IRQHandler+0x208>
 8002c12:	bf00      	nop
 8002c14:	24000000 	.word	0x24000000
 8002c18:	1b4e81b5 	.word	0x1b4e81b5
 8002c1c:	40020010 	.word	0x40020010
 8002c20:	40020028 	.word	0x40020028
 8002c24:	40020040 	.word	0x40020040
 8002c28:	40020058 	.word	0x40020058
 8002c2c:	40020070 	.word	0x40020070
 8002c30:	40020088 	.word	0x40020088
 8002c34:	400200a0 	.word	0x400200a0
 8002c38:	400200b8 	.word	0x400200b8
 8002c3c:	40020410 	.word	0x40020410
 8002c40:	40020428 	.word	0x40020428
 8002c44:	40020440 	.word	0x40020440
 8002c48:	40020458 	.word	0x40020458
 8002c4c:	40020470 	.word	0x40020470
 8002c50:	40020488 	.word	0x40020488
 8002c54:	400204a0 	.word	0x400204a0
 8002c58:	400204b8 	.word	0x400204b8
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	bf14      	ite	ne
 8002c6a:	2301      	movne	r3, #1
 8002c6c:	2300      	moveq	r3, #0
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d015      	beq.n	8002ca0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 0204 	bic.w	r2, r2, #4
 8002c82:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c88:	f003 031f 	and.w	r3, r3, #31
 8002c8c:	2208      	movs	r2, #8
 8002c8e:	409a      	lsls	r2, r3
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c98:	f043 0201 	orr.w	r2, r3, #1
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca4:	f003 031f 	and.w	r3, r3, #31
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	fa22 f303 	lsr.w	r3, r2, r3
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d06e      	beq.n	8002d94 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a69      	ldr	r2, [pc, #420]	@ (8002e60 <HAL_DMA_IRQHandler+0x3f8>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d04a      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x2ee>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a67      	ldr	r2, [pc, #412]	@ (8002e64 <HAL_DMA_IRQHandler+0x3fc>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d045      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x2ee>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a66      	ldr	r2, [pc, #408]	@ (8002e68 <HAL_DMA_IRQHandler+0x400>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d040      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x2ee>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a64      	ldr	r2, [pc, #400]	@ (8002e6c <HAL_DMA_IRQHandler+0x404>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d03b      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x2ee>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a63      	ldr	r2, [pc, #396]	@ (8002e70 <HAL_DMA_IRQHandler+0x408>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d036      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x2ee>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a61      	ldr	r2, [pc, #388]	@ (8002e74 <HAL_DMA_IRQHandler+0x40c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d031      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x2ee>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a60      	ldr	r2, [pc, #384]	@ (8002e78 <HAL_DMA_IRQHandler+0x410>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d02c      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x2ee>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a5e      	ldr	r2, [pc, #376]	@ (8002e7c <HAL_DMA_IRQHandler+0x414>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d027      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x2ee>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a5d      	ldr	r2, [pc, #372]	@ (8002e80 <HAL_DMA_IRQHandler+0x418>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d022      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x2ee>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a5b      	ldr	r2, [pc, #364]	@ (8002e84 <HAL_DMA_IRQHandler+0x41c>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d01d      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x2ee>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a5a      	ldr	r2, [pc, #360]	@ (8002e88 <HAL_DMA_IRQHandler+0x420>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d018      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x2ee>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a58      	ldr	r2, [pc, #352]	@ (8002e8c <HAL_DMA_IRQHandler+0x424>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d013      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x2ee>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a57      	ldr	r2, [pc, #348]	@ (8002e90 <HAL_DMA_IRQHandler+0x428>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d00e      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x2ee>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a55      	ldr	r2, [pc, #340]	@ (8002e94 <HAL_DMA_IRQHandler+0x42c>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d009      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x2ee>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a54      	ldr	r2, [pc, #336]	@ (8002e98 <HAL_DMA_IRQHandler+0x430>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d004      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x2ee>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a52      	ldr	r2, [pc, #328]	@ (8002e9c <HAL_DMA_IRQHandler+0x434>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d10a      	bne.n	8002d6c <HAL_DMA_IRQHandler+0x304>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	bf14      	ite	ne
 8002d64:	2301      	movne	r3, #1
 8002d66:	2300      	moveq	r3, #0
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	e003      	b.n	8002d74 <HAL_DMA_IRQHandler+0x30c>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2300      	movs	r3, #0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00d      	beq.n	8002d94 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d7c:	f003 031f 	and.w	r3, r3, #31
 8002d80:	2201      	movs	r2, #1
 8002d82:	409a      	lsls	r2, r3
 8002d84:	6a3b      	ldr	r3, [r7, #32]
 8002d86:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d8c:	f043 0202 	orr.w	r2, r3, #2
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d98:	f003 031f 	and.w	r3, r3, #31
 8002d9c:	2204      	movs	r2, #4
 8002d9e:	409a      	lsls	r2, r3
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	4013      	ands	r3, r2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 808f 	beq.w	8002ec8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a2c      	ldr	r2, [pc, #176]	@ (8002e60 <HAL_DMA_IRQHandler+0x3f8>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d04a      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x3e2>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a2a      	ldr	r2, [pc, #168]	@ (8002e64 <HAL_DMA_IRQHandler+0x3fc>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d045      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x3e2>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a29      	ldr	r2, [pc, #164]	@ (8002e68 <HAL_DMA_IRQHandler+0x400>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d040      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x3e2>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a27      	ldr	r2, [pc, #156]	@ (8002e6c <HAL_DMA_IRQHandler+0x404>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d03b      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x3e2>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a26      	ldr	r2, [pc, #152]	@ (8002e70 <HAL_DMA_IRQHandler+0x408>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d036      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x3e2>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a24      	ldr	r2, [pc, #144]	@ (8002e74 <HAL_DMA_IRQHandler+0x40c>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d031      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x3e2>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a23      	ldr	r2, [pc, #140]	@ (8002e78 <HAL_DMA_IRQHandler+0x410>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d02c      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x3e2>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a21      	ldr	r2, [pc, #132]	@ (8002e7c <HAL_DMA_IRQHandler+0x414>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d027      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x3e2>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a20      	ldr	r2, [pc, #128]	@ (8002e80 <HAL_DMA_IRQHandler+0x418>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d022      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x3e2>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a1e      	ldr	r2, [pc, #120]	@ (8002e84 <HAL_DMA_IRQHandler+0x41c>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d01d      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x3e2>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a1d      	ldr	r2, [pc, #116]	@ (8002e88 <HAL_DMA_IRQHandler+0x420>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d018      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x3e2>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a1b      	ldr	r2, [pc, #108]	@ (8002e8c <HAL_DMA_IRQHandler+0x424>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d013      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x3e2>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a1a      	ldr	r2, [pc, #104]	@ (8002e90 <HAL_DMA_IRQHandler+0x428>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d00e      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x3e2>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a18      	ldr	r2, [pc, #96]	@ (8002e94 <HAL_DMA_IRQHandler+0x42c>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d009      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x3e2>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a17      	ldr	r2, [pc, #92]	@ (8002e98 <HAL_DMA_IRQHandler+0x430>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d004      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x3e2>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a15      	ldr	r2, [pc, #84]	@ (8002e9c <HAL_DMA_IRQHandler+0x434>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d12a      	bne.n	8002ea0 <HAL_DMA_IRQHandler+0x438>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	bf14      	ite	ne
 8002e58:	2301      	movne	r3, #1
 8002e5a:	2300      	moveq	r3, #0
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	e023      	b.n	8002ea8 <HAL_DMA_IRQHandler+0x440>
 8002e60:	40020010 	.word	0x40020010
 8002e64:	40020028 	.word	0x40020028
 8002e68:	40020040 	.word	0x40020040
 8002e6c:	40020058 	.word	0x40020058
 8002e70:	40020070 	.word	0x40020070
 8002e74:	40020088 	.word	0x40020088
 8002e78:	400200a0 	.word	0x400200a0
 8002e7c:	400200b8 	.word	0x400200b8
 8002e80:	40020410 	.word	0x40020410
 8002e84:	40020428 	.word	0x40020428
 8002e88:	40020440 	.word	0x40020440
 8002e8c:	40020458 	.word	0x40020458
 8002e90:	40020470 	.word	0x40020470
 8002e94:	40020488 	.word	0x40020488
 8002e98:	400204a0 	.word	0x400204a0
 8002e9c:	400204b8 	.word	0x400204b8
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00d      	beq.n	8002ec8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb0:	f003 031f 	and.w	r3, r3, #31
 8002eb4:	2204      	movs	r2, #4
 8002eb6:	409a      	lsls	r2, r3
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ec0:	f043 0204 	orr.w	r2, r3, #4
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ecc:	f003 031f 	and.w	r3, r3, #31
 8002ed0:	2210      	movs	r2, #16
 8002ed2:	409a      	lsls	r2, r3
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 80a6 	beq.w	800302a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a85      	ldr	r2, [pc, #532]	@ (80030f8 <HAL_DMA_IRQHandler+0x690>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d04a      	beq.n	8002f7e <HAL_DMA_IRQHandler+0x516>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a83      	ldr	r2, [pc, #524]	@ (80030fc <HAL_DMA_IRQHandler+0x694>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d045      	beq.n	8002f7e <HAL_DMA_IRQHandler+0x516>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a82      	ldr	r2, [pc, #520]	@ (8003100 <HAL_DMA_IRQHandler+0x698>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d040      	beq.n	8002f7e <HAL_DMA_IRQHandler+0x516>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a80      	ldr	r2, [pc, #512]	@ (8003104 <HAL_DMA_IRQHandler+0x69c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d03b      	beq.n	8002f7e <HAL_DMA_IRQHandler+0x516>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a7f      	ldr	r2, [pc, #508]	@ (8003108 <HAL_DMA_IRQHandler+0x6a0>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d036      	beq.n	8002f7e <HAL_DMA_IRQHandler+0x516>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a7d      	ldr	r2, [pc, #500]	@ (800310c <HAL_DMA_IRQHandler+0x6a4>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d031      	beq.n	8002f7e <HAL_DMA_IRQHandler+0x516>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a7c      	ldr	r2, [pc, #496]	@ (8003110 <HAL_DMA_IRQHandler+0x6a8>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d02c      	beq.n	8002f7e <HAL_DMA_IRQHandler+0x516>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a7a      	ldr	r2, [pc, #488]	@ (8003114 <HAL_DMA_IRQHandler+0x6ac>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d027      	beq.n	8002f7e <HAL_DMA_IRQHandler+0x516>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a79      	ldr	r2, [pc, #484]	@ (8003118 <HAL_DMA_IRQHandler+0x6b0>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d022      	beq.n	8002f7e <HAL_DMA_IRQHandler+0x516>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a77      	ldr	r2, [pc, #476]	@ (800311c <HAL_DMA_IRQHandler+0x6b4>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d01d      	beq.n	8002f7e <HAL_DMA_IRQHandler+0x516>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a76      	ldr	r2, [pc, #472]	@ (8003120 <HAL_DMA_IRQHandler+0x6b8>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d018      	beq.n	8002f7e <HAL_DMA_IRQHandler+0x516>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a74      	ldr	r2, [pc, #464]	@ (8003124 <HAL_DMA_IRQHandler+0x6bc>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d013      	beq.n	8002f7e <HAL_DMA_IRQHandler+0x516>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a73      	ldr	r2, [pc, #460]	@ (8003128 <HAL_DMA_IRQHandler+0x6c0>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d00e      	beq.n	8002f7e <HAL_DMA_IRQHandler+0x516>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a71      	ldr	r2, [pc, #452]	@ (800312c <HAL_DMA_IRQHandler+0x6c4>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d009      	beq.n	8002f7e <HAL_DMA_IRQHandler+0x516>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a70      	ldr	r2, [pc, #448]	@ (8003130 <HAL_DMA_IRQHandler+0x6c8>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d004      	beq.n	8002f7e <HAL_DMA_IRQHandler+0x516>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a6e      	ldr	r2, [pc, #440]	@ (8003134 <HAL_DMA_IRQHandler+0x6cc>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d10a      	bne.n	8002f94 <HAL_DMA_IRQHandler+0x52c>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0308 	and.w	r3, r3, #8
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	bf14      	ite	ne
 8002f8c:	2301      	movne	r3, #1
 8002f8e:	2300      	moveq	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	e009      	b.n	8002fa8 <HAL_DMA_IRQHandler+0x540>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0304 	and.w	r3, r3, #4
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	bf14      	ite	ne
 8002fa2:	2301      	movne	r3, #1
 8002fa4:	2300      	moveq	r3, #0
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d03e      	beq.n	800302a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb0:	f003 031f 	and.w	r3, r3, #31
 8002fb4:	2210      	movs	r2, #16
 8002fb6:	409a      	lsls	r2, r3
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d018      	beq.n	8002ffc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d108      	bne.n	8002fea <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d024      	beq.n	800302a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	4798      	blx	r3
 8002fe8:	e01f      	b.n	800302a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d01b      	beq.n	800302a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	4798      	blx	r3
 8002ffa:	e016      	b.n	800302a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003006:	2b00      	cmp	r3, #0
 8003008:	d107      	bne.n	800301a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 0208 	bic.w	r2, r2, #8
 8003018:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800302e:	f003 031f 	and.w	r3, r3, #31
 8003032:	2220      	movs	r2, #32
 8003034:	409a      	lsls	r2, r3
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	4013      	ands	r3, r2
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 8110 	beq.w	8003260 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a2c      	ldr	r2, [pc, #176]	@ (80030f8 <HAL_DMA_IRQHandler+0x690>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d04a      	beq.n	80030e0 <HAL_DMA_IRQHandler+0x678>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a2b      	ldr	r2, [pc, #172]	@ (80030fc <HAL_DMA_IRQHandler+0x694>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d045      	beq.n	80030e0 <HAL_DMA_IRQHandler+0x678>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a29      	ldr	r2, [pc, #164]	@ (8003100 <HAL_DMA_IRQHandler+0x698>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d040      	beq.n	80030e0 <HAL_DMA_IRQHandler+0x678>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a28      	ldr	r2, [pc, #160]	@ (8003104 <HAL_DMA_IRQHandler+0x69c>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d03b      	beq.n	80030e0 <HAL_DMA_IRQHandler+0x678>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a26      	ldr	r2, [pc, #152]	@ (8003108 <HAL_DMA_IRQHandler+0x6a0>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d036      	beq.n	80030e0 <HAL_DMA_IRQHandler+0x678>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a25      	ldr	r2, [pc, #148]	@ (800310c <HAL_DMA_IRQHandler+0x6a4>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d031      	beq.n	80030e0 <HAL_DMA_IRQHandler+0x678>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a23      	ldr	r2, [pc, #140]	@ (8003110 <HAL_DMA_IRQHandler+0x6a8>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d02c      	beq.n	80030e0 <HAL_DMA_IRQHandler+0x678>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a22      	ldr	r2, [pc, #136]	@ (8003114 <HAL_DMA_IRQHandler+0x6ac>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d027      	beq.n	80030e0 <HAL_DMA_IRQHandler+0x678>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a20      	ldr	r2, [pc, #128]	@ (8003118 <HAL_DMA_IRQHandler+0x6b0>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d022      	beq.n	80030e0 <HAL_DMA_IRQHandler+0x678>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a1f      	ldr	r2, [pc, #124]	@ (800311c <HAL_DMA_IRQHandler+0x6b4>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d01d      	beq.n	80030e0 <HAL_DMA_IRQHandler+0x678>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a1d      	ldr	r2, [pc, #116]	@ (8003120 <HAL_DMA_IRQHandler+0x6b8>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d018      	beq.n	80030e0 <HAL_DMA_IRQHandler+0x678>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a1c      	ldr	r2, [pc, #112]	@ (8003124 <HAL_DMA_IRQHandler+0x6bc>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d013      	beq.n	80030e0 <HAL_DMA_IRQHandler+0x678>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a1a      	ldr	r2, [pc, #104]	@ (8003128 <HAL_DMA_IRQHandler+0x6c0>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d00e      	beq.n	80030e0 <HAL_DMA_IRQHandler+0x678>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a19      	ldr	r2, [pc, #100]	@ (800312c <HAL_DMA_IRQHandler+0x6c4>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d009      	beq.n	80030e0 <HAL_DMA_IRQHandler+0x678>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a17      	ldr	r2, [pc, #92]	@ (8003130 <HAL_DMA_IRQHandler+0x6c8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d004      	beq.n	80030e0 <HAL_DMA_IRQHandler+0x678>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a16      	ldr	r2, [pc, #88]	@ (8003134 <HAL_DMA_IRQHandler+0x6cc>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d12b      	bne.n	8003138 <HAL_DMA_IRQHandler+0x6d0>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0310 	and.w	r3, r3, #16
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	bf14      	ite	ne
 80030ee:	2301      	movne	r3, #1
 80030f0:	2300      	moveq	r3, #0
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	e02a      	b.n	800314c <HAL_DMA_IRQHandler+0x6e4>
 80030f6:	bf00      	nop
 80030f8:	40020010 	.word	0x40020010
 80030fc:	40020028 	.word	0x40020028
 8003100:	40020040 	.word	0x40020040
 8003104:	40020058 	.word	0x40020058
 8003108:	40020070 	.word	0x40020070
 800310c:	40020088 	.word	0x40020088
 8003110:	400200a0 	.word	0x400200a0
 8003114:	400200b8 	.word	0x400200b8
 8003118:	40020410 	.word	0x40020410
 800311c:	40020428 	.word	0x40020428
 8003120:	40020440 	.word	0x40020440
 8003124:	40020458 	.word	0x40020458
 8003128:	40020470 	.word	0x40020470
 800312c:	40020488 	.word	0x40020488
 8003130:	400204a0 	.word	0x400204a0
 8003134:	400204b8 	.word	0x400204b8
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	bf14      	ite	ne
 8003146:	2301      	movne	r3, #1
 8003148:	2300      	moveq	r3, #0
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 8087 	beq.w	8003260 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003156:	f003 031f 	and.w	r3, r3, #31
 800315a:	2220      	movs	r2, #32
 800315c:	409a      	lsls	r2, r3
 800315e:	6a3b      	ldr	r3, [r7, #32]
 8003160:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b04      	cmp	r3, #4
 800316c:	d139      	bne.n	80031e2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 0216 	bic.w	r2, r2, #22
 800317c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	695a      	ldr	r2, [r3, #20]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800318c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003192:	2b00      	cmp	r3, #0
 8003194:	d103      	bne.n	800319e <HAL_DMA_IRQHandler+0x736>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800319a:	2b00      	cmp	r3, #0
 800319c:	d007      	beq.n	80031ae <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0208 	bic.w	r2, r2, #8
 80031ac:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b2:	f003 031f 	and.w	r3, r3, #31
 80031b6:	223f      	movs	r2, #63	@ 0x3f
 80031b8:	409a      	lsls	r2, r3
 80031ba:	6a3b      	ldr	r3, [r7, #32]
 80031bc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f000 834a 	beq.w	800386c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	4798      	blx	r3
          }
          return;
 80031e0:	e344      	b.n	800386c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d018      	beq.n	8003222 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d108      	bne.n	8003210 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003202:	2b00      	cmp	r3, #0
 8003204:	d02c      	beq.n	8003260 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	4798      	blx	r3
 800320e:	e027      	b.n	8003260 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003214:	2b00      	cmp	r3, #0
 8003216:	d023      	beq.n	8003260 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	4798      	blx	r3
 8003220:	e01e      	b.n	8003260 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10f      	bne.n	8003250 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 0210 	bic.w	r2, r2, #16
 800323e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 8306 	beq.w	8003876 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 8088 	beq.w	8003388 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2204      	movs	r2, #4
 800327c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a7a      	ldr	r2, [pc, #488]	@ (8003470 <HAL_DMA_IRQHandler+0xa08>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d04a      	beq.n	8003320 <HAL_DMA_IRQHandler+0x8b8>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a79      	ldr	r2, [pc, #484]	@ (8003474 <HAL_DMA_IRQHandler+0xa0c>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d045      	beq.n	8003320 <HAL_DMA_IRQHandler+0x8b8>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a77      	ldr	r2, [pc, #476]	@ (8003478 <HAL_DMA_IRQHandler+0xa10>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d040      	beq.n	8003320 <HAL_DMA_IRQHandler+0x8b8>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a76      	ldr	r2, [pc, #472]	@ (800347c <HAL_DMA_IRQHandler+0xa14>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d03b      	beq.n	8003320 <HAL_DMA_IRQHandler+0x8b8>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a74      	ldr	r2, [pc, #464]	@ (8003480 <HAL_DMA_IRQHandler+0xa18>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d036      	beq.n	8003320 <HAL_DMA_IRQHandler+0x8b8>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a73      	ldr	r2, [pc, #460]	@ (8003484 <HAL_DMA_IRQHandler+0xa1c>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d031      	beq.n	8003320 <HAL_DMA_IRQHandler+0x8b8>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a71      	ldr	r2, [pc, #452]	@ (8003488 <HAL_DMA_IRQHandler+0xa20>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d02c      	beq.n	8003320 <HAL_DMA_IRQHandler+0x8b8>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a70      	ldr	r2, [pc, #448]	@ (800348c <HAL_DMA_IRQHandler+0xa24>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d027      	beq.n	8003320 <HAL_DMA_IRQHandler+0x8b8>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a6e      	ldr	r2, [pc, #440]	@ (8003490 <HAL_DMA_IRQHandler+0xa28>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d022      	beq.n	8003320 <HAL_DMA_IRQHandler+0x8b8>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a6d      	ldr	r2, [pc, #436]	@ (8003494 <HAL_DMA_IRQHandler+0xa2c>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d01d      	beq.n	8003320 <HAL_DMA_IRQHandler+0x8b8>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a6b      	ldr	r2, [pc, #428]	@ (8003498 <HAL_DMA_IRQHandler+0xa30>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d018      	beq.n	8003320 <HAL_DMA_IRQHandler+0x8b8>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a6a      	ldr	r2, [pc, #424]	@ (800349c <HAL_DMA_IRQHandler+0xa34>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d013      	beq.n	8003320 <HAL_DMA_IRQHandler+0x8b8>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a68      	ldr	r2, [pc, #416]	@ (80034a0 <HAL_DMA_IRQHandler+0xa38>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d00e      	beq.n	8003320 <HAL_DMA_IRQHandler+0x8b8>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a67      	ldr	r2, [pc, #412]	@ (80034a4 <HAL_DMA_IRQHandler+0xa3c>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d009      	beq.n	8003320 <HAL_DMA_IRQHandler+0x8b8>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a65      	ldr	r2, [pc, #404]	@ (80034a8 <HAL_DMA_IRQHandler+0xa40>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d004      	beq.n	8003320 <HAL_DMA_IRQHandler+0x8b8>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a64      	ldr	r2, [pc, #400]	@ (80034ac <HAL_DMA_IRQHandler+0xa44>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d108      	bne.n	8003332 <HAL_DMA_IRQHandler+0x8ca>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0201 	bic.w	r2, r2, #1
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	e007      	b.n	8003342 <HAL_DMA_IRQHandler+0x8da>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 0201 	bic.w	r2, r2, #1
 8003340:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	3301      	adds	r3, #1
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800334a:	429a      	cmp	r2, r3
 800334c:	d307      	bcc.n	800335e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1f2      	bne.n	8003342 <HAL_DMA_IRQHandler+0x8da>
 800335c:	e000      	b.n	8003360 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800335e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d004      	beq.n	8003378 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2203      	movs	r2, #3
 8003372:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003376:	e003      	b.n	8003380 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 8272 	beq.w	8003876 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	4798      	blx	r3
 800339a:	e26c      	b.n	8003876 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a43      	ldr	r2, [pc, #268]	@ (80034b0 <HAL_DMA_IRQHandler+0xa48>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d022      	beq.n	80033ec <HAL_DMA_IRQHandler+0x984>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a42      	ldr	r2, [pc, #264]	@ (80034b4 <HAL_DMA_IRQHandler+0xa4c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d01d      	beq.n	80033ec <HAL_DMA_IRQHandler+0x984>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a40      	ldr	r2, [pc, #256]	@ (80034b8 <HAL_DMA_IRQHandler+0xa50>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d018      	beq.n	80033ec <HAL_DMA_IRQHandler+0x984>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a3f      	ldr	r2, [pc, #252]	@ (80034bc <HAL_DMA_IRQHandler+0xa54>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d013      	beq.n	80033ec <HAL_DMA_IRQHandler+0x984>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a3d      	ldr	r2, [pc, #244]	@ (80034c0 <HAL_DMA_IRQHandler+0xa58>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d00e      	beq.n	80033ec <HAL_DMA_IRQHandler+0x984>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a3c      	ldr	r2, [pc, #240]	@ (80034c4 <HAL_DMA_IRQHandler+0xa5c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d009      	beq.n	80033ec <HAL_DMA_IRQHandler+0x984>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a3a      	ldr	r2, [pc, #232]	@ (80034c8 <HAL_DMA_IRQHandler+0xa60>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d004      	beq.n	80033ec <HAL_DMA_IRQHandler+0x984>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a39      	ldr	r2, [pc, #228]	@ (80034cc <HAL_DMA_IRQHandler+0xa64>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d101      	bne.n	80033f0 <HAL_DMA_IRQHandler+0x988>
 80033ec:	2301      	movs	r3, #1
 80033ee:	e000      	b.n	80033f2 <HAL_DMA_IRQHandler+0x98a>
 80033f0:	2300      	movs	r3, #0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f000 823f 	beq.w	8003876 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003404:	f003 031f 	and.w	r3, r3, #31
 8003408:	2204      	movs	r2, #4
 800340a:	409a      	lsls	r2, r3
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	4013      	ands	r3, r2
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 80cd 	beq.w	80035b0 <HAL_DMA_IRQHandler+0xb48>
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 80c7 	beq.w	80035b0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003426:	f003 031f 	and.w	r3, r3, #31
 800342a:	2204      	movs	r2, #4
 800342c:	409a      	lsls	r2, r3
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d049      	beq.n	80034d0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d109      	bne.n	800345a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800344a:	2b00      	cmp	r3, #0
 800344c:	f000 8210 	beq.w	8003870 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003458:	e20a      	b.n	8003870 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 8206 	beq.w	8003870 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800346c:	e200      	b.n	8003870 <HAL_DMA_IRQHandler+0xe08>
 800346e:	bf00      	nop
 8003470:	40020010 	.word	0x40020010
 8003474:	40020028 	.word	0x40020028
 8003478:	40020040 	.word	0x40020040
 800347c:	40020058 	.word	0x40020058
 8003480:	40020070 	.word	0x40020070
 8003484:	40020088 	.word	0x40020088
 8003488:	400200a0 	.word	0x400200a0
 800348c:	400200b8 	.word	0x400200b8
 8003490:	40020410 	.word	0x40020410
 8003494:	40020428 	.word	0x40020428
 8003498:	40020440 	.word	0x40020440
 800349c:	40020458 	.word	0x40020458
 80034a0:	40020470 	.word	0x40020470
 80034a4:	40020488 	.word	0x40020488
 80034a8:	400204a0 	.word	0x400204a0
 80034ac:	400204b8 	.word	0x400204b8
 80034b0:	58025408 	.word	0x58025408
 80034b4:	5802541c 	.word	0x5802541c
 80034b8:	58025430 	.word	0x58025430
 80034bc:	58025444 	.word	0x58025444
 80034c0:	58025458 	.word	0x58025458
 80034c4:	5802546c 	.word	0x5802546c
 80034c8:	58025480 	.word	0x58025480
 80034cc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	f003 0320 	and.w	r3, r3, #32
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d160      	bne.n	800359c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a7f      	ldr	r2, [pc, #508]	@ (80036dc <HAL_DMA_IRQHandler+0xc74>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d04a      	beq.n	800357a <HAL_DMA_IRQHandler+0xb12>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a7d      	ldr	r2, [pc, #500]	@ (80036e0 <HAL_DMA_IRQHandler+0xc78>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d045      	beq.n	800357a <HAL_DMA_IRQHandler+0xb12>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a7c      	ldr	r2, [pc, #496]	@ (80036e4 <HAL_DMA_IRQHandler+0xc7c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d040      	beq.n	800357a <HAL_DMA_IRQHandler+0xb12>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a7a      	ldr	r2, [pc, #488]	@ (80036e8 <HAL_DMA_IRQHandler+0xc80>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d03b      	beq.n	800357a <HAL_DMA_IRQHandler+0xb12>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a79      	ldr	r2, [pc, #484]	@ (80036ec <HAL_DMA_IRQHandler+0xc84>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d036      	beq.n	800357a <HAL_DMA_IRQHandler+0xb12>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a77      	ldr	r2, [pc, #476]	@ (80036f0 <HAL_DMA_IRQHandler+0xc88>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d031      	beq.n	800357a <HAL_DMA_IRQHandler+0xb12>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a76      	ldr	r2, [pc, #472]	@ (80036f4 <HAL_DMA_IRQHandler+0xc8c>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d02c      	beq.n	800357a <HAL_DMA_IRQHandler+0xb12>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a74      	ldr	r2, [pc, #464]	@ (80036f8 <HAL_DMA_IRQHandler+0xc90>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d027      	beq.n	800357a <HAL_DMA_IRQHandler+0xb12>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a73      	ldr	r2, [pc, #460]	@ (80036fc <HAL_DMA_IRQHandler+0xc94>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d022      	beq.n	800357a <HAL_DMA_IRQHandler+0xb12>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a71      	ldr	r2, [pc, #452]	@ (8003700 <HAL_DMA_IRQHandler+0xc98>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d01d      	beq.n	800357a <HAL_DMA_IRQHandler+0xb12>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a70      	ldr	r2, [pc, #448]	@ (8003704 <HAL_DMA_IRQHandler+0xc9c>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d018      	beq.n	800357a <HAL_DMA_IRQHandler+0xb12>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a6e      	ldr	r2, [pc, #440]	@ (8003708 <HAL_DMA_IRQHandler+0xca0>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d013      	beq.n	800357a <HAL_DMA_IRQHandler+0xb12>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a6d      	ldr	r2, [pc, #436]	@ (800370c <HAL_DMA_IRQHandler+0xca4>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d00e      	beq.n	800357a <HAL_DMA_IRQHandler+0xb12>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a6b      	ldr	r2, [pc, #428]	@ (8003710 <HAL_DMA_IRQHandler+0xca8>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d009      	beq.n	800357a <HAL_DMA_IRQHandler+0xb12>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a6a      	ldr	r2, [pc, #424]	@ (8003714 <HAL_DMA_IRQHandler+0xcac>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d004      	beq.n	800357a <HAL_DMA_IRQHandler+0xb12>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a68      	ldr	r2, [pc, #416]	@ (8003718 <HAL_DMA_IRQHandler+0xcb0>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d108      	bne.n	800358c <HAL_DMA_IRQHandler+0xb24>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 0208 	bic.w	r2, r2, #8
 8003588:	601a      	str	r2, [r3, #0]
 800358a:	e007      	b.n	800359c <HAL_DMA_IRQHandler+0xb34>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0204 	bic.w	r2, r2, #4
 800359a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 8165 	beq.w	8003870 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035ae:	e15f      	b.n	8003870 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b4:	f003 031f 	and.w	r3, r3, #31
 80035b8:	2202      	movs	r2, #2
 80035ba:	409a      	lsls	r2, r3
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	4013      	ands	r3, r2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 80c5 	beq.w	8003750 <HAL_DMA_IRQHandler+0xce8>
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 80bf 	beq.w	8003750 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035d6:	f003 031f 	and.w	r3, r3, #31
 80035da:	2202      	movs	r2, #2
 80035dc:	409a      	lsls	r2, r3
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d018      	beq.n	800361e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d109      	bne.n	800360a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 813a 	beq.w	8003874 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003608:	e134      	b.n	8003874 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 8130 	beq.w	8003874 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800361c:	e12a      	b.n	8003874 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	f003 0320 	and.w	r3, r3, #32
 8003624:	2b00      	cmp	r3, #0
 8003626:	f040 8089 	bne.w	800373c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a2b      	ldr	r2, [pc, #172]	@ (80036dc <HAL_DMA_IRQHandler+0xc74>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d04a      	beq.n	80036ca <HAL_DMA_IRQHandler+0xc62>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a29      	ldr	r2, [pc, #164]	@ (80036e0 <HAL_DMA_IRQHandler+0xc78>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d045      	beq.n	80036ca <HAL_DMA_IRQHandler+0xc62>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a28      	ldr	r2, [pc, #160]	@ (80036e4 <HAL_DMA_IRQHandler+0xc7c>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d040      	beq.n	80036ca <HAL_DMA_IRQHandler+0xc62>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a26      	ldr	r2, [pc, #152]	@ (80036e8 <HAL_DMA_IRQHandler+0xc80>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d03b      	beq.n	80036ca <HAL_DMA_IRQHandler+0xc62>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a25      	ldr	r2, [pc, #148]	@ (80036ec <HAL_DMA_IRQHandler+0xc84>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d036      	beq.n	80036ca <HAL_DMA_IRQHandler+0xc62>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a23      	ldr	r2, [pc, #140]	@ (80036f0 <HAL_DMA_IRQHandler+0xc88>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d031      	beq.n	80036ca <HAL_DMA_IRQHandler+0xc62>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a22      	ldr	r2, [pc, #136]	@ (80036f4 <HAL_DMA_IRQHandler+0xc8c>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d02c      	beq.n	80036ca <HAL_DMA_IRQHandler+0xc62>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a20      	ldr	r2, [pc, #128]	@ (80036f8 <HAL_DMA_IRQHandler+0xc90>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d027      	beq.n	80036ca <HAL_DMA_IRQHandler+0xc62>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a1f      	ldr	r2, [pc, #124]	@ (80036fc <HAL_DMA_IRQHandler+0xc94>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d022      	beq.n	80036ca <HAL_DMA_IRQHandler+0xc62>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a1d      	ldr	r2, [pc, #116]	@ (8003700 <HAL_DMA_IRQHandler+0xc98>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d01d      	beq.n	80036ca <HAL_DMA_IRQHandler+0xc62>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a1c      	ldr	r2, [pc, #112]	@ (8003704 <HAL_DMA_IRQHandler+0xc9c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d018      	beq.n	80036ca <HAL_DMA_IRQHandler+0xc62>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a1a      	ldr	r2, [pc, #104]	@ (8003708 <HAL_DMA_IRQHandler+0xca0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d013      	beq.n	80036ca <HAL_DMA_IRQHandler+0xc62>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a19      	ldr	r2, [pc, #100]	@ (800370c <HAL_DMA_IRQHandler+0xca4>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d00e      	beq.n	80036ca <HAL_DMA_IRQHandler+0xc62>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a17      	ldr	r2, [pc, #92]	@ (8003710 <HAL_DMA_IRQHandler+0xca8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d009      	beq.n	80036ca <HAL_DMA_IRQHandler+0xc62>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a16      	ldr	r2, [pc, #88]	@ (8003714 <HAL_DMA_IRQHandler+0xcac>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d004      	beq.n	80036ca <HAL_DMA_IRQHandler+0xc62>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a14      	ldr	r2, [pc, #80]	@ (8003718 <HAL_DMA_IRQHandler+0xcb0>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d128      	bne.n	800371c <HAL_DMA_IRQHandler+0xcb4>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0214 	bic.w	r2, r2, #20
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	e027      	b.n	800372c <HAL_DMA_IRQHandler+0xcc4>
 80036dc:	40020010 	.word	0x40020010
 80036e0:	40020028 	.word	0x40020028
 80036e4:	40020040 	.word	0x40020040
 80036e8:	40020058 	.word	0x40020058
 80036ec:	40020070 	.word	0x40020070
 80036f0:	40020088 	.word	0x40020088
 80036f4:	400200a0 	.word	0x400200a0
 80036f8:	400200b8 	.word	0x400200b8
 80036fc:	40020410 	.word	0x40020410
 8003700:	40020428 	.word	0x40020428
 8003704:	40020440 	.word	0x40020440
 8003708:	40020458 	.word	0x40020458
 800370c:	40020470 	.word	0x40020470
 8003710:	40020488 	.word	0x40020488
 8003714:	400204a0 	.word	0x400204a0
 8003718:	400204b8 	.word	0x400204b8
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 020a 	bic.w	r2, r2, #10
 800372a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 8097 	beq.w	8003874 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800374e:	e091      	b.n	8003874 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003754:	f003 031f 	and.w	r3, r3, #31
 8003758:	2208      	movs	r2, #8
 800375a:	409a      	lsls	r2, r3
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	4013      	ands	r3, r2
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 8088 	beq.w	8003876 <HAL_DMA_IRQHandler+0xe0e>
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	f003 0308 	and.w	r3, r3, #8
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 8082 	beq.w	8003876 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a41      	ldr	r2, [pc, #260]	@ (800387c <HAL_DMA_IRQHandler+0xe14>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d04a      	beq.n	8003812 <HAL_DMA_IRQHandler+0xdaa>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a3f      	ldr	r2, [pc, #252]	@ (8003880 <HAL_DMA_IRQHandler+0xe18>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d045      	beq.n	8003812 <HAL_DMA_IRQHandler+0xdaa>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a3e      	ldr	r2, [pc, #248]	@ (8003884 <HAL_DMA_IRQHandler+0xe1c>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d040      	beq.n	8003812 <HAL_DMA_IRQHandler+0xdaa>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a3c      	ldr	r2, [pc, #240]	@ (8003888 <HAL_DMA_IRQHandler+0xe20>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d03b      	beq.n	8003812 <HAL_DMA_IRQHandler+0xdaa>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a3b      	ldr	r2, [pc, #236]	@ (800388c <HAL_DMA_IRQHandler+0xe24>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d036      	beq.n	8003812 <HAL_DMA_IRQHandler+0xdaa>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a39      	ldr	r2, [pc, #228]	@ (8003890 <HAL_DMA_IRQHandler+0xe28>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d031      	beq.n	8003812 <HAL_DMA_IRQHandler+0xdaa>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a38      	ldr	r2, [pc, #224]	@ (8003894 <HAL_DMA_IRQHandler+0xe2c>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d02c      	beq.n	8003812 <HAL_DMA_IRQHandler+0xdaa>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a36      	ldr	r2, [pc, #216]	@ (8003898 <HAL_DMA_IRQHandler+0xe30>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d027      	beq.n	8003812 <HAL_DMA_IRQHandler+0xdaa>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a35      	ldr	r2, [pc, #212]	@ (800389c <HAL_DMA_IRQHandler+0xe34>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d022      	beq.n	8003812 <HAL_DMA_IRQHandler+0xdaa>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a33      	ldr	r2, [pc, #204]	@ (80038a0 <HAL_DMA_IRQHandler+0xe38>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d01d      	beq.n	8003812 <HAL_DMA_IRQHandler+0xdaa>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a32      	ldr	r2, [pc, #200]	@ (80038a4 <HAL_DMA_IRQHandler+0xe3c>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d018      	beq.n	8003812 <HAL_DMA_IRQHandler+0xdaa>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a30      	ldr	r2, [pc, #192]	@ (80038a8 <HAL_DMA_IRQHandler+0xe40>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d013      	beq.n	8003812 <HAL_DMA_IRQHandler+0xdaa>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a2f      	ldr	r2, [pc, #188]	@ (80038ac <HAL_DMA_IRQHandler+0xe44>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d00e      	beq.n	8003812 <HAL_DMA_IRQHandler+0xdaa>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a2d      	ldr	r2, [pc, #180]	@ (80038b0 <HAL_DMA_IRQHandler+0xe48>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d009      	beq.n	8003812 <HAL_DMA_IRQHandler+0xdaa>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a2c      	ldr	r2, [pc, #176]	@ (80038b4 <HAL_DMA_IRQHandler+0xe4c>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d004      	beq.n	8003812 <HAL_DMA_IRQHandler+0xdaa>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a2a      	ldr	r2, [pc, #168]	@ (80038b8 <HAL_DMA_IRQHandler+0xe50>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d108      	bne.n	8003824 <HAL_DMA_IRQHandler+0xdbc>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 021c 	bic.w	r2, r2, #28
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	e007      	b.n	8003834 <HAL_DMA_IRQHandler+0xdcc>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 020e 	bic.w	r2, r2, #14
 8003832:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003838:	f003 031f 	and.w	r3, r3, #31
 800383c:	2201      	movs	r2, #1
 800383e:	409a      	lsls	r2, r3
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800385e:	2b00      	cmp	r3, #0
 8003860:	d009      	beq.n	8003876 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	4798      	blx	r3
 800386a:	e004      	b.n	8003876 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800386c:	bf00      	nop
 800386e:	e002      	b.n	8003876 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003870:	bf00      	nop
 8003872:	e000      	b.n	8003876 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003874:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003876:	3728      	adds	r7, #40	@ 0x28
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	40020010 	.word	0x40020010
 8003880:	40020028 	.word	0x40020028
 8003884:	40020040 	.word	0x40020040
 8003888:	40020058 	.word	0x40020058
 800388c:	40020070 	.word	0x40020070
 8003890:	40020088 	.word	0x40020088
 8003894:	400200a0 	.word	0x400200a0
 8003898:	400200b8 	.word	0x400200b8
 800389c:	40020410 	.word	0x40020410
 80038a0:	40020428 	.word	0x40020428
 80038a4:	40020440 	.word	0x40020440
 80038a8:	40020458 	.word	0x40020458
 80038ac:	40020470 	.word	0x40020470
 80038b0:	40020488 	.word	0x40020488
 80038b4:	400204a0 	.word	0x400204a0
 80038b8:	400204b8 	.word	0x400204b8

080038bc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038bc:	b480      	push	{r7}
 80038be:	b087      	sub	sp, #28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
 80038c8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ce:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a7f      	ldr	r2, [pc, #508]	@ (8003ad8 <DMA_SetConfig+0x21c>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d072      	beq.n	80039c6 <DMA_SetConfig+0x10a>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a7d      	ldr	r2, [pc, #500]	@ (8003adc <DMA_SetConfig+0x220>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d06d      	beq.n	80039c6 <DMA_SetConfig+0x10a>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a7c      	ldr	r2, [pc, #496]	@ (8003ae0 <DMA_SetConfig+0x224>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d068      	beq.n	80039c6 <DMA_SetConfig+0x10a>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a7a      	ldr	r2, [pc, #488]	@ (8003ae4 <DMA_SetConfig+0x228>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d063      	beq.n	80039c6 <DMA_SetConfig+0x10a>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a79      	ldr	r2, [pc, #484]	@ (8003ae8 <DMA_SetConfig+0x22c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d05e      	beq.n	80039c6 <DMA_SetConfig+0x10a>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a77      	ldr	r2, [pc, #476]	@ (8003aec <DMA_SetConfig+0x230>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d059      	beq.n	80039c6 <DMA_SetConfig+0x10a>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a76      	ldr	r2, [pc, #472]	@ (8003af0 <DMA_SetConfig+0x234>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d054      	beq.n	80039c6 <DMA_SetConfig+0x10a>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a74      	ldr	r2, [pc, #464]	@ (8003af4 <DMA_SetConfig+0x238>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d04f      	beq.n	80039c6 <DMA_SetConfig+0x10a>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a73      	ldr	r2, [pc, #460]	@ (8003af8 <DMA_SetConfig+0x23c>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d04a      	beq.n	80039c6 <DMA_SetConfig+0x10a>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a71      	ldr	r2, [pc, #452]	@ (8003afc <DMA_SetConfig+0x240>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d045      	beq.n	80039c6 <DMA_SetConfig+0x10a>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a70      	ldr	r2, [pc, #448]	@ (8003b00 <DMA_SetConfig+0x244>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d040      	beq.n	80039c6 <DMA_SetConfig+0x10a>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a6e      	ldr	r2, [pc, #440]	@ (8003b04 <DMA_SetConfig+0x248>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d03b      	beq.n	80039c6 <DMA_SetConfig+0x10a>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a6d      	ldr	r2, [pc, #436]	@ (8003b08 <DMA_SetConfig+0x24c>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d036      	beq.n	80039c6 <DMA_SetConfig+0x10a>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a6b      	ldr	r2, [pc, #428]	@ (8003b0c <DMA_SetConfig+0x250>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d031      	beq.n	80039c6 <DMA_SetConfig+0x10a>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a6a      	ldr	r2, [pc, #424]	@ (8003b10 <DMA_SetConfig+0x254>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d02c      	beq.n	80039c6 <DMA_SetConfig+0x10a>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a68      	ldr	r2, [pc, #416]	@ (8003b14 <DMA_SetConfig+0x258>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d027      	beq.n	80039c6 <DMA_SetConfig+0x10a>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a67      	ldr	r2, [pc, #412]	@ (8003b18 <DMA_SetConfig+0x25c>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d022      	beq.n	80039c6 <DMA_SetConfig+0x10a>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a65      	ldr	r2, [pc, #404]	@ (8003b1c <DMA_SetConfig+0x260>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d01d      	beq.n	80039c6 <DMA_SetConfig+0x10a>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a64      	ldr	r2, [pc, #400]	@ (8003b20 <DMA_SetConfig+0x264>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d018      	beq.n	80039c6 <DMA_SetConfig+0x10a>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a62      	ldr	r2, [pc, #392]	@ (8003b24 <DMA_SetConfig+0x268>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d013      	beq.n	80039c6 <DMA_SetConfig+0x10a>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a61      	ldr	r2, [pc, #388]	@ (8003b28 <DMA_SetConfig+0x26c>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d00e      	beq.n	80039c6 <DMA_SetConfig+0x10a>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a5f      	ldr	r2, [pc, #380]	@ (8003b2c <DMA_SetConfig+0x270>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d009      	beq.n	80039c6 <DMA_SetConfig+0x10a>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a5e      	ldr	r2, [pc, #376]	@ (8003b30 <DMA_SetConfig+0x274>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d004      	beq.n	80039c6 <DMA_SetConfig+0x10a>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a5c      	ldr	r2, [pc, #368]	@ (8003b34 <DMA_SetConfig+0x278>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d101      	bne.n	80039ca <DMA_SetConfig+0x10e>
 80039c6:	2301      	movs	r3, #1
 80039c8:	e000      	b.n	80039cc <DMA_SetConfig+0x110>
 80039ca:	2300      	movs	r3, #0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00d      	beq.n	80039ec <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80039d8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d004      	beq.n	80039ec <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80039ea:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a39      	ldr	r2, [pc, #228]	@ (8003ad8 <DMA_SetConfig+0x21c>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d04a      	beq.n	8003a8c <DMA_SetConfig+0x1d0>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a38      	ldr	r2, [pc, #224]	@ (8003adc <DMA_SetConfig+0x220>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d045      	beq.n	8003a8c <DMA_SetConfig+0x1d0>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a36      	ldr	r2, [pc, #216]	@ (8003ae0 <DMA_SetConfig+0x224>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d040      	beq.n	8003a8c <DMA_SetConfig+0x1d0>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a35      	ldr	r2, [pc, #212]	@ (8003ae4 <DMA_SetConfig+0x228>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d03b      	beq.n	8003a8c <DMA_SetConfig+0x1d0>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a33      	ldr	r2, [pc, #204]	@ (8003ae8 <DMA_SetConfig+0x22c>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d036      	beq.n	8003a8c <DMA_SetConfig+0x1d0>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a32      	ldr	r2, [pc, #200]	@ (8003aec <DMA_SetConfig+0x230>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d031      	beq.n	8003a8c <DMA_SetConfig+0x1d0>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a30      	ldr	r2, [pc, #192]	@ (8003af0 <DMA_SetConfig+0x234>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d02c      	beq.n	8003a8c <DMA_SetConfig+0x1d0>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a2f      	ldr	r2, [pc, #188]	@ (8003af4 <DMA_SetConfig+0x238>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d027      	beq.n	8003a8c <DMA_SetConfig+0x1d0>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a2d      	ldr	r2, [pc, #180]	@ (8003af8 <DMA_SetConfig+0x23c>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d022      	beq.n	8003a8c <DMA_SetConfig+0x1d0>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a2c      	ldr	r2, [pc, #176]	@ (8003afc <DMA_SetConfig+0x240>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d01d      	beq.n	8003a8c <DMA_SetConfig+0x1d0>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a2a      	ldr	r2, [pc, #168]	@ (8003b00 <DMA_SetConfig+0x244>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d018      	beq.n	8003a8c <DMA_SetConfig+0x1d0>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a29      	ldr	r2, [pc, #164]	@ (8003b04 <DMA_SetConfig+0x248>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d013      	beq.n	8003a8c <DMA_SetConfig+0x1d0>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a27      	ldr	r2, [pc, #156]	@ (8003b08 <DMA_SetConfig+0x24c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d00e      	beq.n	8003a8c <DMA_SetConfig+0x1d0>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a26      	ldr	r2, [pc, #152]	@ (8003b0c <DMA_SetConfig+0x250>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d009      	beq.n	8003a8c <DMA_SetConfig+0x1d0>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a24      	ldr	r2, [pc, #144]	@ (8003b10 <DMA_SetConfig+0x254>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d004      	beq.n	8003a8c <DMA_SetConfig+0x1d0>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a23      	ldr	r2, [pc, #140]	@ (8003b14 <DMA_SetConfig+0x258>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d101      	bne.n	8003a90 <DMA_SetConfig+0x1d4>
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e000      	b.n	8003a92 <DMA_SetConfig+0x1d6>
 8003a90:	2300      	movs	r3, #0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d059      	beq.n	8003b4a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a9a:	f003 031f 	and.w	r3, r3, #31
 8003a9e:	223f      	movs	r2, #63	@ 0x3f
 8003aa0:	409a      	lsls	r2, r3
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003ab4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	2b40      	cmp	r3, #64	@ 0x40
 8003ac4:	d138      	bne.n	8003b38 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003ad6:	e086      	b.n	8003be6 <DMA_SetConfig+0x32a>
 8003ad8:	40020010 	.word	0x40020010
 8003adc:	40020028 	.word	0x40020028
 8003ae0:	40020040 	.word	0x40020040
 8003ae4:	40020058 	.word	0x40020058
 8003ae8:	40020070 	.word	0x40020070
 8003aec:	40020088 	.word	0x40020088
 8003af0:	400200a0 	.word	0x400200a0
 8003af4:	400200b8 	.word	0x400200b8
 8003af8:	40020410 	.word	0x40020410
 8003afc:	40020428 	.word	0x40020428
 8003b00:	40020440 	.word	0x40020440
 8003b04:	40020458 	.word	0x40020458
 8003b08:	40020470 	.word	0x40020470
 8003b0c:	40020488 	.word	0x40020488
 8003b10:	400204a0 	.word	0x400204a0
 8003b14:	400204b8 	.word	0x400204b8
 8003b18:	58025408 	.word	0x58025408
 8003b1c:	5802541c 	.word	0x5802541c
 8003b20:	58025430 	.word	0x58025430
 8003b24:	58025444 	.word	0x58025444
 8003b28:	58025458 	.word	0x58025458
 8003b2c:	5802546c 	.word	0x5802546c
 8003b30:	58025480 	.word	0x58025480
 8003b34:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	60da      	str	r2, [r3, #12]
}
 8003b48:	e04d      	b.n	8003be6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a29      	ldr	r2, [pc, #164]	@ (8003bf4 <DMA_SetConfig+0x338>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d022      	beq.n	8003b9a <DMA_SetConfig+0x2de>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a27      	ldr	r2, [pc, #156]	@ (8003bf8 <DMA_SetConfig+0x33c>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d01d      	beq.n	8003b9a <DMA_SetConfig+0x2de>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a26      	ldr	r2, [pc, #152]	@ (8003bfc <DMA_SetConfig+0x340>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d018      	beq.n	8003b9a <DMA_SetConfig+0x2de>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a24      	ldr	r2, [pc, #144]	@ (8003c00 <DMA_SetConfig+0x344>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d013      	beq.n	8003b9a <DMA_SetConfig+0x2de>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a23      	ldr	r2, [pc, #140]	@ (8003c04 <DMA_SetConfig+0x348>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d00e      	beq.n	8003b9a <DMA_SetConfig+0x2de>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a21      	ldr	r2, [pc, #132]	@ (8003c08 <DMA_SetConfig+0x34c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d009      	beq.n	8003b9a <DMA_SetConfig+0x2de>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a20      	ldr	r2, [pc, #128]	@ (8003c0c <DMA_SetConfig+0x350>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d004      	beq.n	8003b9a <DMA_SetConfig+0x2de>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a1e      	ldr	r2, [pc, #120]	@ (8003c10 <DMA_SetConfig+0x354>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d101      	bne.n	8003b9e <DMA_SetConfig+0x2e2>
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e000      	b.n	8003ba0 <DMA_SetConfig+0x2e4>
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d020      	beq.n	8003be6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ba8:	f003 031f 	and.w	r3, r3, #31
 8003bac:	2201      	movs	r2, #1
 8003bae:	409a      	lsls	r2, r3
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	2b40      	cmp	r3, #64	@ 0x40
 8003bc2:	d108      	bne.n	8003bd6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	60da      	str	r2, [r3, #12]
}
 8003bd4:	e007      	b.n	8003be6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	60da      	str	r2, [r3, #12]
}
 8003be6:	bf00      	nop
 8003be8:	371c      	adds	r7, #28
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	58025408 	.word	0x58025408
 8003bf8:	5802541c 	.word	0x5802541c
 8003bfc:	58025430 	.word	0x58025430
 8003c00:	58025444 	.word	0x58025444
 8003c04:	58025458 	.word	0x58025458
 8003c08:	5802546c 	.word	0x5802546c
 8003c0c:	58025480 	.word	0x58025480
 8003c10:	58025494 	.word	0x58025494

08003c14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a42      	ldr	r2, [pc, #264]	@ (8003d2c <DMA_CalcBaseAndBitshift+0x118>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d04a      	beq.n	8003cbc <DMA_CalcBaseAndBitshift+0xa8>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a41      	ldr	r2, [pc, #260]	@ (8003d30 <DMA_CalcBaseAndBitshift+0x11c>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d045      	beq.n	8003cbc <DMA_CalcBaseAndBitshift+0xa8>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a3f      	ldr	r2, [pc, #252]	@ (8003d34 <DMA_CalcBaseAndBitshift+0x120>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d040      	beq.n	8003cbc <DMA_CalcBaseAndBitshift+0xa8>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a3e      	ldr	r2, [pc, #248]	@ (8003d38 <DMA_CalcBaseAndBitshift+0x124>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d03b      	beq.n	8003cbc <DMA_CalcBaseAndBitshift+0xa8>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a3c      	ldr	r2, [pc, #240]	@ (8003d3c <DMA_CalcBaseAndBitshift+0x128>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d036      	beq.n	8003cbc <DMA_CalcBaseAndBitshift+0xa8>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a3b      	ldr	r2, [pc, #236]	@ (8003d40 <DMA_CalcBaseAndBitshift+0x12c>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d031      	beq.n	8003cbc <DMA_CalcBaseAndBitshift+0xa8>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a39      	ldr	r2, [pc, #228]	@ (8003d44 <DMA_CalcBaseAndBitshift+0x130>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d02c      	beq.n	8003cbc <DMA_CalcBaseAndBitshift+0xa8>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a38      	ldr	r2, [pc, #224]	@ (8003d48 <DMA_CalcBaseAndBitshift+0x134>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d027      	beq.n	8003cbc <DMA_CalcBaseAndBitshift+0xa8>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a36      	ldr	r2, [pc, #216]	@ (8003d4c <DMA_CalcBaseAndBitshift+0x138>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d022      	beq.n	8003cbc <DMA_CalcBaseAndBitshift+0xa8>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a35      	ldr	r2, [pc, #212]	@ (8003d50 <DMA_CalcBaseAndBitshift+0x13c>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d01d      	beq.n	8003cbc <DMA_CalcBaseAndBitshift+0xa8>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a33      	ldr	r2, [pc, #204]	@ (8003d54 <DMA_CalcBaseAndBitshift+0x140>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d018      	beq.n	8003cbc <DMA_CalcBaseAndBitshift+0xa8>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a32      	ldr	r2, [pc, #200]	@ (8003d58 <DMA_CalcBaseAndBitshift+0x144>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d013      	beq.n	8003cbc <DMA_CalcBaseAndBitshift+0xa8>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a30      	ldr	r2, [pc, #192]	@ (8003d5c <DMA_CalcBaseAndBitshift+0x148>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d00e      	beq.n	8003cbc <DMA_CalcBaseAndBitshift+0xa8>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a2f      	ldr	r2, [pc, #188]	@ (8003d60 <DMA_CalcBaseAndBitshift+0x14c>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d009      	beq.n	8003cbc <DMA_CalcBaseAndBitshift+0xa8>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a2d      	ldr	r2, [pc, #180]	@ (8003d64 <DMA_CalcBaseAndBitshift+0x150>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d004      	beq.n	8003cbc <DMA_CalcBaseAndBitshift+0xa8>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a2c      	ldr	r2, [pc, #176]	@ (8003d68 <DMA_CalcBaseAndBitshift+0x154>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d101      	bne.n	8003cc0 <DMA_CalcBaseAndBitshift+0xac>
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e000      	b.n	8003cc2 <DMA_CalcBaseAndBitshift+0xae>
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d024      	beq.n	8003d10 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	3b10      	subs	r3, #16
 8003cce:	4a27      	ldr	r2, [pc, #156]	@ (8003d6c <DMA_CalcBaseAndBitshift+0x158>)
 8003cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd4:	091b      	lsrs	r3, r3, #4
 8003cd6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f003 0307 	and.w	r3, r3, #7
 8003cde:	4a24      	ldr	r2, [pc, #144]	@ (8003d70 <DMA_CalcBaseAndBitshift+0x15c>)
 8003ce0:	5cd3      	ldrb	r3, [r2, r3]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2b03      	cmp	r3, #3
 8003cec:	d908      	bls.n	8003d00 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	4b1f      	ldr	r3, [pc, #124]	@ (8003d74 <DMA_CalcBaseAndBitshift+0x160>)
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	1d1a      	adds	r2, r3, #4
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	659a      	str	r2, [r3, #88]	@ 0x58
 8003cfe:	e00d      	b.n	8003d1c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	461a      	mov	r2, r3
 8003d06:	4b1b      	ldr	r3, [pc, #108]	@ (8003d74 <DMA_CalcBaseAndBitshift+0x160>)
 8003d08:	4013      	ands	r3, r2
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d0e:	e005      	b.n	8003d1c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	40020010 	.word	0x40020010
 8003d30:	40020028 	.word	0x40020028
 8003d34:	40020040 	.word	0x40020040
 8003d38:	40020058 	.word	0x40020058
 8003d3c:	40020070 	.word	0x40020070
 8003d40:	40020088 	.word	0x40020088
 8003d44:	400200a0 	.word	0x400200a0
 8003d48:	400200b8 	.word	0x400200b8
 8003d4c:	40020410 	.word	0x40020410
 8003d50:	40020428 	.word	0x40020428
 8003d54:	40020440 	.word	0x40020440
 8003d58:	40020458 	.word	0x40020458
 8003d5c:	40020470 	.word	0x40020470
 8003d60:	40020488 	.word	0x40020488
 8003d64:	400204a0 	.word	0x400204a0
 8003d68:	400204b8 	.word	0x400204b8
 8003d6c:	aaaaaaab 	.word	0xaaaaaaab
 8003d70:	080083c0 	.word	0x080083c0
 8003d74:	fffffc00 	.word	0xfffffc00

08003d78 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d80:	2300      	movs	r3, #0
 8003d82:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d120      	bne.n	8003dce <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d90:	2b03      	cmp	r3, #3
 8003d92:	d858      	bhi.n	8003e46 <DMA_CheckFifoParam+0xce>
 8003d94:	a201      	add	r2, pc, #4	@ (adr r2, 8003d9c <DMA_CheckFifoParam+0x24>)
 8003d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9a:	bf00      	nop
 8003d9c:	08003dad 	.word	0x08003dad
 8003da0:	08003dbf 	.word	0x08003dbf
 8003da4:	08003dad 	.word	0x08003dad
 8003da8:	08003e47 	.word	0x08003e47
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d048      	beq.n	8003e4a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003dbc:	e045      	b.n	8003e4a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003dc6:	d142      	bne.n	8003e4e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003dcc:	e03f      	b.n	8003e4e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dd6:	d123      	bne.n	8003e20 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ddc:	2b03      	cmp	r3, #3
 8003dde:	d838      	bhi.n	8003e52 <DMA_CheckFifoParam+0xda>
 8003de0:	a201      	add	r2, pc, #4	@ (adr r2, 8003de8 <DMA_CheckFifoParam+0x70>)
 8003de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de6:	bf00      	nop
 8003de8:	08003df9 	.word	0x08003df9
 8003dec:	08003dff 	.word	0x08003dff
 8003df0:	08003df9 	.word	0x08003df9
 8003df4:	08003e11 	.word	0x08003e11
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	73fb      	strb	r3, [r7, #15]
        break;
 8003dfc:	e030      	b.n	8003e60 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e02:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d025      	beq.n	8003e56 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e0e:	e022      	b.n	8003e56 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e14:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e18:	d11f      	bne.n	8003e5a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e1e:	e01c      	b.n	8003e5a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d902      	bls.n	8003e2e <DMA_CheckFifoParam+0xb6>
 8003e28:	2b03      	cmp	r3, #3
 8003e2a:	d003      	beq.n	8003e34 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003e2c:	e018      	b.n	8003e60 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	73fb      	strb	r3, [r7, #15]
        break;
 8003e32:	e015      	b.n	8003e60 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00e      	beq.n	8003e5e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	73fb      	strb	r3, [r7, #15]
    break;
 8003e44:	e00b      	b.n	8003e5e <DMA_CheckFifoParam+0xe6>
        break;
 8003e46:	bf00      	nop
 8003e48:	e00a      	b.n	8003e60 <DMA_CheckFifoParam+0xe8>
        break;
 8003e4a:	bf00      	nop
 8003e4c:	e008      	b.n	8003e60 <DMA_CheckFifoParam+0xe8>
        break;
 8003e4e:	bf00      	nop
 8003e50:	e006      	b.n	8003e60 <DMA_CheckFifoParam+0xe8>
        break;
 8003e52:	bf00      	nop
 8003e54:	e004      	b.n	8003e60 <DMA_CheckFifoParam+0xe8>
        break;
 8003e56:	bf00      	nop
 8003e58:	e002      	b.n	8003e60 <DMA_CheckFifoParam+0xe8>
        break;
 8003e5a:	bf00      	nop
 8003e5c:	e000      	b.n	8003e60 <DMA_CheckFifoParam+0xe8>
    break;
 8003e5e:	bf00      	nop
    }
  }

  return status;
 8003e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop

08003e70 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a38      	ldr	r2, [pc, #224]	@ (8003f64 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d022      	beq.n	8003ece <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a36      	ldr	r2, [pc, #216]	@ (8003f68 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d01d      	beq.n	8003ece <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a35      	ldr	r2, [pc, #212]	@ (8003f6c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d018      	beq.n	8003ece <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a33      	ldr	r2, [pc, #204]	@ (8003f70 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d013      	beq.n	8003ece <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a32      	ldr	r2, [pc, #200]	@ (8003f74 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d00e      	beq.n	8003ece <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a30      	ldr	r2, [pc, #192]	@ (8003f78 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d009      	beq.n	8003ece <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a2f      	ldr	r2, [pc, #188]	@ (8003f7c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d004      	beq.n	8003ece <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a2d      	ldr	r2, [pc, #180]	@ (8003f80 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d101      	bne.n	8003ed2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e000      	b.n	8003ed4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d01a      	beq.n	8003f0e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	3b08      	subs	r3, #8
 8003ee0:	4a28      	ldr	r2, [pc, #160]	@ (8003f84 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee6:	091b      	lsrs	r3, r3, #4
 8003ee8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	4b26      	ldr	r3, [pc, #152]	@ (8003f88 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003eee:	4413      	add	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a24      	ldr	r2, [pc, #144]	@ (8003f8c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003efc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f003 031f 	and.w	r3, r3, #31
 8003f04:	2201      	movs	r2, #1
 8003f06:	409a      	lsls	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003f0c:	e024      	b.n	8003f58 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	3b10      	subs	r3, #16
 8003f16:	4a1e      	ldr	r2, [pc, #120]	@ (8003f90 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003f18:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1c:	091b      	lsrs	r3, r3, #4
 8003f1e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	4a1c      	ldr	r2, [pc, #112]	@ (8003f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d806      	bhi.n	8003f36 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	4a1b      	ldr	r2, [pc, #108]	@ (8003f98 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d902      	bls.n	8003f36 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	3308      	adds	r3, #8
 8003f34:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	4b18      	ldr	r3, [pc, #96]	@ (8003f9c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003f3a:	4413      	add	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	461a      	mov	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a16      	ldr	r2, [pc, #88]	@ (8003fa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003f48:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f003 031f 	and.w	r3, r3, #31
 8003f50:	2201      	movs	r2, #1
 8003f52:	409a      	lsls	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003f58:	bf00      	nop
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	58025408 	.word	0x58025408
 8003f68:	5802541c 	.word	0x5802541c
 8003f6c:	58025430 	.word	0x58025430
 8003f70:	58025444 	.word	0x58025444
 8003f74:	58025458 	.word	0x58025458
 8003f78:	5802546c 	.word	0x5802546c
 8003f7c:	58025480 	.word	0x58025480
 8003f80:	58025494 	.word	0x58025494
 8003f84:	cccccccd 	.word	0xcccccccd
 8003f88:	16009600 	.word	0x16009600
 8003f8c:	58025880 	.word	0x58025880
 8003f90:	aaaaaaab 	.word	0xaaaaaaab
 8003f94:	400204b8 	.word	0x400204b8
 8003f98:	4002040f 	.word	0x4002040f
 8003f9c:	10008200 	.word	0x10008200
 8003fa0:	40020880 	.word	0x40020880

08003fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d04a      	beq.n	8004050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d847      	bhi.n	8004050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a25      	ldr	r2, [pc, #148]	@ (800405c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d022      	beq.n	8004010 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a24      	ldr	r2, [pc, #144]	@ (8004060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d01d      	beq.n	8004010 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a22      	ldr	r2, [pc, #136]	@ (8004064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d018      	beq.n	8004010 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a21      	ldr	r2, [pc, #132]	@ (8004068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d013      	beq.n	8004010 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a1f      	ldr	r2, [pc, #124]	@ (800406c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d00e      	beq.n	8004010 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a1e      	ldr	r2, [pc, #120]	@ (8004070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d009      	beq.n	8004010 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a1c      	ldr	r2, [pc, #112]	@ (8004074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d004      	beq.n	8004010 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a1b      	ldr	r2, [pc, #108]	@ (8004078 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d101      	bne.n	8004014 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004010:	2301      	movs	r3, #1
 8004012:	e000      	b.n	8004016 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004014:	2300      	movs	r3, #0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00a      	beq.n	8004030 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	4b17      	ldr	r3, [pc, #92]	@ (800407c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800401e:	4413      	add	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	461a      	mov	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a15      	ldr	r2, [pc, #84]	@ (8004080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800402c:	671a      	str	r2, [r3, #112]	@ 0x70
 800402e:	e009      	b.n	8004044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	4b14      	ldr	r3, [pc, #80]	@ (8004084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004034:	4413      	add	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	461a      	mov	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a11      	ldr	r2, [pc, #68]	@ (8004088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004042:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	3b01      	subs	r3, #1
 8004048:	2201      	movs	r2, #1
 800404a:	409a      	lsls	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004050:	bf00      	nop
 8004052:	3714      	adds	r7, #20
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr
 800405c:	58025408 	.word	0x58025408
 8004060:	5802541c 	.word	0x5802541c
 8004064:	58025430 	.word	0x58025430
 8004068:	58025444 	.word	0x58025444
 800406c:	58025458 	.word	0x58025458
 8004070:	5802546c 	.word	0x5802546c
 8004074:	58025480 	.word	0x58025480
 8004078:	58025494 	.word	0x58025494
 800407c:	1600963f 	.word	0x1600963f
 8004080:	58025940 	.word	0x58025940
 8004084:	1000823f 	.word	0x1000823f
 8004088:	40020940 	.word	0x40020940

0800408c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800408c:	b480      	push	{r7}
 800408e:	b087      	sub	sp, #28
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	460b      	mov	r3, r1
 8004096:	607a      	str	r2, [r7, #4]
 8004098:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800409a:	2300      	movs	r3, #0
 800409c:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d101      	bne.n	80040a8 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e00a      	b.n	80040be <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 80040a8:	7afb      	ldrb	r3, [r7, #11]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d103      	bne.n	80040b6 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	605a      	str	r2, [r3, #4]
      break;
 80040b4:	e002      	b.n	80040bc <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	75fb      	strb	r3, [r7, #23]
      break;
 80040ba:	bf00      	nop
  }

  return status;
 80040bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80040be:	4618      	mov	r0, r3
 80040c0:	371c      	adds	r7, #28
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
 80040d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e003      	b.n	80040e6 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80040e4:	2300      	movs	r3, #0
  }
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
	...

080040f4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	0c1b      	lsrs	r3, r3, #16
 8004102:	f003 0303 	and.w	r3, r3, #3
 8004106:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 031f 	and.w	r3, r3, #31
 8004110:	2201      	movs	r2, #1
 8004112:	fa02 f303 	lsl.w	r3, r2, r3
 8004116:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8004118:	f7fd fecc 	bl	8001eb4 <HAL_GetCurrentCPUID>
 800411c:	4603      	mov	r3, r0
 800411e:	2b03      	cmp	r3, #3
 8004120:	d105      	bne.n	800412e <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	011a      	lsls	r2, r3, #4
 8004126:	4b0f      	ldr	r3, [pc, #60]	@ (8004164 <HAL_EXTI_IRQHandler+0x70>)
 8004128:	4413      	add	r3, r2
 800412a:	617b      	str	r3, [r7, #20]
 800412c:	e004      	b.n	8004138 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	011a      	lsls	r2, r3, #4
 8004132:	4b0d      	ldr	r3, [pc, #52]	@ (8004168 <HAL_EXTI_IRQHandler+0x74>)
 8004134:	4413      	add	r3, r2
 8004136:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	4013      	ands	r3, r2
 8004140:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d009      	beq.n	800415c <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d002      	beq.n	800415c <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	4798      	blx	r3
    }
  }
}
 800415c:	bf00      	nop
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	58000088 	.word	0x58000088
 8004168:	580000c8 	.word	0x580000c8

0800416c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800416c:	b480      	push	{r7}
 800416e:	b089      	sub	sp, #36	@ 0x24
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004176:	2300      	movs	r3, #0
 8004178:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800417a:	4b89      	ldr	r3, [pc, #548]	@ (80043a0 <HAL_GPIO_Init+0x234>)
 800417c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800417e:	e194      	b.n	80044aa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	2101      	movs	r1, #1
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	fa01 f303 	lsl.w	r3, r1, r3
 800418c:	4013      	ands	r3, r2
 800418e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 8186 	beq.w	80044a4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f003 0303 	and.w	r3, r3, #3
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d005      	beq.n	80041b0 <HAL_GPIO_Init+0x44>
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f003 0303 	and.w	r3, r3, #3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d130      	bne.n	8004212 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	2203      	movs	r2, #3
 80041bc:	fa02 f303 	lsl.w	r3, r2, r3
 80041c0:	43db      	mvns	r3, r3
 80041c2:	69ba      	ldr	r2, [r7, #24]
 80041c4:	4013      	ands	r3, r2
 80041c6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	fa02 f303 	lsl.w	r3, r2, r3
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80041e6:	2201      	movs	r2, #1
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	fa02 f303 	lsl.w	r3, r2, r3
 80041ee:	43db      	mvns	r3, r3
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	4013      	ands	r3, r2
 80041f4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	091b      	lsrs	r3, r3, #4
 80041fc:	f003 0201 	and.w	r2, r3, #1
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	fa02 f303 	lsl.w	r3, r2, r3
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	4313      	orrs	r3, r2
 800420a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	69ba      	ldr	r2, [r7, #24]
 8004210:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f003 0303 	and.w	r3, r3, #3
 800421a:	2b03      	cmp	r3, #3
 800421c:	d017      	beq.n	800424e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	2203      	movs	r2, #3
 800422a:	fa02 f303 	lsl.w	r3, r2, r3
 800422e:	43db      	mvns	r3, r3
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	4013      	ands	r3, r2
 8004234:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	689a      	ldr	r2, [r3, #8]
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	fa02 f303 	lsl.w	r3, r2, r3
 8004242:	69ba      	ldr	r2, [r7, #24]
 8004244:	4313      	orrs	r3, r2
 8004246:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d123      	bne.n	80042a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	08da      	lsrs	r2, r3, #3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	3208      	adds	r2, #8
 8004262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004266:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	f003 0307 	and.w	r3, r3, #7
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	220f      	movs	r2, #15
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	43db      	mvns	r3, r3
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	4013      	ands	r3, r2
 800427c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	691a      	ldr	r2, [r3, #16]
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	fa02 f303 	lsl.w	r3, r2, r3
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	4313      	orrs	r3, r2
 8004292:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	08da      	lsrs	r2, r3, #3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3208      	adds	r2, #8
 800429c:	69b9      	ldr	r1, [r7, #24]
 800429e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	2203      	movs	r2, #3
 80042ae:	fa02 f303 	lsl.w	r3, r2, r3
 80042b2:	43db      	mvns	r3, r3
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	4013      	ands	r3, r2
 80042b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f003 0203 	and.w	r2, r3, #3
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 80e0 	beq.w	80044a4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042e4:	4b2f      	ldr	r3, [pc, #188]	@ (80043a4 <HAL_GPIO_Init+0x238>)
 80042e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80042ea:	4a2e      	ldr	r2, [pc, #184]	@ (80043a4 <HAL_GPIO_Init+0x238>)
 80042ec:	f043 0302 	orr.w	r3, r3, #2
 80042f0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80042f4:	4b2b      	ldr	r3, [pc, #172]	@ (80043a4 <HAL_GPIO_Init+0x238>)
 80042f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	60fb      	str	r3, [r7, #12]
 8004300:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004302:	4a29      	ldr	r2, [pc, #164]	@ (80043a8 <HAL_GPIO_Init+0x23c>)
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	089b      	lsrs	r3, r3, #2
 8004308:	3302      	adds	r3, #2
 800430a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800430e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	f003 0303 	and.w	r3, r3, #3
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	220f      	movs	r2, #15
 800431a:	fa02 f303 	lsl.w	r3, r2, r3
 800431e:	43db      	mvns	r3, r3
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	4013      	ands	r3, r2
 8004324:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a20      	ldr	r2, [pc, #128]	@ (80043ac <HAL_GPIO_Init+0x240>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d052      	beq.n	80043d4 <HAL_GPIO_Init+0x268>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a1f      	ldr	r2, [pc, #124]	@ (80043b0 <HAL_GPIO_Init+0x244>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d031      	beq.n	800439a <HAL_GPIO_Init+0x22e>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a1e      	ldr	r2, [pc, #120]	@ (80043b4 <HAL_GPIO_Init+0x248>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d02b      	beq.n	8004396 <HAL_GPIO_Init+0x22a>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a1d      	ldr	r2, [pc, #116]	@ (80043b8 <HAL_GPIO_Init+0x24c>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d025      	beq.n	8004392 <HAL_GPIO_Init+0x226>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a1c      	ldr	r2, [pc, #112]	@ (80043bc <HAL_GPIO_Init+0x250>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d01f      	beq.n	800438e <HAL_GPIO_Init+0x222>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a1b      	ldr	r2, [pc, #108]	@ (80043c0 <HAL_GPIO_Init+0x254>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d019      	beq.n	800438a <HAL_GPIO_Init+0x21e>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a1a      	ldr	r2, [pc, #104]	@ (80043c4 <HAL_GPIO_Init+0x258>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d013      	beq.n	8004386 <HAL_GPIO_Init+0x21a>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a19      	ldr	r2, [pc, #100]	@ (80043c8 <HAL_GPIO_Init+0x25c>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d00d      	beq.n	8004382 <HAL_GPIO_Init+0x216>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a18      	ldr	r2, [pc, #96]	@ (80043cc <HAL_GPIO_Init+0x260>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d007      	beq.n	800437e <HAL_GPIO_Init+0x212>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a17      	ldr	r2, [pc, #92]	@ (80043d0 <HAL_GPIO_Init+0x264>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d101      	bne.n	800437a <HAL_GPIO_Init+0x20e>
 8004376:	2309      	movs	r3, #9
 8004378:	e02d      	b.n	80043d6 <HAL_GPIO_Init+0x26a>
 800437a:	230a      	movs	r3, #10
 800437c:	e02b      	b.n	80043d6 <HAL_GPIO_Init+0x26a>
 800437e:	2308      	movs	r3, #8
 8004380:	e029      	b.n	80043d6 <HAL_GPIO_Init+0x26a>
 8004382:	2307      	movs	r3, #7
 8004384:	e027      	b.n	80043d6 <HAL_GPIO_Init+0x26a>
 8004386:	2306      	movs	r3, #6
 8004388:	e025      	b.n	80043d6 <HAL_GPIO_Init+0x26a>
 800438a:	2305      	movs	r3, #5
 800438c:	e023      	b.n	80043d6 <HAL_GPIO_Init+0x26a>
 800438e:	2304      	movs	r3, #4
 8004390:	e021      	b.n	80043d6 <HAL_GPIO_Init+0x26a>
 8004392:	2303      	movs	r3, #3
 8004394:	e01f      	b.n	80043d6 <HAL_GPIO_Init+0x26a>
 8004396:	2302      	movs	r3, #2
 8004398:	e01d      	b.n	80043d6 <HAL_GPIO_Init+0x26a>
 800439a:	2301      	movs	r3, #1
 800439c:	e01b      	b.n	80043d6 <HAL_GPIO_Init+0x26a>
 800439e:	bf00      	nop
 80043a0:	58000080 	.word	0x58000080
 80043a4:	58024400 	.word	0x58024400
 80043a8:	58000400 	.word	0x58000400
 80043ac:	58020000 	.word	0x58020000
 80043b0:	58020400 	.word	0x58020400
 80043b4:	58020800 	.word	0x58020800
 80043b8:	58020c00 	.word	0x58020c00
 80043bc:	58021000 	.word	0x58021000
 80043c0:	58021400 	.word	0x58021400
 80043c4:	58021800 	.word	0x58021800
 80043c8:	58021c00 	.word	0x58021c00
 80043cc:	58022000 	.word	0x58022000
 80043d0:	58022400 	.word	0x58022400
 80043d4:	2300      	movs	r3, #0
 80043d6:	69fa      	ldr	r2, [r7, #28]
 80043d8:	f002 0203 	and.w	r2, r2, #3
 80043dc:	0092      	lsls	r2, r2, #2
 80043de:	4093      	lsls	r3, r2
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043e6:	4938      	ldr	r1, [pc, #224]	@ (80044c8 <HAL_GPIO_Init+0x35c>)
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	089b      	lsrs	r3, r3, #2
 80043ec:	3302      	adds	r3, #2
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80043f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	43db      	mvns	r3, r3
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	4013      	ands	r3, r2
 8004404:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	4313      	orrs	r3, r2
 8004418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800441a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004422:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	43db      	mvns	r3, r3
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	4013      	ands	r3, r2
 8004432:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d003      	beq.n	8004448 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	4313      	orrs	r3, r2
 8004446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004448:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	43db      	mvns	r3, r3
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	4013      	ands	r3, r2
 800445e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	4313      	orrs	r3, r2
 8004472:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	43db      	mvns	r3, r3
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	4013      	ands	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	4313      	orrs	r3, r2
 800449c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	3301      	adds	r3, #1
 80044a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	fa22 f303 	lsr.w	r3, r2, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f47f ae63 	bne.w	8004180 <HAL_GPIO_Init+0x14>
  }
}
 80044ba:	bf00      	nop
 80044bc:	bf00      	nop
 80044be:	3724      	adds	r7, #36	@ 0x24
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	58000400 	.word	0x58000400

080044cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	460b      	mov	r3, r1
 80044d6:	807b      	strh	r3, [r7, #2]
 80044d8:	4613      	mov	r3, r2
 80044da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044dc:	787b      	ldrb	r3, [r7, #1]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d003      	beq.n	80044ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044e2:	887a      	ldrh	r2, [r7, #2]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80044e8:	e003      	b.n	80044f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80044ea:	887b      	ldrh	r3, [r7, #2]
 80044ec:	041a      	lsls	r2, r3, #16
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	619a      	str	r2, [r3, #24]
}
 80044f2:	bf00      	nop
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80044fe:	b480      	push	{r7}
 8004500:	b085      	sub	sp, #20
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
 8004506:	460b      	mov	r3, r1
 8004508:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004510:	887a      	ldrh	r2, [r7, #2]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	4013      	ands	r3, r2
 8004516:	041a      	lsls	r2, r3, #16
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	43d9      	mvns	r1, r3
 800451c:	887b      	ldrh	r3, [r7, #2]
 800451e:	400b      	ands	r3, r1
 8004520:	431a      	orrs	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	619a      	str	r2, [r3, #24]
}
 8004526:	bf00      	nop
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
	...

08004534 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800453c:	4a08      	ldr	r2, [pc, #32]	@ (8004560 <HAL_HSEM_FastTake+0x2c>)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	3320      	adds	r3, #32
 8004542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004546:	4a07      	ldr	r2, [pc, #28]	@ (8004564 <HAL_HSEM_FastTake+0x30>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d101      	bne.n	8004550 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800454c:	2300      	movs	r3, #0
 800454e:	e000      	b.n	8004552 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
}
 8004552:	4618      	mov	r0, r3
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	58026400 	.word	0x58026400
 8004564:	80000300 	.word	0x80000300

08004568 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004572:	4906      	ldr	r1, [pc, #24]	@ (800458c <HAL_HSEM_Release+0x24>)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr
 800458c:	58026400 	.word	0x58026400

08004590 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004598:	4b29      	ldr	r3, [pc, #164]	@ (8004640 <HAL_PWREx_ConfigSupply+0xb0>)
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	f003 0307 	and.w	r3, r3, #7
 80045a0:	2b06      	cmp	r3, #6
 80045a2:	d00a      	beq.n	80045ba <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80045a4:	4b26      	ldr	r3, [pc, #152]	@ (8004640 <HAL_PWREx_ConfigSupply+0xb0>)
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d001      	beq.n	80045b6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e040      	b.n	8004638 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80045b6:	2300      	movs	r3, #0
 80045b8:	e03e      	b.n	8004638 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80045ba:	4b21      	ldr	r3, [pc, #132]	@ (8004640 <HAL_PWREx_ConfigSupply+0xb0>)
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80045c2:	491f      	ldr	r1, [pc, #124]	@ (8004640 <HAL_PWREx_ConfigSupply+0xb0>)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80045ca:	f7fd fb27 	bl	8001c1c <HAL_GetTick>
 80045ce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80045d0:	e009      	b.n	80045e6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80045d2:	f7fd fb23 	bl	8001c1c <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80045e0:	d901      	bls.n	80045e6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e028      	b.n	8004638 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80045e6:	4b16      	ldr	r3, [pc, #88]	@ (8004640 <HAL_PWREx_ConfigSupply+0xb0>)
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045f2:	d1ee      	bne.n	80045d2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b1e      	cmp	r3, #30
 80045f8:	d008      	beq.n	800460c <HAL_PWREx_ConfigSupply+0x7c>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80045fe:	d005      	beq.n	800460c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b1d      	cmp	r3, #29
 8004604:	d002      	beq.n	800460c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b2d      	cmp	r3, #45	@ 0x2d
 800460a:	d114      	bne.n	8004636 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800460c:	f7fd fb06 	bl	8001c1c <HAL_GetTick>
 8004610:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004612:	e009      	b.n	8004628 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004614:	f7fd fb02 	bl	8001c1c <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004622:	d901      	bls.n	8004628 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e007      	b.n	8004638 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004628:	4b05      	ldr	r3, [pc, #20]	@ (8004640 <HAL_PWREx_ConfigSupply+0xb0>)
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004630:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004634:	d1ee      	bne.n	8004614 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	58024800 	.word	0x58024800

08004644 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b08c      	sub	sp, #48	@ 0x30
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d102      	bne.n	8004658 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	f000 bc48 	b.w	8004ee8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b00      	cmp	r3, #0
 8004662:	f000 8088 	beq.w	8004776 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004666:	4b99      	ldr	r3, [pc, #612]	@ (80048cc <HAL_RCC_OscConfig+0x288>)
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800466e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004670:	4b96      	ldr	r3, [pc, #600]	@ (80048cc <HAL_RCC_OscConfig+0x288>)
 8004672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004674:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004678:	2b10      	cmp	r3, #16
 800467a:	d007      	beq.n	800468c <HAL_RCC_OscConfig+0x48>
 800467c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800467e:	2b18      	cmp	r3, #24
 8004680:	d111      	bne.n	80046a6 <HAL_RCC_OscConfig+0x62>
 8004682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004684:	f003 0303 	and.w	r3, r3, #3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d10c      	bne.n	80046a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800468c:	4b8f      	ldr	r3, [pc, #572]	@ (80048cc <HAL_RCC_OscConfig+0x288>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d06d      	beq.n	8004774 <HAL_RCC_OscConfig+0x130>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d169      	bne.n	8004774 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	f000 bc21 	b.w	8004ee8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046ae:	d106      	bne.n	80046be <HAL_RCC_OscConfig+0x7a>
 80046b0:	4b86      	ldr	r3, [pc, #536]	@ (80048cc <HAL_RCC_OscConfig+0x288>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a85      	ldr	r2, [pc, #532]	@ (80048cc <HAL_RCC_OscConfig+0x288>)
 80046b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046ba:	6013      	str	r3, [r2, #0]
 80046bc:	e02e      	b.n	800471c <HAL_RCC_OscConfig+0xd8>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10c      	bne.n	80046e0 <HAL_RCC_OscConfig+0x9c>
 80046c6:	4b81      	ldr	r3, [pc, #516]	@ (80048cc <HAL_RCC_OscConfig+0x288>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a80      	ldr	r2, [pc, #512]	@ (80048cc <HAL_RCC_OscConfig+0x288>)
 80046cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046d0:	6013      	str	r3, [r2, #0]
 80046d2:	4b7e      	ldr	r3, [pc, #504]	@ (80048cc <HAL_RCC_OscConfig+0x288>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a7d      	ldr	r2, [pc, #500]	@ (80048cc <HAL_RCC_OscConfig+0x288>)
 80046d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046dc:	6013      	str	r3, [r2, #0]
 80046de:	e01d      	b.n	800471c <HAL_RCC_OscConfig+0xd8>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046e8:	d10c      	bne.n	8004704 <HAL_RCC_OscConfig+0xc0>
 80046ea:	4b78      	ldr	r3, [pc, #480]	@ (80048cc <HAL_RCC_OscConfig+0x288>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a77      	ldr	r2, [pc, #476]	@ (80048cc <HAL_RCC_OscConfig+0x288>)
 80046f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046f4:	6013      	str	r3, [r2, #0]
 80046f6:	4b75      	ldr	r3, [pc, #468]	@ (80048cc <HAL_RCC_OscConfig+0x288>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a74      	ldr	r2, [pc, #464]	@ (80048cc <HAL_RCC_OscConfig+0x288>)
 80046fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	e00b      	b.n	800471c <HAL_RCC_OscConfig+0xd8>
 8004704:	4b71      	ldr	r3, [pc, #452]	@ (80048cc <HAL_RCC_OscConfig+0x288>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a70      	ldr	r2, [pc, #448]	@ (80048cc <HAL_RCC_OscConfig+0x288>)
 800470a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800470e:	6013      	str	r3, [r2, #0]
 8004710:	4b6e      	ldr	r3, [pc, #440]	@ (80048cc <HAL_RCC_OscConfig+0x288>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a6d      	ldr	r2, [pc, #436]	@ (80048cc <HAL_RCC_OscConfig+0x288>)
 8004716:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800471a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d013      	beq.n	800474c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004724:	f7fd fa7a 	bl	8001c1c <HAL_GetTick>
 8004728:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800472c:	f7fd fa76 	bl	8001c1c <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b64      	cmp	r3, #100	@ 0x64
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e3d4      	b.n	8004ee8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800473e:	4b63      	ldr	r3, [pc, #396]	@ (80048cc <HAL_RCC_OscConfig+0x288>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d0f0      	beq.n	800472c <HAL_RCC_OscConfig+0xe8>
 800474a:	e014      	b.n	8004776 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474c:	f7fd fa66 	bl	8001c1c <HAL_GetTick>
 8004750:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004754:	f7fd fa62 	bl	8001c1c <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b64      	cmp	r3, #100	@ 0x64
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e3c0      	b.n	8004ee8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004766:	4b59      	ldr	r3, [pc, #356]	@ (80048cc <HAL_RCC_OscConfig+0x288>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1f0      	bne.n	8004754 <HAL_RCC_OscConfig+0x110>
 8004772:	e000      	b.n	8004776 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	f000 80ca 	beq.w	8004918 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004784:	4b51      	ldr	r3, [pc, #324]	@ (80048cc <HAL_RCC_OscConfig+0x288>)
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800478c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800478e:	4b4f      	ldr	r3, [pc, #316]	@ (80048cc <HAL_RCC_OscConfig+0x288>)
 8004790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004792:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d007      	beq.n	80047aa <HAL_RCC_OscConfig+0x166>
 800479a:	6a3b      	ldr	r3, [r7, #32]
 800479c:	2b18      	cmp	r3, #24
 800479e:	d156      	bne.n	800484e <HAL_RCC_OscConfig+0x20a>
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	f003 0303 	and.w	r3, r3, #3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d151      	bne.n	800484e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047aa:	4b48      	ldr	r3, [pc, #288]	@ (80048cc <HAL_RCC_OscConfig+0x288>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0304 	and.w	r3, r3, #4
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d005      	beq.n	80047c2 <HAL_RCC_OscConfig+0x17e>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e392      	b.n	8004ee8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80047c2:	4b42      	ldr	r3, [pc, #264]	@ (80048cc <HAL_RCC_OscConfig+0x288>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f023 0219 	bic.w	r2, r3, #25
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	493f      	ldr	r1, [pc, #252]	@ (80048cc <HAL_RCC_OscConfig+0x288>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d4:	f7fd fa22 	bl	8001c1c <HAL_GetTick>
 80047d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047dc:	f7fd fa1e 	bl	8001c1c <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e37c      	b.n	8004ee8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047ee:	4b37      	ldr	r3, [pc, #220]	@ (80048cc <HAL_RCC_OscConfig+0x288>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0304 	and.w	r3, r3, #4
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d0f0      	beq.n	80047dc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047fa:	f7fd fa3f 	bl	8001c7c <HAL_GetREVID>
 80047fe:	4603      	mov	r3, r0
 8004800:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004804:	4293      	cmp	r3, r2
 8004806:	d817      	bhi.n	8004838 <HAL_RCC_OscConfig+0x1f4>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	2b40      	cmp	r3, #64	@ 0x40
 800480e:	d108      	bne.n	8004822 <HAL_RCC_OscConfig+0x1de>
 8004810:	4b2e      	ldr	r3, [pc, #184]	@ (80048cc <HAL_RCC_OscConfig+0x288>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004818:	4a2c      	ldr	r2, [pc, #176]	@ (80048cc <HAL_RCC_OscConfig+0x288>)
 800481a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800481e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004820:	e07a      	b.n	8004918 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004822:	4b2a      	ldr	r3, [pc, #168]	@ (80048cc <HAL_RCC_OscConfig+0x288>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	031b      	lsls	r3, r3, #12
 8004830:	4926      	ldr	r1, [pc, #152]	@ (80048cc <HAL_RCC_OscConfig+0x288>)
 8004832:	4313      	orrs	r3, r2
 8004834:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004836:	e06f      	b.n	8004918 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004838:	4b24      	ldr	r3, [pc, #144]	@ (80048cc <HAL_RCC_OscConfig+0x288>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	061b      	lsls	r3, r3, #24
 8004846:	4921      	ldr	r1, [pc, #132]	@ (80048cc <HAL_RCC_OscConfig+0x288>)
 8004848:	4313      	orrs	r3, r2
 800484a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800484c:	e064      	b.n	8004918 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d047      	beq.n	80048e6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004856:	4b1d      	ldr	r3, [pc, #116]	@ (80048cc <HAL_RCC_OscConfig+0x288>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f023 0219 	bic.w	r2, r3, #25
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	491a      	ldr	r1, [pc, #104]	@ (80048cc <HAL_RCC_OscConfig+0x288>)
 8004864:	4313      	orrs	r3, r2
 8004866:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004868:	f7fd f9d8 	bl	8001c1c <HAL_GetTick>
 800486c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004870:	f7fd f9d4 	bl	8001c1c <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e332      	b.n	8004ee8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004882:	4b12      	ldr	r3, [pc, #72]	@ (80048cc <HAL_RCC_OscConfig+0x288>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0304 	and.w	r3, r3, #4
 800488a:	2b00      	cmp	r3, #0
 800488c:	d0f0      	beq.n	8004870 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800488e:	f7fd f9f5 	bl	8001c7c <HAL_GetREVID>
 8004892:	4603      	mov	r3, r0
 8004894:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004898:	4293      	cmp	r3, r2
 800489a:	d819      	bhi.n	80048d0 <HAL_RCC_OscConfig+0x28c>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	2b40      	cmp	r3, #64	@ 0x40
 80048a2:	d108      	bne.n	80048b6 <HAL_RCC_OscConfig+0x272>
 80048a4:	4b09      	ldr	r3, [pc, #36]	@ (80048cc <HAL_RCC_OscConfig+0x288>)
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80048ac:	4a07      	ldr	r2, [pc, #28]	@ (80048cc <HAL_RCC_OscConfig+0x288>)
 80048ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048b2:	6053      	str	r3, [r2, #4]
 80048b4:	e030      	b.n	8004918 <HAL_RCC_OscConfig+0x2d4>
 80048b6:	4b05      	ldr	r3, [pc, #20]	@ (80048cc <HAL_RCC_OscConfig+0x288>)
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	031b      	lsls	r3, r3, #12
 80048c4:	4901      	ldr	r1, [pc, #4]	@ (80048cc <HAL_RCC_OscConfig+0x288>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	604b      	str	r3, [r1, #4]
 80048ca:	e025      	b.n	8004918 <HAL_RCC_OscConfig+0x2d4>
 80048cc:	58024400 	.word	0x58024400
 80048d0:	4b9a      	ldr	r3, [pc, #616]	@ (8004b3c <HAL_RCC_OscConfig+0x4f8>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	061b      	lsls	r3, r3, #24
 80048de:	4997      	ldr	r1, [pc, #604]	@ (8004b3c <HAL_RCC_OscConfig+0x4f8>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	604b      	str	r3, [r1, #4]
 80048e4:	e018      	b.n	8004918 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048e6:	4b95      	ldr	r3, [pc, #596]	@ (8004b3c <HAL_RCC_OscConfig+0x4f8>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a94      	ldr	r2, [pc, #592]	@ (8004b3c <HAL_RCC_OscConfig+0x4f8>)
 80048ec:	f023 0301 	bic.w	r3, r3, #1
 80048f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f2:	f7fd f993 	bl	8001c1c <HAL_GetTick>
 80048f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80048f8:	e008      	b.n	800490c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048fa:	f7fd f98f 	bl	8001c1c <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d901      	bls.n	800490c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e2ed      	b.n	8004ee8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800490c:	4b8b      	ldr	r3, [pc, #556]	@ (8004b3c <HAL_RCC_OscConfig+0x4f8>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1f0      	bne.n	80048fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0310 	and.w	r3, r3, #16
 8004920:	2b00      	cmp	r3, #0
 8004922:	f000 80a9 	beq.w	8004a78 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004926:	4b85      	ldr	r3, [pc, #532]	@ (8004b3c <HAL_RCC_OscConfig+0x4f8>)
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800492e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004930:	4b82      	ldr	r3, [pc, #520]	@ (8004b3c <HAL_RCC_OscConfig+0x4f8>)
 8004932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004934:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	2b08      	cmp	r3, #8
 800493a:	d007      	beq.n	800494c <HAL_RCC_OscConfig+0x308>
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	2b18      	cmp	r3, #24
 8004940:	d13a      	bne.n	80049b8 <HAL_RCC_OscConfig+0x374>
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f003 0303 	and.w	r3, r3, #3
 8004948:	2b01      	cmp	r3, #1
 800494a:	d135      	bne.n	80049b8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800494c:	4b7b      	ldr	r3, [pc, #492]	@ (8004b3c <HAL_RCC_OscConfig+0x4f8>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004954:	2b00      	cmp	r3, #0
 8004956:	d005      	beq.n	8004964 <HAL_RCC_OscConfig+0x320>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	69db      	ldr	r3, [r3, #28]
 800495c:	2b80      	cmp	r3, #128	@ 0x80
 800495e:	d001      	beq.n	8004964 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e2c1      	b.n	8004ee8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004964:	f7fd f98a 	bl	8001c7c <HAL_GetREVID>
 8004968:	4603      	mov	r3, r0
 800496a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800496e:	4293      	cmp	r3, r2
 8004970:	d817      	bhi.n	80049a2 <HAL_RCC_OscConfig+0x35e>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	2b20      	cmp	r3, #32
 8004978:	d108      	bne.n	800498c <HAL_RCC_OscConfig+0x348>
 800497a:	4b70      	ldr	r3, [pc, #448]	@ (8004b3c <HAL_RCC_OscConfig+0x4f8>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004982:	4a6e      	ldr	r2, [pc, #440]	@ (8004b3c <HAL_RCC_OscConfig+0x4f8>)
 8004984:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004988:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800498a:	e075      	b.n	8004a78 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800498c:	4b6b      	ldr	r3, [pc, #428]	@ (8004b3c <HAL_RCC_OscConfig+0x4f8>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	069b      	lsls	r3, r3, #26
 800499a:	4968      	ldr	r1, [pc, #416]	@ (8004b3c <HAL_RCC_OscConfig+0x4f8>)
 800499c:	4313      	orrs	r3, r2
 800499e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80049a0:	e06a      	b.n	8004a78 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80049a2:	4b66      	ldr	r3, [pc, #408]	@ (8004b3c <HAL_RCC_OscConfig+0x4f8>)
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	061b      	lsls	r3, r3, #24
 80049b0:	4962      	ldr	r1, [pc, #392]	@ (8004b3c <HAL_RCC_OscConfig+0x4f8>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80049b6:	e05f      	b.n	8004a78 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	69db      	ldr	r3, [r3, #28]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d042      	beq.n	8004a46 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80049c0:	4b5e      	ldr	r3, [pc, #376]	@ (8004b3c <HAL_RCC_OscConfig+0x4f8>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a5d      	ldr	r2, [pc, #372]	@ (8004b3c <HAL_RCC_OscConfig+0x4f8>)
 80049c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049cc:	f7fd f926 	bl	8001c1c <HAL_GetTick>
 80049d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80049d2:	e008      	b.n	80049e6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80049d4:	f7fd f922 	bl	8001c1c <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e280      	b.n	8004ee8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80049e6:	4b55      	ldr	r3, [pc, #340]	@ (8004b3c <HAL_RCC_OscConfig+0x4f8>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d0f0      	beq.n	80049d4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80049f2:	f7fd f943 	bl	8001c7c <HAL_GetREVID>
 80049f6:	4603      	mov	r3, r0
 80049f8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d817      	bhi.n	8004a30 <HAL_RCC_OscConfig+0x3ec>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	2b20      	cmp	r3, #32
 8004a06:	d108      	bne.n	8004a1a <HAL_RCC_OscConfig+0x3d6>
 8004a08:	4b4c      	ldr	r3, [pc, #304]	@ (8004b3c <HAL_RCC_OscConfig+0x4f8>)
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004a10:	4a4a      	ldr	r2, [pc, #296]	@ (8004b3c <HAL_RCC_OscConfig+0x4f8>)
 8004a12:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a16:	6053      	str	r3, [r2, #4]
 8004a18:	e02e      	b.n	8004a78 <HAL_RCC_OscConfig+0x434>
 8004a1a:	4b48      	ldr	r3, [pc, #288]	@ (8004b3c <HAL_RCC_OscConfig+0x4f8>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	069b      	lsls	r3, r3, #26
 8004a28:	4944      	ldr	r1, [pc, #272]	@ (8004b3c <HAL_RCC_OscConfig+0x4f8>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	604b      	str	r3, [r1, #4]
 8004a2e:	e023      	b.n	8004a78 <HAL_RCC_OscConfig+0x434>
 8004a30:	4b42      	ldr	r3, [pc, #264]	@ (8004b3c <HAL_RCC_OscConfig+0x4f8>)
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	061b      	lsls	r3, r3, #24
 8004a3e:	493f      	ldr	r1, [pc, #252]	@ (8004b3c <HAL_RCC_OscConfig+0x4f8>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	60cb      	str	r3, [r1, #12]
 8004a44:	e018      	b.n	8004a78 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004a46:	4b3d      	ldr	r3, [pc, #244]	@ (8004b3c <HAL_RCC_OscConfig+0x4f8>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a3c      	ldr	r2, [pc, #240]	@ (8004b3c <HAL_RCC_OscConfig+0x4f8>)
 8004a4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a52:	f7fd f8e3 	bl	8001c1c <HAL_GetTick>
 8004a56:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004a58:	e008      	b.n	8004a6c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004a5a:	f7fd f8df 	bl	8001c1c <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d901      	bls.n	8004a6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e23d      	b.n	8004ee8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004a6c:	4b33      	ldr	r3, [pc, #204]	@ (8004b3c <HAL_RCC_OscConfig+0x4f8>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1f0      	bne.n	8004a5a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0308 	and.w	r3, r3, #8
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d036      	beq.n	8004af2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d019      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a8c:	4b2b      	ldr	r3, [pc, #172]	@ (8004b3c <HAL_RCC_OscConfig+0x4f8>)
 8004a8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a90:	4a2a      	ldr	r2, [pc, #168]	@ (8004b3c <HAL_RCC_OscConfig+0x4f8>)
 8004a92:	f043 0301 	orr.w	r3, r3, #1
 8004a96:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a98:	f7fd f8c0 	bl	8001c1c <HAL_GetTick>
 8004a9c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aa0:	f7fd f8bc 	bl	8001c1c <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e21a      	b.n	8004ee8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ab2:	4b22      	ldr	r3, [pc, #136]	@ (8004b3c <HAL_RCC_OscConfig+0x4f8>)
 8004ab4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0f0      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x45c>
 8004abe:	e018      	b.n	8004af2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ac0:	4b1e      	ldr	r3, [pc, #120]	@ (8004b3c <HAL_RCC_OscConfig+0x4f8>)
 8004ac2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ac4:	4a1d      	ldr	r2, [pc, #116]	@ (8004b3c <HAL_RCC_OscConfig+0x4f8>)
 8004ac6:	f023 0301 	bic.w	r3, r3, #1
 8004aca:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004acc:	f7fd f8a6 	bl	8001c1c <HAL_GetTick>
 8004ad0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ad4:	f7fd f8a2 	bl	8001c1c <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e200      	b.n	8004ee8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004ae6:	4b15      	ldr	r3, [pc, #84]	@ (8004b3c <HAL_RCC_OscConfig+0x4f8>)
 8004ae8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1f0      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0320 	and.w	r3, r3, #32
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d039      	beq.n	8004b72 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d01c      	beq.n	8004b40 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b06:	4b0d      	ldr	r3, [pc, #52]	@ (8004b3c <HAL_RCC_OscConfig+0x4f8>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a0c      	ldr	r2, [pc, #48]	@ (8004b3c <HAL_RCC_OscConfig+0x4f8>)
 8004b0c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004b10:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004b12:	f7fd f883 	bl	8001c1c <HAL_GetTick>
 8004b16:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b18:	e008      	b.n	8004b2c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b1a:	f7fd f87f 	bl	8001c1c <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e1dd      	b.n	8004ee8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b2c:	4b03      	ldr	r3, [pc, #12]	@ (8004b3c <HAL_RCC_OscConfig+0x4f8>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d0f0      	beq.n	8004b1a <HAL_RCC_OscConfig+0x4d6>
 8004b38:	e01b      	b.n	8004b72 <HAL_RCC_OscConfig+0x52e>
 8004b3a:	bf00      	nop
 8004b3c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b40:	4b9b      	ldr	r3, [pc, #620]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a9a      	ldr	r2, [pc, #616]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004b46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b4a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004b4c:	f7fd f866 	bl	8001c1c <HAL_GetTick>
 8004b50:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004b52:	e008      	b.n	8004b66 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b54:	f7fd f862 	bl	8001c1c <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e1c0      	b.n	8004ee8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004b66:	4b92      	ldr	r3, [pc, #584]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1f0      	bne.n	8004b54 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0304 	and.w	r3, r3, #4
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f000 8081 	beq.w	8004c82 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b80:	4b8c      	ldr	r3, [pc, #560]	@ (8004db4 <HAL_RCC_OscConfig+0x770>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a8b      	ldr	r2, [pc, #556]	@ (8004db4 <HAL_RCC_OscConfig+0x770>)
 8004b86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b8c:	f7fd f846 	bl	8001c1c <HAL_GetTick>
 8004b90:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b94:	f7fd f842 	bl	8001c1c <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b64      	cmp	r3, #100	@ 0x64
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e1a0      	b.n	8004ee8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ba6:	4b83      	ldr	r3, [pc, #524]	@ (8004db4 <HAL_RCC_OscConfig+0x770>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d0f0      	beq.n	8004b94 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d106      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x584>
 8004bba:	4b7d      	ldr	r3, [pc, #500]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bbe:	4a7c      	ldr	r2, [pc, #496]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004bc0:	f043 0301 	orr.w	r3, r3, #1
 8004bc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bc6:	e02d      	b.n	8004c24 <HAL_RCC_OscConfig+0x5e0>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10c      	bne.n	8004bea <HAL_RCC_OscConfig+0x5a6>
 8004bd0:	4b77      	ldr	r3, [pc, #476]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004bd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bd4:	4a76      	ldr	r2, [pc, #472]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004bd6:	f023 0301 	bic.w	r3, r3, #1
 8004bda:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bdc:	4b74      	ldr	r3, [pc, #464]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004be0:	4a73      	ldr	r2, [pc, #460]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004be2:	f023 0304 	bic.w	r3, r3, #4
 8004be6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004be8:	e01c      	b.n	8004c24 <HAL_RCC_OscConfig+0x5e0>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	2b05      	cmp	r3, #5
 8004bf0:	d10c      	bne.n	8004c0c <HAL_RCC_OscConfig+0x5c8>
 8004bf2:	4b6f      	ldr	r3, [pc, #444]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bf6:	4a6e      	ldr	r2, [pc, #440]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004bf8:	f043 0304 	orr.w	r3, r3, #4
 8004bfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bfe:	4b6c      	ldr	r3, [pc, #432]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c02:	4a6b      	ldr	r2, [pc, #428]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004c04:	f043 0301 	orr.w	r3, r3, #1
 8004c08:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c0a:	e00b      	b.n	8004c24 <HAL_RCC_OscConfig+0x5e0>
 8004c0c:	4b68      	ldr	r3, [pc, #416]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c10:	4a67      	ldr	r2, [pc, #412]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004c12:	f023 0301 	bic.w	r3, r3, #1
 8004c16:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c18:	4b65      	ldr	r3, [pc, #404]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004c1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c1c:	4a64      	ldr	r2, [pc, #400]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004c1e:	f023 0304 	bic.w	r3, r3, #4
 8004c22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d015      	beq.n	8004c58 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c2c:	f7fc fff6 	bl	8001c1c <HAL_GetTick>
 8004c30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c32:	e00a      	b.n	8004c4a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c34:	f7fc fff2 	bl	8001c1c <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e14e      	b.n	8004ee8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c4a:	4b59      	ldr	r3, [pc, #356]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d0ee      	beq.n	8004c34 <HAL_RCC_OscConfig+0x5f0>
 8004c56:	e014      	b.n	8004c82 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c58:	f7fc ffe0 	bl	8001c1c <HAL_GetTick>
 8004c5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004c5e:	e00a      	b.n	8004c76 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c60:	f7fc ffdc 	bl	8001c1c <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d901      	bls.n	8004c76 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e138      	b.n	8004ee8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004c76:	4b4e      	ldr	r3, [pc, #312]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1ee      	bne.n	8004c60 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f000 812d 	beq.w	8004ee6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004c8c:	4b48      	ldr	r3, [pc, #288]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c94:	2b18      	cmp	r3, #24
 8004c96:	f000 80bd 	beq.w	8004e14 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	f040 809e 	bne.w	8004de0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ca4:	4b42      	ldr	r3, [pc, #264]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a41      	ldr	r2, [pc, #260]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004caa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb0:	f7fc ffb4 	bl	8001c1c <HAL_GetTick>
 8004cb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004cb6:	e008      	b.n	8004cca <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cb8:	f7fc ffb0 	bl	8001c1c <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d901      	bls.n	8004cca <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e10e      	b.n	8004ee8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004cca:	4b39      	ldr	r3, [pc, #228]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1f0      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cd6:	4b36      	ldr	r3, [pc, #216]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004cd8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004cda:	4b37      	ldr	r3, [pc, #220]	@ (8004db8 <HAL_RCC_OscConfig+0x774>)
 8004cdc:	4013      	ands	r3, r2
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004ce6:	0112      	lsls	r2, r2, #4
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	4931      	ldr	r1, [pc, #196]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	628b      	str	r3, [r1, #40]	@ 0x28
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	025b      	lsls	r3, r3, #9
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	431a      	orrs	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	041b      	lsls	r3, r3, #16
 8004d0e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d12:	431a      	orrs	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	061b      	lsls	r3, r3, #24
 8004d1c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d20:	4923      	ldr	r1, [pc, #140]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004d26:	4b22      	ldr	r3, [pc, #136]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2a:	4a21      	ldr	r2, [pc, #132]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004d2c:	f023 0301 	bic.w	r3, r3, #1
 8004d30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004d32:	4b1f      	ldr	r3, [pc, #124]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004d34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d36:	4b21      	ldr	r3, [pc, #132]	@ (8004dbc <HAL_RCC_OscConfig+0x778>)
 8004d38:	4013      	ands	r3, r2
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004d3e:	00d2      	lsls	r2, r2, #3
 8004d40:	491b      	ldr	r1, [pc, #108]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004d46:	4b1a      	ldr	r3, [pc, #104]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d4a:	f023 020c 	bic.w	r2, r3, #12
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d52:	4917      	ldr	r1, [pc, #92]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004d58:	4b15      	ldr	r3, [pc, #84]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d5c:	f023 0202 	bic.w	r2, r3, #2
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d64:	4912      	ldr	r1, [pc, #72]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004d6a:	4b11      	ldr	r3, [pc, #68]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d6e:	4a10      	ldr	r2, [pc, #64]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004d70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d76:	4b0e      	ldr	r3, [pc, #56]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d7a:	4a0d      	ldr	r2, [pc, #52]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004d7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004d82:	4b0b      	ldr	r3, [pc, #44]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d86:	4a0a      	ldr	r2, [pc, #40]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004d88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004d8e:	4b08      	ldr	r3, [pc, #32]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d92:	4a07      	ldr	r2, [pc, #28]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004d94:	f043 0301 	orr.w	r3, r3, #1
 8004d98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d9a:	4b05      	ldr	r3, [pc, #20]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a04      	ldr	r2, [pc, #16]	@ (8004db0 <HAL_RCC_OscConfig+0x76c>)
 8004da0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004da4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da6:	f7fc ff39 	bl	8001c1c <HAL_GetTick>
 8004daa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004dac:	e011      	b.n	8004dd2 <HAL_RCC_OscConfig+0x78e>
 8004dae:	bf00      	nop
 8004db0:	58024400 	.word	0x58024400
 8004db4:	58024800 	.word	0x58024800
 8004db8:	fffffc0c 	.word	0xfffffc0c
 8004dbc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dc0:	f7fc ff2c 	bl	8001c1c <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e08a      	b.n	8004ee8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004dd2:	4b47      	ldr	r3, [pc, #284]	@ (8004ef0 <HAL_RCC_OscConfig+0x8ac>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d0f0      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x77c>
 8004dde:	e082      	b.n	8004ee6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004de0:	4b43      	ldr	r3, [pc, #268]	@ (8004ef0 <HAL_RCC_OscConfig+0x8ac>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a42      	ldr	r2, [pc, #264]	@ (8004ef0 <HAL_RCC_OscConfig+0x8ac>)
 8004de6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004dea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dec:	f7fc ff16 	bl	8001c1c <HAL_GetTick>
 8004df0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004df2:	e008      	b.n	8004e06 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004df4:	f7fc ff12 	bl	8001c1c <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e070      	b.n	8004ee8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e06:	4b3a      	ldr	r3, [pc, #232]	@ (8004ef0 <HAL_RCC_OscConfig+0x8ac>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1f0      	bne.n	8004df4 <HAL_RCC_OscConfig+0x7b0>
 8004e12:	e068      	b.n	8004ee6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004e14:	4b36      	ldr	r3, [pc, #216]	@ (8004ef0 <HAL_RCC_OscConfig+0x8ac>)
 8004e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e18:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004e1a:	4b35      	ldr	r3, [pc, #212]	@ (8004ef0 <HAL_RCC_OscConfig+0x8ac>)
 8004e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e1e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d031      	beq.n	8004e8c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	f003 0203 	and.w	r2, r3, #3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d12a      	bne.n	8004e8c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	091b      	lsrs	r3, r3, #4
 8004e3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d122      	bne.n	8004e8c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e50:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d11a      	bne.n	8004e8c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	0a5b      	lsrs	r3, r3, #9
 8004e5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e62:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d111      	bne.n	8004e8c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	0c1b      	lsrs	r3, r3, #16
 8004e6c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e74:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d108      	bne.n	8004e8c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	0e1b      	lsrs	r3, r3, #24
 8004e7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e86:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d001      	beq.n	8004e90 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e02b      	b.n	8004ee8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004e90:	4b17      	ldr	r3, [pc, #92]	@ (8004ef0 <HAL_RCC_OscConfig+0x8ac>)
 8004e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e94:	08db      	lsrs	r3, r3, #3
 8004e96:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e9a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d01f      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004ea6:	4b12      	ldr	r3, [pc, #72]	@ (8004ef0 <HAL_RCC_OscConfig+0x8ac>)
 8004ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eaa:	4a11      	ldr	r2, [pc, #68]	@ (8004ef0 <HAL_RCC_OscConfig+0x8ac>)
 8004eac:	f023 0301 	bic.w	r3, r3, #1
 8004eb0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004eb2:	f7fc feb3 	bl	8001c1c <HAL_GetTick>
 8004eb6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004eb8:	bf00      	nop
 8004eba:	f7fc feaf 	bl	8001c1c <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d0f9      	beq.n	8004eba <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8004ef0 <HAL_RCC_OscConfig+0x8ac>)
 8004ec8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004eca:	4b0a      	ldr	r3, [pc, #40]	@ (8004ef4 <HAL_RCC_OscConfig+0x8b0>)
 8004ecc:	4013      	ands	r3, r2
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004ed2:	00d2      	lsls	r2, r2, #3
 8004ed4:	4906      	ldr	r1, [pc, #24]	@ (8004ef0 <HAL_RCC_OscConfig+0x8ac>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004eda:	4b05      	ldr	r3, [pc, #20]	@ (8004ef0 <HAL_RCC_OscConfig+0x8ac>)
 8004edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ede:	4a04      	ldr	r2, [pc, #16]	@ (8004ef0 <HAL_RCC_OscConfig+0x8ac>)
 8004ee0:	f043 0301 	orr.w	r3, r3, #1
 8004ee4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3730      	adds	r7, #48	@ 0x30
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	58024400 	.word	0x58024400
 8004ef4:	ffff0007 	.word	0xffff0007

08004ef8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e19c      	b.n	8005246 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f0c:	4b8a      	ldr	r3, [pc, #552]	@ (8005138 <HAL_RCC_ClockConfig+0x240>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 030f 	and.w	r3, r3, #15
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d910      	bls.n	8004f3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f1a:	4b87      	ldr	r3, [pc, #540]	@ (8005138 <HAL_RCC_ClockConfig+0x240>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f023 020f 	bic.w	r2, r3, #15
 8004f22:	4985      	ldr	r1, [pc, #532]	@ (8005138 <HAL_RCC_ClockConfig+0x240>)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f2a:	4b83      	ldr	r3, [pc, #524]	@ (8005138 <HAL_RCC_ClockConfig+0x240>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 030f 	and.w	r3, r3, #15
 8004f32:	683a      	ldr	r2, [r7, #0]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d001      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e184      	b.n	8005246 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0304 	and.w	r3, r3, #4
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d010      	beq.n	8004f6a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	691a      	ldr	r2, [r3, #16]
 8004f4c:	4b7b      	ldr	r3, [pc, #492]	@ (800513c <HAL_RCC_ClockConfig+0x244>)
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d908      	bls.n	8004f6a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f58:	4b78      	ldr	r3, [pc, #480]	@ (800513c <HAL_RCC_ClockConfig+0x244>)
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	4975      	ldr	r1, [pc, #468]	@ (800513c <HAL_RCC_ClockConfig+0x244>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0308 	and.w	r3, r3, #8
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d010      	beq.n	8004f98 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	695a      	ldr	r2, [r3, #20]
 8004f7a:	4b70      	ldr	r3, [pc, #448]	@ (800513c <HAL_RCC_ClockConfig+0x244>)
 8004f7c:	69db      	ldr	r3, [r3, #28]
 8004f7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d908      	bls.n	8004f98 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f86:	4b6d      	ldr	r3, [pc, #436]	@ (800513c <HAL_RCC_ClockConfig+0x244>)
 8004f88:	69db      	ldr	r3, [r3, #28]
 8004f8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	496a      	ldr	r1, [pc, #424]	@ (800513c <HAL_RCC_ClockConfig+0x244>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0310 	and.w	r3, r3, #16
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d010      	beq.n	8004fc6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	699a      	ldr	r2, [r3, #24]
 8004fa8:	4b64      	ldr	r3, [pc, #400]	@ (800513c <HAL_RCC_ClockConfig+0x244>)
 8004faa:	69db      	ldr	r3, [r3, #28]
 8004fac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d908      	bls.n	8004fc6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004fb4:	4b61      	ldr	r3, [pc, #388]	@ (800513c <HAL_RCC_ClockConfig+0x244>)
 8004fb6:	69db      	ldr	r3, [r3, #28]
 8004fb8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	495e      	ldr	r1, [pc, #376]	@ (800513c <HAL_RCC_ClockConfig+0x244>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0320 	and.w	r3, r3, #32
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d010      	beq.n	8004ff4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	69da      	ldr	r2, [r3, #28]
 8004fd6:	4b59      	ldr	r3, [pc, #356]	@ (800513c <HAL_RCC_ClockConfig+0x244>)
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d908      	bls.n	8004ff4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004fe2:	4b56      	ldr	r3, [pc, #344]	@ (800513c <HAL_RCC_ClockConfig+0x244>)
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	4953      	ldr	r1, [pc, #332]	@ (800513c <HAL_RCC_ClockConfig+0x244>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0302 	and.w	r3, r3, #2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d010      	beq.n	8005022 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68da      	ldr	r2, [r3, #12]
 8005004:	4b4d      	ldr	r3, [pc, #308]	@ (800513c <HAL_RCC_ClockConfig+0x244>)
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	f003 030f 	and.w	r3, r3, #15
 800500c:	429a      	cmp	r2, r3
 800500e:	d908      	bls.n	8005022 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005010:	4b4a      	ldr	r3, [pc, #296]	@ (800513c <HAL_RCC_ClockConfig+0x244>)
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	f023 020f 	bic.w	r2, r3, #15
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	4947      	ldr	r1, [pc, #284]	@ (800513c <HAL_RCC_ClockConfig+0x244>)
 800501e:	4313      	orrs	r3, r2
 8005020:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	2b00      	cmp	r3, #0
 800502c:	d055      	beq.n	80050da <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800502e:	4b43      	ldr	r3, [pc, #268]	@ (800513c <HAL_RCC_ClockConfig+0x244>)
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	4940      	ldr	r1, [pc, #256]	@ (800513c <HAL_RCC_ClockConfig+0x244>)
 800503c:	4313      	orrs	r3, r2
 800503e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	2b02      	cmp	r3, #2
 8005046:	d107      	bne.n	8005058 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005048:	4b3c      	ldr	r3, [pc, #240]	@ (800513c <HAL_RCC_ClockConfig+0x244>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d121      	bne.n	8005098 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e0f6      	b.n	8005246 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	2b03      	cmp	r3, #3
 800505e:	d107      	bne.n	8005070 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005060:	4b36      	ldr	r3, [pc, #216]	@ (800513c <HAL_RCC_ClockConfig+0x244>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d115      	bne.n	8005098 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e0ea      	b.n	8005246 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d107      	bne.n	8005088 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005078:	4b30      	ldr	r3, [pc, #192]	@ (800513c <HAL_RCC_ClockConfig+0x244>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005080:	2b00      	cmp	r3, #0
 8005082:	d109      	bne.n	8005098 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e0de      	b.n	8005246 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005088:	4b2c      	ldr	r3, [pc, #176]	@ (800513c <HAL_RCC_ClockConfig+0x244>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0304 	and.w	r3, r3, #4
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e0d6      	b.n	8005246 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005098:	4b28      	ldr	r3, [pc, #160]	@ (800513c <HAL_RCC_ClockConfig+0x244>)
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	f023 0207 	bic.w	r2, r3, #7
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	4925      	ldr	r1, [pc, #148]	@ (800513c <HAL_RCC_ClockConfig+0x244>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050aa:	f7fc fdb7 	bl	8001c1c <HAL_GetTick>
 80050ae:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050b0:	e00a      	b.n	80050c8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050b2:	f7fc fdb3 	bl	8001c1c <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d901      	bls.n	80050c8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e0be      	b.n	8005246 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050c8:	4b1c      	ldr	r3, [pc, #112]	@ (800513c <HAL_RCC_ClockConfig+0x244>)
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	00db      	lsls	r3, r3, #3
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d1eb      	bne.n	80050b2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d010      	beq.n	8005108 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68da      	ldr	r2, [r3, #12]
 80050ea:	4b14      	ldr	r3, [pc, #80]	@ (800513c <HAL_RCC_ClockConfig+0x244>)
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	f003 030f 	and.w	r3, r3, #15
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d208      	bcs.n	8005108 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050f6:	4b11      	ldr	r3, [pc, #68]	@ (800513c <HAL_RCC_ClockConfig+0x244>)
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	f023 020f 	bic.w	r2, r3, #15
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	490e      	ldr	r1, [pc, #56]	@ (800513c <HAL_RCC_ClockConfig+0x244>)
 8005104:	4313      	orrs	r3, r2
 8005106:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005108:	4b0b      	ldr	r3, [pc, #44]	@ (8005138 <HAL_RCC_ClockConfig+0x240>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 030f 	and.w	r3, r3, #15
 8005110:	683a      	ldr	r2, [r7, #0]
 8005112:	429a      	cmp	r2, r3
 8005114:	d214      	bcs.n	8005140 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005116:	4b08      	ldr	r3, [pc, #32]	@ (8005138 <HAL_RCC_ClockConfig+0x240>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f023 020f 	bic.w	r2, r3, #15
 800511e:	4906      	ldr	r1, [pc, #24]	@ (8005138 <HAL_RCC_ClockConfig+0x240>)
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	4313      	orrs	r3, r2
 8005124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005126:	4b04      	ldr	r3, [pc, #16]	@ (8005138 <HAL_RCC_ClockConfig+0x240>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 030f 	and.w	r3, r3, #15
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	429a      	cmp	r2, r3
 8005132:	d005      	beq.n	8005140 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e086      	b.n	8005246 <HAL_RCC_ClockConfig+0x34e>
 8005138:	52002000 	.word	0x52002000
 800513c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0304 	and.w	r3, r3, #4
 8005148:	2b00      	cmp	r3, #0
 800514a:	d010      	beq.n	800516e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	691a      	ldr	r2, [r3, #16]
 8005150:	4b3f      	ldr	r3, [pc, #252]	@ (8005250 <HAL_RCC_ClockConfig+0x358>)
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005158:	429a      	cmp	r2, r3
 800515a:	d208      	bcs.n	800516e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800515c:	4b3c      	ldr	r3, [pc, #240]	@ (8005250 <HAL_RCC_ClockConfig+0x358>)
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	4939      	ldr	r1, [pc, #228]	@ (8005250 <HAL_RCC_ClockConfig+0x358>)
 800516a:	4313      	orrs	r3, r2
 800516c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0308 	and.w	r3, r3, #8
 8005176:	2b00      	cmp	r3, #0
 8005178:	d010      	beq.n	800519c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	695a      	ldr	r2, [r3, #20]
 800517e:	4b34      	ldr	r3, [pc, #208]	@ (8005250 <HAL_RCC_ClockConfig+0x358>)
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005186:	429a      	cmp	r2, r3
 8005188:	d208      	bcs.n	800519c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800518a:	4b31      	ldr	r3, [pc, #196]	@ (8005250 <HAL_RCC_ClockConfig+0x358>)
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	492e      	ldr	r1, [pc, #184]	@ (8005250 <HAL_RCC_ClockConfig+0x358>)
 8005198:	4313      	orrs	r3, r2
 800519a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0310 	and.w	r3, r3, #16
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d010      	beq.n	80051ca <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	699a      	ldr	r2, [r3, #24]
 80051ac:	4b28      	ldr	r3, [pc, #160]	@ (8005250 <HAL_RCC_ClockConfig+0x358>)
 80051ae:	69db      	ldr	r3, [r3, #28]
 80051b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d208      	bcs.n	80051ca <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80051b8:	4b25      	ldr	r3, [pc, #148]	@ (8005250 <HAL_RCC_ClockConfig+0x358>)
 80051ba:	69db      	ldr	r3, [r3, #28]
 80051bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	4922      	ldr	r1, [pc, #136]	@ (8005250 <HAL_RCC_ClockConfig+0x358>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0320 	and.w	r3, r3, #32
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d010      	beq.n	80051f8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	69da      	ldr	r2, [r3, #28]
 80051da:	4b1d      	ldr	r3, [pc, #116]	@ (8005250 <HAL_RCC_ClockConfig+0x358>)
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d208      	bcs.n	80051f8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80051e6:	4b1a      	ldr	r3, [pc, #104]	@ (8005250 <HAL_RCC_ClockConfig+0x358>)
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	4917      	ldr	r1, [pc, #92]	@ (8005250 <HAL_RCC_ClockConfig+0x358>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80051f8:	f000 f834 	bl	8005264 <HAL_RCC_GetSysClockFreq>
 80051fc:	4602      	mov	r2, r0
 80051fe:	4b14      	ldr	r3, [pc, #80]	@ (8005250 <HAL_RCC_ClockConfig+0x358>)
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	0a1b      	lsrs	r3, r3, #8
 8005204:	f003 030f 	and.w	r3, r3, #15
 8005208:	4912      	ldr	r1, [pc, #72]	@ (8005254 <HAL_RCC_ClockConfig+0x35c>)
 800520a:	5ccb      	ldrb	r3, [r1, r3]
 800520c:	f003 031f 	and.w	r3, r3, #31
 8005210:	fa22 f303 	lsr.w	r3, r2, r3
 8005214:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005216:	4b0e      	ldr	r3, [pc, #56]	@ (8005250 <HAL_RCC_ClockConfig+0x358>)
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	f003 030f 	and.w	r3, r3, #15
 800521e:	4a0d      	ldr	r2, [pc, #52]	@ (8005254 <HAL_RCC_ClockConfig+0x35c>)
 8005220:	5cd3      	ldrb	r3, [r2, r3]
 8005222:	f003 031f 	and.w	r3, r3, #31
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	fa22 f303 	lsr.w	r3, r2, r3
 800522c:	4a0a      	ldr	r2, [pc, #40]	@ (8005258 <HAL_RCC_ClockConfig+0x360>)
 800522e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005230:	4a0a      	ldr	r2, [pc, #40]	@ (800525c <HAL_RCC_ClockConfig+0x364>)
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005236:	4b0a      	ldr	r3, [pc, #40]	@ (8005260 <HAL_RCC_ClockConfig+0x368>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4618      	mov	r0, r3
 800523c:	f7fc fca4 	bl	8001b88 <HAL_InitTick>
 8005240:	4603      	mov	r3, r0
 8005242:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005244:	7bfb      	ldrb	r3, [r7, #15]
}
 8005246:	4618      	mov	r0, r3
 8005248:	3718      	adds	r7, #24
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	58024400 	.word	0x58024400
 8005254:	080083a4 	.word	0x080083a4
 8005258:	24000004 	.word	0x24000004
 800525c:	24000000 	.word	0x24000000
 8005260:	24000024 	.word	0x24000024

08005264 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005264:	b480      	push	{r7}
 8005266:	b089      	sub	sp, #36	@ 0x24
 8005268:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800526a:	4bb3      	ldr	r3, [pc, #716]	@ (8005538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005272:	2b18      	cmp	r3, #24
 8005274:	f200 8155 	bhi.w	8005522 <HAL_RCC_GetSysClockFreq+0x2be>
 8005278:	a201      	add	r2, pc, #4	@ (adr r2, 8005280 <HAL_RCC_GetSysClockFreq+0x1c>)
 800527a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527e:	bf00      	nop
 8005280:	080052e5 	.word	0x080052e5
 8005284:	08005523 	.word	0x08005523
 8005288:	08005523 	.word	0x08005523
 800528c:	08005523 	.word	0x08005523
 8005290:	08005523 	.word	0x08005523
 8005294:	08005523 	.word	0x08005523
 8005298:	08005523 	.word	0x08005523
 800529c:	08005523 	.word	0x08005523
 80052a0:	0800530b 	.word	0x0800530b
 80052a4:	08005523 	.word	0x08005523
 80052a8:	08005523 	.word	0x08005523
 80052ac:	08005523 	.word	0x08005523
 80052b0:	08005523 	.word	0x08005523
 80052b4:	08005523 	.word	0x08005523
 80052b8:	08005523 	.word	0x08005523
 80052bc:	08005523 	.word	0x08005523
 80052c0:	08005311 	.word	0x08005311
 80052c4:	08005523 	.word	0x08005523
 80052c8:	08005523 	.word	0x08005523
 80052cc:	08005523 	.word	0x08005523
 80052d0:	08005523 	.word	0x08005523
 80052d4:	08005523 	.word	0x08005523
 80052d8:	08005523 	.word	0x08005523
 80052dc:	08005523 	.word	0x08005523
 80052e0:	08005317 	.word	0x08005317
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052e4:	4b94      	ldr	r3, [pc, #592]	@ (8005538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0320 	and.w	r3, r3, #32
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d009      	beq.n	8005304 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052f0:	4b91      	ldr	r3, [pc, #580]	@ (8005538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	08db      	lsrs	r3, r3, #3
 80052f6:	f003 0303 	and.w	r3, r3, #3
 80052fa:	4a90      	ldr	r2, [pc, #576]	@ (800553c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80052fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005300:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005302:	e111      	b.n	8005528 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005304:	4b8d      	ldr	r3, [pc, #564]	@ (800553c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005306:	61bb      	str	r3, [r7, #24]
      break;
 8005308:	e10e      	b.n	8005528 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800530a:	4b8d      	ldr	r3, [pc, #564]	@ (8005540 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800530c:	61bb      	str	r3, [r7, #24]
      break;
 800530e:	e10b      	b.n	8005528 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005310:	4b8c      	ldr	r3, [pc, #560]	@ (8005544 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005312:	61bb      	str	r3, [r7, #24]
      break;
 8005314:	e108      	b.n	8005528 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005316:	4b88      	ldr	r3, [pc, #544]	@ (8005538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800531a:	f003 0303 	and.w	r3, r3, #3
 800531e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005320:	4b85      	ldr	r3, [pc, #532]	@ (8005538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005324:	091b      	lsrs	r3, r3, #4
 8005326:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800532a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800532c:	4b82      	ldr	r3, [pc, #520]	@ (8005538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800532e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005330:	f003 0301 	and.w	r3, r3, #1
 8005334:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005336:	4b80      	ldr	r3, [pc, #512]	@ (8005538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800533a:	08db      	lsrs	r3, r3, #3
 800533c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	fb02 f303 	mul.w	r3, r2, r3
 8005346:	ee07 3a90 	vmov	s15, r3
 800534a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800534e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	2b00      	cmp	r3, #0
 8005356:	f000 80e1 	beq.w	800551c <HAL_RCC_GetSysClockFreq+0x2b8>
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	2b02      	cmp	r3, #2
 800535e:	f000 8083 	beq.w	8005468 <HAL_RCC_GetSysClockFreq+0x204>
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	2b02      	cmp	r3, #2
 8005366:	f200 80a1 	bhi.w	80054ac <HAL_RCC_GetSysClockFreq+0x248>
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d003      	beq.n	8005378 <HAL_RCC_GetSysClockFreq+0x114>
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d056      	beq.n	8005424 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005376:	e099      	b.n	80054ac <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005378:	4b6f      	ldr	r3, [pc, #444]	@ (8005538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0320 	and.w	r3, r3, #32
 8005380:	2b00      	cmp	r3, #0
 8005382:	d02d      	beq.n	80053e0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005384:	4b6c      	ldr	r3, [pc, #432]	@ (8005538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	08db      	lsrs	r3, r3, #3
 800538a:	f003 0303 	and.w	r3, r3, #3
 800538e:	4a6b      	ldr	r2, [pc, #428]	@ (800553c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005390:	fa22 f303 	lsr.w	r3, r2, r3
 8005394:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	ee07 3a90 	vmov	s15, r3
 800539c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	ee07 3a90 	vmov	s15, r3
 80053a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ae:	4b62      	ldr	r3, [pc, #392]	@ (8005538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053b6:	ee07 3a90 	vmov	s15, r3
 80053ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053be:	ed97 6a02 	vldr	s12, [r7, #8]
 80053c2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005548 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053da:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80053de:	e087      	b.n	80054f0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	ee07 3a90 	vmov	s15, r3
 80053e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ea:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800554c <HAL_RCC_GetSysClockFreq+0x2e8>
 80053ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053f2:	4b51      	ldr	r3, [pc, #324]	@ (8005538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053fa:	ee07 3a90 	vmov	s15, r3
 80053fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005402:	ed97 6a02 	vldr	s12, [r7, #8]
 8005406:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005548 <HAL_RCC_GetSysClockFreq+0x2e4>
 800540a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800540e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005412:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800541a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800541e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005422:	e065      	b.n	80054f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	ee07 3a90 	vmov	s15, r3
 800542a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800542e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005550 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005436:	4b40      	ldr	r3, [pc, #256]	@ (8005538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800543a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800543e:	ee07 3a90 	vmov	s15, r3
 8005442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005446:	ed97 6a02 	vldr	s12, [r7, #8]
 800544a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005548 <HAL_RCC_GetSysClockFreq+0x2e4>
 800544e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005456:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800545a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800545e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005462:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005466:	e043      	b.n	80054f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	ee07 3a90 	vmov	s15, r3
 800546e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005472:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005554 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800547a:	4b2f      	ldr	r3, [pc, #188]	@ (8005538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800547c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800547e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005482:	ee07 3a90 	vmov	s15, r3
 8005486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800548a:	ed97 6a02 	vldr	s12, [r7, #8]
 800548e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005548 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800549a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800549e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80054aa:	e021      	b.n	80054f0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	ee07 3a90 	vmov	s15, r3
 80054b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054b6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005550 <HAL_RCC_GetSysClockFreq+0x2ec>
 80054ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054be:	4b1e      	ldr	r3, [pc, #120]	@ (8005538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054c6:	ee07 3a90 	vmov	s15, r3
 80054ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80054d2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005548 <HAL_RCC_GetSysClockFreq+0x2e4>
 80054d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80054ee:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80054f0:	4b11      	ldr	r3, [pc, #68]	@ (8005538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054f4:	0a5b      	lsrs	r3, r3, #9
 80054f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054fa:	3301      	adds	r3, #1
 80054fc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	ee07 3a90 	vmov	s15, r3
 8005504:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005508:	edd7 6a07 	vldr	s13, [r7, #28]
 800550c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005510:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005514:	ee17 3a90 	vmov	r3, s15
 8005518:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800551a:	e005      	b.n	8005528 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800551c:	2300      	movs	r3, #0
 800551e:	61bb      	str	r3, [r7, #24]
      break;
 8005520:	e002      	b.n	8005528 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005522:	4b07      	ldr	r3, [pc, #28]	@ (8005540 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005524:	61bb      	str	r3, [r7, #24]
      break;
 8005526:	bf00      	nop
  }

  return sysclockfreq;
 8005528:	69bb      	ldr	r3, [r7, #24]
}
 800552a:	4618      	mov	r0, r3
 800552c:	3724      	adds	r7, #36	@ 0x24
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	58024400 	.word	0x58024400
 800553c:	03d09000 	.word	0x03d09000
 8005540:	003d0900 	.word	0x003d0900
 8005544:	017d7840 	.word	0x017d7840
 8005548:	46000000 	.word	0x46000000
 800554c:	4c742400 	.word	0x4c742400
 8005550:	4a742400 	.word	0x4a742400
 8005554:	4bbebc20 	.word	0x4bbebc20

08005558 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800555e:	f7ff fe81 	bl	8005264 <HAL_RCC_GetSysClockFreq>
 8005562:	4602      	mov	r2, r0
 8005564:	4b10      	ldr	r3, [pc, #64]	@ (80055a8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	0a1b      	lsrs	r3, r3, #8
 800556a:	f003 030f 	and.w	r3, r3, #15
 800556e:	490f      	ldr	r1, [pc, #60]	@ (80055ac <HAL_RCC_GetHCLKFreq+0x54>)
 8005570:	5ccb      	ldrb	r3, [r1, r3]
 8005572:	f003 031f 	and.w	r3, r3, #31
 8005576:	fa22 f303 	lsr.w	r3, r2, r3
 800557a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800557c:	4b0a      	ldr	r3, [pc, #40]	@ (80055a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	f003 030f 	and.w	r3, r3, #15
 8005584:	4a09      	ldr	r2, [pc, #36]	@ (80055ac <HAL_RCC_GetHCLKFreq+0x54>)
 8005586:	5cd3      	ldrb	r3, [r2, r3]
 8005588:	f003 031f 	and.w	r3, r3, #31
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	fa22 f303 	lsr.w	r3, r2, r3
 8005592:	4a07      	ldr	r2, [pc, #28]	@ (80055b0 <HAL_RCC_GetHCLKFreq+0x58>)
 8005594:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005596:	4a07      	ldr	r2, [pc, #28]	@ (80055b4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800559c:	4b04      	ldr	r3, [pc, #16]	@ (80055b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800559e:	681b      	ldr	r3, [r3, #0]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	58024400 	.word	0x58024400
 80055ac:	080083a4 	.word	0x080083a4
 80055b0:	24000004 	.word	0x24000004
 80055b4:	24000000 	.word	0x24000000

080055b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80055bc:	f7ff ffcc 	bl	8005558 <HAL_RCC_GetHCLKFreq>
 80055c0:	4602      	mov	r2, r0
 80055c2:	4b06      	ldr	r3, [pc, #24]	@ (80055dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80055c4:	69db      	ldr	r3, [r3, #28]
 80055c6:	091b      	lsrs	r3, r3, #4
 80055c8:	f003 0307 	and.w	r3, r3, #7
 80055cc:	4904      	ldr	r1, [pc, #16]	@ (80055e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80055ce:	5ccb      	ldrb	r3, [r1, r3]
 80055d0:	f003 031f 	and.w	r3, r3, #31
 80055d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80055d8:	4618      	mov	r0, r3
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	58024400 	.word	0x58024400
 80055e0:	080083a4 	.word	0x080083a4

080055e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80055e8:	f7ff ffb6 	bl	8005558 <HAL_RCC_GetHCLKFreq>
 80055ec:	4602      	mov	r2, r0
 80055ee:	4b06      	ldr	r3, [pc, #24]	@ (8005608 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055f0:	69db      	ldr	r3, [r3, #28]
 80055f2:	0a1b      	lsrs	r3, r3, #8
 80055f4:	f003 0307 	and.w	r3, r3, #7
 80055f8:	4904      	ldr	r1, [pc, #16]	@ (800560c <HAL_RCC_GetPCLK2Freq+0x28>)
 80055fa:	5ccb      	ldrb	r3, [r1, r3]
 80055fc:	f003 031f 	and.w	r3, r3, #31
 8005600:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005604:	4618      	mov	r0, r3
 8005606:	bd80      	pop	{r7, pc}
 8005608:	58024400 	.word	0x58024400
 800560c:	080083a4 	.word	0x080083a4

08005610 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005614:	f7ff ffa0 	bl	8005558 <HAL_RCC_GetHCLKFreq>
 8005618:	4602      	mov	r2, r0
 800561a:	4b06      	ldr	r3, [pc, #24]	@ (8005634 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	091b      	lsrs	r3, r3, #4
 8005620:	f003 0307 	and.w	r3, r3, #7
 8005624:	4904      	ldr	r1, [pc, #16]	@ (8005638 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005626:	5ccb      	ldrb	r3, [r1, r3]
 8005628:	f003 031f 	and.w	r3, r3, #31
 800562c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005630:	4618      	mov	r0, r3
 8005632:	bd80      	pop	{r7, pc}
 8005634:	58024400 	.word	0x58024400
 8005638:	080083a4 	.word	0x080083a4

0800563c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800563c:	b480      	push	{r7}
 800563e:	b089      	sub	sp, #36	@ 0x24
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005644:	4ba1      	ldr	r3, [pc, #644]	@ (80058cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005648:	f003 0303 	and.w	r3, r3, #3
 800564c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800564e:	4b9f      	ldr	r3, [pc, #636]	@ (80058cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005652:	0b1b      	lsrs	r3, r3, #12
 8005654:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005658:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800565a:	4b9c      	ldr	r3, [pc, #624]	@ (80058cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800565c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800565e:	091b      	lsrs	r3, r3, #4
 8005660:	f003 0301 	and.w	r3, r3, #1
 8005664:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005666:	4b99      	ldr	r3, [pc, #612]	@ (80058cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800566a:	08db      	lsrs	r3, r3, #3
 800566c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	fb02 f303 	mul.w	r3, r2, r3
 8005676:	ee07 3a90 	vmov	s15, r3
 800567a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800567e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	2b00      	cmp	r3, #0
 8005686:	f000 8111 	beq.w	80058ac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	2b02      	cmp	r3, #2
 800568e:	f000 8083 	beq.w	8005798 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	2b02      	cmp	r3, #2
 8005696:	f200 80a1 	bhi.w	80057dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d003      	beq.n	80056a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d056      	beq.n	8005754 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80056a6:	e099      	b.n	80057dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056a8:	4b88      	ldr	r3, [pc, #544]	@ (80058cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0320 	and.w	r3, r3, #32
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d02d      	beq.n	8005710 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056b4:	4b85      	ldr	r3, [pc, #532]	@ (80058cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	08db      	lsrs	r3, r3, #3
 80056ba:	f003 0303 	and.w	r3, r3, #3
 80056be:	4a84      	ldr	r2, [pc, #528]	@ (80058d0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80056c0:	fa22 f303 	lsr.w	r3, r2, r3
 80056c4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	ee07 3a90 	vmov	s15, r3
 80056cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	ee07 3a90 	vmov	s15, r3
 80056d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056de:	4b7b      	ldr	r3, [pc, #492]	@ (80058cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056e6:	ee07 3a90 	vmov	s15, r3
 80056ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80056f2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80058d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80056f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800570a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800570e:	e087      	b.n	8005820 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	ee07 3a90 	vmov	s15, r3
 8005716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800571a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80058d8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800571e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005722:	4b6a      	ldr	r3, [pc, #424]	@ (80058cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800572a:	ee07 3a90 	vmov	s15, r3
 800572e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005732:	ed97 6a03 	vldr	s12, [r7, #12]
 8005736:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80058d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800573a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800573e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005742:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800574a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800574e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005752:	e065      	b.n	8005820 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	ee07 3a90 	vmov	s15, r3
 800575a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800575e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80058dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005766:	4b59      	ldr	r3, [pc, #356]	@ (80058cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800576a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800576e:	ee07 3a90 	vmov	s15, r3
 8005772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005776:	ed97 6a03 	vldr	s12, [r7, #12]
 800577a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80058d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800577e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005786:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800578a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800578e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005792:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005796:	e043      	b.n	8005820 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	ee07 3a90 	vmov	s15, r3
 800579e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057a2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80058e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80057a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057aa:	4b48      	ldr	r3, [pc, #288]	@ (80058cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057b2:	ee07 3a90 	vmov	s15, r3
 80057b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80057be:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80058d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057da:	e021      	b.n	8005820 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	ee07 3a90 	vmov	s15, r3
 80057e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057e6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80058dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80057ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ee:	4b37      	ldr	r3, [pc, #220]	@ (80058cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057f6:	ee07 3a90 	vmov	s15, r3
 80057fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005802:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80058d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800580a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800580e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800581a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800581e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005820:	4b2a      	ldr	r3, [pc, #168]	@ (80058cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005824:	0a5b      	lsrs	r3, r3, #9
 8005826:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800582a:	ee07 3a90 	vmov	s15, r3
 800582e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005832:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005836:	ee37 7a87 	vadd.f32	s14, s15, s14
 800583a:	edd7 6a07 	vldr	s13, [r7, #28]
 800583e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005842:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005846:	ee17 2a90 	vmov	r2, s15
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800584e:	4b1f      	ldr	r3, [pc, #124]	@ (80058cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005852:	0c1b      	lsrs	r3, r3, #16
 8005854:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005858:	ee07 3a90 	vmov	s15, r3
 800585c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005860:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005864:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005868:	edd7 6a07 	vldr	s13, [r7, #28]
 800586c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005870:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005874:	ee17 2a90 	vmov	r2, s15
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800587c:	4b13      	ldr	r3, [pc, #76]	@ (80058cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800587e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005880:	0e1b      	lsrs	r3, r3, #24
 8005882:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005886:	ee07 3a90 	vmov	s15, r3
 800588a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800588e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005892:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005896:	edd7 6a07 	vldr	s13, [r7, #28]
 800589a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800589e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058a2:	ee17 2a90 	vmov	r2, s15
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80058aa:	e008      	b.n	80058be <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	609a      	str	r2, [r3, #8]
}
 80058be:	bf00      	nop
 80058c0:	3724      	adds	r7, #36	@ 0x24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	58024400 	.word	0x58024400
 80058d0:	03d09000 	.word	0x03d09000
 80058d4:	46000000 	.word	0x46000000
 80058d8:	4c742400 	.word	0x4c742400
 80058dc:	4a742400 	.word	0x4a742400
 80058e0:	4bbebc20 	.word	0x4bbebc20

080058e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b089      	sub	sp, #36	@ 0x24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80058ec:	4ba1      	ldr	r3, [pc, #644]	@ (8005b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058f0:	f003 0303 	and.w	r3, r3, #3
 80058f4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80058f6:	4b9f      	ldr	r3, [pc, #636]	@ (8005b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058fa:	0d1b      	lsrs	r3, r3, #20
 80058fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005900:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005902:	4b9c      	ldr	r3, [pc, #624]	@ (8005b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005906:	0a1b      	lsrs	r3, r3, #8
 8005908:	f003 0301 	and.w	r3, r3, #1
 800590c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800590e:	4b99      	ldr	r3, [pc, #612]	@ (8005b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005912:	08db      	lsrs	r3, r3, #3
 8005914:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	fb02 f303 	mul.w	r3, r2, r3
 800591e:	ee07 3a90 	vmov	s15, r3
 8005922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005926:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	2b00      	cmp	r3, #0
 800592e:	f000 8111 	beq.w	8005b54 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	2b02      	cmp	r3, #2
 8005936:	f000 8083 	beq.w	8005a40 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	2b02      	cmp	r3, #2
 800593e:	f200 80a1 	bhi.w	8005a84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d003      	beq.n	8005950 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d056      	beq.n	80059fc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800594e:	e099      	b.n	8005a84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005950:	4b88      	ldr	r3, [pc, #544]	@ (8005b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0320 	and.w	r3, r3, #32
 8005958:	2b00      	cmp	r3, #0
 800595a:	d02d      	beq.n	80059b8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800595c:	4b85      	ldr	r3, [pc, #532]	@ (8005b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	08db      	lsrs	r3, r3, #3
 8005962:	f003 0303 	and.w	r3, r3, #3
 8005966:	4a84      	ldr	r2, [pc, #528]	@ (8005b78 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005968:	fa22 f303 	lsr.w	r3, r2, r3
 800596c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	ee07 3a90 	vmov	s15, r3
 8005974:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	ee07 3a90 	vmov	s15, r3
 800597e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005986:	4b7b      	ldr	r3, [pc, #492]	@ (8005b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800598a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800598e:	ee07 3a90 	vmov	s15, r3
 8005992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005996:	ed97 6a03 	vldr	s12, [r7, #12]
 800599a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005b7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800599e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80059b6:	e087      	b.n	8005ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	ee07 3a90 	vmov	s15, r3
 80059be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059c2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005b80 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80059c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ca:	4b6a      	ldr	r3, [pc, #424]	@ (8005b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059d2:	ee07 3a90 	vmov	s15, r3
 80059d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059da:	ed97 6a03 	vldr	s12, [r7, #12]
 80059de:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005b7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80059e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059fa:	e065      	b.n	8005ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	ee07 3a90 	vmov	s15, r3
 8005a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a06:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005b84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a0e:	4b59      	ldr	r3, [pc, #356]	@ (8005b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a16:	ee07 3a90 	vmov	s15, r3
 8005a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a22:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005b7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a3e:	e043      	b.n	8005ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	ee07 3a90 	vmov	s15, r3
 8005a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a4a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005b88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a52:	4b48      	ldr	r3, [pc, #288]	@ (8005b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a5a:	ee07 3a90 	vmov	s15, r3
 8005a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a62:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a66:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005b7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a82:	e021      	b.n	8005ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	ee07 3a90 	vmov	s15, r3
 8005a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a8e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005b84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a96:	4b37      	ldr	r3, [pc, #220]	@ (8005b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a9e:	ee07 3a90 	vmov	s15, r3
 8005aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005aaa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005b7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ab6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ac2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ac6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005ac8:	4b2a      	ldr	r3, [pc, #168]	@ (8005b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005acc:	0a5b      	lsrs	r3, r3, #9
 8005ace:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ad2:	ee07 3a90 	vmov	s15, r3
 8005ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ada:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ade:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ae2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ae6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005aea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005aee:	ee17 2a90 	vmov	r2, s15
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005af6:	4b1f      	ldr	r3, [pc, #124]	@ (8005b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005afa:	0c1b      	lsrs	r3, r3, #16
 8005afc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b00:	ee07 3a90 	vmov	s15, r3
 8005b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b10:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b1c:	ee17 2a90 	vmov	r2, s15
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005b24:	4b13      	ldr	r3, [pc, #76]	@ (8005b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b28:	0e1b      	lsrs	r3, r3, #24
 8005b2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b2e:	ee07 3a90 	vmov	s15, r3
 8005b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b4a:	ee17 2a90 	vmov	r2, s15
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005b52:	e008      	b.n	8005b66 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	609a      	str	r2, [r3, #8]
}
 8005b66:	bf00      	nop
 8005b68:	3724      	adds	r7, #36	@ 0x24
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	58024400 	.word	0x58024400
 8005b78:	03d09000 	.word	0x03d09000
 8005b7c:	46000000 	.word	0x46000000
 8005b80:	4c742400 	.word	0x4c742400
 8005b84:	4a742400 	.word	0x4a742400
 8005b88:	4bbebc20 	.word	0x4bbebc20

08005b8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d101      	bne.n	8005b9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e049      	b.n	8005c32 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d106      	bne.n	8005bb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f7fb fce8 	bl	8001588 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2202      	movs	r2, #2
 8005bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	3304      	adds	r3, #4
 8005bc8:	4619      	mov	r1, r3
 8005bca:	4610      	mov	r0, r2
 8005bcc:	f000 fea4 	bl	8006918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3708      	adds	r7, #8
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
	...

08005c3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d001      	beq.n	8005c54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e054      	b.n	8005cfe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2202      	movs	r2, #2
 8005c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68da      	ldr	r2, [r3, #12]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f042 0201 	orr.w	r2, r2, #1
 8005c6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a26      	ldr	r2, [pc, #152]	@ (8005d0c <HAL_TIM_Base_Start_IT+0xd0>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d022      	beq.n	8005cbc <HAL_TIM_Base_Start_IT+0x80>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c7e:	d01d      	beq.n	8005cbc <HAL_TIM_Base_Start_IT+0x80>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a22      	ldr	r2, [pc, #136]	@ (8005d10 <HAL_TIM_Base_Start_IT+0xd4>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d018      	beq.n	8005cbc <HAL_TIM_Base_Start_IT+0x80>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a21      	ldr	r2, [pc, #132]	@ (8005d14 <HAL_TIM_Base_Start_IT+0xd8>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d013      	beq.n	8005cbc <HAL_TIM_Base_Start_IT+0x80>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a1f      	ldr	r2, [pc, #124]	@ (8005d18 <HAL_TIM_Base_Start_IT+0xdc>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d00e      	beq.n	8005cbc <HAL_TIM_Base_Start_IT+0x80>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a1e      	ldr	r2, [pc, #120]	@ (8005d1c <HAL_TIM_Base_Start_IT+0xe0>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d009      	beq.n	8005cbc <HAL_TIM_Base_Start_IT+0x80>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a1c      	ldr	r2, [pc, #112]	@ (8005d20 <HAL_TIM_Base_Start_IT+0xe4>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d004      	beq.n	8005cbc <HAL_TIM_Base_Start_IT+0x80>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a1b      	ldr	r2, [pc, #108]	@ (8005d24 <HAL_TIM_Base_Start_IT+0xe8>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d115      	bne.n	8005ce8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689a      	ldr	r2, [r3, #8]
 8005cc2:	4b19      	ldr	r3, [pc, #100]	@ (8005d28 <HAL_TIM_Base_Start_IT+0xec>)
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2b06      	cmp	r3, #6
 8005ccc:	d015      	beq.n	8005cfa <HAL_TIM_Base_Start_IT+0xbe>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cd4:	d011      	beq.n	8005cfa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f042 0201 	orr.w	r2, r2, #1
 8005ce4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ce6:	e008      	b.n	8005cfa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f042 0201 	orr.w	r2, r2, #1
 8005cf6:	601a      	str	r2, [r3, #0]
 8005cf8:	e000      	b.n	8005cfc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cfa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3714      	adds	r7, #20
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	40010000 	.word	0x40010000
 8005d10:	40000400 	.word	0x40000400
 8005d14:	40000800 	.word	0x40000800
 8005d18:	40000c00 	.word	0x40000c00
 8005d1c:	40010400 	.word	0x40010400
 8005d20:	40001800 	.word	0x40001800
 8005d24:	40014000 	.word	0x40014000
 8005d28:	00010007 	.word	0x00010007

08005d2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e049      	b.n	8005dd2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d106      	bne.n	8005d58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f7fb fb12 	bl	800137c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	3304      	adds	r3, #4
 8005d68:	4619      	mov	r1, r3
 8005d6a:	4610      	mov	r0, r2
 8005d6c:	f000 fdd4 	bl	8006918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3708      	adds	r7, #8
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
	...

08005ddc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d109      	bne.n	8005e00 <HAL_TIM_PWM_Start+0x24>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	bf14      	ite	ne
 8005df8:	2301      	movne	r3, #1
 8005dfa:	2300      	moveq	r3, #0
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	e03c      	b.n	8005e7a <HAL_TIM_PWM_Start+0x9e>
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	2b04      	cmp	r3, #4
 8005e04:	d109      	bne.n	8005e1a <HAL_TIM_PWM_Start+0x3e>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	bf14      	ite	ne
 8005e12:	2301      	movne	r3, #1
 8005e14:	2300      	moveq	r3, #0
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	e02f      	b.n	8005e7a <HAL_TIM_PWM_Start+0x9e>
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	2b08      	cmp	r3, #8
 8005e1e:	d109      	bne.n	8005e34 <HAL_TIM_PWM_Start+0x58>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	bf14      	ite	ne
 8005e2c:	2301      	movne	r3, #1
 8005e2e:	2300      	moveq	r3, #0
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	e022      	b.n	8005e7a <HAL_TIM_PWM_Start+0x9e>
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	2b0c      	cmp	r3, #12
 8005e38:	d109      	bne.n	8005e4e <HAL_TIM_PWM_Start+0x72>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	bf14      	ite	ne
 8005e46:	2301      	movne	r3, #1
 8005e48:	2300      	moveq	r3, #0
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	e015      	b.n	8005e7a <HAL_TIM_PWM_Start+0x9e>
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	2b10      	cmp	r3, #16
 8005e52:	d109      	bne.n	8005e68 <HAL_TIM_PWM_Start+0x8c>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	bf14      	ite	ne
 8005e60:	2301      	movne	r3, #1
 8005e62:	2300      	moveq	r3, #0
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	e008      	b.n	8005e7a <HAL_TIM_PWM_Start+0x9e>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	bf14      	ite	ne
 8005e74:	2301      	movne	r3, #1
 8005e76:	2300      	moveq	r3, #0
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d001      	beq.n	8005e82 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e0a1      	b.n	8005fc6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d104      	bne.n	8005e92 <HAL_TIM_PWM_Start+0xb6>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2202      	movs	r2, #2
 8005e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e90:	e023      	b.n	8005eda <HAL_TIM_PWM_Start+0xfe>
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	2b04      	cmp	r3, #4
 8005e96:	d104      	bne.n	8005ea2 <HAL_TIM_PWM_Start+0xc6>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ea0:	e01b      	b.n	8005eda <HAL_TIM_PWM_Start+0xfe>
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	2b08      	cmp	r3, #8
 8005ea6:	d104      	bne.n	8005eb2 <HAL_TIM_PWM_Start+0xd6>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005eb0:	e013      	b.n	8005eda <HAL_TIM_PWM_Start+0xfe>
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	2b0c      	cmp	r3, #12
 8005eb6:	d104      	bne.n	8005ec2 <HAL_TIM_PWM_Start+0xe6>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2202      	movs	r2, #2
 8005ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ec0:	e00b      	b.n	8005eda <HAL_TIM_PWM_Start+0xfe>
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2b10      	cmp	r3, #16
 8005ec6:	d104      	bne.n	8005ed2 <HAL_TIM_PWM_Start+0xf6>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ed0:	e003      	b.n	8005eda <HAL_TIM_PWM_Start+0xfe>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2202      	movs	r2, #2
 8005ed6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	6839      	ldr	r1, [r7, #0]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f001 f932 	bl	800714c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a38      	ldr	r2, [pc, #224]	@ (8005fd0 <HAL_TIM_PWM_Start+0x1f4>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d013      	beq.n	8005f1a <HAL_TIM_PWM_Start+0x13e>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a37      	ldr	r2, [pc, #220]	@ (8005fd4 <HAL_TIM_PWM_Start+0x1f8>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d00e      	beq.n	8005f1a <HAL_TIM_PWM_Start+0x13e>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a35      	ldr	r2, [pc, #212]	@ (8005fd8 <HAL_TIM_PWM_Start+0x1fc>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d009      	beq.n	8005f1a <HAL_TIM_PWM_Start+0x13e>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a34      	ldr	r2, [pc, #208]	@ (8005fdc <HAL_TIM_PWM_Start+0x200>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d004      	beq.n	8005f1a <HAL_TIM_PWM_Start+0x13e>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a32      	ldr	r2, [pc, #200]	@ (8005fe0 <HAL_TIM_PWM_Start+0x204>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d101      	bne.n	8005f1e <HAL_TIM_PWM_Start+0x142>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e000      	b.n	8005f20 <HAL_TIM_PWM_Start+0x144>
 8005f1e:	2300      	movs	r3, #0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d007      	beq.n	8005f34 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f32:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a25      	ldr	r2, [pc, #148]	@ (8005fd0 <HAL_TIM_PWM_Start+0x1f4>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d022      	beq.n	8005f84 <HAL_TIM_PWM_Start+0x1a8>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f46:	d01d      	beq.n	8005f84 <HAL_TIM_PWM_Start+0x1a8>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a25      	ldr	r2, [pc, #148]	@ (8005fe4 <HAL_TIM_PWM_Start+0x208>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d018      	beq.n	8005f84 <HAL_TIM_PWM_Start+0x1a8>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a24      	ldr	r2, [pc, #144]	@ (8005fe8 <HAL_TIM_PWM_Start+0x20c>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d013      	beq.n	8005f84 <HAL_TIM_PWM_Start+0x1a8>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a22      	ldr	r2, [pc, #136]	@ (8005fec <HAL_TIM_PWM_Start+0x210>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d00e      	beq.n	8005f84 <HAL_TIM_PWM_Start+0x1a8>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a1a      	ldr	r2, [pc, #104]	@ (8005fd4 <HAL_TIM_PWM_Start+0x1f8>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d009      	beq.n	8005f84 <HAL_TIM_PWM_Start+0x1a8>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a1e      	ldr	r2, [pc, #120]	@ (8005ff0 <HAL_TIM_PWM_Start+0x214>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d004      	beq.n	8005f84 <HAL_TIM_PWM_Start+0x1a8>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a16      	ldr	r2, [pc, #88]	@ (8005fd8 <HAL_TIM_PWM_Start+0x1fc>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d115      	bne.n	8005fb0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689a      	ldr	r2, [r3, #8]
 8005f8a:	4b1a      	ldr	r3, [pc, #104]	@ (8005ff4 <HAL_TIM_PWM_Start+0x218>)
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2b06      	cmp	r3, #6
 8005f94:	d015      	beq.n	8005fc2 <HAL_TIM_PWM_Start+0x1e6>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f9c:	d011      	beq.n	8005fc2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f042 0201 	orr.w	r2, r2, #1
 8005fac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fae:	e008      	b.n	8005fc2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f042 0201 	orr.w	r2, r2, #1
 8005fbe:	601a      	str	r2, [r3, #0]
 8005fc0:	e000      	b.n	8005fc4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fc2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	40010000 	.word	0x40010000
 8005fd4:	40010400 	.word	0x40010400
 8005fd8:	40014000 	.word	0x40014000
 8005fdc:	40014400 	.word	0x40014400
 8005fe0:	40014800 	.word	0x40014800
 8005fe4:	40000400 	.word	0x40000400
 8005fe8:	40000800 	.word	0x40000800
 8005fec:	40000c00 	.word	0x40000c00
 8005ff0:	40001800 	.word	0x40001800
 8005ff4:	00010007 	.word	0x00010007

08005ff8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d101      	bne.n	800600c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e08f      	b.n	800612c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006012:	b2db      	uxtb	r3, r3
 8006014:	2b00      	cmp	r3, #0
 8006016:	d106      	bne.n	8006026 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f7fb fad9 	bl	80015d8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2202      	movs	r2, #2
 800602a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	6899      	ldr	r1, [r3, #8]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	4b3e      	ldr	r3, [pc, #248]	@ (8006134 <HAL_TIM_Encoder_Init+0x13c>)
 800603a:	400b      	ands	r3, r1
 800603c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	3304      	adds	r3, #4
 8006046:	4619      	mov	r1, r3
 8006048:	4610      	mov	r0, r2
 800604a:	f000 fc65 	bl	8006918 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	6a1b      	ldr	r3, [r3, #32]
 8006064:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	4313      	orrs	r3, r2
 800606e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	4b31      	ldr	r3, [pc, #196]	@ (8006138 <HAL_TIM_Encoder_Init+0x140>)
 8006074:	4013      	ands	r3, r2
 8006076:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	689a      	ldr	r2, [r3, #8]
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	699b      	ldr	r3, [r3, #24]
 8006080:	021b      	lsls	r3, r3, #8
 8006082:	4313      	orrs	r3, r2
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	4313      	orrs	r3, r2
 8006088:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	4b2b      	ldr	r3, [pc, #172]	@ (800613c <HAL_TIM_Encoder_Init+0x144>)
 800608e:	4013      	ands	r3, r2
 8006090:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	4b2a      	ldr	r3, [pc, #168]	@ (8006140 <HAL_TIM_Encoder_Init+0x148>)
 8006096:	4013      	ands	r3, r2
 8006098:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	68da      	ldr	r2, [r3, #12]
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	69db      	ldr	r3, [r3, #28]
 80060a2:	021b      	lsls	r3, r3, #8
 80060a4:	4313      	orrs	r3, r2
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	011a      	lsls	r2, r3, #4
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	031b      	lsls	r3, r3, #12
 80060b8:	4313      	orrs	r3, r2
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	4313      	orrs	r3, r2
 80060be:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80060c6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80060ce:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	685a      	ldr	r2, [r3, #4]
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	695b      	ldr	r3, [r3, #20]
 80060d8:	011b      	lsls	r3, r3, #4
 80060da:	4313      	orrs	r3, r2
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	4313      	orrs	r3, r2
 80060e0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	697a      	ldr	r2, [r7, #20]
 80060e8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2201      	movs	r2, #1
 8006116:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2201      	movs	r2, #1
 8006126:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3718      	adds	r7, #24
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	fffebff8 	.word	0xfffebff8
 8006138:	fffffcfc 	.word	0xfffffcfc
 800613c:	fffff3f3 	.word	0xfffff3f3
 8006140:	ffff0f0f 	.word	0xffff0f0f

08006144 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006154:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800615c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006164:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800616c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d110      	bne.n	8006196 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006174:	7bfb      	ldrb	r3, [r7, #15]
 8006176:	2b01      	cmp	r3, #1
 8006178:	d102      	bne.n	8006180 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800617a:	7b7b      	ldrb	r3, [r7, #13]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d001      	beq.n	8006184 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e089      	b.n	8006298 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2202      	movs	r2, #2
 8006188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2202      	movs	r2, #2
 8006190:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006194:	e031      	b.n	80061fa <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	2b04      	cmp	r3, #4
 800619a:	d110      	bne.n	80061be <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800619c:	7bbb      	ldrb	r3, [r7, #14]
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d102      	bne.n	80061a8 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80061a2:	7b3b      	ldrb	r3, [r7, #12]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d001      	beq.n	80061ac <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e075      	b.n	8006298 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2202      	movs	r2, #2
 80061b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2202      	movs	r2, #2
 80061b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061bc:	e01d      	b.n	80061fa <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80061be:	7bfb      	ldrb	r3, [r7, #15]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d108      	bne.n	80061d6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80061c4:	7bbb      	ldrb	r3, [r7, #14]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d105      	bne.n	80061d6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80061ca:	7b7b      	ldrb	r3, [r7, #13]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d102      	bne.n	80061d6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80061d0:	7b3b      	ldrb	r3, [r7, #12]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d001      	beq.n	80061da <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e05e      	b.n	8006298 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2202      	movs	r2, #2
 80061de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2202      	movs	r2, #2
 80061e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2202      	movs	r2, #2
 80061ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2202      	movs	r2, #2
 80061f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d003      	beq.n	8006208 <HAL_TIM_Encoder_Start_IT+0xc4>
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	2b04      	cmp	r3, #4
 8006204:	d010      	beq.n	8006228 <HAL_TIM_Encoder_Start_IT+0xe4>
 8006206:	e01f      	b.n	8006248 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2201      	movs	r2, #1
 800620e:	2100      	movs	r1, #0
 8006210:	4618      	mov	r0, r3
 8006212:	f000 ff9b 	bl	800714c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68da      	ldr	r2, [r3, #12]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f042 0202 	orr.w	r2, r2, #2
 8006224:	60da      	str	r2, [r3, #12]
      break;
 8006226:	e02e      	b.n	8006286 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2201      	movs	r2, #1
 800622e:	2104      	movs	r1, #4
 8006230:	4618      	mov	r0, r3
 8006232:	f000 ff8b 	bl	800714c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68da      	ldr	r2, [r3, #12]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f042 0204 	orr.w	r2, r2, #4
 8006244:	60da      	str	r2, [r3, #12]
      break;
 8006246:	e01e      	b.n	8006286 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2201      	movs	r2, #1
 800624e:	2100      	movs	r1, #0
 8006250:	4618      	mov	r0, r3
 8006252:	f000 ff7b 	bl	800714c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2201      	movs	r2, #1
 800625c:	2104      	movs	r1, #4
 800625e:	4618      	mov	r0, r3
 8006260:	f000 ff74 	bl	800714c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68da      	ldr	r2, [r3, #12]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f042 0202 	orr.w	r2, r2, #2
 8006272:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68da      	ldr	r2, [r3, #12]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f042 0204 	orr.w	r2, r2, #4
 8006282:	60da      	str	r2, [r3, #12]
      break;
 8006284:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f042 0201 	orr.w	r2, r2, #1
 8006294:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3710      	adds	r7, #16
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	f003 0302 	and.w	r3, r3, #2
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d020      	beq.n	8006304 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f003 0302 	and.w	r3, r3, #2
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d01b      	beq.n	8006304 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f06f 0202 	mvn.w	r2, #2
 80062d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2201      	movs	r2, #1
 80062da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	f003 0303 	and.w	r3, r3, #3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d003      	beq.n	80062f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f7fa fcfc 	bl	8000ce8 <HAL_TIM_IC_CaptureCallback>
 80062f0:	e005      	b.n	80062fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 faf2 	bl	80068dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 faf9 	bl	80068f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	f003 0304 	and.w	r3, r3, #4
 800630a:	2b00      	cmp	r3, #0
 800630c:	d020      	beq.n	8006350 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f003 0304 	and.w	r3, r3, #4
 8006314:	2b00      	cmp	r3, #0
 8006316:	d01b      	beq.n	8006350 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f06f 0204 	mvn.w	r2, #4
 8006320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2202      	movs	r2, #2
 8006326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006332:	2b00      	cmp	r3, #0
 8006334:	d003      	beq.n	800633e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f7fa fcd6 	bl	8000ce8 <HAL_TIM_IC_CaptureCallback>
 800633c:	e005      	b.n	800634a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 facc 	bl	80068dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 fad3 	bl	80068f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	f003 0308 	and.w	r3, r3, #8
 8006356:	2b00      	cmp	r3, #0
 8006358:	d020      	beq.n	800639c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f003 0308 	and.w	r3, r3, #8
 8006360:	2b00      	cmp	r3, #0
 8006362:	d01b      	beq.n	800639c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f06f 0208 	mvn.w	r2, #8
 800636c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2204      	movs	r2, #4
 8006372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	69db      	ldr	r3, [r3, #28]
 800637a:	f003 0303 	and.w	r3, r3, #3
 800637e:	2b00      	cmp	r3, #0
 8006380:	d003      	beq.n	800638a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f7fa fcb0 	bl	8000ce8 <HAL_TIM_IC_CaptureCallback>
 8006388:	e005      	b.n	8006396 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 faa6 	bl	80068dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 faad 	bl	80068f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	f003 0310 	and.w	r3, r3, #16
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d020      	beq.n	80063e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f003 0310 	and.w	r3, r3, #16
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d01b      	beq.n	80063e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f06f 0210 	mvn.w	r2, #16
 80063b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2208      	movs	r2, #8
 80063be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	69db      	ldr	r3, [r3, #28]
 80063c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d003      	beq.n	80063d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f7fa fc8a 	bl	8000ce8 <HAL_TIM_IC_CaptureCallback>
 80063d4:	e005      	b.n	80063e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 fa80 	bl	80068dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 fa87 	bl	80068f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00c      	beq.n	800640c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f003 0301 	and.w	r3, r3, #1
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d007      	beq.n	800640c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f06f 0201 	mvn.w	r2, #1
 8006404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 fa5e 	bl	80068c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006412:	2b00      	cmp	r3, #0
 8006414:	d104      	bne.n	8006420 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00c      	beq.n	800643a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006426:	2b00      	cmp	r3, #0
 8006428:	d007      	beq.n	800643a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 ff47 	bl	80072c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00c      	beq.n	800645e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800644a:	2b00      	cmp	r3, #0
 800644c:	d007      	beq.n	800645e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 ff3f 	bl	80072dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00c      	beq.n	8006482 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800646e:	2b00      	cmp	r3, #0
 8006470:	d007      	beq.n	8006482 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800647a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 fa41 	bl	8006904 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	f003 0320 	and.w	r3, r3, #32
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00c      	beq.n	80064a6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f003 0320 	and.w	r3, r3, #32
 8006492:	2b00      	cmp	r3, #0
 8006494:	d007      	beq.n	80064a6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f06f 0220 	mvn.w	r2, #32
 800649e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 ff07 	bl	80072b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064a6:	bf00      	nop
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
	...

080064b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064bc:	2300      	movs	r3, #0
 80064be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d101      	bne.n	80064ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80064ca:	2302      	movs	r3, #2
 80064cc:	e0ff      	b.n	80066ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2201      	movs	r2, #1
 80064d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2b14      	cmp	r3, #20
 80064da:	f200 80f0 	bhi.w	80066be <HAL_TIM_PWM_ConfigChannel+0x20e>
 80064de:	a201      	add	r2, pc, #4	@ (adr r2, 80064e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80064e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e4:	08006539 	.word	0x08006539
 80064e8:	080066bf 	.word	0x080066bf
 80064ec:	080066bf 	.word	0x080066bf
 80064f0:	080066bf 	.word	0x080066bf
 80064f4:	08006579 	.word	0x08006579
 80064f8:	080066bf 	.word	0x080066bf
 80064fc:	080066bf 	.word	0x080066bf
 8006500:	080066bf 	.word	0x080066bf
 8006504:	080065bb 	.word	0x080065bb
 8006508:	080066bf 	.word	0x080066bf
 800650c:	080066bf 	.word	0x080066bf
 8006510:	080066bf 	.word	0x080066bf
 8006514:	080065fb 	.word	0x080065fb
 8006518:	080066bf 	.word	0x080066bf
 800651c:	080066bf 	.word	0x080066bf
 8006520:	080066bf 	.word	0x080066bf
 8006524:	0800663d 	.word	0x0800663d
 8006528:	080066bf 	.word	0x080066bf
 800652c:	080066bf 	.word	0x080066bf
 8006530:	080066bf 	.word	0x080066bf
 8006534:	0800667d 	.word	0x0800667d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68b9      	ldr	r1, [r7, #8]
 800653e:	4618      	mov	r0, r3
 8006540:	f000 fa90 	bl	8006a64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	699a      	ldr	r2, [r3, #24]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f042 0208 	orr.w	r2, r2, #8
 8006552:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	699a      	ldr	r2, [r3, #24]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f022 0204 	bic.w	r2, r2, #4
 8006562:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	6999      	ldr	r1, [r3, #24]
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	691a      	ldr	r2, [r3, #16]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	430a      	orrs	r2, r1
 8006574:	619a      	str	r2, [r3, #24]
      break;
 8006576:	e0a5      	b.n	80066c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68b9      	ldr	r1, [r7, #8]
 800657e:	4618      	mov	r0, r3
 8006580:	f000 fb00 	bl	8006b84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	699a      	ldr	r2, [r3, #24]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006592:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	699a      	ldr	r2, [r3, #24]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	6999      	ldr	r1, [r3, #24]
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	021a      	lsls	r2, r3, #8
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	430a      	orrs	r2, r1
 80065b6:	619a      	str	r2, [r3, #24]
      break;
 80065b8:	e084      	b.n	80066c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68b9      	ldr	r1, [r7, #8]
 80065c0:	4618      	mov	r0, r3
 80065c2:	f000 fb69 	bl	8006c98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	69da      	ldr	r2, [r3, #28]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f042 0208 	orr.w	r2, r2, #8
 80065d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	69da      	ldr	r2, [r3, #28]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f022 0204 	bic.w	r2, r2, #4
 80065e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	69d9      	ldr	r1, [r3, #28]
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	691a      	ldr	r2, [r3, #16]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	430a      	orrs	r2, r1
 80065f6:	61da      	str	r2, [r3, #28]
      break;
 80065f8:	e064      	b.n	80066c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68b9      	ldr	r1, [r7, #8]
 8006600:	4618      	mov	r0, r3
 8006602:	f000 fbd1 	bl	8006da8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	69da      	ldr	r2, [r3, #28]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006614:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	69da      	ldr	r2, [r3, #28]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006624:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	69d9      	ldr	r1, [r3, #28]
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	021a      	lsls	r2, r3, #8
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	430a      	orrs	r2, r1
 8006638:	61da      	str	r2, [r3, #28]
      break;
 800663a:	e043      	b.n	80066c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68b9      	ldr	r1, [r7, #8]
 8006642:	4618      	mov	r0, r3
 8006644:	f000 fc1a 	bl	8006e7c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f042 0208 	orr.w	r2, r2, #8
 8006656:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f022 0204 	bic.w	r2, r2, #4
 8006666:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	691a      	ldr	r2, [r3, #16]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	430a      	orrs	r2, r1
 8006678:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800667a:	e023      	b.n	80066c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68b9      	ldr	r1, [r7, #8]
 8006682:	4618      	mov	r0, r3
 8006684:	f000 fc5e 	bl	8006f44 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006696:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066a6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	021a      	lsls	r2, r3, #8
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	430a      	orrs	r2, r1
 80066ba:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80066bc:	e002      	b.n	80066c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	75fb      	strb	r3, [r7, #23]
      break;
 80066c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80066cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3718      	adds	r7, #24
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop

080066d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066e2:	2300      	movs	r3, #0
 80066e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d101      	bne.n	80066f4 <HAL_TIM_ConfigClockSource+0x1c>
 80066f0:	2302      	movs	r3, #2
 80066f2:	e0dc      	b.n	80068ae <HAL_TIM_ConfigClockSource+0x1d6>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2202      	movs	r2, #2
 8006700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800670c:	68ba      	ldr	r2, [r7, #8]
 800670e:	4b6a      	ldr	r3, [pc, #424]	@ (80068b8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006710:	4013      	ands	r3, r2
 8006712:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800671a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68ba      	ldr	r2, [r7, #8]
 8006722:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a64      	ldr	r2, [pc, #400]	@ (80068bc <HAL_TIM_ConfigClockSource+0x1e4>)
 800672a:	4293      	cmp	r3, r2
 800672c:	f000 80a9 	beq.w	8006882 <HAL_TIM_ConfigClockSource+0x1aa>
 8006730:	4a62      	ldr	r2, [pc, #392]	@ (80068bc <HAL_TIM_ConfigClockSource+0x1e4>)
 8006732:	4293      	cmp	r3, r2
 8006734:	f200 80ae 	bhi.w	8006894 <HAL_TIM_ConfigClockSource+0x1bc>
 8006738:	4a61      	ldr	r2, [pc, #388]	@ (80068c0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800673a:	4293      	cmp	r3, r2
 800673c:	f000 80a1 	beq.w	8006882 <HAL_TIM_ConfigClockSource+0x1aa>
 8006740:	4a5f      	ldr	r2, [pc, #380]	@ (80068c0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006742:	4293      	cmp	r3, r2
 8006744:	f200 80a6 	bhi.w	8006894 <HAL_TIM_ConfigClockSource+0x1bc>
 8006748:	4a5e      	ldr	r2, [pc, #376]	@ (80068c4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800674a:	4293      	cmp	r3, r2
 800674c:	f000 8099 	beq.w	8006882 <HAL_TIM_ConfigClockSource+0x1aa>
 8006750:	4a5c      	ldr	r2, [pc, #368]	@ (80068c4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006752:	4293      	cmp	r3, r2
 8006754:	f200 809e 	bhi.w	8006894 <HAL_TIM_ConfigClockSource+0x1bc>
 8006758:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800675c:	f000 8091 	beq.w	8006882 <HAL_TIM_ConfigClockSource+0x1aa>
 8006760:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006764:	f200 8096 	bhi.w	8006894 <HAL_TIM_ConfigClockSource+0x1bc>
 8006768:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800676c:	f000 8089 	beq.w	8006882 <HAL_TIM_ConfigClockSource+0x1aa>
 8006770:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006774:	f200 808e 	bhi.w	8006894 <HAL_TIM_ConfigClockSource+0x1bc>
 8006778:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800677c:	d03e      	beq.n	80067fc <HAL_TIM_ConfigClockSource+0x124>
 800677e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006782:	f200 8087 	bhi.w	8006894 <HAL_TIM_ConfigClockSource+0x1bc>
 8006786:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800678a:	f000 8086 	beq.w	800689a <HAL_TIM_ConfigClockSource+0x1c2>
 800678e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006792:	d87f      	bhi.n	8006894 <HAL_TIM_ConfigClockSource+0x1bc>
 8006794:	2b70      	cmp	r3, #112	@ 0x70
 8006796:	d01a      	beq.n	80067ce <HAL_TIM_ConfigClockSource+0xf6>
 8006798:	2b70      	cmp	r3, #112	@ 0x70
 800679a:	d87b      	bhi.n	8006894 <HAL_TIM_ConfigClockSource+0x1bc>
 800679c:	2b60      	cmp	r3, #96	@ 0x60
 800679e:	d050      	beq.n	8006842 <HAL_TIM_ConfigClockSource+0x16a>
 80067a0:	2b60      	cmp	r3, #96	@ 0x60
 80067a2:	d877      	bhi.n	8006894 <HAL_TIM_ConfigClockSource+0x1bc>
 80067a4:	2b50      	cmp	r3, #80	@ 0x50
 80067a6:	d03c      	beq.n	8006822 <HAL_TIM_ConfigClockSource+0x14a>
 80067a8:	2b50      	cmp	r3, #80	@ 0x50
 80067aa:	d873      	bhi.n	8006894 <HAL_TIM_ConfigClockSource+0x1bc>
 80067ac:	2b40      	cmp	r3, #64	@ 0x40
 80067ae:	d058      	beq.n	8006862 <HAL_TIM_ConfigClockSource+0x18a>
 80067b0:	2b40      	cmp	r3, #64	@ 0x40
 80067b2:	d86f      	bhi.n	8006894 <HAL_TIM_ConfigClockSource+0x1bc>
 80067b4:	2b30      	cmp	r3, #48	@ 0x30
 80067b6:	d064      	beq.n	8006882 <HAL_TIM_ConfigClockSource+0x1aa>
 80067b8:	2b30      	cmp	r3, #48	@ 0x30
 80067ba:	d86b      	bhi.n	8006894 <HAL_TIM_ConfigClockSource+0x1bc>
 80067bc:	2b20      	cmp	r3, #32
 80067be:	d060      	beq.n	8006882 <HAL_TIM_ConfigClockSource+0x1aa>
 80067c0:	2b20      	cmp	r3, #32
 80067c2:	d867      	bhi.n	8006894 <HAL_TIM_ConfigClockSource+0x1bc>
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d05c      	beq.n	8006882 <HAL_TIM_ConfigClockSource+0x1aa>
 80067c8:	2b10      	cmp	r3, #16
 80067ca:	d05a      	beq.n	8006882 <HAL_TIM_ConfigClockSource+0x1aa>
 80067cc:	e062      	b.n	8006894 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80067de:	f000 fc95 	bl	800710c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80067f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68ba      	ldr	r2, [r7, #8]
 80067f8:	609a      	str	r2, [r3, #8]
      break;
 80067fa:	e04f      	b.n	800689c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800680c:	f000 fc7e 	bl	800710c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	689a      	ldr	r2, [r3, #8]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800681e:	609a      	str	r2, [r3, #8]
      break;
 8006820:	e03c      	b.n	800689c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800682e:	461a      	mov	r2, r3
 8006830:	f000 fbee 	bl	8007010 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2150      	movs	r1, #80	@ 0x50
 800683a:	4618      	mov	r0, r3
 800683c:	f000 fc48 	bl	80070d0 <TIM_ITRx_SetConfig>
      break;
 8006840:	e02c      	b.n	800689c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800684e:	461a      	mov	r2, r3
 8006850:	f000 fc0d 	bl	800706e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2160      	movs	r1, #96	@ 0x60
 800685a:	4618      	mov	r0, r3
 800685c:	f000 fc38 	bl	80070d0 <TIM_ITRx_SetConfig>
      break;
 8006860:	e01c      	b.n	800689c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800686e:	461a      	mov	r2, r3
 8006870:	f000 fbce 	bl	8007010 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2140      	movs	r1, #64	@ 0x40
 800687a:	4618      	mov	r0, r3
 800687c:	f000 fc28 	bl	80070d0 <TIM_ITRx_SetConfig>
      break;
 8006880:	e00c      	b.n	800689c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4619      	mov	r1, r3
 800688c:	4610      	mov	r0, r2
 800688e:	f000 fc1f 	bl	80070d0 <TIM_ITRx_SetConfig>
      break;
 8006892:	e003      	b.n	800689c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	73fb      	strb	r3, [r7, #15]
      break;
 8006898:	e000      	b.n	800689c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800689a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80068ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3710      	adds	r7, #16
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	ffceff88 	.word	0xffceff88
 80068bc:	00100040 	.word	0x00100040
 80068c0:	00100030 	.word	0x00100030
 80068c4:	00100020 	.word	0x00100020

080068c8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068e4:	bf00      	nop
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006918:	b480      	push	{r7}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a46      	ldr	r2, [pc, #280]	@ (8006a44 <TIM_Base_SetConfig+0x12c>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d013      	beq.n	8006958 <TIM_Base_SetConfig+0x40>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006936:	d00f      	beq.n	8006958 <TIM_Base_SetConfig+0x40>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a43      	ldr	r2, [pc, #268]	@ (8006a48 <TIM_Base_SetConfig+0x130>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d00b      	beq.n	8006958 <TIM_Base_SetConfig+0x40>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a42      	ldr	r2, [pc, #264]	@ (8006a4c <TIM_Base_SetConfig+0x134>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d007      	beq.n	8006958 <TIM_Base_SetConfig+0x40>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a41      	ldr	r2, [pc, #260]	@ (8006a50 <TIM_Base_SetConfig+0x138>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d003      	beq.n	8006958 <TIM_Base_SetConfig+0x40>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a40      	ldr	r2, [pc, #256]	@ (8006a54 <TIM_Base_SetConfig+0x13c>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d108      	bne.n	800696a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800695e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	4313      	orrs	r3, r2
 8006968:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a35      	ldr	r2, [pc, #212]	@ (8006a44 <TIM_Base_SetConfig+0x12c>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d01f      	beq.n	80069b2 <TIM_Base_SetConfig+0x9a>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006978:	d01b      	beq.n	80069b2 <TIM_Base_SetConfig+0x9a>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a32      	ldr	r2, [pc, #200]	@ (8006a48 <TIM_Base_SetConfig+0x130>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d017      	beq.n	80069b2 <TIM_Base_SetConfig+0x9a>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a31      	ldr	r2, [pc, #196]	@ (8006a4c <TIM_Base_SetConfig+0x134>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d013      	beq.n	80069b2 <TIM_Base_SetConfig+0x9a>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a30      	ldr	r2, [pc, #192]	@ (8006a50 <TIM_Base_SetConfig+0x138>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d00f      	beq.n	80069b2 <TIM_Base_SetConfig+0x9a>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a2f      	ldr	r2, [pc, #188]	@ (8006a54 <TIM_Base_SetConfig+0x13c>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d00b      	beq.n	80069b2 <TIM_Base_SetConfig+0x9a>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a2e      	ldr	r2, [pc, #184]	@ (8006a58 <TIM_Base_SetConfig+0x140>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d007      	beq.n	80069b2 <TIM_Base_SetConfig+0x9a>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a2d      	ldr	r2, [pc, #180]	@ (8006a5c <TIM_Base_SetConfig+0x144>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d003      	beq.n	80069b2 <TIM_Base_SetConfig+0x9a>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a2c      	ldr	r2, [pc, #176]	@ (8006a60 <TIM_Base_SetConfig+0x148>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d108      	bne.n	80069c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	689a      	ldr	r2, [r3, #8]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a16      	ldr	r2, [pc, #88]	@ (8006a44 <TIM_Base_SetConfig+0x12c>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d00f      	beq.n	8006a10 <TIM_Base_SetConfig+0xf8>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a18      	ldr	r2, [pc, #96]	@ (8006a54 <TIM_Base_SetConfig+0x13c>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d00b      	beq.n	8006a10 <TIM_Base_SetConfig+0xf8>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a17      	ldr	r2, [pc, #92]	@ (8006a58 <TIM_Base_SetConfig+0x140>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d007      	beq.n	8006a10 <TIM_Base_SetConfig+0xf8>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a16      	ldr	r2, [pc, #88]	@ (8006a5c <TIM_Base_SetConfig+0x144>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d003      	beq.n	8006a10 <TIM_Base_SetConfig+0xf8>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a15      	ldr	r2, [pc, #84]	@ (8006a60 <TIM_Base_SetConfig+0x148>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d103      	bne.n	8006a18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	691a      	ldr	r2, [r3, #16]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d105      	bne.n	8006a36 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	f023 0201 	bic.w	r2, r3, #1
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	611a      	str	r2, [r3, #16]
  }
}
 8006a36:	bf00      	nop
 8006a38:	3714      	adds	r7, #20
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	40010000 	.word	0x40010000
 8006a48:	40000400 	.word	0x40000400
 8006a4c:	40000800 	.word	0x40000800
 8006a50:	40000c00 	.word	0x40000c00
 8006a54:	40010400 	.word	0x40010400
 8006a58:	40014000 	.word	0x40014000
 8006a5c:	40014400 	.word	0x40014400
 8006a60:	40014800 	.word	0x40014800

08006a64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b087      	sub	sp, #28
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a1b      	ldr	r3, [r3, #32]
 8006a72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a1b      	ldr	r3, [r3, #32]
 8006a78:	f023 0201 	bic.w	r2, r3, #1
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	699b      	ldr	r3, [r3, #24]
 8006a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	4b37      	ldr	r3, [pc, #220]	@ (8006b6c <TIM_OC1_SetConfig+0x108>)
 8006a90:	4013      	ands	r3, r2
 8006a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f023 0303 	bic.w	r3, r3, #3
 8006a9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	f023 0302 	bic.w	r3, r3, #2
 8006aac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	697a      	ldr	r2, [r7, #20]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a2d      	ldr	r2, [pc, #180]	@ (8006b70 <TIM_OC1_SetConfig+0x10c>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d00f      	beq.n	8006ae0 <TIM_OC1_SetConfig+0x7c>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a2c      	ldr	r2, [pc, #176]	@ (8006b74 <TIM_OC1_SetConfig+0x110>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d00b      	beq.n	8006ae0 <TIM_OC1_SetConfig+0x7c>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a2b      	ldr	r2, [pc, #172]	@ (8006b78 <TIM_OC1_SetConfig+0x114>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d007      	beq.n	8006ae0 <TIM_OC1_SetConfig+0x7c>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a2a      	ldr	r2, [pc, #168]	@ (8006b7c <TIM_OC1_SetConfig+0x118>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d003      	beq.n	8006ae0 <TIM_OC1_SetConfig+0x7c>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a29      	ldr	r2, [pc, #164]	@ (8006b80 <TIM_OC1_SetConfig+0x11c>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d10c      	bne.n	8006afa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	f023 0308 	bic.w	r3, r3, #8
 8006ae6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	697a      	ldr	r2, [r7, #20]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	f023 0304 	bic.w	r3, r3, #4
 8006af8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a1c      	ldr	r2, [pc, #112]	@ (8006b70 <TIM_OC1_SetConfig+0x10c>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d00f      	beq.n	8006b22 <TIM_OC1_SetConfig+0xbe>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a1b      	ldr	r2, [pc, #108]	@ (8006b74 <TIM_OC1_SetConfig+0x110>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d00b      	beq.n	8006b22 <TIM_OC1_SetConfig+0xbe>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a1a      	ldr	r2, [pc, #104]	@ (8006b78 <TIM_OC1_SetConfig+0x114>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d007      	beq.n	8006b22 <TIM_OC1_SetConfig+0xbe>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a19      	ldr	r2, [pc, #100]	@ (8006b7c <TIM_OC1_SetConfig+0x118>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d003      	beq.n	8006b22 <TIM_OC1_SetConfig+0xbe>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a18      	ldr	r2, [pc, #96]	@ (8006b80 <TIM_OC1_SetConfig+0x11c>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d111      	bne.n	8006b46 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006b30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	695b      	ldr	r3, [r3, #20]
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	693a      	ldr	r2, [r7, #16]
 8006b4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	697a      	ldr	r2, [r7, #20]
 8006b5e:	621a      	str	r2, [r3, #32]
}
 8006b60:	bf00      	nop
 8006b62:	371c      	adds	r7, #28
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr
 8006b6c:	fffeff8f 	.word	0xfffeff8f
 8006b70:	40010000 	.word	0x40010000
 8006b74:	40010400 	.word	0x40010400
 8006b78:	40014000 	.word	0x40014000
 8006b7c:	40014400 	.word	0x40014400
 8006b80:	40014800 	.word	0x40014800

08006b84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b087      	sub	sp, #28
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a1b      	ldr	r3, [r3, #32]
 8006b98:	f023 0210 	bic.w	r2, r3, #16
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	4b34      	ldr	r3, [pc, #208]	@ (8006c80 <TIM_OC2_SetConfig+0xfc>)
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	021b      	lsls	r3, r3, #8
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	f023 0320 	bic.w	r3, r3, #32
 8006bce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	011b      	lsls	r3, r3, #4
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a29      	ldr	r2, [pc, #164]	@ (8006c84 <TIM_OC2_SetConfig+0x100>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d003      	beq.n	8006bec <TIM_OC2_SetConfig+0x68>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a28      	ldr	r2, [pc, #160]	@ (8006c88 <TIM_OC2_SetConfig+0x104>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d10d      	bne.n	8006c08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	011b      	lsls	r3, r3, #4
 8006bfa:	697a      	ldr	r2, [r7, #20]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a1e      	ldr	r2, [pc, #120]	@ (8006c84 <TIM_OC2_SetConfig+0x100>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d00f      	beq.n	8006c30 <TIM_OC2_SetConfig+0xac>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a1d      	ldr	r2, [pc, #116]	@ (8006c88 <TIM_OC2_SetConfig+0x104>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d00b      	beq.n	8006c30 <TIM_OC2_SetConfig+0xac>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a1c      	ldr	r2, [pc, #112]	@ (8006c8c <TIM_OC2_SetConfig+0x108>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d007      	beq.n	8006c30 <TIM_OC2_SetConfig+0xac>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a1b      	ldr	r2, [pc, #108]	@ (8006c90 <TIM_OC2_SetConfig+0x10c>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d003      	beq.n	8006c30 <TIM_OC2_SetConfig+0xac>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a1a      	ldr	r2, [pc, #104]	@ (8006c94 <TIM_OC2_SetConfig+0x110>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d113      	bne.n	8006c58 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	695b      	ldr	r3, [r3, #20]
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	693a      	ldr	r2, [r7, #16]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	693a      	ldr	r2, [r7, #16]
 8006c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	685a      	ldr	r2, [r3, #4]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	697a      	ldr	r2, [r7, #20]
 8006c70:	621a      	str	r2, [r3, #32]
}
 8006c72:	bf00      	nop
 8006c74:	371c      	adds	r7, #28
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	feff8fff 	.word	0xfeff8fff
 8006c84:	40010000 	.word	0x40010000
 8006c88:	40010400 	.word	0x40010400
 8006c8c:	40014000 	.word	0x40014000
 8006c90:	40014400 	.word	0x40014400
 8006c94:	40014800 	.word	0x40014800

08006c98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b087      	sub	sp, #28
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a1b      	ldr	r3, [r3, #32]
 8006cac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	69db      	ldr	r3, [r3, #28]
 8006cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	4b33      	ldr	r3, [pc, #204]	@ (8006d90 <TIM_OC3_SetConfig+0xf8>)
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f023 0303 	bic.w	r3, r3, #3
 8006cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ce0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	021b      	lsls	r3, r3, #8
 8006ce8:	697a      	ldr	r2, [r7, #20]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a28      	ldr	r2, [pc, #160]	@ (8006d94 <TIM_OC3_SetConfig+0xfc>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d003      	beq.n	8006cfe <TIM_OC3_SetConfig+0x66>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a27      	ldr	r2, [pc, #156]	@ (8006d98 <TIM_OC3_SetConfig+0x100>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d10d      	bne.n	8006d1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	021b      	lsls	r3, r3, #8
 8006d0c:	697a      	ldr	r2, [r7, #20]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a1d      	ldr	r2, [pc, #116]	@ (8006d94 <TIM_OC3_SetConfig+0xfc>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d00f      	beq.n	8006d42 <TIM_OC3_SetConfig+0xaa>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a1c      	ldr	r2, [pc, #112]	@ (8006d98 <TIM_OC3_SetConfig+0x100>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d00b      	beq.n	8006d42 <TIM_OC3_SetConfig+0xaa>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a1b      	ldr	r2, [pc, #108]	@ (8006d9c <TIM_OC3_SetConfig+0x104>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d007      	beq.n	8006d42 <TIM_OC3_SetConfig+0xaa>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a1a      	ldr	r2, [pc, #104]	@ (8006da0 <TIM_OC3_SetConfig+0x108>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d003      	beq.n	8006d42 <TIM_OC3_SetConfig+0xaa>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a19      	ldr	r2, [pc, #100]	@ (8006da4 <TIM_OC3_SetConfig+0x10c>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d113      	bne.n	8006d6a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006d50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	695b      	ldr	r3, [r3, #20]
 8006d56:	011b      	lsls	r3, r3, #4
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	011b      	lsls	r3, r3, #4
 8006d64:	693a      	ldr	r2, [r7, #16]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	685a      	ldr	r2, [r3, #4]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	697a      	ldr	r2, [r7, #20]
 8006d82:	621a      	str	r2, [r3, #32]
}
 8006d84:	bf00      	nop
 8006d86:	371c      	adds	r7, #28
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr
 8006d90:	fffeff8f 	.word	0xfffeff8f
 8006d94:	40010000 	.word	0x40010000
 8006d98:	40010400 	.word	0x40010400
 8006d9c:	40014000 	.word	0x40014000
 8006da0:	40014400 	.word	0x40014400
 8006da4:	40014800 	.word	0x40014800

08006da8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b087      	sub	sp, #28
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a1b      	ldr	r3, [r3, #32]
 8006dbc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	69db      	ldr	r3, [r3, #28]
 8006dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	4b24      	ldr	r3, [pc, #144]	@ (8006e64 <TIM_OC4_SetConfig+0xbc>)
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	021b      	lsls	r3, r3, #8
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006df2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	031b      	lsls	r3, r3, #12
 8006dfa:	693a      	ldr	r2, [r7, #16]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a19      	ldr	r2, [pc, #100]	@ (8006e68 <TIM_OC4_SetConfig+0xc0>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d00f      	beq.n	8006e28 <TIM_OC4_SetConfig+0x80>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a18      	ldr	r2, [pc, #96]	@ (8006e6c <TIM_OC4_SetConfig+0xc4>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d00b      	beq.n	8006e28 <TIM_OC4_SetConfig+0x80>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a17      	ldr	r2, [pc, #92]	@ (8006e70 <TIM_OC4_SetConfig+0xc8>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d007      	beq.n	8006e28 <TIM_OC4_SetConfig+0x80>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a16      	ldr	r2, [pc, #88]	@ (8006e74 <TIM_OC4_SetConfig+0xcc>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d003      	beq.n	8006e28 <TIM_OC4_SetConfig+0x80>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a15      	ldr	r2, [pc, #84]	@ (8006e78 <TIM_OC4_SetConfig+0xd0>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d109      	bne.n	8006e3c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	695b      	ldr	r3, [r3, #20]
 8006e34:	019b      	lsls	r3, r3, #6
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	697a      	ldr	r2, [r7, #20]
 8006e40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	693a      	ldr	r2, [r7, #16]
 8006e54:	621a      	str	r2, [r3, #32]
}
 8006e56:	bf00      	nop
 8006e58:	371c      	adds	r7, #28
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop
 8006e64:	feff8fff 	.word	0xfeff8fff
 8006e68:	40010000 	.word	0x40010000
 8006e6c:	40010400 	.word	0x40010400
 8006e70:	40014000 	.word	0x40014000
 8006e74:	40014400 	.word	0x40014400
 8006e78:	40014800 	.word	0x40014800

08006e7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b087      	sub	sp, #28
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a1b      	ldr	r3, [r3, #32]
 8006e8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a1b      	ldr	r3, [r3, #32]
 8006e90:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	4b21      	ldr	r3, [pc, #132]	@ (8006f2c <TIM_OC5_SetConfig+0xb0>)
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006ebc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	041b      	lsls	r3, r3, #16
 8006ec4:	693a      	ldr	r2, [r7, #16]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a18      	ldr	r2, [pc, #96]	@ (8006f30 <TIM_OC5_SetConfig+0xb4>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d00f      	beq.n	8006ef2 <TIM_OC5_SetConfig+0x76>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a17      	ldr	r2, [pc, #92]	@ (8006f34 <TIM_OC5_SetConfig+0xb8>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d00b      	beq.n	8006ef2 <TIM_OC5_SetConfig+0x76>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a16      	ldr	r2, [pc, #88]	@ (8006f38 <TIM_OC5_SetConfig+0xbc>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d007      	beq.n	8006ef2 <TIM_OC5_SetConfig+0x76>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a15      	ldr	r2, [pc, #84]	@ (8006f3c <TIM_OC5_SetConfig+0xc0>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d003      	beq.n	8006ef2 <TIM_OC5_SetConfig+0x76>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a14      	ldr	r2, [pc, #80]	@ (8006f40 <TIM_OC5_SetConfig+0xc4>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d109      	bne.n	8006f06 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ef8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	021b      	lsls	r3, r3, #8
 8006f00:	697a      	ldr	r2, [r7, #20]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	697a      	ldr	r2, [r7, #20]
 8006f0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	685a      	ldr	r2, [r3, #4]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	693a      	ldr	r2, [r7, #16]
 8006f1e:	621a      	str	r2, [r3, #32]
}
 8006f20:	bf00      	nop
 8006f22:	371c      	adds	r7, #28
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr
 8006f2c:	fffeff8f 	.word	0xfffeff8f
 8006f30:	40010000 	.word	0x40010000
 8006f34:	40010400 	.word	0x40010400
 8006f38:	40014000 	.word	0x40014000
 8006f3c:	40014400 	.word	0x40014400
 8006f40:	40014800 	.word	0x40014800

08006f44 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b087      	sub	sp, #28
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6a1b      	ldr	r3, [r3, #32]
 8006f58:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	4b22      	ldr	r3, [pc, #136]	@ (8006ff8 <TIM_OC6_SetConfig+0xb4>)
 8006f70:	4013      	ands	r3, r2
 8006f72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	021b      	lsls	r3, r3, #8
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006f86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	051b      	lsls	r3, r3, #20
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a19      	ldr	r2, [pc, #100]	@ (8006ffc <TIM_OC6_SetConfig+0xb8>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d00f      	beq.n	8006fbc <TIM_OC6_SetConfig+0x78>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a18      	ldr	r2, [pc, #96]	@ (8007000 <TIM_OC6_SetConfig+0xbc>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d00b      	beq.n	8006fbc <TIM_OC6_SetConfig+0x78>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a17      	ldr	r2, [pc, #92]	@ (8007004 <TIM_OC6_SetConfig+0xc0>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d007      	beq.n	8006fbc <TIM_OC6_SetConfig+0x78>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a16      	ldr	r2, [pc, #88]	@ (8007008 <TIM_OC6_SetConfig+0xc4>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d003      	beq.n	8006fbc <TIM_OC6_SetConfig+0x78>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a15      	ldr	r2, [pc, #84]	@ (800700c <TIM_OC6_SetConfig+0xc8>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d109      	bne.n	8006fd0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006fc2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	695b      	ldr	r3, [r3, #20]
 8006fc8:	029b      	lsls	r3, r3, #10
 8006fca:	697a      	ldr	r2, [r7, #20]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	685a      	ldr	r2, [r3, #4]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	693a      	ldr	r2, [r7, #16]
 8006fe8:	621a      	str	r2, [r3, #32]
}
 8006fea:	bf00      	nop
 8006fec:	371c      	adds	r7, #28
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop
 8006ff8:	feff8fff 	.word	0xfeff8fff
 8006ffc:	40010000 	.word	0x40010000
 8007000:	40010400 	.word	0x40010400
 8007004:	40014000 	.word	0x40014000
 8007008:	40014400 	.word	0x40014400
 800700c:	40014800 	.word	0x40014800

08007010 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007010:	b480      	push	{r7}
 8007012:	b087      	sub	sp, #28
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6a1b      	ldr	r3, [r3, #32]
 8007020:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6a1b      	ldr	r3, [r3, #32]
 8007026:	f023 0201 	bic.w	r2, r3, #1
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	699b      	ldr	r3, [r3, #24]
 8007032:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800703a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	011b      	lsls	r3, r3, #4
 8007040:	693a      	ldr	r2, [r7, #16]
 8007042:	4313      	orrs	r3, r2
 8007044:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	f023 030a 	bic.w	r3, r3, #10
 800704c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800704e:	697a      	ldr	r2, [r7, #20]
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	4313      	orrs	r3, r2
 8007054:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	693a      	ldr	r2, [r7, #16]
 800705a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	621a      	str	r2, [r3, #32]
}
 8007062:	bf00      	nop
 8007064:	371c      	adds	r7, #28
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr

0800706e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800706e:	b480      	push	{r7}
 8007070:	b087      	sub	sp, #28
 8007072:	af00      	add	r7, sp, #0
 8007074:	60f8      	str	r0, [r7, #12]
 8007076:	60b9      	str	r1, [r7, #8]
 8007078:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6a1b      	ldr	r3, [r3, #32]
 8007084:	f023 0210 	bic.w	r2, r3, #16
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007098:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	031b      	lsls	r3, r3, #12
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80070aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	011b      	lsls	r3, r3, #4
 80070b0:	697a      	ldr	r2, [r7, #20]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	697a      	ldr	r2, [r7, #20]
 80070c0:	621a      	str	r2, [r3, #32]
}
 80070c2:	bf00      	nop
 80070c4:	371c      	adds	r7, #28
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
	...

080070d0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	4b09      	ldr	r3, [pc, #36]	@ (8007108 <TIM_ITRx_SetConfig+0x38>)
 80070e4:	4013      	ands	r3, r2
 80070e6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070e8:	683a      	ldr	r2, [r7, #0]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	f043 0307 	orr.w	r3, r3, #7
 80070f2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	609a      	str	r2, [r3, #8]
}
 80070fa:	bf00      	nop
 80070fc:	3714      	adds	r7, #20
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	ffcfff8f 	.word	0xffcfff8f

0800710c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800710c:	b480      	push	{r7}
 800710e:	b087      	sub	sp, #28
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	607a      	str	r2, [r7, #4]
 8007118:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007126:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	021a      	lsls	r2, r3, #8
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	431a      	orrs	r2, r3
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	4313      	orrs	r3, r2
 8007134:	697a      	ldr	r2, [r7, #20]
 8007136:	4313      	orrs	r3, r2
 8007138:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	697a      	ldr	r2, [r7, #20]
 800713e:	609a      	str	r2, [r3, #8]
}
 8007140:	bf00      	nop
 8007142:	371c      	adds	r7, #28
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800714c:	b480      	push	{r7}
 800714e:	b087      	sub	sp, #28
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	f003 031f 	and.w	r3, r3, #31
 800715e:	2201      	movs	r2, #1
 8007160:	fa02 f303 	lsl.w	r3, r2, r3
 8007164:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6a1a      	ldr	r2, [r3, #32]
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	43db      	mvns	r3, r3
 800716e:	401a      	ands	r2, r3
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6a1a      	ldr	r2, [r3, #32]
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	f003 031f 	and.w	r3, r3, #31
 800717e:	6879      	ldr	r1, [r7, #4]
 8007180:	fa01 f303 	lsl.w	r3, r1, r3
 8007184:	431a      	orrs	r2, r3
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	621a      	str	r2, [r3, #32]
}
 800718a:	bf00      	nop
 800718c:	371c      	adds	r7, #28
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
	...

08007198 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007198:	b480      	push	{r7}
 800719a:	b085      	sub	sp, #20
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d101      	bne.n	80071b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071ac:	2302      	movs	r3, #2
 80071ae:	e06d      	b.n	800728c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2202      	movs	r2, #2
 80071bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a30      	ldr	r2, [pc, #192]	@ (8007298 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d004      	beq.n	80071e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a2f      	ldr	r2, [pc, #188]	@ (800729c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d108      	bne.n	80071f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80071ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	4313      	orrs	r3, r2
 8007206:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a20      	ldr	r2, [pc, #128]	@ (8007298 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d022      	beq.n	8007260 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007222:	d01d      	beq.n	8007260 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a1d      	ldr	r2, [pc, #116]	@ (80072a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d018      	beq.n	8007260 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a1c      	ldr	r2, [pc, #112]	@ (80072a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d013      	beq.n	8007260 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a1a      	ldr	r2, [pc, #104]	@ (80072a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d00e      	beq.n	8007260 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a15      	ldr	r2, [pc, #84]	@ (800729c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d009      	beq.n	8007260 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a16      	ldr	r2, [pc, #88]	@ (80072ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d004      	beq.n	8007260 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a15      	ldr	r2, [pc, #84]	@ (80072b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d10c      	bne.n	800727a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007266:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	4313      	orrs	r3, r2
 8007270:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2201      	movs	r2, #1
 800727e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	3714      	adds	r7, #20
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr
 8007298:	40010000 	.word	0x40010000
 800729c:	40010400 	.word	0x40010400
 80072a0:	40000400 	.word	0x40000400
 80072a4:	40000800 	.word	0x40000800
 80072a8:	40000c00 	.word	0x40000c00
 80072ac:	40001800 	.word	0x40001800
 80072b0:	40014000 	.word	0x40014000

080072b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072bc:	bf00      	nop
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072d0:	bf00      	nop
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80072e4:	bf00      	nop
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d101      	bne.n	8007302 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e042      	b.n	8007388 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007308:	2b00      	cmp	r3, #0
 800730a:	d106      	bne.n	800731a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 f83b 	bl	8007390 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2224      	movs	r2, #36	@ 0x24
 800731e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f022 0201 	bic.w	r2, r2, #1
 8007330:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007336:	2b00      	cmp	r3, #0
 8007338:	d002      	beq.n	8007340 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 fd9a 	bl	8007e74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 f82f 	bl	80073a4 <UART_SetConfig>
 8007346:	4603      	mov	r3, r0
 8007348:	2b01      	cmp	r3, #1
 800734a:	d101      	bne.n	8007350 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	e01b      	b.n	8007388 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	685a      	ldr	r2, [r3, #4]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800735e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	689a      	ldr	r2, [r3, #8]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800736e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f042 0201 	orr.w	r2, r2, #1
 800737e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 fe19 	bl	8007fb8 <UART_CheckIdleState>
 8007386:	4603      	mov	r3, r0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3708      	adds	r7, #8
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8007398:	bf00      	nop
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073a8:	b092      	sub	sp, #72	@ 0x48
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80073ae:	2300      	movs	r3, #0
 80073b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	689a      	ldr	r2, [r3, #8]
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	431a      	orrs	r2, r3
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	695b      	ldr	r3, [r3, #20]
 80073c2:	431a      	orrs	r2, r3
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	69db      	ldr	r3, [r3, #28]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	4bbe      	ldr	r3, [pc, #760]	@ (80076cc <UART_SetConfig+0x328>)
 80073d4:	4013      	ands	r3, r2
 80073d6:	697a      	ldr	r2, [r7, #20]
 80073d8:	6812      	ldr	r2, [r2, #0]
 80073da:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80073dc:	430b      	orrs	r3, r1
 80073de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	68da      	ldr	r2, [r3, #12]
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	430a      	orrs	r2, r1
 80073f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	699b      	ldr	r3, [r3, #24]
 80073fa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4ab3      	ldr	r2, [pc, #716]	@ (80076d0 <UART_SetConfig+0x32c>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d004      	beq.n	8007410 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	6a1b      	ldr	r3, [r3, #32]
 800740a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800740c:	4313      	orrs	r3, r2
 800740e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	689a      	ldr	r2, [r3, #8]
 8007416:	4baf      	ldr	r3, [pc, #700]	@ (80076d4 <UART_SetConfig+0x330>)
 8007418:	4013      	ands	r3, r2
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	6812      	ldr	r2, [r2, #0]
 800741e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007420:	430b      	orrs	r3, r1
 8007422:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800742a:	f023 010f 	bic.w	r1, r3, #15
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	430a      	orrs	r2, r1
 8007438:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4aa6      	ldr	r2, [pc, #664]	@ (80076d8 <UART_SetConfig+0x334>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d177      	bne.n	8007534 <UART_SetConfig+0x190>
 8007444:	4ba5      	ldr	r3, [pc, #660]	@ (80076dc <UART_SetConfig+0x338>)
 8007446:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007448:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800744c:	2b28      	cmp	r3, #40	@ 0x28
 800744e:	d86d      	bhi.n	800752c <UART_SetConfig+0x188>
 8007450:	a201      	add	r2, pc, #4	@ (adr r2, 8007458 <UART_SetConfig+0xb4>)
 8007452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007456:	bf00      	nop
 8007458:	080074fd 	.word	0x080074fd
 800745c:	0800752d 	.word	0x0800752d
 8007460:	0800752d 	.word	0x0800752d
 8007464:	0800752d 	.word	0x0800752d
 8007468:	0800752d 	.word	0x0800752d
 800746c:	0800752d 	.word	0x0800752d
 8007470:	0800752d 	.word	0x0800752d
 8007474:	0800752d 	.word	0x0800752d
 8007478:	08007505 	.word	0x08007505
 800747c:	0800752d 	.word	0x0800752d
 8007480:	0800752d 	.word	0x0800752d
 8007484:	0800752d 	.word	0x0800752d
 8007488:	0800752d 	.word	0x0800752d
 800748c:	0800752d 	.word	0x0800752d
 8007490:	0800752d 	.word	0x0800752d
 8007494:	0800752d 	.word	0x0800752d
 8007498:	0800750d 	.word	0x0800750d
 800749c:	0800752d 	.word	0x0800752d
 80074a0:	0800752d 	.word	0x0800752d
 80074a4:	0800752d 	.word	0x0800752d
 80074a8:	0800752d 	.word	0x0800752d
 80074ac:	0800752d 	.word	0x0800752d
 80074b0:	0800752d 	.word	0x0800752d
 80074b4:	0800752d 	.word	0x0800752d
 80074b8:	08007515 	.word	0x08007515
 80074bc:	0800752d 	.word	0x0800752d
 80074c0:	0800752d 	.word	0x0800752d
 80074c4:	0800752d 	.word	0x0800752d
 80074c8:	0800752d 	.word	0x0800752d
 80074cc:	0800752d 	.word	0x0800752d
 80074d0:	0800752d 	.word	0x0800752d
 80074d4:	0800752d 	.word	0x0800752d
 80074d8:	0800751d 	.word	0x0800751d
 80074dc:	0800752d 	.word	0x0800752d
 80074e0:	0800752d 	.word	0x0800752d
 80074e4:	0800752d 	.word	0x0800752d
 80074e8:	0800752d 	.word	0x0800752d
 80074ec:	0800752d 	.word	0x0800752d
 80074f0:	0800752d 	.word	0x0800752d
 80074f4:	0800752d 	.word	0x0800752d
 80074f8:	08007525 	.word	0x08007525
 80074fc:	2301      	movs	r3, #1
 80074fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007502:	e222      	b.n	800794a <UART_SetConfig+0x5a6>
 8007504:	2304      	movs	r3, #4
 8007506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800750a:	e21e      	b.n	800794a <UART_SetConfig+0x5a6>
 800750c:	2308      	movs	r3, #8
 800750e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007512:	e21a      	b.n	800794a <UART_SetConfig+0x5a6>
 8007514:	2310      	movs	r3, #16
 8007516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800751a:	e216      	b.n	800794a <UART_SetConfig+0x5a6>
 800751c:	2320      	movs	r3, #32
 800751e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007522:	e212      	b.n	800794a <UART_SetConfig+0x5a6>
 8007524:	2340      	movs	r3, #64	@ 0x40
 8007526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800752a:	e20e      	b.n	800794a <UART_SetConfig+0x5a6>
 800752c:	2380      	movs	r3, #128	@ 0x80
 800752e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007532:	e20a      	b.n	800794a <UART_SetConfig+0x5a6>
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a69      	ldr	r2, [pc, #420]	@ (80076e0 <UART_SetConfig+0x33c>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d130      	bne.n	80075a0 <UART_SetConfig+0x1fc>
 800753e:	4b67      	ldr	r3, [pc, #412]	@ (80076dc <UART_SetConfig+0x338>)
 8007540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007542:	f003 0307 	and.w	r3, r3, #7
 8007546:	2b05      	cmp	r3, #5
 8007548:	d826      	bhi.n	8007598 <UART_SetConfig+0x1f4>
 800754a:	a201      	add	r2, pc, #4	@ (adr r2, 8007550 <UART_SetConfig+0x1ac>)
 800754c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007550:	08007569 	.word	0x08007569
 8007554:	08007571 	.word	0x08007571
 8007558:	08007579 	.word	0x08007579
 800755c:	08007581 	.word	0x08007581
 8007560:	08007589 	.word	0x08007589
 8007564:	08007591 	.word	0x08007591
 8007568:	2300      	movs	r3, #0
 800756a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800756e:	e1ec      	b.n	800794a <UART_SetConfig+0x5a6>
 8007570:	2304      	movs	r3, #4
 8007572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007576:	e1e8      	b.n	800794a <UART_SetConfig+0x5a6>
 8007578:	2308      	movs	r3, #8
 800757a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800757e:	e1e4      	b.n	800794a <UART_SetConfig+0x5a6>
 8007580:	2310      	movs	r3, #16
 8007582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007586:	e1e0      	b.n	800794a <UART_SetConfig+0x5a6>
 8007588:	2320      	movs	r3, #32
 800758a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800758e:	e1dc      	b.n	800794a <UART_SetConfig+0x5a6>
 8007590:	2340      	movs	r3, #64	@ 0x40
 8007592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007596:	e1d8      	b.n	800794a <UART_SetConfig+0x5a6>
 8007598:	2380      	movs	r3, #128	@ 0x80
 800759a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800759e:	e1d4      	b.n	800794a <UART_SetConfig+0x5a6>
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a4f      	ldr	r2, [pc, #316]	@ (80076e4 <UART_SetConfig+0x340>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d130      	bne.n	800760c <UART_SetConfig+0x268>
 80075aa:	4b4c      	ldr	r3, [pc, #304]	@ (80076dc <UART_SetConfig+0x338>)
 80075ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075ae:	f003 0307 	and.w	r3, r3, #7
 80075b2:	2b05      	cmp	r3, #5
 80075b4:	d826      	bhi.n	8007604 <UART_SetConfig+0x260>
 80075b6:	a201      	add	r2, pc, #4	@ (adr r2, 80075bc <UART_SetConfig+0x218>)
 80075b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075bc:	080075d5 	.word	0x080075d5
 80075c0:	080075dd 	.word	0x080075dd
 80075c4:	080075e5 	.word	0x080075e5
 80075c8:	080075ed 	.word	0x080075ed
 80075cc:	080075f5 	.word	0x080075f5
 80075d0:	080075fd 	.word	0x080075fd
 80075d4:	2300      	movs	r3, #0
 80075d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075da:	e1b6      	b.n	800794a <UART_SetConfig+0x5a6>
 80075dc:	2304      	movs	r3, #4
 80075de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075e2:	e1b2      	b.n	800794a <UART_SetConfig+0x5a6>
 80075e4:	2308      	movs	r3, #8
 80075e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ea:	e1ae      	b.n	800794a <UART_SetConfig+0x5a6>
 80075ec:	2310      	movs	r3, #16
 80075ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075f2:	e1aa      	b.n	800794a <UART_SetConfig+0x5a6>
 80075f4:	2320      	movs	r3, #32
 80075f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075fa:	e1a6      	b.n	800794a <UART_SetConfig+0x5a6>
 80075fc:	2340      	movs	r3, #64	@ 0x40
 80075fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007602:	e1a2      	b.n	800794a <UART_SetConfig+0x5a6>
 8007604:	2380      	movs	r3, #128	@ 0x80
 8007606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800760a:	e19e      	b.n	800794a <UART_SetConfig+0x5a6>
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a35      	ldr	r2, [pc, #212]	@ (80076e8 <UART_SetConfig+0x344>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d130      	bne.n	8007678 <UART_SetConfig+0x2d4>
 8007616:	4b31      	ldr	r3, [pc, #196]	@ (80076dc <UART_SetConfig+0x338>)
 8007618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800761a:	f003 0307 	and.w	r3, r3, #7
 800761e:	2b05      	cmp	r3, #5
 8007620:	d826      	bhi.n	8007670 <UART_SetConfig+0x2cc>
 8007622:	a201      	add	r2, pc, #4	@ (adr r2, 8007628 <UART_SetConfig+0x284>)
 8007624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007628:	08007641 	.word	0x08007641
 800762c:	08007649 	.word	0x08007649
 8007630:	08007651 	.word	0x08007651
 8007634:	08007659 	.word	0x08007659
 8007638:	08007661 	.word	0x08007661
 800763c:	08007669 	.word	0x08007669
 8007640:	2300      	movs	r3, #0
 8007642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007646:	e180      	b.n	800794a <UART_SetConfig+0x5a6>
 8007648:	2304      	movs	r3, #4
 800764a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800764e:	e17c      	b.n	800794a <UART_SetConfig+0x5a6>
 8007650:	2308      	movs	r3, #8
 8007652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007656:	e178      	b.n	800794a <UART_SetConfig+0x5a6>
 8007658:	2310      	movs	r3, #16
 800765a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800765e:	e174      	b.n	800794a <UART_SetConfig+0x5a6>
 8007660:	2320      	movs	r3, #32
 8007662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007666:	e170      	b.n	800794a <UART_SetConfig+0x5a6>
 8007668:	2340      	movs	r3, #64	@ 0x40
 800766a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800766e:	e16c      	b.n	800794a <UART_SetConfig+0x5a6>
 8007670:	2380      	movs	r3, #128	@ 0x80
 8007672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007676:	e168      	b.n	800794a <UART_SetConfig+0x5a6>
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a1b      	ldr	r2, [pc, #108]	@ (80076ec <UART_SetConfig+0x348>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d142      	bne.n	8007708 <UART_SetConfig+0x364>
 8007682:	4b16      	ldr	r3, [pc, #88]	@ (80076dc <UART_SetConfig+0x338>)
 8007684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007686:	f003 0307 	and.w	r3, r3, #7
 800768a:	2b05      	cmp	r3, #5
 800768c:	d838      	bhi.n	8007700 <UART_SetConfig+0x35c>
 800768e:	a201      	add	r2, pc, #4	@ (adr r2, 8007694 <UART_SetConfig+0x2f0>)
 8007690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007694:	080076ad 	.word	0x080076ad
 8007698:	080076b5 	.word	0x080076b5
 800769c:	080076bd 	.word	0x080076bd
 80076a0:	080076c5 	.word	0x080076c5
 80076a4:	080076f1 	.word	0x080076f1
 80076a8:	080076f9 	.word	0x080076f9
 80076ac:	2300      	movs	r3, #0
 80076ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076b2:	e14a      	b.n	800794a <UART_SetConfig+0x5a6>
 80076b4:	2304      	movs	r3, #4
 80076b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ba:	e146      	b.n	800794a <UART_SetConfig+0x5a6>
 80076bc:	2308      	movs	r3, #8
 80076be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076c2:	e142      	b.n	800794a <UART_SetConfig+0x5a6>
 80076c4:	2310      	movs	r3, #16
 80076c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ca:	e13e      	b.n	800794a <UART_SetConfig+0x5a6>
 80076cc:	cfff69f3 	.word	0xcfff69f3
 80076d0:	58000c00 	.word	0x58000c00
 80076d4:	11fff4ff 	.word	0x11fff4ff
 80076d8:	40011000 	.word	0x40011000
 80076dc:	58024400 	.word	0x58024400
 80076e0:	40004400 	.word	0x40004400
 80076e4:	40004800 	.word	0x40004800
 80076e8:	40004c00 	.word	0x40004c00
 80076ec:	40005000 	.word	0x40005000
 80076f0:	2320      	movs	r3, #32
 80076f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076f6:	e128      	b.n	800794a <UART_SetConfig+0x5a6>
 80076f8:	2340      	movs	r3, #64	@ 0x40
 80076fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076fe:	e124      	b.n	800794a <UART_SetConfig+0x5a6>
 8007700:	2380      	movs	r3, #128	@ 0x80
 8007702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007706:	e120      	b.n	800794a <UART_SetConfig+0x5a6>
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4acb      	ldr	r2, [pc, #812]	@ (8007a3c <UART_SetConfig+0x698>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d176      	bne.n	8007800 <UART_SetConfig+0x45c>
 8007712:	4bcb      	ldr	r3, [pc, #812]	@ (8007a40 <UART_SetConfig+0x69c>)
 8007714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007716:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800771a:	2b28      	cmp	r3, #40	@ 0x28
 800771c:	d86c      	bhi.n	80077f8 <UART_SetConfig+0x454>
 800771e:	a201      	add	r2, pc, #4	@ (adr r2, 8007724 <UART_SetConfig+0x380>)
 8007720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007724:	080077c9 	.word	0x080077c9
 8007728:	080077f9 	.word	0x080077f9
 800772c:	080077f9 	.word	0x080077f9
 8007730:	080077f9 	.word	0x080077f9
 8007734:	080077f9 	.word	0x080077f9
 8007738:	080077f9 	.word	0x080077f9
 800773c:	080077f9 	.word	0x080077f9
 8007740:	080077f9 	.word	0x080077f9
 8007744:	080077d1 	.word	0x080077d1
 8007748:	080077f9 	.word	0x080077f9
 800774c:	080077f9 	.word	0x080077f9
 8007750:	080077f9 	.word	0x080077f9
 8007754:	080077f9 	.word	0x080077f9
 8007758:	080077f9 	.word	0x080077f9
 800775c:	080077f9 	.word	0x080077f9
 8007760:	080077f9 	.word	0x080077f9
 8007764:	080077d9 	.word	0x080077d9
 8007768:	080077f9 	.word	0x080077f9
 800776c:	080077f9 	.word	0x080077f9
 8007770:	080077f9 	.word	0x080077f9
 8007774:	080077f9 	.word	0x080077f9
 8007778:	080077f9 	.word	0x080077f9
 800777c:	080077f9 	.word	0x080077f9
 8007780:	080077f9 	.word	0x080077f9
 8007784:	080077e1 	.word	0x080077e1
 8007788:	080077f9 	.word	0x080077f9
 800778c:	080077f9 	.word	0x080077f9
 8007790:	080077f9 	.word	0x080077f9
 8007794:	080077f9 	.word	0x080077f9
 8007798:	080077f9 	.word	0x080077f9
 800779c:	080077f9 	.word	0x080077f9
 80077a0:	080077f9 	.word	0x080077f9
 80077a4:	080077e9 	.word	0x080077e9
 80077a8:	080077f9 	.word	0x080077f9
 80077ac:	080077f9 	.word	0x080077f9
 80077b0:	080077f9 	.word	0x080077f9
 80077b4:	080077f9 	.word	0x080077f9
 80077b8:	080077f9 	.word	0x080077f9
 80077bc:	080077f9 	.word	0x080077f9
 80077c0:	080077f9 	.word	0x080077f9
 80077c4:	080077f1 	.word	0x080077f1
 80077c8:	2301      	movs	r3, #1
 80077ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ce:	e0bc      	b.n	800794a <UART_SetConfig+0x5a6>
 80077d0:	2304      	movs	r3, #4
 80077d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077d6:	e0b8      	b.n	800794a <UART_SetConfig+0x5a6>
 80077d8:	2308      	movs	r3, #8
 80077da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077de:	e0b4      	b.n	800794a <UART_SetConfig+0x5a6>
 80077e0:	2310      	movs	r3, #16
 80077e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077e6:	e0b0      	b.n	800794a <UART_SetConfig+0x5a6>
 80077e8:	2320      	movs	r3, #32
 80077ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ee:	e0ac      	b.n	800794a <UART_SetConfig+0x5a6>
 80077f0:	2340      	movs	r3, #64	@ 0x40
 80077f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077f6:	e0a8      	b.n	800794a <UART_SetConfig+0x5a6>
 80077f8:	2380      	movs	r3, #128	@ 0x80
 80077fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077fe:	e0a4      	b.n	800794a <UART_SetConfig+0x5a6>
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a8f      	ldr	r2, [pc, #572]	@ (8007a44 <UART_SetConfig+0x6a0>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d130      	bne.n	800786c <UART_SetConfig+0x4c8>
 800780a:	4b8d      	ldr	r3, [pc, #564]	@ (8007a40 <UART_SetConfig+0x69c>)
 800780c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800780e:	f003 0307 	and.w	r3, r3, #7
 8007812:	2b05      	cmp	r3, #5
 8007814:	d826      	bhi.n	8007864 <UART_SetConfig+0x4c0>
 8007816:	a201      	add	r2, pc, #4	@ (adr r2, 800781c <UART_SetConfig+0x478>)
 8007818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800781c:	08007835 	.word	0x08007835
 8007820:	0800783d 	.word	0x0800783d
 8007824:	08007845 	.word	0x08007845
 8007828:	0800784d 	.word	0x0800784d
 800782c:	08007855 	.word	0x08007855
 8007830:	0800785d 	.word	0x0800785d
 8007834:	2300      	movs	r3, #0
 8007836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800783a:	e086      	b.n	800794a <UART_SetConfig+0x5a6>
 800783c:	2304      	movs	r3, #4
 800783e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007842:	e082      	b.n	800794a <UART_SetConfig+0x5a6>
 8007844:	2308      	movs	r3, #8
 8007846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800784a:	e07e      	b.n	800794a <UART_SetConfig+0x5a6>
 800784c:	2310      	movs	r3, #16
 800784e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007852:	e07a      	b.n	800794a <UART_SetConfig+0x5a6>
 8007854:	2320      	movs	r3, #32
 8007856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800785a:	e076      	b.n	800794a <UART_SetConfig+0x5a6>
 800785c:	2340      	movs	r3, #64	@ 0x40
 800785e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007862:	e072      	b.n	800794a <UART_SetConfig+0x5a6>
 8007864:	2380      	movs	r3, #128	@ 0x80
 8007866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800786a:	e06e      	b.n	800794a <UART_SetConfig+0x5a6>
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a75      	ldr	r2, [pc, #468]	@ (8007a48 <UART_SetConfig+0x6a4>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d130      	bne.n	80078d8 <UART_SetConfig+0x534>
 8007876:	4b72      	ldr	r3, [pc, #456]	@ (8007a40 <UART_SetConfig+0x69c>)
 8007878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800787a:	f003 0307 	and.w	r3, r3, #7
 800787e:	2b05      	cmp	r3, #5
 8007880:	d826      	bhi.n	80078d0 <UART_SetConfig+0x52c>
 8007882:	a201      	add	r2, pc, #4	@ (adr r2, 8007888 <UART_SetConfig+0x4e4>)
 8007884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007888:	080078a1 	.word	0x080078a1
 800788c:	080078a9 	.word	0x080078a9
 8007890:	080078b1 	.word	0x080078b1
 8007894:	080078b9 	.word	0x080078b9
 8007898:	080078c1 	.word	0x080078c1
 800789c:	080078c9 	.word	0x080078c9
 80078a0:	2300      	movs	r3, #0
 80078a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078a6:	e050      	b.n	800794a <UART_SetConfig+0x5a6>
 80078a8:	2304      	movs	r3, #4
 80078aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ae:	e04c      	b.n	800794a <UART_SetConfig+0x5a6>
 80078b0:	2308      	movs	r3, #8
 80078b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078b6:	e048      	b.n	800794a <UART_SetConfig+0x5a6>
 80078b8:	2310      	movs	r3, #16
 80078ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078be:	e044      	b.n	800794a <UART_SetConfig+0x5a6>
 80078c0:	2320      	movs	r3, #32
 80078c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078c6:	e040      	b.n	800794a <UART_SetConfig+0x5a6>
 80078c8:	2340      	movs	r3, #64	@ 0x40
 80078ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ce:	e03c      	b.n	800794a <UART_SetConfig+0x5a6>
 80078d0:	2380      	movs	r3, #128	@ 0x80
 80078d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078d6:	e038      	b.n	800794a <UART_SetConfig+0x5a6>
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a5b      	ldr	r2, [pc, #364]	@ (8007a4c <UART_SetConfig+0x6a8>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d130      	bne.n	8007944 <UART_SetConfig+0x5a0>
 80078e2:	4b57      	ldr	r3, [pc, #348]	@ (8007a40 <UART_SetConfig+0x69c>)
 80078e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078e6:	f003 0307 	and.w	r3, r3, #7
 80078ea:	2b05      	cmp	r3, #5
 80078ec:	d826      	bhi.n	800793c <UART_SetConfig+0x598>
 80078ee:	a201      	add	r2, pc, #4	@ (adr r2, 80078f4 <UART_SetConfig+0x550>)
 80078f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f4:	0800790d 	.word	0x0800790d
 80078f8:	08007915 	.word	0x08007915
 80078fc:	0800791d 	.word	0x0800791d
 8007900:	08007925 	.word	0x08007925
 8007904:	0800792d 	.word	0x0800792d
 8007908:	08007935 	.word	0x08007935
 800790c:	2302      	movs	r3, #2
 800790e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007912:	e01a      	b.n	800794a <UART_SetConfig+0x5a6>
 8007914:	2304      	movs	r3, #4
 8007916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800791a:	e016      	b.n	800794a <UART_SetConfig+0x5a6>
 800791c:	2308      	movs	r3, #8
 800791e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007922:	e012      	b.n	800794a <UART_SetConfig+0x5a6>
 8007924:	2310      	movs	r3, #16
 8007926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800792a:	e00e      	b.n	800794a <UART_SetConfig+0x5a6>
 800792c:	2320      	movs	r3, #32
 800792e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007932:	e00a      	b.n	800794a <UART_SetConfig+0x5a6>
 8007934:	2340      	movs	r3, #64	@ 0x40
 8007936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800793a:	e006      	b.n	800794a <UART_SetConfig+0x5a6>
 800793c:	2380      	movs	r3, #128	@ 0x80
 800793e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007942:	e002      	b.n	800794a <UART_SetConfig+0x5a6>
 8007944:	2380      	movs	r3, #128	@ 0x80
 8007946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a3f      	ldr	r2, [pc, #252]	@ (8007a4c <UART_SetConfig+0x6a8>)
 8007950:	4293      	cmp	r3, r2
 8007952:	f040 80f8 	bne.w	8007b46 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007956:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800795a:	2b20      	cmp	r3, #32
 800795c:	dc46      	bgt.n	80079ec <UART_SetConfig+0x648>
 800795e:	2b02      	cmp	r3, #2
 8007960:	f2c0 8082 	blt.w	8007a68 <UART_SetConfig+0x6c4>
 8007964:	3b02      	subs	r3, #2
 8007966:	2b1e      	cmp	r3, #30
 8007968:	d87e      	bhi.n	8007a68 <UART_SetConfig+0x6c4>
 800796a:	a201      	add	r2, pc, #4	@ (adr r2, 8007970 <UART_SetConfig+0x5cc>)
 800796c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007970:	080079f3 	.word	0x080079f3
 8007974:	08007a69 	.word	0x08007a69
 8007978:	080079fb 	.word	0x080079fb
 800797c:	08007a69 	.word	0x08007a69
 8007980:	08007a69 	.word	0x08007a69
 8007984:	08007a69 	.word	0x08007a69
 8007988:	08007a0b 	.word	0x08007a0b
 800798c:	08007a69 	.word	0x08007a69
 8007990:	08007a69 	.word	0x08007a69
 8007994:	08007a69 	.word	0x08007a69
 8007998:	08007a69 	.word	0x08007a69
 800799c:	08007a69 	.word	0x08007a69
 80079a0:	08007a69 	.word	0x08007a69
 80079a4:	08007a69 	.word	0x08007a69
 80079a8:	08007a1b 	.word	0x08007a1b
 80079ac:	08007a69 	.word	0x08007a69
 80079b0:	08007a69 	.word	0x08007a69
 80079b4:	08007a69 	.word	0x08007a69
 80079b8:	08007a69 	.word	0x08007a69
 80079bc:	08007a69 	.word	0x08007a69
 80079c0:	08007a69 	.word	0x08007a69
 80079c4:	08007a69 	.word	0x08007a69
 80079c8:	08007a69 	.word	0x08007a69
 80079cc:	08007a69 	.word	0x08007a69
 80079d0:	08007a69 	.word	0x08007a69
 80079d4:	08007a69 	.word	0x08007a69
 80079d8:	08007a69 	.word	0x08007a69
 80079dc:	08007a69 	.word	0x08007a69
 80079e0:	08007a69 	.word	0x08007a69
 80079e4:	08007a69 	.word	0x08007a69
 80079e8:	08007a5b 	.word	0x08007a5b
 80079ec:	2b40      	cmp	r3, #64	@ 0x40
 80079ee:	d037      	beq.n	8007a60 <UART_SetConfig+0x6bc>
 80079f0:	e03a      	b.n	8007a68 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80079f2:	f7fd fe0d 	bl	8005610 <HAL_RCCEx_GetD3PCLK1Freq>
 80079f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80079f8:	e03c      	b.n	8007a74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7fd fe1c 	bl	800563c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a08:	e034      	b.n	8007a74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a0a:	f107 0318 	add.w	r3, r7, #24
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7fd ff68 	bl	80058e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a18:	e02c      	b.n	8007a74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a1a:	4b09      	ldr	r3, [pc, #36]	@ (8007a40 <UART_SetConfig+0x69c>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 0320 	and.w	r3, r3, #32
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d016      	beq.n	8007a54 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a26:	4b06      	ldr	r3, [pc, #24]	@ (8007a40 <UART_SetConfig+0x69c>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	08db      	lsrs	r3, r3, #3
 8007a2c:	f003 0303 	and.w	r3, r3, #3
 8007a30:	4a07      	ldr	r2, [pc, #28]	@ (8007a50 <UART_SetConfig+0x6ac>)
 8007a32:	fa22 f303 	lsr.w	r3, r2, r3
 8007a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a38:	e01c      	b.n	8007a74 <UART_SetConfig+0x6d0>
 8007a3a:	bf00      	nop
 8007a3c:	40011400 	.word	0x40011400
 8007a40:	58024400 	.word	0x58024400
 8007a44:	40007800 	.word	0x40007800
 8007a48:	40007c00 	.word	0x40007c00
 8007a4c:	58000c00 	.word	0x58000c00
 8007a50:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007a54:	4b9d      	ldr	r3, [pc, #628]	@ (8007ccc <UART_SetConfig+0x928>)
 8007a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a58:	e00c      	b.n	8007a74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007a5a:	4b9d      	ldr	r3, [pc, #628]	@ (8007cd0 <UART_SetConfig+0x92c>)
 8007a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a5e:	e009      	b.n	8007a74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a66:	e005      	b.n	8007a74 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007a72:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	f000 81de 	beq.w	8007e38 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a80:	4a94      	ldr	r2, [pc, #592]	@ (8007cd4 <UART_SetConfig+0x930>)
 8007a82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a86:	461a      	mov	r2, r3
 8007a88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a8e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	685a      	ldr	r2, [r3, #4]
 8007a94:	4613      	mov	r3, r2
 8007a96:	005b      	lsls	r3, r3, #1
 8007a98:	4413      	add	r3, r2
 8007a9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d305      	bcc.n	8007aac <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007aa6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d903      	bls.n	8007ab4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007ab2:	e1c1      	b.n	8007e38 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	60bb      	str	r3, [r7, #8]
 8007aba:	60fa      	str	r2, [r7, #12]
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ac0:	4a84      	ldr	r2, [pc, #528]	@ (8007cd4 <UART_SetConfig+0x930>)
 8007ac2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	2200      	movs	r2, #0
 8007aca:	603b      	str	r3, [r7, #0]
 8007acc:	607a      	str	r2, [r7, #4]
 8007ace:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ad2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007ad6:	f7f8 fbff 	bl	80002d8 <__aeabi_uldivmod>
 8007ada:	4602      	mov	r2, r0
 8007adc:	460b      	mov	r3, r1
 8007ade:	4610      	mov	r0, r2
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	f04f 0200 	mov.w	r2, #0
 8007ae6:	f04f 0300 	mov.w	r3, #0
 8007aea:	020b      	lsls	r3, r1, #8
 8007aec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007af0:	0202      	lsls	r2, r0, #8
 8007af2:	6979      	ldr	r1, [r7, #20]
 8007af4:	6849      	ldr	r1, [r1, #4]
 8007af6:	0849      	lsrs	r1, r1, #1
 8007af8:	2000      	movs	r0, #0
 8007afa:	460c      	mov	r4, r1
 8007afc:	4605      	mov	r5, r0
 8007afe:	eb12 0804 	adds.w	r8, r2, r4
 8007b02:	eb43 0905 	adc.w	r9, r3, r5
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	469a      	mov	sl, r3
 8007b0e:	4693      	mov	fp, r2
 8007b10:	4652      	mov	r2, sl
 8007b12:	465b      	mov	r3, fp
 8007b14:	4640      	mov	r0, r8
 8007b16:	4649      	mov	r1, r9
 8007b18:	f7f8 fbde 	bl	80002d8 <__aeabi_uldivmod>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	460b      	mov	r3, r1
 8007b20:	4613      	mov	r3, r2
 8007b22:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b2a:	d308      	bcc.n	8007b3e <UART_SetConfig+0x79a>
 8007b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b32:	d204      	bcs.n	8007b3e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007b3a:	60da      	str	r2, [r3, #12]
 8007b3c:	e17c      	b.n	8007e38 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007b44:	e178      	b.n	8007e38 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	69db      	ldr	r3, [r3, #28]
 8007b4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b4e:	f040 80c5 	bne.w	8007cdc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007b52:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007b56:	2b20      	cmp	r3, #32
 8007b58:	dc48      	bgt.n	8007bec <UART_SetConfig+0x848>
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	db7b      	blt.n	8007c56 <UART_SetConfig+0x8b2>
 8007b5e:	2b20      	cmp	r3, #32
 8007b60:	d879      	bhi.n	8007c56 <UART_SetConfig+0x8b2>
 8007b62:	a201      	add	r2, pc, #4	@ (adr r2, 8007b68 <UART_SetConfig+0x7c4>)
 8007b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b68:	08007bf3 	.word	0x08007bf3
 8007b6c:	08007bfb 	.word	0x08007bfb
 8007b70:	08007c57 	.word	0x08007c57
 8007b74:	08007c57 	.word	0x08007c57
 8007b78:	08007c03 	.word	0x08007c03
 8007b7c:	08007c57 	.word	0x08007c57
 8007b80:	08007c57 	.word	0x08007c57
 8007b84:	08007c57 	.word	0x08007c57
 8007b88:	08007c13 	.word	0x08007c13
 8007b8c:	08007c57 	.word	0x08007c57
 8007b90:	08007c57 	.word	0x08007c57
 8007b94:	08007c57 	.word	0x08007c57
 8007b98:	08007c57 	.word	0x08007c57
 8007b9c:	08007c57 	.word	0x08007c57
 8007ba0:	08007c57 	.word	0x08007c57
 8007ba4:	08007c57 	.word	0x08007c57
 8007ba8:	08007c23 	.word	0x08007c23
 8007bac:	08007c57 	.word	0x08007c57
 8007bb0:	08007c57 	.word	0x08007c57
 8007bb4:	08007c57 	.word	0x08007c57
 8007bb8:	08007c57 	.word	0x08007c57
 8007bbc:	08007c57 	.word	0x08007c57
 8007bc0:	08007c57 	.word	0x08007c57
 8007bc4:	08007c57 	.word	0x08007c57
 8007bc8:	08007c57 	.word	0x08007c57
 8007bcc:	08007c57 	.word	0x08007c57
 8007bd0:	08007c57 	.word	0x08007c57
 8007bd4:	08007c57 	.word	0x08007c57
 8007bd8:	08007c57 	.word	0x08007c57
 8007bdc:	08007c57 	.word	0x08007c57
 8007be0:	08007c57 	.word	0x08007c57
 8007be4:	08007c57 	.word	0x08007c57
 8007be8:	08007c49 	.word	0x08007c49
 8007bec:	2b40      	cmp	r3, #64	@ 0x40
 8007bee:	d02e      	beq.n	8007c4e <UART_SetConfig+0x8aa>
 8007bf0:	e031      	b.n	8007c56 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bf2:	f7fd fce1 	bl	80055b8 <HAL_RCC_GetPCLK1Freq>
 8007bf6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007bf8:	e033      	b.n	8007c62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bfa:	f7fd fcf3 	bl	80055e4 <HAL_RCC_GetPCLK2Freq>
 8007bfe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c00:	e02f      	b.n	8007c62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7fd fd18 	bl	800563c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c10:	e027      	b.n	8007c62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c12:	f107 0318 	add.w	r3, r7, #24
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7fd fe64 	bl	80058e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c20:	e01f      	b.n	8007c62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c22:	4b2d      	ldr	r3, [pc, #180]	@ (8007cd8 <UART_SetConfig+0x934>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f003 0320 	and.w	r3, r3, #32
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d009      	beq.n	8007c42 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c2e:	4b2a      	ldr	r3, [pc, #168]	@ (8007cd8 <UART_SetConfig+0x934>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	08db      	lsrs	r3, r3, #3
 8007c34:	f003 0303 	and.w	r3, r3, #3
 8007c38:	4a24      	ldr	r2, [pc, #144]	@ (8007ccc <UART_SetConfig+0x928>)
 8007c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c40:	e00f      	b.n	8007c62 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007c42:	4b22      	ldr	r3, [pc, #136]	@ (8007ccc <UART_SetConfig+0x928>)
 8007c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c46:	e00c      	b.n	8007c62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007c48:	4b21      	ldr	r3, [pc, #132]	@ (8007cd0 <UART_SetConfig+0x92c>)
 8007c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c4c:	e009      	b.n	8007c62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c54:	e005      	b.n	8007c62 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007c56:	2300      	movs	r3, #0
 8007c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007c60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	f000 80e7 	beq.w	8007e38 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c6e:	4a19      	ldr	r2, [pc, #100]	@ (8007cd4 <UART_SetConfig+0x930>)
 8007c70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c74:	461a      	mov	r2, r3
 8007c76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c78:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c7c:	005a      	lsls	r2, r3, #1
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	085b      	lsrs	r3, r3, #1
 8007c84:	441a      	add	r2, r3
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c8e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c92:	2b0f      	cmp	r3, #15
 8007c94:	d916      	bls.n	8007cc4 <UART_SetConfig+0x920>
 8007c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c9c:	d212      	bcs.n	8007cc4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	f023 030f 	bic.w	r3, r3, #15
 8007ca6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007caa:	085b      	lsrs	r3, r3, #1
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	f003 0307 	and.w	r3, r3, #7
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007cc0:	60da      	str	r2, [r3, #12]
 8007cc2:	e0b9      	b.n	8007e38 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007cca:	e0b5      	b.n	8007e38 <UART_SetConfig+0xa94>
 8007ccc:	03d09000 	.word	0x03d09000
 8007cd0:	003d0900 	.word	0x003d0900
 8007cd4:	080083c8 	.word	0x080083c8
 8007cd8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007cdc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007ce0:	2b20      	cmp	r3, #32
 8007ce2:	dc49      	bgt.n	8007d78 <UART_SetConfig+0x9d4>
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	db7c      	blt.n	8007de2 <UART_SetConfig+0xa3e>
 8007ce8:	2b20      	cmp	r3, #32
 8007cea:	d87a      	bhi.n	8007de2 <UART_SetConfig+0xa3e>
 8007cec:	a201      	add	r2, pc, #4	@ (adr r2, 8007cf4 <UART_SetConfig+0x950>)
 8007cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf2:	bf00      	nop
 8007cf4:	08007d7f 	.word	0x08007d7f
 8007cf8:	08007d87 	.word	0x08007d87
 8007cfc:	08007de3 	.word	0x08007de3
 8007d00:	08007de3 	.word	0x08007de3
 8007d04:	08007d8f 	.word	0x08007d8f
 8007d08:	08007de3 	.word	0x08007de3
 8007d0c:	08007de3 	.word	0x08007de3
 8007d10:	08007de3 	.word	0x08007de3
 8007d14:	08007d9f 	.word	0x08007d9f
 8007d18:	08007de3 	.word	0x08007de3
 8007d1c:	08007de3 	.word	0x08007de3
 8007d20:	08007de3 	.word	0x08007de3
 8007d24:	08007de3 	.word	0x08007de3
 8007d28:	08007de3 	.word	0x08007de3
 8007d2c:	08007de3 	.word	0x08007de3
 8007d30:	08007de3 	.word	0x08007de3
 8007d34:	08007daf 	.word	0x08007daf
 8007d38:	08007de3 	.word	0x08007de3
 8007d3c:	08007de3 	.word	0x08007de3
 8007d40:	08007de3 	.word	0x08007de3
 8007d44:	08007de3 	.word	0x08007de3
 8007d48:	08007de3 	.word	0x08007de3
 8007d4c:	08007de3 	.word	0x08007de3
 8007d50:	08007de3 	.word	0x08007de3
 8007d54:	08007de3 	.word	0x08007de3
 8007d58:	08007de3 	.word	0x08007de3
 8007d5c:	08007de3 	.word	0x08007de3
 8007d60:	08007de3 	.word	0x08007de3
 8007d64:	08007de3 	.word	0x08007de3
 8007d68:	08007de3 	.word	0x08007de3
 8007d6c:	08007de3 	.word	0x08007de3
 8007d70:	08007de3 	.word	0x08007de3
 8007d74:	08007dd5 	.word	0x08007dd5
 8007d78:	2b40      	cmp	r3, #64	@ 0x40
 8007d7a:	d02e      	beq.n	8007dda <UART_SetConfig+0xa36>
 8007d7c:	e031      	b.n	8007de2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d7e:	f7fd fc1b 	bl	80055b8 <HAL_RCC_GetPCLK1Freq>
 8007d82:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007d84:	e033      	b.n	8007dee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d86:	f7fd fc2d 	bl	80055e4 <HAL_RCC_GetPCLK2Freq>
 8007d8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007d8c:	e02f      	b.n	8007dee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7fd fc52 	bl	800563c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d9c:	e027      	b.n	8007dee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d9e:	f107 0318 	add.w	r3, r7, #24
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7fd fd9e 	bl	80058e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dac:	e01f      	b.n	8007dee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007dae:	4b2d      	ldr	r3, [pc, #180]	@ (8007e64 <UART_SetConfig+0xac0>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f003 0320 	and.w	r3, r3, #32
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d009      	beq.n	8007dce <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007dba:	4b2a      	ldr	r3, [pc, #168]	@ (8007e64 <UART_SetConfig+0xac0>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	08db      	lsrs	r3, r3, #3
 8007dc0:	f003 0303 	and.w	r3, r3, #3
 8007dc4:	4a28      	ldr	r2, [pc, #160]	@ (8007e68 <UART_SetConfig+0xac4>)
 8007dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8007dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007dcc:	e00f      	b.n	8007dee <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007dce:	4b26      	ldr	r3, [pc, #152]	@ (8007e68 <UART_SetConfig+0xac4>)
 8007dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dd2:	e00c      	b.n	8007dee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007dd4:	4b25      	ldr	r3, [pc, #148]	@ (8007e6c <UART_SetConfig+0xac8>)
 8007dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dd8:	e009      	b.n	8007dee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007dda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007de0:	e005      	b.n	8007dee <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007de2:	2300      	movs	r3, #0
 8007de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007dec:	bf00      	nop
    }

    if (pclk != 0U)
 8007dee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d021      	beq.n	8007e38 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007df8:	4a1d      	ldr	r2, [pc, #116]	@ (8007e70 <UART_SetConfig+0xacc>)
 8007dfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007dfe:	461a      	mov	r2, r3
 8007e00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e02:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	085b      	lsrs	r3, r3, #1
 8007e0c:	441a      	add	r2, r3
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e16:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e1a:	2b0f      	cmp	r3, #15
 8007e1c:	d909      	bls.n	8007e32 <UART_SetConfig+0xa8e>
 8007e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e24:	d205      	bcs.n	8007e32 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e28:	b29a      	uxth	r2, r3
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	60da      	str	r2, [r3, #12]
 8007e30:	e002      	b.n	8007e38 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	2201      	movs	r2, #1
 8007e44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	2200      	movs	r2, #0
 8007e52:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007e54:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3748      	adds	r7, #72	@ 0x48
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e62:	bf00      	nop
 8007e64:	58024400 	.word	0x58024400
 8007e68:	03d09000 	.word	0x03d09000
 8007e6c:	003d0900 	.word	0x003d0900
 8007e70:	080083c8 	.word	0x080083c8

08007e74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e80:	f003 0308 	and.w	r3, r3, #8
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00a      	beq.n	8007e9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	430a      	orrs	r2, r1
 8007e9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ea2:	f003 0301 	and.w	r3, r3, #1
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d00a      	beq.n	8007ec0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	430a      	orrs	r2, r1
 8007ebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ec4:	f003 0302 	and.w	r3, r3, #2
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00a      	beq.n	8007ee2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	430a      	orrs	r2, r1
 8007ee0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ee6:	f003 0304 	and.w	r3, r3, #4
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00a      	beq.n	8007f04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	430a      	orrs	r2, r1
 8007f02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f08:	f003 0310 	and.w	r3, r3, #16
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d00a      	beq.n	8007f26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	430a      	orrs	r2, r1
 8007f24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f2a:	f003 0320 	and.w	r3, r3, #32
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d00a      	beq.n	8007f48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	430a      	orrs	r2, r1
 8007f46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d01a      	beq.n	8007f8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	430a      	orrs	r2, r1
 8007f68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f72:	d10a      	bne.n	8007f8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	430a      	orrs	r2, r1
 8007f88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00a      	beq.n	8007fac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	430a      	orrs	r2, r1
 8007faa:	605a      	str	r2, [r3, #4]
  }
}
 8007fac:	bf00      	nop
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b098      	sub	sp, #96	@ 0x60
 8007fbc:	af02      	add	r7, sp, #8
 8007fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007fc8:	f7f9 fe28 	bl	8001c1c <HAL_GetTick>
 8007fcc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 0308 	and.w	r3, r3, #8
 8007fd8:	2b08      	cmp	r3, #8
 8007fda:	d12f      	bne.n	800803c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fdc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007fe0:	9300      	str	r3, [sp, #0]
 8007fe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 f88e 	bl	800810c <UART_WaitOnFlagUntilTimeout>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d022      	beq.n	800803c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ffe:	e853 3f00 	ldrex	r3, [r3]
 8008002:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008006:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800800a:	653b      	str	r3, [r7, #80]	@ 0x50
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	461a      	mov	r2, r3
 8008012:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008014:	647b      	str	r3, [r7, #68]	@ 0x44
 8008016:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008018:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800801a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800801c:	e841 2300 	strex	r3, r2, [r1]
 8008020:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008024:	2b00      	cmp	r3, #0
 8008026:	d1e6      	bne.n	8007ff6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2220      	movs	r2, #32
 800802c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008038:	2303      	movs	r3, #3
 800803a:	e063      	b.n	8008104 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f003 0304 	and.w	r3, r3, #4
 8008046:	2b04      	cmp	r3, #4
 8008048:	d149      	bne.n	80080de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800804a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800804e:	9300      	str	r3, [sp, #0]
 8008050:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008052:	2200      	movs	r2, #0
 8008054:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 f857 	bl	800810c <UART_WaitOnFlagUntilTimeout>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d03c      	beq.n	80080de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800806a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800806c:	e853 3f00 	ldrex	r3, [r3]
 8008070:	623b      	str	r3, [r7, #32]
   return(result);
 8008072:	6a3b      	ldr	r3, [r7, #32]
 8008074:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008078:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	461a      	mov	r2, r3
 8008080:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008082:	633b      	str	r3, [r7, #48]	@ 0x30
 8008084:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008086:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008088:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800808a:	e841 2300 	strex	r3, r2, [r1]
 800808e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1e6      	bne.n	8008064 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	3308      	adds	r3, #8
 800809c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	e853 3f00 	ldrex	r3, [r3]
 80080a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f023 0301 	bic.w	r3, r3, #1
 80080ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	3308      	adds	r3, #8
 80080b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80080b6:	61fa      	str	r2, [r7, #28]
 80080b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ba:	69b9      	ldr	r1, [r7, #24]
 80080bc:	69fa      	ldr	r2, [r7, #28]
 80080be:	e841 2300 	strex	r3, r2, [r1]
 80080c2:	617b      	str	r3, [r7, #20]
   return(result);
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d1e5      	bne.n	8008096 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2220      	movs	r2, #32
 80080ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080da:	2303      	movs	r3, #3
 80080dc:	e012      	b.n	8008104 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2220      	movs	r2, #32
 80080e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2220      	movs	r2, #32
 80080ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3758      	adds	r7, #88	@ 0x58
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	603b      	str	r3, [r7, #0]
 8008118:	4613      	mov	r3, r2
 800811a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800811c:	e04f      	b.n	80081be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008124:	d04b      	beq.n	80081be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008126:	f7f9 fd79 	bl	8001c1c <HAL_GetTick>
 800812a:	4602      	mov	r2, r0
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	1ad3      	subs	r3, r2, r3
 8008130:	69ba      	ldr	r2, [r7, #24]
 8008132:	429a      	cmp	r2, r3
 8008134:	d302      	bcc.n	800813c <UART_WaitOnFlagUntilTimeout+0x30>
 8008136:	69bb      	ldr	r3, [r7, #24]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d101      	bne.n	8008140 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800813c:	2303      	movs	r3, #3
 800813e:	e04e      	b.n	80081de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f003 0304 	and.w	r3, r3, #4
 800814a:	2b00      	cmp	r3, #0
 800814c:	d037      	beq.n	80081be <UART_WaitOnFlagUntilTimeout+0xb2>
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	2b80      	cmp	r3, #128	@ 0x80
 8008152:	d034      	beq.n	80081be <UART_WaitOnFlagUntilTimeout+0xb2>
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	2b40      	cmp	r3, #64	@ 0x40
 8008158:	d031      	beq.n	80081be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	69db      	ldr	r3, [r3, #28]
 8008160:	f003 0308 	and.w	r3, r3, #8
 8008164:	2b08      	cmp	r3, #8
 8008166:	d110      	bne.n	800818a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	2208      	movs	r2, #8
 800816e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008170:	68f8      	ldr	r0, [r7, #12]
 8008172:	f000 f839 	bl	80081e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2208      	movs	r2, #8
 800817a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2200      	movs	r2, #0
 8008182:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	e029      	b.n	80081de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	69db      	ldr	r3, [r3, #28]
 8008190:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008194:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008198:	d111      	bne.n	80081be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80081a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f000 f81f 	bl	80081e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2220      	movs	r2, #32
 80081ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80081ba:	2303      	movs	r3, #3
 80081bc:	e00f      	b.n	80081de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	69da      	ldr	r2, [r3, #28]
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	4013      	ands	r3, r2
 80081c8:	68ba      	ldr	r2, [r7, #8]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	bf0c      	ite	eq
 80081ce:	2301      	moveq	r3, #1
 80081d0:	2300      	movne	r3, #0
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	461a      	mov	r2, r3
 80081d6:	79fb      	ldrb	r3, [r7, #7]
 80081d8:	429a      	cmp	r2, r3
 80081da:	d0a0      	beq.n	800811e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80081dc:	2300      	movs	r3, #0
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3710      	adds	r7, #16
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
	...

080081e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b095      	sub	sp, #84	@ 0x54
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081f8:	e853 3f00 	ldrex	r3, [r3]
 80081fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80081fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008200:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008204:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	461a      	mov	r2, r3
 800820c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800820e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008210:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008212:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008214:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008216:	e841 2300 	strex	r3, r2, [r1]
 800821a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800821c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800821e:	2b00      	cmp	r3, #0
 8008220:	d1e6      	bne.n	80081f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	3308      	adds	r3, #8
 8008228:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822a:	6a3b      	ldr	r3, [r7, #32]
 800822c:	e853 3f00 	ldrex	r3, [r3]
 8008230:	61fb      	str	r3, [r7, #28]
   return(result);
 8008232:	69fa      	ldr	r2, [r7, #28]
 8008234:	4b1e      	ldr	r3, [pc, #120]	@ (80082b0 <UART_EndRxTransfer+0xc8>)
 8008236:	4013      	ands	r3, r2
 8008238:	64bb      	str	r3, [r7, #72]	@ 0x48
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	3308      	adds	r3, #8
 8008240:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008242:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008244:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008246:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008248:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800824a:	e841 2300 	strex	r3, r2, [r1]
 800824e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008252:	2b00      	cmp	r3, #0
 8008254:	d1e5      	bne.n	8008222 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800825a:	2b01      	cmp	r3, #1
 800825c:	d118      	bne.n	8008290 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	e853 3f00 	ldrex	r3, [r3]
 800826a:	60bb      	str	r3, [r7, #8]
   return(result);
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	f023 0310 	bic.w	r3, r3, #16
 8008272:	647b      	str	r3, [r7, #68]	@ 0x44
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	461a      	mov	r2, r3
 800827a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800827c:	61bb      	str	r3, [r7, #24]
 800827e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008280:	6979      	ldr	r1, [r7, #20]
 8008282:	69ba      	ldr	r2, [r7, #24]
 8008284:	e841 2300 	strex	r3, r2, [r1]
 8008288:	613b      	str	r3, [r7, #16]
   return(result);
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d1e6      	bne.n	800825e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2220      	movs	r2, #32
 8008294:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80082a4:	bf00      	nop
 80082a6:	3754      	adds	r7, #84	@ 0x54
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr
 80082b0:	effffffe 	.word	0xeffffffe

080082b4 <memset>:
 80082b4:	4402      	add	r2, r0
 80082b6:	4603      	mov	r3, r0
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d100      	bne.n	80082be <memset+0xa>
 80082bc:	4770      	bx	lr
 80082be:	f803 1b01 	strb.w	r1, [r3], #1
 80082c2:	e7f9      	b.n	80082b8 <memset+0x4>

080082c4 <__libc_init_array>:
 80082c4:	b570      	push	{r4, r5, r6, lr}
 80082c6:	4d0d      	ldr	r5, [pc, #52]	@ (80082fc <__libc_init_array+0x38>)
 80082c8:	4c0d      	ldr	r4, [pc, #52]	@ (8008300 <__libc_init_array+0x3c>)
 80082ca:	1b64      	subs	r4, r4, r5
 80082cc:	10a4      	asrs	r4, r4, #2
 80082ce:	2600      	movs	r6, #0
 80082d0:	42a6      	cmp	r6, r4
 80082d2:	d109      	bne.n	80082e8 <__libc_init_array+0x24>
 80082d4:	4d0b      	ldr	r5, [pc, #44]	@ (8008304 <__libc_init_array+0x40>)
 80082d6:	4c0c      	ldr	r4, [pc, #48]	@ (8008308 <__libc_init_array+0x44>)
 80082d8:	f000 f858 	bl	800838c <_init>
 80082dc:	1b64      	subs	r4, r4, r5
 80082de:	10a4      	asrs	r4, r4, #2
 80082e0:	2600      	movs	r6, #0
 80082e2:	42a6      	cmp	r6, r4
 80082e4:	d105      	bne.n	80082f2 <__libc_init_array+0x2e>
 80082e6:	bd70      	pop	{r4, r5, r6, pc}
 80082e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80082ec:	4798      	blx	r3
 80082ee:	3601      	adds	r6, #1
 80082f0:	e7ee      	b.n	80082d0 <__libc_init_array+0xc>
 80082f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80082f6:	4798      	blx	r3
 80082f8:	3601      	adds	r6, #1
 80082fa:	e7f2      	b.n	80082e2 <__libc_init_array+0x1e>
 80082fc:	080083f0 	.word	0x080083f0
 8008300:	080083f0 	.word	0x080083f0
 8008304:	080083f0 	.word	0x080083f0
 8008308:	080083f4 	.word	0x080083f4

0800830c <lrintf>:
 800830c:	ee10 3a10 	vmov	r3, s0
 8008310:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008314:	f1a2 007f 	sub.w	r0, r2, #127	@ 0x7f
 8008318:	281e      	cmp	r0, #30
 800831a:	b082      	sub	sp, #8
 800831c:	dc2f      	bgt.n	800837e <lrintf+0x72>
 800831e:	1c41      	adds	r1, r0, #1
 8008320:	da02      	bge.n	8008328 <lrintf+0x1c>
 8008322:	2000      	movs	r0, #0
 8008324:	b002      	add	sp, #8
 8008326:	4770      	bx	lr
 8008328:	2816      	cmp	r0, #22
 800832a:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 800832e:	dd0a      	ble.n	8008346 <lrintf+0x3a>
 8008330:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008334:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008338:	3a96      	subs	r2, #150	@ 0x96
 800833a:	fa03 f002 	lsl.w	r0, r3, r2
 800833e:	2900      	cmp	r1, #0
 8008340:	d0f0      	beq.n	8008324 <lrintf+0x18>
 8008342:	4240      	negs	r0, r0
 8008344:	e7ee      	b.n	8008324 <lrintf+0x18>
 8008346:	4b10      	ldr	r3, [pc, #64]	@ (8008388 <lrintf+0x7c>)
 8008348:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800834c:	ed93 7a00 	vldr	s14, [r3]
 8008350:	ee37 0a00 	vadd.f32	s0, s14, s0
 8008354:	ed8d 0a01 	vstr	s0, [sp, #4]
 8008358:	eddd 7a01 	vldr	s15, [sp, #4]
 800835c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008360:	ee17 3a90 	vmov	r3, s15
 8008364:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8008368:	d0db      	beq.n	8008322 <lrintf+0x16>
 800836a:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800836e:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8008372:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8008376:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800837a:	40d8      	lsrs	r0, r3
 800837c:	e7df      	b.n	800833e <lrintf+0x32>
 800837e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008382:	ee17 0a90 	vmov	r0, s15
 8008386:	e7cd      	b.n	8008324 <lrintf+0x18>
 8008388:	080083e0 	.word	0x080083e0

0800838c <_init>:
 800838c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800838e:	bf00      	nop
 8008390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008392:	bc08      	pop	{r3}
 8008394:	469e      	mov	lr, r3
 8008396:	4770      	bx	lr

08008398 <_fini>:
 8008398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800839a:	bf00      	nop
 800839c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800839e:	bc08      	pop	{r3}
 80083a0:	469e      	mov	lr, r3
 80083a2:	4770      	bx	lr
