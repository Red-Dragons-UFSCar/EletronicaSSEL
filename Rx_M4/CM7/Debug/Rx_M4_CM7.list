
Rx_M4_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014d8c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  08015030  08015030  00016030  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015468  08015468  000172e8  2**0
                  CONTENTS
  4 .ARM          00000008  08015468  08015468  00016468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015470  08015470  000172e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015470  08015470  00016470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015474  08015474  00016474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002e8  24000000  08015478  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002490  240002e8  08015760  000172e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24002778  08015760  00017778  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000172e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029b7b  00000000  00000000  00017316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005669  00000000  00000000  00040e91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f60  00000000  00000000  00046500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001817  00000000  00000000  00048460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00042939  00000000  00000000  00049c77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d997  00000000  00000000  0008c5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a2d30  00000000  00000000  000b9f47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0025cc77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009424  00000000  00000000  0025ccbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  002660e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002e8 	.word	0x240002e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08015014 	.word	0x08015014

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002ec 	.word	0x240002ec
 80002dc:	08015014 	.word	0x08015014

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3d      	ldr	r3, [pc, #244]	@ (800077c <SystemInit+0xfc>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800068a:	4a3c      	ldr	r2, [pc, #240]	@ (800077c <SystemInit+0xfc>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b39      	ldr	r3, [pc, #228]	@ (800077c <SystemInit+0xfc>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a38      	ldr	r2, [pc, #224]	@ (800077c <SystemInit+0xfc>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b37      	ldr	r3, [pc, #220]	@ (8000780 <SystemInit+0x100>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b34      	ldr	r3, [pc, #208]	@ (8000780 <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a32      	ldr	r2, [pc, #200]	@ (8000780 <SystemInit+0x100>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b31      	ldr	r3, [pc, #196]	@ (8000784 <SystemInit+0x104>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a30      	ldr	r2, [pc, #192]	@ (8000784 <SystemInit+0x104>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000784 <SystemInit+0x104>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000784 <SystemInit+0x104>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492c      	ldr	r1, [pc, #176]	@ (8000784 <SystemInit+0x104>)
 80006d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000788 <SystemInit+0x108>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <SystemInit+0x100>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 0308 	and.w	r3, r3, #8
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d007      	beq.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a24      	ldr	r2, [pc, #144]	@ (8000780 <SystemInit+0x100>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <SystemInit+0x104>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <SystemInit+0x104>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <SystemInit+0x104>)
 800070a:	4a20      	ldr	r2, [pc, #128]	@ (800078c <SystemInit+0x10c>)
 800070c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <SystemInit+0x104>)
 8000710:	4a1f      	ldr	r2, [pc, #124]	@ (8000790 <SystemInit+0x110>)
 8000712:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <SystemInit+0x104>)
 8000716:	4a1f      	ldr	r2, [pc, #124]	@ (8000794 <SystemInit+0x114>)
 8000718:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <SystemInit+0x104>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <SystemInit+0x104>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	@ (8000794 <SystemInit+0x114>)
 8000724:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <SystemInit+0x104>)
 800072e:	4a19      	ldr	r2, [pc, #100]	@ (8000794 <SystemInit+0x114>)
 8000730:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <SystemInit+0x104>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	@ (8000784 <SystemInit+0x104>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <SystemInit+0x104>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <SystemInit+0x118>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800074e:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <SystemInit+0x118>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000754:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <SystemInit+0x11c>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <SystemInit+0x120>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <SystemInit+0x124>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <SystemInit+0x128>)
 800076c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000770:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	52002000 	.word	0x52002000
 8000784:	58024400 	.word	0x58024400
 8000788:	eaf6ed7f 	.word	0xeaf6ed7f
 800078c:	02020200 	.word	0x02020200
 8000790:	01ff0000 	.word	0x01ff0000
 8000794:	01010280 	.word	0x01010280
 8000798:	580000c0 	.word	0x580000c0
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	@ 0x28
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007be:	463b      	mov	r3, r7
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
 80007cc:	615a      	str	r2, [r3, #20]
 80007ce:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007d0:	4b30      	ldr	r3, [pc, #192]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007d2:	4a31      	ldr	r2, [pc, #196]	@ (8000898 <MX_ADC1_Init+0xec>)
 80007d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80007d6:	4b2f      	ldr	r3, [pc, #188]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007d8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80007dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80007de:	4b2d      	ldr	r3, [pc, #180]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007e4:	4b2b      	ldr	r3, [pc, #172]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ea:	4b2a      	ldr	r3, [pc, #168]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007ec:	2204      	movs	r2, #4
 80007ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007f0:	4b28      	ldr	r3, [pc, #160]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007f6:	4b27      	ldr	r3, [pc, #156]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80007fc:	4b25      	ldr	r3, [pc, #148]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007fe:	2201      	movs	r2, #1
 8000800:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000802:	4b24      	ldr	r3, [pc, #144]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000804:	2200      	movs	r2, #0
 8000806:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000808:	4b22      	ldr	r3, [pc, #136]	@ (8000894 <MX_ADC1_Init+0xe8>)
 800080a:	2200      	movs	r2, #0
 800080c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800080e:	4b21      	ldr	r3, [pc, #132]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000810:	2200      	movs	r2, #0
 8000812:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000814:	4b1f      	ldr	r3, [pc, #124]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000816:	2200      	movs	r2, #0
 8000818:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800081a:	4b1e      	ldr	r3, [pc, #120]	@ (8000894 <MX_ADC1_Init+0xe8>)
 800081c:	2200      	movs	r2, #0
 800081e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000820:	4b1c      	ldr	r3, [pc, #112]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000822:	2200      	movs	r2, #0
 8000824:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000826:	4b1b      	ldr	r3, [pc, #108]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000828:	2200      	movs	r2, #0
 800082a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800082e:	4819      	ldr	r0, [pc, #100]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000830:	f002 fb68 	bl	8002f04 <HAL_ADC_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800083a:	f000 fd70 	bl	800131e <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	4812      	ldr	r0, [pc, #72]	@ (8000894 <MX_ADC1_Init+0xe8>)
 800084a:	f003 fbe1 	bl	8004010 <HAL_ADCEx_MultiModeConfigChannel>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000854:	f000 fd63 	bl	800131e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000858:	4b10      	ldr	r3, [pc, #64]	@ (800089c <MX_ADC1_Init+0xf0>)
 800085a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800085c:	2306      	movs	r3, #6
 800085e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000860:	2300      	movs	r3, #0
 8000862:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000864:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000868:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800086a:	2304      	movs	r3, #4
 800086c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000872:	2300      	movs	r3, #0
 8000874:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000876:	463b      	mov	r3, r7
 8000878:	4619      	mov	r1, r3
 800087a:	4806      	ldr	r0, [pc, #24]	@ (8000894 <MX_ADC1_Init+0xe8>)
 800087c:	f002 feb0 	bl	80035e0 <HAL_ADC_ConfigChannel>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000886:	f000 fd4a 	bl	800131e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	3728      	adds	r7, #40	@ 0x28
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	24000304 	.word	0x24000304
 8000898:	40022000 	.word	0x40022000
 800089c:	2a000400 	.word	0x2a000400

080008a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	@ 0x28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a18      	ldr	r2, [pc, #96]	@ (8000920 <HAL_ADC_MspInit+0x80>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d129      	bne.n	8000916 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80008c2:	4b18      	ldr	r3, [pc, #96]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 80008c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008c8:	4a16      	ldr	r2, [pc, #88]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 80008ca:	f043 0320 	orr.w	r3, r3, #32
 80008ce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80008d2:	4b14      	ldr	r3, [pc, #80]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 80008d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008d8:	f003 0320 	and.w	r3, r3, #32
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e0:	4b10      	ldr	r3, [pc, #64]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 80008e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e6:	4a0f      	ldr	r2, [pc, #60]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 80008e8:	f043 0304 	orr.w	r3, r3, #4
 80008ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 80008f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f6:	f003 0304 	and.w	r3, r3, #4
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008fe:	2301      	movs	r3, #1
 8000900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000902:	2303      	movs	r3, #3
 8000904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	4805      	ldr	r0, [pc, #20]	@ (8000928 <HAL_ADC_MspInit+0x88>)
 8000912:	f005 fec7 	bl	80066a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000916:	bf00      	nop
 8000918:	3728      	adds	r7, #40	@ 0x28
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40022000 	.word	0x40022000
 8000924:	58024400 	.word	0x58024400
 8000928:	58020800 	.word	0x58020800

0800092c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000932:	4b19      	ldr	r3, [pc, #100]	@ (8000998 <MX_DMA_Init+0x6c>)
 8000934:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000938:	4a17      	ldr	r2, [pc, #92]	@ (8000998 <MX_DMA_Init+0x6c>)
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000942:	4b15      	ldr	r3, [pc, #84]	@ (8000998 <MX_DMA_Init+0x6c>)
 8000944:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000948:	f003 0301 	and.w	r3, r3, #1
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000950:	2200      	movs	r2, #0
 8000952:	2100      	movs	r1, #0
 8000954:	200c      	movs	r0, #12
 8000956:	f003 fd14 	bl	8004382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800095a:	200c      	movs	r0, #12
 800095c:	f003 fd2b 	bl	80043b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000960:	2200      	movs	r2, #0
 8000962:	2100      	movs	r1, #0
 8000964:	200e      	movs	r0, #14
 8000966:	f003 fd0c 	bl	8004382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800096a:	200e      	movs	r0, #14
 800096c:	f003 fd23 	bl	80043b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000970:	2200      	movs	r2, #0
 8000972:	2100      	movs	r1, #0
 8000974:	200f      	movs	r0, #15
 8000976:	f003 fd04 	bl	8004382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800097a:	200f      	movs	r0, #15
 800097c:	f003 fd1b 	bl	80043b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000980:	2200      	movs	r2, #0
 8000982:	2100      	movs	r1, #0
 8000984:	2010      	movs	r0, #16
 8000986:	f003 fcfc 	bl	8004382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800098a:	2010      	movs	r0, #16
 800098c:	f003 fd13 	bl	80043b6 <HAL_NVIC_EnableIRQ>

}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	58024400 	.word	0x58024400

0800099c <dshot_init>:
static void dshot_enable_dma_request();


/* Functions */
void dshot_init(dshot_type_e dshot_type)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
	dshot_set_timer(dshot_type);
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f000 f833 	bl	8000a14 <dshot_set_timer>
	dshot_put_tc_callback_function();
 80009ae:	f000 f8d3 	bl	8000b58 <dshot_put_tc_callback_function>
	dshot_start_pwm();
 80009b2:	f000 f8ef 	bl	8000b94 <dshot_start_pwm>
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <dshot_write>:

void dshot_write(uint16_t* motor_value)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b082      	sub	sp, #8
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer_all(motor_value);
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f000 f962 	bl	8000c90 <dshot_prepare_dmabuffer_all>
	dshot_dma_start();
 80009cc:	f000 f98c 	bl	8000ce8 <dshot_dma_start>
	dshot_enable_dma_request();
 80009d0:	f000 f9c2 	bl	8000d58 <dshot_enable_dma_request>
}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <dshot_choose_type>:


/* Static functions */
static uint32_t dshot_choose_type(dshot_type_e dshot_type)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
	switch (dshot_type)
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d003      	beq.n	80009f4 <dshot_choose_type+0x18>
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	d103      	bne.n	80009f8 <dshot_choose_type+0x1c>
	{
		case(DSHOT600):
				return DSHOT600_HZ;
 80009f0:	4b05      	ldr	r3, [pc, #20]	@ (8000a08 <dshot_choose_type+0x2c>)
 80009f2:	e002      	b.n	80009fa <dshot_choose_type+0x1e>

		case(DSHOT300):
				return DSHOT300_HZ;
 80009f4:	4b05      	ldr	r3, [pc, #20]	@ (8000a0c <dshot_choose_type+0x30>)
 80009f6:	e000      	b.n	80009fa <dshot_choose_type+0x1e>

		default:
		case(DSHOT150):
				return DSHOT150_HZ;
 80009f8:	4b05      	ldr	r3, [pc, #20]	@ (8000a10 <dshot_choose_type+0x34>)
	}
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	00b71b00 	.word	0x00b71b00
 8000a0c:	005b8d80 	.word	0x005b8d80
 8000a10:	002dc6c0 	.word	0x002dc6c0

08000a14 <dshot_set_timer>:

static void dshot_set_timer(dshot_type_e dshot_type)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	ed2d 8b02 	vpush	{d8}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
	uint16_t dshot_prescaler;
	uint32_t timer_clock = TIMER_CLOCK; // all timer clock is same as SystemCoreClock in stm32f411
 8000a22:	4b27      	ldr	r3, [pc, #156]	@ (8000ac0 <dshot_set_timer+0xac>)
 8000a24:	60fb      	str	r3, [r7, #12]

	// Calculate prescaler by dshot type
	dshot_prescaler = lrintf((float) timer_clock / dshot_choose_type(dshot_type) + 0.01f) - 1;
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	ee07 3a90 	vmov	s15, r3
 8000a2c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff ffd2 	bl	80009dc <dshot_choose_type>
 8000a38:	ee07 0a90 	vmov	s15, r0
 8000a3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a40:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000a44:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000ac4 <dshot_set_timer+0xb0>
 8000a48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a4c:	eeb0 0a67 	vmov.f32	s0, s15
 8000a50:	f014 faa0 	bl	8014f94 <lrintf>
 8000a54:	4603      	mov	r3, r0
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	817b      	strh	r3, [r7, #10]

	// motor1
	__HAL_TIM_SET_PRESCALER(MOTOR_1_TIM, dshot_prescaler);
 8000a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac8 <dshot_set_timer+0xb4>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	897a      	ldrh	r2, [r7, #10]
 8000a62:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_1_TIM, MOTOR_BITLENGTH);
 8000a64:	4b18      	ldr	r3, [pc, #96]	@ (8000ac8 <dshot_set_timer+0xb4>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2214      	movs	r2, #20
 8000a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a6c:	4b16      	ldr	r3, [pc, #88]	@ (8000ac8 <dshot_set_timer+0xb4>)
 8000a6e:	2214      	movs	r2, #20
 8000a70:	60da      	str	r2, [r3, #12]

	// motor2
	__HAL_TIM_SET_PRESCALER(MOTOR_2_TIM, dshot_prescaler);
 8000a72:	4b16      	ldr	r3, [pc, #88]	@ (8000acc <dshot_set_timer+0xb8>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	897a      	ldrh	r2, [r7, #10]
 8000a78:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_2_TIM, MOTOR_BITLENGTH);
 8000a7a:	4b14      	ldr	r3, [pc, #80]	@ (8000acc <dshot_set_timer+0xb8>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2214      	movs	r2, #20
 8000a80:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a82:	4b12      	ldr	r3, [pc, #72]	@ (8000acc <dshot_set_timer+0xb8>)
 8000a84:	2214      	movs	r2, #20
 8000a86:	60da      	str	r2, [r3, #12]

	// motor3
	__HAL_TIM_SET_PRESCALER(MOTOR_3_TIM, dshot_prescaler);
 8000a88:	4b10      	ldr	r3, [pc, #64]	@ (8000acc <dshot_set_timer+0xb8>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	897a      	ldrh	r2, [r7, #10]
 8000a8e:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_3_TIM, MOTOR_BITLENGTH);
 8000a90:	4b0e      	ldr	r3, [pc, #56]	@ (8000acc <dshot_set_timer+0xb8>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2214      	movs	r2, #20
 8000a96:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a98:	4b0c      	ldr	r3, [pc, #48]	@ (8000acc <dshot_set_timer+0xb8>)
 8000a9a:	2214      	movs	r2, #20
 8000a9c:	60da      	str	r2, [r3, #12]

	// motor4
	__HAL_TIM_SET_PRESCALER(MOTOR_4_TIM, dshot_prescaler);
 8000a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac8 <dshot_set_timer+0xb4>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	897a      	ldrh	r2, [r7, #10]
 8000aa4:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_4_TIM, MOTOR_BITLENGTH);
 8000aa6:	4b08      	ldr	r3, [pc, #32]	@ (8000ac8 <dshot_set_timer+0xb4>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2214      	movs	r2, #20
 8000aac:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000aae:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <dshot_set_timer+0xb4>)
 8000ab0:	2214      	movs	r2, #20
 8000ab2:	60da      	str	r2, [r3, #12]
}
 8000ab4:	bf00      	nop
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	ecbd 8b02 	vpop	{d8}
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	0bebc200 	.word	0x0bebc200
 8000ac4:	3c23d70a 	.word	0x3c23d70a
 8000ac8:	240006e0 	.word	0x240006e0
 8000acc:	240005fc 	.word	0x240005fc

08000ad0 <dshot_dma_tc_callback>:

// __HAL_TIM_DISABLE_DMA is needed to eliminate the delay between different dshot signals
// I don't know why :(
static void dshot_dma_tc_callback(DMA_HandleTypeDef *hdma)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000adc:	60fb      	str	r3, [r7, #12]

	if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d108      	bne.n	8000afa <dshot_dma_tc_callback+0x2a>
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	68da      	ldr	r2, [r3, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000af6:	60da      	str	r2, [r3, #12]
	}
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
	}
}
 8000af8:	e028      	b.n	8000b4c <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC2])
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d108      	bne.n	8000b16 <dshot_dma_tc_callback+0x46>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	68da      	ldr	r2, [r3, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000b12:	60da      	str	r2, [r3, #12]
}
 8000b14:	e01a      	b.n	8000b4c <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC3])
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d108      	bne.n	8000b32 <dshot_dma_tc_callback+0x62>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	68da      	ldr	r2, [r3, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000b2e:	60da      	str	r2, [r3, #12]
}
 8000b30:	e00c      	b.n	8000b4c <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d107      	bne.n	8000b4c <dshot_dma_tc_callback+0x7c>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	68da      	ldr	r2, [r3, #12]
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000b4a:	60da      	str	r2, [r3, #12]
}
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <dshot_put_tc_callback_function>:

static void dshot_put_tc_callback_function()
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
	// TIM_DMA_ID_CCx depends on timer channel
	MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = dshot_dma_tc_callback;
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b88 <dshot_put_tc_callback_function+0x30>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b60:	4a0a      	ldr	r2, [pc, #40]	@ (8000b8c <dshot_put_tc_callback_function+0x34>)
 8000b62:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = dshot_dma_tc_callback;
 8000b64:	4b0a      	ldr	r3, [pc, #40]	@ (8000b90 <dshot_put_tc_callback_function+0x38>)
 8000b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b68:	4a08      	ldr	r2, [pc, #32]	@ (8000b8c <dshot_put_tc_callback_function+0x34>)
 8000b6a:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dshot_dma_tc_callback;
 8000b6c:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <dshot_put_tc_callback_function+0x38>)
 8000b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b70:	4a06      	ldr	r2, [pc, #24]	@ (8000b8c <dshot_put_tc_callback_function+0x34>)
 8000b72:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = dshot_dma_tc_callback;
 8000b74:	4b04      	ldr	r3, [pc, #16]	@ (8000b88 <dshot_put_tc_callback_function+0x30>)
 8000b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b78:	4a04      	ldr	r2, [pc, #16]	@ (8000b8c <dshot_put_tc_callback_function+0x34>)
 8000b7a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	240006e0 	.word	0x240006e0
 8000b8c:	08000ad1 	.word	0x08000ad1
 8000b90:	240005fc 	.word	0x240005fc

08000b94 <dshot_start_pwm>:

static void dshot_start_pwm()
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	// Start the timer channel now.
    // Enabling/disabling DMA request can restart a new cycle without PWM start/stop.
  	HAL_TIM_PWM_Start(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL);
 8000b98:	210c      	movs	r1, #12
 8000b9a:	4808      	ldr	r0, [pc, #32]	@ (8000bbc <dshot_start_pwm+0x28>)
 8000b9c:	f00b f8a8 	bl	800bcf0 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL);
 8000ba0:	2108      	movs	r1, #8
 8000ba2:	4807      	ldr	r0, [pc, #28]	@ (8000bc0 <dshot_start_pwm+0x2c>)
 8000ba4:	f00b f8a4 	bl	800bcf0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL);
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <dshot_start_pwm+0x2c>)
 8000bac:	f00b f8a0 	bl	800bcf0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL);
 8000bb0:	2104      	movs	r1, #4
 8000bb2:	4802      	ldr	r0, [pc, #8]	@ (8000bbc <dshot_start_pwm+0x28>)
 8000bb4:	f00b f89c 	bl	800bcf0 <HAL_TIM_PWM_Start>
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	240006e0 	.word	0x240006e0
 8000bc0:	240005fc 	.word	0x240005fc

08000bc4 <dshot_prepare_packet>:

static uint16_t dshot_prepare_packet(uint16_t value)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b087      	sub	sp, #28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	80fb      	strh	r3, [r7, #6]
	uint16_t packet;
	bool dshot_telemetry = false;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	72fb      	strb	r3, [r7, #11]

	packet = (value << 1) | (dshot_telemetry ? 1 : 0);
 8000bd2:	88fb      	ldrh	r3, [r7, #6]
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	b21a      	sxth	r2, r3
 8000bd8:	7afb      	ldrb	r3, [r7, #11]
 8000bda:	b21b      	sxth	r3, r3
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	b21b      	sxth	r3, r3
 8000be0:	813b      	strh	r3, [r7, #8]

	// compute checksum
	unsigned csum = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
	unsigned csum_data = packet;
 8000be6:	893b      	ldrh	r3, [r7, #8]
 8000be8:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < 3; i++)
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	e009      	b.n	8000c04 <dshot_prepare_packet+0x40>
	{
        csum ^=  csum_data; // xor data by nibbles
 8000bf0:	697a      	ldr	r2, [r7, #20]
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	4053      	eors	r3, r2
 8000bf6:	617b      	str	r3, [r7, #20]
        csum_data >>= 4;
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	091b      	lsrs	r3, r3, #4
 8000bfc:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 3; i++)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	3301      	adds	r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	ddf2      	ble.n	8000bf0 <dshot_prepare_packet+0x2c>
	}

	csum &= 0xf;
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	f003 030f 	and.w	r3, r3, #15
 8000c10:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 8000c12:	893b      	ldrh	r3, [r7, #8]
 8000c14:	011b      	lsls	r3, r3, #4
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	813b      	strh	r3, [r7, #8]

	return packet;
 8000c20:	893b      	ldrh	r3, [r7, #8]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	371c      	adds	r7, #28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <dshot_prepare_dmabuffer>:

// Convert 16 bits packet to 16 pwm signal
static void dshot_prepare_dmabuffer(uint32_t* motor_dmabuffer, uint16_t value)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b084      	sub	sp, #16
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
 8000c36:	460b      	mov	r3, r1
 8000c38:	807b      	strh	r3, [r7, #2]
	uint16_t packet;
	packet = dshot_prepare_packet(value);
 8000c3a:	887b      	ldrh	r3, [r7, #2]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ffc1 	bl	8000bc4 <dshot_prepare_packet>
 8000c42:	4603      	mov	r3, r0
 8000c44:	81fb      	strh	r3, [r7, #14]

	for(int i = 0; i < 16; i++)
 8000c46:	2300      	movs	r3, #0
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	e011      	b.n	8000c70 <dshot_prepare_dmabuffer+0x42>
	{
		motor_dmabuffer[i] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;
 8000c4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	da01      	bge.n	8000c58 <dshot_prepare_dmabuffer+0x2a>
 8000c54:	220e      	movs	r2, #14
 8000c56:	e000      	b.n	8000c5a <dshot_prepare_dmabuffer+0x2c>
 8000c58:	2207      	movs	r2, #7
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	440b      	add	r3, r1
 8000c62:	601a      	str	r2, [r3, #0]
		packet <<= 1;
 8000c64:	89fb      	ldrh	r3, [r7, #14]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < 16; i++)
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	2b0f      	cmp	r3, #15
 8000c74:	ddea      	ble.n	8000c4c <dshot_prepare_dmabuffer+0x1e>
	}

	motor_dmabuffer[16] = 0;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	3340      	adds	r3, #64	@ 0x40
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
	motor_dmabuffer[17] = 0;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	3344      	adds	r3, #68	@ 0x44
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
}
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <dshot_prepare_dmabuffer_all>:

static void dshot_prepare_dmabuffer_all(uint16_t* motor_value)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer(motor1_dmabuffer, motor_value[0]);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	480e      	ldr	r0, [pc, #56]	@ (8000cd8 <dshot_prepare_dmabuffer_all+0x48>)
 8000ca0:	f7ff ffc5 	bl	8000c2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor2_dmabuffer, motor_value[1]);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3302      	adds	r3, #2
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	4619      	mov	r1, r3
 8000cac:	480b      	ldr	r0, [pc, #44]	@ (8000cdc <dshot_prepare_dmabuffer_all+0x4c>)
 8000cae:	f7ff ffbe 	bl	8000c2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor3_dmabuffer, motor_value[2]);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	3304      	adds	r3, #4
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4809      	ldr	r0, [pc, #36]	@ (8000ce0 <dshot_prepare_dmabuffer_all+0x50>)
 8000cbc:	f7ff ffb7 	bl	8000c2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor4_dmabuffer, motor_value[3]);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3306      	adds	r3, #6
 8000cc4:	881b      	ldrh	r3, [r3, #0]
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4806      	ldr	r0, [pc, #24]	@ (8000ce4 <dshot_prepare_dmabuffer_all+0x54>)
 8000cca:	f7ff ffb0 	bl	8000c2e <dshot_prepare_dmabuffer>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	24000368 	.word	0x24000368
 8000cdc:	240003b0 	.word	0x240003b0
 8000ce0:	240003f8 	.word	0x240003f8
 8000ce4:	24000440 	.word	0x24000440

08000ce8 <dshot_dma_start>:

static void dshot_dma_start()
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
	HAL_DMA_Start_IT(MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4], (uint32_t)motor1_dmabuffer, (uint32_t)&MOTOR_1_TIM->Instance->CCR4, DSHOT_DMA_BUFFER_SIZE);
 8000cec:	4b14      	ldr	r3, [pc, #80]	@ (8000d40 <dshot_dma_start+0x58>)
 8000cee:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000cf0:	4914      	ldr	r1, [pc, #80]	@ (8000d44 <dshot_dma_start+0x5c>)
 8000cf2:	4b13      	ldr	r3, [pc, #76]	@ (8000d40 <dshot_dma_start+0x58>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	3340      	adds	r3, #64	@ 0x40
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	2312      	movs	r3, #18
 8000cfc:	f003 fee6 	bl	8004acc <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3], (uint32_t)motor2_dmabuffer, (uint32_t)&MOTOR_2_TIM->Instance->CCR3, DSHOT_DMA_BUFFER_SIZE);
 8000d00:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <dshot_dma_start+0x60>)
 8000d02:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8000d04:	4911      	ldr	r1, [pc, #68]	@ (8000d4c <dshot_dma_start+0x64>)
 8000d06:	4b10      	ldr	r3, [pc, #64]	@ (8000d48 <dshot_dma_start+0x60>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	333c      	adds	r3, #60	@ 0x3c
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	2312      	movs	r3, #18
 8000d10:	f003 fedc 	bl	8004acc <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1], (uint32_t)motor3_dmabuffer, (uint32_t)&MOTOR_3_TIM->Instance->CCR1, DSHOT_DMA_BUFFER_SIZE);
 8000d14:	4b0c      	ldr	r3, [pc, #48]	@ (8000d48 <dshot_dma_start+0x60>)
 8000d16:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8000d18:	490d      	ldr	r1, [pc, #52]	@ (8000d50 <dshot_dma_start+0x68>)
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d48 <dshot_dma_start+0x60>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	3334      	adds	r3, #52	@ 0x34
 8000d20:	461a      	mov	r2, r3
 8000d22:	2312      	movs	r3, #18
 8000d24:	f003 fed2 	bl	8004acc <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2], (uint32_t)motor4_dmabuffer, (uint32_t)&MOTOR_4_TIM->Instance->CCR2, DSHOT_DMA_BUFFER_SIZE);
 8000d28:	4b05      	ldr	r3, [pc, #20]	@ (8000d40 <dshot_dma_start+0x58>)
 8000d2a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000d2c:	4909      	ldr	r1, [pc, #36]	@ (8000d54 <dshot_dma_start+0x6c>)
 8000d2e:	4b04      	ldr	r3, [pc, #16]	@ (8000d40 <dshot_dma_start+0x58>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	3338      	adds	r3, #56	@ 0x38
 8000d34:	461a      	mov	r2, r3
 8000d36:	2312      	movs	r3, #18
 8000d38:	f003 fec8 	bl	8004acc <HAL_DMA_Start_IT>
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	240006e0 	.word	0x240006e0
 8000d44:	24000368 	.word	0x24000368
 8000d48:	240005fc 	.word	0x240005fc
 8000d4c:	240003b0 	.word	0x240003b0
 8000d50:	240003f8 	.word	0x240003f8
 8000d54:	24000440 	.word	0x24000440

08000d58 <dshot_enable_dma_request>:

static void dshot_enable_dma_request()
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE_DMA(MOTOR_1_TIM, TIM_DMA_CC4);
 8000d5c:	4b12      	ldr	r3, [pc, #72]	@ (8000da8 <dshot_enable_dma_request+0x50>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	68da      	ldr	r2, [r3, #12]
 8000d62:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <dshot_enable_dma_request+0x50>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000d6a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_2_TIM, TIM_DMA_CC3);
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dac <dshot_enable_dma_request+0x54>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	68da      	ldr	r2, [r3, #12]
 8000d72:	4b0e      	ldr	r3, [pc, #56]	@ (8000dac <dshot_enable_dma_request+0x54>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000d7a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_3_TIM, TIM_DMA_CC1);
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dac <dshot_enable_dma_request+0x54>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	68da      	ldr	r2, [r3, #12]
 8000d82:	4b0a      	ldr	r3, [pc, #40]	@ (8000dac <dshot_enable_dma_request+0x54>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000d8a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_4_TIM, TIM_DMA_CC2);
 8000d8c:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <dshot_enable_dma_request+0x50>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	68da      	ldr	r2, [r3, #12]
 8000d92:	4b05      	ldr	r3, [pc, #20]	@ (8000da8 <dshot_enable_dma_request+0x50>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000d9a:	60da      	str	r2, [r3, #12]
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	240006e0 	.word	0x240006e0
 8000dac:	240005fc 	.word	0x240005fc

08000db0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b087      	sub	sp, #28
 8000db4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db6:	4b28      	ldr	r3, [pc, #160]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dbc:	4a26      	ldr	r2, [pc, #152]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000dbe:	f043 0304 	orr.w	r3, r3, #4
 8000dc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dc6:	4b24      	ldr	r3, [pc, #144]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dcc:	f003 0304 	and.w	r3, r3, #4
 8000dd0:	617b      	str	r3, [r7, #20]
 8000dd2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd4:	4b20      	ldr	r3, [pc, #128]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dda:	4a1f      	ldr	r2, [pc, #124]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000de4:	4b1c      	ldr	r3, [pc, #112]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000df2:	4b19      	ldr	r3, [pc, #100]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df8:	4a17      	ldr	r2, [pc, #92]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000dfa:	f043 0310 	orr.w	r3, r3, #16
 8000dfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e02:	4b15      	ldr	r3, [pc, #84]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e08:	f003 0310 	and.w	r3, r3, #16
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e10:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e16:	4a10      	ldr	r2, [pc, #64]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e18:	f043 0308 	orr.w	r3, r3, #8
 8000e1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e20:	4b0d      	ldr	r3, [pc, #52]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e26:	f003 0308 	and.w	r3, r3, #8
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e34:	4a08      	ldr	r2, [pc, #32]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e36:	f043 0302 	orr.w	r3, r3, #2
 8000e3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e3e:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e44:	f003 0302 	and.w	r3, r3, #2
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	687b      	ldr	r3, [r7, #4]

}
 8000e4c:	bf00      	nop
 8000e4e:	371c      	adds	r7, #28
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	58024400 	.word	0x58024400

08000e5c <get_M4>:
	}
	return res;
}

void  get_M4(int *data) // get data from M4 to M7 buffer
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	if (xfr_ptr->sts_4to7 == 1) // if M4 to M7 buffer has data
 8000e64:	4b14      	ldr	r3, [pc, #80]	@ (8000eb8 <get_M4+0x5c>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d11e      	bne.n	8000eac <get_M4+0x50>
	{
		xfr_ptr->sts_4to7 = 2; // lock the M4 to M7 buffer
 8000e6e:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <get_M4+0x5c>)
 8000e70:	2202      	movs	r2, #2
 8000e72:	701a      	strb	r2, [r3, #0]
		for(int n = 0; n < 6; n++)
 8000e74:	2300      	movs	r3, #0
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	e012      	b.n	8000ea0 <get_M4+0x44>
		{
			data[n] = xfr_ptr->M4toM7[n]; // transfer data
 8000e7a:	490f      	ldr	r1, [pc, #60]	@ (8000eb8 <get_M4+0x5c>)
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	441a      	add	r2, r3
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	440b      	add	r3, r1
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	6013      	str	r3, [r2, #0]
			xfr_ptr->M4toM7[n] = 0; // clear M4 to M7 buffer
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb8 <get_M4+0x5c>)
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	4413      	add	r3, r2
 8000e96:	2200      	movs	r2, #0
 8000e98:	605a      	str	r2, [r3, #4]
		for(int n = 0; n < 6; n++)
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	2b05      	cmp	r3, #5
 8000ea4:	dde9      	ble.n	8000e7a <get_M4+0x1e>
		}
		xfr_ptr->sts_4to7 = 0; // M4 to M7 buffer is empty
 8000ea6:	4b04      	ldr	r3, [pc, #16]	@ (8000eb8 <get_M4+0x5c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	701a      	strb	r2, [r3, #0]
	}
	// return the buffer (pointer)
}
 8000eac:	bf00      	nop
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	38001000 	.word	0x38001000

08000ebc <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	contador = __HAL_TIM_GET_COUNTER(&htim4);
 8000ec4:	4b05      	ldr	r3, [pc, #20]	@ (8000edc <HAL_TIM_IC_CaptureCallback+0x20>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eca:	4a05      	ldr	r2, [pc, #20]	@ (8000ee0 <HAL_TIM_IC_CaptureCallback+0x24>)
 8000ecc:	6013      	str	r3, [r2, #0]
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	24000694 	.word	0x24000694
 8000ee0:	240004c8 	.word	0x240004c8
 8000ee4:	00000000 	.word	0x00000000

08000ee8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b0a2      	sub	sp, #136	@ 0x88
 8000eec:	af04      	add	r7, sp, #16
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000eee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ef2:	677b      	str	r3, [r7, #116]	@ 0x74
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000ef4:	bf00      	nop
 8000ef6:	4ba0      	ldr	r3, [pc, #640]	@ (8001178 <main+0x290>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d004      	beq.n	8000f0c <main+0x24>
 8000f02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f04:	1e5a      	subs	r2, r3, #1
 8000f06:	677a      	str	r2, [r7, #116]	@ 0x74
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	dcf4      	bgt.n	8000ef6 <main+0xe>
  if ( timeout < 0 )
 8000f0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	da01      	bge.n	8000f16 <main+0x2e>
  {
  Error_Handler();
 8000f12:	f000 fa04 	bl	800131e <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f16:	f001 fd51 	bl	80029bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f1a:	f000 f94d 	bl	80011b8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f1e:	f000 f9cb 	bl	80012b8 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000f22:	4b95      	ldr	r3, [pc, #596]	@ (8001178 <main+0x290>)
 8000f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f28:	4a93      	ldr	r2, [pc, #588]	@ (8001178 <main+0x290>)
 8000f2a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f32:	4b91      	ldr	r3, [pc, #580]	@ (8001178 <main+0x290>)
 8000f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f3c:	603b      	str	r3, [r7, #0]
 8000f3e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000f40:	2000      	movs	r0, #0
 8000f42:	f005 fd93 	bl	8006a6c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000f46:	2100      	movs	r1, #0
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f005 fda9 	bl	8006aa0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000f4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f52:	677b      	str	r3, [r7, #116]	@ 0x74
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000f54:	bf00      	nop
 8000f56:	4b88      	ldr	r3, [pc, #544]	@ (8001178 <main+0x290>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d104      	bne.n	8000f6c <main+0x84>
 8000f62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f64:	1e5a      	subs	r2, r3, #1
 8000f66:	677a      	str	r2, [r7, #116]	@ 0x74
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	dcf4      	bgt.n	8000f56 <main+0x6e>
if ( timeout < 0 )
 8000f6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	da01      	bge.n	8000f76 <main+0x8e>
{
Error_Handler();
 8000f72:	f000 f9d4 	bl	800131e <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f76:	f7ff ff1b 	bl	8000db0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f7a:	f7ff fcd7 	bl	800092c <MX_DMA_Init>
  MX_TIM2_Init();
 8000f7e:	f000 fe3f 	bl	8001c00 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000f82:	f000 ff4d 	bl	8001e20 <MX_TIM5_Init>
  MX_TIM3_Init();
 8000f86:	f000 fe9f 	bl	8001cc8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f8a:	f000 fef3 	bl	8001d74 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8000f8e:	f010 fcf9 	bl	8011984 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000f92:	f000 fddb 	bl	8001b4c <MX_TIM1_Init>
  MX_TIM8_Init();
 8000f96:	f000 ffa7 	bl	8001ee8 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000f9a:	f000 ffff 	bl	8001f9c <MX_TIM15_Init>
  MX_ADC1_Init();
 8000f9e:	f7ff fc05 	bl	80007ac <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000fa2:	213c      	movs	r1, #60	@ 0x3c
 8000fa4:	4875      	ldr	r0, [pc, #468]	@ (800117c <main+0x294>)
 8000fa6:	f00b f857 	bl	800c058 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8000faa:	213c      	movs	r1, #60	@ 0x3c
 8000fac:	4874      	ldr	r0, [pc, #464]	@ (8001180 <main+0x298>)
 8000fae:	f00b f853 	bl	800c058 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 8000fb2:	213c      	movs	r1, #60	@ 0x3c
 8000fb4:	4873      	ldr	r0, [pc, #460]	@ (8001184 <main+0x29c>)
 8000fb6:	f00b f84f 	bl	800c058 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8000fba:	213c      	movs	r1, #60	@ 0x3c
 8000fbc:	4872      	ldr	r0, [pc, #456]	@ (8001188 <main+0x2a0>)
 8000fbe:	f00b f84b 	bl	800c058 <HAL_TIM_Encoder_Start_IT>
	uint8_t * xfr_data; // pointer to transfer data


	//initialize inter-core status pointers
	xfr_ptr->sts_4to7 = 0;
 8000fc2:	4b72      	ldr	r3, [pc, #456]	@ (800118c <main+0x2a4>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]
	xfr_ptr->sts_7to4 = 0;
 8000fc8:	4b70      	ldr	r3, [pc, #448]	@ (800118c <main+0x2a4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	705a      	strb	r2, [r3, #1]


	  if (HAL_TIM_Base_Start_IT(&htim15) != HAL_OK)
 8000fce:	4870      	ldr	r0, [pc, #448]	@ (8001190 <main+0x2a8>)
 8000fd0:	f00a fdbe 	bl	800bb50 <HAL_TIM_Base_Start_IT>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <main+0xf6>
	    {
	      /* Starting Error */
	      Error_Handler();
 8000fda:	f000 f9a0 	bl	800131e <Error_Handler>
	    }
	  dshot_init(DSHOT300);
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f7ff fcdc 	bl	800099c <dshot_init>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f001 fb05 	bl	80025f4 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000fea:	2001      	movs	r0, #1
 8000fec:	f001 fb02 	bl	80025f4 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000ff0:	2002      	movs	r0, #2
 8000ff2:	f001 faff 	bl	80025f4 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f001 fb71 	bl	80026e0 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000ffe:	4b65      	ldr	r3, [pc, #404]	@ (8001194 <main+0x2ac>)
 8001000:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001004:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8001006:	4b63      	ldr	r3, [pc, #396]	@ (8001194 <main+0x2ac>)
 8001008:	2200      	movs	r2, #0
 800100a:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800100c:	4b61      	ldr	r3, [pc, #388]	@ (8001194 <main+0x2ac>)
 800100e:	2200      	movs	r2, #0
 8001010:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8001012:	4b60      	ldr	r3, [pc, #384]	@ (8001194 <main+0x2ac>)
 8001014:	2200      	movs	r2, #0
 8001016:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8001018:	4b5e      	ldr	r3, [pc, #376]	@ (8001194 <main+0x2ac>)
 800101a:	2200      	movs	r2, #0
 800101c:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800101e:	495d      	ldr	r1, [pc, #372]	@ (8001194 <main+0x2ac>)
 8001020:	2000      	movs	r0, #0
 8001022:	f001 fbed 	bl	8002800 <BSP_COM_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <main+0x148>
  {
    Error_Handler();
 800102c:	f000 f977 	bl	800131e <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char message[100]={'\0'};
 8001030:	2300      	movs	r3, #0
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	f107 0308 	add.w	r3, r7, #8
 8001038:	2260      	movs	r2, #96	@ 0x60
 800103a:	2100      	movs	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f011 ff4c 	bl	8012eda <memset>
  //Inicializa referencia como zero
  HAL_Delay(7000);
 8001042:	f641 3058 	movw	r0, #7000	@ 0x1b58
 8001046:	f001 fd4b 	bl	8002ae0 <HAL_Delay>

  uint32_t Leitura= 0;
 800104a:	2300      	movs	r3, #0
 800104c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  float Leitura2 = 0;
 800104e:	f04f 0300 	mov.w	r3, #0
 8001052:	66bb      	str	r3, [r7, #104]	@ 0x68
  extern volatile float u[4];
  extern volatile float error[4];
  while (1)
  {
	      //comunicacao entre cores
	  	  if (xfr_ptr->sts_4to7 == 1)
 8001054:	4b4d      	ldr	r3, [pc, #308]	@ (800118c <main+0x2a4>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b01      	cmp	r3, #1
 800105c:	d102      	bne.n	8001064 <main+0x17c>
	  	  {
	  		 get_M4(new_mensagem); // get data sent from M4 to M7
 800105e:	484e      	ldr	r0, [pc, #312]	@ (8001198 <main+0x2b0>)
 8001060:	f7ff fefc 	bl	8000e5c <get_M4>
	  	  }

	  	  //validacao da mensagem, utilizamos 111 como um ID de inicio e 112 de final

	  	  if((new_mensagem[0]==111)&&(new_mensagem[5]==112)){
 8001064:	4b4c      	ldr	r3, [pc, #304]	@ (8001198 <main+0x2b0>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b6f      	cmp	r3, #111	@ 0x6f
 800106a:	d11a      	bne.n	80010a2 <main+0x1ba>
 800106c:	4b4a      	ldr	r3, [pc, #296]	@ (8001198 <main+0x2b0>)
 800106e:	695b      	ldr	r3, [r3, #20]
 8001070:	2b70      	cmp	r3, #112	@ 0x70
 8001072:	d116      	bne.n	80010a2 <main+0x1ba>
	  		for(uint8_t n=0;n<6;n++){
 8001074:	2300      	movs	r3, #0
 8001076:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 800107a:	e00e      	b.n	800109a <main+0x1b2>
	  		  old_mensagem[n] = new_mensagem[n];
 800107c:	f897 2073 	ldrb.w	r2, [r7, #115]	@ 0x73
 8001080:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001084:	4944      	ldr	r1, [pc, #272]	@ (8001198 <main+0x2b0>)
 8001086:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800108a:	4944      	ldr	r1, [pc, #272]	@ (800119c <main+0x2b4>)
 800108c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  		for(uint8_t n=0;n<6;n++){
 8001090:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001094:	3301      	adds	r3, #1
 8001096:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 800109a:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800109e:	2b05      	cmp	r3, #5
 80010a0:	d9ec      	bls.n	800107c <main+0x194>
	  		}
	  	  }

	  	  for(uint8_t n=0; n<4;n++){
 80010a2:	2300      	movs	r3, #0
 80010a4:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
 80010a8:	e019      	b.n	80010de <main+0x1f6>
	  		 ref[n] = (float)old_mensagem[n+1]/100;
 80010aa:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80010ae:	3301      	adds	r3, #1
 80010b0:	4a3a      	ldr	r2, [pc, #232]	@ (800119c <main+0x2b4>)
 80010b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b6:	ee07 3a90 	vmov	s15, r3
 80010ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010be:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80010c2:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80011a0 <main+0x2b8>
 80010c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ca:	4a36      	ldr	r2, [pc, #216]	@ (80011a4 <main+0x2bc>)
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	4413      	add	r3, r2
 80010d0:	edc3 7a00 	vstr	s15, [r3]
	  	  for(uint8_t n=0; n<4;n++){
 80010d4:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80010d8:	3301      	adds	r3, #1
 80010da:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
 80010de:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80010e2:	2b03      	cmp	r3, #3
 80010e4:	d9e1      	bls.n	80010aa <main+0x1c2>
	  	for(uint8_t n=0; n<4;n++){
	  		ref[n] =2;
	  	}
	  	   */
	  	  //print para o puttyW
	  	  sprintf(message, "%f %f %f\n \r",ref[0],speed[0],u[0]);
 80010e6:	4b2f      	ldr	r3, [pc, #188]	@ (80011a4 <main+0x2bc>)
 80010e8:	edd3 7a00 	vldr	s15, [r3]
 80010ec:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80010f0:	4b2d      	ldr	r3, [pc, #180]	@ (80011a8 <main+0x2c0>)
 80010f2:	edd3 7a00 	vldr	s15, [r3]
 80010f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010fa:	4b2c      	ldr	r3, [pc, #176]	@ (80011ac <main+0x2c4>)
 80010fc:	edd3 6a00 	vldr	s13, [r3]
 8001100:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001104:	1d38      	adds	r0, r7, #4
 8001106:	ed8d 6b02 	vstr	d6, [sp, #8]
 800110a:	ed8d 7b00 	vstr	d7, [sp]
 800110e:	ec53 2b15 	vmov	r2, r3, d5
 8001112:	4927      	ldr	r1, [pc, #156]	@ (80011b0 <main+0x2c8>)
 8001114:	f011 fe7e 	bl	8012e14 <siprintf>
	  	  CDC_Transmit_FS(message,sizeof(message));
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	2164      	movs	r1, #100	@ 0x64
 800111c:	4618      	mov	r0, r3
 800111e:	f010 fcf1 	bl	8011b04 <CDC_Transmit_FS>

	  	  //Iniciar ADC

	  	  HAL_ADC_Start(&hadc1);
 8001122:	4824      	ldr	r0, [pc, #144]	@ (80011b4 <main+0x2cc>)
 8001124:	f002 f890 	bl	8003248 <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001128:	f04f 31ff 	mov.w	r1, #4294967295
 800112c:	4821      	ldr	r0, [pc, #132]	@ (80011b4 <main+0x2cc>)
 800112e:	f002 f955 	bl	80033dc <HAL_ADC_PollForConversion>
	  	  Leitura = HAL_ADC_GetValue(&hadc1);
 8001132:	4820      	ldr	r0, [pc, #128]	@ (80011b4 <main+0x2cc>)
 8001134:	f002 fa46 	bl	80035c4 <HAL_ADC_GetValue>
 8001138:	66f8      	str	r0, [r7, #108]	@ 0x6c
	  	  Leitura2 = (Leitura*3.3)/65535;
 800113a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800113c:	ee07 3a90 	vmov	s15, r3
 8001140:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001144:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 8001168 <main+0x280>
 8001148:	ee27 6b06 	vmul.f64	d6, d7, d6
 800114c:	ed9f 5b08 	vldr	d5, [pc, #32]	@ 8001170 <main+0x288>
 8001150:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001154:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001158:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_Delay(5);
 800115c:	2005      	movs	r0, #5
 800115e:	f001 fcbf 	bl	8002ae0 <HAL_Delay>
  {
 8001162:	e777      	b.n	8001054 <main+0x16c>
 8001164:	f3af 8000 	nop.w
 8001168:	66666666 	.word	0x66666666
 800116c:	400a6666 	.word	0x400a6666
 8001170:	00000000 	.word	0x00000000
 8001174:	40efffe0 	.word	0x40efffe0
 8001178:	58024400 	.word	0x58024400
 800117c:	24000694 	.word	0x24000694
 8001180:	240005b0 	.word	0x240005b0
 8001184:	2400072c 	.word	0x2400072c
 8001188:	24000648 	.word	0x24000648
 800118c:	38001000 	.word	0x38001000
 8001190:	24000778 	.word	0x24000778
 8001194:	24000488 	.word	0x24000488
 8001198:	24000498 	.word	0x24000498
 800119c:	240004b0 	.word	0x240004b0
 80011a0:	42c80000 	.word	0x42c80000
 80011a4:	240004cc 	.word	0x240004cc
 80011a8:	24000518 	.word	0x24000518
 80011ac:	24000528 	.word	0x24000528
 80011b0:	08015030 	.word	0x08015030
 80011b4:	24000304 	.word	0x24000304

080011b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b09c      	sub	sp, #112	@ 0x70
 80011bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011c2:	224c      	movs	r2, #76	@ 0x4c
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f011 fe87 	bl	8012eda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	2220      	movs	r2, #32
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f011 fe81 	bl	8012eda <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80011d8:	2004      	movs	r0, #4
 80011da:	f006 ff13 	bl	8008004 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011de:	2300      	movs	r3, #0
 80011e0:	603b      	str	r3, [r7, #0]
 80011e2:	4b33      	ldr	r3, [pc, #204]	@ (80012b0 <SystemClock_Config+0xf8>)
 80011e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011e6:	4a32      	ldr	r2, [pc, #200]	@ (80012b0 <SystemClock_Config+0xf8>)
 80011e8:	f023 0301 	bic.w	r3, r3, #1
 80011ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80011ee:	4b30      	ldr	r3, [pc, #192]	@ (80012b0 <SystemClock_Config+0xf8>)
 80011f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	4b2e      	ldr	r3, [pc, #184]	@ (80012b4 <SystemClock_Config+0xfc>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001200:	4a2c      	ldr	r2, [pc, #176]	@ (80012b4 <SystemClock_Config+0xfc>)
 8001202:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001206:	6193      	str	r3, [r2, #24]
 8001208:	4b2a      	ldr	r3, [pc, #168]	@ (80012b4 <SystemClock_Config+0xfc>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001210:	603b      	str	r3, [r7, #0]
 8001212:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001214:	bf00      	nop
 8001216:	4b27      	ldr	r3, [pc, #156]	@ (80012b4 <SystemClock_Config+0xfc>)
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800121e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001222:	d1f8      	bne.n	8001216 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001224:	2322      	movs	r3, #34	@ 0x22
 8001226:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001228:	2301      	movs	r3, #1
 800122a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800122c:	2340      	movs	r3, #64	@ 0x40
 800122e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001230:	2301      	movs	r3, #1
 8001232:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001234:	2302      	movs	r3, #2
 8001236:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001238:	2300      	movs	r3, #0
 800123a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800123c:	2304      	movs	r3, #4
 800123e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8001240:	2319      	movs	r3, #25
 8001242:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001244:	2302      	movs	r3, #2
 8001246:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001248:	2305      	movs	r3, #5
 800124a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800124c:	2302      	movs	r3, #2
 800124e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001250:	230c      	movs	r3, #12
 8001252:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001254:	2300      	movs	r3, #0
 8001256:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001260:	4618      	mov	r0, r3
 8001262:	f006 ff39 	bl	80080d8 <HAL_RCC_OscConfig>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800126c:	f000 f857 	bl	800131e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001270:	233f      	movs	r3, #63	@ 0x3f
 8001272:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001274:	2303      	movs	r3, #3
 8001276:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800127c:	2300      	movs	r3, #0
 800127e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001280:	2340      	movs	r3, #64	@ 0x40
 8001282:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001284:	2340      	movs	r3, #64	@ 0x40
 8001286:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001288:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800128c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800128e:	2340      	movs	r3, #64	@ 0x40
 8001290:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	2104      	movs	r1, #4
 8001296:	4618      	mov	r0, r3
 8001298:	f007 fb78 	bl	800898c <HAL_RCC_ClockConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <SystemClock_Config+0xee>
  {
    Error_Handler();
 80012a2:	f000 f83c 	bl	800131e <Error_Handler>
  }
}
 80012a6:	bf00      	nop
 80012a8:	3770      	adds	r7, #112	@ 0x70
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	58000400 	.word	0x58000400
 80012b4:	58024800 	.word	0x58024800

080012b8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b0b0      	sub	sp, #192	@ 0xc0
 80012bc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012be:	463b      	mov	r3, r7
 80012c0:	22c0      	movs	r2, #192	@ 0xc0
 80012c2:	2100      	movs	r1, #0
 80012c4:	4618      	mov	r0, r3
 80012c6:	f011 fe08 	bl	8012eda <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI1;
 80012ca:	f44f 2201 	mov.w	r2, #528384	@ 0x81000
 80012ce:	f04f 0300 	mov.w	r3, #0
 80012d2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80012d6:	2304      	movs	r3, #4
 80012d8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 80012da:	2309      	movs	r3, #9
 80012dc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80012de:	2302      	movs	r3, #2
 80012e0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80012e2:	2302      	movs	r3, #2
 80012e4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80012e6:	2302      	movs	r3, #2
 80012e8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80012ea:	23c0      	movs	r3, #192	@ 0xc0
 80012ec:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80012ee:	2320      	movs	r3, #32
 80012f0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 80012f2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80012f6:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80012f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012fc:	663b      	str	r3, [r7, #96]	@ 0x60
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80012fe:	2300      	movs	r3, #0
 8001300:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001304:	463b      	mov	r3, r7
 8001306:	4618      	mov	r0, r3
 8001308:	f007 fecc 	bl	80090a4 <HAL_RCCEx_PeriphCLKConfig>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 8001312:	f000 f804 	bl	800131e <Error_Handler>
  }
}
 8001316:	bf00      	nop
 8001318:	37c0      	adds	r7, #192	@ 0xc0
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001322:	b672      	cpsid	i
}
 8001324:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001326:	bf00      	nop
 8001328:	e7fd      	b.n	8001326 <Error_Handler+0x8>
	...

0800132c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001332:	4b0a      	ldr	r3, [pc, #40]	@ (800135c <HAL_MspInit+0x30>)
 8001334:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001338:	4a08      	ldr	r2, [pc, #32]	@ (800135c <HAL_MspInit+0x30>)
 800133a:	f043 0302 	orr.w	r3, r3, #2
 800133e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001342:	4b06      	ldr	r3, [pc, #24]	@ (800135c <HAL_MspInit+0x30>)
 8001344:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	58024400 	.word	0x58024400

08001360 <map>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//Função de mapeamento
uint16_t map(float x, int in_min, int in_max, int out_min, int out_max) {
 8001360:	b480      	push	{r7}
 8001362:	b087      	sub	sp, #28
 8001364:	af00      	add	r7, sp, #0
 8001366:	ed87 0a05 	vstr	s0, [r7, #20]
 800136a:	6138      	str	r0, [r7, #16]
 800136c:	60f9      	str	r1, [r7, #12]
 800136e:	60ba      	str	r2, [r7, #8]
 8001370:	607b      	str	r3, [r7, #4]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	ee07 3a90 	vmov	s15, r3
 8001378:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800137c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001380:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	ee07 3a90 	vmov	s15, r3
 800138e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001392:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	ee07 3a90 	vmov	s15, r3
 80013a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	ee07 3a90 	vmov	s15, r3
 80013ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013ba:	ee17 3a90 	vmov	r3, s15
 80013be:	b29b      	uxth	r3, r3
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	371c      	adds	r7, #28
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	0000      	movs	r0, r0
	...

080013d0 <Controle>:

void Controle(){
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
	for(uint8_t n=0;n<4;n++){
 80013d6:	2300      	movs	r3, #0
 80013d8:	71fb      	strb	r3, [r7, #7]
 80013da:	e1b3      	b.n	8001744 <Controle+0x374>
		if(once ==0){
 80013dc:	4bb4      	ldr	r3, [pc, #720]	@ (80016b0 <Controle+0x2e0>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d161      	bne.n	80014a8 <Controle+0xd8>
			q0[n] = Kc[n] + Kd[n]/0.01 +Ki[n]*0.01;
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	4ab3      	ldr	r2, [pc, #716]	@ (80016b4 <Controle+0x2e4>)
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	edd3 7a00 	vldr	s15, [r3]
 80013f0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	4ab0      	ldr	r2, [pc, #704]	@ (80016b8 <Controle+0x2e8>)
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	edd3 7a00 	vldr	s15, [r3]
 8001400:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001404:	ed9f 4ba8 	vldr	d4, [pc, #672]	@ 80016a8 <Controle+0x2d8>
 8001408:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800140c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	4aaa      	ldr	r2, [pc, #680]	@ (80016bc <Controle+0x2ec>)
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	edd3 7a00 	vldr	s15, [r3]
 800141c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001420:	ed9f 5ba1 	vldr	d5, [pc, #644]	@ 80016a8 <Controle+0x2d8>
 8001424:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001428:	ee36 7b07 	vadd.f64	d7, d6, d7
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001432:	4aa3      	ldr	r2, [pc, #652]	@ (80016c0 <Controle+0x2f0>)
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	edc3 7a00 	vstr	s15, [r3]
			q1[n] = -Kc[n] - 2*Kd[n]/0.01;
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	4a9d      	ldr	r2, [pc, #628]	@ (80016b4 <Controle+0x2e4>)
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	edd3 7a00 	vldr	s15, [r3]
 8001448:	eef1 7a67 	vneg.f32	s15, s15
 800144c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	4a99      	ldr	r2, [pc, #612]	@ (80016b8 <Controle+0x2e8>)
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	edd3 7a00 	vldr	s15, [r3]
 800145c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001460:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001464:	ed9f 4b90 	vldr	d4, [pc, #576]	@ 80016a8 <Controle+0x2d8>
 8001468:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800146c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001476:	4a93      	ldr	r2, [pc, #588]	@ (80016c4 <Controle+0x2f4>)
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4413      	add	r3, r2
 800147c:	edc3 7a00 	vstr	s15, [r3]
			q2[n] = Kd[n]/0.01;
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	4a8d      	ldr	r2, [pc, #564]	@ (80016b8 <Controle+0x2e8>)
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	4413      	add	r3, r2
 8001488:	edd3 7a00 	vldr	s15, [r3]
 800148c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001490:	ed9f 5b85 	vldr	d5, [pc, #532]	@ 80016a8 <Controle+0x2d8>
 8001494:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800149e:	4a8a      	ldr	r2, [pc, #552]	@ (80016c8 <Controle+0x2f8>)
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	edc3 7a00 	vstr	s15, [r3]
		}
		//Calculo de erro
		error[n] =ref[n] -  speed[n];
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	4a88      	ldr	r2, [pc, #544]	@ (80016cc <Controle+0x2fc>)
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	ed93 7a00 	vldr	s14, [r3]
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	4a86      	ldr	r2, [pc, #536]	@ (80016d0 <Controle+0x300>)
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	edd3 7a00 	vldr	s15, [r3]
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014c6:	4a83      	ldr	r2, [pc, #524]	@ (80016d4 <Controle+0x304>)
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	edc3 7a00 	vstr	s15, [r3]
		//Variação da ação de controle para esta iteração
		//deltaU[n] = Kc*(error[n]- preverror[n]) + error[n]*Ki -Kd*(speed[n]-2*prevspeed[n] + prevspeed2[n]);
		u[n] = u_k1[n] + q0[n]*error[n] +q1[n]*preverror[n] +q2[n]*preverror2[n];
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	4a81      	ldr	r2, [pc, #516]	@ (80016d8 <Controle+0x308>)
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4413      	add	r3, r2
 80014d8:	ed93 7a00 	vldr	s14, [r3]
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	4a78      	ldr	r2, [pc, #480]	@ (80016c0 <Controle+0x2f0>)
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	edd3 6a00 	vldr	s13, [r3]
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	4a7a      	ldr	r2, [pc, #488]	@ (80016d4 <Controle+0x304>)
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	edd3 7a00 	vldr	s15, [r3]
 80014f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	4a71      	ldr	r2, [pc, #452]	@ (80016c4 <Controle+0x2f4>)
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	edd3 6a00 	vldr	s13, [r3]
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	4a74      	ldr	r2, [pc, #464]	@ (80016dc <Controle+0x30c>)
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	edd3 7a00 	vldr	s15, [r3]
 8001514:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001518:	ee37 7a27 	vadd.f32	s14, s14, s15
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	4a6a      	ldr	r2, [pc, #424]	@ (80016c8 <Controle+0x2f8>)
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	edd3 6a00 	vldr	s13, [r3]
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	4a6d      	ldr	r2, [pc, #436]	@ (80016e0 <Controle+0x310>)
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	edd3 7a00 	vldr	s15, [r3]
 8001534:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800153e:	4a69      	ldr	r2, [pc, #420]	@ (80016e4 <Controle+0x314>)
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	edc3 7a00 	vstr	s15, [r3]
		//Ação de controle
		//uM[n] = uM[n] + deltaU[n];

		//Saturado para evitar que a ação de controle ultrapasse o limite
		if( u[n] < -1023){
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	4a66      	ldr	r2, [pc, #408]	@ (80016e4 <Controle+0x314>)
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	edd3 7a00 	vldr	s15, [r3]
 8001554:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 80016e8 <Controle+0x318>
 8001558:	eef4 7ac7 	vcmpe.f32	s15, s14
 800155c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001560:	d505      	bpl.n	800156e <Controle+0x19e>
			u[n]= -1023;
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	4a5f      	ldr	r2, [pc, #380]	@ (80016e4 <Controle+0x314>)
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	4a60      	ldr	r2, [pc, #384]	@ (80016ec <Controle+0x31c>)
 800156c:	601a      	str	r2, [r3, #0]
		}
		if(u[n]>1023){
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	4a5c      	ldr	r2, [pc, #368]	@ (80016e4 <Controle+0x314>)
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	edd3 7a00 	vldr	s15, [r3]
 800157a:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 80016f0 <Controle+0x320>
 800157e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001586:	dd05      	ble.n	8001594 <Controle+0x1c4>
			u[n]= 1023;
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	4a56      	ldr	r2, [pc, #344]	@ (80016e4 <Controle+0x314>)
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	4a58      	ldr	r2, [pc, #352]	@ (80016f4 <Controle+0x324>)
 8001592:	601a      	str	r2, [r3, #0]
		}
		//Mapeamento da variavel de ação de controle no alcançe dado
		if(ref[n]==0){
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	4a4d      	ldr	r2, [pc, #308]	@ (80016cc <Controle+0x2fc>)
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4413      	add	r3, r2
 800159c:	edd3 7a00 	vldr	s15, [r3]
 80015a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a8:	d10c      	bne.n	80015c4 <Controle+0x1f4>
			D[n]=0;
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	4a52      	ldr	r2, [pc, #328]	@ (80016f8 <Controle+0x328>)
 80015ae:	2100      	movs	r1, #0
 80015b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			u[n] = 0;
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	4a4b      	ldr	r2, [pc, #300]	@ (80016e4 <Controle+0x314>)
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	f04f 0200 	mov.w	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	e042      	b.n	800164a <Controle+0x27a>
		}else if(u[n]>=0 ){
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	4a47      	ldr	r2, [pc, #284]	@ (80016e4 <Controle+0x314>)
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	edd3 7a00 	vldr	s15, [r3]
 80015d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d8:	db16      	blt.n	8001608 <Controle+0x238>
			D[n] = map(u[n],0,1023,0,1023);
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	4a41      	ldr	r2, [pc, #260]	@ (80016e4 <Controle+0x314>)
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	edd3 7a00 	vldr	s15, [r3]
 80015e6:	79fc      	ldrb	r4, [r7, #7]
 80015e8:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80015ec:	2200      	movs	r2, #0
 80015ee:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80015f2:	2000      	movs	r0, #0
 80015f4:	eeb0 0a67 	vmov.f32	s0, s15
 80015f8:	f7ff feb2 	bl	8001360 <map>
 80015fc:	4603      	mov	r3, r0
 80015fe:	461a      	mov	r2, r3
 8001600:	4b3d      	ldr	r3, [pc, #244]	@ (80016f8 <Controle+0x328>)
 8001602:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8001606:	e020      	b.n	800164a <Controle+0x27a>

		}else if(u[n]<0){
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	4a36      	ldr	r2, [pc, #216]	@ (80016e4 <Controle+0x314>)
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4413      	add	r3, r2
 8001610:	edd3 7a00 	vldr	s15, [r3]
 8001614:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161c:	d515      	bpl.n	800164a <Controle+0x27a>
			D[n]= map(u[n],-1023,0,2047,1024);
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	4a30      	ldr	r2, [pc, #192]	@ (80016e4 <Controle+0x314>)
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	edd3 7a00 	vldr	s15, [r3]
 800162a:	79fc      	ldrb	r4, [r7, #7]
 800162c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001630:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001634:	2100      	movs	r1, #0
 8001636:	4831      	ldr	r0, [pc, #196]	@ (80016fc <Controle+0x32c>)
 8001638:	eeb0 0a67 	vmov.f32	s0, s15
 800163c:	f7ff fe90 	bl	8001360 <map>
 8001640:	4603      	mov	r3, r0
 8001642:	461a      	mov	r2, r3
 8001644:	4b2c      	ldr	r3, [pc, #176]	@ (80016f8 <Controle+0x328>)
 8001646:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		}
		u_k1[n] = u[n];
 800164a:	79fa      	ldrb	r2, [r7, #7]
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	4925      	ldr	r1, [pc, #148]	@ (80016e4 <Controle+0x314>)
 8001650:	0092      	lsls	r2, r2, #2
 8001652:	440a      	add	r2, r1
 8001654:	6812      	ldr	r2, [r2, #0]
 8001656:	4920      	ldr	r1, [pc, #128]	@ (80016d8 <Controle+0x308>)
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	440b      	add	r3, r1
 800165c:	601a      	str	r2, [r3, #0]

	//Logica para salvar o erro e a velocidade anterior
	cont = cont +1;
 800165e:	4b28      	ldr	r3, [pc, #160]	@ (8001700 <Controle+0x330>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	3301      	adds	r3, #1
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4b26      	ldr	r3, [pc, #152]	@ (8001700 <Controle+0x330>)
 8001668:	701a      	strb	r2, [r3, #0]
	if(cont == 1){
 800166a:	4b25      	ldr	r3, [pc, #148]	@ (8001700 <Controle+0x330>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d113      	bne.n	800169a <Controle+0x2ca>
		for(uint8_t n=0;n<4;n++){
 8001672:	2300      	movs	r3, #0
 8001674:	71bb      	strb	r3, [r7, #6]
 8001676:	e00c      	b.n	8001692 <Controle+0x2c2>
			//prevspeed[n] = speed[n];
			preverror[n] = error[n];
 8001678:	79ba      	ldrb	r2, [r7, #6]
 800167a:	79bb      	ldrb	r3, [r7, #6]
 800167c:	4915      	ldr	r1, [pc, #84]	@ (80016d4 <Controle+0x304>)
 800167e:	0092      	lsls	r2, r2, #2
 8001680:	440a      	add	r2, r1
 8001682:	6812      	ldr	r2, [r2, #0]
 8001684:	4915      	ldr	r1, [pc, #84]	@ (80016dc <Controle+0x30c>)
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	440b      	add	r3, r1
 800168a:	601a      	str	r2, [r3, #0]
		for(uint8_t n=0;n<4;n++){
 800168c:	79bb      	ldrb	r3, [r7, #6]
 800168e:	3301      	adds	r3, #1
 8001690:	71bb      	strb	r3, [r7, #6]
 8001692:	79bb      	ldrb	r3, [r7, #6]
 8001694:	2b03      	cmp	r3, #3
 8001696:	d9ef      	bls.n	8001678 <Controle+0x2a8>
 8001698:	e051      	b.n	800173e <Controle+0x36e>
		}
	} else if(cont ==2){
 800169a:	4b19      	ldr	r3, [pc, #100]	@ (8001700 <Controle+0x330>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d14d      	bne.n	800173e <Controle+0x36e>
		for(uint8_t n=0;n<4;n++){
 80016a2:	2300      	movs	r3, #0
 80016a4:	717b      	strb	r3, [r7, #5]
 80016a6:	e044      	b.n	8001732 <Controle+0x362>
 80016a8:	47ae147b 	.word	0x47ae147b
 80016ac:	3f847ae1 	.word	0x3f847ae1
 80016b0:	24000598 	.word	0x24000598
 80016b4:	08015094 	.word	0x08015094
 80016b8:	080150b4 	.word	0x080150b4
 80016bc:	080150a4 	.word	0x080150a4
 80016c0:	24000568 	.word	0x24000568
 80016c4:	24000578 	.word	0x24000578
 80016c8:	24000588 	.word	0x24000588
 80016cc:	240004cc 	.word	0x240004cc
 80016d0:	24000518 	.word	0x24000518
 80016d4:	240004dc 	.word	0x240004dc
 80016d8:	24000538 	.word	0x24000538
 80016dc:	24000548 	.word	0x24000548
 80016e0:	24000558 	.word	0x24000558
 80016e4:	24000528 	.word	0x24000528
 80016e8:	c47fc000 	.word	0xc47fc000
 80016ec:	c47fc000 	.word	0xc47fc000
 80016f0:	447fc000 	.word	0x447fc000
 80016f4:	447fc000 	.word	0x447fc000
 80016f8:	240004f0 	.word	0x240004f0
 80016fc:	fffffc01 	.word	0xfffffc01
 8001700:	240004ec 	.word	0x240004ec
			//prevspeed2[n] = prevspeed[n];
			preverror2[n] = preverror[n];
 8001704:	797a      	ldrb	r2, [r7, #5]
 8001706:	797b      	ldrb	r3, [r7, #5]
 8001708:	4914      	ldr	r1, [pc, #80]	@ (800175c <Controle+0x38c>)
 800170a:	0092      	lsls	r2, r2, #2
 800170c:	440a      	add	r2, r1
 800170e:	6812      	ldr	r2, [r2, #0]
 8001710:	4913      	ldr	r1, [pc, #76]	@ (8001760 <Controle+0x390>)
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	440b      	add	r3, r1
 8001716:	601a      	str	r2, [r3, #0]
			//prevspeed[n] = speed[n];
			preverror[n] = error[n];
 8001718:	797a      	ldrb	r2, [r7, #5]
 800171a:	797b      	ldrb	r3, [r7, #5]
 800171c:	4911      	ldr	r1, [pc, #68]	@ (8001764 <Controle+0x394>)
 800171e:	0092      	lsls	r2, r2, #2
 8001720:	440a      	add	r2, r1
 8001722:	6812      	ldr	r2, [r2, #0]
 8001724:	490d      	ldr	r1, [pc, #52]	@ (800175c <Controle+0x38c>)
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	601a      	str	r2, [r3, #0]
		for(uint8_t n=0;n<4;n++){
 800172c:	797b      	ldrb	r3, [r7, #5]
 800172e:	3301      	adds	r3, #1
 8001730:	717b      	strb	r3, [r7, #5]
 8001732:	797b      	ldrb	r3, [r7, #5]
 8001734:	2b03      	cmp	r3, #3
 8001736:	d9e5      	bls.n	8001704 <Controle+0x334>
		}
		cont = 1;
 8001738:	4b0b      	ldr	r3, [pc, #44]	@ (8001768 <Controle+0x398>)
 800173a:	2201      	movs	r2, #1
 800173c:	701a      	strb	r2, [r3, #0]
	for(uint8_t n=0;n<4;n++){
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	3301      	adds	r3, #1
 8001742:	71fb      	strb	r3, [r7, #7]
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	2b03      	cmp	r3, #3
 8001748:	f67f ae48 	bls.w	80013dc <Controle+0xc>
	}
}
	once=1;
 800174c:	4b07      	ldr	r3, [pc, #28]	@ (800176c <Controle+0x39c>)
 800174e:	2201      	movs	r2, #1
 8001750:	701a      	strb	r2, [r3, #0]
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	bd90      	pop	{r4, r7, pc}
 800175a:	bf00      	nop
 800175c:	24000548 	.word	0x24000548
 8001760:	24000558 	.word	0x24000558
 8001764:	240004dc 	.word	0x240004dc
 8001768:	240004ec 	.word	0x240004ec
 800176c:	24000598 	.word	0x24000598

08001770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <NMI_Handler+0x4>

08001778 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <HardFault_Handler+0x4>

08001780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <MemManage_Handler+0x4>

08001788 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800178c:	bf00      	nop
 800178e:	e7fd      	b.n	800178c <BusFault_Handler+0x4>

08001790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001794:	bf00      	nop
 8001796:	e7fd      	b.n	8001794 <UsageFault_Handler+0x4>

08001798 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017c6:	f001 f96b 	bl	8002aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 80017d4:	4802      	ldr	r0, [pc, #8]	@ (80017e0 <DMA1_Stream1_IRQHandler+0x10>)
 80017d6:	f003 fbe3 	bl	8004fa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	2400083c 	.word	0x2400083c

080017e4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 80017e8:	4802      	ldr	r0, [pc, #8]	@ (80017f4 <DMA1_Stream3_IRQHandler+0x10>)
 80017ea:	f003 fbd9 	bl	8004fa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	240008b4 	.word	0x240008b4

080017f8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 80017fc:	4802      	ldr	r0, [pc, #8]	@ (8001808 <DMA1_Stream4_IRQHandler+0x10>)
 80017fe:	f003 fbcf 	bl	8004fa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	2400092c 	.word	0x2400092c

0800180c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001810:	4802      	ldr	r0, [pc, #8]	@ (800181c <DMA1_Stream5_IRQHandler+0x10>)
 8001812:	f003 fbc5 	bl	8004fa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	240007c4 	.word	0x240007c4

08001820 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001824:	4802      	ldr	r0, [pc, #8]	@ (8001830 <TIM4_IRQHandler+0x10>)
 8001826:	f00a fcc5 	bl	800c1b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	24000694 	.word	0x24000694

08001834 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001838:	2000      	movs	r0, #0
 800183a:	f000 ffc3 	bl	80027c4 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001848:	4802      	ldr	r0, [pc, #8]	@ (8001854 <OTG_FS_IRQHandler+0x10>)
 800184a:	f005 fa7e 	bl	8006d4a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	24001f28 	.word	0x24001f28

08001858 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 800185e:	484c      	ldr	r0, [pc, #304]	@ (8001990 <TIM15_IRQHandler+0x138>)
 8001860:	f00a fca8 	bl	800c1b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */
  //
  //Enc[0] = TIM4->CNT;
  Enc[0] = TIM1->CNT;
 8001864:	4b4b      	ldr	r3, [pc, #300]	@ (8001994 <TIM15_IRQHandler+0x13c>)
 8001866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001868:	4a4b      	ldr	r2, [pc, #300]	@ (8001998 <TIM15_IRQHandler+0x140>)
 800186a:	6013      	str	r3, [r2, #0]
  //Enc[1] = TIM1->CNT;
  Enc[2] = TIM3->CNT;
 800186c:	4b4b      	ldr	r3, [pc, #300]	@ (800199c <TIM15_IRQHandler+0x144>)
 800186e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001870:	4a49      	ldr	r2, [pc, #292]	@ (8001998 <TIM15_IRQHandler+0x140>)
 8001872:	6093      	str	r3, [r2, #8]
  Enc[3] = TIM4->CNT;
 8001874:	4b4a      	ldr	r3, [pc, #296]	@ (80019a0 <TIM15_IRQHandler+0x148>)
 8001876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001878:	4a47      	ldr	r2, [pc, #284]	@ (8001998 <TIM15_IRQHandler+0x140>)
 800187a:	60d3      	str	r3, [r2, #12]
  Enc[1] = TIM8->CNT;
 800187c:	4b49      	ldr	r3, [pc, #292]	@ (80019a4 <TIM15_IRQHandler+0x14c>)
 800187e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001880:	4a45      	ldr	r2, [pc, #276]	@ (8001998 <TIM15_IRQHandler+0x140>)
 8001882:	6053      	str	r3, [r2, #4]

  TIM4->CNT = 0;
 8001884:	4b46      	ldr	r3, [pc, #280]	@ (80019a0 <TIM15_IRQHandler+0x148>)
 8001886:	2200      	movs	r2, #0
 8001888:	625a      	str	r2, [r3, #36]	@ 0x24
  TIM1->CNT = 0;
 800188a:	4b42      	ldr	r3, [pc, #264]	@ (8001994 <TIM15_IRQHandler+0x13c>)
 800188c:	2200      	movs	r2, #0
 800188e:	625a      	str	r2, [r3, #36]	@ 0x24
  TIM8->CNT = 0;
 8001890:	4b44      	ldr	r3, [pc, #272]	@ (80019a4 <TIM15_IRQHandler+0x14c>)
 8001892:	2200      	movs	r2, #0
 8001894:	625a      	str	r2, [r3, #36]	@ 0x24
  TIM3->CNT = 0;
 8001896:	4b41      	ldr	r3, [pc, #260]	@ (800199c <TIM15_IRQHandler+0x144>)
 8001898:	2200      	movs	r2, #0
 800189a:	625a      	str	r2, [r3, #36]	@ 0x24
  static float last_vel[4] ={0,0,0,0};

  for(uint8_t i=0;i<4;i++){
 800189c:	2300      	movs	r3, #0
 800189e:	71fb      	strb	r3, [r7, #7]
 80018a0:	e061      	b.n	8001966 <TIM15_IRQHandler+0x10e>
	  vel[i] = Enc[i];
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	4a3c      	ldr	r2, [pc, #240]	@ (8001998 <TIM15_IRQHandler+0x140>)
 80018a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	4611      	mov	r1, r2
 80018ae:	4a3e      	ldr	r2, [pc, #248]	@ (80019a8 <TIM15_IRQHandler+0x150>)
 80018b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  if(vel[i]>60000){
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	4a3c      	ldr	r2, [pc, #240]	@ (80019a8 <TIM15_IRQHandler+0x150>)
 80018b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018bc:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80018c0:	4293      	cmp	r3, r2
 80018c2:	dd09      	ble.n	80018d8 <TIM15_IRQHandler+0x80>
			  vel[i] = vel[i] - 65355;
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	4a38      	ldr	r2, [pc, #224]	@ (80019a8 <TIM15_IRQHandler+0x150>)
 80018c8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80018cc:	79fa      	ldrb	r2, [r7, #7]
 80018ce:	4b37      	ldr	r3, [pc, #220]	@ (80019ac <TIM15_IRQHandler+0x154>)
 80018d0:	440b      	add	r3, r1
 80018d2:	4935      	ldr	r1, [pc, #212]	@ (80019a8 <TIM15_IRQHandler+0x150>)
 80018d4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	  }
	  speed[i] = -1*vel[i]/(163.84);
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	4a33      	ldr	r2, [pc, #204]	@ (80019a8 <TIM15_IRQHandler+0x150>)
 80018dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e0:	425b      	negs	r3, r3
 80018e2:	ee07 3a90 	vmov	s15, r3
 80018e6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80018ea:	ed9f 5b27 	vldr	d5, [pc, #156]	@ 8001988 <TIM15_IRQHandler+0x130>
 80018ee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80018f8:	4a2d      	ldr	r2, [pc, #180]	@ (80019b0 <TIM15_IRQHandler+0x158>)
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	edc3 7a00 	vstr	s15, [r3]
	  if(speed[i]>10 || speed[i]<-10){
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	4a2a      	ldr	r2, [pc, #168]	@ (80019b0 <TIM15_IRQHandler+0x158>)
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	edd3 7a00 	vldr	s15, [r3]
 800190e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001912:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800191a:	dc0c      	bgt.n	8001936 <TIM15_IRQHandler+0xde>
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	4a24      	ldr	r2, [pc, #144]	@ (80019b0 <TIM15_IRQHandler+0x158>)
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	edd3 7a00 	vldr	s15, [r3]
 8001928:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 800192c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001934:	d50a      	bpl.n	800194c <TIM15_IRQHandler+0xf4>
		  speed[i] = last_vel[i];
 8001936:	79fa      	ldrb	r2, [r7, #7]
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	491e      	ldr	r1, [pc, #120]	@ (80019b4 <TIM15_IRQHandler+0x15c>)
 800193c:	0092      	lsls	r2, r2, #2
 800193e:	440a      	add	r2, r1
 8001940:	6812      	ldr	r2, [r2, #0]
 8001942:	491b      	ldr	r1, [pc, #108]	@ (80019b0 <TIM15_IRQHandler+0x158>)
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	440b      	add	r3, r1
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	e009      	b.n	8001960 <TIM15_IRQHandler+0x108>
	  } else{
		  last_vel[i] = speed[i];
 800194c:	79fa      	ldrb	r2, [r7, #7]
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	4917      	ldr	r1, [pc, #92]	@ (80019b0 <TIM15_IRQHandler+0x158>)
 8001952:	0092      	lsls	r2, r2, #2
 8001954:	440a      	add	r2, r1
 8001956:	6812      	ldr	r2, [r2, #0]
 8001958:	4916      	ldr	r1, [pc, #88]	@ (80019b4 <TIM15_IRQHandler+0x15c>)
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	440b      	add	r3, r1
 800195e:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0;i<4;i++){
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	3301      	adds	r3, #1
 8001964:	71fb      	strb	r3, [r7, #7]
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	2b03      	cmp	r3, #3
 800196a:	d99a      	bls.n	80018a2 <TIM15_IRQHandler+0x4a>
	  }
  }


  //velocidade = speed[0];
  Controle();
 800196c:	f7ff fd30 	bl	80013d0 <Controle>

  dshot_write(D);
 8001970:	4811      	ldr	r0, [pc, #68]	@ (80019b8 <TIM15_IRQHandler+0x160>)
 8001972:	f7ff f824 	bl	80009be <dshot_write>

  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8001976:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800197a:	4810      	ldr	r0, [pc, #64]	@ (80019bc <TIM15_IRQHandler+0x164>)
 800197c:	f005 f85b 	bl	8006a36 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM15_IRQn 1 */
}
 8001980:	bf00      	nop
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	47ae147b 	.word	0x47ae147b
 800198c:	40647ae1 	.word	0x40647ae1
 8001990:	24000778 	.word	0x24000778
 8001994:	40010000 	.word	0x40010000
 8001998:	240004f8 	.word	0x240004f8
 800199c:	40000400 	.word	0x40000400
 80019a0:	40000800 	.word	0x40000800
 80019a4:	40010400 	.word	0x40010400
 80019a8:	24000508 	.word	0x24000508
 80019ac:	ffff00b5 	.word	0xffff00b5
 80019b0:	24000518 	.word	0x24000518
 80019b4:	2400059c 	.word	0x2400059c
 80019b8:	240004f0 	.word	0x240004f0
 80019bc:	58020400 	.word	0x58020400

080019c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return 1;
 80019c4:	2301      	movs	r3, #1
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <_kill>:

int _kill(int pid, int sig)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019da:	f011 fad1 	bl	8012f80 <__errno>
 80019de:	4603      	mov	r3, r0
 80019e0:	2216      	movs	r2, #22
 80019e2:	601a      	str	r2, [r3, #0]
  return -1;
 80019e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <_exit>:

void _exit (int status)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019f8:	f04f 31ff 	mov.w	r1, #4294967295
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff ffe7 	bl	80019d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a02:	bf00      	nop
 8001a04:	e7fd      	b.n	8001a02 <_exit+0x12>

08001a06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b086      	sub	sp, #24
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	60f8      	str	r0, [r7, #12]
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
 8001a16:	e00a      	b.n	8001a2e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a18:	f3af 8000 	nop.w
 8001a1c:	4601      	mov	r1, r0
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	1c5a      	adds	r2, r3, #1
 8001a22:	60ba      	str	r2, [r7, #8]
 8001a24:	b2ca      	uxtb	r2, r1
 8001a26:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	dbf0      	blt.n	8001a18 <_read+0x12>
  }

  return len;
 8001a36:	687b      	ldr	r3, [r7, #4]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	e009      	b.n	8001a66 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	60ba      	str	r2, [r7, #8]
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f000 ff32 	bl	80028c4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	3301      	adds	r3, #1
 8001a64:	617b      	str	r3, [r7, #20]
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	dbf1      	blt.n	8001a52 <_write+0x12>
  }
  return len;
 8001a6e:	687b      	ldr	r3, [r7, #4]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <_close>:

int _close(int file)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001aa0:	605a      	str	r2, [r3, #4]
  return 0;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <_isatty>:

int _isatty(int file)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ab8:	2301      	movs	r3, #1
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b085      	sub	sp, #20
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	60f8      	str	r0, [r7, #12]
 8001ace:	60b9      	str	r1, [r7, #8]
 8001ad0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae8:	4a14      	ldr	r2, [pc, #80]	@ (8001b3c <_sbrk+0x5c>)
 8001aea:	4b15      	ldr	r3, [pc, #84]	@ (8001b40 <_sbrk+0x60>)
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001af4:	4b13      	ldr	r3, [pc, #76]	@ (8001b44 <_sbrk+0x64>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d102      	bne.n	8001b02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001afc:	4b11      	ldr	r3, [pc, #68]	@ (8001b44 <_sbrk+0x64>)
 8001afe:	4a12      	ldr	r2, [pc, #72]	@ (8001b48 <_sbrk+0x68>)
 8001b00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b02:	4b10      	ldr	r3, [pc, #64]	@ (8001b44 <_sbrk+0x64>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d207      	bcs.n	8001b20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b10:	f011 fa36 	bl	8012f80 <__errno>
 8001b14:	4603      	mov	r3, r0
 8001b16:	220c      	movs	r2, #12
 8001b18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1e:	e009      	b.n	8001b34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b20:	4b08      	ldr	r3, [pc, #32]	@ (8001b44 <_sbrk+0x64>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b26:	4b07      	ldr	r3, [pc, #28]	@ (8001b44 <_sbrk+0x64>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	4a05      	ldr	r2, [pc, #20]	@ (8001b44 <_sbrk+0x64>)
 8001b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b32:	68fb      	ldr	r3, [r7, #12]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	24080000 	.word	0x24080000
 8001b40:	00000400 	.word	0x00000400
 8001b44:	240005ac 	.word	0x240005ac
 8001b48:	24002778 	.word	0x24002778

08001b4c <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim5_ch4;
DMA_HandleTypeDef hdma_tim5_ch2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08c      	sub	sp, #48	@ 0x30
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b52:	f107 030c 	add.w	r3, r7, #12
 8001b56:	2224      	movs	r2, #36	@ 0x24
 8001b58:	2100      	movs	r1, #0
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f011 f9bd 	bl	8012eda <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b60:	463b      	mov	r3, r7
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	605a      	str	r2, [r3, #4]
 8001b68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b6a:	4b23      	ldr	r3, [pc, #140]	@ (8001bf8 <MX_TIM1_Init+0xac>)
 8001b6c:	4a23      	ldr	r2, [pc, #140]	@ (8001bfc <MX_TIM1_Init+0xb0>)
 8001b6e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b70:	4b21      	ldr	r3, [pc, #132]	@ (8001bf8 <MX_TIM1_Init+0xac>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b76:	4b20      	ldr	r3, [pc, #128]	@ (8001bf8 <MX_TIM1_Init+0xac>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001b7c:	4b1e      	ldr	r3, [pc, #120]	@ (8001bf8 <MX_TIM1_Init+0xac>)
 8001b7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b82:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b84:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf8 <MX_TIM1_Init+0xac>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf8 <MX_TIM1_Init+0xac>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b90:	4b19      	ldr	r3, [pc, #100]	@ (8001bf8 <MX_TIM1_Init+0xac>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b96:	2303      	movs	r3, #3
 8001b98:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001baa:	2302      	movs	r3, #2
 8001bac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001bba:	f107 030c 	add.w	r3, r7, #12
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	480d      	ldr	r0, [pc, #52]	@ (8001bf8 <MX_TIM1_Init+0xac>)
 8001bc2:	f00a f9a3 	bl	800bf0c <HAL_TIM_Encoder_Init>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001bcc:	f7ff fba7 	bl	800131e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bdc:	463b      	mov	r3, r7
 8001bde:	4619      	mov	r1, r3
 8001be0:	4805      	ldr	r0, [pc, #20]	@ (8001bf8 <MX_TIM1_Init+0xac>)
 8001be2:	f00b fa63 	bl	800d0ac <HAL_TIMEx_MasterConfigSynchronization>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001bec:	f7ff fb97 	bl	800131e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001bf0:	bf00      	nop
 8001bf2:	3730      	adds	r7, #48	@ 0x30
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	240005b0 	.word	0x240005b0
 8001bfc:	40010000 	.word	0x40010000

08001c00 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08a      	sub	sp, #40	@ 0x28
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c06:	f107 031c 	add.w	r3, r7, #28
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	605a      	str	r2, [r3, #4]
 8001c10:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c12:	463b      	mov	r3, r7
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
 8001c20:	615a      	str	r2, [r3, #20]
 8001c22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c24:	4b27      	ldr	r3, [pc, #156]	@ (8001cc4 <MX_TIM2_Init+0xc4>)
 8001c26:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c2c:	4b25      	ldr	r3, [pc, #148]	@ (8001cc4 <MX_TIM2_Init+0xc4>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c32:	4b24      	ldr	r3, [pc, #144]	@ (8001cc4 <MX_TIM2_Init+0xc4>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001c38:	4b22      	ldr	r3, [pc, #136]	@ (8001cc4 <MX_TIM2_Init+0xc4>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c3e:	4b21      	ldr	r3, [pc, #132]	@ (8001cc4 <MX_TIM2_Init+0xc4>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c44:	4b1f      	ldr	r3, [pc, #124]	@ (8001cc4 <MX_TIM2_Init+0xc4>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c4a:	481e      	ldr	r0, [pc, #120]	@ (8001cc4 <MX_TIM2_Init+0xc4>)
 8001c4c:	f009 fff8 	bl	800bc40 <HAL_TIM_PWM_Init>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001c56:	f7ff fb62 	bl	800131e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c62:	f107 031c 	add.w	r3, r7, #28
 8001c66:	4619      	mov	r1, r3
 8001c68:	4816      	ldr	r0, [pc, #88]	@ (8001cc4 <MX_TIM2_Init+0xc4>)
 8001c6a:	f00b fa1f 	bl	800d0ac <HAL_TIMEx_MasterConfigSynchronization>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001c74:	f7ff fb53 	bl	800131e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c78:	2360      	movs	r3, #96	@ 0x60
 8001c7a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c84:	2300      	movs	r3, #0
 8001c86:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c88:	463b      	mov	r3, r7
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	480d      	ldr	r0, [pc, #52]	@ (8001cc4 <MX_TIM2_Init+0xc4>)
 8001c90:	f00a fb98 	bl	800c3c4 <HAL_TIM_PWM_ConfigChannel>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001c9a:	f7ff fb40 	bl	800131e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c9e:	463b      	mov	r3, r7
 8001ca0:	2208      	movs	r2, #8
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4807      	ldr	r0, [pc, #28]	@ (8001cc4 <MX_TIM2_Init+0xc4>)
 8001ca6:	f00a fb8d 	bl	800c3c4 <HAL_TIM_PWM_ConfigChannel>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001cb0:	f7ff fb35 	bl	800131e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001cb4:	4803      	ldr	r0, [pc, #12]	@ (8001cc4 <MX_TIM2_Init+0xc4>)
 8001cb6:	f000 fc13 	bl	80024e0 <HAL_TIM_MspPostInit>

}
 8001cba:	bf00      	nop
 8001cbc:	3728      	adds	r7, #40	@ 0x28
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	240005fc 	.word	0x240005fc

08001cc8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08c      	sub	sp, #48	@ 0x30
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cce:	f107 030c 	add.w	r3, r7, #12
 8001cd2:	2224      	movs	r2, #36	@ 0x24
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f011 f8ff 	bl	8012eda <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cdc:	463b      	mov	r3, r7
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	605a      	str	r2, [r3, #4]
 8001ce4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ce6:	4b21      	ldr	r3, [pc, #132]	@ (8001d6c <MX_TIM3_Init+0xa4>)
 8001ce8:	4a21      	ldr	r2, [pc, #132]	@ (8001d70 <MX_TIM3_Init+0xa8>)
 8001cea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001cec:	4b1f      	ldr	r3, [pc, #124]	@ (8001d6c <MX_TIM3_Init+0xa4>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d6c <MX_TIM3_Init+0xa4>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001cf8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d6c <MX_TIM3_Init+0xa4>)
 8001cfa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cfe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d00:	4b1a      	ldr	r3, [pc, #104]	@ (8001d6c <MX_TIM3_Init+0xa4>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d06:	4b19      	ldr	r3, [pc, #100]	@ (8001d6c <MX_TIM3_Init+0xa4>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001d10:	2302      	movs	r3, #2
 8001d12:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d14:	2301      	movs	r3, #1
 8001d16:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001d20:	2302      	movs	r3, #2
 8001d22:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d24:	2301      	movs	r3, #1
 8001d26:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001d30:	f107 030c 	add.w	r3, r7, #12
 8001d34:	4619      	mov	r1, r3
 8001d36:	480d      	ldr	r0, [pc, #52]	@ (8001d6c <MX_TIM3_Init+0xa4>)
 8001d38:	f00a f8e8 	bl	800bf0c <HAL_TIM_Encoder_Init>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001d42:	f7ff faec 	bl	800131e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d46:	2300      	movs	r3, #0
 8001d48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d4e:	463b      	mov	r3, r7
 8001d50:	4619      	mov	r1, r3
 8001d52:	4806      	ldr	r0, [pc, #24]	@ (8001d6c <MX_TIM3_Init+0xa4>)
 8001d54:	f00b f9aa 	bl	800d0ac <HAL_TIMEx_MasterConfigSynchronization>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001d5e:	f7ff fade 	bl	800131e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d62:	bf00      	nop
 8001d64:	3730      	adds	r7, #48	@ 0x30
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	24000648 	.word	0x24000648
 8001d70:	40000400 	.word	0x40000400

08001d74 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08c      	sub	sp, #48	@ 0x30
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d7a:	f107 030c 	add.w	r3, r7, #12
 8001d7e:	2224      	movs	r2, #36	@ 0x24
 8001d80:	2100      	movs	r1, #0
 8001d82:	4618      	mov	r0, r3
 8001d84:	f011 f8a9 	bl	8012eda <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d88:	463b      	mov	r3, r7
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	605a      	str	r2, [r3, #4]
 8001d90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d92:	4b21      	ldr	r3, [pc, #132]	@ (8001e18 <MX_TIM4_Init+0xa4>)
 8001d94:	4a21      	ldr	r2, [pc, #132]	@ (8001e1c <MX_TIM4_Init+0xa8>)
 8001d96:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d98:	4b1f      	ldr	r3, [pc, #124]	@ (8001e18 <MX_TIM4_Init+0xa4>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001e18 <MX_TIM4_Init+0xa4>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001da4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e18 <MX_TIM4_Init+0xa4>)
 8001da6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001daa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dac:	4b1a      	ldr	r3, [pc, #104]	@ (8001e18 <MX_TIM4_Init+0xa4>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db2:	4b19      	ldr	r3, [pc, #100]	@ (8001e18 <MX_TIM4_Init+0xa4>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001db8:	2303      	movs	r3, #3
 8001dba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001ddc:	f107 030c 	add.w	r3, r7, #12
 8001de0:	4619      	mov	r1, r3
 8001de2:	480d      	ldr	r0, [pc, #52]	@ (8001e18 <MX_TIM4_Init+0xa4>)
 8001de4:	f00a f892 	bl	800bf0c <HAL_TIM_Encoder_Init>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001dee:	f7ff fa96 	bl	800131e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df2:	2300      	movs	r3, #0
 8001df4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df6:	2300      	movs	r3, #0
 8001df8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001dfa:	463b      	mov	r3, r7
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4806      	ldr	r0, [pc, #24]	@ (8001e18 <MX_TIM4_Init+0xa4>)
 8001e00:	f00b f954 	bl	800d0ac <HAL_TIMEx_MasterConfigSynchronization>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001e0a:	f7ff fa88 	bl	800131e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001e0e:	bf00      	nop
 8001e10:	3730      	adds	r7, #48	@ 0x30
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	24000694 	.word	0x24000694
 8001e1c:	40000800 	.word	0x40000800

08001e20 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08a      	sub	sp, #40	@ 0x28
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e26:	f107 031c 	add.w	r3, r7, #28
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e32:	463b      	mov	r3, r7
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	611a      	str	r2, [r3, #16]
 8001e40:	615a      	str	r2, [r3, #20]
 8001e42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001e44:	4b26      	ldr	r3, [pc, #152]	@ (8001ee0 <MX_TIM5_Init+0xc0>)
 8001e46:	4a27      	ldr	r2, [pc, #156]	@ (8001ee4 <MX_TIM5_Init+0xc4>)
 8001e48:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001e4a:	4b25      	ldr	r3, [pc, #148]	@ (8001ee0 <MX_TIM5_Init+0xc0>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e50:	4b23      	ldr	r3, [pc, #140]	@ (8001ee0 <MX_TIM5_Init+0xc0>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8001e56:	4b22      	ldr	r3, [pc, #136]	@ (8001ee0 <MX_TIM5_Init+0xc0>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e5c:	4b20      	ldr	r3, [pc, #128]	@ (8001ee0 <MX_TIM5_Init+0xc0>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e62:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee0 <MX_TIM5_Init+0xc0>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001e68:	481d      	ldr	r0, [pc, #116]	@ (8001ee0 <MX_TIM5_Init+0xc0>)
 8001e6a:	f009 fee9 	bl	800bc40 <HAL_TIM_PWM_Init>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001e74:	f7ff fa53 	bl	800131e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e80:	f107 031c 	add.w	r3, r7, #28
 8001e84:	4619      	mov	r1, r3
 8001e86:	4816      	ldr	r0, [pc, #88]	@ (8001ee0 <MX_TIM5_Init+0xc0>)
 8001e88:	f00b f910 	bl	800d0ac <HAL_TIMEx_MasterConfigSynchronization>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001e92:	f7ff fa44 	bl	800131e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e96:	2360      	movs	r3, #96	@ 0x60
 8001e98:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ea6:	463b      	mov	r3, r7
 8001ea8:	2204      	movs	r2, #4
 8001eaa:	4619      	mov	r1, r3
 8001eac:	480c      	ldr	r0, [pc, #48]	@ (8001ee0 <MX_TIM5_Init+0xc0>)
 8001eae:	f00a fa89 	bl	800c3c4 <HAL_TIM_PWM_ConfigChannel>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001eb8:	f7ff fa31 	bl	800131e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ebc:	463b      	mov	r3, r7
 8001ebe:	220c      	movs	r2, #12
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4807      	ldr	r0, [pc, #28]	@ (8001ee0 <MX_TIM5_Init+0xc0>)
 8001ec4:	f00a fa7e 	bl	800c3c4 <HAL_TIM_PWM_ConfigChannel>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001ece:	f7ff fa26 	bl	800131e <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001ed2:	4803      	ldr	r0, [pc, #12]	@ (8001ee0 <MX_TIM5_Init+0xc0>)
 8001ed4:	f000 fb04 	bl	80024e0 <HAL_TIM_MspPostInit>

}
 8001ed8:	bf00      	nop
 8001eda:	3728      	adds	r7, #40	@ 0x28
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	240006e0 	.word	0x240006e0
 8001ee4:	40000c00 	.word	0x40000c00

08001ee8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08c      	sub	sp, #48	@ 0x30
 8001eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001eee:	f107 030c 	add.w	r3, r7, #12
 8001ef2:	2224      	movs	r2, #36	@ 0x24
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f010 ffef 	bl	8012eda <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001efc:	463b      	mov	r3, r7
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	605a      	str	r2, [r3, #4]
 8001f04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001f06:	4b23      	ldr	r3, [pc, #140]	@ (8001f94 <MX_TIM8_Init+0xac>)
 8001f08:	4a23      	ldr	r2, [pc, #140]	@ (8001f98 <MX_TIM8_Init+0xb0>)
 8001f0a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001f0c:	4b21      	ldr	r3, [pc, #132]	@ (8001f94 <MX_TIM8_Init+0xac>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f12:	4b20      	ldr	r3, [pc, #128]	@ (8001f94 <MX_TIM8_Init+0xac>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001f18:	4b1e      	ldr	r3, [pc, #120]	@ (8001f94 <MX_TIM8_Init+0xac>)
 8001f1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f1e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f20:	4b1c      	ldr	r3, [pc, #112]	@ (8001f94 <MX_TIM8_Init+0xac>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001f26:	4b1b      	ldr	r3, [pc, #108]	@ (8001f94 <MX_TIM8_Init+0xac>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f2c:	4b19      	ldr	r3, [pc, #100]	@ (8001f94 <MX_TIM8_Init+0xac>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f32:	2303      	movs	r3, #3
 8001f34:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001f36:	2302      	movs	r3, #2
 8001f38:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001f46:	2302      	movs	r3, #2
 8001f48:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001f56:	f107 030c 	add.w	r3, r7, #12
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	480d      	ldr	r0, [pc, #52]	@ (8001f94 <MX_TIM8_Init+0xac>)
 8001f5e:	f009 ffd5 	bl	800bf0c <HAL_TIM_Encoder_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001f68:	f7ff f9d9 	bl	800131e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f70:	2300      	movs	r3, #0
 8001f72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f74:	2300      	movs	r3, #0
 8001f76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001f78:	463b      	mov	r3, r7
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4805      	ldr	r0, [pc, #20]	@ (8001f94 <MX_TIM8_Init+0xac>)
 8001f7e:	f00b f895 	bl	800d0ac <HAL_TIMEx_MasterConfigSynchronization>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001f88:	f7ff f9c9 	bl	800131e <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001f8c:	bf00      	nop
 8001f8e:	3730      	adds	r7, #48	@ 0x30
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	2400072c 	.word	0x2400072c
 8001f98:	40010400 	.word	0x40010400

08001f9c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b088      	sub	sp, #32
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fa2:	f107 0310 	add.w	r3, r7, #16
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	605a      	str	r2, [r3, #4]
 8001fac:	609a      	str	r2, [r3, #8]
 8001fae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb0:	1d3b      	adds	r3, r7, #4
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	605a      	str	r2, [r3, #4]
 8001fb8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001fba:	4b1f      	ldr	r3, [pc, #124]	@ (8002038 <MX_TIM15_Init+0x9c>)
 8001fbc:	4a1f      	ldr	r2, [pc, #124]	@ (800203c <MX_TIM15_Init+0xa0>)
 8001fbe:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 19999;
 8001fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8002038 <MX_TIM15_Init+0x9c>)
 8001fc2:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001fc6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8002038 <MX_TIM15_Init+0x9c>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 99;
 8001fce:	4b1a      	ldr	r3, [pc, #104]	@ (8002038 <MX_TIM15_Init+0x9c>)
 8001fd0:	2263      	movs	r2, #99	@ 0x63
 8001fd2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd4:	4b18      	ldr	r3, [pc, #96]	@ (8002038 <MX_TIM15_Init+0x9c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001fda:	4b17      	ldr	r3, [pc, #92]	@ (8002038 <MX_TIM15_Init+0x9c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe0:	4b15      	ldr	r3, [pc, #84]	@ (8002038 <MX_TIM15_Init+0x9c>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001fe6:	4814      	ldr	r0, [pc, #80]	@ (8002038 <MX_TIM15_Init+0x9c>)
 8001fe8:	f009 fd5a 	bl	800baa0 <HAL_TIM_Base_Init>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8001ff2:	f7ff f994 	bl	800131e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ff6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ffa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001ffc:	f107 0310 	add.w	r3, r7, #16
 8002000:	4619      	mov	r1, r3
 8002002:	480d      	ldr	r0, [pc, #52]	@ (8002038 <MX_TIM15_Init+0x9c>)
 8002004:	f00a faf2 	bl	800c5ec <HAL_TIM_ConfigClockSource>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 800200e:	f7ff f986 	bl	800131e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002012:	2300      	movs	r3, #0
 8002014:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800201a:	1d3b      	adds	r3, r7, #4
 800201c:	4619      	mov	r1, r3
 800201e:	4806      	ldr	r0, [pc, #24]	@ (8002038 <MX_TIM15_Init+0x9c>)
 8002020:	f00b f844 	bl	800d0ac <HAL_TIMEx_MasterConfigSynchronization>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 800202a:	f7ff f978 	bl	800131e <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800202e:	bf00      	nop
 8002030:	3720      	adds	r7, #32
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	24000778 	.word	0x24000778
 800203c:	40014000 	.word	0x40014000

08002040 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b090      	sub	sp, #64	@ 0x40
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002048:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a6d      	ldr	r2, [pc, #436]	@ (8002214 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d12f      	bne.n	80020c2 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002062:	4b6d      	ldr	r3, [pc, #436]	@ (8002218 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002064:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002068:	4a6b      	ldr	r2, [pc, #428]	@ (8002218 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800206a:	f043 0301 	orr.w	r3, r3, #1
 800206e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002072:	4b69      	ldr	r3, [pc, #420]	@ (8002218 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002074:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800207e:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002080:	4b65      	ldr	r3, [pc, #404]	@ (8002218 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002086:	4a64      	ldr	r2, [pc, #400]	@ (8002218 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002088:	f043 0310 	orr.w	r3, r3, #16
 800208c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002090:	4b61      	ldr	r3, [pc, #388]	@ (8002218 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002096:	f003 0310 	and.w	r3, r3, #16
 800209a:	627b      	str	r3, [r7, #36]	@ 0x24
 800209c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC2_A_Pin|ENC2_B_Pin;
 800209e:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80020a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a4:	2302      	movs	r3, #2
 80020a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ac:	2300      	movs	r3, #0
 80020ae:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020b0:	2301      	movs	r3, #1
 80020b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020b8:	4619      	mov	r1, r3
 80020ba:	4858      	ldr	r0, [pc, #352]	@ (800221c <HAL_TIM_Encoder_MspInit+0x1dc>)
 80020bc:	f004 faf2 	bl	80066a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80020c0:	e0a3      	b.n	800220a <HAL_TIM_Encoder_MspInit+0x1ca>
  else if(tim_encoderHandle->Instance==TIM3)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a56      	ldr	r2, [pc, #344]	@ (8002220 <HAL_TIM_Encoder_MspInit+0x1e0>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d12e      	bne.n	800212a <HAL_TIM_Encoder_MspInit+0xea>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020cc:	4b52      	ldr	r3, [pc, #328]	@ (8002218 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80020ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020d2:	4a51      	ldr	r2, [pc, #324]	@ (8002218 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80020d4:	f043 0302 	orr.w	r3, r3, #2
 80020d8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80020dc:	4b4e      	ldr	r3, [pc, #312]	@ (8002218 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80020de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	623b      	str	r3, [r7, #32]
 80020e8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ea:	4b4b      	ldr	r3, [pc, #300]	@ (8002218 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80020ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020f0:	4a49      	ldr	r2, [pc, #292]	@ (8002218 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80020f2:	f043 0302 	orr.w	r3, r3, #2
 80020f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020fa:	4b47      	ldr	r3, [pc, #284]	@ (8002218 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80020fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	61fb      	str	r3, [r7, #28]
 8002106:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ENC4_A_Pin|ENC4_B_Pin;
 8002108:	2330      	movs	r3, #48	@ 0x30
 800210a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210c:	2302      	movs	r3, #2
 800210e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002114:	2300      	movs	r3, #0
 8002116:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002118:	2302      	movs	r3, #2
 800211a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800211c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002120:	4619      	mov	r1, r3
 8002122:	4840      	ldr	r0, [pc, #256]	@ (8002224 <HAL_TIM_Encoder_MspInit+0x1e4>)
 8002124:	f004 fabe 	bl	80066a4 <HAL_GPIO_Init>
}
 8002128:	e06f      	b.n	800220a <HAL_TIM_Encoder_MspInit+0x1ca>
  else if(tim_encoderHandle->Instance==TIM4)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a3e      	ldr	r2, [pc, #248]	@ (8002228 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d137      	bne.n	80021a4 <HAL_TIM_Encoder_MspInit+0x164>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002134:	4b38      	ldr	r3, [pc, #224]	@ (8002218 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002136:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800213a:	4a37      	ldr	r2, [pc, #220]	@ (8002218 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800213c:	f043 0304 	orr.w	r3, r3, #4
 8002140:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002144:	4b34      	ldr	r3, [pc, #208]	@ (8002218 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002146:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	61bb      	str	r3, [r7, #24]
 8002150:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002152:	4b31      	ldr	r3, [pc, #196]	@ (8002218 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002158:	4a2f      	ldr	r2, [pc, #188]	@ (8002218 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800215a:	f043 0308 	orr.w	r3, r3, #8
 800215e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002162:	4b2d      	ldr	r3, [pc, #180]	@ (8002218 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002168:	f003 0308 	and.w	r3, r3, #8
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ENC1_A_Pin|ENC1_B_Pin;
 8002170:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002174:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002176:	2302      	movs	r3, #2
 8002178:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217a:	2300      	movs	r3, #0
 800217c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217e:	2300      	movs	r3, #0
 8002180:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002182:	2302      	movs	r3, #2
 8002184:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002186:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800218a:	4619      	mov	r1, r3
 800218c:	4827      	ldr	r0, [pc, #156]	@ (800222c <HAL_TIM_Encoder_MspInit+0x1ec>)
 800218e:	f004 fa89 	bl	80066a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002192:	2200      	movs	r2, #0
 8002194:	2100      	movs	r1, #0
 8002196:	201e      	movs	r0, #30
 8002198:	f002 f8f3 	bl	8004382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800219c:	201e      	movs	r0, #30
 800219e:	f002 f90a 	bl	80043b6 <HAL_NVIC_EnableIRQ>
}
 80021a2:	e032      	b.n	800220a <HAL_TIM_Encoder_MspInit+0x1ca>
  else if(tim_encoderHandle->Instance==TIM8)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a21      	ldr	r2, [pc, #132]	@ (8002230 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d12d      	bne.n	800220a <HAL_TIM_Encoder_MspInit+0x1ca>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80021ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002218 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80021b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021b4:	4a18      	ldr	r2, [pc, #96]	@ (8002218 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80021b6:	f043 0302 	orr.w	r3, r3, #2
 80021ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80021be:	4b16      	ldr	r3, [pc, #88]	@ (8002218 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80021c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	613b      	str	r3, [r7, #16]
 80021ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021cc:	4b12      	ldr	r3, [pc, #72]	@ (8002218 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80021ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021d2:	4a11      	ldr	r2, [pc, #68]	@ (8002218 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80021d4:	f043 0304 	orr.w	r3, r3, #4
 80021d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002218 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80021de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC3_A_Pin|ENC3_B_Pin;
 80021ea:	23c0      	movs	r3, #192	@ 0xc0
 80021ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ee:	2302      	movs	r3, #2
 80021f0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f6:	2300      	movs	r3, #0
 80021f8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80021fa:	2303      	movs	r3, #3
 80021fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002202:	4619      	mov	r1, r3
 8002204:	480b      	ldr	r0, [pc, #44]	@ (8002234 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002206:	f004 fa4d 	bl	80066a4 <HAL_GPIO_Init>
}
 800220a:	bf00      	nop
 800220c:	3740      	adds	r7, #64	@ 0x40
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40010000 	.word	0x40010000
 8002218:	58024400 	.word	0x58024400
 800221c:	58021000 	.word	0x58021000
 8002220:	40000400 	.word	0x40000400
 8002224:	58020400 	.word	0x58020400
 8002228:	40000800 	.word	0x40000800
 800222c:	58020c00 	.word	0x58020c00
 8002230:	40010400 	.word	0x40010400
 8002234:	58020800 	.word	0x58020800

08002238 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002248:	f040 8082 	bne.w	8002350 <HAL_TIM_PWM_MspInit+0x118>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800224c:	4b86      	ldr	r3, [pc, #536]	@ (8002468 <HAL_TIM_PWM_MspInit+0x230>)
 800224e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002252:	4a85      	ldr	r2, [pc, #532]	@ (8002468 <HAL_TIM_PWM_MspInit+0x230>)
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800225c:	4b82      	ldr	r3, [pc, #520]	@ (8002468 <HAL_TIM_PWM_MspInit+0x230>)
 800225e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 800226a:	4b80      	ldr	r3, [pc, #512]	@ (800246c <HAL_TIM_PWM_MspInit+0x234>)
 800226c:	4a80      	ldr	r2, [pc, #512]	@ (8002470 <HAL_TIM_PWM_MspInit+0x238>)
 800226e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8002270:	4b7e      	ldr	r3, [pc, #504]	@ (800246c <HAL_TIM_PWM_MspInit+0x234>)
 8002272:	2212      	movs	r2, #18
 8002274:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002276:	4b7d      	ldr	r3, [pc, #500]	@ (800246c <HAL_TIM_PWM_MspInit+0x234>)
 8002278:	2240      	movs	r2, #64	@ 0x40
 800227a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800227c:	4b7b      	ldr	r3, [pc, #492]	@ (800246c <HAL_TIM_PWM_MspInit+0x234>)
 800227e:	2200      	movs	r2, #0
 8002280:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002282:	4b7a      	ldr	r3, [pc, #488]	@ (800246c <HAL_TIM_PWM_MspInit+0x234>)
 8002284:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002288:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800228a:	4b78      	ldr	r3, [pc, #480]	@ (800246c <HAL_TIM_PWM_MspInit+0x234>)
 800228c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002290:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002292:	4b76      	ldr	r3, [pc, #472]	@ (800246c <HAL_TIM_PWM_MspInit+0x234>)
 8002294:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002298:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 800229a:	4b74      	ldr	r3, [pc, #464]	@ (800246c <HAL_TIM_PWM_MspInit+0x234>)
 800229c:	2200      	movs	r2, #0
 800229e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80022a0:	4b72      	ldr	r3, [pc, #456]	@ (800246c <HAL_TIM_PWM_MspInit+0x234>)
 80022a2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80022a6:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80022a8:	4b70      	ldr	r3, [pc, #448]	@ (800246c <HAL_TIM_PWM_MspInit+0x234>)
 80022aa:	2204      	movs	r2, #4
 80022ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim2_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80022ae:	4b6f      	ldr	r3, [pc, #444]	@ (800246c <HAL_TIM_PWM_MspInit+0x234>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim2_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 80022b4:	4b6d      	ldr	r3, [pc, #436]	@ (800246c <HAL_TIM_PWM_MspInit+0x234>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim2_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80022ba:	4b6c      	ldr	r3, [pc, #432]	@ (800246c <HAL_TIM_PWM_MspInit+0x234>)
 80022bc:	2200      	movs	r2, #0
 80022be:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80022c0:	486a      	ldr	r0, [pc, #424]	@ (800246c <HAL_TIM_PWM_MspInit+0x234>)
 80022c2:	f002 f8a7 	bl	8004414 <HAL_DMA_Init>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <HAL_TIM_PWM_MspInit+0x98>
    {
      Error_Handler();
 80022cc:	f7ff f827 	bl	800131e <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a66      	ldr	r2, [pc, #408]	@ (800246c <HAL_TIM_PWM_MspInit+0x234>)
 80022d4:	625a      	str	r2, [r3, #36]	@ 0x24
 80022d6:	4a65      	ldr	r2, [pc, #404]	@ (800246c <HAL_TIM_PWM_MspInit+0x234>)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 80022dc:	4b65      	ldr	r3, [pc, #404]	@ (8002474 <HAL_TIM_PWM_MspInit+0x23c>)
 80022de:	4a66      	ldr	r2, [pc, #408]	@ (8002478 <HAL_TIM_PWM_MspInit+0x240>)
 80022e0:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 80022e2:	4b64      	ldr	r3, [pc, #400]	@ (8002474 <HAL_TIM_PWM_MspInit+0x23c>)
 80022e4:	2214      	movs	r2, #20
 80022e6:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022e8:	4b62      	ldr	r3, [pc, #392]	@ (8002474 <HAL_TIM_PWM_MspInit+0x23c>)
 80022ea:	2240      	movs	r2, #64	@ 0x40
 80022ec:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80022ee:	4b61      	ldr	r3, [pc, #388]	@ (8002474 <HAL_TIM_PWM_MspInit+0x23c>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80022f4:	4b5f      	ldr	r3, [pc, #380]	@ (8002474 <HAL_TIM_PWM_MspInit+0x23c>)
 80022f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022fa:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80022fc:	4b5d      	ldr	r3, [pc, #372]	@ (8002474 <HAL_TIM_PWM_MspInit+0x23c>)
 80022fe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002302:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002304:	4b5b      	ldr	r3, [pc, #364]	@ (8002474 <HAL_TIM_PWM_MspInit+0x23c>)
 8002306:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800230a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 800230c:	4b59      	ldr	r3, [pc, #356]	@ (8002474 <HAL_TIM_PWM_MspInit+0x23c>)
 800230e:	2200      	movs	r2, #0
 8002310:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 8002312:	4b58      	ldr	r3, [pc, #352]	@ (8002474 <HAL_TIM_PWM_MspInit+0x23c>)
 8002314:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002318:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800231a:	4b56      	ldr	r3, [pc, #344]	@ (8002474 <HAL_TIM_PWM_MspInit+0x23c>)
 800231c:	2204      	movs	r2, #4
 800231e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim2_ch3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002320:	4b54      	ldr	r3, [pc, #336]	@ (8002474 <HAL_TIM_PWM_MspInit+0x23c>)
 8002322:	2200      	movs	r2, #0
 8002324:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim2_ch3.Init.MemBurst = DMA_MBURST_SINGLE;
 8002326:	4b53      	ldr	r3, [pc, #332]	@ (8002474 <HAL_TIM_PWM_MspInit+0x23c>)
 8002328:	2200      	movs	r2, #0
 800232a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim2_ch3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800232c:	4b51      	ldr	r3, [pc, #324]	@ (8002474 <HAL_TIM_PWM_MspInit+0x23c>)
 800232e:	2200      	movs	r2, #0
 8002330:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8002332:	4850      	ldr	r0, [pc, #320]	@ (8002474 <HAL_TIM_PWM_MspInit+0x23c>)
 8002334:	f002 f86e 	bl	8004414 <HAL_DMA_Init>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <HAL_TIM_PWM_MspInit+0x10a>
    {
      Error_Handler();
 800233e:	f7fe ffee 	bl	800131e <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a4b      	ldr	r2, [pc, #300]	@ (8002474 <HAL_TIM_PWM_MspInit+0x23c>)
 8002346:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002348:	4a4a      	ldr	r2, [pc, #296]	@ (8002474 <HAL_TIM_PWM_MspInit+0x23c>)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800234e:	e086      	b.n	800245e <HAL_TIM_PWM_MspInit+0x226>
  else if(tim_pwmHandle->Instance==TIM5)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a49      	ldr	r2, [pc, #292]	@ (800247c <HAL_TIM_PWM_MspInit+0x244>)
 8002356:	4293      	cmp	r3, r2
 8002358:	f040 8081 	bne.w	800245e <HAL_TIM_PWM_MspInit+0x226>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800235c:	4b42      	ldr	r3, [pc, #264]	@ (8002468 <HAL_TIM_PWM_MspInit+0x230>)
 800235e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002362:	4a41      	ldr	r2, [pc, #260]	@ (8002468 <HAL_TIM_PWM_MspInit+0x230>)
 8002364:	f043 0308 	orr.w	r3, r3, #8
 8002368:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800236c:	4b3e      	ldr	r3, [pc, #248]	@ (8002468 <HAL_TIM_PWM_MspInit+0x230>)
 800236e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream3;
 800237a:	4b41      	ldr	r3, [pc, #260]	@ (8002480 <HAL_TIM_PWM_MspInit+0x248>)
 800237c:	4a41      	ldr	r2, [pc, #260]	@ (8002484 <HAL_TIM_PWM_MspInit+0x24c>)
 800237e:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 8002380:	4b3f      	ldr	r3, [pc, #252]	@ (8002480 <HAL_TIM_PWM_MspInit+0x248>)
 8002382:	223a      	movs	r2, #58	@ 0x3a
 8002384:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002386:	4b3e      	ldr	r3, [pc, #248]	@ (8002480 <HAL_TIM_PWM_MspInit+0x248>)
 8002388:	2240      	movs	r2, #64	@ 0x40
 800238a:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800238c:	4b3c      	ldr	r3, [pc, #240]	@ (8002480 <HAL_TIM_PWM_MspInit+0x248>)
 800238e:	2200      	movs	r2, #0
 8002390:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002392:	4b3b      	ldr	r3, [pc, #236]	@ (8002480 <HAL_TIM_PWM_MspInit+0x248>)
 8002394:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002398:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800239a:	4b39      	ldr	r3, [pc, #228]	@ (8002480 <HAL_TIM_PWM_MspInit+0x248>)
 800239c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80023a0:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80023a2:	4b37      	ldr	r3, [pc, #220]	@ (8002480 <HAL_TIM_PWM_MspInit+0x248>)
 80023a4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80023a8:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 80023aa:	4b35      	ldr	r3, [pc, #212]	@ (8002480 <HAL_TIM_PWM_MspInit+0x248>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 80023b0:	4b33      	ldr	r3, [pc, #204]	@ (8002480 <HAL_TIM_PWM_MspInit+0x248>)
 80023b2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80023b6:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80023b8:	4b31      	ldr	r3, [pc, #196]	@ (8002480 <HAL_TIM_PWM_MspInit+0x248>)
 80023ba:	2204      	movs	r2, #4
 80023bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim5_ch4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80023be:	4b30      	ldr	r3, [pc, #192]	@ (8002480 <HAL_TIM_PWM_MspInit+0x248>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim5_ch4.Init.MemBurst = DMA_MBURST_SINGLE;
 80023c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002480 <HAL_TIM_PWM_MspInit+0x248>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim5_ch4.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80023ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002480 <HAL_TIM_PWM_MspInit+0x248>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 80023d0:	482b      	ldr	r0, [pc, #172]	@ (8002480 <HAL_TIM_PWM_MspInit+0x248>)
 80023d2:	f002 f81f 	bl	8004414 <HAL_DMA_Init>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <HAL_TIM_PWM_MspInit+0x1a8>
      Error_Handler();
 80023dc:	f7fe ff9f 	bl	800131e <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a27      	ldr	r2, [pc, #156]	@ (8002480 <HAL_TIM_PWM_MspInit+0x248>)
 80023e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80023e6:	4a26      	ldr	r2, [pc, #152]	@ (8002480 <HAL_TIM_PWM_MspInit+0x248>)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 80023ec:	4b26      	ldr	r3, [pc, #152]	@ (8002488 <HAL_TIM_PWM_MspInit+0x250>)
 80023ee:	4a27      	ldr	r2, [pc, #156]	@ (800248c <HAL_TIM_PWM_MspInit+0x254>)
 80023f0:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Request = DMA_REQUEST_TIM5_CH2;
 80023f2:	4b25      	ldr	r3, [pc, #148]	@ (8002488 <HAL_TIM_PWM_MspInit+0x250>)
 80023f4:	2238      	movs	r2, #56	@ 0x38
 80023f6:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023f8:	4b23      	ldr	r3, [pc, #140]	@ (8002488 <HAL_TIM_PWM_MspInit+0x250>)
 80023fa:	2240      	movs	r2, #64	@ 0x40
 80023fc:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80023fe:	4b22      	ldr	r3, [pc, #136]	@ (8002488 <HAL_TIM_PWM_MspInit+0x250>)
 8002400:	2200      	movs	r2, #0
 8002402:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002404:	4b20      	ldr	r3, [pc, #128]	@ (8002488 <HAL_TIM_PWM_MspInit+0x250>)
 8002406:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800240a:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800240c:	4b1e      	ldr	r3, [pc, #120]	@ (8002488 <HAL_TIM_PWM_MspInit+0x250>)
 800240e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002412:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002414:	4b1c      	ldr	r3, [pc, #112]	@ (8002488 <HAL_TIM_PWM_MspInit+0x250>)
 8002416:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800241a:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 800241c:	4b1a      	ldr	r3, [pc, #104]	@ (8002488 <HAL_TIM_PWM_MspInit+0x250>)
 800241e:	2200      	movs	r2, #0
 8002420:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8002422:	4b19      	ldr	r3, [pc, #100]	@ (8002488 <HAL_TIM_PWM_MspInit+0x250>)
 8002424:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002428:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800242a:	4b17      	ldr	r3, [pc, #92]	@ (8002488 <HAL_TIM_PWM_MspInit+0x250>)
 800242c:	2204      	movs	r2, #4
 800242e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim5_ch2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002430:	4b15      	ldr	r3, [pc, #84]	@ (8002488 <HAL_TIM_PWM_MspInit+0x250>)
 8002432:	2200      	movs	r2, #0
 8002434:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim5_ch2.Init.MemBurst = DMA_MBURST_SINGLE;
 8002436:	4b14      	ldr	r3, [pc, #80]	@ (8002488 <HAL_TIM_PWM_MspInit+0x250>)
 8002438:	2200      	movs	r2, #0
 800243a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim5_ch2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800243c:	4b12      	ldr	r3, [pc, #72]	@ (8002488 <HAL_TIM_PWM_MspInit+0x250>)
 800243e:	2200      	movs	r2, #0
 8002440:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8002442:	4811      	ldr	r0, [pc, #68]	@ (8002488 <HAL_TIM_PWM_MspInit+0x250>)
 8002444:	f001 ffe6 	bl	8004414 <HAL_DMA_Init>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_TIM_PWM_MspInit+0x21a>
      Error_Handler();
 800244e:	f7fe ff66 	bl	800131e <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a0c      	ldr	r2, [pc, #48]	@ (8002488 <HAL_TIM_PWM_MspInit+0x250>)
 8002456:	629a      	str	r2, [r3, #40]	@ 0x28
 8002458:	4a0b      	ldr	r2, [pc, #44]	@ (8002488 <HAL_TIM_PWM_MspInit+0x250>)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800245e:	bf00      	nop
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	58024400 	.word	0x58024400
 800246c:	240007c4 	.word	0x240007c4
 8002470:	40020088 	.word	0x40020088
 8002474:	2400083c 	.word	0x2400083c
 8002478:	40020028 	.word	0x40020028
 800247c:	40000c00 	.word	0x40000c00
 8002480:	240008b4 	.word	0x240008b4
 8002484:	40020058 	.word	0x40020058
 8002488:	2400092c 	.word	0x2400092c
 800248c:	40020070 	.word	0x40020070

08002490 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM15)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a0e      	ldr	r2, [pc, #56]	@ (80024d8 <HAL_TIM_Base_MspInit+0x48>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d116      	bne.n	80024d0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80024a2:	4b0e      	ldr	r3, [pc, #56]	@ (80024dc <HAL_TIM_Base_MspInit+0x4c>)
 80024a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024a8:	4a0c      	ldr	r2, [pc, #48]	@ (80024dc <HAL_TIM_Base_MspInit+0x4c>)
 80024aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80024b2:	4b0a      	ldr	r3, [pc, #40]	@ (80024dc <HAL_TIM_Base_MspInit+0x4c>)
 80024b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	68fb      	ldr	r3, [r7, #12]

    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 80024c0:	2200      	movs	r2, #0
 80024c2:	2100      	movs	r1, #0
 80024c4:	2074      	movs	r0, #116	@ 0x74
 80024c6:	f001 ff5c 	bl	8004382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 80024ca:	2074      	movs	r0, #116	@ 0x74
 80024cc:	f001 ff73 	bl	80043b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80024d0:	bf00      	nop
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40014000 	.word	0x40014000
 80024dc:	58024400 	.word	0x58024400

080024e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08a      	sub	sp, #40	@ 0x28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e8:	f107 0314 	add.w	r3, r7, #20
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	60da      	str	r2, [r3, #12]
 80024f6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002500:	d11f      	bne.n	8002542 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002502:	4b24      	ldr	r3, [pc, #144]	@ (8002594 <HAL_TIM_MspPostInit+0xb4>)
 8002504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002508:	4a22      	ldr	r2, [pc, #136]	@ (8002594 <HAL_TIM_MspPostInit+0xb4>)
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002512:	4b20      	ldr	r3, [pc, #128]	@ (8002594 <HAL_TIM_MspPostInit+0xb4>)
 8002514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	613b      	str	r3, [r7, #16]
 800251e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = M3_Pin|M2_Pin;
 8002520:	2305      	movs	r3, #5
 8002522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002524:	2302      	movs	r3, #2
 8002526:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002528:	2300      	movs	r3, #0
 800252a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252c:	2300      	movs	r3, #0
 800252e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002530:	2301      	movs	r3, #1
 8002532:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002534:	f107 0314 	add.w	r3, r7, #20
 8002538:	4619      	mov	r1, r3
 800253a:	4817      	ldr	r0, [pc, #92]	@ (8002598 <HAL_TIM_MspPostInit+0xb8>)
 800253c:	f004 f8b2 	bl	80066a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002540:	e023      	b.n	800258a <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM5)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a15      	ldr	r2, [pc, #84]	@ (800259c <HAL_TIM_MspPostInit+0xbc>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d11e      	bne.n	800258a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800254c:	4b11      	ldr	r3, [pc, #68]	@ (8002594 <HAL_TIM_MspPostInit+0xb4>)
 800254e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002552:	4a10      	ldr	r2, [pc, #64]	@ (8002594 <HAL_TIM_MspPostInit+0xb4>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800255c:	4b0d      	ldr	r3, [pc, #52]	@ (8002594 <HAL_TIM_MspPostInit+0xb4>)
 800255e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M4_Pin|M1_Pin;
 800256a:	230a      	movs	r3, #10
 800256c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256e:	2302      	movs	r3, #2
 8002570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002572:	2300      	movs	r3, #0
 8002574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002576:	2300      	movs	r3, #0
 8002578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800257a:	2302      	movs	r3, #2
 800257c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800257e:	f107 0314 	add.w	r3, r7, #20
 8002582:	4619      	mov	r1, r3
 8002584:	4804      	ldr	r0, [pc, #16]	@ (8002598 <HAL_TIM_MspPostInit+0xb8>)
 8002586:	f004 f88d 	bl	80066a4 <HAL_GPIO_Init>
}
 800258a:	bf00      	nop
 800258c:	3728      	adds	r7, #40	@ 0x28
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	58024400 	.word	0x58024400
 8002598:	58020000 	.word	0x58020000
 800259c:	40000c00 	.word	0x40000c00

080025a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80025a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80025d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80025a4:	f7fe f86c 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025a8:	480c      	ldr	r0, [pc, #48]	@ (80025dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025aa:	490d      	ldr	r1, [pc, #52]	@ (80025e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025ac:	4a0d      	ldr	r2, [pc, #52]	@ (80025e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025b0:	e002      	b.n	80025b8 <LoopCopyDataInit>

080025b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025b6:	3304      	adds	r3, #4

080025b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025bc:	d3f9      	bcc.n	80025b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025be:	4a0a      	ldr	r2, [pc, #40]	@ (80025e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025c0:	4c0a      	ldr	r4, [pc, #40]	@ (80025ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80025c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025c4:	e001      	b.n	80025ca <LoopFillZerobss>

080025c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025c8:	3204      	adds	r2, #4

080025ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025cc:	d3fb      	bcc.n	80025c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025ce:	f010 fcdd 	bl	8012f8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025d2:	f7fe fc89 	bl	8000ee8 <main>
  bx  lr
 80025d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025d8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80025dc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80025e0:	240002e8 	.word	0x240002e8
  ldr r2, =_sidata
 80025e4:	08015478 	.word	0x08015478
  ldr r2, =_sbss
 80025e8:	240002e8 	.word	0x240002e8
  ldr r4, =_ebss
 80025ec:	24002778 	.word	0x24002778

080025f0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025f0:	e7fe      	b.n	80025f0 <ADC3_IRQHandler>
	...

080025f4 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08c      	sub	sp, #48	@ 0x30
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80025fe:	2300      	movs	r3, #0
 8002600:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8002602:	79fb      	ldrb	r3, [r7, #7]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d009      	beq.n	800261c <BSP_LED_Init+0x28>
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d006      	beq.n	800261c <BSP_LED_Init+0x28>
 800260e:	79fb      	ldrb	r3, [r7, #7]
 8002610:	2b02      	cmp	r3, #2
 8002612:	d003      	beq.n	800261c <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002614:	f06f 0301 	mvn.w	r3, #1
 8002618:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800261a:	e055      	b.n	80026c8 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10f      	bne.n	8002642 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8002622:	4b2c      	ldr	r3, [pc, #176]	@ (80026d4 <BSP_LED_Init+0xe0>)
 8002624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002628:	4a2a      	ldr	r2, [pc, #168]	@ (80026d4 <BSP_LED_Init+0xe0>)
 800262a:	f043 0302 	orr.w	r3, r3, #2
 800262e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002632:	4b28      	ldr	r3, [pc, #160]	@ (80026d4 <BSP_LED_Init+0xe0>)
 8002634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	e021      	b.n	8002686 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8002642:	79fb      	ldrb	r3, [r7, #7]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d10f      	bne.n	8002668 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8002648:	4b22      	ldr	r3, [pc, #136]	@ (80026d4 <BSP_LED_Init+0xe0>)
 800264a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800264e:	4a21      	ldr	r2, [pc, #132]	@ (80026d4 <BSP_LED_Init+0xe0>)
 8002650:	f043 0310 	orr.w	r3, r3, #16
 8002654:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002658:	4b1e      	ldr	r3, [pc, #120]	@ (80026d4 <BSP_LED_Init+0xe0>)
 800265a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800265e:	f003 0310 	and.w	r3, r3, #16
 8002662:	613b      	str	r3, [r7, #16]
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	e00e      	b.n	8002686 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8002668:	4b1a      	ldr	r3, [pc, #104]	@ (80026d4 <BSP_LED_Init+0xe0>)
 800266a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800266e:	4a19      	ldr	r2, [pc, #100]	@ (80026d4 <BSP_LED_Init+0xe0>)
 8002670:	f043 0302 	orr.w	r3, r3, #2
 8002674:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002678:	4b16      	ldr	r3, [pc, #88]	@ (80026d4 <BSP_LED_Init+0xe0>)
 800267a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8002686:	79fb      	ldrb	r3, [r7, #7]
 8002688:	4a13      	ldr	r2, [pc, #76]	@ (80026d8 <BSP_LED_Init+0xe4>)
 800268a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800268e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002690:	2301      	movs	r3, #1
 8002692:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8002694:	2300      	movs	r3, #0
 8002696:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002698:	2303      	movs	r3, #3
 800269a:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800269c:	79fb      	ldrb	r3, [r7, #7]
 800269e:	4a0f      	ldr	r2, [pc, #60]	@ (80026dc <BSP_LED_Init+0xe8>)
 80026a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a4:	f107 0218 	add.w	r2, r7, #24
 80026a8:	4611      	mov	r1, r2
 80026aa:	4618      	mov	r0, r3
 80026ac:	f003 fffa 	bl	80066a4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80026b0:	79fb      	ldrb	r3, [r7, #7]
 80026b2:	4a0a      	ldr	r2, [pc, #40]	@ (80026dc <BSP_LED_Init+0xe8>)
 80026b4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	4a07      	ldr	r2, [pc, #28]	@ (80026d8 <BSP_LED_Init+0xe4>)
 80026bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80026c0:	2200      	movs	r2, #0
 80026c2:	4619      	mov	r1, r3
 80026c4:	f004 f99e 	bl	8006a04 <HAL_GPIO_WritePin>
  }

  return ret;
 80026c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3730      	adds	r7, #48	@ 0x30
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	58024400 	.word	0x58024400
 80026d8:	080150c4 	.word	0x080150c4
 80026dc:	2400000c 	.word	0x2400000c

080026e0 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b088      	sub	sp, #32
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	460a      	mov	r2, r1
 80026ea:	71fb      	strb	r3, [r7, #7]
 80026ec:	4613      	mov	r3, r2
 80026ee:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80026f0:	4b2e      	ldr	r3, [pc, #184]	@ (80027ac <BSP_PB_Init+0xcc>)
 80026f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026f6:	4a2d      	ldr	r2, [pc, #180]	@ (80027ac <BSP_PB_Init+0xcc>)
 80026f8:	f043 0304 	orr.w	r3, r3, #4
 80026fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002700:	4b2a      	ldr	r3, [pc, #168]	@ (80027ac <BSP_PB_Init+0xcc>)
 8002702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002706:	f003 0304 	and.w	r3, r3, #4
 800270a:	60bb      	str	r3, [r7, #8]
 800270c:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800270e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002712:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002714:	2302      	movs	r3, #2
 8002716:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002718:	2302      	movs	r3, #2
 800271a:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 800271c:	79bb      	ldrb	r3, [r7, #6]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10c      	bne.n	800273c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002722:	2300      	movs	r3, #0
 8002724:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8002726:	79fb      	ldrb	r3, [r7, #7]
 8002728:	4a21      	ldr	r2, [pc, #132]	@ (80027b0 <BSP_PB_Init+0xd0>)
 800272a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800272e:	f107 020c 	add.w	r2, r7, #12
 8002732:	4611      	mov	r1, r2
 8002734:	4618      	mov	r0, r3
 8002736:	f003 ffb5 	bl	80066a4 <HAL_GPIO_Init>
 800273a:	e031      	b.n	80027a0 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800273c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002740:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002742:	79fb      	ldrb	r3, [r7, #7]
 8002744:	4a1a      	ldr	r2, [pc, #104]	@ (80027b0 <BSP_PB_Init+0xd0>)
 8002746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800274a:	f107 020c 	add.w	r2, r7, #12
 800274e:	4611      	mov	r1, r2
 8002750:	4618      	mov	r0, r3
 8002752:	f003 ffa7 	bl	80066a4 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8002756:	79fb      	ldrb	r3, [r7, #7]
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	4a16      	ldr	r2, [pc, #88]	@ (80027b4 <BSP_PB_Init+0xd4>)
 800275c:	441a      	add	r2, r3
 800275e:	79fb      	ldrb	r3, [r7, #7]
 8002760:	4915      	ldr	r1, [pc, #84]	@ (80027b8 <BSP_PB_Init+0xd8>)
 8002762:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002766:	4619      	mov	r1, r3
 8002768:	4610      	mov	r0, r2
 800276a:	f003 ff4a 	bl	8006602 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800276e:	79fb      	ldrb	r3, [r7, #7]
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	4a10      	ldr	r2, [pc, #64]	@ (80027b4 <BSP_PB_Init+0xd4>)
 8002774:	1898      	adds	r0, r3, r2
 8002776:	79fb      	ldrb	r3, [r7, #7]
 8002778:	4a10      	ldr	r2, [pc, #64]	@ (80027bc <BSP_PB_Init+0xdc>)
 800277a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800277e:	461a      	mov	r2, r3
 8002780:	2100      	movs	r1, #0
 8002782:	f003 ff1f 	bl	80065c4 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002786:	2028      	movs	r0, #40	@ 0x28
 8002788:	79fb      	ldrb	r3, [r7, #7]
 800278a:	4a0d      	ldr	r2, [pc, #52]	@ (80027c0 <BSP_PB_Init+0xe0>)
 800278c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002790:	2200      	movs	r2, #0
 8002792:	4619      	mov	r1, r3
 8002794:	f001 fdf5 	bl	8004382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002798:	2328      	movs	r3, #40	@ 0x28
 800279a:	4618      	mov	r0, r3
 800279c:	f001 fe0b 	bl	80043b6 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3720      	adds	r7, #32
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	58024400 	.word	0x58024400
 80027b0:	24000018 	.word	0x24000018
 80027b4:	240009a4 	.word	0x240009a4
 80027b8:	080150cc 	.word	0x080150cc
 80027bc:	2400001c 	.word	0x2400001c
 80027c0:	24000020 	.word	0x24000020

080027c4 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	4a04      	ldr	r2, [pc, #16]	@ (80027e4 <BSP_PB_IRQHandler+0x20>)
 80027d4:	4413      	add	r3, r2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f003 ff28 	bl	800662c <HAL_EXTI_IRQHandler>
}
 80027dc:	bf00      	nop
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	240009a4 	.word	0x240009a4

080027e8 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
	...

08002800 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	6039      	str	r1, [r7, #0]
 800280a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800280c:	2300      	movs	r3, #0
 800280e:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8002810:	79fb      	ldrb	r3, [r7, #7]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002816:	f06f 0301 	mvn.w	r3, #1
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	e018      	b.n	8002850 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800281e:	79fb      	ldrb	r3, [r7, #7]
 8002820:	2294      	movs	r2, #148	@ 0x94
 8002822:	fb02 f303 	mul.w	r3, r2, r3
 8002826:	4a0d      	ldr	r2, [pc, #52]	@ (800285c <BSP_COM_Init+0x5c>)
 8002828:	4413      	add	r3, r2
 800282a:	4618      	mov	r0, r3
 800282c:	f000 f86e 	bl	800290c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8002830:	79fb      	ldrb	r3, [r7, #7]
 8002832:	2294      	movs	r2, #148	@ 0x94
 8002834:	fb02 f303 	mul.w	r3, r2, r3
 8002838:	4a08      	ldr	r2, [pc, #32]	@ (800285c <BSP_COM_Init+0x5c>)
 800283a:	4413      	add	r3, r2
 800283c:	6839      	ldr	r1, [r7, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f000 f80e 	bl	8002860 <MX_USART3_Init>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d002      	beq.n	8002850 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800284a:	f06f 0303 	mvn.w	r3, #3
 800284e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002850:	68fb      	ldr	r3, [r7, #12]
}
 8002852:	4618      	mov	r0, r3
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	240009ac 	.word	0x240009ac

08002860 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 800286a:	4b15      	ldr	r3, [pc, #84]	@ (80028c0 <MX_USART3_Init+0x60>)
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	220c      	movs	r2, #12
 800287e:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	895b      	ldrh	r3, [r3, #10]
 8002884:	461a      	mov	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	891b      	ldrh	r3, [r3, #8]
 8002896:	461a      	mov	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	899b      	ldrh	r3, [r3, #12]
 80028a0:	461a      	mov	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80028ac:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f00a fca8 	bl	800d204 <HAL_UART_Init>
 80028b4:	4603      	mov	r3, r0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	24000008 	.word	0x24000008

080028c4 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 80028cc:	4b09      	ldr	r3, [pc, #36]	@ (80028f4 <__io_putchar+0x30>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	461a      	mov	r2, r3
 80028d2:	2394      	movs	r3, #148	@ 0x94
 80028d4:	fb02 f303 	mul.w	r3, r2, r3
 80028d8:	4a07      	ldr	r2, [pc, #28]	@ (80028f8 <__io_putchar+0x34>)
 80028da:	1898      	adds	r0, r3, r2
 80028dc:	1d39      	adds	r1, r7, #4
 80028de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028e2:	2201      	movs	r2, #1
 80028e4:	f00a fce8 	bl	800d2b8 <HAL_UART_Transmit>
  return ch;
 80028e8:	687b      	ldr	r3, [r7, #4]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	24000a40 	.word	0x24000a40
 80028f8:	240009ac 	.word	0x240009ac

080028fc <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002900:	2000      	movs	r0, #0
 8002902:	f7ff ff71 	bl	80027e8 <BSP_PB_Callback>
}
 8002906:	bf00      	nop
 8002908:	bd80      	pop	{r7, pc}
	...

0800290c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b08a      	sub	sp, #40	@ 0x28
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8002914:	4b27      	ldr	r3, [pc, #156]	@ (80029b4 <COM1_MspInit+0xa8>)
 8002916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800291a:	4a26      	ldr	r2, [pc, #152]	@ (80029b4 <COM1_MspInit+0xa8>)
 800291c:	f043 0308 	orr.w	r3, r3, #8
 8002920:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002924:	4b23      	ldr	r3, [pc, #140]	@ (80029b4 <COM1_MspInit+0xa8>)
 8002926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800292a:	f003 0308 	and.w	r3, r3, #8
 800292e:	613b      	str	r3, [r7, #16]
 8002930:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8002932:	4b20      	ldr	r3, [pc, #128]	@ (80029b4 <COM1_MspInit+0xa8>)
 8002934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002938:	4a1e      	ldr	r2, [pc, #120]	@ (80029b4 <COM1_MspInit+0xa8>)
 800293a:	f043 0308 	orr.w	r3, r3, #8
 800293e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002942:	4b1c      	ldr	r3, [pc, #112]	@ (80029b4 <COM1_MspInit+0xa8>)
 8002944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8002950:	4b18      	ldr	r3, [pc, #96]	@ (80029b4 <COM1_MspInit+0xa8>)
 8002952:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002956:	4a17      	ldr	r2, [pc, #92]	@ (80029b4 <COM1_MspInit+0xa8>)
 8002958:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800295c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002960:	4b14      	ldr	r3, [pc, #80]	@ (80029b4 <COM1_MspInit+0xa8>)
 8002962:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002966:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800296a:	60bb      	str	r3, [r7, #8]
 800296c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 800296e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002972:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002974:	2302      	movs	r3, #2
 8002976:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002978:	2302      	movs	r3, #2
 800297a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800297c:	2301      	movs	r3, #1
 800297e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8002980:	2307      	movs	r3, #7
 8002982:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002984:	f107 0314 	add.w	r3, r7, #20
 8002988:	4619      	mov	r1, r3
 800298a:	480b      	ldr	r0, [pc, #44]	@ (80029b8 <COM1_MspInit+0xac>)
 800298c:	f003 fe8a 	bl	80066a4 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8002990:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002994:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002996:	2302      	movs	r3, #2
 8002998:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800299a:	2307      	movs	r3, #7
 800299c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800299e:	f107 0314 	add.w	r3, r7, #20
 80029a2:	4619      	mov	r1, r3
 80029a4:	4804      	ldr	r0, [pc, #16]	@ (80029b8 <COM1_MspInit+0xac>)
 80029a6:	f003 fe7d 	bl	80066a4 <HAL_GPIO_Init>
}
 80029aa:	bf00      	nop
 80029ac:	3728      	adds	r7, #40	@ 0x28
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	58024400 	.word	0x58024400
 80029b8:	58020c00 	.word	0x58020c00

080029bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029c2:	2003      	movs	r0, #3
 80029c4:	f001 fcd2 	bl	800436c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80029c8:	f006 f996 	bl	8008cf8 <HAL_RCC_GetSysClockFreq>
 80029cc:	4602      	mov	r2, r0
 80029ce:	4b15      	ldr	r3, [pc, #84]	@ (8002a24 <HAL_Init+0x68>)
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	0a1b      	lsrs	r3, r3, #8
 80029d4:	f003 030f 	and.w	r3, r3, #15
 80029d8:	4913      	ldr	r1, [pc, #76]	@ (8002a28 <HAL_Init+0x6c>)
 80029da:	5ccb      	ldrb	r3, [r1, r3]
 80029dc:	f003 031f 	and.w	r3, r3, #31
 80029e0:	fa22 f303 	lsr.w	r3, r2, r3
 80029e4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80029e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002a24 <HAL_Init+0x68>)
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	4a0e      	ldr	r2, [pc, #56]	@ (8002a28 <HAL_Init+0x6c>)
 80029f0:	5cd3      	ldrb	r3, [r2, r3]
 80029f2:	f003 031f 	and.w	r3, r3, #31
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	fa22 f303 	lsr.w	r3, r2, r3
 80029fc:	4a0b      	ldr	r2, [pc, #44]	@ (8002a2c <HAL_Init+0x70>)
 80029fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a00:	4a0b      	ldr	r2, [pc, #44]	@ (8002a30 <HAL_Init+0x74>)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a06:	2000      	movs	r0, #0
 8002a08:	f000 f814 	bl	8002a34 <HAL_InitTick>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e002      	b.n	8002a1c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002a16:	f7fe fc89 	bl	800132c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	58024400 	.word	0x58024400
 8002a28:	08015084 	.word	0x08015084
 8002a2c:	24000004 	.word	0x24000004
 8002a30:	24000000 	.word	0x24000000

08002a34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002a3c:	4b15      	ldr	r3, [pc, #84]	@ (8002a94 <HAL_InitTick+0x60>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e021      	b.n	8002a8c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002a48:	4b13      	ldr	r3, [pc, #76]	@ (8002a98 <HAL_InitTick+0x64>)
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	4b11      	ldr	r3, [pc, #68]	@ (8002a94 <HAL_InitTick+0x60>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	4619      	mov	r1, r3
 8002a52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f001 fcb7 	bl	80043d2 <HAL_SYSTICK_Config>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e00e      	b.n	8002a8c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2b0f      	cmp	r3, #15
 8002a72:	d80a      	bhi.n	8002a8a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a74:	2200      	movs	r2, #0
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	f04f 30ff 	mov.w	r0, #4294967295
 8002a7c:	f001 fc81 	bl	8004382 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a80:	4a06      	ldr	r2, [pc, #24]	@ (8002a9c <HAL_InitTick+0x68>)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
 8002a88:	e000      	b.n	8002a8c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	24000028 	.word	0x24000028
 8002a98:	24000000 	.word	0x24000000
 8002a9c:	24000024 	.word	0x24000024

08002aa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002aa4:	4b06      	ldr	r3, [pc, #24]	@ (8002ac0 <HAL_IncTick+0x20>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	4b06      	ldr	r3, [pc, #24]	@ (8002ac4 <HAL_IncTick+0x24>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4413      	add	r3, r2
 8002ab0:	4a04      	ldr	r2, [pc, #16]	@ (8002ac4 <HAL_IncTick+0x24>)
 8002ab2:	6013      	str	r3, [r2, #0]
}
 8002ab4:	bf00      	nop
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	24000028 	.word	0x24000028
 8002ac4:	24000a44 	.word	0x24000a44

08002ac8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  return uwTick;
 8002acc:	4b03      	ldr	r3, [pc, #12]	@ (8002adc <HAL_GetTick+0x14>)
 8002ace:	681b      	ldr	r3, [r3, #0]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	24000a44 	.word	0x24000a44

08002ae0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ae8:	f7ff ffee 	bl	8002ac8 <HAL_GetTick>
 8002aec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af8:	d005      	beq.n	8002b06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002afa:	4b0a      	ldr	r3, [pc, #40]	@ (8002b24 <HAL_Delay+0x44>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	461a      	mov	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	4413      	add	r3, r2
 8002b04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b06:	bf00      	nop
 8002b08:	f7ff ffde 	bl	8002ac8 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d8f7      	bhi.n	8002b08 <HAL_Delay+0x28>
  {
  }
}
 8002b18:	bf00      	nop
 8002b1a:	bf00      	nop
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	24000028 	.word	0x24000028

08002b28 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002b2c:	4b03      	ldr	r3, [pc, #12]	@ (8002b3c <HAL_GetREVID+0x14>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	0c1b      	lsrs	r3, r3, #16
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	5c001000 	.word	0x5c001000

08002b40 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	431a      	orrs	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	609a      	str	r2, [r3, #8]
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	609a      	str	r2, [r3, #8]
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b087      	sub	sp, #28
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
 8002bb4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	3360      	adds	r3, #96	@ 0x60
 8002bba:	461a      	mov	r2, r3
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	430b      	orrs	r3, r1
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002bdc:	bf00      	nop
 8002bde:	371c      	adds	r7, #28
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	f003 031f 	and.w	r3, r3, #31
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	fa01 f303 	lsl.w	r3, r1, r3
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	611a      	str	r2, [r3, #16]
}
 8002c0e:	bf00      	nop
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b087      	sub	sp, #28
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	60f8      	str	r0, [r7, #12]
 8002c22:	60b9      	str	r1, [r7, #8]
 8002c24:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	3360      	adds	r3, #96	@ 0x60
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	601a      	str	r2, [r3, #0]
  }
}
 8002c44:	bf00      	nop
 8002c46:	371c      	adds	r7, #28
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002c64:	2301      	movs	r3, #1
 8002c66:	e000      	b.n	8002c6a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b087      	sub	sp, #28
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	60f8      	str	r0, [r7, #12]
 8002c7e:	60b9      	str	r1, [r7, #8]
 8002c80:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	3330      	adds	r3, #48	@ 0x30
 8002c86:	461a      	mov	r2, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	0a1b      	lsrs	r3, r3, #8
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	f003 030c 	and.w	r3, r3, #12
 8002c92:	4413      	add	r3, r2
 8002c94:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	f003 031f 	and.w	r3, r3, #31
 8002ca0:	211f      	movs	r1, #31
 8002ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	401a      	ands	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	0e9b      	lsrs	r3, r3, #26
 8002cae:	f003 011f 	and.w	r1, r3, #31
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	f003 031f 	and.w	r3, r3, #31
 8002cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002cc2:	bf00      	nop
 8002cc4:	371c      	adds	r7, #28
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b087      	sub	sp, #28
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	3314      	adds	r3, #20
 8002cde:	461a      	mov	r2, r3
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	0e5b      	lsrs	r3, r3, #25
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	f003 0304 	and.w	r3, r3, #4
 8002cea:	4413      	add	r3, r2
 8002cec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	0d1b      	lsrs	r3, r3, #20
 8002cf6:	f003 031f 	and.w	r3, r3, #31
 8002cfa:	2107      	movs	r1, #7
 8002cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002d00:	43db      	mvns	r3, r3
 8002d02:	401a      	ands	r2, r3
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	0d1b      	lsrs	r3, r3, #20
 8002d08:	f003 031f 	and.w	r3, r3, #31
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d12:	431a      	orrs	r2, r3
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002d18:	bf00      	nop
 8002d1a:	371c      	adds	r7, #28
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	401a      	ands	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f003 0318 	and.w	r3, r3, #24
 8002d46:	4908      	ldr	r1, [pc, #32]	@ (8002d68 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002d48:	40d9      	lsrs	r1, r3
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	400b      	ands	r3, r1
 8002d4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d52:	431a      	orrs	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002d5a:	bf00      	nop
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	000fffff 	.word	0x000fffff

08002d6c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 031f 	and.w	r3, r3, #31
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	4b04      	ldr	r3, [pc, #16]	@ (8002dc4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002db2:	4013      	ands	r3, r2
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6093      	str	r3, [r2, #8]
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	5fffffc0 	.word	0x5fffffc0

08002dc8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002dd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ddc:	d101      	bne.n	8002de2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002dde:	2301      	movs	r3, #1
 8002de0:	e000      	b.n	8002de4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	4b05      	ldr	r3, [pc, #20]	@ (8002e14 <LL_ADC_EnableInternalRegulator+0x24>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	6fffffc0 	.word	0x6fffffc0

08002e18 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e2c:	d101      	bne.n	8002e32 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e000      	b.n	8002e34 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	4b05      	ldr	r3, [pc, #20]	@ (8002e64 <LL_ADC_Enable+0x24>)
 8002e4e:	4013      	ands	r3, r2
 8002e50:	f043 0201 	orr.w	r2, r3, #1
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	7fffffc0 	.word	0x7fffffc0

08002e68 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <LL_ADC_IsEnabled+0x18>
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e000      	b.n	8002e82 <LL_ADC_IsEnabled+0x1a>
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
	...

08002e90 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	4b05      	ldr	r3, [pc, #20]	@ (8002eb4 <LL_ADC_REG_StartConversion+0x24>)
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	f043 0204 	orr.w	r2, r3, #4
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	7fffffc0 	.word	0x7fffffc0

08002eb8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b04      	cmp	r3, #4
 8002eca:	d101      	bne.n	8002ed0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e000      	b.n	8002ed2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 0308 	and.w	r3, r3, #8
 8002eee:	2b08      	cmp	r3, #8
 8002ef0:	d101      	bne.n	8002ef6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e000      	b.n	8002ef8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f04:	b590      	push	{r4, r7, lr}
 8002f06:	b089      	sub	sp, #36	@ 0x24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002f10:	2300      	movs	r3, #0
 8002f12:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e18f      	b.n	800323e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d109      	bne.n	8002f40 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7fd fcb7 	bl	80008a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff ff3f 	bl	8002dc8 <LL_ADC_IsDeepPowerDownEnabled>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d004      	beq.n	8002f5a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff ff25 	bl	8002da4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff ff5a 	bl	8002e18 <LL_ADC_IsInternalRegulatorEnabled>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d114      	bne.n	8002f94 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff ff3e 	bl	8002df0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f74:	4b87      	ldr	r3, [pc, #540]	@ (8003194 <HAL_ADC_Init+0x290>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	099b      	lsrs	r3, r3, #6
 8002f7a:	4a87      	ldr	r2, [pc, #540]	@ (8003198 <HAL_ADC_Init+0x294>)
 8002f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f80:	099b      	lsrs	r3, r3, #6
 8002f82:	3301      	adds	r3, #1
 8002f84:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f86:	e002      	b.n	8002f8e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1f9      	bne.n	8002f88 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff ff3d 	bl	8002e18 <LL_ADC_IsInternalRegulatorEnabled>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10d      	bne.n	8002fc0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa8:	f043 0210 	orr.w	r2, r3, #16
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fb4:	f043 0201 	orr.w	r2, r3, #1
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff ff77 	bl	8002eb8 <LL_ADC_REG_IsConversionOngoing>
 8002fca:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fd0:	f003 0310 	and.w	r3, r3, #16
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f040 8129 	bne.w	800322c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f040 8125 	bne.w	800322c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fe6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002fea:	f043 0202 	orr.w	r2, r3, #2
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff ff36 	bl	8002e68 <LL_ADC_IsEnabled>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d136      	bne.n	8003070 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a65      	ldr	r2, [pc, #404]	@ (800319c <HAL_ADC_Init+0x298>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d004      	beq.n	8003016 <HAL_ADC_Init+0x112>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a63      	ldr	r2, [pc, #396]	@ (80031a0 <HAL_ADC_Init+0x29c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d10e      	bne.n	8003034 <HAL_ADC_Init+0x130>
 8003016:	4861      	ldr	r0, [pc, #388]	@ (800319c <HAL_ADC_Init+0x298>)
 8003018:	f7ff ff26 	bl	8002e68 <LL_ADC_IsEnabled>
 800301c:	4604      	mov	r4, r0
 800301e:	4860      	ldr	r0, [pc, #384]	@ (80031a0 <HAL_ADC_Init+0x29c>)
 8003020:	f7ff ff22 	bl	8002e68 <LL_ADC_IsEnabled>
 8003024:	4603      	mov	r3, r0
 8003026:	4323      	orrs	r3, r4
 8003028:	2b00      	cmp	r3, #0
 800302a:	bf0c      	ite	eq
 800302c:	2301      	moveq	r3, #1
 800302e:	2300      	movne	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	e008      	b.n	8003046 <HAL_ADC_Init+0x142>
 8003034:	485b      	ldr	r0, [pc, #364]	@ (80031a4 <HAL_ADC_Init+0x2a0>)
 8003036:	f7ff ff17 	bl	8002e68 <LL_ADC_IsEnabled>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	bf0c      	ite	eq
 8003040:	2301      	moveq	r3, #1
 8003042:	2300      	movne	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d012      	beq.n	8003070 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a53      	ldr	r2, [pc, #332]	@ (800319c <HAL_ADC_Init+0x298>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d004      	beq.n	800305e <HAL_ADC_Init+0x15a>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a51      	ldr	r2, [pc, #324]	@ (80031a0 <HAL_ADC_Init+0x29c>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d101      	bne.n	8003062 <HAL_ADC_Init+0x15e>
 800305e:	4a52      	ldr	r2, [pc, #328]	@ (80031a8 <HAL_ADC_Init+0x2a4>)
 8003060:	e000      	b.n	8003064 <HAL_ADC_Init+0x160>
 8003062:	4a52      	ldr	r2, [pc, #328]	@ (80031ac <HAL_ADC_Init+0x2a8>)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	4619      	mov	r1, r3
 800306a:	4610      	mov	r0, r2
 800306c:	f7ff fd68 	bl	8002b40 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003070:	f7ff fd5a 	bl	8002b28 <HAL_GetREVID>
 8003074:	4603      	mov	r3, r0
 8003076:	f241 0203 	movw	r2, #4099	@ 0x1003
 800307a:	4293      	cmp	r3, r2
 800307c:	d914      	bls.n	80030a8 <HAL_ADC_Init+0x1a4>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	2b10      	cmp	r3, #16
 8003084:	d110      	bne.n	80030a8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	7d5b      	ldrb	r3, [r3, #21]
 800308a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003090:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003096:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	7f1b      	ldrb	r3, [r3, #28]
 800309c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800309e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030a0:	f043 030c 	orr.w	r3, r3, #12
 80030a4:	61bb      	str	r3, [r7, #24]
 80030a6:	e00d      	b.n	80030c4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	7d5b      	ldrb	r3, [r3, #21]
 80030ac:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030b2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80030b8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	7f1b      	ldrb	r3, [r3, #28]
 80030be:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030c0:	4313      	orrs	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	7f1b      	ldrb	r3, [r3, #28]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d106      	bne.n	80030da <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	3b01      	subs	r3, #1
 80030d2:	045b      	lsls	r3, r3, #17
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d009      	beq.n	80030f6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e6:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ee:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68da      	ldr	r2, [r3, #12]
 80030fc:	4b2c      	ldr	r3, [pc, #176]	@ (80031b0 <HAL_ADC_Init+0x2ac>)
 80030fe:	4013      	ands	r3, r2
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6812      	ldr	r2, [r2, #0]
 8003104:	69b9      	ldr	r1, [r7, #24]
 8003106:	430b      	orrs	r3, r1
 8003108:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff fed2 	bl	8002eb8 <LL_ADC_REG_IsConversionOngoing>
 8003114:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff fedf 	bl	8002ede <LL_ADC_INJ_IsConversionOngoing>
 8003120:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d15f      	bne.n	80031e8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d15c      	bne.n	80031e8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	7d1b      	ldrb	r3, [r3, #20]
 8003132:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8003138:	4313      	orrs	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	4b1c      	ldr	r3, [pc, #112]	@ (80031b4 <HAL_ADC_Init+0x2b0>)
 8003144:	4013      	ands	r3, r2
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	6812      	ldr	r2, [r2, #0]
 800314a:	69b9      	ldr	r1, [r7, #24]
 800314c:	430b      	orrs	r3, r1
 800314e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003156:	2b01      	cmp	r3, #1
 8003158:	d130      	bne.n	80031bc <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	691a      	ldr	r2, [r3, #16]
 8003166:	4b14      	ldr	r3, [pc, #80]	@ (80031b8 <HAL_ADC_Init+0x2b4>)
 8003168:	4013      	ands	r3, r2
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800316e:	3a01      	subs	r2, #1
 8003170:	0411      	lsls	r1, r2, #16
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003176:	4311      	orrs	r1, r2
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800317c:	4311      	orrs	r1, r2
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003182:	430a      	orrs	r2, r1
 8003184:	431a      	orrs	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0201 	orr.w	r2, r2, #1
 800318e:	611a      	str	r2, [r3, #16]
 8003190:	e01c      	b.n	80031cc <HAL_ADC_Init+0x2c8>
 8003192:	bf00      	nop
 8003194:	24000000 	.word	0x24000000
 8003198:	053e2d63 	.word	0x053e2d63
 800319c:	40022000 	.word	0x40022000
 80031a0:	40022100 	.word	0x40022100
 80031a4:	58026000 	.word	0x58026000
 80031a8:	40022300 	.word	0x40022300
 80031ac:	58026300 	.word	0x58026300
 80031b0:	fff0c003 	.word	0xfff0c003
 80031b4:	ffffbffc 	.word	0xffffbffc
 80031b8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	691a      	ldr	r2, [r3, #16]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0201 	bic.w	r2, r2, #1
 80031ca:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 fde2 	bl	8003dac <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d10c      	bne.n	800320a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f6:	f023 010f 	bic.w	r1, r3, #15
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	1e5a      	subs	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	631a      	str	r2, [r3, #48]	@ 0x30
 8003208:	e007      	b.n	800321a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 020f 	bic.w	r2, r2, #15
 8003218:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800321e:	f023 0303 	bic.w	r3, r3, #3
 8003222:	f043 0201 	orr.w	r2, r3, #1
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	655a      	str	r2, [r3, #84]	@ 0x54
 800322a:	e007      	b.n	800323c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003230:	f043 0210 	orr.w	r2, r3, #16
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800323c:	7ffb      	ldrb	r3, [r7, #31]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3724      	adds	r7, #36	@ 0x24
 8003242:	46bd      	mov	sp, r7
 8003244:	bd90      	pop	{r4, r7, pc}
 8003246:	bf00      	nop

08003248 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a5c      	ldr	r2, [pc, #368]	@ (80033c8 <HAL_ADC_Start+0x180>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d004      	beq.n	8003264 <HAL_ADC_Start+0x1c>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a5b      	ldr	r2, [pc, #364]	@ (80033cc <HAL_ADC_Start+0x184>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d101      	bne.n	8003268 <HAL_ADC_Start+0x20>
 8003264:	4b5a      	ldr	r3, [pc, #360]	@ (80033d0 <HAL_ADC_Start+0x188>)
 8003266:	e000      	b.n	800326a <HAL_ADC_Start+0x22>
 8003268:	4b5a      	ldr	r3, [pc, #360]	@ (80033d4 <HAL_ADC_Start+0x18c>)
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff fd7e 	bl	8002d6c <LL_ADC_GetMultimode>
 8003270:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff fe1e 	bl	8002eb8 <LL_ADC_REG_IsConversionOngoing>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	f040 809a 	bne.w	80033b8 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800328a:	2b01      	cmp	r3, #1
 800328c:	d101      	bne.n	8003292 <HAL_ADC_Start+0x4a>
 800328e:	2302      	movs	r3, #2
 8003290:	e095      	b.n	80033be <HAL_ADC_Start+0x176>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 fcfc 	bl	8003c98 <ADC_Enable>
 80032a0:	4603      	mov	r3, r0
 80032a2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80032a4:	7dfb      	ldrb	r3, [r7, #23]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f040 8081 	bne.w	80033ae <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80032b0:	4b49      	ldr	r3, [pc, #292]	@ (80033d8 <HAL_ADC_Start+0x190>)
 80032b2:	4013      	ands	r3, r2
 80032b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a42      	ldr	r2, [pc, #264]	@ (80033cc <HAL_ADC_Start+0x184>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d002      	beq.n	80032cc <HAL_ADC_Start+0x84>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	e000      	b.n	80032ce <HAL_ADC_Start+0x86>
 80032cc:	4b3e      	ldr	r3, [pc, #248]	@ (80033c8 <HAL_ADC_Start+0x180>)
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6812      	ldr	r2, [r2, #0]
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d002      	beq.n	80032dc <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d105      	bne.n	80032e8 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032e0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032f4:	d106      	bne.n	8003304 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032fa:	f023 0206 	bic.w	r2, r3, #6
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	659a      	str	r2, [r3, #88]	@ 0x58
 8003302:	e002      	b.n	800330a <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	221c      	movs	r2, #28
 8003310:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a2b      	ldr	r2, [pc, #172]	@ (80033cc <HAL_ADC_Start+0x184>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d002      	beq.n	800332a <HAL_ADC_Start+0xe2>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	e000      	b.n	800332c <HAL_ADC_Start+0xe4>
 800332a:	4b27      	ldr	r3, [pc, #156]	@ (80033c8 <HAL_ADC_Start+0x180>)
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6812      	ldr	r2, [r2, #0]
 8003330:	4293      	cmp	r3, r2
 8003332:	d008      	beq.n	8003346 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d005      	beq.n	8003346 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	2b05      	cmp	r3, #5
 800333e:	d002      	beq.n	8003346 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	2b09      	cmp	r3, #9
 8003344:	d114      	bne.n	8003370 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d007      	beq.n	8003364 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003358:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800335c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff fd91 	bl	8002e90 <LL_ADC_REG_StartConversion>
 800336e:	e025      	b.n	80033bc <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003374:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a12      	ldr	r2, [pc, #72]	@ (80033cc <HAL_ADC_Start+0x184>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d002      	beq.n	800338c <HAL_ADC_Start+0x144>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	e000      	b.n	800338e <HAL_ADC_Start+0x146>
 800338c:	4b0e      	ldr	r3, [pc, #56]	@ (80033c8 <HAL_ADC_Start+0x180>)
 800338e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00f      	beq.n	80033bc <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80033a4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	655a      	str	r2, [r3, #84]	@ 0x54
 80033ac:	e006      	b.n	80033bc <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80033b6:	e001      	b.n	80033bc <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80033b8:	2302      	movs	r3, #2
 80033ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80033bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3718      	adds	r7, #24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	40022000 	.word	0x40022000
 80033cc:	40022100 	.word	0x40022100
 80033d0:	40022300 	.word	0x40022300
 80033d4:	58026300 	.word	0x58026300
 80033d8:	fffff0fe 	.word	0xfffff0fe

080033dc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b088      	sub	sp, #32
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a72      	ldr	r2, [pc, #456]	@ (80035b4 <HAL_ADC_PollForConversion+0x1d8>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d004      	beq.n	80033fa <HAL_ADC_PollForConversion+0x1e>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a70      	ldr	r2, [pc, #448]	@ (80035b8 <HAL_ADC_PollForConversion+0x1dc>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d101      	bne.n	80033fe <HAL_ADC_PollForConversion+0x22>
 80033fa:	4b70      	ldr	r3, [pc, #448]	@ (80035bc <HAL_ADC_PollForConversion+0x1e0>)
 80033fc:	e000      	b.n	8003400 <HAL_ADC_PollForConversion+0x24>
 80033fe:	4b70      	ldr	r3, [pc, #448]	@ (80035c0 <HAL_ADC_PollForConversion+0x1e4>)
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff fcb3 	bl	8002d6c <LL_ADC_GetMultimode>
 8003406:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	2b08      	cmp	r3, #8
 800340e:	d102      	bne.n	8003416 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003410:	2308      	movs	r3, #8
 8003412:	61fb      	str	r3, [r7, #28]
 8003414:	e037      	b.n	8003486 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d005      	beq.n	8003428 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	2b05      	cmp	r3, #5
 8003420:	d002      	beq.n	8003428 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2b09      	cmp	r3, #9
 8003426:	d111      	bne.n	800344c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	d007      	beq.n	8003446 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800343a:	f043 0220 	orr.w	r2, r3, #32
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e0b1      	b.n	80035aa <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003446:	2304      	movs	r3, #4
 8003448:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800344a:	e01c      	b.n	8003486 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a58      	ldr	r2, [pc, #352]	@ (80035b4 <HAL_ADC_PollForConversion+0x1d8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d004      	beq.n	8003460 <HAL_ADC_PollForConversion+0x84>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a57      	ldr	r2, [pc, #348]	@ (80035b8 <HAL_ADC_PollForConversion+0x1dc>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d101      	bne.n	8003464 <HAL_ADC_PollForConversion+0x88>
 8003460:	4b56      	ldr	r3, [pc, #344]	@ (80035bc <HAL_ADC_PollForConversion+0x1e0>)
 8003462:	e000      	b.n	8003466 <HAL_ADC_PollForConversion+0x8a>
 8003464:	4b56      	ldr	r3, [pc, #344]	@ (80035c0 <HAL_ADC_PollForConversion+0x1e4>)
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff fc8e 	bl	8002d88 <LL_ADC_GetMultiDMATransfer>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d007      	beq.n	8003482 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003476:	f043 0220 	orr.w	r2, r3, #32
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e093      	b.n	80035aa <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003482:	2304      	movs	r3, #4
 8003484:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003486:	f7ff fb1f 	bl	8002ac8 <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800348c:	e021      	b.n	80034d2 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003494:	d01d      	beq.n	80034d2 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003496:	f7ff fb17 	bl	8002ac8 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d302      	bcc.n	80034ac <HAL_ADC_PollForConversion+0xd0>
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d112      	bne.n	80034d2 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	4013      	ands	r3, r2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10b      	bne.n	80034d2 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034be:	f043 0204 	orr.w	r2, r3, #4
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e06b      	b.n	80035aa <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	4013      	ands	r3, r2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0d6      	beq.n	800348e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff fbad 	bl	8002c50 <LL_ADC_REG_IsTriggerSourceSWStart>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d01c      	beq.n	8003536 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	7d5b      	ldrb	r3, [r3, #21]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d118      	bne.n	8003536 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	2b08      	cmp	r3, #8
 8003510:	d111      	bne.n	8003536 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003516:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003522:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d105      	bne.n	8003536 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800352e:	f043 0201 	orr.w	r2, r3, #1
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a1f      	ldr	r2, [pc, #124]	@ (80035b8 <HAL_ADC_PollForConversion+0x1dc>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d002      	beq.n	8003546 <HAL_ADC_PollForConversion+0x16a>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	e000      	b.n	8003548 <HAL_ADC_PollForConversion+0x16c>
 8003546:	4b1b      	ldr	r3, [pc, #108]	@ (80035b4 <HAL_ADC_PollForConversion+0x1d8>)
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6812      	ldr	r2, [r2, #0]
 800354c:	4293      	cmp	r3, r2
 800354e:	d008      	beq.n	8003562 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d005      	beq.n	8003562 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	2b05      	cmp	r3, #5
 800355a:	d002      	beq.n	8003562 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	2b09      	cmp	r3, #9
 8003560:	d104      	bne.n	800356c <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	61bb      	str	r3, [r7, #24]
 800356a:	e00c      	b.n	8003586 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a11      	ldr	r2, [pc, #68]	@ (80035b8 <HAL_ADC_PollForConversion+0x1dc>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d002      	beq.n	800357c <HAL_ADC_PollForConversion+0x1a0>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	e000      	b.n	800357e <HAL_ADC_PollForConversion+0x1a2>
 800357c:	4b0d      	ldr	r3, [pc, #52]	@ (80035b4 <HAL_ADC_PollForConversion+0x1d8>)
 800357e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	2b08      	cmp	r3, #8
 800358a:	d104      	bne.n	8003596 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2208      	movs	r2, #8
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	e008      	b.n	80035a8 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d103      	bne.n	80035a8 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	220c      	movs	r2, #12
 80035a6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3720      	adds	r7, #32
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40022000 	.word	0x40022000
 80035b8:	40022100 	.word	0x40022100
 80035bc:	40022300 	.word	0x40022300
 80035c0:	58026300 	.word	0x58026300

080035c4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
	...

080035e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80035e0:	b590      	push	{r4, r7, lr}
 80035e2:	b0a1      	sub	sp, #132	@ 0x84
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035ea:	2300      	movs	r3, #0
 80035ec:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80035f0:	2300      	movs	r3, #0
 80035f2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	4a65      	ldr	r2, [pc, #404]	@ (8003790 <HAL_ADC_ConfigChannel+0x1b0>)
 80035fa:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003602:	2b01      	cmp	r3, #1
 8003604:	d101      	bne.n	800360a <HAL_ADC_ConfigChannel+0x2a>
 8003606:	2302      	movs	r3, #2
 8003608:	e32e      	b.n	8003c68 <HAL_ADC_ConfigChannel+0x688>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff fc4e 	bl	8002eb8 <LL_ADC_REG_IsConversionOngoing>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	f040 8313 	bne.w	8003c4a <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	db2c      	blt.n	8003686 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003634:	2b00      	cmp	r3, #0
 8003636:	d108      	bne.n	800364a <HAL_ADC_ConfigChannel+0x6a>
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	0e9b      	lsrs	r3, r3, #26
 800363e:	f003 031f 	and.w	r3, r3, #31
 8003642:	2201      	movs	r2, #1
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	e016      	b.n	8003678 <HAL_ADC_ConfigChannel+0x98>
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003650:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003652:	fa93 f3a3 	rbit	r3, r3
 8003656:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003658:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800365a:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800365c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8003662:	2320      	movs	r3, #32
 8003664:	e003      	b.n	800366e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8003666:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003668:	fab3 f383 	clz	r3, r3
 800366c:	b2db      	uxtb	r3, r3
 800366e:	f003 031f 	and.w	r3, r3, #31
 8003672:	2201      	movs	r2, #1
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6812      	ldr	r2, [r2, #0]
 800367c:	69d1      	ldr	r1, [r2, #28]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6812      	ldr	r2, [r2, #0]
 8003682:	430b      	orrs	r3, r1
 8003684:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6818      	ldr	r0, [r3, #0]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	6859      	ldr	r1, [r3, #4]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	461a      	mov	r2, r3
 8003694:	f7ff faef 	bl	8002c76 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff fc0b 	bl	8002eb8 <LL_ADC_REG_IsConversionOngoing>
 80036a2:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff fc18 	bl	8002ede <LL_ADC_INJ_IsConversionOngoing>
 80036ae:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80036b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f040 80b8 	bne.w	8003828 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80036b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f040 80b4 	bne.w	8003828 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6818      	ldr	r0, [r3, #0]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	6819      	ldr	r1, [r3, #0]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	461a      	mov	r2, r3
 80036ce:	f7ff fafe 	bl	8002cce <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80036d2:	4b30      	ldr	r3, [pc, #192]	@ (8003794 <HAL_ADC_ConfigChannel+0x1b4>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80036da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036de:	d10b      	bne.n	80036f8 <HAL_ADC_ConfigChannel+0x118>
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	695a      	ldr	r2, [r3, #20]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	089b      	lsrs	r3, r3, #2
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	e01d      	b.n	8003734 <HAL_ADC_ConfigChannel+0x154>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	f003 0310 	and.w	r3, r3, #16
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10b      	bne.n	800371e <HAL_ADC_ConfigChannel+0x13e>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	695a      	ldr	r2, [r3, #20]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	089b      	lsrs	r3, r3, #2
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	e00a      	b.n	8003734 <HAL_ADC_ConfigChannel+0x154>
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	695a      	ldr	r2, [r3, #20]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	089b      	lsrs	r3, r3, #2
 800372a:	f003 0304 	and.w	r3, r3, #4
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	2b04      	cmp	r3, #4
 800373c:	d02c      	beq.n	8003798 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6818      	ldr	r0, [r3, #0]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	6919      	ldr	r1, [r3, #16]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800374c:	f7ff fa2c 	bl	8002ba8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6818      	ldr	r0, [r3, #0]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	6919      	ldr	r1, [r3, #16]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	7e5b      	ldrb	r3, [r3, #25]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d102      	bne.n	8003766 <HAL_ADC_ConfigChannel+0x186>
 8003760:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003764:	e000      	b.n	8003768 <HAL_ADC_ConfigChannel+0x188>
 8003766:	2300      	movs	r3, #0
 8003768:	461a      	mov	r2, r3
 800376a:	f7ff fa56 	bl	8002c1a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6818      	ldr	r0, [r3, #0]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	6919      	ldr	r1, [r3, #16]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	7e1b      	ldrb	r3, [r3, #24]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d102      	bne.n	8003784 <HAL_ADC_ConfigChannel+0x1a4>
 800377e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003782:	e000      	b.n	8003786 <HAL_ADC_ConfigChannel+0x1a6>
 8003784:	2300      	movs	r3, #0
 8003786:	461a      	mov	r2, r3
 8003788:	f7ff fa2e 	bl	8002be8 <LL_ADC_SetDataRightShift>
 800378c:	e04c      	b.n	8003828 <HAL_ADC_ConfigChannel+0x248>
 800378e:	bf00      	nop
 8003790:	47ff0000 	.word	0x47ff0000
 8003794:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800379e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	069b      	lsls	r3, r3, #26
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d107      	bne.n	80037bc <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80037ba:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	069b      	lsls	r3, r3, #26
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d107      	bne.n	80037e0 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80037de:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	069b      	lsls	r3, r3, #26
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d107      	bne.n	8003804 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003802:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800380a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	069b      	lsls	r3, r3, #26
 8003814:	429a      	cmp	r2, r3
 8003816:	d107      	bne.n	8003828 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003826:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff fb1b 	bl	8002e68 <LL_ADC_IsEnabled>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	f040 8211 	bne.w	8003c5c <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6818      	ldr	r0, [r3, #0]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	6819      	ldr	r1, [r3, #0]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	461a      	mov	r2, r3
 8003848:	f7ff fa6c 	bl	8002d24 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	4aa1      	ldr	r2, [pc, #644]	@ (8003ad8 <HAL_ADC_ConfigChannel+0x4f8>)
 8003852:	4293      	cmp	r3, r2
 8003854:	f040 812e 	bne.w	8003ab4 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10b      	bne.n	8003880 <HAL_ADC_ConfigChannel+0x2a0>
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	0e9b      	lsrs	r3, r3, #26
 800386e:	3301      	adds	r3, #1
 8003870:	f003 031f 	and.w	r3, r3, #31
 8003874:	2b09      	cmp	r3, #9
 8003876:	bf94      	ite	ls
 8003878:	2301      	movls	r3, #1
 800387a:	2300      	movhi	r3, #0
 800387c:	b2db      	uxtb	r3, r3
 800387e:	e019      	b.n	80038b4 <HAL_ADC_ConfigChannel+0x2d4>
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003886:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003888:	fa93 f3a3 	rbit	r3, r3
 800388c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800388e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003890:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003892:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003894:	2b00      	cmp	r3, #0
 8003896:	d101      	bne.n	800389c <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8003898:	2320      	movs	r3, #32
 800389a:	e003      	b.n	80038a4 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 800389c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800389e:	fab3 f383 	clz	r3, r3
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	3301      	adds	r3, #1
 80038a6:	f003 031f 	and.w	r3, r3, #31
 80038aa:	2b09      	cmp	r3, #9
 80038ac:	bf94      	ite	ls
 80038ae:	2301      	movls	r3, #1
 80038b0:	2300      	movhi	r3, #0
 80038b2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d079      	beq.n	80039ac <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d107      	bne.n	80038d4 <HAL_ADC_ConfigChannel+0x2f4>
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	0e9b      	lsrs	r3, r3, #26
 80038ca:	3301      	adds	r3, #1
 80038cc:	069b      	lsls	r3, r3, #26
 80038ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038d2:	e015      	b.n	8003900 <HAL_ADC_ConfigChannel+0x320>
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038dc:	fa93 f3a3 	rbit	r3, r3
 80038e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80038e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038e4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80038e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80038ec:	2320      	movs	r3, #32
 80038ee:	e003      	b.n	80038f8 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80038f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038f2:	fab3 f383 	clz	r3, r3
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	3301      	adds	r3, #1
 80038fa:	069b      	lsls	r3, r3, #26
 80038fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003908:	2b00      	cmp	r3, #0
 800390a:	d109      	bne.n	8003920 <HAL_ADC_ConfigChannel+0x340>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	0e9b      	lsrs	r3, r3, #26
 8003912:	3301      	adds	r3, #1
 8003914:	f003 031f 	and.w	r3, r3, #31
 8003918:	2101      	movs	r1, #1
 800391a:	fa01 f303 	lsl.w	r3, r1, r3
 800391e:	e017      	b.n	8003950 <HAL_ADC_ConfigChannel+0x370>
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003926:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003928:	fa93 f3a3 	rbit	r3, r3
 800392c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800392e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003930:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003932:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8003938:	2320      	movs	r3, #32
 800393a:	e003      	b.n	8003944 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 800393c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800393e:	fab3 f383 	clz	r3, r3
 8003942:	b2db      	uxtb	r3, r3
 8003944:	3301      	adds	r3, #1
 8003946:	f003 031f 	and.w	r3, r3, #31
 800394a:	2101      	movs	r1, #1
 800394c:	fa01 f303 	lsl.w	r3, r1, r3
 8003950:	ea42 0103 	orr.w	r1, r2, r3
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10a      	bne.n	8003976 <HAL_ADC_ConfigChannel+0x396>
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	0e9b      	lsrs	r3, r3, #26
 8003966:	3301      	adds	r3, #1
 8003968:	f003 021f 	and.w	r2, r3, #31
 800396c:	4613      	mov	r3, r2
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	4413      	add	r3, r2
 8003972:	051b      	lsls	r3, r3, #20
 8003974:	e018      	b.n	80039a8 <HAL_ADC_ConfigChannel+0x3c8>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800397e:	fa93 f3a3 	rbit	r3, r3
 8003982:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003986:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800398e:	2320      	movs	r3, #32
 8003990:	e003      	b.n	800399a <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8003992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003994:	fab3 f383 	clz	r3, r3
 8003998:	b2db      	uxtb	r3, r3
 800399a:	3301      	adds	r3, #1
 800399c:	f003 021f 	and.w	r2, r3, #31
 80039a0:	4613      	mov	r3, r2
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	4413      	add	r3, r2
 80039a6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039a8:	430b      	orrs	r3, r1
 80039aa:	e07e      	b.n	8003aaa <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d107      	bne.n	80039c8 <HAL_ADC_ConfigChannel+0x3e8>
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	0e9b      	lsrs	r3, r3, #26
 80039be:	3301      	adds	r3, #1
 80039c0:	069b      	lsls	r3, r3, #26
 80039c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80039c6:	e015      	b.n	80039f4 <HAL_ADC_ConfigChannel+0x414>
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d0:	fa93 f3a3 	rbit	r3, r3
 80039d4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80039d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80039da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d101      	bne.n	80039e4 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80039e0:	2320      	movs	r3, #32
 80039e2:	e003      	b.n	80039ec <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80039e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039e6:	fab3 f383 	clz	r3, r3
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	3301      	adds	r3, #1
 80039ee:	069b      	lsls	r3, r3, #26
 80039f0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d109      	bne.n	8003a14 <HAL_ADC_ConfigChannel+0x434>
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	0e9b      	lsrs	r3, r3, #26
 8003a06:	3301      	adds	r3, #1
 8003a08:	f003 031f 	and.w	r3, r3, #31
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a12:	e017      	b.n	8003a44 <HAL_ADC_ConfigChannel+0x464>
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	fa93 f3a3 	rbit	r3, r3
 8003a20:	61bb      	str	r3, [r7, #24]
  return result;
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8003a2c:	2320      	movs	r3, #32
 8003a2e:	e003      	b.n	8003a38 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8003a30:	6a3b      	ldr	r3, [r7, #32]
 8003a32:	fab3 f383 	clz	r3, r3
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	3301      	adds	r3, #1
 8003a3a:	f003 031f 	and.w	r3, r3, #31
 8003a3e:	2101      	movs	r1, #1
 8003a40:	fa01 f303 	lsl.w	r3, r1, r3
 8003a44:	ea42 0103 	orr.w	r1, r2, r3
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10d      	bne.n	8003a70 <HAL_ADC_ConfigChannel+0x490>
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	0e9b      	lsrs	r3, r3, #26
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	f003 021f 	and.w	r2, r3, #31
 8003a60:	4613      	mov	r3, r2
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	4413      	add	r3, r2
 8003a66:	3b1e      	subs	r3, #30
 8003a68:	051b      	lsls	r3, r3, #20
 8003a6a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003a6e:	e01b      	b.n	8003aa8 <HAL_ADC_ConfigChannel+0x4c8>
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	fa93 f3a3 	rbit	r3, r3
 8003a7c:	60fb      	str	r3, [r7, #12]
  return result;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003a88:	2320      	movs	r3, #32
 8003a8a:	e003      	b.n	8003a94 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	fab3 f383 	clz	r3, r3
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	3301      	adds	r3, #1
 8003a96:	f003 021f 	and.w	r2, r3, #31
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	4413      	add	r3, r2
 8003aa0:	3b1e      	subs	r3, #30
 8003aa2:	051b      	lsls	r3, r3, #20
 8003aa4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003aa8:	430b      	orrs	r3, r1
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	6892      	ldr	r2, [r2, #8]
 8003aae:	4619      	mov	r1, r3
 8003ab0:	f7ff f90d 	bl	8002cce <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f280 80cf 	bge.w	8003c5c <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a06      	ldr	r2, [pc, #24]	@ (8003adc <HAL_ADC_ConfigChannel+0x4fc>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d004      	beq.n	8003ad2 <HAL_ADC_ConfigChannel+0x4f2>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a04      	ldr	r2, [pc, #16]	@ (8003ae0 <HAL_ADC_ConfigChannel+0x500>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d10a      	bne.n	8003ae8 <HAL_ADC_ConfigChannel+0x508>
 8003ad2:	4b04      	ldr	r3, [pc, #16]	@ (8003ae4 <HAL_ADC_ConfigChannel+0x504>)
 8003ad4:	e009      	b.n	8003aea <HAL_ADC_ConfigChannel+0x50a>
 8003ad6:	bf00      	nop
 8003ad8:	47ff0000 	.word	0x47ff0000
 8003adc:	40022000 	.word	0x40022000
 8003ae0:	40022100 	.word	0x40022100
 8003ae4:	40022300 	.word	0x40022300
 8003ae8:	4b61      	ldr	r3, [pc, #388]	@ (8003c70 <HAL_ADC_ConfigChannel+0x690>)
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff f84e 	bl	8002b8c <LL_ADC_GetCommonPathInternalCh>
 8003af0:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a5f      	ldr	r2, [pc, #380]	@ (8003c74 <HAL_ADC_ConfigChannel+0x694>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d004      	beq.n	8003b06 <HAL_ADC_ConfigChannel+0x526>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a5d      	ldr	r2, [pc, #372]	@ (8003c78 <HAL_ADC_ConfigChannel+0x698>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d10e      	bne.n	8003b24 <HAL_ADC_ConfigChannel+0x544>
 8003b06:	485b      	ldr	r0, [pc, #364]	@ (8003c74 <HAL_ADC_ConfigChannel+0x694>)
 8003b08:	f7ff f9ae 	bl	8002e68 <LL_ADC_IsEnabled>
 8003b0c:	4604      	mov	r4, r0
 8003b0e:	485a      	ldr	r0, [pc, #360]	@ (8003c78 <HAL_ADC_ConfigChannel+0x698>)
 8003b10:	f7ff f9aa 	bl	8002e68 <LL_ADC_IsEnabled>
 8003b14:	4603      	mov	r3, r0
 8003b16:	4323      	orrs	r3, r4
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	bf0c      	ite	eq
 8003b1c:	2301      	moveq	r3, #1
 8003b1e:	2300      	movne	r3, #0
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	e008      	b.n	8003b36 <HAL_ADC_ConfigChannel+0x556>
 8003b24:	4855      	ldr	r0, [pc, #340]	@ (8003c7c <HAL_ADC_ConfigChannel+0x69c>)
 8003b26:	f7ff f99f 	bl	8002e68 <LL_ADC_IsEnabled>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	bf0c      	ite	eq
 8003b30:	2301      	moveq	r3, #1
 8003b32:	2300      	movne	r3, #0
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d07d      	beq.n	8003c36 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a50      	ldr	r2, [pc, #320]	@ (8003c80 <HAL_ADC_ConfigChannel+0x6a0>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d130      	bne.n	8003ba6 <HAL_ADC_ConfigChannel+0x5c6>
 8003b44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d12b      	bne.n	8003ba6 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a4a      	ldr	r2, [pc, #296]	@ (8003c7c <HAL_ADC_ConfigChannel+0x69c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	f040 8081 	bne.w	8003c5c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a45      	ldr	r2, [pc, #276]	@ (8003c74 <HAL_ADC_ConfigChannel+0x694>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d004      	beq.n	8003b6e <HAL_ADC_ConfigChannel+0x58e>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a43      	ldr	r2, [pc, #268]	@ (8003c78 <HAL_ADC_ConfigChannel+0x698>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d101      	bne.n	8003b72 <HAL_ADC_ConfigChannel+0x592>
 8003b6e:	4a45      	ldr	r2, [pc, #276]	@ (8003c84 <HAL_ADC_ConfigChannel+0x6a4>)
 8003b70:	e000      	b.n	8003b74 <HAL_ADC_ConfigChannel+0x594>
 8003b72:	4a3f      	ldr	r2, [pc, #252]	@ (8003c70 <HAL_ADC_ConfigChannel+0x690>)
 8003b74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b76:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	4610      	mov	r0, r2
 8003b7e:	f7fe fff2 	bl	8002b66 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b82:	4b41      	ldr	r3, [pc, #260]	@ (8003c88 <HAL_ADC_ConfigChannel+0x6a8>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	099b      	lsrs	r3, r3, #6
 8003b88:	4a40      	ldr	r2, [pc, #256]	@ (8003c8c <HAL_ADC_ConfigChannel+0x6ac>)
 8003b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8e:	099b      	lsrs	r3, r3, #6
 8003b90:	3301      	adds	r3, #1
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003b96:	e002      	b.n	8003b9e <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1f9      	bne.n	8003b98 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ba4:	e05a      	b.n	8003c5c <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a39      	ldr	r2, [pc, #228]	@ (8003c90 <HAL_ADC_ConfigChannel+0x6b0>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d11e      	bne.n	8003bee <HAL_ADC_ConfigChannel+0x60e>
 8003bb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bb2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d119      	bne.n	8003bee <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a2f      	ldr	r2, [pc, #188]	@ (8003c7c <HAL_ADC_ConfigChannel+0x69c>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d14b      	bne.n	8003c5c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a2a      	ldr	r2, [pc, #168]	@ (8003c74 <HAL_ADC_ConfigChannel+0x694>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d004      	beq.n	8003bd8 <HAL_ADC_ConfigChannel+0x5f8>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a29      	ldr	r2, [pc, #164]	@ (8003c78 <HAL_ADC_ConfigChannel+0x698>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d101      	bne.n	8003bdc <HAL_ADC_ConfigChannel+0x5fc>
 8003bd8:	4a2a      	ldr	r2, [pc, #168]	@ (8003c84 <HAL_ADC_ConfigChannel+0x6a4>)
 8003bda:	e000      	b.n	8003bde <HAL_ADC_ConfigChannel+0x5fe>
 8003bdc:	4a24      	ldr	r2, [pc, #144]	@ (8003c70 <HAL_ADC_ConfigChannel+0x690>)
 8003bde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003be0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003be4:	4619      	mov	r1, r3
 8003be6:	4610      	mov	r0, r2
 8003be8:	f7fe ffbd 	bl	8002b66 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003bec:	e036      	b.n	8003c5c <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a28      	ldr	r2, [pc, #160]	@ (8003c94 <HAL_ADC_ConfigChannel+0x6b4>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d131      	bne.n	8003c5c <HAL_ADC_ConfigChannel+0x67c>
 8003bf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d12c      	bne.n	8003c5c <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a1d      	ldr	r2, [pc, #116]	@ (8003c7c <HAL_ADC_ConfigChannel+0x69c>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d127      	bne.n	8003c5c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a18      	ldr	r2, [pc, #96]	@ (8003c74 <HAL_ADC_ConfigChannel+0x694>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d004      	beq.n	8003c20 <HAL_ADC_ConfigChannel+0x640>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a17      	ldr	r2, [pc, #92]	@ (8003c78 <HAL_ADC_ConfigChannel+0x698>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d101      	bne.n	8003c24 <HAL_ADC_ConfigChannel+0x644>
 8003c20:	4a18      	ldr	r2, [pc, #96]	@ (8003c84 <HAL_ADC_ConfigChannel+0x6a4>)
 8003c22:	e000      	b.n	8003c26 <HAL_ADC_ConfigChannel+0x646>
 8003c24:	4a12      	ldr	r2, [pc, #72]	@ (8003c70 <HAL_ADC_ConfigChannel+0x690>)
 8003c26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c28:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4610      	mov	r0, r2
 8003c30:	f7fe ff99 	bl	8002b66 <LL_ADC_SetCommonPathInternalCh>
 8003c34:	e012      	b.n	8003c5c <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c3a:	f043 0220 	orr.w	r2, r3, #32
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003c48:	e008      	b.n	8003c5c <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c4e:	f043 0220 	orr.w	r2, r3, #32
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003c64:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3784      	adds	r7, #132	@ 0x84
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd90      	pop	{r4, r7, pc}
 8003c70:	58026300 	.word	0x58026300
 8003c74:	40022000 	.word	0x40022000
 8003c78:	40022100 	.word	0x40022100
 8003c7c:	58026000 	.word	0x58026000
 8003c80:	cb840000 	.word	0xcb840000
 8003c84:	40022300 	.word	0x40022300
 8003c88:	24000000 	.word	0x24000000
 8003c8c:	053e2d63 	.word	0x053e2d63
 8003c90:	c7520000 	.word	0xc7520000
 8003c94:	cfb80000 	.word	0xcfb80000

08003c98 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7ff f8df 	bl	8002e68 <LL_ADC_IsEnabled>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d16e      	bne.n	8003d8e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689a      	ldr	r2, [r3, #8]
 8003cb6:	4b38      	ldr	r3, [pc, #224]	@ (8003d98 <ADC_Enable+0x100>)
 8003cb8:	4013      	ands	r3, r2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00d      	beq.n	8003cda <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cc2:	f043 0210 	orr.w	r2, r3, #16
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cce:	f043 0201 	orr.w	r2, r3, #1
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e05a      	b.n	8003d90 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7ff f8ae 	bl	8002e40 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003ce4:	f7fe fef0 	bl	8002ac8 <HAL_GetTick>
 8003ce8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a2b      	ldr	r2, [pc, #172]	@ (8003d9c <ADC_Enable+0x104>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d004      	beq.n	8003cfe <ADC_Enable+0x66>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a29      	ldr	r2, [pc, #164]	@ (8003da0 <ADC_Enable+0x108>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d101      	bne.n	8003d02 <ADC_Enable+0x6a>
 8003cfe:	4b29      	ldr	r3, [pc, #164]	@ (8003da4 <ADC_Enable+0x10c>)
 8003d00:	e000      	b.n	8003d04 <ADC_Enable+0x6c>
 8003d02:	4b29      	ldr	r3, [pc, #164]	@ (8003da8 <ADC_Enable+0x110>)
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff f831 	bl	8002d6c <LL_ADC_GetMultimode>
 8003d0a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a23      	ldr	r2, [pc, #140]	@ (8003da0 <ADC_Enable+0x108>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d002      	beq.n	8003d1c <ADC_Enable+0x84>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	e000      	b.n	8003d1e <ADC_Enable+0x86>
 8003d1c:	4b1f      	ldr	r3, [pc, #124]	@ (8003d9c <ADC_Enable+0x104>)
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	6812      	ldr	r2, [r2, #0]
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d02c      	beq.n	8003d80 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d130      	bne.n	8003d8e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d2c:	e028      	b.n	8003d80 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7ff f898 	bl	8002e68 <LL_ADC_IsEnabled>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d104      	bne.n	8003d48 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7ff f87c 	bl	8002e40 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d48:	f7fe febe 	bl	8002ac8 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d914      	bls.n	8003d80 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d00d      	beq.n	8003d80 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d68:	f043 0210 	orr.w	r2, r3, #16
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d74:	f043 0201 	orr.w	r2, r3, #1
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e007      	b.n	8003d90 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d1cf      	bne.n	8003d2e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	8000003f 	.word	0x8000003f
 8003d9c:	40022000 	.word	0x40022000
 8003da0:	40022100 	.word	0x40022100
 8003da4:	40022300 	.word	0x40022300
 8003da8:	58026300 	.word	0x58026300

08003dac <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a7a      	ldr	r2, [pc, #488]	@ (8003fa4 <ADC_ConfigureBoostMode+0x1f8>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d004      	beq.n	8003dc8 <ADC_ConfigureBoostMode+0x1c>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a79      	ldr	r2, [pc, #484]	@ (8003fa8 <ADC_ConfigureBoostMode+0x1fc>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d109      	bne.n	8003ddc <ADC_ConfigureBoostMode+0x30>
 8003dc8:	4b78      	ldr	r3, [pc, #480]	@ (8003fac <ADC_ConfigureBoostMode+0x200>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	bf14      	ite	ne
 8003dd4:	2301      	movne	r3, #1
 8003dd6:	2300      	moveq	r3, #0
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	e008      	b.n	8003dee <ADC_ConfigureBoostMode+0x42>
 8003ddc:	4b74      	ldr	r3, [pc, #464]	@ (8003fb0 <ADC_ConfigureBoostMode+0x204>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	bf14      	ite	ne
 8003de8:	2301      	movne	r3, #1
 8003dea:	2300      	moveq	r3, #0
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d01c      	beq.n	8003e2c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003df2:	f005 f8fb 	bl	8008fec <HAL_RCC_GetHCLKFreq>
 8003df6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e00:	d010      	beq.n	8003e24 <ADC_ConfigureBoostMode+0x78>
 8003e02:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e06:	d873      	bhi.n	8003ef0 <ADC_ConfigureBoostMode+0x144>
 8003e08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e0c:	d002      	beq.n	8003e14 <ADC_ConfigureBoostMode+0x68>
 8003e0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e12:	d16d      	bne.n	8003ef0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	0c1b      	lsrs	r3, r3, #16
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e20:	60fb      	str	r3, [r7, #12]
        break;
 8003e22:	e068      	b.n	8003ef6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	089b      	lsrs	r3, r3, #2
 8003e28:	60fb      	str	r3, [r7, #12]
        break;
 8003e2a:	e064      	b.n	8003ef6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003e2c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003e30:	f04f 0100 	mov.w	r1, #0
 8003e34:	f006 fb40 	bl	800a4b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003e38:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003e42:	d051      	beq.n	8003ee8 <ADC_ConfigureBoostMode+0x13c>
 8003e44:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003e48:	d854      	bhi.n	8003ef4 <ADC_ConfigureBoostMode+0x148>
 8003e4a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003e4e:	d047      	beq.n	8003ee0 <ADC_ConfigureBoostMode+0x134>
 8003e50:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003e54:	d84e      	bhi.n	8003ef4 <ADC_ConfigureBoostMode+0x148>
 8003e56:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003e5a:	d03d      	beq.n	8003ed8 <ADC_ConfigureBoostMode+0x12c>
 8003e5c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003e60:	d848      	bhi.n	8003ef4 <ADC_ConfigureBoostMode+0x148>
 8003e62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e66:	d033      	beq.n	8003ed0 <ADC_ConfigureBoostMode+0x124>
 8003e68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e6c:	d842      	bhi.n	8003ef4 <ADC_ConfigureBoostMode+0x148>
 8003e6e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003e72:	d029      	beq.n	8003ec8 <ADC_ConfigureBoostMode+0x11c>
 8003e74:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003e78:	d83c      	bhi.n	8003ef4 <ADC_ConfigureBoostMode+0x148>
 8003e7a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003e7e:	d01a      	beq.n	8003eb6 <ADC_ConfigureBoostMode+0x10a>
 8003e80:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003e84:	d836      	bhi.n	8003ef4 <ADC_ConfigureBoostMode+0x148>
 8003e86:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003e8a:	d014      	beq.n	8003eb6 <ADC_ConfigureBoostMode+0x10a>
 8003e8c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003e90:	d830      	bhi.n	8003ef4 <ADC_ConfigureBoostMode+0x148>
 8003e92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e96:	d00e      	beq.n	8003eb6 <ADC_ConfigureBoostMode+0x10a>
 8003e98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e9c:	d82a      	bhi.n	8003ef4 <ADC_ConfigureBoostMode+0x148>
 8003e9e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003ea2:	d008      	beq.n	8003eb6 <ADC_ConfigureBoostMode+0x10a>
 8003ea4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003ea8:	d824      	bhi.n	8003ef4 <ADC_ConfigureBoostMode+0x148>
 8003eaa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003eae:	d002      	beq.n	8003eb6 <ADC_ConfigureBoostMode+0x10a>
 8003eb0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003eb4:	d11e      	bne.n	8003ef4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	0c9b      	lsrs	r3, r3, #18
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec4:	60fb      	str	r3, [r7, #12]
        break;
 8003ec6:	e016      	b.n	8003ef6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	091b      	lsrs	r3, r3, #4
 8003ecc:	60fb      	str	r3, [r7, #12]
        break;
 8003ece:	e012      	b.n	8003ef6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	095b      	lsrs	r3, r3, #5
 8003ed4:	60fb      	str	r3, [r7, #12]
        break;
 8003ed6:	e00e      	b.n	8003ef6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	099b      	lsrs	r3, r3, #6
 8003edc:	60fb      	str	r3, [r7, #12]
        break;
 8003ede:	e00a      	b.n	8003ef6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	09db      	lsrs	r3, r3, #7
 8003ee4:	60fb      	str	r3, [r7, #12]
        break;
 8003ee6:	e006      	b.n	8003ef6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	0a1b      	lsrs	r3, r3, #8
 8003eec:	60fb      	str	r3, [r7, #12]
        break;
 8003eee:	e002      	b.n	8003ef6 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003ef0:	bf00      	nop
 8003ef2:	e000      	b.n	8003ef6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003ef4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003ef6:	f7fe fe17 	bl	8002b28 <HAL_GetREVID>
 8003efa:	4603      	mov	r3, r0
 8003efc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d815      	bhi.n	8003f30 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4a2b      	ldr	r2, [pc, #172]	@ (8003fb4 <ADC_ConfigureBoostMode+0x208>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d908      	bls.n	8003f1e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689a      	ldr	r2, [r3, #8]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f1a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003f1c:	e03e      	b.n	8003f9c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f2c:	609a      	str	r2, [r3, #8]
}
 8003f2e:	e035      	b.n	8003f9c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	085b      	lsrs	r3, r3, #1
 8003f34:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	4a1f      	ldr	r2, [pc, #124]	@ (8003fb8 <ADC_ConfigureBoostMode+0x20c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d808      	bhi.n	8003f50 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003f4c:	609a      	str	r2, [r3, #8]
}
 8003f4e:	e025      	b.n	8003f9c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4a1a      	ldr	r2, [pc, #104]	@ (8003fbc <ADC_ConfigureBoostMode+0x210>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d80a      	bhi.n	8003f6e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f6a:	609a      	str	r2, [r3, #8]
}
 8003f6c:	e016      	b.n	8003f9c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	4a13      	ldr	r2, [pc, #76]	@ (8003fc0 <ADC_ConfigureBoostMode+0x214>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d80a      	bhi.n	8003f8c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f88:	609a      	str	r2, [r3, #8]
}
 8003f8a:	e007      	b.n	8003f9c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689a      	ldr	r2, [r3, #8]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003f9a:	609a      	str	r2, [r3, #8]
}
 8003f9c:	bf00      	nop
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	40022000 	.word	0x40022000
 8003fa8:	40022100 	.word	0x40022100
 8003fac:	40022300 	.word	0x40022300
 8003fb0:	58026300 	.word	0x58026300
 8003fb4:	01312d00 	.word	0x01312d00
 8003fb8:	005f5e10 	.word	0x005f5e10
 8003fbc:	00bebc20 	.word	0x00bebc20
 8003fc0:	017d7840 	.word	0x017d7840

08003fc4 <LL_ADC_IsEnabled>:
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d101      	bne.n	8003fdc <LL_ADC_IsEnabled+0x18>
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e000      	b.n	8003fde <LL_ADC_IsEnabled+0x1a>
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <LL_ADC_REG_IsConversionOngoing>:
{
 8003fea:	b480      	push	{r7}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f003 0304 	and.w	r3, r3, #4
 8003ffa:	2b04      	cmp	r3, #4
 8003ffc:	d101      	bne.n	8004002 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ffe:	2301      	movs	r3, #1
 8004000:	e000      	b.n	8004004 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004010:	b590      	push	{r4, r7, lr}
 8004012:	b09f      	sub	sp, #124	@ 0x7c
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800401a:	2300      	movs	r3, #0
 800401c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004026:	2b01      	cmp	r3, #1
 8004028:	d101      	bne.n	800402e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800402a:	2302      	movs	r3, #2
 800402c:	e0be      	b.n	80041ac <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004036:	2300      	movs	r3, #0
 8004038:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800403a:	2300      	movs	r3, #0
 800403c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a5c      	ldr	r2, [pc, #368]	@ (80041b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d102      	bne.n	800404e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004048:	4b5b      	ldr	r3, [pc, #364]	@ (80041b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800404a:	60bb      	str	r3, [r7, #8]
 800404c:	e001      	b.n	8004052 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800404e:	2300      	movs	r3, #0
 8004050:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10b      	bne.n	8004070 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800405c:	f043 0220 	orr.w	r2, r3, #32
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e09d      	b.n	80041ac <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	4618      	mov	r0, r3
 8004074:	f7ff ffb9 	bl	8003fea <LL_ADC_REG_IsConversionOngoing>
 8004078:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4618      	mov	r0, r3
 8004080:	f7ff ffb3 	bl	8003fea <LL_ADC_REG_IsConversionOngoing>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d17f      	bne.n	800418a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800408a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800408c:	2b00      	cmp	r3, #0
 800408e:	d17c      	bne.n	800418a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a47      	ldr	r2, [pc, #284]	@ (80041b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d004      	beq.n	80040a4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a46      	ldr	r2, [pc, #280]	@ (80041b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d101      	bne.n	80040a8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80040a4:	4b45      	ldr	r3, [pc, #276]	@ (80041bc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80040a6:	e000      	b.n	80040aa <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80040a8:	4b45      	ldr	r3, [pc, #276]	@ (80041c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80040aa:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d039      	beq.n	8004128 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80040b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	431a      	orrs	r2, r3
 80040c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040c4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a3a      	ldr	r2, [pc, #232]	@ (80041b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d004      	beq.n	80040da <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a38      	ldr	r2, [pc, #224]	@ (80041b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d10e      	bne.n	80040f8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80040da:	4836      	ldr	r0, [pc, #216]	@ (80041b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80040dc:	f7ff ff72 	bl	8003fc4 <LL_ADC_IsEnabled>
 80040e0:	4604      	mov	r4, r0
 80040e2:	4835      	ldr	r0, [pc, #212]	@ (80041b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040e4:	f7ff ff6e 	bl	8003fc4 <LL_ADC_IsEnabled>
 80040e8:	4603      	mov	r3, r0
 80040ea:	4323      	orrs	r3, r4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	bf0c      	ite	eq
 80040f0:	2301      	moveq	r3, #1
 80040f2:	2300      	movne	r3, #0
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	e008      	b.n	800410a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80040f8:	4832      	ldr	r0, [pc, #200]	@ (80041c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80040fa:	f7ff ff63 	bl	8003fc4 <LL_ADC_IsEnabled>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	bf0c      	ite	eq
 8004104:	2301      	moveq	r3, #1
 8004106:	2300      	movne	r3, #0
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d047      	beq.n	800419e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800410e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004110:	689a      	ldr	r2, [r3, #8]
 8004112:	4b2d      	ldr	r3, [pc, #180]	@ (80041c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004114:	4013      	ands	r3, r2
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	6811      	ldr	r1, [r2, #0]
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	6892      	ldr	r2, [r2, #8]
 800411e:	430a      	orrs	r2, r1
 8004120:	431a      	orrs	r2, r3
 8004122:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004124:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004126:	e03a      	b.n	800419e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004128:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004130:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004132:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a1e      	ldr	r2, [pc, #120]	@ (80041b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d004      	beq.n	8004148 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a1d      	ldr	r2, [pc, #116]	@ (80041b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d10e      	bne.n	8004166 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004148:	481a      	ldr	r0, [pc, #104]	@ (80041b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800414a:	f7ff ff3b 	bl	8003fc4 <LL_ADC_IsEnabled>
 800414e:	4604      	mov	r4, r0
 8004150:	4819      	ldr	r0, [pc, #100]	@ (80041b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004152:	f7ff ff37 	bl	8003fc4 <LL_ADC_IsEnabled>
 8004156:	4603      	mov	r3, r0
 8004158:	4323      	orrs	r3, r4
 800415a:	2b00      	cmp	r3, #0
 800415c:	bf0c      	ite	eq
 800415e:	2301      	moveq	r3, #1
 8004160:	2300      	movne	r3, #0
 8004162:	b2db      	uxtb	r3, r3
 8004164:	e008      	b.n	8004178 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004166:	4817      	ldr	r0, [pc, #92]	@ (80041c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004168:	f7ff ff2c 	bl	8003fc4 <LL_ADC_IsEnabled>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	bf0c      	ite	eq
 8004172:	2301      	moveq	r3, #1
 8004174:	2300      	movne	r3, #0
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	d010      	beq.n	800419e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800417c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800417e:	689a      	ldr	r2, [r3, #8]
 8004180:	4b11      	ldr	r3, [pc, #68]	@ (80041c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004182:	4013      	ands	r3, r2
 8004184:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004186:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004188:	e009      	b.n	800419e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800418e:	f043 0220 	orr.w	r2, r3, #32
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800419c:	e000      	b.n	80041a0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800419e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80041a8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	377c      	adds	r7, #124	@ 0x7c
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd90      	pop	{r4, r7, pc}
 80041b4:	40022000 	.word	0x40022000
 80041b8:	40022100 	.word	0x40022100
 80041bc:	40022300 	.word	0x40022300
 80041c0:	58026300 	.word	0x58026300
 80041c4:	58026000 	.word	0x58026000
 80041c8:	fffff0e0 	.word	0xfffff0e0

080041cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f003 0307 	and.w	r3, r3, #7
 80041da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041dc:	4b0b      	ldr	r3, [pc, #44]	@ (800420c <__NVIC_SetPriorityGrouping+0x40>)
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80041e8:	4013      	ands	r3, r2
 80041ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80041f4:	4b06      	ldr	r3, [pc, #24]	@ (8004210 <__NVIC_SetPriorityGrouping+0x44>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041fa:	4a04      	ldr	r2, [pc, #16]	@ (800420c <__NVIC_SetPriorityGrouping+0x40>)
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	60d3      	str	r3, [r2, #12]
}
 8004200:	bf00      	nop
 8004202:	3714      	adds	r7, #20
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	e000ed00 	.word	0xe000ed00
 8004210:	05fa0000 	.word	0x05fa0000

08004214 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004218:	4b04      	ldr	r3, [pc, #16]	@ (800422c <__NVIC_GetPriorityGrouping+0x18>)
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	0a1b      	lsrs	r3, r3, #8
 800421e:	f003 0307 	and.w	r3, r3, #7
}
 8004222:	4618      	mov	r0, r3
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	e000ed00 	.word	0xe000ed00

08004230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	4603      	mov	r3, r0
 8004238:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800423a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800423e:	2b00      	cmp	r3, #0
 8004240:	db0b      	blt.n	800425a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004242:	88fb      	ldrh	r3, [r7, #6]
 8004244:	f003 021f 	and.w	r2, r3, #31
 8004248:	4907      	ldr	r1, [pc, #28]	@ (8004268 <__NVIC_EnableIRQ+0x38>)
 800424a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800424e:	095b      	lsrs	r3, r3, #5
 8004250:	2001      	movs	r0, #1
 8004252:	fa00 f202 	lsl.w	r2, r0, r2
 8004256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800425a:	bf00      	nop
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	e000e100 	.word	0xe000e100

0800426c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	4603      	mov	r3, r0
 8004274:	6039      	str	r1, [r7, #0]
 8004276:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004278:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800427c:	2b00      	cmp	r3, #0
 800427e:	db0a      	blt.n	8004296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	b2da      	uxtb	r2, r3
 8004284:	490c      	ldr	r1, [pc, #48]	@ (80042b8 <__NVIC_SetPriority+0x4c>)
 8004286:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800428a:	0112      	lsls	r2, r2, #4
 800428c:	b2d2      	uxtb	r2, r2
 800428e:	440b      	add	r3, r1
 8004290:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004294:	e00a      	b.n	80042ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	b2da      	uxtb	r2, r3
 800429a:	4908      	ldr	r1, [pc, #32]	@ (80042bc <__NVIC_SetPriority+0x50>)
 800429c:	88fb      	ldrh	r3, [r7, #6]
 800429e:	f003 030f 	and.w	r3, r3, #15
 80042a2:	3b04      	subs	r3, #4
 80042a4:	0112      	lsls	r2, r2, #4
 80042a6:	b2d2      	uxtb	r2, r2
 80042a8:	440b      	add	r3, r1
 80042aa:	761a      	strb	r2, [r3, #24]
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	e000e100 	.word	0xe000e100
 80042bc:	e000ed00 	.word	0xe000ed00

080042c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b089      	sub	sp, #36	@ 0x24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f003 0307 	and.w	r3, r3, #7
 80042d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	f1c3 0307 	rsb	r3, r3, #7
 80042da:	2b04      	cmp	r3, #4
 80042dc:	bf28      	it	cs
 80042de:	2304      	movcs	r3, #4
 80042e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	3304      	adds	r3, #4
 80042e6:	2b06      	cmp	r3, #6
 80042e8:	d902      	bls.n	80042f0 <NVIC_EncodePriority+0x30>
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	3b03      	subs	r3, #3
 80042ee:	e000      	b.n	80042f2 <NVIC_EncodePriority+0x32>
 80042f0:	2300      	movs	r3, #0
 80042f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042f4:	f04f 32ff 	mov.w	r2, #4294967295
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	fa02 f303 	lsl.w	r3, r2, r3
 80042fe:	43da      	mvns	r2, r3
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	401a      	ands	r2, r3
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004308:	f04f 31ff 	mov.w	r1, #4294967295
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	fa01 f303 	lsl.w	r3, r1, r3
 8004312:	43d9      	mvns	r1, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004318:	4313      	orrs	r3, r2
         );
}
 800431a:	4618      	mov	r0, r3
 800431c:	3724      	adds	r7, #36	@ 0x24
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
	...

08004328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3b01      	subs	r3, #1
 8004334:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004338:	d301      	bcc.n	800433e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800433a:	2301      	movs	r3, #1
 800433c:	e00f      	b.n	800435e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800433e:	4a0a      	ldr	r2, [pc, #40]	@ (8004368 <SysTick_Config+0x40>)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3b01      	subs	r3, #1
 8004344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004346:	210f      	movs	r1, #15
 8004348:	f04f 30ff 	mov.w	r0, #4294967295
 800434c:	f7ff ff8e 	bl	800426c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004350:	4b05      	ldr	r3, [pc, #20]	@ (8004368 <SysTick_Config+0x40>)
 8004352:	2200      	movs	r2, #0
 8004354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004356:	4b04      	ldr	r3, [pc, #16]	@ (8004368 <SysTick_Config+0x40>)
 8004358:	2207      	movs	r2, #7
 800435a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	e000e010 	.word	0xe000e010

0800436c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7ff ff29 	bl	80041cc <__NVIC_SetPriorityGrouping>
}
 800437a:	bf00      	nop
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b086      	sub	sp, #24
 8004386:	af00      	add	r7, sp, #0
 8004388:	4603      	mov	r3, r0
 800438a:	60b9      	str	r1, [r7, #8]
 800438c:	607a      	str	r2, [r7, #4]
 800438e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004390:	f7ff ff40 	bl	8004214 <__NVIC_GetPriorityGrouping>
 8004394:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	68b9      	ldr	r1, [r7, #8]
 800439a:	6978      	ldr	r0, [r7, #20]
 800439c:	f7ff ff90 	bl	80042c0 <NVIC_EncodePriority>
 80043a0:	4602      	mov	r2, r0
 80043a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80043a6:	4611      	mov	r1, r2
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7ff ff5f 	bl	800426c <__NVIC_SetPriority>
}
 80043ae:	bf00      	nop
 80043b0:	3718      	adds	r7, #24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b082      	sub	sp, #8
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	4603      	mov	r3, r0
 80043be:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7ff ff33 	bl	8004230 <__NVIC_EnableIRQ>
}
 80043ca:	bf00      	nop
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b082      	sub	sp, #8
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7ff ffa4 	bl	8004328 <SysTick_Config>
 80043e0:	4603      	mov	r3, r0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
	...

080043ec <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 80043f0:	4b07      	ldr	r3, [pc, #28]	@ (8004410 <HAL_GetCurrentCPUID+0x24>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	091b      	lsrs	r3, r3, #4
 80043f6:	f003 030f 	and.w	r3, r3, #15
 80043fa:	2b07      	cmp	r3, #7
 80043fc:	d101      	bne.n	8004402 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 80043fe:	2303      	movs	r3, #3
 8004400:	e000      	b.n	8004404 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8004402:	2301      	movs	r3, #1
  }
}
 8004404:	4618      	mov	r0, r3
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	e000ed00 	.word	0xe000ed00

08004414 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800441c:	f7fe fb54 	bl	8002ac8 <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e316      	b.n	8004a5a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a66      	ldr	r2, [pc, #408]	@ (80045cc <HAL_DMA_Init+0x1b8>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d04a      	beq.n	80044cc <HAL_DMA_Init+0xb8>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a65      	ldr	r2, [pc, #404]	@ (80045d0 <HAL_DMA_Init+0x1bc>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d045      	beq.n	80044cc <HAL_DMA_Init+0xb8>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a63      	ldr	r2, [pc, #396]	@ (80045d4 <HAL_DMA_Init+0x1c0>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d040      	beq.n	80044cc <HAL_DMA_Init+0xb8>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a62      	ldr	r2, [pc, #392]	@ (80045d8 <HAL_DMA_Init+0x1c4>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d03b      	beq.n	80044cc <HAL_DMA_Init+0xb8>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a60      	ldr	r2, [pc, #384]	@ (80045dc <HAL_DMA_Init+0x1c8>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d036      	beq.n	80044cc <HAL_DMA_Init+0xb8>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a5f      	ldr	r2, [pc, #380]	@ (80045e0 <HAL_DMA_Init+0x1cc>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d031      	beq.n	80044cc <HAL_DMA_Init+0xb8>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a5d      	ldr	r2, [pc, #372]	@ (80045e4 <HAL_DMA_Init+0x1d0>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d02c      	beq.n	80044cc <HAL_DMA_Init+0xb8>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a5c      	ldr	r2, [pc, #368]	@ (80045e8 <HAL_DMA_Init+0x1d4>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d027      	beq.n	80044cc <HAL_DMA_Init+0xb8>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a5a      	ldr	r2, [pc, #360]	@ (80045ec <HAL_DMA_Init+0x1d8>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d022      	beq.n	80044cc <HAL_DMA_Init+0xb8>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a59      	ldr	r2, [pc, #356]	@ (80045f0 <HAL_DMA_Init+0x1dc>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d01d      	beq.n	80044cc <HAL_DMA_Init+0xb8>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a57      	ldr	r2, [pc, #348]	@ (80045f4 <HAL_DMA_Init+0x1e0>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d018      	beq.n	80044cc <HAL_DMA_Init+0xb8>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a56      	ldr	r2, [pc, #344]	@ (80045f8 <HAL_DMA_Init+0x1e4>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d013      	beq.n	80044cc <HAL_DMA_Init+0xb8>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a54      	ldr	r2, [pc, #336]	@ (80045fc <HAL_DMA_Init+0x1e8>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d00e      	beq.n	80044cc <HAL_DMA_Init+0xb8>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a53      	ldr	r2, [pc, #332]	@ (8004600 <HAL_DMA_Init+0x1ec>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d009      	beq.n	80044cc <HAL_DMA_Init+0xb8>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a51      	ldr	r2, [pc, #324]	@ (8004604 <HAL_DMA_Init+0x1f0>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d004      	beq.n	80044cc <HAL_DMA_Init+0xb8>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a50      	ldr	r2, [pc, #320]	@ (8004608 <HAL_DMA_Init+0x1f4>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d101      	bne.n	80044d0 <HAL_DMA_Init+0xbc>
 80044cc:	2301      	movs	r3, #1
 80044ce:	e000      	b.n	80044d2 <HAL_DMA_Init+0xbe>
 80044d0:	2300      	movs	r3, #0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 813b 	beq.w	800474e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2202      	movs	r2, #2
 80044dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a37      	ldr	r2, [pc, #220]	@ (80045cc <HAL_DMA_Init+0x1b8>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d04a      	beq.n	8004588 <HAL_DMA_Init+0x174>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a36      	ldr	r2, [pc, #216]	@ (80045d0 <HAL_DMA_Init+0x1bc>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d045      	beq.n	8004588 <HAL_DMA_Init+0x174>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a34      	ldr	r2, [pc, #208]	@ (80045d4 <HAL_DMA_Init+0x1c0>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d040      	beq.n	8004588 <HAL_DMA_Init+0x174>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a33      	ldr	r2, [pc, #204]	@ (80045d8 <HAL_DMA_Init+0x1c4>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d03b      	beq.n	8004588 <HAL_DMA_Init+0x174>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a31      	ldr	r2, [pc, #196]	@ (80045dc <HAL_DMA_Init+0x1c8>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d036      	beq.n	8004588 <HAL_DMA_Init+0x174>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a30      	ldr	r2, [pc, #192]	@ (80045e0 <HAL_DMA_Init+0x1cc>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d031      	beq.n	8004588 <HAL_DMA_Init+0x174>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a2e      	ldr	r2, [pc, #184]	@ (80045e4 <HAL_DMA_Init+0x1d0>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d02c      	beq.n	8004588 <HAL_DMA_Init+0x174>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a2d      	ldr	r2, [pc, #180]	@ (80045e8 <HAL_DMA_Init+0x1d4>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d027      	beq.n	8004588 <HAL_DMA_Init+0x174>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a2b      	ldr	r2, [pc, #172]	@ (80045ec <HAL_DMA_Init+0x1d8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d022      	beq.n	8004588 <HAL_DMA_Init+0x174>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a2a      	ldr	r2, [pc, #168]	@ (80045f0 <HAL_DMA_Init+0x1dc>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d01d      	beq.n	8004588 <HAL_DMA_Init+0x174>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a28      	ldr	r2, [pc, #160]	@ (80045f4 <HAL_DMA_Init+0x1e0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d018      	beq.n	8004588 <HAL_DMA_Init+0x174>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a27      	ldr	r2, [pc, #156]	@ (80045f8 <HAL_DMA_Init+0x1e4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d013      	beq.n	8004588 <HAL_DMA_Init+0x174>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a25      	ldr	r2, [pc, #148]	@ (80045fc <HAL_DMA_Init+0x1e8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d00e      	beq.n	8004588 <HAL_DMA_Init+0x174>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a24      	ldr	r2, [pc, #144]	@ (8004600 <HAL_DMA_Init+0x1ec>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d009      	beq.n	8004588 <HAL_DMA_Init+0x174>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a22      	ldr	r2, [pc, #136]	@ (8004604 <HAL_DMA_Init+0x1f0>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d004      	beq.n	8004588 <HAL_DMA_Init+0x174>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a21      	ldr	r2, [pc, #132]	@ (8004608 <HAL_DMA_Init+0x1f4>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d108      	bne.n	800459a <HAL_DMA_Init+0x186>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 0201 	bic.w	r2, r2, #1
 8004596:	601a      	str	r2, [r3, #0]
 8004598:	e007      	b.n	80045aa <HAL_DMA_Init+0x196>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 0201 	bic.w	r2, r2, #1
 80045a8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80045aa:	e02f      	b.n	800460c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045ac:	f7fe fa8c 	bl	8002ac8 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b05      	cmp	r3, #5
 80045b8:	d928      	bls.n	800460c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2220      	movs	r2, #32
 80045be:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2203      	movs	r2, #3
 80045c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e246      	b.n	8004a5a <HAL_DMA_Init+0x646>
 80045cc:	40020010 	.word	0x40020010
 80045d0:	40020028 	.word	0x40020028
 80045d4:	40020040 	.word	0x40020040
 80045d8:	40020058 	.word	0x40020058
 80045dc:	40020070 	.word	0x40020070
 80045e0:	40020088 	.word	0x40020088
 80045e4:	400200a0 	.word	0x400200a0
 80045e8:	400200b8 	.word	0x400200b8
 80045ec:	40020410 	.word	0x40020410
 80045f0:	40020428 	.word	0x40020428
 80045f4:	40020440 	.word	0x40020440
 80045f8:	40020458 	.word	0x40020458
 80045fc:	40020470 	.word	0x40020470
 8004600:	40020488 	.word	0x40020488
 8004604:	400204a0 	.word	0x400204a0
 8004608:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1c8      	bne.n	80045ac <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	4b83      	ldr	r3, [pc, #524]	@ (8004834 <HAL_DMA_Init+0x420>)
 8004626:	4013      	ands	r3, r2
 8004628:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004632:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800463e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800464a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	4313      	orrs	r3, r2
 8004656:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465c:	2b04      	cmp	r3, #4
 800465e:	d107      	bne.n	8004670 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004668:	4313      	orrs	r3, r2
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	4313      	orrs	r3, r2
 800466e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004670:	4b71      	ldr	r3, [pc, #452]	@ (8004838 <HAL_DMA_Init+0x424>)
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	4b71      	ldr	r3, [pc, #452]	@ (800483c <HAL_DMA_Init+0x428>)
 8004676:	4013      	ands	r3, r2
 8004678:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800467c:	d328      	bcc.n	80046d0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	2b28      	cmp	r3, #40	@ 0x28
 8004684:	d903      	bls.n	800468e <HAL_DMA_Init+0x27a>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	2b2e      	cmp	r3, #46	@ 0x2e
 800468c:	d917      	bls.n	80046be <HAL_DMA_Init+0x2aa>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2b3e      	cmp	r3, #62	@ 0x3e
 8004694:	d903      	bls.n	800469e <HAL_DMA_Init+0x28a>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	2b42      	cmp	r3, #66	@ 0x42
 800469c:	d90f      	bls.n	80046be <HAL_DMA_Init+0x2aa>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2b46      	cmp	r3, #70	@ 0x46
 80046a4:	d903      	bls.n	80046ae <HAL_DMA_Init+0x29a>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2b48      	cmp	r3, #72	@ 0x48
 80046ac:	d907      	bls.n	80046be <HAL_DMA_Init+0x2aa>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	2b4e      	cmp	r3, #78	@ 0x4e
 80046b4:	d905      	bls.n	80046c2 <HAL_DMA_Init+0x2ae>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	2b52      	cmp	r3, #82	@ 0x52
 80046bc:	d801      	bhi.n	80046c2 <HAL_DMA_Init+0x2ae>
 80046be:	2301      	movs	r3, #1
 80046c0:	e000      	b.n	80046c4 <HAL_DMA_Init+0x2b0>
 80046c2:	2300      	movs	r3, #0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d003      	beq.n	80046d0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046ce:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	697a      	ldr	r2, [r7, #20]
 80046d6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f023 0307 	bic.w	r3, r3, #7
 80046e6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f6:	2b04      	cmp	r3, #4
 80046f8:	d117      	bne.n	800472a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	4313      	orrs	r3, r2
 8004702:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00e      	beq.n	800472a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f001 fdcf 	bl	80062b0 <DMA_CheckFifoParam>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d008      	beq.n	800472a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2240      	movs	r2, #64	@ 0x40
 800471c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e197      	b.n	8004a5a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f001 fd0a 	bl	800614c <DMA_CalcBaseAndBitshift>
 8004738:	4603      	mov	r3, r0
 800473a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004740:	f003 031f 	and.w	r3, r3, #31
 8004744:	223f      	movs	r2, #63	@ 0x3f
 8004746:	409a      	lsls	r2, r3
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	609a      	str	r2, [r3, #8]
 800474c:	e0cd      	b.n	80048ea <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a3b      	ldr	r2, [pc, #236]	@ (8004840 <HAL_DMA_Init+0x42c>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d022      	beq.n	800479e <HAL_DMA_Init+0x38a>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a39      	ldr	r2, [pc, #228]	@ (8004844 <HAL_DMA_Init+0x430>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d01d      	beq.n	800479e <HAL_DMA_Init+0x38a>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a38      	ldr	r2, [pc, #224]	@ (8004848 <HAL_DMA_Init+0x434>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d018      	beq.n	800479e <HAL_DMA_Init+0x38a>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a36      	ldr	r2, [pc, #216]	@ (800484c <HAL_DMA_Init+0x438>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d013      	beq.n	800479e <HAL_DMA_Init+0x38a>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a35      	ldr	r2, [pc, #212]	@ (8004850 <HAL_DMA_Init+0x43c>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d00e      	beq.n	800479e <HAL_DMA_Init+0x38a>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a33      	ldr	r2, [pc, #204]	@ (8004854 <HAL_DMA_Init+0x440>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d009      	beq.n	800479e <HAL_DMA_Init+0x38a>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a32      	ldr	r2, [pc, #200]	@ (8004858 <HAL_DMA_Init+0x444>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d004      	beq.n	800479e <HAL_DMA_Init+0x38a>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a30      	ldr	r2, [pc, #192]	@ (800485c <HAL_DMA_Init+0x448>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d101      	bne.n	80047a2 <HAL_DMA_Init+0x38e>
 800479e:	2301      	movs	r3, #1
 80047a0:	e000      	b.n	80047a4 <HAL_DMA_Init+0x390>
 80047a2:	2300      	movs	r3, #0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 8097 	beq.w	80048d8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a24      	ldr	r2, [pc, #144]	@ (8004840 <HAL_DMA_Init+0x42c>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d021      	beq.n	80047f8 <HAL_DMA_Init+0x3e4>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a22      	ldr	r2, [pc, #136]	@ (8004844 <HAL_DMA_Init+0x430>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d01c      	beq.n	80047f8 <HAL_DMA_Init+0x3e4>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a21      	ldr	r2, [pc, #132]	@ (8004848 <HAL_DMA_Init+0x434>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d017      	beq.n	80047f8 <HAL_DMA_Init+0x3e4>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a1f      	ldr	r2, [pc, #124]	@ (800484c <HAL_DMA_Init+0x438>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d012      	beq.n	80047f8 <HAL_DMA_Init+0x3e4>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a1e      	ldr	r2, [pc, #120]	@ (8004850 <HAL_DMA_Init+0x43c>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d00d      	beq.n	80047f8 <HAL_DMA_Init+0x3e4>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a1c      	ldr	r2, [pc, #112]	@ (8004854 <HAL_DMA_Init+0x440>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d008      	beq.n	80047f8 <HAL_DMA_Init+0x3e4>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a1b      	ldr	r2, [pc, #108]	@ (8004858 <HAL_DMA_Init+0x444>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d003      	beq.n	80047f8 <HAL_DMA_Init+0x3e4>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a19      	ldr	r2, [pc, #100]	@ (800485c <HAL_DMA_Init+0x448>)
 80047f6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	4b13      	ldr	r3, [pc, #76]	@ (8004860 <HAL_DMA_Init+0x44c>)
 8004814:	4013      	ands	r3, r2
 8004816:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	2b40      	cmp	r3, #64	@ 0x40
 800481e:	d021      	beq.n	8004864 <HAL_DMA_Init+0x450>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	2b80      	cmp	r3, #128	@ 0x80
 8004826:	d102      	bne.n	800482e <HAL_DMA_Init+0x41a>
 8004828:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800482c:	e01b      	b.n	8004866 <HAL_DMA_Init+0x452>
 800482e:	2300      	movs	r3, #0
 8004830:	e019      	b.n	8004866 <HAL_DMA_Init+0x452>
 8004832:	bf00      	nop
 8004834:	fe10803f 	.word	0xfe10803f
 8004838:	5c001000 	.word	0x5c001000
 800483c:	ffff0000 	.word	0xffff0000
 8004840:	58025408 	.word	0x58025408
 8004844:	5802541c 	.word	0x5802541c
 8004848:	58025430 	.word	0x58025430
 800484c:	58025444 	.word	0x58025444
 8004850:	58025458 	.word	0x58025458
 8004854:	5802546c 	.word	0x5802546c
 8004858:	58025480 	.word	0x58025480
 800485c:	58025494 	.word	0x58025494
 8004860:	fffe000f 	.word	0xfffe000f
 8004864:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	68d2      	ldr	r2, [r2, #12]
 800486a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800486c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004874:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800487c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004884:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	69db      	ldr	r3, [r3, #28]
 800488a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800488c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004894:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	4313      	orrs	r3, r2
 800489a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	461a      	mov	r2, r3
 80048aa:	4b6e      	ldr	r3, [pc, #440]	@ (8004a64 <HAL_DMA_Init+0x650>)
 80048ac:	4413      	add	r3, r2
 80048ae:	4a6e      	ldr	r2, [pc, #440]	@ (8004a68 <HAL_DMA_Init+0x654>)
 80048b0:	fba2 2303 	umull	r2, r3, r2, r3
 80048b4:	091b      	lsrs	r3, r3, #4
 80048b6:	009a      	lsls	r2, r3, #2
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f001 fc45 	bl	800614c <DMA_CalcBaseAndBitshift>
 80048c2:	4603      	mov	r3, r0
 80048c4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ca:	f003 031f 	and.w	r3, r3, #31
 80048ce:	2201      	movs	r2, #1
 80048d0:	409a      	lsls	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	605a      	str	r2, [r3, #4]
 80048d6:	e008      	b.n	80048ea <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2240      	movs	r2, #64	@ 0x40
 80048dc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2203      	movs	r2, #3
 80048e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e0b7      	b.n	8004a5a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a5f      	ldr	r2, [pc, #380]	@ (8004a6c <HAL_DMA_Init+0x658>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d072      	beq.n	80049da <HAL_DMA_Init+0x5c6>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a5d      	ldr	r2, [pc, #372]	@ (8004a70 <HAL_DMA_Init+0x65c>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d06d      	beq.n	80049da <HAL_DMA_Init+0x5c6>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a5c      	ldr	r2, [pc, #368]	@ (8004a74 <HAL_DMA_Init+0x660>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d068      	beq.n	80049da <HAL_DMA_Init+0x5c6>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a5a      	ldr	r2, [pc, #360]	@ (8004a78 <HAL_DMA_Init+0x664>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d063      	beq.n	80049da <HAL_DMA_Init+0x5c6>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a59      	ldr	r2, [pc, #356]	@ (8004a7c <HAL_DMA_Init+0x668>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d05e      	beq.n	80049da <HAL_DMA_Init+0x5c6>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a57      	ldr	r2, [pc, #348]	@ (8004a80 <HAL_DMA_Init+0x66c>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d059      	beq.n	80049da <HAL_DMA_Init+0x5c6>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a56      	ldr	r2, [pc, #344]	@ (8004a84 <HAL_DMA_Init+0x670>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d054      	beq.n	80049da <HAL_DMA_Init+0x5c6>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a54      	ldr	r2, [pc, #336]	@ (8004a88 <HAL_DMA_Init+0x674>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d04f      	beq.n	80049da <HAL_DMA_Init+0x5c6>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a53      	ldr	r2, [pc, #332]	@ (8004a8c <HAL_DMA_Init+0x678>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d04a      	beq.n	80049da <HAL_DMA_Init+0x5c6>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a51      	ldr	r2, [pc, #324]	@ (8004a90 <HAL_DMA_Init+0x67c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d045      	beq.n	80049da <HAL_DMA_Init+0x5c6>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a50      	ldr	r2, [pc, #320]	@ (8004a94 <HAL_DMA_Init+0x680>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d040      	beq.n	80049da <HAL_DMA_Init+0x5c6>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a4e      	ldr	r2, [pc, #312]	@ (8004a98 <HAL_DMA_Init+0x684>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d03b      	beq.n	80049da <HAL_DMA_Init+0x5c6>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a4d      	ldr	r2, [pc, #308]	@ (8004a9c <HAL_DMA_Init+0x688>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d036      	beq.n	80049da <HAL_DMA_Init+0x5c6>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a4b      	ldr	r2, [pc, #300]	@ (8004aa0 <HAL_DMA_Init+0x68c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d031      	beq.n	80049da <HAL_DMA_Init+0x5c6>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a4a      	ldr	r2, [pc, #296]	@ (8004aa4 <HAL_DMA_Init+0x690>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d02c      	beq.n	80049da <HAL_DMA_Init+0x5c6>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a48      	ldr	r2, [pc, #288]	@ (8004aa8 <HAL_DMA_Init+0x694>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d027      	beq.n	80049da <HAL_DMA_Init+0x5c6>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a47      	ldr	r2, [pc, #284]	@ (8004aac <HAL_DMA_Init+0x698>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d022      	beq.n	80049da <HAL_DMA_Init+0x5c6>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a45      	ldr	r2, [pc, #276]	@ (8004ab0 <HAL_DMA_Init+0x69c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d01d      	beq.n	80049da <HAL_DMA_Init+0x5c6>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a44      	ldr	r2, [pc, #272]	@ (8004ab4 <HAL_DMA_Init+0x6a0>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d018      	beq.n	80049da <HAL_DMA_Init+0x5c6>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a42      	ldr	r2, [pc, #264]	@ (8004ab8 <HAL_DMA_Init+0x6a4>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d013      	beq.n	80049da <HAL_DMA_Init+0x5c6>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a41      	ldr	r2, [pc, #260]	@ (8004abc <HAL_DMA_Init+0x6a8>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d00e      	beq.n	80049da <HAL_DMA_Init+0x5c6>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a3f      	ldr	r2, [pc, #252]	@ (8004ac0 <HAL_DMA_Init+0x6ac>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d009      	beq.n	80049da <HAL_DMA_Init+0x5c6>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a3e      	ldr	r2, [pc, #248]	@ (8004ac4 <HAL_DMA_Init+0x6b0>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d004      	beq.n	80049da <HAL_DMA_Init+0x5c6>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a3c      	ldr	r2, [pc, #240]	@ (8004ac8 <HAL_DMA_Init+0x6b4>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d101      	bne.n	80049de <HAL_DMA_Init+0x5ca>
 80049da:	2301      	movs	r3, #1
 80049dc:	e000      	b.n	80049e0 <HAL_DMA_Init+0x5cc>
 80049de:	2300      	movs	r3, #0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d032      	beq.n	8004a4a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f001 fcdf 	bl	80063a8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	2b80      	cmp	r3, #128	@ 0x80
 80049f0:	d102      	bne.n	80049f8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a00:	b2d2      	uxtb	r2, r2
 8004a02:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004a0c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d010      	beq.n	8004a38 <HAL_DMA_Init+0x624>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	2b08      	cmp	r3, #8
 8004a1c:	d80c      	bhi.n	8004a38 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f001 fd5c 	bl	80064dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a28:	2200      	movs	r2, #0
 8004a2a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004a34:	605a      	str	r2, [r3, #4]
 8004a36:	e008      	b.n	8004a4a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3718      	adds	r7, #24
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	a7fdabf8 	.word	0xa7fdabf8
 8004a68:	cccccccd 	.word	0xcccccccd
 8004a6c:	40020010 	.word	0x40020010
 8004a70:	40020028 	.word	0x40020028
 8004a74:	40020040 	.word	0x40020040
 8004a78:	40020058 	.word	0x40020058
 8004a7c:	40020070 	.word	0x40020070
 8004a80:	40020088 	.word	0x40020088
 8004a84:	400200a0 	.word	0x400200a0
 8004a88:	400200b8 	.word	0x400200b8
 8004a8c:	40020410 	.word	0x40020410
 8004a90:	40020428 	.word	0x40020428
 8004a94:	40020440 	.word	0x40020440
 8004a98:	40020458 	.word	0x40020458
 8004a9c:	40020470 	.word	0x40020470
 8004aa0:	40020488 	.word	0x40020488
 8004aa4:	400204a0 	.word	0x400204a0
 8004aa8:	400204b8 	.word	0x400204b8
 8004aac:	58025408 	.word	0x58025408
 8004ab0:	5802541c 	.word	0x5802541c
 8004ab4:	58025430 	.word	0x58025430
 8004ab8:	58025444 	.word	0x58025444
 8004abc:	58025458 	.word	0x58025458
 8004ac0:	5802546c 	.word	0x5802546c
 8004ac4:	58025480 	.word	0x58025480
 8004ac8:	58025494 	.word	0x58025494

08004acc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
 8004ad8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ada:	2300      	movs	r3, #0
 8004adc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d101      	bne.n	8004ae8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e226      	b.n	8004f36 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d101      	bne.n	8004af6 <HAL_DMA_Start_IT+0x2a>
 8004af2:	2302      	movs	r3, #2
 8004af4:	e21f      	b.n	8004f36 <HAL_DMA_Start_IT+0x46a>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2201      	movs	r2, #1
 8004afa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	f040 820a 	bne.w	8004f20 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2202      	movs	r2, #2
 8004b10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a68      	ldr	r2, [pc, #416]	@ (8004cc0 <HAL_DMA_Start_IT+0x1f4>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d04a      	beq.n	8004bba <HAL_DMA_Start_IT+0xee>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a66      	ldr	r2, [pc, #408]	@ (8004cc4 <HAL_DMA_Start_IT+0x1f8>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d045      	beq.n	8004bba <HAL_DMA_Start_IT+0xee>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a65      	ldr	r2, [pc, #404]	@ (8004cc8 <HAL_DMA_Start_IT+0x1fc>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d040      	beq.n	8004bba <HAL_DMA_Start_IT+0xee>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a63      	ldr	r2, [pc, #396]	@ (8004ccc <HAL_DMA_Start_IT+0x200>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d03b      	beq.n	8004bba <HAL_DMA_Start_IT+0xee>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a62      	ldr	r2, [pc, #392]	@ (8004cd0 <HAL_DMA_Start_IT+0x204>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d036      	beq.n	8004bba <HAL_DMA_Start_IT+0xee>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a60      	ldr	r2, [pc, #384]	@ (8004cd4 <HAL_DMA_Start_IT+0x208>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d031      	beq.n	8004bba <HAL_DMA_Start_IT+0xee>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a5f      	ldr	r2, [pc, #380]	@ (8004cd8 <HAL_DMA_Start_IT+0x20c>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d02c      	beq.n	8004bba <HAL_DMA_Start_IT+0xee>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a5d      	ldr	r2, [pc, #372]	@ (8004cdc <HAL_DMA_Start_IT+0x210>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d027      	beq.n	8004bba <HAL_DMA_Start_IT+0xee>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a5c      	ldr	r2, [pc, #368]	@ (8004ce0 <HAL_DMA_Start_IT+0x214>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d022      	beq.n	8004bba <HAL_DMA_Start_IT+0xee>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a5a      	ldr	r2, [pc, #360]	@ (8004ce4 <HAL_DMA_Start_IT+0x218>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d01d      	beq.n	8004bba <HAL_DMA_Start_IT+0xee>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a59      	ldr	r2, [pc, #356]	@ (8004ce8 <HAL_DMA_Start_IT+0x21c>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d018      	beq.n	8004bba <HAL_DMA_Start_IT+0xee>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a57      	ldr	r2, [pc, #348]	@ (8004cec <HAL_DMA_Start_IT+0x220>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d013      	beq.n	8004bba <HAL_DMA_Start_IT+0xee>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a56      	ldr	r2, [pc, #344]	@ (8004cf0 <HAL_DMA_Start_IT+0x224>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d00e      	beq.n	8004bba <HAL_DMA_Start_IT+0xee>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a54      	ldr	r2, [pc, #336]	@ (8004cf4 <HAL_DMA_Start_IT+0x228>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d009      	beq.n	8004bba <HAL_DMA_Start_IT+0xee>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a53      	ldr	r2, [pc, #332]	@ (8004cf8 <HAL_DMA_Start_IT+0x22c>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d004      	beq.n	8004bba <HAL_DMA_Start_IT+0xee>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a51      	ldr	r2, [pc, #324]	@ (8004cfc <HAL_DMA_Start_IT+0x230>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d108      	bne.n	8004bcc <HAL_DMA_Start_IT+0x100>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0201 	bic.w	r2, r2, #1
 8004bc8:	601a      	str	r2, [r3, #0]
 8004bca:	e007      	b.n	8004bdc <HAL_DMA_Start_IT+0x110>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 0201 	bic.w	r2, r2, #1
 8004bda:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	68b9      	ldr	r1, [r7, #8]
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f001 f906 	bl	8005df4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a34      	ldr	r2, [pc, #208]	@ (8004cc0 <HAL_DMA_Start_IT+0x1f4>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d04a      	beq.n	8004c88 <HAL_DMA_Start_IT+0x1bc>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a33      	ldr	r2, [pc, #204]	@ (8004cc4 <HAL_DMA_Start_IT+0x1f8>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d045      	beq.n	8004c88 <HAL_DMA_Start_IT+0x1bc>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a31      	ldr	r2, [pc, #196]	@ (8004cc8 <HAL_DMA_Start_IT+0x1fc>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d040      	beq.n	8004c88 <HAL_DMA_Start_IT+0x1bc>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a30      	ldr	r2, [pc, #192]	@ (8004ccc <HAL_DMA_Start_IT+0x200>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d03b      	beq.n	8004c88 <HAL_DMA_Start_IT+0x1bc>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a2e      	ldr	r2, [pc, #184]	@ (8004cd0 <HAL_DMA_Start_IT+0x204>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d036      	beq.n	8004c88 <HAL_DMA_Start_IT+0x1bc>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a2d      	ldr	r2, [pc, #180]	@ (8004cd4 <HAL_DMA_Start_IT+0x208>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d031      	beq.n	8004c88 <HAL_DMA_Start_IT+0x1bc>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a2b      	ldr	r2, [pc, #172]	@ (8004cd8 <HAL_DMA_Start_IT+0x20c>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d02c      	beq.n	8004c88 <HAL_DMA_Start_IT+0x1bc>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a2a      	ldr	r2, [pc, #168]	@ (8004cdc <HAL_DMA_Start_IT+0x210>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d027      	beq.n	8004c88 <HAL_DMA_Start_IT+0x1bc>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a28      	ldr	r2, [pc, #160]	@ (8004ce0 <HAL_DMA_Start_IT+0x214>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d022      	beq.n	8004c88 <HAL_DMA_Start_IT+0x1bc>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a27      	ldr	r2, [pc, #156]	@ (8004ce4 <HAL_DMA_Start_IT+0x218>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d01d      	beq.n	8004c88 <HAL_DMA_Start_IT+0x1bc>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a25      	ldr	r2, [pc, #148]	@ (8004ce8 <HAL_DMA_Start_IT+0x21c>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d018      	beq.n	8004c88 <HAL_DMA_Start_IT+0x1bc>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a24      	ldr	r2, [pc, #144]	@ (8004cec <HAL_DMA_Start_IT+0x220>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d013      	beq.n	8004c88 <HAL_DMA_Start_IT+0x1bc>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a22      	ldr	r2, [pc, #136]	@ (8004cf0 <HAL_DMA_Start_IT+0x224>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d00e      	beq.n	8004c88 <HAL_DMA_Start_IT+0x1bc>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a21      	ldr	r2, [pc, #132]	@ (8004cf4 <HAL_DMA_Start_IT+0x228>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d009      	beq.n	8004c88 <HAL_DMA_Start_IT+0x1bc>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a1f      	ldr	r2, [pc, #124]	@ (8004cf8 <HAL_DMA_Start_IT+0x22c>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d004      	beq.n	8004c88 <HAL_DMA_Start_IT+0x1bc>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a1e      	ldr	r2, [pc, #120]	@ (8004cfc <HAL_DMA_Start_IT+0x230>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d101      	bne.n	8004c8c <HAL_DMA_Start_IT+0x1c0>
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e000      	b.n	8004c8e <HAL_DMA_Start_IT+0x1c2>
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d036      	beq.n	8004d00 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f023 021e 	bic.w	r2, r3, #30
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f042 0216 	orr.w	r2, r2, #22
 8004ca4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d03e      	beq.n	8004d2c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f042 0208 	orr.w	r2, r2, #8
 8004cbc:	601a      	str	r2, [r3, #0]
 8004cbe:	e035      	b.n	8004d2c <HAL_DMA_Start_IT+0x260>
 8004cc0:	40020010 	.word	0x40020010
 8004cc4:	40020028 	.word	0x40020028
 8004cc8:	40020040 	.word	0x40020040
 8004ccc:	40020058 	.word	0x40020058
 8004cd0:	40020070 	.word	0x40020070
 8004cd4:	40020088 	.word	0x40020088
 8004cd8:	400200a0 	.word	0x400200a0
 8004cdc:	400200b8 	.word	0x400200b8
 8004ce0:	40020410 	.word	0x40020410
 8004ce4:	40020428 	.word	0x40020428
 8004ce8:	40020440 	.word	0x40020440
 8004cec:	40020458 	.word	0x40020458
 8004cf0:	40020470 	.word	0x40020470
 8004cf4:	40020488 	.word	0x40020488
 8004cf8:	400204a0 	.word	0x400204a0
 8004cfc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f023 020e 	bic.w	r2, r3, #14
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f042 020a 	orr.w	r2, r2, #10
 8004d12:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d007      	beq.n	8004d2c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f042 0204 	orr.w	r2, r2, #4
 8004d2a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a83      	ldr	r2, [pc, #524]	@ (8004f40 <HAL_DMA_Start_IT+0x474>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d072      	beq.n	8004e1c <HAL_DMA_Start_IT+0x350>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a82      	ldr	r2, [pc, #520]	@ (8004f44 <HAL_DMA_Start_IT+0x478>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d06d      	beq.n	8004e1c <HAL_DMA_Start_IT+0x350>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a80      	ldr	r2, [pc, #512]	@ (8004f48 <HAL_DMA_Start_IT+0x47c>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d068      	beq.n	8004e1c <HAL_DMA_Start_IT+0x350>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a7f      	ldr	r2, [pc, #508]	@ (8004f4c <HAL_DMA_Start_IT+0x480>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d063      	beq.n	8004e1c <HAL_DMA_Start_IT+0x350>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a7d      	ldr	r2, [pc, #500]	@ (8004f50 <HAL_DMA_Start_IT+0x484>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d05e      	beq.n	8004e1c <HAL_DMA_Start_IT+0x350>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a7c      	ldr	r2, [pc, #496]	@ (8004f54 <HAL_DMA_Start_IT+0x488>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d059      	beq.n	8004e1c <HAL_DMA_Start_IT+0x350>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a7a      	ldr	r2, [pc, #488]	@ (8004f58 <HAL_DMA_Start_IT+0x48c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d054      	beq.n	8004e1c <HAL_DMA_Start_IT+0x350>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a79      	ldr	r2, [pc, #484]	@ (8004f5c <HAL_DMA_Start_IT+0x490>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d04f      	beq.n	8004e1c <HAL_DMA_Start_IT+0x350>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a77      	ldr	r2, [pc, #476]	@ (8004f60 <HAL_DMA_Start_IT+0x494>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d04a      	beq.n	8004e1c <HAL_DMA_Start_IT+0x350>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a76      	ldr	r2, [pc, #472]	@ (8004f64 <HAL_DMA_Start_IT+0x498>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d045      	beq.n	8004e1c <HAL_DMA_Start_IT+0x350>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a74      	ldr	r2, [pc, #464]	@ (8004f68 <HAL_DMA_Start_IT+0x49c>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d040      	beq.n	8004e1c <HAL_DMA_Start_IT+0x350>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a73      	ldr	r2, [pc, #460]	@ (8004f6c <HAL_DMA_Start_IT+0x4a0>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d03b      	beq.n	8004e1c <HAL_DMA_Start_IT+0x350>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a71      	ldr	r2, [pc, #452]	@ (8004f70 <HAL_DMA_Start_IT+0x4a4>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d036      	beq.n	8004e1c <HAL_DMA_Start_IT+0x350>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a70      	ldr	r2, [pc, #448]	@ (8004f74 <HAL_DMA_Start_IT+0x4a8>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d031      	beq.n	8004e1c <HAL_DMA_Start_IT+0x350>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a6e      	ldr	r2, [pc, #440]	@ (8004f78 <HAL_DMA_Start_IT+0x4ac>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d02c      	beq.n	8004e1c <HAL_DMA_Start_IT+0x350>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a6d      	ldr	r2, [pc, #436]	@ (8004f7c <HAL_DMA_Start_IT+0x4b0>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d027      	beq.n	8004e1c <HAL_DMA_Start_IT+0x350>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a6b      	ldr	r2, [pc, #428]	@ (8004f80 <HAL_DMA_Start_IT+0x4b4>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d022      	beq.n	8004e1c <HAL_DMA_Start_IT+0x350>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a6a      	ldr	r2, [pc, #424]	@ (8004f84 <HAL_DMA_Start_IT+0x4b8>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d01d      	beq.n	8004e1c <HAL_DMA_Start_IT+0x350>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a68      	ldr	r2, [pc, #416]	@ (8004f88 <HAL_DMA_Start_IT+0x4bc>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d018      	beq.n	8004e1c <HAL_DMA_Start_IT+0x350>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a67      	ldr	r2, [pc, #412]	@ (8004f8c <HAL_DMA_Start_IT+0x4c0>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d013      	beq.n	8004e1c <HAL_DMA_Start_IT+0x350>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a65      	ldr	r2, [pc, #404]	@ (8004f90 <HAL_DMA_Start_IT+0x4c4>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d00e      	beq.n	8004e1c <HAL_DMA_Start_IT+0x350>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a64      	ldr	r2, [pc, #400]	@ (8004f94 <HAL_DMA_Start_IT+0x4c8>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d009      	beq.n	8004e1c <HAL_DMA_Start_IT+0x350>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a62      	ldr	r2, [pc, #392]	@ (8004f98 <HAL_DMA_Start_IT+0x4cc>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d004      	beq.n	8004e1c <HAL_DMA_Start_IT+0x350>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a61      	ldr	r2, [pc, #388]	@ (8004f9c <HAL_DMA_Start_IT+0x4d0>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d101      	bne.n	8004e20 <HAL_DMA_Start_IT+0x354>
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e000      	b.n	8004e22 <HAL_DMA_Start_IT+0x356>
 8004e20:	2300      	movs	r3, #0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d01a      	beq.n	8004e5c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d007      	beq.n	8004e44 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e42:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d007      	beq.n	8004e5c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e5a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a37      	ldr	r2, [pc, #220]	@ (8004f40 <HAL_DMA_Start_IT+0x474>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d04a      	beq.n	8004efc <HAL_DMA_Start_IT+0x430>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a36      	ldr	r2, [pc, #216]	@ (8004f44 <HAL_DMA_Start_IT+0x478>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d045      	beq.n	8004efc <HAL_DMA_Start_IT+0x430>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a34      	ldr	r2, [pc, #208]	@ (8004f48 <HAL_DMA_Start_IT+0x47c>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d040      	beq.n	8004efc <HAL_DMA_Start_IT+0x430>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a33      	ldr	r2, [pc, #204]	@ (8004f4c <HAL_DMA_Start_IT+0x480>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d03b      	beq.n	8004efc <HAL_DMA_Start_IT+0x430>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a31      	ldr	r2, [pc, #196]	@ (8004f50 <HAL_DMA_Start_IT+0x484>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d036      	beq.n	8004efc <HAL_DMA_Start_IT+0x430>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a30      	ldr	r2, [pc, #192]	@ (8004f54 <HAL_DMA_Start_IT+0x488>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d031      	beq.n	8004efc <HAL_DMA_Start_IT+0x430>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a2e      	ldr	r2, [pc, #184]	@ (8004f58 <HAL_DMA_Start_IT+0x48c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d02c      	beq.n	8004efc <HAL_DMA_Start_IT+0x430>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a2d      	ldr	r2, [pc, #180]	@ (8004f5c <HAL_DMA_Start_IT+0x490>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d027      	beq.n	8004efc <HAL_DMA_Start_IT+0x430>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a2b      	ldr	r2, [pc, #172]	@ (8004f60 <HAL_DMA_Start_IT+0x494>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d022      	beq.n	8004efc <HAL_DMA_Start_IT+0x430>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a2a      	ldr	r2, [pc, #168]	@ (8004f64 <HAL_DMA_Start_IT+0x498>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d01d      	beq.n	8004efc <HAL_DMA_Start_IT+0x430>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a28      	ldr	r2, [pc, #160]	@ (8004f68 <HAL_DMA_Start_IT+0x49c>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d018      	beq.n	8004efc <HAL_DMA_Start_IT+0x430>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a27      	ldr	r2, [pc, #156]	@ (8004f6c <HAL_DMA_Start_IT+0x4a0>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d013      	beq.n	8004efc <HAL_DMA_Start_IT+0x430>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a25      	ldr	r2, [pc, #148]	@ (8004f70 <HAL_DMA_Start_IT+0x4a4>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d00e      	beq.n	8004efc <HAL_DMA_Start_IT+0x430>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a24      	ldr	r2, [pc, #144]	@ (8004f74 <HAL_DMA_Start_IT+0x4a8>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d009      	beq.n	8004efc <HAL_DMA_Start_IT+0x430>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a22      	ldr	r2, [pc, #136]	@ (8004f78 <HAL_DMA_Start_IT+0x4ac>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d004      	beq.n	8004efc <HAL_DMA_Start_IT+0x430>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a21      	ldr	r2, [pc, #132]	@ (8004f7c <HAL_DMA_Start_IT+0x4b0>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d108      	bne.n	8004f0e <HAL_DMA_Start_IT+0x442>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f042 0201 	orr.w	r2, r2, #1
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	e012      	b.n	8004f34 <HAL_DMA_Start_IT+0x468>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f042 0201 	orr.w	r2, r2, #1
 8004f1c:	601a      	str	r2, [r3, #0]
 8004f1e:	e009      	b.n	8004f34 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f26:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	40020010 	.word	0x40020010
 8004f44:	40020028 	.word	0x40020028
 8004f48:	40020040 	.word	0x40020040
 8004f4c:	40020058 	.word	0x40020058
 8004f50:	40020070 	.word	0x40020070
 8004f54:	40020088 	.word	0x40020088
 8004f58:	400200a0 	.word	0x400200a0
 8004f5c:	400200b8 	.word	0x400200b8
 8004f60:	40020410 	.word	0x40020410
 8004f64:	40020428 	.word	0x40020428
 8004f68:	40020440 	.word	0x40020440
 8004f6c:	40020458 	.word	0x40020458
 8004f70:	40020470 	.word	0x40020470
 8004f74:	40020488 	.word	0x40020488
 8004f78:	400204a0 	.word	0x400204a0
 8004f7c:	400204b8 	.word	0x400204b8
 8004f80:	58025408 	.word	0x58025408
 8004f84:	5802541c 	.word	0x5802541c
 8004f88:	58025430 	.word	0x58025430
 8004f8c:	58025444 	.word	0x58025444
 8004f90:	58025458 	.word	0x58025458
 8004f94:	5802546c 	.word	0x5802546c
 8004f98:	58025480 	.word	0x58025480
 8004f9c:	58025494 	.word	0x58025494

08004fa0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b08a      	sub	sp, #40	@ 0x28
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004fac:	4b67      	ldr	r3, [pc, #412]	@ (800514c <HAL_DMA_IRQHandler+0x1ac>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a67      	ldr	r2, [pc, #412]	@ (8005150 <HAL_DMA_IRQHandler+0x1b0>)
 8004fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb6:	0a9b      	lsrs	r3, r3, #10
 8004fb8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fbe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fc4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004fc6:	6a3b      	ldr	r3, [r7, #32]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a5f      	ldr	r2, [pc, #380]	@ (8005154 <HAL_DMA_IRQHandler+0x1b4>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d04a      	beq.n	8005072 <HAL_DMA_IRQHandler+0xd2>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a5d      	ldr	r2, [pc, #372]	@ (8005158 <HAL_DMA_IRQHandler+0x1b8>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d045      	beq.n	8005072 <HAL_DMA_IRQHandler+0xd2>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a5c      	ldr	r2, [pc, #368]	@ (800515c <HAL_DMA_IRQHandler+0x1bc>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d040      	beq.n	8005072 <HAL_DMA_IRQHandler+0xd2>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a5a      	ldr	r2, [pc, #360]	@ (8005160 <HAL_DMA_IRQHandler+0x1c0>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d03b      	beq.n	8005072 <HAL_DMA_IRQHandler+0xd2>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a59      	ldr	r2, [pc, #356]	@ (8005164 <HAL_DMA_IRQHandler+0x1c4>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d036      	beq.n	8005072 <HAL_DMA_IRQHandler+0xd2>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a57      	ldr	r2, [pc, #348]	@ (8005168 <HAL_DMA_IRQHandler+0x1c8>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d031      	beq.n	8005072 <HAL_DMA_IRQHandler+0xd2>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a56      	ldr	r2, [pc, #344]	@ (800516c <HAL_DMA_IRQHandler+0x1cc>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d02c      	beq.n	8005072 <HAL_DMA_IRQHandler+0xd2>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a54      	ldr	r2, [pc, #336]	@ (8005170 <HAL_DMA_IRQHandler+0x1d0>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d027      	beq.n	8005072 <HAL_DMA_IRQHandler+0xd2>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a53      	ldr	r2, [pc, #332]	@ (8005174 <HAL_DMA_IRQHandler+0x1d4>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d022      	beq.n	8005072 <HAL_DMA_IRQHandler+0xd2>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a51      	ldr	r2, [pc, #324]	@ (8005178 <HAL_DMA_IRQHandler+0x1d8>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d01d      	beq.n	8005072 <HAL_DMA_IRQHandler+0xd2>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a50      	ldr	r2, [pc, #320]	@ (800517c <HAL_DMA_IRQHandler+0x1dc>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d018      	beq.n	8005072 <HAL_DMA_IRQHandler+0xd2>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a4e      	ldr	r2, [pc, #312]	@ (8005180 <HAL_DMA_IRQHandler+0x1e0>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d013      	beq.n	8005072 <HAL_DMA_IRQHandler+0xd2>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a4d      	ldr	r2, [pc, #308]	@ (8005184 <HAL_DMA_IRQHandler+0x1e4>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d00e      	beq.n	8005072 <HAL_DMA_IRQHandler+0xd2>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a4b      	ldr	r2, [pc, #300]	@ (8005188 <HAL_DMA_IRQHandler+0x1e8>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d009      	beq.n	8005072 <HAL_DMA_IRQHandler+0xd2>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a4a      	ldr	r2, [pc, #296]	@ (800518c <HAL_DMA_IRQHandler+0x1ec>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d004      	beq.n	8005072 <HAL_DMA_IRQHandler+0xd2>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a48      	ldr	r2, [pc, #288]	@ (8005190 <HAL_DMA_IRQHandler+0x1f0>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d101      	bne.n	8005076 <HAL_DMA_IRQHandler+0xd6>
 8005072:	2301      	movs	r3, #1
 8005074:	e000      	b.n	8005078 <HAL_DMA_IRQHandler+0xd8>
 8005076:	2300      	movs	r3, #0
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 842b 	beq.w	80058d4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005082:	f003 031f 	and.w	r3, r3, #31
 8005086:	2208      	movs	r2, #8
 8005088:	409a      	lsls	r2, r3
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	4013      	ands	r3, r2
 800508e:	2b00      	cmp	r3, #0
 8005090:	f000 80a2 	beq.w	80051d8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a2e      	ldr	r2, [pc, #184]	@ (8005154 <HAL_DMA_IRQHandler+0x1b4>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d04a      	beq.n	8005134 <HAL_DMA_IRQHandler+0x194>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a2d      	ldr	r2, [pc, #180]	@ (8005158 <HAL_DMA_IRQHandler+0x1b8>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d045      	beq.n	8005134 <HAL_DMA_IRQHandler+0x194>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a2b      	ldr	r2, [pc, #172]	@ (800515c <HAL_DMA_IRQHandler+0x1bc>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d040      	beq.n	8005134 <HAL_DMA_IRQHandler+0x194>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a2a      	ldr	r2, [pc, #168]	@ (8005160 <HAL_DMA_IRQHandler+0x1c0>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d03b      	beq.n	8005134 <HAL_DMA_IRQHandler+0x194>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a28      	ldr	r2, [pc, #160]	@ (8005164 <HAL_DMA_IRQHandler+0x1c4>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d036      	beq.n	8005134 <HAL_DMA_IRQHandler+0x194>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a27      	ldr	r2, [pc, #156]	@ (8005168 <HAL_DMA_IRQHandler+0x1c8>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d031      	beq.n	8005134 <HAL_DMA_IRQHandler+0x194>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a25      	ldr	r2, [pc, #148]	@ (800516c <HAL_DMA_IRQHandler+0x1cc>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d02c      	beq.n	8005134 <HAL_DMA_IRQHandler+0x194>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a24      	ldr	r2, [pc, #144]	@ (8005170 <HAL_DMA_IRQHandler+0x1d0>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d027      	beq.n	8005134 <HAL_DMA_IRQHandler+0x194>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a22      	ldr	r2, [pc, #136]	@ (8005174 <HAL_DMA_IRQHandler+0x1d4>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d022      	beq.n	8005134 <HAL_DMA_IRQHandler+0x194>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a21      	ldr	r2, [pc, #132]	@ (8005178 <HAL_DMA_IRQHandler+0x1d8>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d01d      	beq.n	8005134 <HAL_DMA_IRQHandler+0x194>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a1f      	ldr	r2, [pc, #124]	@ (800517c <HAL_DMA_IRQHandler+0x1dc>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d018      	beq.n	8005134 <HAL_DMA_IRQHandler+0x194>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a1e      	ldr	r2, [pc, #120]	@ (8005180 <HAL_DMA_IRQHandler+0x1e0>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d013      	beq.n	8005134 <HAL_DMA_IRQHandler+0x194>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a1c      	ldr	r2, [pc, #112]	@ (8005184 <HAL_DMA_IRQHandler+0x1e4>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d00e      	beq.n	8005134 <HAL_DMA_IRQHandler+0x194>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a1b      	ldr	r2, [pc, #108]	@ (8005188 <HAL_DMA_IRQHandler+0x1e8>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d009      	beq.n	8005134 <HAL_DMA_IRQHandler+0x194>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a19      	ldr	r2, [pc, #100]	@ (800518c <HAL_DMA_IRQHandler+0x1ec>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d004      	beq.n	8005134 <HAL_DMA_IRQHandler+0x194>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a18      	ldr	r2, [pc, #96]	@ (8005190 <HAL_DMA_IRQHandler+0x1f0>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d12f      	bne.n	8005194 <HAL_DMA_IRQHandler+0x1f4>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0304 	and.w	r3, r3, #4
 800513e:	2b00      	cmp	r3, #0
 8005140:	bf14      	ite	ne
 8005142:	2301      	movne	r3, #1
 8005144:	2300      	moveq	r3, #0
 8005146:	b2db      	uxtb	r3, r3
 8005148:	e02e      	b.n	80051a8 <HAL_DMA_IRQHandler+0x208>
 800514a:	bf00      	nop
 800514c:	24000000 	.word	0x24000000
 8005150:	1b4e81b5 	.word	0x1b4e81b5
 8005154:	40020010 	.word	0x40020010
 8005158:	40020028 	.word	0x40020028
 800515c:	40020040 	.word	0x40020040
 8005160:	40020058 	.word	0x40020058
 8005164:	40020070 	.word	0x40020070
 8005168:	40020088 	.word	0x40020088
 800516c:	400200a0 	.word	0x400200a0
 8005170:	400200b8 	.word	0x400200b8
 8005174:	40020410 	.word	0x40020410
 8005178:	40020428 	.word	0x40020428
 800517c:	40020440 	.word	0x40020440
 8005180:	40020458 	.word	0x40020458
 8005184:	40020470 	.word	0x40020470
 8005188:	40020488 	.word	0x40020488
 800518c:	400204a0 	.word	0x400204a0
 8005190:	400204b8 	.word	0x400204b8
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0308 	and.w	r3, r3, #8
 800519e:	2b00      	cmp	r3, #0
 80051a0:	bf14      	ite	ne
 80051a2:	2301      	movne	r3, #1
 80051a4:	2300      	moveq	r3, #0
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d015      	beq.n	80051d8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f022 0204 	bic.w	r2, r2, #4
 80051ba:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051c0:	f003 031f 	and.w	r3, r3, #31
 80051c4:	2208      	movs	r2, #8
 80051c6:	409a      	lsls	r2, r3
 80051c8:	6a3b      	ldr	r3, [r7, #32]
 80051ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051d0:	f043 0201 	orr.w	r2, r3, #1
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051dc:	f003 031f 	and.w	r3, r3, #31
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	fa22 f303 	lsr.w	r3, r2, r3
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d06e      	beq.n	80052cc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a69      	ldr	r2, [pc, #420]	@ (8005398 <HAL_DMA_IRQHandler+0x3f8>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d04a      	beq.n	800528e <HAL_DMA_IRQHandler+0x2ee>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a67      	ldr	r2, [pc, #412]	@ (800539c <HAL_DMA_IRQHandler+0x3fc>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d045      	beq.n	800528e <HAL_DMA_IRQHandler+0x2ee>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a66      	ldr	r2, [pc, #408]	@ (80053a0 <HAL_DMA_IRQHandler+0x400>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d040      	beq.n	800528e <HAL_DMA_IRQHandler+0x2ee>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a64      	ldr	r2, [pc, #400]	@ (80053a4 <HAL_DMA_IRQHandler+0x404>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d03b      	beq.n	800528e <HAL_DMA_IRQHandler+0x2ee>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a63      	ldr	r2, [pc, #396]	@ (80053a8 <HAL_DMA_IRQHandler+0x408>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d036      	beq.n	800528e <HAL_DMA_IRQHandler+0x2ee>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a61      	ldr	r2, [pc, #388]	@ (80053ac <HAL_DMA_IRQHandler+0x40c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d031      	beq.n	800528e <HAL_DMA_IRQHandler+0x2ee>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a60      	ldr	r2, [pc, #384]	@ (80053b0 <HAL_DMA_IRQHandler+0x410>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d02c      	beq.n	800528e <HAL_DMA_IRQHandler+0x2ee>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a5e      	ldr	r2, [pc, #376]	@ (80053b4 <HAL_DMA_IRQHandler+0x414>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d027      	beq.n	800528e <HAL_DMA_IRQHandler+0x2ee>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a5d      	ldr	r2, [pc, #372]	@ (80053b8 <HAL_DMA_IRQHandler+0x418>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d022      	beq.n	800528e <HAL_DMA_IRQHandler+0x2ee>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a5b      	ldr	r2, [pc, #364]	@ (80053bc <HAL_DMA_IRQHandler+0x41c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d01d      	beq.n	800528e <HAL_DMA_IRQHandler+0x2ee>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a5a      	ldr	r2, [pc, #360]	@ (80053c0 <HAL_DMA_IRQHandler+0x420>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d018      	beq.n	800528e <HAL_DMA_IRQHandler+0x2ee>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a58      	ldr	r2, [pc, #352]	@ (80053c4 <HAL_DMA_IRQHandler+0x424>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d013      	beq.n	800528e <HAL_DMA_IRQHandler+0x2ee>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a57      	ldr	r2, [pc, #348]	@ (80053c8 <HAL_DMA_IRQHandler+0x428>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d00e      	beq.n	800528e <HAL_DMA_IRQHandler+0x2ee>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a55      	ldr	r2, [pc, #340]	@ (80053cc <HAL_DMA_IRQHandler+0x42c>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d009      	beq.n	800528e <HAL_DMA_IRQHandler+0x2ee>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a54      	ldr	r2, [pc, #336]	@ (80053d0 <HAL_DMA_IRQHandler+0x430>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d004      	beq.n	800528e <HAL_DMA_IRQHandler+0x2ee>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a52      	ldr	r2, [pc, #328]	@ (80053d4 <HAL_DMA_IRQHandler+0x434>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d10a      	bne.n	80052a4 <HAL_DMA_IRQHandler+0x304>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005298:	2b00      	cmp	r3, #0
 800529a:	bf14      	ite	ne
 800529c:	2301      	movne	r3, #1
 800529e:	2300      	moveq	r3, #0
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	e003      	b.n	80052ac <HAL_DMA_IRQHandler+0x30c>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2300      	movs	r3, #0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00d      	beq.n	80052cc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052b4:	f003 031f 	and.w	r3, r3, #31
 80052b8:	2201      	movs	r2, #1
 80052ba:	409a      	lsls	r2, r3
 80052bc:	6a3b      	ldr	r3, [r7, #32]
 80052be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052c4:	f043 0202 	orr.w	r2, r3, #2
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052d0:	f003 031f 	and.w	r3, r3, #31
 80052d4:	2204      	movs	r2, #4
 80052d6:	409a      	lsls	r2, r3
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	4013      	ands	r3, r2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f000 808f 	beq.w	8005400 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a2c      	ldr	r2, [pc, #176]	@ (8005398 <HAL_DMA_IRQHandler+0x3f8>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d04a      	beq.n	8005382 <HAL_DMA_IRQHandler+0x3e2>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a2a      	ldr	r2, [pc, #168]	@ (800539c <HAL_DMA_IRQHandler+0x3fc>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d045      	beq.n	8005382 <HAL_DMA_IRQHandler+0x3e2>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a29      	ldr	r2, [pc, #164]	@ (80053a0 <HAL_DMA_IRQHandler+0x400>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d040      	beq.n	8005382 <HAL_DMA_IRQHandler+0x3e2>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a27      	ldr	r2, [pc, #156]	@ (80053a4 <HAL_DMA_IRQHandler+0x404>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d03b      	beq.n	8005382 <HAL_DMA_IRQHandler+0x3e2>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a26      	ldr	r2, [pc, #152]	@ (80053a8 <HAL_DMA_IRQHandler+0x408>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d036      	beq.n	8005382 <HAL_DMA_IRQHandler+0x3e2>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a24      	ldr	r2, [pc, #144]	@ (80053ac <HAL_DMA_IRQHandler+0x40c>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d031      	beq.n	8005382 <HAL_DMA_IRQHandler+0x3e2>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a23      	ldr	r2, [pc, #140]	@ (80053b0 <HAL_DMA_IRQHandler+0x410>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d02c      	beq.n	8005382 <HAL_DMA_IRQHandler+0x3e2>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a21      	ldr	r2, [pc, #132]	@ (80053b4 <HAL_DMA_IRQHandler+0x414>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d027      	beq.n	8005382 <HAL_DMA_IRQHandler+0x3e2>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a20      	ldr	r2, [pc, #128]	@ (80053b8 <HAL_DMA_IRQHandler+0x418>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d022      	beq.n	8005382 <HAL_DMA_IRQHandler+0x3e2>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a1e      	ldr	r2, [pc, #120]	@ (80053bc <HAL_DMA_IRQHandler+0x41c>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d01d      	beq.n	8005382 <HAL_DMA_IRQHandler+0x3e2>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a1d      	ldr	r2, [pc, #116]	@ (80053c0 <HAL_DMA_IRQHandler+0x420>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d018      	beq.n	8005382 <HAL_DMA_IRQHandler+0x3e2>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a1b      	ldr	r2, [pc, #108]	@ (80053c4 <HAL_DMA_IRQHandler+0x424>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d013      	beq.n	8005382 <HAL_DMA_IRQHandler+0x3e2>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a1a      	ldr	r2, [pc, #104]	@ (80053c8 <HAL_DMA_IRQHandler+0x428>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d00e      	beq.n	8005382 <HAL_DMA_IRQHandler+0x3e2>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a18      	ldr	r2, [pc, #96]	@ (80053cc <HAL_DMA_IRQHandler+0x42c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d009      	beq.n	8005382 <HAL_DMA_IRQHandler+0x3e2>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a17      	ldr	r2, [pc, #92]	@ (80053d0 <HAL_DMA_IRQHandler+0x430>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d004      	beq.n	8005382 <HAL_DMA_IRQHandler+0x3e2>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a15      	ldr	r2, [pc, #84]	@ (80053d4 <HAL_DMA_IRQHandler+0x434>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d12a      	bne.n	80053d8 <HAL_DMA_IRQHandler+0x438>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0302 	and.w	r3, r3, #2
 800538c:	2b00      	cmp	r3, #0
 800538e:	bf14      	ite	ne
 8005390:	2301      	movne	r3, #1
 8005392:	2300      	moveq	r3, #0
 8005394:	b2db      	uxtb	r3, r3
 8005396:	e023      	b.n	80053e0 <HAL_DMA_IRQHandler+0x440>
 8005398:	40020010 	.word	0x40020010
 800539c:	40020028 	.word	0x40020028
 80053a0:	40020040 	.word	0x40020040
 80053a4:	40020058 	.word	0x40020058
 80053a8:	40020070 	.word	0x40020070
 80053ac:	40020088 	.word	0x40020088
 80053b0:	400200a0 	.word	0x400200a0
 80053b4:	400200b8 	.word	0x400200b8
 80053b8:	40020410 	.word	0x40020410
 80053bc:	40020428 	.word	0x40020428
 80053c0:	40020440 	.word	0x40020440
 80053c4:	40020458 	.word	0x40020458
 80053c8:	40020470 	.word	0x40020470
 80053cc:	40020488 	.word	0x40020488
 80053d0:	400204a0 	.word	0x400204a0
 80053d4:	400204b8 	.word	0x400204b8
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2300      	movs	r3, #0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00d      	beq.n	8005400 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053e8:	f003 031f 	and.w	r3, r3, #31
 80053ec:	2204      	movs	r2, #4
 80053ee:	409a      	lsls	r2, r3
 80053f0:	6a3b      	ldr	r3, [r7, #32]
 80053f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053f8:	f043 0204 	orr.w	r2, r3, #4
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005404:	f003 031f 	and.w	r3, r3, #31
 8005408:	2210      	movs	r2, #16
 800540a:	409a      	lsls	r2, r3
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	4013      	ands	r3, r2
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 80a6 	beq.w	8005562 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a85      	ldr	r2, [pc, #532]	@ (8005630 <HAL_DMA_IRQHandler+0x690>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d04a      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x516>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a83      	ldr	r2, [pc, #524]	@ (8005634 <HAL_DMA_IRQHandler+0x694>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d045      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x516>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a82      	ldr	r2, [pc, #520]	@ (8005638 <HAL_DMA_IRQHandler+0x698>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d040      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x516>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a80      	ldr	r2, [pc, #512]	@ (800563c <HAL_DMA_IRQHandler+0x69c>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d03b      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x516>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a7f      	ldr	r2, [pc, #508]	@ (8005640 <HAL_DMA_IRQHandler+0x6a0>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d036      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x516>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a7d      	ldr	r2, [pc, #500]	@ (8005644 <HAL_DMA_IRQHandler+0x6a4>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d031      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x516>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a7c      	ldr	r2, [pc, #496]	@ (8005648 <HAL_DMA_IRQHandler+0x6a8>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d02c      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x516>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a7a      	ldr	r2, [pc, #488]	@ (800564c <HAL_DMA_IRQHandler+0x6ac>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d027      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x516>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a79      	ldr	r2, [pc, #484]	@ (8005650 <HAL_DMA_IRQHandler+0x6b0>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d022      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x516>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a77      	ldr	r2, [pc, #476]	@ (8005654 <HAL_DMA_IRQHandler+0x6b4>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d01d      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x516>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a76      	ldr	r2, [pc, #472]	@ (8005658 <HAL_DMA_IRQHandler+0x6b8>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d018      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x516>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a74      	ldr	r2, [pc, #464]	@ (800565c <HAL_DMA_IRQHandler+0x6bc>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d013      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x516>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a73      	ldr	r2, [pc, #460]	@ (8005660 <HAL_DMA_IRQHandler+0x6c0>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d00e      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x516>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a71      	ldr	r2, [pc, #452]	@ (8005664 <HAL_DMA_IRQHandler+0x6c4>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d009      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x516>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a70      	ldr	r2, [pc, #448]	@ (8005668 <HAL_DMA_IRQHandler+0x6c8>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d004      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x516>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a6e      	ldr	r2, [pc, #440]	@ (800566c <HAL_DMA_IRQHandler+0x6cc>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d10a      	bne.n	80054cc <HAL_DMA_IRQHandler+0x52c>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0308 	and.w	r3, r3, #8
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	bf14      	ite	ne
 80054c4:	2301      	movne	r3, #1
 80054c6:	2300      	moveq	r3, #0
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	e009      	b.n	80054e0 <HAL_DMA_IRQHandler+0x540>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0304 	and.w	r3, r3, #4
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	bf14      	ite	ne
 80054da:	2301      	movne	r3, #1
 80054dc:	2300      	moveq	r3, #0
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d03e      	beq.n	8005562 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054e8:	f003 031f 	and.w	r3, r3, #31
 80054ec:	2210      	movs	r2, #16
 80054ee:	409a      	lsls	r2, r3
 80054f0:	6a3b      	ldr	r3, [r7, #32]
 80054f2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d018      	beq.n	8005534 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d108      	bne.n	8005522 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005514:	2b00      	cmp	r3, #0
 8005516:	d024      	beq.n	8005562 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	4798      	blx	r3
 8005520:	e01f      	b.n	8005562 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005526:	2b00      	cmp	r3, #0
 8005528:	d01b      	beq.n	8005562 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	4798      	blx	r3
 8005532:	e016      	b.n	8005562 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800553e:	2b00      	cmp	r3, #0
 8005540:	d107      	bne.n	8005552 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f022 0208 	bic.w	r2, r2, #8
 8005550:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005566:	f003 031f 	and.w	r3, r3, #31
 800556a:	2220      	movs	r2, #32
 800556c:	409a      	lsls	r2, r3
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	4013      	ands	r3, r2
 8005572:	2b00      	cmp	r3, #0
 8005574:	f000 8110 	beq.w	8005798 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a2c      	ldr	r2, [pc, #176]	@ (8005630 <HAL_DMA_IRQHandler+0x690>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d04a      	beq.n	8005618 <HAL_DMA_IRQHandler+0x678>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a2b      	ldr	r2, [pc, #172]	@ (8005634 <HAL_DMA_IRQHandler+0x694>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d045      	beq.n	8005618 <HAL_DMA_IRQHandler+0x678>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a29      	ldr	r2, [pc, #164]	@ (8005638 <HAL_DMA_IRQHandler+0x698>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d040      	beq.n	8005618 <HAL_DMA_IRQHandler+0x678>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a28      	ldr	r2, [pc, #160]	@ (800563c <HAL_DMA_IRQHandler+0x69c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d03b      	beq.n	8005618 <HAL_DMA_IRQHandler+0x678>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a26      	ldr	r2, [pc, #152]	@ (8005640 <HAL_DMA_IRQHandler+0x6a0>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d036      	beq.n	8005618 <HAL_DMA_IRQHandler+0x678>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a25      	ldr	r2, [pc, #148]	@ (8005644 <HAL_DMA_IRQHandler+0x6a4>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d031      	beq.n	8005618 <HAL_DMA_IRQHandler+0x678>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a23      	ldr	r2, [pc, #140]	@ (8005648 <HAL_DMA_IRQHandler+0x6a8>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d02c      	beq.n	8005618 <HAL_DMA_IRQHandler+0x678>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a22      	ldr	r2, [pc, #136]	@ (800564c <HAL_DMA_IRQHandler+0x6ac>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d027      	beq.n	8005618 <HAL_DMA_IRQHandler+0x678>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a20      	ldr	r2, [pc, #128]	@ (8005650 <HAL_DMA_IRQHandler+0x6b0>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d022      	beq.n	8005618 <HAL_DMA_IRQHandler+0x678>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a1f      	ldr	r2, [pc, #124]	@ (8005654 <HAL_DMA_IRQHandler+0x6b4>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d01d      	beq.n	8005618 <HAL_DMA_IRQHandler+0x678>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a1d      	ldr	r2, [pc, #116]	@ (8005658 <HAL_DMA_IRQHandler+0x6b8>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d018      	beq.n	8005618 <HAL_DMA_IRQHandler+0x678>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a1c      	ldr	r2, [pc, #112]	@ (800565c <HAL_DMA_IRQHandler+0x6bc>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d013      	beq.n	8005618 <HAL_DMA_IRQHandler+0x678>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a1a      	ldr	r2, [pc, #104]	@ (8005660 <HAL_DMA_IRQHandler+0x6c0>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d00e      	beq.n	8005618 <HAL_DMA_IRQHandler+0x678>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a19      	ldr	r2, [pc, #100]	@ (8005664 <HAL_DMA_IRQHandler+0x6c4>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d009      	beq.n	8005618 <HAL_DMA_IRQHandler+0x678>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a17      	ldr	r2, [pc, #92]	@ (8005668 <HAL_DMA_IRQHandler+0x6c8>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d004      	beq.n	8005618 <HAL_DMA_IRQHandler+0x678>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a16      	ldr	r2, [pc, #88]	@ (800566c <HAL_DMA_IRQHandler+0x6cc>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d12b      	bne.n	8005670 <HAL_DMA_IRQHandler+0x6d0>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0310 	and.w	r3, r3, #16
 8005622:	2b00      	cmp	r3, #0
 8005624:	bf14      	ite	ne
 8005626:	2301      	movne	r3, #1
 8005628:	2300      	moveq	r3, #0
 800562a:	b2db      	uxtb	r3, r3
 800562c:	e02a      	b.n	8005684 <HAL_DMA_IRQHandler+0x6e4>
 800562e:	bf00      	nop
 8005630:	40020010 	.word	0x40020010
 8005634:	40020028 	.word	0x40020028
 8005638:	40020040 	.word	0x40020040
 800563c:	40020058 	.word	0x40020058
 8005640:	40020070 	.word	0x40020070
 8005644:	40020088 	.word	0x40020088
 8005648:	400200a0 	.word	0x400200a0
 800564c:	400200b8 	.word	0x400200b8
 8005650:	40020410 	.word	0x40020410
 8005654:	40020428 	.word	0x40020428
 8005658:	40020440 	.word	0x40020440
 800565c:	40020458 	.word	0x40020458
 8005660:	40020470 	.word	0x40020470
 8005664:	40020488 	.word	0x40020488
 8005668:	400204a0 	.word	0x400204a0
 800566c:	400204b8 	.word	0x400204b8
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b00      	cmp	r3, #0
 800567c:	bf14      	ite	ne
 800567e:	2301      	movne	r3, #1
 8005680:	2300      	moveq	r3, #0
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b00      	cmp	r3, #0
 8005686:	f000 8087 	beq.w	8005798 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800568e:	f003 031f 	and.w	r3, r3, #31
 8005692:	2220      	movs	r2, #32
 8005694:	409a      	lsls	r2, r3
 8005696:	6a3b      	ldr	r3, [r7, #32]
 8005698:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b04      	cmp	r3, #4
 80056a4:	d139      	bne.n	800571a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f022 0216 	bic.w	r2, r2, #22
 80056b4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	695a      	ldr	r2, [r3, #20]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80056c4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d103      	bne.n	80056d6 <HAL_DMA_IRQHandler+0x736>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d007      	beq.n	80056e6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 0208 	bic.w	r2, r2, #8
 80056e4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056ea:	f003 031f 	and.w	r3, r3, #31
 80056ee:	223f      	movs	r2, #63	@ 0x3f
 80056f0:	409a      	lsls	r2, r3
 80056f2:	6a3b      	ldr	r3, [r7, #32]
 80056f4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800570a:	2b00      	cmp	r3, #0
 800570c:	f000 834a 	beq.w	8005da4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	4798      	blx	r3
          }
          return;
 8005718:	e344      	b.n	8005da4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d018      	beq.n	800575a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d108      	bne.n	8005748 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800573a:	2b00      	cmp	r3, #0
 800573c:	d02c      	beq.n	8005798 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	4798      	blx	r3
 8005746:	e027      	b.n	8005798 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800574c:	2b00      	cmp	r3, #0
 800574e:	d023      	beq.n	8005798 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	4798      	blx	r3
 8005758:	e01e      	b.n	8005798 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10f      	bne.n	8005788 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f022 0210 	bic.w	r2, r2, #16
 8005776:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800578c:	2b00      	cmp	r3, #0
 800578e:	d003      	beq.n	8005798 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800579c:	2b00      	cmp	r3, #0
 800579e:	f000 8306 	beq.w	8005dae <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	f000 8088 	beq.w	80058c0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2204      	movs	r2, #4
 80057b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a7a      	ldr	r2, [pc, #488]	@ (80059a8 <HAL_DMA_IRQHandler+0xa08>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d04a      	beq.n	8005858 <HAL_DMA_IRQHandler+0x8b8>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a79      	ldr	r2, [pc, #484]	@ (80059ac <HAL_DMA_IRQHandler+0xa0c>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d045      	beq.n	8005858 <HAL_DMA_IRQHandler+0x8b8>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a77      	ldr	r2, [pc, #476]	@ (80059b0 <HAL_DMA_IRQHandler+0xa10>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d040      	beq.n	8005858 <HAL_DMA_IRQHandler+0x8b8>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a76      	ldr	r2, [pc, #472]	@ (80059b4 <HAL_DMA_IRQHandler+0xa14>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d03b      	beq.n	8005858 <HAL_DMA_IRQHandler+0x8b8>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a74      	ldr	r2, [pc, #464]	@ (80059b8 <HAL_DMA_IRQHandler+0xa18>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d036      	beq.n	8005858 <HAL_DMA_IRQHandler+0x8b8>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a73      	ldr	r2, [pc, #460]	@ (80059bc <HAL_DMA_IRQHandler+0xa1c>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d031      	beq.n	8005858 <HAL_DMA_IRQHandler+0x8b8>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a71      	ldr	r2, [pc, #452]	@ (80059c0 <HAL_DMA_IRQHandler+0xa20>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d02c      	beq.n	8005858 <HAL_DMA_IRQHandler+0x8b8>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a70      	ldr	r2, [pc, #448]	@ (80059c4 <HAL_DMA_IRQHandler+0xa24>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d027      	beq.n	8005858 <HAL_DMA_IRQHandler+0x8b8>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a6e      	ldr	r2, [pc, #440]	@ (80059c8 <HAL_DMA_IRQHandler+0xa28>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d022      	beq.n	8005858 <HAL_DMA_IRQHandler+0x8b8>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a6d      	ldr	r2, [pc, #436]	@ (80059cc <HAL_DMA_IRQHandler+0xa2c>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d01d      	beq.n	8005858 <HAL_DMA_IRQHandler+0x8b8>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a6b      	ldr	r2, [pc, #428]	@ (80059d0 <HAL_DMA_IRQHandler+0xa30>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d018      	beq.n	8005858 <HAL_DMA_IRQHandler+0x8b8>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a6a      	ldr	r2, [pc, #424]	@ (80059d4 <HAL_DMA_IRQHandler+0xa34>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d013      	beq.n	8005858 <HAL_DMA_IRQHandler+0x8b8>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a68      	ldr	r2, [pc, #416]	@ (80059d8 <HAL_DMA_IRQHandler+0xa38>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d00e      	beq.n	8005858 <HAL_DMA_IRQHandler+0x8b8>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a67      	ldr	r2, [pc, #412]	@ (80059dc <HAL_DMA_IRQHandler+0xa3c>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d009      	beq.n	8005858 <HAL_DMA_IRQHandler+0x8b8>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a65      	ldr	r2, [pc, #404]	@ (80059e0 <HAL_DMA_IRQHandler+0xa40>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d004      	beq.n	8005858 <HAL_DMA_IRQHandler+0x8b8>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a64      	ldr	r2, [pc, #400]	@ (80059e4 <HAL_DMA_IRQHandler+0xa44>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d108      	bne.n	800586a <HAL_DMA_IRQHandler+0x8ca>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f022 0201 	bic.w	r2, r2, #1
 8005866:	601a      	str	r2, [r3, #0]
 8005868:	e007      	b.n	800587a <HAL_DMA_IRQHandler+0x8da>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f022 0201 	bic.w	r2, r2, #1
 8005878:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	3301      	adds	r3, #1
 800587e:	60fb      	str	r3, [r7, #12]
 8005880:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005882:	429a      	cmp	r2, r3
 8005884:	d307      	bcc.n	8005896 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0301 	and.w	r3, r3, #1
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1f2      	bne.n	800587a <HAL_DMA_IRQHandler+0x8da>
 8005894:	e000      	b.n	8005898 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005896:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d004      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2203      	movs	r2, #3
 80058aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80058ae:	e003      	b.n	80058b8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f000 8272 	beq.w	8005dae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	4798      	blx	r3
 80058d2:	e26c      	b.n	8005dae <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a43      	ldr	r2, [pc, #268]	@ (80059e8 <HAL_DMA_IRQHandler+0xa48>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d022      	beq.n	8005924 <HAL_DMA_IRQHandler+0x984>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a42      	ldr	r2, [pc, #264]	@ (80059ec <HAL_DMA_IRQHandler+0xa4c>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d01d      	beq.n	8005924 <HAL_DMA_IRQHandler+0x984>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a40      	ldr	r2, [pc, #256]	@ (80059f0 <HAL_DMA_IRQHandler+0xa50>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d018      	beq.n	8005924 <HAL_DMA_IRQHandler+0x984>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a3f      	ldr	r2, [pc, #252]	@ (80059f4 <HAL_DMA_IRQHandler+0xa54>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d013      	beq.n	8005924 <HAL_DMA_IRQHandler+0x984>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a3d      	ldr	r2, [pc, #244]	@ (80059f8 <HAL_DMA_IRQHandler+0xa58>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d00e      	beq.n	8005924 <HAL_DMA_IRQHandler+0x984>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a3c      	ldr	r2, [pc, #240]	@ (80059fc <HAL_DMA_IRQHandler+0xa5c>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d009      	beq.n	8005924 <HAL_DMA_IRQHandler+0x984>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a3a      	ldr	r2, [pc, #232]	@ (8005a00 <HAL_DMA_IRQHandler+0xa60>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d004      	beq.n	8005924 <HAL_DMA_IRQHandler+0x984>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a39      	ldr	r2, [pc, #228]	@ (8005a04 <HAL_DMA_IRQHandler+0xa64>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d101      	bne.n	8005928 <HAL_DMA_IRQHandler+0x988>
 8005924:	2301      	movs	r3, #1
 8005926:	e000      	b.n	800592a <HAL_DMA_IRQHandler+0x98a>
 8005928:	2300      	movs	r3, #0
 800592a:	2b00      	cmp	r3, #0
 800592c:	f000 823f 	beq.w	8005dae <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800593c:	f003 031f 	and.w	r3, r3, #31
 8005940:	2204      	movs	r2, #4
 8005942:	409a      	lsls	r2, r3
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	4013      	ands	r3, r2
 8005948:	2b00      	cmp	r3, #0
 800594a:	f000 80cd 	beq.w	8005ae8 <HAL_DMA_IRQHandler+0xb48>
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	f003 0304 	and.w	r3, r3, #4
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 80c7 	beq.w	8005ae8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800595e:	f003 031f 	and.w	r3, r3, #31
 8005962:	2204      	movs	r2, #4
 8005964:	409a      	lsls	r2, r3
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d049      	beq.n	8005a08 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d109      	bne.n	8005992 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005982:	2b00      	cmp	r3, #0
 8005984:	f000 8210 	beq.w	8005da8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005990:	e20a      	b.n	8005da8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005996:	2b00      	cmp	r3, #0
 8005998:	f000 8206 	beq.w	8005da8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059a4:	e200      	b.n	8005da8 <HAL_DMA_IRQHandler+0xe08>
 80059a6:	bf00      	nop
 80059a8:	40020010 	.word	0x40020010
 80059ac:	40020028 	.word	0x40020028
 80059b0:	40020040 	.word	0x40020040
 80059b4:	40020058 	.word	0x40020058
 80059b8:	40020070 	.word	0x40020070
 80059bc:	40020088 	.word	0x40020088
 80059c0:	400200a0 	.word	0x400200a0
 80059c4:	400200b8 	.word	0x400200b8
 80059c8:	40020410 	.word	0x40020410
 80059cc:	40020428 	.word	0x40020428
 80059d0:	40020440 	.word	0x40020440
 80059d4:	40020458 	.word	0x40020458
 80059d8:	40020470 	.word	0x40020470
 80059dc:	40020488 	.word	0x40020488
 80059e0:	400204a0 	.word	0x400204a0
 80059e4:	400204b8 	.word	0x400204b8
 80059e8:	58025408 	.word	0x58025408
 80059ec:	5802541c 	.word	0x5802541c
 80059f0:	58025430 	.word	0x58025430
 80059f4:	58025444 	.word	0x58025444
 80059f8:	58025458 	.word	0x58025458
 80059fc:	5802546c 	.word	0x5802546c
 8005a00:	58025480 	.word	0x58025480
 8005a04:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	f003 0320 	and.w	r3, r3, #32
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d160      	bne.n	8005ad4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a7f      	ldr	r2, [pc, #508]	@ (8005c14 <HAL_DMA_IRQHandler+0xc74>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d04a      	beq.n	8005ab2 <HAL_DMA_IRQHandler+0xb12>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a7d      	ldr	r2, [pc, #500]	@ (8005c18 <HAL_DMA_IRQHandler+0xc78>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d045      	beq.n	8005ab2 <HAL_DMA_IRQHandler+0xb12>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a7c      	ldr	r2, [pc, #496]	@ (8005c1c <HAL_DMA_IRQHandler+0xc7c>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d040      	beq.n	8005ab2 <HAL_DMA_IRQHandler+0xb12>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a7a      	ldr	r2, [pc, #488]	@ (8005c20 <HAL_DMA_IRQHandler+0xc80>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d03b      	beq.n	8005ab2 <HAL_DMA_IRQHandler+0xb12>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a79      	ldr	r2, [pc, #484]	@ (8005c24 <HAL_DMA_IRQHandler+0xc84>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d036      	beq.n	8005ab2 <HAL_DMA_IRQHandler+0xb12>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a77      	ldr	r2, [pc, #476]	@ (8005c28 <HAL_DMA_IRQHandler+0xc88>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d031      	beq.n	8005ab2 <HAL_DMA_IRQHandler+0xb12>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a76      	ldr	r2, [pc, #472]	@ (8005c2c <HAL_DMA_IRQHandler+0xc8c>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d02c      	beq.n	8005ab2 <HAL_DMA_IRQHandler+0xb12>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a74      	ldr	r2, [pc, #464]	@ (8005c30 <HAL_DMA_IRQHandler+0xc90>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d027      	beq.n	8005ab2 <HAL_DMA_IRQHandler+0xb12>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a73      	ldr	r2, [pc, #460]	@ (8005c34 <HAL_DMA_IRQHandler+0xc94>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d022      	beq.n	8005ab2 <HAL_DMA_IRQHandler+0xb12>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a71      	ldr	r2, [pc, #452]	@ (8005c38 <HAL_DMA_IRQHandler+0xc98>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d01d      	beq.n	8005ab2 <HAL_DMA_IRQHandler+0xb12>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a70      	ldr	r2, [pc, #448]	@ (8005c3c <HAL_DMA_IRQHandler+0xc9c>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d018      	beq.n	8005ab2 <HAL_DMA_IRQHandler+0xb12>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a6e      	ldr	r2, [pc, #440]	@ (8005c40 <HAL_DMA_IRQHandler+0xca0>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d013      	beq.n	8005ab2 <HAL_DMA_IRQHandler+0xb12>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a6d      	ldr	r2, [pc, #436]	@ (8005c44 <HAL_DMA_IRQHandler+0xca4>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d00e      	beq.n	8005ab2 <HAL_DMA_IRQHandler+0xb12>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a6b      	ldr	r2, [pc, #428]	@ (8005c48 <HAL_DMA_IRQHandler+0xca8>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d009      	beq.n	8005ab2 <HAL_DMA_IRQHandler+0xb12>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a6a      	ldr	r2, [pc, #424]	@ (8005c4c <HAL_DMA_IRQHandler+0xcac>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d004      	beq.n	8005ab2 <HAL_DMA_IRQHandler+0xb12>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a68      	ldr	r2, [pc, #416]	@ (8005c50 <HAL_DMA_IRQHandler+0xcb0>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d108      	bne.n	8005ac4 <HAL_DMA_IRQHandler+0xb24>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f022 0208 	bic.w	r2, r2, #8
 8005ac0:	601a      	str	r2, [r3, #0]
 8005ac2:	e007      	b.n	8005ad4 <HAL_DMA_IRQHandler+0xb34>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f022 0204 	bic.w	r2, r2, #4
 8005ad2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f000 8165 	beq.w	8005da8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ae6:	e15f      	b.n	8005da8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005aec:	f003 031f 	and.w	r3, r3, #31
 8005af0:	2202      	movs	r2, #2
 8005af2:	409a      	lsls	r2, r3
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	4013      	ands	r3, r2
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f000 80c5 	beq.w	8005c88 <HAL_DMA_IRQHandler+0xce8>
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	f003 0302 	and.w	r3, r3, #2
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f000 80bf 	beq.w	8005c88 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b0e:	f003 031f 	and.w	r3, r3, #31
 8005b12:	2202      	movs	r2, #2
 8005b14:	409a      	lsls	r2, r3
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d018      	beq.n	8005b56 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d109      	bne.n	8005b42 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f000 813a 	beq.w	8005dac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b40:	e134      	b.n	8005dac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f000 8130 	beq.w	8005dac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b54:	e12a      	b.n	8005dac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	f003 0320 	and.w	r3, r3, #32
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f040 8089 	bne.w	8005c74 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a2b      	ldr	r2, [pc, #172]	@ (8005c14 <HAL_DMA_IRQHandler+0xc74>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d04a      	beq.n	8005c02 <HAL_DMA_IRQHandler+0xc62>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a29      	ldr	r2, [pc, #164]	@ (8005c18 <HAL_DMA_IRQHandler+0xc78>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d045      	beq.n	8005c02 <HAL_DMA_IRQHandler+0xc62>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a28      	ldr	r2, [pc, #160]	@ (8005c1c <HAL_DMA_IRQHandler+0xc7c>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d040      	beq.n	8005c02 <HAL_DMA_IRQHandler+0xc62>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a26      	ldr	r2, [pc, #152]	@ (8005c20 <HAL_DMA_IRQHandler+0xc80>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d03b      	beq.n	8005c02 <HAL_DMA_IRQHandler+0xc62>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a25      	ldr	r2, [pc, #148]	@ (8005c24 <HAL_DMA_IRQHandler+0xc84>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d036      	beq.n	8005c02 <HAL_DMA_IRQHandler+0xc62>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a23      	ldr	r2, [pc, #140]	@ (8005c28 <HAL_DMA_IRQHandler+0xc88>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d031      	beq.n	8005c02 <HAL_DMA_IRQHandler+0xc62>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a22      	ldr	r2, [pc, #136]	@ (8005c2c <HAL_DMA_IRQHandler+0xc8c>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d02c      	beq.n	8005c02 <HAL_DMA_IRQHandler+0xc62>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a20      	ldr	r2, [pc, #128]	@ (8005c30 <HAL_DMA_IRQHandler+0xc90>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d027      	beq.n	8005c02 <HAL_DMA_IRQHandler+0xc62>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a1f      	ldr	r2, [pc, #124]	@ (8005c34 <HAL_DMA_IRQHandler+0xc94>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d022      	beq.n	8005c02 <HAL_DMA_IRQHandler+0xc62>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8005c38 <HAL_DMA_IRQHandler+0xc98>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d01d      	beq.n	8005c02 <HAL_DMA_IRQHandler+0xc62>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a1c      	ldr	r2, [pc, #112]	@ (8005c3c <HAL_DMA_IRQHandler+0xc9c>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d018      	beq.n	8005c02 <HAL_DMA_IRQHandler+0xc62>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a1a      	ldr	r2, [pc, #104]	@ (8005c40 <HAL_DMA_IRQHandler+0xca0>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d013      	beq.n	8005c02 <HAL_DMA_IRQHandler+0xc62>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a19      	ldr	r2, [pc, #100]	@ (8005c44 <HAL_DMA_IRQHandler+0xca4>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d00e      	beq.n	8005c02 <HAL_DMA_IRQHandler+0xc62>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a17      	ldr	r2, [pc, #92]	@ (8005c48 <HAL_DMA_IRQHandler+0xca8>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d009      	beq.n	8005c02 <HAL_DMA_IRQHandler+0xc62>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a16      	ldr	r2, [pc, #88]	@ (8005c4c <HAL_DMA_IRQHandler+0xcac>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d004      	beq.n	8005c02 <HAL_DMA_IRQHandler+0xc62>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a14      	ldr	r2, [pc, #80]	@ (8005c50 <HAL_DMA_IRQHandler+0xcb0>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d128      	bne.n	8005c54 <HAL_DMA_IRQHandler+0xcb4>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f022 0214 	bic.w	r2, r2, #20
 8005c10:	601a      	str	r2, [r3, #0]
 8005c12:	e027      	b.n	8005c64 <HAL_DMA_IRQHandler+0xcc4>
 8005c14:	40020010 	.word	0x40020010
 8005c18:	40020028 	.word	0x40020028
 8005c1c:	40020040 	.word	0x40020040
 8005c20:	40020058 	.word	0x40020058
 8005c24:	40020070 	.word	0x40020070
 8005c28:	40020088 	.word	0x40020088
 8005c2c:	400200a0 	.word	0x400200a0
 8005c30:	400200b8 	.word	0x400200b8
 8005c34:	40020410 	.word	0x40020410
 8005c38:	40020428 	.word	0x40020428
 8005c3c:	40020440 	.word	0x40020440
 8005c40:	40020458 	.word	0x40020458
 8005c44:	40020470 	.word	0x40020470
 8005c48:	40020488 	.word	0x40020488
 8005c4c:	400204a0 	.word	0x400204a0
 8005c50:	400204b8 	.word	0x400204b8
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f022 020a 	bic.w	r2, r2, #10
 8005c62:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	f000 8097 	beq.w	8005dac <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c86:	e091      	b.n	8005dac <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c8c:	f003 031f 	and.w	r3, r3, #31
 8005c90:	2208      	movs	r2, #8
 8005c92:	409a      	lsls	r2, r3
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	4013      	ands	r3, r2
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f000 8088 	beq.w	8005dae <HAL_DMA_IRQHandler+0xe0e>
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	f003 0308 	and.w	r3, r3, #8
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f000 8082 	beq.w	8005dae <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a41      	ldr	r2, [pc, #260]	@ (8005db4 <HAL_DMA_IRQHandler+0xe14>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d04a      	beq.n	8005d4a <HAL_DMA_IRQHandler+0xdaa>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a3f      	ldr	r2, [pc, #252]	@ (8005db8 <HAL_DMA_IRQHandler+0xe18>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d045      	beq.n	8005d4a <HAL_DMA_IRQHandler+0xdaa>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a3e      	ldr	r2, [pc, #248]	@ (8005dbc <HAL_DMA_IRQHandler+0xe1c>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d040      	beq.n	8005d4a <HAL_DMA_IRQHandler+0xdaa>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a3c      	ldr	r2, [pc, #240]	@ (8005dc0 <HAL_DMA_IRQHandler+0xe20>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d03b      	beq.n	8005d4a <HAL_DMA_IRQHandler+0xdaa>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a3b      	ldr	r2, [pc, #236]	@ (8005dc4 <HAL_DMA_IRQHandler+0xe24>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d036      	beq.n	8005d4a <HAL_DMA_IRQHandler+0xdaa>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a39      	ldr	r2, [pc, #228]	@ (8005dc8 <HAL_DMA_IRQHandler+0xe28>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d031      	beq.n	8005d4a <HAL_DMA_IRQHandler+0xdaa>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a38      	ldr	r2, [pc, #224]	@ (8005dcc <HAL_DMA_IRQHandler+0xe2c>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d02c      	beq.n	8005d4a <HAL_DMA_IRQHandler+0xdaa>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a36      	ldr	r2, [pc, #216]	@ (8005dd0 <HAL_DMA_IRQHandler+0xe30>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d027      	beq.n	8005d4a <HAL_DMA_IRQHandler+0xdaa>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a35      	ldr	r2, [pc, #212]	@ (8005dd4 <HAL_DMA_IRQHandler+0xe34>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d022      	beq.n	8005d4a <HAL_DMA_IRQHandler+0xdaa>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a33      	ldr	r2, [pc, #204]	@ (8005dd8 <HAL_DMA_IRQHandler+0xe38>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d01d      	beq.n	8005d4a <HAL_DMA_IRQHandler+0xdaa>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a32      	ldr	r2, [pc, #200]	@ (8005ddc <HAL_DMA_IRQHandler+0xe3c>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d018      	beq.n	8005d4a <HAL_DMA_IRQHandler+0xdaa>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a30      	ldr	r2, [pc, #192]	@ (8005de0 <HAL_DMA_IRQHandler+0xe40>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d013      	beq.n	8005d4a <HAL_DMA_IRQHandler+0xdaa>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a2f      	ldr	r2, [pc, #188]	@ (8005de4 <HAL_DMA_IRQHandler+0xe44>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d00e      	beq.n	8005d4a <HAL_DMA_IRQHandler+0xdaa>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a2d      	ldr	r2, [pc, #180]	@ (8005de8 <HAL_DMA_IRQHandler+0xe48>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d009      	beq.n	8005d4a <HAL_DMA_IRQHandler+0xdaa>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a2c      	ldr	r2, [pc, #176]	@ (8005dec <HAL_DMA_IRQHandler+0xe4c>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d004      	beq.n	8005d4a <HAL_DMA_IRQHandler+0xdaa>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a2a      	ldr	r2, [pc, #168]	@ (8005df0 <HAL_DMA_IRQHandler+0xe50>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d108      	bne.n	8005d5c <HAL_DMA_IRQHandler+0xdbc>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f022 021c 	bic.w	r2, r2, #28
 8005d58:	601a      	str	r2, [r3, #0]
 8005d5a:	e007      	b.n	8005d6c <HAL_DMA_IRQHandler+0xdcc>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f022 020e 	bic.w	r2, r2, #14
 8005d6a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d70:	f003 031f 	and.w	r3, r3, #31
 8005d74:	2201      	movs	r2, #1
 8005d76:	409a      	lsls	r2, r3
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d009      	beq.n	8005dae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	4798      	blx	r3
 8005da2:	e004      	b.n	8005dae <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005da4:	bf00      	nop
 8005da6:	e002      	b.n	8005dae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005da8:	bf00      	nop
 8005daa:	e000      	b.n	8005dae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005dac:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005dae:	3728      	adds	r7, #40	@ 0x28
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	40020010 	.word	0x40020010
 8005db8:	40020028 	.word	0x40020028
 8005dbc:	40020040 	.word	0x40020040
 8005dc0:	40020058 	.word	0x40020058
 8005dc4:	40020070 	.word	0x40020070
 8005dc8:	40020088 	.word	0x40020088
 8005dcc:	400200a0 	.word	0x400200a0
 8005dd0:	400200b8 	.word	0x400200b8
 8005dd4:	40020410 	.word	0x40020410
 8005dd8:	40020428 	.word	0x40020428
 8005ddc:	40020440 	.word	0x40020440
 8005de0:	40020458 	.word	0x40020458
 8005de4:	40020470 	.word	0x40020470
 8005de8:	40020488 	.word	0x40020488
 8005dec:	400204a0 	.word	0x400204a0
 8005df0:	400204b8 	.word	0x400204b8

08005df4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
 8005e00:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e06:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e0c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a7f      	ldr	r2, [pc, #508]	@ (8006010 <DMA_SetConfig+0x21c>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d072      	beq.n	8005efe <DMA_SetConfig+0x10a>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a7d      	ldr	r2, [pc, #500]	@ (8006014 <DMA_SetConfig+0x220>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d06d      	beq.n	8005efe <DMA_SetConfig+0x10a>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a7c      	ldr	r2, [pc, #496]	@ (8006018 <DMA_SetConfig+0x224>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d068      	beq.n	8005efe <DMA_SetConfig+0x10a>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a7a      	ldr	r2, [pc, #488]	@ (800601c <DMA_SetConfig+0x228>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d063      	beq.n	8005efe <DMA_SetConfig+0x10a>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a79      	ldr	r2, [pc, #484]	@ (8006020 <DMA_SetConfig+0x22c>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d05e      	beq.n	8005efe <DMA_SetConfig+0x10a>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a77      	ldr	r2, [pc, #476]	@ (8006024 <DMA_SetConfig+0x230>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d059      	beq.n	8005efe <DMA_SetConfig+0x10a>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a76      	ldr	r2, [pc, #472]	@ (8006028 <DMA_SetConfig+0x234>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d054      	beq.n	8005efe <DMA_SetConfig+0x10a>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a74      	ldr	r2, [pc, #464]	@ (800602c <DMA_SetConfig+0x238>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d04f      	beq.n	8005efe <DMA_SetConfig+0x10a>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a73      	ldr	r2, [pc, #460]	@ (8006030 <DMA_SetConfig+0x23c>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d04a      	beq.n	8005efe <DMA_SetConfig+0x10a>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a71      	ldr	r2, [pc, #452]	@ (8006034 <DMA_SetConfig+0x240>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d045      	beq.n	8005efe <DMA_SetConfig+0x10a>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a70      	ldr	r2, [pc, #448]	@ (8006038 <DMA_SetConfig+0x244>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d040      	beq.n	8005efe <DMA_SetConfig+0x10a>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a6e      	ldr	r2, [pc, #440]	@ (800603c <DMA_SetConfig+0x248>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d03b      	beq.n	8005efe <DMA_SetConfig+0x10a>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a6d      	ldr	r2, [pc, #436]	@ (8006040 <DMA_SetConfig+0x24c>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d036      	beq.n	8005efe <DMA_SetConfig+0x10a>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a6b      	ldr	r2, [pc, #428]	@ (8006044 <DMA_SetConfig+0x250>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d031      	beq.n	8005efe <DMA_SetConfig+0x10a>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a6a      	ldr	r2, [pc, #424]	@ (8006048 <DMA_SetConfig+0x254>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d02c      	beq.n	8005efe <DMA_SetConfig+0x10a>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a68      	ldr	r2, [pc, #416]	@ (800604c <DMA_SetConfig+0x258>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d027      	beq.n	8005efe <DMA_SetConfig+0x10a>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a67      	ldr	r2, [pc, #412]	@ (8006050 <DMA_SetConfig+0x25c>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d022      	beq.n	8005efe <DMA_SetConfig+0x10a>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a65      	ldr	r2, [pc, #404]	@ (8006054 <DMA_SetConfig+0x260>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d01d      	beq.n	8005efe <DMA_SetConfig+0x10a>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a64      	ldr	r2, [pc, #400]	@ (8006058 <DMA_SetConfig+0x264>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d018      	beq.n	8005efe <DMA_SetConfig+0x10a>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a62      	ldr	r2, [pc, #392]	@ (800605c <DMA_SetConfig+0x268>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d013      	beq.n	8005efe <DMA_SetConfig+0x10a>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a61      	ldr	r2, [pc, #388]	@ (8006060 <DMA_SetConfig+0x26c>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d00e      	beq.n	8005efe <DMA_SetConfig+0x10a>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a5f      	ldr	r2, [pc, #380]	@ (8006064 <DMA_SetConfig+0x270>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d009      	beq.n	8005efe <DMA_SetConfig+0x10a>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a5e      	ldr	r2, [pc, #376]	@ (8006068 <DMA_SetConfig+0x274>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d004      	beq.n	8005efe <DMA_SetConfig+0x10a>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a5c      	ldr	r2, [pc, #368]	@ (800606c <DMA_SetConfig+0x278>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d101      	bne.n	8005f02 <DMA_SetConfig+0x10e>
 8005efe:	2301      	movs	r3, #1
 8005f00:	e000      	b.n	8005f04 <DMA_SetConfig+0x110>
 8005f02:	2300      	movs	r3, #0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d00d      	beq.n	8005f24 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005f10:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d004      	beq.n	8005f24 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005f22:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a39      	ldr	r2, [pc, #228]	@ (8006010 <DMA_SetConfig+0x21c>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d04a      	beq.n	8005fc4 <DMA_SetConfig+0x1d0>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a38      	ldr	r2, [pc, #224]	@ (8006014 <DMA_SetConfig+0x220>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d045      	beq.n	8005fc4 <DMA_SetConfig+0x1d0>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a36      	ldr	r2, [pc, #216]	@ (8006018 <DMA_SetConfig+0x224>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d040      	beq.n	8005fc4 <DMA_SetConfig+0x1d0>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a35      	ldr	r2, [pc, #212]	@ (800601c <DMA_SetConfig+0x228>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d03b      	beq.n	8005fc4 <DMA_SetConfig+0x1d0>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a33      	ldr	r2, [pc, #204]	@ (8006020 <DMA_SetConfig+0x22c>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d036      	beq.n	8005fc4 <DMA_SetConfig+0x1d0>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a32      	ldr	r2, [pc, #200]	@ (8006024 <DMA_SetConfig+0x230>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d031      	beq.n	8005fc4 <DMA_SetConfig+0x1d0>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a30      	ldr	r2, [pc, #192]	@ (8006028 <DMA_SetConfig+0x234>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d02c      	beq.n	8005fc4 <DMA_SetConfig+0x1d0>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a2f      	ldr	r2, [pc, #188]	@ (800602c <DMA_SetConfig+0x238>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d027      	beq.n	8005fc4 <DMA_SetConfig+0x1d0>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a2d      	ldr	r2, [pc, #180]	@ (8006030 <DMA_SetConfig+0x23c>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d022      	beq.n	8005fc4 <DMA_SetConfig+0x1d0>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a2c      	ldr	r2, [pc, #176]	@ (8006034 <DMA_SetConfig+0x240>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d01d      	beq.n	8005fc4 <DMA_SetConfig+0x1d0>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a2a      	ldr	r2, [pc, #168]	@ (8006038 <DMA_SetConfig+0x244>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d018      	beq.n	8005fc4 <DMA_SetConfig+0x1d0>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a29      	ldr	r2, [pc, #164]	@ (800603c <DMA_SetConfig+0x248>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d013      	beq.n	8005fc4 <DMA_SetConfig+0x1d0>
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a27      	ldr	r2, [pc, #156]	@ (8006040 <DMA_SetConfig+0x24c>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d00e      	beq.n	8005fc4 <DMA_SetConfig+0x1d0>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a26      	ldr	r2, [pc, #152]	@ (8006044 <DMA_SetConfig+0x250>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d009      	beq.n	8005fc4 <DMA_SetConfig+0x1d0>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a24      	ldr	r2, [pc, #144]	@ (8006048 <DMA_SetConfig+0x254>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d004      	beq.n	8005fc4 <DMA_SetConfig+0x1d0>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a23      	ldr	r2, [pc, #140]	@ (800604c <DMA_SetConfig+0x258>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d101      	bne.n	8005fc8 <DMA_SetConfig+0x1d4>
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e000      	b.n	8005fca <DMA_SetConfig+0x1d6>
 8005fc8:	2300      	movs	r3, #0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d059      	beq.n	8006082 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fd2:	f003 031f 	and.w	r3, r3, #31
 8005fd6:	223f      	movs	r2, #63	@ 0x3f
 8005fd8:	409a      	lsls	r2, r3
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005fec:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	683a      	ldr	r2, [r7, #0]
 8005ff4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	2b40      	cmp	r3, #64	@ 0x40
 8005ffc:	d138      	bne.n	8006070 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800600e:	e086      	b.n	800611e <DMA_SetConfig+0x32a>
 8006010:	40020010 	.word	0x40020010
 8006014:	40020028 	.word	0x40020028
 8006018:	40020040 	.word	0x40020040
 800601c:	40020058 	.word	0x40020058
 8006020:	40020070 	.word	0x40020070
 8006024:	40020088 	.word	0x40020088
 8006028:	400200a0 	.word	0x400200a0
 800602c:	400200b8 	.word	0x400200b8
 8006030:	40020410 	.word	0x40020410
 8006034:	40020428 	.word	0x40020428
 8006038:	40020440 	.word	0x40020440
 800603c:	40020458 	.word	0x40020458
 8006040:	40020470 	.word	0x40020470
 8006044:	40020488 	.word	0x40020488
 8006048:	400204a0 	.word	0x400204a0
 800604c:	400204b8 	.word	0x400204b8
 8006050:	58025408 	.word	0x58025408
 8006054:	5802541c 	.word	0x5802541c
 8006058:	58025430 	.word	0x58025430
 800605c:	58025444 	.word	0x58025444
 8006060:	58025458 	.word	0x58025458
 8006064:	5802546c 	.word	0x5802546c
 8006068:	58025480 	.word	0x58025480
 800606c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68ba      	ldr	r2, [r7, #8]
 8006076:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	60da      	str	r2, [r3, #12]
}
 8006080:	e04d      	b.n	800611e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a29      	ldr	r2, [pc, #164]	@ (800612c <DMA_SetConfig+0x338>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d022      	beq.n	80060d2 <DMA_SetConfig+0x2de>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a27      	ldr	r2, [pc, #156]	@ (8006130 <DMA_SetConfig+0x33c>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d01d      	beq.n	80060d2 <DMA_SetConfig+0x2de>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a26      	ldr	r2, [pc, #152]	@ (8006134 <DMA_SetConfig+0x340>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d018      	beq.n	80060d2 <DMA_SetConfig+0x2de>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a24      	ldr	r2, [pc, #144]	@ (8006138 <DMA_SetConfig+0x344>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d013      	beq.n	80060d2 <DMA_SetConfig+0x2de>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a23      	ldr	r2, [pc, #140]	@ (800613c <DMA_SetConfig+0x348>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d00e      	beq.n	80060d2 <DMA_SetConfig+0x2de>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a21      	ldr	r2, [pc, #132]	@ (8006140 <DMA_SetConfig+0x34c>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d009      	beq.n	80060d2 <DMA_SetConfig+0x2de>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a20      	ldr	r2, [pc, #128]	@ (8006144 <DMA_SetConfig+0x350>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d004      	beq.n	80060d2 <DMA_SetConfig+0x2de>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a1e      	ldr	r2, [pc, #120]	@ (8006148 <DMA_SetConfig+0x354>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d101      	bne.n	80060d6 <DMA_SetConfig+0x2e2>
 80060d2:	2301      	movs	r3, #1
 80060d4:	e000      	b.n	80060d8 <DMA_SetConfig+0x2e4>
 80060d6:	2300      	movs	r3, #0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d020      	beq.n	800611e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060e0:	f003 031f 	and.w	r3, r3, #31
 80060e4:	2201      	movs	r2, #1
 80060e6:	409a      	lsls	r2, r3
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	683a      	ldr	r2, [r7, #0]
 80060f2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	2b40      	cmp	r3, #64	@ 0x40
 80060fa:	d108      	bne.n	800610e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68ba      	ldr	r2, [r7, #8]
 800610a:	60da      	str	r2, [r3, #12]
}
 800610c:	e007      	b.n	800611e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	60da      	str	r2, [r3, #12]
}
 800611e:	bf00      	nop
 8006120:	371c      	adds	r7, #28
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	58025408 	.word	0x58025408
 8006130:	5802541c 	.word	0x5802541c
 8006134:	58025430 	.word	0x58025430
 8006138:	58025444 	.word	0x58025444
 800613c:	58025458 	.word	0x58025458
 8006140:	5802546c 	.word	0x5802546c
 8006144:	58025480 	.word	0x58025480
 8006148:	58025494 	.word	0x58025494

0800614c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a42      	ldr	r2, [pc, #264]	@ (8006264 <DMA_CalcBaseAndBitshift+0x118>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d04a      	beq.n	80061f4 <DMA_CalcBaseAndBitshift+0xa8>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a41      	ldr	r2, [pc, #260]	@ (8006268 <DMA_CalcBaseAndBitshift+0x11c>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d045      	beq.n	80061f4 <DMA_CalcBaseAndBitshift+0xa8>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a3f      	ldr	r2, [pc, #252]	@ (800626c <DMA_CalcBaseAndBitshift+0x120>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d040      	beq.n	80061f4 <DMA_CalcBaseAndBitshift+0xa8>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a3e      	ldr	r2, [pc, #248]	@ (8006270 <DMA_CalcBaseAndBitshift+0x124>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d03b      	beq.n	80061f4 <DMA_CalcBaseAndBitshift+0xa8>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a3c      	ldr	r2, [pc, #240]	@ (8006274 <DMA_CalcBaseAndBitshift+0x128>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d036      	beq.n	80061f4 <DMA_CalcBaseAndBitshift+0xa8>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a3b      	ldr	r2, [pc, #236]	@ (8006278 <DMA_CalcBaseAndBitshift+0x12c>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d031      	beq.n	80061f4 <DMA_CalcBaseAndBitshift+0xa8>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a39      	ldr	r2, [pc, #228]	@ (800627c <DMA_CalcBaseAndBitshift+0x130>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d02c      	beq.n	80061f4 <DMA_CalcBaseAndBitshift+0xa8>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a38      	ldr	r2, [pc, #224]	@ (8006280 <DMA_CalcBaseAndBitshift+0x134>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d027      	beq.n	80061f4 <DMA_CalcBaseAndBitshift+0xa8>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a36      	ldr	r2, [pc, #216]	@ (8006284 <DMA_CalcBaseAndBitshift+0x138>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d022      	beq.n	80061f4 <DMA_CalcBaseAndBitshift+0xa8>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a35      	ldr	r2, [pc, #212]	@ (8006288 <DMA_CalcBaseAndBitshift+0x13c>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d01d      	beq.n	80061f4 <DMA_CalcBaseAndBitshift+0xa8>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a33      	ldr	r2, [pc, #204]	@ (800628c <DMA_CalcBaseAndBitshift+0x140>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d018      	beq.n	80061f4 <DMA_CalcBaseAndBitshift+0xa8>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a32      	ldr	r2, [pc, #200]	@ (8006290 <DMA_CalcBaseAndBitshift+0x144>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d013      	beq.n	80061f4 <DMA_CalcBaseAndBitshift+0xa8>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a30      	ldr	r2, [pc, #192]	@ (8006294 <DMA_CalcBaseAndBitshift+0x148>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d00e      	beq.n	80061f4 <DMA_CalcBaseAndBitshift+0xa8>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a2f      	ldr	r2, [pc, #188]	@ (8006298 <DMA_CalcBaseAndBitshift+0x14c>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d009      	beq.n	80061f4 <DMA_CalcBaseAndBitshift+0xa8>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a2d      	ldr	r2, [pc, #180]	@ (800629c <DMA_CalcBaseAndBitshift+0x150>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d004      	beq.n	80061f4 <DMA_CalcBaseAndBitshift+0xa8>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a2c      	ldr	r2, [pc, #176]	@ (80062a0 <DMA_CalcBaseAndBitshift+0x154>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d101      	bne.n	80061f8 <DMA_CalcBaseAndBitshift+0xac>
 80061f4:	2301      	movs	r3, #1
 80061f6:	e000      	b.n	80061fa <DMA_CalcBaseAndBitshift+0xae>
 80061f8:	2300      	movs	r3, #0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d024      	beq.n	8006248 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	b2db      	uxtb	r3, r3
 8006204:	3b10      	subs	r3, #16
 8006206:	4a27      	ldr	r2, [pc, #156]	@ (80062a4 <DMA_CalcBaseAndBitshift+0x158>)
 8006208:	fba2 2303 	umull	r2, r3, r2, r3
 800620c:	091b      	lsrs	r3, r3, #4
 800620e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f003 0307 	and.w	r3, r3, #7
 8006216:	4a24      	ldr	r2, [pc, #144]	@ (80062a8 <DMA_CalcBaseAndBitshift+0x15c>)
 8006218:	5cd3      	ldrb	r3, [r2, r3]
 800621a:	461a      	mov	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2b03      	cmp	r3, #3
 8006224:	d908      	bls.n	8006238 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	461a      	mov	r2, r3
 800622c:	4b1f      	ldr	r3, [pc, #124]	@ (80062ac <DMA_CalcBaseAndBitshift+0x160>)
 800622e:	4013      	ands	r3, r2
 8006230:	1d1a      	adds	r2, r3, #4
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	659a      	str	r2, [r3, #88]	@ 0x58
 8006236:	e00d      	b.n	8006254 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	461a      	mov	r2, r3
 800623e:	4b1b      	ldr	r3, [pc, #108]	@ (80062ac <DMA_CalcBaseAndBitshift+0x160>)
 8006240:	4013      	ands	r3, r2
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	6593      	str	r3, [r2, #88]	@ 0x58
 8006246:	e005      	b.n	8006254 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006258:	4618      	mov	r0, r3
 800625a:	3714      	adds	r7, #20
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr
 8006264:	40020010 	.word	0x40020010
 8006268:	40020028 	.word	0x40020028
 800626c:	40020040 	.word	0x40020040
 8006270:	40020058 	.word	0x40020058
 8006274:	40020070 	.word	0x40020070
 8006278:	40020088 	.word	0x40020088
 800627c:	400200a0 	.word	0x400200a0
 8006280:	400200b8 	.word	0x400200b8
 8006284:	40020410 	.word	0x40020410
 8006288:	40020428 	.word	0x40020428
 800628c:	40020440 	.word	0x40020440
 8006290:	40020458 	.word	0x40020458
 8006294:	40020470 	.word	0x40020470
 8006298:	40020488 	.word	0x40020488
 800629c:	400204a0 	.word	0x400204a0
 80062a0:	400204b8 	.word	0x400204b8
 80062a4:	aaaaaaab 	.word	0xaaaaaaab
 80062a8:	080150d0 	.word	0x080150d0
 80062ac:	fffffc00 	.word	0xfffffc00

080062b0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062b8:	2300      	movs	r3, #0
 80062ba:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	699b      	ldr	r3, [r3, #24]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d120      	bne.n	8006306 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c8:	2b03      	cmp	r3, #3
 80062ca:	d858      	bhi.n	800637e <DMA_CheckFifoParam+0xce>
 80062cc:	a201      	add	r2, pc, #4	@ (adr r2, 80062d4 <DMA_CheckFifoParam+0x24>)
 80062ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d2:	bf00      	nop
 80062d4:	080062e5 	.word	0x080062e5
 80062d8:	080062f7 	.word	0x080062f7
 80062dc:	080062e5 	.word	0x080062e5
 80062e0:	0800637f 	.word	0x0800637f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d048      	beq.n	8006382 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80062f4:	e045      	b.n	8006382 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062fa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80062fe:	d142      	bne.n	8006386 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006304:	e03f      	b.n	8006386 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800630e:	d123      	bne.n	8006358 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006314:	2b03      	cmp	r3, #3
 8006316:	d838      	bhi.n	800638a <DMA_CheckFifoParam+0xda>
 8006318:	a201      	add	r2, pc, #4	@ (adr r2, 8006320 <DMA_CheckFifoParam+0x70>)
 800631a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800631e:	bf00      	nop
 8006320:	08006331 	.word	0x08006331
 8006324:	08006337 	.word	0x08006337
 8006328:	08006331 	.word	0x08006331
 800632c:	08006349 	.word	0x08006349
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	73fb      	strb	r3, [r7, #15]
        break;
 8006334:	e030      	b.n	8006398 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800633a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d025      	beq.n	800638e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006346:	e022      	b.n	800638e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800634c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006350:	d11f      	bne.n	8006392 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006356:	e01c      	b.n	8006392 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800635c:	2b02      	cmp	r3, #2
 800635e:	d902      	bls.n	8006366 <DMA_CheckFifoParam+0xb6>
 8006360:	2b03      	cmp	r3, #3
 8006362:	d003      	beq.n	800636c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006364:	e018      	b.n	8006398 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	73fb      	strb	r3, [r7, #15]
        break;
 800636a:	e015      	b.n	8006398 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006370:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00e      	beq.n	8006396 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	73fb      	strb	r3, [r7, #15]
    break;
 800637c:	e00b      	b.n	8006396 <DMA_CheckFifoParam+0xe6>
        break;
 800637e:	bf00      	nop
 8006380:	e00a      	b.n	8006398 <DMA_CheckFifoParam+0xe8>
        break;
 8006382:	bf00      	nop
 8006384:	e008      	b.n	8006398 <DMA_CheckFifoParam+0xe8>
        break;
 8006386:	bf00      	nop
 8006388:	e006      	b.n	8006398 <DMA_CheckFifoParam+0xe8>
        break;
 800638a:	bf00      	nop
 800638c:	e004      	b.n	8006398 <DMA_CheckFifoParam+0xe8>
        break;
 800638e:	bf00      	nop
 8006390:	e002      	b.n	8006398 <DMA_CheckFifoParam+0xe8>
        break;
 8006392:	bf00      	nop
 8006394:	e000      	b.n	8006398 <DMA_CheckFifoParam+0xe8>
    break;
 8006396:	bf00      	nop
    }
  }

  return status;
 8006398:	7bfb      	ldrb	r3, [r7, #15]
}
 800639a:	4618      	mov	r0, r3
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop

080063a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a38      	ldr	r2, [pc, #224]	@ (800649c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d022      	beq.n	8006406 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a36      	ldr	r2, [pc, #216]	@ (80064a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d01d      	beq.n	8006406 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a35      	ldr	r2, [pc, #212]	@ (80064a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d018      	beq.n	8006406 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a33      	ldr	r2, [pc, #204]	@ (80064a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d013      	beq.n	8006406 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a32      	ldr	r2, [pc, #200]	@ (80064ac <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d00e      	beq.n	8006406 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a30      	ldr	r2, [pc, #192]	@ (80064b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d009      	beq.n	8006406 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a2f      	ldr	r2, [pc, #188]	@ (80064b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d004      	beq.n	8006406 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a2d      	ldr	r2, [pc, #180]	@ (80064b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d101      	bne.n	800640a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006406:	2301      	movs	r3, #1
 8006408:	e000      	b.n	800640c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800640a:	2300      	movs	r3, #0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d01a      	beq.n	8006446 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	b2db      	uxtb	r3, r3
 8006416:	3b08      	subs	r3, #8
 8006418:	4a28      	ldr	r2, [pc, #160]	@ (80064bc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800641a:	fba2 2303 	umull	r2, r3, r2, r3
 800641e:	091b      	lsrs	r3, r3, #4
 8006420:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	4b26      	ldr	r3, [pc, #152]	@ (80064c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006426:	4413      	add	r3, r2
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	461a      	mov	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a24      	ldr	r2, [pc, #144]	@ (80064c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006434:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f003 031f 	and.w	r3, r3, #31
 800643c:	2201      	movs	r2, #1
 800643e:	409a      	lsls	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006444:	e024      	b.n	8006490 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	b2db      	uxtb	r3, r3
 800644c:	3b10      	subs	r3, #16
 800644e:	4a1e      	ldr	r2, [pc, #120]	@ (80064c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006450:	fba2 2303 	umull	r2, r3, r2, r3
 8006454:	091b      	lsrs	r3, r3, #4
 8006456:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	4a1c      	ldr	r2, [pc, #112]	@ (80064cc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d806      	bhi.n	800646e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	4a1b      	ldr	r2, [pc, #108]	@ (80064d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d902      	bls.n	800646e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	3308      	adds	r3, #8
 800646c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	4b18      	ldr	r3, [pc, #96]	@ (80064d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006472:	4413      	add	r3, r2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	461a      	mov	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a16      	ldr	r2, [pc, #88]	@ (80064d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006480:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f003 031f 	and.w	r3, r3, #31
 8006488:	2201      	movs	r2, #1
 800648a:	409a      	lsls	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006490:	bf00      	nop
 8006492:	3714      	adds	r7, #20
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr
 800649c:	58025408 	.word	0x58025408
 80064a0:	5802541c 	.word	0x5802541c
 80064a4:	58025430 	.word	0x58025430
 80064a8:	58025444 	.word	0x58025444
 80064ac:	58025458 	.word	0x58025458
 80064b0:	5802546c 	.word	0x5802546c
 80064b4:	58025480 	.word	0x58025480
 80064b8:	58025494 	.word	0x58025494
 80064bc:	cccccccd 	.word	0xcccccccd
 80064c0:	16009600 	.word	0x16009600
 80064c4:	58025880 	.word	0x58025880
 80064c8:	aaaaaaab 	.word	0xaaaaaaab
 80064cc:	400204b8 	.word	0x400204b8
 80064d0:	4002040f 	.word	0x4002040f
 80064d4:	10008200 	.word	0x10008200
 80064d8:	40020880 	.word	0x40020880

080064dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d04a      	beq.n	8006588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2b08      	cmp	r3, #8
 80064f6:	d847      	bhi.n	8006588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a25      	ldr	r2, [pc, #148]	@ (8006594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d022      	beq.n	8006548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a24      	ldr	r2, [pc, #144]	@ (8006598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d01d      	beq.n	8006548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a22      	ldr	r2, [pc, #136]	@ (800659c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d018      	beq.n	8006548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a21      	ldr	r2, [pc, #132]	@ (80065a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d013      	beq.n	8006548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a1f      	ldr	r2, [pc, #124]	@ (80065a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d00e      	beq.n	8006548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a1e      	ldr	r2, [pc, #120]	@ (80065a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d009      	beq.n	8006548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a1c      	ldr	r2, [pc, #112]	@ (80065ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d004      	beq.n	8006548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a1b      	ldr	r2, [pc, #108]	@ (80065b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d101      	bne.n	800654c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006548:	2301      	movs	r3, #1
 800654a:	e000      	b.n	800654e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800654c:	2300      	movs	r3, #0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00a      	beq.n	8006568 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	4b17      	ldr	r3, [pc, #92]	@ (80065b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006556:	4413      	add	r3, r2
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	461a      	mov	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a15      	ldr	r2, [pc, #84]	@ (80065b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006564:	671a      	str	r2, [r3, #112]	@ 0x70
 8006566:	e009      	b.n	800657c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	4b14      	ldr	r3, [pc, #80]	@ (80065bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800656c:	4413      	add	r3, r2
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	461a      	mov	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a11      	ldr	r2, [pc, #68]	@ (80065c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800657a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	3b01      	subs	r3, #1
 8006580:	2201      	movs	r2, #1
 8006582:	409a      	lsls	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006588:	bf00      	nop
 800658a:	3714      	adds	r7, #20
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr
 8006594:	58025408 	.word	0x58025408
 8006598:	5802541c 	.word	0x5802541c
 800659c:	58025430 	.word	0x58025430
 80065a0:	58025444 	.word	0x58025444
 80065a4:	58025458 	.word	0x58025458
 80065a8:	5802546c 	.word	0x5802546c
 80065ac:	58025480 	.word	0x58025480
 80065b0:	58025494 	.word	0x58025494
 80065b4:	1600963f 	.word	0x1600963f
 80065b8:	58025940 	.word	0x58025940
 80065bc:	1000823f 	.word	0x1000823f
 80065c0:	40020940 	.word	0x40020940

080065c4 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80065c4:	b480      	push	{r7}
 80065c6:	b087      	sub	sp, #28
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	460b      	mov	r3, r1
 80065ce:	607a      	str	r2, [r7, #4]
 80065d0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80065d2:	2300      	movs	r3, #0
 80065d4:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d101      	bne.n	80065e0 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e00a      	b.n	80065f6 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 80065e0:	7afb      	ldrb	r3, [r7, #11]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d103      	bne.n	80065ee <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	605a      	str	r2, [r3, #4]
      break;
 80065ec:	e002      	b.n	80065f4 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	75fb      	strb	r3, [r7, #23]
      break;
 80065f2:	bf00      	nop
  }

  return status;
 80065f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	371c      	adds	r7, #28
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr

08006602 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8006602:	b480      	push	{r7}
 8006604:	b083      	sub	sp, #12
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
 800660a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d101      	bne.n	8006616 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e003      	b.n	800661e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	683a      	ldr	r2, [r7, #0]
 800661a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800661c:	2300      	movs	r3, #0
  }
}
 800661e:	4618      	mov	r0, r3
 8006620:	370c      	adds	r7, #12
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
	...

0800662c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	0c1b      	lsrs	r3, r3, #16
 800663a:	f003 0303 	and.w	r3, r3, #3
 800663e:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 031f 	and.w	r3, r3, #31
 8006648:	2201      	movs	r2, #1
 800664a:	fa02 f303 	lsl.w	r3, r2, r3
 800664e:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8006650:	f7fd fecc 	bl	80043ec <HAL_GetCurrentCPUID>
 8006654:	4603      	mov	r3, r0
 8006656:	2b03      	cmp	r3, #3
 8006658:	d105      	bne.n	8006666 <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	011a      	lsls	r2, r3, #4
 800665e:	4b0f      	ldr	r3, [pc, #60]	@ (800669c <HAL_EXTI_IRQHandler+0x70>)
 8006660:	4413      	add	r3, r2
 8006662:	617b      	str	r3, [r7, #20]
 8006664:	e004      	b.n	8006670 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	011a      	lsls	r2, r3, #4
 800666a:	4b0d      	ldr	r3, [pc, #52]	@ (80066a0 <HAL_EXTI_IRQHandler+0x74>)
 800666c:	4413      	add	r3, r2
 800666e:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	4013      	ands	r3, r2
 8006678:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d009      	beq.n	8006694 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d002      	beq.n	8006694 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	4798      	blx	r3
    }
  }
}
 8006694:	bf00      	nop
 8006696:	3718      	adds	r7, #24
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}
 800669c:	58000088 	.word	0x58000088
 80066a0:	580000c8 	.word	0x580000c8

080066a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b089      	sub	sp, #36	@ 0x24
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80066ae:	2300      	movs	r3, #0
 80066b0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80066b2:	4b89      	ldr	r3, [pc, #548]	@ (80068d8 <HAL_GPIO_Init+0x234>)
 80066b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80066b6:	e194      	b.n	80069e2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	2101      	movs	r1, #1
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	fa01 f303 	lsl.w	r3, r1, r3
 80066c4:	4013      	ands	r3, r2
 80066c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f000 8186 	beq.w	80069dc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f003 0303 	and.w	r3, r3, #3
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d005      	beq.n	80066e8 <HAL_GPIO_Init+0x44>
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	f003 0303 	and.w	r3, r3, #3
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d130      	bne.n	800674a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	005b      	lsls	r3, r3, #1
 80066f2:	2203      	movs	r2, #3
 80066f4:	fa02 f303 	lsl.w	r3, r2, r3
 80066f8:	43db      	mvns	r3, r3
 80066fa:	69ba      	ldr	r2, [r7, #24]
 80066fc:	4013      	ands	r3, r2
 80066fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	68da      	ldr	r2, [r3, #12]
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	005b      	lsls	r3, r3, #1
 8006708:	fa02 f303 	lsl.w	r3, r2, r3
 800670c:	69ba      	ldr	r2, [r7, #24]
 800670e:	4313      	orrs	r3, r2
 8006710:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	69ba      	ldr	r2, [r7, #24]
 8006716:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800671e:	2201      	movs	r2, #1
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	fa02 f303 	lsl.w	r3, r2, r3
 8006726:	43db      	mvns	r3, r3
 8006728:	69ba      	ldr	r2, [r7, #24]
 800672a:	4013      	ands	r3, r2
 800672c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	091b      	lsrs	r3, r3, #4
 8006734:	f003 0201 	and.w	r2, r3, #1
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	fa02 f303 	lsl.w	r3, r2, r3
 800673e:	69ba      	ldr	r2, [r7, #24]
 8006740:	4313      	orrs	r3, r2
 8006742:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	69ba      	ldr	r2, [r7, #24]
 8006748:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	f003 0303 	and.w	r3, r3, #3
 8006752:	2b03      	cmp	r3, #3
 8006754:	d017      	beq.n	8006786 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	005b      	lsls	r3, r3, #1
 8006760:	2203      	movs	r2, #3
 8006762:	fa02 f303 	lsl.w	r3, r2, r3
 8006766:	43db      	mvns	r3, r3
 8006768:	69ba      	ldr	r2, [r7, #24]
 800676a:	4013      	ands	r3, r2
 800676c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	689a      	ldr	r2, [r3, #8]
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	005b      	lsls	r3, r3, #1
 8006776:	fa02 f303 	lsl.w	r3, r2, r3
 800677a:	69ba      	ldr	r2, [r7, #24]
 800677c:	4313      	orrs	r3, r2
 800677e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	69ba      	ldr	r2, [r7, #24]
 8006784:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	f003 0303 	and.w	r3, r3, #3
 800678e:	2b02      	cmp	r3, #2
 8006790:	d123      	bne.n	80067da <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	08da      	lsrs	r2, r3, #3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	3208      	adds	r2, #8
 800679a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800679e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	f003 0307 	and.w	r3, r3, #7
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	220f      	movs	r2, #15
 80067aa:	fa02 f303 	lsl.w	r3, r2, r3
 80067ae:	43db      	mvns	r3, r3
 80067b0:	69ba      	ldr	r2, [r7, #24]
 80067b2:	4013      	ands	r3, r2
 80067b4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	691a      	ldr	r2, [r3, #16]
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	f003 0307 	and.w	r3, r3, #7
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	fa02 f303 	lsl.w	r3, r2, r3
 80067c6:	69ba      	ldr	r2, [r7, #24]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	08da      	lsrs	r2, r3, #3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	3208      	adds	r2, #8
 80067d4:	69b9      	ldr	r1, [r7, #24]
 80067d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	005b      	lsls	r3, r3, #1
 80067e4:	2203      	movs	r2, #3
 80067e6:	fa02 f303 	lsl.w	r3, r2, r3
 80067ea:	43db      	mvns	r3, r3
 80067ec:	69ba      	ldr	r2, [r7, #24]
 80067ee:	4013      	ands	r3, r2
 80067f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	f003 0203 	and.w	r2, r3, #3
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	005b      	lsls	r3, r3, #1
 80067fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006802:	69ba      	ldr	r2, [r7, #24]
 8006804:	4313      	orrs	r3, r2
 8006806:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	69ba      	ldr	r2, [r7, #24]
 800680c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006816:	2b00      	cmp	r3, #0
 8006818:	f000 80e0 	beq.w	80069dc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800681c:	4b2f      	ldr	r3, [pc, #188]	@ (80068dc <HAL_GPIO_Init+0x238>)
 800681e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006822:	4a2e      	ldr	r2, [pc, #184]	@ (80068dc <HAL_GPIO_Init+0x238>)
 8006824:	f043 0302 	orr.w	r3, r3, #2
 8006828:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800682c:	4b2b      	ldr	r3, [pc, #172]	@ (80068dc <HAL_GPIO_Init+0x238>)
 800682e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006832:	f003 0302 	and.w	r3, r3, #2
 8006836:	60fb      	str	r3, [r7, #12]
 8006838:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800683a:	4a29      	ldr	r2, [pc, #164]	@ (80068e0 <HAL_GPIO_Init+0x23c>)
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	089b      	lsrs	r3, r3, #2
 8006840:	3302      	adds	r3, #2
 8006842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006846:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	f003 0303 	and.w	r3, r3, #3
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	220f      	movs	r2, #15
 8006852:	fa02 f303 	lsl.w	r3, r2, r3
 8006856:	43db      	mvns	r3, r3
 8006858:	69ba      	ldr	r2, [r7, #24]
 800685a:	4013      	ands	r3, r2
 800685c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a20      	ldr	r2, [pc, #128]	@ (80068e4 <HAL_GPIO_Init+0x240>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d052      	beq.n	800690c <HAL_GPIO_Init+0x268>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a1f      	ldr	r2, [pc, #124]	@ (80068e8 <HAL_GPIO_Init+0x244>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d031      	beq.n	80068d2 <HAL_GPIO_Init+0x22e>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a1e      	ldr	r2, [pc, #120]	@ (80068ec <HAL_GPIO_Init+0x248>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d02b      	beq.n	80068ce <HAL_GPIO_Init+0x22a>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a1d      	ldr	r2, [pc, #116]	@ (80068f0 <HAL_GPIO_Init+0x24c>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d025      	beq.n	80068ca <HAL_GPIO_Init+0x226>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a1c      	ldr	r2, [pc, #112]	@ (80068f4 <HAL_GPIO_Init+0x250>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d01f      	beq.n	80068c6 <HAL_GPIO_Init+0x222>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a1b      	ldr	r2, [pc, #108]	@ (80068f8 <HAL_GPIO_Init+0x254>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d019      	beq.n	80068c2 <HAL_GPIO_Init+0x21e>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a1a      	ldr	r2, [pc, #104]	@ (80068fc <HAL_GPIO_Init+0x258>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d013      	beq.n	80068be <HAL_GPIO_Init+0x21a>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a19      	ldr	r2, [pc, #100]	@ (8006900 <HAL_GPIO_Init+0x25c>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d00d      	beq.n	80068ba <HAL_GPIO_Init+0x216>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a18      	ldr	r2, [pc, #96]	@ (8006904 <HAL_GPIO_Init+0x260>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d007      	beq.n	80068b6 <HAL_GPIO_Init+0x212>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a17      	ldr	r2, [pc, #92]	@ (8006908 <HAL_GPIO_Init+0x264>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d101      	bne.n	80068b2 <HAL_GPIO_Init+0x20e>
 80068ae:	2309      	movs	r3, #9
 80068b0:	e02d      	b.n	800690e <HAL_GPIO_Init+0x26a>
 80068b2:	230a      	movs	r3, #10
 80068b4:	e02b      	b.n	800690e <HAL_GPIO_Init+0x26a>
 80068b6:	2308      	movs	r3, #8
 80068b8:	e029      	b.n	800690e <HAL_GPIO_Init+0x26a>
 80068ba:	2307      	movs	r3, #7
 80068bc:	e027      	b.n	800690e <HAL_GPIO_Init+0x26a>
 80068be:	2306      	movs	r3, #6
 80068c0:	e025      	b.n	800690e <HAL_GPIO_Init+0x26a>
 80068c2:	2305      	movs	r3, #5
 80068c4:	e023      	b.n	800690e <HAL_GPIO_Init+0x26a>
 80068c6:	2304      	movs	r3, #4
 80068c8:	e021      	b.n	800690e <HAL_GPIO_Init+0x26a>
 80068ca:	2303      	movs	r3, #3
 80068cc:	e01f      	b.n	800690e <HAL_GPIO_Init+0x26a>
 80068ce:	2302      	movs	r3, #2
 80068d0:	e01d      	b.n	800690e <HAL_GPIO_Init+0x26a>
 80068d2:	2301      	movs	r3, #1
 80068d4:	e01b      	b.n	800690e <HAL_GPIO_Init+0x26a>
 80068d6:	bf00      	nop
 80068d8:	58000080 	.word	0x58000080
 80068dc:	58024400 	.word	0x58024400
 80068e0:	58000400 	.word	0x58000400
 80068e4:	58020000 	.word	0x58020000
 80068e8:	58020400 	.word	0x58020400
 80068ec:	58020800 	.word	0x58020800
 80068f0:	58020c00 	.word	0x58020c00
 80068f4:	58021000 	.word	0x58021000
 80068f8:	58021400 	.word	0x58021400
 80068fc:	58021800 	.word	0x58021800
 8006900:	58021c00 	.word	0x58021c00
 8006904:	58022000 	.word	0x58022000
 8006908:	58022400 	.word	0x58022400
 800690c:	2300      	movs	r3, #0
 800690e:	69fa      	ldr	r2, [r7, #28]
 8006910:	f002 0203 	and.w	r2, r2, #3
 8006914:	0092      	lsls	r2, r2, #2
 8006916:	4093      	lsls	r3, r2
 8006918:	69ba      	ldr	r2, [r7, #24]
 800691a:	4313      	orrs	r3, r2
 800691c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800691e:	4938      	ldr	r1, [pc, #224]	@ (8006a00 <HAL_GPIO_Init+0x35c>)
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	089b      	lsrs	r3, r3, #2
 8006924:	3302      	adds	r3, #2
 8006926:	69ba      	ldr	r2, [r7, #24]
 8006928:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800692c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	43db      	mvns	r3, r3
 8006938:	69ba      	ldr	r2, [r7, #24]
 800693a:	4013      	ands	r3, r2
 800693c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006946:	2b00      	cmp	r3, #0
 8006948:	d003      	beq.n	8006952 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800694a:	69ba      	ldr	r2, [r7, #24]
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	4313      	orrs	r3, r2
 8006950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006952:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800695a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	43db      	mvns	r3, r3
 8006966:	69ba      	ldr	r2, [r7, #24]
 8006968:	4013      	ands	r3, r2
 800696a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006974:	2b00      	cmp	r3, #0
 8006976:	d003      	beq.n	8006980 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006978:	69ba      	ldr	r2, [r7, #24]
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	4313      	orrs	r3, r2
 800697e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006980:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	43db      	mvns	r3, r3
 8006992:	69ba      	ldr	r2, [r7, #24]
 8006994:	4013      	ands	r3, r2
 8006996:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d003      	beq.n	80069ac <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80069a4:	69ba      	ldr	r2, [r7, #24]
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	69ba      	ldr	r2, [r7, #24]
 80069b0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	43db      	mvns	r3, r3
 80069bc:	69ba      	ldr	r2, [r7, #24]
 80069be:	4013      	ands	r3, r2
 80069c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d003      	beq.n	80069d6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80069ce:	69ba      	ldr	r2, [r7, #24]
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	69ba      	ldr	r2, [r7, #24]
 80069da:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	3301      	adds	r3, #1
 80069e0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	fa22 f303 	lsr.w	r3, r2, r3
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f47f ae63 	bne.w	80066b8 <HAL_GPIO_Init+0x14>
  }
}
 80069f2:	bf00      	nop
 80069f4:	bf00      	nop
 80069f6:	3724      	adds	r7, #36	@ 0x24
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr
 8006a00:	58000400 	.word	0x58000400

08006a04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	807b      	strh	r3, [r7, #2]
 8006a10:	4613      	mov	r3, r2
 8006a12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006a14:	787b      	ldrb	r3, [r7, #1]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d003      	beq.n	8006a22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006a1a:	887a      	ldrh	r2, [r7, #2]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006a20:	e003      	b.n	8006a2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006a22:	887b      	ldrh	r3, [r7, #2]
 8006a24:	041a      	lsls	r2, r3, #16
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	619a      	str	r2, [r3, #24]
}
 8006a2a:	bf00      	nop
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr

08006a36 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006a36:	b480      	push	{r7}
 8006a38:	b085      	sub	sp, #20
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
 8006a3e:	460b      	mov	r3, r1
 8006a40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006a48:	887a      	ldrh	r2, [r7, #2]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	041a      	lsls	r2, r3, #16
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	43d9      	mvns	r1, r3
 8006a54:	887b      	ldrh	r3, [r7, #2]
 8006a56:	400b      	ands	r3, r1
 8006a58:	431a      	orrs	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	619a      	str	r2, [r3, #24]
}
 8006a5e:	bf00      	nop
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
	...

08006a6c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8006a74:	4a08      	ldr	r2, [pc, #32]	@ (8006a98 <HAL_HSEM_FastTake+0x2c>)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	3320      	adds	r3, #32
 8006a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a7e:	4a07      	ldr	r2, [pc, #28]	@ (8006a9c <HAL_HSEM_FastTake+0x30>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d101      	bne.n	8006a88 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8006a84:	2300      	movs	r3, #0
 8006a86:	e000      	b.n	8006a8a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	370c      	adds	r7, #12
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	58026400 	.word	0x58026400
 8006a9c:	80000300 	.word	0x80000300

08006aa0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8006aaa:	4906      	ldr	r1, [pc, #24]	@ (8006ac4 <HAL_HSEM_Release+0x24>)
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr
 8006ac4:	58026400 	.word	0x58026400

08006ac8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af02      	add	r7, sp, #8
 8006ace:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d101      	bne.n	8006ada <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e0fe      	b.n	8006cd8 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d106      	bne.n	8006af4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f00b f950 	bl	8011d94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2203      	movs	r2, #3
 8006af8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4618      	mov	r0, r3
 8006b02:	f007 fd14 	bl	800e52e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6818      	ldr	r0, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	7c1a      	ldrb	r2, [r3, #16]
 8006b0e:	f88d 2000 	strb.w	r2, [sp]
 8006b12:	3304      	adds	r3, #4
 8006b14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b16:	f007 fbe5 	bl	800e2e4 <USB_CoreInit>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d005      	beq.n	8006b2c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2202      	movs	r2, #2
 8006b24:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e0d5      	b.n	8006cd8 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2100      	movs	r1, #0
 8006b32:	4618      	mov	r0, r3
 8006b34:	f007 fd0c 	bl	800e550 <USB_SetCurrentMode>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d005      	beq.n	8006b4a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2202      	movs	r2, #2
 8006b42:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e0c6      	b.n	8006cd8 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	73fb      	strb	r3, [r7, #15]
 8006b4e:	e04a      	b.n	8006be6 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006b50:	7bfa      	ldrb	r2, [r7, #15]
 8006b52:	6879      	ldr	r1, [r7, #4]
 8006b54:	4613      	mov	r3, r2
 8006b56:	00db      	lsls	r3, r3, #3
 8006b58:	4413      	add	r3, r2
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	440b      	add	r3, r1
 8006b5e:	3315      	adds	r3, #21
 8006b60:	2201      	movs	r2, #1
 8006b62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006b64:	7bfa      	ldrb	r2, [r7, #15]
 8006b66:	6879      	ldr	r1, [r7, #4]
 8006b68:	4613      	mov	r3, r2
 8006b6a:	00db      	lsls	r3, r3, #3
 8006b6c:	4413      	add	r3, r2
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	440b      	add	r3, r1
 8006b72:	3314      	adds	r3, #20
 8006b74:	7bfa      	ldrb	r2, [r7, #15]
 8006b76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006b78:	7bfa      	ldrb	r2, [r7, #15]
 8006b7a:	7bfb      	ldrb	r3, [r7, #15]
 8006b7c:	b298      	uxth	r0, r3
 8006b7e:	6879      	ldr	r1, [r7, #4]
 8006b80:	4613      	mov	r3, r2
 8006b82:	00db      	lsls	r3, r3, #3
 8006b84:	4413      	add	r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	440b      	add	r3, r1
 8006b8a:	332e      	adds	r3, #46	@ 0x2e
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006b90:	7bfa      	ldrb	r2, [r7, #15]
 8006b92:	6879      	ldr	r1, [r7, #4]
 8006b94:	4613      	mov	r3, r2
 8006b96:	00db      	lsls	r3, r3, #3
 8006b98:	4413      	add	r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	440b      	add	r3, r1
 8006b9e:	3318      	adds	r3, #24
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006ba4:	7bfa      	ldrb	r2, [r7, #15]
 8006ba6:	6879      	ldr	r1, [r7, #4]
 8006ba8:	4613      	mov	r3, r2
 8006baa:	00db      	lsls	r3, r3, #3
 8006bac:	4413      	add	r3, r2
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	440b      	add	r3, r1
 8006bb2:	331c      	adds	r3, #28
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006bb8:	7bfa      	ldrb	r2, [r7, #15]
 8006bba:	6879      	ldr	r1, [r7, #4]
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	00db      	lsls	r3, r3, #3
 8006bc0:	4413      	add	r3, r2
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	440b      	add	r3, r1
 8006bc6:	3320      	adds	r3, #32
 8006bc8:	2200      	movs	r2, #0
 8006bca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006bcc:	7bfa      	ldrb	r2, [r7, #15]
 8006bce:	6879      	ldr	r1, [r7, #4]
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	00db      	lsls	r3, r3, #3
 8006bd4:	4413      	add	r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	440b      	add	r3, r1
 8006bda:	3324      	adds	r3, #36	@ 0x24
 8006bdc:	2200      	movs	r2, #0
 8006bde:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006be0:	7bfb      	ldrb	r3, [r7, #15]
 8006be2:	3301      	adds	r3, #1
 8006be4:	73fb      	strb	r3, [r7, #15]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	791b      	ldrb	r3, [r3, #4]
 8006bea:	7bfa      	ldrb	r2, [r7, #15]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d3af      	bcc.n	8006b50 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	73fb      	strb	r3, [r7, #15]
 8006bf4:	e044      	b.n	8006c80 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006bf6:	7bfa      	ldrb	r2, [r7, #15]
 8006bf8:	6879      	ldr	r1, [r7, #4]
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	00db      	lsls	r3, r3, #3
 8006bfe:	4413      	add	r3, r2
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	440b      	add	r3, r1
 8006c04:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006c08:	2200      	movs	r2, #0
 8006c0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006c0c:	7bfa      	ldrb	r2, [r7, #15]
 8006c0e:	6879      	ldr	r1, [r7, #4]
 8006c10:	4613      	mov	r3, r2
 8006c12:	00db      	lsls	r3, r3, #3
 8006c14:	4413      	add	r3, r2
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	440b      	add	r3, r1
 8006c1a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006c1e:	7bfa      	ldrb	r2, [r7, #15]
 8006c20:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006c22:	7bfa      	ldrb	r2, [r7, #15]
 8006c24:	6879      	ldr	r1, [r7, #4]
 8006c26:	4613      	mov	r3, r2
 8006c28:	00db      	lsls	r3, r3, #3
 8006c2a:	4413      	add	r3, r2
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	440b      	add	r3, r1
 8006c30:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006c34:	2200      	movs	r2, #0
 8006c36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006c38:	7bfa      	ldrb	r2, [r7, #15]
 8006c3a:	6879      	ldr	r1, [r7, #4]
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	00db      	lsls	r3, r3, #3
 8006c40:	4413      	add	r3, r2
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	440b      	add	r3, r1
 8006c46:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006c4e:	7bfa      	ldrb	r2, [r7, #15]
 8006c50:	6879      	ldr	r1, [r7, #4]
 8006c52:	4613      	mov	r3, r2
 8006c54:	00db      	lsls	r3, r3, #3
 8006c56:	4413      	add	r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	440b      	add	r3, r1
 8006c5c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006c60:	2200      	movs	r2, #0
 8006c62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006c64:	7bfa      	ldrb	r2, [r7, #15]
 8006c66:	6879      	ldr	r1, [r7, #4]
 8006c68:	4613      	mov	r3, r2
 8006c6a:	00db      	lsls	r3, r3, #3
 8006c6c:	4413      	add	r3, r2
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	440b      	add	r3, r1
 8006c72:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006c76:	2200      	movs	r2, #0
 8006c78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c7a:	7bfb      	ldrb	r3, [r7, #15]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	73fb      	strb	r3, [r7, #15]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	791b      	ldrb	r3, [r3, #4]
 8006c84:	7bfa      	ldrb	r2, [r7, #15]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d3b5      	bcc.n	8006bf6 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6818      	ldr	r0, [r3, #0]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	7c1a      	ldrb	r2, [r3, #16]
 8006c92:	f88d 2000 	strb.w	r2, [sp]
 8006c96:	3304      	adds	r3, #4
 8006c98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c9a:	f007 fca5 	bl	800e5e8 <USB_DevInit>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d005      	beq.n	8006cb0 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	e013      	b.n	8006cd8 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	7b1b      	ldrb	r3, [r3, #12]
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d102      	bne.n	8006ccc <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f001 f96c 	bl	8007fa4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f008 fce4 	bl	800f69e <USB_DevDisconnect>

  return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3710      	adds	r7, #16
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d101      	bne.n	8006cfc <HAL_PCD_Start+0x1c>
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	e022      	b.n	8006d42 <HAL_PCD_Start+0x62>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d009      	beq.n	8006d24 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d105      	bne.n	8006d24 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d1c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f007 fbef 	bl	800e50c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4618      	mov	r0, r3
 8006d34:	f008 fc92 	bl	800f65c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006d4a:	b590      	push	{r4, r7, lr}
 8006d4c:	b08d      	sub	sp, #52	@ 0x34
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d58:	6a3b      	ldr	r3, [r7, #32]
 8006d5a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4618      	mov	r0, r3
 8006d62:	f008 fd50 	bl	800f806 <USB_GetMode>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f040 84b9 	bne.w	80076e0 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4618      	mov	r0, r3
 8006d74:	f008 fcb4 	bl	800f6e0 <USB_ReadInterrupts>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	f000 84af 	beq.w	80076de <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	0a1b      	lsrs	r3, r3, #8
 8006d8a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f008 fca1 	bl	800f6e0 <USB_ReadInterrupts>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	f003 0302 	and.w	r3, r3, #2
 8006da4:	2b02      	cmp	r3, #2
 8006da6:	d107      	bne.n	8006db8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	695a      	ldr	r2, [r3, #20]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f002 0202 	and.w	r2, r2, #2
 8006db6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f008 fc8f 	bl	800f6e0 <USB_ReadInterrupts>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	f003 0310 	and.w	r3, r3, #16
 8006dc8:	2b10      	cmp	r3, #16
 8006dca:	d161      	bne.n	8006e90 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	699a      	ldr	r2, [r3, #24]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f022 0210 	bic.w	r2, r2, #16
 8006dda:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006ddc:	6a3b      	ldr	r3, [r7, #32]
 8006dde:	6a1b      	ldr	r3, [r3, #32]
 8006de0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	f003 020f 	and.w	r2, r3, #15
 8006de8:	4613      	mov	r3, r2
 8006dea:	00db      	lsls	r3, r3, #3
 8006dec:	4413      	add	r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	4413      	add	r3, r2
 8006df8:	3304      	adds	r3, #4
 8006dfa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	0c5b      	lsrs	r3, r3, #17
 8006e00:	f003 030f 	and.w	r3, r3, #15
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d124      	bne.n	8006e52 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006e08:	69ba      	ldr	r2, [r7, #24]
 8006e0a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006e0e:	4013      	ands	r3, r2
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d035      	beq.n	8006e80 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	091b      	lsrs	r3, r3, #4
 8006e1c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006e1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	461a      	mov	r2, r3
 8006e26:	6a38      	ldr	r0, [r7, #32]
 8006e28:	f008 fac6 	bl	800f3b8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	68da      	ldr	r2, [r3, #12]
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	091b      	lsrs	r3, r3, #4
 8006e34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e38:	441a      	add	r2, r3
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	695a      	ldr	r2, [r3, #20]
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	091b      	lsrs	r3, r3, #4
 8006e46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e4a:	441a      	add	r2, r3
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	615a      	str	r2, [r3, #20]
 8006e50:	e016      	b.n	8006e80 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	0c5b      	lsrs	r3, r3, #17
 8006e56:	f003 030f 	and.w	r3, r3, #15
 8006e5a:	2b06      	cmp	r3, #6
 8006e5c:	d110      	bne.n	8006e80 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006e64:	2208      	movs	r2, #8
 8006e66:	4619      	mov	r1, r3
 8006e68:	6a38      	ldr	r0, [r7, #32]
 8006e6a:	f008 faa5 	bl	800f3b8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	695a      	ldr	r2, [r3, #20]
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	091b      	lsrs	r3, r3, #4
 8006e76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e7a:	441a      	add	r2, r3
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	699a      	ldr	r2, [r3, #24]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f042 0210 	orr.w	r2, r2, #16
 8006e8e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4618      	mov	r0, r3
 8006e96:	f008 fc23 	bl	800f6e0 <USB_ReadInterrupts>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006ea0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006ea4:	f040 80a7 	bne.w	8006ff6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f008 fc28 	bl	800f706 <USB_ReadDevAllOutEpInterrupt>
 8006eb6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8006eb8:	e099      	b.n	8006fee <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ebc:	f003 0301 	and.w	r3, r3, #1
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f000 808e 	beq.w	8006fe2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ecc:	b2d2      	uxtb	r2, r2
 8006ece:	4611      	mov	r1, r2
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f008 fc4c 	bl	800f76e <USB_ReadDevOutEPInterrupt>
 8006ed6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	f003 0301 	and.w	r3, r3, #1
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00c      	beq.n	8006efc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee4:	015a      	lsls	r2, r3, #5
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	4413      	add	r3, r2
 8006eea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eee:	461a      	mov	r2, r3
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006ef4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fece 	bl	8007c98 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	f003 0308 	and.w	r3, r3, #8
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d00c      	beq.n	8006f20 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f08:	015a      	lsls	r2, r3, #5
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f12:	461a      	mov	r2, r3
 8006f14:	2308      	movs	r3, #8
 8006f16:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006f18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 ffa4 	bl	8007e68 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	f003 0310 	and.w	r3, r3, #16
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d008      	beq.n	8006f3c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f2c:	015a      	lsls	r2, r3, #5
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	4413      	add	r3, r2
 8006f32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f36:	461a      	mov	r2, r3
 8006f38:	2310      	movs	r3, #16
 8006f3a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	f003 0302 	and.w	r3, r3, #2
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d030      	beq.n	8006fa8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006f46:	6a3b      	ldr	r3, [r7, #32]
 8006f48:	695b      	ldr	r3, [r3, #20]
 8006f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f4e:	2b80      	cmp	r3, #128	@ 0x80
 8006f50:	d109      	bne.n	8006f66 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	69fa      	ldr	r2, [r7, #28]
 8006f5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f60:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006f64:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006f66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f68:	4613      	mov	r3, r2
 8006f6a:	00db      	lsls	r3, r3, #3
 8006f6c:	4413      	add	r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	4413      	add	r3, r2
 8006f78:	3304      	adds	r3, #4
 8006f7a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	78db      	ldrb	r3, [r3, #3]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d108      	bne.n	8006f96 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	2200      	movs	r2, #0
 8006f88:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	4619      	mov	r1, r3
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f00b f835 	bl	8012000 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f98:	015a      	lsls	r2, r3, #5
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	f003 0320 	and.w	r3, r3, #32
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d008      	beq.n	8006fc4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb4:	015a      	lsls	r2, r3, #5
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	4413      	add	r3, r2
 8006fba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	2320      	movs	r3, #32
 8006fc2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d009      	beq.n	8006fe2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd0:	015a      	lsls	r2, r3, #5
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fda:	461a      	mov	r2, r3
 8006fdc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006fe0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fea:	085b      	lsrs	r3, r3, #1
 8006fec:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f47f af62 	bne.w	8006eba <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f008 fb70 	bl	800f6e0 <USB_ReadInterrupts>
 8007000:	4603      	mov	r3, r0
 8007002:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007006:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800700a:	f040 80db 	bne.w	80071c4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4618      	mov	r0, r3
 8007014:	f008 fb91 	bl	800f73a <USB_ReadDevAllInEpInterrupt>
 8007018:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800701a:	2300      	movs	r3, #0
 800701c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800701e:	e0cd      	b.n	80071bc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007022:	f003 0301 	and.w	r3, r3, #1
 8007026:	2b00      	cmp	r3, #0
 8007028:	f000 80c2 	beq.w	80071b0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007032:	b2d2      	uxtb	r2, r2
 8007034:	4611      	mov	r1, r2
 8007036:	4618      	mov	r0, r3
 8007038:	f008 fbb7 	bl	800f7aa <USB_ReadDevInEPInterrupt>
 800703c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	f003 0301 	and.w	r3, r3, #1
 8007044:	2b00      	cmp	r3, #0
 8007046:	d057      	beq.n	80070f8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800704a:	f003 030f 	and.w	r3, r3, #15
 800704e:	2201      	movs	r2, #1
 8007050:	fa02 f303 	lsl.w	r3, r2, r3
 8007054:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800705c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	43db      	mvns	r3, r3
 8007062:	69f9      	ldr	r1, [r7, #28]
 8007064:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007068:	4013      	ands	r3, r2
 800706a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800706c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706e:	015a      	lsls	r2, r3, #5
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	4413      	add	r3, r2
 8007074:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007078:	461a      	mov	r2, r3
 800707a:	2301      	movs	r3, #1
 800707c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	799b      	ldrb	r3, [r3, #6]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d132      	bne.n	80070ec <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007086:	6879      	ldr	r1, [r7, #4]
 8007088:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800708a:	4613      	mov	r3, r2
 800708c:	00db      	lsls	r3, r3, #3
 800708e:	4413      	add	r3, r2
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	440b      	add	r3, r1
 8007094:	3320      	adds	r3, #32
 8007096:	6819      	ldr	r1, [r3, #0]
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800709c:	4613      	mov	r3, r2
 800709e:	00db      	lsls	r3, r3, #3
 80070a0:	4413      	add	r3, r2
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	4403      	add	r3, r0
 80070a6:	331c      	adds	r3, #28
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4419      	add	r1, r3
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070b0:	4613      	mov	r3, r2
 80070b2:	00db      	lsls	r3, r3, #3
 80070b4:	4413      	add	r3, r2
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	4403      	add	r3, r0
 80070ba:	3320      	adds	r3, #32
 80070bc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80070be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d113      	bne.n	80070ec <HAL_PCD_IRQHandler+0x3a2>
 80070c4:	6879      	ldr	r1, [r7, #4]
 80070c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070c8:	4613      	mov	r3, r2
 80070ca:	00db      	lsls	r3, r3, #3
 80070cc:	4413      	add	r3, r2
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	440b      	add	r3, r1
 80070d2:	3324      	adds	r3, #36	@ 0x24
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d108      	bne.n	80070ec <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6818      	ldr	r0, [r3, #0]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80070e4:	461a      	mov	r2, r3
 80070e6:	2101      	movs	r1, #1
 80070e8:	f008 fbc0 	bl	800f86c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80070ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	4619      	mov	r1, r3
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f00a feff 	bl	8011ef6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	f003 0308 	and.w	r3, r3, #8
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d008      	beq.n	8007114 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007104:	015a      	lsls	r2, r3, #5
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	4413      	add	r3, r2
 800710a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800710e:	461a      	mov	r2, r3
 8007110:	2308      	movs	r3, #8
 8007112:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	f003 0310 	and.w	r3, r3, #16
 800711a:	2b00      	cmp	r3, #0
 800711c:	d008      	beq.n	8007130 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800711e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007120:	015a      	lsls	r2, r3, #5
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	4413      	add	r3, r2
 8007126:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800712a:	461a      	mov	r2, r3
 800712c:	2310      	movs	r3, #16
 800712e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007136:	2b00      	cmp	r3, #0
 8007138:	d008      	beq.n	800714c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800713a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713c:	015a      	lsls	r2, r3, #5
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	4413      	add	r3, r2
 8007142:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007146:	461a      	mov	r2, r3
 8007148:	2340      	movs	r3, #64	@ 0x40
 800714a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	f003 0302 	and.w	r3, r3, #2
 8007152:	2b00      	cmp	r3, #0
 8007154:	d023      	beq.n	800719e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007156:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007158:	6a38      	ldr	r0, [r7, #32]
 800715a:	f007 fba3 	bl	800e8a4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800715e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007160:	4613      	mov	r3, r2
 8007162:	00db      	lsls	r3, r3, #3
 8007164:	4413      	add	r3, r2
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	3310      	adds	r3, #16
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	4413      	add	r3, r2
 800716e:	3304      	adds	r3, #4
 8007170:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	78db      	ldrb	r3, [r3, #3]
 8007176:	2b01      	cmp	r3, #1
 8007178:	d108      	bne.n	800718c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	2200      	movs	r2, #0
 800717e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007182:	b2db      	uxtb	r3, r3
 8007184:	4619      	mov	r1, r3
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f00a ff4c 	bl	8012024 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800718c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800718e:	015a      	lsls	r2, r3, #5
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	4413      	add	r3, r2
 8007194:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007198:	461a      	mov	r2, r3
 800719a:	2302      	movs	r3, #2
 800719c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d003      	beq.n	80071b0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80071a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 fce8 	bl	8007b80 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80071b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b2:	3301      	adds	r3, #1
 80071b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80071b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b8:	085b      	lsrs	r3, r3, #1
 80071ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80071bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f47f af2e 	bne.w	8007020 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4618      	mov	r0, r3
 80071ca:	f008 fa89 	bl	800f6e0 <USB_ReadInterrupts>
 80071ce:	4603      	mov	r3, r0
 80071d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80071d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071d8:	d122      	bne.n	8007220 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	69fa      	ldr	r2, [r7, #28]
 80071e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071e8:	f023 0301 	bic.w	r3, r3, #1
 80071ec:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d108      	bne.n	800720a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007200:	2100      	movs	r1, #0
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fef2 	bl	8007fec <HAL_PCDEx_LPM_Callback>
 8007208:	e002      	b.n	8007210 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f00a feea 	bl	8011fe4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	695a      	ldr	r2, [r3, #20]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800721e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4618      	mov	r0, r3
 8007226:	f008 fa5b 	bl	800f6e0 <USB_ReadInterrupts>
 800722a:	4603      	mov	r3, r0
 800722c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007230:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007234:	d112      	bne.n	800725c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	2b01      	cmp	r3, #1
 8007244:	d102      	bne.n	800724c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f00a fea6 	bl	8011f98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	695a      	ldr	r2, [r3, #20]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800725a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4618      	mov	r0, r3
 8007262:	f008 fa3d 	bl	800f6e0 <USB_ReadInterrupts>
 8007266:	4603      	mov	r3, r0
 8007268:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800726c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007270:	d121      	bne.n	80072b6 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	695a      	ldr	r2, [r3, #20]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8007280:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007288:	2b00      	cmp	r3, #0
 800728a:	d111      	bne.n	80072b0 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800729a:	089b      	lsrs	r3, r3, #2
 800729c:	f003 020f 	and.w	r2, r3, #15
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80072a6:	2101      	movs	r1, #1
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 fe9f 	bl	8007fec <HAL_PCDEx_LPM_Callback>
 80072ae:	e002      	b.n	80072b6 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f00a fe71 	bl	8011f98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4618      	mov	r0, r3
 80072bc:	f008 fa10 	bl	800f6e0 <USB_ReadInterrupts>
 80072c0:	4603      	mov	r3, r0
 80072c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80072c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072ca:	f040 80b7 	bne.w	800743c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	69fa      	ldr	r2, [r7, #28]
 80072d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072dc:	f023 0301 	bic.w	r3, r3, #1
 80072e0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2110      	movs	r1, #16
 80072e8:	4618      	mov	r0, r3
 80072ea:	f007 fadb 	bl	800e8a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072ee:	2300      	movs	r3, #0
 80072f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072f2:	e046      	b.n	8007382 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80072f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072f6:	015a      	lsls	r2, r3, #5
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	4413      	add	r3, r2
 80072fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007300:	461a      	mov	r2, r3
 8007302:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007306:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800730a:	015a      	lsls	r2, r3, #5
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	4413      	add	r3, r2
 8007310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007318:	0151      	lsls	r1, r2, #5
 800731a:	69fa      	ldr	r2, [r7, #28]
 800731c:	440a      	add	r2, r1
 800731e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007322:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007326:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800732a:	015a      	lsls	r2, r3, #5
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	4413      	add	r3, r2
 8007330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007334:	461a      	mov	r2, r3
 8007336:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800733a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800733c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800733e:	015a      	lsls	r2, r3, #5
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	4413      	add	r3, r2
 8007344:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800734c:	0151      	lsls	r1, r2, #5
 800734e:	69fa      	ldr	r2, [r7, #28]
 8007350:	440a      	add	r2, r1
 8007352:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007356:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800735a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800735c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800735e:	015a      	lsls	r2, r3, #5
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	4413      	add	r3, r2
 8007364:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800736c:	0151      	lsls	r1, r2, #5
 800736e:	69fa      	ldr	r2, [r7, #28]
 8007370:	440a      	add	r2, r1
 8007372:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007376:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800737a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800737c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800737e:	3301      	adds	r3, #1
 8007380:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	791b      	ldrb	r3, [r3, #4]
 8007386:	461a      	mov	r2, r3
 8007388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800738a:	4293      	cmp	r3, r2
 800738c:	d3b2      	bcc.n	80072f4 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007394:	69db      	ldr	r3, [r3, #28]
 8007396:	69fa      	ldr	r2, [r7, #28]
 8007398:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800739c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80073a0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	7bdb      	ldrb	r3, [r3, #15]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d016      	beq.n	80073d8 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073b4:	69fa      	ldr	r2, [r7, #28]
 80073b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073ba:	f043 030b 	orr.w	r3, r3, #11
 80073be:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073ca:	69fa      	ldr	r2, [r7, #28]
 80073cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073d0:	f043 030b 	orr.w	r3, r3, #11
 80073d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80073d6:	e015      	b.n	8007404 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073de:	695a      	ldr	r2, [r3, #20]
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073e6:	4619      	mov	r1, r3
 80073e8:	f242 032b 	movw	r3, #8235	@ 0x202b
 80073ec:	4313      	orrs	r3, r2
 80073ee:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	69fa      	ldr	r2, [r7, #28]
 80073fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073fe:	f043 030b 	orr.w	r3, r3, #11
 8007402:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	69fa      	ldr	r2, [r7, #28]
 800740e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007412:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007416:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6818      	ldr	r0, [r3, #0]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007426:	461a      	mov	r2, r3
 8007428:	f008 fa20 	bl	800f86c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	695a      	ldr	r2, [r3, #20]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800743a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4618      	mov	r0, r3
 8007442:	f008 f94d 	bl	800f6e0 <USB_ReadInterrupts>
 8007446:	4603      	mov	r3, r0
 8007448:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800744c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007450:	d123      	bne.n	800749a <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4618      	mov	r0, r3
 8007458:	f008 f9e4 	bl	800f824 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4618      	mov	r0, r3
 8007462:	f007 fa98 	bl	800e996 <USB_GetDevSpeed>
 8007466:	4603      	mov	r3, r0
 8007468:	461a      	mov	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681c      	ldr	r4, [r3, #0]
 8007472:	f001 fdbb 	bl	8008fec <HAL_RCC_GetHCLKFreq>
 8007476:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800747c:	461a      	mov	r2, r3
 800747e:	4620      	mov	r0, r4
 8007480:	f006 ffa2 	bl	800e3c8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f00a fd5e 	bl	8011f46 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	695a      	ldr	r2, [r3, #20]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8007498:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4618      	mov	r0, r3
 80074a0:	f008 f91e 	bl	800f6e0 <USB_ReadInterrupts>
 80074a4:	4603      	mov	r3, r0
 80074a6:	f003 0308 	and.w	r3, r3, #8
 80074aa:	2b08      	cmp	r3, #8
 80074ac:	d10a      	bne.n	80074c4 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f00a fd3b 	bl	8011f2a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	695a      	ldr	r2, [r3, #20]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f002 0208 	and.w	r2, r2, #8
 80074c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4618      	mov	r0, r3
 80074ca:	f008 f909 	bl	800f6e0 <USB_ReadInterrupts>
 80074ce:	4603      	mov	r3, r0
 80074d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074d4:	2b80      	cmp	r3, #128	@ 0x80
 80074d6:	d123      	bne.n	8007520 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80074d8:	6a3b      	ldr	r3, [r7, #32]
 80074da:	699b      	ldr	r3, [r3, #24]
 80074dc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80074e0:	6a3b      	ldr	r3, [r7, #32]
 80074e2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80074e4:	2301      	movs	r3, #1
 80074e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80074e8:	e014      	b.n	8007514 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80074ea:	6879      	ldr	r1, [r7, #4]
 80074ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074ee:	4613      	mov	r3, r2
 80074f0:	00db      	lsls	r3, r3, #3
 80074f2:	4413      	add	r3, r2
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	440b      	add	r3, r1
 80074f8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d105      	bne.n	800750e <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007504:	b2db      	uxtb	r3, r3
 8007506:	4619      	mov	r1, r3
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 fb08 	bl	8007b1e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800750e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007510:	3301      	adds	r3, #1
 8007512:	627b      	str	r3, [r7, #36]	@ 0x24
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	791b      	ldrb	r3, [r3, #4]
 8007518:	461a      	mov	r2, r3
 800751a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751c:	4293      	cmp	r3, r2
 800751e:	d3e4      	bcc.n	80074ea <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4618      	mov	r0, r3
 8007526:	f008 f8db 	bl	800f6e0 <USB_ReadInterrupts>
 800752a:	4603      	mov	r3, r0
 800752c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007530:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007534:	d13c      	bne.n	80075b0 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007536:	2301      	movs	r3, #1
 8007538:	627b      	str	r3, [r7, #36]	@ 0x24
 800753a:	e02b      	b.n	8007594 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800753c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800753e:	015a      	lsls	r2, r3, #5
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	4413      	add	r3, r2
 8007544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800754c:	6879      	ldr	r1, [r7, #4]
 800754e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007550:	4613      	mov	r3, r2
 8007552:	00db      	lsls	r3, r3, #3
 8007554:	4413      	add	r3, r2
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	440b      	add	r3, r1
 800755a:	3318      	adds	r3, #24
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	2b01      	cmp	r3, #1
 8007560:	d115      	bne.n	800758e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007562:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007564:	2b00      	cmp	r3, #0
 8007566:	da12      	bge.n	800758e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007568:	6879      	ldr	r1, [r7, #4]
 800756a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800756c:	4613      	mov	r3, r2
 800756e:	00db      	lsls	r3, r3, #3
 8007570:	4413      	add	r3, r2
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	440b      	add	r3, r1
 8007576:	3317      	adds	r3, #23
 8007578:	2201      	movs	r2, #1
 800757a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800757c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800757e:	b2db      	uxtb	r3, r3
 8007580:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007584:	b2db      	uxtb	r3, r3
 8007586:	4619      	mov	r1, r3
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 fac8 	bl	8007b1e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800758e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007590:	3301      	adds	r3, #1
 8007592:	627b      	str	r3, [r7, #36]	@ 0x24
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	791b      	ldrb	r3, [r3, #4]
 8007598:	461a      	mov	r2, r3
 800759a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800759c:	4293      	cmp	r3, r2
 800759e:	d3cd      	bcc.n	800753c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	695a      	ldr	r2, [r3, #20]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80075ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4618      	mov	r0, r3
 80075b6:	f008 f893 	bl	800f6e0 <USB_ReadInterrupts>
 80075ba:	4603      	mov	r3, r0
 80075bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80075c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80075c4:	d156      	bne.n	8007674 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80075c6:	2301      	movs	r3, #1
 80075c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80075ca:	e045      	b.n	8007658 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80075cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ce:	015a      	lsls	r2, r3, #5
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	4413      	add	r3, r2
 80075d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80075dc:	6879      	ldr	r1, [r7, #4]
 80075de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075e0:	4613      	mov	r3, r2
 80075e2:	00db      	lsls	r3, r3, #3
 80075e4:	4413      	add	r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	440b      	add	r3, r1
 80075ea:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d12e      	bne.n	8007652 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80075f4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	da2b      	bge.n	8007652 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8007606:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800760a:	429a      	cmp	r2, r3
 800760c:	d121      	bne.n	8007652 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800760e:	6879      	ldr	r1, [r7, #4]
 8007610:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007612:	4613      	mov	r3, r2
 8007614:	00db      	lsls	r3, r3, #3
 8007616:	4413      	add	r3, r2
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	440b      	add	r3, r1
 800761c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007620:	2201      	movs	r2, #1
 8007622:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007624:	6a3b      	ldr	r3, [r7, #32]
 8007626:	699b      	ldr	r3, [r3, #24]
 8007628:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800762c:	6a3b      	ldr	r3, [r7, #32]
 800762e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007630:	6a3b      	ldr	r3, [r7, #32]
 8007632:	695b      	ldr	r3, [r3, #20]
 8007634:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007638:	2b00      	cmp	r3, #0
 800763a:	d10a      	bne.n	8007652 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	69fa      	ldr	r2, [r7, #28]
 8007646:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800764a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800764e:	6053      	str	r3, [r2, #4]
            break;
 8007650:	e008      	b.n	8007664 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007654:	3301      	adds	r3, #1
 8007656:	627b      	str	r3, [r7, #36]	@ 0x24
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	791b      	ldrb	r3, [r3, #4]
 800765c:	461a      	mov	r2, r3
 800765e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007660:	4293      	cmp	r3, r2
 8007662:	d3b3      	bcc.n	80075cc <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	695a      	ldr	r2, [r3, #20]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8007672:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4618      	mov	r0, r3
 800767a:	f008 f831 	bl	800f6e0 <USB_ReadInterrupts>
 800767e:	4603      	mov	r3, r0
 8007680:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007688:	d10a      	bne.n	80076a0 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f00a fcdc 	bl	8012048 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	695a      	ldr	r2, [r3, #20]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800769e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4618      	mov	r0, r3
 80076a6:	f008 f81b 	bl	800f6e0 <USB_ReadInterrupts>
 80076aa:	4603      	mov	r3, r0
 80076ac:	f003 0304 	and.w	r3, r3, #4
 80076b0:	2b04      	cmp	r3, #4
 80076b2:	d115      	bne.n	80076e0 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	f003 0304 	and.w	r3, r3, #4
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d002      	beq.n	80076cc <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f00a fccc 	bl	8012064 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6859      	ldr	r1, [r3, #4]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	69ba      	ldr	r2, [r7, #24]
 80076d8:	430a      	orrs	r2, r1
 80076da:	605a      	str	r2, [r3, #4]
 80076dc:	e000      	b.n	80076e0 <HAL_PCD_IRQHandler+0x996>
      return;
 80076de:	bf00      	nop
    }
  }
}
 80076e0:	3734      	adds	r7, #52	@ 0x34
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd90      	pop	{r4, r7, pc}

080076e6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b082      	sub	sp, #8
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
 80076ee:	460b      	mov	r3, r1
 80076f0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d101      	bne.n	8007700 <HAL_PCD_SetAddress+0x1a>
 80076fc:	2302      	movs	r3, #2
 80076fe:	e012      	b.n	8007726 <HAL_PCD_SetAddress+0x40>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	78fa      	ldrb	r2, [r7, #3]
 800770c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	78fa      	ldrb	r2, [r7, #3]
 8007714:	4611      	mov	r1, r2
 8007716:	4618      	mov	r0, r3
 8007718:	f007 ff7a 	bl	800f610 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3708      	adds	r7, #8
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b084      	sub	sp, #16
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
 8007736:	4608      	mov	r0, r1
 8007738:	4611      	mov	r1, r2
 800773a:	461a      	mov	r2, r3
 800773c:	4603      	mov	r3, r0
 800773e:	70fb      	strb	r3, [r7, #3]
 8007740:	460b      	mov	r3, r1
 8007742:	803b      	strh	r3, [r7, #0]
 8007744:	4613      	mov	r3, r2
 8007746:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007748:	2300      	movs	r3, #0
 800774a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800774c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007750:	2b00      	cmp	r3, #0
 8007752:	da0f      	bge.n	8007774 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007754:	78fb      	ldrb	r3, [r7, #3]
 8007756:	f003 020f 	and.w	r2, r3, #15
 800775a:	4613      	mov	r3, r2
 800775c:	00db      	lsls	r3, r3, #3
 800775e:	4413      	add	r3, r2
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	3310      	adds	r3, #16
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	4413      	add	r3, r2
 8007768:	3304      	adds	r3, #4
 800776a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2201      	movs	r2, #1
 8007770:	705a      	strb	r2, [r3, #1]
 8007772:	e00f      	b.n	8007794 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007774:	78fb      	ldrb	r3, [r7, #3]
 8007776:	f003 020f 	and.w	r2, r3, #15
 800777a:	4613      	mov	r3, r2
 800777c:	00db      	lsls	r3, r3, #3
 800777e:	4413      	add	r3, r2
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	4413      	add	r3, r2
 800778a:	3304      	adds	r3, #4
 800778c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2200      	movs	r2, #0
 8007792:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007794:	78fb      	ldrb	r3, [r7, #3]
 8007796:	f003 030f 	and.w	r3, r3, #15
 800779a:	b2da      	uxtb	r2, r3
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80077a0:	883a      	ldrh	r2, [r7, #0]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	78ba      	ldrb	r2, [r7, #2]
 80077aa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	785b      	ldrb	r3, [r3, #1]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d004      	beq.n	80077be <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	461a      	mov	r2, r3
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80077be:	78bb      	ldrb	r3, [r7, #2]
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d102      	bne.n	80077ca <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2200      	movs	r2, #0
 80077c8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d101      	bne.n	80077d8 <HAL_PCD_EP_Open+0xaa>
 80077d4:	2302      	movs	r3, #2
 80077d6:	e00e      	b.n	80077f6 <HAL_PCD_EP_Open+0xc8>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68f9      	ldr	r1, [r7, #12]
 80077e6:	4618      	mov	r0, r3
 80077e8:	f007 f8fa 	bl	800e9e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80077f4:	7afb      	ldrb	r3, [r7, #11]
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}

080077fe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80077fe:	b580      	push	{r7, lr}
 8007800:	b084      	sub	sp, #16
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
 8007806:	460b      	mov	r3, r1
 8007808:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800780a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800780e:	2b00      	cmp	r3, #0
 8007810:	da0f      	bge.n	8007832 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007812:	78fb      	ldrb	r3, [r7, #3]
 8007814:	f003 020f 	and.w	r2, r3, #15
 8007818:	4613      	mov	r3, r2
 800781a:	00db      	lsls	r3, r3, #3
 800781c:	4413      	add	r3, r2
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	3310      	adds	r3, #16
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	4413      	add	r3, r2
 8007826:	3304      	adds	r3, #4
 8007828:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2201      	movs	r2, #1
 800782e:	705a      	strb	r2, [r3, #1]
 8007830:	e00f      	b.n	8007852 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007832:	78fb      	ldrb	r3, [r7, #3]
 8007834:	f003 020f 	and.w	r2, r3, #15
 8007838:	4613      	mov	r3, r2
 800783a:	00db      	lsls	r3, r3, #3
 800783c:	4413      	add	r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	4413      	add	r3, r2
 8007848:	3304      	adds	r3, #4
 800784a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2200      	movs	r2, #0
 8007850:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007852:	78fb      	ldrb	r3, [r7, #3]
 8007854:	f003 030f 	and.w	r3, r3, #15
 8007858:	b2da      	uxtb	r2, r3
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007864:	2b01      	cmp	r3, #1
 8007866:	d101      	bne.n	800786c <HAL_PCD_EP_Close+0x6e>
 8007868:	2302      	movs	r3, #2
 800786a:	e00e      	b.n	800788a <HAL_PCD_EP_Close+0x8c>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	68f9      	ldr	r1, [r7, #12]
 800787a:	4618      	mov	r0, r3
 800787c:	f007 f938 	bl	800eaf0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b086      	sub	sp, #24
 8007896:	af00      	add	r7, sp, #0
 8007898:	60f8      	str	r0, [r7, #12]
 800789a:	607a      	str	r2, [r7, #4]
 800789c:	603b      	str	r3, [r7, #0]
 800789e:	460b      	mov	r3, r1
 80078a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80078a2:	7afb      	ldrb	r3, [r7, #11]
 80078a4:	f003 020f 	and.w	r2, r3, #15
 80078a8:	4613      	mov	r3, r2
 80078aa:	00db      	lsls	r3, r3, #3
 80078ac:	4413      	add	r3, r2
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	4413      	add	r3, r2
 80078b8:	3304      	adds	r3, #4
 80078ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	683a      	ldr	r2, [r7, #0]
 80078c6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	2200      	movs	r2, #0
 80078cc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	2200      	movs	r2, #0
 80078d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80078d4:	7afb      	ldrb	r3, [r7, #11]
 80078d6:	f003 030f 	and.w	r3, r3, #15
 80078da:	b2da      	uxtb	r2, r3
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	799b      	ldrb	r3, [r3, #6]
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d102      	bne.n	80078ee <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6818      	ldr	r0, [r3, #0]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	799b      	ldrb	r3, [r3, #6]
 80078f6:	461a      	mov	r2, r3
 80078f8:	6979      	ldr	r1, [r7, #20]
 80078fa:	f007 f9d5 	bl	800eca8 <USB_EPStartXfer>

  return HAL_OK;
 80078fe:	2300      	movs	r3, #0
}
 8007900:	4618      	mov	r0, r3
 8007902:	3718      	adds	r7, #24
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	460b      	mov	r3, r1
 8007912:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007914:	78fb      	ldrb	r3, [r7, #3]
 8007916:	f003 020f 	and.w	r2, r3, #15
 800791a:	6879      	ldr	r1, [r7, #4]
 800791c:	4613      	mov	r3, r2
 800791e:	00db      	lsls	r3, r3, #3
 8007920:	4413      	add	r3, r2
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	440b      	add	r3, r1
 8007926:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800792a:	681b      	ldr	r3, [r3, #0]
}
 800792c:	4618      	mov	r0, r3
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b086      	sub	sp, #24
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	607a      	str	r2, [r7, #4]
 8007942:	603b      	str	r3, [r7, #0]
 8007944:	460b      	mov	r3, r1
 8007946:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007948:	7afb      	ldrb	r3, [r7, #11]
 800794a:	f003 020f 	and.w	r2, r3, #15
 800794e:	4613      	mov	r3, r2
 8007950:	00db      	lsls	r3, r3, #3
 8007952:	4413      	add	r3, r2
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	3310      	adds	r3, #16
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	4413      	add	r3, r2
 800795c:	3304      	adds	r3, #4
 800795e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	683a      	ldr	r2, [r7, #0]
 800796a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	2200      	movs	r2, #0
 8007970:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	2201      	movs	r2, #1
 8007976:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007978:	7afb      	ldrb	r3, [r7, #11]
 800797a:	f003 030f 	and.w	r3, r3, #15
 800797e:	b2da      	uxtb	r2, r3
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	799b      	ldrb	r3, [r3, #6]
 8007988:	2b01      	cmp	r3, #1
 800798a:	d102      	bne.n	8007992 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6818      	ldr	r0, [r3, #0]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	799b      	ldrb	r3, [r3, #6]
 800799a:	461a      	mov	r2, r3
 800799c:	6979      	ldr	r1, [r7, #20]
 800799e:	f007 f983 	bl	800eca8 <USB_EPStartXfer>

  return HAL_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3718      	adds	r7, #24
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	460b      	mov	r3, r1
 80079b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80079b8:	78fb      	ldrb	r3, [r7, #3]
 80079ba:	f003 030f 	and.w	r3, r3, #15
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	7912      	ldrb	r2, [r2, #4]
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d901      	bls.n	80079ca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	e04f      	b.n	8007a6a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80079ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	da0f      	bge.n	80079f2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80079d2:	78fb      	ldrb	r3, [r7, #3]
 80079d4:	f003 020f 	and.w	r2, r3, #15
 80079d8:	4613      	mov	r3, r2
 80079da:	00db      	lsls	r3, r3, #3
 80079dc:	4413      	add	r3, r2
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	3310      	adds	r3, #16
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	4413      	add	r3, r2
 80079e6:	3304      	adds	r3, #4
 80079e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2201      	movs	r2, #1
 80079ee:	705a      	strb	r2, [r3, #1]
 80079f0:	e00d      	b.n	8007a0e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80079f2:	78fa      	ldrb	r2, [r7, #3]
 80079f4:	4613      	mov	r3, r2
 80079f6:	00db      	lsls	r3, r3, #3
 80079f8:	4413      	add	r3, r2
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	4413      	add	r3, r2
 8007a04:	3304      	adds	r3, #4
 8007a06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2201      	movs	r2, #1
 8007a12:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a14:	78fb      	ldrb	r3, [r7, #3]
 8007a16:	f003 030f 	and.w	r3, r3, #15
 8007a1a:	b2da      	uxtb	r2, r3
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d101      	bne.n	8007a2e <HAL_PCD_EP_SetStall+0x82>
 8007a2a:	2302      	movs	r3, #2
 8007a2c:	e01d      	b.n	8007a6a <HAL_PCD_EP_SetStall+0xbe>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2201      	movs	r2, #1
 8007a32:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	68f9      	ldr	r1, [r7, #12]
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f007 fd13 	bl	800f468 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007a42:	78fb      	ldrb	r3, [r7, #3]
 8007a44:	f003 030f 	and.w	r3, r3, #15
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d109      	bne.n	8007a60 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6818      	ldr	r0, [r3, #0]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	7999      	ldrb	r1, [r3, #6]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	f007 ff06 	bl	800f86c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3710      	adds	r7, #16
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007a72:	b580      	push	{r7, lr}
 8007a74:	b084      	sub	sp, #16
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007a7e:	78fb      	ldrb	r3, [r7, #3]
 8007a80:	f003 030f 	and.w	r3, r3, #15
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	7912      	ldrb	r2, [r2, #4]
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d901      	bls.n	8007a90 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e042      	b.n	8007b16 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007a90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	da0f      	bge.n	8007ab8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a98:	78fb      	ldrb	r3, [r7, #3]
 8007a9a:	f003 020f 	and.w	r2, r3, #15
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	00db      	lsls	r3, r3, #3
 8007aa2:	4413      	add	r3, r2
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	3310      	adds	r3, #16
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	4413      	add	r3, r2
 8007aac:	3304      	adds	r3, #4
 8007aae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	705a      	strb	r2, [r3, #1]
 8007ab6:	e00f      	b.n	8007ad8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007ab8:	78fb      	ldrb	r3, [r7, #3]
 8007aba:	f003 020f 	and.w	r2, r3, #15
 8007abe:	4613      	mov	r3, r2
 8007ac0:	00db      	lsls	r3, r3, #3
 8007ac2:	4413      	add	r3, r2
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	4413      	add	r3, r2
 8007ace:	3304      	adds	r3, #4
 8007ad0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2200      	movs	r2, #0
 8007adc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007ade:	78fb      	ldrb	r3, [r7, #3]
 8007ae0:	f003 030f 	and.w	r3, r3, #15
 8007ae4:	b2da      	uxtb	r2, r3
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d101      	bne.n	8007af8 <HAL_PCD_EP_ClrStall+0x86>
 8007af4:	2302      	movs	r3, #2
 8007af6:	e00e      	b.n	8007b16 <HAL_PCD_EP_ClrStall+0xa4>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2201      	movs	r2, #1
 8007afc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	68f9      	ldr	r1, [r7, #12]
 8007b06:	4618      	mov	r0, r3
 8007b08:	f007 fd1c 	bl	800f544 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b084      	sub	sp, #16
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
 8007b26:	460b      	mov	r3, r1
 8007b28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007b2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	da0c      	bge.n	8007b4c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b32:	78fb      	ldrb	r3, [r7, #3]
 8007b34:	f003 020f 	and.w	r2, r3, #15
 8007b38:	4613      	mov	r3, r2
 8007b3a:	00db      	lsls	r3, r3, #3
 8007b3c:	4413      	add	r3, r2
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	3310      	adds	r3, #16
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	4413      	add	r3, r2
 8007b46:	3304      	adds	r3, #4
 8007b48:	60fb      	str	r3, [r7, #12]
 8007b4a:	e00c      	b.n	8007b66 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b4c:	78fb      	ldrb	r3, [r7, #3]
 8007b4e:	f003 020f 	and.w	r2, r3, #15
 8007b52:	4613      	mov	r3, r2
 8007b54:	00db      	lsls	r3, r3, #3
 8007b56:	4413      	add	r3, r2
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	4413      	add	r3, r2
 8007b62:	3304      	adds	r3, #4
 8007b64:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	68f9      	ldr	r1, [r7, #12]
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f007 fb3b 	bl	800f1e8 <USB_EPStopXfer>
 8007b72:	4603      	mov	r3, r0
 8007b74:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007b76:	7afb      	ldrb	r3, [r7, #11]
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b08a      	sub	sp, #40	@ 0x28
 8007b84:	af02      	add	r7, sp, #8
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007b94:	683a      	ldr	r2, [r7, #0]
 8007b96:	4613      	mov	r3, r2
 8007b98:	00db      	lsls	r3, r3, #3
 8007b9a:	4413      	add	r3, r2
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	3310      	adds	r3, #16
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	3304      	adds	r3, #4
 8007ba6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	695a      	ldr	r2, [r3, #20]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d901      	bls.n	8007bb8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e06b      	b.n	8007c90 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	691a      	ldr	r2, [r3, #16]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	695b      	ldr	r3, [r3, #20]
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	69fa      	ldr	r2, [r7, #28]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d902      	bls.n	8007bd4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	3303      	adds	r3, #3
 8007bd8:	089b      	lsrs	r3, r3, #2
 8007bda:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007bdc:	e02a      	b.n	8007c34 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	691a      	ldr	r2, [r3, #16]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	695b      	ldr	r3, [r3, #20]
 8007be6:	1ad3      	subs	r3, r2, r3
 8007be8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	69fa      	ldr	r2, [r7, #28]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d902      	bls.n	8007bfa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	3303      	adds	r3, #3
 8007bfe:	089b      	lsrs	r3, r3, #2
 8007c00:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	68d9      	ldr	r1, [r3, #12]
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	b2da      	uxtb	r2, r3
 8007c0a:	69fb      	ldr	r3, [r7, #28]
 8007c0c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007c12:	9300      	str	r3, [sp, #0]
 8007c14:	4603      	mov	r3, r0
 8007c16:	6978      	ldr	r0, [r7, #20]
 8007c18:	f007 fb90 	bl	800f33c <USB_WritePacket>

    ep->xfer_buff  += len;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	68da      	ldr	r2, [r3, #12]
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	441a      	add	r2, r3
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	695a      	ldr	r2, [r3, #20]
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	441a      	add	r2, r3
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	015a      	lsls	r2, r3, #5
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	4413      	add	r3, r2
 8007c3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c40:	699b      	ldr	r3, [r3, #24]
 8007c42:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007c44:	69ba      	ldr	r2, [r7, #24]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d809      	bhi.n	8007c5e <PCD_WriteEmptyTxFifo+0xde>
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	695a      	ldr	r2, [r3, #20]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d203      	bcs.n	8007c5e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	691b      	ldr	r3, [r3, #16]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d1bf      	bne.n	8007bde <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	691a      	ldr	r2, [r3, #16]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	695b      	ldr	r3, [r3, #20]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d811      	bhi.n	8007c8e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	f003 030f 	and.w	r3, r3, #15
 8007c70:	2201      	movs	r2, #1
 8007c72:	fa02 f303 	lsl.w	r3, r2, r3
 8007c76:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	43db      	mvns	r3, r3
 8007c84:	6939      	ldr	r1, [r7, #16]
 8007c86:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8007c8e:	2300      	movs	r3, #0
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3720      	adds	r7, #32
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b088      	sub	sp, #32
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	333c      	adds	r3, #60	@ 0x3c
 8007cb0:	3304      	adds	r3, #4
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	015a      	lsls	r2, r3, #5
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	799b      	ldrb	r3, [r3, #6]
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d17b      	bne.n	8007dc6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	f003 0308 	and.w	r3, r3, #8
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d015      	beq.n	8007d04 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	4a61      	ldr	r2, [pc, #388]	@ (8007e60 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	f240 80b9 	bls.w	8007e54 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f000 80b3 	beq.w	8007e54 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	015a      	lsls	r2, r3, #5
 8007cf2:	69bb      	ldr	r3, [r7, #24]
 8007cf4:	4413      	add	r3, r2
 8007cf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d00:	6093      	str	r3, [r2, #8]
 8007d02:	e0a7      	b.n	8007e54 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	f003 0320 	and.w	r3, r3, #32
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d009      	beq.n	8007d22 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	015a      	lsls	r2, r3, #5
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	4413      	add	r3, r2
 8007d16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	2320      	movs	r3, #32
 8007d1e:	6093      	str	r3, [r2, #8]
 8007d20:	e098      	b.n	8007e54 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	f040 8093 	bne.w	8007e54 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	4a4b      	ldr	r2, [pc, #300]	@ (8007e60 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d90f      	bls.n	8007d56 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d00a      	beq.n	8007d56 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	015a      	lsls	r2, r3, #5
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	4413      	add	r3, r2
 8007d48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d52:	6093      	str	r3, [r2, #8]
 8007d54:	e07e      	b.n	8007e54 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007d56:	683a      	ldr	r2, [r7, #0]
 8007d58:	4613      	mov	r3, r2
 8007d5a:	00db      	lsls	r3, r3, #3
 8007d5c:	4413      	add	r3, r2
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	4413      	add	r3, r2
 8007d68:	3304      	adds	r3, #4
 8007d6a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6a1a      	ldr	r2, [r3, #32]
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	0159      	lsls	r1, r3, #5
 8007d74:	69bb      	ldr	r3, [r7, #24]
 8007d76:	440b      	add	r3, r1
 8007d78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d82:	1ad2      	subs	r2, r2, r3
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d114      	bne.n	8007db8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d109      	bne.n	8007daa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6818      	ldr	r0, [r3, #0]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007da0:	461a      	mov	r2, r3
 8007da2:	2101      	movs	r1, #1
 8007da4:	f007 fd62 	bl	800f86c <USB_EP0_OutStart>
 8007da8:	e006      	b.n	8007db8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	68da      	ldr	r2, [r3, #12]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	695b      	ldr	r3, [r3, #20]
 8007db2:	441a      	add	r2, r3
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f00a f87e 	bl	8011ec0 <HAL_PCD_DataOutStageCallback>
 8007dc4:	e046      	b.n	8007e54 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	4a26      	ldr	r2, [pc, #152]	@ (8007e64 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d124      	bne.n	8007e18 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00a      	beq.n	8007dee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	015a      	lsls	r2, r3, #5
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	4413      	add	r3, r2
 8007de0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007de4:	461a      	mov	r2, r3
 8007de6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007dea:	6093      	str	r3, [r2, #8]
 8007dec:	e032      	b.n	8007e54 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	f003 0320 	and.w	r3, r3, #32
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d008      	beq.n	8007e0a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	015a      	lsls	r2, r3, #5
 8007dfc:	69bb      	ldr	r3, [r7, #24]
 8007dfe:	4413      	add	r3, r2
 8007e00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e04:	461a      	mov	r2, r3
 8007e06:	2320      	movs	r3, #32
 8007e08:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	4619      	mov	r1, r3
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f00a f855 	bl	8011ec0 <HAL_PCD_DataOutStageCallback>
 8007e16:	e01d      	b.n	8007e54 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d114      	bne.n	8007e48 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007e1e:	6879      	ldr	r1, [r7, #4]
 8007e20:	683a      	ldr	r2, [r7, #0]
 8007e22:	4613      	mov	r3, r2
 8007e24:	00db      	lsls	r3, r3, #3
 8007e26:	4413      	add	r3, r2
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	440b      	add	r3, r1
 8007e2c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d108      	bne.n	8007e48 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6818      	ldr	r0, [r3, #0]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007e40:	461a      	mov	r2, r3
 8007e42:	2100      	movs	r1, #0
 8007e44:	f007 fd12 	bl	800f86c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f00a f836 	bl	8011ec0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3720      	adds	r7, #32
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	4f54300a 	.word	0x4f54300a
 8007e64:	4f54310a 	.word	0x4f54310a

08007e68 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	333c      	adds	r3, #60	@ 0x3c
 8007e80:	3304      	adds	r3, #4
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	015a      	lsls	r2, r3, #5
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	4a15      	ldr	r2, [pc, #84]	@ (8007ef0 <PCD_EP_OutSetupPacket_int+0x88>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d90e      	bls.n	8007ebc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d009      	beq.n	8007ebc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	015a      	lsls	r2, r3, #5
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	4413      	add	r3, r2
 8007eb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007eba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f009 ffed 	bl	8011e9c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	4a0a      	ldr	r2, [pc, #40]	@ (8007ef0 <PCD_EP_OutSetupPacket_int+0x88>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d90c      	bls.n	8007ee4 <PCD_EP_OutSetupPacket_int+0x7c>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	799b      	ldrb	r3, [r3, #6]
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d108      	bne.n	8007ee4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6818      	ldr	r0, [r3, #0]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007edc:	461a      	mov	r2, r3
 8007ede:	2101      	movs	r1, #1
 8007ee0:	f007 fcc4 	bl	800f86c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3718      	adds	r7, #24
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	4f54300a 	.word	0x4f54300a

08007ef4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b085      	sub	sp, #20
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	460b      	mov	r3, r1
 8007efe:	70fb      	strb	r3, [r7, #3]
 8007f00:	4613      	mov	r3, r2
 8007f02:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f0a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007f0c:	78fb      	ldrb	r3, [r7, #3]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d107      	bne.n	8007f22 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007f12:	883b      	ldrh	r3, [r7, #0]
 8007f14:	0419      	lsls	r1, r3, #16
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68ba      	ldr	r2, [r7, #8]
 8007f1c:	430a      	orrs	r2, r1
 8007f1e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007f20:	e028      	b.n	8007f74 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f28:	0c1b      	lsrs	r3, r3, #16
 8007f2a:	68ba      	ldr	r2, [r7, #8]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007f30:	2300      	movs	r3, #0
 8007f32:	73fb      	strb	r3, [r7, #15]
 8007f34:	e00d      	b.n	8007f52 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	7bfb      	ldrb	r3, [r7, #15]
 8007f3c:	3340      	adds	r3, #64	@ 0x40
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	4413      	add	r3, r2
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	0c1b      	lsrs	r3, r3, #16
 8007f46:	68ba      	ldr	r2, [r7, #8]
 8007f48:	4413      	add	r3, r2
 8007f4a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007f4c:	7bfb      	ldrb	r3, [r7, #15]
 8007f4e:	3301      	adds	r3, #1
 8007f50:	73fb      	strb	r3, [r7, #15]
 8007f52:	7bfa      	ldrb	r2, [r7, #15]
 8007f54:	78fb      	ldrb	r3, [r7, #3]
 8007f56:	3b01      	subs	r3, #1
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d3ec      	bcc.n	8007f36 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007f5c:	883b      	ldrh	r3, [r7, #0]
 8007f5e:	0418      	lsls	r0, r3, #16
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6819      	ldr	r1, [r3, #0]
 8007f64:	78fb      	ldrb	r3, [r7, #3]
 8007f66:	3b01      	subs	r3, #1
 8007f68:	68ba      	ldr	r2, [r7, #8]
 8007f6a:	4302      	orrs	r2, r0
 8007f6c:	3340      	adds	r3, #64	@ 0x40
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	440b      	add	r3, r1
 8007f72:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3714      	adds	r7, #20
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr

08007f82 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007f82:	b480      	push	{r7}
 8007f84:	b083      	sub	sp, #12
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	887a      	ldrh	r2, [r7, #2]
 8007f94:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	370c      	adds	r7, #12
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b085      	sub	sp, #20
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	699b      	ldr	r3, [r3, #24]
 8007fc6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007fd2:	4b05      	ldr	r3, [pc, #20]	@ (8007fe8 <HAL_PCDEx_ActivateLPM+0x44>)
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	68fa      	ldr	r2, [r7, #12]
 8007fd8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3714      	adds	r7, #20
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr
 8007fe8:	10000003 	.word	0x10000003

08007fec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007ff8:	bf00      	nop
 8007ffa:	370c      	adds	r7, #12
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800800c:	4b29      	ldr	r3, [pc, #164]	@ (80080b4 <HAL_PWREx_ConfigSupply+0xb0>)
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	f003 0307 	and.w	r3, r3, #7
 8008014:	2b06      	cmp	r3, #6
 8008016:	d00a      	beq.n	800802e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008018:	4b26      	ldr	r3, [pc, #152]	@ (80080b4 <HAL_PWREx_ConfigSupply+0xb0>)
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	429a      	cmp	r2, r3
 8008024:	d001      	beq.n	800802a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	e040      	b.n	80080ac <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800802a:	2300      	movs	r3, #0
 800802c:	e03e      	b.n	80080ac <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800802e:	4b21      	ldr	r3, [pc, #132]	@ (80080b4 <HAL_PWREx_ConfigSupply+0xb0>)
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8008036:	491f      	ldr	r1, [pc, #124]	@ (80080b4 <HAL_PWREx_ConfigSupply+0xb0>)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4313      	orrs	r3, r2
 800803c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800803e:	f7fa fd43 	bl	8002ac8 <HAL_GetTick>
 8008042:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008044:	e009      	b.n	800805a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008046:	f7fa fd3f 	bl	8002ac8 <HAL_GetTick>
 800804a:	4602      	mov	r2, r0
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	1ad3      	subs	r3, r2, r3
 8008050:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008054:	d901      	bls.n	800805a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	e028      	b.n	80080ac <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800805a:	4b16      	ldr	r3, [pc, #88]	@ (80080b4 <HAL_PWREx_ConfigSupply+0xb0>)
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008062:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008066:	d1ee      	bne.n	8008046 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2b1e      	cmp	r3, #30
 800806c:	d008      	beq.n	8008080 <HAL_PWREx_ConfigSupply+0x7c>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2b2e      	cmp	r3, #46	@ 0x2e
 8008072:	d005      	beq.n	8008080 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2b1d      	cmp	r3, #29
 8008078:	d002      	beq.n	8008080 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2b2d      	cmp	r3, #45	@ 0x2d
 800807e:	d114      	bne.n	80080aa <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8008080:	f7fa fd22 	bl	8002ac8 <HAL_GetTick>
 8008084:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008086:	e009      	b.n	800809c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008088:	f7fa fd1e 	bl	8002ac8 <HAL_GetTick>
 800808c:	4602      	mov	r2, r0
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	1ad3      	subs	r3, r2, r3
 8008092:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008096:	d901      	bls.n	800809c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	e007      	b.n	80080ac <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800809c:	4b05      	ldr	r3, [pc, #20]	@ (80080b4 <HAL_PWREx_ConfigSupply+0xb0>)
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80080a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080a8:	d1ee      	bne.n	8008088 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3710      	adds	r7, #16
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	58024800 	.word	0x58024800

080080b8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80080b8:	b480      	push	{r7}
 80080ba:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80080bc:	4b05      	ldr	r3, [pc, #20]	@ (80080d4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	4a04      	ldr	r2, [pc, #16]	@ (80080d4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80080c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80080c6:	60d3      	str	r3, [r2, #12]
}
 80080c8:	bf00      	nop
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	58024800 	.word	0x58024800

080080d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b08c      	sub	sp, #48	@ 0x30
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d102      	bne.n	80080ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80080e6:	2301      	movs	r3, #1
 80080e8:	f000 bc48 	b.w	800897c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f003 0301 	and.w	r3, r3, #1
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f000 8088 	beq.w	800820a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080fa:	4b99      	ldr	r3, [pc, #612]	@ (8008360 <HAL_RCC_OscConfig+0x288>)
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008102:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008104:	4b96      	ldr	r3, [pc, #600]	@ (8008360 <HAL_RCC_OscConfig+0x288>)
 8008106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008108:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800810a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800810c:	2b10      	cmp	r3, #16
 800810e:	d007      	beq.n	8008120 <HAL_RCC_OscConfig+0x48>
 8008110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008112:	2b18      	cmp	r3, #24
 8008114:	d111      	bne.n	800813a <HAL_RCC_OscConfig+0x62>
 8008116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008118:	f003 0303 	and.w	r3, r3, #3
 800811c:	2b02      	cmp	r3, #2
 800811e:	d10c      	bne.n	800813a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008120:	4b8f      	ldr	r3, [pc, #572]	@ (8008360 <HAL_RCC_OscConfig+0x288>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008128:	2b00      	cmp	r3, #0
 800812a:	d06d      	beq.n	8008208 <HAL_RCC_OscConfig+0x130>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d169      	bne.n	8008208 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008134:	2301      	movs	r3, #1
 8008136:	f000 bc21 	b.w	800897c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008142:	d106      	bne.n	8008152 <HAL_RCC_OscConfig+0x7a>
 8008144:	4b86      	ldr	r3, [pc, #536]	@ (8008360 <HAL_RCC_OscConfig+0x288>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a85      	ldr	r2, [pc, #532]	@ (8008360 <HAL_RCC_OscConfig+0x288>)
 800814a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800814e:	6013      	str	r3, [r2, #0]
 8008150:	e02e      	b.n	80081b0 <HAL_RCC_OscConfig+0xd8>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d10c      	bne.n	8008174 <HAL_RCC_OscConfig+0x9c>
 800815a:	4b81      	ldr	r3, [pc, #516]	@ (8008360 <HAL_RCC_OscConfig+0x288>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a80      	ldr	r2, [pc, #512]	@ (8008360 <HAL_RCC_OscConfig+0x288>)
 8008160:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008164:	6013      	str	r3, [r2, #0]
 8008166:	4b7e      	ldr	r3, [pc, #504]	@ (8008360 <HAL_RCC_OscConfig+0x288>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a7d      	ldr	r2, [pc, #500]	@ (8008360 <HAL_RCC_OscConfig+0x288>)
 800816c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008170:	6013      	str	r3, [r2, #0]
 8008172:	e01d      	b.n	80081b0 <HAL_RCC_OscConfig+0xd8>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800817c:	d10c      	bne.n	8008198 <HAL_RCC_OscConfig+0xc0>
 800817e:	4b78      	ldr	r3, [pc, #480]	@ (8008360 <HAL_RCC_OscConfig+0x288>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a77      	ldr	r2, [pc, #476]	@ (8008360 <HAL_RCC_OscConfig+0x288>)
 8008184:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008188:	6013      	str	r3, [r2, #0]
 800818a:	4b75      	ldr	r3, [pc, #468]	@ (8008360 <HAL_RCC_OscConfig+0x288>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a74      	ldr	r2, [pc, #464]	@ (8008360 <HAL_RCC_OscConfig+0x288>)
 8008190:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008194:	6013      	str	r3, [r2, #0]
 8008196:	e00b      	b.n	80081b0 <HAL_RCC_OscConfig+0xd8>
 8008198:	4b71      	ldr	r3, [pc, #452]	@ (8008360 <HAL_RCC_OscConfig+0x288>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a70      	ldr	r2, [pc, #448]	@ (8008360 <HAL_RCC_OscConfig+0x288>)
 800819e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80081a2:	6013      	str	r3, [r2, #0]
 80081a4:	4b6e      	ldr	r3, [pc, #440]	@ (8008360 <HAL_RCC_OscConfig+0x288>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a6d      	ldr	r2, [pc, #436]	@ (8008360 <HAL_RCC_OscConfig+0x288>)
 80081aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80081ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d013      	beq.n	80081e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081b8:	f7fa fc86 	bl	8002ac8 <HAL_GetTick>
 80081bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80081be:	e008      	b.n	80081d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80081c0:	f7fa fc82 	bl	8002ac8 <HAL_GetTick>
 80081c4:	4602      	mov	r2, r0
 80081c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c8:	1ad3      	subs	r3, r2, r3
 80081ca:	2b64      	cmp	r3, #100	@ 0x64
 80081cc:	d901      	bls.n	80081d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80081ce:	2303      	movs	r3, #3
 80081d0:	e3d4      	b.n	800897c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80081d2:	4b63      	ldr	r3, [pc, #396]	@ (8008360 <HAL_RCC_OscConfig+0x288>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d0f0      	beq.n	80081c0 <HAL_RCC_OscConfig+0xe8>
 80081de:	e014      	b.n	800820a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081e0:	f7fa fc72 	bl	8002ac8 <HAL_GetTick>
 80081e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80081e6:	e008      	b.n	80081fa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80081e8:	f7fa fc6e 	bl	8002ac8 <HAL_GetTick>
 80081ec:	4602      	mov	r2, r0
 80081ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f0:	1ad3      	subs	r3, r2, r3
 80081f2:	2b64      	cmp	r3, #100	@ 0x64
 80081f4:	d901      	bls.n	80081fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80081f6:	2303      	movs	r3, #3
 80081f8:	e3c0      	b.n	800897c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80081fa:	4b59      	ldr	r3, [pc, #356]	@ (8008360 <HAL_RCC_OscConfig+0x288>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008202:	2b00      	cmp	r3, #0
 8008204:	d1f0      	bne.n	80081e8 <HAL_RCC_OscConfig+0x110>
 8008206:	e000      	b.n	800820a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f003 0302 	and.w	r3, r3, #2
 8008212:	2b00      	cmp	r3, #0
 8008214:	f000 80ca 	beq.w	80083ac <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008218:	4b51      	ldr	r3, [pc, #324]	@ (8008360 <HAL_RCC_OscConfig+0x288>)
 800821a:	691b      	ldr	r3, [r3, #16]
 800821c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008220:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008222:	4b4f      	ldr	r3, [pc, #316]	@ (8008360 <HAL_RCC_OscConfig+0x288>)
 8008224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008226:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008228:	6a3b      	ldr	r3, [r7, #32]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d007      	beq.n	800823e <HAL_RCC_OscConfig+0x166>
 800822e:	6a3b      	ldr	r3, [r7, #32]
 8008230:	2b18      	cmp	r3, #24
 8008232:	d156      	bne.n	80082e2 <HAL_RCC_OscConfig+0x20a>
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	f003 0303 	and.w	r3, r3, #3
 800823a:	2b00      	cmp	r3, #0
 800823c:	d151      	bne.n	80082e2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800823e:	4b48      	ldr	r3, [pc, #288]	@ (8008360 <HAL_RCC_OscConfig+0x288>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f003 0304 	and.w	r3, r3, #4
 8008246:	2b00      	cmp	r3, #0
 8008248:	d005      	beq.n	8008256 <HAL_RCC_OscConfig+0x17e>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d101      	bne.n	8008256 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	e392      	b.n	800897c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008256:	4b42      	ldr	r3, [pc, #264]	@ (8008360 <HAL_RCC_OscConfig+0x288>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f023 0219 	bic.w	r2, r3, #25
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	493f      	ldr	r1, [pc, #252]	@ (8008360 <HAL_RCC_OscConfig+0x288>)
 8008264:	4313      	orrs	r3, r2
 8008266:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008268:	f7fa fc2e 	bl	8002ac8 <HAL_GetTick>
 800826c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800826e:	e008      	b.n	8008282 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008270:	f7fa fc2a 	bl	8002ac8 <HAL_GetTick>
 8008274:	4602      	mov	r2, r0
 8008276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008278:	1ad3      	subs	r3, r2, r3
 800827a:	2b02      	cmp	r3, #2
 800827c:	d901      	bls.n	8008282 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800827e:	2303      	movs	r3, #3
 8008280:	e37c      	b.n	800897c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008282:	4b37      	ldr	r3, [pc, #220]	@ (8008360 <HAL_RCC_OscConfig+0x288>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f003 0304 	and.w	r3, r3, #4
 800828a:	2b00      	cmp	r3, #0
 800828c:	d0f0      	beq.n	8008270 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800828e:	f7fa fc4b 	bl	8002b28 <HAL_GetREVID>
 8008292:	4603      	mov	r3, r0
 8008294:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008298:	4293      	cmp	r3, r2
 800829a:	d817      	bhi.n	80082cc <HAL_RCC_OscConfig+0x1f4>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	691b      	ldr	r3, [r3, #16]
 80082a0:	2b40      	cmp	r3, #64	@ 0x40
 80082a2:	d108      	bne.n	80082b6 <HAL_RCC_OscConfig+0x1de>
 80082a4:	4b2e      	ldr	r3, [pc, #184]	@ (8008360 <HAL_RCC_OscConfig+0x288>)
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80082ac:	4a2c      	ldr	r2, [pc, #176]	@ (8008360 <HAL_RCC_OscConfig+0x288>)
 80082ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082b2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80082b4:	e07a      	b.n	80083ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082b6:	4b2a      	ldr	r3, [pc, #168]	@ (8008360 <HAL_RCC_OscConfig+0x288>)
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	691b      	ldr	r3, [r3, #16]
 80082c2:	031b      	lsls	r3, r3, #12
 80082c4:	4926      	ldr	r1, [pc, #152]	@ (8008360 <HAL_RCC_OscConfig+0x288>)
 80082c6:	4313      	orrs	r3, r2
 80082c8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80082ca:	e06f      	b.n	80083ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082cc:	4b24      	ldr	r3, [pc, #144]	@ (8008360 <HAL_RCC_OscConfig+0x288>)
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	061b      	lsls	r3, r3, #24
 80082da:	4921      	ldr	r1, [pc, #132]	@ (8008360 <HAL_RCC_OscConfig+0x288>)
 80082dc:	4313      	orrs	r3, r2
 80082de:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80082e0:	e064      	b.n	80083ac <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d047      	beq.n	800837a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80082ea:	4b1d      	ldr	r3, [pc, #116]	@ (8008360 <HAL_RCC_OscConfig+0x288>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f023 0219 	bic.w	r2, r3, #25
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	491a      	ldr	r1, [pc, #104]	@ (8008360 <HAL_RCC_OscConfig+0x288>)
 80082f8:	4313      	orrs	r3, r2
 80082fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082fc:	f7fa fbe4 	bl	8002ac8 <HAL_GetTick>
 8008300:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008302:	e008      	b.n	8008316 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008304:	f7fa fbe0 	bl	8002ac8 <HAL_GetTick>
 8008308:	4602      	mov	r2, r0
 800830a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800830c:	1ad3      	subs	r3, r2, r3
 800830e:	2b02      	cmp	r3, #2
 8008310:	d901      	bls.n	8008316 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008312:	2303      	movs	r3, #3
 8008314:	e332      	b.n	800897c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008316:	4b12      	ldr	r3, [pc, #72]	@ (8008360 <HAL_RCC_OscConfig+0x288>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f003 0304 	and.w	r3, r3, #4
 800831e:	2b00      	cmp	r3, #0
 8008320:	d0f0      	beq.n	8008304 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008322:	f7fa fc01 	bl	8002b28 <HAL_GetREVID>
 8008326:	4603      	mov	r3, r0
 8008328:	f241 0203 	movw	r2, #4099	@ 0x1003
 800832c:	4293      	cmp	r3, r2
 800832e:	d819      	bhi.n	8008364 <HAL_RCC_OscConfig+0x28c>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	2b40      	cmp	r3, #64	@ 0x40
 8008336:	d108      	bne.n	800834a <HAL_RCC_OscConfig+0x272>
 8008338:	4b09      	ldr	r3, [pc, #36]	@ (8008360 <HAL_RCC_OscConfig+0x288>)
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008340:	4a07      	ldr	r2, [pc, #28]	@ (8008360 <HAL_RCC_OscConfig+0x288>)
 8008342:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008346:	6053      	str	r3, [r2, #4]
 8008348:	e030      	b.n	80083ac <HAL_RCC_OscConfig+0x2d4>
 800834a:	4b05      	ldr	r3, [pc, #20]	@ (8008360 <HAL_RCC_OscConfig+0x288>)
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	031b      	lsls	r3, r3, #12
 8008358:	4901      	ldr	r1, [pc, #4]	@ (8008360 <HAL_RCC_OscConfig+0x288>)
 800835a:	4313      	orrs	r3, r2
 800835c:	604b      	str	r3, [r1, #4]
 800835e:	e025      	b.n	80083ac <HAL_RCC_OscConfig+0x2d4>
 8008360:	58024400 	.word	0x58024400
 8008364:	4b9a      	ldr	r3, [pc, #616]	@ (80085d0 <HAL_RCC_OscConfig+0x4f8>)
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	061b      	lsls	r3, r3, #24
 8008372:	4997      	ldr	r1, [pc, #604]	@ (80085d0 <HAL_RCC_OscConfig+0x4f8>)
 8008374:	4313      	orrs	r3, r2
 8008376:	604b      	str	r3, [r1, #4]
 8008378:	e018      	b.n	80083ac <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800837a:	4b95      	ldr	r3, [pc, #596]	@ (80085d0 <HAL_RCC_OscConfig+0x4f8>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a94      	ldr	r2, [pc, #592]	@ (80085d0 <HAL_RCC_OscConfig+0x4f8>)
 8008380:	f023 0301 	bic.w	r3, r3, #1
 8008384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008386:	f7fa fb9f 	bl	8002ac8 <HAL_GetTick>
 800838a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800838c:	e008      	b.n	80083a0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800838e:	f7fa fb9b 	bl	8002ac8 <HAL_GetTick>
 8008392:	4602      	mov	r2, r0
 8008394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	2b02      	cmp	r3, #2
 800839a:	d901      	bls.n	80083a0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800839c:	2303      	movs	r3, #3
 800839e:	e2ed      	b.n	800897c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80083a0:	4b8b      	ldr	r3, [pc, #556]	@ (80085d0 <HAL_RCC_OscConfig+0x4f8>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 0304 	and.w	r3, r3, #4
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d1f0      	bne.n	800838e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f003 0310 	and.w	r3, r3, #16
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	f000 80a9 	beq.w	800850c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80083ba:	4b85      	ldr	r3, [pc, #532]	@ (80085d0 <HAL_RCC_OscConfig+0x4f8>)
 80083bc:	691b      	ldr	r3, [r3, #16]
 80083be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80083c2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80083c4:	4b82      	ldr	r3, [pc, #520]	@ (80085d0 <HAL_RCC_OscConfig+0x4f8>)
 80083c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083c8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80083ca:	69bb      	ldr	r3, [r7, #24]
 80083cc:	2b08      	cmp	r3, #8
 80083ce:	d007      	beq.n	80083e0 <HAL_RCC_OscConfig+0x308>
 80083d0:	69bb      	ldr	r3, [r7, #24]
 80083d2:	2b18      	cmp	r3, #24
 80083d4:	d13a      	bne.n	800844c <HAL_RCC_OscConfig+0x374>
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	f003 0303 	and.w	r3, r3, #3
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d135      	bne.n	800844c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80083e0:	4b7b      	ldr	r3, [pc, #492]	@ (80085d0 <HAL_RCC_OscConfig+0x4f8>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d005      	beq.n	80083f8 <HAL_RCC_OscConfig+0x320>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	69db      	ldr	r3, [r3, #28]
 80083f0:	2b80      	cmp	r3, #128	@ 0x80
 80083f2:	d001      	beq.n	80083f8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	e2c1      	b.n	800897c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80083f8:	f7fa fb96 	bl	8002b28 <HAL_GetREVID>
 80083fc:	4603      	mov	r3, r0
 80083fe:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008402:	4293      	cmp	r3, r2
 8008404:	d817      	bhi.n	8008436 <HAL_RCC_OscConfig+0x35e>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6a1b      	ldr	r3, [r3, #32]
 800840a:	2b20      	cmp	r3, #32
 800840c:	d108      	bne.n	8008420 <HAL_RCC_OscConfig+0x348>
 800840e:	4b70      	ldr	r3, [pc, #448]	@ (80085d0 <HAL_RCC_OscConfig+0x4f8>)
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008416:	4a6e      	ldr	r2, [pc, #440]	@ (80085d0 <HAL_RCC_OscConfig+0x4f8>)
 8008418:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800841c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800841e:	e075      	b.n	800850c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008420:	4b6b      	ldr	r3, [pc, #428]	@ (80085d0 <HAL_RCC_OscConfig+0x4f8>)
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6a1b      	ldr	r3, [r3, #32]
 800842c:	069b      	lsls	r3, r3, #26
 800842e:	4968      	ldr	r1, [pc, #416]	@ (80085d0 <HAL_RCC_OscConfig+0x4f8>)
 8008430:	4313      	orrs	r3, r2
 8008432:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008434:	e06a      	b.n	800850c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008436:	4b66      	ldr	r3, [pc, #408]	@ (80085d0 <HAL_RCC_OscConfig+0x4f8>)
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6a1b      	ldr	r3, [r3, #32]
 8008442:	061b      	lsls	r3, r3, #24
 8008444:	4962      	ldr	r1, [pc, #392]	@ (80085d0 <HAL_RCC_OscConfig+0x4f8>)
 8008446:	4313      	orrs	r3, r2
 8008448:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800844a:	e05f      	b.n	800850c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	69db      	ldr	r3, [r3, #28]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d042      	beq.n	80084da <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008454:	4b5e      	ldr	r3, [pc, #376]	@ (80085d0 <HAL_RCC_OscConfig+0x4f8>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a5d      	ldr	r2, [pc, #372]	@ (80085d0 <HAL_RCC_OscConfig+0x4f8>)
 800845a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800845e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008460:	f7fa fb32 	bl	8002ac8 <HAL_GetTick>
 8008464:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008466:	e008      	b.n	800847a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008468:	f7fa fb2e 	bl	8002ac8 <HAL_GetTick>
 800846c:	4602      	mov	r2, r0
 800846e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008470:	1ad3      	subs	r3, r2, r3
 8008472:	2b02      	cmp	r3, #2
 8008474:	d901      	bls.n	800847a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008476:	2303      	movs	r3, #3
 8008478:	e280      	b.n	800897c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800847a:	4b55      	ldr	r3, [pc, #340]	@ (80085d0 <HAL_RCC_OscConfig+0x4f8>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008482:	2b00      	cmp	r3, #0
 8008484:	d0f0      	beq.n	8008468 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008486:	f7fa fb4f 	bl	8002b28 <HAL_GetREVID>
 800848a:	4603      	mov	r3, r0
 800848c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008490:	4293      	cmp	r3, r2
 8008492:	d817      	bhi.n	80084c4 <HAL_RCC_OscConfig+0x3ec>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6a1b      	ldr	r3, [r3, #32]
 8008498:	2b20      	cmp	r3, #32
 800849a:	d108      	bne.n	80084ae <HAL_RCC_OscConfig+0x3d6>
 800849c:	4b4c      	ldr	r3, [pc, #304]	@ (80085d0 <HAL_RCC_OscConfig+0x4f8>)
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80084a4:	4a4a      	ldr	r2, [pc, #296]	@ (80085d0 <HAL_RCC_OscConfig+0x4f8>)
 80084a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80084aa:	6053      	str	r3, [r2, #4]
 80084ac:	e02e      	b.n	800850c <HAL_RCC_OscConfig+0x434>
 80084ae:	4b48      	ldr	r3, [pc, #288]	@ (80085d0 <HAL_RCC_OscConfig+0x4f8>)
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a1b      	ldr	r3, [r3, #32]
 80084ba:	069b      	lsls	r3, r3, #26
 80084bc:	4944      	ldr	r1, [pc, #272]	@ (80085d0 <HAL_RCC_OscConfig+0x4f8>)
 80084be:	4313      	orrs	r3, r2
 80084c0:	604b      	str	r3, [r1, #4]
 80084c2:	e023      	b.n	800850c <HAL_RCC_OscConfig+0x434>
 80084c4:	4b42      	ldr	r3, [pc, #264]	@ (80085d0 <HAL_RCC_OscConfig+0x4f8>)
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6a1b      	ldr	r3, [r3, #32]
 80084d0:	061b      	lsls	r3, r3, #24
 80084d2:	493f      	ldr	r1, [pc, #252]	@ (80085d0 <HAL_RCC_OscConfig+0x4f8>)
 80084d4:	4313      	orrs	r3, r2
 80084d6:	60cb      	str	r3, [r1, #12]
 80084d8:	e018      	b.n	800850c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80084da:	4b3d      	ldr	r3, [pc, #244]	@ (80085d0 <HAL_RCC_OscConfig+0x4f8>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a3c      	ldr	r2, [pc, #240]	@ (80085d0 <HAL_RCC_OscConfig+0x4f8>)
 80084e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084e6:	f7fa faef 	bl	8002ac8 <HAL_GetTick>
 80084ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80084ec:	e008      	b.n	8008500 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80084ee:	f7fa faeb 	bl	8002ac8 <HAL_GetTick>
 80084f2:	4602      	mov	r2, r0
 80084f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f6:	1ad3      	subs	r3, r2, r3
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	d901      	bls.n	8008500 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80084fc:	2303      	movs	r3, #3
 80084fe:	e23d      	b.n	800897c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008500:	4b33      	ldr	r3, [pc, #204]	@ (80085d0 <HAL_RCC_OscConfig+0x4f8>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1f0      	bne.n	80084ee <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f003 0308 	and.w	r3, r3, #8
 8008514:	2b00      	cmp	r3, #0
 8008516:	d036      	beq.n	8008586 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	695b      	ldr	r3, [r3, #20]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d019      	beq.n	8008554 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008520:	4b2b      	ldr	r3, [pc, #172]	@ (80085d0 <HAL_RCC_OscConfig+0x4f8>)
 8008522:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008524:	4a2a      	ldr	r2, [pc, #168]	@ (80085d0 <HAL_RCC_OscConfig+0x4f8>)
 8008526:	f043 0301 	orr.w	r3, r3, #1
 800852a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800852c:	f7fa facc 	bl	8002ac8 <HAL_GetTick>
 8008530:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008532:	e008      	b.n	8008546 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008534:	f7fa fac8 	bl	8002ac8 <HAL_GetTick>
 8008538:	4602      	mov	r2, r0
 800853a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	2b02      	cmp	r3, #2
 8008540:	d901      	bls.n	8008546 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008542:	2303      	movs	r3, #3
 8008544:	e21a      	b.n	800897c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008546:	4b22      	ldr	r3, [pc, #136]	@ (80085d0 <HAL_RCC_OscConfig+0x4f8>)
 8008548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800854a:	f003 0302 	and.w	r3, r3, #2
 800854e:	2b00      	cmp	r3, #0
 8008550:	d0f0      	beq.n	8008534 <HAL_RCC_OscConfig+0x45c>
 8008552:	e018      	b.n	8008586 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008554:	4b1e      	ldr	r3, [pc, #120]	@ (80085d0 <HAL_RCC_OscConfig+0x4f8>)
 8008556:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008558:	4a1d      	ldr	r2, [pc, #116]	@ (80085d0 <HAL_RCC_OscConfig+0x4f8>)
 800855a:	f023 0301 	bic.w	r3, r3, #1
 800855e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008560:	f7fa fab2 	bl	8002ac8 <HAL_GetTick>
 8008564:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008566:	e008      	b.n	800857a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008568:	f7fa faae 	bl	8002ac8 <HAL_GetTick>
 800856c:	4602      	mov	r2, r0
 800856e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008570:	1ad3      	subs	r3, r2, r3
 8008572:	2b02      	cmp	r3, #2
 8008574:	d901      	bls.n	800857a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008576:	2303      	movs	r3, #3
 8008578:	e200      	b.n	800897c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800857a:	4b15      	ldr	r3, [pc, #84]	@ (80085d0 <HAL_RCC_OscConfig+0x4f8>)
 800857c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800857e:	f003 0302 	and.w	r3, r3, #2
 8008582:	2b00      	cmp	r3, #0
 8008584:	d1f0      	bne.n	8008568 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f003 0320 	and.w	r3, r3, #32
 800858e:	2b00      	cmp	r3, #0
 8008590:	d039      	beq.n	8008606 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	699b      	ldr	r3, [r3, #24]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d01c      	beq.n	80085d4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800859a:	4b0d      	ldr	r3, [pc, #52]	@ (80085d0 <HAL_RCC_OscConfig+0x4f8>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a0c      	ldr	r2, [pc, #48]	@ (80085d0 <HAL_RCC_OscConfig+0x4f8>)
 80085a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80085a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80085a6:	f7fa fa8f 	bl	8002ac8 <HAL_GetTick>
 80085aa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80085ac:	e008      	b.n	80085c0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80085ae:	f7fa fa8b 	bl	8002ac8 <HAL_GetTick>
 80085b2:	4602      	mov	r2, r0
 80085b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b6:	1ad3      	subs	r3, r2, r3
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	d901      	bls.n	80085c0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80085bc:	2303      	movs	r3, #3
 80085be:	e1dd      	b.n	800897c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80085c0:	4b03      	ldr	r3, [pc, #12]	@ (80085d0 <HAL_RCC_OscConfig+0x4f8>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d0f0      	beq.n	80085ae <HAL_RCC_OscConfig+0x4d6>
 80085cc:	e01b      	b.n	8008606 <HAL_RCC_OscConfig+0x52e>
 80085ce:	bf00      	nop
 80085d0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80085d4:	4b9b      	ldr	r3, [pc, #620]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a9a      	ldr	r2, [pc, #616]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 80085da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80085de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80085e0:	f7fa fa72 	bl	8002ac8 <HAL_GetTick>
 80085e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80085e6:	e008      	b.n	80085fa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80085e8:	f7fa fa6e 	bl	8002ac8 <HAL_GetTick>
 80085ec:	4602      	mov	r2, r0
 80085ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f0:	1ad3      	subs	r3, r2, r3
 80085f2:	2b02      	cmp	r3, #2
 80085f4:	d901      	bls.n	80085fa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80085f6:	2303      	movs	r3, #3
 80085f8:	e1c0      	b.n	800897c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80085fa:	4b92      	ldr	r3, [pc, #584]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008602:	2b00      	cmp	r3, #0
 8008604:	d1f0      	bne.n	80085e8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f003 0304 	and.w	r3, r3, #4
 800860e:	2b00      	cmp	r3, #0
 8008610:	f000 8081 	beq.w	8008716 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008614:	4b8c      	ldr	r3, [pc, #560]	@ (8008848 <HAL_RCC_OscConfig+0x770>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a8b      	ldr	r2, [pc, #556]	@ (8008848 <HAL_RCC_OscConfig+0x770>)
 800861a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800861e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008620:	f7fa fa52 	bl	8002ac8 <HAL_GetTick>
 8008624:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008626:	e008      	b.n	800863a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008628:	f7fa fa4e 	bl	8002ac8 <HAL_GetTick>
 800862c:	4602      	mov	r2, r0
 800862e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008630:	1ad3      	subs	r3, r2, r3
 8008632:	2b64      	cmp	r3, #100	@ 0x64
 8008634:	d901      	bls.n	800863a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008636:	2303      	movs	r3, #3
 8008638:	e1a0      	b.n	800897c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800863a:	4b83      	ldr	r3, [pc, #524]	@ (8008848 <HAL_RCC_OscConfig+0x770>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008642:	2b00      	cmp	r3, #0
 8008644:	d0f0      	beq.n	8008628 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	2b01      	cmp	r3, #1
 800864c:	d106      	bne.n	800865c <HAL_RCC_OscConfig+0x584>
 800864e:	4b7d      	ldr	r3, [pc, #500]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 8008650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008652:	4a7c      	ldr	r2, [pc, #496]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 8008654:	f043 0301 	orr.w	r3, r3, #1
 8008658:	6713      	str	r3, [r2, #112]	@ 0x70
 800865a:	e02d      	b.n	80086b8 <HAL_RCC_OscConfig+0x5e0>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d10c      	bne.n	800867e <HAL_RCC_OscConfig+0x5a6>
 8008664:	4b77      	ldr	r3, [pc, #476]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 8008666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008668:	4a76      	ldr	r2, [pc, #472]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 800866a:	f023 0301 	bic.w	r3, r3, #1
 800866e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008670:	4b74      	ldr	r3, [pc, #464]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 8008672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008674:	4a73      	ldr	r2, [pc, #460]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 8008676:	f023 0304 	bic.w	r3, r3, #4
 800867a:	6713      	str	r3, [r2, #112]	@ 0x70
 800867c:	e01c      	b.n	80086b8 <HAL_RCC_OscConfig+0x5e0>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	2b05      	cmp	r3, #5
 8008684:	d10c      	bne.n	80086a0 <HAL_RCC_OscConfig+0x5c8>
 8008686:	4b6f      	ldr	r3, [pc, #444]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 8008688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800868a:	4a6e      	ldr	r2, [pc, #440]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 800868c:	f043 0304 	orr.w	r3, r3, #4
 8008690:	6713      	str	r3, [r2, #112]	@ 0x70
 8008692:	4b6c      	ldr	r3, [pc, #432]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 8008694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008696:	4a6b      	ldr	r2, [pc, #428]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 8008698:	f043 0301 	orr.w	r3, r3, #1
 800869c:	6713      	str	r3, [r2, #112]	@ 0x70
 800869e:	e00b      	b.n	80086b8 <HAL_RCC_OscConfig+0x5e0>
 80086a0:	4b68      	ldr	r3, [pc, #416]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 80086a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086a4:	4a67      	ldr	r2, [pc, #412]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 80086a6:	f023 0301 	bic.w	r3, r3, #1
 80086aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80086ac:	4b65      	ldr	r3, [pc, #404]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 80086ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086b0:	4a64      	ldr	r2, [pc, #400]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 80086b2:	f023 0304 	bic.w	r3, r3, #4
 80086b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d015      	beq.n	80086ec <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086c0:	f7fa fa02 	bl	8002ac8 <HAL_GetTick>
 80086c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80086c6:	e00a      	b.n	80086de <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086c8:	f7fa f9fe 	bl	8002ac8 <HAL_GetTick>
 80086cc:	4602      	mov	r2, r0
 80086ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d0:	1ad3      	subs	r3, r2, r3
 80086d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d901      	bls.n	80086de <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80086da:	2303      	movs	r3, #3
 80086dc:	e14e      	b.n	800897c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80086de:	4b59      	ldr	r3, [pc, #356]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 80086e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086e2:	f003 0302 	and.w	r3, r3, #2
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d0ee      	beq.n	80086c8 <HAL_RCC_OscConfig+0x5f0>
 80086ea:	e014      	b.n	8008716 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086ec:	f7fa f9ec 	bl	8002ac8 <HAL_GetTick>
 80086f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80086f2:	e00a      	b.n	800870a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086f4:	f7fa f9e8 	bl	8002ac8 <HAL_GetTick>
 80086f8:	4602      	mov	r2, r0
 80086fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086fc:	1ad3      	subs	r3, r2, r3
 80086fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008702:	4293      	cmp	r3, r2
 8008704:	d901      	bls.n	800870a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008706:	2303      	movs	r3, #3
 8008708:	e138      	b.n	800897c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800870a:	4b4e      	ldr	r3, [pc, #312]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 800870c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800870e:	f003 0302 	and.w	r3, r3, #2
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1ee      	bne.n	80086f4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800871a:	2b00      	cmp	r3, #0
 800871c:	f000 812d 	beq.w	800897a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008720:	4b48      	ldr	r3, [pc, #288]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 8008722:	691b      	ldr	r3, [r3, #16]
 8008724:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008728:	2b18      	cmp	r3, #24
 800872a:	f000 80bd 	beq.w	80088a8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008732:	2b02      	cmp	r3, #2
 8008734:	f040 809e 	bne.w	8008874 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008738:	4b42      	ldr	r3, [pc, #264]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a41      	ldr	r2, [pc, #260]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 800873e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008742:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008744:	f7fa f9c0 	bl	8002ac8 <HAL_GetTick>
 8008748:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800874a:	e008      	b.n	800875e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800874c:	f7fa f9bc 	bl	8002ac8 <HAL_GetTick>
 8008750:	4602      	mov	r2, r0
 8008752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	2b02      	cmp	r3, #2
 8008758:	d901      	bls.n	800875e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800875a:	2303      	movs	r3, #3
 800875c:	e10e      	b.n	800897c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800875e:	4b39      	ldr	r3, [pc, #228]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1f0      	bne.n	800874c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800876a:	4b36      	ldr	r3, [pc, #216]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 800876c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800876e:	4b37      	ldr	r3, [pc, #220]	@ (800884c <HAL_RCC_OscConfig+0x774>)
 8008770:	4013      	ands	r3, r2
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800877a:	0112      	lsls	r2, r2, #4
 800877c:	430a      	orrs	r2, r1
 800877e:	4931      	ldr	r1, [pc, #196]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 8008780:	4313      	orrs	r3, r2
 8008782:	628b      	str	r3, [r1, #40]	@ 0x28
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008788:	3b01      	subs	r3, #1
 800878a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008792:	3b01      	subs	r3, #1
 8008794:	025b      	lsls	r3, r3, #9
 8008796:	b29b      	uxth	r3, r3
 8008798:	431a      	orrs	r2, r3
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800879e:	3b01      	subs	r3, #1
 80087a0:	041b      	lsls	r3, r3, #16
 80087a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80087a6:	431a      	orrs	r2, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087ac:	3b01      	subs	r3, #1
 80087ae:	061b      	lsls	r3, r3, #24
 80087b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80087b4:	4923      	ldr	r1, [pc, #140]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 80087b6:	4313      	orrs	r3, r2
 80087b8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80087ba:	4b22      	ldr	r3, [pc, #136]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 80087bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087be:	4a21      	ldr	r2, [pc, #132]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 80087c0:	f023 0301 	bic.w	r3, r3, #1
 80087c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80087c6:	4b1f      	ldr	r3, [pc, #124]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 80087c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087ca:	4b21      	ldr	r3, [pc, #132]	@ (8008850 <HAL_RCC_OscConfig+0x778>)
 80087cc:	4013      	ands	r3, r2
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80087d2:	00d2      	lsls	r2, r2, #3
 80087d4:	491b      	ldr	r1, [pc, #108]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 80087d6:	4313      	orrs	r3, r2
 80087d8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80087da:	4b1a      	ldr	r3, [pc, #104]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 80087dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087de:	f023 020c 	bic.w	r2, r3, #12
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087e6:	4917      	ldr	r1, [pc, #92]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 80087e8:	4313      	orrs	r3, r2
 80087ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80087ec:	4b15      	ldr	r3, [pc, #84]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 80087ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087f0:	f023 0202 	bic.w	r2, r3, #2
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087f8:	4912      	ldr	r1, [pc, #72]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 80087fa:	4313      	orrs	r3, r2
 80087fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80087fe:	4b11      	ldr	r3, [pc, #68]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 8008800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008802:	4a10      	ldr	r2, [pc, #64]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 8008804:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008808:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800880a:	4b0e      	ldr	r3, [pc, #56]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 800880c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800880e:	4a0d      	ldr	r2, [pc, #52]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 8008810:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008814:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008816:	4b0b      	ldr	r3, [pc, #44]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 8008818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800881a:	4a0a      	ldr	r2, [pc, #40]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 800881c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008820:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008822:	4b08      	ldr	r3, [pc, #32]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 8008824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008826:	4a07      	ldr	r2, [pc, #28]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 8008828:	f043 0301 	orr.w	r3, r3, #1
 800882c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800882e:	4b05      	ldr	r3, [pc, #20]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a04      	ldr	r2, [pc, #16]	@ (8008844 <HAL_RCC_OscConfig+0x76c>)
 8008834:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008838:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800883a:	f7fa f945 	bl	8002ac8 <HAL_GetTick>
 800883e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008840:	e011      	b.n	8008866 <HAL_RCC_OscConfig+0x78e>
 8008842:	bf00      	nop
 8008844:	58024400 	.word	0x58024400
 8008848:	58024800 	.word	0x58024800
 800884c:	fffffc0c 	.word	0xfffffc0c
 8008850:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008854:	f7fa f938 	bl	8002ac8 <HAL_GetTick>
 8008858:	4602      	mov	r2, r0
 800885a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800885c:	1ad3      	subs	r3, r2, r3
 800885e:	2b02      	cmp	r3, #2
 8008860:	d901      	bls.n	8008866 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008862:	2303      	movs	r3, #3
 8008864:	e08a      	b.n	800897c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008866:	4b47      	ldr	r3, [pc, #284]	@ (8008984 <HAL_RCC_OscConfig+0x8ac>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800886e:	2b00      	cmp	r3, #0
 8008870:	d0f0      	beq.n	8008854 <HAL_RCC_OscConfig+0x77c>
 8008872:	e082      	b.n	800897a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008874:	4b43      	ldr	r3, [pc, #268]	@ (8008984 <HAL_RCC_OscConfig+0x8ac>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a42      	ldr	r2, [pc, #264]	@ (8008984 <HAL_RCC_OscConfig+0x8ac>)
 800887a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800887e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008880:	f7fa f922 	bl	8002ac8 <HAL_GetTick>
 8008884:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008886:	e008      	b.n	800889a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008888:	f7fa f91e 	bl	8002ac8 <HAL_GetTick>
 800888c:	4602      	mov	r2, r0
 800888e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	2b02      	cmp	r3, #2
 8008894:	d901      	bls.n	800889a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008896:	2303      	movs	r3, #3
 8008898:	e070      	b.n	800897c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800889a:	4b3a      	ldr	r3, [pc, #232]	@ (8008984 <HAL_RCC_OscConfig+0x8ac>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d1f0      	bne.n	8008888 <HAL_RCC_OscConfig+0x7b0>
 80088a6:	e068      	b.n	800897a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80088a8:	4b36      	ldr	r3, [pc, #216]	@ (8008984 <HAL_RCC_OscConfig+0x8ac>)
 80088aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80088ae:	4b35      	ldr	r3, [pc, #212]	@ (8008984 <HAL_RCC_OscConfig+0x8ac>)
 80088b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088b2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d031      	beq.n	8008920 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	f003 0203 	and.w	r2, r3, #3
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d12a      	bne.n	8008920 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	091b      	lsrs	r3, r3, #4
 80088ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d122      	bne.n	8008920 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d11a      	bne.n	8008920 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	0a5b      	lsrs	r3, r3, #9
 80088ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088f6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d111      	bne.n	8008920 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	0c1b      	lsrs	r3, r3, #16
 8008900:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008908:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800890a:	429a      	cmp	r2, r3
 800890c:	d108      	bne.n	8008920 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	0e1b      	lsrs	r3, r3, #24
 8008912:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800891a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800891c:	429a      	cmp	r2, r3
 800891e:	d001      	beq.n	8008924 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	e02b      	b.n	800897c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008924:	4b17      	ldr	r3, [pc, #92]	@ (8008984 <HAL_RCC_OscConfig+0x8ac>)
 8008926:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008928:	08db      	lsrs	r3, r3, #3
 800892a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800892e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008934:	693a      	ldr	r2, [r7, #16]
 8008936:	429a      	cmp	r2, r3
 8008938:	d01f      	beq.n	800897a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800893a:	4b12      	ldr	r3, [pc, #72]	@ (8008984 <HAL_RCC_OscConfig+0x8ac>)
 800893c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800893e:	4a11      	ldr	r2, [pc, #68]	@ (8008984 <HAL_RCC_OscConfig+0x8ac>)
 8008940:	f023 0301 	bic.w	r3, r3, #1
 8008944:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008946:	f7fa f8bf 	bl	8002ac8 <HAL_GetTick>
 800894a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800894c:	bf00      	nop
 800894e:	f7fa f8bb 	bl	8002ac8 <HAL_GetTick>
 8008952:	4602      	mov	r2, r0
 8008954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008956:	4293      	cmp	r3, r2
 8008958:	d0f9      	beq.n	800894e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800895a:	4b0a      	ldr	r3, [pc, #40]	@ (8008984 <HAL_RCC_OscConfig+0x8ac>)
 800895c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800895e:	4b0a      	ldr	r3, [pc, #40]	@ (8008988 <HAL_RCC_OscConfig+0x8b0>)
 8008960:	4013      	ands	r3, r2
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008966:	00d2      	lsls	r2, r2, #3
 8008968:	4906      	ldr	r1, [pc, #24]	@ (8008984 <HAL_RCC_OscConfig+0x8ac>)
 800896a:	4313      	orrs	r3, r2
 800896c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800896e:	4b05      	ldr	r3, [pc, #20]	@ (8008984 <HAL_RCC_OscConfig+0x8ac>)
 8008970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008972:	4a04      	ldr	r2, [pc, #16]	@ (8008984 <HAL_RCC_OscConfig+0x8ac>)
 8008974:	f043 0301 	orr.w	r3, r3, #1
 8008978:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800897a:	2300      	movs	r3, #0
}
 800897c:	4618      	mov	r0, r3
 800897e:	3730      	adds	r7, #48	@ 0x30
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}
 8008984:	58024400 	.word	0x58024400
 8008988:	ffff0007 	.word	0xffff0007

0800898c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b086      	sub	sp, #24
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d101      	bne.n	80089a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	e19c      	b.n	8008cda <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80089a0:	4b8a      	ldr	r3, [pc, #552]	@ (8008bcc <HAL_RCC_ClockConfig+0x240>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 030f 	and.w	r3, r3, #15
 80089a8:	683a      	ldr	r2, [r7, #0]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d910      	bls.n	80089d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089ae:	4b87      	ldr	r3, [pc, #540]	@ (8008bcc <HAL_RCC_ClockConfig+0x240>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f023 020f 	bic.w	r2, r3, #15
 80089b6:	4985      	ldr	r1, [pc, #532]	@ (8008bcc <HAL_RCC_ClockConfig+0x240>)
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80089be:	4b83      	ldr	r3, [pc, #524]	@ (8008bcc <HAL_RCC_ClockConfig+0x240>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f003 030f 	and.w	r3, r3, #15
 80089c6:	683a      	ldr	r2, [r7, #0]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d001      	beq.n	80089d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	e184      	b.n	8008cda <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f003 0304 	and.w	r3, r3, #4
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d010      	beq.n	80089fe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	691a      	ldr	r2, [r3, #16]
 80089e0:	4b7b      	ldr	r3, [pc, #492]	@ (8008bd0 <HAL_RCC_ClockConfig+0x244>)
 80089e2:	699b      	ldr	r3, [r3, #24]
 80089e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d908      	bls.n	80089fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80089ec:	4b78      	ldr	r3, [pc, #480]	@ (8008bd0 <HAL_RCC_ClockConfig+0x244>)
 80089ee:	699b      	ldr	r3, [r3, #24]
 80089f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	691b      	ldr	r3, [r3, #16]
 80089f8:	4975      	ldr	r1, [pc, #468]	@ (8008bd0 <HAL_RCC_ClockConfig+0x244>)
 80089fa:	4313      	orrs	r3, r2
 80089fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 0308 	and.w	r3, r3, #8
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d010      	beq.n	8008a2c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	695a      	ldr	r2, [r3, #20]
 8008a0e:	4b70      	ldr	r3, [pc, #448]	@ (8008bd0 <HAL_RCC_ClockConfig+0x244>)
 8008a10:	69db      	ldr	r3, [r3, #28]
 8008a12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d908      	bls.n	8008a2c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008a1a:	4b6d      	ldr	r3, [pc, #436]	@ (8008bd0 <HAL_RCC_ClockConfig+0x244>)
 8008a1c:	69db      	ldr	r3, [r3, #28]
 8008a1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	695b      	ldr	r3, [r3, #20]
 8008a26:	496a      	ldr	r1, [pc, #424]	@ (8008bd0 <HAL_RCC_ClockConfig+0x244>)
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f003 0310 	and.w	r3, r3, #16
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d010      	beq.n	8008a5a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	699a      	ldr	r2, [r3, #24]
 8008a3c:	4b64      	ldr	r3, [pc, #400]	@ (8008bd0 <HAL_RCC_ClockConfig+0x244>)
 8008a3e:	69db      	ldr	r3, [r3, #28]
 8008a40:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d908      	bls.n	8008a5a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008a48:	4b61      	ldr	r3, [pc, #388]	@ (8008bd0 <HAL_RCC_ClockConfig+0x244>)
 8008a4a:	69db      	ldr	r3, [r3, #28]
 8008a4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	699b      	ldr	r3, [r3, #24]
 8008a54:	495e      	ldr	r1, [pc, #376]	@ (8008bd0 <HAL_RCC_ClockConfig+0x244>)
 8008a56:	4313      	orrs	r3, r2
 8008a58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f003 0320 	and.w	r3, r3, #32
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d010      	beq.n	8008a88 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	69da      	ldr	r2, [r3, #28]
 8008a6a:	4b59      	ldr	r3, [pc, #356]	@ (8008bd0 <HAL_RCC_ClockConfig+0x244>)
 8008a6c:	6a1b      	ldr	r3, [r3, #32]
 8008a6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d908      	bls.n	8008a88 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008a76:	4b56      	ldr	r3, [pc, #344]	@ (8008bd0 <HAL_RCC_ClockConfig+0x244>)
 8008a78:	6a1b      	ldr	r3, [r3, #32]
 8008a7a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	69db      	ldr	r3, [r3, #28]
 8008a82:	4953      	ldr	r1, [pc, #332]	@ (8008bd0 <HAL_RCC_ClockConfig+0x244>)
 8008a84:	4313      	orrs	r3, r2
 8008a86:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 0302 	and.w	r3, r3, #2
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d010      	beq.n	8008ab6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	68da      	ldr	r2, [r3, #12]
 8008a98:	4b4d      	ldr	r3, [pc, #308]	@ (8008bd0 <HAL_RCC_ClockConfig+0x244>)
 8008a9a:	699b      	ldr	r3, [r3, #24]
 8008a9c:	f003 030f 	and.w	r3, r3, #15
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d908      	bls.n	8008ab6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008aa4:	4b4a      	ldr	r3, [pc, #296]	@ (8008bd0 <HAL_RCC_ClockConfig+0x244>)
 8008aa6:	699b      	ldr	r3, [r3, #24]
 8008aa8:	f023 020f 	bic.w	r2, r3, #15
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	4947      	ldr	r1, [pc, #284]	@ (8008bd0 <HAL_RCC_ClockConfig+0x244>)
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 0301 	and.w	r3, r3, #1
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d055      	beq.n	8008b6e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008ac2:	4b43      	ldr	r3, [pc, #268]	@ (8008bd0 <HAL_RCC_ClockConfig+0x244>)
 8008ac4:	699b      	ldr	r3, [r3, #24]
 8008ac6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	4940      	ldr	r1, [pc, #256]	@ (8008bd0 <HAL_RCC_ClockConfig+0x244>)
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	d107      	bne.n	8008aec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008adc:	4b3c      	ldr	r3, [pc, #240]	@ (8008bd0 <HAL_RCC_ClockConfig+0x244>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d121      	bne.n	8008b2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	e0f6      	b.n	8008cda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	2b03      	cmp	r3, #3
 8008af2:	d107      	bne.n	8008b04 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008af4:	4b36      	ldr	r3, [pc, #216]	@ (8008bd0 <HAL_RCC_ClockConfig+0x244>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d115      	bne.n	8008b2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	e0ea      	b.n	8008cda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d107      	bne.n	8008b1c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008b0c:	4b30      	ldr	r3, [pc, #192]	@ (8008bd0 <HAL_RCC_ClockConfig+0x244>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d109      	bne.n	8008b2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e0de      	b.n	8008cda <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008b1c:	4b2c      	ldr	r3, [pc, #176]	@ (8008bd0 <HAL_RCC_ClockConfig+0x244>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f003 0304 	and.w	r3, r3, #4
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d101      	bne.n	8008b2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e0d6      	b.n	8008cda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008b2c:	4b28      	ldr	r3, [pc, #160]	@ (8008bd0 <HAL_RCC_ClockConfig+0x244>)
 8008b2e:	691b      	ldr	r3, [r3, #16]
 8008b30:	f023 0207 	bic.w	r2, r3, #7
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	4925      	ldr	r1, [pc, #148]	@ (8008bd0 <HAL_RCC_ClockConfig+0x244>)
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b3e:	f7f9 ffc3 	bl	8002ac8 <HAL_GetTick>
 8008b42:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b44:	e00a      	b.n	8008b5c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b46:	f7f9 ffbf 	bl	8002ac8 <HAL_GetTick>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	1ad3      	subs	r3, r2, r3
 8008b50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d901      	bls.n	8008b5c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008b58:	2303      	movs	r3, #3
 8008b5a:	e0be      	b.n	8008cda <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b5c:	4b1c      	ldr	r3, [pc, #112]	@ (8008bd0 <HAL_RCC_ClockConfig+0x244>)
 8008b5e:	691b      	ldr	r3, [r3, #16]
 8008b60:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	00db      	lsls	r3, r3, #3
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d1eb      	bne.n	8008b46 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f003 0302 	and.w	r3, r3, #2
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d010      	beq.n	8008b9c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	68da      	ldr	r2, [r3, #12]
 8008b7e:	4b14      	ldr	r3, [pc, #80]	@ (8008bd0 <HAL_RCC_ClockConfig+0x244>)
 8008b80:	699b      	ldr	r3, [r3, #24]
 8008b82:	f003 030f 	and.w	r3, r3, #15
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d208      	bcs.n	8008b9c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b8a:	4b11      	ldr	r3, [pc, #68]	@ (8008bd0 <HAL_RCC_ClockConfig+0x244>)
 8008b8c:	699b      	ldr	r3, [r3, #24]
 8008b8e:	f023 020f 	bic.w	r2, r3, #15
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	490e      	ldr	r1, [pc, #56]	@ (8008bd0 <HAL_RCC_ClockConfig+0x244>)
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8008bcc <HAL_RCC_ClockConfig+0x240>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f003 030f 	and.w	r3, r3, #15
 8008ba4:	683a      	ldr	r2, [r7, #0]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d214      	bcs.n	8008bd4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008baa:	4b08      	ldr	r3, [pc, #32]	@ (8008bcc <HAL_RCC_ClockConfig+0x240>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f023 020f 	bic.w	r2, r3, #15
 8008bb2:	4906      	ldr	r1, [pc, #24]	@ (8008bcc <HAL_RCC_ClockConfig+0x240>)
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bba:	4b04      	ldr	r3, [pc, #16]	@ (8008bcc <HAL_RCC_ClockConfig+0x240>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f003 030f 	and.w	r3, r3, #15
 8008bc2:	683a      	ldr	r2, [r7, #0]
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d005      	beq.n	8008bd4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	e086      	b.n	8008cda <HAL_RCC_ClockConfig+0x34e>
 8008bcc:	52002000 	.word	0x52002000
 8008bd0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f003 0304 	and.w	r3, r3, #4
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d010      	beq.n	8008c02 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	691a      	ldr	r2, [r3, #16]
 8008be4:	4b3f      	ldr	r3, [pc, #252]	@ (8008ce4 <HAL_RCC_ClockConfig+0x358>)
 8008be6:	699b      	ldr	r3, [r3, #24]
 8008be8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d208      	bcs.n	8008c02 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008bf0:	4b3c      	ldr	r3, [pc, #240]	@ (8008ce4 <HAL_RCC_ClockConfig+0x358>)
 8008bf2:	699b      	ldr	r3, [r3, #24]
 8008bf4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	691b      	ldr	r3, [r3, #16]
 8008bfc:	4939      	ldr	r1, [pc, #228]	@ (8008ce4 <HAL_RCC_ClockConfig+0x358>)
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f003 0308 	and.w	r3, r3, #8
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d010      	beq.n	8008c30 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	695a      	ldr	r2, [r3, #20]
 8008c12:	4b34      	ldr	r3, [pc, #208]	@ (8008ce4 <HAL_RCC_ClockConfig+0x358>)
 8008c14:	69db      	ldr	r3, [r3, #28]
 8008c16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d208      	bcs.n	8008c30 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008c1e:	4b31      	ldr	r3, [pc, #196]	@ (8008ce4 <HAL_RCC_ClockConfig+0x358>)
 8008c20:	69db      	ldr	r3, [r3, #28]
 8008c22:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	695b      	ldr	r3, [r3, #20]
 8008c2a:	492e      	ldr	r1, [pc, #184]	@ (8008ce4 <HAL_RCC_ClockConfig+0x358>)
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f003 0310 	and.w	r3, r3, #16
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d010      	beq.n	8008c5e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	699a      	ldr	r2, [r3, #24]
 8008c40:	4b28      	ldr	r3, [pc, #160]	@ (8008ce4 <HAL_RCC_ClockConfig+0x358>)
 8008c42:	69db      	ldr	r3, [r3, #28]
 8008c44:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d208      	bcs.n	8008c5e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008c4c:	4b25      	ldr	r3, [pc, #148]	@ (8008ce4 <HAL_RCC_ClockConfig+0x358>)
 8008c4e:	69db      	ldr	r3, [r3, #28]
 8008c50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	699b      	ldr	r3, [r3, #24]
 8008c58:	4922      	ldr	r1, [pc, #136]	@ (8008ce4 <HAL_RCC_ClockConfig+0x358>)
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f003 0320 	and.w	r3, r3, #32
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d010      	beq.n	8008c8c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	69da      	ldr	r2, [r3, #28]
 8008c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8008ce4 <HAL_RCC_ClockConfig+0x358>)
 8008c70:	6a1b      	ldr	r3, [r3, #32]
 8008c72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d208      	bcs.n	8008c8c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008c7a:	4b1a      	ldr	r3, [pc, #104]	@ (8008ce4 <HAL_RCC_ClockConfig+0x358>)
 8008c7c:	6a1b      	ldr	r3, [r3, #32]
 8008c7e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	69db      	ldr	r3, [r3, #28]
 8008c86:	4917      	ldr	r1, [pc, #92]	@ (8008ce4 <HAL_RCC_ClockConfig+0x358>)
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008c8c:	f000 f834 	bl	8008cf8 <HAL_RCC_GetSysClockFreq>
 8008c90:	4602      	mov	r2, r0
 8008c92:	4b14      	ldr	r3, [pc, #80]	@ (8008ce4 <HAL_RCC_ClockConfig+0x358>)
 8008c94:	699b      	ldr	r3, [r3, #24]
 8008c96:	0a1b      	lsrs	r3, r3, #8
 8008c98:	f003 030f 	and.w	r3, r3, #15
 8008c9c:	4912      	ldr	r1, [pc, #72]	@ (8008ce8 <HAL_RCC_ClockConfig+0x35c>)
 8008c9e:	5ccb      	ldrb	r3, [r1, r3]
 8008ca0:	f003 031f 	and.w	r3, r3, #31
 8008ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ca8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008caa:	4b0e      	ldr	r3, [pc, #56]	@ (8008ce4 <HAL_RCC_ClockConfig+0x358>)
 8008cac:	699b      	ldr	r3, [r3, #24]
 8008cae:	f003 030f 	and.w	r3, r3, #15
 8008cb2:	4a0d      	ldr	r2, [pc, #52]	@ (8008ce8 <HAL_RCC_ClockConfig+0x35c>)
 8008cb4:	5cd3      	ldrb	r3, [r2, r3]
 8008cb6:	f003 031f 	and.w	r3, r3, #31
 8008cba:	693a      	ldr	r2, [r7, #16]
 8008cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8008cc0:	4a0a      	ldr	r2, [pc, #40]	@ (8008cec <HAL_RCC_ClockConfig+0x360>)
 8008cc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008cc4:	4a0a      	ldr	r2, [pc, #40]	@ (8008cf0 <HAL_RCC_ClockConfig+0x364>)
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008cca:	4b0a      	ldr	r3, [pc, #40]	@ (8008cf4 <HAL_RCC_ClockConfig+0x368>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f7f9 feb0 	bl	8002a34 <HAL_InitTick>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3718      	adds	r7, #24
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	58024400 	.word	0x58024400
 8008ce8:	08015084 	.word	0x08015084
 8008cec:	24000004 	.word	0x24000004
 8008cf0:	24000000 	.word	0x24000000
 8008cf4:	24000024 	.word	0x24000024

08008cf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b089      	sub	sp, #36	@ 0x24
 8008cfc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008cfe:	4bb3      	ldr	r3, [pc, #716]	@ (8008fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d00:	691b      	ldr	r3, [r3, #16]
 8008d02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d06:	2b18      	cmp	r3, #24
 8008d08:	f200 8155 	bhi.w	8008fb6 <HAL_RCC_GetSysClockFreq+0x2be>
 8008d0c:	a201      	add	r2, pc, #4	@ (adr r2, 8008d14 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d12:	bf00      	nop
 8008d14:	08008d79 	.word	0x08008d79
 8008d18:	08008fb7 	.word	0x08008fb7
 8008d1c:	08008fb7 	.word	0x08008fb7
 8008d20:	08008fb7 	.word	0x08008fb7
 8008d24:	08008fb7 	.word	0x08008fb7
 8008d28:	08008fb7 	.word	0x08008fb7
 8008d2c:	08008fb7 	.word	0x08008fb7
 8008d30:	08008fb7 	.word	0x08008fb7
 8008d34:	08008d9f 	.word	0x08008d9f
 8008d38:	08008fb7 	.word	0x08008fb7
 8008d3c:	08008fb7 	.word	0x08008fb7
 8008d40:	08008fb7 	.word	0x08008fb7
 8008d44:	08008fb7 	.word	0x08008fb7
 8008d48:	08008fb7 	.word	0x08008fb7
 8008d4c:	08008fb7 	.word	0x08008fb7
 8008d50:	08008fb7 	.word	0x08008fb7
 8008d54:	08008da5 	.word	0x08008da5
 8008d58:	08008fb7 	.word	0x08008fb7
 8008d5c:	08008fb7 	.word	0x08008fb7
 8008d60:	08008fb7 	.word	0x08008fb7
 8008d64:	08008fb7 	.word	0x08008fb7
 8008d68:	08008fb7 	.word	0x08008fb7
 8008d6c:	08008fb7 	.word	0x08008fb7
 8008d70:	08008fb7 	.word	0x08008fb7
 8008d74:	08008dab 	.word	0x08008dab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d78:	4b94      	ldr	r3, [pc, #592]	@ (8008fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f003 0320 	and.w	r3, r3, #32
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d009      	beq.n	8008d98 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d84:	4b91      	ldr	r3, [pc, #580]	@ (8008fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	08db      	lsrs	r3, r3, #3
 8008d8a:	f003 0303 	and.w	r3, r3, #3
 8008d8e:	4a90      	ldr	r2, [pc, #576]	@ (8008fd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008d90:	fa22 f303 	lsr.w	r3, r2, r3
 8008d94:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008d96:	e111      	b.n	8008fbc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008d98:	4b8d      	ldr	r3, [pc, #564]	@ (8008fd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008d9a:	61bb      	str	r3, [r7, #24]
      break;
 8008d9c:	e10e      	b.n	8008fbc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008d9e:	4b8d      	ldr	r3, [pc, #564]	@ (8008fd4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008da0:	61bb      	str	r3, [r7, #24]
      break;
 8008da2:	e10b      	b.n	8008fbc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008da4:	4b8c      	ldr	r3, [pc, #560]	@ (8008fd8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008da6:	61bb      	str	r3, [r7, #24]
      break;
 8008da8:	e108      	b.n	8008fbc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008daa:	4b88      	ldr	r3, [pc, #544]	@ (8008fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dae:	f003 0303 	and.w	r3, r3, #3
 8008db2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008db4:	4b85      	ldr	r3, [pc, #532]	@ (8008fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008db8:	091b      	lsrs	r3, r3, #4
 8008dba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008dbe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008dc0:	4b82      	ldr	r3, [pc, #520]	@ (8008fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dc4:	f003 0301 	and.w	r3, r3, #1
 8008dc8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008dca:	4b80      	ldr	r3, [pc, #512]	@ (8008fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dce:	08db      	lsrs	r3, r3, #3
 8008dd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008dd4:	68fa      	ldr	r2, [r7, #12]
 8008dd6:	fb02 f303 	mul.w	r3, r2, r3
 8008dda:	ee07 3a90 	vmov	s15, r3
 8008dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008de2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	f000 80e1 	beq.w	8008fb0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	2b02      	cmp	r3, #2
 8008df2:	f000 8083 	beq.w	8008efc <HAL_RCC_GetSysClockFreq+0x204>
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	f200 80a1 	bhi.w	8008f40 <HAL_RCC_GetSysClockFreq+0x248>
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d003      	beq.n	8008e0c <HAL_RCC_GetSysClockFreq+0x114>
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d056      	beq.n	8008eb8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008e0a:	e099      	b.n	8008f40 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e0c:	4b6f      	ldr	r3, [pc, #444]	@ (8008fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 0320 	and.w	r3, r3, #32
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d02d      	beq.n	8008e74 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e18:	4b6c      	ldr	r3, [pc, #432]	@ (8008fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	08db      	lsrs	r3, r3, #3
 8008e1e:	f003 0303 	and.w	r3, r3, #3
 8008e22:	4a6b      	ldr	r2, [pc, #428]	@ (8008fd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008e24:	fa22 f303 	lsr.w	r3, r2, r3
 8008e28:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	ee07 3a90 	vmov	s15, r3
 8008e30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	ee07 3a90 	vmov	s15, r3
 8008e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e42:	4b62      	ldr	r3, [pc, #392]	@ (8008fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e4a:	ee07 3a90 	vmov	s15, r3
 8008e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e52:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e56:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008fdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e6e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008e72:	e087      	b.n	8008f84 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	ee07 3a90 	vmov	s15, r3
 8008e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e7e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008fe0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e86:	4b51      	ldr	r3, [pc, #324]	@ (8008fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e8e:	ee07 3a90 	vmov	s15, r3
 8008e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e96:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e9a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008fdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ea6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008eb6:	e065      	b.n	8008f84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	ee07 3a90 	vmov	s15, r3
 8008ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ec2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008fe4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eca:	4b40      	ldr	r3, [pc, #256]	@ (8008fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ed2:	ee07 3a90 	vmov	s15, r3
 8008ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eda:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ede:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008fdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008eea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ef6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008efa:	e043      	b.n	8008f84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	ee07 3a90 	vmov	s15, r3
 8008f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f06:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008fe8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f0e:	4b2f      	ldr	r3, [pc, #188]	@ (8008fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f16:	ee07 3a90 	vmov	s15, r3
 8008f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f22:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008fdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008f3e:	e021      	b.n	8008f84 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	ee07 3a90 	vmov	s15, r3
 8008f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f4a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008fe4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f52:	4b1e      	ldr	r3, [pc, #120]	@ (8008fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f5a:	ee07 3a90 	vmov	s15, r3
 8008f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f62:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f66:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008fdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008f82:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008f84:	4b11      	ldr	r3, [pc, #68]	@ (8008fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f88:	0a5b      	lsrs	r3, r3, #9
 8008f8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f8e:	3301      	adds	r3, #1
 8008f90:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	ee07 3a90 	vmov	s15, r3
 8008f98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008f9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fa8:	ee17 3a90 	vmov	r3, s15
 8008fac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008fae:	e005      	b.n	8008fbc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	61bb      	str	r3, [r7, #24]
      break;
 8008fb4:	e002      	b.n	8008fbc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008fb6:	4b07      	ldr	r3, [pc, #28]	@ (8008fd4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008fb8:	61bb      	str	r3, [r7, #24]
      break;
 8008fba:	bf00      	nop
  }

  return sysclockfreq;
 8008fbc:	69bb      	ldr	r3, [r7, #24]
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3724      	adds	r7, #36	@ 0x24
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop
 8008fcc:	58024400 	.word	0x58024400
 8008fd0:	03d09000 	.word	0x03d09000
 8008fd4:	003d0900 	.word	0x003d0900
 8008fd8:	017d7840 	.word	0x017d7840
 8008fdc:	46000000 	.word	0x46000000
 8008fe0:	4c742400 	.word	0x4c742400
 8008fe4:	4a742400 	.word	0x4a742400
 8008fe8:	4bbebc20 	.word	0x4bbebc20

08008fec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b082      	sub	sp, #8
 8008ff0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008ff2:	f7ff fe81 	bl	8008cf8 <HAL_RCC_GetSysClockFreq>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	4b10      	ldr	r3, [pc, #64]	@ (800903c <HAL_RCC_GetHCLKFreq+0x50>)
 8008ffa:	699b      	ldr	r3, [r3, #24]
 8008ffc:	0a1b      	lsrs	r3, r3, #8
 8008ffe:	f003 030f 	and.w	r3, r3, #15
 8009002:	490f      	ldr	r1, [pc, #60]	@ (8009040 <HAL_RCC_GetHCLKFreq+0x54>)
 8009004:	5ccb      	ldrb	r3, [r1, r3]
 8009006:	f003 031f 	and.w	r3, r3, #31
 800900a:	fa22 f303 	lsr.w	r3, r2, r3
 800900e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009010:	4b0a      	ldr	r3, [pc, #40]	@ (800903c <HAL_RCC_GetHCLKFreq+0x50>)
 8009012:	699b      	ldr	r3, [r3, #24]
 8009014:	f003 030f 	and.w	r3, r3, #15
 8009018:	4a09      	ldr	r2, [pc, #36]	@ (8009040 <HAL_RCC_GetHCLKFreq+0x54>)
 800901a:	5cd3      	ldrb	r3, [r2, r3]
 800901c:	f003 031f 	and.w	r3, r3, #31
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	fa22 f303 	lsr.w	r3, r2, r3
 8009026:	4a07      	ldr	r2, [pc, #28]	@ (8009044 <HAL_RCC_GetHCLKFreq+0x58>)
 8009028:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800902a:	4a07      	ldr	r2, [pc, #28]	@ (8009048 <HAL_RCC_GetHCLKFreq+0x5c>)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009030:	4b04      	ldr	r3, [pc, #16]	@ (8009044 <HAL_RCC_GetHCLKFreq+0x58>)
 8009032:	681b      	ldr	r3, [r3, #0]
}
 8009034:	4618      	mov	r0, r3
 8009036:	3708      	adds	r7, #8
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}
 800903c:	58024400 	.word	0x58024400
 8009040:	08015084 	.word	0x08015084
 8009044:	24000004 	.word	0x24000004
 8009048:	24000000 	.word	0x24000000

0800904c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009050:	f7ff ffcc 	bl	8008fec <HAL_RCC_GetHCLKFreq>
 8009054:	4602      	mov	r2, r0
 8009056:	4b06      	ldr	r3, [pc, #24]	@ (8009070 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009058:	69db      	ldr	r3, [r3, #28]
 800905a:	091b      	lsrs	r3, r3, #4
 800905c:	f003 0307 	and.w	r3, r3, #7
 8009060:	4904      	ldr	r1, [pc, #16]	@ (8009074 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009062:	5ccb      	ldrb	r3, [r1, r3]
 8009064:	f003 031f 	and.w	r3, r3, #31
 8009068:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800906c:	4618      	mov	r0, r3
 800906e:	bd80      	pop	{r7, pc}
 8009070:	58024400 	.word	0x58024400
 8009074:	08015084 	.word	0x08015084

08009078 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800907c:	f7ff ffb6 	bl	8008fec <HAL_RCC_GetHCLKFreq>
 8009080:	4602      	mov	r2, r0
 8009082:	4b06      	ldr	r3, [pc, #24]	@ (800909c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009084:	69db      	ldr	r3, [r3, #28]
 8009086:	0a1b      	lsrs	r3, r3, #8
 8009088:	f003 0307 	and.w	r3, r3, #7
 800908c:	4904      	ldr	r1, [pc, #16]	@ (80090a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800908e:	5ccb      	ldrb	r3, [r1, r3]
 8009090:	f003 031f 	and.w	r3, r3, #31
 8009094:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009098:	4618      	mov	r0, r3
 800909a:	bd80      	pop	{r7, pc}
 800909c:	58024400 	.word	0x58024400
 80090a0:	08015084 	.word	0x08015084

080090a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80090a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80090a8:	b0ca      	sub	sp, #296	@ 0x128
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80090b0:	2300      	movs	r3, #0
 80090b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80090b6:	2300      	movs	r3, #0
 80090b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80090bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80090c8:	2500      	movs	r5, #0
 80090ca:	ea54 0305 	orrs.w	r3, r4, r5
 80090ce:	d049      	beq.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80090d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80090d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80090da:	d02f      	beq.n	800913c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80090dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80090e0:	d828      	bhi.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80090e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80090e6:	d01a      	beq.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80090e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80090ec:	d822      	bhi.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d003      	beq.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80090f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80090f6:	d007      	beq.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80090f8:	e01c      	b.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090fa:	4bb8      	ldr	r3, [pc, #736]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090fe:	4ab7      	ldr	r2, [pc, #732]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009100:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009104:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009106:	e01a      	b.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800910c:	3308      	adds	r3, #8
 800910e:	2102      	movs	r1, #2
 8009110:	4618      	mov	r0, r3
 8009112:	f002 fb61 	bl	800b7d8 <RCCEx_PLL2_Config>
 8009116:	4603      	mov	r3, r0
 8009118:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800911c:	e00f      	b.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800911e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009122:	3328      	adds	r3, #40	@ 0x28
 8009124:	2102      	movs	r1, #2
 8009126:	4618      	mov	r0, r3
 8009128:	f002 fc08 	bl	800b93c <RCCEx_PLL3_Config>
 800912c:	4603      	mov	r3, r0
 800912e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009132:	e004      	b.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009134:	2301      	movs	r3, #1
 8009136:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800913a:	e000      	b.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800913c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800913e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009142:	2b00      	cmp	r3, #0
 8009144:	d10a      	bne.n	800915c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009146:	4ba5      	ldr	r3, [pc, #660]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009148:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800914a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800914e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009152:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009154:	4aa1      	ldr	r2, [pc, #644]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009156:	430b      	orrs	r3, r1
 8009158:	6513      	str	r3, [r2, #80]	@ 0x50
 800915a:	e003      	b.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800915c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009160:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009170:	f04f 0900 	mov.w	r9, #0
 8009174:	ea58 0309 	orrs.w	r3, r8, r9
 8009178:	d047      	beq.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800917a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800917e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009180:	2b04      	cmp	r3, #4
 8009182:	d82a      	bhi.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009184:	a201      	add	r2, pc, #4	@ (adr r2, 800918c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800918a:	bf00      	nop
 800918c:	080091a1 	.word	0x080091a1
 8009190:	080091af 	.word	0x080091af
 8009194:	080091c5 	.word	0x080091c5
 8009198:	080091e3 	.word	0x080091e3
 800919c:	080091e3 	.word	0x080091e3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091a0:	4b8e      	ldr	r3, [pc, #568]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80091a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091a4:	4a8d      	ldr	r2, [pc, #564]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80091a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80091aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80091ac:	e01a      	b.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80091ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091b2:	3308      	adds	r3, #8
 80091b4:	2100      	movs	r1, #0
 80091b6:	4618      	mov	r0, r3
 80091b8:	f002 fb0e 	bl	800b7d8 <RCCEx_PLL2_Config>
 80091bc:	4603      	mov	r3, r0
 80091be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80091c2:	e00f      	b.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80091c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091c8:	3328      	adds	r3, #40	@ 0x28
 80091ca:	2100      	movs	r1, #0
 80091cc:	4618      	mov	r0, r3
 80091ce:	f002 fbb5 	bl	800b93c <RCCEx_PLL3_Config>
 80091d2:	4603      	mov	r3, r0
 80091d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80091d8:	e004      	b.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091da:	2301      	movs	r3, #1
 80091dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80091e0:	e000      	b.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80091e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d10a      	bne.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80091ec:	4b7b      	ldr	r3, [pc, #492]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80091ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091f0:	f023 0107 	bic.w	r1, r3, #7
 80091f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091fa:	4a78      	ldr	r2, [pc, #480]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80091fc:	430b      	orrs	r3, r1
 80091fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8009200:	e003      	b.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009202:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009206:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800920a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800920e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009212:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8009216:	f04f 0b00 	mov.w	fp, #0
 800921a:	ea5a 030b 	orrs.w	r3, sl, fp
 800921e:	d04c      	beq.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009226:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800922a:	d030      	beq.n	800928e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800922c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009230:	d829      	bhi.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009232:	2bc0      	cmp	r3, #192	@ 0xc0
 8009234:	d02d      	beq.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009236:	2bc0      	cmp	r3, #192	@ 0xc0
 8009238:	d825      	bhi.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800923a:	2b80      	cmp	r3, #128	@ 0x80
 800923c:	d018      	beq.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800923e:	2b80      	cmp	r3, #128	@ 0x80
 8009240:	d821      	bhi.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009242:	2b00      	cmp	r3, #0
 8009244:	d002      	beq.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009246:	2b40      	cmp	r3, #64	@ 0x40
 8009248:	d007      	beq.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800924a:	e01c      	b.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800924c:	4b63      	ldr	r3, [pc, #396]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800924e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009250:	4a62      	ldr	r2, [pc, #392]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009252:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009256:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009258:	e01c      	b.n	8009294 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800925a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800925e:	3308      	adds	r3, #8
 8009260:	2100      	movs	r1, #0
 8009262:	4618      	mov	r0, r3
 8009264:	f002 fab8 	bl	800b7d8 <RCCEx_PLL2_Config>
 8009268:	4603      	mov	r3, r0
 800926a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800926e:	e011      	b.n	8009294 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009274:	3328      	adds	r3, #40	@ 0x28
 8009276:	2100      	movs	r1, #0
 8009278:	4618      	mov	r0, r3
 800927a:	f002 fb5f 	bl	800b93c <RCCEx_PLL3_Config>
 800927e:	4603      	mov	r3, r0
 8009280:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009284:	e006      	b.n	8009294 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009286:	2301      	movs	r3, #1
 8009288:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800928c:	e002      	b.n	8009294 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800928e:	bf00      	nop
 8009290:	e000      	b.n	8009294 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009292:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009294:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009298:	2b00      	cmp	r3, #0
 800929a:	d10a      	bne.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800929c:	4b4f      	ldr	r3, [pc, #316]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800929e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092a0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80092a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092aa:	4a4c      	ldr	r2, [pc, #304]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80092ac:	430b      	orrs	r3, r1
 80092ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80092b0:	e003      	b.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80092ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80092c6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80092ca:	2300      	movs	r3, #0
 80092cc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80092d0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80092d4:	460b      	mov	r3, r1
 80092d6:	4313      	orrs	r3, r2
 80092d8:	d053      	beq.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80092da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80092e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80092e6:	d035      	beq.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80092e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80092ec:	d82e      	bhi.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80092ee:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80092f2:	d031      	beq.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80092f4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80092f8:	d828      	bhi.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80092fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80092fe:	d01a      	beq.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009300:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009304:	d822      	bhi.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009306:	2b00      	cmp	r3, #0
 8009308:	d003      	beq.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800930a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800930e:	d007      	beq.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009310:	e01c      	b.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009312:	4b32      	ldr	r3, [pc, #200]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009316:	4a31      	ldr	r2, [pc, #196]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009318:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800931c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800931e:	e01c      	b.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009324:	3308      	adds	r3, #8
 8009326:	2100      	movs	r1, #0
 8009328:	4618      	mov	r0, r3
 800932a:	f002 fa55 	bl	800b7d8 <RCCEx_PLL2_Config>
 800932e:	4603      	mov	r3, r0
 8009330:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009334:	e011      	b.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800933a:	3328      	adds	r3, #40	@ 0x28
 800933c:	2100      	movs	r1, #0
 800933e:	4618      	mov	r0, r3
 8009340:	f002 fafc 	bl	800b93c <RCCEx_PLL3_Config>
 8009344:	4603      	mov	r3, r0
 8009346:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800934a:	e006      	b.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800934c:	2301      	movs	r3, #1
 800934e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009352:	e002      	b.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009354:	bf00      	nop
 8009356:	e000      	b.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009358:	bf00      	nop
    }

    if (ret == HAL_OK)
 800935a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800935e:	2b00      	cmp	r3, #0
 8009360:	d10b      	bne.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009362:	4b1e      	ldr	r3, [pc, #120]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009366:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800936a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800936e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009372:	4a1a      	ldr	r2, [pc, #104]	@ (80093dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009374:	430b      	orrs	r3, r1
 8009376:	6593      	str	r3, [r2, #88]	@ 0x58
 8009378:	e003      	b.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800937a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800937e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800938e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009392:	2300      	movs	r3, #0
 8009394:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009398:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800939c:	460b      	mov	r3, r1
 800939e:	4313      	orrs	r3, r2
 80093a0:	d056      	beq.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80093a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80093aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80093ae:	d038      	beq.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80093b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80093b4:	d831      	bhi.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80093b6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80093ba:	d034      	beq.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80093bc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80093c0:	d82b      	bhi.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80093c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80093c6:	d01d      	beq.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80093c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80093cc:	d825      	bhi.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d006      	beq.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80093d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80093d6:	d00a      	beq.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80093d8:	e01f      	b.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80093da:	bf00      	nop
 80093dc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093e0:	4ba2      	ldr	r3, [pc, #648]	@ (800966c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093e4:	4aa1      	ldr	r2, [pc, #644]	@ (800966c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80093ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80093ec:	e01c      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80093ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093f2:	3308      	adds	r3, #8
 80093f4:	2100      	movs	r1, #0
 80093f6:	4618      	mov	r0, r3
 80093f8:	f002 f9ee 	bl	800b7d8 <RCCEx_PLL2_Config>
 80093fc:	4603      	mov	r3, r0
 80093fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009402:	e011      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009408:	3328      	adds	r3, #40	@ 0x28
 800940a:	2100      	movs	r1, #0
 800940c:	4618      	mov	r0, r3
 800940e:	f002 fa95 	bl	800b93c <RCCEx_PLL3_Config>
 8009412:	4603      	mov	r3, r0
 8009414:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009418:	e006      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800941a:	2301      	movs	r3, #1
 800941c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009420:	e002      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009422:	bf00      	nop
 8009424:	e000      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009426:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009428:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800942c:	2b00      	cmp	r3, #0
 800942e:	d10b      	bne.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009430:	4b8e      	ldr	r3, [pc, #568]	@ (800966c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009434:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800943c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009440:	4a8a      	ldr	r2, [pc, #552]	@ (800966c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009442:	430b      	orrs	r3, r1
 8009444:	6593      	str	r3, [r2, #88]	@ 0x58
 8009446:	e003      	b.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009448:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800944c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009458:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800945c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009460:	2300      	movs	r3, #0
 8009462:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009466:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800946a:	460b      	mov	r3, r1
 800946c:	4313      	orrs	r3, r2
 800946e:	d03a      	beq.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009476:	2b30      	cmp	r3, #48	@ 0x30
 8009478:	d01f      	beq.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x416>
 800947a:	2b30      	cmp	r3, #48	@ 0x30
 800947c:	d819      	bhi.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800947e:	2b20      	cmp	r3, #32
 8009480:	d00c      	beq.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009482:	2b20      	cmp	r3, #32
 8009484:	d815      	bhi.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009486:	2b00      	cmp	r3, #0
 8009488:	d019      	beq.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800948a:	2b10      	cmp	r3, #16
 800948c:	d111      	bne.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800948e:	4b77      	ldr	r3, [pc, #476]	@ (800966c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009492:	4a76      	ldr	r2, [pc, #472]	@ (800966c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009494:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009498:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800949a:	e011      	b.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800949c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094a0:	3308      	adds	r3, #8
 80094a2:	2102      	movs	r1, #2
 80094a4:	4618      	mov	r0, r3
 80094a6:	f002 f997 	bl	800b7d8 <RCCEx_PLL2_Config>
 80094aa:	4603      	mov	r3, r0
 80094ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80094b0:	e006      	b.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80094b2:	2301      	movs	r3, #1
 80094b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80094b8:	e002      	b.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80094ba:	bf00      	nop
 80094bc:	e000      	b.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80094be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d10a      	bne.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80094c8:	4b68      	ldr	r3, [pc, #416]	@ (800966c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80094ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094cc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80094d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094d6:	4a65      	ldr	r2, [pc, #404]	@ (800966c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80094d8:	430b      	orrs	r3, r1
 80094da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80094dc:	e003      	b.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80094e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ee:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80094f2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80094f6:	2300      	movs	r3, #0
 80094f8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80094fc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009500:	460b      	mov	r3, r1
 8009502:	4313      	orrs	r3, r2
 8009504:	d051      	beq.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800950a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800950c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009510:	d035      	beq.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009512:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009516:	d82e      	bhi.n	8009576 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009518:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800951c:	d031      	beq.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800951e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009522:	d828      	bhi.n	8009576 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009524:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009528:	d01a      	beq.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800952a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800952e:	d822      	bhi.n	8009576 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009530:	2b00      	cmp	r3, #0
 8009532:	d003      	beq.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009534:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009538:	d007      	beq.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800953a:	e01c      	b.n	8009576 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800953c:	4b4b      	ldr	r3, [pc, #300]	@ (800966c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800953e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009540:	4a4a      	ldr	r2, [pc, #296]	@ (800966c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009542:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009546:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009548:	e01c      	b.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800954a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800954e:	3308      	adds	r3, #8
 8009550:	2100      	movs	r1, #0
 8009552:	4618      	mov	r0, r3
 8009554:	f002 f940 	bl	800b7d8 <RCCEx_PLL2_Config>
 8009558:	4603      	mov	r3, r0
 800955a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800955e:	e011      	b.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009564:	3328      	adds	r3, #40	@ 0x28
 8009566:	2100      	movs	r1, #0
 8009568:	4618      	mov	r0, r3
 800956a:	f002 f9e7 	bl	800b93c <RCCEx_PLL3_Config>
 800956e:	4603      	mov	r3, r0
 8009570:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009574:	e006      	b.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009576:	2301      	movs	r3, #1
 8009578:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800957c:	e002      	b.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800957e:	bf00      	nop
 8009580:	e000      	b.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009582:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009584:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009588:	2b00      	cmp	r3, #0
 800958a:	d10a      	bne.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800958c:	4b37      	ldr	r3, [pc, #220]	@ (800966c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800958e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009590:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800959a:	4a34      	ldr	r2, [pc, #208]	@ (800966c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800959c:	430b      	orrs	r3, r1
 800959e:	6513      	str	r3, [r2, #80]	@ 0x50
 80095a0:	e003      	b.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80095aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80095b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80095ba:	2300      	movs	r3, #0
 80095bc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80095c0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80095c4:	460b      	mov	r3, r1
 80095c6:	4313      	orrs	r3, r2
 80095c8:	d056      	beq.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80095ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80095d4:	d033      	beq.n	800963e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80095d6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80095da:	d82c      	bhi.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80095dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80095e0:	d02f      	beq.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80095e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80095e6:	d826      	bhi.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80095e8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80095ec:	d02b      	beq.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80095ee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80095f2:	d820      	bhi.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80095f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095f8:	d012      	beq.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80095fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095fe:	d81a      	bhi.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009600:	2b00      	cmp	r3, #0
 8009602:	d022      	beq.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009604:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009608:	d115      	bne.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800960a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800960e:	3308      	adds	r3, #8
 8009610:	2101      	movs	r1, #1
 8009612:	4618      	mov	r0, r3
 8009614:	f002 f8e0 	bl	800b7d8 <RCCEx_PLL2_Config>
 8009618:	4603      	mov	r3, r0
 800961a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800961e:	e015      	b.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009624:	3328      	adds	r3, #40	@ 0x28
 8009626:	2101      	movs	r1, #1
 8009628:	4618      	mov	r0, r3
 800962a:	f002 f987 	bl	800b93c <RCCEx_PLL3_Config>
 800962e:	4603      	mov	r3, r0
 8009630:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009634:	e00a      	b.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009636:	2301      	movs	r3, #1
 8009638:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800963c:	e006      	b.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800963e:	bf00      	nop
 8009640:	e004      	b.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009642:	bf00      	nop
 8009644:	e002      	b.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009646:	bf00      	nop
 8009648:	e000      	b.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800964a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800964c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009650:	2b00      	cmp	r3, #0
 8009652:	d10d      	bne.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009654:	4b05      	ldr	r3, [pc, #20]	@ (800966c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009656:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009658:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800965c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009660:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009662:	4a02      	ldr	r2, [pc, #8]	@ (800966c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009664:	430b      	orrs	r3, r1
 8009666:	6513      	str	r3, [r2, #80]	@ 0x50
 8009668:	e006      	b.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800966a:	bf00      	nop
 800966c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009670:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009674:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800967c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009680:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009684:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009688:	2300      	movs	r3, #0
 800968a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800968e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009692:	460b      	mov	r3, r1
 8009694:	4313      	orrs	r3, r2
 8009696:	d055      	beq.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800969c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80096a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80096a4:	d033      	beq.n	800970e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80096a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80096aa:	d82c      	bhi.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80096ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096b0:	d02f      	beq.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80096b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096b6:	d826      	bhi.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80096b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80096bc:	d02b      	beq.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80096be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80096c2:	d820      	bhi.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80096c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096c8:	d012      	beq.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80096ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096ce:	d81a      	bhi.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d022      	beq.n	800971a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80096d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096d8:	d115      	bne.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80096da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096de:	3308      	adds	r3, #8
 80096e0:	2101      	movs	r1, #1
 80096e2:	4618      	mov	r0, r3
 80096e4:	f002 f878 	bl	800b7d8 <RCCEx_PLL2_Config>
 80096e8:	4603      	mov	r3, r0
 80096ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80096ee:	e015      	b.n	800971c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80096f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096f4:	3328      	adds	r3, #40	@ 0x28
 80096f6:	2101      	movs	r1, #1
 80096f8:	4618      	mov	r0, r3
 80096fa:	f002 f91f 	bl	800b93c <RCCEx_PLL3_Config>
 80096fe:	4603      	mov	r3, r0
 8009700:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009704:	e00a      	b.n	800971c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009706:	2301      	movs	r3, #1
 8009708:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800970c:	e006      	b.n	800971c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800970e:	bf00      	nop
 8009710:	e004      	b.n	800971c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009712:	bf00      	nop
 8009714:	e002      	b.n	800971c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009716:	bf00      	nop
 8009718:	e000      	b.n	800971c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800971a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800971c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009720:	2b00      	cmp	r3, #0
 8009722:	d10b      	bne.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009724:	4ba3      	ldr	r3, [pc, #652]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009728:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800972c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009730:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009734:	4a9f      	ldr	r2, [pc, #636]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009736:	430b      	orrs	r3, r1
 8009738:	6593      	str	r3, [r2, #88]	@ 0x58
 800973a:	e003      	b.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800973c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009740:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800974c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009750:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009754:	2300      	movs	r3, #0
 8009756:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800975a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800975e:	460b      	mov	r3, r1
 8009760:	4313      	orrs	r3, r2
 8009762:	d037      	beq.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800976a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800976e:	d00e      	beq.n	800978e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009770:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009774:	d816      	bhi.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009776:	2b00      	cmp	r3, #0
 8009778:	d018      	beq.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x708>
 800977a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800977e:	d111      	bne.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009780:	4b8c      	ldr	r3, [pc, #560]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009784:	4a8b      	ldr	r2, [pc, #556]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009786:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800978a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800978c:	e00f      	b.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800978e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009792:	3308      	adds	r3, #8
 8009794:	2101      	movs	r1, #1
 8009796:	4618      	mov	r0, r3
 8009798:	f002 f81e 	bl	800b7d8 <RCCEx_PLL2_Config>
 800979c:	4603      	mov	r3, r0
 800979e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80097a2:	e004      	b.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097a4:	2301      	movs	r3, #1
 80097a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80097aa:	e000      	b.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80097ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d10a      	bne.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80097b6:	4b7f      	ldr	r3, [pc, #508]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097ba:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80097be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097c4:	4a7b      	ldr	r2, [pc, #492]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097c6:	430b      	orrs	r3, r1
 80097c8:	6513      	str	r3, [r2, #80]	@ 0x50
 80097ca:	e003      	b.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80097d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097dc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80097e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80097e4:	2300      	movs	r3, #0
 80097e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80097ea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80097ee:	460b      	mov	r3, r1
 80097f0:	4313      	orrs	r3, r2
 80097f2:	d039      	beq.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80097f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097fa:	2b03      	cmp	r3, #3
 80097fc:	d81c      	bhi.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80097fe:	a201      	add	r2, pc, #4	@ (adr r2, 8009804 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009804:	08009841 	.word	0x08009841
 8009808:	08009815 	.word	0x08009815
 800980c:	08009823 	.word	0x08009823
 8009810:	08009841 	.word	0x08009841
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009814:	4b67      	ldr	r3, [pc, #412]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009818:	4a66      	ldr	r2, [pc, #408]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800981a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800981e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009820:	e00f      	b.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009826:	3308      	adds	r3, #8
 8009828:	2102      	movs	r1, #2
 800982a:	4618      	mov	r0, r3
 800982c:	f001 ffd4 	bl	800b7d8 <RCCEx_PLL2_Config>
 8009830:	4603      	mov	r3, r0
 8009832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009836:	e004      	b.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009838:	2301      	movs	r3, #1
 800983a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800983e:	e000      	b.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009840:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009842:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009846:	2b00      	cmp	r3, #0
 8009848:	d10a      	bne.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800984a:	4b5a      	ldr	r3, [pc, #360]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800984c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800984e:	f023 0103 	bic.w	r1, r3, #3
 8009852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009856:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009858:	4a56      	ldr	r2, [pc, #344]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800985a:	430b      	orrs	r3, r1
 800985c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800985e:	e003      	b.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009860:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009864:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800986c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009870:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009874:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009878:	2300      	movs	r3, #0
 800987a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800987e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009882:	460b      	mov	r3, r1
 8009884:	4313      	orrs	r3, r2
 8009886:	f000 809f 	beq.w	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800988a:	4b4b      	ldr	r3, [pc, #300]	@ (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a4a      	ldr	r2, [pc, #296]	@ (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009890:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009894:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009896:	f7f9 f917 	bl	8002ac8 <HAL_GetTick>
 800989a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800989e:	e00b      	b.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80098a0:	f7f9 f912 	bl	8002ac8 <HAL_GetTick>
 80098a4:	4602      	mov	r2, r0
 80098a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80098aa:	1ad3      	subs	r3, r2, r3
 80098ac:	2b64      	cmp	r3, #100	@ 0x64
 80098ae:	d903      	bls.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80098b0:	2303      	movs	r3, #3
 80098b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80098b6:	e005      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80098b8:	4b3f      	ldr	r3, [pc, #252]	@ (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d0ed      	beq.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80098c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d179      	bne.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80098cc:	4b39      	ldr	r3, [pc, #228]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098ce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80098d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80098d8:	4053      	eors	r3, r2
 80098da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d015      	beq.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80098e2:	4b34      	ldr	r3, [pc, #208]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80098ea:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80098ee:	4b31      	ldr	r3, [pc, #196]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098f2:	4a30      	ldr	r2, [pc, #192]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80098f8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80098fa:	4b2e      	ldr	r3, [pc, #184]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098fe:	4a2d      	ldr	r2, [pc, #180]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009900:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009904:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009906:	4a2b      	ldr	r2, [pc, #172]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009908:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800990c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800990e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009912:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009916:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800991a:	d118      	bne.n	800994e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800991c:	f7f9 f8d4 	bl	8002ac8 <HAL_GetTick>
 8009920:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009924:	e00d      	b.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009926:	f7f9 f8cf 	bl	8002ac8 <HAL_GetTick>
 800992a:	4602      	mov	r2, r0
 800992c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009930:	1ad2      	subs	r2, r2, r3
 8009932:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009936:	429a      	cmp	r2, r3
 8009938:	d903      	bls.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800993a:	2303      	movs	r3, #3
 800993c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8009940:	e005      	b.n	800994e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009942:	4b1c      	ldr	r3, [pc, #112]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009946:	f003 0302 	and.w	r3, r3, #2
 800994a:	2b00      	cmp	r3, #0
 800994c:	d0eb      	beq.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800994e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009952:	2b00      	cmp	r3, #0
 8009954:	d129      	bne.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800995a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800995e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009962:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009966:	d10e      	bne.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009968:	4b12      	ldr	r3, [pc, #72]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800996a:	691b      	ldr	r3, [r3, #16]
 800996c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009974:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009978:	091a      	lsrs	r2, r3, #4
 800997a:	4b10      	ldr	r3, [pc, #64]	@ (80099bc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800997c:	4013      	ands	r3, r2
 800997e:	4a0d      	ldr	r2, [pc, #52]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009980:	430b      	orrs	r3, r1
 8009982:	6113      	str	r3, [r2, #16]
 8009984:	e005      	b.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009986:	4b0b      	ldr	r3, [pc, #44]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009988:	691b      	ldr	r3, [r3, #16]
 800998a:	4a0a      	ldr	r2, [pc, #40]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800998c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009990:	6113      	str	r3, [r2, #16]
 8009992:	4b08      	ldr	r3, [pc, #32]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009994:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800999a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800999e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80099a2:	4a04      	ldr	r2, [pc, #16]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099a4:	430b      	orrs	r3, r1
 80099a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80099a8:	e00e      	b.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80099aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80099b2:	e009      	b.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80099b4:	58024400 	.word	0x58024400
 80099b8:	58024800 	.word	0x58024800
 80099bc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80099c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d0:	f002 0301 	and.w	r3, r2, #1
 80099d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80099d8:	2300      	movs	r3, #0
 80099da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80099de:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80099e2:	460b      	mov	r3, r1
 80099e4:	4313      	orrs	r3, r2
 80099e6:	f000 8089 	beq.w	8009afc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80099ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80099f0:	2b28      	cmp	r3, #40	@ 0x28
 80099f2:	d86b      	bhi.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80099f4:	a201      	add	r2, pc, #4	@ (adr r2, 80099fc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80099f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099fa:	bf00      	nop
 80099fc:	08009ad5 	.word	0x08009ad5
 8009a00:	08009acd 	.word	0x08009acd
 8009a04:	08009acd 	.word	0x08009acd
 8009a08:	08009acd 	.word	0x08009acd
 8009a0c:	08009acd 	.word	0x08009acd
 8009a10:	08009acd 	.word	0x08009acd
 8009a14:	08009acd 	.word	0x08009acd
 8009a18:	08009acd 	.word	0x08009acd
 8009a1c:	08009aa1 	.word	0x08009aa1
 8009a20:	08009acd 	.word	0x08009acd
 8009a24:	08009acd 	.word	0x08009acd
 8009a28:	08009acd 	.word	0x08009acd
 8009a2c:	08009acd 	.word	0x08009acd
 8009a30:	08009acd 	.word	0x08009acd
 8009a34:	08009acd 	.word	0x08009acd
 8009a38:	08009acd 	.word	0x08009acd
 8009a3c:	08009ab7 	.word	0x08009ab7
 8009a40:	08009acd 	.word	0x08009acd
 8009a44:	08009acd 	.word	0x08009acd
 8009a48:	08009acd 	.word	0x08009acd
 8009a4c:	08009acd 	.word	0x08009acd
 8009a50:	08009acd 	.word	0x08009acd
 8009a54:	08009acd 	.word	0x08009acd
 8009a58:	08009acd 	.word	0x08009acd
 8009a5c:	08009ad5 	.word	0x08009ad5
 8009a60:	08009acd 	.word	0x08009acd
 8009a64:	08009acd 	.word	0x08009acd
 8009a68:	08009acd 	.word	0x08009acd
 8009a6c:	08009acd 	.word	0x08009acd
 8009a70:	08009acd 	.word	0x08009acd
 8009a74:	08009acd 	.word	0x08009acd
 8009a78:	08009acd 	.word	0x08009acd
 8009a7c:	08009ad5 	.word	0x08009ad5
 8009a80:	08009acd 	.word	0x08009acd
 8009a84:	08009acd 	.word	0x08009acd
 8009a88:	08009acd 	.word	0x08009acd
 8009a8c:	08009acd 	.word	0x08009acd
 8009a90:	08009acd 	.word	0x08009acd
 8009a94:	08009acd 	.word	0x08009acd
 8009a98:	08009acd 	.word	0x08009acd
 8009a9c:	08009ad5 	.word	0x08009ad5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aa4:	3308      	adds	r3, #8
 8009aa6:	2101      	movs	r1, #1
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f001 fe95 	bl	800b7d8 <RCCEx_PLL2_Config>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009ab4:	e00f      	b.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aba:	3328      	adds	r3, #40	@ 0x28
 8009abc:	2101      	movs	r1, #1
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f001 ff3c 	bl	800b93c <RCCEx_PLL3_Config>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009aca:	e004      	b.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009acc:	2301      	movs	r3, #1
 8009ace:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009ad2:	e000      	b.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009ad4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ad6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d10a      	bne.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009ade:	4bbf      	ldr	r3, [pc, #764]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ae2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009aec:	4abb      	ldr	r2, [pc, #748]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009aee:	430b      	orrs	r3, r1
 8009af0:	6553      	str	r3, [r2, #84]	@ 0x54
 8009af2:	e003      	b.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009af4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009af8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b04:	f002 0302 	and.w	r3, r2, #2
 8009b08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009b12:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009b16:	460b      	mov	r3, r1
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	d041      	beq.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b22:	2b05      	cmp	r3, #5
 8009b24:	d824      	bhi.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009b26:	a201      	add	r2, pc, #4	@ (adr r2, 8009b2c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b2c:	08009b79 	.word	0x08009b79
 8009b30:	08009b45 	.word	0x08009b45
 8009b34:	08009b5b 	.word	0x08009b5b
 8009b38:	08009b79 	.word	0x08009b79
 8009b3c:	08009b79 	.word	0x08009b79
 8009b40:	08009b79 	.word	0x08009b79
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b48:	3308      	adds	r3, #8
 8009b4a:	2101      	movs	r1, #1
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f001 fe43 	bl	800b7d8 <RCCEx_PLL2_Config>
 8009b52:	4603      	mov	r3, r0
 8009b54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009b58:	e00f      	b.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b5e:	3328      	adds	r3, #40	@ 0x28
 8009b60:	2101      	movs	r1, #1
 8009b62:	4618      	mov	r0, r3
 8009b64:	f001 feea 	bl	800b93c <RCCEx_PLL3_Config>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009b6e:	e004      	b.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b70:	2301      	movs	r3, #1
 8009b72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009b76:	e000      	b.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009b78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d10a      	bne.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009b82:	4b96      	ldr	r3, [pc, #600]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b86:	f023 0107 	bic.w	r1, r3, #7
 8009b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b90:	4a92      	ldr	r2, [pc, #584]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b92:	430b      	orrs	r3, r1
 8009b94:	6553      	str	r3, [r2, #84]	@ 0x54
 8009b96:	e003      	b.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba8:	f002 0304 	and.w	r3, r2, #4
 8009bac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009bb6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009bba:	460b      	mov	r3, r1
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	d044      	beq.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009bc8:	2b05      	cmp	r3, #5
 8009bca:	d825      	bhi.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009bcc:	a201      	add	r2, pc, #4	@ (adr r2, 8009bd4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bd2:	bf00      	nop
 8009bd4:	08009c21 	.word	0x08009c21
 8009bd8:	08009bed 	.word	0x08009bed
 8009bdc:	08009c03 	.word	0x08009c03
 8009be0:	08009c21 	.word	0x08009c21
 8009be4:	08009c21 	.word	0x08009c21
 8009be8:	08009c21 	.word	0x08009c21
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bf0:	3308      	adds	r3, #8
 8009bf2:	2101      	movs	r1, #1
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f001 fdef 	bl	800b7d8 <RCCEx_PLL2_Config>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009c00:	e00f      	b.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c06:	3328      	adds	r3, #40	@ 0x28
 8009c08:	2101      	movs	r1, #1
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f001 fe96 	bl	800b93c <RCCEx_PLL3_Config>
 8009c10:	4603      	mov	r3, r0
 8009c12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009c16:	e004      	b.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c18:	2301      	movs	r3, #1
 8009c1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009c1e:	e000      	b.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009c20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d10b      	bne.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009c2a:	4b6c      	ldr	r3, [pc, #432]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c2e:	f023 0107 	bic.w	r1, r3, #7
 8009c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009c3a:	4a68      	ldr	r2, [pc, #416]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009c3c:	430b      	orrs	r3, r1
 8009c3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009c40:	e003      	b.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c52:	f002 0320 	and.w	r3, r2, #32
 8009c56:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009c60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009c64:	460b      	mov	r3, r1
 8009c66:	4313      	orrs	r3, r2
 8009c68:	d055      	beq.n	8009d16 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009c76:	d033      	beq.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009c78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009c7c:	d82c      	bhi.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c82:	d02f      	beq.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009c84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c88:	d826      	bhi.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009c8a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009c8e:	d02b      	beq.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009c90:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009c94:	d820      	bhi.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009c96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c9a:	d012      	beq.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009c9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ca0:	d81a      	bhi.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d022      	beq.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009ca6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009caa:	d115      	bne.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cb0:	3308      	adds	r3, #8
 8009cb2:	2100      	movs	r1, #0
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f001 fd8f 	bl	800b7d8 <RCCEx_PLL2_Config>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009cc0:	e015      	b.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cc6:	3328      	adds	r3, #40	@ 0x28
 8009cc8:	2102      	movs	r1, #2
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f001 fe36 	bl	800b93c <RCCEx_PLL3_Config>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009cd6:	e00a      	b.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009cde:	e006      	b.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009ce0:	bf00      	nop
 8009ce2:	e004      	b.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009ce4:	bf00      	nop
 8009ce6:	e002      	b.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009ce8:	bf00      	nop
 8009cea:	e000      	b.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009cec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d10b      	bne.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009cf6:	4b39      	ldr	r3, [pc, #228]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cfa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d06:	4a35      	ldr	r2, [pc, #212]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009d08:	430b      	orrs	r3, r1
 8009d0a:	6553      	str	r3, [r2, #84]	@ 0x54
 8009d0c:	e003      	b.n	8009d16 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009d22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009d26:	2300      	movs	r3, #0
 8009d28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009d2c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009d30:	460b      	mov	r3, r1
 8009d32:	4313      	orrs	r3, r2
 8009d34:	d058      	beq.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009d3e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009d42:	d033      	beq.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009d44:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009d48:	d82c      	bhi.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009d4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d4e:	d02f      	beq.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009d50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d54:	d826      	bhi.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009d56:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009d5a:	d02b      	beq.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009d5c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009d60:	d820      	bhi.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009d62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d66:	d012      	beq.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009d68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d6c:	d81a      	bhi.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d022      	beq.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009d72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d76:	d115      	bne.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d7c:	3308      	adds	r3, #8
 8009d7e:	2100      	movs	r1, #0
 8009d80:	4618      	mov	r0, r3
 8009d82:	f001 fd29 	bl	800b7d8 <RCCEx_PLL2_Config>
 8009d86:	4603      	mov	r3, r0
 8009d88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009d8c:	e015      	b.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d92:	3328      	adds	r3, #40	@ 0x28
 8009d94:	2102      	movs	r1, #2
 8009d96:	4618      	mov	r0, r3
 8009d98:	f001 fdd0 	bl	800b93c <RCCEx_PLL3_Config>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009da2:	e00a      	b.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009da4:	2301      	movs	r3, #1
 8009da6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009daa:	e006      	b.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009dac:	bf00      	nop
 8009dae:	e004      	b.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009db0:	bf00      	nop
 8009db2:	e002      	b.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009db4:	bf00      	nop
 8009db6:	e000      	b.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009db8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d10e      	bne.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009dc2:	4b06      	ldr	r3, [pc, #24]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dc6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009dd2:	4a02      	ldr	r2, [pc, #8]	@ (8009ddc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009dd4:	430b      	orrs	r3, r1
 8009dd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8009dd8:	e006      	b.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009dda:	bf00      	nop
 8009ddc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009de0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009de4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009df4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009df8:	2300      	movs	r3, #0
 8009dfa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009dfe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009e02:	460b      	mov	r3, r1
 8009e04:	4313      	orrs	r3, r2
 8009e06:	d055      	beq.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009e10:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009e14:	d033      	beq.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009e16:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009e1a:	d82c      	bhi.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009e1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e20:	d02f      	beq.n	8009e82 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009e22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e26:	d826      	bhi.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009e28:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009e2c:	d02b      	beq.n	8009e86 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009e2e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009e32:	d820      	bhi.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009e34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e38:	d012      	beq.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009e3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e3e:	d81a      	bhi.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d022      	beq.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009e44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e48:	d115      	bne.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e4e:	3308      	adds	r3, #8
 8009e50:	2100      	movs	r1, #0
 8009e52:	4618      	mov	r0, r3
 8009e54:	f001 fcc0 	bl	800b7d8 <RCCEx_PLL2_Config>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009e5e:	e015      	b.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e64:	3328      	adds	r3, #40	@ 0x28
 8009e66:	2102      	movs	r1, #2
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f001 fd67 	bl	800b93c <RCCEx_PLL3_Config>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009e74:	e00a      	b.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e76:	2301      	movs	r3, #1
 8009e78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009e7c:	e006      	b.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009e7e:	bf00      	nop
 8009e80:	e004      	b.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009e82:	bf00      	nop
 8009e84:	e002      	b.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009e86:	bf00      	nop
 8009e88:	e000      	b.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009e8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d10b      	bne.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009e94:	4ba1      	ldr	r3, [pc, #644]	@ (800a11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e98:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ea0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009ea4:	4a9d      	ldr	r2, [pc, #628]	@ (800a11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ea6:	430b      	orrs	r3, r1
 8009ea8:	6593      	str	r3, [r2, #88]	@ 0x58
 8009eaa:	e003      	b.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009eb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ebc:	f002 0308 	and.w	r3, r2, #8
 8009ec0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009eca:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009ece:	460b      	mov	r3, r1
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	d01e      	beq.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009edc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ee0:	d10c      	bne.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ee6:	3328      	adds	r3, #40	@ 0x28
 8009ee8:	2102      	movs	r1, #2
 8009eea:	4618      	mov	r0, r3
 8009eec:	f001 fd26 	bl	800b93c <RCCEx_PLL3_Config>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d002      	beq.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009efc:	4b87      	ldr	r3, [pc, #540]	@ (800a11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f00:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009f0c:	4a83      	ldr	r2, [pc, #524]	@ (800a11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f0e:	430b      	orrs	r3, r1
 8009f10:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1a:	f002 0310 	and.w	r3, r2, #16
 8009f1e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009f22:	2300      	movs	r3, #0
 8009f24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009f28:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009f2c:	460b      	mov	r3, r1
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	d01e      	beq.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009f3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f3e:	d10c      	bne.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f44:	3328      	adds	r3, #40	@ 0x28
 8009f46:	2102      	movs	r1, #2
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f001 fcf7 	bl	800b93c <RCCEx_PLL3_Config>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d002      	beq.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009f54:	2301      	movs	r3, #1
 8009f56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009f5a:	4b70      	ldr	r3, [pc, #448]	@ (800a11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f5e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009f6a:	4a6c      	ldr	r2, [pc, #432]	@ (800a11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f6c:	430b      	orrs	r3, r1
 8009f6e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f78:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009f7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009f80:	2300      	movs	r3, #0
 8009f82:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009f86:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009f8a:	460b      	mov	r3, r1
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	d03e      	beq.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f94:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009f98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f9c:	d022      	beq.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009f9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009fa2:	d81b      	bhi.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d003      	beq.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009fa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009fac:	d00b      	beq.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009fae:	e015      	b.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fb4:	3308      	adds	r3, #8
 8009fb6:	2100      	movs	r1, #0
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f001 fc0d 	bl	800b7d8 <RCCEx_PLL2_Config>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009fc4:	e00f      	b.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fca:	3328      	adds	r3, #40	@ 0x28
 8009fcc:	2102      	movs	r1, #2
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f001 fcb4 	bl	800b93c <RCCEx_PLL3_Config>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009fda:	e004      	b.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009fe2:	e000      	b.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009fe4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d10b      	bne.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009fee:	4b4b      	ldr	r3, [pc, #300]	@ (800a11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ff2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ffa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009ffe:	4a47      	ldr	r2, [pc, #284]	@ (800a11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a000:	430b      	orrs	r3, r1
 800a002:	6593      	str	r3, [r2, #88]	@ 0x58
 800a004:	e003      	b.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a006:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a00a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a00e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a016:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a01a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a01c:	2300      	movs	r3, #0
 800a01e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a020:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a024:	460b      	mov	r3, r1
 800a026:	4313      	orrs	r3, r2
 800a028:	d03b      	beq.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a02a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a02e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a032:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a036:	d01f      	beq.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a038:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a03c:	d818      	bhi.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a03e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a042:	d003      	beq.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a044:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a048:	d007      	beq.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a04a:	e011      	b.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a04c:	4b33      	ldr	r3, [pc, #204]	@ (800a11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a04e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a050:	4a32      	ldr	r2, [pc, #200]	@ (800a11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a052:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a056:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a058:	e00f      	b.n	800a07a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a05a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a05e:	3328      	adds	r3, #40	@ 0x28
 800a060:	2101      	movs	r1, #1
 800a062:	4618      	mov	r0, r3
 800a064:	f001 fc6a 	bl	800b93c <RCCEx_PLL3_Config>
 800a068:	4603      	mov	r3, r0
 800a06a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a06e:	e004      	b.n	800a07a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a070:	2301      	movs	r3, #1
 800a072:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a076:	e000      	b.n	800a07a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a078:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a07a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d10b      	bne.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a082:	4b26      	ldr	r3, [pc, #152]	@ (800a11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a086:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a08a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a08e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a092:	4a22      	ldr	r2, [pc, #136]	@ (800a11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a094:	430b      	orrs	r3, r1
 800a096:	6553      	str	r3, [r2, #84]	@ 0x54
 800a098:	e003      	b.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a09a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a09e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a0a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0aa:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a0ae:	673b      	str	r3, [r7, #112]	@ 0x70
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	677b      	str	r3, [r7, #116]	@ 0x74
 800a0b4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	d034      	beq.n	800a128 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a0be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d003      	beq.n	800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a0c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0cc:	d007      	beq.n	800a0de <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a0ce:	e011      	b.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0d0:	4b12      	ldr	r3, [pc, #72]	@ (800a11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a0d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0d4:	4a11      	ldr	r2, [pc, #68]	@ (800a11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a0d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a0da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a0dc:	e00e      	b.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a0de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0e2:	3308      	adds	r3, #8
 800a0e4:	2102      	movs	r1, #2
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f001 fb76 	bl	800b7d8 <RCCEx_PLL2_Config>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a0f2:	e003      	b.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a0fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a100:	2b00      	cmp	r3, #0
 800a102:	d10d      	bne.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a104:	4b05      	ldr	r3, [pc, #20]	@ (800a11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a106:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a108:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a10c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a110:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a112:	4a02      	ldr	r2, [pc, #8]	@ (800a11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a114:	430b      	orrs	r3, r1
 800a116:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a118:	e006      	b.n	800a128 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a11a:	bf00      	nop
 800a11c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a120:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a124:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a130:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a134:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a136:	2300      	movs	r3, #0
 800a138:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a13a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a13e:	460b      	mov	r3, r1
 800a140:	4313      	orrs	r3, r2
 800a142:	d00c      	beq.n	800a15e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a148:	3328      	adds	r3, #40	@ 0x28
 800a14a:	2102      	movs	r1, #2
 800a14c:	4618      	mov	r0, r3
 800a14e:	f001 fbf5 	bl	800b93c <RCCEx_PLL3_Config>
 800a152:	4603      	mov	r3, r0
 800a154:	2b00      	cmp	r3, #0
 800a156:	d002      	beq.n	800a15e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a158:	2301      	movs	r3, #1
 800a15a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a15e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a166:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a16a:	663b      	str	r3, [r7, #96]	@ 0x60
 800a16c:	2300      	movs	r3, #0
 800a16e:	667b      	str	r3, [r7, #100]	@ 0x64
 800a170:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a174:	460b      	mov	r3, r1
 800a176:	4313      	orrs	r3, r2
 800a178:	d038      	beq.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a17a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a17e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a182:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a186:	d018      	beq.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a188:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a18c:	d811      	bhi.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a18e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a192:	d014      	beq.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a194:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a198:	d80b      	bhi.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d011      	beq.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a19e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1a2:	d106      	bne.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1a4:	4bc3      	ldr	r3, [pc, #780]	@ (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1a8:	4ac2      	ldr	r2, [pc, #776]	@ (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a1ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a1b0:	e008      	b.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a1b8:	e004      	b.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a1ba:	bf00      	nop
 800a1bc:	e002      	b.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a1be:	bf00      	nop
 800a1c0:	e000      	b.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a1c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d10b      	bne.n	800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a1cc:	4bb9      	ldr	r3, [pc, #740]	@ (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1d0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a1d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1dc:	4ab5      	ldr	r2, [pc, #724]	@ (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1de:	430b      	orrs	r3, r1
 800a1e0:	6553      	str	r3, [r2, #84]	@ 0x54
 800a1e2:	e003      	b.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a1ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a1f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a1fe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a202:	460b      	mov	r3, r1
 800a204:	4313      	orrs	r3, r2
 800a206:	d009      	beq.n	800a21c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a208:	4baa      	ldr	r3, [pc, #680]	@ (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a20a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a20c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a214:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a216:	4aa7      	ldr	r2, [pc, #668]	@ (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a218:	430b      	orrs	r3, r1
 800a21a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a21c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a224:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800a228:	653b      	str	r3, [r7, #80]	@ 0x50
 800a22a:	2300      	movs	r3, #0
 800a22c:	657b      	str	r3, [r7, #84]	@ 0x54
 800a22e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a232:	460b      	mov	r3, r1
 800a234:	4313      	orrs	r3, r2
 800a236:	d00a      	beq.n	800a24e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a238:	4b9e      	ldr	r3, [pc, #632]	@ (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a23a:	691b      	ldr	r3, [r3, #16]
 800a23c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800a240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a244:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a248:	4a9a      	ldr	r2, [pc, #616]	@ (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a24a:	430b      	orrs	r3, r1
 800a24c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a24e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a256:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a25a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a25c:	2300      	movs	r3, #0
 800a25e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a260:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a264:	460b      	mov	r3, r1
 800a266:	4313      	orrs	r3, r2
 800a268:	d009      	beq.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a26a:	4b92      	ldr	r3, [pc, #584]	@ (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a26c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a26e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a276:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a278:	4a8e      	ldr	r2, [pc, #568]	@ (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a27a:	430b      	orrs	r3, r1
 800a27c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a27e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a286:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a28a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a28c:	2300      	movs	r3, #0
 800a28e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a290:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a294:	460b      	mov	r3, r1
 800a296:	4313      	orrs	r3, r2
 800a298:	d00e      	beq.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a29a:	4b86      	ldr	r3, [pc, #536]	@ (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a29c:	691b      	ldr	r3, [r3, #16]
 800a29e:	4a85      	ldr	r2, [pc, #532]	@ (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a2a0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a2a4:	6113      	str	r3, [r2, #16]
 800a2a6:	4b83      	ldr	r3, [pc, #524]	@ (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a2a8:	6919      	ldr	r1, [r3, #16]
 800a2aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2ae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a2b2:	4a80      	ldr	r2, [pc, #512]	@ (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a2b4:	430b      	orrs	r3, r1
 800a2b6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a2b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a2c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2ca:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	d009      	beq.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a2d4:	4b77      	ldr	r3, [pc, #476]	@ (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a2d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2d8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a2dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2e2:	4a74      	ldr	r2, [pc, #464]	@ (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a2e4:	430b      	orrs	r3, r1
 800a2e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a2e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a2f4:	633b      	str	r3, [r7, #48]	@ 0x30
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2fa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a2fe:	460b      	mov	r3, r1
 800a300:	4313      	orrs	r3, r2
 800a302:	d00a      	beq.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a304:	4b6b      	ldr	r3, [pc, #428]	@ (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a308:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a30c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a310:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a314:	4a67      	ldr	r2, [pc, #412]	@ (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a316:	430b      	orrs	r3, r1
 800a318:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a31a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a322:	2100      	movs	r1, #0
 800a324:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a326:	f003 0301 	and.w	r3, r3, #1
 800a32a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a32c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a330:	460b      	mov	r3, r1
 800a332:	4313      	orrs	r3, r2
 800a334:	d011      	beq.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a33a:	3308      	adds	r3, #8
 800a33c:	2100      	movs	r1, #0
 800a33e:	4618      	mov	r0, r3
 800a340:	f001 fa4a 	bl	800b7d8 <RCCEx_PLL2_Config>
 800a344:	4603      	mov	r3, r0
 800a346:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a34a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d003      	beq.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a352:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a356:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a35a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a362:	2100      	movs	r1, #0
 800a364:	6239      	str	r1, [r7, #32]
 800a366:	f003 0302 	and.w	r3, r3, #2
 800a36a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a36c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a370:	460b      	mov	r3, r1
 800a372:	4313      	orrs	r3, r2
 800a374:	d011      	beq.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a37a:	3308      	adds	r3, #8
 800a37c:	2101      	movs	r1, #1
 800a37e:	4618      	mov	r0, r3
 800a380:	f001 fa2a 	bl	800b7d8 <RCCEx_PLL2_Config>
 800a384:	4603      	mov	r3, r0
 800a386:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a38a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d003      	beq.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a392:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a396:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a39a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a2:	2100      	movs	r1, #0
 800a3a4:	61b9      	str	r1, [r7, #24]
 800a3a6:	f003 0304 	and.w	r3, r3, #4
 800a3aa:	61fb      	str	r3, [r7, #28]
 800a3ac:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a3b0:	460b      	mov	r3, r1
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	d011      	beq.n	800a3da <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a3b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3ba:	3308      	adds	r3, #8
 800a3bc:	2102      	movs	r1, #2
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f001 fa0a 	bl	800b7d8 <RCCEx_PLL2_Config>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a3ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d003      	beq.n	800a3da <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a3da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e2:	2100      	movs	r1, #0
 800a3e4:	6139      	str	r1, [r7, #16]
 800a3e6:	f003 0308 	and.w	r3, r3, #8
 800a3ea:	617b      	str	r3, [r7, #20]
 800a3ec:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	d011      	beq.n	800a41a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a3f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3fa:	3328      	adds	r3, #40	@ 0x28
 800a3fc:	2100      	movs	r1, #0
 800a3fe:	4618      	mov	r0, r3
 800a400:	f001 fa9c 	bl	800b93c <RCCEx_PLL3_Config>
 800a404:	4603      	mov	r3, r0
 800a406:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800a40a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d003      	beq.n	800a41a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a412:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a416:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a41a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a422:	2100      	movs	r1, #0
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	f003 0310 	and.w	r3, r3, #16
 800a42a:	60fb      	str	r3, [r7, #12]
 800a42c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a430:	460b      	mov	r3, r1
 800a432:	4313      	orrs	r3, r2
 800a434:	d011      	beq.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a43a:	3328      	adds	r3, #40	@ 0x28
 800a43c:	2101      	movs	r1, #1
 800a43e:	4618      	mov	r0, r3
 800a440:	f001 fa7c 	bl	800b93c <RCCEx_PLL3_Config>
 800a444:	4603      	mov	r3, r0
 800a446:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a44a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d003      	beq.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a452:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a456:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a45a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a462:	2100      	movs	r1, #0
 800a464:	6039      	str	r1, [r7, #0]
 800a466:	f003 0320 	and.w	r3, r3, #32
 800a46a:	607b      	str	r3, [r7, #4]
 800a46c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a470:	460b      	mov	r3, r1
 800a472:	4313      	orrs	r3, r2
 800a474:	d011      	beq.n	800a49a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a47a:	3328      	adds	r3, #40	@ 0x28
 800a47c:	2102      	movs	r1, #2
 800a47e:	4618      	mov	r0, r3
 800a480:	f001 fa5c 	bl	800b93c <RCCEx_PLL3_Config>
 800a484:	4603      	mov	r3, r0
 800a486:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a48a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d003      	beq.n	800a49a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a492:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a496:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800a49a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d101      	bne.n	800a4a6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	e000      	b.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a4a6:	2301      	movs	r3, #1
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a4b4:	58024400 	.word	0x58024400

0800a4b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b090      	sub	sp, #64	@ 0x40
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a4c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4c6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a4ca:	430b      	orrs	r3, r1
 800a4cc:	f040 8094 	bne.w	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a4d0:	4b9e      	ldr	r3, [pc, #632]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4d4:	f003 0307 	and.w	r3, r3, #7
 800a4d8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4dc:	2b04      	cmp	r3, #4
 800a4de:	f200 8087 	bhi.w	800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a4e2:	a201      	add	r2, pc, #4	@ (adr r2, 800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a4e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4e8:	0800a4fd 	.word	0x0800a4fd
 800a4ec:	0800a525 	.word	0x0800a525
 800a4f0:	0800a54d 	.word	0x0800a54d
 800a4f4:	0800a5e9 	.word	0x0800a5e9
 800a4f8:	0800a575 	.word	0x0800a575
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a4fc:	4b93      	ldr	r3, [pc, #588]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a504:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a508:	d108      	bne.n	800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a50a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a50e:	4618      	mov	r0, r3
 800a510:	f001 f810 	bl	800b534 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a516:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a518:	f000 bd45 	b.w	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a51c:	2300      	movs	r3, #0
 800a51e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a520:	f000 bd41 	b.w	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a524:	4b89      	ldr	r3, [pc, #548]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a52c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a530:	d108      	bne.n	800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a532:	f107 0318 	add.w	r3, r7, #24
 800a536:	4618      	mov	r0, r3
 800a538:	f000 fd54 	bl	800afe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a53c:	69bb      	ldr	r3, [r7, #24]
 800a53e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a540:	f000 bd31 	b.w	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a544:	2300      	movs	r3, #0
 800a546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a548:	f000 bd2d 	b.w	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a54c:	4b7f      	ldr	r3, [pc, #508]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a554:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a558:	d108      	bne.n	800a56c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a55a:	f107 030c 	add.w	r3, r7, #12
 800a55e:	4618      	mov	r0, r3
 800a560:	f000 fe94 	bl	800b28c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a568:	f000 bd1d 	b.w	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a56c:	2300      	movs	r3, #0
 800a56e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a570:	f000 bd19 	b.w	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a574:	4b75      	ldr	r3, [pc, #468]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a576:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a578:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a57c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a57e:	4b73      	ldr	r3, [pc, #460]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f003 0304 	and.w	r3, r3, #4
 800a586:	2b04      	cmp	r3, #4
 800a588:	d10c      	bne.n	800a5a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a58a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d109      	bne.n	800a5a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a590:	4b6e      	ldr	r3, [pc, #440]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	08db      	lsrs	r3, r3, #3
 800a596:	f003 0303 	and.w	r3, r3, #3
 800a59a:	4a6d      	ldr	r2, [pc, #436]	@ (800a750 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a59c:	fa22 f303 	lsr.w	r3, r2, r3
 800a5a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5a2:	e01f      	b.n	800a5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a5a4:	4b69      	ldr	r3, [pc, #420]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5b0:	d106      	bne.n	800a5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a5b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a5b8:	d102      	bne.n	800a5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a5ba:	4b66      	ldr	r3, [pc, #408]	@ (800a754 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a5bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5be:	e011      	b.n	800a5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a5c0:	4b62      	ldr	r3, [pc, #392]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a5cc:	d106      	bne.n	800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a5ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5d4:	d102      	bne.n	800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a5d6:	4b60      	ldr	r3, [pc, #384]	@ (800a758 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a5d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5da:	e003      	b.n	800a5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a5e0:	f000 bce1 	b.w	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a5e4:	f000 bcdf 	b.w	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a5e8:	4b5c      	ldr	r3, [pc, #368]	@ (800a75c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a5ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5ec:	f000 bcdb 	b.w	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5f4:	f000 bcd7 	b.w	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a5f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5fc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a600:	430b      	orrs	r3, r1
 800a602:	f040 80ad 	bne.w	800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a606:	4b51      	ldr	r3, [pc, #324]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a608:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a60a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a60e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a612:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a616:	d056      	beq.n	800a6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a61a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a61e:	f200 8090 	bhi.w	800a742 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a624:	2bc0      	cmp	r3, #192	@ 0xc0
 800a626:	f000 8088 	beq.w	800a73a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a62a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a62c:	2bc0      	cmp	r3, #192	@ 0xc0
 800a62e:	f200 8088 	bhi.w	800a742 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a634:	2b80      	cmp	r3, #128	@ 0x80
 800a636:	d032      	beq.n	800a69e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a63a:	2b80      	cmp	r3, #128	@ 0x80
 800a63c:	f200 8081 	bhi.w	800a742 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a642:	2b00      	cmp	r3, #0
 800a644:	d003      	beq.n	800a64e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a648:	2b40      	cmp	r3, #64	@ 0x40
 800a64a:	d014      	beq.n	800a676 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a64c:	e079      	b.n	800a742 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a64e:	4b3f      	ldr	r3, [pc, #252]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a656:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a65a:	d108      	bne.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a65c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a660:	4618      	mov	r0, r3
 800a662:	f000 ff67 	bl	800b534 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a668:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a66a:	f000 bc9c 	b.w	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a66e:	2300      	movs	r3, #0
 800a670:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a672:	f000 bc98 	b.w	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a676:	4b35      	ldr	r3, [pc, #212]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a67e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a682:	d108      	bne.n	800a696 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a684:	f107 0318 	add.w	r3, r7, #24
 800a688:	4618      	mov	r0, r3
 800a68a:	f000 fcab 	bl	800afe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a68e:	69bb      	ldr	r3, [r7, #24]
 800a690:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a692:	f000 bc88 	b.w	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a696:	2300      	movs	r3, #0
 800a698:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a69a:	f000 bc84 	b.w	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a69e:	4b2b      	ldr	r3, [pc, #172]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a6a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6aa:	d108      	bne.n	800a6be <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6ac:	f107 030c 	add.w	r3, r7, #12
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f000 fdeb 	bl	800b28c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6ba:	f000 bc74 	b.w	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6c2:	f000 bc70 	b.w	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a6c6:	4b21      	ldr	r3, [pc, #132]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a6c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a6ce:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a6d0:	4b1e      	ldr	r3, [pc, #120]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f003 0304 	and.w	r3, r3, #4
 800a6d8:	2b04      	cmp	r3, #4
 800a6da:	d10c      	bne.n	800a6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a6dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d109      	bne.n	800a6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a6e2:	4b1a      	ldr	r3, [pc, #104]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	08db      	lsrs	r3, r3, #3
 800a6e8:	f003 0303 	and.w	r3, r3, #3
 800a6ec:	4a18      	ldr	r2, [pc, #96]	@ (800a750 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a6ee:	fa22 f303 	lsr.w	r3, r2, r3
 800a6f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6f4:	e01f      	b.n	800a736 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a6f6:	4b15      	ldr	r3, [pc, #84]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a702:	d106      	bne.n	800a712 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a706:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a70a:	d102      	bne.n	800a712 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a70c:	4b11      	ldr	r3, [pc, #68]	@ (800a754 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a70e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a710:	e011      	b.n	800a736 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a712:	4b0e      	ldr	r3, [pc, #56]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a71a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a71e:	d106      	bne.n	800a72e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a722:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a726:	d102      	bne.n	800a72e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a728:	4b0b      	ldr	r3, [pc, #44]	@ (800a758 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a72a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a72c:	e003      	b.n	800a736 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a72e:	2300      	movs	r3, #0
 800a730:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a732:	f000 bc38 	b.w	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a736:	f000 bc36 	b.w	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a73a:	4b08      	ldr	r3, [pc, #32]	@ (800a75c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a73c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a73e:	f000 bc32 	b.w	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a742:	2300      	movs	r3, #0
 800a744:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a746:	f000 bc2e 	b.w	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a74a:	bf00      	nop
 800a74c:	58024400 	.word	0x58024400
 800a750:	03d09000 	.word	0x03d09000
 800a754:	003d0900 	.word	0x003d0900
 800a758:	017d7840 	.word	0x017d7840
 800a75c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a760:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a764:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a768:	430b      	orrs	r3, r1
 800a76a:	f040 809c 	bne.w	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a76e:	4b9e      	ldr	r3, [pc, #632]	@ (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a772:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a776:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a77a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a77e:	d054      	beq.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a782:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a786:	f200 808b 	bhi.w	800a8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a78a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a78c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a790:	f000 8083 	beq.w	800a89a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a796:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a79a:	f200 8081 	bhi.w	800a8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a79e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a7a4:	d02f      	beq.n	800a806 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a7a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a7ac:	d878      	bhi.n	800a8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a7ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d004      	beq.n	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a7b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a7ba:	d012      	beq.n	800a7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a7bc:	e070      	b.n	800a8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a7be:	4b8a      	ldr	r3, [pc, #552]	@ (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a7c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a7ca:	d107      	bne.n	800a7dc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a7cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f000 feaf 	bl	800b534 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a7d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7da:	e3e4      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7e0:	e3e1      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7e2:	4b81      	ldr	r3, [pc, #516]	@ (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a7ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a7ee:	d107      	bne.n	800a800 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7f0:	f107 0318 	add.w	r3, r7, #24
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f000 fbf5 	bl	800afe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a7fa:	69bb      	ldr	r3, [r7, #24]
 800a7fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7fe:	e3d2      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a800:	2300      	movs	r3, #0
 800a802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a804:	e3cf      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a806:	4b78      	ldr	r3, [pc, #480]	@ (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a80e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a812:	d107      	bne.n	800a824 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a814:	f107 030c 	add.w	r3, r7, #12
 800a818:	4618      	mov	r0, r3
 800a81a:	f000 fd37 	bl	800b28c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a822:	e3c0      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a824:	2300      	movs	r3, #0
 800a826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a828:	e3bd      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a82a:	4b6f      	ldr	r3, [pc, #444]	@ (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a82c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a82e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a832:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a834:	4b6c      	ldr	r3, [pc, #432]	@ (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f003 0304 	and.w	r3, r3, #4
 800a83c:	2b04      	cmp	r3, #4
 800a83e:	d10c      	bne.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a842:	2b00      	cmp	r3, #0
 800a844:	d109      	bne.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a846:	4b68      	ldr	r3, [pc, #416]	@ (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	08db      	lsrs	r3, r3, #3
 800a84c:	f003 0303 	and.w	r3, r3, #3
 800a850:	4a66      	ldr	r2, [pc, #408]	@ (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a852:	fa22 f303 	lsr.w	r3, r2, r3
 800a856:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a858:	e01e      	b.n	800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a85a:	4b63      	ldr	r3, [pc, #396]	@ (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a862:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a866:	d106      	bne.n	800a876 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a86a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a86e:	d102      	bne.n	800a876 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a870:	4b5f      	ldr	r3, [pc, #380]	@ (800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a872:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a874:	e010      	b.n	800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a876:	4b5c      	ldr	r3, [pc, #368]	@ (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a87e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a882:	d106      	bne.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a886:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a88a:	d102      	bne.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a88c:	4b59      	ldr	r3, [pc, #356]	@ (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a88e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a890:	e002      	b.n	800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a892:	2300      	movs	r3, #0
 800a894:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a896:	e386      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a898:	e385      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a89a:	4b57      	ldr	r3, [pc, #348]	@ (800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a89c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a89e:	e382      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8a4:	e37f      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a8a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8aa:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a8ae:	430b      	orrs	r3, r1
 800a8b0:	f040 80a7 	bne.w	800aa02 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a8b4:	4b4c      	ldr	r3, [pc, #304]	@ (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a8b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8b8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a8bc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a8be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a8c4:	d055      	beq.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a8c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a8cc:	f200 8096 	bhi.w	800a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a8d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a8d6:	f000 8084 	beq.w	800a9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a8da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8dc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a8e0:	f200 808c 	bhi.w	800a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a8e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a8ea:	d030      	beq.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a8ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a8f2:	f200 8083 	bhi.w	800a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a8f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d004      	beq.n	800a906 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a8fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a902:	d012      	beq.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a904:	e07a      	b.n	800a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a906:	4b38      	ldr	r3, [pc, #224]	@ (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a90e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a912:	d107      	bne.n	800a924 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a914:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a918:	4618      	mov	r0, r3
 800a91a:	f000 fe0b 	bl	800b534 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a91e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a922:	e340      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a924:	2300      	movs	r3, #0
 800a926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a928:	e33d      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a92a:	4b2f      	ldr	r3, [pc, #188]	@ (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a932:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a936:	d107      	bne.n	800a948 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a938:	f107 0318 	add.w	r3, r7, #24
 800a93c:	4618      	mov	r0, r3
 800a93e:	f000 fb51 	bl	800afe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a942:	69bb      	ldr	r3, [r7, #24]
 800a944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a946:	e32e      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a948:	2300      	movs	r3, #0
 800a94a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a94c:	e32b      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a94e:	4b26      	ldr	r3, [pc, #152]	@ (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a956:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a95a:	d107      	bne.n	800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a95c:	f107 030c 	add.w	r3, r7, #12
 800a960:	4618      	mov	r0, r3
 800a962:	f000 fc93 	bl	800b28c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a96a:	e31c      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a96c:	2300      	movs	r3, #0
 800a96e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a970:	e319      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a972:	4b1d      	ldr	r3, [pc, #116]	@ (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a976:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a97a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a97c:	4b1a      	ldr	r3, [pc, #104]	@ (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f003 0304 	and.w	r3, r3, #4
 800a984:	2b04      	cmp	r3, #4
 800a986:	d10c      	bne.n	800a9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d109      	bne.n	800a9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a98e:	4b16      	ldr	r3, [pc, #88]	@ (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	08db      	lsrs	r3, r3, #3
 800a994:	f003 0303 	and.w	r3, r3, #3
 800a998:	4a14      	ldr	r2, [pc, #80]	@ (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a99a:	fa22 f303 	lsr.w	r3, r2, r3
 800a99e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9a0:	e01e      	b.n	800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a9a2:	4b11      	ldr	r3, [pc, #68]	@ (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a9ae:	d106      	bne.n	800a9be <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a9b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a9b6:	d102      	bne.n	800a9be <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a9b8:	4b0d      	ldr	r3, [pc, #52]	@ (800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a9ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9bc:	e010      	b.n	800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a9be:	4b0a      	ldr	r3, [pc, #40]	@ (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a9c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a9ca:	d106      	bne.n	800a9da <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a9cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9d2:	d102      	bne.n	800a9da <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a9d4:	4b07      	ldr	r3, [pc, #28]	@ (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a9d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9d8:	e002      	b.n	800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a9de:	e2e2      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a9e0:	e2e1      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a9e2:	4b05      	ldr	r3, [pc, #20]	@ (800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a9e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9e6:	e2de      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a9e8:	58024400 	.word	0x58024400
 800a9ec:	03d09000 	.word	0x03d09000
 800a9f0:	003d0900 	.word	0x003d0900
 800a9f4:	017d7840 	.word	0x017d7840
 800a9f8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa00:	e2d1      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800aa02:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa06:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800aa0a:	430b      	orrs	r3, r1
 800aa0c:	f040 809c 	bne.w	800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800aa10:	4b93      	ldr	r3, [pc, #588]	@ (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa14:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800aa18:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aa1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aa20:	d054      	beq.n	800aacc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800aa22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aa28:	f200 808b 	bhi.w	800ab42 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800aa2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa2e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800aa32:	f000 8083 	beq.w	800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800aa36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa38:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800aa3c:	f200 8081 	bhi.w	800ab42 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800aa40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa46:	d02f      	beq.n	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800aa48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa4e:	d878      	bhi.n	800ab42 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800aa50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d004      	beq.n	800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800aa56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa5c:	d012      	beq.n	800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800aa5e:	e070      	b.n	800ab42 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aa60:	4b7f      	ldr	r3, [pc, #508]	@ (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aa6c:	d107      	bne.n	800aa7e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa72:	4618      	mov	r0, r3
 800aa74:	f000 fd5e 	bl	800b534 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa7c:	e293      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa82:	e290      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa84:	4b76      	ldr	r3, [pc, #472]	@ (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa90:	d107      	bne.n	800aaa2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa92:	f107 0318 	add.w	r3, r7, #24
 800aa96:	4618      	mov	r0, r3
 800aa98:	f000 faa4 	bl	800afe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa9c:	69bb      	ldr	r3, [r7, #24]
 800aa9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aaa0:	e281      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaa6:	e27e      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aaa8:	4b6d      	ldr	r3, [pc, #436]	@ (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aab0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aab4:	d107      	bne.n	800aac6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aab6:	f107 030c 	add.w	r3, r7, #12
 800aaba:	4618      	mov	r0, r3
 800aabc:	f000 fbe6 	bl	800b28c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aac4:	e26f      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aac6:	2300      	movs	r3, #0
 800aac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaca:	e26c      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aacc:	4b64      	ldr	r3, [pc, #400]	@ (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aad0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aad4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aad6:	4b62      	ldr	r3, [pc, #392]	@ (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f003 0304 	and.w	r3, r3, #4
 800aade:	2b04      	cmp	r3, #4
 800aae0:	d10c      	bne.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800aae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d109      	bne.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aae8:	4b5d      	ldr	r3, [pc, #372]	@ (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	08db      	lsrs	r3, r3, #3
 800aaee:	f003 0303 	and.w	r3, r3, #3
 800aaf2:	4a5c      	ldr	r2, [pc, #368]	@ (800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800aaf4:	fa22 f303 	lsr.w	r3, r2, r3
 800aaf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aafa:	e01e      	b.n	800ab3a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aafc:	4b58      	ldr	r3, [pc, #352]	@ (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab08:	d106      	bne.n	800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800ab0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab10:	d102      	bne.n	800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ab12:	4b55      	ldr	r3, [pc, #340]	@ (800ac68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ab14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab16:	e010      	b.n	800ab3a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ab18:	4b51      	ldr	r3, [pc, #324]	@ (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab24:	d106      	bne.n	800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800ab26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab2c:	d102      	bne.n	800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ab2e:	4b4f      	ldr	r3, [pc, #316]	@ (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ab30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab32:	e002      	b.n	800ab3a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ab34:	2300      	movs	r3, #0
 800ab36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ab38:	e235      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ab3a:	e234      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ab3c:	4b4c      	ldr	r3, [pc, #304]	@ (800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800ab3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab40:	e231      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ab42:	2300      	movs	r3, #0
 800ab44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab46:	e22e      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ab48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab4c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800ab50:	430b      	orrs	r3, r1
 800ab52:	f040 808f 	bne.w	800ac74 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ab56:	4b42      	ldr	r3, [pc, #264]	@ (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab5a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800ab5e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800ab60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab62:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ab66:	d06b      	beq.n	800ac40 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800ab68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab6a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ab6e:	d874      	bhi.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ab70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab72:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ab76:	d056      	beq.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800ab78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab7a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ab7e:	d86c      	bhi.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ab80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab82:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ab86:	d03b      	beq.n	800ac00 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800ab88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab8a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ab8e:	d864      	bhi.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ab90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab96:	d021      	beq.n	800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800ab98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab9e:	d85c      	bhi.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800aba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d004      	beq.n	800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800aba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aba8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800abac:	d004      	beq.n	800abb8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800abae:	e054      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800abb0:	f7fe fa4c 	bl	800904c <HAL_RCC_GetPCLK1Freq>
 800abb4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800abb6:	e1f6      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800abb8:	4b29      	ldr	r3, [pc, #164]	@ (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800abc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800abc4:	d107      	bne.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abc6:	f107 0318 	add.w	r3, r7, #24
 800abca:	4618      	mov	r0, r3
 800abcc:	f000 fa0a 	bl	800afe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800abd0:	69fb      	ldr	r3, [r7, #28]
 800abd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abd4:	e1e7      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abd6:	2300      	movs	r3, #0
 800abd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abda:	e1e4      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800abdc:	4b20      	ldr	r3, [pc, #128]	@ (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800abe4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800abe8:	d107      	bne.n	800abfa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abea:	f107 030c 	add.w	r3, r7, #12
 800abee:	4618      	mov	r0, r3
 800abf0:	f000 fb4c 	bl	800b28c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abf8:	e1d5      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abfa:	2300      	movs	r3, #0
 800abfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abfe:	e1d2      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ac00:	4b17      	ldr	r3, [pc, #92]	@ (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f003 0304 	and.w	r3, r3, #4
 800ac08:	2b04      	cmp	r3, #4
 800ac0a:	d109      	bne.n	800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac0c:	4b14      	ldr	r3, [pc, #80]	@ (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	08db      	lsrs	r3, r3, #3
 800ac12:	f003 0303 	and.w	r3, r3, #3
 800ac16:	4a13      	ldr	r2, [pc, #76]	@ (800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ac18:	fa22 f303 	lsr.w	r3, r2, r3
 800ac1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac1e:	e1c2      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac20:	2300      	movs	r3, #0
 800ac22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac24:	e1bf      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ac26:	4b0e      	ldr	r3, [pc, #56]	@ (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac32:	d102      	bne.n	800ac3a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800ac34:	4b0c      	ldr	r3, [pc, #48]	@ (800ac68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ac36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac38:	e1b5      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac3e:	e1b2      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ac40:	4b07      	ldr	r3, [pc, #28]	@ (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac4c:	d102      	bne.n	800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800ac4e:	4b07      	ldr	r3, [pc, #28]	@ (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ac50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac52:	e1a8      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac54:	2300      	movs	r3, #0
 800ac56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac58:	e1a5      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac5e:	e1a2      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ac60:	58024400 	.word	0x58024400
 800ac64:	03d09000 	.word	0x03d09000
 800ac68:	003d0900 	.word	0x003d0900
 800ac6c:	017d7840 	.word	0x017d7840
 800ac70:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ac74:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac78:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800ac7c:	430b      	orrs	r3, r1
 800ac7e:	d173      	bne.n	800ad68 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ac80:	4b9c      	ldr	r3, [pc, #624]	@ (800aef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ac88:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ac8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac90:	d02f      	beq.n	800acf2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ac92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac98:	d863      	bhi.n	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800ac9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d004      	beq.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800aca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aca2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aca6:	d012      	beq.n	800acce <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800aca8:	e05b      	b.n	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800acaa:	4b92      	ldr	r3, [pc, #584]	@ (800aef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800acb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800acb6:	d107      	bne.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acb8:	f107 0318 	add.w	r3, r7, #24
 800acbc:	4618      	mov	r0, r3
 800acbe:	f000 f991 	bl	800afe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800acc2:	69bb      	ldr	r3, [r7, #24]
 800acc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acc6:	e16e      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acc8:	2300      	movs	r3, #0
 800acca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800accc:	e16b      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800acce:	4b89      	ldr	r3, [pc, #548]	@ (800aef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800acd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800acda:	d107      	bne.n	800acec <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acdc:	f107 030c 	add.w	r3, r7, #12
 800ace0:	4618      	mov	r0, r3
 800ace2:	f000 fad3 	bl	800b28c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acea:	e15c      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acec:	2300      	movs	r3, #0
 800acee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acf0:	e159      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800acf2:	4b80      	ldr	r3, [pc, #512]	@ (800aef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800acf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800acf6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800acfa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800acfc:	4b7d      	ldr	r3, [pc, #500]	@ (800aef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f003 0304 	and.w	r3, r3, #4
 800ad04:	2b04      	cmp	r3, #4
 800ad06:	d10c      	bne.n	800ad22 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800ad08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d109      	bne.n	800ad22 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad0e:	4b79      	ldr	r3, [pc, #484]	@ (800aef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	08db      	lsrs	r3, r3, #3
 800ad14:	f003 0303 	and.w	r3, r3, #3
 800ad18:	4a77      	ldr	r2, [pc, #476]	@ (800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ad1a:	fa22 f303 	lsr.w	r3, r2, r3
 800ad1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad20:	e01e      	b.n	800ad60 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ad22:	4b74      	ldr	r3, [pc, #464]	@ (800aef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad2e:	d106      	bne.n	800ad3e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800ad30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad36:	d102      	bne.n	800ad3e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ad38:	4b70      	ldr	r3, [pc, #448]	@ (800aefc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ad3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad3c:	e010      	b.n	800ad60 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad3e:	4b6d      	ldr	r3, [pc, #436]	@ (800aef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad4a:	d106      	bne.n	800ad5a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800ad4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad52:	d102      	bne.n	800ad5a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ad54:	4b6a      	ldr	r3, [pc, #424]	@ (800af00 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ad56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad58:	e002      	b.n	800ad60 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ad5e:	e122      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ad60:	e121      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ad62:	2300      	movs	r3, #0
 800ad64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad66:	e11e      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ad68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad6c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800ad70:	430b      	orrs	r3, r1
 800ad72:	d133      	bne.n	800addc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ad74:	4b5f      	ldr	r3, [pc, #380]	@ (800aef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ad7c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ad7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d004      	beq.n	800ad8e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800ad84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad8a:	d012      	beq.n	800adb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800ad8c:	e023      	b.n	800add6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad8e:	4b59      	ldr	r3, [pc, #356]	@ (800aef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ad9a:	d107      	bne.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ada0:	4618      	mov	r0, r3
 800ada2:	f000 fbc7 	bl	800b534 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ada6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ada8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adaa:	e0fc      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800adac:	2300      	movs	r3, #0
 800adae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adb0:	e0f9      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800adb2:	4b50      	ldr	r3, [pc, #320]	@ (800aef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800adba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800adbe:	d107      	bne.n	800add0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800adc0:	f107 0318 	add.w	r3, r7, #24
 800adc4:	4618      	mov	r0, r3
 800adc6:	f000 f90d 	bl	800afe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800adca:	6a3b      	ldr	r3, [r7, #32]
 800adcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adce:	e0ea      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800add0:	2300      	movs	r3, #0
 800add2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800add4:	e0e7      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800add6:	2300      	movs	r3, #0
 800add8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adda:	e0e4      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800addc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ade0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800ade4:	430b      	orrs	r3, r1
 800ade6:	f040 808d 	bne.w	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800adea:	4b42      	ldr	r3, [pc, #264]	@ (800aef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800adec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800adee:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800adf2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800adf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800adfa:	d06b      	beq.n	800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800adfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ae02:	d874      	bhi.n	800aeee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ae04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae0a:	d056      	beq.n	800aeba <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800ae0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae12:	d86c      	bhi.n	800aeee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ae14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ae1a:	d03b      	beq.n	800ae94 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800ae1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ae22:	d864      	bhi.n	800aeee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ae24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae2a:	d021      	beq.n	800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800ae2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae32:	d85c      	bhi.n	800aeee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ae34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d004      	beq.n	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800ae3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae40:	d004      	beq.n	800ae4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800ae42:	e054      	b.n	800aeee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ae44:	f000 f8b8 	bl	800afb8 <HAL_RCCEx_GetD3PCLK1Freq>
 800ae48:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ae4a:	e0ac      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae4c:	4b29      	ldr	r3, [pc, #164]	@ (800aef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ae58:	d107      	bne.n	800ae6a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae5a:	f107 0318 	add.w	r3, r7, #24
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f000 f8c0 	bl	800afe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ae64:	69fb      	ldr	r3, [r7, #28]
 800ae66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae68:	e09d      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae6e:	e09a      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae70:	4b20      	ldr	r3, [pc, #128]	@ (800aef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ae78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae7c:	d107      	bne.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae7e:	f107 030c 	add.w	r3, r7, #12
 800ae82:	4618      	mov	r0, r3
 800ae84:	f000 fa02 	bl	800b28c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae8c:	e08b      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae92:	e088      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ae94:	4b17      	ldr	r3, [pc, #92]	@ (800aef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f003 0304 	and.w	r3, r3, #4
 800ae9c:	2b04      	cmp	r3, #4
 800ae9e:	d109      	bne.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aea0:	4b14      	ldr	r3, [pc, #80]	@ (800aef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	08db      	lsrs	r3, r3, #3
 800aea6:	f003 0303 	and.w	r3, r3, #3
 800aeaa:	4a13      	ldr	r2, [pc, #76]	@ (800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800aeac:	fa22 f303 	lsr.w	r3, r2, r3
 800aeb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aeb2:	e078      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aeb8:	e075      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800aeba:	4b0e      	ldr	r3, [pc, #56]	@ (800aef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aec2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aec6:	d102      	bne.n	800aece <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800aec8:	4b0c      	ldr	r3, [pc, #48]	@ (800aefc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800aeca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aecc:	e06b      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aece:	2300      	movs	r3, #0
 800aed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aed2:	e068      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aed4:	4b07      	ldr	r3, [pc, #28]	@ (800aef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aedc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aee0:	d102      	bne.n	800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800aee2:	4b07      	ldr	r3, [pc, #28]	@ (800af00 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800aee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aee6:	e05e      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aee8:	2300      	movs	r3, #0
 800aeea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aeec:	e05b      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800aeee:	2300      	movs	r3, #0
 800aef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aef2:	e058      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aef4:	58024400 	.word	0x58024400
 800aef8:	03d09000 	.word	0x03d09000
 800aefc:	003d0900 	.word	0x003d0900
 800af00:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800af04:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af08:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800af0c:	430b      	orrs	r3, r1
 800af0e:	d148      	bne.n	800afa2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800af10:	4b27      	ldr	r3, [pc, #156]	@ (800afb0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800af12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af14:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800af18:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800af1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af20:	d02a      	beq.n	800af78 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800af22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af28:	d838      	bhi.n	800af9c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800af2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d004      	beq.n	800af3a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800af30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af36:	d00d      	beq.n	800af54 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800af38:	e030      	b.n	800af9c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800af3a:	4b1d      	ldr	r3, [pc, #116]	@ (800afb0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af46:	d102      	bne.n	800af4e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800af48:	4b1a      	ldr	r3, [pc, #104]	@ (800afb4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800af4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af4c:	e02b      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af4e:	2300      	movs	r3, #0
 800af50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af52:	e028      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800af54:	4b16      	ldr	r3, [pc, #88]	@ (800afb0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800af60:	d107      	bne.n	800af72 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800af66:	4618      	mov	r0, r3
 800af68:	f000 fae4 	bl	800b534 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af70:	e019      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af72:	2300      	movs	r3, #0
 800af74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af76:	e016      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af78:	4b0d      	ldr	r3, [pc, #52]	@ (800afb0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af84:	d107      	bne.n	800af96 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af86:	f107 0318 	add.w	r3, r7, #24
 800af8a:	4618      	mov	r0, r3
 800af8c:	f000 f82a 	bl	800afe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800af90:	69fb      	ldr	r3, [r7, #28]
 800af92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af94:	e007      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af96:	2300      	movs	r3, #0
 800af98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af9a:	e004      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800af9c:	2300      	movs	r3, #0
 800af9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afa0:	e001      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800afa2:	2300      	movs	r3, #0
 800afa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800afa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	3740      	adds	r7, #64	@ 0x40
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}
 800afb0:	58024400 	.word	0x58024400
 800afb4:	017d7840 	.word	0x017d7840

0800afb8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800afbc:	f7fe f816 	bl	8008fec <HAL_RCC_GetHCLKFreq>
 800afc0:	4602      	mov	r2, r0
 800afc2:	4b06      	ldr	r3, [pc, #24]	@ (800afdc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800afc4:	6a1b      	ldr	r3, [r3, #32]
 800afc6:	091b      	lsrs	r3, r3, #4
 800afc8:	f003 0307 	and.w	r3, r3, #7
 800afcc:	4904      	ldr	r1, [pc, #16]	@ (800afe0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800afce:	5ccb      	ldrb	r3, [r1, r3]
 800afd0:	f003 031f 	and.w	r3, r3, #31
 800afd4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800afd8:	4618      	mov	r0, r3
 800afda:	bd80      	pop	{r7, pc}
 800afdc:	58024400 	.word	0x58024400
 800afe0:	08015084 	.word	0x08015084

0800afe4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b089      	sub	sp, #36	@ 0x24
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800afec:	4ba1      	ldr	r3, [pc, #644]	@ (800b274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aff0:	f003 0303 	and.w	r3, r3, #3
 800aff4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800aff6:	4b9f      	ldr	r3, [pc, #636]	@ (800b274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800affa:	0b1b      	lsrs	r3, r3, #12
 800affc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b000:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b002:	4b9c      	ldr	r3, [pc, #624]	@ (800b274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b006:	091b      	lsrs	r3, r3, #4
 800b008:	f003 0301 	and.w	r3, r3, #1
 800b00c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b00e:	4b99      	ldr	r3, [pc, #612]	@ (800b274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b012:	08db      	lsrs	r3, r3, #3
 800b014:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b018:	693a      	ldr	r2, [r7, #16]
 800b01a:	fb02 f303 	mul.w	r3, r2, r3
 800b01e:	ee07 3a90 	vmov	s15, r3
 800b022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b026:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	f000 8111 	beq.w	800b254 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b032:	69bb      	ldr	r3, [r7, #24]
 800b034:	2b02      	cmp	r3, #2
 800b036:	f000 8083 	beq.w	800b140 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b03a:	69bb      	ldr	r3, [r7, #24]
 800b03c:	2b02      	cmp	r3, #2
 800b03e:	f200 80a1 	bhi.w	800b184 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b042:	69bb      	ldr	r3, [r7, #24]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d003      	beq.n	800b050 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b048:	69bb      	ldr	r3, [r7, #24]
 800b04a:	2b01      	cmp	r3, #1
 800b04c:	d056      	beq.n	800b0fc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b04e:	e099      	b.n	800b184 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b050:	4b88      	ldr	r3, [pc, #544]	@ (800b274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f003 0320 	and.w	r3, r3, #32
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d02d      	beq.n	800b0b8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b05c:	4b85      	ldr	r3, [pc, #532]	@ (800b274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	08db      	lsrs	r3, r3, #3
 800b062:	f003 0303 	and.w	r3, r3, #3
 800b066:	4a84      	ldr	r2, [pc, #528]	@ (800b278 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b068:	fa22 f303 	lsr.w	r3, r2, r3
 800b06c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	ee07 3a90 	vmov	s15, r3
 800b074:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	ee07 3a90 	vmov	s15, r3
 800b07e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b086:	4b7b      	ldr	r3, [pc, #492]	@ (800b274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b08a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b08e:	ee07 3a90 	vmov	s15, r3
 800b092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b096:	ed97 6a03 	vldr	s12, [r7, #12]
 800b09a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b27c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b09e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b0aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b0b6:	e087      	b.n	800b1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	ee07 3a90 	vmov	s15, r3
 800b0be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0c2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b280 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b0c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0ca:	4b6a      	ldr	r3, [pc, #424]	@ (800b274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0d2:	ee07 3a90 	vmov	s15, r3
 800b0d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0da:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0de:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b27c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b0e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b0ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0fa:	e065      	b.n	800b1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	ee07 3a90 	vmov	s15, r3
 800b102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b106:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b284 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b10a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b10e:	4b59      	ldr	r3, [pc, #356]	@ (800b274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b116:	ee07 3a90 	vmov	s15, r3
 800b11a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b11e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b122:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b27c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b12a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b12e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b13a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b13e:	e043      	b.n	800b1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	ee07 3a90 	vmov	s15, r3
 800b146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b14a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b288 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b14e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b152:	4b48      	ldr	r3, [pc, #288]	@ (800b274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b15a:	ee07 3a90 	vmov	s15, r3
 800b15e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b162:	ed97 6a03 	vldr	s12, [r7, #12]
 800b166:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b27c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b16a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b16e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b172:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b17a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b17e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b182:	e021      	b.n	800b1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	ee07 3a90 	vmov	s15, r3
 800b18a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b18e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b284 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b196:	4b37      	ldr	r3, [pc, #220]	@ (800b274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b19a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b19e:	ee07 3a90 	vmov	s15, r3
 800b1a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1aa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b27c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b1ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1c6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b1c8:	4b2a      	ldr	r3, [pc, #168]	@ (800b274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1cc:	0a5b      	lsrs	r3, r3, #9
 800b1ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b1d2:	ee07 3a90 	vmov	s15, r3
 800b1d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b1de:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1ee:	ee17 2a90 	vmov	r2, s15
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b1f6:	4b1f      	ldr	r3, [pc, #124]	@ (800b274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1fa:	0c1b      	lsrs	r3, r3, #16
 800b1fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b200:	ee07 3a90 	vmov	s15, r3
 800b204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b208:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b20c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b210:	edd7 6a07 	vldr	s13, [r7, #28]
 800b214:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b21c:	ee17 2a90 	vmov	r2, s15
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b224:	4b13      	ldr	r3, [pc, #76]	@ (800b274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b228:	0e1b      	lsrs	r3, r3, #24
 800b22a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b22e:	ee07 3a90 	vmov	s15, r3
 800b232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b236:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b23a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b23e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b242:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b246:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b24a:	ee17 2a90 	vmov	r2, s15
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b252:	e008      	b.n	800b266 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2200      	movs	r2, #0
 800b258:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2200      	movs	r2, #0
 800b25e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2200      	movs	r2, #0
 800b264:	609a      	str	r2, [r3, #8]
}
 800b266:	bf00      	nop
 800b268:	3724      	adds	r7, #36	@ 0x24
 800b26a:	46bd      	mov	sp, r7
 800b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b270:	4770      	bx	lr
 800b272:	bf00      	nop
 800b274:	58024400 	.word	0x58024400
 800b278:	03d09000 	.word	0x03d09000
 800b27c:	46000000 	.word	0x46000000
 800b280:	4c742400 	.word	0x4c742400
 800b284:	4a742400 	.word	0x4a742400
 800b288:	4bbebc20 	.word	0x4bbebc20

0800b28c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b28c:	b480      	push	{r7}
 800b28e:	b089      	sub	sp, #36	@ 0x24
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b294:	4ba1      	ldr	r3, [pc, #644]	@ (800b51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b298:	f003 0303 	and.w	r3, r3, #3
 800b29c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b29e:	4b9f      	ldr	r3, [pc, #636]	@ (800b51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2a2:	0d1b      	lsrs	r3, r3, #20
 800b2a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b2a8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b2aa:	4b9c      	ldr	r3, [pc, #624]	@ (800b51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2ae:	0a1b      	lsrs	r3, r3, #8
 800b2b0:	f003 0301 	and.w	r3, r3, #1
 800b2b4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b2b6:	4b99      	ldr	r3, [pc, #612]	@ (800b51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2ba:	08db      	lsrs	r3, r3, #3
 800b2bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b2c0:	693a      	ldr	r2, [r7, #16]
 800b2c2:	fb02 f303 	mul.w	r3, r2, r3
 800b2c6:	ee07 3a90 	vmov	s15, r3
 800b2ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	f000 8111 	beq.w	800b4fc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b2da:	69bb      	ldr	r3, [r7, #24]
 800b2dc:	2b02      	cmp	r3, #2
 800b2de:	f000 8083 	beq.w	800b3e8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b2e2:	69bb      	ldr	r3, [r7, #24]
 800b2e4:	2b02      	cmp	r3, #2
 800b2e6:	f200 80a1 	bhi.w	800b42c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b2ea:	69bb      	ldr	r3, [r7, #24]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d003      	beq.n	800b2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b2f0:	69bb      	ldr	r3, [r7, #24]
 800b2f2:	2b01      	cmp	r3, #1
 800b2f4:	d056      	beq.n	800b3a4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b2f6:	e099      	b.n	800b42c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2f8:	4b88      	ldr	r3, [pc, #544]	@ (800b51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f003 0320 	and.w	r3, r3, #32
 800b300:	2b00      	cmp	r3, #0
 800b302:	d02d      	beq.n	800b360 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b304:	4b85      	ldr	r3, [pc, #532]	@ (800b51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	08db      	lsrs	r3, r3, #3
 800b30a:	f003 0303 	and.w	r3, r3, #3
 800b30e:	4a84      	ldr	r2, [pc, #528]	@ (800b520 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b310:	fa22 f303 	lsr.w	r3, r2, r3
 800b314:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	ee07 3a90 	vmov	s15, r3
 800b31c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	ee07 3a90 	vmov	s15, r3
 800b326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b32a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b32e:	4b7b      	ldr	r3, [pc, #492]	@ (800b51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b336:	ee07 3a90 	vmov	s15, r3
 800b33a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b33e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b342:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b524 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b34a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b34e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b35a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b35e:	e087      	b.n	800b470 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	ee07 3a90 	vmov	s15, r3
 800b366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b36a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b528 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b36e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b372:	4b6a      	ldr	r3, [pc, #424]	@ (800b51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b37a:	ee07 3a90 	vmov	s15, r3
 800b37e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b382:	ed97 6a03 	vldr	s12, [r7, #12]
 800b386:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b524 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b38a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b38e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b392:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b39a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b39e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3a2:	e065      	b.n	800b470 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	ee07 3a90 	vmov	s15, r3
 800b3aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3ae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b52c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b3b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3b6:	4b59      	ldr	r3, [pc, #356]	@ (800b51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3be:	ee07 3a90 	vmov	s15, r3
 800b3c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3ca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b524 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b3ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3e6:	e043      	b.n	800b470 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	ee07 3a90 	vmov	s15, r3
 800b3ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3f2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b530 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b3f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3fa:	4b48      	ldr	r3, [pc, #288]	@ (800b51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b402:	ee07 3a90 	vmov	s15, r3
 800b406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b40a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b40e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b524 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b41a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b41e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b422:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b426:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b42a:	e021      	b.n	800b470 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	ee07 3a90 	vmov	s15, r3
 800b432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b436:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b52c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b43a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b43e:	4b37      	ldr	r3, [pc, #220]	@ (800b51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b446:	ee07 3a90 	vmov	s15, r3
 800b44a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b44e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b452:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b524 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b45a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b45e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b46a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b46e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b470:	4b2a      	ldr	r3, [pc, #168]	@ (800b51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b474:	0a5b      	lsrs	r3, r3, #9
 800b476:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b47a:	ee07 3a90 	vmov	s15, r3
 800b47e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b482:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b486:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b48a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b48e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b492:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b496:	ee17 2a90 	vmov	r2, s15
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b49e:	4b1f      	ldr	r3, [pc, #124]	@ (800b51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4a2:	0c1b      	lsrs	r3, r3, #16
 800b4a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4a8:	ee07 3a90 	vmov	s15, r3
 800b4ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b4b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4c4:	ee17 2a90 	vmov	r2, s15
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b4cc:	4b13      	ldr	r3, [pc, #76]	@ (800b51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4d0:	0e1b      	lsrs	r3, r3, #24
 800b4d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4d6:	ee07 3a90 	vmov	s15, r3
 800b4da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b4e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4f2:	ee17 2a90 	vmov	r2, s15
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b4fa:	e008      	b.n	800b50e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2200      	movs	r2, #0
 800b500:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2200      	movs	r2, #0
 800b506:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2200      	movs	r2, #0
 800b50c:	609a      	str	r2, [r3, #8]
}
 800b50e:	bf00      	nop
 800b510:	3724      	adds	r7, #36	@ 0x24
 800b512:	46bd      	mov	sp, r7
 800b514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b518:	4770      	bx	lr
 800b51a:	bf00      	nop
 800b51c:	58024400 	.word	0x58024400
 800b520:	03d09000 	.word	0x03d09000
 800b524:	46000000 	.word	0x46000000
 800b528:	4c742400 	.word	0x4c742400
 800b52c:	4a742400 	.word	0x4a742400
 800b530:	4bbebc20 	.word	0x4bbebc20

0800b534 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b534:	b480      	push	{r7}
 800b536:	b089      	sub	sp, #36	@ 0x24
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b53c:	4ba0      	ldr	r3, [pc, #640]	@ (800b7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b53e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b540:	f003 0303 	and.w	r3, r3, #3
 800b544:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b546:	4b9e      	ldr	r3, [pc, #632]	@ (800b7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b54a:	091b      	lsrs	r3, r3, #4
 800b54c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b550:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b552:	4b9b      	ldr	r3, [pc, #620]	@ (800b7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b556:	f003 0301 	and.w	r3, r3, #1
 800b55a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b55c:	4b98      	ldr	r3, [pc, #608]	@ (800b7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b55e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b560:	08db      	lsrs	r3, r3, #3
 800b562:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b566:	693a      	ldr	r2, [r7, #16]
 800b568:	fb02 f303 	mul.w	r3, r2, r3
 800b56c:	ee07 3a90 	vmov	s15, r3
 800b570:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b574:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	f000 8111 	beq.w	800b7a2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b580:	69bb      	ldr	r3, [r7, #24]
 800b582:	2b02      	cmp	r3, #2
 800b584:	f000 8083 	beq.w	800b68e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b588:	69bb      	ldr	r3, [r7, #24]
 800b58a:	2b02      	cmp	r3, #2
 800b58c:	f200 80a1 	bhi.w	800b6d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b590:	69bb      	ldr	r3, [r7, #24]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d003      	beq.n	800b59e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b596:	69bb      	ldr	r3, [r7, #24]
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d056      	beq.n	800b64a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b59c:	e099      	b.n	800b6d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b59e:	4b88      	ldr	r3, [pc, #544]	@ (800b7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	f003 0320 	and.w	r3, r3, #32
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d02d      	beq.n	800b606 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b5aa:	4b85      	ldr	r3, [pc, #532]	@ (800b7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	08db      	lsrs	r3, r3, #3
 800b5b0:	f003 0303 	and.w	r3, r3, #3
 800b5b4:	4a83      	ldr	r2, [pc, #524]	@ (800b7c4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b5b6:	fa22 f303 	lsr.w	r3, r2, r3
 800b5ba:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	ee07 3a90 	vmov	s15, r3
 800b5c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	ee07 3a90 	vmov	s15, r3
 800b5cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5d4:	4b7a      	ldr	r3, [pc, #488]	@ (800b7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5dc:	ee07 3a90 	vmov	s15, r3
 800b5e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5e4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5e8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b5ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b600:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b604:	e087      	b.n	800b716 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	ee07 3a90 	vmov	s15, r3
 800b60c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b610:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b7cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b614:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b618:	4b69      	ldr	r3, [pc, #420]	@ (800b7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b61a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b61c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b620:	ee07 3a90 	vmov	s15, r3
 800b624:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b628:	ed97 6a03 	vldr	s12, [r7, #12]
 800b62c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b630:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b634:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b638:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b63c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b640:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b644:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b648:	e065      	b.n	800b716 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	ee07 3a90 	vmov	s15, r3
 800b650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b654:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b7d0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b658:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b65c:	4b58      	ldr	r3, [pc, #352]	@ (800b7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b65e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b664:	ee07 3a90 	vmov	s15, r3
 800b668:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b66c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b670:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b674:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b678:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b67c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b680:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b684:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b688:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b68c:	e043      	b.n	800b716 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	ee07 3a90 	vmov	s15, r3
 800b694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b698:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b69c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6a0:	4b47      	ldr	r3, [pc, #284]	@ (800b7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6a8:	ee07 3a90 	vmov	s15, r3
 800b6ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6b0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6b4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b6b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b6c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6d0:	e021      	b.n	800b716 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	ee07 3a90 	vmov	s15, r3
 800b6d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6dc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b7cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b6e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6e4:	4b36      	ldr	r3, [pc, #216]	@ (800b7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6ec:	ee07 3a90 	vmov	s15, r3
 800b6f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6f4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6f8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b6fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b700:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b704:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b708:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b70c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b710:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b714:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b716:	4b2a      	ldr	r3, [pc, #168]	@ (800b7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b71a:	0a5b      	lsrs	r3, r3, #9
 800b71c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b720:	ee07 3a90 	vmov	s15, r3
 800b724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b728:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b72c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b730:	edd7 6a07 	vldr	s13, [r7, #28]
 800b734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b738:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b73c:	ee17 2a90 	vmov	r2, s15
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b744:	4b1e      	ldr	r3, [pc, #120]	@ (800b7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b748:	0c1b      	lsrs	r3, r3, #16
 800b74a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b74e:	ee07 3a90 	vmov	s15, r3
 800b752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b756:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b75a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b75e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b762:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b766:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b76a:	ee17 2a90 	vmov	r2, s15
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b772:	4b13      	ldr	r3, [pc, #76]	@ (800b7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b776:	0e1b      	lsrs	r3, r3, #24
 800b778:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b77c:	ee07 3a90 	vmov	s15, r3
 800b780:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b784:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b788:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b78c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b790:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b794:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b798:	ee17 2a90 	vmov	r2, s15
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b7a0:	e008      	b.n	800b7b4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	609a      	str	r2, [r3, #8]
}
 800b7b4:	bf00      	nop
 800b7b6:	3724      	adds	r7, #36	@ 0x24
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7be:	4770      	bx	lr
 800b7c0:	58024400 	.word	0x58024400
 800b7c4:	03d09000 	.word	0x03d09000
 800b7c8:	46000000 	.word	0x46000000
 800b7cc:	4c742400 	.word	0x4c742400
 800b7d0:	4a742400 	.word	0x4a742400
 800b7d4:	4bbebc20 	.word	0x4bbebc20

0800b7d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b084      	sub	sp, #16
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b7e6:	4b53      	ldr	r3, [pc, #332]	@ (800b934 <RCCEx_PLL2_Config+0x15c>)
 800b7e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7ea:	f003 0303 	and.w	r3, r3, #3
 800b7ee:	2b03      	cmp	r3, #3
 800b7f0:	d101      	bne.n	800b7f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	e099      	b.n	800b92a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b7f6:	4b4f      	ldr	r3, [pc, #316]	@ (800b934 <RCCEx_PLL2_Config+0x15c>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	4a4e      	ldr	r2, [pc, #312]	@ (800b934 <RCCEx_PLL2_Config+0x15c>)
 800b7fc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b800:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b802:	f7f7 f961 	bl	8002ac8 <HAL_GetTick>
 800b806:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b808:	e008      	b.n	800b81c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b80a:	f7f7 f95d 	bl	8002ac8 <HAL_GetTick>
 800b80e:	4602      	mov	r2, r0
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	1ad3      	subs	r3, r2, r3
 800b814:	2b02      	cmp	r3, #2
 800b816:	d901      	bls.n	800b81c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b818:	2303      	movs	r3, #3
 800b81a:	e086      	b.n	800b92a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b81c:	4b45      	ldr	r3, [pc, #276]	@ (800b934 <RCCEx_PLL2_Config+0x15c>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b824:	2b00      	cmp	r3, #0
 800b826:	d1f0      	bne.n	800b80a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b828:	4b42      	ldr	r3, [pc, #264]	@ (800b934 <RCCEx_PLL2_Config+0x15c>)
 800b82a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b82c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	031b      	lsls	r3, r3, #12
 800b836:	493f      	ldr	r1, [pc, #252]	@ (800b934 <RCCEx_PLL2_Config+0x15c>)
 800b838:	4313      	orrs	r3, r2
 800b83a:	628b      	str	r3, [r1, #40]	@ 0x28
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	685b      	ldr	r3, [r3, #4]
 800b840:	3b01      	subs	r3, #1
 800b842:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	689b      	ldr	r3, [r3, #8]
 800b84a:	3b01      	subs	r3, #1
 800b84c:	025b      	lsls	r3, r3, #9
 800b84e:	b29b      	uxth	r3, r3
 800b850:	431a      	orrs	r2, r3
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	68db      	ldr	r3, [r3, #12]
 800b856:	3b01      	subs	r3, #1
 800b858:	041b      	lsls	r3, r3, #16
 800b85a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b85e:	431a      	orrs	r2, r3
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	691b      	ldr	r3, [r3, #16]
 800b864:	3b01      	subs	r3, #1
 800b866:	061b      	lsls	r3, r3, #24
 800b868:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b86c:	4931      	ldr	r1, [pc, #196]	@ (800b934 <RCCEx_PLL2_Config+0x15c>)
 800b86e:	4313      	orrs	r3, r2
 800b870:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b872:	4b30      	ldr	r3, [pc, #192]	@ (800b934 <RCCEx_PLL2_Config+0x15c>)
 800b874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b876:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	695b      	ldr	r3, [r3, #20]
 800b87e:	492d      	ldr	r1, [pc, #180]	@ (800b934 <RCCEx_PLL2_Config+0x15c>)
 800b880:	4313      	orrs	r3, r2
 800b882:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b884:	4b2b      	ldr	r3, [pc, #172]	@ (800b934 <RCCEx_PLL2_Config+0x15c>)
 800b886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b888:	f023 0220 	bic.w	r2, r3, #32
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	699b      	ldr	r3, [r3, #24]
 800b890:	4928      	ldr	r1, [pc, #160]	@ (800b934 <RCCEx_PLL2_Config+0x15c>)
 800b892:	4313      	orrs	r3, r2
 800b894:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b896:	4b27      	ldr	r3, [pc, #156]	@ (800b934 <RCCEx_PLL2_Config+0x15c>)
 800b898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b89a:	4a26      	ldr	r2, [pc, #152]	@ (800b934 <RCCEx_PLL2_Config+0x15c>)
 800b89c:	f023 0310 	bic.w	r3, r3, #16
 800b8a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b8a2:	4b24      	ldr	r3, [pc, #144]	@ (800b934 <RCCEx_PLL2_Config+0x15c>)
 800b8a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b8a6:	4b24      	ldr	r3, [pc, #144]	@ (800b938 <RCCEx_PLL2_Config+0x160>)
 800b8a8:	4013      	ands	r3, r2
 800b8aa:	687a      	ldr	r2, [r7, #4]
 800b8ac:	69d2      	ldr	r2, [r2, #28]
 800b8ae:	00d2      	lsls	r2, r2, #3
 800b8b0:	4920      	ldr	r1, [pc, #128]	@ (800b934 <RCCEx_PLL2_Config+0x15c>)
 800b8b2:	4313      	orrs	r3, r2
 800b8b4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b8b6:	4b1f      	ldr	r3, [pc, #124]	@ (800b934 <RCCEx_PLL2_Config+0x15c>)
 800b8b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8ba:	4a1e      	ldr	r2, [pc, #120]	@ (800b934 <RCCEx_PLL2_Config+0x15c>)
 800b8bc:	f043 0310 	orr.w	r3, r3, #16
 800b8c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d106      	bne.n	800b8d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b8c8:	4b1a      	ldr	r3, [pc, #104]	@ (800b934 <RCCEx_PLL2_Config+0x15c>)
 800b8ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8cc:	4a19      	ldr	r2, [pc, #100]	@ (800b934 <RCCEx_PLL2_Config+0x15c>)
 800b8ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b8d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b8d4:	e00f      	b.n	800b8f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d106      	bne.n	800b8ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b8dc:	4b15      	ldr	r3, [pc, #84]	@ (800b934 <RCCEx_PLL2_Config+0x15c>)
 800b8de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8e0:	4a14      	ldr	r2, [pc, #80]	@ (800b934 <RCCEx_PLL2_Config+0x15c>)
 800b8e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b8e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b8e8:	e005      	b.n	800b8f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b8ea:	4b12      	ldr	r3, [pc, #72]	@ (800b934 <RCCEx_PLL2_Config+0x15c>)
 800b8ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8ee:	4a11      	ldr	r2, [pc, #68]	@ (800b934 <RCCEx_PLL2_Config+0x15c>)
 800b8f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b8f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b8f6:	4b0f      	ldr	r3, [pc, #60]	@ (800b934 <RCCEx_PLL2_Config+0x15c>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	4a0e      	ldr	r2, [pc, #56]	@ (800b934 <RCCEx_PLL2_Config+0x15c>)
 800b8fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b900:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b902:	f7f7 f8e1 	bl	8002ac8 <HAL_GetTick>
 800b906:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b908:	e008      	b.n	800b91c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b90a:	f7f7 f8dd 	bl	8002ac8 <HAL_GetTick>
 800b90e:	4602      	mov	r2, r0
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	1ad3      	subs	r3, r2, r3
 800b914:	2b02      	cmp	r3, #2
 800b916:	d901      	bls.n	800b91c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b918:	2303      	movs	r3, #3
 800b91a:	e006      	b.n	800b92a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b91c:	4b05      	ldr	r3, [pc, #20]	@ (800b934 <RCCEx_PLL2_Config+0x15c>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b924:	2b00      	cmp	r3, #0
 800b926:	d0f0      	beq.n	800b90a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b928:	7bfb      	ldrb	r3, [r7, #15]
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3710      	adds	r7, #16
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}
 800b932:	bf00      	nop
 800b934:	58024400 	.word	0x58024400
 800b938:	ffff0007 	.word	0xffff0007

0800b93c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b084      	sub	sp, #16
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
 800b944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b946:	2300      	movs	r3, #0
 800b948:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b94a:	4b53      	ldr	r3, [pc, #332]	@ (800ba98 <RCCEx_PLL3_Config+0x15c>)
 800b94c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b94e:	f003 0303 	and.w	r3, r3, #3
 800b952:	2b03      	cmp	r3, #3
 800b954:	d101      	bne.n	800b95a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b956:	2301      	movs	r3, #1
 800b958:	e099      	b.n	800ba8e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b95a:	4b4f      	ldr	r3, [pc, #316]	@ (800ba98 <RCCEx_PLL3_Config+0x15c>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	4a4e      	ldr	r2, [pc, #312]	@ (800ba98 <RCCEx_PLL3_Config+0x15c>)
 800b960:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b964:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b966:	f7f7 f8af 	bl	8002ac8 <HAL_GetTick>
 800b96a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b96c:	e008      	b.n	800b980 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b96e:	f7f7 f8ab 	bl	8002ac8 <HAL_GetTick>
 800b972:	4602      	mov	r2, r0
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	1ad3      	subs	r3, r2, r3
 800b978:	2b02      	cmp	r3, #2
 800b97a:	d901      	bls.n	800b980 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b97c:	2303      	movs	r3, #3
 800b97e:	e086      	b.n	800ba8e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b980:	4b45      	ldr	r3, [pc, #276]	@ (800ba98 <RCCEx_PLL3_Config+0x15c>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d1f0      	bne.n	800b96e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b98c:	4b42      	ldr	r3, [pc, #264]	@ (800ba98 <RCCEx_PLL3_Config+0x15c>)
 800b98e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b990:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	051b      	lsls	r3, r3, #20
 800b99a:	493f      	ldr	r1, [pc, #252]	@ (800ba98 <RCCEx_PLL3_Config+0x15c>)
 800b99c:	4313      	orrs	r3, r2
 800b99e:	628b      	str	r3, [r1, #40]	@ 0x28
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	685b      	ldr	r3, [r3, #4]
 800b9a4:	3b01      	subs	r3, #1
 800b9a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	689b      	ldr	r3, [r3, #8]
 800b9ae:	3b01      	subs	r3, #1
 800b9b0:	025b      	lsls	r3, r3, #9
 800b9b2:	b29b      	uxth	r3, r3
 800b9b4:	431a      	orrs	r2, r3
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	68db      	ldr	r3, [r3, #12]
 800b9ba:	3b01      	subs	r3, #1
 800b9bc:	041b      	lsls	r3, r3, #16
 800b9be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b9c2:	431a      	orrs	r2, r3
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	691b      	ldr	r3, [r3, #16]
 800b9c8:	3b01      	subs	r3, #1
 800b9ca:	061b      	lsls	r3, r3, #24
 800b9cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b9d0:	4931      	ldr	r1, [pc, #196]	@ (800ba98 <RCCEx_PLL3_Config+0x15c>)
 800b9d2:	4313      	orrs	r3, r2
 800b9d4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b9d6:	4b30      	ldr	r3, [pc, #192]	@ (800ba98 <RCCEx_PLL3_Config+0x15c>)
 800b9d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	695b      	ldr	r3, [r3, #20]
 800b9e2:	492d      	ldr	r1, [pc, #180]	@ (800ba98 <RCCEx_PLL3_Config+0x15c>)
 800b9e4:	4313      	orrs	r3, r2
 800b9e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b9e8:	4b2b      	ldr	r3, [pc, #172]	@ (800ba98 <RCCEx_PLL3_Config+0x15c>)
 800b9ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	699b      	ldr	r3, [r3, #24]
 800b9f4:	4928      	ldr	r1, [pc, #160]	@ (800ba98 <RCCEx_PLL3_Config+0x15c>)
 800b9f6:	4313      	orrs	r3, r2
 800b9f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b9fa:	4b27      	ldr	r3, [pc, #156]	@ (800ba98 <RCCEx_PLL3_Config+0x15c>)
 800b9fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9fe:	4a26      	ldr	r2, [pc, #152]	@ (800ba98 <RCCEx_PLL3_Config+0x15c>)
 800ba00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ba04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ba06:	4b24      	ldr	r3, [pc, #144]	@ (800ba98 <RCCEx_PLL3_Config+0x15c>)
 800ba08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ba0a:	4b24      	ldr	r3, [pc, #144]	@ (800ba9c <RCCEx_PLL3_Config+0x160>)
 800ba0c:	4013      	ands	r3, r2
 800ba0e:	687a      	ldr	r2, [r7, #4]
 800ba10:	69d2      	ldr	r2, [r2, #28]
 800ba12:	00d2      	lsls	r2, r2, #3
 800ba14:	4920      	ldr	r1, [pc, #128]	@ (800ba98 <RCCEx_PLL3_Config+0x15c>)
 800ba16:	4313      	orrs	r3, r2
 800ba18:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ba1a:	4b1f      	ldr	r3, [pc, #124]	@ (800ba98 <RCCEx_PLL3_Config+0x15c>)
 800ba1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba1e:	4a1e      	ldr	r2, [pc, #120]	@ (800ba98 <RCCEx_PLL3_Config+0x15c>)
 800ba20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ba24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d106      	bne.n	800ba3a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ba2c:	4b1a      	ldr	r3, [pc, #104]	@ (800ba98 <RCCEx_PLL3_Config+0x15c>)
 800ba2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba30:	4a19      	ldr	r2, [pc, #100]	@ (800ba98 <RCCEx_PLL3_Config+0x15c>)
 800ba32:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800ba36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ba38:	e00f      	b.n	800ba5a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	d106      	bne.n	800ba4e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ba40:	4b15      	ldr	r3, [pc, #84]	@ (800ba98 <RCCEx_PLL3_Config+0x15c>)
 800ba42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba44:	4a14      	ldr	r2, [pc, #80]	@ (800ba98 <RCCEx_PLL3_Config+0x15c>)
 800ba46:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ba4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ba4c:	e005      	b.n	800ba5a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ba4e:	4b12      	ldr	r3, [pc, #72]	@ (800ba98 <RCCEx_PLL3_Config+0x15c>)
 800ba50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba52:	4a11      	ldr	r2, [pc, #68]	@ (800ba98 <RCCEx_PLL3_Config+0x15c>)
 800ba54:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ba58:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ba5a:	4b0f      	ldr	r3, [pc, #60]	@ (800ba98 <RCCEx_PLL3_Config+0x15c>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	4a0e      	ldr	r2, [pc, #56]	@ (800ba98 <RCCEx_PLL3_Config+0x15c>)
 800ba60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ba64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba66:	f7f7 f82f 	bl	8002ac8 <HAL_GetTick>
 800ba6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ba6c:	e008      	b.n	800ba80 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ba6e:	f7f7 f82b 	bl	8002ac8 <HAL_GetTick>
 800ba72:	4602      	mov	r2, r0
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	1ad3      	subs	r3, r2, r3
 800ba78:	2b02      	cmp	r3, #2
 800ba7a:	d901      	bls.n	800ba80 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ba7c:	2303      	movs	r3, #3
 800ba7e:	e006      	b.n	800ba8e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ba80:	4b05      	ldr	r3, [pc, #20]	@ (800ba98 <RCCEx_PLL3_Config+0x15c>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d0f0      	beq.n	800ba6e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ba8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3710      	adds	r7, #16
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}
 800ba96:	bf00      	nop
 800ba98:	58024400 	.word	0x58024400
 800ba9c:	ffff0007 	.word	0xffff0007

0800baa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b082      	sub	sp, #8
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d101      	bne.n	800bab2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800baae:	2301      	movs	r3, #1
 800bab0:	e049      	b.n	800bb46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bab8:	b2db      	uxtb	r3, r3
 800baba:	2b00      	cmp	r3, #0
 800babc:	d106      	bne.n	800bacc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2200      	movs	r2, #0
 800bac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f7f6 fce2 	bl	8002490 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2202      	movs	r2, #2
 800bad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681a      	ldr	r2, [r3, #0]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	3304      	adds	r3, #4
 800badc:	4619      	mov	r1, r3
 800bade:	4610      	mov	r0, r2
 800bae0:	f000 fea4 	bl	800c82c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2201      	movs	r2, #1
 800bae8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2201      	movs	r2, #1
 800baf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2201      	movs	r2, #1
 800baf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2201      	movs	r2, #1
 800bb00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2201      	movs	r2, #1
 800bb08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2201      	movs	r2, #1
 800bb10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2201      	movs	r2, #1
 800bb18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2201      	movs	r2, #1
 800bb20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2201      	movs	r2, #1
 800bb28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2201      	movs	r2, #1
 800bb30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2201      	movs	r2, #1
 800bb38:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2201      	movs	r2, #1
 800bb40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bb44:	2300      	movs	r3, #0
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3708      	adds	r7, #8
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
	...

0800bb50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bb50:	b480      	push	{r7}
 800bb52:	b085      	sub	sp, #20
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bb5e:	b2db      	uxtb	r3, r3
 800bb60:	2b01      	cmp	r3, #1
 800bb62:	d001      	beq.n	800bb68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bb64:	2301      	movs	r3, #1
 800bb66:	e054      	b.n	800bc12 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2202      	movs	r2, #2
 800bb6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	68da      	ldr	r2, [r3, #12]
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f042 0201 	orr.w	r2, r2, #1
 800bb7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	4a26      	ldr	r2, [pc, #152]	@ (800bc20 <HAL_TIM_Base_Start_IT+0xd0>)
 800bb86:	4293      	cmp	r3, r2
 800bb88:	d022      	beq.n	800bbd0 <HAL_TIM_Base_Start_IT+0x80>
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb92:	d01d      	beq.n	800bbd0 <HAL_TIM_Base_Start_IT+0x80>
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	4a22      	ldr	r2, [pc, #136]	@ (800bc24 <HAL_TIM_Base_Start_IT+0xd4>)
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d018      	beq.n	800bbd0 <HAL_TIM_Base_Start_IT+0x80>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	4a21      	ldr	r2, [pc, #132]	@ (800bc28 <HAL_TIM_Base_Start_IT+0xd8>)
 800bba4:	4293      	cmp	r3, r2
 800bba6:	d013      	beq.n	800bbd0 <HAL_TIM_Base_Start_IT+0x80>
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	4a1f      	ldr	r2, [pc, #124]	@ (800bc2c <HAL_TIM_Base_Start_IT+0xdc>)
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	d00e      	beq.n	800bbd0 <HAL_TIM_Base_Start_IT+0x80>
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	4a1e      	ldr	r2, [pc, #120]	@ (800bc30 <HAL_TIM_Base_Start_IT+0xe0>)
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	d009      	beq.n	800bbd0 <HAL_TIM_Base_Start_IT+0x80>
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	4a1c      	ldr	r2, [pc, #112]	@ (800bc34 <HAL_TIM_Base_Start_IT+0xe4>)
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	d004      	beq.n	800bbd0 <HAL_TIM_Base_Start_IT+0x80>
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	4a1b      	ldr	r2, [pc, #108]	@ (800bc38 <HAL_TIM_Base_Start_IT+0xe8>)
 800bbcc:	4293      	cmp	r3, r2
 800bbce:	d115      	bne.n	800bbfc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	689a      	ldr	r2, [r3, #8]
 800bbd6:	4b19      	ldr	r3, [pc, #100]	@ (800bc3c <HAL_TIM_Base_Start_IT+0xec>)
 800bbd8:	4013      	ands	r3, r2
 800bbda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	2b06      	cmp	r3, #6
 800bbe0:	d015      	beq.n	800bc0e <HAL_TIM_Base_Start_IT+0xbe>
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bbe8:	d011      	beq.n	800bc0e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	681a      	ldr	r2, [r3, #0]
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f042 0201 	orr.w	r2, r2, #1
 800bbf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bbfa:	e008      	b.n	800bc0e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	681a      	ldr	r2, [r3, #0]
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f042 0201 	orr.w	r2, r2, #1
 800bc0a:	601a      	str	r2, [r3, #0]
 800bc0c:	e000      	b.n	800bc10 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bc10:	2300      	movs	r3, #0
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3714      	adds	r7, #20
 800bc16:	46bd      	mov	sp, r7
 800bc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1c:	4770      	bx	lr
 800bc1e:	bf00      	nop
 800bc20:	40010000 	.word	0x40010000
 800bc24:	40000400 	.word	0x40000400
 800bc28:	40000800 	.word	0x40000800
 800bc2c:	40000c00 	.word	0x40000c00
 800bc30:	40010400 	.word	0x40010400
 800bc34:	40001800 	.word	0x40001800
 800bc38:	40014000 	.word	0x40014000
 800bc3c:	00010007 	.word	0x00010007

0800bc40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b082      	sub	sp, #8
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d101      	bne.n	800bc52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bc4e:	2301      	movs	r3, #1
 800bc50:	e049      	b.n	800bce6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bc58:	b2db      	uxtb	r3, r3
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d106      	bne.n	800bc6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2200      	movs	r2, #0
 800bc62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f7f6 fae6 	bl	8002238 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2202      	movs	r2, #2
 800bc70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681a      	ldr	r2, [r3, #0]
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	3304      	adds	r3, #4
 800bc7c:	4619      	mov	r1, r3
 800bc7e:	4610      	mov	r0, r2
 800bc80:	f000 fdd4 	bl	800c82c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2201      	movs	r2, #1
 800bc88:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2201      	movs	r2, #1
 800bc90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2201      	movs	r2, #1
 800bc98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2201      	movs	r2, #1
 800bca0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2201      	movs	r2, #1
 800bca8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2201      	movs	r2, #1
 800bcb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2201      	movs	r2, #1
 800bcb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2201      	movs	r2, #1
 800bcc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2201      	movs	r2, #1
 800bcc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2201      	movs	r2, #1
 800bcd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2201      	movs	r2, #1
 800bce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bce4:	2300      	movs	r3, #0
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3708      	adds	r7, #8
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}
	...

0800bcf0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b084      	sub	sp, #16
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
 800bcf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d109      	bne.n	800bd14 <HAL_TIM_PWM_Start+0x24>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bd06:	b2db      	uxtb	r3, r3
 800bd08:	2b01      	cmp	r3, #1
 800bd0a:	bf14      	ite	ne
 800bd0c:	2301      	movne	r3, #1
 800bd0e:	2300      	moveq	r3, #0
 800bd10:	b2db      	uxtb	r3, r3
 800bd12:	e03c      	b.n	800bd8e <HAL_TIM_PWM_Start+0x9e>
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	2b04      	cmp	r3, #4
 800bd18:	d109      	bne.n	800bd2e <HAL_TIM_PWM_Start+0x3e>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800bd20:	b2db      	uxtb	r3, r3
 800bd22:	2b01      	cmp	r3, #1
 800bd24:	bf14      	ite	ne
 800bd26:	2301      	movne	r3, #1
 800bd28:	2300      	moveq	r3, #0
 800bd2a:	b2db      	uxtb	r3, r3
 800bd2c:	e02f      	b.n	800bd8e <HAL_TIM_PWM_Start+0x9e>
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	2b08      	cmp	r3, #8
 800bd32:	d109      	bne.n	800bd48 <HAL_TIM_PWM_Start+0x58>
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bd3a:	b2db      	uxtb	r3, r3
 800bd3c:	2b01      	cmp	r3, #1
 800bd3e:	bf14      	ite	ne
 800bd40:	2301      	movne	r3, #1
 800bd42:	2300      	moveq	r3, #0
 800bd44:	b2db      	uxtb	r3, r3
 800bd46:	e022      	b.n	800bd8e <HAL_TIM_PWM_Start+0x9e>
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	2b0c      	cmp	r3, #12
 800bd4c:	d109      	bne.n	800bd62 <HAL_TIM_PWM_Start+0x72>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bd54:	b2db      	uxtb	r3, r3
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	bf14      	ite	ne
 800bd5a:	2301      	movne	r3, #1
 800bd5c:	2300      	moveq	r3, #0
 800bd5e:	b2db      	uxtb	r3, r3
 800bd60:	e015      	b.n	800bd8e <HAL_TIM_PWM_Start+0x9e>
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	2b10      	cmp	r3, #16
 800bd66:	d109      	bne.n	800bd7c <HAL_TIM_PWM_Start+0x8c>
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bd6e:	b2db      	uxtb	r3, r3
 800bd70:	2b01      	cmp	r3, #1
 800bd72:	bf14      	ite	ne
 800bd74:	2301      	movne	r3, #1
 800bd76:	2300      	moveq	r3, #0
 800bd78:	b2db      	uxtb	r3, r3
 800bd7a:	e008      	b.n	800bd8e <HAL_TIM_PWM_Start+0x9e>
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800bd82:	b2db      	uxtb	r3, r3
 800bd84:	2b01      	cmp	r3, #1
 800bd86:	bf14      	ite	ne
 800bd88:	2301      	movne	r3, #1
 800bd8a:	2300      	moveq	r3, #0
 800bd8c:	b2db      	uxtb	r3, r3
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d001      	beq.n	800bd96 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800bd92:	2301      	movs	r3, #1
 800bd94:	e0a1      	b.n	800beda <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d104      	bne.n	800bda6 <HAL_TIM_PWM_Start+0xb6>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2202      	movs	r2, #2
 800bda0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bda4:	e023      	b.n	800bdee <HAL_TIM_PWM_Start+0xfe>
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	2b04      	cmp	r3, #4
 800bdaa:	d104      	bne.n	800bdb6 <HAL_TIM_PWM_Start+0xc6>
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2202      	movs	r2, #2
 800bdb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bdb4:	e01b      	b.n	800bdee <HAL_TIM_PWM_Start+0xfe>
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	2b08      	cmp	r3, #8
 800bdba:	d104      	bne.n	800bdc6 <HAL_TIM_PWM_Start+0xd6>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2202      	movs	r2, #2
 800bdc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bdc4:	e013      	b.n	800bdee <HAL_TIM_PWM_Start+0xfe>
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	2b0c      	cmp	r3, #12
 800bdca:	d104      	bne.n	800bdd6 <HAL_TIM_PWM_Start+0xe6>
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2202      	movs	r2, #2
 800bdd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bdd4:	e00b      	b.n	800bdee <HAL_TIM_PWM_Start+0xfe>
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	2b10      	cmp	r3, #16
 800bdda:	d104      	bne.n	800bde6 <HAL_TIM_PWM_Start+0xf6>
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2202      	movs	r2, #2
 800bde0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bde4:	e003      	b.n	800bdee <HAL_TIM_PWM_Start+0xfe>
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2202      	movs	r2, #2
 800bdea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	2201      	movs	r2, #1
 800bdf4:	6839      	ldr	r1, [r7, #0]
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f001 f932 	bl	800d060 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	4a38      	ldr	r2, [pc, #224]	@ (800bee4 <HAL_TIM_PWM_Start+0x1f4>)
 800be02:	4293      	cmp	r3, r2
 800be04:	d013      	beq.n	800be2e <HAL_TIM_PWM_Start+0x13e>
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	4a37      	ldr	r2, [pc, #220]	@ (800bee8 <HAL_TIM_PWM_Start+0x1f8>)
 800be0c:	4293      	cmp	r3, r2
 800be0e:	d00e      	beq.n	800be2e <HAL_TIM_PWM_Start+0x13e>
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	4a35      	ldr	r2, [pc, #212]	@ (800beec <HAL_TIM_PWM_Start+0x1fc>)
 800be16:	4293      	cmp	r3, r2
 800be18:	d009      	beq.n	800be2e <HAL_TIM_PWM_Start+0x13e>
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	4a34      	ldr	r2, [pc, #208]	@ (800bef0 <HAL_TIM_PWM_Start+0x200>)
 800be20:	4293      	cmp	r3, r2
 800be22:	d004      	beq.n	800be2e <HAL_TIM_PWM_Start+0x13e>
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	4a32      	ldr	r2, [pc, #200]	@ (800bef4 <HAL_TIM_PWM_Start+0x204>)
 800be2a:	4293      	cmp	r3, r2
 800be2c:	d101      	bne.n	800be32 <HAL_TIM_PWM_Start+0x142>
 800be2e:	2301      	movs	r3, #1
 800be30:	e000      	b.n	800be34 <HAL_TIM_PWM_Start+0x144>
 800be32:	2300      	movs	r3, #0
 800be34:	2b00      	cmp	r3, #0
 800be36:	d007      	beq.n	800be48 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800be46:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	4a25      	ldr	r2, [pc, #148]	@ (800bee4 <HAL_TIM_PWM_Start+0x1f4>)
 800be4e:	4293      	cmp	r3, r2
 800be50:	d022      	beq.n	800be98 <HAL_TIM_PWM_Start+0x1a8>
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be5a:	d01d      	beq.n	800be98 <HAL_TIM_PWM_Start+0x1a8>
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	4a25      	ldr	r2, [pc, #148]	@ (800bef8 <HAL_TIM_PWM_Start+0x208>)
 800be62:	4293      	cmp	r3, r2
 800be64:	d018      	beq.n	800be98 <HAL_TIM_PWM_Start+0x1a8>
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	4a24      	ldr	r2, [pc, #144]	@ (800befc <HAL_TIM_PWM_Start+0x20c>)
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d013      	beq.n	800be98 <HAL_TIM_PWM_Start+0x1a8>
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	4a22      	ldr	r2, [pc, #136]	@ (800bf00 <HAL_TIM_PWM_Start+0x210>)
 800be76:	4293      	cmp	r3, r2
 800be78:	d00e      	beq.n	800be98 <HAL_TIM_PWM_Start+0x1a8>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	4a1a      	ldr	r2, [pc, #104]	@ (800bee8 <HAL_TIM_PWM_Start+0x1f8>)
 800be80:	4293      	cmp	r3, r2
 800be82:	d009      	beq.n	800be98 <HAL_TIM_PWM_Start+0x1a8>
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	4a1e      	ldr	r2, [pc, #120]	@ (800bf04 <HAL_TIM_PWM_Start+0x214>)
 800be8a:	4293      	cmp	r3, r2
 800be8c:	d004      	beq.n	800be98 <HAL_TIM_PWM_Start+0x1a8>
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	4a16      	ldr	r2, [pc, #88]	@ (800beec <HAL_TIM_PWM_Start+0x1fc>)
 800be94:	4293      	cmp	r3, r2
 800be96:	d115      	bne.n	800bec4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	689a      	ldr	r2, [r3, #8]
 800be9e:	4b1a      	ldr	r3, [pc, #104]	@ (800bf08 <HAL_TIM_PWM_Start+0x218>)
 800bea0:	4013      	ands	r3, r2
 800bea2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	2b06      	cmp	r3, #6
 800bea8:	d015      	beq.n	800bed6 <HAL_TIM_PWM_Start+0x1e6>
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800beb0:	d011      	beq.n	800bed6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	681a      	ldr	r2, [r3, #0]
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f042 0201 	orr.w	r2, r2, #1
 800bec0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bec2:	e008      	b.n	800bed6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	681a      	ldr	r2, [r3, #0]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f042 0201 	orr.w	r2, r2, #1
 800bed2:	601a      	str	r2, [r3, #0]
 800bed4:	e000      	b.n	800bed8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bed6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bed8:	2300      	movs	r3, #0
}
 800beda:	4618      	mov	r0, r3
 800bedc:	3710      	adds	r7, #16
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}
 800bee2:	bf00      	nop
 800bee4:	40010000 	.word	0x40010000
 800bee8:	40010400 	.word	0x40010400
 800beec:	40014000 	.word	0x40014000
 800bef0:	40014400 	.word	0x40014400
 800bef4:	40014800 	.word	0x40014800
 800bef8:	40000400 	.word	0x40000400
 800befc:	40000800 	.word	0x40000800
 800bf00:	40000c00 	.word	0x40000c00
 800bf04:	40001800 	.word	0x40001800
 800bf08:	00010007 	.word	0x00010007

0800bf0c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b086      	sub	sp, #24
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
 800bf14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d101      	bne.n	800bf20 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	e08f      	b.n	800c040 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bf26:	b2db      	uxtb	r3, r3
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d106      	bne.n	800bf3a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2200      	movs	r2, #0
 800bf30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f7f6 f883 	bl	8002040 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2202      	movs	r2, #2
 800bf3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	6899      	ldr	r1, [r3, #8]
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681a      	ldr	r2, [r3, #0]
 800bf4c:	4b3e      	ldr	r3, [pc, #248]	@ (800c048 <HAL_TIM_Encoder_Init+0x13c>)
 800bf4e:	400b      	ands	r3, r1
 800bf50:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681a      	ldr	r2, [r3, #0]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	3304      	adds	r3, #4
 800bf5a:	4619      	mov	r1, r3
 800bf5c:	4610      	mov	r0, r2
 800bf5e:	f000 fc65 	bl	800c82c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	689b      	ldr	r3, [r3, #8]
 800bf68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	699b      	ldr	r3, [r3, #24]
 800bf70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	6a1b      	ldr	r3, [r3, #32]
 800bf78:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	697a      	ldr	r2, [r7, #20]
 800bf80:	4313      	orrs	r3, r2
 800bf82:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800bf84:	693a      	ldr	r2, [r7, #16]
 800bf86:	4b31      	ldr	r3, [pc, #196]	@ (800c04c <HAL_TIM_Encoder_Init+0x140>)
 800bf88:	4013      	ands	r3, r2
 800bf8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	689a      	ldr	r2, [r3, #8]
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	699b      	ldr	r3, [r3, #24]
 800bf94:	021b      	lsls	r3, r3, #8
 800bf96:	4313      	orrs	r3, r2
 800bf98:	693a      	ldr	r2, [r7, #16]
 800bf9a:	4313      	orrs	r3, r2
 800bf9c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800bf9e:	693a      	ldr	r2, [r7, #16]
 800bfa0:	4b2b      	ldr	r3, [pc, #172]	@ (800c050 <HAL_TIM_Encoder_Init+0x144>)
 800bfa2:	4013      	ands	r3, r2
 800bfa4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800bfa6:	693a      	ldr	r2, [r7, #16]
 800bfa8:	4b2a      	ldr	r3, [pc, #168]	@ (800c054 <HAL_TIM_Encoder_Init+0x148>)
 800bfaa:	4013      	ands	r3, r2
 800bfac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	68da      	ldr	r2, [r3, #12]
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	69db      	ldr	r3, [r3, #28]
 800bfb6:	021b      	lsls	r3, r3, #8
 800bfb8:	4313      	orrs	r3, r2
 800bfba:	693a      	ldr	r2, [r7, #16]
 800bfbc:	4313      	orrs	r3, r2
 800bfbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	691b      	ldr	r3, [r3, #16]
 800bfc4:	011a      	lsls	r2, r3, #4
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	6a1b      	ldr	r3, [r3, #32]
 800bfca:	031b      	lsls	r3, r3, #12
 800bfcc:	4313      	orrs	r3, r2
 800bfce:	693a      	ldr	r2, [r7, #16]
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800bfda:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800bfe2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	685a      	ldr	r2, [r3, #4]
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	695b      	ldr	r3, [r3, #20]
 800bfec:	011b      	lsls	r3, r3, #4
 800bfee:	4313      	orrs	r3, r2
 800bff0:	68fa      	ldr	r2, [r7, #12]
 800bff2:	4313      	orrs	r3, r2
 800bff4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	697a      	ldr	r2, [r7, #20]
 800bffc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	693a      	ldr	r2, [r7, #16]
 800c004:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	68fa      	ldr	r2, [r7, #12]
 800c00c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2201      	movs	r2, #1
 800c012:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2201      	movs	r2, #1
 800c01a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2201      	movs	r2, #1
 800c022:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2201      	movs	r2, #1
 800c02a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2201      	movs	r2, #1
 800c032:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2201      	movs	r2, #1
 800c03a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c03e:	2300      	movs	r3, #0
}
 800c040:	4618      	mov	r0, r3
 800c042:	3718      	adds	r7, #24
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}
 800c048:	fffebff8 	.word	0xfffebff8
 800c04c:	fffffcfc 	.word	0xfffffcfc
 800c050:	fffff3f3 	.word	0xfffff3f3
 800c054:	ffff0f0f 	.word	0xffff0f0f

0800c058 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b084      	sub	sp, #16
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c068:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c070:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c078:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c080:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d110      	bne.n	800c0aa <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c088:	7bfb      	ldrb	r3, [r7, #15]
 800c08a:	2b01      	cmp	r3, #1
 800c08c:	d102      	bne.n	800c094 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800c08e:	7b7b      	ldrb	r3, [r7, #13]
 800c090:	2b01      	cmp	r3, #1
 800c092:	d001      	beq.n	800c098 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800c094:	2301      	movs	r3, #1
 800c096:	e089      	b.n	800c1ac <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2202      	movs	r2, #2
 800c09c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2202      	movs	r2, #2
 800c0a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c0a8:	e031      	b.n	800c10e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	2b04      	cmp	r3, #4
 800c0ae:	d110      	bne.n	800c0d2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c0b0:	7bbb      	ldrb	r3, [r7, #14]
 800c0b2:	2b01      	cmp	r3, #1
 800c0b4:	d102      	bne.n	800c0bc <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c0b6:	7b3b      	ldrb	r3, [r7, #12]
 800c0b8:	2b01      	cmp	r3, #1
 800c0ba:	d001      	beq.n	800c0c0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800c0bc:	2301      	movs	r3, #1
 800c0be:	e075      	b.n	800c1ac <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2202      	movs	r2, #2
 800c0c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2202      	movs	r2, #2
 800c0cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c0d0:	e01d      	b.n	800c10e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c0d2:	7bfb      	ldrb	r3, [r7, #15]
 800c0d4:	2b01      	cmp	r3, #1
 800c0d6:	d108      	bne.n	800c0ea <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c0d8:	7bbb      	ldrb	r3, [r7, #14]
 800c0da:	2b01      	cmp	r3, #1
 800c0dc:	d105      	bne.n	800c0ea <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c0de:	7b7b      	ldrb	r3, [r7, #13]
 800c0e0:	2b01      	cmp	r3, #1
 800c0e2:	d102      	bne.n	800c0ea <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c0e4:	7b3b      	ldrb	r3, [r7, #12]
 800c0e6:	2b01      	cmp	r3, #1
 800c0e8:	d001      	beq.n	800c0ee <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	e05e      	b.n	800c1ac <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2202      	movs	r2, #2
 800c0f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2202      	movs	r2, #2
 800c0fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2202      	movs	r2, #2
 800c102:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2202      	movs	r2, #2
 800c10a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d003      	beq.n	800c11c <HAL_TIM_Encoder_Start_IT+0xc4>
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	2b04      	cmp	r3, #4
 800c118:	d010      	beq.n	800c13c <HAL_TIM_Encoder_Start_IT+0xe4>
 800c11a:	e01f      	b.n	800c15c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	2201      	movs	r2, #1
 800c122:	2100      	movs	r1, #0
 800c124:	4618      	mov	r0, r3
 800c126:	f000 ff9b 	bl	800d060 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	68da      	ldr	r2, [r3, #12]
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f042 0202 	orr.w	r2, r2, #2
 800c138:	60da      	str	r2, [r3, #12]
      break;
 800c13a:	e02e      	b.n	800c19a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	2201      	movs	r2, #1
 800c142:	2104      	movs	r1, #4
 800c144:	4618      	mov	r0, r3
 800c146:	f000 ff8b 	bl	800d060 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	68da      	ldr	r2, [r3, #12]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f042 0204 	orr.w	r2, r2, #4
 800c158:	60da      	str	r2, [r3, #12]
      break;
 800c15a:	e01e      	b.n	800c19a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	2201      	movs	r2, #1
 800c162:	2100      	movs	r1, #0
 800c164:	4618      	mov	r0, r3
 800c166:	f000 ff7b 	bl	800d060 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	2201      	movs	r2, #1
 800c170:	2104      	movs	r1, #4
 800c172:	4618      	mov	r0, r3
 800c174:	f000 ff74 	bl	800d060 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	68da      	ldr	r2, [r3, #12]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	f042 0202 	orr.w	r2, r2, #2
 800c186:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	68da      	ldr	r2, [r3, #12]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f042 0204 	orr.w	r2, r2, #4
 800c196:	60da      	str	r2, [r3, #12]
      break;
 800c198:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	681a      	ldr	r2, [r3, #0]
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	f042 0201 	orr.w	r2, r2, #1
 800c1a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c1aa:	2300      	movs	r3, #0
}
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	3710      	adds	r7, #16
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}

0800c1b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b084      	sub	sp, #16
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	68db      	ldr	r3, [r3, #12]
 800c1c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	691b      	ldr	r3, [r3, #16]
 800c1ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	f003 0302 	and.w	r3, r3, #2
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d020      	beq.n	800c218 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	f003 0302 	and.w	r3, r3, #2
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d01b      	beq.n	800c218 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f06f 0202 	mvn.w	r2, #2
 800c1e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2201      	movs	r2, #1
 800c1ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	699b      	ldr	r3, [r3, #24]
 800c1f6:	f003 0303 	and.w	r3, r3, #3
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d003      	beq.n	800c206 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f7f4 fe5c 	bl	8000ebc <HAL_TIM_IC_CaptureCallback>
 800c204:	e005      	b.n	800c212 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f000 faf2 	bl	800c7f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f000 faf9 	bl	800c804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2200      	movs	r2, #0
 800c216:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	f003 0304 	and.w	r3, r3, #4
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d020      	beq.n	800c264 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	f003 0304 	and.w	r3, r3, #4
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d01b      	beq.n	800c264 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f06f 0204 	mvn.w	r2, #4
 800c234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2202      	movs	r2, #2
 800c23a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	699b      	ldr	r3, [r3, #24]
 800c242:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c246:	2b00      	cmp	r3, #0
 800c248:	d003      	beq.n	800c252 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f7f4 fe36 	bl	8000ebc <HAL_TIM_IC_CaptureCallback>
 800c250:	e005      	b.n	800c25e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f000 facc 	bl	800c7f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f000 fad3 	bl	800c804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2200      	movs	r2, #0
 800c262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	f003 0308 	and.w	r3, r3, #8
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d020      	beq.n	800c2b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	f003 0308 	and.w	r3, r3, #8
 800c274:	2b00      	cmp	r3, #0
 800c276:	d01b      	beq.n	800c2b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	f06f 0208 	mvn.w	r2, #8
 800c280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2204      	movs	r2, #4
 800c286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	69db      	ldr	r3, [r3, #28]
 800c28e:	f003 0303 	and.w	r3, r3, #3
 800c292:	2b00      	cmp	r3, #0
 800c294:	d003      	beq.n	800c29e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f7f4 fe10 	bl	8000ebc <HAL_TIM_IC_CaptureCallback>
 800c29c:	e005      	b.n	800c2aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f000 faa6 	bl	800c7f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2a4:	6878      	ldr	r0, [r7, #4]
 800c2a6:	f000 faad 	bl	800c804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	f003 0310 	and.w	r3, r3, #16
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d020      	beq.n	800c2fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	f003 0310 	and.w	r3, r3, #16
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d01b      	beq.n	800c2fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f06f 0210 	mvn.w	r2, #16
 800c2cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2208      	movs	r2, #8
 800c2d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	69db      	ldr	r3, [r3, #28]
 800c2da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d003      	beq.n	800c2ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f7f4 fdea 	bl	8000ebc <HAL_TIM_IC_CaptureCallback>
 800c2e8:	e005      	b.n	800c2f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f000 fa80 	bl	800c7f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f000 fa87 	bl	800c804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	f003 0301 	and.w	r3, r3, #1
 800c302:	2b00      	cmp	r3, #0
 800c304:	d00c      	beq.n	800c320 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	f003 0301 	and.w	r3, r3, #1
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d007      	beq.n	800c320 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	f06f 0201 	mvn.w	r2, #1
 800c318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f000 fa5e 	bl	800c7dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c326:	2b00      	cmp	r3, #0
 800c328:	d104      	bne.n	800c334 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c330:	2b00      	cmp	r3, #0
 800c332:	d00c      	beq.n	800c34e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d007      	beq.n	800c34e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f000 ff47 	bl	800d1dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c354:	2b00      	cmp	r3, #0
 800c356:	d00c      	beq.n	800c372 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d007      	beq.n	800c372 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c36a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f000 ff3f 	bl	800d1f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d00c      	beq.n	800c396 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c382:	2b00      	cmp	r3, #0
 800c384:	d007      	beq.n	800c396 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c38e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f000 fa41 	bl	800c818 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	f003 0320 	and.w	r3, r3, #32
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d00c      	beq.n	800c3ba <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	f003 0320 	and.w	r3, r3, #32
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d007      	beq.n	800c3ba <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	f06f 0220 	mvn.w	r2, #32
 800c3b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f000 ff07 	bl	800d1c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c3ba:	bf00      	nop
 800c3bc:	3710      	adds	r7, #16
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}
	...

0800c3c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b086      	sub	sp, #24
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	60f8      	str	r0, [r7, #12]
 800c3cc:	60b9      	str	r1, [r7, #8]
 800c3ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	d101      	bne.n	800c3e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c3de:	2302      	movs	r3, #2
 800c3e0:	e0ff      	b.n	800c5e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	2201      	movs	r2, #1
 800c3e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2b14      	cmp	r3, #20
 800c3ee:	f200 80f0 	bhi.w	800c5d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c3f2:	a201      	add	r2, pc, #4	@ (adr r2, 800c3f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c3f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3f8:	0800c44d 	.word	0x0800c44d
 800c3fc:	0800c5d3 	.word	0x0800c5d3
 800c400:	0800c5d3 	.word	0x0800c5d3
 800c404:	0800c5d3 	.word	0x0800c5d3
 800c408:	0800c48d 	.word	0x0800c48d
 800c40c:	0800c5d3 	.word	0x0800c5d3
 800c410:	0800c5d3 	.word	0x0800c5d3
 800c414:	0800c5d3 	.word	0x0800c5d3
 800c418:	0800c4cf 	.word	0x0800c4cf
 800c41c:	0800c5d3 	.word	0x0800c5d3
 800c420:	0800c5d3 	.word	0x0800c5d3
 800c424:	0800c5d3 	.word	0x0800c5d3
 800c428:	0800c50f 	.word	0x0800c50f
 800c42c:	0800c5d3 	.word	0x0800c5d3
 800c430:	0800c5d3 	.word	0x0800c5d3
 800c434:	0800c5d3 	.word	0x0800c5d3
 800c438:	0800c551 	.word	0x0800c551
 800c43c:	0800c5d3 	.word	0x0800c5d3
 800c440:	0800c5d3 	.word	0x0800c5d3
 800c444:	0800c5d3 	.word	0x0800c5d3
 800c448:	0800c591 	.word	0x0800c591
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	68b9      	ldr	r1, [r7, #8]
 800c452:	4618      	mov	r0, r3
 800c454:	f000 fa90 	bl	800c978 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	699a      	ldr	r2, [r3, #24]
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	f042 0208 	orr.w	r2, r2, #8
 800c466:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	699a      	ldr	r2, [r3, #24]
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	f022 0204 	bic.w	r2, r2, #4
 800c476:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	6999      	ldr	r1, [r3, #24]
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	691a      	ldr	r2, [r3, #16]
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	430a      	orrs	r2, r1
 800c488:	619a      	str	r2, [r3, #24]
      break;
 800c48a:	e0a5      	b.n	800c5d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	68b9      	ldr	r1, [r7, #8]
 800c492:	4618      	mov	r0, r3
 800c494:	f000 fb00 	bl	800ca98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	699a      	ldr	r2, [r3, #24]
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c4a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	699a      	ldr	r2, [r3, #24]
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c4b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	6999      	ldr	r1, [r3, #24]
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	691b      	ldr	r3, [r3, #16]
 800c4c2:	021a      	lsls	r2, r3, #8
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	430a      	orrs	r2, r1
 800c4ca:	619a      	str	r2, [r3, #24]
      break;
 800c4cc:	e084      	b.n	800c5d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	68b9      	ldr	r1, [r7, #8]
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f000 fb69 	bl	800cbac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	69da      	ldr	r2, [r3, #28]
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f042 0208 	orr.w	r2, r2, #8
 800c4e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	69da      	ldr	r2, [r3, #28]
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f022 0204 	bic.w	r2, r2, #4
 800c4f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	69d9      	ldr	r1, [r3, #28]
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	691a      	ldr	r2, [r3, #16]
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	430a      	orrs	r2, r1
 800c50a:	61da      	str	r2, [r3, #28]
      break;
 800c50c:	e064      	b.n	800c5d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	68b9      	ldr	r1, [r7, #8]
 800c514:	4618      	mov	r0, r3
 800c516:	f000 fbd1 	bl	800ccbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	69da      	ldr	r2, [r3, #28]
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c528:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	69da      	ldr	r2, [r3, #28]
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c538:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	69d9      	ldr	r1, [r3, #28]
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	691b      	ldr	r3, [r3, #16]
 800c544:	021a      	lsls	r2, r3, #8
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	430a      	orrs	r2, r1
 800c54c:	61da      	str	r2, [r3, #28]
      break;
 800c54e:	e043      	b.n	800c5d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	68b9      	ldr	r1, [r7, #8]
 800c556:	4618      	mov	r0, r3
 800c558:	f000 fc1a 	bl	800cd90 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f042 0208 	orr.w	r2, r2, #8
 800c56a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f022 0204 	bic.w	r2, r2, #4
 800c57a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	691a      	ldr	r2, [r3, #16]
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	430a      	orrs	r2, r1
 800c58c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c58e:	e023      	b.n	800c5d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	68b9      	ldr	r1, [r7, #8]
 800c596:	4618      	mov	r0, r3
 800c598:	f000 fc5e 	bl	800ce58 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c5aa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c5ba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	691b      	ldr	r3, [r3, #16]
 800c5c6:	021a      	lsls	r2, r3, #8
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	430a      	orrs	r2, r1
 800c5ce:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c5d0:	e002      	b.n	800c5d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	75fb      	strb	r3, [r7, #23]
      break;
 800c5d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	2200      	movs	r2, #0
 800c5dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c5e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3718      	adds	r7, #24
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}
 800c5ea:	bf00      	nop

0800c5ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b084      	sub	sp, #16
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c600:	2b01      	cmp	r3, #1
 800c602:	d101      	bne.n	800c608 <HAL_TIM_ConfigClockSource+0x1c>
 800c604:	2302      	movs	r3, #2
 800c606:	e0dc      	b.n	800c7c2 <HAL_TIM_ConfigClockSource+0x1d6>
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2201      	movs	r2, #1
 800c60c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2202      	movs	r2, #2
 800c614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	689b      	ldr	r3, [r3, #8]
 800c61e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c620:	68ba      	ldr	r2, [r7, #8]
 800c622:	4b6a      	ldr	r3, [pc, #424]	@ (800c7cc <HAL_TIM_ConfigClockSource+0x1e0>)
 800c624:	4013      	ands	r3, r2
 800c626:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c62e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	68ba      	ldr	r2, [r7, #8]
 800c636:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	4a64      	ldr	r2, [pc, #400]	@ (800c7d0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c63e:	4293      	cmp	r3, r2
 800c640:	f000 80a9 	beq.w	800c796 <HAL_TIM_ConfigClockSource+0x1aa>
 800c644:	4a62      	ldr	r2, [pc, #392]	@ (800c7d0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c646:	4293      	cmp	r3, r2
 800c648:	f200 80ae 	bhi.w	800c7a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c64c:	4a61      	ldr	r2, [pc, #388]	@ (800c7d4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c64e:	4293      	cmp	r3, r2
 800c650:	f000 80a1 	beq.w	800c796 <HAL_TIM_ConfigClockSource+0x1aa>
 800c654:	4a5f      	ldr	r2, [pc, #380]	@ (800c7d4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c656:	4293      	cmp	r3, r2
 800c658:	f200 80a6 	bhi.w	800c7a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c65c:	4a5e      	ldr	r2, [pc, #376]	@ (800c7d8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c65e:	4293      	cmp	r3, r2
 800c660:	f000 8099 	beq.w	800c796 <HAL_TIM_ConfigClockSource+0x1aa>
 800c664:	4a5c      	ldr	r2, [pc, #368]	@ (800c7d8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c666:	4293      	cmp	r3, r2
 800c668:	f200 809e 	bhi.w	800c7a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c66c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c670:	f000 8091 	beq.w	800c796 <HAL_TIM_ConfigClockSource+0x1aa>
 800c674:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c678:	f200 8096 	bhi.w	800c7a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c67c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c680:	f000 8089 	beq.w	800c796 <HAL_TIM_ConfigClockSource+0x1aa>
 800c684:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c688:	f200 808e 	bhi.w	800c7a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c68c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c690:	d03e      	beq.n	800c710 <HAL_TIM_ConfigClockSource+0x124>
 800c692:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c696:	f200 8087 	bhi.w	800c7a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c69a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c69e:	f000 8086 	beq.w	800c7ae <HAL_TIM_ConfigClockSource+0x1c2>
 800c6a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c6a6:	d87f      	bhi.n	800c7a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c6a8:	2b70      	cmp	r3, #112	@ 0x70
 800c6aa:	d01a      	beq.n	800c6e2 <HAL_TIM_ConfigClockSource+0xf6>
 800c6ac:	2b70      	cmp	r3, #112	@ 0x70
 800c6ae:	d87b      	bhi.n	800c7a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c6b0:	2b60      	cmp	r3, #96	@ 0x60
 800c6b2:	d050      	beq.n	800c756 <HAL_TIM_ConfigClockSource+0x16a>
 800c6b4:	2b60      	cmp	r3, #96	@ 0x60
 800c6b6:	d877      	bhi.n	800c7a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c6b8:	2b50      	cmp	r3, #80	@ 0x50
 800c6ba:	d03c      	beq.n	800c736 <HAL_TIM_ConfigClockSource+0x14a>
 800c6bc:	2b50      	cmp	r3, #80	@ 0x50
 800c6be:	d873      	bhi.n	800c7a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c6c0:	2b40      	cmp	r3, #64	@ 0x40
 800c6c2:	d058      	beq.n	800c776 <HAL_TIM_ConfigClockSource+0x18a>
 800c6c4:	2b40      	cmp	r3, #64	@ 0x40
 800c6c6:	d86f      	bhi.n	800c7a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c6c8:	2b30      	cmp	r3, #48	@ 0x30
 800c6ca:	d064      	beq.n	800c796 <HAL_TIM_ConfigClockSource+0x1aa>
 800c6cc:	2b30      	cmp	r3, #48	@ 0x30
 800c6ce:	d86b      	bhi.n	800c7a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c6d0:	2b20      	cmp	r3, #32
 800c6d2:	d060      	beq.n	800c796 <HAL_TIM_ConfigClockSource+0x1aa>
 800c6d4:	2b20      	cmp	r3, #32
 800c6d6:	d867      	bhi.n	800c7a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d05c      	beq.n	800c796 <HAL_TIM_ConfigClockSource+0x1aa>
 800c6dc:	2b10      	cmp	r3, #16
 800c6de:	d05a      	beq.n	800c796 <HAL_TIM_ConfigClockSource+0x1aa>
 800c6e0:	e062      	b.n	800c7a8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c6f2:	f000 fc95 	bl	800d020 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	689b      	ldr	r3, [r3, #8]
 800c6fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c704:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	68ba      	ldr	r2, [r7, #8]
 800c70c:	609a      	str	r2, [r3, #8]
      break;
 800c70e:	e04f      	b.n	800c7b0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c720:	f000 fc7e 	bl	800d020 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	689a      	ldr	r2, [r3, #8]
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c732:	609a      	str	r2, [r3, #8]
      break;
 800c734:	e03c      	b.n	800c7b0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c742:	461a      	mov	r2, r3
 800c744:	f000 fbee 	bl	800cf24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	2150      	movs	r1, #80	@ 0x50
 800c74e:	4618      	mov	r0, r3
 800c750:	f000 fc48 	bl	800cfe4 <TIM_ITRx_SetConfig>
      break;
 800c754:	e02c      	b.n	800c7b0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c762:	461a      	mov	r2, r3
 800c764:	f000 fc0d 	bl	800cf82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	2160      	movs	r1, #96	@ 0x60
 800c76e:	4618      	mov	r0, r3
 800c770:	f000 fc38 	bl	800cfe4 <TIM_ITRx_SetConfig>
      break;
 800c774:	e01c      	b.n	800c7b0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c782:	461a      	mov	r2, r3
 800c784:	f000 fbce 	bl	800cf24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	2140      	movs	r1, #64	@ 0x40
 800c78e:	4618      	mov	r0, r3
 800c790:	f000 fc28 	bl	800cfe4 <TIM_ITRx_SetConfig>
      break;
 800c794:	e00c      	b.n	800c7b0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681a      	ldr	r2, [r3, #0]
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	4619      	mov	r1, r3
 800c7a0:	4610      	mov	r0, r2
 800c7a2:	f000 fc1f 	bl	800cfe4 <TIM_ITRx_SetConfig>
      break;
 800c7a6:	e003      	b.n	800c7b0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	73fb      	strb	r3, [r7, #15]
      break;
 800c7ac:	e000      	b.n	800c7b0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c7ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2201      	movs	r2, #1
 800c7b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c7c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	3710      	adds	r7, #16
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}
 800c7ca:	bf00      	nop
 800c7cc:	ffceff88 	.word	0xffceff88
 800c7d0:	00100040 	.word	0x00100040
 800c7d4:	00100030 	.word	0x00100030
 800c7d8:	00100020 	.word	0x00100020

0800c7dc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c7dc:	b480      	push	{r7}
 800c7de:	b083      	sub	sp, #12
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c7e4:	bf00      	nop
 800c7e6:	370c      	adds	r7, #12
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ee:	4770      	bx	lr

0800c7f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b083      	sub	sp, #12
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c7f8:	bf00      	nop
 800c7fa:	370c      	adds	r7, #12
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c802:	4770      	bx	lr

0800c804 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c804:	b480      	push	{r7}
 800c806:	b083      	sub	sp, #12
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c80c:	bf00      	nop
 800c80e:	370c      	adds	r7, #12
 800c810:	46bd      	mov	sp, r7
 800c812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c816:	4770      	bx	lr

0800c818 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c818:	b480      	push	{r7}
 800c81a:	b083      	sub	sp, #12
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c820:	bf00      	nop
 800c822:	370c      	adds	r7, #12
 800c824:	46bd      	mov	sp, r7
 800c826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82a:	4770      	bx	lr

0800c82c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c82c:	b480      	push	{r7}
 800c82e:	b085      	sub	sp, #20
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
 800c834:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	4a46      	ldr	r2, [pc, #280]	@ (800c958 <TIM_Base_SetConfig+0x12c>)
 800c840:	4293      	cmp	r3, r2
 800c842:	d013      	beq.n	800c86c <TIM_Base_SetConfig+0x40>
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c84a:	d00f      	beq.n	800c86c <TIM_Base_SetConfig+0x40>
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	4a43      	ldr	r2, [pc, #268]	@ (800c95c <TIM_Base_SetConfig+0x130>)
 800c850:	4293      	cmp	r3, r2
 800c852:	d00b      	beq.n	800c86c <TIM_Base_SetConfig+0x40>
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	4a42      	ldr	r2, [pc, #264]	@ (800c960 <TIM_Base_SetConfig+0x134>)
 800c858:	4293      	cmp	r3, r2
 800c85a:	d007      	beq.n	800c86c <TIM_Base_SetConfig+0x40>
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	4a41      	ldr	r2, [pc, #260]	@ (800c964 <TIM_Base_SetConfig+0x138>)
 800c860:	4293      	cmp	r3, r2
 800c862:	d003      	beq.n	800c86c <TIM_Base_SetConfig+0x40>
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	4a40      	ldr	r2, [pc, #256]	@ (800c968 <TIM_Base_SetConfig+0x13c>)
 800c868:	4293      	cmp	r3, r2
 800c86a:	d108      	bne.n	800c87e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c872:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	685b      	ldr	r3, [r3, #4]
 800c878:	68fa      	ldr	r2, [r7, #12]
 800c87a:	4313      	orrs	r3, r2
 800c87c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	4a35      	ldr	r2, [pc, #212]	@ (800c958 <TIM_Base_SetConfig+0x12c>)
 800c882:	4293      	cmp	r3, r2
 800c884:	d01f      	beq.n	800c8c6 <TIM_Base_SetConfig+0x9a>
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c88c:	d01b      	beq.n	800c8c6 <TIM_Base_SetConfig+0x9a>
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	4a32      	ldr	r2, [pc, #200]	@ (800c95c <TIM_Base_SetConfig+0x130>)
 800c892:	4293      	cmp	r3, r2
 800c894:	d017      	beq.n	800c8c6 <TIM_Base_SetConfig+0x9a>
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	4a31      	ldr	r2, [pc, #196]	@ (800c960 <TIM_Base_SetConfig+0x134>)
 800c89a:	4293      	cmp	r3, r2
 800c89c:	d013      	beq.n	800c8c6 <TIM_Base_SetConfig+0x9a>
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	4a30      	ldr	r2, [pc, #192]	@ (800c964 <TIM_Base_SetConfig+0x138>)
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	d00f      	beq.n	800c8c6 <TIM_Base_SetConfig+0x9a>
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	4a2f      	ldr	r2, [pc, #188]	@ (800c968 <TIM_Base_SetConfig+0x13c>)
 800c8aa:	4293      	cmp	r3, r2
 800c8ac:	d00b      	beq.n	800c8c6 <TIM_Base_SetConfig+0x9a>
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	4a2e      	ldr	r2, [pc, #184]	@ (800c96c <TIM_Base_SetConfig+0x140>)
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	d007      	beq.n	800c8c6 <TIM_Base_SetConfig+0x9a>
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	4a2d      	ldr	r2, [pc, #180]	@ (800c970 <TIM_Base_SetConfig+0x144>)
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	d003      	beq.n	800c8c6 <TIM_Base_SetConfig+0x9a>
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	4a2c      	ldr	r2, [pc, #176]	@ (800c974 <TIM_Base_SetConfig+0x148>)
 800c8c2:	4293      	cmp	r3, r2
 800c8c4:	d108      	bne.n	800c8d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c8cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	68db      	ldr	r3, [r3, #12]
 800c8d2:	68fa      	ldr	r2, [r7, #12]
 800c8d4:	4313      	orrs	r3, r2
 800c8d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	695b      	ldr	r3, [r3, #20]
 800c8e2:	4313      	orrs	r3, r2
 800c8e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	68fa      	ldr	r2, [r7, #12]
 800c8ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	689a      	ldr	r2, [r3, #8]
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	681a      	ldr	r2, [r3, #0]
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	4a16      	ldr	r2, [pc, #88]	@ (800c958 <TIM_Base_SetConfig+0x12c>)
 800c900:	4293      	cmp	r3, r2
 800c902:	d00f      	beq.n	800c924 <TIM_Base_SetConfig+0xf8>
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	4a18      	ldr	r2, [pc, #96]	@ (800c968 <TIM_Base_SetConfig+0x13c>)
 800c908:	4293      	cmp	r3, r2
 800c90a:	d00b      	beq.n	800c924 <TIM_Base_SetConfig+0xf8>
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	4a17      	ldr	r2, [pc, #92]	@ (800c96c <TIM_Base_SetConfig+0x140>)
 800c910:	4293      	cmp	r3, r2
 800c912:	d007      	beq.n	800c924 <TIM_Base_SetConfig+0xf8>
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	4a16      	ldr	r2, [pc, #88]	@ (800c970 <TIM_Base_SetConfig+0x144>)
 800c918:	4293      	cmp	r3, r2
 800c91a:	d003      	beq.n	800c924 <TIM_Base_SetConfig+0xf8>
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	4a15      	ldr	r2, [pc, #84]	@ (800c974 <TIM_Base_SetConfig+0x148>)
 800c920:	4293      	cmp	r3, r2
 800c922:	d103      	bne.n	800c92c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	691a      	ldr	r2, [r3, #16]
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2201      	movs	r2, #1
 800c930:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	691b      	ldr	r3, [r3, #16]
 800c936:	f003 0301 	and.w	r3, r3, #1
 800c93a:	2b01      	cmp	r3, #1
 800c93c:	d105      	bne.n	800c94a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	691b      	ldr	r3, [r3, #16]
 800c942:	f023 0201 	bic.w	r2, r3, #1
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	611a      	str	r2, [r3, #16]
  }
}
 800c94a:	bf00      	nop
 800c94c:	3714      	adds	r7, #20
 800c94e:	46bd      	mov	sp, r7
 800c950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c954:	4770      	bx	lr
 800c956:	bf00      	nop
 800c958:	40010000 	.word	0x40010000
 800c95c:	40000400 	.word	0x40000400
 800c960:	40000800 	.word	0x40000800
 800c964:	40000c00 	.word	0x40000c00
 800c968:	40010400 	.word	0x40010400
 800c96c:	40014000 	.word	0x40014000
 800c970:	40014400 	.word	0x40014400
 800c974:	40014800 	.word	0x40014800

0800c978 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c978:	b480      	push	{r7}
 800c97a:	b087      	sub	sp, #28
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
 800c980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6a1b      	ldr	r3, [r3, #32]
 800c986:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	6a1b      	ldr	r3, [r3, #32]
 800c98c:	f023 0201 	bic.w	r2, r3, #1
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	685b      	ldr	r3, [r3, #4]
 800c998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	699b      	ldr	r3, [r3, #24]
 800c99e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c9a0:	68fa      	ldr	r2, [r7, #12]
 800c9a2:	4b37      	ldr	r3, [pc, #220]	@ (800ca80 <TIM_OC1_SetConfig+0x108>)
 800c9a4:	4013      	ands	r3, r2
 800c9a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	f023 0303 	bic.w	r3, r3, #3
 800c9ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	68fa      	ldr	r2, [r7, #12]
 800c9b6:	4313      	orrs	r3, r2
 800c9b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	f023 0302 	bic.w	r3, r3, #2
 800c9c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	689b      	ldr	r3, [r3, #8]
 800c9c6:	697a      	ldr	r2, [r7, #20]
 800c9c8:	4313      	orrs	r3, r2
 800c9ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	4a2d      	ldr	r2, [pc, #180]	@ (800ca84 <TIM_OC1_SetConfig+0x10c>)
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	d00f      	beq.n	800c9f4 <TIM_OC1_SetConfig+0x7c>
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	4a2c      	ldr	r2, [pc, #176]	@ (800ca88 <TIM_OC1_SetConfig+0x110>)
 800c9d8:	4293      	cmp	r3, r2
 800c9da:	d00b      	beq.n	800c9f4 <TIM_OC1_SetConfig+0x7c>
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	4a2b      	ldr	r2, [pc, #172]	@ (800ca8c <TIM_OC1_SetConfig+0x114>)
 800c9e0:	4293      	cmp	r3, r2
 800c9e2:	d007      	beq.n	800c9f4 <TIM_OC1_SetConfig+0x7c>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	4a2a      	ldr	r2, [pc, #168]	@ (800ca90 <TIM_OC1_SetConfig+0x118>)
 800c9e8:	4293      	cmp	r3, r2
 800c9ea:	d003      	beq.n	800c9f4 <TIM_OC1_SetConfig+0x7c>
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	4a29      	ldr	r2, [pc, #164]	@ (800ca94 <TIM_OC1_SetConfig+0x11c>)
 800c9f0:	4293      	cmp	r3, r2
 800c9f2:	d10c      	bne.n	800ca0e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	f023 0308 	bic.w	r3, r3, #8
 800c9fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	68db      	ldr	r3, [r3, #12]
 800ca00:	697a      	ldr	r2, [r7, #20]
 800ca02:	4313      	orrs	r3, r2
 800ca04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	f023 0304 	bic.w	r3, r3, #4
 800ca0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	4a1c      	ldr	r2, [pc, #112]	@ (800ca84 <TIM_OC1_SetConfig+0x10c>)
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d00f      	beq.n	800ca36 <TIM_OC1_SetConfig+0xbe>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	4a1b      	ldr	r2, [pc, #108]	@ (800ca88 <TIM_OC1_SetConfig+0x110>)
 800ca1a:	4293      	cmp	r3, r2
 800ca1c:	d00b      	beq.n	800ca36 <TIM_OC1_SetConfig+0xbe>
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	4a1a      	ldr	r2, [pc, #104]	@ (800ca8c <TIM_OC1_SetConfig+0x114>)
 800ca22:	4293      	cmp	r3, r2
 800ca24:	d007      	beq.n	800ca36 <TIM_OC1_SetConfig+0xbe>
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	4a19      	ldr	r2, [pc, #100]	@ (800ca90 <TIM_OC1_SetConfig+0x118>)
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	d003      	beq.n	800ca36 <TIM_OC1_SetConfig+0xbe>
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	4a18      	ldr	r2, [pc, #96]	@ (800ca94 <TIM_OC1_SetConfig+0x11c>)
 800ca32:	4293      	cmp	r3, r2
 800ca34:	d111      	bne.n	800ca5a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ca3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ca44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	695b      	ldr	r3, [r3, #20]
 800ca4a:	693a      	ldr	r2, [r7, #16]
 800ca4c:	4313      	orrs	r3, r2
 800ca4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	699b      	ldr	r3, [r3, #24]
 800ca54:	693a      	ldr	r2, [r7, #16]
 800ca56:	4313      	orrs	r3, r2
 800ca58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	693a      	ldr	r2, [r7, #16]
 800ca5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	68fa      	ldr	r2, [r7, #12]
 800ca64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	685a      	ldr	r2, [r3, #4]
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	697a      	ldr	r2, [r7, #20]
 800ca72:	621a      	str	r2, [r3, #32]
}
 800ca74:	bf00      	nop
 800ca76:	371c      	adds	r7, #28
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7e:	4770      	bx	lr
 800ca80:	fffeff8f 	.word	0xfffeff8f
 800ca84:	40010000 	.word	0x40010000
 800ca88:	40010400 	.word	0x40010400
 800ca8c:	40014000 	.word	0x40014000
 800ca90:	40014400 	.word	0x40014400
 800ca94:	40014800 	.word	0x40014800

0800ca98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ca98:	b480      	push	{r7}
 800ca9a:	b087      	sub	sp, #28
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
 800caa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6a1b      	ldr	r3, [r3, #32]
 800caa6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6a1b      	ldr	r3, [r3, #32]
 800caac:	f023 0210 	bic.w	r2, r3, #16
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	685b      	ldr	r3, [r3, #4]
 800cab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	699b      	ldr	r3, [r3, #24]
 800cabe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cac0:	68fa      	ldr	r2, [r7, #12]
 800cac2:	4b34      	ldr	r3, [pc, #208]	@ (800cb94 <TIM_OC2_SetConfig+0xfc>)
 800cac4:	4013      	ands	r3, r2
 800cac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cace:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	021b      	lsls	r3, r3, #8
 800cad6:	68fa      	ldr	r2, [r7, #12]
 800cad8:	4313      	orrs	r3, r2
 800cada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	f023 0320 	bic.w	r3, r3, #32
 800cae2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	689b      	ldr	r3, [r3, #8]
 800cae8:	011b      	lsls	r3, r3, #4
 800caea:	697a      	ldr	r2, [r7, #20]
 800caec:	4313      	orrs	r3, r2
 800caee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	4a29      	ldr	r2, [pc, #164]	@ (800cb98 <TIM_OC2_SetConfig+0x100>)
 800caf4:	4293      	cmp	r3, r2
 800caf6:	d003      	beq.n	800cb00 <TIM_OC2_SetConfig+0x68>
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	4a28      	ldr	r2, [pc, #160]	@ (800cb9c <TIM_OC2_SetConfig+0x104>)
 800cafc:	4293      	cmp	r3, r2
 800cafe:	d10d      	bne.n	800cb1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cb00:	697b      	ldr	r3, [r7, #20]
 800cb02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cb06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	68db      	ldr	r3, [r3, #12]
 800cb0c:	011b      	lsls	r3, r3, #4
 800cb0e:	697a      	ldr	r2, [r7, #20]
 800cb10:	4313      	orrs	r3, r2
 800cb12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cb1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	4a1e      	ldr	r2, [pc, #120]	@ (800cb98 <TIM_OC2_SetConfig+0x100>)
 800cb20:	4293      	cmp	r3, r2
 800cb22:	d00f      	beq.n	800cb44 <TIM_OC2_SetConfig+0xac>
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	4a1d      	ldr	r2, [pc, #116]	@ (800cb9c <TIM_OC2_SetConfig+0x104>)
 800cb28:	4293      	cmp	r3, r2
 800cb2a:	d00b      	beq.n	800cb44 <TIM_OC2_SetConfig+0xac>
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	4a1c      	ldr	r2, [pc, #112]	@ (800cba0 <TIM_OC2_SetConfig+0x108>)
 800cb30:	4293      	cmp	r3, r2
 800cb32:	d007      	beq.n	800cb44 <TIM_OC2_SetConfig+0xac>
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	4a1b      	ldr	r2, [pc, #108]	@ (800cba4 <TIM_OC2_SetConfig+0x10c>)
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d003      	beq.n	800cb44 <TIM_OC2_SetConfig+0xac>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	4a1a      	ldr	r2, [pc, #104]	@ (800cba8 <TIM_OC2_SetConfig+0x110>)
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d113      	bne.n	800cb6c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cb44:	693b      	ldr	r3, [r7, #16]
 800cb46:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cb4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cb4c:	693b      	ldr	r3, [r7, #16]
 800cb4e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cb52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	695b      	ldr	r3, [r3, #20]
 800cb58:	009b      	lsls	r3, r3, #2
 800cb5a:	693a      	ldr	r2, [r7, #16]
 800cb5c:	4313      	orrs	r3, r2
 800cb5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	699b      	ldr	r3, [r3, #24]
 800cb64:	009b      	lsls	r3, r3, #2
 800cb66:	693a      	ldr	r2, [r7, #16]
 800cb68:	4313      	orrs	r3, r2
 800cb6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	693a      	ldr	r2, [r7, #16]
 800cb70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	68fa      	ldr	r2, [r7, #12]
 800cb76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	685a      	ldr	r2, [r3, #4]
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	697a      	ldr	r2, [r7, #20]
 800cb84:	621a      	str	r2, [r3, #32]
}
 800cb86:	bf00      	nop
 800cb88:	371c      	adds	r7, #28
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb90:	4770      	bx	lr
 800cb92:	bf00      	nop
 800cb94:	feff8fff 	.word	0xfeff8fff
 800cb98:	40010000 	.word	0x40010000
 800cb9c:	40010400 	.word	0x40010400
 800cba0:	40014000 	.word	0x40014000
 800cba4:	40014400 	.word	0x40014400
 800cba8:	40014800 	.word	0x40014800

0800cbac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cbac:	b480      	push	{r7}
 800cbae:	b087      	sub	sp, #28
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
 800cbb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	6a1b      	ldr	r3, [r3, #32]
 800cbba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	6a1b      	ldr	r3, [r3, #32]
 800cbc0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	685b      	ldr	r3, [r3, #4]
 800cbcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	69db      	ldr	r3, [r3, #28]
 800cbd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cbd4:	68fa      	ldr	r2, [r7, #12]
 800cbd6:	4b33      	ldr	r3, [pc, #204]	@ (800cca4 <TIM_OC3_SetConfig+0xf8>)
 800cbd8:	4013      	ands	r3, r2
 800cbda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	f023 0303 	bic.w	r3, r3, #3
 800cbe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	68fa      	ldr	r2, [r7, #12]
 800cbea:	4313      	orrs	r3, r2
 800cbec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cbee:	697b      	ldr	r3, [r7, #20]
 800cbf0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cbf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	689b      	ldr	r3, [r3, #8]
 800cbfa:	021b      	lsls	r3, r3, #8
 800cbfc:	697a      	ldr	r2, [r7, #20]
 800cbfe:	4313      	orrs	r3, r2
 800cc00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	4a28      	ldr	r2, [pc, #160]	@ (800cca8 <TIM_OC3_SetConfig+0xfc>)
 800cc06:	4293      	cmp	r3, r2
 800cc08:	d003      	beq.n	800cc12 <TIM_OC3_SetConfig+0x66>
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	4a27      	ldr	r2, [pc, #156]	@ (800ccac <TIM_OC3_SetConfig+0x100>)
 800cc0e:	4293      	cmp	r3, r2
 800cc10:	d10d      	bne.n	800cc2e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cc12:	697b      	ldr	r3, [r7, #20]
 800cc14:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cc18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	68db      	ldr	r3, [r3, #12]
 800cc1e:	021b      	lsls	r3, r3, #8
 800cc20:	697a      	ldr	r2, [r7, #20]
 800cc22:	4313      	orrs	r3, r2
 800cc24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cc26:	697b      	ldr	r3, [r7, #20]
 800cc28:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cc2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	4a1d      	ldr	r2, [pc, #116]	@ (800cca8 <TIM_OC3_SetConfig+0xfc>)
 800cc32:	4293      	cmp	r3, r2
 800cc34:	d00f      	beq.n	800cc56 <TIM_OC3_SetConfig+0xaa>
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	4a1c      	ldr	r2, [pc, #112]	@ (800ccac <TIM_OC3_SetConfig+0x100>)
 800cc3a:	4293      	cmp	r3, r2
 800cc3c:	d00b      	beq.n	800cc56 <TIM_OC3_SetConfig+0xaa>
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	4a1b      	ldr	r2, [pc, #108]	@ (800ccb0 <TIM_OC3_SetConfig+0x104>)
 800cc42:	4293      	cmp	r3, r2
 800cc44:	d007      	beq.n	800cc56 <TIM_OC3_SetConfig+0xaa>
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	4a1a      	ldr	r2, [pc, #104]	@ (800ccb4 <TIM_OC3_SetConfig+0x108>)
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	d003      	beq.n	800cc56 <TIM_OC3_SetConfig+0xaa>
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	4a19      	ldr	r2, [pc, #100]	@ (800ccb8 <TIM_OC3_SetConfig+0x10c>)
 800cc52:	4293      	cmp	r3, r2
 800cc54:	d113      	bne.n	800cc7e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cc5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cc5e:	693b      	ldr	r3, [r7, #16]
 800cc60:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cc64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	695b      	ldr	r3, [r3, #20]
 800cc6a:	011b      	lsls	r3, r3, #4
 800cc6c:	693a      	ldr	r2, [r7, #16]
 800cc6e:	4313      	orrs	r3, r2
 800cc70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	699b      	ldr	r3, [r3, #24]
 800cc76:	011b      	lsls	r3, r3, #4
 800cc78:	693a      	ldr	r2, [r7, #16]
 800cc7a:	4313      	orrs	r3, r2
 800cc7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	693a      	ldr	r2, [r7, #16]
 800cc82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	68fa      	ldr	r2, [r7, #12]
 800cc88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	685a      	ldr	r2, [r3, #4]
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	697a      	ldr	r2, [r7, #20]
 800cc96:	621a      	str	r2, [r3, #32]
}
 800cc98:	bf00      	nop
 800cc9a:	371c      	adds	r7, #28
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca2:	4770      	bx	lr
 800cca4:	fffeff8f 	.word	0xfffeff8f
 800cca8:	40010000 	.word	0x40010000
 800ccac:	40010400 	.word	0x40010400
 800ccb0:	40014000 	.word	0x40014000
 800ccb4:	40014400 	.word	0x40014400
 800ccb8:	40014800 	.word	0x40014800

0800ccbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b087      	sub	sp, #28
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
 800ccc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6a1b      	ldr	r3, [r3, #32]
 800ccca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	6a1b      	ldr	r3, [r3, #32]
 800ccd0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	685b      	ldr	r3, [r3, #4]
 800ccdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	69db      	ldr	r3, [r3, #28]
 800cce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cce4:	68fa      	ldr	r2, [r7, #12]
 800cce6:	4b24      	ldr	r3, [pc, #144]	@ (800cd78 <TIM_OC4_SetConfig+0xbc>)
 800cce8:	4013      	ands	r3, r2
 800ccea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ccf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	021b      	lsls	r3, r3, #8
 800ccfa:	68fa      	ldr	r2, [r7, #12]
 800ccfc:	4313      	orrs	r3, r2
 800ccfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cd00:	693b      	ldr	r3, [r7, #16]
 800cd02:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cd06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	689b      	ldr	r3, [r3, #8]
 800cd0c:	031b      	lsls	r3, r3, #12
 800cd0e:	693a      	ldr	r2, [r7, #16]
 800cd10:	4313      	orrs	r3, r2
 800cd12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	4a19      	ldr	r2, [pc, #100]	@ (800cd7c <TIM_OC4_SetConfig+0xc0>)
 800cd18:	4293      	cmp	r3, r2
 800cd1a:	d00f      	beq.n	800cd3c <TIM_OC4_SetConfig+0x80>
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	4a18      	ldr	r2, [pc, #96]	@ (800cd80 <TIM_OC4_SetConfig+0xc4>)
 800cd20:	4293      	cmp	r3, r2
 800cd22:	d00b      	beq.n	800cd3c <TIM_OC4_SetConfig+0x80>
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	4a17      	ldr	r2, [pc, #92]	@ (800cd84 <TIM_OC4_SetConfig+0xc8>)
 800cd28:	4293      	cmp	r3, r2
 800cd2a:	d007      	beq.n	800cd3c <TIM_OC4_SetConfig+0x80>
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	4a16      	ldr	r2, [pc, #88]	@ (800cd88 <TIM_OC4_SetConfig+0xcc>)
 800cd30:	4293      	cmp	r3, r2
 800cd32:	d003      	beq.n	800cd3c <TIM_OC4_SetConfig+0x80>
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	4a15      	ldr	r2, [pc, #84]	@ (800cd8c <TIM_OC4_SetConfig+0xd0>)
 800cd38:	4293      	cmp	r3, r2
 800cd3a:	d109      	bne.n	800cd50 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cd3c:	697b      	ldr	r3, [r7, #20]
 800cd3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cd42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	695b      	ldr	r3, [r3, #20]
 800cd48:	019b      	lsls	r3, r3, #6
 800cd4a:	697a      	ldr	r2, [r7, #20]
 800cd4c:	4313      	orrs	r3, r2
 800cd4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	697a      	ldr	r2, [r7, #20]
 800cd54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	68fa      	ldr	r2, [r7, #12]
 800cd5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	685a      	ldr	r2, [r3, #4]
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	693a      	ldr	r2, [r7, #16]
 800cd68:	621a      	str	r2, [r3, #32]
}
 800cd6a:	bf00      	nop
 800cd6c:	371c      	adds	r7, #28
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd74:	4770      	bx	lr
 800cd76:	bf00      	nop
 800cd78:	feff8fff 	.word	0xfeff8fff
 800cd7c:	40010000 	.word	0x40010000
 800cd80:	40010400 	.word	0x40010400
 800cd84:	40014000 	.word	0x40014000
 800cd88:	40014400 	.word	0x40014400
 800cd8c:	40014800 	.word	0x40014800

0800cd90 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cd90:	b480      	push	{r7}
 800cd92:	b087      	sub	sp, #28
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
 800cd98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	6a1b      	ldr	r3, [r3, #32]
 800cd9e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	6a1b      	ldr	r3, [r3, #32]
 800cda4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	685b      	ldr	r3, [r3, #4]
 800cdb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cdb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cdb8:	68fa      	ldr	r2, [r7, #12]
 800cdba:	4b21      	ldr	r3, [pc, #132]	@ (800ce40 <TIM_OC5_SetConfig+0xb0>)
 800cdbc:	4013      	ands	r3, r2
 800cdbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	68fa      	ldr	r2, [r7, #12]
 800cdc6:	4313      	orrs	r3, r2
 800cdc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cdca:	693b      	ldr	r3, [r7, #16]
 800cdcc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800cdd0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	689b      	ldr	r3, [r3, #8]
 800cdd6:	041b      	lsls	r3, r3, #16
 800cdd8:	693a      	ldr	r2, [r7, #16]
 800cdda:	4313      	orrs	r3, r2
 800cddc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	4a18      	ldr	r2, [pc, #96]	@ (800ce44 <TIM_OC5_SetConfig+0xb4>)
 800cde2:	4293      	cmp	r3, r2
 800cde4:	d00f      	beq.n	800ce06 <TIM_OC5_SetConfig+0x76>
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	4a17      	ldr	r2, [pc, #92]	@ (800ce48 <TIM_OC5_SetConfig+0xb8>)
 800cdea:	4293      	cmp	r3, r2
 800cdec:	d00b      	beq.n	800ce06 <TIM_OC5_SetConfig+0x76>
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	4a16      	ldr	r2, [pc, #88]	@ (800ce4c <TIM_OC5_SetConfig+0xbc>)
 800cdf2:	4293      	cmp	r3, r2
 800cdf4:	d007      	beq.n	800ce06 <TIM_OC5_SetConfig+0x76>
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	4a15      	ldr	r2, [pc, #84]	@ (800ce50 <TIM_OC5_SetConfig+0xc0>)
 800cdfa:	4293      	cmp	r3, r2
 800cdfc:	d003      	beq.n	800ce06 <TIM_OC5_SetConfig+0x76>
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	4a14      	ldr	r2, [pc, #80]	@ (800ce54 <TIM_OC5_SetConfig+0xc4>)
 800ce02:	4293      	cmp	r3, r2
 800ce04:	d109      	bne.n	800ce1a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ce06:	697b      	ldr	r3, [r7, #20]
 800ce08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ce0c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	695b      	ldr	r3, [r3, #20]
 800ce12:	021b      	lsls	r3, r3, #8
 800ce14:	697a      	ldr	r2, [r7, #20]
 800ce16:	4313      	orrs	r3, r2
 800ce18:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	697a      	ldr	r2, [r7, #20]
 800ce1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	68fa      	ldr	r2, [r7, #12]
 800ce24:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	685a      	ldr	r2, [r3, #4]
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	693a      	ldr	r2, [r7, #16]
 800ce32:	621a      	str	r2, [r3, #32]
}
 800ce34:	bf00      	nop
 800ce36:	371c      	adds	r7, #28
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3e:	4770      	bx	lr
 800ce40:	fffeff8f 	.word	0xfffeff8f
 800ce44:	40010000 	.word	0x40010000
 800ce48:	40010400 	.word	0x40010400
 800ce4c:	40014000 	.word	0x40014000
 800ce50:	40014400 	.word	0x40014400
 800ce54:	40014800 	.word	0x40014800

0800ce58 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ce58:	b480      	push	{r7}
 800ce5a:	b087      	sub	sp, #28
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
 800ce60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6a1b      	ldr	r3, [r3, #32]
 800ce66:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	6a1b      	ldr	r3, [r3, #32]
 800ce6c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	685b      	ldr	r3, [r3, #4]
 800ce78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ce80:	68fa      	ldr	r2, [r7, #12]
 800ce82:	4b22      	ldr	r3, [pc, #136]	@ (800cf0c <TIM_OC6_SetConfig+0xb4>)
 800ce84:	4013      	ands	r3, r2
 800ce86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	021b      	lsls	r3, r3, #8
 800ce8e:	68fa      	ldr	r2, [r7, #12]
 800ce90:	4313      	orrs	r3, r2
 800ce92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ce94:	693b      	ldr	r3, [r7, #16]
 800ce96:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ce9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	689b      	ldr	r3, [r3, #8]
 800cea0:	051b      	lsls	r3, r3, #20
 800cea2:	693a      	ldr	r2, [r7, #16]
 800cea4:	4313      	orrs	r3, r2
 800cea6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	4a19      	ldr	r2, [pc, #100]	@ (800cf10 <TIM_OC6_SetConfig+0xb8>)
 800ceac:	4293      	cmp	r3, r2
 800ceae:	d00f      	beq.n	800ced0 <TIM_OC6_SetConfig+0x78>
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	4a18      	ldr	r2, [pc, #96]	@ (800cf14 <TIM_OC6_SetConfig+0xbc>)
 800ceb4:	4293      	cmp	r3, r2
 800ceb6:	d00b      	beq.n	800ced0 <TIM_OC6_SetConfig+0x78>
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	4a17      	ldr	r2, [pc, #92]	@ (800cf18 <TIM_OC6_SetConfig+0xc0>)
 800cebc:	4293      	cmp	r3, r2
 800cebe:	d007      	beq.n	800ced0 <TIM_OC6_SetConfig+0x78>
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	4a16      	ldr	r2, [pc, #88]	@ (800cf1c <TIM_OC6_SetConfig+0xc4>)
 800cec4:	4293      	cmp	r3, r2
 800cec6:	d003      	beq.n	800ced0 <TIM_OC6_SetConfig+0x78>
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	4a15      	ldr	r2, [pc, #84]	@ (800cf20 <TIM_OC6_SetConfig+0xc8>)
 800cecc:	4293      	cmp	r3, r2
 800cece:	d109      	bne.n	800cee4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ced6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	695b      	ldr	r3, [r3, #20]
 800cedc:	029b      	lsls	r3, r3, #10
 800cede:	697a      	ldr	r2, [r7, #20]
 800cee0:	4313      	orrs	r3, r2
 800cee2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	697a      	ldr	r2, [r7, #20]
 800cee8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	68fa      	ldr	r2, [r7, #12]
 800ceee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	685a      	ldr	r2, [r3, #4]
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	693a      	ldr	r2, [r7, #16]
 800cefc:	621a      	str	r2, [r3, #32]
}
 800cefe:	bf00      	nop
 800cf00:	371c      	adds	r7, #28
 800cf02:	46bd      	mov	sp, r7
 800cf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf08:	4770      	bx	lr
 800cf0a:	bf00      	nop
 800cf0c:	feff8fff 	.word	0xfeff8fff
 800cf10:	40010000 	.word	0x40010000
 800cf14:	40010400 	.word	0x40010400
 800cf18:	40014000 	.word	0x40014000
 800cf1c:	40014400 	.word	0x40014400
 800cf20:	40014800 	.word	0x40014800

0800cf24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cf24:	b480      	push	{r7}
 800cf26:	b087      	sub	sp, #28
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	60f8      	str	r0, [r7, #12]
 800cf2c:	60b9      	str	r1, [r7, #8]
 800cf2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	6a1b      	ldr	r3, [r3, #32]
 800cf34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	6a1b      	ldr	r3, [r3, #32]
 800cf3a:	f023 0201 	bic.w	r2, r3, #1
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	699b      	ldr	r3, [r3, #24]
 800cf46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cf48:	693b      	ldr	r3, [r7, #16]
 800cf4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cf4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	011b      	lsls	r3, r3, #4
 800cf54:	693a      	ldr	r2, [r7, #16]
 800cf56:	4313      	orrs	r3, r2
 800cf58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	f023 030a 	bic.w	r3, r3, #10
 800cf60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cf62:	697a      	ldr	r2, [r7, #20]
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	4313      	orrs	r3, r2
 800cf68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	693a      	ldr	r2, [r7, #16]
 800cf6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	697a      	ldr	r2, [r7, #20]
 800cf74:	621a      	str	r2, [r3, #32]
}
 800cf76:	bf00      	nop
 800cf78:	371c      	adds	r7, #28
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf80:	4770      	bx	lr

0800cf82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cf82:	b480      	push	{r7}
 800cf84:	b087      	sub	sp, #28
 800cf86:	af00      	add	r7, sp, #0
 800cf88:	60f8      	str	r0, [r7, #12]
 800cf8a:	60b9      	str	r1, [r7, #8]
 800cf8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	6a1b      	ldr	r3, [r3, #32]
 800cf92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	6a1b      	ldr	r3, [r3, #32]
 800cf98:	f023 0210 	bic.w	r2, r3, #16
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	699b      	ldr	r3, [r3, #24]
 800cfa4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cfa6:	693b      	ldr	r3, [r7, #16]
 800cfa8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800cfac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	031b      	lsls	r3, r3, #12
 800cfb2:	693a      	ldr	r2, [r7, #16]
 800cfb4:	4313      	orrs	r3, r2
 800cfb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800cfbe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cfc0:	68bb      	ldr	r3, [r7, #8]
 800cfc2:	011b      	lsls	r3, r3, #4
 800cfc4:	697a      	ldr	r2, [r7, #20]
 800cfc6:	4313      	orrs	r3, r2
 800cfc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	693a      	ldr	r2, [r7, #16]
 800cfce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	697a      	ldr	r2, [r7, #20]
 800cfd4:	621a      	str	r2, [r3, #32]
}
 800cfd6:	bf00      	nop
 800cfd8:	371c      	adds	r7, #28
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe0:	4770      	bx	lr
	...

0800cfe4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b085      	sub	sp, #20
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
 800cfec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	689b      	ldr	r3, [r3, #8]
 800cff2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cff4:	68fa      	ldr	r2, [r7, #12]
 800cff6:	4b09      	ldr	r3, [pc, #36]	@ (800d01c <TIM_ITRx_SetConfig+0x38>)
 800cff8:	4013      	ands	r3, r2
 800cffa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cffc:	683a      	ldr	r2, [r7, #0]
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	4313      	orrs	r3, r2
 800d002:	f043 0307 	orr.w	r3, r3, #7
 800d006:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	68fa      	ldr	r2, [r7, #12]
 800d00c:	609a      	str	r2, [r3, #8]
}
 800d00e:	bf00      	nop
 800d010:	3714      	adds	r7, #20
 800d012:	46bd      	mov	sp, r7
 800d014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d018:	4770      	bx	lr
 800d01a:	bf00      	nop
 800d01c:	ffcfff8f 	.word	0xffcfff8f

0800d020 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d020:	b480      	push	{r7}
 800d022:	b087      	sub	sp, #28
 800d024:	af00      	add	r7, sp, #0
 800d026:	60f8      	str	r0, [r7, #12]
 800d028:	60b9      	str	r1, [r7, #8]
 800d02a:	607a      	str	r2, [r7, #4]
 800d02c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	689b      	ldr	r3, [r3, #8]
 800d032:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d03a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	021a      	lsls	r2, r3, #8
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	431a      	orrs	r2, r3
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	4313      	orrs	r3, r2
 800d048:	697a      	ldr	r2, [r7, #20]
 800d04a:	4313      	orrs	r3, r2
 800d04c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	697a      	ldr	r2, [r7, #20]
 800d052:	609a      	str	r2, [r3, #8]
}
 800d054:	bf00      	nop
 800d056:	371c      	adds	r7, #28
 800d058:	46bd      	mov	sp, r7
 800d05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05e:	4770      	bx	lr

0800d060 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d060:	b480      	push	{r7}
 800d062:	b087      	sub	sp, #28
 800d064:	af00      	add	r7, sp, #0
 800d066:	60f8      	str	r0, [r7, #12]
 800d068:	60b9      	str	r1, [r7, #8]
 800d06a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	f003 031f 	and.w	r3, r3, #31
 800d072:	2201      	movs	r2, #1
 800d074:	fa02 f303 	lsl.w	r3, r2, r3
 800d078:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	6a1a      	ldr	r2, [r3, #32]
 800d07e:	697b      	ldr	r3, [r7, #20]
 800d080:	43db      	mvns	r3, r3
 800d082:	401a      	ands	r2, r3
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	6a1a      	ldr	r2, [r3, #32]
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	f003 031f 	and.w	r3, r3, #31
 800d092:	6879      	ldr	r1, [r7, #4]
 800d094:	fa01 f303 	lsl.w	r3, r1, r3
 800d098:	431a      	orrs	r2, r3
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	621a      	str	r2, [r3, #32]
}
 800d09e:	bf00      	nop
 800d0a0:	371c      	adds	r7, #28
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a8:	4770      	bx	lr
	...

0800d0ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b085      	sub	sp, #20
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
 800d0b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d0bc:	2b01      	cmp	r3, #1
 800d0be:	d101      	bne.n	800d0c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d0c0:	2302      	movs	r3, #2
 800d0c2:	e06d      	b.n	800d1a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2201      	movs	r2, #1
 800d0c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2202      	movs	r2, #2
 800d0d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	685b      	ldr	r3, [r3, #4]
 800d0da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	689b      	ldr	r3, [r3, #8]
 800d0e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	4a30      	ldr	r2, [pc, #192]	@ (800d1ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	d004      	beq.n	800d0f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	4a2f      	ldr	r2, [pc, #188]	@ (800d1b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d0f4:	4293      	cmp	r3, r2
 800d0f6:	d108      	bne.n	800d10a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d0fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	685b      	ldr	r3, [r3, #4]
 800d104:	68fa      	ldr	r2, [r7, #12]
 800d106:	4313      	orrs	r3, r2
 800d108:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d110:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	68fa      	ldr	r2, [r7, #12]
 800d118:	4313      	orrs	r3, r2
 800d11a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	68fa      	ldr	r2, [r7, #12]
 800d122:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	4a20      	ldr	r2, [pc, #128]	@ (800d1ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d12a:	4293      	cmp	r3, r2
 800d12c:	d022      	beq.n	800d174 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d136:	d01d      	beq.n	800d174 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	4a1d      	ldr	r2, [pc, #116]	@ (800d1b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d13e:	4293      	cmp	r3, r2
 800d140:	d018      	beq.n	800d174 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	4a1c      	ldr	r2, [pc, #112]	@ (800d1b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d148:	4293      	cmp	r3, r2
 800d14a:	d013      	beq.n	800d174 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	4a1a      	ldr	r2, [pc, #104]	@ (800d1bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d152:	4293      	cmp	r3, r2
 800d154:	d00e      	beq.n	800d174 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	4a15      	ldr	r2, [pc, #84]	@ (800d1b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d15c:	4293      	cmp	r3, r2
 800d15e:	d009      	beq.n	800d174 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	4a16      	ldr	r2, [pc, #88]	@ (800d1c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d166:	4293      	cmp	r3, r2
 800d168:	d004      	beq.n	800d174 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	4a15      	ldr	r2, [pc, #84]	@ (800d1c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d170:	4293      	cmp	r3, r2
 800d172:	d10c      	bne.n	800d18e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d17a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	689b      	ldr	r3, [r3, #8]
 800d180:	68ba      	ldr	r2, [r7, #8]
 800d182:	4313      	orrs	r3, r2
 800d184:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	68ba      	ldr	r2, [r7, #8]
 800d18c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	2201      	movs	r2, #1
 800d192:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	2200      	movs	r2, #0
 800d19a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d19e:	2300      	movs	r3, #0
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3714      	adds	r7, #20
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1aa:	4770      	bx	lr
 800d1ac:	40010000 	.word	0x40010000
 800d1b0:	40010400 	.word	0x40010400
 800d1b4:	40000400 	.word	0x40000400
 800d1b8:	40000800 	.word	0x40000800
 800d1bc:	40000c00 	.word	0x40000c00
 800d1c0:	40001800 	.word	0x40001800
 800d1c4:	40014000 	.word	0x40014000

0800d1c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d1c8:	b480      	push	{r7}
 800d1ca:	b083      	sub	sp, #12
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d1d0:	bf00      	nop
 800d1d2:	370c      	adds	r7, #12
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1da:	4770      	bx	lr

0800d1dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d1dc:	b480      	push	{r7}
 800d1de:	b083      	sub	sp, #12
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d1e4:	bf00      	nop
 800d1e6:	370c      	adds	r7, #12
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ee:	4770      	bx	lr

0800d1f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d1f0:	b480      	push	{r7}
 800d1f2:	b083      	sub	sp, #12
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d1f8:	bf00      	nop
 800d1fa:	370c      	adds	r7, #12
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d202:	4770      	bx	lr

0800d204 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b082      	sub	sp, #8
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d101      	bne.n	800d216 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d212:	2301      	movs	r3, #1
 800d214:	e042      	b.n	800d29c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d106      	bne.n	800d22e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2200      	movs	r2, #0
 800d224:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d228:	6878      	ldr	r0, [r7, #4]
 800d22a:	f000 f83b 	bl	800d2a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2224      	movs	r2, #36	@ 0x24
 800d232:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	681a      	ldr	r2, [r3, #0]
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	f022 0201 	bic.w	r2, r2, #1
 800d244:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d002      	beq.n	800d254 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d24e:	6878      	ldr	r0, [r7, #4]
 800d250:	f000 fe28 	bl	800dea4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f000 f8bd 	bl	800d3d4 <UART_SetConfig>
 800d25a:	4603      	mov	r3, r0
 800d25c:	2b01      	cmp	r3, #1
 800d25e:	d101      	bne.n	800d264 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d260:	2301      	movs	r3, #1
 800d262:	e01b      	b.n	800d29c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	685a      	ldr	r2, [r3, #4]
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d272:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	689a      	ldr	r2, [r3, #8]
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d282:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	681a      	ldr	r2, [r3, #0]
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f042 0201 	orr.w	r2, r2, #1
 800d292:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f000 fea7 	bl	800dfe8 <UART_CheckIdleState>
 800d29a:	4603      	mov	r3, r0
}
 800d29c:	4618      	mov	r0, r3
 800d29e:	3708      	adds	r7, #8
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	bd80      	pop	{r7, pc}

0800d2a4 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800d2a4:	b480      	push	{r7}
 800d2a6:	b083      	sub	sp, #12
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800d2ac:	bf00      	nop
 800d2ae:	370c      	adds	r7, #12
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b6:	4770      	bx	lr

0800d2b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b08a      	sub	sp, #40	@ 0x28
 800d2bc:	af02      	add	r7, sp, #8
 800d2be:	60f8      	str	r0, [r7, #12]
 800d2c0:	60b9      	str	r1, [r7, #8]
 800d2c2:	603b      	str	r3, [r7, #0]
 800d2c4:	4613      	mov	r3, r2
 800d2c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d2ce:	2b20      	cmp	r3, #32
 800d2d0:	d17b      	bne.n	800d3ca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d002      	beq.n	800d2de <HAL_UART_Transmit+0x26>
 800d2d8:	88fb      	ldrh	r3, [r7, #6]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d101      	bne.n	800d2e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d2de:	2301      	movs	r3, #1
 800d2e0:	e074      	b.n	800d3cc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	2221      	movs	r2, #33	@ 0x21
 800d2ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d2f2:	f7f5 fbe9 	bl	8002ac8 <HAL_GetTick>
 800d2f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	88fa      	ldrh	r2, [r7, #6]
 800d2fc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	88fa      	ldrh	r2, [r7, #6]
 800d304:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	689b      	ldr	r3, [r3, #8]
 800d30c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d310:	d108      	bne.n	800d324 <HAL_UART_Transmit+0x6c>
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	691b      	ldr	r3, [r3, #16]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d104      	bne.n	800d324 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d31a:	2300      	movs	r3, #0
 800d31c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	61bb      	str	r3, [r7, #24]
 800d322:	e003      	b.n	800d32c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d324:	68bb      	ldr	r3, [r7, #8]
 800d326:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d328:	2300      	movs	r3, #0
 800d32a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d32c:	e030      	b.n	800d390 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	9300      	str	r3, [sp, #0]
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	2200      	movs	r2, #0
 800d336:	2180      	movs	r1, #128	@ 0x80
 800d338:	68f8      	ldr	r0, [r7, #12]
 800d33a:	f000 feff 	bl	800e13c <UART_WaitOnFlagUntilTimeout>
 800d33e:	4603      	mov	r3, r0
 800d340:	2b00      	cmp	r3, #0
 800d342:	d005      	beq.n	800d350 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	2220      	movs	r2, #32
 800d348:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800d34c:	2303      	movs	r3, #3
 800d34e:	e03d      	b.n	800d3cc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d350:	69fb      	ldr	r3, [r7, #28]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d10b      	bne.n	800d36e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d356:	69bb      	ldr	r3, [r7, #24]
 800d358:	881b      	ldrh	r3, [r3, #0]
 800d35a:	461a      	mov	r2, r3
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d364:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800d366:	69bb      	ldr	r3, [r7, #24]
 800d368:	3302      	adds	r3, #2
 800d36a:	61bb      	str	r3, [r7, #24]
 800d36c:	e007      	b.n	800d37e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d36e:	69fb      	ldr	r3, [r7, #28]
 800d370:	781a      	ldrb	r2, [r3, #0]
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800d378:	69fb      	ldr	r3, [r7, #28]
 800d37a:	3301      	adds	r3, #1
 800d37c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d384:	b29b      	uxth	r3, r3
 800d386:	3b01      	subs	r3, #1
 800d388:	b29a      	uxth	r2, r3
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d396:	b29b      	uxth	r3, r3
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d1c8      	bne.n	800d32e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	9300      	str	r3, [sp, #0]
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	2140      	movs	r1, #64	@ 0x40
 800d3a6:	68f8      	ldr	r0, [r7, #12]
 800d3a8:	f000 fec8 	bl	800e13c <UART_WaitOnFlagUntilTimeout>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d005      	beq.n	800d3be <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	2220      	movs	r2, #32
 800d3b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800d3ba:	2303      	movs	r3, #3
 800d3bc:	e006      	b.n	800d3cc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	2220      	movs	r2, #32
 800d3c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	e000      	b.n	800d3cc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d3ca:	2302      	movs	r3, #2
  }
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3720      	adds	r7, #32
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}

0800d3d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d3d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d3d8:	b092      	sub	sp, #72	@ 0x48
 800d3da:	af00      	add	r7, sp, #0
 800d3dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d3de:	2300      	movs	r3, #0
 800d3e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d3e4:	697b      	ldr	r3, [r7, #20]
 800d3e6:	689a      	ldr	r2, [r3, #8]
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	691b      	ldr	r3, [r3, #16]
 800d3ec:	431a      	orrs	r2, r3
 800d3ee:	697b      	ldr	r3, [r7, #20]
 800d3f0:	695b      	ldr	r3, [r3, #20]
 800d3f2:	431a      	orrs	r2, r3
 800d3f4:	697b      	ldr	r3, [r7, #20]
 800d3f6:	69db      	ldr	r3, [r3, #28]
 800d3f8:	4313      	orrs	r3, r2
 800d3fa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d3fc:	697b      	ldr	r3, [r7, #20]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	681a      	ldr	r2, [r3, #0]
 800d402:	4bbe      	ldr	r3, [pc, #760]	@ (800d6fc <UART_SetConfig+0x328>)
 800d404:	4013      	ands	r3, r2
 800d406:	697a      	ldr	r2, [r7, #20]
 800d408:	6812      	ldr	r2, [r2, #0]
 800d40a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d40c:	430b      	orrs	r3, r1
 800d40e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d410:	697b      	ldr	r3, [r7, #20]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	685b      	ldr	r3, [r3, #4]
 800d416:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d41a:	697b      	ldr	r3, [r7, #20]
 800d41c:	68da      	ldr	r2, [r3, #12]
 800d41e:	697b      	ldr	r3, [r7, #20]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	430a      	orrs	r2, r1
 800d424:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	699b      	ldr	r3, [r3, #24]
 800d42a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d42c:	697b      	ldr	r3, [r7, #20]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	4ab3      	ldr	r2, [pc, #716]	@ (800d700 <UART_SetConfig+0x32c>)
 800d432:	4293      	cmp	r3, r2
 800d434:	d004      	beq.n	800d440 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	6a1b      	ldr	r3, [r3, #32]
 800d43a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d43c:	4313      	orrs	r3, r2
 800d43e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d440:	697b      	ldr	r3, [r7, #20]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	689a      	ldr	r2, [r3, #8]
 800d446:	4baf      	ldr	r3, [pc, #700]	@ (800d704 <UART_SetConfig+0x330>)
 800d448:	4013      	ands	r3, r2
 800d44a:	697a      	ldr	r2, [r7, #20]
 800d44c:	6812      	ldr	r2, [r2, #0]
 800d44e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d450:	430b      	orrs	r3, r1
 800d452:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d454:	697b      	ldr	r3, [r7, #20]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d45a:	f023 010f 	bic.w	r1, r3, #15
 800d45e:	697b      	ldr	r3, [r7, #20]
 800d460:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	430a      	orrs	r2, r1
 800d468:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d46a:	697b      	ldr	r3, [r7, #20]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	4aa6      	ldr	r2, [pc, #664]	@ (800d708 <UART_SetConfig+0x334>)
 800d470:	4293      	cmp	r3, r2
 800d472:	d177      	bne.n	800d564 <UART_SetConfig+0x190>
 800d474:	4ba5      	ldr	r3, [pc, #660]	@ (800d70c <UART_SetConfig+0x338>)
 800d476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d478:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d47c:	2b28      	cmp	r3, #40	@ 0x28
 800d47e:	d86d      	bhi.n	800d55c <UART_SetConfig+0x188>
 800d480:	a201      	add	r2, pc, #4	@ (adr r2, 800d488 <UART_SetConfig+0xb4>)
 800d482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d486:	bf00      	nop
 800d488:	0800d52d 	.word	0x0800d52d
 800d48c:	0800d55d 	.word	0x0800d55d
 800d490:	0800d55d 	.word	0x0800d55d
 800d494:	0800d55d 	.word	0x0800d55d
 800d498:	0800d55d 	.word	0x0800d55d
 800d49c:	0800d55d 	.word	0x0800d55d
 800d4a0:	0800d55d 	.word	0x0800d55d
 800d4a4:	0800d55d 	.word	0x0800d55d
 800d4a8:	0800d535 	.word	0x0800d535
 800d4ac:	0800d55d 	.word	0x0800d55d
 800d4b0:	0800d55d 	.word	0x0800d55d
 800d4b4:	0800d55d 	.word	0x0800d55d
 800d4b8:	0800d55d 	.word	0x0800d55d
 800d4bc:	0800d55d 	.word	0x0800d55d
 800d4c0:	0800d55d 	.word	0x0800d55d
 800d4c4:	0800d55d 	.word	0x0800d55d
 800d4c8:	0800d53d 	.word	0x0800d53d
 800d4cc:	0800d55d 	.word	0x0800d55d
 800d4d0:	0800d55d 	.word	0x0800d55d
 800d4d4:	0800d55d 	.word	0x0800d55d
 800d4d8:	0800d55d 	.word	0x0800d55d
 800d4dc:	0800d55d 	.word	0x0800d55d
 800d4e0:	0800d55d 	.word	0x0800d55d
 800d4e4:	0800d55d 	.word	0x0800d55d
 800d4e8:	0800d545 	.word	0x0800d545
 800d4ec:	0800d55d 	.word	0x0800d55d
 800d4f0:	0800d55d 	.word	0x0800d55d
 800d4f4:	0800d55d 	.word	0x0800d55d
 800d4f8:	0800d55d 	.word	0x0800d55d
 800d4fc:	0800d55d 	.word	0x0800d55d
 800d500:	0800d55d 	.word	0x0800d55d
 800d504:	0800d55d 	.word	0x0800d55d
 800d508:	0800d54d 	.word	0x0800d54d
 800d50c:	0800d55d 	.word	0x0800d55d
 800d510:	0800d55d 	.word	0x0800d55d
 800d514:	0800d55d 	.word	0x0800d55d
 800d518:	0800d55d 	.word	0x0800d55d
 800d51c:	0800d55d 	.word	0x0800d55d
 800d520:	0800d55d 	.word	0x0800d55d
 800d524:	0800d55d 	.word	0x0800d55d
 800d528:	0800d555 	.word	0x0800d555
 800d52c:	2301      	movs	r3, #1
 800d52e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d532:	e222      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d534:	2304      	movs	r3, #4
 800d536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d53a:	e21e      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d53c:	2308      	movs	r3, #8
 800d53e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d542:	e21a      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d544:	2310      	movs	r3, #16
 800d546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d54a:	e216      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d54c:	2320      	movs	r3, #32
 800d54e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d552:	e212      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d554:	2340      	movs	r3, #64	@ 0x40
 800d556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d55a:	e20e      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d55c:	2380      	movs	r3, #128	@ 0x80
 800d55e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d562:	e20a      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d564:	697b      	ldr	r3, [r7, #20]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	4a69      	ldr	r2, [pc, #420]	@ (800d710 <UART_SetConfig+0x33c>)
 800d56a:	4293      	cmp	r3, r2
 800d56c:	d130      	bne.n	800d5d0 <UART_SetConfig+0x1fc>
 800d56e:	4b67      	ldr	r3, [pc, #412]	@ (800d70c <UART_SetConfig+0x338>)
 800d570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d572:	f003 0307 	and.w	r3, r3, #7
 800d576:	2b05      	cmp	r3, #5
 800d578:	d826      	bhi.n	800d5c8 <UART_SetConfig+0x1f4>
 800d57a:	a201      	add	r2, pc, #4	@ (adr r2, 800d580 <UART_SetConfig+0x1ac>)
 800d57c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d580:	0800d599 	.word	0x0800d599
 800d584:	0800d5a1 	.word	0x0800d5a1
 800d588:	0800d5a9 	.word	0x0800d5a9
 800d58c:	0800d5b1 	.word	0x0800d5b1
 800d590:	0800d5b9 	.word	0x0800d5b9
 800d594:	0800d5c1 	.word	0x0800d5c1
 800d598:	2300      	movs	r3, #0
 800d59a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d59e:	e1ec      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d5a0:	2304      	movs	r3, #4
 800d5a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5a6:	e1e8      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d5a8:	2308      	movs	r3, #8
 800d5aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5ae:	e1e4      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d5b0:	2310      	movs	r3, #16
 800d5b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5b6:	e1e0      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d5b8:	2320      	movs	r3, #32
 800d5ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5be:	e1dc      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d5c0:	2340      	movs	r3, #64	@ 0x40
 800d5c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5c6:	e1d8      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d5c8:	2380      	movs	r3, #128	@ 0x80
 800d5ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5ce:	e1d4      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d5d0:	697b      	ldr	r3, [r7, #20]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	4a4f      	ldr	r2, [pc, #316]	@ (800d714 <UART_SetConfig+0x340>)
 800d5d6:	4293      	cmp	r3, r2
 800d5d8:	d130      	bne.n	800d63c <UART_SetConfig+0x268>
 800d5da:	4b4c      	ldr	r3, [pc, #304]	@ (800d70c <UART_SetConfig+0x338>)
 800d5dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d5de:	f003 0307 	and.w	r3, r3, #7
 800d5e2:	2b05      	cmp	r3, #5
 800d5e4:	d826      	bhi.n	800d634 <UART_SetConfig+0x260>
 800d5e6:	a201      	add	r2, pc, #4	@ (adr r2, 800d5ec <UART_SetConfig+0x218>)
 800d5e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5ec:	0800d605 	.word	0x0800d605
 800d5f0:	0800d60d 	.word	0x0800d60d
 800d5f4:	0800d615 	.word	0x0800d615
 800d5f8:	0800d61d 	.word	0x0800d61d
 800d5fc:	0800d625 	.word	0x0800d625
 800d600:	0800d62d 	.word	0x0800d62d
 800d604:	2300      	movs	r3, #0
 800d606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d60a:	e1b6      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d60c:	2304      	movs	r3, #4
 800d60e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d612:	e1b2      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d614:	2308      	movs	r3, #8
 800d616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d61a:	e1ae      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d61c:	2310      	movs	r3, #16
 800d61e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d622:	e1aa      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d624:	2320      	movs	r3, #32
 800d626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d62a:	e1a6      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d62c:	2340      	movs	r3, #64	@ 0x40
 800d62e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d632:	e1a2      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d634:	2380      	movs	r3, #128	@ 0x80
 800d636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d63a:	e19e      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	4a35      	ldr	r2, [pc, #212]	@ (800d718 <UART_SetConfig+0x344>)
 800d642:	4293      	cmp	r3, r2
 800d644:	d130      	bne.n	800d6a8 <UART_SetConfig+0x2d4>
 800d646:	4b31      	ldr	r3, [pc, #196]	@ (800d70c <UART_SetConfig+0x338>)
 800d648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d64a:	f003 0307 	and.w	r3, r3, #7
 800d64e:	2b05      	cmp	r3, #5
 800d650:	d826      	bhi.n	800d6a0 <UART_SetConfig+0x2cc>
 800d652:	a201      	add	r2, pc, #4	@ (adr r2, 800d658 <UART_SetConfig+0x284>)
 800d654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d658:	0800d671 	.word	0x0800d671
 800d65c:	0800d679 	.word	0x0800d679
 800d660:	0800d681 	.word	0x0800d681
 800d664:	0800d689 	.word	0x0800d689
 800d668:	0800d691 	.word	0x0800d691
 800d66c:	0800d699 	.word	0x0800d699
 800d670:	2300      	movs	r3, #0
 800d672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d676:	e180      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d678:	2304      	movs	r3, #4
 800d67a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d67e:	e17c      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d680:	2308      	movs	r3, #8
 800d682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d686:	e178      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d688:	2310      	movs	r3, #16
 800d68a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d68e:	e174      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d690:	2320      	movs	r3, #32
 800d692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d696:	e170      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d698:	2340      	movs	r3, #64	@ 0x40
 800d69a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d69e:	e16c      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d6a0:	2380      	movs	r3, #128	@ 0x80
 800d6a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6a6:	e168      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	4a1b      	ldr	r2, [pc, #108]	@ (800d71c <UART_SetConfig+0x348>)
 800d6ae:	4293      	cmp	r3, r2
 800d6b0:	d142      	bne.n	800d738 <UART_SetConfig+0x364>
 800d6b2:	4b16      	ldr	r3, [pc, #88]	@ (800d70c <UART_SetConfig+0x338>)
 800d6b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d6b6:	f003 0307 	and.w	r3, r3, #7
 800d6ba:	2b05      	cmp	r3, #5
 800d6bc:	d838      	bhi.n	800d730 <UART_SetConfig+0x35c>
 800d6be:	a201      	add	r2, pc, #4	@ (adr r2, 800d6c4 <UART_SetConfig+0x2f0>)
 800d6c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6c4:	0800d6dd 	.word	0x0800d6dd
 800d6c8:	0800d6e5 	.word	0x0800d6e5
 800d6cc:	0800d6ed 	.word	0x0800d6ed
 800d6d0:	0800d6f5 	.word	0x0800d6f5
 800d6d4:	0800d721 	.word	0x0800d721
 800d6d8:	0800d729 	.word	0x0800d729
 800d6dc:	2300      	movs	r3, #0
 800d6de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6e2:	e14a      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d6e4:	2304      	movs	r3, #4
 800d6e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6ea:	e146      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d6ec:	2308      	movs	r3, #8
 800d6ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6f2:	e142      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d6f4:	2310      	movs	r3, #16
 800d6f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6fa:	e13e      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d6fc:	cfff69f3 	.word	0xcfff69f3
 800d700:	58000c00 	.word	0x58000c00
 800d704:	11fff4ff 	.word	0x11fff4ff
 800d708:	40011000 	.word	0x40011000
 800d70c:	58024400 	.word	0x58024400
 800d710:	40004400 	.word	0x40004400
 800d714:	40004800 	.word	0x40004800
 800d718:	40004c00 	.word	0x40004c00
 800d71c:	40005000 	.word	0x40005000
 800d720:	2320      	movs	r3, #32
 800d722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d726:	e128      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d728:	2340      	movs	r3, #64	@ 0x40
 800d72a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d72e:	e124      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d730:	2380      	movs	r3, #128	@ 0x80
 800d732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d736:	e120      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d738:	697b      	ldr	r3, [r7, #20]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	4acb      	ldr	r2, [pc, #812]	@ (800da6c <UART_SetConfig+0x698>)
 800d73e:	4293      	cmp	r3, r2
 800d740:	d176      	bne.n	800d830 <UART_SetConfig+0x45c>
 800d742:	4bcb      	ldr	r3, [pc, #812]	@ (800da70 <UART_SetConfig+0x69c>)
 800d744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d746:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d74a:	2b28      	cmp	r3, #40	@ 0x28
 800d74c:	d86c      	bhi.n	800d828 <UART_SetConfig+0x454>
 800d74e:	a201      	add	r2, pc, #4	@ (adr r2, 800d754 <UART_SetConfig+0x380>)
 800d750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d754:	0800d7f9 	.word	0x0800d7f9
 800d758:	0800d829 	.word	0x0800d829
 800d75c:	0800d829 	.word	0x0800d829
 800d760:	0800d829 	.word	0x0800d829
 800d764:	0800d829 	.word	0x0800d829
 800d768:	0800d829 	.word	0x0800d829
 800d76c:	0800d829 	.word	0x0800d829
 800d770:	0800d829 	.word	0x0800d829
 800d774:	0800d801 	.word	0x0800d801
 800d778:	0800d829 	.word	0x0800d829
 800d77c:	0800d829 	.word	0x0800d829
 800d780:	0800d829 	.word	0x0800d829
 800d784:	0800d829 	.word	0x0800d829
 800d788:	0800d829 	.word	0x0800d829
 800d78c:	0800d829 	.word	0x0800d829
 800d790:	0800d829 	.word	0x0800d829
 800d794:	0800d809 	.word	0x0800d809
 800d798:	0800d829 	.word	0x0800d829
 800d79c:	0800d829 	.word	0x0800d829
 800d7a0:	0800d829 	.word	0x0800d829
 800d7a4:	0800d829 	.word	0x0800d829
 800d7a8:	0800d829 	.word	0x0800d829
 800d7ac:	0800d829 	.word	0x0800d829
 800d7b0:	0800d829 	.word	0x0800d829
 800d7b4:	0800d811 	.word	0x0800d811
 800d7b8:	0800d829 	.word	0x0800d829
 800d7bc:	0800d829 	.word	0x0800d829
 800d7c0:	0800d829 	.word	0x0800d829
 800d7c4:	0800d829 	.word	0x0800d829
 800d7c8:	0800d829 	.word	0x0800d829
 800d7cc:	0800d829 	.word	0x0800d829
 800d7d0:	0800d829 	.word	0x0800d829
 800d7d4:	0800d819 	.word	0x0800d819
 800d7d8:	0800d829 	.word	0x0800d829
 800d7dc:	0800d829 	.word	0x0800d829
 800d7e0:	0800d829 	.word	0x0800d829
 800d7e4:	0800d829 	.word	0x0800d829
 800d7e8:	0800d829 	.word	0x0800d829
 800d7ec:	0800d829 	.word	0x0800d829
 800d7f0:	0800d829 	.word	0x0800d829
 800d7f4:	0800d821 	.word	0x0800d821
 800d7f8:	2301      	movs	r3, #1
 800d7fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7fe:	e0bc      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d800:	2304      	movs	r3, #4
 800d802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d806:	e0b8      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d808:	2308      	movs	r3, #8
 800d80a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d80e:	e0b4      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d810:	2310      	movs	r3, #16
 800d812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d816:	e0b0      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d818:	2320      	movs	r3, #32
 800d81a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d81e:	e0ac      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d820:	2340      	movs	r3, #64	@ 0x40
 800d822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d826:	e0a8      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d828:	2380      	movs	r3, #128	@ 0x80
 800d82a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d82e:	e0a4      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d830:	697b      	ldr	r3, [r7, #20]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	4a8f      	ldr	r2, [pc, #572]	@ (800da74 <UART_SetConfig+0x6a0>)
 800d836:	4293      	cmp	r3, r2
 800d838:	d130      	bne.n	800d89c <UART_SetConfig+0x4c8>
 800d83a:	4b8d      	ldr	r3, [pc, #564]	@ (800da70 <UART_SetConfig+0x69c>)
 800d83c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d83e:	f003 0307 	and.w	r3, r3, #7
 800d842:	2b05      	cmp	r3, #5
 800d844:	d826      	bhi.n	800d894 <UART_SetConfig+0x4c0>
 800d846:	a201      	add	r2, pc, #4	@ (adr r2, 800d84c <UART_SetConfig+0x478>)
 800d848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d84c:	0800d865 	.word	0x0800d865
 800d850:	0800d86d 	.word	0x0800d86d
 800d854:	0800d875 	.word	0x0800d875
 800d858:	0800d87d 	.word	0x0800d87d
 800d85c:	0800d885 	.word	0x0800d885
 800d860:	0800d88d 	.word	0x0800d88d
 800d864:	2300      	movs	r3, #0
 800d866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d86a:	e086      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d86c:	2304      	movs	r3, #4
 800d86e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d872:	e082      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d874:	2308      	movs	r3, #8
 800d876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d87a:	e07e      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d87c:	2310      	movs	r3, #16
 800d87e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d882:	e07a      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d884:	2320      	movs	r3, #32
 800d886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d88a:	e076      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d88c:	2340      	movs	r3, #64	@ 0x40
 800d88e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d892:	e072      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d894:	2380      	movs	r3, #128	@ 0x80
 800d896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d89a:	e06e      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	4a75      	ldr	r2, [pc, #468]	@ (800da78 <UART_SetConfig+0x6a4>)
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	d130      	bne.n	800d908 <UART_SetConfig+0x534>
 800d8a6:	4b72      	ldr	r3, [pc, #456]	@ (800da70 <UART_SetConfig+0x69c>)
 800d8a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d8aa:	f003 0307 	and.w	r3, r3, #7
 800d8ae:	2b05      	cmp	r3, #5
 800d8b0:	d826      	bhi.n	800d900 <UART_SetConfig+0x52c>
 800d8b2:	a201      	add	r2, pc, #4	@ (adr r2, 800d8b8 <UART_SetConfig+0x4e4>)
 800d8b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8b8:	0800d8d1 	.word	0x0800d8d1
 800d8bc:	0800d8d9 	.word	0x0800d8d9
 800d8c0:	0800d8e1 	.word	0x0800d8e1
 800d8c4:	0800d8e9 	.word	0x0800d8e9
 800d8c8:	0800d8f1 	.word	0x0800d8f1
 800d8cc:	0800d8f9 	.word	0x0800d8f9
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8d6:	e050      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d8d8:	2304      	movs	r3, #4
 800d8da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8de:	e04c      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d8e0:	2308      	movs	r3, #8
 800d8e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8e6:	e048      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d8e8:	2310      	movs	r3, #16
 800d8ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8ee:	e044      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d8f0:	2320      	movs	r3, #32
 800d8f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8f6:	e040      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d8f8:	2340      	movs	r3, #64	@ 0x40
 800d8fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8fe:	e03c      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d900:	2380      	movs	r3, #128	@ 0x80
 800d902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d906:	e038      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d908:	697b      	ldr	r3, [r7, #20]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	4a5b      	ldr	r2, [pc, #364]	@ (800da7c <UART_SetConfig+0x6a8>)
 800d90e:	4293      	cmp	r3, r2
 800d910:	d130      	bne.n	800d974 <UART_SetConfig+0x5a0>
 800d912:	4b57      	ldr	r3, [pc, #348]	@ (800da70 <UART_SetConfig+0x69c>)
 800d914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d916:	f003 0307 	and.w	r3, r3, #7
 800d91a:	2b05      	cmp	r3, #5
 800d91c:	d826      	bhi.n	800d96c <UART_SetConfig+0x598>
 800d91e:	a201      	add	r2, pc, #4	@ (adr r2, 800d924 <UART_SetConfig+0x550>)
 800d920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d924:	0800d93d 	.word	0x0800d93d
 800d928:	0800d945 	.word	0x0800d945
 800d92c:	0800d94d 	.word	0x0800d94d
 800d930:	0800d955 	.word	0x0800d955
 800d934:	0800d95d 	.word	0x0800d95d
 800d938:	0800d965 	.word	0x0800d965
 800d93c:	2302      	movs	r3, #2
 800d93e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d942:	e01a      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d944:	2304      	movs	r3, #4
 800d946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d94a:	e016      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d94c:	2308      	movs	r3, #8
 800d94e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d952:	e012      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d954:	2310      	movs	r3, #16
 800d956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d95a:	e00e      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d95c:	2320      	movs	r3, #32
 800d95e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d962:	e00a      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d964:	2340      	movs	r3, #64	@ 0x40
 800d966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d96a:	e006      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d96c:	2380      	movs	r3, #128	@ 0x80
 800d96e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d972:	e002      	b.n	800d97a <UART_SetConfig+0x5a6>
 800d974:	2380      	movs	r3, #128	@ 0x80
 800d976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	4a3f      	ldr	r2, [pc, #252]	@ (800da7c <UART_SetConfig+0x6a8>)
 800d980:	4293      	cmp	r3, r2
 800d982:	f040 80f8 	bne.w	800db76 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d986:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d98a:	2b20      	cmp	r3, #32
 800d98c:	dc46      	bgt.n	800da1c <UART_SetConfig+0x648>
 800d98e:	2b02      	cmp	r3, #2
 800d990:	f2c0 8082 	blt.w	800da98 <UART_SetConfig+0x6c4>
 800d994:	3b02      	subs	r3, #2
 800d996:	2b1e      	cmp	r3, #30
 800d998:	d87e      	bhi.n	800da98 <UART_SetConfig+0x6c4>
 800d99a:	a201      	add	r2, pc, #4	@ (adr r2, 800d9a0 <UART_SetConfig+0x5cc>)
 800d99c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9a0:	0800da23 	.word	0x0800da23
 800d9a4:	0800da99 	.word	0x0800da99
 800d9a8:	0800da2b 	.word	0x0800da2b
 800d9ac:	0800da99 	.word	0x0800da99
 800d9b0:	0800da99 	.word	0x0800da99
 800d9b4:	0800da99 	.word	0x0800da99
 800d9b8:	0800da3b 	.word	0x0800da3b
 800d9bc:	0800da99 	.word	0x0800da99
 800d9c0:	0800da99 	.word	0x0800da99
 800d9c4:	0800da99 	.word	0x0800da99
 800d9c8:	0800da99 	.word	0x0800da99
 800d9cc:	0800da99 	.word	0x0800da99
 800d9d0:	0800da99 	.word	0x0800da99
 800d9d4:	0800da99 	.word	0x0800da99
 800d9d8:	0800da4b 	.word	0x0800da4b
 800d9dc:	0800da99 	.word	0x0800da99
 800d9e0:	0800da99 	.word	0x0800da99
 800d9e4:	0800da99 	.word	0x0800da99
 800d9e8:	0800da99 	.word	0x0800da99
 800d9ec:	0800da99 	.word	0x0800da99
 800d9f0:	0800da99 	.word	0x0800da99
 800d9f4:	0800da99 	.word	0x0800da99
 800d9f8:	0800da99 	.word	0x0800da99
 800d9fc:	0800da99 	.word	0x0800da99
 800da00:	0800da99 	.word	0x0800da99
 800da04:	0800da99 	.word	0x0800da99
 800da08:	0800da99 	.word	0x0800da99
 800da0c:	0800da99 	.word	0x0800da99
 800da10:	0800da99 	.word	0x0800da99
 800da14:	0800da99 	.word	0x0800da99
 800da18:	0800da8b 	.word	0x0800da8b
 800da1c:	2b40      	cmp	r3, #64	@ 0x40
 800da1e:	d037      	beq.n	800da90 <UART_SetConfig+0x6bc>
 800da20:	e03a      	b.n	800da98 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800da22:	f7fd fac9 	bl	800afb8 <HAL_RCCEx_GetD3PCLK1Freq>
 800da26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800da28:	e03c      	b.n	800daa4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800da2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800da2e:	4618      	mov	r0, r3
 800da30:	f7fd fad8 	bl	800afe4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800da34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da38:	e034      	b.n	800daa4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800da3a:	f107 0318 	add.w	r3, r7, #24
 800da3e:	4618      	mov	r0, r3
 800da40:	f7fd fc24 	bl	800b28c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800da44:	69fb      	ldr	r3, [r7, #28]
 800da46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da48:	e02c      	b.n	800daa4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800da4a:	4b09      	ldr	r3, [pc, #36]	@ (800da70 <UART_SetConfig+0x69c>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	f003 0320 	and.w	r3, r3, #32
 800da52:	2b00      	cmp	r3, #0
 800da54:	d016      	beq.n	800da84 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800da56:	4b06      	ldr	r3, [pc, #24]	@ (800da70 <UART_SetConfig+0x69c>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	08db      	lsrs	r3, r3, #3
 800da5c:	f003 0303 	and.w	r3, r3, #3
 800da60:	4a07      	ldr	r2, [pc, #28]	@ (800da80 <UART_SetConfig+0x6ac>)
 800da62:	fa22 f303 	lsr.w	r3, r2, r3
 800da66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800da68:	e01c      	b.n	800daa4 <UART_SetConfig+0x6d0>
 800da6a:	bf00      	nop
 800da6c:	40011400 	.word	0x40011400
 800da70:	58024400 	.word	0x58024400
 800da74:	40007800 	.word	0x40007800
 800da78:	40007c00 	.word	0x40007c00
 800da7c:	58000c00 	.word	0x58000c00
 800da80:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800da84:	4b9d      	ldr	r3, [pc, #628]	@ (800dcfc <UART_SetConfig+0x928>)
 800da86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da88:	e00c      	b.n	800daa4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800da8a:	4b9d      	ldr	r3, [pc, #628]	@ (800dd00 <UART_SetConfig+0x92c>)
 800da8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da8e:	e009      	b.n	800daa4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800da90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800da94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da96:	e005      	b.n	800daa4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800da98:	2300      	movs	r3, #0
 800da9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800da9c:	2301      	movs	r3, #1
 800da9e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800daa2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800daa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	f000 81de 	beq.w	800de68 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800daac:	697b      	ldr	r3, [r7, #20]
 800daae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dab0:	4a94      	ldr	r2, [pc, #592]	@ (800dd04 <UART_SetConfig+0x930>)
 800dab2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dab6:	461a      	mov	r2, r3
 800dab8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800daba:	fbb3 f3f2 	udiv	r3, r3, r2
 800dabe:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dac0:	697b      	ldr	r3, [r7, #20]
 800dac2:	685a      	ldr	r2, [r3, #4]
 800dac4:	4613      	mov	r3, r2
 800dac6:	005b      	lsls	r3, r3, #1
 800dac8:	4413      	add	r3, r2
 800daca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dacc:	429a      	cmp	r2, r3
 800dace:	d305      	bcc.n	800dadc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800dad0:	697b      	ldr	r3, [r7, #20]
 800dad2:	685b      	ldr	r3, [r3, #4]
 800dad4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dad6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dad8:	429a      	cmp	r2, r3
 800dada:	d903      	bls.n	800dae4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800dadc:	2301      	movs	r3, #1
 800dade:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800dae2:	e1c1      	b.n	800de68 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dae6:	2200      	movs	r2, #0
 800dae8:	60bb      	str	r3, [r7, #8]
 800daea:	60fa      	str	r2, [r7, #12]
 800daec:	697b      	ldr	r3, [r7, #20]
 800daee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800daf0:	4a84      	ldr	r2, [pc, #528]	@ (800dd04 <UART_SetConfig+0x930>)
 800daf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800daf6:	b29b      	uxth	r3, r3
 800daf8:	2200      	movs	r2, #0
 800dafa:	603b      	str	r3, [r7, #0]
 800dafc:	607a      	str	r2, [r7, #4]
 800dafe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800db06:	f7f2 fc43 	bl	8000390 <__aeabi_uldivmod>
 800db0a:	4602      	mov	r2, r0
 800db0c:	460b      	mov	r3, r1
 800db0e:	4610      	mov	r0, r2
 800db10:	4619      	mov	r1, r3
 800db12:	f04f 0200 	mov.w	r2, #0
 800db16:	f04f 0300 	mov.w	r3, #0
 800db1a:	020b      	lsls	r3, r1, #8
 800db1c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800db20:	0202      	lsls	r2, r0, #8
 800db22:	6979      	ldr	r1, [r7, #20]
 800db24:	6849      	ldr	r1, [r1, #4]
 800db26:	0849      	lsrs	r1, r1, #1
 800db28:	2000      	movs	r0, #0
 800db2a:	460c      	mov	r4, r1
 800db2c:	4605      	mov	r5, r0
 800db2e:	eb12 0804 	adds.w	r8, r2, r4
 800db32:	eb43 0905 	adc.w	r9, r3, r5
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	685b      	ldr	r3, [r3, #4]
 800db3a:	2200      	movs	r2, #0
 800db3c:	469a      	mov	sl, r3
 800db3e:	4693      	mov	fp, r2
 800db40:	4652      	mov	r2, sl
 800db42:	465b      	mov	r3, fp
 800db44:	4640      	mov	r0, r8
 800db46:	4649      	mov	r1, r9
 800db48:	f7f2 fc22 	bl	8000390 <__aeabi_uldivmod>
 800db4c:	4602      	mov	r2, r0
 800db4e:	460b      	mov	r3, r1
 800db50:	4613      	mov	r3, r2
 800db52:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800db54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800db5a:	d308      	bcc.n	800db6e <UART_SetConfig+0x79a>
 800db5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800db62:	d204      	bcs.n	800db6e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800db64:	697b      	ldr	r3, [r7, #20]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800db6a:	60da      	str	r2, [r3, #12]
 800db6c:	e17c      	b.n	800de68 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800db6e:	2301      	movs	r3, #1
 800db70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800db74:	e178      	b.n	800de68 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800db76:	697b      	ldr	r3, [r7, #20]
 800db78:	69db      	ldr	r3, [r3, #28]
 800db7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800db7e:	f040 80c5 	bne.w	800dd0c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800db82:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800db86:	2b20      	cmp	r3, #32
 800db88:	dc48      	bgt.n	800dc1c <UART_SetConfig+0x848>
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	db7b      	blt.n	800dc86 <UART_SetConfig+0x8b2>
 800db8e:	2b20      	cmp	r3, #32
 800db90:	d879      	bhi.n	800dc86 <UART_SetConfig+0x8b2>
 800db92:	a201      	add	r2, pc, #4	@ (adr r2, 800db98 <UART_SetConfig+0x7c4>)
 800db94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db98:	0800dc23 	.word	0x0800dc23
 800db9c:	0800dc2b 	.word	0x0800dc2b
 800dba0:	0800dc87 	.word	0x0800dc87
 800dba4:	0800dc87 	.word	0x0800dc87
 800dba8:	0800dc33 	.word	0x0800dc33
 800dbac:	0800dc87 	.word	0x0800dc87
 800dbb0:	0800dc87 	.word	0x0800dc87
 800dbb4:	0800dc87 	.word	0x0800dc87
 800dbb8:	0800dc43 	.word	0x0800dc43
 800dbbc:	0800dc87 	.word	0x0800dc87
 800dbc0:	0800dc87 	.word	0x0800dc87
 800dbc4:	0800dc87 	.word	0x0800dc87
 800dbc8:	0800dc87 	.word	0x0800dc87
 800dbcc:	0800dc87 	.word	0x0800dc87
 800dbd0:	0800dc87 	.word	0x0800dc87
 800dbd4:	0800dc87 	.word	0x0800dc87
 800dbd8:	0800dc53 	.word	0x0800dc53
 800dbdc:	0800dc87 	.word	0x0800dc87
 800dbe0:	0800dc87 	.word	0x0800dc87
 800dbe4:	0800dc87 	.word	0x0800dc87
 800dbe8:	0800dc87 	.word	0x0800dc87
 800dbec:	0800dc87 	.word	0x0800dc87
 800dbf0:	0800dc87 	.word	0x0800dc87
 800dbf4:	0800dc87 	.word	0x0800dc87
 800dbf8:	0800dc87 	.word	0x0800dc87
 800dbfc:	0800dc87 	.word	0x0800dc87
 800dc00:	0800dc87 	.word	0x0800dc87
 800dc04:	0800dc87 	.word	0x0800dc87
 800dc08:	0800dc87 	.word	0x0800dc87
 800dc0c:	0800dc87 	.word	0x0800dc87
 800dc10:	0800dc87 	.word	0x0800dc87
 800dc14:	0800dc87 	.word	0x0800dc87
 800dc18:	0800dc79 	.word	0x0800dc79
 800dc1c:	2b40      	cmp	r3, #64	@ 0x40
 800dc1e:	d02e      	beq.n	800dc7e <UART_SetConfig+0x8aa>
 800dc20:	e031      	b.n	800dc86 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dc22:	f7fb fa13 	bl	800904c <HAL_RCC_GetPCLK1Freq>
 800dc26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dc28:	e033      	b.n	800dc92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dc2a:	f7fb fa25 	bl	8009078 <HAL_RCC_GetPCLK2Freq>
 800dc2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dc30:	e02f      	b.n	800dc92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dc32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dc36:	4618      	mov	r0, r3
 800dc38:	f7fd f9d4 	bl	800afe4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dc3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc40:	e027      	b.n	800dc92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dc42:	f107 0318 	add.w	r3, r7, #24
 800dc46:	4618      	mov	r0, r3
 800dc48:	f7fd fb20 	bl	800b28c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dc4c:	69fb      	ldr	r3, [r7, #28]
 800dc4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc50:	e01f      	b.n	800dc92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dc52:	4b2d      	ldr	r3, [pc, #180]	@ (800dd08 <UART_SetConfig+0x934>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	f003 0320 	and.w	r3, r3, #32
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d009      	beq.n	800dc72 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dc5e:	4b2a      	ldr	r3, [pc, #168]	@ (800dd08 <UART_SetConfig+0x934>)
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	08db      	lsrs	r3, r3, #3
 800dc64:	f003 0303 	and.w	r3, r3, #3
 800dc68:	4a24      	ldr	r2, [pc, #144]	@ (800dcfc <UART_SetConfig+0x928>)
 800dc6a:	fa22 f303 	lsr.w	r3, r2, r3
 800dc6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dc70:	e00f      	b.n	800dc92 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800dc72:	4b22      	ldr	r3, [pc, #136]	@ (800dcfc <UART_SetConfig+0x928>)
 800dc74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc76:	e00c      	b.n	800dc92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dc78:	4b21      	ldr	r3, [pc, #132]	@ (800dd00 <UART_SetConfig+0x92c>)
 800dc7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc7c:	e009      	b.n	800dc92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dc7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dc82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc84:	e005      	b.n	800dc92 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800dc86:	2300      	movs	r3, #0
 800dc88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800dc8a:	2301      	movs	r3, #1
 800dc8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800dc90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dc92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	f000 80e7 	beq.w	800de68 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dc9a:	697b      	ldr	r3, [r7, #20]
 800dc9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc9e:	4a19      	ldr	r2, [pc, #100]	@ (800dd04 <UART_SetConfig+0x930>)
 800dca0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dca4:	461a      	mov	r2, r3
 800dca6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dca8:	fbb3 f3f2 	udiv	r3, r3, r2
 800dcac:	005a      	lsls	r2, r3, #1
 800dcae:	697b      	ldr	r3, [r7, #20]
 800dcb0:	685b      	ldr	r3, [r3, #4]
 800dcb2:	085b      	lsrs	r3, r3, #1
 800dcb4:	441a      	add	r2, r3
 800dcb6:	697b      	ldr	r3, [r7, #20]
 800dcb8:	685b      	ldr	r3, [r3, #4]
 800dcba:	fbb2 f3f3 	udiv	r3, r2, r3
 800dcbe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dcc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcc2:	2b0f      	cmp	r3, #15
 800dcc4:	d916      	bls.n	800dcf4 <UART_SetConfig+0x920>
 800dcc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dccc:	d212      	bcs.n	800dcf4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dcce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcd0:	b29b      	uxth	r3, r3
 800dcd2:	f023 030f 	bic.w	r3, r3, #15
 800dcd6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dcd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcda:	085b      	lsrs	r3, r3, #1
 800dcdc:	b29b      	uxth	r3, r3
 800dcde:	f003 0307 	and.w	r3, r3, #7
 800dce2:	b29a      	uxth	r2, r3
 800dce4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800dce6:	4313      	orrs	r3, r2
 800dce8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800dcea:	697b      	ldr	r3, [r7, #20]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800dcf0:	60da      	str	r2, [r3, #12]
 800dcf2:	e0b9      	b.n	800de68 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800dcf4:	2301      	movs	r3, #1
 800dcf6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800dcfa:	e0b5      	b.n	800de68 <UART_SetConfig+0xa94>
 800dcfc:	03d09000 	.word	0x03d09000
 800dd00:	003d0900 	.word	0x003d0900
 800dd04:	080150d8 	.word	0x080150d8
 800dd08:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800dd0c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800dd10:	2b20      	cmp	r3, #32
 800dd12:	dc49      	bgt.n	800dda8 <UART_SetConfig+0x9d4>
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	db7c      	blt.n	800de12 <UART_SetConfig+0xa3e>
 800dd18:	2b20      	cmp	r3, #32
 800dd1a:	d87a      	bhi.n	800de12 <UART_SetConfig+0xa3e>
 800dd1c:	a201      	add	r2, pc, #4	@ (adr r2, 800dd24 <UART_SetConfig+0x950>)
 800dd1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd22:	bf00      	nop
 800dd24:	0800ddaf 	.word	0x0800ddaf
 800dd28:	0800ddb7 	.word	0x0800ddb7
 800dd2c:	0800de13 	.word	0x0800de13
 800dd30:	0800de13 	.word	0x0800de13
 800dd34:	0800ddbf 	.word	0x0800ddbf
 800dd38:	0800de13 	.word	0x0800de13
 800dd3c:	0800de13 	.word	0x0800de13
 800dd40:	0800de13 	.word	0x0800de13
 800dd44:	0800ddcf 	.word	0x0800ddcf
 800dd48:	0800de13 	.word	0x0800de13
 800dd4c:	0800de13 	.word	0x0800de13
 800dd50:	0800de13 	.word	0x0800de13
 800dd54:	0800de13 	.word	0x0800de13
 800dd58:	0800de13 	.word	0x0800de13
 800dd5c:	0800de13 	.word	0x0800de13
 800dd60:	0800de13 	.word	0x0800de13
 800dd64:	0800dddf 	.word	0x0800dddf
 800dd68:	0800de13 	.word	0x0800de13
 800dd6c:	0800de13 	.word	0x0800de13
 800dd70:	0800de13 	.word	0x0800de13
 800dd74:	0800de13 	.word	0x0800de13
 800dd78:	0800de13 	.word	0x0800de13
 800dd7c:	0800de13 	.word	0x0800de13
 800dd80:	0800de13 	.word	0x0800de13
 800dd84:	0800de13 	.word	0x0800de13
 800dd88:	0800de13 	.word	0x0800de13
 800dd8c:	0800de13 	.word	0x0800de13
 800dd90:	0800de13 	.word	0x0800de13
 800dd94:	0800de13 	.word	0x0800de13
 800dd98:	0800de13 	.word	0x0800de13
 800dd9c:	0800de13 	.word	0x0800de13
 800dda0:	0800de13 	.word	0x0800de13
 800dda4:	0800de05 	.word	0x0800de05
 800dda8:	2b40      	cmp	r3, #64	@ 0x40
 800ddaa:	d02e      	beq.n	800de0a <UART_SetConfig+0xa36>
 800ddac:	e031      	b.n	800de12 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ddae:	f7fb f94d 	bl	800904c <HAL_RCC_GetPCLK1Freq>
 800ddb2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ddb4:	e033      	b.n	800de1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ddb6:	f7fb f95f 	bl	8009078 <HAL_RCC_GetPCLK2Freq>
 800ddba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ddbc:	e02f      	b.n	800de1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ddbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f7fd f90e 	bl	800afe4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ddc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ddcc:	e027      	b.n	800de1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ddce:	f107 0318 	add.w	r3, r7, #24
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f7fd fa5a 	bl	800b28c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ddd8:	69fb      	ldr	r3, [r7, #28]
 800ddda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dddc:	e01f      	b.n	800de1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ddde:	4b2d      	ldr	r3, [pc, #180]	@ (800de94 <UART_SetConfig+0xac0>)
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	f003 0320 	and.w	r3, r3, #32
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d009      	beq.n	800ddfe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ddea:	4b2a      	ldr	r3, [pc, #168]	@ (800de94 <UART_SetConfig+0xac0>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	08db      	lsrs	r3, r3, #3
 800ddf0:	f003 0303 	and.w	r3, r3, #3
 800ddf4:	4a28      	ldr	r2, [pc, #160]	@ (800de98 <UART_SetConfig+0xac4>)
 800ddf6:	fa22 f303 	lsr.w	r3, r2, r3
 800ddfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ddfc:	e00f      	b.n	800de1e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ddfe:	4b26      	ldr	r3, [pc, #152]	@ (800de98 <UART_SetConfig+0xac4>)
 800de00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de02:	e00c      	b.n	800de1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800de04:	4b25      	ldr	r3, [pc, #148]	@ (800de9c <UART_SetConfig+0xac8>)
 800de06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de08:	e009      	b.n	800de1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800de0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800de0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de10:	e005      	b.n	800de1e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800de12:	2300      	movs	r3, #0
 800de14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800de16:	2301      	movs	r3, #1
 800de18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800de1c:	bf00      	nop
    }

    if (pclk != 0U)
 800de1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de20:	2b00      	cmp	r3, #0
 800de22:	d021      	beq.n	800de68 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800de24:	697b      	ldr	r3, [r7, #20]
 800de26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de28:	4a1d      	ldr	r2, [pc, #116]	@ (800dea0 <UART_SetConfig+0xacc>)
 800de2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de2e:	461a      	mov	r2, r3
 800de30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de32:	fbb3 f2f2 	udiv	r2, r3, r2
 800de36:	697b      	ldr	r3, [r7, #20]
 800de38:	685b      	ldr	r3, [r3, #4]
 800de3a:	085b      	lsrs	r3, r3, #1
 800de3c:	441a      	add	r2, r3
 800de3e:	697b      	ldr	r3, [r7, #20]
 800de40:	685b      	ldr	r3, [r3, #4]
 800de42:	fbb2 f3f3 	udiv	r3, r2, r3
 800de46:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800de48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de4a:	2b0f      	cmp	r3, #15
 800de4c:	d909      	bls.n	800de62 <UART_SetConfig+0xa8e>
 800de4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800de54:	d205      	bcs.n	800de62 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800de56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de58:	b29a      	uxth	r2, r3
 800de5a:	697b      	ldr	r3, [r7, #20]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	60da      	str	r2, [r3, #12]
 800de60:	e002      	b.n	800de68 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800de62:	2301      	movs	r3, #1
 800de64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800de68:	697b      	ldr	r3, [r7, #20]
 800de6a:	2201      	movs	r2, #1
 800de6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800de70:	697b      	ldr	r3, [r7, #20]
 800de72:	2201      	movs	r2, #1
 800de74:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800de78:	697b      	ldr	r3, [r7, #20]
 800de7a:	2200      	movs	r2, #0
 800de7c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800de7e:	697b      	ldr	r3, [r7, #20]
 800de80:	2200      	movs	r2, #0
 800de82:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800de84:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800de88:	4618      	mov	r0, r3
 800de8a:	3748      	adds	r7, #72	@ 0x48
 800de8c:	46bd      	mov	sp, r7
 800de8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800de92:	bf00      	nop
 800de94:	58024400 	.word	0x58024400
 800de98:	03d09000 	.word	0x03d09000
 800de9c:	003d0900 	.word	0x003d0900
 800dea0:	080150d8 	.word	0x080150d8

0800dea4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dea4:	b480      	push	{r7}
 800dea6:	b083      	sub	sp, #12
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800deb0:	f003 0308 	and.w	r3, r3, #8
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d00a      	beq.n	800dece <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	685b      	ldr	r3, [r3, #4]
 800debe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	430a      	orrs	r2, r1
 800decc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ded2:	f003 0301 	and.w	r3, r3, #1
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d00a      	beq.n	800def0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	685b      	ldr	r3, [r3, #4]
 800dee0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	430a      	orrs	r2, r1
 800deee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800def4:	f003 0302 	and.w	r3, r3, #2
 800def8:	2b00      	cmp	r3, #0
 800defa:	d00a      	beq.n	800df12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	685b      	ldr	r3, [r3, #4]
 800df02:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	430a      	orrs	r2, r1
 800df10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df16:	f003 0304 	and.w	r3, r3, #4
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d00a      	beq.n	800df34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	685b      	ldr	r3, [r3, #4]
 800df24:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	430a      	orrs	r2, r1
 800df32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df38:	f003 0310 	and.w	r3, r3, #16
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d00a      	beq.n	800df56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	689b      	ldr	r3, [r3, #8]
 800df46:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	430a      	orrs	r2, r1
 800df54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df5a:	f003 0320 	and.w	r3, r3, #32
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d00a      	beq.n	800df78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	689b      	ldr	r3, [r3, #8]
 800df68:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	430a      	orrs	r2, r1
 800df76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df80:	2b00      	cmp	r3, #0
 800df82:	d01a      	beq.n	800dfba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	685b      	ldr	r3, [r3, #4]
 800df8a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	430a      	orrs	r2, r1
 800df98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800df9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dfa2:	d10a      	bne.n	800dfba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	685b      	ldr	r3, [r3, #4]
 800dfaa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	430a      	orrs	r2, r1
 800dfb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d00a      	beq.n	800dfdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	685b      	ldr	r3, [r3, #4]
 800dfcc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	430a      	orrs	r2, r1
 800dfda:	605a      	str	r2, [r3, #4]
  }
}
 800dfdc:	bf00      	nop
 800dfde:	370c      	adds	r7, #12
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe6:	4770      	bx	lr

0800dfe8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b098      	sub	sp, #96	@ 0x60
 800dfec:	af02      	add	r7, sp, #8
 800dfee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2200      	movs	r2, #0
 800dff4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dff8:	f7f4 fd66 	bl	8002ac8 <HAL_GetTick>
 800dffc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	f003 0308 	and.w	r3, r3, #8
 800e008:	2b08      	cmp	r3, #8
 800e00a:	d12f      	bne.n	800e06c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e00c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e010:	9300      	str	r3, [sp, #0]
 800e012:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e014:	2200      	movs	r2, #0
 800e016:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	f000 f88e 	bl	800e13c <UART_WaitOnFlagUntilTimeout>
 800e020:	4603      	mov	r3, r0
 800e022:	2b00      	cmp	r3, #0
 800e024:	d022      	beq.n	800e06c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e02c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e02e:	e853 3f00 	ldrex	r3, [r3]
 800e032:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e036:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e03a:	653b      	str	r3, [r7, #80]	@ 0x50
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	461a      	mov	r2, r3
 800e042:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e044:	647b      	str	r3, [r7, #68]	@ 0x44
 800e046:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e048:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e04a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e04c:	e841 2300 	strex	r3, r2, [r1]
 800e050:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e054:	2b00      	cmp	r3, #0
 800e056:	d1e6      	bne.n	800e026 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2220      	movs	r2, #32
 800e05c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	2200      	movs	r2, #0
 800e064:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e068:	2303      	movs	r3, #3
 800e06a:	e063      	b.n	800e134 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	f003 0304 	and.w	r3, r3, #4
 800e076:	2b04      	cmp	r3, #4
 800e078:	d149      	bne.n	800e10e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e07a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e07e:	9300      	str	r3, [sp, #0]
 800e080:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e082:	2200      	movs	r2, #0
 800e084:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e088:	6878      	ldr	r0, [r7, #4]
 800e08a:	f000 f857 	bl	800e13c <UART_WaitOnFlagUntilTimeout>
 800e08e:	4603      	mov	r3, r0
 800e090:	2b00      	cmp	r3, #0
 800e092:	d03c      	beq.n	800e10e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e09a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e09c:	e853 3f00 	ldrex	r3, [r3]
 800e0a0:	623b      	str	r3, [r7, #32]
   return(result);
 800e0a2:	6a3b      	ldr	r3, [r7, #32]
 800e0a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e0a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	461a      	mov	r2, r3
 800e0b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e0b2:	633b      	str	r3, [r7, #48]	@ 0x30
 800e0b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e0b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e0ba:	e841 2300 	strex	r3, r2, [r1]
 800e0be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e0c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d1e6      	bne.n	800e094 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	3308      	adds	r3, #8
 800e0cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0ce:	693b      	ldr	r3, [r7, #16]
 800e0d0:	e853 3f00 	ldrex	r3, [r3]
 800e0d4:	60fb      	str	r3, [r7, #12]
   return(result);
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	f023 0301 	bic.w	r3, r3, #1
 800e0dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	3308      	adds	r3, #8
 800e0e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e0e6:	61fa      	str	r2, [r7, #28]
 800e0e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0ea:	69b9      	ldr	r1, [r7, #24]
 800e0ec:	69fa      	ldr	r2, [r7, #28]
 800e0ee:	e841 2300 	strex	r3, r2, [r1]
 800e0f2:	617b      	str	r3, [r7, #20]
   return(result);
 800e0f4:	697b      	ldr	r3, [r7, #20]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d1e5      	bne.n	800e0c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2220      	movs	r2, #32
 800e0fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2200      	movs	r2, #0
 800e106:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e10a:	2303      	movs	r3, #3
 800e10c:	e012      	b.n	800e134 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2220      	movs	r2, #32
 800e112:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2220      	movs	r2, #32
 800e11a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	2200      	movs	r2, #0
 800e122:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2200      	movs	r2, #0
 800e128:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	2200      	movs	r2, #0
 800e12e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e132:	2300      	movs	r3, #0
}
 800e134:	4618      	mov	r0, r3
 800e136:	3758      	adds	r7, #88	@ 0x58
 800e138:	46bd      	mov	sp, r7
 800e13a:	bd80      	pop	{r7, pc}

0800e13c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b084      	sub	sp, #16
 800e140:	af00      	add	r7, sp, #0
 800e142:	60f8      	str	r0, [r7, #12]
 800e144:	60b9      	str	r1, [r7, #8]
 800e146:	603b      	str	r3, [r7, #0]
 800e148:	4613      	mov	r3, r2
 800e14a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e14c:	e04f      	b.n	800e1ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e14e:	69bb      	ldr	r3, [r7, #24]
 800e150:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e154:	d04b      	beq.n	800e1ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e156:	f7f4 fcb7 	bl	8002ac8 <HAL_GetTick>
 800e15a:	4602      	mov	r2, r0
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	1ad3      	subs	r3, r2, r3
 800e160:	69ba      	ldr	r2, [r7, #24]
 800e162:	429a      	cmp	r2, r3
 800e164:	d302      	bcc.n	800e16c <UART_WaitOnFlagUntilTimeout+0x30>
 800e166:	69bb      	ldr	r3, [r7, #24]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d101      	bne.n	800e170 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e16c:	2303      	movs	r3, #3
 800e16e:	e04e      	b.n	800e20e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	f003 0304 	and.w	r3, r3, #4
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d037      	beq.n	800e1ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800e17e:	68bb      	ldr	r3, [r7, #8]
 800e180:	2b80      	cmp	r3, #128	@ 0x80
 800e182:	d034      	beq.n	800e1ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800e184:	68bb      	ldr	r3, [r7, #8]
 800e186:	2b40      	cmp	r3, #64	@ 0x40
 800e188:	d031      	beq.n	800e1ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	69db      	ldr	r3, [r3, #28]
 800e190:	f003 0308 	and.w	r3, r3, #8
 800e194:	2b08      	cmp	r3, #8
 800e196:	d110      	bne.n	800e1ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	2208      	movs	r2, #8
 800e19e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e1a0:	68f8      	ldr	r0, [r7, #12]
 800e1a2:	f000 f839 	bl	800e218 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	2208      	movs	r2, #8
 800e1aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e1b6:	2301      	movs	r3, #1
 800e1b8:	e029      	b.n	800e20e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	69db      	ldr	r3, [r3, #28]
 800e1c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e1c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e1c8:	d111      	bne.n	800e1ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e1d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e1d4:	68f8      	ldr	r0, [r7, #12]
 800e1d6:	f000 f81f 	bl	800e218 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	2220      	movs	r2, #32
 800e1de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e1ea:	2303      	movs	r3, #3
 800e1ec:	e00f      	b.n	800e20e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	69da      	ldr	r2, [r3, #28]
 800e1f4:	68bb      	ldr	r3, [r7, #8]
 800e1f6:	4013      	ands	r3, r2
 800e1f8:	68ba      	ldr	r2, [r7, #8]
 800e1fa:	429a      	cmp	r2, r3
 800e1fc:	bf0c      	ite	eq
 800e1fe:	2301      	moveq	r3, #1
 800e200:	2300      	movne	r3, #0
 800e202:	b2db      	uxtb	r3, r3
 800e204:	461a      	mov	r2, r3
 800e206:	79fb      	ldrb	r3, [r7, #7]
 800e208:	429a      	cmp	r2, r3
 800e20a:	d0a0      	beq.n	800e14e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e20c:	2300      	movs	r3, #0
}
 800e20e:	4618      	mov	r0, r3
 800e210:	3710      	adds	r7, #16
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}
	...

0800e218 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e218:	b480      	push	{r7}
 800e21a:	b095      	sub	sp, #84	@ 0x54
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e228:	e853 3f00 	ldrex	r3, [r3]
 800e22c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e22e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e230:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e234:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	461a      	mov	r2, r3
 800e23c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e23e:	643b      	str	r3, [r7, #64]	@ 0x40
 800e240:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e242:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e244:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e246:	e841 2300 	strex	r3, r2, [r1]
 800e24a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e24c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d1e6      	bne.n	800e220 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	3308      	adds	r3, #8
 800e258:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e25a:	6a3b      	ldr	r3, [r7, #32]
 800e25c:	e853 3f00 	ldrex	r3, [r3]
 800e260:	61fb      	str	r3, [r7, #28]
   return(result);
 800e262:	69fa      	ldr	r2, [r7, #28]
 800e264:	4b1e      	ldr	r3, [pc, #120]	@ (800e2e0 <UART_EndRxTransfer+0xc8>)
 800e266:	4013      	ands	r3, r2
 800e268:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	3308      	adds	r3, #8
 800e270:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e272:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e274:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e276:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e278:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e27a:	e841 2300 	strex	r3, r2, [r1]
 800e27e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e282:	2b00      	cmp	r3, #0
 800e284:	d1e5      	bne.n	800e252 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e28a:	2b01      	cmp	r3, #1
 800e28c:	d118      	bne.n	800e2c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	e853 3f00 	ldrex	r3, [r3]
 800e29a:	60bb      	str	r3, [r7, #8]
   return(result);
 800e29c:	68bb      	ldr	r3, [r7, #8]
 800e29e:	f023 0310 	bic.w	r3, r3, #16
 800e2a2:	647b      	str	r3, [r7, #68]	@ 0x44
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	461a      	mov	r2, r3
 800e2aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e2ac:	61bb      	str	r3, [r7, #24]
 800e2ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2b0:	6979      	ldr	r1, [r7, #20]
 800e2b2:	69ba      	ldr	r2, [r7, #24]
 800e2b4:	e841 2300 	strex	r3, r2, [r1]
 800e2b8:	613b      	str	r3, [r7, #16]
   return(result);
 800e2ba:	693b      	ldr	r3, [r7, #16]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d1e6      	bne.n	800e28e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	2220      	movs	r2, #32
 800e2c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e2d4:	bf00      	nop
 800e2d6:	3754      	adds	r7, #84	@ 0x54
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2de:	4770      	bx	lr
 800e2e0:	effffffe 	.word	0xeffffffe

0800e2e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e2e4:	b084      	sub	sp, #16
 800e2e6:	b580      	push	{r7, lr}
 800e2e8:	b084      	sub	sp, #16
 800e2ea:	af00      	add	r7, sp, #0
 800e2ec:	6078      	str	r0, [r7, #4]
 800e2ee:	f107 001c 	add.w	r0, r7, #28
 800e2f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e2f6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800e2fa:	2b01      	cmp	r3, #1
 800e2fc:	d121      	bne.n	800e342 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e302:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	68da      	ldr	r2, [r3, #12]
 800e30e:	4b2c      	ldr	r3, [pc, #176]	@ (800e3c0 <USB_CoreInit+0xdc>)
 800e310:	4013      	ands	r3, r2
 800e312:	687a      	ldr	r2, [r7, #4]
 800e314:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	68db      	ldr	r3, [r3, #12]
 800e31a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e322:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e326:	2b01      	cmp	r3, #1
 800e328:	d105      	bne.n	800e336 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	68db      	ldr	r3, [r3, #12]
 800e32e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f001 faf6 	bl	800f928 <USB_CoreReset>
 800e33c:	4603      	mov	r3, r0
 800e33e:	73fb      	strb	r3, [r7, #15]
 800e340:	e01b      	b.n	800e37a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	68db      	ldr	r3, [r3, #12]
 800e346:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	f001 faea 	bl	800f928 <USB_CoreReset>
 800e354:	4603      	mov	r3, r0
 800e356:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e358:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d106      	bne.n	800e36e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e364:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	639a      	str	r2, [r3, #56]	@ 0x38
 800e36c:	e005      	b.n	800e37a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e372:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e37a:	7fbb      	ldrb	r3, [r7, #30]
 800e37c:	2b01      	cmp	r3, #1
 800e37e:	d116      	bne.n	800e3ae <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e384:	b29a      	uxth	r2, r3
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e38e:	4b0d      	ldr	r3, [pc, #52]	@ (800e3c4 <USB_CoreInit+0xe0>)
 800e390:	4313      	orrs	r3, r2
 800e392:	687a      	ldr	r2, [r7, #4]
 800e394:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	689b      	ldr	r3, [r3, #8]
 800e39a:	f043 0206 	orr.w	r2, r3, #6
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	689b      	ldr	r3, [r3, #8]
 800e3a6:	f043 0220 	orr.w	r2, r3, #32
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e3ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	3710      	adds	r7, #16
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e3ba:	b004      	add	sp, #16
 800e3bc:	4770      	bx	lr
 800e3be:	bf00      	nop
 800e3c0:	ffbdffbf 	.word	0xffbdffbf
 800e3c4:	03ee0000 	.word	0x03ee0000

0800e3c8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e3c8:	b480      	push	{r7}
 800e3ca:	b087      	sub	sp, #28
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	60f8      	str	r0, [r7, #12]
 800e3d0:	60b9      	str	r1, [r7, #8]
 800e3d2:	4613      	mov	r3, r2
 800e3d4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e3d6:	79fb      	ldrb	r3, [r7, #7]
 800e3d8:	2b02      	cmp	r3, #2
 800e3da:	d165      	bne.n	800e4a8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	4a41      	ldr	r2, [pc, #260]	@ (800e4e4 <USB_SetTurnaroundTime+0x11c>)
 800e3e0:	4293      	cmp	r3, r2
 800e3e2:	d906      	bls.n	800e3f2 <USB_SetTurnaroundTime+0x2a>
 800e3e4:	68bb      	ldr	r3, [r7, #8]
 800e3e6:	4a40      	ldr	r2, [pc, #256]	@ (800e4e8 <USB_SetTurnaroundTime+0x120>)
 800e3e8:	4293      	cmp	r3, r2
 800e3ea:	d202      	bcs.n	800e3f2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e3ec:	230f      	movs	r3, #15
 800e3ee:	617b      	str	r3, [r7, #20]
 800e3f0:	e062      	b.n	800e4b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e3f2:	68bb      	ldr	r3, [r7, #8]
 800e3f4:	4a3c      	ldr	r2, [pc, #240]	@ (800e4e8 <USB_SetTurnaroundTime+0x120>)
 800e3f6:	4293      	cmp	r3, r2
 800e3f8:	d306      	bcc.n	800e408 <USB_SetTurnaroundTime+0x40>
 800e3fa:	68bb      	ldr	r3, [r7, #8]
 800e3fc:	4a3b      	ldr	r2, [pc, #236]	@ (800e4ec <USB_SetTurnaroundTime+0x124>)
 800e3fe:	4293      	cmp	r3, r2
 800e400:	d202      	bcs.n	800e408 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e402:	230e      	movs	r3, #14
 800e404:	617b      	str	r3, [r7, #20]
 800e406:	e057      	b.n	800e4b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	4a38      	ldr	r2, [pc, #224]	@ (800e4ec <USB_SetTurnaroundTime+0x124>)
 800e40c:	4293      	cmp	r3, r2
 800e40e:	d306      	bcc.n	800e41e <USB_SetTurnaroundTime+0x56>
 800e410:	68bb      	ldr	r3, [r7, #8]
 800e412:	4a37      	ldr	r2, [pc, #220]	@ (800e4f0 <USB_SetTurnaroundTime+0x128>)
 800e414:	4293      	cmp	r3, r2
 800e416:	d202      	bcs.n	800e41e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e418:	230d      	movs	r3, #13
 800e41a:	617b      	str	r3, [r7, #20]
 800e41c:	e04c      	b.n	800e4b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e41e:	68bb      	ldr	r3, [r7, #8]
 800e420:	4a33      	ldr	r2, [pc, #204]	@ (800e4f0 <USB_SetTurnaroundTime+0x128>)
 800e422:	4293      	cmp	r3, r2
 800e424:	d306      	bcc.n	800e434 <USB_SetTurnaroundTime+0x6c>
 800e426:	68bb      	ldr	r3, [r7, #8]
 800e428:	4a32      	ldr	r2, [pc, #200]	@ (800e4f4 <USB_SetTurnaroundTime+0x12c>)
 800e42a:	4293      	cmp	r3, r2
 800e42c:	d802      	bhi.n	800e434 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e42e:	230c      	movs	r3, #12
 800e430:	617b      	str	r3, [r7, #20]
 800e432:	e041      	b.n	800e4b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e434:	68bb      	ldr	r3, [r7, #8]
 800e436:	4a2f      	ldr	r2, [pc, #188]	@ (800e4f4 <USB_SetTurnaroundTime+0x12c>)
 800e438:	4293      	cmp	r3, r2
 800e43a:	d906      	bls.n	800e44a <USB_SetTurnaroundTime+0x82>
 800e43c:	68bb      	ldr	r3, [r7, #8]
 800e43e:	4a2e      	ldr	r2, [pc, #184]	@ (800e4f8 <USB_SetTurnaroundTime+0x130>)
 800e440:	4293      	cmp	r3, r2
 800e442:	d802      	bhi.n	800e44a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e444:	230b      	movs	r3, #11
 800e446:	617b      	str	r3, [r7, #20]
 800e448:	e036      	b.n	800e4b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e44a:	68bb      	ldr	r3, [r7, #8]
 800e44c:	4a2a      	ldr	r2, [pc, #168]	@ (800e4f8 <USB_SetTurnaroundTime+0x130>)
 800e44e:	4293      	cmp	r3, r2
 800e450:	d906      	bls.n	800e460 <USB_SetTurnaroundTime+0x98>
 800e452:	68bb      	ldr	r3, [r7, #8]
 800e454:	4a29      	ldr	r2, [pc, #164]	@ (800e4fc <USB_SetTurnaroundTime+0x134>)
 800e456:	4293      	cmp	r3, r2
 800e458:	d802      	bhi.n	800e460 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e45a:	230a      	movs	r3, #10
 800e45c:	617b      	str	r3, [r7, #20]
 800e45e:	e02b      	b.n	800e4b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e460:	68bb      	ldr	r3, [r7, #8]
 800e462:	4a26      	ldr	r2, [pc, #152]	@ (800e4fc <USB_SetTurnaroundTime+0x134>)
 800e464:	4293      	cmp	r3, r2
 800e466:	d906      	bls.n	800e476 <USB_SetTurnaroundTime+0xae>
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	4a25      	ldr	r2, [pc, #148]	@ (800e500 <USB_SetTurnaroundTime+0x138>)
 800e46c:	4293      	cmp	r3, r2
 800e46e:	d202      	bcs.n	800e476 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e470:	2309      	movs	r3, #9
 800e472:	617b      	str	r3, [r7, #20]
 800e474:	e020      	b.n	800e4b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	4a21      	ldr	r2, [pc, #132]	@ (800e500 <USB_SetTurnaroundTime+0x138>)
 800e47a:	4293      	cmp	r3, r2
 800e47c:	d306      	bcc.n	800e48c <USB_SetTurnaroundTime+0xc4>
 800e47e:	68bb      	ldr	r3, [r7, #8]
 800e480:	4a20      	ldr	r2, [pc, #128]	@ (800e504 <USB_SetTurnaroundTime+0x13c>)
 800e482:	4293      	cmp	r3, r2
 800e484:	d802      	bhi.n	800e48c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e486:	2308      	movs	r3, #8
 800e488:	617b      	str	r3, [r7, #20]
 800e48a:	e015      	b.n	800e4b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e48c:	68bb      	ldr	r3, [r7, #8]
 800e48e:	4a1d      	ldr	r2, [pc, #116]	@ (800e504 <USB_SetTurnaroundTime+0x13c>)
 800e490:	4293      	cmp	r3, r2
 800e492:	d906      	bls.n	800e4a2 <USB_SetTurnaroundTime+0xda>
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	4a1c      	ldr	r2, [pc, #112]	@ (800e508 <USB_SetTurnaroundTime+0x140>)
 800e498:	4293      	cmp	r3, r2
 800e49a:	d202      	bcs.n	800e4a2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e49c:	2307      	movs	r3, #7
 800e49e:	617b      	str	r3, [r7, #20]
 800e4a0:	e00a      	b.n	800e4b8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e4a2:	2306      	movs	r3, #6
 800e4a4:	617b      	str	r3, [r7, #20]
 800e4a6:	e007      	b.n	800e4b8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e4a8:	79fb      	ldrb	r3, [r7, #7]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d102      	bne.n	800e4b4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e4ae:	2309      	movs	r3, #9
 800e4b0:	617b      	str	r3, [r7, #20]
 800e4b2:	e001      	b.n	800e4b8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e4b4:	2309      	movs	r3, #9
 800e4b6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	68db      	ldr	r3, [r3, #12]
 800e4bc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	68da      	ldr	r2, [r3, #12]
 800e4c8:	697b      	ldr	r3, [r7, #20]
 800e4ca:	029b      	lsls	r3, r3, #10
 800e4cc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800e4d0:	431a      	orrs	r2, r3
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e4d6:	2300      	movs	r3, #0
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	371c      	adds	r7, #28
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e2:	4770      	bx	lr
 800e4e4:	00d8acbf 	.word	0x00d8acbf
 800e4e8:	00e4e1c0 	.word	0x00e4e1c0
 800e4ec:	00f42400 	.word	0x00f42400
 800e4f0:	01067380 	.word	0x01067380
 800e4f4:	011a499f 	.word	0x011a499f
 800e4f8:	01312cff 	.word	0x01312cff
 800e4fc:	014ca43f 	.word	0x014ca43f
 800e500:	016e3600 	.word	0x016e3600
 800e504:	01a6ab1f 	.word	0x01a6ab1f
 800e508:	01e84800 	.word	0x01e84800

0800e50c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e50c:	b480      	push	{r7}
 800e50e:	b083      	sub	sp, #12
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	689b      	ldr	r3, [r3, #8]
 800e518:	f043 0201 	orr.w	r2, r3, #1
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e520:	2300      	movs	r3, #0
}
 800e522:	4618      	mov	r0, r3
 800e524:	370c      	adds	r7, #12
 800e526:	46bd      	mov	sp, r7
 800e528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52c:	4770      	bx	lr

0800e52e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e52e:	b480      	push	{r7}
 800e530:	b083      	sub	sp, #12
 800e532:	af00      	add	r7, sp, #0
 800e534:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	689b      	ldr	r3, [r3, #8]
 800e53a:	f023 0201 	bic.w	r2, r3, #1
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e542:	2300      	movs	r3, #0
}
 800e544:	4618      	mov	r0, r3
 800e546:	370c      	adds	r7, #12
 800e548:	46bd      	mov	sp, r7
 800e54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54e:	4770      	bx	lr

0800e550 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b084      	sub	sp, #16
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
 800e558:	460b      	mov	r3, r1
 800e55a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e55c:	2300      	movs	r3, #0
 800e55e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	68db      	ldr	r3, [r3, #12]
 800e564:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e56c:	78fb      	ldrb	r3, [r7, #3]
 800e56e:	2b01      	cmp	r3, #1
 800e570:	d115      	bne.n	800e59e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	68db      	ldr	r3, [r3, #12]
 800e576:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e57e:	200a      	movs	r0, #10
 800e580:	f7f4 faae 	bl	8002ae0 <HAL_Delay>
      ms += 10U;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	330a      	adds	r3, #10
 800e588:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e58a:	6878      	ldr	r0, [r7, #4]
 800e58c:	f001 f93b 	bl	800f806 <USB_GetMode>
 800e590:	4603      	mov	r3, r0
 800e592:	2b01      	cmp	r3, #1
 800e594:	d01e      	beq.n	800e5d4 <USB_SetCurrentMode+0x84>
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	2bc7      	cmp	r3, #199	@ 0xc7
 800e59a:	d9f0      	bls.n	800e57e <USB_SetCurrentMode+0x2e>
 800e59c:	e01a      	b.n	800e5d4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e59e:	78fb      	ldrb	r3, [r7, #3]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d115      	bne.n	800e5d0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	68db      	ldr	r3, [r3, #12]
 800e5a8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e5b0:	200a      	movs	r0, #10
 800e5b2:	f7f4 fa95 	bl	8002ae0 <HAL_Delay>
      ms += 10U;
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	330a      	adds	r3, #10
 800e5ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	f001 f922 	bl	800f806 <USB_GetMode>
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d005      	beq.n	800e5d4 <USB_SetCurrentMode+0x84>
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	2bc7      	cmp	r3, #199	@ 0xc7
 800e5cc:	d9f0      	bls.n	800e5b0 <USB_SetCurrentMode+0x60>
 800e5ce:	e001      	b.n	800e5d4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e5d0:	2301      	movs	r3, #1
 800e5d2:	e005      	b.n	800e5e0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	2bc8      	cmp	r3, #200	@ 0xc8
 800e5d8:	d101      	bne.n	800e5de <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e5da:	2301      	movs	r3, #1
 800e5dc:	e000      	b.n	800e5e0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e5de:	2300      	movs	r3, #0
}
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	3710      	adds	r7, #16
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bd80      	pop	{r7, pc}

0800e5e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e5e8:	b084      	sub	sp, #16
 800e5ea:	b580      	push	{r7, lr}
 800e5ec:	b086      	sub	sp, #24
 800e5ee:	af00      	add	r7, sp, #0
 800e5f0:	6078      	str	r0, [r7, #4]
 800e5f2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800e5f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e602:	2300      	movs	r3, #0
 800e604:	613b      	str	r3, [r7, #16]
 800e606:	e009      	b.n	800e61c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e608:	687a      	ldr	r2, [r7, #4]
 800e60a:	693b      	ldr	r3, [r7, #16]
 800e60c:	3340      	adds	r3, #64	@ 0x40
 800e60e:	009b      	lsls	r3, r3, #2
 800e610:	4413      	add	r3, r2
 800e612:	2200      	movs	r2, #0
 800e614:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e616:	693b      	ldr	r3, [r7, #16]
 800e618:	3301      	adds	r3, #1
 800e61a:	613b      	str	r3, [r7, #16]
 800e61c:	693b      	ldr	r3, [r7, #16]
 800e61e:	2b0e      	cmp	r3, #14
 800e620:	d9f2      	bls.n	800e608 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e622:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e626:	2b00      	cmp	r3, #0
 800e628:	d11c      	bne.n	800e664 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e630:	685b      	ldr	r3, [r3, #4]
 800e632:	68fa      	ldr	r2, [r7, #12]
 800e634:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e638:	f043 0302 	orr.w	r3, r3, #2
 800e63c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e642:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	601a      	str	r2, [r3, #0]
 800e662:	e005      	b.n	800e670 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e668:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e676:	461a      	mov	r2, r3
 800e678:	2300      	movs	r3, #0
 800e67a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e67c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800e680:	2b01      	cmp	r3, #1
 800e682:	d10d      	bne.n	800e6a0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e684:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d104      	bne.n	800e696 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e68c:	2100      	movs	r1, #0
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	f000 f968 	bl	800e964 <USB_SetDevSpeed>
 800e694:	e008      	b.n	800e6a8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e696:	2101      	movs	r1, #1
 800e698:	6878      	ldr	r0, [r7, #4]
 800e69a:	f000 f963 	bl	800e964 <USB_SetDevSpeed>
 800e69e:	e003      	b.n	800e6a8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e6a0:	2103      	movs	r1, #3
 800e6a2:	6878      	ldr	r0, [r7, #4]
 800e6a4:	f000 f95e 	bl	800e964 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e6a8:	2110      	movs	r1, #16
 800e6aa:	6878      	ldr	r0, [r7, #4]
 800e6ac:	f000 f8fa 	bl	800e8a4 <USB_FlushTxFifo>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d001      	beq.n	800e6ba <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800e6b6:	2301      	movs	r3, #1
 800e6b8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e6ba:	6878      	ldr	r0, [r7, #4]
 800e6bc:	f000 f924 	bl	800e908 <USB_FlushRxFifo>
 800e6c0:	4603      	mov	r3, r0
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d001      	beq.n	800e6ca <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800e6c6:	2301      	movs	r3, #1
 800e6c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e6d0:	461a      	mov	r2, r3
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e6dc:	461a      	mov	r2, r3
 800e6de:	2300      	movs	r3, #0
 800e6e0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e6e8:	461a      	mov	r2, r3
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	613b      	str	r3, [r7, #16]
 800e6f2:	e043      	b.n	800e77c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e6f4:	693b      	ldr	r3, [r7, #16]
 800e6f6:	015a      	lsls	r2, r3, #5
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	4413      	add	r3, r2
 800e6fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e706:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e70a:	d118      	bne.n	800e73e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800e70c:	693b      	ldr	r3, [r7, #16]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d10a      	bne.n	800e728 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e712:	693b      	ldr	r3, [r7, #16]
 800e714:	015a      	lsls	r2, r3, #5
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	4413      	add	r3, r2
 800e71a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e71e:	461a      	mov	r2, r3
 800e720:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e724:	6013      	str	r3, [r2, #0]
 800e726:	e013      	b.n	800e750 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e728:	693b      	ldr	r3, [r7, #16]
 800e72a:	015a      	lsls	r2, r3, #5
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	4413      	add	r3, r2
 800e730:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e734:	461a      	mov	r2, r3
 800e736:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e73a:	6013      	str	r3, [r2, #0]
 800e73c:	e008      	b.n	800e750 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e73e:	693b      	ldr	r3, [r7, #16]
 800e740:	015a      	lsls	r2, r3, #5
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	4413      	add	r3, r2
 800e746:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e74a:	461a      	mov	r2, r3
 800e74c:	2300      	movs	r3, #0
 800e74e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e750:	693b      	ldr	r3, [r7, #16]
 800e752:	015a      	lsls	r2, r3, #5
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	4413      	add	r3, r2
 800e758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e75c:	461a      	mov	r2, r3
 800e75e:	2300      	movs	r3, #0
 800e760:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e762:	693b      	ldr	r3, [r7, #16]
 800e764:	015a      	lsls	r2, r3, #5
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	4413      	add	r3, r2
 800e76a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e76e:	461a      	mov	r2, r3
 800e770:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e774:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e776:	693b      	ldr	r3, [r7, #16]
 800e778:	3301      	adds	r3, #1
 800e77a:	613b      	str	r3, [r7, #16]
 800e77c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e780:	461a      	mov	r2, r3
 800e782:	693b      	ldr	r3, [r7, #16]
 800e784:	4293      	cmp	r3, r2
 800e786:	d3b5      	bcc.n	800e6f4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e788:	2300      	movs	r3, #0
 800e78a:	613b      	str	r3, [r7, #16]
 800e78c:	e043      	b.n	800e816 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e78e:	693b      	ldr	r3, [r7, #16]
 800e790:	015a      	lsls	r2, r3, #5
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	4413      	add	r3, r2
 800e796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e7a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e7a4:	d118      	bne.n	800e7d8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800e7a6:	693b      	ldr	r3, [r7, #16]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d10a      	bne.n	800e7c2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e7ac:	693b      	ldr	r3, [r7, #16]
 800e7ae:	015a      	lsls	r2, r3, #5
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	4413      	add	r3, r2
 800e7b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e7b8:	461a      	mov	r2, r3
 800e7ba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e7be:	6013      	str	r3, [r2, #0]
 800e7c0:	e013      	b.n	800e7ea <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e7c2:	693b      	ldr	r3, [r7, #16]
 800e7c4:	015a      	lsls	r2, r3, #5
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	4413      	add	r3, r2
 800e7ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e7ce:	461a      	mov	r2, r3
 800e7d0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e7d4:	6013      	str	r3, [r2, #0]
 800e7d6:	e008      	b.n	800e7ea <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e7d8:	693b      	ldr	r3, [r7, #16]
 800e7da:	015a      	lsls	r2, r3, #5
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	4413      	add	r3, r2
 800e7e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e7e4:	461a      	mov	r2, r3
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e7ea:	693b      	ldr	r3, [r7, #16]
 800e7ec:	015a      	lsls	r2, r3, #5
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	4413      	add	r3, r2
 800e7f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e7f6:	461a      	mov	r2, r3
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e7fc:	693b      	ldr	r3, [r7, #16]
 800e7fe:	015a      	lsls	r2, r3, #5
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	4413      	add	r3, r2
 800e804:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e808:	461a      	mov	r2, r3
 800e80a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e80e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e810:	693b      	ldr	r3, [r7, #16]
 800e812:	3301      	adds	r3, #1
 800e814:	613b      	str	r3, [r7, #16]
 800e816:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e81a:	461a      	mov	r2, r3
 800e81c:	693b      	ldr	r3, [r7, #16]
 800e81e:	4293      	cmp	r3, r2
 800e820:	d3b5      	bcc.n	800e78e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e828:	691b      	ldr	r3, [r3, #16]
 800e82a:	68fa      	ldr	r2, [r7, #12]
 800e82c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e830:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e834:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	2200      	movs	r2, #0
 800e83a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800e842:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e844:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d105      	bne.n	800e858 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	699b      	ldr	r3, [r3, #24]
 800e850:	f043 0210 	orr.w	r2, r3, #16
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	699a      	ldr	r2, [r3, #24]
 800e85c:	4b0f      	ldr	r3, [pc, #60]	@ (800e89c <USB_DevInit+0x2b4>)
 800e85e:	4313      	orrs	r3, r2
 800e860:	687a      	ldr	r2, [r7, #4]
 800e862:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e864:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d005      	beq.n	800e878 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	699b      	ldr	r3, [r3, #24]
 800e870:	f043 0208 	orr.w	r2, r3, #8
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e878:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e87c:	2b01      	cmp	r3, #1
 800e87e:	d105      	bne.n	800e88c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	699a      	ldr	r2, [r3, #24]
 800e884:	4b06      	ldr	r3, [pc, #24]	@ (800e8a0 <USB_DevInit+0x2b8>)
 800e886:	4313      	orrs	r3, r2
 800e888:	687a      	ldr	r2, [r7, #4]
 800e88a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e88c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e88e:	4618      	mov	r0, r3
 800e890:	3718      	adds	r7, #24
 800e892:	46bd      	mov	sp, r7
 800e894:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e898:	b004      	add	sp, #16
 800e89a:	4770      	bx	lr
 800e89c:	803c3800 	.word	0x803c3800
 800e8a0:	40000004 	.word	0x40000004

0800e8a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e8a4:	b480      	push	{r7}
 800e8a6:	b085      	sub	sp, #20
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
 800e8ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	3301      	adds	r3, #1
 800e8b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e8be:	d901      	bls.n	800e8c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e8c0:	2303      	movs	r3, #3
 800e8c2:	e01b      	b.n	800e8fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	691b      	ldr	r3, [r3, #16]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	daf2      	bge.n	800e8b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	019b      	lsls	r3, r3, #6
 800e8d4:	f043 0220 	orr.w	r2, r3, #32
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	3301      	adds	r3, #1
 800e8e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e8e8:	d901      	bls.n	800e8ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e8ea:	2303      	movs	r3, #3
 800e8ec:	e006      	b.n	800e8fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	691b      	ldr	r3, [r3, #16]
 800e8f2:	f003 0320 	and.w	r3, r3, #32
 800e8f6:	2b20      	cmp	r3, #32
 800e8f8:	d0f0      	beq.n	800e8dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e8fa:	2300      	movs	r3, #0
}
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	3714      	adds	r7, #20
 800e900:	46bd      	mov	sp, r7
 800e902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e906:	4770      	bx	lr

0800e908 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e908:	b480      	push	{r7}
 800e90a:	b085      	sub	sp, #20
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e910:	2300      	movs	r3, #0
 800e912:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	3301      	adds	r3, #1
 800e918:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e920:	d901      	bls.n	800e926 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e922:	2303      	movs	r3, #3
 800e924:	e018      	b.n	800e958 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	691b      	ldr	r3, [r3, #16]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	daf2      	bge.n	800e914 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e92e:	2300      	movs	r3, #0
 800e930:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	2210      	movs	r2, #16
 800e936:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	3301      	adds	r3, #1
 800e93c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e944:	d901      	bls.n	800e94a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e946:	2303      	movs	r3, #3
 800e948:	e006      	b.n	800e958 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	691b      	ldr	r3, [r3, #16]
 800e94e:	f003 0310 	and.w	r3, r3, #16
 800e952:	2b10      	cmp	r3, #16
 800e954:	d0f0      	beq.n	800e938 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e956:	2300      	movs	r3, #0
}
 800e958:	4618      	mov	r0, r3
 800e95a:	3714      	adds	r7, #20
 800e95c:	46bd      	mov	sp, r7
 800e95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e962:	4770      	bx	lr

0800e964 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e964:	b480      	push	{r7}
 800e966:	b085      	sub	sp, #20
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
 800e96c:	460b      	mov	r3, r1
 800e96e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e97a:	681a      	ldr	r2, [r3, #0]
 800e97c:	78fb      	ldrb	r3, [r7, #3]
 800e97e:	68f9      	ldr	r1, [r7, #12]
 800e980:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e984:	4313      	orrs	r3, r2
 800e986:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e988:	2300      	movs	r3, #0
}
 800e98a:	4618      	mov	r0, r3
 800e98c:	3714      	adds	r7, #20
 800e98e:	46bd      	mov	sp, r7
 800e990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e994:	4770      	bx	lr

0800e996 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800e996:	b480      	push	{r7}
 800e998:	b087      	sub	sp, #28
 800e99a:	af00      	add	r7, sp, #0
 800e99c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e9a2:	693b      	ldr	r3, [r7, #16]
 800e9a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e9a8:	689b      	ldr	r3, [r3, #8]
 800e9aa:	f003 0306 	and.w	r3, r3, #6
 800e9ae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d102      	bne.n	800e9bc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	75fb      	strb	r3, [r7, #23]
 800e9ba:	e00a      	b.n	800e9d2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	2b02      	cmp	r3, #2
 800e9c0:	d002      	beq.n	800e9c8 <USB_GetDevSpeed+0x32>
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	2b06      	cmp	r3, #6
 800e9c6:	d102      	bne.n	800e9ce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e9c8:	2302      	movs	r3, #2
 800e9ca:	75fb      	strb	r3, [r7, #23]
 800e9cc:	e001      	b.n	800e9d2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e9ce:	230f      	movs	r3, #15
 800e9d0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e9d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	371c      	adds	r7, #28
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9de:	4770      	bx	lr

0800e9e0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e9e0:	b480      	push	{r7}
 800e9e2:	b085      	sub	sp, #20
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
 800e9e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e9ee:	683b      	ldr	r3, [r7, #0]
 800e9f0:	781b      	ldrb	r3, [r3, #0]
 800e9f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	785b      	ldrb	r3, [r3, #1]
 800e9f8:	2b01      	cmp	r3, #1
 800e9fa:	d139      	bne.n	800ea70 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ea02:	69da      	ldr	r2, [r3, #28]
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	781b      	ldrb	r3, [r3, #0]
 800ea08:	f003 030f 	and.w	r3, r3, #15
 800ea0c:	2101      	movs	r1, #1
 800ea0e:	fa01 f303 	lsl.w	r3, r1, r3
 800ea12:	b29b      	uxth	r3, r3
 800ea14:	68f9      	ldr	r1, [r7, #12]
 800ea16:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ea1a:	4313      	orrs	r3, r2
 800ea1c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ea1e:	68bb      	ldr	r3, [r7, #8]
 800ea20:	015a      	lsls	r2, r3, #5
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	4413      	add	r3, r2
 800ea26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d153      	bne.n	800eadc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ea34:	68bb      	ldr	r3, [r7, #8]
 800ea36:	015a      	lsls	r2, r3, #5
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	4413      	add	r3, r2
 800ea3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea40:	681a      	ldr	r2, [r3, #0]
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	689b      	ldr	r3, [r3, #8]
 800ea46:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	791b      	ldrb	r3, [r3, #4]
 800ea4e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ea50:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ea52:	68bb      	ldr	r3, [r7, #8]
 800ea54:	059b      	lsls	r3, r3, #22
 800ea56:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ea58:	431a      	orrs	r2, r3
 800ea5a:	68bb      	ldr	r3, [r7, #8]
 800ea5c:	0159      	lsls	r1, r3, #5
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	440b      	add	r3, r1
 800ea62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea66:	4619      	mov	r1, r3
 800ea68:	4b20      	ldr	r3, [pc, #128]	@ (800eaec <USB_ActivateEndpoint+0x10c>)
 800ea6a:	4313      	orrs	r3, r2
 800ea6c:	600b      	str	r3, [r1, #0]
 800ea6e:	e035      	b.n	800eadc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ea76:	69da      	ldr	r2, [r3, #28]
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	781b      	ldrb	r3, [r3, #0]
 800ea7c:	f003 030f 	and.w	r3, r3, #15
 800ea80:	2101      	movs	r1, #1
 800ea82:	fa01 f303 	lsl.w	r3, r1, r3
 800ea86:	041b      	lsls	r3, r3, #16
 800ea88:	68f9      	ldr	r1, [r7, #12]
 800ea8a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ea8e:	4313      	orrs	r3, r2
 800ea90:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ea92:	68bb      	ldr	r3, [r7, #8]
 800ea94:	015a      	lsls	r2, r3, #5
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	4413      	add	r3, r2
 800ea9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d119      	bne.n	800eadc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800eaa8:	68bb      	ldr	r3, [r7, #8]
 800eaaa:	015a      	lsls	r2, r3, #5
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	4413      	add	r3, r2
 800eab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eab4:	681a      	ldr	r2, [r3, #0]
 800eab6:	683b      	ldr	r3, [r7, #0]
 800eab8:	689b      	ldr	r3, [r3, #8]
 800eaba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800eabe:	683b      	ldr	r3, [r7, #0]
 800eac0:	791b      	ldrb	r3, [r3, #4]
 800eac2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800eac4:	430b      	orrs	r3, r1
 800eac6:	431a      	orrs	r2, r3
 800eac8:	68bb      	ldr	r3, [r7, #8]
 800eaca:	0159      	lsls	r1, r3, #5
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	440b      	add	r3, r1
 800ead0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ead4:	4619      	mov	r1, r3
 800ead6:	4b05      	ldr	r3, [pc, #20]	@ (800eaec <USB_ActivateEndpoint+0x10c>)
 800ead8:	4313      	orrs	r3, r2
 800eada:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800eadc:	2300      	movs	r3, #0
}
 800eade:	4618      	mov	r0, r3
 800eae0:	3714      	adds	r7, #20
 800eae2:	46bd      	mov	sp, r7
 800eae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae8:	4770      	bx	lr
 800eaea:	bf00      	nop
 800eaec:	10008000 	.word	0x10008000

0800eaf0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800eaf0:	b480      	push	{r7}
 800eaf2:	b085      	sub	sp, #20
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
 800eaf8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	781b      	ldrb	r3, [r3, #0]
 800eb02:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	785b      	ldrb	r3, [r3, #1]
 800eb08:	2b01      	cmp	r3, #1
 800eb0a:	d161      	bne.n	800ebd0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800eb0c:	68bb      	ldr	r3, [r7, #8]
 800eb0e:	015a      	lsls	r2, r3, #5
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	4413      	add	r3, r2
 800eb14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800eb1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800eb22:	d11f      	bne.n	800eb64 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800eb24:	68bb      	ldr	r3, [r7, #8]
 800eb26:	015a      	lsls	r2, r3, #5
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	4413      	add	r3, r2
 800eb2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	68ba      	ldr	r2, [r7, #8]
 800eb34:	0151      	lsls	r1, r2, #5
 800eb36:	68fa      	ldr	r2, [r7, #12]
 800eb38:	440a      	add	r2, r1
 800eb3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eb3e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800eb42:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800eb44:	68bb      	ldr	r3, [r7, #8]
 800eb46:	015a      	lsls	r2, r3, #5
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	4413      	add	r3, r2
 800eb4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	68ba      	ldr	r2, [r7, #8]
 800eb54:	0151      	lsls	r1, r2, #5
 800eb56:	68fa      	ldr	r2, [r7, #12]
 800eb58:	440a      	add	r2, r1
 800eb5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eb5e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800eb62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eb6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	781b      	ldrb	r3, [r3, #0]
 800eb70:	f003 030f 	and.w	r3, r3, #15
 800eb74:	2101      	movs	r1, #1
 800eb76:	fa01 f303 	lsl.w	r3, r1, r3
 800eb7a:	b29b      	uxth	r3, r3
 800eb7c:	43db      	mvns	r3, r3
 800eb7e:	68f9      	ldr	r1, [r7, #12]
 800eb80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800eb84:	4013      	ands	r3, r2
 800eb86:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eb8e:	69da      	ldr	r2, [r3, #28]
 800eb90:	683b      	ldr	r3, [r7, #0]
 800eb92:	781b      	ldrb	r3, [r3, #0]
 800eb94:	f003 030f 	and.w	r3, r3, #15
 800eb98:	2101      	movs	r1, #1
 800eb9a:	fa01 f303 	lsl.w	r3, r1, r3
 800eb9e:	b29b      	uxth	r3, r3
 800eba0:	43db      	mvns	r3, r3
 800eba2:	68f9      	ldr	r1, [r7, #12]
 800eba4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800eba8:	4013      	ands	r3, r2
 800ebaa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ebac:	68bb      	ldr	r3, [r7, #8]
 800ebae:	015a      	lsls	r2, r3, #5
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	4413      	add	r3, r2
 800ebb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ebb8:	681a      	ldr	r2, [r3, #0]
 800ebba:	68bb      	ldr	r3, [r7, #8]
 800ebbc:	0159      	lsls	r1, r3, #5
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	440b      	add	r3, r1
 800ebc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ebc6:	4619      	mov	r1, r3
 800ebc8:	4b35      	ldr	r3, [pc, #212]	@ (800eca0 <USB_DeactivateEndpoint+0x1b0>)
 800ebca:	4013      	ands	r3, r2
 800ebcc:	600b      	str	r3, [r1, #0]
 800ebce:	e060      	b.n	800ec92 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ebd0:	68bb      	ldr	r3, [r7, #8]
 800ebd2:	015a      	lsls	r2, r3, #5
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	4413      	add	r3, r2
 800ebd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ebe2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ebe6:	d11f      	bne.n	800ec28 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ebe8:	68bb      	ldr	r3, [r7, #8]
 800ebea:	015a      	lsls	r2, r3, #5
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	4413      	add	r3, r2
 800ebf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	68ba      	ldr	r2, [r7, #8]
 800ebf8:	0151      	lsls	r1, r2, #5
 800ebfa:	68fa      	ldr	r2, [r7, #12]
 800ebfc:	440a      	add	r2, r1
 800ebfe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ec02:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ec06:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	015a      	lsls	r2, r3, #5
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	4413      	add	r3, r2
 800ec10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	68ba      	ldr	r2, [r7, #8]
 800ec18:	0151      	lsls	r1, r2, #5
 800ec1a:	68fa      	ldr	r2, [r7, #12]
 800ec1c:	440a      	add	r2, r1
 800ec1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ec22:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ec26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ec2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	781b      	ldrb	r3, [r3, #0]
 800ec34:	f003 030f 	and.w	r3, r3, #15
 800ec38:	2101      	movs	r1, #1
 800ec3a:	fa01 f303 	lsl.w	r3, r1, r3
 800ec3e:	041b      	lsls	r3, r3, #16
 800ec40:	43db      	mvns	r3, r3
 800ec42:	68f9      	ldr	r1, [r7, #12]
 800ec44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ec48:	4013      	ands	r3, r2
 800ec4a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ec52:	69da      	ldr	r2, [r3, #28]
 800ec54:	683b      	ldr	r3, [r7, #0]
 800ec56:	781b      	ldrb	r3, [r3, #0]
 800ec58:	f003 030f 	and.w	r3, r3, #15
 800ec5c:	2101      	movs	r1, #1
 800ec5e:	fa01 f303 	lsl.w	r3, r1, r3
 800ec62:	041b      	lsls	r3, r3, #16
 800ec64:	43db      	mvns	r3, r3
 800ec66:	68f9      	ldr	r1, [r7, #12]
 800ec68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ec6c:	4013      	ands	r3, r2
 800ec6e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ec70:	68bb      	ldr	r3, [r7, #8]
 800ec72:	015a      	lsls	r2, r3, #5
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	4413      	add	r3, r2
 800ec78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec7c:	681a      	ldr	r2, [r3, #0]
 800ec7e:	68bb      	ldr	r3, [r7, #8]
 800ec80:	0159      	lsls	r1, r3, #5
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	440b      	add	r3, r1
 800ec86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec8a:	4619      	mov	r1, r3
 800ec8c:	4b05      	ldr	r3, [pc, #20]	@ (800eca4 <USB_DeactivateEndpoint+0x1b4>)
 800ec8e:	4013      	ands	r3, r2
 800ec90:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ec92:	2300      	movs	r3, #0
}
 800ec94:	4618      	mov	r0, r3
 800ec96:	3714      	adds	r7, #20
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9e:	4770      	bx	lr
 800eca0:	ec337800 	.word	0xec337800
 800eca4:	eff37800 	.word	0xeff37800

0800eca8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b08a      	sub	sp, #40	@ 0x28
 800ecac:	af02      	add	r7, sp, #8
 800ecae:	60f8      	str	r0, [r7, #12]
 800ecb0:	60b9      	str	r1, [r7, #8]
 800ecb2:	4613      	mov	r3, r2
 800ecb4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ecba:	68bb      	ldr	r3, [r7, #8]
 800ecbc:	781b      	ldrb	r3, [r3, #0]
 800ecbe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ecc0:	68bb      	ldr	r3, [r7, #8]
 800ecc2:	785b      	ldrb	r3, [r3, #1]
 800ecc4:	2b01      	cmp	r3, #1
 800ecc6:	f040 8181 	bne.w	800efcc <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ecca:	68bb      	ldr	r3, [r7, #8]
 800eccc:	691b      	ldr	r3, [r3, #16]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d132      	bne.n	800ed38 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ecd2:	69bb      	ldr	r3, [r7, #24]
 800ecd4:	015a      	lsls	r2, r3, #5
 800ecd6:	69fb      	ldr	r3, [r7, #28]
 800ecd8:	4413      	add	r3, r2
 800ecda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ecde:	691a      	ldr	r2, [r3, #16]
 800ece0:	69bb      	ldr	r3, [r7, #24]
 800ece2:	0159      	lsls	r1, r3, #5
 800ece4:	69fb      	ldr	r3, [r7, #28]
 800ece6:	440b      	add	r3, r1
 800ece8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ecec:	4619      	mov	r1, r3
 800ecee:	4ba5      	ldr	r3, [pc, #660]	@ (800ef84 <USB_EPStartXfer+0x2dc>)
 800ecf0:	4013      	ands	r3, r2
 800ecf2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ecf4:	69bb      	ldr	r3, [r7, #24]
 800ecf6:	015a      	lsls	r2, r3, #5
 800ecf8:	69fb      	ldr	r3, [r7, #28]
 800ecfa:	4413      	add	r3, r2
 800ecfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ed00:	691b      	ldr	r3, [r3, #16]
 800ed02:	69ba      	ldr	r2, [r7, #24]
 800ed04:	0151      	lsls	r1, r2, #5
 800ed06:	69fa      	ldr	r2, [r7, #28]
 800ed08:	440a      	add	r2, r1
 800ed0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ed0e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ed12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ed14:	69bb      	ldr	r3, [r7, #24]
 800ed16:	015a      	lsls	r2, r3, #5
 800ed18:	69fb      	ldr	r3, [r7, #28]
 800ed1a:	4413      	add	r3, r2
 800ed1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ed20:	691a      	ldr	r2, [r3, #16]
 800ed22:	69bb      	ldr	r3, [r7, #24]
 800ed24:	0159      	lsls	r1, r3, #5
 800ed26:	69fb      	ldr	r3, [r7, #28]
 800ed28:	440b      	add	r3, r1
 800ed2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ed2e:	4619      	mov	r1, r3
 800ed30:	4b95      	ldr	r3, [pc, #596]	@ (800ef88 <USB_EPStartXfer+0x2e0>)
 800ed32:	4013      	ands	r3, r2
 800ed34:	610b      	str	r3, [r1, #16]
 800ed36:	e092      	b.n	800ee5e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ed38:	69bb      	ldr	r3, [r7, #24]
 800ed3a:	015a      	lsls	r2, r3, #5
 800ed3c:	69fb      	ldr	r3, [r7, #28]
 800ed3e:	4413      	add	r3, r2
 800ed40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ed44:	691a      	ldr	r2, [r3, #16]
 800ed46:	69bb      	ldr	r3, [r7, #24]
 800ed48:	0159      	lsls	r1, r3, #5
 800ed4a:	69fb      	ldr	r3, [r7, #28]
 800ed4c:	440b      	add	r3, r1
 800ed4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ed52:	4619      	mov	r1, r3
 800ed54:	4b8c      	ldr	r3, [pc, #560]	@ (800ef88 <USB_EPStartXfer+0x2e0>)
 800ed56:	4013      	ands	r3, r2
 800ed58:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ed5a:	69bb      	ldr	r3, [r7, #24]
 800ed5c:	015a      	lsls	r2, r3, #5
 800ed5e:	69fb      	ldr	r3, [r7, #28]
 800ed60:	4413      	add	r3, r2
 800ed62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ed66:	691a      	ldr	r2, [r3, #16]
 800ed68:	69bb      	ldr	r3, [r7, #24]
 800ed6a:	0159      	lsls	r1, r3, #5
 800ed6c:	69fb      	ldr	r3, [r7, #28]
 800ed6e:	440b      	add	r3, r1
 800ed70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ed74:	4619      	mov	r1, r3
 800ed76:	4b83      	ldr	r3, [pc, #524]	@ (800ef84 <USB_EPStartXfer+0x2dc>)
 800ed78:	4013      	ands	r3, r2
 800ed7a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800ed7c:	69bb      	ldr	r3, [r7, #24]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d11a      	bne.n	800edb8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800ed82:	68bb      	ldr	r3, [r7, #8]
 800ed84:	691a      	ldr	r2, [r3, #16]
 800ed86:	68bb      	ldr	r3, [r7, #8]
 800ed88:	689b      	ldr	r3, [r3, #8]
 800ed8a:	429a      	cmp	r2, r3
 800ed8c:	d903      	bls.n	800ed96 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800ed8e:	68bb      	ldr	r3, [r7, #8]
 800ed90:	689a      	ldr	r2, [r3, #8]
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ed96:	69bb      	ldr	r3, [r7, #24]
 800ed98:	015a      	lsls	r2, r3, #5
 800ed9a:	69fb      	ldr	r3, [r7, #28]
 800ed9c:	4413      	add	r3, r2
 800ed9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eda2:	691b      	ldr	r3, [r3, #16]
 800eda4:	69ba      	ldr	r2, [r7, #24]
 800eda6:	0151      	lsls	r1, r2, #5
 800eda8:	69fa      	ldr	r2, [r7, #28]
 800edaa:	440a      	add	r2, r1
 800edac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800edb0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800edb4:	6113      	str	r3, [r2, #16]
 800edb6:	e01b      	b.n	800edf0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800edb8:	69bb      	ldr	r3, [r7, #24]
 800edba:	015a      	lsls	r2, r3, #5
 800edbc:	69fb      	ldr	r3, [r7, #28]
 800edbe:	4413      	add	r3, r2
 800edc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800edc4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800edc6:	68bb      	ldr	r3, [r7, #8]
 800edc8:	6919      	ldr	r1, [r3, #16]
 800edca:	68bb      	ldr	r3, [r7, #8]
 800edcc:	689b      	ldr	r3, [r3, #8]
 800edce:	440b      	add	r3, r1
 800edd0:	1e59      	subs	r1, r3, #1
 800edd2:	68bb      	ldr	r3, [r7, #8]
 800edd4:	689b      	ldr	r3, [r3, #8]
 800edd6:	fbb1 f3f3 	udiv	r3, r1, r3
 800edda:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800eddc:	4b6b      	ldr	r3, [pc, #428]	@ (800ef8c <USB_EPStartXfer+0x2e4>)
 800edde:	400b      	ands	r3, r1
 800ede0:	69b9      	ldr	r1, [r7, #24]
 800ede2:	0148      	lsls	r0, r1, #5
 800ede4:	69f9      	ldr	r1, [r7, #28]
 800ede6:	4401      	add	r1, r0
 800ede8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800edec:	4313      	orrs	r3, r2
 800edee:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800edf0:	69bb      	ldr	r3, [r7, #24]
 800edf2:	015a      	lsls	r2, r3, #5
 800edf4:	69fb      	ldr	r3, [r7, #28]
 800edf6:	4413      	add	r3, r2
 800edf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800edfc:	691a      	ldr	r2, [r3, #16]
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	691b      	ldr	r3, [r3, #16]
 800ee02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ee06:	69b9      	ldr	r1, [r7, #24]
 800ee08:	0148      	lsls	r0, r1, #5
 800ee0a:	69f9      	ldr	r1, [r7, #28]
 800ee0c:	4401      	add	r1, r0
 800ee0e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ee12:	4313      	orrs	r3, r2
 800ee14:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ee16:	68bb      	ldr	r3, [r7, #8]
 800ee18:	791b      	ldrb	r3, [r3, #4]
 800ee1a:	2b01      	cmp	r3, #1
 800ee1c:	d11f      	bne.n	800ee5e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ee1e:	69bb      	ldr	r3, [r7, #24]
 800ee20:	015a      	lsls	r2, r3, #5
 800ee22:	69fb      	ldr	r3, [r7, #28]
 800ee24:	4413      	add	r3, r2
 800ee26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee2a:	691b      	ldr	r3, [r3, #16]
 800ee2c:	69ba      	ldr	r2, [r7, #24]
 800ee2e:	0151      	lsls	r1, r2, #5
 800ee30:	69fa      	ldr	r2, [r7, #28]
 800ee32:	440a      	add	r2, r1
 800ee34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ee38:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800ee3c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ee3e:	69bb      	ldr	r3, [r7, #24]
 800ee40:	015a      	lsls	r2, r3, #5
 800ee42:	69fb      	ldr	r3, [r7, #28]
 800ee44:	4413      	add	r3, r2
 800ee46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee4a:	691b      	ldr	r3, [r3, #16]
 800ee4c:	69ba      	ldr	r2, [r7, #24]
 800ee4e:	0151      	lsls	r1, r2, #5
 800ee50:	69fa      	ldr	r2, [r7, #28]
 800ee52:	440a      	add	r2, r1
 800ee54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ee58:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ee5c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ee5e:	79fb      	ldrb	r3, [r7, #7]
 800ee60:	2b01      	cmp	r3, #1
 800ee62:	d14b      	bne.n	800eefc <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ee64:	68bb      	ldr	r3, [r7, #8]
 800ee66:	69db      	ldr	r3, [r3, #28]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d009      	beq.n	800ee80 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ee6c:	69bb      	ldr	r3, [r7, #24]
 800ee6e:	015a      	lsls	r2, r3, #5
 800ee70:	69fb      	ldr	r3, [r7, #28]
 800ee72:	4413      	add	r3, r2
 800ee74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee78:	461a      	mov	r2, r3
 800ee7a:	68bb      	ldr	r3, [r7, #8]
 800ee7c:	69db      	ldr	r3, [r3, #28]
 800ee7e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	791b      	ldrb	r3, [r3, #4]
 800ee84:	2b01      	cmp	r3, #1
 800ee86:	d128      	bne.n	800eeda <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ee88:	69fb      	ldr	r3, [r7, #28]
 800ee8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ee8e:	689b      	ldr	r3, [r3, #8]
 800ee90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d110      	bne.n	800eeba <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ee98:	69bb      	ldr	r3, [r7, #24]
 800ee9a:	015a      	lsls	r2, r3, #5
 800ee9c:	69fb      	ldr	r3, [r7, #28]
 800ee9e:	4413      	add	r3, r2
 800eea0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	69ba      	ldr	r2, [r7, #24]
 800eea8:	0151      	lsls	r1, r2, #5
 800eeaa:	69fa      	ldr	r2, [r7, #28]
 800eeac:	440a      	add	r2, r1
 800eeae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eeb2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800eeb6:	6013      	str	r3, [r2, #0]
 800eeb8:	e00f      	b.n	800eeda <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800eeba:	69bb      	ldr	r3, [r7, #24]
 800eebc:	015a      	lsls	r2, r3, #5
 800eebe:	69fb      	ldr	r3, [r7, #28]
 800eec0:	4413      	add	r3, r2
 800eec2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	69ba      	ldr	r2, [r7, #24]
 800eeca:	0151      	lsls	r1, r2, #5
 800eecc:	69fa      	ldr	r2, [r7, #28]
 800eece:	440a      	add	r2, r1
 800eed0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eed4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eed8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800eeda:	69bb      	ldr	r3, [r7, #24]
 800eedc:	015a      	lsls	r2, r3, #5
 800eede:	69fb      	ldr	r3, [r7, #28]
 800eee0:	4413      	add	r3, r2
 800eee2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	69ba      	ldr	r2, [r7, #24]
 800eeea:	0151      	lsls	r1, r2, #5
 800eeec:	69fa      	ldr	r2, [r7, #28]
 800eeee:	440a      	add	r2, r1
 800eef0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eef4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800eef8:	6013      	str	r3, [r2, #0]
 800eefa:	e16a      	b.n	800f1d2 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800eefc:	69bb      	ldr	r3, [r7, #24]
 800eefe:	015a      	lsls	r2, r3, #5
 800ef00:	69fb      	ldr	r3, [r7, #28]
 800ef02:	4413      	add	r3, r2
 800ef04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	69ba      	ldr	r2, [r7, #24]
 800ef0c:	0151      	lsls	r1, r2, #5
 800ef0e:	69fa      	ldr	r2, [r7, #28]
 800ef10:	440a      	add	r2, r1
 800ef12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ef16:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ef1a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ef1c:	68bb      	ldr	r3, [r7, #8]
 800ef1e:	791b      	ldrb	r3, [r3, #4]
 800ef20:	2b01      	cmp	r3, #1
 800ef22:	d015      	beq.n	800ef50 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	691b      	ldr	r3, [r3, #16]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	f000 8152 	beq.w	800f1d2 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ef2e:	69fb      	ldr	r3, [r7, #28]
 800ef30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ef34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ef36:	68bb      	ldr	r3, [r7, #8]
 800ef38:	781b      	ldrb	r3, [r3, #0]
 800ef3a:	f003 030f 	and.w	r3, r3, #15
 800ef3e:	2101      	movs	r1, #1
 800ef40:	fa01 f303 	lsl.w	r3, r1, r3
 800ef44:	69f9      	ldr	r1, [r7, #28]
 800ef46:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ef4a:	4313      	orrs	r3, r2
 800ef4c:	634b      	str	r3, [r1, #52]	@ 0x34
 800ef4e:	e140      	b.n	800f1d2 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ef50:	69fb      	ldr	r3, [r7, #28]
 800ef52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ef56:	689b      	ldr	r3, [r3, #8]
 800ef58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d117      	bne.n	800ef90 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ef60:	69bb      	ldr	r3, [r7, #24]
 800ef62:	015a      	lsls	r2, r3, #5
 800ef64:	69fb      	ldr	r3, [r7, #28]
 800ef66:	4413      	add	r3, r2
 800ef68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	69ba      	ldr	r2, [r7, #24]
 800ef70:	0151      	lsls	r1, r2, #5
 800ef72:	69fa      	ldr	r2, [r7, #28]
 800ef74:	440a      	add	r2, r1
 800ef76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ef7a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ef7e:	6013      	str	r3, [r2, #0]
 800ef80:	e016      	b.n	800efb0 <USB_EPStartXfer+0x308>
 800ef82:	bf00      	nop
 800ef84:	e007ffff 	.word	0xe007ffff
 800ef88:	fff80000 	.word	0xfff80000
 800ef8c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ef90:	69bb      	ldr	r3, [r7, #24]
 800ef92:	015a      	lsls	r2, r3, #5
 800ef94:	69fb      	ldr	r3, [r7, #28]
 800ef96:	4413      	add	r3, r2
 800ef98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	69ba      	ldr	r2, [r7, #24]
 800efa0:	0151      	lsls	r1, r2, #5
 800efa2:	69fa      	ldr	r2, [r7, #28]
 800efa4:	440a      	add	r2, r1
 800efa6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800efaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800efae:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800efb0:	68bb      	ldr	r3, [r7, #8]
 800efb2:	68d9      	ldr	r1, [r3, #12]
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	781a      	ldrb	r2, [r3, #0]
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	691b      	ldr	r3, [r3, #16]
 800efbc:	b298      	uxth	r0, r3
 800efbe:	79fb      	ldrb	r3, [r7, #7]
 800efc0:	9300      	str	r3, [sp, #0]
 800efc2:	4603      	mov	r3, r0
 800efc4:	68f8      	ldr	r0, [r7, #12]
 800efc6:	f000 f9b9 	bl	800f33c <USB_WritePacket>
 800efca:	e102      	b.n	800f1d2 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800efcc:	69bb      	ldr	r3, [r7, #24]
 800efce:	015a      	lsls	r2, r3, #5
 800efd0:	69fb      	ldr	r3, [r7, #28]
 800efd2:	4413      	add	r3, r2
 800efd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800efd8:	691a      	ldr	r2, [r3, #16]
 800efda:	69bb      	ldr	r3, [r7, #24]
 800efdc:	0159      	lsls	r1, r3, #5
 800efde:	69fb      	ldr	r3, [r7, #28]
 800efe0:	440b      	add	r3, r1
 800efe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800efe6:	4619      	mov	r1, r3
 800efe8:	4b7c      	ldr	r3, [pc, #496]	@ (800f1dc <USB_EPStartXfer+0x534>)
 800efea:	4013      	ands	r3, r2
 800efec:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800efee:	69bb      	ldr	r3, [r7, #24]
 800eff0:	015a      	lsls	r2, r3, #5
 800eff2:	69fb      	ldr	r3, [r7, #28]
 800eff4:	4413      	add	r3, r2
 800eff6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800effa:	691a      	ldr	r2, [r3, #16]
 800effc:	69bb      	ldr	r3, [r7, #24]
 800effe:	0159      	lsls	r1, r3, #5
 800f000:	69fb      	ldr	r3, [r7, #28]
 800f002:	440b      	add	r3, r1
 800f004:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f008:	4619      	mov	r1, r3
 800f00a:	4b75      	ldr	r3, [pc, #468]	@ (800f1e0 <USB_EPStartXfer+0x538>)
 800f00c:	4013      	ands	r3, r2
 800f00e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800f010:	69bb      	ldr	r3, [r7, #24]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d12f      	bne.n	800f076 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800f016:	68bb      	ldr	r3, [r7, #8]
 800f018:	691b      	ldr	r3, [r3, #16]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d003      	beq.n	800f026 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800f01e:	68bb      	ldr	r3, [r7, #8]
 800f020:	689a      	ldr	r2, [r3, #8]
 800f022:	68bb      	ldr	r3, [r7, #8]
 800f024:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800f026:	68bb      	ldr	r3, [r7, #8]
 800f028:	689a      	ldr	r2, [r3, #8]
 800f02a:	68bb      	ldr	r3, [r7, #8]
 800f02c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800f02e:	69bb      	ldr	r3, [r7, #24]
 800f030:	015a      	lsls	r2, r3, #5
 800f032:	69fb      	ldr	r3, [r7, #28]
 800f034:	4413      	add	r3, r2
 800f036:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f03a:	691a      	ldr	r2, [r3, #16]
 800f03c:	68bb      	ldr	r3, [r7, #8]
 800f03e:	6a1b      	ldr	r3, [r3, #32]
 800f040:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f044:	69b9      	ldr	r1, [r7, #24]
 800f046:	0148      	lsls	r0, r1, #5
 800f048:	69f9      	ldr	r1, [r7, #28]
 800f04a:	4401      	add	r1, r0
 800f04c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f050:	4313      	orrs	r3, r2
 800f052:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f054:	69bb      	ldr	r3, [r7, #24]
 800f056:	015a      	lsls	r2, r3, #5
 800f058:	69fb      	ldr	r3, [r7, #28]
 800f05a:	4413      	add	r3, r2
 800f05c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f060:	691b      	ldr	r3, [r3, #16]
 800f062:	69ba      	ldr	r2, [r7, #24]
 800f064:	0151      	lsls	r1, r2, #5
 800f066:	69fa      	ldr	r2, [r7, #28]
 800f068:	440a      	add	r2, r1
 800f06a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f06e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f072:	6113      	str	r3, [r2, #16]
 800f074:	e05f      	b.n	800f136 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800f076:	68bb      	ldr	r3, [r7, #8]
 800f078:	691b      	ldr	r3, [r3, #16]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d123      	bne.n	800f0c6 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f07e:	69bb      	ldr	r3, [r7, #24]
 800f080:	015a      	lsls	r2, r3, #5
 800f082:	69fb      	ldr	r3, [r7, #28]
 800f084:	4413      	add	r3, r2
 800f086:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f08a:	691a      	ldr	r2, [r3, #16]
 800f08c:	68bb      	ldr	r3, [r7, #8]
 800f08e:	689b      	ldr	r3, [r3, #8]
 800f090:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f094:	69b9      	ldr	r1, [r7, #24]
 800f096:	0148      	lsls	r0, r1, #5
 800f098:	69f9      	ldr	r1, [r7, #28]
 800f09a:	4401      	add	r1, r0
 800f09c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f0a0:	4313      	orrs	r3, r2
 800f0a2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f0a4:	69bb      	ldr	r3, [r7, #24]
 800f0a6:	015a      	lsls	r2, r3, #5
 800f0a8:	69fb      	ldr	r3, [r7, #28]
 800f0aa:	4413      	add	r3, r2
 800f0ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f0b0:	691b      	ldr	r3, [r3, #16]
 800f0b2:	69ba      	ldr	r2, [r7, #24]
 800f0b4:	0151      	lsls	r1, r2, #5
 800f0b6:	69fa      	ldr	r2, [r7, #28]
 800f0b8:	440a      	add	r2, r1
 800f0ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f0be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f0c2:	6113      	str	r3, [r2, #16]
 800f0c4:	e037      	b.n	800f136 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	691a      	ldr	r2, [r3, #16]
 800f0ca:	68bb      	ldr	r3, [r7, #8]
 800f0cc:	689b      	ldr	r3, [r3, #8]
 800f0ce:	4413      	add	r3, r2
 800f0d0:	1e5a      	subs	r2, r3, #1
 800f0d2:	68bb      	ldr	r3, [r7, #8]
 800f0d4:	689b      	ldr	r3, [r3, #8]
 800f0d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800f0da:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	689b      	ldr	r3, [r3, #8]
 800f0e0:	8afa      	ldrh	r2, [r7, #22]
 800f0e2:	fb03 f202 	mul.w	r2, r3, r2
 800f0e6:	68bb      	ldr	r3, [r7, #8]
 800f0e8:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f0ea:	69bb      	ldr	r3, [r7, #24]
 800f0ec:	015a      	lsls	r2, r3, #5
 800f0ee:	69fb      	ldr	r3, [r7, #28]
 800f0f0:	4413      	add	r3, r2
 800f0f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f0f6:	691a      	ldr	r2, [r3, #16]
 800f0f8:	8afb      	ldrh	r3, [r7, #22]
 800f0fa:	04d9      	lsls	r1, r3, #19
 800f0fc:	4b39      	ldr	r3, [pc, #228]	@ (800f1e4 <USB_EPStartXfer+0x53c>)
 800f0fe:	400b      	ands	r3, r1
 800f100:	69b9      	ldr	r1, [r7, #24]
 800f102:	0148      	lsls	r0, r1, #5
 800f104:	69f9      	ldr	r1, [r7, #28]
 800f106:	4401      	add	r1, r0
 800f108:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f10c:	4313      	orrs	r3, r2
 800f10e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800f110:	69bb      	ldr	r3, [r7, #24]
 800f112:	015a      	lsls	r2, r3, #5
 800f114:	69fb      	ldr	r3, [r7, #28]
 800f116:	4413      	add	r3, r2
 800f118:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f11c:	691a      	ldr	r2, [r3, #16]
 800f11e:	68bb      	ldr	r3, [r7, #8]
 800f120:	6a1b      	ldr	r3, [r3, #32]
 800f122:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f126:	69b9      	ldr	r1, [r7, #24]
 800f128:	0148      	lsls	r0, r1, #5
 800f12a:	69f9      	ldr	r1, [r7, #28]
 800f12c:	4401      	add	r1, r0
 800f12e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f132:	4313      	orrs	r3, r2
 800f134:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800f136:	79fb      	ldrb	r3, [r7, #7]
 800f138:	2b01      	cmp	r3, #1
 800f13a:	d10d      	bne.n	800f158 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f13c:	68bb      	ldr	r3, [r7, #8]
 800f13e:	68db      	ldr	r3, [r3, #12]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d009      	beq.n	800f158 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f144:	68bb      	ldr	r3, [r7, #8]
 800f146:	68d9      	ldr	r1, [r3, #12]
 800f148:	69bb      	ldr	r3, [r7, #24]
 800f14a:	015a      	lsls	r2, r3, #5
 800f14c:	69fb      	ldr	r3, [r7, #28]
 800f14e:	4413      	add	r3, r2
 800f150:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f154:	460a      	mov	r2, r1
 800f156:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f158:	68bb      	ldr	r3, [r7, #8]
 800f15a:	791b      	ldrb	r3, [r3, #4]
 800f15c:	2b01      	cmp	r3, #1
 800f15e:	d128      	bne.n	800f1b2 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f160:	69fb      	ldr	r3, [r7, #28]
 800f162:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f166:	689b      	ldr	r3, [r3, #8]
 800f168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d110      	bne.n	800f192 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f170:	69bb      	ldr	r3, [r7, #24]
 800f172:	015a      	lsls	r2, r3, #5
 800f174:	69fb      	ldr	r3, [r7, #28]
 800f176:	4413      	add	r3, r2
 800f178:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	69ba      	ldr	r2, [r7, #24]
 800f180:	0151      	lsls	r1, r2, #5
 800f182:	69fa      	ldr	r2, [r7, #28]
 800f184:	440a      	add	r2, r1
 800f186:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f18a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f18e:	6013      	str	r3, [r2, #0]
 800f190:	e00f      	b.n	800f1b2 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f192:	69bb      	ldr	r3, [r7, #24]
 800f194:	015a      	lsls	r2, r3, #5
 800f196:	69fb      	ldr	r3, [r7, #28]
 800f198:	4413      	add	r3, r2
 800f19a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	69ba      	ldr	r2, [r7, #24]
 800f1a2:	0151      	lsls	r1, r2, #5
 800f1a4:	69fa      	ldr	r2, [r7, #28]
 800f1a6:	440a      	add	r2, r1
 800f1a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f1ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f1b0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f1b2:	69bb      	ldr	r3, [r7, #24]
 800f1b4:	015a      	lsls	r2, r3, #5
 800f1b6:	69fb      	ldr	r3, [r7, #28]
 800f1b8:	4413      	add	r3, r2
 800f1ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	69ba      	ldr	r2, [r7, #24]
 800f1c2:	0151      	lsls	r1, r2, #5
 800f1c4:	69fa      	ldr	r2, [r7, #28]
 800f1c6:	440a      	add	r2, r1
 800f1c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f1cc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800f1d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f1d2:	2300      	movs	r3, #0
}
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	3720      	adds	r7, #32
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	bd80      	pop	{r7, pc}
 800f1dc:	fff80000 	.word	0xfff80000
 800f1e0:	e007ffff 	.word	0xe007ffff
 800f1e4:	1ff80000 	.word	0x1ff80000

0800f1e8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f1e8:	b480      	push	{r7}
 800f1ea:	b087      	sub	sp, #28
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
 800f1f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	785b      	ldrb	r3, [r3, #1]
 800f202:	2b01      	cmp	r3, #1
 800f204:	d14a      	bne.n	800f29c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	781b      	ldrb	r3, [r3, #0]
 800f20a:	015a      	lsls	r2, r3, #5
 800f20c:	693b      	ldr	r3, [r7, #16]
 800f20e:	4413      	add	r3, r2
 800f210:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f21a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f21e:	f040 8086 	bne.w	800f32e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800f222:	683b      	ldr	r3, [r7, #0]
 800f224:	781b      	ldrb	r3, [r3, #0]
 800f226:	015a      	lsls	r2, r3, #5
 800f228:	693b      	ldr	r3, [r7, #16]
 800f22a:	4413      	add	r3, r2
 800f22c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	683a      	ldr	r2, [r7, #0]
 800f234:	7812      	ldrb	r2, [r2, #0]
 800f236:	0151      	lsls	r1, r2, #5
 800f238:	693a      	ldr	r2, [r7, #16]
 800f23a:	440a      	add	r2, r1
 800f23c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f240:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f244:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800f246:	683b      	ldr	r3, [r7, #0]
 800f248:	781b      	ldrb	r3, [r3, #0]
 800f24a:	015a      	lsls	r2, r3, #5
 800f24c:	693b      	ldr	r3, [r7, #16]
 800f24e:	4413      	add	r3, r2
 800f250:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	683a      	ldr	r2, [r7, #0]
 800f258:	7812      	ldrb	r2, [r2, #0]
 800f25a:	0151      	lsls	r1, r2, #5
 800f25c:	693a      	ldr	r2, [r7, #16]
 800f25e:	440a      	add	r2, r1
 800f260:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f264:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f268:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	3301      	adds	r3, #1
 800f26e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	f242 7210 	movw	r2, #10000	@ 0x2710
 800f276:	4293      	cmp	r3, r2
 800f278:	d902      	bls.n	800f280 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800f27a:	2301      	movs	r3, #1
 800f27c:	75fb      	strb	r3, [r7, #23]
          break;
 800f27e:	e056      	b.n	800f32e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800f280:	683b      	ldr	r3, [r7, #0]
 800f282:	781b      	ldrb	r3, [r3, #0]
 800f284:	015a      	lsls	r2, r3, #5
 800f286:	693b      	ldr	r3, [r7, #16]
 800f288:	4413      	add	r3, r2
 800f28a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f294:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f298:	d0e7      	beq.n	800f26a <USB_EPStopXfer+0x82>
 800f29a:	e048      	b.n	800f32e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	781b      	ldrb	r3, [r3, #0]
 800f2a0:	015a      	lsls	r2, r3, #5
 800f2a2:	693b      	ldr	r3, [r7, #16]
 800f2a4:	4413      	add	r3, r2
 800f2a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f2b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f2b4:	d13b      	bne.n	800f32e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800f2b6:	683b      	ldr	r3, [r7, #0]
 800f2b8:	781b      	ldrb	r3, [r3, #0]
 800f2ba:	015a      	lsls	r2, r3, #5
 800f2bc:	693b      	ldr	r3, [r7, #16]
 800f2be:	4413      	add	r3, r2
 800f2c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	683a      	ldr	r2, [r7, #0]
 800f2c8:	7812      	ldrb	r2, [r2, #0]
 800f2ca:	0151      	lsls	r1, r2, #5
 800f2cc:	693a      	ldr	r2, [r7, #16]
 800f2ce:	440a      	add	r2, r1
 800f2d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f2d4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f2d8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800f2da:	683b      	ldr	r3, [r7, #0]
 800f2dc:	781b      	ldrb	r3, [r3, #0]
 800f2de:	015a      	lsls	r2, r3, #5
 800f2e0:	693b      	ldr	r3, [r7, #16]
 800f2e2:	4413      	add	r3, r2
 800f2e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	683a      	ldr	r2, [r7, #0]
 800f2ec:	7812      	ldrb	r2, [r2, #0]
 800f2ee:	0151      	lsls	r1, r2, #5
 800f2f0:	693a      	ldr	r2, [r7, #16]
 800f2f2:	440a      	add	r2, r1
 800f2f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f2f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f2fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	3301      	adds	r3, #1
 800f302:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	f242 7210 	movw	r2, #10000	@ 0x2710
 800f30a:	4293      	cmp	r3, r2
 800f30c:	d902      	bls.n	800f314 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800f30e:	2301      	movs	r3, #1
 800f310:	75fb      	strb	r3, [r7, #23]
          break;
 800f312:	e00c      	b.n	800f32e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	781b      	ldrb	r3, [r3, #0]
 800f318:	015a      	lsls	r2, r3, #5
 800f31a:	693b      	ldr	r3, [r7, #16]
 800f31c:	4413      	add	r3, r2
 800f31e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f328:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f32c:	d0e7      	beq.n	800f2fe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800f32e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f330:	4618      	mov	r0, r3
 800f332:	371c      	adds	r7, #28
 800f334:	46bd      	mov	sp, r7
 800f336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33a:	4770      	bx	lr

0800f33c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f33c:	b480      	push	{r7}
 800f33e:	b089      	sub	sp, #36	@ 0x24
 800f340:	af00      	add	r7, sp, #0
 800f342:	60f8      	str	r0, [r7, #12]
 800f344:	60b9      	str	r1, [r7, #8]
 800f346:	4611      	mov	r1, r2
 800f348:	461a      	mov	r2, r3
 800f34a:	460b      	mov	r3, r1
 800f34c:	71fb      	strb	r3, [r7, #7]
 800f34e:	4613      	mov	r3, r2
 800f350:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800f35a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d123      	bne.n	800f3aa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f362:	88bb      	ldrh	r3, [r7, #4]
 800f364:	3303      	adds	r3, #3
 800f366:	089b      	lsrs	r3, r3, #2
 800f368:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f36a:	2300      	movs	r3, #0
 800f36c:	61bb      	str	r3, [r7, #24]
 800f36e:	e018      	b.n	800f3a2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f370:	79fb      	ldrb	r3, [r7, #7]
 800f372:	031a      	lsls	r2, r3, #12
 800f374:	697b      	ldr	r3, [r7, #20]
 800f376:	4413      	add	r3, r2
 800f378:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f37c:	461a      	mov	r2, r3
 800f37e:	69fb      	ldr	r3, [r7, #28]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f384:	69fb      	ldr	r3, [r7, #28]
 800f386:	3301      	adds	r3, #1
 800f388:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f38a:	69fb      	ldr	r3, [r7, #28]
 800f38c:	3301      	adds	r3, #1
 800f38e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f390:	69fb      	ldr	r3, [r7, #28]
 800f392:	3301      	adds	r3, #1
 800f394:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f396:	69fb      	ldr	r3, [r7, #28]
 800f398:	3301      	adds	r3, #1
 800f39a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f39c:	69bb      	ldr	r3, [r7, #24]
 800f39e:	3301      	adds	r3, #1
 800f3a0:	61bb      	str	r3, [r7, #24]
 800f3a2:	69ba      	ldr	r2, [r7, #24]
 800f3a4:	693b      	ldr	r3, [r7, #16]
 800f3a6:	429a      	cmp	r2, r3
 800f3a8:	d3e2      	bcc.n	800f370 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f3aa:	2300      	movs	r3, #0
}
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	3724      	adds	r7, #36	@ 0x24
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b6:	4770      	bx	lr

0800f3b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f3b8:	b480      	push	{r7}
 800f3ba:	b08b      	sub	sp, #44	@ 0x2c
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	60f8      	str	r0, [r7, #12]
 800f3c0:	60b9      	str	r1, [r7, #8]
 800f3c2:	4613      	mov	r3, r2
 800f3c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800f3ca:	68bb      	ldr	r3, [r7, #8]
 800f3cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800f3ce:	88fb      	ldrh	r3, [r7, #6]
 800f3d0:	089b      	lsrs	r3, r3, #2
 800f3d2:	b29b      	uxth	r3, r3
 800f3d4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800f3d6:	88fb      	ldrh	r3, [r7, #6]
 800f3d8:	f003 0303 	and.w	r3, r3, #3
 800f3dc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800f3de:	2300      	movs	r3, #0
 800f3e0:	623b      	str	r3, [r7, #32]
 800f3e2:	e014      	b.n	800f40e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f3e4:	69bb      	ldr	r3, [r7, #24]
 800f3e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f3ea:	681a      	ldr	r2, [r3, #0]
 800f3ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3ee:	601a      	str	r2, [r3, #0]
    pDest++;
 800f3f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3f2:	3301      	adds	r3, #1
 800f3f4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800f3f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3f8:	3301      	adds	r3, #1
 800f3fa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800f3fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3fe:	3301      	adds	r3, #1
 800f400:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800f402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f404:	3301      	adds	r3, #1
 800f406:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800f408:	6a3b      	ldr	r3, [r7, #32]
 800f40a:	3301      	adds	r3, #1
 800f40c:	623b      	str	r3, [r7, #32]
 800f40e:	6a3a      	ldr	r2, [r7, #32]
 800f410:	697b      	ldr	r3, [r7, #20]
 800f412:	429a      	cmp	r2, r3
 800f414:	d3e6      	bcc.n	800f3e4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800f416:	8bfb      	ldrh	r3, [r7, #30]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d01e      	beq.n	800f45a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800f41c:	2300      	movs	r3, #0
 800f41e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800f420:	69bb      	ldr	r3, [r7, #24]
 800f422:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f426:	461a      	mov	r2, r3
 800f428:	f107 0310 	add.w	r3, r7, #16
 800f42c:	6812      	ldr	r2, [r2, #0]
 800f42e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f430:	693a      	ldr	r2, [r7, #16]
 800f432:	6a3b      	ldr	r3, [r7, #32]
 800f434:	b2db      	uxtb	r3, r3
 800f436:	00db      	lsls	r3, r3, #3
 800f438:	fa22 f303 	lsr.w	r3, r2, r3
 800f43c:	b2da      	uxtb	r2, r3
 800f43e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f440:	701a      	strb	r2, [r3, #0]
      i++;
 800f442:	6a3b      	ldr	r3, [r7, #32]
 800f444:	3301      	adds	r3, #1
 800f446:	623b      	str	r3, [r7, #32]
      pDest++;
 800f448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f44a:	3301      	adds	r3, #1
 800f44c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800f44e:	8bfb      	ldrh	r3, [r7, #30]
 800f450:	3b01      	subs	r3, #1
 800f452:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800f454:	8bfb      	ldrh	r3, [r7, #30]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d1ea      	bne.n	800f430 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800f45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f45c:	4618      	mov	r0, r3
 800f45e:	372c      	adds	r7, #44	@ 0x2c
 800f460:	46bd      	mov	sp, r7
 800f462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f466:	4770      	bx	lr

0800f468 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f468:	b480      	push	{r7}
 800f46a:	b085      	sub	sp, #20
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
 800f470:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f476:	683b      	ldr	r3, [r7, #0]
 800f478:	781b      	ldrb	r3, [r3, #0]
 800f47a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	785b      	ldrb	r3, [r3, #1]
 800f480:	2b01      	cmp	r3, #1
 800f482:	d12c      	bne.n	800f4de <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f484:	68bb      	ldr	r3, [r7, #8]
 800f486:	015a      	lsls	r2, r3, #5
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	4413      	add	r3, r2
 800f48c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	2b00      	cmp	r3, #0
 800f494:	db12      	blt.n	800f4bc <USB_EPSetStall+0x54>
 800f496:	68bb      	ldr	r3, [r7, #8]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d00f      	beq.n	800f4bc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f49c:	68bb      	ldr	r3, [r7, #8]
 800f49e:	015a      	lsls	r2, r3, #5
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	4413      	add	r3, r2
 800f4a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	68ba      	ldr	r2, [r7, #8]
 800f4ac:	0151      	lsls	r1, r2, #5
 800f4ae:	68fa      	ldr	r2, [r7, #12]
 800f4b0:	440a      	add	r2, r1
 800f4b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f4b6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f4ba:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f4bc:	68bb      	ldr	r3, [r7, #8]
 800f4be:	015a      	lsls	r2, r3, #5
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	4413      	add	r3, r2
 800f4c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	68ba      	ldr	r2, [r7, #8]
 800f4cc:	0151      	lsls	r1, r2, #5
 800f4ce:	68fa      	ldr	r2, [r7, #12]
 800f4d0:	440a      	add	r2, r1
 800f4d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f4d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f4da:	6013      	str	r3, [r2, #0]
 800f4dc:	e02b      	b.n	800f536 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f4de:	68bb      	ldr	r3, [r7, #8]
 800f4e0:	015a      	lsls	r2, r3, #5
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	4413      	add	r3, r2
 800f4e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	db12      	blt.n	800f516 <USB_EPSetStall+0xae>
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d00f      	beq.n	800f516 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f4f6:	68bb      	ldr	r3, [r7, #8]
 800f4f8:	015a      	lsls	r2, r3, #5
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	4413      	add	r3, r2
 800f4fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	68ba      	ldr	r2, [r7, #8]
 800f506:	0151      	lsls	r1, r2, #5
 800f508:	68fa      	ldr	r2, [r7, #12]
 800f50a:	440a      	add	r2, r1
 800f50c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f510:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f514:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	015a      	lsls	r2, r3, #5
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	4413      	add	r3, r2
 800f51e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	68ba      	ldr	r2, [r7, #8]
 800f526:	0151      	lsls	r1, r2, #5
 800f528:	68fa      	ldr	r2, [r7, #12]
 800f52a:	440a      	add	r2, r1
 800f52c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f530:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f534:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f536:	2300      	movs	r3, #0
}
 800f538:	4618      	mov	r0, r3
 800f53a:	3714      	adds	r7, #20
 800f53c:	46bd      	mov	sp, r7
 800f53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f542:	4770      	bx	lr

0800f544 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f544:	b480      	push	{r7}
 800f546:	b085      	sub	sp, #20
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
 800f54c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f552:	683b      	ldr	r3, [r7, #0]
 800f554:	781b      	ldrb	r3, [r3, #0]
 800f556:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f558:	683b      	ldr	r3, [r7, #0]
 800f55a:	785b      	ldrb	r3, [r3, #1]
 800f55c:	2b01      	cmp	r3, #1
 800f55e:	d128      	bne.n	800f5b2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f560:	68bb      	ldr	r3, [r7, #8]
 800f562:	015a      	lsls	r2, r3, #5
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	4413      	add	r3, r2
 800f568:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	68ba      	ldr	r2, [r7, #8]
 800f570:	0151      	lsls	r1, r2, #5
 800f572:	68fa      	ldr	r2, [r7, #12]
 800f574:	440a      	add	r2, r1
 800f576:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f57a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f57e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f580:	683b      	ldr	r3, [r7, #0]
 800f582:	791b      	ldrb	r3, [r3, #4]
 800f584:	2b03      	cmp	r3, #3
 800f586:	d003      	beq.n	800f590 <USB_EPClearStall+0x4c>
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	791b      	ldrb	r3, [r3, #4]
 800f58c:	2b02      	cmp	r3, #2
 800f58e:	d138      	bne.n	800f602 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f590:	68bb      	ldr	r3, [r7, #8]
 800f592:	015a      	lsls	r2, r3, #5
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	4413      	add	r3, r2
 800f598:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	68ba      	ldr	r2, [r7, #8]
 800f5a0:	0151      	lsls	r1, r2, #5
 800f5a2:	68fa      	ldr	r2, [r7, #12]
 800f5a4:	440a      	add	r2, r1
 800f5a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f5aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f5ae:	6013      	str	r3, [r2, #0]
 800f5b0:	e027      	b.n	800f602 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f5b2:	68bb      	ldr	r3, [r7, #8]
 800f5b4:	015a      	lsls	r2, r3, #5
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	4413      	add	r3, r2
 800f5ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	68ba      	ldr	r2, [r7, #8]
 800f5c2:	0151      	lsls	r1, r2, #5
 800f5c4:	68fa      	ldr	r2, [r7, #12]
 800f5c6:	440a      	add	r2, r1
 800f5c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f5cc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f5d0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f5d2:	683b      	ldr	r3, [r7, #0]
 800f5d4:	791b      	ldrb	r3, [r3, #4]
 800f5d6:	2b03      	cmp	r3, #3
 800f5d8:	d003      	beq.n	800f5e2 <USB_EPClearStall+0x9e>
 800f5da:	683b      	ldr	r3, [r7, #0]
 800f5dc:	791b      	ldrb	r3, [r3, #4]
 800f5de:	2b02      	cmp	r3, #2
 800f5e0:	d10f      	bne.n	800f602 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f5e2:	68bb      	ldr	r3, [r7, #8]
 800f5e4:	015a      	lsls	r2, r3, #5
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	4413      	add	r3, r2
 800f5ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	68ba      	ldr	r2, [r7, #8]
 800f5f2:	0151      	lsls	r1, r2, #5
 800f5f4:	68fa      	ldr	r2, [r7, #12]
 800f5f6:	440a      	add	r2, r1
 800f5f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f5fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f600:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f602:	2300      	movs	r3, #0
}
 800f604:	4618      	mov	r0, r3
 800f606:	3714      	adds	r7, #20
 800f608:	46bd      	mov	sp, r7
 800f60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60e:	4770      	bx	lr

0800f610 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f610:	b480      	push	{r7}
 800f612:	b085      	sub	sp, #20
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
 800f618:	460b      	mov	r3, r1
 800f61a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	68fa      	ldr	r2, [r7, #12]
 800f62a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f62e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800f632:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f63a:	681a      	ldr	r2, [r3, #0]
 800f63c:	78fb      	ldrb	r3, [r7, #3]
 800f63e:	011b      	lsls	r3, r3, #4
 800f640:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800f644:	68f9      	ldr	r1, [r7, #12]
 800f646:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f64a:	4313      	orrs	r3, r2
 800f64c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f64e:	2300      	movs	r3, #0
}
 800f650:	4618      	mov	r0, r3
 800f652:	3714      	adds	r7, #20
 800f654:	46bd      	mov	sp, r7
 800f656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65a:	4770      	bx	lr

0800f65c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f65c:	b480      	push	{r7}
 800f65e:	b085      	sub	sp, #20
 800f660:	af00      	add	r7, sp, #0
 800f662:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	68fa      	ldr	r2, [r7, #12]
 800f672:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f676:	f023 0303 	bic.w	r3, r3, #3
 800f67a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f682:	685b      	ldr	r3, [r3, #4]
 800f684:	68fa      	ldr	r2, [r7, #12]
 800f686:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f68a:	f023 0302 	bic.w	r3, r3, #2
 800f68e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f690:	2300      	movs	r3, #0
}
 800f692:	4618      	mov	r0, r3
 800f694:	3714      	adds	r7, #20
 800f696:	46bd      	mov	sp, r7
 800f698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69c:	4770      	bx	lr

0800f69e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f69e:	b480      	push	{r7}
 800f6a0:	b085      	sub	sp, #20
 800f6a2:	af00      	add	r7, sp, #0
 800f6a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	68fa      	ldr	r2, [r7, #12]
 800f6b4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f6b8:	f023 0303 	bic.w	r3, r3, #3
 800f6bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f6c4:	685b      	ldr	r3, [r3, #4]
 800f6c6:	68fa      	ldr	r2, [r7, #12]
 800f6c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f6cc:	f043 0302 	orr.w	r3, r3, #2
 800f6d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f6d2:	2300      	movs	r3, #0
}
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	3714      	adds	r7, #20
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6de:	4770      	bx	lr

0800f6e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800f6e0:	b480      	push	{r7}
 800f6e2:	b085      	sub	sp, #20
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	695b      	ldr	r3, [r3, #20]
 800f6ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	699b      	ldr	r3, [r3, #24]
 800f6f2:	68fa      	ldr	r2, [r7, #12]
 800f6f4:	4013      	ands	r3, r2
 800f6f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
}
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	3714      	adds	r7, #20
 800f6fe:	46bd      	mov	sp, r7
 800f700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f704:	4770      	bx	lr

0800f706 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f706:	b480      	push	{r7}
 800f708:	b085      	sub	sp, #20
 800f70a:	af00      	add	r7, sp, #0
 800f70c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f718:	699b      	ldr	r3, [r3, #24]
 800f71a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f722:	69db      	ldr	r3, [r3, #28]
 800f724:	68ba      	ldr	r2, [r7, #8]
 800f726:	4013      	ands	r3, r2
 800f728:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f72a:	68bb      	ldr	r3, [r7, #8]
 800f72c:	0c1b      	lsrs	r3, r3, #16
}
 800f72e:	4618      	mov	r0, r3
 800f730:	3714      	adds	r7, #20
 800f732:	46bd      	mov	sp, r7
 800f734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f738:	4770      	bx	lr

0800f73a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f73a:	b480      	push	{r7}
 800f73c:	b085      	sub	sp, #20
 800f73e:	af00      	add	r7, sp, #0
 800f740:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f74c:	699b      	ldr	r3, [r3, #24]
 800f74e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f756:	69db      	ldr	r3, [r3, #28]
 800f758:	68ba      	ldr	r2, [r7, #8]
 800f75a:	4013      	ands	r3, r2
 800f75c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f75e:	68bb      	ldr	r3, [r7, #8]
 800f760:	b29b      	uxth	r3, r3
}
 800f762:	4618      	mov	r0, r3
 800f764:	3714      	adds	r7, #20
 800f766:	46bd      	mov	sp, r7
 800f768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76c:	4770      	bx	lr

0800f76e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f76e:	b480      	push	{r7}
 800f770:	b085      	sub	sp, #20
 800f772:	af00      	add	r7, sp, #0
 800f774:	6078      	str	r0, [r7, #4]
 800f776:	460b      	mov	r3, r1
 800f778:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f77e:	78fb      	ldrb	r3, [r7, #3]
 800f780:	015a      	lsls	r2, r3, #5
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	4413      	add	r3, r2
 800f786:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f78a:	689b      	ldr	r3, [r3, #8]
 800f78c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f794:	695b      	ldr	r3, [r3, #20]
 800f796:	68ba      	ldr	r2, [r7, #8]
 800f798:	4013      	ands	r3, r2
 800f79a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f79c:	68bb      	ldr	r3, [r7, #8]
}
 800f79e:	4618      	mov	r0, r3
 800f7a0:	3714      	adds	r7, #20
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a8:	4770      	bx	lr

0800f7aa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f7aa:	b480      	push	{r7}
 800f7ac:	b087      	sub	sp, #28
 800f7ae:	af00      	add	r7, sp, #0
 800f7b0:	6078      	str	r0, [r7, #4]
 800f7b2:	460b      	mov	r3, r1
 800f7b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f7ba:	697b      	ldr	r3, [r7, #20]
 800f7bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f7c0:	691b      	ldr	r3, [r3, #16]
 800f7c2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f7c4:	697b      	ldr	r3, [r7, #20]
 800f7c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f7ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f7cc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f7ce:	78fb      	ldrb	r3, [r7, #3]
 800f7d0:	f003 030f 	and.w	r3, r3, #15
 800f7d4:	68fa      	ldr	r2, [r7, #12]
 800f7d6:	fa22 f303 	lsr.w	r3, r2, r3
 800f7da:	01db      	lsls	r3, r3, #7
 800f7dc:	b2db      	uxtb	r3, r3
 800f7de:	693a      	ldr	r2, [r7, #16]
 800f7e0:	4313      	orrs	r3, r2
 800f7e2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f7e4:	78fb      	ldrb	r3, [r7, #3]
 800f7e6:	015a      	lsls	r2, r3, #5
 800f7e8:	697b      	ldr	r3, [r7, #20]
 800f7ea:	4413      	add	r3, r2
 800f7ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f7f0:	689b      	ldr	r3, [r3, #8]
 800f7f2:	693a      	ldr	r2, [r7, #16]
 800f7f4:	4013      	ands	r3, r2
 800f7f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f7f8:	68bb      	ldr	r3, [r7, #8]
}
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	371c      	adds	r7, #28
 800f7fe:	46bd      	mov	sp, r7
 800f800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f804:	4770      	bx	lr

0800f806 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800f806:	b480      	push	{r7}
 800f808:	b083      	sub	sp, #12
 800f80a:	af00      	add	r7, sp, #0
 800f80c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	695b      	ldr	r3, [r3, #20]
 800f812:	f003 0301 	and.w	r3, r3, #1
}
 800f816:	4618      	mov	r0, r3
 800f818:	370c      	adds	r7, #12
 800f81a:	46bd      	mov	sp, r7
 800f81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f820:	4770      	bx	lr
	...

0800f824 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800f824:	b480      	push	{r7}
 800f826:	b085      	sub	sp, #20
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f836:	681a      	ldr	r2, [r3, #0]
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f83e:	4619      	mov	r1, r3
 800f840:	4b09      	ldr	r3, [pc, #36]	@ (800f868 <USB_ActivateSetup+0x44>)
 800f842:	4013      	ands	r3, r2
 800f844:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f84c:	685b      	ldr	r3, [r3, #4]
 800f84e:	68fa      	ldr	r2, [r7, #12]
 800f850:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f854:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f858:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f85a:	2300      	movs	r3, #0
}
 800f85c:	4618      	mov	r0, r3
 800f85e:	3714      	adds	r7, #20
 800f860:	46bd      	mov	sp, r7
 800f862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f866:	4770      	bx	lr
 800f868:	fffff800 	.word	0xfffff800

0800f86c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800f86c:	b480      	push	{r7}
 800f86e:	b087      	sub	sp, #28
 800f870:	af00      	add	r7, sp, #0
 800f872:	60f8      	str	r0, [r7, #12]
 800f874:	460b      	mov	r3, r1
 800f876:	607a      	str	r2, [r7, #4]
 800f878:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	333c      	adds	r3, #60	@ 0x3c
 800f882:	3304      	adds	r3, #4
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f888:	693b      	ldr	r3, [r7, #16]
 800f88a:	4a26      	ldr	r2, [pc, #152]	@ (800f924 <USB_EP0_OutStart+0xb8>)
 800f88c:	4293      	cmp	r3, r2
 800f88e:	d90a      	bls.n	800f8a6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f890:	697b      	ldr	r3, [r7, #20]
 800f892:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f89c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f8a0:	d101      	bne.n	800f8a6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	e037      	b.n	800f916 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f8a6:	697b      	ldr	r3, [r7, #20]
 800f8a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f8ac:	461a      	mov	r2, r3
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f8b2:	697b      	ldr	r3, [r7, #20]
 800f8b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f8b8:	691b      	ldr	r3, [r3, #16]
 800f8ba:	697a      	ldr	r2, [r7, #20]
 800f8bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f8c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f8c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f8c6:	697b      	ldr	r3, [r7, #20]
 800f8c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f8cc:	691b      	ldr	r3, [r3, #16]
 800f8ce:	697a      	ldr	r2, [r7, #20]
 800f8d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f8d4:	f043 0318 	orr.w	r3, r3, #24
 800f8d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f8da:	697b      	ldr	r3, [r7, #20]
 800f8dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f8e0:	691b      	ldr	r3, [r3, #16]
 800f8e2:	697a      	ldr	r2, [r7, #20]
 800f8e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f8e8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800f8ec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f8ee:	7afb      	ldrb	r3, [r7, #11]
 800f8f0:	2b01      	cmp	r3, #1
 800f8f2:	d10f      	bne.n	800f914 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f8f4:	697b      	ldr	r3, [r7, #20]
 800f8f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f8fa:	461a      	mov	r2, r3
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f900:	697b      	ldr	r3, [r7, #20]
 800f902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	697a      	ldr	r2, [r7, #20]
 800f90a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f90e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800f912:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f914:	2300      	movs	r3, #0
}
 800f916:	4618      	mov	r0, r3
 800f918:	371c      	adds	r7, #28
 800f91a:	46bd      	mov	sp, r7
 800f91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f920:	4770      	bx	lr
 800f922:	bf00      	nop
 800f924:	4f54300a 	.word	0x4f54300a

0800f928 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f928:	b480      	push	{r7}
 800f92a:	b085      	sub	sp, #20
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f930:	2300      	movs	r3, #0
 800f932:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	3301      	adds	r3, #1
 800f938:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f940:	d901      	bls.n	800f946 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f942:	2303      	movs	r3, #3
 800f944:	e01b      	b.n	800f97e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	691b      	ldr	r3, [r3, #16]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	daf2      	bge.n	800f934 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f94e:	2300      	movs	r3, #0
 800f950:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	691b      	ldr	r3, [r3, #16]
 800f956:	f043 0201 	orr.w	r2, r3, #1
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	3301      	adds	r3, #1
 800f962:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f96a:	d901      	bls.n	800f970 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f96c:	2303      	movs	r3, #3
 800f96e:	e006      	b.n	800f97e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	691b      	ldr	r3, [r3, #16]
 800f974:	f003 0301 	and.w	r3, r3, #1
 800f978:	2b01      	cmp	r3, #1
 800f97a:	d0f0      	beq.n	800f95e <USB_CoreReset+0x36>

  return HAL_OK;
 800f97c:	2300      	movs	r3, #0
}
 800f97e:	4618      	mov	r0, r3
 800f980:	3714      	adds	r7, #20
 800f982:	46bd      	mov	sp, r7
 800f984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f988:	4770      	bx	lr
	...

0800f98c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b084      	sub	sp, #16
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
 800f994:	460b      	mov	r3, r1
 800f996:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f998:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800f99c:	f002 fcfe 	bl	801239c <USBD_static_malloc>
 800f9a0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d109      	bne.n	800f9bc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	32b0      	adds	r2, #176	@ 0xb0
 800f9b2:	2100      	movs	r1, #0
 800f9b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800f9b8:	2302      	movs	r3, #2
 800f9ba:	e0d4      	b.n	800fb66 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800f9bc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800f9c0:	2100      	movs	r1, #0
 800f9c2:	68f8      	ldr	r0, [r7, #12]
 800f9c4:	f003 fa89 	bl	8012eda <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	32b0      	adds	r2, #176	@ 0xb0
 800f9d2:	68f9      	ldr	r1, [r7, #12]
 800f9d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	32b0      	adds	r2, #176	@ 0xb0
 800f9e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	7c1b      	ldrb	r3, [r3, #16]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d138      	bne.n	800fa66 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f9f4:	4b5e      	ldr	r3, [pc, #376]	@ (800fb70 <USBD_CDC_Init+0x1e4>)
 800f9f6:	7819      	ldrb	r1, [r3, #0]
 800f9f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f9fc:	2202      	movs	r2, #2
 800f9fe:	6878      	ldr	r0, [r7, #4]
 800fa00:	f002 fba9 	bl	8012156 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800fa04:	4b5a      	ldr	r3, [pc, #360]	@ (800fb70 <USBD_CDC_Init+0x1e4>)
 800fa06:	781b      	ldrb	r3, [r3, #0]
 800fa08:	f003 020f 	and.w	r2, r3, #15
 800fa0c:	6879      	ldr	r1, [r7, #4]
 800fa0e:	4613      	mov	r3, r2
 800fa10:	009b      	lsls	r3, r3, #2
 800fa12:	4413      	add	r3, r2
 800fa14:	009b      	lsls	r3, r3, #2
 800fa16:	440b      	add	r3, r1
 800fa18:	3324      	adds	r3, #36	@ 0x24
 800fa1a:	2201      	movs	r2, #1
 800fa1c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800fa1e:	4b55      	ldr	r3, [pc, #340]	@ (800fb74 <USBD_CDC_Init+0x1e8>)
 800fa20:	7819      	ldrb	r1, [r3, #0]
 800fa22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fa26:	2202      	movs	r2, #2
 800fa28:	6878      	ldr	r0, [r7, #4]
 800fa2a:	f002 fb94 	bl	8012156 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800fa2e:	4b51      	ldr	r3, [pc, #324]	@ (800fb74 <USBD_CDC_Init+0x1e8>)
 800fa30:	781b      	ldrb	r3, [r3, #0]
 800fa32:	f003 020f 	and.w	r2, r3, #15
 800fa36:	6879      	ldr	r1, [r7, #4]
 800fa38:	4613      	mov	r3, r2
 800fa3a:	009b      	lsls	r3, r3, #2
 800fa3c:	4413      	add	r3, r2
 800fa3e:	009b      	lsls	r3, r3, #2
 800fa40:	440b      	add	r3, r1
 800fa42:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fa46:	2201      	movs	r2, #1
 800fa48:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800fa4a:	4b4b      	ldr	r3, [pc, #300]	@ (800fb78 <USBD_CDC_Init+0x1ec>)
 800fa4c:	781b      	ldrb	r3, [r3, #0]
 800fa4e:	f003 020f 	and.w	r2, r3, #15
 800fa52:	6879      	ldr	r1, [r7, #4]
 800fa54:	4613      	mov	r3, r2
 800fa56:	009b      	lsls	r3, r3, #2
 800fa58:	4413      	add	r3, r2
 800fa5a:	009b      	lsls	r3, r3, #2
 800fa5c:	440b      	add	r3, r1
 800fa5e:	3326      	adds	r3, #38	@ 0x26
 800fa60:	2210      	movs	r2, #16
 800fa62:	801a      	strh	r2, [r3, #0]
 800fa64:	e035      	b.n	800fad2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800fa66:	4b42      	ldr	r3, [pc, #264]	@ (800fb70 <USBD_CDC_Init+0x1e4>)
 800fa68:	7819      	ldrb	r1, [r3, #0]
 800fa6a:	2340      	movs	r3, #64	@ 0x40
 800fa6c:	2202      	movs	r2, #2
 800fa6e:	6878      	ldr	r0, [r7, #4]
 800fa70:	f002 fb71 	bl	8012156 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800fa74:	4b3e      	ldr	r3, [pc, #248]	@ (800fb70 <USBD_CDC_Init+0x1e4>)
 800fa76:	781b      	ldrb	r3, [r3, #0]
 800fa78:	f003 020f 	and.w	r2, r3, #15
 800fa7c:	6879      	ldr	r1, [r7, #4]
 800fa7e:	4613      	mov	r3, r2
 800fa80:	009b      	lsls	r3, r3, #2
 800fa82:	4413      	add	r3, r2
 800fa84:	009b      	lsls	r3, r3, #2
 800fa86:	440b      	add	r3, r1
 800fa88:	3324      	adds	r3, #36	@ 0x24
 800fa8a:	2201      	movs	r2, #1
 800fa8c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800fa8e:	4b39      	ldr	r3, [pc, #228]	@ (800fb74 <USBD_CDC_Init+0x1e8>)
 800fa90:	7819      	ldrb	r1, [r3, #0]
 800fa92:	2340      	movs	r3, #64	@ 0x40
 800fa94:	2202      	movs	r2, #2
 800fa96:	6878      	ldr	r0, [r7, #4]
 800fa98:	f002 fb5d 	bl	8012156 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800fa9c:	4b35      	ldr	r3, [pc, #212]	@ (800fb74 <USBD_CDC_Init+0x1e8>)
 800fa9e:	781b      	ldrb	r3, [r3, #0]
 800faa0:	f003 020f 	and.w	r2, r3, #15
 800faa4:	6879      	ldr	r1, [r7, #4]
 800faa6:	4613      	mov	r3, r2
 800faa8:	009b      	lsls	r3, r3, #2
 800faaa:	4413      	add	r3, r2
 800faac:	009b      	lsls	r3, r3, #2
 800faae:	440b      	add	r3, r1
 800fab0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fab4:	2201      	movs	r2, #1
 800fab6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800fab8:	4b2f      	ldr	r3, [pc, #188]	@ (800fb78 <USBD_CDC_Init+0x1ec>)
 800faba:	781b      	ldrb	r3, [r3, #0]
 800fabc:	f003 020f 	and.w	r2, r3, #15
 800fac0:	6879      	ldr	r1, [r7, #4]
 800fac2:	4613      	mov	r3, r2
 800fac4:	009b      	lsls	r3, r3, #2
 800fac6:	4413      	add	r3, r2
 800fac8:	009b      	lsls	r3, r3, #2
 800faca:	440b      	add	r3, r1
 800facc:	3326      	adds	r3, #38	@ 0x26
 800face:	2210      	movs	r2, #16
 800fad0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800fad2:	4b29      	ldr	r3, [pc, #164]	@ (800fb78 <USBD_CDC_Init+0x1ec>)
 800fad4:	7819      	ldrb	r1, [r3, #0]
 800fad6:	2308      	movs	r3, #8
 800fad8:	2203      	movs	r2, #3
 800fada:	6878      	ldr	r0, [r7, #4]
 800fadc:	f002 fb3b 	bl	8012156 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800fae0:	4b25      	ldr	r3, [pc, #148]	@ (800fb78 <USBD_CDC_Init+0x1ec>)
 800fae2:	781b      	ldrb	r3, [r3, #0]
 800fae4:	f003 020f 	and.w	r2, r3, #15
 800fae8:	6879      	ldr	r1, [r7, #4]
 800faea:	4613      	mov	r3, r2
 800faec:	009b      	lsls	r3, r3, #2
 800faee:	4413      	add	r3, r2
 800faf0:	009b      	lsls	r3, r3, #2
 800faf2:	440b      	add	r3, r1
 800faf4:	3324      	adds	r3, #36	@ 0x24
 800faf6:	2201      	movs	r2, #1
 800faf8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	2200      	movs	r2, #0
 800fafe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fb08:	687a      	ldr	r2, [r7, #4]
 800fb0a:	33b0      	adds	r3, #176	@ 0xb0
 800fb0c:	009b      	lsls	r3, r3, #2
 800fb0e:	4413      	add	r3, r2
 800fb10:	685b      	ldr	r3, [r3, #4]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	2200      	movs	r2, #0
 800fb1a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	2200      	movs	r2, #0
 800fb22:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d101      	bne.n	800fb34 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800fb30:	2302      	movs	r3, #2
 800fb32:	e018      	b.n	800fb66 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	7c1b      	ldrb	r3, [r3, #16]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d10a      	bne.n	800fb52 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fb3c:	4b0d      	ldr	r3, [pc, #52]	@ (800fb74 <USBD_CDC_Init+0x1e8>)
 800fb3e:	7819      	ldrb	r1, [r3, #0]
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fb46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fb4a:	6878      	ldr	r0, [r7, #4]
 800fb4c:	f002 fbf2 	bl	8012334 <USBD_LL_PrepareReceive>
 800fb50:	e008      	b.n	800fb64 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fb52:	4b08      	ldr	r3, [pc, #32]	@ (800fb74 <USBD_CDC_Init+0x1e8>)
 800fb54:	7819      	ldrb	r1, [r3, #0]
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fb5c:	2340      	movs	r3, #64	@ 0x40
 800fb5e:	6878      	ldr	r0, [r7, #4]
 800fb60:	f002 fbe8 	bl	8012334 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800fb64:	2300      	movs	r3, #0
}
 800fb66:	4618      	mov	r0, r3
 800fb68:	3710      	adds	r7, #16
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	bd80      	pop	{r7, pc}
 800fb6e:	bf00      	nop
 800fb70:	240000b3 	.word	0x240000b3
 800fb74:	240000b4 	.word	0x240000b4
 800fb78:	240000b5 	.word	0x240000b5

0800fb7c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b082      	sub	sp, #8
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
 800fb84:	460b      	mov	r3, r1
 800fb86:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800fb88:	4b3a      	ldr	r3, [pc, #232]	@ (800fc74 <USBD_CDC_DeInit+0xf8>)
 800fb8a:	781b      	ldrb	r3, [r3, #0]
 800fb8c:	4619      	mov	r1, r3
 800fb8e:	6878      	ldr	r0, [r7, #4]
 800fb90:	f002 fb07 	bl	80121a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800fb94:	4b37      	ldr	r3, [pc, #220]	@ (800fc74 <USBD_CDC_DeInit+0xf8>)
 800fb96:	781b      	ldrb	r3, [r3, #0]
 800fb98:	f003 020f 	and.w	r2, r3, #15
 800fb9c:	6879      	ldr	r1, [r7, #4]
 800fb9e:	4613      	mov	r3, r2
 800fba0:	009b      	lsls	r3, r3, #2
 800fba2:	4413      	add	r3, r2
 800fba4:	009b      	lsls	r3, r3, #2
 800fba6:	440b      	add	r3, r1
 800fba8:	3324      	adds	r3, #36	@ 0x24
 800fbaa:	2200      	movs	r2, #0
 800fbac:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800fbae:	4b32      	ldr	r3, [pc, #200]	@ (800fc78 <USBD_CDC_DeInit+0xfc>)
 800fbb0:	781b      	ldrb	r3, [r3, #0]
 800fbb2:	4619      	mov	r1, r3
 800fbb4:	6878      	ldr	r0, [r7, #4]
 800fbb6:	f002 faf4 	bl	80121a2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800fbba:	4b2f      	ldr	r3, [pc, #188]	@ (800fc78 <USBD_CDC_DeInit+0xfc>)
 800fbbc:	781b      	ldrb	r3, [r3, #0]
 800fbbe:	f003 020f 	and.w	r2, r3, #15
 800fbc2:	6879      	ldr	r1, [r7, #4]
 800fbc4:	4613      	mov	r3, r2
 800fbc6:	009b      	lsls	r3, r3, #2
 800fbc8:	4413      	add	r3, r2
 800fbca:	009b      	lsls	r3, r3, #2
 800fbcc:	440b      	add	r3, r1
 800fbce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800fbd6:	4b29      	ldr	r3, [pc, #164]	@ (800fc7c <USBD_CDC_DeInit+0x100>)
 800fbd8:	781b      	ldrb	r3, [r3, #0]
 800fbda:	4619      	mov	r1, r3
 800fbdc:	6878      	ldr	r0, [r7, #4]
 800fbde:	f002 fae0 	bl	80121a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800fbe2:	4b26      	ldr	r3, [pc, #152]	@ (800fc7c <USBD_CDC_DeInit+0x100>)
 800fbe4:	781b      	ldrb	r3, [r3, #0]
 800fbe6:	f003 020f 	and.w	r2, r3, #15
 800fbea:	6879      	ldr	r1, [r7, #4]
 800fbec:	4613      	mov	r3, r2
 800fbee:	009b      	lsls	r3, r3, #2
 800fbf0:	4413      	add	r3, r2
 800fbf2:	009b      	lsls	r3, r3, #2
 800fbf4:	440b      	add	r3, r1
 800fbf6:	3324      	adds	r3, #36	@ 0x24
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800fbfc:	4b1f      	ldr	r3, [pc, #124]	@ (800fc7c <USBD_CDC_DeInit+0x100>)
 800fbfe:	781b      	ldrb	r3, [r3, #0]
 800fc00:	f003 020f 	and.w	r2, r3, #15
 800fc04:	6879      	ldr	r1, [r7, #4]
 800fc06:	4613      	mov	r3, r2
 800fc08:	009b      	lsls	r3, r3, #2
 800fc0a:	4413      	add	r3, r2
 800fc0c:	009b      	lsls	r3, r3, #2
 800fc0e:	440b      	add	r3, r1
 800fc10:	3326      	adds	r3, #38	@ 0x26
 800fc12:	2200      	movs	r2, #0
 800fc14:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	32b0      	adds	r2, #176	@ 0xb0
 800fc20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d01f      	beq.n	800fc68 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fc2e:	687a      	ldr	r2, [r7, #4]
 800fc30:	33b0      	adds	r3, #176	@ 0xb0
 800fc32:	009b      	lsls	r3, r3, #2
 800fc34:	4413      	add	r3, r2
 800fc36:	685b      	ldr	r3, [r3, #4]
 800fc38:	685b      	ldr	r3, [r3, #4]
 800fc3a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	32b0      	adds	r2, #176	@ 0xb0
 800fc46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	f002 fbb4 	bl	80123b8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	32b0      	adds	r2, #176	@ 0xb0
 800fc5a:	2100      	movs	r1, #0
 800fc5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	2200      	movs	r2, #0
 800fc64:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800fc68:	2300      	movs	r3, #0
}
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	3708      	adds	r7, #8
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	bd80      	pop	{r7, pc}
 800fc72:	bf00      	nop
 800fc74:	240000b3 	.word	0x240000b3
 800fc78:	240000b4 	.word	0x240000b4
 800fc7c:	240000b5 	.word	0x240000b5

0800fc80 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b086      	sub	sp, #24
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
 800fc88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	32b0      	adds	r2, #176	@ 0xb0
 800fc94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc98:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800fc9e:	2300      	movs	r3, #0
 800fca0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800fca2:	2300      	movs	r3, #0
 800fca4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800fca6:	693b      	ldr	r3, [r7, #16]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d101      	bne.n	800fcb0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800fcac:	2303      	movs	r3, #3
 800fcae:	e0bf      	b.n	800fe30 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fcb0:	683b      	ldr	r3, [r7, #0]
 800fcb2:	781b      	ldrb	r3, [r3, #0]
 800fcb4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d050      	beq.n	800fd5e <USBD_CDC_Setup+0xde>
 800fcbc:	2b20      	cmp	r3, #32
 800fcbe:	f040 80af 	bne.w	800fe20 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800fcc2:	683b      	ldr	r3, [r7, #0]
 800fcc4:	88db      	ldrh	r3, [r3, #6]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d03a      	beq.n	800fd40 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800fcca:	683b      	ldr	r3, [r7, #0]
 800fccc:	781b      	ldrb	r3, [r3, #0]
 800fcce:	b25b      	sxtb	r3, r3
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	da1b      	bge.n	800fd0c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fcda:	687a      	ldr	r2, [r7, #4]
 800fcdc:	33b0      	adds	r3, #176	@ 0xb0
 800fcde:	009b      	lsls	r3, r3, #2
 800fce0:	4413      	add	r3, r2
 800fce2:	685b      	ldr	r3, [r3, #4]
 800fce4:	689b      	ldr	r3, [r3, #8]
 800fce6:	683a      	ldr	r2, [r7, #0]
 800fce8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800fcea:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800fcec:	683a      	ldr	r2, [r7, #0]
 800fcee:	88d2      	ldrh	r2, [r2, #6]
 800fcf0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800fcf2:	683b      	ldr	r3, [r7, #0]
 800fcf4:	88db      	ldrh	r3, [r3, #6]
 800fcf6:	2b07      	cmp	r3, #7
 800fcf8:	bf28      	it	cs
 800fcfa:	2307      	movcs	r3, #7
 800fcfc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800fcfe:	693b      	ldr	r3, [r7, #16]
 800fd00:	89fa      	ldrh	r2, [r7, #14]
 800fd02:	4619      	mov	r1, r3
 800fd04:	6878      	ldr	r0, [r7, #4]
 800fd06:	f001 fdbd 	bl	8011884 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800fd0a:	e090      	b.n	800fe2e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800fd0c:	683b      	ldr	r3, [r7, #0]
 800fd0e:	785a      	ldrb	r2, [r3, #1]
 800fd10:	693b      	ldr	r3, [r7, #16]
 800fd12:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800fd16:	683b      	ldr	r3, [r7, #0]
 800fd18:	88db      	ldrh	r3, [r3, #6]
 800fd1a:	2b3f      	cmp	r3, #63	@ 0x3f
 800fd1c:	d803      	bhi.n	800fd26 <USBD_CDC_Setup+0xa6>
 800fd1e:	683b      	ldr	r3, [r7, #0]
 800fd20:	88db      	ldrh	r3, [r3, #6]
 800fd22:	b2da      	uxtb	r2, r3
 800fd24:	e000      	b.n	800fd28 <USBD_CDC_Setup+0xa8>
 800fd26:	2240      	movs	r2, #64	@ 0x40
 800fd28:	693b      	ldr	r3, [r7, #16]
 800fd2a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800fd2e:	6939      	ldr	r1, [r7, #16]
 800fd30:	693b      	ldr	r3, [r7, #16]
 800fd32:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800fd36:	461a      	mov	r2, r3
 800fd38:	6878      	ldr	r0, [r7, #4]
 800fd3a:	f001 fdcf 	bl	80118dc <USBD_CtlPrepareRx>
      break;
 800fd3e:	e076      	b.n	800fe2e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fd46:	687a      	ldr	r2, [r7, #4]
 800fd48:	33b0      	adds	r3, #176	@ 0xb0
 800fd4a:	009b      	lsls	r3, r3, #2
 800fd4c:	4413      	add	r3, r2
 800fd4e:	685b      	ldr	r3, [r3, #4]
 800fd50:	689b      	ldr	r3, [r3, #8]
 800fd52:	683a      	ldr	r2, [r7, #0]
 800fd54:	7850      	ldrb	r0, [r2, #1]
 800fd56:	2200      	movs	r2, #0
 800fd58:	6839      	ldr	r1, [r7, #0]
 800fd5a:	4798      	blx	r3
      break;
 800fd5c:	e067      	b.n	800fe2e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fd5e:	683b      	ldr	r3, [r7, #0]
 800fd60:	785b      	ldrb	r3, [r3, #1]
 800fd62:	2b0b      	cmp	r3, #11
 800fd64:	d851      	bhi.n	800fe0a <USBD_CDC_Setup+0x18a>
 800fd66:	a201      	add	r2, pc, #4	@ (adr r2, 800fd6c <USBD_CDC_Setup+0xec>)
 800fd68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd6c:	0800fd9d 	.word	0x0800fd9d
 800fd70:	0800fe19 	.word	0x0800fe19
 800fd74:	0800fe0b 	.word	0x0800fe0b
 800fd78:	0800fe0b 	.word	0x0800fe0b
 800fd7c:	0800fe0b 	.word	0x0800fe0b
 800fd80:	0800fe0b 	.word	0x0800fe0b
 800fd84:	0800fe0b 	.word	0x0800fe0b
 800fd88:	0800fe0b 	.word	0x0800fe0b
 800fd8c:	0800fe0b 	.word	0x0800fe0b
 800fd90:	0800fe0b 	.word	0x0800fe0b
 800fd94:	0800fdc7 	.word	0x0800fdc7
 800fd98:	0800fdf1 	.word	0x0800fdf1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fda2:	b2db      	uxtb	r3, r3
 800fda4:	2b03      	cmp	r3, #3
 800fda6:	d107      	bne.n	800fdb8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800fda8:	f107 030a 	add.w	r3, r7, #10
 800fdac:	2202      	movs	r2, #2
 800fdae:	4619      	mov	r1, r3
 800fdb0:	6878      	ldr	r0, [r7, #4]
 800fdb2:	f001 fd67 	bl	8011884 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800fdb6:	e032      	b.n	800fe1e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800fdb8:	6839      	ldr	r1, [r7, #0]
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	f001 fce5 	bl	801178a <USBD_CtlError>
            ret = USBD_FAIL;
 800fdc0:	2303      	movs	r3, #3
 800fdc2:	75fb      	strb	r3, [r7, #23]
          break;
 800fdc4:	e02b      	b.n	800fe1e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fdcc:	b2db      	uxtb	r3, r3
 800fdce:	2b03      	cmp	r3, #3
 800fdd0:	d107      	bne.n	800fde2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800fdd2:	f107 030d 	add.w	r3, r7, #13
 800fdd6:	2201      	movs	r2, #1
 800fdd8:	4619      	mov	r1, r3
 800fdda:	6878      	ldr	r0, [r7, #4]
 800fddc:	f001 fd52 	bl	8011884 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800fde0:	e01d      	b.n	800fe1e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800fde2:	6839      	ldr	r1, [r7, #0]
 800fde4:	6878      	ldr	r0, [r7, #4]
 800fde6:	f001 fcd0 	bl	801178a <USBD_CtlError>
            ret = USBD_FAIL;
 800fdea:	2303      	movs	r3, #3
 800fdec:	75fb      	strb	r3, [r7, #23]
          break;
 800fdee:	e016      	b.n	800fe1e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fdf6:	b2db      	uxtb	r3, r3
 800fdf8:	2b03      	cmp	r3, #3
 800fdfa:	d00f      	beq.n	800fe1c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800fdfc:	6839      	ldr	r1, [r7, #0]
 800fdfe:	6878      	ldr	r0, [r7, #4]
 800fe00:	f001 fcc3 	bl	801178a <USBD_CtlError>
            ret = USBD_FAIL;
 800fe04:	2303      	movs	r3, #3
 800fe06:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800fe08:	e008      	b.n	800fe1c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800fe0a:	6839      	ldr	r1, [r7, #0]
 800fe0c:	6878      	ldr	r0, [r7, #4]
 800fe0e:	f001 fcbc 	bl	801178a <USBD_CtlError>
          ret = USBD_FAIL;
 800fe12:	2303      	movs	r3, #3
 800fe14:	75fb      	strb	r3, [r7, #23]
          break;
 800fe16:	e002      	b.n	800fe1e <USBD_CDC_Setup+0x19e>
          break;
 800fe18:	bf00      	nop
 800fe1a:	e008      	b.n	800fe2e <USBD_CDC_Setup+0x1ae>
          break;
 800fe1c:	bf00      	nop
      }
      break;
 800fe1e:	e006      	b.n	800fe2e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800fe20:	6839      	ldr	r1, [r7, #0]
 800fe22:	6878      	ldr	r0, [r7, #4]
 800fe24:	f001 fcb1 	bl	801178a <USBD_CtlError>
      ret = USBD_FAIL;
 800fe28:	2303      	movs	r3, #3
 800fe2a:	75fb      	strb	r3, [r7, #23]
      break;
 800fe2c:	bf00      	nop
  }

  return (uint8_t)ret;
 800fe2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe30:	4618      	mov	r0, r3
 800fe32:	3718      	adds	r7, #24
 800fe34:	46bd      	mov	sp, r7
 800fe36:	bd80      	pop	{r7, pc}

0800fe38 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b084      	sub	sp, #16
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
 800fe40:	460b      	mov	r3, r1
 800fe42:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fe4a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	32b0      	adds	r2, #176	@ 0xb0
 800fe56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d101      	bne.n	800fe62 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800fe5e:	2303      	movs	r3, #3
 800fe60:	e065      	b.n	800ff2e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	32b0      	adds	r2, #176	@ 0xb0
 800fe6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe70:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800fe72:	78fb      	ldrb	r3, [r7, #3]
 800fe74:	f003 020f 	and.w	r2, r3, #15
 800fe78:	6879      	ldr	r1, [r7, #4]
 800fe7a:	4613      	mov	r3, r2
 800fe7c:	009b      	lsls	r3, r3, #2
 800fe7e:	4413      	add	r3, r2
 800fe80:	009b      	lsls	r3, r3, #2
 800fe82:	440b      	add	r3, r1
 800fe84:	3318      	adds	r3, #24
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d02f      	beq.n	800feec <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800fe8c:	78fb      	ldrb	r3, [r7, #3]
 800fe8e:	f003 020f 	and.w	r2, r3, #15
 800fe92:	6879      	ldr	r1, [r7, #4]
 800fe94:	4613      	mov	r3, r2
 800fe96:	009b      	lsls	r3, r3, #2
 800fe98:	4413      	add	r3, r2
 800fe9a:	009b      	lsls	r3, r3, #2
 800fe9c:	440b      	add	r3, r1
 800fe9e:	3318      	adds	r3, #24
 800fea0:	681a      	ldr	r2, [r3, #0]
 800fea2:	78fb      	ldrb	r3, [r7, #3]
 800fea4:	f003 010f 	and.w	r1, r3, #15
 800fea8:	68f8      	ldr	r0, [r7, #12]
 800feaa:	460b      	mov	r3, r1
 800feac:	00db      	lsls	r3, r3, #3
 800feae:	440b      	add	r3, r1
 800feb0:	009b      	lsls	r3, r3, #2
 800feb2:	4403      	add	r3, r0
 800feb4:	331c      	adds	r3, #28
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	fbb2 f1f3 	udiv	r1, r2, r3
 800febc:	fb01 f303 	mul.w	r3, r1, r3
 800fec0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d112      	bne.n	800feec <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800fec6:	78fb      	ldrb	r3, [r7, #3]
 800fec8:	f003 020f 	and.w	r2, r3, #15
 800fecc:	6879      	ldr	r1, [r7, #4]
 800fece:	4613      	mov	r3, r2
 800fed0:	009b      	lsls	r3, r3, #2
 800fed2:	4413      	add	r3, r2
 800fed4:	009b      	lsls	r3, r3, #2
 800fed6:	440b      	add	r3, r1
 800fed8:	3318      	adds	r3, #24
 800feda:	2200      	movs	r2, #0
 800fedc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800fede:	78f9      	ldrb	r1, [r7, #3]
 800fee0:	2300      	movs	r3, #0
 800fee2:	2200      	movs	r2, #0
 800fee4:	6878      	ldr	r0, [r7, #4]
 800fee6:	f002 fa04 	bl	80122f2 <USBD_LL_Transmit>
 800feea:	e01f      	b.n	800ff2c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800feec:	68bb      	ldr	r3, [r7, #8]
 800feee:	2200      	movs	r2, #0
 800fef0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fefa:	687a      	ldr	r2, [r7, #4]
 800fefc:	33b0      	adds	r3, #176	@ 0xb0
 800fefe:	009b      	lsls	r3, r3, #2
 800ff00:	4413      	add	r3, r2
 800ff02:	685b      	ldr	r3, [r3, #4]
 800ff04:	691b      	ldr	r3, [r3, #16]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d010      	beq.n	800ff2c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ff10:	687a      	ldr	r2, [r7, #4]
 800ff12:	33b0      	adds	r3, #176	@ 0xb0
 800ff14:	009b      	lsls	r3, r3, #2
 800ff16:	4413      	add	r3, r2
 800ff18:	685b      	ldr	r3, [r3, #4]
 800ff1a:	691b      	ldr	r3, [r3, #16]
 800ff1c:	68ba      	ldr	r2, [r7, #8]
 800ff1e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800ff22:	68ba      	ldr	r2, [r7, #8]
 800ff24:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800ff28:	78fa      	ldrb	r2, [r7, #3]
 800ff2a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ff2c:	2300      	movs	r3, #0
}
 800ff2e:	4618      	mov	r0, r3
 800ff30:	3710      	adds	r7, #16
 800ff32:	46bd      	mov	sp, r7
 800ff34:	bd80      	pop	{r7, pc}

0800ff36 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ff36:	b580      	push	{r7, lr}
 800ff38:	b084      	sub	sp, #16
 800ff3a:	af00      	add	r7, sp, #0
 800ff3c:	6078      	str	r0, [r7, #4]
 800ff3e:	460b      	mov	r3, r1
 800ff40:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	32b0      	adds	r2, #176	@ 0xb0
 800ff4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff50:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	32b0      	adds	r2, #176	@ 0xb0
 800ff5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d101      	bne.n	800ff68 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ff64:	2303      	movs	r3, #3
 800ff66:	e01a      	b.n	800ff9e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ff68:	78fb      	ldrb	r3, [r7, #3]
 800ff6a:	4619      	mov	r1, r3
 800ff6c:	6878      	ldr	r0, [r7, #4]
 800ff6e:	f002 fa02 	bl	8012376 <USBD_LL_GetRxDataSize>
 800ff72:	4602      	mov	r2, r0
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ff80:	687a      	ldr	r2, [r7, #4]
 800ff82:	33b0      	adds	r3, #176	@ 0xb0
 800ff84:	009b      	lsls	r3, r3, #2
 800ff86:	4413      	add	r3, r2
 800ff88:	685b      	ldr	r3, [r3, #4]
 800ff8a:	68db      	ldr	r3, [r3, #12]
 800ff8c:	68fa      	ldr	r2, [r7, #12]
 800ff8e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ff92:	68fa      	ldr	r2, [r7, #12]
 800ff94:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ff98:	4611      	mov	r1, r2
 800ff9a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ff9c:	2300      	movs	r3, #0
}
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	3710      	adds	r7, #16
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	bd80      	pop	{r7, pc}

0800ffa6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ffa6:	b580      	push	{r7, lr}
 800ffa8:	b084      	sub	sp, #16
 800ffaa:	af00      	add	r7, sp, #0
 800ffac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	32b0      	adds	r2, #176	@ 0xb0
 800ffb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffbc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d101      	bne.n	800ffc8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ffc4:	2303      	movs	r3, #3
 800ffc6:	e024      	b.n	8010012 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ffce:	687a      	ldr	r2, [r7, #4]
 800ffd0:	33b0      	adds	r3, #176	@ 0xb0
 800ffd2:	009b      	lsls	r3, r3, #2
 800ffd4:	4413      	add	r3, r2
 800ffd6:	685b      	ldr	r3, [r3, #4]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d019      	beq.n	8010010 <USBD_CDC_EP0_RxReady+0x6a>
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ffe2:	2bff      	cmp	r3, #255	@ 0xff
 800ffe4:	d014      	beq.n	8010010 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ffec:	687a      	ldr	r2, [r7, #4]
 800ffee:	33b0      	adds	r3, #176	@ 0xb0
 800fff0:	009b      	lsls	r3, r3, #2
 800fff2:	4413      	add	r3, r2
 800fff4:	685b      	ldr	r3, [r3, #4]
 800fff6:	689b      	ldr	r3, [r3, #8]
 800fff8:	68fa      	ldr	r2, [r7, #12]
 800fffa:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800fffe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8010000:	68fa      	ldr	r2, [r7, #12]
 8010002:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010006:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	22ff      	movs	r2, #255	@ 0xff
 801000c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8010010:	2300      	movs	r3, #0
}
 8010012:	4618      	mov	r0, r3
 8010014:	3710      	adds	r7, #16
 8010016:	46bd      	mov	sp, r7
 8010018:	bd80      	pop	{r7, pc}
	...

0801001c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801001c:	b580      	push	{r7, lr}
 801001e:	b086      	sub	sp, #24
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010024:	2182      	movs	r1, #130	@ 0x82
 8010026:	4818      	ldr	r0, [pc, #96]	@ (8010088 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010028:	f000 fd4f 	bl	8010aca <USBD_GetEpDesc>
 801002c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801002e:	2101      	movs	r1, #1
 8010030:	4815      	ldr	r0, [pc, #84]	@ (8010088 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010032:	f000 fd4a 	bl	8010aca <USBD_GetEpDesc>
 8010036:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010038:	2181      	movs	r1, #129	@ 0x81
 801003a:	4813      	ldr	r0, [pc, #76]	@ (8010088 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801003c:	f000 fd45 	bl	8010aca <USBD_GetEpDesc>
 8010040:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010042:	697b      	ldr	r3, [r7, #20]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d002      	beq.n	801004e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010048:	697b      	ldr	r3, [r7, #20]
 801004a:	2210      	movs	r2, #16
 801004c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801004e:	693b      	ldr	r3, [r7, #16]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d006      	beq.n	8010062 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010054:	693b      	ldr	r3, [r7, #16]
 8010056:	2200      	movs	r2, #0
 8010058:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801005c:	711a      	strb	r2, [r3, #4]
 801005e:	2200      	movs	r2, #0
 8010060:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d006      	beq.n	8010076 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	2200      	movs	r2, #0
 801006c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010070:	711a      	strb	r2, [r3, #4]
 8010072:	2200      	movs	r2, #0
 8010074:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	2243      	movs	r2, #67	@ 0x43
 801007a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801007c:	4b02      	ldr	r3, [pc, #8]	@ (8010088 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801007e:	4618      	mov	r0, r3
 8010080:	3718      	adds	r7, #24
 8010082:	46bd      	mov	sp, r7
 8010084:	bd80      	pop	{r7, pc}
 8010086:	bf00      	nop
 8010088:	24000070 	.word	0x24000070

0801008c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b086      	sub	sp, #24
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010094:	2182      	movs	r1, #130	@ 0x82
 8010096:	4818      	ldr	r0, [pc, #96]	@ (80100f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010098:	f000 fd17 	bl	8010aca <USBD_GetEpDesc>
 801009c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801009e:	2101      	movs	r1, #1
 80100a0:	4815      	ldr	r0, [pc, #84]	@ (80100f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80100a2:	f000 fd12 	bl	8010aca <USBD_GetEpDesc>
 80100a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80100a8:	2181      	movs	r1, #129	@ 0x81
 80100aa:	4813      	ldr	r0, [pc, #76]	@ (80100f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80100ac:	f000 fd0d 	bl	8010aca <USBD_GetEpDesc>
 80100b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80100b2:	697b      	ldr	r3, [r7, #20]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d002      	beq.n	80100be <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80100b8:	697b      	ldr	r3, [r7, #20]
 80100ba:	2210      	movs	r2, #16
 80100bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80100be:	693b      	ldr	r3, [r7, #16]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d006      	beq.n	80100d2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80100c4:	693b      	ldr	r3, [r7, #16]
 80100c6:	2200      	movs	r2, #0
 80100c8:	711a      	strb	r2, [r3, #4]
 80100ca:	2200      	movs	r2, #0
 80100cc:	f042 0202 	orr.w	r2, r2, #2
 80100d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d006      	beq.n	80100e6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	2200      	movs	r2, #0
 80100dc:	711a      	strb	r2, [r3, #4]
 80100de:	2200      	movs	r2, #0
 80100e0:	f042 0202 	orr.w	r2, r2, #2
 80100e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	2243      	movs	r2, #67	@ 0x43
 80100ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80100ec:	4b02      	ldr	r3, [pc, #8]	@ (80100f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80100ee:	4618      	mov	r0, r3
 80100f0:	3718      	adds	r7, #24
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd80      	pop	{r7, pc}
 80100f6:	bf00      	nop
 80100f8:	24000070 	.word	0x24000070

080100fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b086      	sub	sp, #24
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010104:	2182      	movs	r1, #130	@ 0x82
 8010106:	4818      	ldr	r0, [pc, #96]	@ (8010168 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010108:	f000 fcdf 	bl	8010aca <USBD_GetEpDesc>
 801010c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801010e:	2101      	movs	r1, #1
 8010110:	4815      	ldr	r0, [pc, #84]	@ (8010168 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010112:	f000 fcda 	bl	8010aca <USBD_GetEpDesc>
 8010116:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010118:	2181      	movs	r1, #129	@ 0x81
 801011a:	4813      	ldr	r0, [pc, #76]	@ (8010168 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801011c:	f000 fcd5 	bl	8010aca <USBD_GetEpDesc>
 8010120:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010122:	697b      	ldr	r3, [r7, #20]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d002      	beq.n	801012e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010128:	697b      	ldr	r3, [r7, #20]
 801012a:	2210      	movs	r2, #16
 801012c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801012e:	693b      	ldr	r3, [r7, #16]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d006      	beq.n	8010142 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010134:	693b      	ldr	r3, [r7, #16]
 8010136:	2200      	movs	r2, #0
 8010138:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801013c:	711a      	strb	r2, [r3, #4]
 801013e:	2200      	movs	r2, #0
 8010140:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d006      	beq.n	8010156 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	2200      	movs	r2, #0
 801014c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010150:	711a      	strb	r2, [r3, #4]
 8010152:	2200      	movs	r2, #0
 8010154:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	2243      	movs	r2, #67	@ 0x43
 801015a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801015c:	4b02      	ldr	r3, [pc, #8]	@ (8010168 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801015e:	4618      	mov	r0, r3
 8010160:	3718      	adds	r7, #24
 8010162:	46bd      	mov	sp, r7
 8010164:	bd80      	pop	{r7, pc}
 8010166:	bf00      	nop
 8010168:	24000070 	.word	0x24000070

0801016c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801016c:	b480      	push	{r7}
 801016e:	b083      	sub	sp, #12
 8010170:	af00      	add	r7, sp, #0
 8010172:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	220a      	movs	r2, #10
 8010178:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801017a:	4b03      	ldr	r3, [pc, #12]	@ (8010188 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801017c:	4618      	mov	r0, r3
 801017e:	370c      	adds	r7, #12
 8010180:	46bd      	mov	sp, r7
 8010182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010186:	4770      	bx	lr
 8010188:	2400002c 	.word	0x2400002c

0801018c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801018c:	b480      	push	{r7}
 801018e:	b083      	sub	sp, #12
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
 8010194:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8010196:	683b      	ldr	r3, [r7, #0]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d101      	bne.n	80101a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801019c:	2303      	movs	r3, #3
 801019e:	e009      	b.n	80101b4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80101a6:	687a      	ldr	r2, [r7, #4]
 80101a8:	33b0      	adds	r3, #176	@ 0xb0
 80101aa:	009b      	lsls	r3, r3, #2
 80101ac:	4413      	add	r3, r2
 80101ae:	683a      	ldr	r2, [r7, #0]
 80101b0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80101b2:	2300      	movs	r3, #0
}
 80101b4:	4618      	mov	r0, r3
 80101b6:	370c      	adds	r7, #12
 80101b8:	46bd      	mov	sp, r7
 80101ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101be:	4770      	bx	lr

080101c0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80101c0:	b480      	push	{r7}
 80101c2:	b087      	sub	sp, #28
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	60f8      	str	r0, [r7, #12]
 80101c8:	60b9      	str	r1, [r7, #8]
 80101ca:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	32b0      	adds	r2, #176	@ 0xb0
 80101d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101da:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80101dc:	697b      	ldr	r3, [r7, #20]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d101      	bne.n	80101e6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80101e2:	2303      	movs	r3, #3
 80101e4:	e008      	b.n	80101f8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80101e6:	697b      	ldr	r3, [r7, #20]
 80101e8:	68ba      	ldr	r2, [r7, #8]
 80101ea:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80101ee:	697b      	ldr	r3, [r7, #20]
 80101f0:	687a      	ldr	r2, [r7, #4]
 80101f2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80101f6:	2300      	movs	r3, #0
}
 80101f8:	4618      	mov	r0, r3
 80101fa:	371c      	adds	r7, #28
 80101fc:	46bd      	mov	sp, r7
 80101fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010202:	4770      	bx	lr

08010204 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8010204:	b480      	push	{r7}
 8010206:	b085      	sub	sp, #20
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
 801020c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	32b0      	adds	r2, #176	@ 0xb0
 8010218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801021c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d101      	bne.n	8010228 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8010224:	2303      	movs	r3, #3
 8010226:	e004      	b.n	8010232 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	683a      	ldr	r2, [r7, #0]
 801022c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8010230:	2300      	movs	r3, #0
}
 8010232:	4618      	mov	r0, r3
 8010234:	3714      	adds	r7, #20
 8010236:	46bd      	mov	sp, r7
 8010238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023c:	4770      	bx	lr
	...

08010240 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8010240:	b580      	push	{r7, lr}
 8010242:	b084      	sub	sp, #16
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	32b0      	adds	r2, #176	@ 0xb0
 8010252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010256:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8010258:	2301      	movs	r3, #1
 801025a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 801025c:	68bb      	ldr	r3, [r7, #8]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d101      	bne.n	8010266 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8010262:	2303      	movs	r3, #3
 8010264:	e025      	b.n	80102b2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8010266:	68bb      	ldr	r3, [r7, #8]
 8010268:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801026c:	2b00      	cmp	r3, #0
 801026e:	d11f      	bne.n	80102b0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8010270:	68bb      	ldr	r3, [r7, #8]
 8010272:	2201      	movs	r2, #1
 8010274:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8010278:	4b10      	ldr	r3, [pc, #64]	@ (80102bc <USBD_CDC_TransmitPacket+0x7c>)
 801027a:	781b      	ldrb	r3, [r3, #0]
 801027c:	f003 020f 	and.w	r2, r3, #15
 8010280:	68bb      	ldr	r3, [r7, #8]
 8010282:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8010286:	6878      	ldr	r0, [r7, #4]
 8010288:	4613      	mov	r3, r2
 801028a:	009b      	lsls	r3, r3, #2
 801028c:	4413      	add	r3, r2
 801028e:	009b      	lsls	r3, r3, #2
 8010290:	4403      	add	r3, r0
 8010292:	3318      	adds	r3, #24
 8010294:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8010296:	4b09      	ldr	r3, [pc, #36]	@ (80102bc <USBD_CDC_TransmitPacket+0x7c>)
 8010298:	7819      	ldrb	r1, [r3, #0]
 801029a:	68bb      	ldr	r3, [r7, #8]
 801029c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80102a0:	68bb      	ldr	r3, [r7, #8]
 80102a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80102a6:	6878      	ldr	r0, [r7, #4]
 80102a8:	f002 f823 	bl	80122f2 <USBD_LL_Transmit>

    ret = USBD_OK;
 80102ac:	2300      	movs	r3, #0
 80102ae:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80102b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80102b2:	4618      	mov	r0, r3
 80102b4:	3710      	adds	r7, #16
 80102b6:	46bd      	mov	sp, r7
 80102b8:	bd80      	pop	{r7, pc}
 80102ba:	bf00      	nop
 80102bc:	240000b3 	.word	0x240000b3

080102c0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b084      	sub	sp, #16
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	32b0      	adds	r2, #176	@ 0xb0
 80102d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102d6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	32b0      	adds	r2, #176	@ 0xb0
 80102e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d101      	bne.n	80102ee <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80102ea:	2303      	movs	r3, #3
 80102ec:	e018      	b.n	8010320 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	7c1b      	ldrb	r3, [r3, #16]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d10a      	bne.n	801030c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80102f6:	4b0c      	ldr	r3, [pc, #48]	@ (8010328 <USBD_CDC_ReceivePacket+0x68>)
 80102f8:	7819      	ldrb	r1, [r3, #0]
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010300:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010304:	6878      	ldr	r0, [r7, #4]
 8010306:	f002 f815 	bl	8012334 <USBD_LL_PrepareReceive>
 801030a:	e008      	b.n	801031e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801030c:	4b06      	ldr	r3, [pc, #24]	@ (8010328 <USBD_CDC_ReceivePacket+0x68>)
 801030e:	7819      	ldrb	r1, [r3, #0]
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010316:	2340      	movs	r3, #64	@ 0x40
 8010318:	6878      	ldr	r0, [r7, #4]
 801031a:	f002 f80b 	bl	8012334 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801031e:	2300      	movs	r3, #0
}
 8010320:	4618      	mov	r0, r3
 8010322:	3710      	adds	r7, #16
 8010324:	46bd      	mov	sp, r7
 8010326:	bd80      	pop	{r7, pc}
 8010328:	240000b4 	.word	0x240000b4

0801032c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b086      	sub	sp, #24
 8010330:	af00      	add	r7, sp, #0
 8010332:	60f8      	str	r0, [r7, #12]
 8010334:	60b9      	str	r1, [r7, #8]
 8010336:	4613      	mov	r3, r2
 8010338:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d101      	bne.n	8010344 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010340:	2303      	movs	r3, #3
 8010342:	e01f      	b.n	8010384 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	2200      	movs	r2, #0
 8010348:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	2200      	movs	r2, #0
 8010350:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	2200      	movs	r2, #0
 8010358:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801035c:	68bb      	ldr	r3, [r7, #8]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d003      	beq.n	801036a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	68ba      	ldr	r2, [r7, #8]
 8010366:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	2201      	movs	r2, #1
 801036e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	79fa      	ldrb	r2, [r7, #7]
 8010376:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010378:	68f8      	ldr	r0, [r7, #12]
 801037a:	f001 fe81 	bl	8012080 <USBD_LL_Init>
 801037e:	4603      	mov	r3, r0
 8010380:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010382:	7dfb      	ldrb	r3, [r7, #23]
}
 8010384:	4618      	mov	r0, r3
 8010386:	3718      	adds	r7, #24
 8010388:	46bd      	mov	sp, r7
 801038a:	bd80      	pop	{r7, pc}

0801038c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801038c:	b580      	push	{r7, lr}
 801038e:	b084      	sub	sp, #16
 8010390:	af00      	add	r7, sp, #0
 8010392:	6078      	str	r0, [r7, #4]
 8010394:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010396:	2300      	movs	r3, #0
 8010398:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801039a:	683b      	ldr	r3, [r7, #0]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d101      	bne.n	80103a4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80103a0:	2303      	movs	r3, #3
 80103a2:	e025      	b.n	80103f0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	683a      	ldr	r2, [r7, #0]
 80103a8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	32ae      	adds	r2, #174	@ 0xae
 80103b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d00f      	beq.n	80103e0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	32ae      	adds	r2, #174	@ 0xae
 80103ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80103d0:	f107 020e 	add.w	r2, r7, #14
 80103d4:	4610      	mov	r0, r2
 80103d6:	4798      	blx	r3
 80103d8:	4602      	mov	r2, r0
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80103e6:	1c5a      	adds	r2, r3, #1
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80103ee:	2300      	movs	r3, #0
}
 80103f0:	4618      	mov	r0, r3
 80103f2:	3710      	adds	r7, #16
 80103f4:	46bd      	mov	sp, r7
 80103f6:	bd80      	pop	{r7, pc}

080103f8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b082      	sub	sp, #8
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010400:	6878      	ldr	r0, [r7, #4]
 8010402:	f001 fe8d 	bl	8012120 <USBD_LL_Start>
 8010406:	4603      	mov	r3, r0
}
 8010408:	4618      	mov	r0, r3
 801040a:	3708      	adds	r7, #8
 801040c:	46bd      	mov	sp, r7
 801040e:	bd80      	pop	{r7, pc}

08010410 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8010410:	b480      	push	{r7}
 8010412:	b083      	sub	sp, #12
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010418:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801041a:	4618      	mov	r0, r3
 801041c:	370c      	adds	r7, #12
 801041e:	46bd      	mov	sp, r7
 8010420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010424:	4770      	bx	lr

08010426 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010426:	b580      	push	{r7, lr}
 8010428:	b084      	sub	sp, #16
 801042a:	af00      	add	r7, sp, #0
 801042c:	6078      	str	r0, [r7, #4]
 801042e:	460b      	mov	r3, r1
 8010430:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010432:	2300      	movs	r3, #0
 8010434:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801043c:	2b00      	cmp	r3, #0
 801043e:	d009      	beq.n	8010454 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	78fa      	ldrb	r2, [r7, #3]
 801044a:	4611      	mov	r1, r2
 801044c:	6878      	ldr	r0, [r7, #4]
 801044e:	4798      	blx	r3
 8010450:	4603      	mov	r3, r0
 8010452:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010454:	7bfb      	ldrb	r3, [r7, #15]
}
 8010456:	4618      	mov	r0, r3
 8010458:	3710      	adds	r7, #16
 801045a:	46bd      	mov	sp, r7
 801045c:	bd80      	pop	{r7, pc}

0801045e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801045e:	b580      	push	{r7, lr}
 8010460:	b084      	sub	sp, #16
 8010462:	af00      	add	r7, sp, #0
 8010464:	6078      	str	r0, [r7, #4]
 8010466:	460b      	mov	r3, r1
 8010468:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801046a:	2300      	movs	r3, #0
 801046c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010474:	685b      	ldr	r3, [r3, #4]
 8010476:	78fa      	ldrb	r2, [r7, #3]
 8010478:	4611      	mov	r1, r2
 801047a:	6878      	ldr	r0, [r7, #4]
 801047c:	4798      	blx	r3
 801047e:	4603      	mov	r3, r0
 8010480:	2b00      	cmp	r3, #0
 8010482:	d001      	beq.n	8010488 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8010484:	2303      	movs	r3, #3
 8010486:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010488:	7bfb      	ldrb	r3, [r7, #15]
}
 801048a:	4618      	mov	r0, r3
 801048c:	3710      	adds	r7, #16
 801048e:	46bd      	mov	sp, r7
 8010490:	bd80      	pop	{r7, pc}

08010492 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010492:	b580      	push	{r7, lr}
 8010494:	b084      	sub	sp, #16
 8010496:	af00      	add	r7, sp, #0
 8010498:	6078      	str	r0, [r7, #4]
 801049a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80104a2:	6839      	ldr	r1, [r7, #0]
 80104a4:	4618      	mov	r0, r3
 80104a6:	f001 f936 	bl	8011716 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	2201      	movs	r2, #1
 80104ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80104b8:	461a      	mov	r2, r3
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80104c6:	f003 031f 	and.w	r3, r3, #31
 80104ca:	2b02      	cmp	r3, #2
 80104cc:	d01a      	beq.n	8010504 <USBD_LL_SetupStage+0x72>
 80104ce:	2b02      	cmp	r3, #2
 80104d0:	d822      	bhi.n	8010518 <USBD_LL_SetupStage+0x86>
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d002      	beq.n	80104dc <USBD_LL_SetupStage+0x4a>
 80104d6:	2b01      	cmp	r3, #1
 80104d8:	d00a      	beq.n	80104f0 <USBD_LL_SetupStage+0x5e>
 80104da:	e01d      	b.n	8010518 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80104e2:	4619      	mov	r1, r3
 80104e4:	6878      	ldr	r0, [r7, #4]
 80104e6:	f000 fb63 	bl	8010bb0 <USBD_StdDevReq>
 80104ea:	4603      	mov	r3, r0
 80104ec:	73fb      	strb	r3, [r7, #15]
      break;
 80104ee:	e020      	b.n	8010532 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80104f6:	4619      	mov	r1, r3
 80104f8:	6878      	ldr	r0, [r7, #4]
 80104fa:	f000 fbcb 	bl	8010c94 <USBD_StdItfReq>
 80104fe:	4603      	mov	r3, r0
 8010500:	73fb      	strb	r3, [r7, #15]
      break;
 8010502:	e016      	b.n	8010532 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801050a:	4619      	mov	r1, r3
 801050c:	6878      	ldr	r0, [r7, #4]
 801050e:	f000 fc2d 	bl	8010d6c <USBD_StdEPReq>
 8010512:	4603      	mov	r3, r0
 8010514:	73fb      	strb	r3, [r7, #15]
      break;
 8010516:	e00c      	b.n	8010532 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801051e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8010522:	b2db      	uxtb	r3, r3
 8010524:	4619      	mov	r1, r3
 8010526:	6878      	ldr	r0, [r7, #4]
 8010528:	f001 fe5a 	bl	80121e0 <USBD_LL_StallEP>
 801052c:	4603      	mov	r3, r0
 801052e:	73fb      	strb	r3, [r7, #15]
      break;
 8010530:	bf00      	nop
  }

  return ret;
 8010532:	7bfb      	ldrb	r3, [r7, #15]
}
 8010534:	4618      	mov	r0, r3
 8010536:	3710      	adds	r7, #16
 8010538:	46bd      	mov	sp, r7
 801053a:	bd80      	pop	{r7, pc}

0801053c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801053c:	b580      	push	{r7, lr}
 801053e:	b086      	sub	sp, #24
 8010540:	af00      	add	r7, sp, #0
 8010542:	60f8      	str	r0, [r7, #12]
 8010544:	460b      	mov	r3, r1
 8010546:	607a      	str	r2, [r7, #4]
 8010548:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801054a:	2300      	movs	r3, #0
 801054c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801054e:	7afb      	ldrb	r3, [r7, #11]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d16e      	bne.n	8010632 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 801055a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8010562:	2b03      	cmp	r3, #3
 8010564:	f040 8098 	bne.w	8010698 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8010568:	693b      	ldr	r3, [r7, #16]
 801056a:	689a      	ldr	r2, [r3, #8]
 801056c:	693b      	ldr	r3, [r7, #16]
 801056e:	68db      	ldr	r3, [r3, #12]
 8010570:	429a      	cmp	r2, r3
 8010572:	d913      	bls.n	801059c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8010574:	693b      	ldr	r3, [r7, #16]
 8010576:	689a      	ldr	r2, [r3, #8]
 8010578:	693b      	ldr	r3, [r7, #16]
 801057a:	68db      	ldr	r3, [r3, #12]
 801057c:	1ad2      	subs	r2, r2, r3
 801057e:	693b      	ldr	r3, [r7, #16]
 8010580:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010582:	693b      	ldr	r3, [r7, #16]
 8010584:	68da      	ldr	r2, [r3, #12]
 8010586:	693b      	ldr	r3, [r7, #16]
 8010588:	689b      	ldr	r3, [r3, #8]
 801058a:	4293      	cmp	r3, r2
 801058c:	bf28      	it	cs
 801058e:	4613      	movcs	r3, r2
 8010590:	461a      	mov	r2, r3
 8010592:	6879      	ldr	r1, [r7, #4]
 8010594:	68f8      	ldr	r0, [r7, #12]
 8010596:	f001 f9be 	bl	8011916 <USBD_CtlContinueRx>
 801059a:	e07d      	b.n	8010698 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80105a2:	f003 031f 	and.w	r3, r3, #31
 80105a6:	2b02      	cmp	r3, #2
 80105a8:	d014      	beq.n	80105d4 <USBD_LL_DataOutStage+0x98>
 80105aa:	2b02      	cmp	r3, #2
 80105ac:	d81d      	bhi.n	80105ea <USBD_LL_DataOutStage+0xae>
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d002      	beq.n	80105b8 <USBD_LL_DataOutStage+0x7c>
 80105b2:	2b01      	cmp	r3, #1
 80105b4:	d003      	beq.n	80105be <USBD_LL_DataOutStage+0x82>
 80105b6:	e018      	b.n	80105ea <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80105b8:	2300      	movs	r3, #0
 80105ba:	75bb      	strb	r3, [r7, #22]
            break;
 80105bc:	e018      	b.n	80105f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80105c4:	b2db      	uxtb	r3, r3
 80105c6:	4619      	mov	r1, r3
 80105c8:	68f8      	ldr	r0, [r7, #12]
 80105ca:	f000 fa64 	bl	8010a96 <USBD_CoreFindIF>
 80105ce:	4603      	mov	r3, r0
 80105d0:	75bb      	strb	r3, [r7, #22]
            break;
 80105d2:	e00d      	b.n	80105f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80105da:	b2db      	uxtb	r3, r3
 80105dc:	4619      	mov	r1, r3
 80105de:	68f8      	ldr	r0, [r7, #12]
 80105e0:	f000 fa66 	bl	8010ab0 <USBD_CoreFindEP>
 80105e4:	4603      	mov	r3, r0
 80105e6:	75bb      	strb	r3, [r7, #22]
            break;
 80105e8:	e002      	b.n	80105f0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80105ea:	2300      	movs	r3, #0
 80105ec:	75bb      	strb	r3, [r7, #22]
            break;
 80105ee:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80105f0:	7dbb      	ldrb	r3, [r7, #22]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d119      	bne.n	801062a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80105fc:	b2db      	uxtb	r3, r3
 80105fe:	2b03      	cmp	r3, #3
 8010600:	d113      	bne.n	801062a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8010602:	7dba      	ldrb	r2, [r7, #22]
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	32ae      	adds	r2, #174	@ 0xae
 8010608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801060c:	691b      	ldr	r3, [r3, #16]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d00b      	beq.n	801062a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8010612:	7dba      	ldrb	r2, [r7, #22]
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801061a:	7dba      	ldrb	r2, [r7, #22]
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	32ae      	adds	r2, #174	@ 0xae
 8010620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010624:	691b      	ldr	r3, [r3, #16]
 8010626:	68f8      	ldr	r0, [r7, #12]
 8010628:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801062a:	68f8      	ldr	r0, [r7, #12]
 801062c:	f001 f984 	bl	8011938 <USBD_CtlSendStatus>
 8010630:	e032      	b.n	8010698 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8010632:	7afb      	ldrb	r3, [r7, #11]
 8010634:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010638:	b2db      	uxtb	r3, r3
 801063a:	4619      	mov	r1, r3
 801063c:	68f8      	ldr	r0, [r7, #12]
 801063e:	f000 fa37 	bl	8010ab0 <USBD_CoreFindEP>
 8010642:	4603      	mov	r3, r0
 8010644:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010646:	7dbb      	ldrb	r3, [r7, #22]
 8010648:	2bff      	cmp	r3, #255	@ 0xff
 801064a:	d025      	beq.n	8010698 <USBD_LL_DataOutStage+0x15c>
 801064c:	7dbb      	ldrb	r3, [r7, #22]
 801064e:	2b00      	cmp	r3, #0
 8010650:	d122      	bne.n	8010698 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010658:	b2db      	uxtb	r3, r3
 801065a:	2b03      	cmp	r3, #3
 801065c:	d117      	bne.n	801068e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801065e:	7dba      	ldrb	r2, [r7, #22]
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	32ae      	adds	r2, #174	@ 0xae
 8010664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010668:	699b      	ldr	r3, [r3, #24]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d00f      	beq.n	801068e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801066e:	7dba      	ldrb	r2, [r7, #22]
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8010676:	7dba      	ldrb	r2, [r7, #22]
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	32ae      	adds	r2, #174	@ 0xae
 801067c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010680:	699b      	ldr	r3, [r3, #24]
 8010682:	7afa      	ldrb	r2, [r7, #11]
 8010684:	4611      	mov	r1, r2
 8010686:	68f8      	ldr	r0, [r7, #12]
 8010688:	4798      	blx	r3
 801068a:	4603      	mov	r3, r0
 801068c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801068e:	7dfb      	ldrb	r3, [r7, #23]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d001      	beq.n	8010698 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8010694:	7dfb      	ldrb	r3, [r7, #23]
 8010696:	e000      	b.n	801069a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8010698:	2300      	movs	r3, #0
}
 801069a:	4618      	mov	r0, r3
 801069c:	3718      	adds	r7, #24
 801069e:	46bd      	mov	sp, r7
 80106a0:	bd80      	pop	{r7, pc}

080106a2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80106a2:	b580      	push	{r7, lr}
 80106a4:	b086      	sub	sp, #24
 80106a6:	af00      	add	r7, sp, #0
 80106a8:	60f8      	str	r0, [r7, #12]
 80106aa:	460b      	mov	r3, r1
 80106ac:	607a      	str	r2, [r7, #4]
 80106ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80106b0:	7afb      	ldrb	r3, [r7, #11]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d16f      	bne.n	8010796 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	3314      	adds	r3, #20
 80106ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80106c2:	2b02      	cmp	r3, #2
 80106c4:	d15a      	bne.n	801077c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80106c6:	693b      	ldr	r3, [r7, #16]
 80106c8:	689a      	ldr	r2, [r3, #8]
 80106ca:	693b      	ldr	r3, [r7, #16]
 80106cc:	68db      	ldr	r3, [r3, #12]
 80106ce:	429a      	cmp	r2, r3
 80106d0:	d914      	bls.n	80106fc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80106d2:	693b      	ldr	r3, [r7, #16]
 80106d4:	689a      	ldr	r2, [r3, #8]
 80106d6:	693b      	ldr	r3, [r7, #16]
 80106d8:	68db      	ldr	r3, [r3, #12]
 80106da:	1ad2      	subs	r2, r2, r3
 80106dc:	693b      	ldr	r3, [r7, #16]
 80106de:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80106e0:	693b      	ldr	r3, [r7, #16]
 80106e2:	689b      	ldr	r3, [r3, #8]
 80106e4:	461a      	mov	r2, r3
 80106e6:	6879      	ldr	r1, [r7, #4]
 80106e8:	68f8      	ldr	r0, [r7, #12]
 80106ea:	f001 f8e6 	bl	80118ba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80106ee:	2300      	movs	r3, #0
 80106f0:	2200      	movs	r2, #0
 80106f2:	2100      	movs	r1, #0
 80106f4:	68f8      	ldr	r0, [r7, #12]
 80106f6:	f001 fe1d 	bl	8012334 <USBD_LL_PrepareReceive>
 80106fa:	e03f      	b.n	801077c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80106fc:	693b      	ldr	r3, [r7, #16]
 80106fe:	68da      	ldr	r2, [r3, #12]
 8010700:	693b      	ldr	r3, [r7, #16]
 8010702:	689b      	ldr	r3, [r3, #8]
 8010704:	429a      	cmp	r2, r3
 8010706:	d11c      	bne.n	8010742 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010708:	693b      	ldr	r3, [r7, #16]
 801070a:	685a      	ldr	r2, [r3, #4]
 801070c:	693b      	ldr	r3, [r7, #16]
 801070e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010710:	429a      	cmp	r2, r3
 8010712:	d316      	bcc.n	8010742 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8010714:	693b      	ldr	r3, [r7, #16]
 8010716:	685a      	ldr	r2, [r3, #4]
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 801071e:	429a      	cmp	r2, r3
 8010720:	d20f      	bcs.n	8010742 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010722:	2200      	movs	r2, #0
 8010724:	2100      	movs	r1, #0
 8010726:	68f8      	ldr	r0, [r7, #12]
 8010728:	f001 f8c7 	bl	80118ba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	2200      	movs	r2, #0
 8010730:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010734:	2300      	movs	r3, #0
 8010736:	2200      	movs	r2, #0
 8010738:	2100      	movs	r1, #0
 801073a:	68f8      	ldr	r0, [r7, #12]
 801073c:	f001 fdfa 	bl	8012334 <USBD_LL_PrepareReceive>
 8010740:	e01c      	b.n	801077c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010748:	b2db      	uxtb	r3, r3
 801074a:	2b03      	cmp	r3, #3
 801074c:	d10f      	bne.n	801076e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010754:	68db      	ldr	r3, [r3, #12]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d009      	beq.n	801076e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	2200      	movs	r2, #0
 801075e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010768:	68db      	ldr	r3, [r3, #12]
 801076a:	68f8      	ldr	r0, [r7, #12]
 801076c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801076e:	2180      	movs	r1, #128	@ 0x80
 8010770:	68f8      	ldr	r0, [r7, #12]
 8010772:	f001 fd35 	bl	80121e0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010776:	68f8      	ldr	r0, [r7, #12]
 8010778:	f001 f8f1 	bl	801195e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8010782:	2b00      	cmp	r3, #0
 8010784:	d03a      	beq.n	80107fc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8010786:	68f8      	ldr	r0, [r7, #12]
 8010788:	f7ff fe42 	bl	8010410 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	2200      	movs	r2, #0
 8010790:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8010794:	e032      	b.n	80107fc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8010796:	7afb      	ldrb	r3, [r7, #11]
 8010798:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801079c:	b2db      	uxtb	r3, r3
 801079e:	4619      	mov	r1, r3
 80107a0:	68f8      	ldr	r0, [r7, #12]
 80107a2:	f000 f985 	bl	8010ab0 <USBD_CoreFindEP>
 80107a6:	4603      	mov	r3, r0
 80107a8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80107aa:	7dfb      	ldrb	r3, [r7, #23]
 80107ac:	2bff      	cmp	r3, #255	@ 0xff
 80107ae:	d025      	beq.n	80107fc <USBD_LL_DataInStage+0x15a>
 80107b0:	7dfb      	ldrb	r3, [r7, #23]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d122      	bne.n	80107fc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80107bc:	b2db      	uxtb	r3, r3
 80107be:	2b03      	cmp	r3, #3
 80107c0:	d11c      	bne.n	80107fc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80107c2:	7dfa      	ldrb	r2, [r7, #23]
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	32ae      	adds	r2, #174	@ 0xae
 80107c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107cc:	695b      	ldr	r3, [r3, #20]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d014      	beq.n	80107fc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80107d2:	7dfa      	ldrb	r2, [r7, #23]
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80107da:	7dfa      	ldrb	r2, [r7, #23]
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	32ae      	adds	r2, #174	@ 0xae
 80107e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107e4:	695b      	ldr	r3, [r3, #20]
 80107e6:	7afa      	ldrb	r2, [r7, #11]
 80107e8:	4611      	mov	r1, r2
 80107ea:	68f8      	ldr	r0, [r7, #12]
 80107ec:	4798      	blx	r3
 80107ee:	4603      	mov	r3, r0
 80107f0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80107f2:	7dbb      	ldrb	r3, [r7, #22]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d001      	beq.n	80107fc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80107f8:	7dbb      	ldrb	r3, [r7, #22]
 80107fa:	e000      	b.n	80107fe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80107fc:	2300      	movs	r3, #0
}
 80107fe:	4618      	mov	r0, r3
 8010800:	3718      	adds	r7, #24
 8010802:	46bd      	mov	sp, r7
 8010804:	bd80      	pop	{r7, pc}

08010806 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010806:	b580      	push	{r7, lr}
 8010808:	b084      	sub	sp, #16
 801080a:	af00      	add	r7, sp, #0
 801080c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801080e:	2300      	movs	r3, #0
 8010810:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	2201      	movs	r2, #1
 8010816:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	2200      	movs	r2, #0
 801081e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	2200      	movs	r2, #0
 8010826:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	2200      	movs	r2, #0
 801082c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	2200      	movs	r2, #0
 8010834:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801083e:	2b00      	cmp	r3, #0
 8010840:	d014      	beq.n	801086c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010848:	685b      	ldr	r3, [r3, #4]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d00e      	beq.n	801086c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010854:	685b      	ldr	r3, [r3, #4]
 8010856:	687a      	ldr	r2, [r7, #4]
 8010858:	6852      	ldr	r2, [r2, #4]
 801085a:	b2d2      	uxtb	r2, r2
 801085c:	4611      	mov	r1, r2
 801085e:	6878      	ldr	r0, [r7, #4]
 8010860:	4798      	blx	r3
 8010862:	4603      	mov	r3, r0
 8010864:	2b00      	cmp	r3, #0
 8010866:	d001      	beq.n	801086c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8010868:	2303      	movs	r3, #3
 801086a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801086c:	2340      	movs	r3, #64	@ 0x40
 801086e:	2200      	movs	r2, #0
 8010870:	2100      	movs	r1, #0
 8010872:	6878      	ldr	r0, [r7, #4]
 8010874:	f001 fc6f 	bl	8012156 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	2201      	movs	r2, #1
 801087c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	2240      	movs	r2, #64	@ 0x40
 8010884:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010888:	2340      	movs	r3, #64	@ 0x40
 801088a:	2200      	movs	r2, #0
 801088c:	2180      	movs	r1, #128	@ 0x80
 801088e:	6878      	ldr	r0, [r7, #4]
 8010890:	f001 fc61 	bl	8012156 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	2201      	movs	r2, #1
 8010898:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	2240      	movs	r2, #64	@ 0x40
 801089e:	621a      	str	r2, [r3, #32]

  return ret;
 80108a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80108a2:	4618      	mov	r0, r3
 80108a4:	3710      	adds	r7, #16
 80108a6:	46bd      	mov	sp, r7
 80108a8:	bd80      	pop	{r7, pc}

080108aa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80108aa:	b480      	push	{r7}
 80108ac:	b083      	sub	sp, #12
 80108ae:	af00      	add	r7, sp, #0
 80108b0:	6078      	str	r0, [r7, #4]
 80108b2:	460b      	mov	r3, r1
 80108b4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	78fa      	ldrb	r2, [r7, #3]
 80108ba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80108bc:	2300      	movs	r3, #0
}
 80108be:	4618      	mov	r0, r3
 80108c0:	370c      	adds	r7, #12
 80108c2:	46bd      	mov	sp, r7
 80108c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c8:	4770      	bx	lr

080108ca <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80108ca:	b480      	push	{r7}
 80108cc:	b083      	sub	sp, #12
 80108ce:	af00      	add	r7, sp, #0
 80108d0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80108d8:	b2db      	uxtb	r3, r3
 80108da:	2b04      	cmp	r3, #4
 80108dc:	d006      	beq.n	80108ec <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80108e4:	b2da      	uxtb	r2, r3
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	2204      	movs	r2, #4
 80108f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80108f4:	2300      	movs	r3, #0
}
 80108f6:	4618      	mov	r0, r3
 80108f8:	370c      	adds	r7, #12
 80108fa:	46bd      	mov	sp, r7
 80108fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010900:	4770      	bx	lr

08010902 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010902:	b480      	push	{r7}
 8010904:	b083      	sub	sp, #12
 8010906:	af00      	add	r7, sp, #0
 8010908:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010910:	b2db      	uxtb	r3, r3
 8010912:	2b04      	cmp	r3, #4
 8010914:	d106      	bne.n	8010924 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 801091c:	b2da      	uxtb	r2, r3
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8010924:	2300      	movs	r3, #0
}
 8010926:	4618      	mov	r0, r3
 8010928:	370c      	adds	r7, #12
 801092a:	46bd      	mov	sp, r7
 801092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010930:	4770      	bx	lr

08010932 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010932:	b580      	push	{r7, lr}
 8010934:	b082      	sub	sp, #8
 8010936:	af00      	add	r7, sp, #0
 8010938:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010940:	b2db      	uxtb	r3, r3
 8010942:	2b03      	cmp	r3, #3
 8010944:	d110      	bne.n	8010968 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801094c:	2b00      	cmp	r3, #0
 801094e:	d00b      	beq.n	8010968 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010956:	69db      	ldr	r3, [r3, #28]
 8010958:	2b00      	cmp	r3, #0
 801095a:	d005      	beq.n	8010968 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010962:	69db      	ldr	r3, [r3, #28]
 8010964:	6878      	ldr	r0, [r7, #4]
 8010966:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8010968:	2300      	movs	r3, #0
}
 801096a:	4618      	mov	r0, r3
 801096c:	3708      	adds	r7, #8
 801096e:	46bd      	mov	sp, r7
 8010970:	bd80      	pop	{r7, pc}

08010972 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8010972:	b580      	push	{r7, lr}
 8010974:	b082      	sub	sp, #8
 8010976:	af00      	add	r7, sp, #0
 8010978:	6078      	str	r0, [r7, #4]
 801097a:	460b      	mov	r3, r1
 801097c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	32ae      	adds	r2, #174	@ 0xae
 8010988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801098c:	2b00      	cmp	r3, #0
 801098e:	d101      	bne.n	8010994 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8010990:	2303      	movs	r3, #3
 8010992:	e01c      	b.n	80109ce <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801099a:	b2db      	uxtb	r3, r3
 801099c:	2b03      	cmp	r3, #3
 801099e:	d115      	bne.n	80109cc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	32ae      	adds	r2, #174	@ 0xae
 80109aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109ae:	6a1b      	ldr	r3, [r3, #32]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d00b      	beq.n	80109cc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	32ae      	adds	r2, #174	@ 0xae
 80109be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109c2:	6a1b      	ldr	r3, [r3, #32]
 80109c4:	78fa      	ldrb	r2, [r7, #3]
 80109c6:	4611      	mov	r1, r2
 80109c8:	6878      	ldr	r0, [r7, #4]
 80109ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80109cc:	2300      	movs	r3, #0
}
 80109ce:	4618      	mov	r0, r3
 80109d0:	3708      	adds	r7, #8
 80109d2:	46bd      	mov	sp, r7
 80109d4:	bd80      	pop	{r7, pc}

080109d6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80109d6:	b580      	push	{r7, lr}
 80109d8:	b082      	sub	sp, #8
 80109da:	af00      	add	r7, sp, #0
 80109dc:	6078      	str	r0, [r7, #4]
 80109de:	460b      	mov	r3, r1
 80109e0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	32ae      	adds	r2, #174	@ 0xae
 80109ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d101      	bne.n	80109f8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80109f4:	2303      	movs	r3, #3
 80109f6:	e01c      	b.n	8010a32 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80109fe:	b2db      	uxtb	r3, r3
 8010a00:	2b03      	cmp	r3, #3
 8010a02:	d115      	bne.n	8010a30 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	32ae      	adds	r2, #174	@ 0xae
 8010a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d00b      	beq.n	8010a30 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	32ae      	adds	r2, #174	@ 0xae
 8010a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a28:	78fa      	ldrb	r2, [r7, #3]
 8010a2a:	4611      	mov	r1, r2
 8010a2c:	6878      	ldr	r0, [r7, #4]
 8010a2e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010a30:	2300      	movs	r3, #0
}
 8010a32:	4618      	mov	r0, r3
 8010a34:	3708      	adds	r7, #8
 8010a36:	46bd      	mov	sp, r7
 8010a38:	bd80      	pop	{r7, pc}

08010a3a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8010a3a:	b480      	push	{r7}
 8010a3c:	b083      	sub	sp, #12
 8010a3e:	af00      	add	r7, sp, #0
 8010a40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010a42:	2300      	movs	r3, #0
}
 8010a44:	4618      	mov	r0, r3
 8010a46:	370c      	adds	r7, #12
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4e:	4770      	bx	lr

08010a50 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010a50:	b580      	push	{r7, lr}
 8010a52:	b084      	sub	sp, #16
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8010a58:	2300      	movs	r3, #0
 8010a5a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	2201      	movs	r2, #1
 8010a60:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d00e      	beq.n	8010a8c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010a74:	685b      	ldr	r3, [r3, #4]
 8010a76:	687a      	ldr	r2, [r7, #4]
 8010a78:	6852      	ldr	r2, [r2, #4]
 8010a7a:	b2d2      	uxtb	r2, r2
 8010a7c:	4611      	mov	r1, r2
 8010a7e:	6878      	ldr	r0, [r7, #4]
 8010a80:	4798      	blx	r3
 8010a82:	4603      	mov	r3, r0
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d001      	beq.n	8010a8c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8010a88:	2303      	movs	r3, #3
 8010a8a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a8e:	4618      	mov	r0, r3
 8010a90:	3710      	adds	r7, #16
 8010a92:	46bd      	mov	sp, r7
 8010a94:	bd80      	pop	{r7, pc}

08010a96 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010a96:	b480      	push	{r7}
 8010a98:	b083      	sub	sp, #12
 8010a9a:	af00      	add	r7, sp, #0
 8010a9c:	6078      	str	r0, [r7, #4]
 8010a9e:	460b      	mov	r3, r1
 8010aa0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010aa2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	370c      	adds	r7, #12
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aae:	4770      	bx	lr

08010ab0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010ab0:	b480      	push	{r7}
 8010ab2:	b083      	sub	sp, #12
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
 8010ab8:	460b      	mov	r3, r1
 8010aba:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010abc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010abe:	4618      	mov	r0, r3
 8010ac0:	370c      	adds	r7, #12
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac8:	4770      	bx	lr

08010aca <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8010aca:	b580      	push	{r7, lr}
 8010acc:	b086      	sub	sp, #24
 8010ace:	af00      	add	r7, sp, #0
 8010ad0:	6078      	str	r0, [r7, #4]
 8010ad2:	460b      	mov	r3, r1
 8010ad4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8010ade:	2300      	movs	r3, #0
 8010ae0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	885b      	ldrh	r3, [r3, #2]
 8010ae6:	b29b      	uxth	r3, r3
 8010ae8:	68fa      	ldr	r2, [r7, #12]
 8010aea:	7812      	ldrb	r2, [r2, #0]
 8010aec:	4293      	cmp	r3, r2
 8010aee:	d91f      	bls.n	8010b30 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	781b      	ldrb	r3, [r3, #0]
 8010af4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8010af6:	e013      	b.n	8010b20 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8010af8:	f107 030a 	add.w	r3, r7, #10
 8010afc:	4619      	mov	r1, r3
 8010afe:	6978      	ldr	r0, [r7, #20]
 8010b00:	f000 f81b 	bl	8010b3a <USBD_GetNextDesc>
 8010b04:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8010b06:	697b      	ldr	r3, [r7, #20]
 8010b08:	785b      	ldrb	r3, [r3, #1]
 8010b0a:	2b05      	cmp	r3, #5
 8010b0c:	d108      	bne.n	8010b20 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8010b0e:	697b      	ldr	r3, [r7, #20]
 8010b10:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8010b12:	693b      	ldr	r3, [r7, #16]
 8010b14:	789b      	ldrb	r3, [r3, #2]
 8010b16:	78fa      	ldrb	r2, [r7, #3]
 8010b18:	429a      	cmp	r2, r3
 8010b1a:	d008      	beq.n	8010b2e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8010b1c:	2300      	movs	r3, #0
 8010b1e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	885b      	ldrh	r3, [r3, #2]
 8010b24:	b29a      	uxth	r2, r3
 8010b26:	897b      	ldrh	r3, [r7, #10]
 8010b28:	429a      	cmp	r2, r3
 8010b2a:	d8e5      	bhi.n	8010af8 <USBD_GetEpDesc+0x2e>
 8010b2c:	e000      	b.n	8010b30 <USBD_GetEpDesc+0x66>
          break;
 8010b2e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8010b30:	693b      	ldr	r3, [r7, #16]
}
 8010b32:	4618      	mov	r0, r3
 8010b34:	3718      	adds	r7, #24
 8010b36:	46bd      	mov	sp, r7
 8010b38:	bd80      	pop	{r7, pc}

08010b3a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8010b3a:	b480      	push	{r7}
 8010b3c:	b085      	sub	sp, #20
 8010b3e:	af00      	add	r7, sp, #0
 8010b40:	6078      	str	r0, [r7, #4]
 8010b42:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8010b48:	683b      	ldr	r3, [r7, #0]
 8010b4a:	881b      	ldrh	r3, [r3, #0]
 8010b4c:	68fa      	ldr	r2, [r7, #12]
 8010b4e:	7812      	ldrb	r2, [r2, #0]
 8010b50:	4413      	add	r3, r2
 8010b52:	b29a      	uxth	r2, r3
 8010b54:	683b      	ldr	r3, [r7, #0]
 8010b56:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	781b      	ldrb	r3, [r3, #0]
 8010b5c:	461a      	mov	r2, r3
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	4413      	add	r3, r2
 8010b62:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8010b64:	68fb      	ldr	r3, [r7, #12]
}
 8010b66:	4618      	mov	r0, r3
 8010b68:	3714      	adds	r7, #20
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b70:	4770      	bx	lr

08010b72 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010b72:	b480      	push	{r7}
 8010b74:	b087      	sub	sp, #28
 8010b76:	af00      	add	r7, sp, #0
 8010b78:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010b7e:	697b      	ldr	r3, [r7, #20]
 8010b80:	781b      	ldrb	r3, [r3, #0]
 8010b82:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010b84:	697b      	ldr	r3, [r7, #20]
 8010b86:	3301      	adds	r3, #1
 8010b88:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010b8a:	697b      	ldr	r3, [r7, #20]
 8010b8c:	781b      	ldrb	r3, [r3, #0]
 8010b8e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010b90:	8a3b      	ldrh	r3, [r7, #16]
 8010b92:	021b      	lsls	r3, r3, #8
 8010b94:	b21a      	sxth	r2, r3
 8010b96:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010b9a:	4313      	orrs	r3, r2
 8010b9c:	b21b      	sxth	r3, r3
 8010b9e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010ba0:	89fb      	ldrh	r3, [r7, #14]
}
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	371c      	adds	r7, #28
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bac:	4770      	bx	lr
	...

08010bb0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	b084      	sub	sp, #16
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	6078      	str	r0, [r7, #4]
 8010bb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010bba:	2300      	movs	r3, #0
 8010bbc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010bbe:	683b      	ldr	r3, [r7, #0]
 8010bc0:	781b      	ldrb	r3, [r3, #0]
 8010bc2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010bc6:	2b40      	cmp	r3, #64	@ 0x40
 8010bc8:	d005      	beq.n	8010bd6 <USBD_StdDevReq+0x26>
 8010bca:	2b40      	cmp	r3, #64	@ 0x40
 8010bcc:	d857      	bhi.n	8010c7e <USBD_StdDevReq+0xce>
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d00f      	beq.n	8010bf2 <USBD_StdDevReq+0x42>
 8010bd2:	2b20      	cmp	r3, #32
 8010bd4:	d153      	bne.n	8010c7e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	32ae      	adds	r2, #174	@ 0xae
 8010be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010be4:	689b      	ldr	r3, [r3, #8]
 8010be6:	6839      	ldr	r1, [r7, #0]
 8010be8:	6878      	ldr	r0, [r7, #4]
 8010bea:	4798      	blx	r3
 8010bec:	4603      	mov	r3, r0
 8010bee:	73fb      	strb	r3, [r7, #15]
      break;
 8010bf0:	e04a      	b.n	8010c88 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010bf2:	683b      	ldr	r3, [r7, #0]
 8010bf4:	785b      	ldrb	r3, [r3, #1]
 8010bf6:	2b09      	cmp	r3, #9
 8010bf8:	d83b      	bhi.n	8010c72 <USBD_StdDevReq+0xc2>
 8010bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8010c00 <USBD_StdDevReq+0x50>)
 8010bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c00:	08010c55 	.word	0x08010c55
 8010c04:	08010c69 	.word	0x08010c69
 8010c08:	08010c73 	.word	0x08010c73
 8010c0c:	08010c5f 	.word	0x08010c5f
 8010c10:	08010c73 	.word	0x08010c73
 8010c14:	08010c33 	.word	0x08010c33
 8010c18:	08010c29 	.word	0x08010c29
 8010c1c:	08010c73 	.word	0x08010c73
 8010c20:	08010c4b 	.word	0x08010c4b
 8010c24:	08010c3d 	.word	0x08010c3d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010c28:	6839      	ldr	r1, [r7, #0]
 8010c2a:	6878      	ldr	r0, [r7, #4]
 8010c2c:	f000 fa3c 	bl	80110a8 <USBD_GetDescriptor>
          break;
 8010c30:	e024      	b.n	8010c7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8010c32:	6839      	ldr	r1, [r7, #0]
 8010c34:	6878      	ldr	r0, [r7, #4]
 8010c36:	f000 fbcb 	bl	80113d0 <USBD_SetAddress>
          break;
 8010c3a:	e01f      	b.n	8010c7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010c3c:	6839      	ldr	r1, [r7, #0]
 8010c3e:	6878      	ldr	r0, [r7, #4]
 8010c40:	f000 fc0a 	bl	8011458 <USBD_SetConfig>
 8010c44:	4603      	mov	r3, r0
 8010c46:	73fb      	strb	r3, [r7, #15]
          break;
 8010c48:	e018      	b.n	8010c7c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8010c4a:	6839      	ldr	r1, [r7, #0]
 8010c4c:	6878      	ldr	r0, [r7, #4]
 8010c4e:	f000 fcad 	bl	80115ac <USBD_GetConfig>
          break;
 8010c52:	e013      	b.n	8010c7c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010c54:	6839      	ldr	r1, [r7, #0]
 8010c56:	6878      	ldr	r0, [r7, #4]
 8010c58:	f000 fcde 	bl	8011618 <USBD_GetStatus>
          break;
 8010c5c:	e00e      	b.n	8010c7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8010c5e:	6839      	ldr	r1, [r7, #0]
 8010c60:	6878      	ldr	r0, [r7, #4]
 8010c62:	f000 fd0d 	bl	8011680 <USBD_SetFeature>
          break;
 8010c66:	e009      	b.n	8010c7c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010c68:	6839      	ldr	r1, [r7, #0]
 8010c6a:	6878      	ldr	r0, [r7, #4]
 8010c6c:	f000 fd31 	bl	80116d2 <USBD_ClrFeature>
          break;
 8010c70:	e004      	b.n	8010c7c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8010c72:	6839      	ldr	r1, [r7, #0]
 8010c74:	6878      	ldr	r0, [r7, #4]
 8010c76:	f000 fd88 	bl	801178a <USBD_CtlError>
          break;
 8010c7a:	bf00      	nop
      }
      break;
 8010c7c:	e004      	b.n	8010c88 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8010c7e:	6839      	ldr	r1, [r7, #0]
 8010c80:	6878      	ldr	r0, [r7, #4]
 8010c82:	f000 fd82 	bl	801178a <USBD_CtlError>
      break;
 8010c86:	bf00      	nop
  }

  return ret;
 8010c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	3710      	adds	r7, #16
 8010c8e:	46bd      	mov	sp, r7
 8010c90:	bd80      	pop	{r7, pc}
 8010c92:	bf00      	nop

08010c94 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b084      	sub	sp, #16
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]
 8010c9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010ca2:	683b      	ldr	r3, [r7, #0]
 8010ca4:	781b      	ldrb	r3, [r3, #0]
 8010ca6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010caa:	2b40      	cmp	r3, #64	@ 0x40
 8010cac:	d005      	beq.n	8010cba <USBD_StdItfReq+0x26>
 8010cae:	2b40      	cmp	r3, #64	@ 0x40
 8010cb0:	d852      	bhi.n	8010d58 <USBD_StdItfReq+0xc4>
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d001      	beq.n	8010cba <USBD_StdItfReq+0x26>
 8010cb6:	2b20      	cmp	r3, #32
 8010cb8:	d14e      	bne.n	8010d58 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010cc0:	b2db      	uxtb	r3, r3
 8010cc2:	3b01      	subs	r3, #1
 8010cc4:	2b02      	cmp	r3, #2
 8010cc6:	d840      	bhi.n	8010d4a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010cc8:	683b      	ldr	r3, [r7, #0]
 8010cca:	889b      	ldrh	r3, [r3, #4]
 8010ccc:	b2db      	uxtb	r3, r3
 8010cce:	2b01      	cmp	r3, #1
 8010cd0:	d836      	bhi.n	8010d40 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8010cd2:	683b      	ldr	r3, [r7, #0]
 8010cd4:	889b      	ldrh	r3, [r3, #4]
 8010cd6:	b2db      	uxtb	r3, r3
 8010cd8:	4619      	mov	r1, r3
 8010cda:	6878      	ldr	r0, [r7, #4]
 8010cdc:	f7ff fedb 	bl	8010a96 <USBD_CoreFindIF>
 8010ce0:	4603      	mov	r3, r0
 8010ce2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010ce4:	7bbb      	ldrb	r3, [r7, #14]
 8010ce6:	2bff      	cmp	r3, #255	@ 0xff
 8010ce8:	d01d      	beq.n	8010d26 <USBD_StdItfReq+0x92>
 8010cea:	7bbb      	ldrb	r3, [r7, #14]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d11a      	bne.n	8010d26 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8010cf0:	7bba      	ldrb	r2, [r7, #14]
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	32ae      	adds	r2, #174	@ 0xae
 8010cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010cfa:	689b      	ldr	r3, [r3, #8]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d00f      	beq.n	8010d20 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8010d00:	7bba      	ldrb	r2, [r7, #14]
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010d08:	7bba      	ldrb	r2, [r7, #14]
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	32ae      	adds	r2, #174	@ 0xae
 8010d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d12:	689b      	ldr	r3, [r3, #8]
 8010d14:	6839      	ldr	r1, [r7, #0]
 8010d16:	6878      	ldr	r0, [r7, #4]
 8010d18:	4798      	blx	r3
 8010d1a:	4603      	mov	r3, r0
 8010d1c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010d1e:	e004      	b.n	8010d2a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8010d20:	2303      	movs	r3, #3
 8010d22:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010d24:	e001      	b.n	8010d2a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8010d26:	2303      	movs	r3, #3
 8010d28:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010d2a:	683b      	ldr	r3, [r7, #0]
 8010d2c:	88db      	ldrh	r3, [r3, #6]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d110      	bne.n	8010d54 <USBD_StdItfReq+0xc0>
 8010d32:	7bfb      	ldrb	r3, [r7, #15]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d10d      	bne.n	8010d54 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8010d38:	6878      	ldr	r0, [r7, #4]
 8010d3a:	f000 fdfd 	bl	8011938 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010d3e:	e009      	b.n	8010d54 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8010d40:	6839      	ldr	r1, [r7, #0]
 8010d42:	6878      	ldr	r0, [r7, #4]
 8010d44:	f000 fd21 	bl	801178a <USBD_CtlError>
          break;
 8010d48:	e004      	b.n	8010d54 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8010d4a:	6839      	ldr	r1, [r7, #0]
 8010d4c:	6878      	ldr	r0, [r7, #4]
 8010d4e:	f000 fd1c 	bl	801178a <USBD_CtlError>
          break;
 8010d52:	e000      	b.n	8010d56 <USBD_StdItfReq+0xc2>
          break;
 8010d54:	bf00      	nop
      }
      break;
 8010d56:	e004      	b.n	8010d62 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8010d58:	6839      	ldr	r1, [r7, #0]
 8010d5a:	6878      	ldr	r0, [r7, #4]
 8010d5c:	f000 fd15 	bl	801178a <USBD_CtlError>
      break;
 8010d60:	bf00      	nop
  }

  return ret;
 8010d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d64:	4618      	mov	r0, r3
 8010d66:	3710      	adds	r7, #16
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	bd80      	pop	{r7, pc}

08010d6c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b084      	sub	sp, #16
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
 8010d74:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8010d76:	2300      	movs	r3, #0
 8010d78:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8010d7a:	683b      	ldr	r3, [r7, #0]
 8010d7c:	889b      	ldrh	r3, [r3, #4]
 8010d7e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010d80:	683b      	ldr	r3, [r7, #0]
 8010d82:	781b      	ldrb	r3, [r3, #0]
 8010d84:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010d88:	2b40      	cmp	r3, #64	@ 0x40
 8010d8a:	d007      	beq.n	8010d9c <USBD_StdEPReq+0x30>
 8010d8c:	2b40      	cmp	r3, #64	@ 0x40
 8010d8e:	f200 817f 	bhi.w	8011090 <USBD_StdEPReq+0x324>
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d02a      	beq.n	8010dec <USBD_StdEPReq+0x80>
 8010d96:	2b20      	cmp	r3, #32
 8010d98:	f040 817a 	bne.w	8011090 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8010d9c:	7bbb      	ldrb	r3, [r7, #14]
 8010d9e:	4619      	mov	r1, r3
 8010da0:	6878      	ldr	r0, [r7, #4]
 8010da2:	f7ff fe85 	bl	8010ab0 <USBD_CoreFindEP>
 8010da6:	4603      	mov	r3, r0
 8010da8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010daa:	7b7b      	ldrb	r3, [r7, #13]
 8010dac:	2bff      	cmp	r3, #255	@ 0xff
 8010dae:	f000 8174 	beq.w	801109a <USBD_StdEPReq+0x32e>
 8010db2:	7b7b      	ldrb	r3, [r7, #13]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	f040 8170 	bne.w	801109a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8010dba:	7b7a      	ldrb	r2, [r7, #13]
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8010dc2:	7b7a      	ldrb	r2, [r7, #13]
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	32ae      	adds	r2, #174	@ 0xae
 8010dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010dcc:	689b      	ldr	r3, [r3, #8]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	f000 8163 	beq.w	801109a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8010dd4:	7b7a      	ldrb	r2, [r7, #13]
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	32ae      	adds	r2, #174	@ 0xae
 8010dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010dde:	689b      	ldr	r3, [r3, #8]
 8010de0:	6839      	ldr	r1, [r7, #0]
 8010de2:	6878      	ldr	r0, [r7, #4]
 8010de4:	4798      	blx	r3
 8010de6:	4603      	mov	r3, r0
 8010de8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8010dea:	e156      	b.n	801109a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010dec:	683b      	ldr	r3, [r7, #0]
 8010dee:	785b      	ldrb	r3, [r3, #1]
 8010df0:	2b03      	cmp	r3, #3
 8010df2:	d008      	beq.n	8010e06 <USBD_StdEPReq+0x9a>
 8010df4:	2b03      	cmp	r3, #3
 8010df6:	f300 8145 	bgt.w	8011084 <USBD_StdEPReq+0x318>
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	f000 809b 	beq.w	8010f36 <USBD_StdEPReq+0x1ca>
 8010e00:	2b01      	cmp	r3, #1
 8010e02:	d03c      	beq.n	8010e7e <USBD_StdEPReq+0x112>
 8010e04:	e13e      	b.n	8011084 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010e0c:	b2db      	uxtb	r3, r3
 8010e0e:	2b02      	cmp	r3, #2
 8010e10:	d002      	beq.n	8010e18 <USBD_StdEPReq+0xac>
 8010e12:	2b03      	cmp	r3, #3
 8010e14:	d016      	beq.n	8010e44 <USBD_StdEPReq+0xd8>
 8010e16:	e02c      	b.n	8010e72 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010e18:	7bbb      	ldrb	r3, [r7, #14]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d00d      	beq.n	8010e3a <USBD_StdEPReq+0xce>
 8010e1e:	7bbb      	ldrb	r3, [r7, #14]
 8010e20:	2b80      	cmp	r3, #128	@ 0x80
 8010e22:	d00a      	beq.n	8010e3a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010e24:	7bbb      	ldrb	r3, [r7, #14]
 8010e26:	4619      	mov	r1, r3
 8010e28:	6878      	ldr	r0, [r7, #4]
 8010e2a:	f001 f9d9 	bl	80121e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010e2e:	2180      	movs	r1, #128	@ 0x80
 8010e30:	6878      	ldr	r0, [r7, #4]
 8010e32:	f001 f9d5 	bl	80121e0 <USBD_LL_StallEP>
 8010e36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010e38:	e020      	b.n	8010e7c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8010e3a:	6839      	ldr	r1, [r7, #0]
 8010e3c:	6878      	ldr	r0, [r7, #4]
 8010e3e:	f000 fca4 	bl	801178a <USBD_CtlError>
              break;
 8010e42:	e01b      	b.n	8010e7c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010e44:	683b      	ldr	r3, [r7, #0]
 8010e46:	885b      	ldrh	r3, [r3, #2]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d10e      	bne.n	8010e6a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010e4c:	7bbb      	ldrb	r3, [r7, #14]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d00b      	beq.n	8010e6a <USBD_StdEPReq+0xfe>
 8010e52:	7bbb      	ldrb	r3, [r7, #14]
 8010e54:	2b80      	cmp	r3, #128	@ 0x80
 8010e56:	d008      	beq.n	8010e6a <USBD_StdEPReq+0xfe>
 8010e58:	683b      	ldr	r3, [r7, #0]
 8010e5a:	88db      	ldrh	r3, [r3, #6]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d104      	bne.n	8010e6a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010e60:	7bbb      	ldrb	r3, [r7, #14]
 8010e62:	4619      	mov	r1, r3
 8010e64:	6878      	ldr	r0, [r7, #4]
 8010e66:	f001 f9bb 	bl	80121e0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8010e6a:	6878      	ldr	r0, [r7, #4]
 8010e6c:	f000 fd64 	bl	8011938 <USBD_CtlSendStatus>

              break;
 8010e70:	e004      	b.n	8010e7c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8010e72:	6839      	ldr	r1, [r7, #0]
 8010e74:	6878      	ldr	r0, [r7, #4]
 8010e76:	f000 fc88 	bl	801178a <USBD_CtlError>
              break;
 8010e7a:	bf00      	nop
          }
          break;
 8010e7c:	e107      	b.n	801108e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010e84:	b2db      	uxtb	r3, r3
 8010e86:	2b02      	cmp	r3, #2
 8010e88:	d002      	beq.n	8010e90 <USBD_StdEPReq+0x124>
 8010e8a:	2b03      	cmp	r3, #3
 8010e8c:	d016      	beq.n	8010ebc <USBD_StdEPReq+0x150>
 8010e8e:	e04b      	b.n	8010f28 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010e90:	7bbb      	ldrb	r3, [r7, #14]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d00d      	beq.n	8010eb2 <USBD_StdEPReq+0x146>
 8010e96:	7bbb      	ldrb	r3, [r7, #14]
 8010e98:	2b80      	cmp	r3, #128	@ 0x80
 8010e9a:	d00a      	beq.n	8010eb2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010e9c:	7bbb      	ldrb	r3, [r7, #14]
 8010e9e:	4619      	mov	r1, r3
 8010ea0:	6878      	ldr	r0, [r7, #4]
 8010ea2:	f001 f99d 	bl	80121e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010ea6:	2180      	movs	r1, #128	@ 0x80
 8010ea8:	6878      	ldr	r0, [r7, #4]
 8010eaa:	f001 f999 	bl	80121e0 <USBD_LL_StallEP>
 8010eae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010eb0:	e040      	b.n	8010f34 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8010eb2:	6839      	ldr	r1, [r7, #0]
 8010eb4:	6878      	ldr	r0, [r7, #4]
 8010eb6:	f000 fc68 	bl	801178a <USBD_CtlError>
              break;
 8010eba:	e03b      	b.n	8010f34 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010ebc:	683b      	ldr	r3, [r7, #0]
 8010ebe:	885b      	ldrh	r3, [r3, #2]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d136      	bne.n	8010f32 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010ec4:	7bbb      	ldrb	r3, [r7, #14]
 8010ec6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d004      	beq.n	8010ed8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010ece:	7bbb      	ldrb	r3, [r7, #14]
 8010ed0:	4619      	mov	r1, r3
 8010ed2:	6878      	ldr	r0, [r7, #4]
 8010ed4:	f001 f9a3 	bl	801221e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8010ed8:	6878      	ldr	r0, [r7, #4]
 8010eda:	f000 fd2d 	bl	8011938 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8010ede:	7bbb      	ldrb	r3, [r7, #14]
 8010ee0:	4619      	mov	r1, r3
 8010ee2:	6878      	ldr	r0, [r7, #4]
 8010ee4:	f7ff fde4 	bl	8010ab0 <USBD_CoreFindEP>
 8010ee8:	4603      	mov	r3, r0
 8010eea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010eec:	7b7b      	ldrb	r3, [r7, #13]
 8010eee:	2bff      	cmp	r3, #255	@ 0xff
 8010ef0:	d01f      	beq.n	8010f32 <USBD_StdEPReq+0x1c6>
 8010ef2:	7b7b      	ldrb	r3, [r7, #13]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d11c      	bne.n	8010f32 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8010ef8:	7b7a      	ldrb	r2, [r7, #13]
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8010f00:	7b7a      	ldrb	r2, [r7, #13]
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	32ae      	adds	r2, #174	@ 0xae
 8010f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f0a:	689b      	ldr	r3, [r3, #8]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d010      	beq.n	8010f32 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010f10:	7b7a      	ldrb	r2, [r7, #13]
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	32ae      	adds	r2, #174	@ 0xae
 8010f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f1a:	689b      	ldr	r3, [r3, #8]
 8010f1c:	6839      	ldr	r1, [r7, #0]
 8010f1e:	6878      	ldr	r0, [r7, #4]
 8010f20:	4798      	blx	r3
 8010f22:	4603      	mov	r3, r0
 8010f24:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8010f26:	e004      	b.n	8010f32 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8010f28:	6839      	ldr	r1, [r7, #0]
 8010f2a:	6878      	ldr	r0, [r7, #4]
 8010f2c:	f000 fc2d 	bl	801178a <USBD_CtlError>
              break;
 8010f30:	e000      	b.n	8010f34 <USBD_StdEPReq+0x1c8>
              break;
 8010f32:	bf00      	nop
          }
          break;
 8010f34:	e0ab      	b.n	801108e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010f3c:	b2db      	uxtb	r3, r3
 8010f3e:	2b02      	cmp	r3, #2
 8010f40:	d002      	beq.n	8010f48 <USBD_StdEPReq+0x1dc>
 8010f42:	2b03      	cmp	r3, #3
 8010f44:	d032      	beq.n	8010fac <USBD_StdEPReq+0x240>
 8010f46:	e097      	b.n	8011078 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010f48:	7bbb      	ldrb	r3, [r7, #14]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d007      	beq.n	8010f5e <USBD_StdEPReq+0x1f2>
 8010f4e:	7bbb      	ldrb	r3, [r7, #14]
 8010f50:	2b80      	cmp	r3, #128	@ 0x80
 8010f52:	d004      	beq.n	8010f5e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8010f54:	6839      	ldr	r1, [r7, #0]
 8010f56:	6878      	ldr	r0, [r7, #4]
 8010f58:	f000 fc17 	bl	801178a <USBD_CtlError>
                break;
 8010f5c:	e091      	b.n	8011082 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010f5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	da0b      	bge.n	8010f7e <USBD_StdEPReq+0x212>
 8010f66:	7bbb      	ldrb	r3, [r7, #14]
 8010f68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010f6c:	4613      	mov	r3, r2
 8010f6e:	009b      	lsls	r3, r3, #2
 8010f70:	4413      	add	r3, r2
 8010f72:	009b      	lsls	r3, r3, #2
 8010f74:	3310      	adds	r3, #16
 8010f76:	687a      	ldr	r2, [r7, #4]
 8010f78:	4413      	add	r3, r2
 8010f7a:	3304      	adds	r3, #4
 8010f7c:	e00b      	b.n	8010f96 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010f7e:	7bbb      	ldrb	r3, [r7, #14]
 8010f80:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010f84:	4613      	mov	r3, r2
 8010f86:	009b      	lsls	r3, r3, #2
 8010f88:	4413      	add	r3, r2
 8010f8a:	009b      	lsls	r3, r3, #2
 8010f8c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010f90:	687a      	ldr	r2, [r7, #4]
 8010f92:	4413      	add	r3, r2
 8010f94:	3304      	adds	r3, #4
 8010f96:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010f98:	68bb      	ldr	r3, [r7, #8]
 8010f9a:	2200      	movs	r2, #0
 8010f9c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010f9e:	68bb      	ldr	r3, [r7, #8]
 8010fa0:	2202      	movs	r2, #2
 8010fa2:	4619      	mov	r1, r3
 8010fa4:	6878      	ldr	r0, [r7, #4]
 8010fa6:	f000 fc6d 	bl	8011884 <USBD_CtlSendData>
              break;
 8010faa:	e06a      	b.n	8011082 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010fac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	da11      	bge.n	8010fd8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010fb4:	7bbb      	ldrb	r3, [r7, #14]
 8010fb6:	f003 020f 	and.w	r2, r3, #15
 8010fba:	6879      	ldr	r1, [r7, #4]
 8010fbc:	4613      	mov	r3, r2
 8010fbe:	009b      	lsls	r3, r3, #2
 8010fc0:	4413      	add	r3, r2
 8010fc2:	009b      	lsls	r3, r3, #2
 8010fc4:	440b      	add	r3, r1
 8010fc6:	3324      	adds	r3, #36	@ 0x24
 8010fc8:	881b      	ldrh	r3, [r3, #0]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d117      	bne.n	8010ffe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010fce:	6839      	ldr	r1, [r7, #0]
 8010fd0:	6878      	ldr	r0, [r7, #4]
 8010fd2:	f000 fbda 	bl	801178a <USBD_CtlError>
                  break;
 8010fd6:	e054      	b.n	8011082 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010fd8:	7bbb      	ldrb	r3, [r7, #14]
 8010fda:	f003 020f 	and.w	r2, r3, #15
 8010fde:	6879      	ldr	r1, [r7, #4]
 8010fe0:	4613      	mov	r3, r2
 8010fe2:	009b      	lsls	r3, r3, #2
 8010fe4:	4413      	add	r3, r2
 8010fe6:	009b      	lsls	r3, r3, #2
 8010fe8:	440b      	add	r3, r1
 8010fea:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010fee:	881b      	ldrh	r3, [r3, #0]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d104      	bne.n	8010ffe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010ff4:	6839      	ldr	r1, [r7, #0]
 8010ff6:	6878      	ldr	r0, [r7, #4]
 8010ff8:	f000 fbc7 	bl	801178a <USBD_CtlError>
                  break;
 8010ffc:	e041      	b.n	8011082 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010ffe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011002:	2b00      	cmp	r3, #0
 8011004:	da0b      	bge.n	801101e <USBD_StdEPReq+0x2b2>
 8011006:	7bbb      	ldrb	r3, [r7, #14]
 8011008:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801100c:	4613      	mov	r3, r2
 801100e:	009b      	lsls	r3, r3, #2
 8011010:	4413      	add	r3, r2
 8011012:	009b      	lsls	r3, r3, #2
 8011014:	3310      	adds	r3, #16
 8011016:	687a      	ldr	r2, [r7, #4]
 8011018:	4413      	add	r3, r2
 801101a:	3304      	adds	r3, #4
 801101c:	e00b      	b.n	8011036 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801101e:	7bbb      	ldrb	r3, [r7, #14]
 8011020:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011024:	4613      	mov	r3, r2
 8011026:	009b      	lsls	r3, r3, #2
 8011028:	4413      	add	r3, r2
 801102a:	009b      	lsls	r3, r3, #2
 801102c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8011030:	687a      	ldr	r2, [r7, #4]
 8011032:	4413      	add	r3, r2
 8011034:	3304      	adds	r3, #4
 8011036:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011038:	7bbb      	ldrb	r3, [r7, #14]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d002      	beq.n	8011044 <USBD_StdEPReq+0x2d8>
 801103e:	7bbb      	ldrb	r3, [r7, #14]
 8011040:	2b80      	cmp	r3, #128	@ 0x80
 8011042:	d103      	bne.n	801104c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8011044:	68bb      	ldr	r3, [r7, #8]
 8011046:	2200      	movs	r2, #0
 8011048:	601a      	str	r2, [r3, #0]
 801104a:	e00e      	b.n	801106a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801104c:	7bbb      	ldrb	r3, [r7, #14]
 801104e:	4619      	mov	r1, r3
 8011050:	6878      	ldr	r0, [r7, #4]
 8011052:	f001 f903 	bl	801225c <USBD_LL_IsStallEP>
 8011056:	4603      	mov	r3, r0
 8011058:	2b00      	cmp	r3, #0
 801105a:	d003      	beq.n	8011064 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 801105c:	68bb      	ldr	r3, [r7, #8]
 801105e:	2201      	movs	r2, #1
 8011060:	601a      	str	r2, [r3, #0]
 8011062:	e002      	b.n	801106a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8011064:	68bb      	ldr	r3, [r7, #8]
 8011066:	2200      	movs	r2, #0
 8011068:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801106a:	68bb      	ldr	r3, [r7, #8]
 801106c:	2202      	movs	r2, #2
 801106e:	4619      	mov	r1, r3
 8011070:	6878      	ldr	r0, [r7, #4]
 8011072:	f000 fc07 	bl	8011884 <USBD_CtlSendData>
              break;
 8011076:	e004      	b.n	8011082 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8011078:	6839      	ldr	r1, [r7, #0]
 801107a:	6878      	ldr	r0, [r7, #4]
 801107c:	f000 fb85 	bl	801178a <USBD_CtlError>
              break;
 8011080:	bf00      	nop
          }
          break;
 8011082:	e004      	b.n	801108e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8011084:	6839      	ldr	r1, [r7, #0]
 8011086:	6878      	ldr	r0, [r7, #4]
 8011088:	f000 fb7f 	bl	801178a <USBD_CtlError>
          break;
 801108c:	bf00      	nop
      }
      break;
 801108e:	e005      	b.n	801109c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8011090:	6839      	ldr	r1, [r7, #0]
 8011092:	6878      	ldr	r0, [r7, #4]
 8011094:	f000 fb79 	bl	801178a <USBD_CtlError>
      break;
 8011098:	e000      	b.n	801109c <USBD_StdEPReq+0x330>
      break;
 801109a:	bf00      	nop
  }

  return ret;
 801109c:	7bfb      	ldrb	r3, [r7, #15]
}
 801109e:	4618      	mov	r0, r3
 80110a0:	3710      	adds	r7, #16
 80110a2:	46bd      	mov	sp, r7
 80110a4:	bd80      	pop	{r7, pc}
	...

080110a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b084      	sub	sp, #16
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
 80110b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80110b2:	2300      	movs	r3, #0
 80110b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80110b6:	2300      	movs	r3, #0
 80110b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80110ba:	2300      	movs	r3, #0
 80110bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80110be:	683b      	ldr	r3, [r7, #0]
 80110c0:	885b      	ldrh	r3, [r3, #2]
 80110c2:	0a1b      	lsrs	r3, r3, #8
 80110c4:	b29b      	uxth	r3, r3
 80110c6:	3b01      	subs	r3, #1
 80110c8:	2b0e      	cmp	r3, #14
 80110ca:	f200 8152 	bhi.w	8011372 <USBD_GetDescriptor+0x2ca>
 80110ce:	a201      	add	r2, pc, #4	@ (adr r2, 80110d4 <USBD_GetDescriptor+0x2c>)
 80110d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110d4:	08011145 	.word	0x08011145
 80110d8:	0801115d 	.word	0x0801115d
 80110dc:	0801119d 	.word	0x0801119d
 80110e0:	08011373 	.word	0x08011373
 80110e4:	08011373 	.word	0x08011373
 80110e8:	08011313 	.word	0x08011313
 80110ec:	0801133f 	.word	0x0801133f
 80110f0:	08011373 	.word	0x08011373
 80110f4:	08011373 	.word	0x08011373
 80110f8:	08011373 	.word	0x08011373
 80110fc:	08011373 	.word	0x08011373
 8011100:	08011373 	.word	0x08011373
 8011104:	08011373 	.word	0x08011373
 8011108:	08011373 	.word	0x08011373
 801110c:	08011111 	.word	0x08011111
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011116:	69db      	ldr	r3, [r3, #28]
 8011118:	2b00      	cmp	r3, #0
 801111a:	d00b      	beq.n	8011134 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011122:	69db      	ldr	r3, [r3, #28]
 8011124:	687a      	ldr	r2, [r7, #4]
 8011126:	7c12      	ldrb	r2, [r2, #16]
 8011128:	f107 0108 	add.w	r1, r7, #8
 801112c:	4610      	mov	r0, r2
 801112e:	4798      	blx	r3
 8011130:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011132:	e126      	b.n	8011382 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011134:	6839      	ldr	r1, [r7, #0]
 8011136:	6878      	ldr	r0, [r7, #4]
 8011138:	f000 fb27 	bl	801178a <USBD_CtlError>
        err++;
 801113c:	7afb      	ldrb	r3, [r7, #11]
 801113e:	3301      	adds	r3, #1
 8011140:	72fb      	strb	r3, [r7, #11]
      break;
 8011142:	e11e      	b.n	8011382 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	687a      	ldr	r2, [r7, #4]
 801114e:	7c12      	ldrb	r2, [r2, #16]
 8011150:	f107 0108 	add.w	r1, r7, #8
 8011154:	4610      	mov	r0, r2
 8011156:	4798      	blx	r3
 8011158:	60f8      	str	r0, [r7, #12]
      break;
 801115a:	e112      	b.n	8011382 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	7c1b      	ldrb	r3, [r3, #16]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d10d      	bne.n	8011180 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801116a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801116c:	f107 0208 	add.w	r2, r7, #8
 8011170:	4610      	mov	r0, r2
 8011172:	4798      	blx	r3
 8011174:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	3301      	adds	r3, #1
 801117a:	2202      	movs	r2, #2
 801117c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801117e:	e100      	b.n	8011382 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011188:	f107 0208 	add.w	r2, r7, #8
 801118c:	4610      	mov	r0, r2
 801118e:	4798      	blx	r3
 8011190:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	3301      	adds	r3, #1
 8011196:	2202      	movs	r2, #2
 8011198:	701a      	strb	r2, [r3, #0]
      break;
 801119a:	e0f2      	b.n	8011382 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801119c:	683b      	ldr	r3, [r7, #0]
 801119e:	885b      	ldrh	r3, [r3, #2]
 80111a0:	b2db      	uxtb	r3, r3
 80111a2:	2b05      	cmp	r3, #5
 80111a4:	f200 80ac 	bhi.w	8011300 <USBD_GetDescriptor+0x258>
 80111a8:	a201      	add	r2, pc, #4	@ (adr r2, 80111b0 <USBD_GetDescriptor+0x108>)
 80111aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111ae:	bf00      	nop
 80111b0:	080111c9 	.word	0x080111c9
 80111b4:	080111fd 	.word	0x080111fd
 80111b8:	08011231 	.word	0x08011231
 80111bc:	08011265 	.word	0x08011265
 80111c0:	08011299 	.word	0x08011299
 80111c4:	080112cd 	.word	0x080112cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80111ce:	685b      	ldr	r3, [r3, #4]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d00b      	beq.n	80111ec <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80111da:	685b      	ldr	r3, [r3, #4]
 80111dc:	687a      	ldr	r2, [r7, #4]
 80111de:	7c12      	ldrb	r2, [r2, #16]
 80111e0:	f107 0108 	add.w	r1, r7, #8
 80111e4:	4610      	mov	r0, r2
 80111e6:	4798      	blx	r3
 80111e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80111ea:	e091      	b.n	8011310 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80111ec:	6839      	ldr	r1, [r7, #0]
 80111ee:	6878      	ldr	r0, [r7, #4]
 80111f0:	f000 facb 	bl	801178a <USBD_CtlError>
            err++;
 80111f4:	7afb      	ldrb	r3, [r7, #11]
 80111f6:	3301      	adds	r3, #1
 80111f8:	72fb      	strb	r3, [r7, #11]
          break;
 80111fa:	e089      	b.n	8011310 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011202:	689b      	ldr	r3, [r3, #8]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d00b      	beq.n	8011220 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801120e:	689b      	ldr	r3, [r3, #8]
 8011210:	687a      	ldr	r2, [r7, #4]
 8011212:	7c12      	ldrb	r2, [r2, #16]
 8011214:	f107 0108 	add.w	r1, r7, #8
 8011218:	4610      	mov	r0, r2
 801121a:	4798      	blx	r3
 801121c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801121e:	e077      	b.n	8011310 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011220:	6839      	ldr	r1, [r7, #0]
 8011222:	6878      	ldr	r0, [r7, #4]
 8011224:	f000 fab1 	bl	801178a <USBD_CtlError>
            err++;
 8011228:	7afb      	ldrb	r3, [r7, #11]
 801122a:	3301      	adds	r3, #1
 801122c:	72fb      	strb	r3, [r7, #11]
          break;
 801122e:	e06f      	b.n	8011310 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011236:	68db      	ldr	r3, [r3, #12]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d00b      	beq.n	8011254 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011242:	68db      	ldr	r3, [r3, #12]
 8011244:	687a      	ldr	r2, [r7, #4]
 8011246:	7c12      	ldrb	r2, [r2, #16]
 8011248:	f107 0108 	add.w	r1, r7, #8
 801124c:	4610      	mov	r0, r2
 801124e:	4798      	blx	r3
 8011250:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011252:	e05d      	b.n	8011310 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011254:	6839      	ldr	r1, [r7, #0]
 8011256:	6878      	ldr	r0, [r7, #4]
 8011258:	f000 fa97 	bl	801178a <USBD_CtlError>
            err++;
 801125c:	7afb      	ldrb	r3, [r7, #11]
 801125e:	3301      	adds	r3, #1
 8011260:	72fb      	strb	r3, [r7, #11]
          break;
 8011262:	e055      	b.n	8011310 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801126a:	691b      	ldr	r3, [r3, #16]
 801126c:	2b00      	cmp	r3, #0
 801126e:	d00b      	beq.n	8011288 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011276:	691b      	ldr	r3, [r3, #16]
 8011278:	687a      	ldr	r2, [r7, #4]
 801127a:	7c12      	ldrb	r2, [r2, #16]
 801127c:	f107 0108 	add.w	r1, r7, #8
 8011280:	4610      	mov	r0, r2
 8011282:	4798      	blx	r3
 8011284:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011286:	e043      	b.n	8011310 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011288:	6839      	ldr	r1, [r7, #0]
 801128a:	6878      	ldr	r0, [r7, #4]
 801128c:	f000 fa7d 	bl	801178a <USBD_CtlError>
            err++;
 8011290:	7afb      	ldrb	r3, [r7, #11]
 8011292:	3301      	adds	r3, #1
 8011294:	72fb      	strb	r3, [r7, #11]
          break;
 8011296:	e03b      	b.n	8011310 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801129e:	695b      	ldr	r3, [r3, #20]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d00b      	beq.n	80112bc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80112aa:	695b      	ldr	r3, [r3, #20]
 80112ac:	687a      	ldr	r2, [r7, #4]
 80112ae:	7c12      	ldrb	r2, [r2, #16]
 80112b0:	f107 0108 	add.w	r1, r7, #8
 80112b4:	4610      	mov	r0, r2
 80112b6:	4798      	blx	r3
 80112b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80112ba:	e029      	b.n	8011310 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80112bc:	6839      	ldr	r1, [r7, #0]
 80112be:	6878      	ldr	r0, [r7, #4]
 80112c0:	f000 fa63 	bl	801178a <USBD_CtlError>
            err++;
 80112c4:	7afb      	ldrb	r3, [r7, #11]
 80112c6:	3301      	adds	r3, #1
 80112c8:	72fb      	strb	r3, [r7, #11]
          break;
 80112ca:	e021      	b.n	8011310 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80112d2:	699b      	ldr	r3, [r3, #24]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d00b      	beq.n	80112f0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80112de:	699b      	ldr	r3, [r3, #24]
 80112e0:	687a      	ldr	r2, [r7, #4]
 80112e2:	7c12      	ldrb	r2, [r2, #16]
 80112e4:	f107 0108 	add.w	r1, r7, #8
 80112e8:	4610      	mov	r0, r2
 80112ea:	4798      	blx	r3
 80112ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80112ee:	e00f      	b.n	8011310 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80112f0:	6839      	ldr	r1, [r7, #0]
 80112f2:	6878      	ldr	r0, [r7, #4]
 80112f4:	f000 fa49 	bl	801178a <USBD_CtlError>
            err++;
 80112f8:	7afb      	ldrb	r3, [r7, #11]
 80112fa:	3301      	adds	r3, #1
 80112fc:	72fb      	strb	r3, [r7, #11]
          break;
 80112fe:	e007      	b.n	8011310 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8011300:	6839      	ldr	r1, [r7, #0]
 8011302:	6878      	ldr	r0, [r7, #4]
 8011304:	f000 fa41 	bl	801178a <USBD_CtlError>
          err++;
 8011308:	7afb      	ldrb	r3, [r7, #11]
 801130a:	3301      	adds	r3, #1
 801130c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801130e:	bf00      	nop
      }
      break;
 8011310:	e037      	b.n	8011382 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	7c1b      	ldrb	r3, [r3, #16]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d109      	bne.n	801132e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011322:	f107 0208 	add.w	r2, r7, #8
 8011326:	4610      	mov	r0, r2
 8011328:	4798      	blx	r3
 801132a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801132c:	e029      	b.n	8011382 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801132e:	6839      	ldr	r1, [r7, #0]
 8011330:	6878      	ldr	r0, [r7, #4]
 8011332:	f000 fa2a 	bl	801178a <USBD_CtlError>
        err++;
 8011336:	7afb      	ldrb	r3, [r7, #11]
 8011338:	3301      	adds	r3, #1
 801133a:	72fb      	strb	r3, [r7, #11]
      break;
 801133c:	e021      	b.n	8011382 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	7c1b      	ldrb	r3, [r3, #16]
 8011342:	2b00      	cmp	r3, #0
 8011344:	d10d      	bne.n	8011362 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801134c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801134e:	f107 0208 	add.w	r2, r7, #8
 8011352:	4610      	mov	r0, r2
 8011354:	4798      	blx	r3
 8011356:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	3301      	adds	r3, #1
 801135c:	2207      	movs	r2, #7
 801135e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011360:	e00f      	b.n	8011382 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011362:	6839      	ldr	r1, [r7, #0]
 8011364:	6878      	ldr	r0, [r7, #4]
 8011366:	f000 fa10 	bl	801178a <USBD_CtlError>
        err++;
 801136a:	7afb      	ldrb	r3, [r7, #11]
 801136c:	3301      	adds	r3, #1
 801136e:	72fb      	strb	r3, [r7, #11]
      break;
 8011370:	e007      	b.n	8011382 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8011372:	6839      	ldr	r1, [r7, #0]
 8011374:	6878      	ldr	r0, [r7, #4]
 8011376:	f000 fa08 	bl	801178a <USBD_CtlError>
      err++;
 801137a:	7afb      	ldrb	r3, [r7, #11]
 801137c:	3301      	adds	r3, #1
 801137e:	72fb      	strb	r3, [r7, #11]
      break;
 8011380:	bf00      	nop
  }

  if (err != 0U)
 8011382:	7afb      	ldrb	r3, [r7, #11]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d11e      	bne.n	80113c6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8011388:	683b      	ldr	r3, [r7, #0]
 801138a:	88db      	ldrh	r3, [r3, #6]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d016      	beq.n	80113be <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8011390:	893b      	ldrh	r3, [r7, #8]
 8011392:	2b00      	cmp	r3, #0
 8011394:	d00e      	beq.n	80113b4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8011396:	683b      	ldr	r3, [r7, #0]
 8011398:	88da      	ldrh	r2, [r3, #6]
 801139a:	893b      	ldrh	r3, [r7, #8]
 801139c:	4293      	cmp	r3, r2
 801139e:	bf28      	it	cs
 80113a0:	4613      	movcs	r3, r2
 80113a2:	b29b      	uxth	r3, r3
 80113a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80113a6:	893b      	ldrh	r3, [r7, #8]
 80113a8:	461a      	mov	r2, r3
 80113aa:	68f9      	ldr	r1, [r7, #12]
 80113ac:	6878      	ldr	r0, [r7, #4]
 80113ae:	f000 fa69 	bl	8011884 <USBD_CtlSendData>
 80113b2:	e009      	b.n	80113c8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80113b4:	6839      	ldr	r1, [r7, #0]
 80113b6:	6878      	ldr	r0, [r7, #4]
 80113b8:	f000 f9e7 	bl	801178a <USBD_CtlError>
 80113bc:	e004      	b.n	80113c8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80113be:	6878      	ldr	r0, [r7, #4]
 80113c0:	f000 faba 	bl	8011938 <USBD_CtlSendStatus>
 80113c4:	e000      	b.n	80113c8 <USBD_GetDescriptor+0x320>
    return;
 80113c6:	bf00      	nop
  }
}
 80113c8:	3710      	adds	r7, #16
 80113ca:	46bd      	mov	sp, r7
 80113cc:	bd80      	pop	{r7, pc}
 80113ce:	bf00      	nop

080113d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b084      	sub	sp, #16
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]
 80113d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80113da:	683b      	ldr	r3, [r7, #0]
 80113dc:	889b      	ldrh	r3, [r3, #4]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d131      	bne.n	8011446 <USBD_SetAddress+0x76>
 80113e2:	683b      	ldr	r3, [r7, #0]
 80113e4:	88db      	ldrh	r3, [r3, #6]
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d12d      	bne.n	8011446 <USBD_SetAddress+0x76>
 80113ea:	683b      	ldr	r3, [r7, #0]
 80113ec:	885b      	ldrh	r3, [r3, #2]
 80113ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80113f0:	d829      	bhi.n	8011446 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80113f2:	683b      	ldr	r3, [r7, #0]
 80113f4:	885b      	ldrh	r3, [r3, #2]
 80113f6:	b2db      	uxtb	r3, r3
 80113f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80113fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011404:	b2db      	uxtb	r3, r3
 8011406:	2b03      	cmp	r3, #3
 8011408:	d104      	bne.n	8011414 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801140a:	6839      	ldr	r1, [r7, #0]
 801140c:	6878      	ldr	r0, [r7, #4]
 801140e:	f000 f9bc 	bl	801178a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011412:	e01d      	b.n	8011450 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	7bfa      	ldrb	r2, [r7, #15]
 8011418:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801141c:	7bfb      	ldrb	r3, [r7, #15]
 801141e:	4619      	mov	r1, r3
 8011420:	6878      	ldr	r0, [r7, #4]
 8011422:	f000 ff47 	bl	80122b4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011426:	6878      	ldr	r0, [r7, #4]
 8011428:	f000 fa86 	bl	8011938 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801142c:	7bfb      	ldrb	r3, [r7, #15]
 801142e:	2b00      	cmp	r3, #0
 8011430:	d004      	beq.n	801143c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	2202      	movs	r2, #2
 8011436:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801143a:	e009      	b.n	8011450 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	2201      	movs	r2, #1
 8011440:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011444:	e004      	b.n	8011450 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011446:	6839      	ldr	r1, [r7, #0]
 8011448:	6878      	ldr	r0, [r7, #4]
 801144a:	f000 f99e 	bl	801178a <USBD_CtlError>
  }
}
 801144e:	bf00      	nop
 8011450:	bf00      	nop
 8011452:	3710      	adds	r7, #16
 8011454:	46bd      	mov	sp, r7
 8011456:	bd80      	pop	{r7, pc}

08011458 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011458:	b580      	push	{r7, lr}
 801145a:	b084      	sub	sp, #16
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
 8011460:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011462:	2300      	movs	r3, #0
 8011464:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011466:	683b      	ldr	r3, [r7, #0]
 8011468:	885b      	ldrh	r3, [r3, #2]
 801146a:	b2da      	uxtb	r2, r3
 801146c:	4b4e      	ldr	r3, [pc, #312]	@ (80115a8 <USBD_SetConfig+0x150>)
 801146e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011470:	4b4d      	ldr	r3, [pc, #308]	@ (80115a8 <USBD_SetConfig+0x150>)
 8011472:	781b      	ldrb	r3, [r3, #0]
 8011474:	2b01      	cmp	r3, #1
 8011476:	d905      	bls.n	8011484 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011478:	6839      	ldr	r1, [r7, #0]
 801147a:	6878      	ldr	r0, [r7, #4]
 801147c:	f000 f985 	bl	801178a <USBD_CtlError>
    return USBD_FAIL;
 8011480:	2303      	movs	r3, #3
 8011482:	e08c      	b.n	801159e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801148a:	b2db      	uxtb	r3, r3
 801148c:	2b02      	cmp	r3, #2
 801148e:	d002      	beq.n	8011496 <USBD_SetConfig+0x3e>
 8011490:	2b03      	cmp	r3, #3
 8011492:	d029      	beq.n	80114e8 <USBD_SetConfig+0x90>
 8011494:	e075      	b.n	8011582 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8011496:	4b44      	ldr	r3, [pc, #272]	@ (80115a8 <USBD_SetConfig+0x150>)
 8011498:	781b      	ldrb	r3, [r3, #0]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d020      	beq.n	80114e0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801149e:	4b42      	ldr	r3, [pc, #264]	@ (80115a8 <USBD_SetConfig+0x150>)
 80114a0:	781b      	ldrb	r3, [r3, #0]
 80114a2:	461a      	mov	r2, r3
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80114a8:	4b3f      	ldr	r3, [pc, #252]	@ (80115a8 <USBD_SetConfig+0x150>)
 80114aa:	781b      	ldrb	r3, [r3, #0]
 80114ac:	4619      	mov	r1, r3
 80114ae:	6878      	ldr	r0, [r7, #4]
 80114b0:	f7fe ffb9 	bl	8010426 <USBD_SetClassConfig>
 80114b4:	4603      	mov	r3, r0
 80114b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80114b8:	7bfb      	ldrb	r3, [r7, #15]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d008      	beq.n	80114d0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80114be:	6839      	ldr	r1, [r7, #0]
 80114c0:	6878      	ldr	r0, [r7, #4]
 80114c2:	f000 f962 	bl	801178a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	2202      	movs	r2, #2
 80114ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80114ce:	e065      	b.n	801159c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80114d0:	6878      	ldr	r0, [r7, #4]
 80114d2:	f000 fa31 	bl	8011938 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	2203      	movs	r2, #3
 80114da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80114de:	e05d      	b.n	801159c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80114e0:	6878      	ldr	r0, [r7, #4]
 80114e2:	f000 fa29 	bl	8011938 <USBD_CtlSendStatus>
      break;
 80114e6:	e059      	b.n	801159c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80114e8:	4b2f      	ldr	r3, [pc, #188]	@ (80115a8 <USBD_SetConfig+0x150>)
 80114ea:	781b      	ldrb	r3, [r3, #0]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d112      	bne.n	8011516 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	2202      	movs	r2, #2
 80114f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80114f8:	4b2b      	ldr	r3, [pc, #172]	@ (80115a8 <USBD_SetConfig+0x150>)
 80114fa:	781b      	ldrb	r3, [r3, #0]
 80114fc:	461a      	mov	r2, r3
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011502:	4b29      	ldr	r3, [pc, #164]	@ (80115a8 <USBD_SetConfig+0x150>)
 8011504:	781b      	ldrb	r3, [r3, #0]
 8011506:	4619      	mov	r1, r3
 8011508:	6878      	ldr	r0, [r7, #4]
 801150a:	f7fe ffa8 	bl	801045e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801150e:	6878      	ldr	r0, [r7, #4]
 8011510:	f000 fa12 	bl	8011938 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011514:	e042      	b.n	801159c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8011516:	4b24      	ldr	r3, [pc, #144]	@ (80115a8 <USBD_SetConfig+0x150>)
 8011518:	781b      	ldrb	r3, [r3, #0]
 801151a:	461a      	mov	r2, r3
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	685b      	ldr	r3, [r3, #4]
 8011520:	429a      	cmp	r2, r3
 8011522:	d02a      	beq.n	801157a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	685b      	ldr	r3, [r3, #4]
 8011528:	b2db      	uxtb	r3, r3
 801152a:	4619      	mov	r1, r3
 801152c:	6878      	ldr	r0, [r7, #4]
 801152e:	f7fe ff96 	bl	801045e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011532:	4b1d      	ldr	r3, [pc, #116]	@ (80115a8 <USBD_SetConfig+0x150>)
 8011534:	781b      	ldrb	r3, [r3, #0]
 8011536:	461a      	mov	r2, r3
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801153c:	4b1a      	ldr	r3, [pc, #104]	@ (80115a8 <USBD_SetConfig+0x150>)
 801153e:	781b      	ldrb	r3, [r3, #0]
 8011540:	4619      	mov	r1, r3
 8011542:	6878      	ldr	r0, [r7, #4]
 8011544:	f7fe ff6f 	bl	8010426 <USBD_SetClassConfig>
 8011548:	4603      	mov	r3, r0
 801154a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801154c:	7bfb      	ldrb	r3, [r7, #15]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d00f      	beq.n	8011572 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8011552:	6839      	ldr	r1, [r7, #0]
 8011554:	6878      	ldr	r0, [r7, #4]
 8011556:	f000 f918 	bl	801178a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	685b      	ldr	r3, [r3, #4]
 801155e:	b2db      	uxtb	r3, r3
 8011560:	4619      	mov	r1, r3
 8011562:	6878      	ldr	r0, [r7, #4]
 8011564:	f7fe ff7b 	bl	801045e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	2202      	movs	r2, #2
 801156c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011570:	e014      	b.n	801159c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011572:	6878      	ldr	r0, [r7, #4]
 8011574:	f000 f9e0 	bl	8011938 <USBD_CtlSendStatus>
      break;
 8011578:	e010      	b.n	801159c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801157a:	6878      	ldr	r0, [r7, #4]
 801157c:	f000 f9dc 	bl	8011938 <USBD_CtlSendStatus>
      break;
 8011580:	e00c      	b.n	801159c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8011582:	6839      	ldr	r1, [r7, #0]
 8011584:	6878      	ldr	r0, [r7, #4]
 8011586:	f000 f900 	bl	801178a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801158a:	4b07      	ldr	r3, [pc, #28]	@ (80115a8 <USBD_SetConfig+0x150>)
 801158c:	781b      	ldrb	r3, [r3, #0]
 801158e:	4619      	mov	r1, r3
 8011590:	6878      	ldr	r0, [r7, #4]
 8011592:	f7fe ff64 	bl	801045e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8011596:	2303      	movs	r3, #3
 8011598:	73fb      	strb	r3, [r7, #15]
      break;
 801159a:	bf00      	nop
  }

  return ret;
 801159c:	7bfb      	ldrb	r3, [r7, #15]
}
 801159e:	4618      	mov	r0, r3
 80115a0:	3710      	adds	r7, #16
 80115a2:	46bd      	mov	sp, r7
 80115a4:	bd80      	pop	{r7, pc}
 80115a6:	bf00      	nop
 80115a8:	24000a48 	.word	0x24000a48

080115ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80115ac:	b580      	push	{r7, lr}
 80115ae:	b082      	sub	sp, #8
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	6078      	str	r0, [r7, #4]
 80115b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80115b6:	683b      	ldr	r3, [r7, #0]
 80115b8:	88db      	ldrh	r3, [r3, #6]
 80115ba:	2b01      	cmp	r3, #1
 80115bc:	d004      	beq.n	80115c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80115be:	6839      	ldr	r1, [r7, #0]
 80115c0:	6878      	ldr	r0, [r7, #4]
 80115c2:	f000 f8e2 	bl	801178a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80115c6:	e023      	b.n	8011610 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80115ce:	b2db      	uxtb	r3, r3
 80115d0:	2b02      	cmp	r3, #2
 80115d2:	dc02      	bgt.n	80115da <USBD_GetConfig+0x2e>
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	dc03      	bgt.n	80115e0 <USBD_GetConfig+0x34>
 80115d8:	e015      	b.n	8011606 <USBD_GetConfig+0x5a>
 80115da:	2b03      	cmp	r3, #3
 80115dc:	d00b      	beq.n	80115f6 <USBD_GetConfig+0x4a>
 80115de:	e012      	b.n	8011606 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	2200      	movs	r2, #0
 80115e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	3308      	adds	r3, #8
 80115ea:	2201      	movs	r2, #1
 80115ec:	4619      	mov	r1, r3
 80115ee:	6878      	ldr	r0, [r7, #4]
 80115f0:	f000 f948 	bl	8011884 <USBD_CtlSendData>
        break;
 80115f4:	e00c      	b.n	8011610 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	3304      	adds	r3, #4
 80115fa:	2201      	movs	r2, #1
 80115fc:	4619      	mov	r1, r3
 80115fe:	6878      	ldr	r0, [r7, #4]
 8011600:	f000 f940 	bl	8011884 <USBD_CtlSendData>
        break;
 8011604:	e004      	b.n	8011610 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8011606:	6839      	ldr	r1, [r7, #0]
 8011608:	6878      	ldr	r0, [r7, #4]
 801160a:	f000 f8be 	bl	801178a <USBD_CtlError>
        break;
 801160e:	bf00      	nop
}
 8011610:	bf00      	nop
 8011612:	3708      	adds	r7, #8
 8011614:	46bd      	mov	sp, r7
 8011616:	bd80      	pop	{r7, pc}

08011618 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011618:	b580      	push	{r7, lr}
 801161a:	b082      	sub	sp, #8
 801161c:	af00      	add	r7, sp, #0
 801161e:	6078      	str	r0, [r7, #4]
 8011620:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011628:	b2db      	uxtb	r3, r3
 801162a:	3b01      	subs	r3, #1
 801162c:	2b02      	cmp	r3, #2
 801162e:	d81e      	bhi.n	801166e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011630:	683b      	ldr	r3, [r7, #0]
 8011632:	88db      	ldrh	r3, [r3, #6]
 8011634:	2b02      	cmp	r3, #2
 8011636:	d004      	beq.n	8011642 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011638:	6839      	ldr	r1, [r7, #0]
 801163a:	6878      	ldr	r0, [r7, #4]
 801163c:	f000 f8a5 	bl	801178a <USBD_CtlError>
        break;
 8011640:	e01a      	b.n	8011678 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	2201      	movs	r2, #1
 8011646:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801164e:	2b00      	cmp	r3, #0
 8011650:	d005      	beq.n	801165e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	68db      	ldr	r3, [r3, #12]
 8011656:	f043 0202 	orr.w	r2, r3, #2
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	330c      	adds	r3, #12
 8011662:	2202      	movs	r2, #2
 8011664:	4619      	mov	r1, r3
 8011666:	6878      	ldr	r0, [r7, #4]
 8011668:	f000 f90c 	bl	8011884 <USBD_CtlSendData>
      break;
 801166c:	e004      	b.n	8011678 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801166e:	6839      	ldr	r1, [r7, #0]
 8011670:	6878      	ldr	r0, [r7, #4]
 8011672:	f000 f88a 	bl	801178a <USBD_CtlError>
      break;
 8011676:	bf00      	nop
  }
}
 8011678:	bf00      	nop
 801167a:	3708      	adds	r7, #8
 801167c:	46bd      	mov	sp, r7
 801167e:	bd80      	pop	{r7, pc}

08011680 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011680:	b580      	push	{r7, lr}
 8011682:	b082      	sub	sp, #8
 8011684:	af00      	add	r7, sp, #0
 8011686:	6078      	str	r0, [r7, #4]
 8011688:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801168a:	683b      	ldr	r3, [r7, #0]
 801168c:	885b      	ldrh	r3, [r3, #2]
 801168e:	2b01      	cmp	r3, #1
 8011690:	d107      	bne.n	80116a2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	2201      	movs	r2, #1
 8011696:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801169a:	6878      	ldr	r0, [r7, #4]
 801169c:	f000 f94c 	bl	8011938 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80116a0:	e013      	b.n	80116ca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80116a2:	683b      	ldr	r3, [r7, #0]
 80116a4:	885b      	ldrh	r3, [r3, #2]
 80116a6:	2b02      	cmp	r3, #2
 80116a8:	d10b      	bne.n	80116c2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80116aa:	683b      	ldr	r3, [r7, #0]
 80116ac:	889b      	ldrh	r3, [r3, #4]
 80116ae:	0a1b      	lsrs	r3, r3, #8
 80116b0:	b29b      	uxth	r3, r3
 80116b2:	b2da      	uxtb	r2, r3
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80116ba:	6878      	ldr	r0, [r7, #4]
 80116bc:	f000 f93c 	bl	8011938 <USBD_CtlSendStatus>
}
 80116c0:	e003      	b.n	80116ca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80116c2:	6839      	ldr	r1, [r7, #0]
 80116c4:	6878      	ldr	r0, [r7, #4]
 80116c6:	f000 f860 	bl	801178a <USBD_CtlError>
}
 80116ca:	bf00      	nop
 80116cc:	3708      	adds	r7, #8
 80116ce:	46bd      	mov	sp, r7
 80116d0:	bd80      	pop	{r7, pc}

080116d2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80116d2:	b580      	push	{r7, lr}
 80116d4:	b082      	sub	sp, #8
 80116d6:	af00      	add	r7, sp, #0
 80116d8:	6078      	str	r0, [r7, #4]
 80116da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80116e2:	b2db      	uxtb	r3, r3
 80116e4:	3b01      	subs	r3, #1
 80116e6:	2b02      	cmp	r3, #2
 80116e8:	d80b      	bhi.n	8011702 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80116ea:	683b      	ldr	r3, [r7, #0]
 80116ec:	885b      	ldrh	r3, [r3, #2]
 80116ee:	2b01      	cmp	r3, #1
 80116f0:	d10c      	bne.n	801170c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	2200      	movs	r2, #0
 80116f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80116fa:	6878      	ldr	r0, [r7, #4]
 80116fc:	f000 f91c 	bl	8011938 <USBD_CtlSendStatus>
      }
      break;
 8011700:	e004      	b.n	801170c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8011702:	6839      	ldr	r1, [r7, #0]
 8011704:	6878      	ldr	r0, [r7, #4]
 8011706:	f000 f840 	bl	801178a <USBD_CtlError>
      break;
 801170a:	e000      	b.n	801170e <USBD_ClrFeature+0x3c>
      break;
 801170c:	bf00      	nop
  }
}
 801170e:	bf00      	nop
 8011710:	3708      	adds	r7, #8
 8011712:	46bd      	mov	sp, r7
 8011714:	bd80      	pop	{r7, pc}

08011716 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011716:	b580      	push	{r7, lr}
 8011718:	b084      	sub	sp, #16
 801171a:	af00      	add	r7, sp, #0
 801171c:	6078      	str	r0, [r7, #4]
 801171e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011720:	683b      	ldr	r3, [r7, #0]
 8011722:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	781a      	ldrb	r2, [r3, #0]
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	3301      	adds	r3, #1
 8011730:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	781a      	ldrb	r2, [r3, #0]
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	3301      	adds	r3, #1
 801173e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011740:	68f8      	ldr	r0, [r7, #12]
 8011742:	f7ff fa16 	bl	8010b72 <SWAPBYTE>
 8011746:	4603      	mov	r3, r0
 8011748:	461a      	mov	r2, r3
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	3301      	adds	r3, #1
 8011752:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	3301      	adds	r3, #1
 8011758:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801175a:	68f8      	ldr	r0, [r7, #12]
 801175c:	f7ff fa09 	bl	8010b72 <SWAPBYTE>
 8011760:	4603      	mov	r3, r0
 8011762:	461a      	mov	r2, r3
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	3301      	adds	r3, #1
 801176c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	3301      	adds	r3, #1
 8011772:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011774:	68f8      	ldr	r0, [r7, #12]
 8011776:	f7ff f9fc 	bl	8010b72 <SWAPBYTE>
 801177a:	4603      	mov	r3, r0
 801177c:	461a      	mov	r2, r3
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	80da      	strh	r2, [r3, #6]
}
 8011782:	bf00      	nop
 8011784:	3710      	adds	r7, #16
 8011786:	46bd      	mov	sp, r7
 8011788:	bd80      	pop	{r7, pc}

0801178a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801178a:	b580      	push	{r7, lr}
 801178c:	b082      	sub	sp, #8
 801178e:	af00      	add	r7, sp, #0
 8011790:	6078      	str	r0, [r7, #4]
 8011792:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011794:	2180      	movs	r1, #128	@ 0x80
 8011796:	6878      	ldr	r0, [r7, #4]
 8011798:	f000 fd22 	bl	80121e0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801179c:	2100      	movs	r1, #0
 801179e:	6878      	ldr	r0, [r7, #4]
 80117a0:	f000 fd1e 	bl	80121e0 <USBD_LL_StallEP>
}
 80117a4:	bf00      	nop
 80117a6:	3708      	adds	r7, #8
 80117a8:	46bd      	mov	sp, r7
 80117aa:	bd80      	pop	{r7, pc}

080117ac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80117ac:	b580      	push	{r7, lr}
 80117ae:	b086      	sub	sp, #24
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	60f8      	str	r0, [r7, #12]
 80117b4:	60b9      	str	r1, [r7, #8]
 80117b6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80117b8:	2300      	movs	r3, #0
 80117ba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d042      	beq.n	8011848 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80117c6:	6938      	ldr	r0, [r7, #16]
 80117c8:	f000 f842 	bl	8011850 <USBD_GetLen>
 80117cc:	4603      	mov	r3, r0
 80117ce:	3301      	adds	r3, #1
 80117d0:	005b      	lsls	r3, r3, #1
 80117d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80117d6:	d808      	bhi.n	80117ea <USBD_GetString+0x3e>
 80117d8:	6938      	ldr	r0, [r7, #16]
 80117da:	f000 f839 	bl	8011850 <USBD_GetLen>
 80117de:	4603      	mov	r3, r0
 80117e0:	3301      	adds	r3, #1
 80117e2:	b29b      	uxth	r3, r3
 80117e4:	005b      	lsls	r3, r3, #1
 80117e6:	b29a      	uxth	r2, r3
 80117e8:	e001      	b.n	80117ee <USBD_GetString+0x42>
 80117ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80117f2:	7dfb      	ldrb	r3, [r7, #23]
 80117f4:	68ba      	ldr	r2, [r7, #8]
 80117f6:	4413      	add	r3, r2
 80117f8:	687a      	ldr	r2, [r7, #4]
 80117fa:	7812      	ldrb	r2, [r2, #0]
 80117fc:	701a      	strb	r2, [r3, #0]
  idx++;
 80117fe:	7dfb      	ldrb	r3, [r7, #23]
 8011800:	3301      	adds	r3, #1
 8011802:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011804:	7dfb      	ldrb	r3, [r7, #23]
 8011806:	68ba      	ldr	r2, [r7, #8]
 8011808:	4413      	add	r3, r2
 801180a:	2203      	movs	r2, #3
 801180c:	701a      	strb	r2, [r3, #0]
  idx++;
 801180e:	7dfb      	ldrb	r3, [r7, #23]
 8011810:	3301      	adds	r3, #1
 8011812:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011814:	e013      	b.n	801183e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8011816:	7dfb      	ldrb	r3, [r7, #23]
 8011818:	68ba      	ldr	r2, [r7, #8]
 801181a:	4413      	add	r3, r2
 801181c:	693a      	ldr	r2, [r7, #16]
 801181e:	7812      	ldrb	r2, [r2, #0]
 8011820:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011822:	693b      	ldr	r3, [r7, #16]
 8011824:	3301      	adds	r3, #1
 8011826:	613b      	str	r3, [r7, #16]
    idx++;
 8011828:	7dfb      	ldrb	r3, [r7, #23]
 801182a:	3301      	adds	r3, #1
 801182c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801182e:	7dfb      	ldrb	r3, [r7, #23]
 8011830:	68ba      	ldr	r2, [r7, #8]
 8011832:	4413      	add	r3, r2
 8011834:	2200      	movs	r2, #0
 8011836:	701a      	strb	r2, [r3, #0]
    idx++;
 8011838:	7dfb      	ldrb	r3, [r7, #23]
 801183a:	3301      	adds	r3, #1
 801183c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801183e:	693b      	ldr	r3, [r7, #16]
 8011840:	781b      	ldrb	r3, [r3, #0]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d1e7      	bne.n	8011816 <USBD_GetString+0x6a>
 8011846:	e000      	b.n	801184a <USBD_GetString+0x9e>
    return;
 8011848:	bf00      	nop
  }
}
 801184a:	3718      	adds	r7, #24
 801184c:	46bd      	mov	sp, r7
 801184e:	bd80      	pop	{r7, pc}

08011850 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011850:	b480      	push	{r7}
 8011852:	b085      	sub	sp, #20
 8011854:	af00      	add	r7, sp, #0
 8011856:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011858:	2300      	movs	r3, #0
 801185a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011860:	e005      	b.n	801186e <USBD_GetLen+0x1e>
  {
    len++;
 8011862:	7bfb      	ldrb	r3, [r7, #15]
 8011864:	3301      	adds	r3, #1
 8011866:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011868:	68bb      	ldr	r3, [r7, #8]
 801186a:	3301      	adds	r3, #1
 801186c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801186e:	68bb      	ldr	r3, [r7, #8]
 8011870:	781b      	ldrb	r3, [r3, #0]
 8011872:	2b00      	cmp	r3, #0
 8011874:	d1f5      	bne.n	8011862 <USBD_GetLen+0x12>
  }

  return len;
 8011876:	7bfb      	ldrb	r3, [r7, #15]
}
 8011878:	4618      	mov	r0, r3
 801187a:	3714      	adds	r7, #20
 801187c:	46bd      	mov	sp, r7
 801187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011882:	4770      	bx	lr

08011884 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011884:	b580      	push	{r7, lr}
 8011886:	b084      	sub	sp, #16
 8011888:	af00      	add	r7, sp, #0
 801188a:	60f8      	str	r0, [r7, #12]
 801188c:	60b9      	str	r1, [r7, #8]
 801188e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	2202      	movs	r2, #2
 8011894:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	687a      	ldr	r2, [r7, #4]
 801189c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	687a      	ldr	r2, [r7, #4]
 80118a2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	68ba      	ldr	r2, [r7, #8]
 80118a8:	2100      	movs	r1, #0
 80118aa:	68f8      	ldr	r0, [r7, #12]
 80118ac:	f000 fd21 	bl	80122f2 <USBD_LL_Transmit>

  return USBD_OK;
 80118b0:	2300      	movs	r3, #0
}
 80118b2:	4618      	mov	r0, r3
 80118b4:	3710      	adds	r7, #16
 80118b6:	46bd      	mov	sp, r7
 80118b8:	bd80      	pop	{r7, pc}

080118ba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80118ba:	b580      	push	{r7, lr}
 80118bc:	b084      	sub	sp, #16
 80118be:	af00      	add	r7, sp, #0
 80118c0:	60f8      	str	r0, [r7, #12]
 80118c2:	60b9      	str	r1, [r7, #8]
 80118c4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	68ba      	ldr	r2, [r7, #8]
 80118ca:	2100      	movs	r1, #0
 80118cc:	68f8      	ldr	r0, [r7, #12]
 80118ce:	f000 fd10 	bl	80122f2 <USBD_LL_Transmit>

  return USBD_OK;
 80118d2:	2300      	movs	r3, #0
}
 80118d4:	4618      	mov	r0, r3
 80118d6:	3710      	adds	r7, #16
 80118d8:	46bd      	mov	sp, r7
 80118da:	bd80      	pop	{r7, pc}

080118dc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80118dc:	b580      	push	{r7, lr}
 80118de:	b084      	sub	sp, #16
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	60f8      	str	r0, [r7, #12]
 80118e4:	60b9      	str	r1, [r7, #8]
 80118e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	2203      	movs	r2, #3
 80118ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	687a      	ldr	r2, [r7, #4]
 80118f4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	687a      	ldr	r2, [r7, #4]
 80118fc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	68ba      	ldr	r2, [r7, #8]
 8011904:	2100      	movs	r1, #0
 8011906:	68f8      	ldr	r0, [r7, #12]
 8011908:	f000 fd14 	bl	8012334 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801190c:	2300      	movs	r3, #0
}
 801190e:	4618      	mov	r0, r3
 8011910:	3710      	adds	r7, #16
 8011912:	46bd      	mov	sp, r7
 8011914:	bd80      	pop	{r7, pc}

08011916 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011916:	b580      	push	{r7, lr}
 8011918:	b084      	sub	sp, #16
 801191a:	af00      	add	r7, sp, #0
 801191c:	60f8      	str	r0, [r7, #12]
 801191e:	60b9      	str	r1, [r7, #8]
 8011920:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	68ba      	ldr	r2, [r7, #8]
 8011926:	2100      	movs	r1, #0
 8011928:	68f8      	ldr	r0, [r7, #12]
 801192a:	f000 fd03 	bl	8012334 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801192e:	2300      	movs	r3, #0
}
 8011930:	4618      	mov	r0, r3
 8011932:	3710      	adds	r7, #16
 8011934:	46bd      	mov	sp, r7
 8011936:	bd80      	pop	{r7, pc}

08011938 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011938:	b580      	push	{r7, lr}
 801193a:	b082      	sub	sp, #8
 801193c:	af00      	add	r7, sp, #0
 801193e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	2204      	movs	r2, #4
 8011944:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011948:	2300      	movs	r3, #0
 801194a:	2200      	movs	r2, #0
 801194c:	2100      	movs	r1, #0
 801194e:	6878      	ldr	r0, [r7, #4]
 8011950:	f000 fccf 	bl	80122f2 <USBD_LL_Transmit>

  return USBD_OK;
 8011954:	2300      	movs	r3, #0
}
 8011956:	4618      	mov	r0, r3
 8011958:	3708      	adds	r7, #8
 801195a:	46bd      	mov	sp, r7
 801195c:	bd80      	pop	{r7, pc}

0801195e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801195e:	b580      	push	{r7, lr}
 8011960:	b082      	sub	sp, #8
 8011962:	af00      	add	r7, sp, #0
 8011964:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	2205      	movs	r2, #5
 801196a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801196e:	2300      	movs	r3, #0
 8011970:	2200      	movs	r2, #0
 8011972:	2100      	movs	r1, #0
 8011974:	6878      	ldr	r0, [r7, #4]
 8011976:	f000 fcdd 	bl	8012334 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801197a:	2300      	movs	r3, #0
}
 801197c:	4618      	mov	r0, r3
 801197e:	3708      	adds	r7, #8
 8011980:	46bd      	mov	sp, r7
 8011982:	bd80      	pop	{r7, pc}

08011984 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011984:	b580      	push	{r7, lr}
 8011986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011988:	2200      	movs	r2, #0
 801198a:	4913      	ldr	r1, [pc, #76]	@ (80119d8 <MX_USB_DEVICE_Init+0x54>)
 801198c:	4813      	ldr	r0, [pc, #76]	@ (80119dc <MX_USB_DEVICE_Init+0x58>)
 801198e:	f7fe fccd 	bl	801032c <USBD_Init>
 8011992:	4603      	mov	r3, r0
 8011994:	2b00      	cmp	r3, #0
 8011996:	d001      	beq.n	801199c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011998:	f7ef fcc1 	bl	800131e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801199c:	4910      	ldr	r1, [pc, #64]	@ (80119e0 <MX_USB_DEVICE_Init+0x5c>)
 801199e:	480f      	ldr	r0, [pc, #60]	@ (80119dc <MX_USB_DEVICE_Init+0x58>)
 80119a0:	f7fe fcf4 	bl	801038c <USBD_RegisterClass>
 80119a4:	4603      	mov	r3, r0
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d001      	beq.n	80119ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80119aa:	f7ef fcb8 	bl	800131e <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80119ae:	490d      	ldr	r1, [pc, #52]	@ (80119e4 <MX_USB_DEVICE_Init+0x60>)
 80119b0:	480a      	ldr	r0, [pc, #40]	@ (80119dc <MX_USB_DEVICE_Init+0x58>)
 80119b2:	f7fe fbeb 	bl	801018c <USBD_CDC_RegisterInterface>
 80119b6:	4603      	mov	r3, r0
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d001      	beq.n	80119c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80119bc:	f7ef fcaf 	bl	800131e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80119c0:	4806      	ldr	r0, [pc, #24]	@ (80119dc <MX_USB_DEVICE_Init+0x58>)
 80119c2:	f7fe fd19 	bl	80103f8 <USBD_Start>
 80119c6:	4603      	mov	r3, r0
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d001      	beq.n	80119d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80119cc:	f7ef fca7 	bl	800131e <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80119d0:	f7f6 fb72 	bl	80080b8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80119d4:	bf00      	nop
 80119d6:	bd80      	pop	{r7, pc}
 80119d8:	240000cc 	.word	0x240000cc
 80119dc:	24000a4c 	.word	0x24000a4c
 80119e0:	24000038 	.word	0x24000038
 80119e4:	240000b8 	.word	0x240000b8

080119e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80119e8:	b580      	push	{r7, lr}
 80119ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80119ec:	2200      	movs	r2, #0
 80119ee:	4905      	ldr	r1, [pc, #20]	@ (8011a04 <CDC_Init_FS+0x1c>)
 80119f0:	4805      	ldr	r0, [pc, #20]	@ (8011a08 <CDC_Init_FS+0x20>)
 80119f2:	f7fe fbe5 	bl	80101c0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80119f6:	4905      	ldr	r1, [pc, #20]	@ (8011a0c <CDC_Init_FS+0x24>)
 80119f8:	4803      	ldr	r0, [pc, #12]	@ (8011a08 <CDC_Init_FS+0x20>)
 80119fa:	f7fe fc03 	bl	8010204 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80119fe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011a00:	4618      	mov	r0, r3
 8011a02:	bd80      	pop	{r7, pc}
 8011a04:	24001528 	.word	0x24001528
 8011a08:	24000a4c 	.word	0x24000a4c
 8011a0c:	24000d28 	.word	0x24000d28

08011a10 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011a10:	b480      	push	{r7}
 8011a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011a14:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011a16:	4618      	mov	r0, r3
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1e:	4770      	bx	lr

08011a20 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011a20:	b480      	push	{r7}
 8011a22:	b083      	sub	sp, #12
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	4603      	mov	r3, r0
 8011a28:	6039      	str	r1, [r7, #0]
 8011a2a:	71fb      	strb	r3, [r7, #7]
 8011a2c:	4613      	mov	r3, r2
 8011a2e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011a30:	79fb      	ldrb	r3, [r7, #7]
 8011a32:	2b23      	cmp	r3, #35	@ 0x23
 8011a34:	d84a      	bhi.n	8011acc <CDC_Control_FS+0xac>
 8011a36:	a201      	add	r2, pc, #4	@ (adr r2, 8011a3c <CDC_Control_FS+0x1c>)
 8011a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a3c:	08011acd 	.word	0x08011acd
 8011a40:	08011acd 	.word	0x08011acd
 8011a44:	08011acd 	.word	0x08011acd
 8011a48:	08011acd 	.word	0x08011acd
 8011a4c:	08011acd 	.word	0x08011acd
 8011a50:	08011acd 	.word	0x08011acd
 8011a54:	08011acd 	.word	0x08011acd
 8011a58:	08011acd 	.word	0x08011acd
 8011a5c:	08011acd 	.word	0x08011acd
 8011a60:	08011acd 	.word	0x08011acd
 8011a64:	08011acd 	.word	0x08011acd
 8011a68:	08011acd 	.word	0x08011acd
 8011a6c:	08011acd 	.word	0x08011acd
 8011a70:	08011acd 	.word	0x08011acd
 8011a74:	08011acd 	.word	0x08011acd
 8011a78:	08011acd 	.word	0x08011acd
 8011a7c:	08011acd 	.word	0x08011acd
 8011a80:	08011acd 	.word	0x08011acd
 8011a84:	08011acd 	.word	0x08011acd
 8011a88:	08011acd 	.word	0x08011acd
 8011a8c:	08011acd 	.word	0x08011acd
 8011a90:	08011acd 	.word	0x08011acd
 8011a94:	08011acd 	.word	0x08011acd
 8011a98:	08011acd 	.word	0x08011acd
 8011a9c:	08011acd 	.word	0x08011acd
 8011aa0:	08011acd 	.word	0x08011acd
 8011aa4:	08011acd 	.word	0x08011acd
 8011aa8:	08011acd 	.word	0x08011acd
 8011aac:	08011acd 	.word	0x08011acd
 8011ab0:	08011acd 	.word	0x08011acd
 8011ab4:	08011acd 	.word	0x08011acd
 8011ab8:	08011acd 	.word	0x08011acd
 8011abc:	08011acd 	.word	0x08011acd
 8011ac0:	08011acd 	.word	0x08011acd
 8011ac4:	08011acd 	.word	0x08011acd
 8011ac8:	08011acd 	.word	0x08011acd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011acc:	bf00      	nop
  }

  return (USBD_OK);
 8011ace:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	370c      	adds	r7, #12
 8011ad4:	46bd      	mov	sp, r7
 8011ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ada:	4770      	bx	lr

08011adc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b082      	sub	sp, #8
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	6078      	str	r0, [r7, #4]
 8011ae4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011ae6:	6879      	ldr	r1, [r7, #4]
 8011ae8:	4805      	ldr	r0, [pc, #20]	@ (8011b00 <CDC_Receive_FS+0x24>)
 8011aea:	f7fe fb8b 	bl	8010204 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011aee:	4804      	ldr	r0, [pc, #16]	@ (8011b00 <CDC_Receive_FS+0x24>)
 8011af0:	f7fe fbe6 	bl	80102c0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011af4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011af6:	4618      	mov	r0, r3
 8011af8:	3708      	adds	r7, #8
 8011afa:	46bd      	mov	sp, r7
 8011afc:	bd80      	pop	{r7, pc}
 8011afe:	bf00      	nop
 8011b00:	24000a4c 	.word	0x24000a4c

08011b04 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8011b04:	b580      	push	{r7, lr}
 8011b06:	b084      	sub	sp, #16
 8011b08:	af00      	add	r7, sp, #0
 8011b0a:	6078      	str	r0, [r7, #4]
 8011b0c:	460b      	mov	r3, r1
 8011b0e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011b10:	2300      	movs	r3, #0
 8011b12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8011b14:	4b0d      	ldr	r3, [pc, #52]	@ (8011b4c <CDC_Transmit_FS+0x48>)
 8011b16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011b1a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8011b1c:	68bb      	ldr	r3, [r7, #8]
 8011b1e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d001      	beq.n	8011b2a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8011b26:	2301      	movs	r3, #1
 8011b28:	e00b      	b.n	8011b42 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8011b2a:	887b      	ldrh	r3, [r7, #2]
 8011b2c:	461a      	mov	r2, r3
 8011b2e:	6879      	ldr	r1, [r7, #4]
 8011b30:	4806      	ldr	r0, [pc, #24]	@ (8011b4c <CDC_Transmit_FS+0x48>)
 8011b32:	f7fe fb45 	bl	80101c0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8011b36:	4805      	ldr	r0, [pc, #20]	@ (8011b4c <CDC_Transmit_FS+0x48>)
 8011b38:	f7fe fb82 	bl	8010240 <USBD_CDC_TransmitPacket>
 8011b3c:	4603      	mov	r3, r0
 8011b3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8011b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b42:	4618      	mov	r0, r3
 8011b44:	3710      	adds	r7, #16
 8011b46:	46bd      	mov	sp, r7
 8011b48:	bd80      	pop	{r7, pc}
 8011b4a:	bf00      	nop
 8011b4c:	24000a4c 	.word	0x24000a4c

08011b50 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011b50:	b480      	push	{r7}
 8011b52:	b087      	sub	sp, #28
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	60f8      	str	r0, [r7, #12]
 8011b58:	60b9      	str	r1, [r7, #8]
 8011b5a:	4613      	mov	r3, r2
 8011b5c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011b5e:	2300      	movs	r3, #0
 8011b60:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011b62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011b66:	4618      	mov	r0, r3
 8011b68:	371c      	adds	r7, #28
 8011b6a:	46bd      	mov	sp, r7
 8011b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b70:	4770      	bx	lr
	...

08011b74 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011b74:	b480      	push	{r7}
 8011b76:	b083      	sub	sp, #12
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	4603      	mov	r3, r0
 8011b7c:	6039      	str	r1, [r7, #0]
 8011b7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011b80:	683b      	ldr	r3, [r7, #0]
 8011b82:	2212      	movs	r2, #18
 8011b84:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011b86:	4b03      	ldr	r3, [pc, #12]	@ (8011b94 <USBD_FS_DeviceDescriptor+0x20>)
}
 8011b88:	4618      	mov	r0, r3
 8011b8a:	370c      	adds	r7, #12
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b92:	4770      	bx	lr
 8011b94:	240000ec 	.word	0x240000ec

08011b98 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011b98:	b480      	push	{r7}
 8011b9a:	b083      	sub	sp, #12
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	4603      	mov	r3, r0
 8011ba0:	6039      	str	r1, [r7, #0]
 8011ba2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011ba4:	683b      	ldr	r3, [r7, #0]
 8011ba6:	2204      	movs	r2, #4
 8011ba8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011baa:	4b03      	ldr	r3, [pc, #12]	@ (8011bb8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011bac:	4618      	mov	r0, r3
 8011bae:	370c      	adds	r7, #12
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb6:	4770      	bx	lr
 8011bb8:	24000100 	.word	0x24000100

08011bbc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	b082      	sub	sp, #8
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	4603      	mov	r3, r0
 8011bc4:	6039      	str	r1, [r7, #0]
 8011bc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011bc8:	79fb      	ldrb	r3, [r7, #7]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d105      	bne.n	8011bda <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011bce:	683a      	ldr	r2, [r7, #0]
 8011bd0:	4907      	ldr	r1, [pc, #28]	@ (8011bf0 <USBD_FS_ProductStrDescriptor+0x34>)
 8011bd2:	4808      	ldr	r0, [pc, #32]	@ (8011bf4 <USBD_FS_ProductStrDescriptor+0x38>)
 8011bd4:	f7ff fdea 	bl	80117ac <USBD_GetString>
 8011bd8:	e004      	b.n	8011be4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011bda:	683a      	ldr	r2, [r7, #0]
 8011bdc:	4904      	ldr	r1, [pc, #16]	@ (8011bf0 <USBD_FS_ProductStrDescriptor+0x34>)
 8011bde:	4805      	ldr	r0, [pc, #20]	@ (8011bf4 <USBD_FS_ProductStrDescriptor+0x38>)
 8011be0:	f7ff fde4 	bl	80117ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8011be4:	4b02      	ldr	r3, [pc, #8]	@ (8011bf0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011be6:	4618      	mov	r0, r3
 8011be8:	3708      	adds	r7, #8
 8011bea:	46bd      	mov	sp, r7
 8011bec:	bd80      	pop	{r7, pc}
 8011bee:	bf00      	nop
 8011bf0:	24001d28 	.word	0x24001d28
 8011bf4:	0801503c 	.word	0x0801503c

08011bf8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b082      	sub	sp, #8
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	4603      	mov	r3, r0
 8011c00:	6039      	str	r1, [r7, #0]
 8011c02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011c04:	683a      	ldr	r2, [r7, #0]
 8011c06:	4904      	ldr	r1, [pc, #16]	@ (8011c18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011c08:	4804      	ldr	r0, [pc, #16]	@ (8011c1c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011c0a:	f7ff fdcf 	bl	80117ac <USBD_GetString>
  return USBD_StrDesc;
 8011c0e:	4b02      	ldr	r3, [pc, #8]	@ (8011c18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011c10:	4618      	mov	r0, r3
 8011c12:	3708      	adds	r7, #8
 8011c14:	46bd      	mov	sp, r7
 8011c16:	bd80      	pop	{r7, pc}
 8011c18:	24001d28 	.word	0x24001d28
 8011c1c:	08015054 	.word	0x08015054

08011c20 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b082      	sub	sp, #8
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	4603      	mov	r3, r0
 8011c28:	6039      	str	r1, [r7, #0]
 8011c2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011c2c:	683b      	ldr	r3, [r7, #0]
 8011c2e:	221a      	movs	r2, #26
 8011c30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011c32:	f000 f843 	bl	8011cbc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011c36:	4b02      	ldr	r3, [pc, #8]	@ (8011c40 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011c38:	4618      	mov	r0, r3
 8011c3a:	3708      	adds	r7, #8
 8011c3c:	46bd      	mov	sp, r7
 8011c3e:	bd80      	pop	{r7, pc}
 8011c40:	24000104 	.word	0x24000104

08011c44 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011c44:	b580      	push	{r7, lr}
 8011c46:	b082      	sub	sp, #8
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	4603      	mov	r3, r0
 8011c4c:	6039      	str	r1, [r7, #0]
 8011c4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011c50:	79fb      	ldrb	r3, [r7, #7]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d105      	bne.n	8011c62 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011c56:	683a      	ldr	r2, [r7, #0]
 8011c58:	4907      	ldr	r1, [pc, #28]	@ (8011c78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011c5a:	4808      	ldr	r0, [pc, #32]	@ (8011c7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8011c5c:	f7ff fda6 	bl	80117ac <USBD_GetString>
 8011c60:	e004      	b.n	8011c6c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011c62:	683a      	ldr	r2, [r7, #0]
 8011c64:	4904      	ldr	r1, [pc, #16]	@ (8011c78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011c66:	4805      	ldr	r0, [pc, #20]	@ (8011c7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8011c68:	f7ff fda0 	bl	80117ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8011c6c:	4b02      	ldr	r3, [pc, #8]	@ (8011c78 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011c6e:	4618      	mov	r0, r3
 8011c70:	3708      	adds	r7, #8
 8011c72:	46bd      	mov	sp, r7
 8011c74:	bd80      	pop	{r7, pc}
 8011c76:	bf00      	nop
 8011c78:	24001d28 	.word	0x24001d28
 8011c7c:	08015068 	.word	0x08015068

08011c80 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011c80:	b580      	push	{r7, lr}
 8011c82:	b082      	sub	sp, #8
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	4603      	mov	r3, r0
 8011c88:	6039      	str	r1, [r7, #0]
 8011c8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011c8c:	79fb      	ldrb	r3, [r7, #7]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d105      	bne.n	8011c9e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011c92:	683a      	ldr	r2, [r7, #0]
 8011c94:	4907      	ldr	r1, [pc, #28]	@ (8011cb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011c96:	4808      	ldr	r0, [pc, #32]	@ (8011cb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011c98:	f7ff fd88 	bl	80117ac <USBD_GetString>
 8011c9c:	e004      	b.n	8011ca8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011c9e:	683a      	ldr	r2, [r7, #0]
 8011ca0:	4904      	ldr	r1, [pc, #16]	@ (8011cb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011ca2:	4805      	ldr	r0, [pc, #20]	@ (8011cb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011ca4:	f7ff fd82 	bl	80117ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8011ca8:	4b02      	ldr	r3, [pc, #8]	@ (8011cb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011caa:	4618      	mov	r0, r3
 8011cac:	3708      	adds	r7, #8
 8011cae:	46bd      	mov	sp, r7
 8011cb0:	bd80      	pop	{r7, pc}
 8011cb2:	bf00      	nop
 8011cb4:	24001d28 	.word	0x24001d28
 8011cb8:	08015074 	.word	0x08015074

08011cbc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011cbc:	b580      	push	{r7, lr}
 8011cbe:	b084      	sub	sp, #16
 8011cc0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8011d00 <Get_SerialNum+0x44>)
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8011d04 <Get_SerialNum+0x48>)
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011cce:	4b0e      	ldr	r3, [pc, #56]	@ (8011d08 <Get_SerialNum+0x4c>)
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011cd4:	68fa      	ldr	r2, [r7, #12]
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	4413      	add	r3, r2
 8011cda:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d009      	beq.n	8011cf6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011ce2:	2208      	movs	r2, #8
 8011ce4:	4909      	ldr	r1, [pc, #36]	@ (8011d0c <Get_SerialNum+0x50>)
 8011ce6:	68f8      	ldr	r0, [r7, #12]
 8011ce8:	f000 f814 	bl	8011d14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011cec:	2204      	movs	r2, #4
 8011cee:	4908      	ldr	r1, [pc, #32]	@ (8011d10 <Get_SerialNum+0x54>)
 8011cf0:	68b8      	ldr	r0, [r7, #8]
 8011cf2:	f000 f80f 	bl	8011d14 <IntToUnicode>
  }
}
 8011cf6:	bf00      	nop
 8011cf8:	3710      	adds	r7, #16
 8011cfa:	46bd      	mov	sp, r7
 8011cfc:	bd80      	pop	{r7, pc}
 8011cfe:	bf00      	nop
 8011d00:	1ff1e800 	.word	0x1ff1e800
 8011d04:	1ff1e804 	.word	0x1ff1e804
 8011d08:	1ff1e808 	.word	0x1ff1e808
 8011d0c:	24000106 	.word	0x24000106
 8011d10:	24000116 	.word	0x24000116

08011d14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011d14:	b480      	push	{r7}
 8011d16:	b087      	sub	sp, #28
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	60f8      	str	r0, [r7, #12]
 8011d1c:	60b9      	str	r1, [r7, #8]
 8011d1e:	4613      	mov	r3, r2
 8011d20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011d22:	2300      	movs	r3, #0
 8011d24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011d26:	2300      	movs	r3, #0
 8011d28:	75fb      	strb	r3, [r7, #23]
 8011d2a:	e027      	b.n	8011d7c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	0f1b      	lsrs	r3, r3, #28
 8011d30:	2b09      	cmp	r3, #9
 8011d32:	d80b      	bhi.n	8011d4c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	0f1b      	lsrs	r3, r3, #28
 8011d38:	b2da      	uxtb	r2, r3
 8011d3a:	7dfb      	ldrb	r3, [r7, #23]
 8011d3c:	005b      	lsls	r3, r3, #1
 8011d3e:	4619      	mov	r1, r3
 8011d40:	68bb      	ldr	r3, [r7, #8]
 8011d42:	440b      	add	r3, r1
 8011d44:	3230      	adds	r2, #48	@ 0x30
 8011d46:	b2d2      	uxtb	r2, r2
 8011d48:	701a      	strb	r2, [r3, #0]
 8011d4a:	e00a      	b.n	8011d62 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	0f1b      	lsrs	r3, r3, #28
 8011d50:	b2da      	uxtb	r2, r3
 8011d52:	7dfb      	ldrb	r3, [r7, #23]
 8011d54:	005b      	lsls	r3, r3, #1
 8011d56:	4619      	mov	r1, r3
 8011d58:	68bb      	ldr	r3, [r7, #8]
 8011d5a:	440b      	add	r3, r1
 8011d5c:	3237      	adds	r2, #55	@ 0x37
 8011d5e:	b2d2      	uxtb	r2, r2
 8011d60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	011b      	lsls	r3, r3, #4
 8011d66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011d68:	7dfb      	ldrb	r3, [r7, #23]
 8011d6a:	005b      	lsls	r3, r3, #1
 8011d6c:	3301      	adds	r3, #1
 8011d6e:	68ba      	ldr	r2, [r7, #8]
 8011d70:	4413      	add	r3, r2
 8011d72:	2200      	movs	r2, #0
 8011d74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011d76:	7dfb      	ldrb	r3, [r7, #23]
 8011d78:	3301      	adds	r3, #1
 8011d7a:	75fb      	strb	r3, [r7, #23]
 8011d7c:	7dfa      	ldrb	r2, [r7, #23]
 8011d7e:	79fb      	ldrb	r3, [r7, #7]
 8011d80:	429a      	cmp	r2, r3
 8011d82:	d3d3      	bcc.n	8011d2c <IntToUnicode+0x18>
  }
}
 8011d84:	bf00      	nop
 8011d86:	bf00      	nop
 8011d88:	371c      	adds	r7, #28
 8011d8a:	46bd      	mov	sp, r7
 8011d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d90:	4770      	bx	lr
	...

08011d94 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011d94:	b580      	push	{r7, lr}
 8011d96:	b0ba      	sub	sp, #232	@ 0xe8
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011d9c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8011da0:	2200      	movs	r2, #0
 8011da2:	601a      	str	r2, [r3, #0]
 8011da4:	605a      	str	r2, [r3, #4]
 8011da6:	609a      	str	r2, [r3, #8]
 8011da8:	60da      	str	r2, [r3, #12]
 8011daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011dac:	f107 0310 	add.w	r3, r7, #16
 8011db0:	22c0      	movs	r2, #192	@ 0xc0
 8011db2:	2100      	movs	r1, #0
 8011db4:	4618      	mov	r0, r3
 8011db6:	f001 f890 	bl	8012eda <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	4a34      	ldr	r2, [pc, #208]	@ (8011e90 <HAL_PCD_MspInit+0xfc>)
 8011dc0:	4293      	cmp	r3, r2
 8011dc2:	d161      	bne.n	8011e88 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8011dc4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8011dc8:	f04f 0300 	mov.w	r3, #0
 8011dcc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8011dd0:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8011dd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011dd8:	f107 0310 	add.w	r3, r7, #16
 8011ddc:	4618      	mov	r0, r3
 8011dde:	f7f7 f961 	bl	80090a4 <HAL_RCCEx_PeriphCLKConfig>
 8011de2:	4603      	mov	r3, r0
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d001      	beq.n	8011dec <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8011de8:	f7ef fa99 	bl	800131e <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8011dec:	f7f6 f964 	bl	80080b8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011df0:	4b28      	ldr	r3, [pc, #160]	@ (8011e94 <HAL_PCD_MspInit+0x100>)
 8011df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011df6:	4a27      	ldr	r2, [pc, #156]	@ (8011e94 <HAL_PCD_MspInit+0x100>)
 8011df8:	f043 0301 	orr.w	r3, r3, #1
 8011dfc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8011e00:	4b24      	ldr	r3, [pc, #144]	@ (8011e94 <HAL_PCD_MspInit+0x100>)
 8011e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011e06:	f003 0301 	and.w	r3, r3, #1
 8011e0a:	60fb      	str	r3, [r7, #12]
 8011e0c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8011e0e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8011e12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011e16:	2302      	movs	r3, #2
 8011e18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011e22:	2300      	movs	r3, #0
 8011e24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8011e28:	230a      	movs	r3, #10
 8011e2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011e2e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8011e32:	4619      	mov	r1, r3
 8011e34:	4818      	ldr	r0, [pc, #96]	@ (8011e98 <HAL_PCD_MspInit+0x104>)
 8011e36:	f7f4 fc35 	bl	80066a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8011e3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011e3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011e42:	2300      	movs	r3, #0
 8011e44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011e48:	2300      	movs	r3, #0
 8011e4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011e4e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8011e52:	4619      	mov	r1, r3
 8011e54:	4810      	ldr	r0, [pc, #64]	@ (8011e98 <HAL_PCD_MspInit+0x104>)
 8011e56:	f7f4 fc25 	bl	80066a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8011e94 <HAL_PCD_MspInit+0x100>)
 8011e5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011e60:	4a0c      	ldr	r2, [pc, #48]	@ (8011e94 <HAL_PCD_MspInit+0x100>)
 8011e62:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011e66:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8011e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8011e94 <HAL_PCD_MspInit+0x100>)
 8011e6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011e70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011e74:	60bb      	str	r3, [r7, #8]
 8011e76:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8011e78:	2200      	movs	r2, #0
 8011e7a:	2100      	movs	r1, #0
 8011e7c:	2065      	movs	r0, #101	@ 0x65
 8011e7e:	f7f2 fa80 	bl	8004382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011e82:	2065      	movs	r0, #101	@ 0x65
 8011e84:	f7f2 fa97 	bl	80043b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011e88:	bf00      	nop
 8011e8a:	37e8      	adds	r7, #232	@ 0xe8
 8011e8c:	46bd      	mov	sp, r7
 8011e8e:	bd80      	pop	{r7, pc}
 8011e90:	40080000 	.word	0x40080000
 8011e94:	58024400 	.word	0x58024400
 8011e98:	58020000 	.word	0x58020000

08011e9c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e9c:	b580      	push	{r7, lr}
 8011e9e:	b082      	sub	sp, #8
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8011eb0:	4619      	mov	r1, r3
 8011eb2:	4610      	mov	r0, r2
 8011eb4:	f7fe faed 	bl	8010492 <USBD_LL_SetupStage>
}
 8011eb8:	bf00      	nop
 8011eba:	3708      	adds	r7, #8
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	bd80      	pop	{r7, pc}

08011ec0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b082      	sub	sp, #8
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]
 8011ec8:	460b      	mov	r3, r1
 8011eca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8011ed2:	78fa      	ldrb	r2, [r7, #3]
 8011ed4:	6879      	ldr	r1, [r7, #4]
 8011ed6:	4613      	mov	r3, r2
 8011ed8:	00db      	lsls	r3, r3, #3
 8011eda:	4413      	add	r3, r2
 8011edc:	009b      	lsls	r3, r3, #2
 8011ede:	440b      	add	r3, r1
 8011ee0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8011ee4:	681a      	ldr	r2, [r3, #0]
 8011ee6:	78fb      	ldrb	r3, [r7, #3]
 8011ee8:	4619      	mov	r1, r3
 8011eea:	f7fe fb27 	bl	801053c <USBD_LL_DataOutStage>
}
 8011eee:	bf00      	nop
 8011ef0:	3708      	adds	r7, #8
 8011ef2:	46bd      	mov	sp, r7
 8011ef4:	bd80      	pop	{r7, pc}

08011ef6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ef6:	b580      	push	{r7, lr}
 8011ef8:	b082      	sub	sp, #8
 8011efa:	af00      	add	r7, sp, #0
 8011efc:	6078      	str	r0, [r7, #4]
 8011efe:	460b      	mov	r3, r1
 8011f00:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8011f08:	78fa      	ldrb	r2, [r7, #3]
 8011f0a:	6879      	ldr	r1, [r7, #4]
 8011f0c:	4613      	mov	r3, r2
 8011f0e:	00db      	lsls	r3, r3, #3
 8011f10:	4413      	add	r3, r2
 8011f12:	009b      	lsls	r3, r3, #2
 8011f14:	440b      	add	r3, r1
 8011f16:	3320      	adds	r3, #32
 8011f18:	681a      	ldr	r2, [r3, #0]
 8011f1a:	78fb      	ldrb	r3, [r7, #3]
 8011f1c:	4619      	mov	r1, r3
 8011f1e:	f7fe fbc0 	bl	80106a2 <USBD_LL_DataInStage>
}
 8011f22:	bf00      	nop
 8011f24:	3708      	adds	r7, #8
 8011f26:	46bd      	mov	sp, r7
 8011f28:	bd80      	pop	{r7, pc}

08011f2a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f2a:	b580      	push	{r7, lr}
 8011f2c:	b082      	sub	sp, #8
 8011f2e:	af00      	add	r7, sp, #0
 8011f30:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011f38:	4618      	mov	r0, r3
 8011f3a:	f7fe fcfa 	bl	8010932 <USBD_LL_SOF>
}
 8011f3e:	bf00      	nop
 8011f40:	3708      	adds	r7, #8
 8011f42:	46bd      	mov	sp, r7
 8011f44:	bd80      	pop	{r7, pc}

08011f46 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f46:	b580      	push	{r7, lr}
 8011f48:	b084      	sub	sp, #16
 8011f4a:	af00      	add	r7, sp, #0
 8011f4c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011f4e:	2301      	movs	r3, #1
 8011f50:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	79db      	ldrb	r3, [r3, #7]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d102      	bne.n	8011f60 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	73fb      	strb	r3, [r7, #15]
 8011f5e:	e008      	b.n	8011f72 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	79db      	ldrb	r3, [r3, #7]
 8011f64:	2b02      	cmp	r3, #2
 8011f66:	d102      	bne.n	8011f6e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8011f68:	2301      	movs	r3, #1
 8011f6a:	73fb      	strb	r3, [r7, #15]
 8011f6c:	e001      	b.n	8011f72 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8011f6e:	f7ef f9d6 	bl	800131e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011f78:	7bfa      	ldrb	r2, [r7, #15]
 8011f7a:	4611      	mov	r1, r2
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	f7fe fc94 	bl	80108aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011f88:	4618      	mov	r0, r3
 8011f8a:	f7fe fc3c 	bl	8010806 <USBD_LL_Reset>
}
 8011f8e:	bf00      	nop
 8011f90:	3710      	adds	r7, #16
 8011f92:	46bd      	mov	sp, r7
 8011f94:	bd80      	pop	{r7, pc}
	...

08011f98 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f98:	b580      	push	{r7, lr}
 8011f9a:	b082      	sub	sp, #8
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	f7fe fc8f 	bl	80108ca <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	687a      	ldr	r2, [r7, #4]
 8011fb8:	6812      	ldr	r2, [r2, #0]
 8011fba:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011fbe:	f043 0301 	orr.w	r3, r3, #1
 8011fc2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	7adb      	ldrb	r3, [r3, #11]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d005      	beq.n	8011fd8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011fcc:	4b04      	ldr	r3, [pc, #16]	@ (8011fe0 <HAL_PCD_SuspendCallback+0x48>)
 8011fce:	691b      	ldr	r3, [r3, #16]
 8011fd0:	4a03      	ldr	r2, [pc, #12]	@ (8011fe0 <HAL_PCD_SuspendCallback+0x48>)
 8011fd2:	f043 0306 	orr.w	r3, r3, #6
 8011fd6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011fd8:	bf00      	nop
 8011fda:	3708      	adds	r7, #8
 8011fdc:	46bd      	mov	sp, r7
 8011fde:	bd80      	pop	{r7, pc}
 8011fe0:	e000ed00 	.word	0xe000ed00

08011fe4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b082      	sub	sp, #8
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	f7fe fc85 	bl	8010902 <USBD_LL_Resume>
}
 8011ff8:	bf00      	nop
 8011ffa:	3708      	adds	r7, #8
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	bd80      	pop	{r7, pc}

08012000 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012000:	b580      	push	{r7, lr}
 8012002:	b082      	sub	sp, #8
 8012004:	af00      	add	r7, sp, #0
 8012006:	6078      	str	r0, [r7, #4]
 8012008:	460b      	mov	r3, r1
 801200a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012012:	78fa      	ldrb	r2, [r7, #3]
 8012014:	4611      	mov	r1, r2
 8012016:	4618      	mov	r0, r3
 8012018:	f7fe fcdd 	bl	80109d6 <USBD_LL_IsoOUTIncomplete>
}
 801201c:	bf00      	nop
 801201e:	3708      	adds	r7, #8
 8012020:	46bd      	mov	sp, r7
 8012022:	bd80      	pop	{r7, pc}

08012024 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012024:	b580      	push	{r7, lr}
 8012026:	b082      	sub	sp, #8
 8012028:	af00      	add	r7, sp, #0
 801202a:	6078      	str	r0, [r7, #4]
 801202c:	460b      	mov	r3, r1
 801202e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012036:	78fa      	ldrb	r2, [r7, #3]
 8012038:	4611      	mov	r1, r2
 801203a:	4618      	mov	r0, r3
 801203c:	f7fe fc99 	bl	8010972 <USBD_LL_IsoINIncomplete>
}
 8012040:	bf00      	nop
 8012042:	3708      	adds	r7, #8
 8012044:	46bd      	mov	sp, r7
 8012046:	bd80      	pop	{r7, pc}

08012048 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012048:	b580      	push	{r7, lr}
 801204a:	b082      	sub	sp, #8
 801204c:	af00      	add	r7, sp, #0
 801204e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012056:	4618      	mov	r0, r3
 8012058:	f7fe fcef 	bl	8010a3a <USBD_LL_DevConnected>
}
 801205c:	bf00      	nop
 801205e:	3708      	adds	r7, #8
 8012060:	46bd      	mov	sp, r7
 8012062:	bd80      	pop	{r7, pc}

08012064 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012064:	b580      	push	{r7, lr}
 8012066:	b082      	sub	sp, #8
 8012068:	af00      	add	r7, sp, #0
 801206a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012072:	4618      	mov	r0, r3
 8012074:	f7fe fcec 	bl	8010a50 <USBD_LL_DevDisconnected>
}
 8012078:	bf00      	nop
 801207a:	3708      	adds	r7, #8
 801207c:	46bd      	mov	sp, r7
 801207e:	bd80      	pop	{r7, pc}

08012080 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012080:	b580      	push	{r7, lr}
 8012082:	b082      	sub	sp, #8
 8012084:	af00      	add	r7, sp, #0
 8012086:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	781b      	ldrb	r3, [r3, #0]
 801208c:	2b00      	cmp	r3, #0
 801208e:	d13e      	bne.n	801210e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8012090:	4a21      	ldr	r2, [pc, #132]	@ (8012118 <USBD_LL_Init+0x98>)
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	4a1f      	ldr	r2, [pc, #124]	@ (8012118 <USBD_LL_Init+0x98>)
 801209c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80120a0:	4b1d      	ldr	r3, [pc, #116]	@ (8012118 <USBD_LL_Init+0x98>)
 80120a2:	4a1e      	ldr	r2, [pc, #120]	@ (801211c <USBD_LL_Init+0x9c>)
 80120a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80120a6:	4b1c      	ldr	r3, [pc, #112]	@ (8012118 <USBD_LL_Init+0x98>)
 80120a8:	2209      	movs	r2, #9
 80120aa:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80120ac:	4b1a      	ldr	r3, [pc, #104]	@ (8012118 <USBD_LL_Init+0x98>)
 80120ae:	2202      	movs	r2, #2
 80120b0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80120b2:	4b19      	ldr	r3, [pc, #100]	@ (8012118 <USBD_LL_Init+0x98>)
 80120b4:	2200      	movs	r2, #0
 80120b6:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80120b8:	4b17      	ldr	r3, [pc, #92]	@ (8012118 <USBD_LL_Init+0x98>)
 80120ba:	2202      	movs	r2, #2
 80120bc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80120be:	4b16      	ldr	r3, [pc, #88]	@ (8012118 <USBD_LL_Init+0x98>)
 80120c0:	2201      	movs	r2, #1
 80120c2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80120c4:	4b14      	ldr	r3, [pc, #80]	@ (8012118 <USBD_LL_Init+0x98>)
 80120c6:	2200      	movs	r2, #0
 80120c8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80120ca:	4b13      	ldr	r3, [pc, #76]	@ (8012118 <USBD_LL_Init+0x98>)
 80120cc:	2200      	movs	r2, #0
 80120ce:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80120d0:	4b11      	ldr	r3, [pc, #68]	@ (8012118 <USBD_LL_Init+0x98>)
 80120d2:	2201      	movs	r2, #1
 80120d4:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80120d6:	4b10      	ldr	r3, [pc, #64]	@ (8012118 <USBD_LL_Init+0x98>)
 80120d8:	2201      	movs	r2, #1
 80120da:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80120dc:	4b0e      	ldr	r3, [pc, #56]	@ (8012118 <USBD_LL_Init+0x98>)
 80120de:	2200      	movs	r2, #0
 80120e0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80120e2:	480d      	ldr	r0, [pc, #52]	@ (8012118 <USBD_LL_Init+0x98>)
 80120e4:	f7f4 fcf0 	bl	8006ac8 <HAL_PCD_Init>
 80120e8:	4603      	mov	r3, r0
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d001      	beq.n	80120f2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80120ee:	f7ef f916 	bl	800131e <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80120f2:	2180      	movs	r1, #128	@ 0x80
 80120f4:	4808      	ldr	r0, [pc, #32]	@ (8012118 <USBD_LL_Init+0x98>)
 80120f6:	f7f5 ff44 	bl	8007f82 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80120fa:	2240      	movs	r2, #64	@ 0x40
 80120fc:	2100      	movs	r1, #0
 80120fe:	4806      	ldr	r0, [pc, #24]	@ (8012118 <USBD_LL_Init+0x98>)
 8012100:	f7f5 fef8 	bl	8007ef4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8012104:	2280      	movs	r2, #128	@ 0x80
 8012106:	2101      	movs	r1, #1
 8012108:	4803      	ldr	r0, [pc, #12]	@ (8012118 <USBD_LL_Init+0x98>)
 801210a:	f7f5 fef3 	bl	8007ef4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 801210e:	2300      	movs	r3, #0
}
 8012110:	4618      	mov	r0, r3
 8012112:	3708      	adds	r7, #8
 8012114:	46bd      	mov	sp, r7
 8012116:	bd80      	pop	{r7, pc}
 8012118:	24001f28 	.word	0x24001f28
 801211c:	40080000 	.word	0x40080000

08012120 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012120:	b580      	push	{r7, lr}
 8012122:	b084      	sub	sp, #16
 8012124:	af00      	add	r7, sp, #0
 8012126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012128:	2300      	movs	r3, #0
 801212a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801212c:	2300      	movs	r3, #0
 801212e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012136:	4618      	mov	r0, r3
 8012138:	f7f4 fdd2 	bl	8006ce0 <HAL_PCD_Start>
 801213c:	4603      	mov	r3, r0
 801213e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012140:	7bfb      	ldrb	r3, [r7, #15]
 8012142:	4618      	mov	r0, r3
 8012144:	f000 f942 	bl	80123cc <USBD_Get_USB_Status>
 8012148:	4603      	mov	r3, r0
 801214a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801214c:	7bbb      	ldrb	r3, [r7, #14]
}
 801214e:	4618      	mov	r0, r3
 8012150:	3710      	adds	r7, #16
 8012152:	46bd      	mov	sp, r7
 8012154:	bd80      	pop	{r7, pc}

08012156 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012156:	b580      	push	{r7, lr}
 8012158:	b084      	sub	sp, #16
 801215a:	af00      	add	r7, sp, #0
 801215c:	6078      	str	r0, [r7, #4]
 801215e:	4608      	mov	r0, r1
 8012160:	4611      	mov	r1, r2
 8012162:	461a      	mov	r2, r3
 8012164:	4603      	mov	r3, r0
 8012166:	70fb      	strb	r3, [r7, #3]
 8012168:	460b      	mov	r3, r1
 801216a:	70bb      	strb	r3, [r7, #2]
 801216c:	4613      	mov	r3, r2
 801216e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012170:	2300      	movs	r3, #0
 8012172:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012174:	2300      	movs	r3, #0
 8012176:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801217e:	78bb      	ldrb	r3, [r7, #2]
 8012180:	883a      	ldrh	r2, [r7, #0]
 8012182:	78f9      	ldrb	r1, [r7, #3]
 8012184:	f7f5 fad3 	bl	800772e <HAL_PCD_EP_Open>
 8012188:	4603      	mov	r3, r0
 801218a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801218c:	7bfb      	ldrb	r3, [r7, #15]
 801218e:	4618      	mov	r0, r3
 8012190:	f000 f91c 	bl	80123cc <USBD_Get_USB_Status>
 8012194:	4603      	mov	r3, r0
 8012196:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012198:	7bbb      	ldrb	r3, [r7, #14]
}
 801219a:	4618      	mov	r0, r3
 801219c:	3710      	adds	r7, #16
 801219e:	46bd      	mov	sp, r7
 80121a0:	bd80      	pop	{r7, pc}

080121a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80121a2:	b580      	push	{r7, lr}
 80121a4:	b084      	sub	sp, #16
 80121a6:	af00      	add	r7, sp, #0
 80121a8:	6078      	str	r0, [r7, #4]
 80121aa:	460b      	mov	r3, r1
 80121ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80121ae:	2300      	movs	r3, #0
 80121b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80121b2:	2300      	movs	r3, #0
 80121b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80121bc:	78fa      	ldrb	r2, [r7, #3]
 80121be:	4611      	mov	r1, r2
 80121c0:	4618      	mov	r0, r3
 80121c2:	f7f5 fb1c 	bl	80077fe <HAL_PCD_EP_Close>
 80121c6:	4603      	mov	r3, r0
 80121c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80121ca:	7bfb      	ldrb	r3, [r7, #15]
 80121cc:	4618      	mov	r0, r3
 80121ce:	f000 f8fd 	bl	80123cc <USBD_Get_USB_Status>
 80121d2:	4603      	mov	r3, r0
 80121d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80121d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80121d8:	4618      	mov	r0, r3
 80121da:	3710      	adds	r7, #16
 80121dc:	46bd      	mov	sp, r7
 80121de:	bd80      	pop	{r7, pc}

080121e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b084      	sub	sp, #16
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	6078      	str	r0, [r7, #4]
 80121e8:	460b      	mov	r3, r1
 80121ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80121ec:	2300      	movs	r3, #0
 80121ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80121f0:	2300      	movs	r3, #0
 80121f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80121fa:	78fa      	ldrb	r2, [r7, #3]
 80121fc:	4611      	mov	r1, r2
 80121fe:	4618      	mov	r0, r3
 8012200:	f7f5 fbd4 	bl	80079ac <HAL_PCD_EP_SetStall>
 8012204:	4603      	mov	r3, r0
 8012206:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012208:	7bfb      	ldrb	r3, [r7, #15]
 801220a:	4618      	mov	r0, r3
 801220c:	f000 f8de 	bl	80123cc <USBD_Get_USB_Status>
 8012210:	4603      	mov	r3, r0
 8012212:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012214:	7bbb      	ldrb	r3, [r7, #14]
}
 8012216:	4618      	mov	r0, r3
 8012218:	3710      	adds	r7, #16
 801221a:	46bd      	mov	sp, r7
 801221c:	bd80      	pop	{r7, pc}

0801221e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801221e:	b580      	push	{r7, lr}
 8012220:	b084      	sub	sp, #16
 8012222:	af00      	add	r7, sp, #0
 8012224:	6078      	str	r0, [r7, #4]
 8012226:	460b      	mov	r3, r1
 8012228:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801222a:	2300      	movs	r3, #0
 801222c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801222e:	2300      	movs	r3, #0
 8012230:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012238:	78fa      	ldrb	r2, [r7, #3]
 801223a:	4611      	mov	r1, r2
 801223c:	4618      	mov	r0, r3
 801223e:	f7f5 fc18 	bl	8007a72 <HAL_PCD_EP_ClrStall>
 8012242:	4603      	mov	r3, r0
 8012244:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012246:	7bfb      	ldrb	r3, [r7, #15]
 8012248:	4618      	mov	r0, r3
 801224a:	f000 f8bf 	bl	80123cc <USBD_Get_USB_Status>
 801224e:	4603      	mov	r3, r0
 8012250:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012252:	7bbb      	ldrb	r3, [r7, #14]
}
 8012254:	4618      	mov	r0, r3
 8012256:	3710      	adds	r7, #16
 8012258:	46bd      	mov	sp, r7
 801225a:	bd80      	pop	{r7, pc}

0801225c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801225c:	b480      	push	{r7}
 801225e:	b085      	sub	sp, #20
 8012260:	af00      	add	r7, sp, #0
 8012262:	6078      	str	r0, [r7, #4]
 8012264:	460b      	mov	r3, r1
 8012266:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801226e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012270:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012274:	2b00      	cmp	r3, #0
 8012276:	da0b      	bge.n	8012290 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012278:	78fb      	ldrb	r3, [r7, #3]
 801227a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801227e:	68f9      	ldr	r1, [r7, #12]
 8012280:	4613      	mov	r3, r2
 8012282:	00db      	lsls	r3, r3, #3
 8012284:	4413      	add	r3, r2
 8012286:	009b      	lsls	r3, r3, #2
 8012288:	440b      	add	r3, r1
 801228a:	3316      	adds	r3, #22
 801228c:	781b      	ldrb	r3, [r3, #0]
 801228e:	e00b      	b.n	80122a8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012290:	78fb      	ldrb	r3, [r7, #3]
 8012292:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012296:	68f9      	ldr	r1, [r7, #12]
 8012298:	4613      	mov	r3, r2
 801229a:	00db      	lsls	r3, r3, #3
 801229c:	4413      	add	r3, r2
 801229e:	009b      	lsls	r3, r3, #2
 80122a0:	440b      	add	r3, r1
 80122a2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80122a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80122a8:	4618      	mov	r0, r3
 80122aa:	3714      	adds	r7, #20
 80122ac:	46bd      	mov	sp, r7
 80122ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b2:	4770      	bx	lr

080122b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b084      	sub	sp, #16
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	6078      	str	r0, [r7, #4]
 80122bc:	460b      	mov	r3, r1
 80122be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80122c0:	2300      	movs	r3, #0
 80122c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80122c4:	2300      	movs	r3, #0
 80122c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80122ce:	78fa      	ldrb	r2, [r7, #3]
 80122d0:	4611      	mov	r1, r2
 80122d2:	4618      	mov	r0, r3
 80122d4:	f7f5 fa07 	bl	80076e6 <HAL_PCD_SetAddress>
 80122d8:	4603      	mov	r3, r0
 80122da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80122dc:	7bfb      	ldrb	r3, [r7, #15]
 80122de:	4618      	mov	r0, r3
 80122e0:	f000 f874 	bl	80123cc <USBD_Get_USB_Status>
 80122e4:	4603      	mov	r3, r0
 80122e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80122e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80122ea:	4618      	mov	r0, r3
 80122ec:	3710      	adds	r7, #16
 80122ee:	46bd      	mov	sp, r7
 80122f0:	bd80      	pop	{r7, pc}

080122f2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80122f2:	b580      	push	{r7, lr}
 80122f4:	b086      	sub	sp, #24
 80122f6:	af00      	add	r7, sp, #0
 80122f8:	60f8      	str	r0, [r7, #12]
 80122fa:	607a      	str	r2, [r7, #4]
 80122fc:	603b      	str	r3, [r7, #0]
 80122fe:	460b      	mov	r3, r1
 8012300:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012302:	2300      	movs	r3, #0
 8012304:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012306:	2300      	movs	r3, #0
 8012308:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012310:	7af9      	ldrb	r1, [r7, #11]
 8012312:	683b      	ldr	r3, [r7, #0]
 8012314:	687a      	ldr	r2, [r7, #4]
 8012316:	f7f5 fb0f 	bl	8007938 <HAL_PCD_EP_Transmit>
 801231a:	4603      	mov	r3, r0
 801231c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801231e:	7dfb      	ldrb	r3, [r7, #23]
 8012320:	4618      	mov	r0, r3
 8012322:	f000 f853 	bl	80123cc <USBD_Get_USB_Status>
 8012326:	4603      	mov	r3, r0
 8012328:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801232a:	7dbb      	ldrb	r3, [r7, #22]
}
 801232c:	4618      	mov	r0, r3
 801232e:	3718      	adds	r7, #24
 8012330:	46bd      	mov	sp, r7
 8012332:	bd80      	pop	{r7, pc}

08012334 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012334:	b580      	push	{r7, lr}
 8012336:	b086      	sub	sp, #24
 8012338:	af00      	add	r7, sp, #0
 801233a:	60f8      	str	r0, [r7, #12]
 801233c:	607a      	str	r2, [r7, #4]
 801233e:	603b      	str	r3, [r7, #0]
 8012340:	460b      	mov	r3, r1
 8012342:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012344:	2300      	movs	r3, #0
 8012346:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012348:	2300      	movs	r3, #0
 801234a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012352:	7af9      	ldrb	r1, [r7, #11]
 8012354:	683b      	ldr	r3, [r7, #0]
 8012356:	687a      	ldr	r2, [r7, #4]
 8012358:	f7f5 fa9b 	bl	8007892 <HAL_PCD_EP_Receive>
 801235c:	4603      	mov	r3, r0
 801235e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012360:	7dfb      	ldrb	r3, [r7, #23]
 8012362:	4618      	mov	r0, r3
 8012364:	f000 f832 	bl	80123cc <USBD_Get_USB_Status>
 8012368:	4603      	mov	r3, r0
 801236a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801236c:	7dbb      	ldrb	r3, [r7, #22]
}
 801236e:	4618      	mov	r0, r3
 8012370:	3718      	adds	r7, #24
 8012372:	46bd      	mov	sp, r7
 8012374:	bd80      	pop	{r7, pc}

08012376 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012376:	b580      	push	{r7, lr}
 8012378:	b082      	sub	sp, #8
 801237a:	af00      	add	r7, sp, #0
 801237c:	6078      	str	r0, [r7, #4]
 801237e:	460b      	mov	r3, r1
 8012380:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012388:	78fa      	ldrb	r2, [r7, #3]
 801238a:	4611      	mov	r1, r2
 801238c:	4618      	mov	r0, r3
 801238e:	f7f5 fabb 	bl	8007908 <HAL_PCD_EP_GetRxCount>
 8012392:	4603      	mov	r3, r0
}
 8012394:	4618      	mov	r0, r3
 8012396:	3708      	adds	r7, #8
 8012398:	46bd      	mov	sp, r7
 801239a:	bd80      	pop	{r7, pc}

0801239c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801239c:	b480      	push	{r7}
 801239e:	b083      	sub	sp, #12
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80123a4:	4b03      	ldr	r3, [pc, #12]	@ (80123b4 <USBD_static_malloc+0x18>)
}
 80123a6:	4618      	mov	r0, r3
 80123a8:	370c      	adds	r7, #12
 80123aa:	46bd      	mov	sp, r7
 80123ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b0:	4770      	bx	lr
 80123b2:	bf00      	nop
 80123b4:	2400240c 	.word	0x2400240c

080123b8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80123b8:	b480      	push	{r7}
 80123ba:	b083      	sub	sp, #12
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80123c0:	bf00      	nop
 80123c2:	370c      	adds	r7, #12
 80123c4:	46bd      	mov	sp, r7
 80123c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ca:	4770      	bx	lr

080123cc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80123cc:	b480      	push	{r7}
 80123ce:	b085      	sub	sp, #20
 80123d0:	af00      	add	r7, sp, #0
 80123d2:	4603      	mov	r3, r0
 80123d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80123d6:	2300      	movs	r3, #0
 80123d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80123da:	79fb      	ldrb	r3, [r7, #7]
 80123dc:	2b03      	cmp	r3, #3
 80123de:	d817      	bhi.n	8012410 <USBD_Get_USB_Status+0x44>
 80123e0:	a201      	add	r2, pc, #4	@ (adr r2, 80123e8 <USBD_Get_USB_Status+0x1c>)
 80123e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123e6:	bf00      	nop
 80123e8:	080123f9 	.word	0x080123f9
 80123ec:	080123ff 	.word	0x080123ff
 80123f0:	08012405 	.word	0x08012405
 80123f4:	0801240b 	.word	0x0801240b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80123f8:	2300      	movs	r3, #0
 80123fa:	73fb      	strb	r3, [r7, #15]
    break;
 80123fc:	e00b      	b.n	8012416 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80123fe:	2303      	movs	r3, #3
 8012400:	73fb      	strb	r3, [r7, #15]
    break;
 8012402:	e008      	b.n	8012416 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012404:	2301      	movs	r3, #1
 8012406:	73fb      	strb	r3, [r7, #15]
    break;
 8012408:	e005      	b.n	8012416 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801240a:	2303      	movs	r3, #3
 801240c:	73fb      	strb	r3, [r7, #15]
    break;
 801240e:	e002      	b.n	8012416 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012410:	2303      	movs	r3, #3
 8012412:	73fb      	strb	r3, [r7, #15]
    break;
 8012414:	bf00      	nop
  }
  return usb_status;
 8012416:	7bfb      	ldrb	r3, [r7, #15]
}
 8012418:	4618      	mov	r0, r3
 801241a:	3714      	adds	r7, #20
 801241c:	46bd      	mov	sp, r7
 801241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012422:	4770      	bx	lr

08012424 <__cvt>:
 8012424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012426:	ed2d 8b02 	vpush	{d8}
 801242a:	eeb0 8b40 	vmov.f64	d8, d0
 801242e:	b085      	sub	sp, #20
 8012430:	4617      	mov	r7, r2
 8012432:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8012434:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012436:	ee18 2a90 	vmov	r2, s17
 801243a:	f025 0520 	bic.w	r5, r5, #32
 801243e:	2a00      	cmp	r2, #0
 8012440:	bfb6      	itet	lt
 8012442:	222d      	movlt	r2, #45	@ 0x2d
 8012444:	2200      	movge	r2, #0
 8012446:	eeb1 8b40 	vneglt.f64	d8, d0
 801244a:	2d46      	cmp	r5, #70	@ 0x46
 801244c:	460c      	mov	r4, r1
 801244e:	701a      	strb	r2, [r3, #0]
 8012450:	d004      	beq.n	801245c <__cvt+0x38>
 8012452:	2d45      	cmp	r5, #69	@ 0x45
 8012454:	d100      	bne.n	8012458 <__cvt+0x34>
 8012456:	3401      	adds	r4, #1
 8012458:	2102      	movs	r1, #2
 801245a:	e000      	b.n	801245e <__cvt+0x3a>
 801245c:	2103      	movs	r1, #3
 801245e:	ab03      	add	r3, sp, #12
 8012460:	9301      	str	r3, [sp, #4]
 8012462:	ab02      	add	r3, sp, #8
 8012464:	9300      	str	r3, [sp, #0]
 8012466:	4622      	mov	r2, r4
 8012468:	4633      	mov	r3, r6
 801246a:	eeb0 0b48 	vmov.f64	d0, d8
 801246e:	f000 fe3f 	bl	80130f0 <_dtoa_r>
 8012472:	2d47      	cmp	r5, #71	@ 0x47
 8012474:	d114      	bne.n	80124a0 <__cvt+0x7c>
 8012476:	07fb      	lsls	r3, r7, #31
 8012478:	d50a      	bpl.n	8012490 <__cvt+0x6c>
 801247a:	1902      	adds	r2, r0, r4
 801247c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012484:	bf08      	it	eq
 8012486:	9203      	streq	r2, [sp, #12]
 8012488:	2130      	movs	r1, #48	@ 0x30
 801248a:	9b03      	ldr	r3, [sp, #12]
 801248c:	4293      	cmp	r3, r2
 801248e:	d319      	bcc.n	80124c4 <__cvt+0xa0>
 8012490:	9b03      	ldr	r3, [sp, #12]
 8012492:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012494:	1a1b      	subs	r3, r3, r0
 8012496:	6013      	str	r3, [r2, #0]
 8012498:	b005      	add	sp, #20
 801249a:	ecbd 8b02 	vpop	{d8}
 801249e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124a0:	2d46      	cmp	r5, #70	@ 0x46
 80124a2:	eb00 0204 	add.w	r2, r0, r4
 80124a6:	d1e9      	bne.n	801247c <__cvt+0x58>
 80124a8:	7803      	ldrb	r3, [r0, #0]
 80124aa:	2b30      	cmp	r3, #48	@ 0x30
 80124ac:	d107      	bne.n	80124be <__cvt+0x9a>
 80124ae:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80124b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124b6:	bf1c      	itt	ne
 80124b8:	f1c4 0401 	rsbne	r4, r4, #1
 80124bc:	6034      	strne	r4, [r6, #0]
 80124be:	6833      	ldr	r3, [r6, #0]
 80124c0:	441a      	add	r2, r3
 80124c2:	e7db      	b.n	801247c <__cvt+0x58>
 80124c4:	1c5c      	adds	r4, r3, #1
 80124c6:	9403      	str	r4, [sp, #12]
 80124c8:	7019      	strb	r1, [r3, #0]
 80124ca:	e7de      	b.n	801248a <__cvt+0x66>

080124cc <__exponent>:
 80124cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80124ce:	2900      	cmp	r1, #0
 80124d0:	bfba      	itte	lt
 80124d2:	4249      	neglt	r1, r1
 80124d4:	232d      	movlt	r3, #45	@ 0x2d
 80124d6:	232b      	movge	r3, #43	@ 0x2b
 80124d8:	2909      	cmp	r1, #9
 80124da:	7002      	strb	r2, [r0, #0]
 80124dc:	7043      	strb	r3, [r0, #1]
 80124de:	dd29      	ble.n	8012534 <__exponent+0x68>
 80124e0:	f10d 0307 	add.w	r3, sp, #7
 80124e4:	461d      	mov	r5, r3
 80124e6:	270a      	movs	r7, #10
 80124e8:	461a      	mov	r2, r3
 80124ea:	fbb1 f6f7 	udiv	r6, r1, r7
 80124ee:	fb07 1416 	mls	r4, r7, r6, r1
 80124f2:	3430      	adds	r4, #48	@ 0x30
 80124f4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80124f8:	460c      	mov	r4, r1
 80124fa:	2c63      	cmp	r4, #99	@ 0x63
 80124fc:	f103 33ff 	add.w	r3, r3, #4294967295
 8012500:	4631      	mov	r1, r6
 8012502:	dcf1      	bgt.n	80124e8 <__exponent+0x1c>
 8012504:	3130      	adds	r1, #48	@ 0x30
 8012506:	1e94      	subs	r4, r2, #2
 8012508:	f803 1c01 	strb.w	r1, [r3, #-1]
 801250c:	1c41      	adds	r1, r0, #1
 801250e:	4623      	mov	r3, r4
 8012510:	42ab      	cmp	r3, r5
 8012512:	d30a      	bcc.n	801252a <__exponent+0x5e>
 8012514:	f10d 0309 	add.w	r3, sp, #9
 8012518:	1a9b      	subs	r3, r3, r2
 801251a:	42ac      	cmp	r4, r5
 801251c:	bf88      	it	hi
 801251e:	2300      	movhi	r3, #0
 8012520:	3302      	adds	r3, #2
 8012522:	4403      	add	r3, r0
 8012524:	1a18      	subs	r0, r3, r0
 8012526:	b003      	add	sp, #12
 8012528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801252a:	f813 6b01 	ldrb.w	r6, [r3], #1
 801252e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8012532:	e7ed      	b.n	8012510 <__exponent+0x44>
 8012534:	2330      	movs	r3, #48	@ 0x30
 8012536:	3130      	adds	r1, #48	@ 0x30
 8012538:	7083      	strb	r3, [r0, #2]
 801253a:	70c1      	strb	r1, [r0, #3]
 801253c:	1d03      	adds	r3, r0, #4
 801253e:	e7f1      	b.n	8012524 <__exponent+0x58>

08012540 <_printf_float>:
 8012540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012544:	b08d      	sub	sp, #52	@ 0x34
 8012546:	460c      	mov	r4, r1
 8012548:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801254c:	4616      	mov	r6, r2
 801254e:	461f      	mov	r7, r3
 8012550:	4605      	mov	r5, r0
 8012552:	f000 fccb 	bl	8012eec <_localeconv_r>
 8012556:	f8d0 b000 	ldr.w	fp, [r0]
 801255a:	4658      	mov	r0, fp
 801255c:	f7ed ff10 	bl	8000380 <strlen>
 8012560:	2300      	movs	r3, #0
 8012562:	930a      	str	r3, [sp, #40]	@ 0x28
 8012564:	f8d8 3000 	ldr.w	r3, [r8]
 8012568:	f894 9018 	ldrb.w	r9, [r4, #24]
 801256c:	6822      	ldr	r2, [r4, #0]
 801256e:	9005      	str	r0, [sp, #20]
 8012570:	3307      	adds	r3, #7
 8012572:	f023 0307 	bic.w	r3, r3, #7
 8012576:	f103 0108 	add.w	r1, r3, #8
 801257a:	f8c8 1000 	str.w	r1, [r8]
 801257e:	ed93 0b00 	vldr	d0, [r3]
 8012582:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80127e0 <_printf_float+0x2a0>
 8012586:	eeb0 7bc0 	vabs.f64	d7, d0
 801258a:	eeb4 7b46 	vcmp.f64	d7, d6
 801258e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012592:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8012596:	dd24      	ble.n	80125e2 <_printf_float+0xa2>
 8012598:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801259c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125a0:	d502      	bpl.n	80125a8 <_printf_float+0x68>
 80125a2:	232d      	movs	r3, #45	@ 0x2d
 80125a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80125a8:	498f      	ldr	r1, [pc, #572]	@ (80127e8 <_printf_float+0x2a8>)
 80125aa:	4b90      	ldr	r3, [pc, #576]	@ (80127ec <_printf_float+0x2ac>)
 80125ac:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80125b0:	bf94      	ite	ls
 80125b2:	4688      	movls	r8, r1
 80125b4:	4698      	movhi	r8, r3
 80125b6:	f022 0204 	bic.w	r2, r2, #4
 80125ba:	2303      	movs	r3, #3
 80125bc:	6123      	str	r3, [r4, #16]
 80125be:	6022      	str	r2, [r4, #0]
 80125c0:	f04f 0a00 	mov.w	sl, #0
 80125c4:	9700      	str	r7, [sp, #0]
 80125c6:	4633      	mov	r3, r6
 80125c8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80125ca:	4621      	mov	r1, r4
 80125cc:	4628      	mov	r0, r5
 80125ce:	f000 f9d1 	bl	8012974 <_printf_common>
 80125d2:	3001      	adds	r0, #1
 80125d4:	f040 8089 	bne.w	80126ea <_printf_float+0x1aa>
 80125d8:	f04f 30ff 	mov.w	r0, #4294967295
 80125dc:	b00d      	add	sp, #52	@ 0x34
 80125de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125e2:	eeb4 0b40 	vcmp.f64	d0, d0
 80125e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125ea:	d709      	bvc.n	8012600 <_printf_float+0xc0>
 80125ec:	ee10 3a90 	vmov	r3, s1
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	bfbc      	itt	lt
 80125f4:	232d      	movlt	r3, #45	@ 0x2d
 80125f6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80125fa:	497d      	ldr	r1, [pc, #500]	@ (80127f0 <_printf_float+0x2b0>)
 80125fc:	4b7d      	ldr	r3, [pc, #500]	@ (80127f4 <_printf_float+0x2b4>)
 80125fe:	e7d5      	b.n	80125ac <_printf_float+0x6c>
 8012600:	6863      	ldr	r3, [r4, #4]
 8012602:	1c59      	adds	r1, r3, #1
 8012604:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8012608:	d139      	bne.n	801267e <_printf_float+0x13e>
 801260a:	2306      	movs	r3, #6
 801260c:	6063      	str	r3, [r4, #4]
 801260e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8012612:	2300      	movs	r3, #0
 8012614:	6022      	str	r2, [r4, #0]
 8012616:	9303      	str	r3, [sp, #12]
 8012618:	ab0a      	add	r3, sp, #40	@ 0x28
 801261a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801261e:	ab09      	add	r3, sp, #36	@ 0x24
 8012620:	9300      	str	r3, [sp, #0]
 8012622:	6861      	ldr	r1, [r4, #4]
 8012624:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8012628:	4628      	mov	r0, r5
 801262a:	f7ff fefb 	bl	8012424 <__cvt>
 801262e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012632:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012634:	4680      	mov	r8, r0
 8012636:	d129      	bne.n	801268c <_printf_float+0x14c>
 8012638:	1cc8      	adds	r0, r1, #3
 801263a:	db02      	blt.n	8012642 <_printf_float+0x102>
 801263c:	6863      	ldr	r3, [r4, #4]
 801263e:	4299      	cmp	r1, r3
 8012640:	dd41      	ble.n	80126c6 <_printf_float+0x186>
 8012642:	f1a9 0902 	sub.w	r9, r9, #2
 8012646:	fa5f f989 	uxtb.w	r9, r9
 801264a:	3901      	subs	r1, #1
 801264c:	464a      	mov	r2, r9
 801264e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8012652:	9109      	str	r1, [sp, #36]	@ 0x24
 8012654:	f7ff ff3a 	bl	80124cc <__exponent>
 8012658:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801265a:	1813      	adds	r3, r2, r0
 801265c:	2a01      	cmp	r2, #1
 801265e:	4682      	mov	sl, r0
 8012660:	6123      	str	r3, [r4, #16]
 8012662:	dc02      	bgt.n	801266a <_printf_float+0x12a>
 8012664:	6822      	ldr	r2, [r4, #0]
 8012666:	07d2      	lsls	r2, r2, #31
 8012668:	d501      	bpl.n	801266e <_printf_float+0x12e>
 801266a:	3301      	adds	r3, #1
 801266c:	6123      	str	r3, [r4, #16]
 801266e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8012672:	2b00      	cmp	r3, #0
 8012674:	d0a6      	beq.n	80125c4 <_printf_float+0x84>
 8012676:	232d      	movs	r3, #45	@ 0x2d
 8012678:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801267c:	e7a2      	b.n	80125c4 <_printf_float+0x84>
 801267e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012682:	d1c4      	bne.n	801260e <_printf_float+0xce>
 8012684:	2b00      	cmp	r3, #0
 8012686:	d1c2      	bne.n	801260e <_printf_float+0xce>
 8012688:	2301      	movs	r3, #1
 801268a:	e7bf      	b.n	801260c <_printf_float+0xcc>
 801268c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8012690:	d9db      	bls.n	801264a <_printf_float+0x10a>
 8012692:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8012696:	d118      	bne.n	80126ca <_printf_float+0x18a>
 8012698:	2900      	cmp	r1, #0
 801269a:	6863      	ldr	r3, [r4, #4]
 801269c:	dd0b      	ble.n	80126b6 <_printf_float+0x176>
 801269e:	6121      	str	r1, [r4, #16]
 80126a0:	b913      	cbnz	r3, 80126a8 <_printf_float+0x168>
 80126a2:	6822      	ldr	r2, [r4, #0]
 80126a4:	07d0      	lsls	r0, r2, #31
 80126a6:	d502      	bpl.n	80126ae <_printf_float+0x16e>
 80126a8:	3301      	adds	r3, #1
 80126aa:	440b      	add	r3, r1
 80126ac:	6123      	str	r3, [r4, #16]
 80126ae:	65a1      	str	r1, [r4, #88]	@ 0x58
 80126b0:	f04f 0a00 	mov.w	sl, #0
 80126b4:	e7db      	b.n	801266e <_printf_float+0x12e>
 80126b6:	b913      	cbnz	r3, 80126be <_printf_float+0x17e>
 80126b8:	6822      	ldr	r2, [r4, #0]
 80126ba:	07d2      	lsls	r2, r2, #31
 80126bc:	d501      	bpl.n	80126c2 <_printf_float+0x182>
 80126be:	3302      	adds	r3, #2
 80126c0:	e7f4      	b.n	80126ac <_printf_float+0x16c>
 80126c2:	2301      	movs	r3, #1
 80126c4:	e7f2      	b.n	80126ac <_printf_float+0x16c>
 80126c6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80126ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80126cc:	4299      	cmp	r1, r3
 80126ce:	db05      	blt.n	80126dc <_printf_float+0x19c>
 80126d0:	6823      	ldr	r3, [r4, #0]
 80126d2:	6121      	str	r1, [r4, #16]
 80126d4:	07d8      	lsls	r0, r3, #31
 80126d6:	d5ea      	bpl.n	80126ae <_printf_float+0x16e>
 80126d8:	1c4b      	adds	r3, r1, #1
 80126da:	e7e7      	b.n	80126ac <_printf_float+0x16c>
 80126dc:	2900      	cmp	r1, #0
 80126de:	bfd4      	ite	le
 80126e0:	f1c1 0202 	rsble	r2, r1, #2
 80126e4:	2201      	movgt	r2, #1
 80126e6:	4413      	add	r3, r2
 80126e8:	e7e0      	b.n	80126ac <_printf_float+0x16c>
 80126ea:	6823      	ldr	r3, [r4, #0]
 80126ec:	055a      	lsls	r2, r3, #21
 80126ee:	d407      	bmi.n	8012700 <_printf_float+0x1c0>
 80126f0:	6923      	ldr	r3, [r4, #16]
 80126f2:	4642      	mov	r2, r8
 80126f4:	4631      	mov	r1, r6
 80126f6:	4628      	mov	r0, r5
 80126f8:	47b8      	blx	r7
 80126fa:	3001      	adds	r0, #1
 80126fc:	d12a      	bne.n	8012754 <_printf_float+0x214>
 80126fe:	e76b      	b.n	80125d8 <_printf_float+0x98>
 8012700:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8012704:	f240 80e0 	bls.w	80128c8 <_printf_float+0x388>
 8012708:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801270c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012714:	d133      	bne.n	801277e <_printf_float+0x23e>
 8012716:	4a38      	ldr	r2, [pc, #224]	@ (80127f8 <_printf_float+0x2b8>)
 8012718:	2301      	movs	r3, #1
 801271a:	4631      	mov	r1, r6
 801271c:	4628      	mov	r0, r5
 801271e:	47b8      	blx	r7
 8012720:	3001      	adds	r0, #1
 8012722:	f43f af59 	beq.w	80125d8 <_printf_float+0x98>
 8012726:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801272a:	4543      	cmp	r3, r8
 801272c:	db02      	blt.n	8012734 <_printf_float+0x1f4>
 801272e:	6823      	ldr	r3, [r4, #0]
 8012730:	07d8      	lsls	r0, r3, #31
 8012732:	d50f      	bpl.n	8012754 <_printf_float+0x214>
 8012734:	9b05      	ldr	r3, [sp, #20]
 8012736:	465a      	mov	r2, fp
 8012738:	4631      	mov	r1, r6
 801273a:	4628      	mov	r0, r5
 801273c:	47b8      	blx	r7
 801273e:	3001      	adds	r0, #1
 8012740:	f43f af4a 	beq.w	80125d8 <_printf_float+0x98>
 8012744:	f04f 0900 	mov.w	r9, #0
 8012748:	f108 38ff 	add.w	r8, r8, #4294967295
 801274c:	f104 0a1a 	add.w	sl, r4, #26
 8012750:	45c8      	cmp	r8, r9
 8012752:	dc09      	bgt.n	8012768 <_printf_float+0x228>
 8012754:	6823      	ldr	r3, [r4, #0]
 8012756:	079b      	lsls	r3, r3, #30
 8012758:	f100 8107 	bmi.w	801296a <_printf_float+0x42a>
 801275c:	68e0      	ldr	r0, [r4, #12]
 801275e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012760:	4298      	cmp	r0, r3
 8012762:	bfb8      	it	lt
 8012764:	4618      	movlt	r0, r3
 8012766:	e739      	b.n	80125dc <_printf_float+0x9c>
 8012768:	2301      	movs	r3, #1
 801276a:	4652      	mov	r2, sl
 801276c:	4631      	mov	r1, r6
 801276e:	4628      	mov	r0, r5
 8012770:	47b8      	blx	r7
 8012772:	3001      	adds	r0, #1
 8012774:	f43f af30 	beq.w	80125d8 <_printf_float+0x98>
 8012778:	f109 0901 	add.w	r9, r9, #1
 801277c:	e7e8      	b.n	8012750 <_printf_float+0x210>
 801277e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012780:	2b00      	cmp	r3, #0
 8012782:	dc3b      	bgt.n	80127fc <_printf_float+0x2bc>
 8012784:	4a1c      	ldr	r2, [pc, #112]	@ (80127f8 <_printf_float+0x2b8>)
 8012786:	2301      	movs	r3, #1
 8012788:	4631      	mov	r1, r6
 801278a:	4628      	mov	r0, r5
 801278c:	47b8      	blx	r7
 801278e:	3001      	adds	r0, #1
 8012790:	f43f af22 	beq.w	80125d8 <_printf_float+0x98>
 8012794:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012798:	ea59 0303 	orrs.w	r3, r9, r3
 801279c:	d102      	bne.n	80127a4 <_printf_float+0x264>
 801279e:	6823      	ldr	r3, [r4, #0]
 80127a0:	07d9      	lsls	r1, r3, #31
 80127a2:	d5d7      	bpl.n	8012754 <_printf_float+0x214>
 80127a4:	9b05      	ldr	r3, [sp, #20]
 80127a6:	465a      	mov	r2, fp
 80127a8:	4631      	mov	r1, r6
 80127aa:	4628      	mov	r0, r5
 80127ac:	47b8      	blx	r7
 80127ae:	3001      	adds	r0, #1
 80127b0:	f43f af12 	beq.w	80125d8 <_printf_float+0x98>
 80127b4:	f04f 0a00 	mov.w	sl, #0
 80127b8:	f104 0b1a 	add.w	fp, r4, #26
 80127bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80127be:	425b      	negs	r3, r3
 80127c0:	4553      	cmp	r3, sl
 80127c2:	dc01      	bgt.n	80127c8 <_printf_float+0x288>
 80127c4:	464b      	mov	r3, r9
 80127c6:	e794      	b.n	80126f2 <_printf_float+0x1b2>
 80127c8:	2301      	movs	r3, #1
 80127ca:	465a      	mov	r2, fp
 80127cc:	4631      	mov	r1, r6
 80127ce:	4628      	mov	r0, r5
 80127d0:	47b8      	blx	r7
 80127d2:	3001      	adds	r0, #1
 80127d4:	f43f af00 	beq.w	80125d8 <_printf_float+0x98>
 80127d8:	f10a 0a01 	add.w	sl, sl, #1
 80127dc:	e7ee      	b.n	80127bc <_printf_float+0x27c>
 80127de:	bf00      	nop
 80127e0:	ffffffff 	.word	0xffffffff
 80127e4:	7fefffff 	.word	0x7fefffff
 80127e8:	080150f0 	.word	0x080150f0
 80127ec:	080150f4 	.word	0x080150f4
 80127f0:	080150f8 	.word	0x080150f8
 80127f4:	080150fc 	.word	0x080150fc
 80127f8:	08015100 	.word	0x08015100
 80127fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80127fe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012802:	4553      	cmp	r3, sl
 8012804:	bfa8      	it	ge
 8012806:	4653      	movge	r3, sl
 8012808:	2b00      	cmp	r3, #0
 801280a:	4699      	mov	r9, r3
 801280c:	dc37      	bgt.n	801287e <_printf_float+0x33e>
 801280e:	2300      	movs	r3, #0
 8012810:	9307      	str	r3, [sp, #28]
 8012812:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012816:	f104 021a 	add.w	r2, r4, #26
 801281a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801281c:	9907      	ldr	r1, [sp, #28]
 801281e:	9306      	str	r3, [sp, #24]
 8012820:	eba3 0309 	sub.w	r3, r3, r9
 8012824:	428b      	cmp	r3, r1
 8012826:	dc31      	bgt.n	801288c <_printf_float+0x34c>
 8012828:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801282a:	459a      	cmp	sl, r3
 801282c:	dc3b      	bgt.n	80128a6 <_printf_float+0x366>
 801282e:	6823      	ldr	r3, [r4, #0]
 8012830:	07da      	lsls	r2, r3, #31
 8012832:	d438      	bmi.n	80128a6 <_printf_float+0x366>
 8012834:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012836:	ebaa 0903 	sub.w	r9, sl, r3
 801283a:	9b06      	ldr	r3, [sp, #24]
 801283c:	ebaa 0303 	sub.w	r3, sl, r3
 8012840:	4599      	cmp	r9, r3
 8012842:	bfa8      	it	ge
 8012844:	4699      	movge	r9, r3
 8012846:	f1b9 0f00 	cmp.w	r9, #0
 801284a:	dc34      	bgt.n	80128b6 <_printf_float+0x376>
 801284c:	f04f 0800 	mov.w	r8, #0
 8012850:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012854:	f104 0b1a 	add.w	fp, r4, #26
 8012858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801285a:	ebaa 0303 	sub.w	r3, sl, r3
 801285e:	eba3 0309 	sub.w	r3, r3, r9
 8012862:	4543      	cmp	r3, r8
 8012864:	f77f af76 	ble.w	8012754 <_printf_float+0x214>
 8012868:	2301      	movs	r3, #1
 801286a:	465a      	mov	r2, fp
 801286c:	4631      	mov	r1, r6
 801286e:	4628      	mov	r0, r5
 8012870:	47b8      	blx	r7
 8012872:	3001      	adds	r0, #1
 8012874:	f43f aeb0 	beq.w	80125d8 <_printf_float+0x98>
 8012878:	f108 0801 	add.w	r8, r8, #1
 801287c:	e7ec      	b.n	8012858 <_printf_float+0x318>
 801287e:	4642      	mov	r2, r8
 8012880:	4631      	mov	r1, r6
 8012882:	4628      	mov	r0, r5
 8012884:	47b8      	blx	r7
 8012886:	3001      	adds	r0, #1
 8012888:	d1c1      	bne.n	801280e <_printf_float+0x2ce>
 801288a:	e6a5      	b.n	80125d8 <_printf_float+0x98>
 801288c:	2301      	movs	r3, #1
 801288e:	4631      	mov	r1, r6
 8012890:	4628      	mov	r0, r5
 8012892:	9206      	str	r2, [sp, #24]
 8012894:	47b8      	blx	r7
 8012896:	3001      	adds	r0, #1
 8012898:	f43f ae9e 	beq.w	80125d8 <_printf_float+0x98>
 801289c:	9b07      	ldr	r3, [sp, #28]
 801289e:	9a06      	ldr	r2, [sp, #24]
 80128a0:	3301      	adds	r3, #1
 80128a2:	9307      	str	r3, [sp, #28]
 80128a4:	e7b9      	b.n	801281a <_printf_float+0x2da>
 80128a6:	9b05      	ldr	r3, [sp, #20]
 80128a8:	465a      	mov	r2, fp
 80128aa:	4631      	mov	r1, r6
 80128ac:	4628      	mov	r0, r5
 80128ae:	47b8      	blx	r7
 80128b0:	3001      	adds	r0, #1
 80128b2:	d1bf      	bne.n	8012834 <_printf_float+0x2f4>
 80128b4:	e690      	b.n	80125d8 <_printf_float+0x98>
 80128b6:	9a06      	ldr	r2, [sp, #24]
 80128b8:	464b      	mov	r3, r9
 80128ba:	4442      	add	r2, r8
 80128bc:	4631      	mov	r1, r6
 80128be:	4628      	mov	r0, r5
 80128c0:	47b8      	blx	r7
 80128c2:	3001      	adds	r0, #1
 80128c4:	d1c2      	bne.n	801284c <_printf_float+0x30c>
 80128c6:	e687      	b.n	80125d8 <_printf_float+0x98>
 80128c8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80128cc:	f1b9 0f01 	cmp.w	r9, #1
 80128d0:	dc01      	bgt.n	80128d6 <_printf_float+0x396>
 80128d2:	07db      	lsls	r3, r3, #31
 80128d4:	d536      	bpl.n	8012944 <_printf_float+0x404>
 80128d6:	2301      	movs	r3, #1
 80128d8:	4642      	mov	r2, r8
 80128da:	4631      	mov	r1, r6
 80128dc:	4628      	mov	r0, r5
 80128de:	47b8      	blx	r7
 80128e0:	3001      	adds	r0, #1
 80128e2:	f43f ae79 	beq.w	80125d8 <_printf_float+0x98>
 80128e6:	9b05      	ldr	r3, [sp, #20]
 80128e8:	465a      	mov	r2, fp
 80128ea:	4631      	mov	r1, r6
 80128ec:	4628      	mov	r0, r5
 80128ee:	47b8      	blx	r7
 80128f0:	3001      	adds	r0, #1
 80128f2:	f43f ae71 	beq.w	80125d8 <_printf_float+0x98>
 80128f6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80128fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80128fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012902:	f109 39ff 	add.w	r9, r9, #4294967295
 8012906:	d018      	beq.n	801293a <_printf_float+0x3fa>
 8012908:	464b      	mov	r3, r9
 801290a:	f108 0201 	add.w	r2, r8, #1
 801290e:	4631      	mov	r1, r6
 8012910:	4628      	mov	r0, r5
 8012912:	47b8      	blx	r7
 8012914:	3001      	adds	r0, #1
 8012916:	d10c      	bne.n	8012932 <_printf_float+0x3f2>
 8012918:	e65e      	b.n	80125d8 <_printf_float+0x98>
 801291a:	2301      	movs	r3, #1
 801291c:	465a      	mov	r2, fp
 801291e:	4631      	mov	r1, r6
 8012920:	4628      	mov	r0, r5
 8012922:	47b8      	blx	r7
 8012924:	3001      	adds	r0, #1
 8012926:	f43f ae57 	beq.w	80125d8 <_printf_float+0x98>
 801292a:	f108 0801 	add.w	r8, r8, #1
 801292e:	45c8      	cmp	r8, r9
 8012930:	dbf3      	blt.n	801291a <_printf_float+0x3da>
 8012932:	4653      	mov	r3, sl
 8012934:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012938:	e6dc      	b.n	80126f4 <_printf_float+0x1b4>
 801293a:	f04f 0800 	mov.w	r8, #0
 801293e:	f104 0b1a 	add.w	fp, r4, #26
 8012942:	e7f4      	b.n	801292e <_printf_float+0x3ee>
 8012944:	2301      	movs	r3, #1
 8012946:	4642      	mov	r2, r8
 8012948:	e7e1      	b.n	801290e <_printf_float+0x3ce>
 801294a:	2301      	movs	r3, #1
 801294c:	464a      	mov	r2, r9
 801294e:	4631      	mov	r1, r6
 8012950:	4628      	mov	r0, r5
 8012952:	47b8      	blx	r7
 8012954:	3001      	adds	r0, #1
 8012956:	f43f ae3f 	beq.w	80125d8 <_printf_float+0x98>
 801295a:	f108 0801 	add.w	r8, r8, #1
 801295e:	68e3      	ldr	r3, [r4, #12]
 8012960:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012962:	1a5b      	subs	r3, r3, r1
 8012964:	4543      	cmp	r3, r8
 8012966:	dcf0      	bgt.n	801294a <_printf_float+0x40a>
 8012968:	e6f8      	b.n	801275c <_printf_float+0x21c>
 801296a:	f04f 0800 	mov.w	r8, #0
 801296e:	f104 0919 	add.w	r9, r4, #25
 8012972:	e7f4      	b.n	801295e <_printf_float+0x41e>

08012974 <_printf_common>:
 8012974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012978:	4616      	mov	r6, r2
 801297a:	4698      	mov	r8, r3
 801297c:	688a      	ldr	r2, [r1, #8]
 801297e:	690b      	ldr	r3, [r1, #16]
 8012980:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012984:	4293      	cmp	r3, r2
 8012986:	bfb8      	it	lt
 8012988:	4613      	movlt	r3, r2
 801298a:	6033      	str	r3, [r6, #0]
 801298c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012990:	4607      	mov	r7, r0
 8012992:	460c      	mov	r4, r1
 8012994:	b10a      	cbz	r2, 801299a <_printf_common+0x26>
 8012996:	3301      	adds	r3, #1
 8012998:	6033      	str	r3, [r6, #0]
 801299a:	6823      	ldr	r3, [r4, #0]
 801299c:	0699      	lsls	r1, r3, #26
 801299e:	bf42      	ittt	mi
 80129a0:	6833      	ldrmi	r3, [r6, #0]
 80129a2:	3302      	addmi	r3, #2
 80129a4:	6033      	strmi	r3, [r6, #0]
 80129a6:	6825      	ldr	r5, [r4, #0]
 80129a8:	f015 0506 	ands.w	r5, r5, #6
 80129ac:	d106      	bne.n	80129bc <_printf_common+0x48>
 80129ae:	f104 0a19 	add.w	sl, r4, #25
 80129b2:	68e3      	ldr	r3, [r4, #12]
 80129b4:	6832      	ldr	r2, [r6, #0]
 80129b6:	1a9b      	subs	r3, r3, r2
 80129b8:	42ab      	cmp	r3, r5
 80129ba:	dc26      	bgt.n	8012a0a <_printf_common+0x96>
 80129bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80129c0:	6822      	ldr	r2, [r4, #0]
 80129c2:	3b00      	subs	r3, #0
 80129c4:	bf18      	it	ne
 80129c6:	2301      	movne	r3, #1
 80129c8:	0692      	lsls	r2, r2, #26
 80129ca:	d42b      	bmi.n	8012a24 <_printf_common+0xb0>
 80129cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80129d0:	4641      	mov	r1, r8
 80129d2:	4638      	mov	r0, r7
 80129d4:	47c8      	blx	r9
 80129d6:	3001      	adds	r0, #1
 80129d8:	d01e      	beq.n	8012a18 <_printf_common+0xa4>
 80129da:	6823      	ldr	r3, [r4, #0]
 80129dc:	6922      	ldr	r2, [r4, #16]
 80129de:	f003 0306 	and.w	r3, r3, #6
 80129e2:	2b04      	cmp	r3, #4
 80129e4:	bf02      	ittt	eq
 80129e6:	68e5      	ldreq	r5, [r4, #12]
 80129e8:	6833      	ldreq	r3, [r6, #0]
 80129ea:	1aed      	subeq	r5, r5, r3
 80129ec:	68a3      	ldr	r3, [r4, #8]
 80129ee:	bf0c      	ite	eq
 80129f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80129f4:	2500      	movne	r5, #0
 80129f6:	4293      	cmp	r3, r2
 80129f8:	bfc4      	itt	gt
 80129fa:	1a9b      	subgt	r3, r3, r2
 80129fc:	18ed      	addgt	r5, r5, r3
 80129fe:	2600      	movs	r6, #0
 8012a00:	341a      	adds	r4, #26
 8012a02:	42b5      	cmp	r5, r6
 8012a04:	d11a      	bne.n	8012a3c <_printf_common+0xc8>
 8012a06:	2000      	movs	r0, #0
 8012a08:	e008      	b.n	8012a1c <_printf_common+0xa8>
 8012a0a:	2301      	movs	r3, #1
 8012a0c:	4652      	mov	r2, sl
 8012a0e:	4641      	mov	r1, r8
 8012a10:	4638      	mov	r0, r7
 8012a12:	47c8      	blx	r9
 8012a14:	3001      	adds	r0, #1
 8012a16:	d103      	bne.n	8012a20 <_printf_common+0xac>
 8012a18:	f04f 30ff 	mov.w	r0, #4294967295
 8012a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a20:	3501      	adds	r5, #1
 8012a22:	e7c6      	b.n	80129b2 <_printf_common+0x3e>
 8012a24:	18e1      	adds	r1, r4, r3
 8012a26:	1c5a      	adds	r2, r3, #1
 8012a28:	2030      	movs	r0, #48	@ 0x30
 8012a2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012a2e:	4422      	add	r2, r4
 8012a30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012a34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012a38:	3302      	adds	r3, #2
 8012a3a:	e7c7      	b.n	80129cc <_printf_common+0x58>
 8012a3c:	2301      	movs	r3, #1
 8012a3e:	4622      	mov	r2, r4
 8012a40:	4641      	mov	r1, r8
 8012a42:	4638      	mov	r0, r7
 8012a44:	47c8      	blx	r9
 8012a46:	3001      	adds	r0, #1
 8012a48:	d0e6      	beq.n	8012a18 <_printf_common+0xa4>
 8012a4a:	3601      	adds	r6, #1
 8012a4c:	e7d9      	b.n	8012a02 <_printf_common+0x8e>
	...

08012a50 <_printf_i>:
 8012a50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012a54:	7e0f      	ldrb	r7, [r1, #24]
 8012a56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012a58:	2f78      	cmp	r7, #120	@ 0x78
 8012a5a:	4691      	mov	r9, r2
 8012a5c:	4680      	mov	r8, r0
 8012a5e:	460c      	mov	r4, r1
 8012a60:	469a      	mov	sl, r3
 8012a62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012a66:	d807      	bhi.n	8012a78 <_printf_i+0x28>
 8012a68:	2f62      	cmp	r7, #98	@ 0x62
 8012a6a:	d80a      	bhi.n	8012a82 <_printf_i+0x32>
 8012a6c:	2f00      	cmp	r7, #0
 8012a6e:	f000 80d2 	beq.w	8012c16 <_printf_i+0x1c6>
 8012a72:	2f58      	cmp	r7, #88	@ 0x58
 8012a74:	f000 80b9 	beq.w	8012bea <_printf_i+0x19a>
 8012a78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012a7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012a80:	e03a      	b.n	8012af8 <_printf_i+0xa8>
 8012a82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012a86:	2b15      	cmp	r3, #21
 8012a88:	d8f6      	bhi.n	8012a78 <_printf_i+0x28>
 8012a8a:	a101      	add	r1, pc, #4	@ (adr r1, 8012a90 <_printf_i+0x40>)
 8012a8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012a90:	08012ae9 	.word	0x08012ae9
 8012a94:	08012afd 	.word	0x08012afd
 8012a98:	08012a79 	.word	0x08012a79
 8012a9c:	08012a79 	.word	0x08012a79
 8012aa0:	08012a79 	.word	0x08012a79
 8012aa4:	08012a79 	.word	0x08012a79
 8012aa8:	08012afd 	.word	0x08012afd
 8012aac:	08012a79 	.word	0x08012a79
 8012ab0:	08012a79 	.word	0x08012a79
 8012ab4:	08012a79 	.word	0x08012a79
 8012ab8:	08012a79 	.word	0x08012a79
 8012abc:	08012bfd 	.word	0x08012bfd
 8012ac0:	08012b27 	.word	0x08012b27
 8012ac4:	08012bb7 	.word	0x08012bb7
 8012ac8:	08012a79 	.word	0x08012a79
 8012acc:	08012a79 	.word	0x08012a79
 8012ad0:	08012c1f 	.word	0x08012c1f
 8012ad4:	08012a79 	.word	0x08012a79
 8012ad8:	08012b27 	.word	0x08012b27
 8012adc:	08012a79 	.word	0x08012a79
 8012ae0:	08012a79 	.word	0x08012a79
 8012ae4:	08012bbf 	.word	0x08012bbf
 8012ae8:	6833      	ldr	r3, [r6, #0]
 8012aea:	1d1a      	adds	r2, r3, #4
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	6032      	str	r2, [r6, #0]
 8012af0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012af4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012af8:	2301      	movs	r3, #1
 8012afa:	e09d      	b.n	8012c38 <_printf_i+0x1e8>
 8012afc:	6833      	ldr	r3, [r6, #0]
 8012afe:	6820      	ldr	r0, [r4, #0]
 8012b00:	1d19      	adds	r1, r3, #4
 8012b02:	6031      	str	r1, [r6, #0]
 8012b04:	0606      	lsls	r6, r0, #24
 8012b06:	d501      	bpl.n	8012b0c <_printf_i+0xbc>
 8012b08:	681d      	ldr	r5, [r3, #0]
 8012b0a:	e003      	b.n	8012b14 <_printf_i+0xc4>
 8012b0c:	0645      	lsls	r5, r0, #25
 8012b0e:	d5fb      	bpl.n	8012b08 <_printf_i+0xb8>
 8012b10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012b14:	2d00      	cmp	r5, #0
 8012b16:	da03      	bge.n	8012b20 <_printf_i+0xd0>
 8012b18:	232d      	movs	r3, #45	@ 0x2d
 8012b1a:	426d      	negs	r5, r5
 8012b1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012b20:	4859      	ldr	r0, [pc, #356]	@ (8012c88 <_printf_i+0x238>)
 8012b22:	230a      	movs	r3, #10
 8012b24:	e011      	b.n	8012b4a <_printf_i+0xfa>
 8012b26:	6821      	ldr	r1, [r4, #0]
 8012b28:	6833      	ldr	r3, [r6, #0]
 8012b2a:	0608      	lsls	r0, r1, #24
 8012b2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8012b30:	d402      	bmi.n	8012b38 <_printf_i+0xe8>
 8012b32:	0649      	lsls	r1, r1, #25
 8012b34:	bf48      	it	mi
 8012b36:	b2ad      	uxthmi	r5, r5
 8012b38:	2f6f      	cmp	r7, #111	@ 0x6f
 8012b3a:	4853      	ldr	r0, [pc, #332]	@ (8012c88 <_printf_i+0x238>)
 8012b3c:	6033      	str	r3, [r6, #0]
 8012b3e:	bf14      	ite	ne
 8012b40:	230a      	movne	r3, #10
 8012b42:	2308      	moveq	r3, #8
 8012b44:	2100      	movs	r1, #0
 8012b46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012b4a:	6866      	ldr	r6, [r4, #4]
 8012b4c:	60a6      	str	r6, [r4, #8]
 8012b4e:	2e00      	cmp	r6, #0
 8012b50:	bfa2      	ittt	ge
 8012b52:	6821      	ldrge	r1, [r4, #0]
 8012b54:	f021 0104 	bicge.w	r1, r1, #4
 8012b58:	6021      	strge	r1, [r4, #0]
 8012b5a:	b90d      	cbnz	r5, 8012b60 <_printf_i+0x110>
 8012b5c:	2e00      	cmp	r6, #0
 8012b5e:	d04b      	beq.n	8012bf8 <_printf_i+0x1a8>
 8012b60:	4616      	mov	r6, r2
 8012b62:	fbb5 f1f3 	udiv	r1, r5, r3
 8012b66:	fb03 5711 	mls	r7, r3, r1, r5
 8012b6a:	5dc7      	ldrb	r7, [r0, r7]
 8012b6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012b70:	462f      	mov	r7, r5
 8012b72:	42bb      	cmp	r3, r7
 8012b74:	460d      	mov	r5, r1
 8012b76:	d9f4      	bls.n	8012b62 <_printf_i+0x112>
 8012b78:	2b08      	cmp	r3, #8
 8012b7a:	d10b      	bne.n	8012b94 <_printf_i+0x144>
 8012b7c:	6823      	ldr	r3, [r4, #0]
 8012b7e:	07df      	lsls	r7, r3, #31
 8012b80:	d508      	bpl.n	8012b94 <_printf_i+0x144>
 8012b82:	6923      	ldr	r3, [r4, #16]
 8012b84:	6861      	ldr	r1, [r4, #4]
 8012b86:	4299      	cmp	r1, r3
 8012b88:	bfde      	ittt	le
 8012b8a:	2330      	movle	r3, #48	@ 0x30
 8012b8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012b90:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012b94:	1b92      	subs	r2, r2, r6
 8012b96:	6122      	str	r2, [r4, #16]
 8012b98:	f8cd a000 	str.w	sl, [sp]
 8012b9c:	464b      	mov	r3, r9
 8012b9e:	aa03      	add	r2, sp, #12
 8012ba0:	4621      	mov	r1, r4
 8012ba2:	4640      	mov	r0, r8
 8012ba4:	f7ff fee6 	bl	8012974 <_printf_common>
 8012ba8:	3001      	adds	r0, #1
 8012baa:	d14a      	bne.n	8012c42 <_printf_i+0x1f2>
 8012bac:	f04f 30ff 	mov.w	r0, #4294967295
 8012bb0:	b004      	add	sp, #16
 8012bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bb6:	6823      	ldr	r3, [r4, #0]
 8012bb8:	f043 0320 	orr.w	r3, r3, #32
 8012bbc:	6023      	str	r3, [r4, #0]
 8012bbe:	4833      	ldr	r0, [pc, #204]	@ (8012c8c <_printf_i+0x23c>)
 8012bc0:	2778      	movs	r7, #120	@ 0x78
 8012bc2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012bc6:	6823      	ldr	r3, [r4, #0]
 8012bc8:	6831      	ldr	r1, [r6, #0]
 8012bca:	061f      	lsls	r7, r3, #24
 8012bcc:	f851 5b04 	ldr.w	r5, [r1], #4
 8012bd0:	d402      	bmi.n	8012bd8 <_printf_i+0x188>
 8012bd2:	065f      	lsls	r7, r3, #25
 8012bd4:	bf48      	it	mi
 8012bd6:	b2ad      	uxthmi	r5, r5
 8012bd8:	6031      	str	r1, [r6, #0]
 8012bda:	07d9      	lsls	r1, r3, #31
 8012bdc:	bf44      	itt	mi
 8012bde:	f043 0320 	orrmi.w	r3, r3, #32
 8012be2:	6023      	strmi	r3, [r4, #0]
 8012be4:	b11d      	cbz	r5, 8012bee <_printf_i+0x19e>
 8012be6:	2310      	movs	r3, #16
 8012be8:	e7ac      	b.n	8012b44 <_printf_i+0xf4>
 8012bea:	4827      	ldr	r0, [pc, #156]	@ (8012c88 <_printf_i+0x238>)
 8012bec:	e7e9      	b.n	8012bc2 <_printf_i+0x172>
 8012bee:	6823      	ldr	r3, [r4, #0]
 8012bf0:	f023 0320 	bic.w	r3, r3, #32
 8012bf4:	6023      	str	r3, [r4, #0]
 8012bf6:	e7f6      	b.n	8012be6 <_printf_i+0x196>
 8012bf8:	4616      	mov	r6, r2
 8012bfa:	e7bd      	b.n	8012b78 <_printf_i+0x128>
 8012bfc:	6833      	ldr	r3, [r6, #0]
 8012bfe:	6825      	ldr	r5, [r4, #0]
 8012c00:	6961      	ldr	r1, [r4, #20]
 8012c02:	1d18      	adds	r0, r3, #4
 8012c04:	6030      	str	r0, [r6, #0]
 8012c06:	062e      	lsls	r6, r5, #24
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	d501      	bpl.n	8012c10 <_printf_i+0x1c0>
 8012c0c:	6019      	str	r1, [r3, #0]
 8012c0e:	e002      	b.n	8012c16 <_printf_i+0x1c6>
 8012c10:	0668      	lsls	r0, r5, #25
 8012c12:	d5fb      	bpl.n	8012c0c <_printf_i+0x1bc>
 8012c14:	8019      	strh	r1, [r3, #0]
 8012c16:	2300      	movs	r3, #0
 8012c18:	6123      	str	r3, [r4, #16]
 8012c1a:	4616      	mov	r6, r2
 8012c1c:	e7bc      	b.n	8012b98 <_printf_i+0x148>
 8012c1e:	6833      	ldr	r3, [r6, #0]
 8012c20:	1d1a      	adds	r2, r3, #4
 8012c22:	6032      	str	r2, [r6, #0]
 8012c24:	681e      	ldr	r6, [r3, #0]
 8012c26:	6862      	ldr	r2, [r4, #4]
 8012c28:	2100      	movs	r1, #0
 8012c2a:	4630      	mov	r0, r6
 8012c2c:	f7ed fb58 	bl	80002e0 <memchr>
 8012c30:	b108      	cbz	r0, 8012c36 <_printf_i+0x1e6>
 8012c32:	1b80      	subs	r0, r0, r6
 8012c34:	6060      	str	r0, [r4, #4]
 8012c36:	6863      	ldr	r3, [r4, #4]
 8012c38:	6123      	str	r3, [r4, #16]
 8012c3a:	2300      	movs	r3, #0
 8012c3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012c40:	e7aa      	b.n	8012b98 <_printf_i+0x148>
 8012c42:	6923      	ldr	r3, [r4, #16]
 8012c44:	4632      	mov	r2, r6
 8012c46:	4649      	mov	r1, r9
 8012c48:	4640      	mov	r0, r8
 8012c4a:	47d0      	blx	sl
 8012c4c:	3001      	adds	r0, #1
 8012c4e:	d0ad      	beq.n	8012bac <_printf_i+0x15c>
 8012c50:	6823      	ldr	r3, [r4, #0]
 8012c52:	079b      	lsls	r3, r3, #30
 8012c54:	d413      	bmi.n	8012c7e <_printf_i+0x22e>
 8012c56:	68e0      	ldr	r0, [r4, #12]
 8012c58:	9b03      	ldr	r3, [sp, #12]
 8012c5a:	4298      	cmp	r0, r3
 8012c5c:	bfb8      	it	lt
 8012c5e:	4618      	movlt	r0, r3
 8012c60:	e7a6      	b.n	8012bb0 <_printf_i+0x160>
 8012c62:	2301      	movs	r3, #1
 8012c64:	4632      	mov	r2, r6
 8012c66:	4649      	mov	r1, r9
 8012c68:	4640      	mov	r0, r8
 8012c6a:	47d0      	blx	sl
 8012c6c:	3001      	adds	r0, #1
 8012c6e:	d09d      	beq.n	8012bac <_printf_i+0x15c>
 8012c70:	3501      	adds	r5, #1
 8012c72:	68e3      	ldr	r3, [r4, #12]
 8012c74:	9903      	ldr	r1, [sp, #12]
 8012c76:	1a5b      	subs	r3, r3, r1
 8012c78:	42ab      	cmp	r3, r5
 8012c7a:	dcf2      	bgt.n	8012c62 <_printf_i+0x212>
 8012c7c:	e7eb      	b.n	8012c56 <_printf_i+0x206>
 8012c7e:	2500      	movs	r5, #0
 8012c80:	f104 0619 	add.w	r6, r4, #25
 8012c84:	e7f5      	b.n	8012c72 <_printf_i+0x222>
 8012c86:	bf00      	nop
 8012c88:	08015102 	.word	0x08015102
 8012c8c:	08015113 	.word	0x08015113

08012c90 <std>:
 8012c90:	2300      	movs	r3, #0
 8012c92:	b510      	push	{r4, lr}
 8012c94:	4604      	mov	r4, r0
 8012c96:	e9c0 3300 	strd	r3, r3, [r0]
 8012c9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012c9e:	6083      	str	r3, [r0, #8]
 8012ca0:	8181      	strh	r1, [r0, #12]
 8012ca2:	6643      	str	r3, [r0, #100]	@ 0x64
 8012ca4:	81c2      	strh	r2, [r0, #14]
 8012ca6:	6183      	str	r3, [r0, #24]
 8012ca8:	4619      	mov	r1, r3
 8012caa:	2208      	movs	r2, #8
 8012cac:	305c      	adds	r0, #92	@ 0x5c
 8012cae:	f000 f914 	bl	8012eda <memset>
 8012cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8012ce8 <std+0x58>)
 8012cb4:	6263      	str	r3, [r4, #36]	@ 0x24
 8012cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8012cec <std+0x5c>)
 8012cb8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012cba:	4b0d      	ldr	r3, [pc, #52]	@ (8012cf0 <std+0x60>)
 8012cbc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8012cf4 <std+0x64>)
 8012cc0:	6323      	str	r3, [r4, #48]	@ 0x30
 8012cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8012cf8 <std+0x68>)
 8012cc4:	6224      	str	r4, [r4, #32]
 8012cc6:	429c      	cmp	r4, r3
 8012cc8:	d006      	beq.n	8012cd8 <std+0x48>
 8012cca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012cce:	4294      	cmp	r4, r2
 8012cd0:	d002      	beq.n	8012cd8 <std+0x48>
 8012cd2:	33d0      	adds	r3, #208	@ 0xd0
 8012cd4:	429c      	cmp	r4, r3
 8012cd6:	d105      	bne.n	8012ce4 <std+0x54>
 8012cd8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ce0:	f000 b978 	b.w	8012fd4 <__retarget_lock_init_recursive>
 8012ce4:	bd10      	pop	{r4, pc}
 8012ce6:	bf00      	nop
 8012ce8:	08012e55 	.word	0x08012e55
 8012cec:	08012e77 	.word	0x08012e77
 8012cf0:	08012eaf 	.word	0x08012eaf
 8012cf4:	08012ed3 	.word	0x08012ed3
 8012cf8:	2400262c 	.word	0x2400262c

08012cfc <stdio_exit_handler>:
 8012cfc:	4a02      	ldr	r2, [pc, #8]	@ (8012d08 <stdio_exit_handler+0xc>)
 8012cfe:	4903      	ldr	r1, [pc, #12]	@ (8012d0c <stdio_exit_handler+0x10>)
 8012d00:	4803      	ldr	r0, [pc, #12]	@ (8012d10 <stdio_exit_handler+0x14>)
 8012d02:	f000 b869 	b.w	8012dd8 <_fwalk_sglue>
 8012d06:	bf00      	nop
 8012d08:	24000120 	.word	0x24000120
 8012d0c:	08014859 	.word	0x08014859
 8012d10:	24000130 	.word	0x24000130

08012d14 <cleanup_stdio>:
 8012d14:	6841      	ldr	r1, [r0, #4]
 8012d16:	4b0c      	ldr	r3, [pc, #48]	@ (8012d48 <cleanup_stdio+0x34>)
 8012d18:	4299      	cmp	r1, r3
 8012d1a:	b510      	push	{r4, lr}
 8012d1c:	4604      	mov	r4, r0
 8012d1e:	d001      	beq.n	8012d24 <cleanup_stdio+0x10>
 8012d20:	f001 fd9a 	bl	8014858 <_fflush_r>
 8012d24:	68a1      	ldr	r1, [r4, #8]
 8012d26:	4b09      	ldr	r3, [pc, #36]	@ (8012d4c <cleanup_stdio+0x38>)
 8012d28:	4299      	cmp	r1, r3
 8012d2a:	d002      	beq.n	8012d32 <cleanup_stdio+0x1e>
 8012d2c:	4620      	mov	r0, r4
 8012d2e:	f001 fd93 	bl	8014858 <_fflush_r>
 8012d32:	68e1      	ldr	r1, [r4, #12]
 8012d34:	4b06      	ldr	r3, [pc, #24]	@ (8012d50 <cleanup_stdio+0x3c>)
 8012d36:	4299      	cmp	r1, r3
 8012d38:	d004      	beq.n	8012d44 <cleanup_stdio+0x30>
 8012d3a:	4620      	mov	r0, r4
 8012d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d40:	f001 bd8a 	b.w	8014858 <_fflush_r>
 8012d44:	bd10      	pop	{r4, pc}
 8012d46:	bf00      	nop
 8012d48:	2400262c 	.word	0x2400262c
 8012d4c:	24002694 	.word	0x24002694
 8012d50:	240026fc 	.word	0x240026fc

08012d54 <global_stdio_init.part.0>:
 8012d54:	b510      	push	{r4, lr}
 8012d56:	4b0b      	ldr	r3, [pc, #44]	@ (8012d84 <global_stdio_init.part.0+0x30>)
 8012d58:	4c0b      	ldr	r4, [pc, #44]	@ (8012d88 <global_stdio_init.part.0+0x34>)
 8012d5a:	4a0c      	ldr	r2, [pc, #48]	@ (8012d8c <global_stdio_init.part.0+0x38>)
 8012d5c:	601a      	str	r2, [r3, #0]
 8012d5e:	4620      	mov	r0, r4
 8012d60:	2200      	movs	r2, #0
 8012d62:	2104      	movs	r1, #4
 8012d64:	f7ff ff94 	bl	8012c90 <std>
 8012d68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012d6c:	2201      	movs	r2, #1
 8012d6e:	2109      	movs	r1, #9
 8012d70:	f7ff ff8e 	bl	8012c90 <std>
 8012d74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012d78:	2202      	movs	r2, #2
 8012d7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d7e:	2112      	movs	r1, #18
 8012d80:	f7ff bf86 	b.w	8012c90 <std>
 8012d84:	24002764 	.word	0x24002764
 8012d88:	2400262c 	.word	0x2400262c
 8012d8c:	08012cfd 	.word	0x08012cfd

08012d90 <__sfp_lock_acquire>:
 8012d90:	4801      	ldr	r0, [pc, #4]	@ (8012d98 <__sfp_lock_acquire+0x8>)
 8012d92:	f000 b920 	b.w	8012fd6 <__retarget_lock_acquire_recursive>
 8012d96:	bf00      	nop
 8012d98:	2400276d 	.word	0x2400276d

08012d9c <__sfp_lock_release>:
 8012d9c:	4801      	ldr	r0, [pc, #4]	@ (8012da4 <__sfp_lock_release+0x8>)
 8012d9e:	f000 b91b 	b.w	8012fd8 <__retarget_lock_release_recursive>
 8012da2:	bf00      	nop
 8012da4:	2400276d 	.word	0x2400276d

08012da8 <__sinit>:
 8012da8:	b510      	push	{r4, lr}
 8012daa:	4604      	mov	r4, r0
 8012dac:	f7ff fff0 	bl	8012d90 <__sfp_lock_acquire>
 8012db0:	6a23      	ldr	r3, [r4, #32]
 8012db2:	b11b      	cbz	r3, 8012dbc <__sinit+0x14>
 8012db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012db8:	f7ff bff0 	b.w	8012d9c <__sfp_lock_release>
 8012dbc:	4b04      	ldr	r3, [pc, #16]	@ (8012dd0 <__sinit+0x28>)
 8012dbe:	6223      	str	r3, [r4, #32]
 8012dc0:	4b04      	ldr	r3, [pc, #16]	@ (8012dd4 <__sinit+0x2c>)
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d1f5      	bne.n	8012db4 <__sinit+0xc>
 8012dc8:	f7ff ffc4 	bl	8012d54 <global_stdio_init.part.0>
 8012dcc:	e7f2      	b.n	8012db4 <__sinit+0xc>
 8012dce:	bf00      	nop
 8012dd0:	08012d15 	.word	0x08012d15
 8012dd4:	24002764 	.word	0x24002764

08012dd8 <_fwalk_sglue>:
 8012dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ddc:	4607      	mov	r7, r0
 8012dde:	4688      	mov	r8, r1
 8012de0:	4614      	mov	r4, r2
 8012de2:	2600      	movs	r6, #0
 8012de4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012de8:	f1b9 0901 	subs.w	r9, r9, #1
 8012dec:	d505      	bpl.n	8012dfa <_fwalk_sglue+0x22>
 8012dee:	6824      	ldr	r4, [r4, #0]
 8012df0:	2c00      	cmp	r4, #0
 8012df2:	d1f7      	bne.n	8012de4 <_fwalk_sglue+0xc>
 8012df4:	4630      	mov	r0, r6
 8012df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012dfa:	89ab      	ldrh	r3, [r5, #12]
 8012dfc:	2b01      	cmp	r3, #1
 8012dfe:	d907      	bls.n	8012e10 <_fwalk_sglue+0x38>
 8012e00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012e04:	3301      	adds	r3, #1
 8012e06:	d003      	beq.n	8012e10 <_fwalk_sglue+0x38>
 8012e08:	4629      	mov	r1, r5
 8012e0a:	4638      	mov	r0, r7
 8012e0c:	47c0      	blx	r8
 8012e0e:	4306      	orrs	r6, r0
 8012e10:	3568      	adds	r5, #104	@ 0x68
 8012e12:	e7e9      	b.n	8012de8 <_fwalk_sglue+0x10>

08012e14 <siprintf>:
 8012e14:	b40e      	push	{r1, r2, r3}
 8012e16:	b500      	push	{lr}
 8012e18:	b09c      	sub	sp, #112	@ 0x70
 8012e1a:	ab1d      	add	r3, sp, #116	@ 0x74
 8012e1c:	9002      	str	r0, [sp, #8]
 8012e1e:	9006      	str	r0, [sp, #24]
 8012e20:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012e24:	4809      	ldr	r0, [pc, #36]	@ (8012e4c <siprintf+0x38>)
 8012e26:	9107      	str	r1, [sp, #28]
 8012e28:	9104      	str	r1, [sp, #16]
 8012e2a:	4909      	ldr	r1, [pc, #36]	@ (8012e50 <siprintf+0x3c>)
 8012e2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e30:	9105      	str	r1, [sp, #20]
 8012e32:	6800      	ldr	r0, [r0, #0]
 8012e34:	9301      	str	r3, [sp, #4]
 8012e36:	a902      	add	r1, sp, #8
 8012e38:	f001 fb8e 	bl	8014558 <_svfiprintf_r>
 8012e3c:	9b02      	ldr	r3, [sp, #8]
 8012e3e:	2200      	movs	r2, #0
 8012e40:	701a      	strb	r2, [r3, #0]
 8012e42:	b01c      	add	sp, #112	@ 0x70
 8012e44:	f85d eb04 	ldr.w	lr, [sp], #4
 8012e48:	b003      	add	sp, #12
 8012e4a:	4770      	bx	lr
 8012e4c:	2400012c 	.word	0x2400012c
 8012e50:	ffff0208 	.word	0xffff0208

08012e54 <__sread>:
 8012e54:	b510      	push	{r4, lr}
 8012e56:	460c      	mov	r4, r1
 8012e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e5c:	f000 f86c 	bl	8012f38 <_read_r>
 8012e60:	2800      	cmp	r0, #0
 8012e62:	bfab      	itete	ge
 8012e64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012e66:	89a3      	ldrhlt	r3, [r4, #12]
 8012e68:	181b      	addge	r3, r3, r0
 8012e6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012e6e:	bfac      	ite	ge
 8012e70:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012e72:	81a3      	strhlt	r3, [r4, #12]
 8012e74:	bd10      	pop	{r4, pc}

08012e76 <__swrite>:
 8012e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e7a:	461f      	mov	r7, r3
 8012e7c:	898b      	ldrh	r3, [r1, #12]
 8012e7e:	05db      	lsls	r3, r3, #23
 8012e80:	4605      	mov	r5, r0
 8012e82:	460c      	mov	r4, r1
 8012e84:	4616      	mov	r6, r2
 8012e86:	d505      	bpl.n	8012e94 <__swrite+0x1e>
 8012e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e8c:	2302      	movs	r3, #2
 8012e8e:	2200      	movs	r2, #0
 8012e90:	f000 f840 	bl	8012f14 <_lseek_r>
 8012e94:	89a3      	ldrh	r3, [r4, #12]
 8012e96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012e9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012e9e:	81a3      	strh	r3, [r4, #12]
 8012ea0:	4632      	mov	r2, r6
 8012ea2:	463b      	mov	r3, r7
 8012ea4:	4628      	mov	r0, r5
 8012ea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012eaa:	f000 b857 	b.w	8012f5c <_write_r>

08012eae <__sseek>:
 8012eae:	b510      	push	{r4, lr}
 8012eb0:	460c      	mov	r4, r1
 8012eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012eb6:	f000 f82d 	bl	8012f14 <_lseek_r>
 8012eba:	1c43      	adds	r3, r0, #1
 8012ebc:	89a3      	ldrh	r3, [r4, #12]
 8012ebe:	bf15      	itete	ne
 8012ec0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012ec2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012ec6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012eca:	81a3      	strheq	r3, [r4, #12]
 8012ecc:	bf18      	it	ne
 8012ece:	81a3      	strhne	r3, [r4, #12]
 8012ed0:	bd10      	pop	{r4, pc}

08012ed2 <__sclose>:
 8012ed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ed6:	f000 b80d 	b.w	8012ef4 <_close_r>

08012eda <memset>:
 8012eda:	4402      	add	r2, r0
 8012edc:	4603      	mov	r3, r0
 8012ede:	4293      	cmp	r3, r2
 8012ee0:	d100      	bne.n	8012ee4 <memset+0xa>
 8012ee2:	4770      	bx	lr
 8012ee4:	f803 1b01 	strb.w	r1, [r3], #1
 8012ee8:	e7f9      	b.n	8012ede <memset+0x4>
	...

08012eec <_localeconv_r>:
 8012eec:	4800      	ldr	r0, [pc, #0]	@ (8012ef0 <_localeconv_r+0x4>)
 8012eee:	4770      	bx	lr
 8012ef0:	2400026c 	.word	0x2400026c

08012ef4 <_close_r>:
 8012ef4:	b538      	push	{r3, r4, r5, lr}
 8012ef6:	4d06      	ldr	r5, [pc, #24]	@ (8012f10 <_close_r+0x1c>)
 8012ef8:	2300      	movs	r3, #0
 8012efa:	4604      	mov	r4, r0
 8012efc:	4608      	mov	r0, r1
 8012efe:	602b      	str	r3, [r5, #0]
 8012f00:	f7ee fdba 	bl	8001a78 <_close>
 8012f04:	1c43      	adds	r3, r0, #1
 8012f06:	d102      	bne.n	8012f0e <_close_r+0x1a>
 8012f08:	682b      	ldr	r3, [r5, #0]
 8012f0a:	b103      	cbz	r3, 8012f0e <_close_r+0x1a>
 8012f0c:	6023      	str	r3, [r4, #0]
 8012f0e:	bd38      	pop	{r3, r4, r5, pc}
 8012f10:	24002768 	.word	0x24002768

08012f14 <_lseek_r>:
 8012f14:	b538      	push	{r3, r4, r5, lr}
 8012f16:	4d07      	ldr	r5, [pc, #28]	@ (8012f34 <_lseek_r+0x20>)
 8012f18:	4604      	mov	r4, r0
 8012f1a:	4608      	mov	r0, r1
 8012f1c:	4611      	mov	r1, r2
 8012f1e:	2200      	movs	r2, #0
 8012f20:	602a      	str	r2, [r5, #0]
 8012f22:	461a      	mov	r2, r3
 8012f24:	f7ee fdcf 	bl	8001ac6 <_lseek>
 8012f28:	1c43      	adds	r3, r0, #1
 8012f2a:	d102      	bne.n	8012f32 <_lseek_r+0x1e>
 8012f2c:	682b      	ldr	r3, [r5, #0]
 8012f2e:	b103      	cbz	r3, 8012f32 <_lseek_r+0x1e>
 8012f30:	6023      	str	r3, [r4, #0]
 8012f32:	bd38      	pop	{r3, r4, r5, pc}
 8012f34:	24002768 	.word	0x24002768

08012f38 <_read_r>:
 8012f38:	b538      	push	{r3, r4, r5, lr}
 8012f3a:	4d07      	ldr	r5, [pc, #28]	@ (8012f58 <_read_r+0x20>)
 8012f3c:	4604      	mov	r4, r0
 8012f3e:	4608      	mov	r0, r1
 8012f40:	4611      	mov	r1, r2
 8012f42:	2200      	movs	r2, #0
 8012f44:	602a      	str	r2, [r5, #0]
 8012f46:	461a      	mov	r2, r3
 8012f48:	f7ee fd5d 	bl	8001a06 <_read>
 8012f4c:	1c43      	adds	r3, r0, #1
 8012f4e:	d102      	bne.n	8012f56 <_read_r+0x1e>
 8012f50:	682b      	ldr	r3, [r5, #0]
 8012f52:	b103      	cbz	r3, 8012f56 <_read_r+0x1e>
 8012f54:	6023      	str	r3, [r4, #0]
 8012f56:	bd38      	pop	{r3, r4, r5, pc}
 8012f58:	24002768 	.word	0x24002768

08012f5c <_write_r>:
 8012f5c:	b538      	push	{r3, r4, r5, lr}
 8012f5e:	4d07      	ldr	r5, [pc, #28]	@ (8012f7c <_write_r+0x20>)
 8012f60:	4604      	mov	r4, r0
 8012f62:	4608      	mov	r0, r1
 8012f64:	4611      	mov	r1, r2
 8012f66:	2200      	movs	r2, #0
 8012f68:	602a      	str	r2, [r5, #0]
 8012f6a:	461a      	mov	r2, r3
 8012f6c:	f7ee fd68 	bl	8001a40 <_write>
 8012f70:	1c43      	adds	r3, r0, #1
 8012f72:	d102      	bne.n	8012f7a <_write_r+0x1e>
 8012f74:	682b      	ldr	r3, [r5, #0]
 8012f76:	b103      	cbz	r3, 8012f7a <_write_r+0x1e>
 8012f78:	6023      	str	r3, [r4, #0]
 8012f7a:	bd38      	pop	{r3, r4, r5, pc}
 8012f7c:	24002768 	.word	0x24002768

08012f80 <__errno>:
 8012f80:	4b01      	ldr	r3, [pc, #4]	@ (8012f88 <__errno+0x8>)
 8012f82:	6818      	ldr	r0, [r3, #0]
 8012f84:	4770      	bx	lr
 8012f86:	bf00      	nop
 8012f88:	2400012c 	.word	0x2400012c

08012f8c <__libc_init_array>:
 8012f8c:	b570      	push	{r4, r5, r6, lr}
 8012f8e:	4d0d      	ldr	r5, [pc, #52]	@ (8012fc4 <__libc_init_array+0x38>)
 8012f90:	4c0d      	ldr	r4, [pc, #52]	@ (8012fc8 <__libc_init_array+0x3c>)
 8012f92:	1b64      	subs	r4, r4, r5
 8012f94:	10a4      	asrs	r4, r4, #2
 8012f96:	2600      	movs	r6, #0
 8012f98:	42a6      	cmp	r6, r4
 8012f9a:	d109      	bne.n	8012fb0 <__libc_init_array+0x24>
 8012f9c:	4d0b      	ldr	r5, [pc, #44]	@ (8012fcc <__libc_init_array+0x40>)
 8012f9e:	4c0c      	ldr	r4, [pc, #48]	@ (8012fd0 <__libc_init_array+0x44>)
 8012fa0:	f002 f838 	bl	8015014 <_init>
 8012fa4:	1b64      	subs	r4, r4, r5
 8012fa6:	10a4      	asrs	r4, r4, #2
 8012fa8:	2600      	movs	r6, #0
 8012faa:	42a6      	cmp	r6, r4
 8012fac:	d105      	bne.n	8012fba <__libc_init_array+0x2e>
 8012fae:	bd70      	pop	{r4, r5, r6, pc}
 8012fb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8012fb4:	4798      	blx	r3
 8012fb6:	3601      	adds	r6, #1
 8012fb8:	e7ee      	b.n	8012f98 <__libc_init_array+0xc>
 8012fba:	f855 3b04 	ldr.w	r3, [r5], #4
 8012fbe:	4798      	blx	r3
 8012fc0:	3601      	adds	r6, #1
 8012fc2:	e7f2      	b.n	8012faa <__libc_init_array+0x1e>
 8012fc4:	08015470 	.word	0x08015470
 8012fc8:	08015470 	.word	0x08015470
 8012fcc:	08015470 	.word	0x08015470
 8012fd0:	08015474 	.word	0x08015474

08012fd4 <__retarget_lock_init_recursive>:
 8012fd4:	4770      	bx	lr

08012fd6 <__retarget_lock_acquire_recursive>:
 8012fd6:	4770      	bx	lr

08012fd8 <__retarget_lock_release_recursive>:
 8012fd8:	4770      	bx	lr

08012fda <quorem>:
 8012fda:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fde:	6903      	ldr	r3, [r0, #16]
 8012fe0:	690c      	ldr	r4, [r1, #16]
 8012fe2:	42a3      	cmp	r3, r4
 8012fe4:	4607      	mov	r7, r0
 8012fe6:	db7e      	blt.n	80130e6 <quorem+0x10c>
 8012fe8:	3c01      	subs	r4, #1
 8012fea:	f101 0814 	add.w	r8, r1, #20
 8012fee:	00a3      	lsls	r3, r4, #2
 8012ff0:	f100 0514 	add.w	r5, r0, #20
 8012ff4:	9300      	str	r3, [sp, #0]
 8012ff6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012ffa:	9301      	str	r3, [sp, #4]
 8012ffc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013000:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013004:	3301      	adds	r3, #1
 8013006:	429a      	cmp	r2, r3
 8013008:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801300c:	fbb2 f6f3 	udiv	r6, r2, r3
 8013010:	d32e      	bcc.n	8013070 <quorem+0x96>
 8013012:	f04f 0a00 	mov.w	sl, #0
 8013016:	46c4      	mov	ip, r8
 8013018:	46ae      	mov	lr, r5
 801301a:	46d3      	mov	fp, sl
 801301c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013020:	b298      	uxth	r0, r3
 8013022:	fb06 a000 	mla	r0, r6, r0, sl
 8013026:	0c02      	lsrs	r2, r0, #16
 8013028:	0c1b      	lsrs	r3, r3, #16
 801302a:	fb06 2303 	mla	r3, r6, r3, r2
 801302e:	f8de 2000 	ldr.w	r2, [lr]
 8013032:	b280      	uxth	r0, r0
 8013034:	b292      	uxth	r2, r2
 8013036:	1a12      	subs	r2, r2, r0
 8013038:	445a      	add	r2, fp
 801303a:	f8de 0000 	ldr.w	r0, [lr]
 801303e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013042:	b29b      	uxth	r3, r3
 8013044:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8013048:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801304c:	b292      	uxth	r2, r2
 801304e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8013052:	45e1      	cmp	r9, ip
 8013054:	f84e 2b04 	str.w	r2, [lr], #4
 8013058:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801305c:	d2de      	bcs.n	801301c <quorem+0x42>
 801305e:	9b00      	ldr	r3, [sp, #0]
 8013060:	58eb      	ldr	r3, [r5, r3]
 8013062:	b92b      	cbnz	r3, 8013070 <quorem+0x96>
 8013064:	9b01      	ldr	r3, [sp, #4]
 8013066:	3b04      	subs	r3, #4
 8013068:	429d      	cmp	r5, r3
 801306a:	461a      	mov	r2, r3
 801306c:	d32f      	bcc.n	80130ce <quorem+0xf4>
 801306e:	613c      	str	r4, [r7, #16]
 8013070:	4638      	mov	r0, r7
 8013072:	f001 f90d 	bl	8014290 <__mcmp>
 8013076:	2800      	cmp	r0, #0
 8013078:	db25      	blt.n	80130c6 <quorem+0xec>
 801307a:	4629      	mov	r1, r5
 801307c:	2000      	movs	r0, #0
 801307e:	f858 2b04 	ldr.w	r2, [r8], #4
 8013082:	f8d1 c000 	ldr.w	ip, [r1]
 8013086:	fa1f fe82 	uxth.w	lr, r2
 801308a:	fa1f f38c 	uxth.w	r3, ip
 801308e:	eba3 030e 	sub.w	r3, r3, lr
 8013092:	4403      	add	r3, r0
 8013094:	0c12      	lsrs	r2, r2, #16
 8013096:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801309a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801309e:	b29b      	uxth	r3, r3
 80130a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80130a4:	45c1      	cmp	r9, r8
 80130a6:	f841 3b04 	str.w	r3, [r1], #4
 80130aa:	ea4f 4022 	mov.w	r0, r2, asr #16
 80130ae:	d2e6      	bcs.n	801307e <quorem+0xa4>
 80130b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80130b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80130b8:	b922      	cbnz	r2, 80130c4 <quorem+0xea>
 80130ba:	3b04      	subs	r3, #4
 80130bc:	429d      	cmp	r5, r3
 80130be:	461a      	mov	r2, r3
 80130c0:	d30b      	bcc.n	80130da <quorem+0x100>
 80130c2:	613c      	str	r4, [r7, #16]
 80130c4:	3601      	adds	r6, #1
 80130c6:	4630      	mov	r0, r6
 80130c8:	b003      	add	sp, #12
 80130ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130ce:	6812      	ldr	r2, [r2, #0]
 80130d0:	3b04      	subs	r3, #4
 80130d2:	2a00      	cmp	r2, #0
 80130d4:	d1cb      	bne.n	801306e <quorem+0x94>
 80130d6:	3c01      	subs	r4, #1
 80130d8:	e7c6      	b.n	8013068 <quorem+0x8e>
 80130da:	6812      	ldr	r2, [r2, #0]
 80130dc:	3b04      	subs	r3, #4
 80130de:	2a00      	cmp	r2, #0
 80130e0:	d1ef      	bne.n	80130c2 <quorem+0xe8>
 80130e2:	3c01      	subs	r4, #1
 80130e4:	e7ea      	b.n	80130bc <quorem+0xe2>
 80130e6:	2000      	movs	r0, #0
 80130e8:	e7ee      	b.n	80130c8 <quorem+0xee>
 80130ea:	0000      	movs	r0, r0
 80130ec:	0000      	movs	r0, r0
	...

080130f0 <_dtoa_r>:
 80130f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130f4:	ed2d 8b02 	vpush	{d8}
 80130f8:	69c7      	ldr	r7, [r0, #28]
 80130fa:	b091      	sub	sp, #68	@ 0x44
 80130fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013100:	ec55 4b10 	vmov	r4, r5, d0
 8013104:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8013106:	9107      	str	r1, [sp, #28]
 8013108:	4681      	mov	r9, r0
 801310a:	9209      	str	r2, [sp, #36]	@ 0x24
 801310c:	930d      	str	r3, [sp, #52]	@ 0x34
 801310e:	b97f      	cbnz	r7, 8013130 <_dtoa_r+0x40>
 8013110:	2010      	movs	r0, #16
 8013112:	f000 fd8d 	bl	8013c30 <malloc>
 8013116:	4602      	mov	r2, r0
 8013118:	f8c9 001c 	str.w	r0, [r9, #28]
 801311c:	b920      	cbnz	r0, 8013128 <_dtoa_r+0x38>
 801311e:	4ba0      	ldr	r3, [pc, #640]	@ (80133a0 <_dtoa_r+0x2b0>)
 8013120:	21ef      	movs	r1, #239	@ 0xef
 8013122:	48a0      	ldr	r0, [pc, #640]	@ (80133a4 <_dtoa_r+0x2b4>)
 8013124:	f001 fbf8 	bl	8014918 <__assert_func>
 8013128:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801312c:	6007      	str	r7, [r0, #0]
 801312e:	60c7      	str	r7, [r0, #12]
 8013130:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013134:	6819      	ldr	r1, [r3, #0]
 8013136:	b159      	cbz	r1, 8013150 <_dtoa_r+0x60>
 8013138:	685a      	ldr	r2, [r3, #4]
 801313a:	604a      	str	r2, [r1, #4]
 801313c:	2301      	movs	r3, #1
 801313e:	4093      	lsls	r3, r2
 8013140:	608b      	str	r3, [r1, #8]
 8013142:	4648      	mov	r0, r9
 8013144:	f000 fe6a 	bl	8013e1c <_Bfree>
 8013148:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801314c:	2200      	movs	r2, #0
 801314e:	601a      	str	r2, [r3, #0]
 8013150:	1e2b      	subs	r3, r5, #0
 8013152:	bfbb      	ittet	lt
 8013154:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8013158:	9303      	strlt	r3, [sp, #12]
 801315a:	2300      	movge	r3, #0
 801315c:	2201      	movlt	r2, #1
 801315e:	bfac      	ite	ge
 8013160:	6033      	strge	r3, [r6, #0]
 8013162:	6032      	strlt	r2, [r6, #0]
 8013164:	4b90      	ldr	r3, [pc, #576]	@ (80133a8 <_dtoa_r+0x2b8>)
 8013166:	9e03      	ldr	r6, [sp, #12]
 8013168:	43b3      	bics	r3, r6
 801316a:	d110      	bne.n	801318e <_dtoa_r+0x9e>
 801316c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801316e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8013172:	6013      	str	r3, [r2, #0]
 8013174:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8013178:	4323      	orrs	r3, r4
 801317a:	f000 84de 	beq.w	8013b3a <_dtoa_r+0xa4a>
 801317e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013180:	4f8a      	ldr	r7, [pc, #552]	@ (80133ac <_dtoa_r+0x2bc>)
 8013182:	2b00      	cmp	r3, #0
 8013184:	f000 84e0 	beq.w	8013b48 <_dtoa_r+0xa58>
 8013188:	1cfb      	adds	r3, r7, #3
 801318a:	f000 bcdb 	b.w	8013b44 <_dtoa_r+0xa54>
 801318e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8013192:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801319a:	d10a      	bne.n	80131b2 <_dtoa_r+0xc2>
 801319c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801319e:	2301      	movs	r3, #1
 80131a0:	6013      	str	r3, [r2, #0]
 80131a2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80131a4:	b113      	cbz	r3, 80131ac <_dtoa_r+0xbc>
 80131a6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80131a8:	4b81      	ldr	r3, [pc, #516]	@ (80133b0 <_dtoa_r+0x2c0>)
 80131aa:	6013      	str	r3, [r2, #0]
 80131ac:	4f81      	ldr	r7, [pc, #516]	@ (80133b4 <_dtoa_r+0x2c4>)
 80131ae:	f000 bccb 	b.w	8013b48 <_dtoa_r+0xa58>
 80131b2:	aa0e      	add	r2, sp, #56	@ 0x38
 80131b4:	a90f      	add	r1, sp, #60	@ 0x3c
 80131b6:	4648      	mov	r0, r9
 80131b8:	eeb0 0b48 	vmov.f64	d0, d8
 80131bc:	f001 f918 	bl	80143f0 <__d2b>
 80131c0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80131c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80131c6:	9001      	str	r0, [sp, #4]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d045      	beq.n	8013258 <_dtoa_r+0x168>
 80131cc:	eeb0 7b48 	vmov.f64	d7, d8
 80131d0:	ee18 1a90 	vmov	r1, s17
 80131d4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80131d8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80131dc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80131e0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80131e4:	2500      	movs	r5, #0
 80131e6:	ee07 1a90 	vmov	s15, r1
 80131ea:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80131ee:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8013388 <_dtoa_r+0x298>
 80131f2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80131f6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8013390 <_dtoa_r+0x2a0>
 80131fa:	eea7 6b05 	vfma.f64	d6, d7, d5
 80131fe:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8013398 <_dtoa_r+0x2a8>
 8013202:	ee07 3a90 	vmov	s15, r3
 8013206:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801320a:	eeb0 7b46 	vmov.f64	d7, d6
 801320e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8013212:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8013216:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801321a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801321e:	ee16 8a90 	vmov	r8, s13
 8013222:	d508      	bpl.n	8013236 <_dtoa_r+0x146>
 8013224:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8013228:	eeb4 6b47 	vcmp.f64	d6, d7
 801322c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013230:	bf18      	it	ne
 8013232:	f108 38ff 	addne.w	r8, r8, #4294967295
 8013236:	f1b8 0f16 	cmp.w	r8, #22
 801323a:	d82b      	bhi.n	8013294 <_dtoa_r+0x1a4>
 801323c:	495e      	ldr	r1, [pc, #376]	@ (80133b8 <_dtoa_r+0x2c8>)
 801323e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8013242:	ed91 7b00 	vldr	d7, [r1]
 8013246:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801324a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801324e:	d501      	bpl.n	8013254 <_dtoa_r+0x164>
 8013250:	f108 38ff 	add.w	r8, r8, #4294967295
 8013254:	2100      	movs	r1, #0
 8013256:	e01e      	b.n	8013296 <_dtoa_r+0x1a6>
 8013258:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801325a:	4413      	add	r3, r2
 801325c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8013260:	2920      	cmp	r1, #32
 8013262:	bfc1      	itttt	gt
 8013264:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8013268:	408e      	lslgt	r6, r1
 801326a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801326e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8013272:	bfd6      	itet	le
 8013274:	f1c1 0120 	rsble	r1, r1, #32
 8013278:	4331      	orrgt	r1, r6
 801327a:	fa04 f101 	lslle.w	r1, r4, r1
 801327e:	ee07 1a90 	vmov	s15, r1
 8013282:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8013286:	3b01      	subs	r3, #1
 8013288:	ee17 1a90 	vmov	r1, s15
 801328c:	2501      	movs	r5, #1
 801328e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8013292:	e7a8      	b.n	80131e6 <_dtoa_r+0xf6>
 8013294:	2101      	movs	r1, #1
 8013296:	1ad2      	subs	r2, r2, r3
 8013298:	1e53      	subs	r3, r2, #1
 801329a:	9306      	str	r3, [sp, #24]
 801329c:	bf45      	ittet	mi
 801329e:	f1c2 0301 	rsbmi	r3, r2, #1
 80132a2:	9305      	strmi	r3, [sp, #20]
 80132a4:	2300      	movpl	r3, #0
 80132a6:	2300      	movmi	r3, #0
 80132a8:	bf4c      	ite	mi
 80132aa:	9306      	strmi	r3, [sp, #24]
 80132ac:	9305      	strpl	r3, [sp, #20]
 80132ae:	f1b8 0f00 	cmp.w	r8, #0
 80132b2:	910c      	str	r1, [sp, #48]	@ 0x30
 80132b4:	db18      	blt.n	80132e8 <_dtoa_r+0x1f8>
 80132b6:	9b06      	ldr	r3, [sp, #24]
 80132b8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80132bc:	4443      	add	r3, r8
 80132be:	9306      	str	r3, [sp, #24]
 80132c0:	2300      	movs	r3, #0
 80132c2:	9a07      	ldr	r2, [sp, #28]
 80132c4:	2a09      	cmp	r2, #9
 80132c6:	d849      	bhi.n	801335c <_dtoa_r+0x26c>
 80132c8:	2a05      	cmp	r2, #5
 80132ca:	bfc4      	itt	gt
 80132cc:	3a04      	subgt	r2, #4
 80132ce:	9207      	strgt	r2, [sp, #28]
 80132d0:	9a07      	ldr	r2, [sp, #28]
 80132d2:	f1a2 0202 	sub.w	r2, r2, #2
 80132d6:	bfcc      	ite	gt
 80132d8:	2400      	movgt	r4, #0
 80132da:	2401      	movle	r4, #1
 80132dc:	2a03      	cmp	r2, #3
 80132de:	d848      	bhi.n	8013372 <_dtoa_r+0x282>
 80132e0:	e8df f002 	tbb	[pc, r2]
 80132e4:	3a2c2e0b 	.word	0x3a2c2e0b
 80132e8:	9b05      	ldr	r3, [sp, #20]
 80132ea:	2200      	movs	r2, #0
 80132ec:	eba3 0308 	sub.w	r3, r3, r8
 80132f0:	9305      	str	r3, [sp, #20]
 80132f2:	920a      	str	r2, [sp, #40]	@ 0x28
 80132f4:	f1c8 0300 	rsb	r3, r8, #0
 80132f8:	e7e3      	b.n	80132c2 <_dtoa_r+0x1d2>
 80132fa:	2200      	movs	r2, #0
 80132fc:	9208      	str	r2, [sp, #32]
 80132fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013300:	2a00      	cmp	r2, #0
 8013302:	dc39      	bgt.n	8013378 <_dtoa_r+0x288>
 8013304:	f04f 0b01 	mov.w	fp, #1
 8013308:	46da      	mov	sl, fp
 801330a:	465a      	mov	r2, fp
 801330c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8013310:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8013314:	2100      	movs	r1, #0
 8013316:	2004      	movs	r0, #4
 8013318:	f100 0614 	add.w	r6, r0, #20
 801331c:	4296      	cmp	r6, r2
 801331e:	d930      	bls.n	8013382 <_dtoa_r+0x292>
 8013320:	6079      	str	r1, [r7, #4]
 8013322:	4648      	mov	r0, r9
 8013324:	9304      	str	r3, [sp, #16]
 8013326:	f000 fd39 	bl	8013d9c <_Balloc>
 801332a:	9b04      	ldr	r3, [sp, #16]
 801332c:	4607      	mov	r7, r0
 801332e:	2800      	cmp	r0, #0
 8013330:	d146      	bne.n	80133c0 <_dtoa_r+0x2d0>
 8013332:	4b22      	ldr	r3, [pc, #136]	@ (80133bc <_dtoa_r+0x2cc>)
 8013334:	4602      	mov	r2, r0
 8013336:	f240 11af 	movw	r1, #431	@ 0x1af
 801333a:	e6f2      	b.n	8013122 <_dtoa_r+0x32>
 801333c:	2201      	movs	r2, #1
 801333e:	e7dd      	b.n	80132fc <_dtoa_r+0x20c>
 8013340:	2200      	movs	r2, #0
 8013342:	9208      	str	r2, [sp, #32]
 8013344:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013346:	eb08 0b02 	add.w	fp, r8, r2
 801334a:	f10b 0a01 	add.w	sl, fp, #1
 801334e:	4652      	mov	r2, sl
 8013350:	2a01      	cmp	r2, #1
 8013352:	bfb8      	it	lt
 8013354:	2201      	movlt	r2, #1
 8013356:	e7db      	b.n	8013310 <_dtoa_r+0x220>
 8013358:	2201      	movs	r2, #1
 801335a:	e7f2      	b.n	8013342 <_dtoa_r+0x252>
 801335c:	2401      	movs	r4, #1
 801335e:	2200      	movs	r2, #0
 8013360:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8013364:	f04f 3bff 	mov.w	fp, #4294967295
 8013368:	2100      	movs	r1, #0
 801336a:	46da      	mov	sl, fp
 801336c:	2212      	movs	r2, #18
 801336e:	9109      	str	r1, [sp, #36]	@ 0x24
 8013370:	e7ce      	b.n	8013310 <_dtoa_r+0x220>
 8013372:	2201      	movs	r2, #1
 8013374:	9208      	str	r2, [sp, #32]
 8013376:	e7f5      	b.n	8013364 <_dtoa_r+0x274>
 8013378:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801337c:	46da      	mov	sl, fp
 801337e:	465a      	mov	r2, fp
 8013380:	e7c6      	b.n	8013310 <_dtoa_r+0x220>
 8013382:	3101      	adds	r1, #1
 8013384:	0040      	lsls	r0, r0, #1
 8013386:	e7c7      	b.n	8013318 <_dtoa_r+0x228>
 8013388:	636f4361 	.word	0x636f4361
 801338c:	3fd287a7 	.word	0x3fd287a7
 8013390:	8b60c8b3 	.word	0x8b60c8b3
 8013394:	3fc68a28 	.word	0x3fc68a28
 8013398:	509f79fb 	.word	0x509f79fb
 801339c:	3fd34413 	.word	0x3fd34413
 80133a0:	08015131 	.word	0x08015131
 80133a4:	08015148 	.word	0x08015148
 80133a8:	7ff00000 	.word	0x7ff00000
 80133ac:	0801512d 	.word	0x0801512d
 80133b0:	08015101 	.word	0x08015101
 80133b4:	08015100 	.word	0x08015100
 80133b8:	08015240 	.word	0x08015240
 80133bc:	080151a0 	.word	0x080151a0
 80133c0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80133c4:	f1ba 0f0e 	cmp.w	sl, #14
 80133c8:	6010      	str	r0, [r2, #0]
 80133ca:	d86f      	bhi.n	80134ac <_dtoa_r+0x3bc>
 80133cc:	2c00      	cmp	r4, #0
 80133ce:	d06d      	beq.n	80134ac <_dtoa_r+0x3bc>
 80133d0:	f1b8 0f00 	cmp.w	r8, #0
 80133d4:	f340 80c2 	ble.w	801355c <_dtoa_r+0x46c>
 80133d8:	4aca      	ldr	r2, [pc, #808]	@ (8013704 <_dtoa_r+0x614>)
 80133da:	f008 010f 	and.w	r1, r8, #15
 80133de:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80133e2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80133e6:	ed92 7b00 	vldr	d7, [r2]
 80133ea:	ea4f 1128 	mov.w	r1, r8, asr #4
 80133ee:	f000 80a9 	beq.w	8013544 <_dtoa_r+0x454>
 80133f2:	4ac5      	ldr	r2, [pc, #788]	@ (8013708 <_dtoa_r+0x618>)
 80133f4:	ed92 6b08 	vldr	d6, [r2, #32]
 80133f8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80133fc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013400:	f001 010f 	and.w	r1, r1, #15
 8013404:	2203      	movs	r2, #3
 8013406:	48c0      	ldr	r0, [pc, #768]	@ (8013708 <_dtoa_r+0x618>)
 8013408:	2900      	cmp	r1, #0
 801340a:	f040 809d 	bne.w	8013548 <_dtoa_r+0x458>
 801340e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013412:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013416:	ed8d 7b02 	vstr	d7, [sp, #8]
 801341a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801341c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013420:	2900      	cmp	r1, #0
 8013422:	f000 80c1 	beq.w	80135a8 <_dtoa_r+0x4b8>
 8013426:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801342a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801342e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013432:	f140 80b9 	bpl.w	80135a8 <_dtoa_r+0x4b8>
 8013436:	f1ba 0f00 	cmp.w	sl, #0
 801343a:	f000 80b5 	beq.w	80135a8 <_dtoa_r+0x4b8>
 801343e:	f1bb 0f00 	cmp.w	fp, #0
 8013442:	dd31      	ble.n	80134a8 <_dtoa_r+0x3b8>
 8013444:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8013448:	ee27 7b06 	vmul.f64	d7, d7, d6
 801344c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013450:	f108 31ff 	add.w	r1, r8, #4294967295
 8013454:	9104      	str	r1, [sp, #16]
 8013456:	3201      	adds	r2, #1
 8013458:	465c      	mov	r4, fp
 801345a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801345e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8013462:	ee07 2a90 	vmov	s15, r2
 8013466:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801346a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801346e:	ee15 2a90 	vmov	r2, s11
 8013472:	ec51 0b15 	vmov	r0, r1, d5
 8013476:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801347a:	2c00      	cmp	r4, #0
 801347c:	f040 8098 	bne.w	80135b0 <_dtoa_r+0x4c0>
 8013480:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8013484:	ee36 6b47 	vsub.f64	d6, d6, d7
 8013488:	ec41 0b17 	vmov	d7, r0, r1
 801348c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013494:	f300 8261 	bgt.w	801395a <_dtoa_r+0x86a>
 8013498:	eeb1 7b47 	vneg.f64	d7, d7
 801349c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80134a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134a4:	f100 80f5 	bmi.w	8013692 <_dtoa_r+0x5a2>
 80134a8:	ed8d 8b02 	vstr	d8, [sp, #8]
 80134ac:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80134ae:	2a00      	cmp	r2, #0
 80134b0:	f2c0 812c 	blt.w	801370c <_dtoa_r+0x61c>
 80134b4:	f1b8 0f0e 	cmp.w	r8, #14
 80134b8:	f300 8128 	bgt.w	801370c <_dtoa_r+0x61c>
 80134bc:	4b91      	ldr	r3, [pc, #580]	@ (8013704 <_dtoa_r+0x614>)
 80134be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80134c2:	ed93 6b00 	vldr	d6, [r3]
 80134c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	da03      	bge.n	80134d4 <_dtoa_r+0x3e4>
 80134cc:	f1ba 0f00 	cmp.w	sl, #0
 80134d0:	f340 80d2 	ble.w	8013678 <_dtoa_r+0x588>
 80134d4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80134d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80134dc:	463e      	mov	r6, r7
 80134de:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80134e2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80134e6:	ee15 3a10 	vmov	r3, s10
 80134ea:	3330      	adds	r3, #48	@ 0x30
 80134ec:	f806 3b01 	strb.w	r3, [r6], #1
 80134f0:	1bf3      	subs	r3, r6, r7
 80134f2:	459a      	cmp	sl, r3
 80134f4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80134f8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80134fc:	f040 80f8 	bne.w	80136f0 <_dtoa_r+0x600>
 8013500:	ee37 7b07 	vadd.f64	d7, d7, d7
 8013504:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801350c:	f300 80dd 	bgt.w	80136ca <_dtoa_r+0x5da>
 8013510:	eeb4 7b46 	vcmp.f64	d7, d6
 8013514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013518:	d104      	bne.n	8013524 <_dtoa_r+0x434>
 801351a:	ee15 3a10 	vmov	r3, s10
 801351e:	07db      	lsls	r3, r3, #31
 8013520:	f100 80d3 	bmi.w	80136ca <_dtoa_r+0x5da>
 8013524:	9901      	ldr	r1, [sp, #4]
 8013526:	4648      	mov	r0, r9
 8013528:	f000 fc78 	bl	8013e1c <_Bfree>
 801352c:	2300      	movs	r3, #0
 801352e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013530:	7033      	strb	r3, [r6, #0]
 8013532:	f108 0301 	add.w	r3, r8, #1
 8013536:	6013      	str	r3, [r2, #0]
 8013538:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801353a:	2b00      	cmp	r3, #0
 801353c:	f000 8304 	beq.w	8013b48 <_dtoa_r+0xa58>
 8013540:	601e      	str	r6, [r3, #0]
 8013542:	e301      	b.n	8013b48 <_dtoa_r+0xa58>
 8013544:	2202      	movs	r2, #2
 8013546:	e75e      	b.n	8013406 <_dtoa_r+0x316>
 8013548:	07cc      	lsls	r4, r1, #31
 801354a:	d504      	bpl.n	8013556 <_dtoa_r+0x466>
 801354c:	ed90 6b00 	vldr	d6, [r0]
 8013550:	3201      	adds	r2, #1
 8013552:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013556:	1049      	asrs	r1, r1, #1
 8013558:	3008      	adds	r0, #8
 801355a:	e755      	b.n	8013408 <_dtoa_r+0x318>
 801355c:	d022      	beq.n	80135a4 <_dtoa_r+0x4b4>
 801355e:	f1c8 0100 	rsb	r1, r8, #0
 8013562:	4a68      	ldr	r2, [pc, #416]	@ (8013704 <_dtoa_r+0x614>)
 8013564:	f001 000f 	and.w	r0, r1, #15
 8013568:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801356c:	ed92 7b00 	vldr	d7, [r2]
 8013570:	ee28 7b07 	vmul.f64	d7, d8, d7
 8013574:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013578:	4863      	ldr	r0, [pc, #396]	@ (8013708 <_dtoa_r+0x618>)
 801357a:	1109      	asrs	r1, r1, #4
 801357c:	2400      	movs	r4, #0
 801357e:	2202      	movs	r2, #2
 8013580:	b929      	cbnz	r1, 801358e <_dtoa_r+0x49e>
 8013582:	2c00      	cmp	r4, #0
 8013584:	f43f af49 	beq.w	801341a <_dtoa_r+0x32a>
 8013588:	ed8d 7b02 	vstr	d7, [sp, #8]
 801358c:	e745      	b.n	801341a <_dtoa_r+0x32a>
 801358e:	07ce      	lsls	r6, r1, #31
 8013590:	d505      	bpl.n	801359e <_dtoa_r+0x4ae>
 8013592:	ed90 6b00 	vldr	d6, [r0]
 8013596:	3201      	adds	r2, #1
 8013598:	2401      	movs	r4, #1
 801359a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801359e:	1049      	asrs	r1, r1, #1
 80135a0:	3008      	adds	r0, #8
 80135a2:	e7ed      	b.n	8013580 <_dtoa_r+0x490>
 80135a4:	2202      	movs	r2, #2
 80135a6:	e738      	b.n	801341a <_dtoa_r+0x32a>
 80135a8:	f8cd 8010 	str.w	r8, [sp, #16]
 80135ac:	4654      	mov	r4, sl
 80135ae:	e754      	b.n	801345a <_dtoa_r+0x36a>
 80135b0:	4a54      	ldr	r2, [pc, #336]	@ (8013704 <_dtoa_r+0x614>)
 80135b2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80135b6:	ed12 4b02 	vldr	d4, [r2, #-8]
 80135ba:	9a08      	ldr	r2, [sp, #32]
 80135bc:	ec41 0b17 	vmov	d7, r0, r1
 80135c0:	443c      	add	r4, r7
 80135c2:	b34a      	cbz	r2, 8013618 <_dtoa_r+0x528>
 80135c4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80135c8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80135cc:	463e      	mov	r6, r7
 80135ce:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80135d2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80135d6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80135da:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80135de:	ee14 2a90 	vmov	r2, s9
 80135e2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80135e6:	3230      	adds	r2, #48	@ 0x30
 80135e8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80135ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80135f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135f4:	f806 2b01 	strb.w	r2, [r6], #1
 80135f8:	d438      	bmi.n	801366c <_dtoa_r+0x57c>
 80135fa:	ee32 5b46 	vsub.f64	d5, d2, d6
 80135fe:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8013602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013606:	d462      	bmi.n	80136ce <_dtoa_r+0x5de>
 8013608:	42a6      	cmp	r6, r4
 801360a:	f43f af4d 	beq.w	80134a8 <_dtoa_r+0x3b8>
 801360e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8013612:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013616:	e7e0      	b.n	80135da <_dtoa_r+0x4ea>
 8013618:	4621      	mov	r1, r4
 801361a:	463e      	mov	r6, r7
 801361c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013620:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8013624:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013628:	ee14 2a90 	vmov	r2, s9
 801362c:	3230      	adds	r2, #48	@ 0x30
 801362e:	f806 2b01 	strb.w	r2, [r6], #1
 8013632:	42a6      	cmp	r6, r4
 8013634:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013638:	ee36 6b45 	vsub.f64	d6, d6, d5
 801363c:	d119      	bne.n	8013672 <_dtoa_r+0x582>
 801363e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8013642:	ee37 4b05 	vadd.f64	d4, d7, d5
 8013646:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801364a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801364e:	dc3e      	bgt.n	80136ce <_dtoa_r+0x5de>
 8013650:	ee35 5b47 	vsub.f64	d5, d5, d7
 8013654:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8013658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801365c:	f57f af24 	bpl.w	80134a8 <_dtoa_r+0x3b8>
 8013660:	460e      	mov	r6, r1
 8013662:	3901      	subs	r1, #1
 8013664:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013668:	2b30      	cmp	r3, #48	@ 0x30
 801366a:	d0f9      	beq.n	8013660 <_dtoa_r+0x570>
 801366c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013670:	e758      	b.n	8013524 <_dtoa_r+0x434>
 8013672:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013676:	e7d5      	b.n	8013624 <_dtoa_r+0x534>
 8013678:	d10b      	bne.n	8013692 <_dtoa_r+0x5a2>
 801367a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801367e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8013682:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013686:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801368a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801368e:	f2c0 8161 	blt.w	8013954 <_dtoa_r+0x864>
 8013692:	2400      	movs	r4, #0
 8013694:	4625      	mov	r5, r4
 8013696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013698:	43db      	mvns	r3, r3
 801369a:	9304      	str	r3, [sp, #16]
 801369c:	463e      	mov	r6, r7
 801369e:	f04f 0800 	mov.w	r8, #0
 80136a2:	4621      	mov	r1, r4
 80136a4:	4648      	mov	r0, r9
 80136a6:	f000 fbb9 	bl	8013e1c <_Bfree>
 80136aa:	2d00      	cmp	r5, #0
 80136ac:	d0de      	beq.n	801366c <_dtoa_r+0x57c>
 80136ae:	f1b8 0f00 	cmp.w	r8, #0
 80136b2:	d005      	beq.n	80136c0 <_dtoa_r+0x5d0>
 80136b4:	45a8      	cmp	r8, r5
 80136b6:	d003      	beq.n	80136c0 <_dtoa_r+0x5d0>
 80136b8:	4641      	mov	r1, r8
 80136ba:	4648      	mov	r0, r9
 80136bc:	f000 fbae 	bl	8013e1c <_Bfree>
 80136c0:	4629      	mov	r1, r5
 80136c2:	4648      	mov	r0, r9
 80136c4:	f000 fbaa 	bl	8013e1c <_Bfree>
 80136c8:	e7d0      	b.n	801366c <_dtoa_r+0x57c>
 80136ca:	f8cd 8010 	str.w	r8, [sp, #16]
 80136ce:	4633      	mov	r3, r6
 80136d0:	461e      	mov	r6, r3
 80136d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80136d6:	2a39      	cmp	r2, #57	@ 0x39
 80136d8:	d106      	bne.n	80136e8 <_dtoa_r+0x5f8>
 80136da:	429f      	cmp	r7, r3
 80136dc:	d1f8      	bne.n	80136d0 <_dtoa_r+0x5e0>
 80136de:	9a04      	ldr	r2, [sp, #16]
 80136e0:	3201      	adds	r2, #1
 80136e2:	9204      	str	r2, [sp, #16]
 80136e4:	2230      	movs	r2, #48	@ 0x30
 80136e6:	703a      	strb	r2, [r7, #0]
 80136e8:	781a      	ldrb	r2, [r3, #0]
 80136ea:	3201      	adds	r2, #1
 80136ec:	701a      	strb	r2, [r3, #0]
 80136ee:	e7bd      	b.n	801366c <_dtoa_r+0x57c>
 80136f0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80136f4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80136f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136fc:	f47f aeef 	bne.w	80134de <_dtoa_r+0x3ee>
 8013700:	e710      	b.n	8013524 <_dtoa_r+0x434>
 8013702:	bf00      	nop
 8013704:	08015240 	.word	0x08015240
 8013708:	08015218 	.word	0x08015218
 801370c:	9908      	ldr	r1, [sp, #32]
 801370e:	2900      	cmp	r1, #0
 8013710:	f000 80e3 	beq.w	80138da <_dtoa_r+0x7ea>
 8013714:	9907      	ldr	r1, [sp, #28]
 8013716:	2901      	cmp	r1, #1
 8013718:	f300 80c8 	bgt.w	80138ac <_dtoa_r+0x7bc>
 801371c:	2d00      	cmp	r5, #0
 801371e:	f000 80c1 	beq.w	80138a4 <_dtoa_r+0x7b4>
 8013722:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8013726:	9e05      	ldr	r6, [sp, #20]
 8013728:	461c      	mov	r4, r3
 801372a:	9304      	str	r3, [sp, #16]
 801372c:	9b05      	ldr	r3, [sp, #20]
 801372e:	4413      	add	r3, r2
 8013730:	9305      	str	r3, [sp, #20]
 8013732:	9b06      	ldr	r3, [sp, #24]
 8013734:	2101      	movs	r1, #1
 8013736:	4413      	add	r3, r2
 8013738:	4648      	mov	r0, r9
 801373a:	9306      	str	r3, [sp, #24]
 801373c:	f000 fc22 	bl	8013f84 <__i2b>
 8013740:	9b04      	ldr	r3, [sp, #16]
 8013742:	4605      	mov	r5, r0
 8013744:	b166      	cbz	r6, 8013760 <_dtoa_r+0x670>
 8013746:	9a06      	ldr	r2, [sp, #24]
 8013748:	2a00      	cmp	r2, #0
 801374a:	dd09      	ble.n	8013760 <_dtoa_r+0x670>
 801374c:	42b2      	cmp	r2, r6
 801374e:	9905      	ldr	r1, [sp, #20]
 8013750:	bfa8      	it	ge
 8013752:	4632      	movge	r2, r6
 8013754:	1a89      	subs	r1, r1, r2
 8013756:	9105      	str	r1, [sp, #20]
 8013758:	9906      	ldr	r1, [sp, #24]
 801375a:	1ab6      	subs	r6, r6, r2
 801375c:	1a8a      	subs	r2, r1, r2
 801375e:	9206      	str	r2, [sp, #24]
 8013760:	b1fb      	cbz	r3, 80137a2 <_dtoa_r+0x6b2>
 8013762:	9a08      	ldr	r2, [sp, #32]
 8013764:	2a00      	cmp	r2, #0
 8013766:	f000 80bc 	beq.w	80138e2 <_dtoa_r+0x7f2>
 801376a:	b19c      	cbz	r4, 8013794 <_dtoa_r+0x6a4>
 801376c:	4629      	mov	r1, r5
 801376e:	4622      	mov	r2, r4
 8013770:	4648      	mov	r0, r9
 8013772:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013774:	f000 fcc6 	bl	8014104 <__pow5mult>
 8013778:	9a01      	ldr	r2, [sp, #4]
 801377a:	4601      	mov	r1, r0
 801377c:	4605      	mov	r5, r0
 801377e:	4648      	mov	r0, r9
 8013780:	f000 fc16 	bl	8013fb0 <__multiply>
 8013784:	9901      	ldr	r1, [sp, #4]
 8013786:	9004      	str	r0, [sp, #16]
 8013788:	4648      	mov	r0, r9
 801378a:	f000 fb47 	bl	8013e1c <_Bfree>
 801378e:	9a04      	ldr	r2, [sp, #16]
 8013790:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013792:	9201      	str	r2, [sp, #4]
 8013794:	1b1a      	subs	r2, r3, r4
 8013796:	d004      	beq.n	80137a2 <_dtoa_r+0x6b2>
 8013798:	9901      	ldr	r1, [sp, #4]
 801379a:	4648      	mov	r0, r9
 801379c:	f000 fcb2 	bl	8014104 <__pow5mult>
 80137a0:	9001      	str	r0, [sp, #4]
 80137a2:	2101      	movs	r1, #1
 80137a4:	4648      	mov	r0, r9
 80137a6:	f000 fbed 	bl	8013f84 <__i2b>
 80137aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80137ac:	4604      	mov	r4, r0
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	f000 81d0 	beq.w	8013b54 <_dtoa_r+0xa64>
 80137b4:	461a      	mov	r2, r3
 80137b6:	4601      	mov	r1, r0
 80137b8:	4648      	mov	r0, r9
 80137ba:	f000 fca3 	bl	8014104 <__pow5mult>
 80137be:	9b07      	ldr	r3, [sp, #28]
 80137c0:	2b01      	cmp	r3, #1
 80137c2:	4604      	mov	r4, r0
 80137c4:	f300 8095 	bgt.w	80138f2 <_dtoa_r+0x802>
 80137c8:	9b02      	ldr	r3, [sp, #8]
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	f040 808b 	bne.w	80138e6 <_dtoa_r+0x7f6>
 80137d0:	9b03      	ldr	r3, [sp, #12]
 80137d2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80137d6:	2a00      	cmp	r2, #0
 80137d8:	f040 8087 	bne.w	80138ea <_dtoa_r+0x7fa>
 80137dc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80137e0:	0d12      	lsrs	r2, r2, #20
 80137e2:	0512      	lsls	r2, r2, #20
 80137e4:	2a00      	cmp	r2, #0
 80137e6:	f000 8082 	beq.w	80138ee <_dtoa_r+0x7fe>
 80137ea:	9b05      	ldr	r3, [sp, #20]
 80137ec:	3301      	adds	r3, #1
 80137ee:	9305      	str	r3, [sp, #20]
 80137f0:	9b06      	ldr	r3, [sp, #24]
 80137f2:	3301      	adds	r3, #1
 80137f4:	9306      	str	r3, [sp, #24]
 80137f6:	2301      	movs	r3, #1
 80137f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80137fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	f000 81af 	beq.w	8013b60 <_dtoa_r+0xa70>
 8013802:	6922      	ldr	r2, [r4, #16]
 8013804:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013808:	6910      	ldr	r0, [r2, #16]
 801380a:	f000 fb6f 	bl	8013eec <__hi0bits>
 801380e:	f1c0 0020 	rsb	r0, r0, #32
 8013812:	9b06      	ldr	r3, [sp, #24]
 8013814:	4418      	add	r0, r3
 8013816:	f010 001f 	ands.w	r0, r0, #31
 801381a:	d076      	beq.n	801390a <_dtoa_r+0x81a>
 801381c:	f1c0 0220 	rsb	r2, r0, #32
 8013820:	2a04      	cmp	r2, #4
 8013822:	dd69      	ble.n	80138f8 <_dtoa_r+0x808>
 8013824:	9b05      	ldr	r3, [sp, #20]
 8013826:	f1c0 001c 	rsb	r0, r0, #28
 801382a:	4403      	add	r3, r0
 801382c:	9305      	str	r3, [sp, #20]
 801382e:	9b06      	ldr	r3, [sp, #24]
 8013830:	4406      	add	r6, r0
 8013832:	4403      	add	r3, r0
 8013834:	9306      	str	r3, [sp, #24]
 8013836:	9b05      	ldr	r3, [sp, #20]
 8013838:	2b00      	cmp	r3, #0
 801383a:	dd05      	ble.n	8013848 <_dtoa_r+0x758>
 801383c:	9901      	ldr	r1, [sp, #4]
 801383e:	461a      	mov	r2, r3
 8013840:	4648      	mov	r0, r9
 8013842:	f000 fcb9 	bl	80141b8 <__lshift>
 8013846:	9001      	str	r0, [sp, #4]
 8013848:	9b06      	ldr	r3, [sp, #24]
 801384a:	2b00      	cmp	r3, #0
 801384c:	dd05      	ble.n	801385a <_dtoa_r+0x76a>
 801384e:	4621      	mov	r1, r4
 8013850:	461a      	mov	r2, r3
 8013852:	4648      	mov	r0, r9
 8013854:	f000 fcb0 	bl	80141b8 <__lshift>
 8013858:	4604      	mov	r4, r0
 801385a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801385c:	2b00      	cmp	r3, #0
 801385e:	d056      	beq.n	801390e <_dtoa_r+0x81e>
 8013860:	9801      	ldr	r0, [sp, #4]
 8013862:	4621      	mov	r1, r4
 8013864:	f000 fd14 	bl	8014290 <__mcmp>
 8013868:	2800      	cmp	r0, #0
 801386a:	da50      	bge.n	801390e <_dtoa_r+0x81e>
 801386c:	f108 33ff 	add.w	r3, r8, #4294967295
 8013870:	9304      	str	r3, [sp, #16]
 8013872:	9901      	ldr	r1, [sp, #4]
 8013874:	2300      	movs	r3, #0
 8013876:	220a      	movs	r2, #10
 8013878:	4648      	mov	r0, r9
 801387a:	f000 faf1 	bl	8013e60 <__multadd>
 801387e:	9b08      	ldr	r3, [sp, #32]
 8013880:	9001      	str	r0, [sp, #4]
 8013882:	2b00      	cmp	r3, #0
 8013884:	f000 816e 	beq.w	8013b64 <_dtoa_r+0xa74>
 8013888:	4629      	mov	r1, r5
 801388a:	2300      	movs	r3, #0
 801388c:	220a      	movs	r2, #10
 801388e:	4648      	mov	r0, r9
 8013890:	f000 fae6 	bl	8013e60 <__multadd>
 8013894:	f1bb 0f00 	cmp.w	fp, #0
 8013898:	4605      	mov	r5, r0
 801389a:	dc64      	bgt.n	8013966 <_dtoa_r+0x876>
 801389c:	9b07      	ldr	r3, [sp, #28]
 801389e:	2b02      	cmp	r3, #2
 80138a0:	dc3e      	bgt.n	8013920 <_dtoa_r+0x830>
 80138a2:	e060      	b.n	8013966 <_dtoa_r+0x876>
 80138a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80138a6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80138aa:	e73c      	b.n	8013726 <_dtoa_r+0x636>
 80138ac:	f10a 34ff 	add.w	r4, sl, #4294967295
 80138b0:	42a3      	cmp	r3, r4
 80138b2:	bfbf      	itttt	lt
 80138b4:	1ae2      	sublt	r2, r4, r3
 80138b6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80138b8:	189b      	addlt	r3, r3, r2
 80138ba:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80138bc:	bfae      	itee	ge
 80138be:	1b1c      	subge	r4, r3, r4
 80138c0:	4623      	movlt	r3, r4
 80138c2:	2400      	movlt	r4, #0
 80138c4:	f1ba 0f00 	cmp.w	sl, #0
 80138c8:	bfb5      	itete	lt
 80138ca:	9a05      	ldrlt	r2, [sp, #20]
 80138cc:	9e05      	ldrge	r6, [sp, #20]
 80138ce:	eba2 060a 	sublt.w	r6, r2, sl
 80138d2:	4652      	movge	r2, sl
 80138d4:	bfb8      	it	lt
 80138d6:	2200      	movlt	r2, #0
 80138d8:	e727      	b.n	801372a <_dtoa_r+0x63a>
 80138da:	9e05      	ldr	r6, [sp, #20]
 80138dc:	9d08      	ldr	r5, [sp, #32]
 80138de:	461c      	mov	r4, r3
 80138e0:	e730      	b.n	8013744 <_dtoa_r+0x654>
 80138e2:	461a      	mov	r2, r3
 80138e4:	e758      	b.n	8013798 <_dtoa_r+0x6a8>
 80138e6:	2300      	movs	r3, #0
 80138e8:	e786      	b.n	80137f8 <_dtoa_r+0x708>
 80138ea:	9b02      	ldr	r3, [sp, #8]
 80138ec:	e784      	b.n	80137f8 <_dtoa_r+0x708>
 80138ee:	920b      	str	r2, [sp, #44]	@ 0x2c
 80138f0:	e783      	b.n	80137fa <_dtoa_r+0x70a>
 80138f2:	2300      	movs	r3, #0
 80138f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80138f6:	e784      	b.n	8013802 <_dtoa_r+0x712>
 80138f8:	d09d      	beq.n	8013836 <_dtoa_r+0x746>
 80138fa:	9b05      	ldr	r3, [sp, #20]
 80138fc:	321c      	adds	r2, #28
 80138fe:	4413      	add	r3, r2
 8013900:	9305      	str	r3, [sp, #20]
 8013902:	9b06      	ldr	r3, [sp, #24]
 8013904:	4416      	add	r6, r2
 8013906:	4413      	add	r3, r2
 8013908:	e794      	b.n	8013834 <_dtoa_r+0x744>
 801390a:	4602      	mov	r2, r0
 801390c:	e7f5      	b.n	80138fa <_dtoa_r+0x80a>
 801390e:	f1ba 0f00 	cmp.w	sl, #0
 8013912:	f8cd 8010 	str.w	r8, [sp, #16]
 8013916:	46d3      	mov	fp, sl
 8013918:	dc21      	bgt.n	801395e <_dtoa_r+0x86e>
 801391a:	9b07      	ldr	r3, [sp, #28]
 801391c:	2b02      	cmp	r3, #2
 801391e:	dd1e      	ble.n	801395e <_dtoa_r+0x86e>
 8013920:	f1bb 0f00 	cmp.w	fp, #0
 8013924:	f47f aeb7 	bne.w	8013696 <_dtoa_r+0x5a6>
 8013928:	4621      	mov	r1, r4
 801392a:	465b      	mov	r3, fp
 801392c:	2205      	movs	r2, #5
 801392e:	4648      	mov	r0, r9
 8013930:	f000 fa96 	bl	8013e60 <__multadd>
 8013934:	4601      	mov	r1, r0
 8013936:	4604      	mov	r4, r0
 8013938:	9801      	ldr	r0, [sp, #4]
 801393a:	f000 fca9 	bl	8014290 <__mcmp>
 801393e:	2800      	cmp	r0, #0
 8013940:	f77f aea9 	ble.w	8013696 <_dtoa_r+0x5a6>
 8013944:	463e      	mov	r6, r7
 8013946:	2331      	movs	r3, #49	@ 0x31
 8013948:	f806 3b01 	strb.w	r3, [r6], #1
 801394c:	9b04      	ldr	r3, [sp, #16]
 801394e:	3301      	adds	r3, #1
 8013950:	9304      	str	r3, [sp, #16]
 8013952:	e6a4      	b.n	801369e <_dtoa_r+0x5ae>
 8013954:	f8cd 8010 	str.w	r8, [sp, #16]
 8013958:	4654      	mov	r4, sl
 801395a:	4625      	mov	r5, r4
 801395c:	e7f2      	b.n	8013944 <_dtoa_r+0x854>
 801395e:	9b08      	ldr	r3, [sp, #32]
 8013960:	2b00      	cmp	r3, #0
 8013962:	f000 8103 	beq.w	8013b6c <_dtoa_r+0xa7c>
 8013966:	2e00      	cmp	r6, #0
 8013968:	dd05      	ble.n	8013976 <_dtoa_r+0x886>
 801396a:	4629      	mov	r1, r5
 801396c:	4632      	mov	r2, r6
 801396e:	4648      	mov	r0, r9
 8013970:	f000 fc22 	bl	80141b8 <__lshift>
 8013974:	4605      	mov	r5, r0
 8013976:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013978:	2b00      	cmp	r3, #0
 801397a:	d058      	beq.n	8013a2e <_dtoa_r+0x93e>
 801397c:	6869      	ldr	r1, [r5, #4]
 801397e:	4648      	mov	r0, r9
 8013980:	f000 fa0c 	bl	8013d9c <_Balloc>
 8013984:	4606      	mov	r6, r0
 8013986:	b928      	cbnz	r0, 8013994 <_dtoa_r+0x8a4>
 8013988:	4b82      	ldr	r3, [pc, #520]	@ (8013b94 <_dtoa_r+0xaa4>)
 801398a:	4602      	mov	r2, r0
 801398c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8013990:	f7ff bbc7 	b.w	8013122 <_dtoa_r+0x32>
 8013994:	692a      	ldr	r2, [r5, #16]
 8013996:	3202      	adds	r2, #2
 8013998:	0092      	lsls	r2, r2, #2
 801399a:	f105 010c 	add.w	r1, r5, #12
 801399e:	300c      	adds	r0, #12
 80139a0:	f000 ffac 	bl	80148fc <memcpy>
 80139a4:	2201      	movs	r2, #1
 80139a6:	4631      	mov	r1, r6
 80139a8:	4648      	mov	r0, r9
 80139aa:	f000 fc05 	bl	80141b8 <__lshift>
 80139ae:	1c7b      	adds	r3, r7, #1
 80139b0:	9305      	str	r3, [sp, #20]
 80139b2:	eb07 030b 	add.w	r3, r7, fp
 80139b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80139b8:	9b02      	ldr	r3, [sp, #8]
 80139ba:	f003 0301 	and.w	r3, r3, #1
 80139be:	46a8      	mov	r8, r5
 80139c0:	9308      	str	r3, [sp, #32]
 80139c2:	4605      	mov	r5, r0
 80139c4:	9b05      	ldr	r3, [sp, #20]
 80139c6:	9801      	ldr	r0, [sp, #4]
 80139c8:	4621      	mov	r1, r4
 80139ca:	f103 3bff 	add.w	fp, r3, #4294967295
 80139ce:	f7ff fb04 	bl	8012fda <quorem>
 80139d2:	4641      	mov	r1, r8
 80139d4:	9002      	str	r0, [sp, #8]
 80139d6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80139da:	9801      	ldr	r0, [sp, #4]
 80139dc:	f000 fc58 	bl	8014290 <__mcmp>
 80139e0:	462a      	mov	r2, r5
 80139e2:	9006      	str	r0, [sp, #24]
 80139e4:	4621      	mov	r1, r4
 80139e6:	4648      	mov	r0, r9
 80139e8:	f000 fc6e 	bl	80142c8 <__mdiff>
 80139ec:	68c2      	ldr	r2, [r0, #12]
 80139ee:	4606      	mov	r6, r0
 80139f0:	b9fa      	cbnz	r2, 8013a32 <_dtoa_r+0x942>
 80139f2:	4601      	mov	r1, r0
 80139f4:	9801      	ldr	r0, [sp, #4]
 80139f6:	f000 fc4b 	bl	8014290 <__mcmp>
 80139fa:	4602      	mov	r2, r0
 80139fc:	4631      	mov	r1, r6
 80139fe:	4648      	mov	r0, r9
 8013a00:	920a      	str	r2, [sp, #40]	@ 0x28
 8013a02:	f000 fa0b 	bl	8013e1c <_Bfree>
 8013a06:	9b07      	ldr	r3, [sp, #28]
 8013a08:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013a0a:	9e05      	ldr	r6, [sp, #20]
 8013a0c:	ea43 0102 	orr.w	r1, r3, r2
 8013a10:	9b08      	ldr	r3, [sp, #32]
 8013a12:	4319      	orrs	r1, r3
 8013a14:	d10f      	bne.n	8013a36 <_dtoa_r+0x946>
 8013a16:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013a1a:	d028      	beq.n	8013a6e <_dtoa_r+0x97e>
 8013a1c:	9b06      	ldr	r3, [sp, #24]
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	dd02      	ble.n	8013a28 <_dtoa_r+0x938>
 8013a22:	9b02      	ldr	r3, [sp, #8]
 8013a24:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8013a28:	f88b a000 	strb.w	sl, [fp]
 8013a2c:	e639      	b.n	80136a2 <_dtoa_r+0x5b2>
 8013a2e:	4628      	mov	r0, r5
 8013a30:	e7bd      	b.n	80139ae <_dtoa_r+0x8be>
 8013a32:	2201      	movs	r2, #1
 8013a34:	e7e2      	b.n	80139fc <_dtoa_r+0x90c>
 8013a36:	9b06      	ldr	r3, [sp, #24]
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	db04      	blt.n	8013a46 <_dtoa_r+0x956>
 8013a3c:	9907      	ldr	r1, [sp, #28]
 8013a3e:	430b      	orrs	r3, r1
 8013a40:	9908      	ldr	r1, [sp, #32]
 8013a42:	430b      	orrs	r3, r1
 8013a44:	d120      	bne.n	8013a88 <_dtoa_r+0x998>
 8013a46:	2a00      	cmp	r2, #0
 8013a48:	ddee      	ble.n	8013a28 <_dtoa_r+0x938>
 8013a4a:	9901      	ldr	r1, [sp, #4]
 8013a4c:	2201      	movs	r2, #1
 8013a4e:	4648      	mov	r0, r9
 8013a50:	f000 fbb2 	bl	80141b8 <__lshift>
 8013a54:	4621      	mov	r1, r4
 8013a56:	9001      	str	r0, [sp, #4]
 8013a58:	f000 fc1a 	bl	8014290 <__mcmp>
 8013a5c:	2800      	cmp	r0, #0
 8013a5e:	dc03      	bgt.n	8013a68 <_dtoa_r+0x978>
 8013a60:	d1e2      	bne.n	8013a28 <_dtoa_r+0x938>
 8013a62:	f01a 0f01 	tst.w	sl, #1
 8013a66:	d0df      	beq.n	8013a28 <_dtoa_r+0x938>
 8013a68:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013a6c:	d1d9      	bne.n	8013a22 <_dtoa_r+0x932>
 8013a6e:	2339      	movs	r3, #57	@ 0x39
 8013a70:	f88b 3000 	strb.w	r3, [fp]
 8013a74:	4633      	mov	r3, r6
 8013a76:	461e      	mov	r6, r3
 8013a78:	3b01      	subs	r3, #1
 8013a7a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8013a7e:	2a39      	cmp	r2, #57	@ 0x39
 8013a80:	d053      	beq.n	8013b2a <_dtoa_r+0xa3a>
 8013a82:	3201      	adds	r2, #1
 8013a84:	701a      	strb	r2, [r3, #0]
 8013a86:	e60c      	b.n	80136a2 <_dtoa_r+0x5b2>
 8013a88:	2a00      	cmp	r2, #0
 8013a8a:	dd07      	ble.n	8013a9c <_dtoa_r+0x9ac>
 8013a8c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013a90:	d0ed      	beq.n	8013a6e <_dtoa_r+0x97e>
 8013a92:	f10a 0301 	add.w	r3, sl, #1
 8013a96:	f88b 3000 	strb.w	r3, [fp]
 8013a9a:	e602      	b.n	80136a2 <_dtoa_r+0x5b2>
 8013a9c:	9b05      	ldr	r3, [sp, #20]
 8013a9e:	9a05      	ldr	r2, [sp, #20]
 8013aa0:	f803 ac01 	strb.w	sl, [r3, #-1]
 8013aa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013aa6:	4293      	cmp	r3, r2
 8013aa8:	d029      	beq.n	8013afe <_dtoa_r+0xa0e>
 8013aaa:	9901      	ldr	r1, [sp, #4]
 8013aac:	2300      	movs	r3, #0
 8013aae:	220a      	movs	r2, #10
 8013ab0:	4648      	mov	r0, r9
 8013ab2:	f000 f9d5 	bl	8013e60 <__multadd>
 8013ab6:	45a8      	cmp	r8, r5
 8013ab8:	9001      	str	r0, [sp, #4]
 8013aba:	f04f 0300 	mov.w	r3, #0
 8013abe:	f04f 020a 	mov.w	r2, #10
 8013ac2:	4641      	mov	r1, r8
 8013ac4:	4648      	mov	r0, r9
 8013ac6:	d107      	bne.n	8013ad8 <_dtoa_r+0x9e8>
 8013ac8:	f000 f9ca 	bl	8013e60 <__multadd>
 8013acc:	4680      	mov	r8, r0
 8013ace:	4605      	mov	r5, r0
 8013ad0:	9b05      	ldr	r3, [sp, #20]
 8013ad2:	3301      	adds	r3, #1
 8013ad4:	9305      	str	r3, [sp, #20]
 8013ad6:	e775      	b.n	80139c4 <_dtoa_r+0x8d4>
 8013ad8:	f000 f9c2 	bl	8013e60 <__multadd>
 8013adc:	4629      	mov	r1, r5
 8013ade:	4680      	mov	r8, r0
 8013ae0:	2300      	movs	r3, #0
 8013ae2:	220a      	movs	r2, #10
 8013ae4:	4648      	mov	r0, r9
 8013ae6:	f000 f9bb 	bl	8013e60 <__multadd>
 8013aea:	4605      	mov	r5, r0
 8013aec:	e7f0      	b.n	8013ad0 <_dtoa_r+0x9e0>
 8013aee:	f1bb 0f00 	cmp.w	fp, #0
 8013af2:	bfcc      	ite	gt
 8013af4:	465e      	movgt	r6, fp
 8013af6:	2601      	movle	r6, #1
 8013af8:	443e      	add	r6, r7
 8013afa:	f04f 0800 	mov.w	r8, #0
 8013afe:	9901      	ldr	r1, [sp, #4]
 8013b00:	2201      	movs	r2, #1
 8013b02:	4648      	mov	r0, r9
 8013b04:	f000 fb58 	bl	80141b8 <__lshift>
 8013b08:	4621      	mov	r1, r4
 8013b0a:	9001      	str	r0, [sp, #4]
 8013b0c:	f000 fbc0 	bl	8014290 <__mcmp>
 8013b10:	2800      	cmp	r0, #0
 8013b12:	dcaf      	bgt.n	8013a74 <_dtoa_r+0x984>
 8013b14:	d102      	bne.n	8013b1c <_dtoa_r+0xa2c>
 8013b16:	f01a 0f01 	tst.w	sl, #1
 8013b1a:	d1ab      	bne.n	8013a74 <_dtoa_r+0x984>
 8013b1c:	4633      	mov	r3, r6
 8013b1e:	461e      	mov	r6, r3
 8013b20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013b24:	2a30      	cmp	r2, #48	@ 0x30
 8013b26:	d0fa      	beq.n	8013b1e <_dtoa_r+0xa2e>
 8013b28:	e5bb      	b.n	80136a2 <_dtoa_r+0x5b2>
 8013b2a:	429f      	cmp	r7, r3
 8013b2c:	d1a3      	bne.n	8013a76 <_dtoa_r+0x986>
 8013b2e:	9b04      	ldr	r3, [sp, #16]
 8013b30:	3301      	adds	r3, #1
 8013b32:	9304      	str	r3, [sp, #16]
 8013b34:	2331      	movs	r3, #49	@ 0x31
 8013b36:	703b      	strb	r3, [r7, #0]
 8013b38:	e5b3      	b.n	80136a2 <_dtoa_r+0x5b2>
 8013b3a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013b3c:	4f16      	ldr	r7, [pc, #88]	@ (8013b98 <_dtoa_r+0xaa8>)
 8013b3e:	b11b      	cbz	r3, 8013b48 <_dtoa_r+0xa58>
 8013b40:	f107 0308 	add.w	r3, r7, #8
 8013b44:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8013b46:	6013      	str	r3, [r2, #0]
 8013b48:	4638      	mov	r0, r7
 8013b4a:	b011      	add	sp, #68	@ 0x44
 8013b4c:	ecbd 8b02 	vpop	{d8}
 8013b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b54:	9b07      	ldr	r3, [sp, #28]
 8013b56:	2b01      	cmp	r3, #1
 8013b58:	f77f ae36 	ble.w	80137c8 <_dtoa_r+0x6d8>
 8013b5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013b5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013b60:	2001      	movs	r0, #1
 8013b62:	e656      	b.n	8013812 <_dtoa_r+0x722>
 8013b64:	f1bb 0f00 	cmp.w	fp, #0
 8013b68:	f77f aed7 	ble.w	801391a <_dtoa_r+0x82a>
 8013b6c:	463e      	mov	r6, r7
 8013b6e:	9801      	ldr	r0, [sp, #4]
 8013b70:	4621      	mov	r1, r4
 8013b72:	f7ff fa32 	bl	8012fda <quorem>
 8013b76:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8013b7a:	f806 ab01 	strb.w	sl, [r6], #1
 8013b7e:	1bf2      	subs	r2, r6, r7
 8013b80:	4593      	cmp	fp, r2
 8013b82:	ddb4      	ble.n	8013aee <_dtoa_r+0x9fe>
 8013b84:	9901      	ldr	r1, [sp, #4]
 8013b86:	2300      	movs	r3, #0
 8013b88:	220a      	movs	r2, #10
 8013b8a:	4648      	mov	r0, r9
 8013b8c:	f000 f968 	bl	8013e60 <__multadd>
 8013b90:	9001      	str	r0, [sp, #4]
 8013b92:	e7ec      	b.n	8013b6e <_dtoa_r+0xa7e>
 8013b94:	080151a0 	.word	0x080151a0
 8013b98:	08015124 	.word	0x08015124

08013b9c <_free_r>:
 8013b9c:	b538      	push	{r3, r4, r5, lr}
 8013b9e:	4605      	mov	r5, r0
 8013ba0:	2900      	cmp	r1, #0
 8013ba2:	d041      	beq.n	8013c28 <_free_r+0x8c>
 8013ba4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013ba8:	1f0c      	subs	r4, r1, #4
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	bfb8      	it	lt
 8013bae:	18e4      	addlt	r4, r4, r3
 8013bb0:	f000 f8e8 	bl	8013d84 <__malloc_lock>
 8013bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8013c2c <_free_r+0x90>)
 8013bb6:	6813      	ldr	r3, [r2, #0]
 8013bb8:	b933      	cbnz	r3, 8013bc8 <_free_r+0x2c>
 8013bba:	6063      	str	r3, [r4, #4]
 8013bbc:	6014      	str	r4, [r2, #0]
 8013bbe:	4628      	mov	r0, r5
 8013bc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013bc4:	f000 b8e4 	b.w	8013d90 <__malloc_unlock>
 8013bc8:	42a3      	cmp	r3, r4
 8013bca:	d908      	bls.n	8013bde <_free_r+0x42>
 8013bcc:	6820      	ldr	r0, [r4, #0]
 8013bce:	1821      	adds	r1, r4, r0
 8013bd0:	428b      	cmp	r3, r1
 8013bd2:	bf01      	itttt	eq
 8013bd4:	6819      	ldreq	r1, [r3, #0]
 8013bd6:	685b      	ldreq	r3, [r3, #4]
 8013bd8:	1809      	addeq	r1, r1, r0
 8013bda:	6021      	streq	r1, [r4, #0]
 8013bdc:	e7ed      	b.n	8013bba <_free_r+0x1e>
 8013bde:	461a      	mov	r2, r3
 8013be0:	685b      	ldr	r3, [r3, #4]
 8013be2:	b10b      	cbz	r3, 8013be8 <_free_r+0x4c>
 8013be4:	42a3      	cmp	r3, r4
 8013be6:	d9fa      	bls.n	8013bde <_free_r+0x42>
 8013be8:	6811      	ldr	r1, [r2, #0]
 8013bea:	1850      	adds	r0, r2, r1
 8013bec:	42a0      	cmp	r0, r4
 8013bee:	d10b      	bne.n	8013c08 <_free_r+0x6c>
 8013bf0:	6820      	ldr	r0, [r4, #0]
 8013bf2:	4401      	add	r1, r0
 8013bf4:	1850      	adds	r0, r2, r1
 8013bf6:	4283      	cmp	r3, r0
 8013bf8:	6011      	str	r1, [r2, #0]
 8013bfa:	d1e0      	bne.n	8013bbe <_free_r+0x22>
 8013bfc:	6818      	ldr	r0, [r3, #0]
 8013bfe:	685b      	ldr	r3, [r3, #4]
 8013c00:	6053      	str	r3, [r2, #4]
 8013c02:	4408      	add	r0, r1
 8013c04:	6010      	str	r0, [r2, #0]
 8013c06:	e7da      	b.n	8013bbe <_free_r+0x22>
 8013c08:	d902      	bls.n	8013c10 <_free_r+0x74>
 8013c0a:	230c      	movs	r3, #12
 8013c0c:	602b      	str	r3, [r5, #0]
 8013c0e:	e7d6      	b.n	8013bbe <_free_r+0x22>
 8013c10:	6820      	ldr	r0, [r4, #0]
 8013c12:	1821      	adds	r1, r4, r0
 8013c14:	428b      	cmp	r3, r1
 8013c16:	bf04      	itt	eq
 8013c18:	6819      	ldreq	r1, [r3, #0]
 8013c1a:	685b      	ldreq	r3, [r3, #4]
 8013c1c:	6063      	str	r3, [r4, #4]
 8013c1e:	bf04      	itt	eq
 8013c20:	1809      	addeq	r1, r1, r0
 8013c22:	6021      	streq	r1, [r4, #0]
 8013c24:	6054      	str	r4, [r2, #4]
 8013c26:	e7ca      	b.n	8013bbe <_free_r+0x22>
 8013c28:	bd38      	pop	{r3, r4, r5, pc}
 8013c2a:	bf00      	nop
 8013c2c:	24002774 	.word	0x24002774

08013c30 <malloc>:
 8013c30:	4b02      	ldr	r3, [pc, #8]	@ (8013c3c <malloc+0xc>)
 8013c32:	4601      	mov	r1, r0
 8013c34:	6818      	ldr	r0, [r3, #0]
 8013c36:	f000 b825 	b.w	8013c84 <_malloc_r>
 8013c3a:	bf00      	nop
 8013c3c:	2400012c 	.word	0x2400012c

08013c40 <sbrk_aligned>:
 8013c40:	b570      	push	{r4, r5, r6, lr}
 8013c42:	4e0f      	ldr	r6, [pc, #60]	@ (8013c80 <sbrk_aligned+0x40>)
 8013c44:	460c      	mov	r4, r1
 8013c46:	6831      	ldr	r1, [r6, #0]
 8013c48:	4605      	mov	r5, r0
 8013c4a:	b911      	cbnz	r1, 8013c52 <sbrk_aligned+0x12>
 8013c4c:	f000 fe46 	bl	80148dc <_sbrk_r>
 8013c50:	6030      	str	r0, [r6, #0]
 8013c52:	4621      	mov	r1, r4
 8013c54:	4628      	mov	r0, r5
 8013c56:	f000 fe41 	bl	80148dc <_sbrk_r>
 8013c5a:	1c43      	adds	r3, r0, #1
 8013c5c:	d103      	bne.n	8013c66 <sbrk_aligned+0x26>
 8013c5e:	f04f 34ff 	mov.w	r4, #4294967295
 8013c62:	4620      	mov	r0, r4
 8013c64:	bd70      	pop	{r4, r5, r6, pc}
 8013c66:	1cc4      	adds	r4, r0, #3
 8013c68:	f024 0403 	bic.w	r4, r4, #3
 8013c6c:	42a0      	cmp	r0, r4
 8013c6e:	d0f8      	beq.n	8013c62 <sbrk_aligned+0x22>
 8013c70:	1a21      	subs	r1, r4, r0
 8013c72:	4628      	mov	r0, r5
 8013c74:	f000 fe32 	bl	80148dc <_sbrk_r>
 8013c78:	3001      	adds	r0, #1
 8013c7a:	d1f2      	bne.n	8013c62 <sbrk_aligned+0x22>
 8013c7c:	e7ef      	b.n	8013c5e <sbrk_aligned+0x1e>
 8013c7e:	bf00      	nop
 8013c80:	24002770 	.word	0x24002770

08013c84 <_malloc_r>:
 8013c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c88:	1ccd      	adds	r5, r1, #3
 8013c8a:	f025 0503 	bic.w	r5, r5, #3
 8013c8e:	3508      	adds	r5, #8
 8013c90:	2d0c      	cmp	r5, #12
 8013c92:	bf38      	it	cc
 8013c94:	250c      	movcc	r5, #12
 8013c96:	2d00      	cmp	r5, #0
 8013c98:	4606      	mov	r6, r0
 8013c9a:	db01      	blt.n	8013ca0 <_malloc_r+0x1c>
 8013c9c:	42a9      	cmp	r1, r5
 8013c9e:	d904      	bls.n	8013caa <_malloc_r+0x26>
 8013ca0:	230c      	movs	r3, #12
 8013ca2:	6033      	str	r3, [r6, #0]
 8013ca4:	2000      	movs	r0, #0
 8013ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013caa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013d80 <_malloc_r+0xfc>
 8013cae:	f000 f869 	bl	8013d84 <__malloc_lock>
 8013cb2:	f8d8 3000 	ldr.w	r3, [r8]
 8013cb6:	461c      	mov	r4, r3
 8013cb8:	bb44      	cbnz	r4, 8013d0c <_malloc_r+0x88>
 8013cba:	4629      	mov	r1, r5
 8013cbc:	4630      	mov	r0, r6
 8013cbe:	f7ff ffbf 	bl	8013c40 <sbrk_aligned>
 8013cc2:	1c43      	adds	r3, r0, #1
 8013cc4:	4604      	mov	r4, r0
 8013cc6:	d158      	bne.n	8013d7a <_malloc_r+0xf6>
 8013cc8:	f8d8 4000 	ldr.w	r4, [r8]
 8013ccc:	4627      	mov	r7, r4
 8013cce:	2f00      	cmp	r7, #0
 8013cd0:	d143      	bne.n	8013d5a <_malloc_r+0xd6>
 8013cd2:	2c00      	cmp	r4, #0
 8013cd4:	d04b      	beq.n	8013d6e <_malloc_r+0xea>
 8013cd6:	6823      	ldr	r3, [r4, #0]
 8013cd8:	4639      	mov	r1, r7
 8013cda:	4630      	mov	r0, r6
 8013cdc:	eb04 0903 	add.w	r9, r4, r3
 8013ce0:	f000 fdfc 	bl	80148dc <_sbrk_r>
 8013ce4:	4581      	cmp	r9, r0
 8013ce6:	d142      	bne.n	8013d6e <_malloc_r+0xea>
 8013ce8:	6821      	ldr	r1, [r4, #0]
 8013cea:	1a6d      	subs	r5, r5, r1
 8013cec:	4629      	mov	r1, r5
 8013cee:	4630      	mov	r0, r6
 8013cf0:	f7ff ffa6 	bl	8013c40 <sbrk_aligned>
 8013cf4:	3001      	adds	r0, #1
 8013cf6:	d03a      	beq.n	8013d6e <_malloc_r+0xea>
 8013cf8:	6823      	ldr	r3, [r4, #0]
 8013cfa:	442b      	add	r3, r5
 8013cfc:	6023      	str	r3, [r4, #0]
 8013cfe:	f8d8 3000 	ldr.w	r3, [r8]
 8013d02:	685a      	ldr	r2, [r3, #4]
 8013d04:	bb62      	cbnz	r2, 8013d60 <_malloc_r+0xdc>
 8013d06:	f8c8 7000 	str.w	r7, [r8]
 8013d0a:	e00f      	b.n	8013d2c <_malloc_r+0xa8>
 8013d0c:	6822      	ldr	r2, [r4, #0]
 8013d0e:	1b52      	subs	r2, r2, r5
 8013d10:	d420      	bmi.n	8013d54 <_malloc_r+0xd0>
 8013d12:	2a0b      	cmp	r2, #11
 8013d14:	d917      	bls.n	8013d46 <_malloc_r+0xc2>
 8013d16:	1961      	adds	r1, r4, r5
 8013d18:	42a3      	cmp	r3, r4
 8013d1a:	6025      	str	r5, [r4, #0]
 8013d1c:	bf18      	it	ne
 8013d1e:	6059      	strne	r1, [r3, #4]
 8013d20:	6863      	ldr	r3, [r4, #4]
 8013d22:	bf08      	it	eq
 8013d24:	f8c8 1000 	streq.w	r1, [r8]
 8013d28:	5162      	str	r2, [r4, r5]
 8013d2a:	604b      	str	r3, [r1, #4]
 8013d2c:	4630      	mov	r0, r6
 8013d2e:	f000 f82f 	bl	8013d90 <__malloc_unlock>
 8013d32:	f104 000b 	add.w	r0, r4, #11
 8013d36:	1d23      	adds	r3, r4, #4
 8013d38:	f020 0007 	bic.w	r0, r0, #7
 8013d3c:	1ac2      	subs	r2, r0, r3
 8013d3e:	bf1c      	itt	ne
 8013d40:	1a1b      	subne	r3, r3, r0
 8013d42:	50a3      	strne	r3, [r4, r2]
 8013d44:	e7af      	b.n	8013ca6 <_malloc_r+0x22>
 8013d46:	6862      	ldr	r2, [r4, #4]
 8013d48:	42a3      	cmp	r3, r4
 8013d4a:	bf0c      	ite	eq
 8013d4c:	f8c8 2000 	streq.w	r2, [r8]
 8013d50:	605a      	strne	r2, [r3, #4]
 8013d52:	e7eb      	b.n	8013d2c <_malloc_r+0xa8>
 8013d54:	4623      	mov	r3, r4
 8013d56:	6864      	ldr	r4, [r4, #4]
 8013d58:	e7ae      	b.n	8013cb8 <_malloc_r+0x34>
 8013d5a:	463c      	mov	r4, r7
 8013d5c:	687f      	ldr	r7, [r7, #4]
 8013d5e:	e7b6      	b.n	8013cce <_malloc_r+0x4a>
 8013d60:	461a      	mov	r2, r3
 8013d62:	685b      	ldr	r3, [r3, #4]
 8013d64:	42a3      	cmp	r3, r4
 8013d66:	d1fb      	bne.n	8013d60 <_malloc_r+0xdc>
 8013d68:	2300      	movs	r3, #0
 8013d6a:	6053      	str	r3, [r2, #4]
 8013d6c:	e7de      	b.n	8013d2c <_malloc_r+0xa8>
 8013d6e:	230c      	movs	r3, #12
 8013d70:	6033      	str	r3, [r6, #0]
 8013d72:	4630      	mov	r0, r6
 8013d74:	f000 f80c 	bl	8013d90 <__malloc_unlock>
 8013d78:	e794      	b.n	8013ca4 <_malloc_r+0x20>
 8013d7a:	6005      	str	r5, [r0, #0]
 8013d7c:	e7d6      	b.n	8013d2c <_malloc_r+0xa8>
 8013d7e:	bf00      	nop
 8013d80:	24002774 	.word	0x24002774

08013d84 <__malloc_lock>:
 8013d84:	4801      	ldr	r0, [pc, #4]	@ (8013d8c <__malloc_lock+0x8>)
 8013d86:	f7ff b926 	b.w	8012fd6 <__retarget_lock_acquire_recursive>
 8013d8a:	bf00      	nop
 8013d8c:	2400276c 	.word	0x2400276c

08013d90 <__malloc_unlock>:
 8013d90:	4801      	ldr	r0, [pc, #4]	@ (8013d98 <__malloc_unlock+0x8>)
 8013d92:	f7ff b921 	b.w	8012fd8 <__retarget_lock_release_recursive>
 8013d96:	bf00      	nop
 8013d98:	2400276c 	.word	0x2400276c

08013d9c <_Balloc>:
 8013d9c:	b570      	push	{r4, r5, r6, lr}
 8013d9e:	69c6      	ldr	r6, [r0, #28]
 8013da0:	4604      	mov	r4, r0
 8013da2:	460d      	mov	r5, r1
 8013da4:	b976      	cbnz	r6, 8013dc4 <_Balloc+0x28>
 8013da6:	2010      	movs	r0, #16
 8013da8:	f7ff ff42 	bl	8013c30 <malloc>
 8013dac:	4602      	mov	r2, r0
 8013dae:	61e0      	str	r0, [r4, #28]
 8013db0:	b920      	cbnz	r0, 8013dbc <_Balloc+0x20>
 8013db2:	4b18      	ldr	r3, [pc, #96]	@ (8013e14 <_Balloc+0x78>)
 8013db4:	4818      	ldr	r0, [pc, #96]	@ (8013e18 <_Balloc+0x7c>)
 8013db6:	216b      	movs	r1, #107	@ 0x6b
 8013db8:	f000 fdae 	bl	8014918 <__assert_func>
 8013dbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013dc0:	6006      	str	r6, [r0, #0]
 8013dc2:	60c6      	str	r6, [r0, #12]
 8013dc4:	69e6      	ldr	r6, [r4, #28]
 8013dc6:	68f3      	ldr	r3, [r6, #12]
 8013dc8:	b183      	cbz	r3, 8013dec <_Balloc+0x50>
 8013dca:	69e3      	ldr	r3, [r4, #28]
 8013dcc:	68db      	ldr	r3, [r3, #12]
 8013dce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013dd2:	b9b8      	cbnz	r0, 8013e04 <_Balloc+0x68>
 8013dd4:	2101      	movs	r1, #1
 8013dd6:	fa01 f605 	lsl.w	r6, r1, r5
 8013dda:	1d72      	adds	r2, r6, #5
 8013ddc:	0092      	lsls	r2, r2, #2
 8013dde:	4620      	mov	r0, r4
 8013de0:	f000 fdb8 	bl	8014954 <_calloc_r>
 8013de4:	b160      	cbz	r0, 8013e00 <_Balloc+0x64>
 8013de6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013dea:	e00e      	b.n	8013e0a <_Balloc+0x6e>
 8013dec:	2221      	movs	r2, #33	@ 0x21
 8013dee:	2104      	movs	r1, #4
 8013df0:	4620      	mov	r0, r4
 8013df2:	f000 fdaf 	bl	8014954 <_calloc_r>
 8013df6:	69e3      	ldr	r3, [r4, #28]
 8013df8:	60f0      	str	r0, [r6, #12]
 8013dfa:	68db      	ldr	r3, [r3, #12]
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d1e4      	bne.n	8013dca <_Balloc+0x2e>
 8013e00:	2000      	movs	r0, #0
 8013e02:	bd70      	pop	{r4, r5, r6, pc}
 8013e04:	6802      	ldr	r2, [r0, #0]
 8013e06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013e0a:	2300      	movs	r3, #0
 8013e0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013e10:	e7f7      	b.n	8013e02 <_Balloc+0x66>
 8013e12:	bf00      	nop
 8013e14:	08015131 	.word	0x08015131
 8013e18:	080151b1 	.word	0x080151b1

08013e1c <_Bfree>:
 8013e1c:	b570      	push	{r4, r5, r6, lr}
 8013e1e:	69c6      	ldr	r6, [r0, #28]
 8013e20:	4605      	mov	r5, r0
 8013e22:	460c      	mov	r4, r1
 8013e24:	b976      	cbnz	r6, 8013e44 <_Bfree+0x28>
 8013e26:	2010      	movs	r0, #16
 8013e28:	f7ff ff02 	bl	8013c30 <malloc>
 8013e2c:	4602      	mov	r2, r0
 8013e2e:	61e8      	str	r0, [r5, #28]
 8013e30:	b920      	cbnz	r0, 8013e3c <_Bfree+0x20>
 8013e32:	4b09      	ldr	r3, [pc, #36]	@ (8013e58 <_Bfree+0x3c>)
 8013e34:	4809      	ldr	r0, [pc, #36]	@ (8013e5c <_Bfree+0x40>)
 8013e36:	218f      	movs	r1, #143	@ 0x8f
 8013e38:	f000 fd6e 	bl	8014918 <__assert_func>
 8013e3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013e40:	6006      	str	r6, [r0, #0]
 8013e42:	60c6      	str	r6, [r0, #12]
 8013e44:	b13c      	cbz	r4, 8013e56 <_Bfree+0x3a>
 8013e46:	69eb      	ldr	r3, [r5, #28]
 8013e48:	6862      	ldr	r2, [r4, #4]
 8013e4a:	68db      	ldr	r3, [r3, #12]
 8013e4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013e50:	6021      	str	r1, [r4, #0]
 8013e52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013e56:	bd70      	pop	{r4, r5, r6, pc}
 8013e58:	08015131 	.word	0x08015131
 8013e5c:	080151b1 	.word	0x080151b1

08013e60 <__multadd>:
 8013e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e64:	690d      	ldr	r5, [r1, #16]
 8013e66:	4607      	mov	r7, r0
 8013e68:	460c      	mov	r4, r1
 8013e6a:	461e      	mov	r6, r3
 8013e6c:	f101 0c14 	add.w	ip, r1, #20
 8013e70:	2000      	movs	r0, #0
 8013e72:	f8dc 3000 	ldr.w	r3, [ip]
 8013e76:	b299      	uxth	r1, r3
 8013e78:	fb02 6101 	mla	r1, r2, r1, r6
 8013e7c:	0c1e      	lsrs	r6, r3, #16
 8013e7e:	0c0b      	lsrs	r3, r1, #16
 8013e80:	fb02 3306 	mla	r3, r2, r6, r3
 8013e84:	b289      	uxth	r1, r1
 8013e86:	3001      	adds	r0, #1
 8013e88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013e8c:	4285      	cmp	r5, r0
 8013e8e:	f84c 1b04 	str.w	r1, [ip], #4
 8013e92:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013e96:	dcec      	bgt.n	8013e72 <__multadd+0x12>
 8013e98:	b30e      	cbz	r6, 8013ede <__multadd+0x7e>
 8013e9a:	68a3      	ldr	r3, [r4, #8]
 8013e9c:	42ab      	cmp	r3, r5
 8013e9e:	dc19      	bgt.n	8013ed4 <__multadd+0x74>
 8013ea0:	6861      	ldr	r1, [r4, #4]
 8013ea2:	4638      	mov	r0, r7
 8013ea4:	3101      	adds	r1, #1
 8013ea6:	f7ff ff79 	bl	8013d9c <_Balloc>
 8013eaa:	4680      	mov	r8, r0
 8013eac:	b928      	cbnz	r0, 8013eba <__multadd+0x5a>
 8013eae:	4602      	mov	r2, r0
 8013eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8013ee4 <__multadd+0x84>)
 8013eb2:	480d      	ldr	r0, [pc, #52]	@ (8013ee8 <__multadd+0x88>)
 8013eb4:	21ba      	movs	r1, #186	@ 0xba
 8013eb6:	f000 fd2f 	bl	8014918 <__assert_func>
 8013eba:	6922      	ldr	r2, [r4, #16]
 8013ebc:	3202      	adds	r2, #2
 8013ebe:	f104 010c 	add.w	r1, r4, #12
 8013ec2:	0092      	lsls	r2, r2, #2
 8013ec4:	300c      	adds	r0, #12
 8013ec6:	f000 fd19 	bl	80148fc <memcpy>
 8013eca:	4621      	mov	r1, r4
 8013ecc:	4638      	mov	r0, r7
 8013ece:	f7ff ffa5 	bl	8013e1c <_Bfree>
 8013ed2:	4644      	mov	r4, r8
 8013ed4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013ed8:	3501      	adds	r5, #1
 8013eda:	615e      	str	r6, [r3, #20]
 8013edc:	6125      	str	r5, [r4, #16]
 8013ede:	4620      	mov	r0, r4
 8013ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ee4:	080151a0 	.word	0x080151a0
 8013ee8:	080151b1 	.word	0x080151b1

08013eec <__hi0bits>:
 8013eec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013ef0:	4603      	mov	r3, r0
 8013ef2:	bf36      	itet	cc
 8013ef4:	0403      	lslcc	r3, r0, #16
 8013ef6:	2000      	movcs	r0, #0
 8013ef8:	2010      	movcc	r0, #16
 8013efa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013efe:	bf3c      	itt	cc
 8013f00:	021b      	lslcc	r3, r3, #8
 8013f02:	3008      	addcc	r0, #8
 8013f04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013f08:	bf3c      	itt	cc
 8013f0a:	011b      	lslcc	r3, r3, #4
 8013f0c:	3004      	addcc	r0, #4
 8013f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013f12:	bf3c      	itt	cc
 8013f14:	009b      	lslcc	r3, r3, #2
 8013f16:	3002      	addcc	r0, #2
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	db05      	blt.n	8013f28 <__hi0bits+0x3c>
 8013f1c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013f20:	f100 0001 	add.w	r0, r0, #1
 8013f24:	bf08      	it	eq
 8013f26:	2020      	moveq	r0, #32
 8013f28:	4770      	bx	lr

08013f2a <__lo0bits>:
 8013f2a:	6803      	ldr	r3, [r0, #0]
 8013f2c:	4602      	mov	r2, r0
 8013f2e:	f013 0007 	ands.w	r0, r3, #7
 8013f32:	d00b      	beq.n	8013f4c <__lo0bits+0x22>
 8013f34:	07d9      	lsls	r1, r3, #31
 8013f36:	d421      	bmi.n	8013f7c <__lo0bits+0x52>
 8013f38:	0798      	lsls	r0, r3, #30
 8013f3a:	bf49      	itett	mi
 8013f3c:	085b      	lsrmi	r3, r3, #1
 8013f3e:	089b      	lsrpl	r3, r3, #2
 8013f40:	2001      	movmi	r0, #1
 8013f42:	6013      	strmi	r3, [r2, #0]
 8013f44:	bf5c      	itt	pl
 8013f46:	6013      	strpl	r3, [r2, #0]
 8013f48:	2002      	movpl	r0, #2
 8013f4a:	4770      	bx	lr
 8013f4c:	b299      	uxth	r1, r3
 8013f4e:	b909      	cbnz	r1, 8013f54 <__lo0bits+0x2a>
 8013f50:	0c1b      	lsrs	r3, r3, #16
 8013f52:	2010      	movs	r0, #16
 8013f54:	b2d9      	uxtb	r1, r3
 8013f56:	b909      	cbnz	r1, 8013f5c <__lo0bits+0x32>
 8013f58:	3008      	adds	r0, #8
 8013f5a:	0a1b      	lsrs	r3, r3, #8
 8013f5c:	0719      	lsls	r1, r3, #28
 8013f5e:	bf04      	itt	eq
 8013f60:	091b      	lsreq	r3, r3, #4
 8013f62:	3004      	addeq	r0, #4
 8013f64:	0799      	lsls	r1, r3, #30
 8013f66:	bf04      	itt	eq
 8013f68:	089b      	lsreq	r3, r3, #2
 8013f6a:	3002      	addeq	r0, #2
 8013f6c:	07d9      	lsls	r1, r3, #31
 8013f6e:	d403      	bmi.n	8013f78 <__lo0bits+0x4e>
 8013f70:	085b      	lsrs	r3, r3, #1
 8013f72:	f100 0001 	add.w	r0, r0, #1
 8013f76:	d003      	beq.n	8013f80 <__lo0bits+0x56>
 8013f78:	6013      	str	r3, [r2, #0]
 8013f7a:	4770      	bx	lr
 8013f7c:	2000      	movs	r0, #0
 8013f7e:	4770      	bx	lr
 8013f80:	2020      	movs	r0, #32
 8013f82:	4770      	bx	lr

08013f84 <__i2b>:
 8013f84:	b510      	push	{r4, lr}
 8013f86:	460c      	mov	r4, r1
 8013f88:	2101      	movs	r1, #1
 8013f8a:	f7ff ff07 	bl	8013d9c <_Balloc>
 8013f8e:	4602      	mov	r2, r0
 8013f90:	b928      	cbnz	r0, 8013f9e <__i2b+0x1a>
 8013f92:	4b05      	ldr	r3, [pc, #20]	@ (8013fa8 <__i2b+0x24>)
 8013f94:	4805      	ldr	r0, [pc, #20]	@ (8013fac <__i2b+0x28>)
 8013f96:	f240 1145 	movw	r1, #325	@ 0x145
 8013f9a:	f000 fcbd 	bl	8014918 <__assert_func>
 8013f9e:	2301      	movs	r3, #1
 8013fa0:	6144      	str	r4, [r0, #20]
 8013fa2:	6103      	str	r3, [r0, #16]
 8013fa4:	bd10      	pop	{r4, pc}
 8013fa6:	bf00      	nop
 8013fa8:	080151a0 	.word	0x080151a0
 8013fac:	080151b1 	.word	0x080151b1

08013fb0 <__multiply>:
 8013fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fb4:	4614      	mov	r4, r2
 8013fb6:	690a      	ldr	r2, [r1, #16]
 8013fb8:	6923      	ldr	r3, [r4, #16]
 8013fba:	429a      	cmp	r2, r3
 8013fbc:	bfa8      	it	ge
 8013fbe:	4623      	movge	r3, r4
 8013fc0:	460f      	mov	r7, r1
 8013fc2:	bfa4      	itt	ge
 8013fc4:	460c      	movge	r4, r1
 8013fc6:	461f      	movge	r7, r3
 8013fc8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013fcc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013fd0:	68a3      	ldr	r3, [r4, #8]
 8013fd2:	6861      	ldr	r1, [r4, #4]
 8013fd4:	eb0a 0609 	add.w	r6, sl, r9
 8013fd8:	42b3      	cmp	r3, r6
 8013fda:	b085      	sub	sp, #20
 8013fdc:	bfb8      	it	lt
 8013fde:	3101      	addlt	r1, #1
 8013fe0:	f7ff fedc 	bl	8013d9c <_Balloc>
 8013fe4:	b930      	cbnz	r0, 8013ff4 <__multiply+0x44>
 8013fe6:	4602      	mov	r2, r0
 8013fe8:	4b44      	ldr	r3, [pc, #272]	@ (80140fc <__multiply+0x14c>)
 8013fea:	4845      	ldr	r0, [pc, #276]	@ (8014100 <__multiply+0x150>)
 8013fec:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013ff0:	f000 fc92 	bl	8014918 <__assert_func>
 8013ff4:	f100 0514 	add.w	r5, r0, #20
 8013ff8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013ffc:	462b      	mov	r3, r5
 8013ffe:	2200      	movs	r2, #0
 8014000:	4543      	cmp	r3, r8
 8014002:	d321      	bcc.n	8014048 <__multiply+0x98>
 8014004:	f107 0114 	add.w	r1, r7, #20
 8014008:	f104 0214 	add.w	r2, r4, #20
 801400c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8014010:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8014014:	9302      	str	r3, [sp, #8]
 8014016:	1b13      	subs	r3, r2, r4
 8014018:	3b15      	subs	r3, #21
 801401a:	f023 0303 	bic.w	r3, r3, #3
 801401e:	3304      	adds	r3, #4
 8014020:	f104 0715 	add.w	r7, r4, #21
 8014024:	42ba      	cmp	r2, r7
 8014026:	bf38      	it	cc
 8014028:	2304      	movcc	r3, #4
 801402a:	9301      	str	r3, [sp, #4]
 801402c:	9b02      	ldr	r3, [sp, #8]
 801402e:	9103      	str	r1, [sp, #12]
 8014030:	428b      	cmp	r3, r1
 8014032:	d80c      	bhi.n	801404e <__multiply+0x9e>
 8014034:	2e00      	cmp	r6, #0
 8014036:	dd03      	ble.n	8014040 <__multiply+0x90>
 8014038:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801403c:	2b00      	cmp	r3, #0
 801403e:	d05b      	beq.n	80140f8 <__multiply+0x148>
 8014040:	6106      	str	r6, [r0, #16]
 8014042:	b005      	add	sp, #20
 8014044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014048:	f843 2b04 	str.w	r2, [r3], #4
 801404c:	e7d8      	b.n	8014000 <__multiply+0x50>
 801404e:	f8b1 a000 	ldrh.w	sl, [r1]
 8014052:	f1ba 0f00 	cmp.w	sl, #0
 8014056:	d024      	beq.n	80140a2 <__multiply+0xf2>
 8014058:	f104 0e14 	add.w	lr, r4, #20
 801405c:	46a9      	mov	r9, r5
 801405e:	f04f 0c00 	mov.w	ip, #0
 8014062:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014066:	f8d9 3000 	ldr.w	r3, [r9]
 801406a:	fa1f fb87 	uxth.w	fp, r7
 801406e:	b29b      	uxth	r3, r3
 8014070:	fb0a 330b 	mla	r3, sl, fp, r3
 8014074:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8014078:	f8d9 7000 	ldr.w	r7, [r9]
 801407c:	4463      	add	r3, ip
 801407e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8014082:	fb0a c70b 	mla	r7, sl, fp, ip
 8014086:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801408a:	b29b      	uxth	r3, r3
 801408c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014090:	4572      	cmp	r2, lr
 8014092:	f849 3b04 	str.w	r3, [r9], #4
 8014096:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801409a:	d8e2      	bhi.n	8014062 <__multiply+0xb2>
 801409c:	9b01      	ldr	r3, [sp, #4]
 801409e:	f845 c003 	str.w	ip, [r5, r3]
 80140a2:	9b03      	ldr	r3, [sp, #12]
 80140a4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80140a8:	3104      	adds	r1, #4
 80140aa:	f1b9 0f00 	cmp.w	r9, #0
 80140ae:	d021      	beq.n	80140f4 <__multiply+0x144>
 80140b0:	682b      	ldr	r3, [r5, #0]
 80140b2:	f104 0c14 	add.w	ip, r4, #20
 80140b6:	46ae      	mov	lr, r5
 80140b8:	f04f 0a00 	mov.w	sl, #0
 80140bc:	f8bc b000 	ldrh.w	fp, [ip]
 80140c0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80140c4:	fb09 770b 	mla	r7, r9, fp, r7
 80140c8:	4457      	add	r7, sl
 80140ca:	b29b      	uxth	r3, r3
 80140cc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80140d0:	f84e 3b04 	str.w	r3, [lr], #4
 80140d4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80140d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80140dc:	f8be 3000 	ldrh.w	r3, [lr]
 80140e0:	fb09 330a 	mla	r3, r9, sl, r3
 80140e4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80140e8:	4562      	cmp	r2, ip
 80140ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80140ee:	d8e5      	bhi.n	80140bc <__multiply+0x10c>
 80140f0:	9f01      	ldr	r7, [sp, #4]
 80140f2:	51eb      	str	r3, [r5, r7]
 80140f4:	3504      	adds	r5, #4
 80140f6:	e799      	b.n	801402c <__multiply+0x7c>
 80140f8:	3e01      	subs	r6, #1
 80140fa:	e79b      	b.n	8014034 <__multiply+0x84>
 80140fc:	080151a0 	.word	0x080151a0
 8014100:	080151b1 	.word	0x080151b1

08014104 <__pow5mult>:
 8014104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014108:	4615      	mov	r5, r2
 801410a:	f012 0203 	ands.w	r2, r2, #3
 801410e:	4607      	mov	r7, r0
 8014110:	460e      	mov	r6, r1
 8014112:	d007      	beq.n	8014124 <__pow5mult+0x20>
 8014114:	4c25      	ldr	r4, [pc, #148]	@ (80141ac <__pow5mult+0xa8>)
 8014116:	3a01      	subs	r2, #1
 8014118:	2300      	movs	r3, #0
 801411a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801411e:	f7ff fe9f 	bl	8013e60 <__multadd>
 8014122:	4606      	mov	r6, r0
 8014124:	10ad      	asrs	r5, r5, #2
 8014126:	d03d      	beq.n	80141a4 <__pow5mult+0xa0>
 8014128:	69fc      	ldr	r4, [r7, #28]
 801412a:	b97c      	cbnz	r4, 801414c <__pow5mult+0x48>
 801412c:	2010      	movs	r0, #16
 801412e:	f7ff fd7f 	bl	8013c30 <malloc>
 8014132:	4602      	mov	r2, r0
 8014134:	61f8      	str	r0, [r7, #28]
 8014136:	b928      	cbnz	r0, 8014144 <__pow5mult+0x40>
 8014138:	4b1d      	ldr	r3, [pc, #116]	@ (80141b0 <__pow5mult+0xac>)
 801413a:	481e      	ldr	r0, [pc, #120]	@ (80141b4 <__pow5mult+0xb0>)
 801413c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8014140:	f000 fbea 	bl	8014918 <__assert_func>
 8014144:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014148:	6004      	str	r4, [r0, #0]
 801414a:	60c4      	str	r4, [r0, #12]
 801414c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8014150:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014154:	b94c      	cbnz	r4, 801416a <__pow5mult+0x66>
 8014156:	f240 2171 	movw	r1, #625	@ 0x271
 801415a:	4638      	mov	r0, r7
 801415c:	f7ff ff12 	bl	8013f84 <__i2b>
 8014160:	2300      	movs	r3, #0
 8014162:	f8c8 0008 	str.w	r0, [r8, #8]
 8014166:	4604      	mov	r4, r0
 8014168:	6003      	str	r3, [r0, #0]
 801416a:	f04f 0900 	mov.w	r9, #0
 801416e:	07eb      	lsls	r3, r5, #31
 8014170:	d50a      	bpl.n	8014188 <__pow5mult+0x84>
 8014172:	4631      	mov	r1, r6
 8014174:	4622      	mov	r2, r4
 8014176:	4638      	mov	r0, r7
 8014178:	f7ff ff1a 	bl	8013fb0 <__multiply>
 801417c:	4631      	mov	r1, r6
 801417e:	4680      	mov	r8, r0
 8014180:	4638      	mov	r0, r7
 8014182:	f7ff fe4b 	bl	8013e1c <_Bfree>
 8014186:	4646      	mov	r6, r8
 8014188:	106d      	asrs	r5, r5, #1
 801418a:	d00b      	beq.n	80141a4 <__pow5mult+0xa0>
 801418c:	6820      	ldr	r0, [r4, #0]
 801418e:	b938      	cbnz	r0, 80141a0 <__pow5mult+0x9c>
 8014190:	4622      	mov	r2, r4
 8014192:	4621      	mov	r1, r4
 8014194:	4638      	mov	r0, r7
 8014196:	f7ff ff0b 	bl	8013fb0 <__multiply>
 801419a:	6020      	str	r0, [r4, #0]
 801419c:	f8c0 9000 	str.w	r9, [r0]
 80141a0:	4604      	mov	r4, r0
 80141a2:	e7e4      	b.n	801416e <__pow5mult+0x6a>
 80141a4:	4630      	mov	r0, r6
 80141a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80141aa:	bf00      	nop
 80141ac:	0801520c 	.word	0x0801520c
 80141b0:	08015131 	.word	0x08015131
 80141b4:	080151b1 	.word	0x080151b1

080141b8 <__lshift>:
 80141b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80141bc:	460c      	mov	r4, r1
 80141be:	6849      	ldr	r1, [r1, #4]
 80141c0:	6923      	ldr	r3, [r4, #16]
 80141c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80141c6:	68a3      	ldr	r3, [r4, #8]
 80141c8:	4607      	mov	r7, r0
 80141ca:	4691      	mov	r9, r2
 80141cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80141d0:	f108 0601 	add.w	r6, r8, #1
 80141d4:	42b3      	cmp	r3, r6
 80141d6:	db0b      	blt.n	80141f0 <__lshift+0x38>
 80141d8:	4638      	mov	r0, r7
 80141da:	f7ff fddf 	bl	8013d9c <_Balloc>
 80141de:	4605      	mov	r5, r0
 80141e0:	b948      	cbnz	r0, 80141f6 <__lshift+0x3e>
 80141e2:	4602      	mov	r2, r0
 80141e4:	4b28      	ldr	r3, [pc, #160]	@ (8014288 <__lshift+0xd0>)
 80141e6:	4829      	ldr	r0, [pc, #164]	@ (801428c <__lshift+0xd4>)
 80141e8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80141ec:	f000 fb94 	bl	8014918 <__assert_func>
 80141f0:	3101      	adds	r1, #1
 80141f2:	005b      	lsls	r3, r3, #1
 80141f4:	e7ee      	b.n	80141d4 <__lshift+0x1c>
 80141f6:	2300      	movs	r3, #0
 80141f8:	f100 0114 	add.w	r1, r0, #20
 80141fc:	f100 0210 	add.w	r2, r0, #16
 8014200:	4618      	mov	r0, r3
 8014202:	4553      	cmp	r3, sl
 8014204:	db33      	blt.n	801426e <__lshift+0xb6>
 8014206:	6920      	ldr	r0, [r4, #16]
 8014208:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801420c:	f104 0314 	add.w	r3, r4, #20
 8014210:	f019 091f 	ands.w	r9, r9, #31
 8014214:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014218:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801421c:	d02b      	beq.n	8014276 <__lshift+0xbe>
 801421e:	f1c9 0e20 	rsb	lr, r9, #32
 8014222:	468a      	mov	sl, r1
 8014224:	2200      	movs	r2, #0
 8014226:	6818      	ldr	r0, [r3, #0]
 8014228:	fa00 f009 	lsl.w	r0, r0, r9
 801422c:	4310      	orrs	r0, r2
 801422e:	f84a 0b04 	str.w	r0, [sl], #4
 8014232:	f853 2b04 	ldr.w	r2, [r3], #4
 8014236:	459c      	cmp	ip, r3
 8014238:	fa22 f20e 	lsr.w	r2, r2, lr
 801423c:	d8f3      	bhi.n	8014226 <__lshift+0x6e>
 801423e:	ebac 0304 	sub.w	r3, ip, r4
 8014242:	3b15      	subs	r3, #21
 8014244:	f023 0303 	bic.w	r3, r3, #3
 8014248:	3304      	adds	r3, #4
 801424a:	f104 0015 	add.w	r0, r4, #21
 801424e:	4584      	cmp	ip, r0
 8014250:	bf38      	it	cc
 8014252:	2304      	movcc	r3, #4
 8014254:	50ca      	str	r2, [r1, r3]
 8014256:	b10a      	cbz	r2, 801425c <__lshift+0xa4>
 8014258:	f108 0602 	add.w	r6, r8, #2
 801425c:	3e01      	subs	r6, #1
 801425e:	4638      	mov	r0, r7
 8014260:	612e      	str	r6, [r5, #16]
 8014262:	4621      	mov	r1, r4
 8014264:	f7ff fdda 	bl	8013e1c <_Bfree>
 8014268:	4628      	mov	r0, r5
 801426a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801426e:	f842 0f04 	str.w	r0, [r2, #4]!
 8014272:	3301      	adds	r3, #1
 8014274:	e7c5      	b.n	8014202 <__lshift+0x4a>
 8014276:	3904      	subs	r1, #4
 8014278:	f853 2b04 	ldr.w	r2, [r3], #4
 801427c:	f841 2f04 	str.w	r2, [r1, #4]!
 8014280:	459c      	cmp	ip, r3
 8014282:	d8f9      	bhi.n	8014278 <__lshift+0xc0>
 8014284:	e7ea      	b.n	801425c <__lshift+0xa4>
 8014286:	bf00      	nop
 8014288:	080151a0 	.word	0x080151a0
 801428c:	080151b1 	.word	0x080151b1

08014290 <__mcmp>:
 8014290:	690a      	ldr	r2, [r1, #16]
 8014292:	4603      	mov	r3, r0
 8014294:	6900      	ldr	r0, [r0, #16]
 8014296:	1a80      	subs	r0, r0, r2
 8014298:	b530      	push	{r4, r5, lr}
 801429a:	d10e      	bne.n	80142ba <__mcmp+0x2a>
 801429c:	3314      	adds	r3, #20
 801429e:	3114      	adds	r1, #20
 80142a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80142a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80142a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80142ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80142b0:	4295      	cmp	r5, r2
 80142b2:	d003      	beq.n	80142bc <__mcmp+0x2c>
 80142b4:	d205      	bcs.n	80142c2 <__mcmp+0x32>
 80142b6:	f04f 30ff 	mov.w	r0, #4294967295
 80142ba:	bd30      	pop	{r4, r5, pc}
 80142bc:	42a3      	cmp	r3, r4
 80142be:	d3f3      	bcc.n	80142a8 <__mcmp+0x18>
 80142c0:	e7fb      	b.n	80142ba <__mcmp+0x2a>
 80142c2:	2001      	movs	r0, #1
 80142c4:	e7f9      	b.n	80142ba <__mcmp+0x2a>
	...

080142c8 <__mdiff>:
 80142c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142cc:	4689      	mov	r9, r1
 80142ce:	4606      	mov	r6, r0
 80142d0:	4611      	mov	r1, r2
 80142d2:	4648      	mov	r0, r9
 80142d4:	4614      	mov	r4, r2
 80142d6:	f7ff ffdb 	bl	8014290 <__mcmp>
 80142da:	1e05      	subs	r5, r0, #0
 80142dc:	d112      	bne.n	8014304 <__mdiff+0x3c>
 80142de:	4629      	mov	r1, r5
 80142e0:	4630      	mov	r0, r6
 80142e2:	f7ff fd5b 	bl	8013d9c <_Balloc>
 80142e6:	4602      	mov	r2, r0
 80142e8:	b928      	cbnz	r0, 80142f6 <__mdiff+0x2e>
 80142ea:	4b3f      	ldr	r3, [pc, #252]	@ (80143e8 <__mdiff+0x120>)
 80142ec:	f240 2137 	movw	r1, #567	@ 0x237
 80142f0:	483e      	ldr	r0, [pc, #248]	@ (80143ec <__mdiff+0x124>)
 80142f2:	f000 fb11 	bl	8014918 <__assert_func>
 80142f6:	2301      	movs	r3, #1
 80142f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80142fc:	4610      	mov	r0, r2
 80142fe:	b003      	add	sp, #12
 8014300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014304:	bfbc      	itt	lt
 8014306:	464b      	movlt	r3, r9
 8014308:	46a1      	movlt	r9, r4
 801430a:	4630      	mov	r0, r6
 801430c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014310:	bfba      	itte	lt
 8014312:	461c      	movlt	r4, r3
 8014314:	2501      	movlt	r5, #1
 8014316:	2500      	movge	r5, #0
 8014318:	f7ff fd40 	bl	8013d9c <_Balloc>
 801431c:	4602      	mov	r2, r0
 801431e:	b918      	cbnz	r0, 8014328 <__mdiff+0x60>
 8014320:	4b31      	ldr	r3, [pc, #196]	@ (80143e8 <__mdiff+0x120>)
 8014322:	f240 2145 	movw	r1, #581	@ 0x245
 8014326:	e7e3      	b.n	80142f0 <__mdiff+0x28>
 8014328:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801432c:	6926      	ldr	r6, [r4, #16]
 801432e:	60c5      	str	r5, [r0, #12]
 8014330:	f109 0310 	add.w	r3, r9, #16
 8014334:	f109 0514 	add.w	r5, r9, #20
 8014338:	f104 0e14 	add.w	lr, r4, #20
 801433c:	f100 0b14 	add.w	fp, r0, #20
 8014340:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014344:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014348:	9301      	str	r3, [sp, #4]
 801434a:	46d9      	mov	r9, fp
 801434c:	f04f 0c00 	mov.w	ip, #0
 8014350:	9b01      	ldr	r3, [sp, #4]
 8014352:	f85e 0b04 	ldr.w	r0, [lr], #4
 8014356:	f853 af04 	ldr.w	sl, [r3, #4]!
 801435a:	9301      	str	r3, [sp, #4]
 801435c:	fa1f f38a 	uxth.w	r3, sl
 8014360:	4619      	mov	r1, r3
 8014362:	b283      	uxth	r3, r0
 8014364:	1acb      	subs	r3, r1, r3
 8014366:	0c00      	lsrs	r0, r0, #16
 8014368:	4463      	add	r3, ip
 801436a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801436e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8014372:	b29b      	uxth	r3, r3
 8014374:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014378:	4576      	cmp	r6, lr
 801437a:	f849 3b04 	str.w	r3, [r9], #4
 801437e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014382:	d8e5      	bhi.n	8014350 <__mdiff+0x88>
 8014384:	1b33      	subs	r3, r6, r4
 8014386:	3b15      	subs	r3, #21
 8014388:	f023 0303 	bic.w	r3, r3, #3
 801438c:	3415      	adds	r4, #21
 801438e:	3304      	adds	r3, #4
 8014390:	42a6      	cmp	r6, r4
 8014392:	bf38      	it	cc
 8014394:	2304      	movcc	r3, #4
 8014396:	441d      	add	r5, r3
 8014398:	445b      	add	r3, fp
 801439a:	461e      	mov	r6, r3
 801439c:	462c      	mov	r4, r5
 801439e:	4544      	cmp	r4, r8
 80143a0:	d30e      	bcc.n	80143c0 <__mdiff+0xf8>
 80143a2:	f108 0103 	add.w	r1, r8, #3
 80143a6:	1b49      	subs	r1, r1, r5
 80143a8:	f021 0103 	bic.w	r1, r1, #3
 80143ac:	3d03      	subs	r5, #3
 80143ae:	45a8      	cmp	r8, r5
 80143b0:	bf38      	it	cc
 80143b2:	2100      	movcc	r1, #0
 80143b4:	440b      	add	r3, r1
 80143b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80143ba:	b191      	cbz	r1, 80143e2 <__mdiff+0x11a>
 80143bc:	6117      	str	r7, [r2, #16]
 80143be:	e79d      	b.n	80142fc <__mdiff+0x34>
 80143c0:	f854 1b04 	ldr.w	r1, [r4], #4
 80143c4:	46e6      	mov	lr, ip
 80143c6:	0c08      	lsrs	r0, r1, #16
 80143c8:	fa1c fc81 	uxtah	ip, ip, r1
 80143cc:	4471      	add	r1, lr
 80143ce:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80143d2:	b289      	uxth	r1, r1
 80143d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80143d8:	f846 1b04 	str.w	r1, [r6], #4
 80143dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80143e0:	e7dd      	b.n	801439e <__mdiff+0xd6>
 80143e2:	3f01      	subs	r7, #1
 80143e4:	e7e7      	b.n	80143b6 <__mdiff+0xee>
 80143e6:	bf00      	nop
 80143e8:	080151a0 	.word	0x080151a0
 80143ec:	080151b1 	.word	0x080151b1

080143f0 <__d2b>:
 80143f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80143f4:	460f      	mov	r7, r1
 80143f6:	2101      	movs	r1, #1
 80143f8:	ec59 8b10 	vmov	r8, r9, d0
 80143fc:	4616      	mov	r6, r2
 80143fe:	f7ff fccd 	bl	8013d9c <_Balloc>
 8014402:	4604      	mov	r4, r0
 8014404:	b930      	cbnz	r0, 8014414 <__d2b+0x24>
 8014406:	4602      	mov	r2, r0
 8014408:	4b23      	ldr	r3, [pc, #140]	@ (8014498 <__d2b+0xa8>)
 801440a:	4824      	ldr	r0, [pc, #144]	@ (801449c <__d2b+0xac>)
 801440c:	f240 310f 	movw	r1, #783	@ 0x30f
 8014410:	f000 fa82 	bl	8014918 <__assert_func>
 8014414:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014418:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801441c:	b10d      	cbz	r5, 8014422 <__d2b+0x32>
 801441e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014422:	9301      	str	r3, [sp, #4]
 8014424:	f1b8 0300 	subs.w	r3, r8, #0
 8014428:	d023      	beq.n	8014472 <__d2b+0x82>
 801442a:	4668      	mov	r0, sp
 801442c:	9300      	str	r3, [sp, #0]
 801442e:	f7ff fd7c 	bl	8013f2a <__lo0bits>
 8014432:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014436:	b1d0      	cbz	r0, 801446e <__d2b+0x7e>
 8014438:	f1c0 0320 	rsb	r3, r0, #32
 801443c:	fa02 f303 	lsl.w	r3, r2, r3
 8014440:	430b      	orrs	r3, r1
 8014442:	40c2      	lsrs	r2, r0
 8014444:	6163      	str	r3, [r4, #20]
 8014446:	9201      	str	r2, [sp, #4]
 8014448:	9b01      	ldr	r3, [sp, #4]
 801444a:	61a3      	str	r3, [r4, #24]
 801444c:	2b00      	cmp	r3, #0
 801444e:	bf0c      	ite	eq
 8014450:	2201      	moveq	r2, #1
 8014452:	2202      	movne	r2, #2
 8014454:	6122      	str	r2, [r4, #16]
 8014456:	b1a5      	cbz	r5, 8014482 <__d2b+0x92>
 8014458:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801445c:	4405      	add	r5, r0
 801445e:	603d      	str	r5, [r7, #0]
 8014460:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014464:	6030      	str	r0, [r6, #0]
 8014466:	4620      	mov	r0, r4
 8014468:	b003      	add	sp, #12
 801446a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801446e:	6161      	str	r1, [r4, #20]
 8014470:	e7ea      	b.n	8014448 <__d2b+0x58>
 8014472:	a801      	add	r0, sp, #4
 8014474:	f7ff fd59 	bl	8013f2a <__lo0bits>
 8014478:	9b01      	ldr	r3, [sp, #4]
 801447a:	6163      	str	r3, [r4, #20]
 801447c:	3020      	adds	r0, #32
 801447e:	2201      	movs	r2, #1
 8014480:	e7e8      	b.n	8014454 <__d2b+0x64>
 8014482:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014486:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801448a:	6038      	str	r0, [r7, #0]
 801448c:	6918      	ldr	r0, [r3, #16]
 801448e:	f7ff fd2d 	bl	8013eec <__hi0bits>
 8014492:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014496:	e7e5      	b.n	8014464 <__d2b+0x74>
 8014498:	080151a0 	.word	0x080151a0
 801449c:	080151b1 	.word	0x080151b1

080144a0 <__ssputs_r>:
 80144a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80144a4:	688e      	ldr	r6, [r1, #8]
 80144a6:	461f      	mov	r7, r3
 80144a8:	42be      	cmp	r6, r7
 80144aa:	680b      	ldr	r3, [r1, #0]
 80144ac:	4682      	mov	sl, r0
 80144ae:	460c      	mov	r4, r1
 80144b0:	4690      	mov	r8, r2
 80144b2:	d82d      	bhi.n	8014510 <__ssputs_r+0x70>
 80144b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80144b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80144bc:	d026      	beq.n	801450c <__ssputs_r+0x6c>
 80144be:	6965      	ldr	r5, [r4, #20]
 80144c0:	6909      	ldr	r1, [r1, #16]
 80144c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80144c6:	eba3 0901 	sub.w	r9, r3, r1
 80144ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80144ce:	1c7b      	adds	r3, r7, #1
 80144d0:	444b      	add	r3, r9
 80144d2:	106d      	asrs	r5, r5, #1
 80144d4:	429d      	cmp	r5, r3
 80144d6:	bf38      	it	cc
 80144d8:	461d      	movcc	r5, r3
 80144da:	0553      	lsls	r3, r2, #21
 80144dc:	d527      	bpl.n	801452e <__ssputs_r+0x8e>
 80144de:	4629      	mov	r1, r5
 80144e0:	f7ff fbd0 	bl	8013c84 <_malloc_r>
 80144e4:	4606      	mov	r6, r0
 80144e6:	b360      	cbz	r0, 8014542 <__ssputs_r+0xa2>
 80144e8:	6921      	ldr	r1, [r4, #16]
 80144ea:	464a      	mov	r2, r9
 80144ec:	f000 fa06 	bl	80148fc <memcpy>
 80144f0:	89a3      	ldrh	r3, [r4, #12]
 80144f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80144f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80144fa:	81a3      	strh	r3, [r4, #12]
 80144fc:	6126      	str	r6, [r4, #16]
 80144fe:	6165      	str	r5, [r4, #20]
 8014500:	444e      	add	r6, r9
 8014502:	eba5 0509 	sub.w	r5, r5, r9
 8014506:	6026      	str	r6, [r4, #0]
 8014508:	60a5      	str	r5, [r4, #8]
 801450a:	463e      	mov	r6, r7
 801450c:	42be      	cmp	r6, r7
 801450e:	d900      	bls.n	8014512 <__ssputs_r+0x72>
 8014510:	463e      	mov	r6, r7
 8014512:	6820      	ldr	r0, [r4, #0]
 8014514:	4632      	mov	r2, r6
 8014516:	4641      	mov	r1, r8
 8014518:	f000 f9c6 	bl	80148a8 <memmove>
 801451c:	68a3      	ldr	r3, [r4, #8]
 801451e:	1b9b      	subs	r3, r3, r6
 8014520:	60a3      	str	r3, [r4, #8]
 8014522:	6823      	ldr	r3, [r4, #0]
 8014524:	4433      	add	r3, r6
 8014526:	6023      	str	r3, [r4, #0]
 8014528:	2000      	movs	r0, #0
 801452a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801452e:	462a      	mov	r2, r5
 8014530:	f000 fa36 	bl	80149a0 <_realloc_r>
 8014534:	4606      	mov	r6, r0
 8014536:	2800      	cmp	r0, #0
 8014538:	d1e0      	bne.n	80144fc <__ssputs_r+0x5c>
 801453a:	6921      	ldr	r1, [r4, #16]
 801453c:	4650      	mov	r0, sl
 801453e:	f7ff fb2d 	bl	8013b9c <_free_r>
 8014542:	230c      	movs	r3, #12
 8014544:	f8ca 3000 	str.w	r3, [sl]
 8014548:	89a3      	ldrh	r3, [r4, #12]
 801454a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801454e:	81a3      	strh	r3, [r4, #12]
 8014550:	f04f 30ff 	mov.w	r0, #4294967295
 8014554:	e7e9      	b.n	801452a <__ssputs_r+0x8a>
	...

08014558 <_svfiprintf_r>:
 8014558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801455c:	4698      	mov	r8, r3
 801455e:	898b      	ldrh	r3, [r1, #12]
 8014560:	061b      	lsls	r3, r3, #24
 8014562:	b09d      	sub	sp, #116	@ 0x74
 8014564:	4607      	mov	r7, r0
 8014566:	460d      	mov	r5, r1
 8014568:	4614      	mov	r4, r2
 801456a:	d510      	bpl.n	801458e <_svfiprintf_r+0x36>
 801456c:	690b      	ldr	r3, [r1, #16]
 801456e:	b973      	cbnz	r3, 801458e <_svfiprintf_r+0x36>
 8014570:	2140      	movs	r1, #64	@ 0x40
 8014572:	f7ff fb87 	bl	8013c84 <_malloc_r>
 8014576:	6028      	str	r0, [r5, #0]
 8014578:	6128      	str	r0, [r5, #16]
 801457a:	b930      	cbnz	r0, 801458a <_svfiprintf_r+0x32>
 801457c:	230c      	movs	r3, #12
 801457e:	603b      	str	r3, [r7, #0]
 8014580:	f04f 30ff 	mov.w	r0, #4294967295
 8014584:	b01d      	add	sp, #116	@ 0x74
 8014586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801458a:	2340      	movs	r3, #64	@ 0x40
 801458c:	616b      	str	r3, [r5, #20]
 801458e:	2300      	movs	r3, #0
 8014590:	9309      	str	r3, [sp, #36]	@ 0x24
 8014592:	2320      	movs	r3, #32
 8014594:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014598:	f8cd 800c 	str.w	r8, [sp, #12]
 801459c:	2330      	movs	r3, #48	@ 0x30
 801459e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801473c <_svfiprintf_r+0x1e4>
 80145a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80145a6:	f04f 0901 	mov.w	r9, #1
 80145aa:	4623      	mov	r3, r4
 80145ac:	469a      	mov	sl, r3
 80145ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80145b2:	b10a      	cbz	r2, 80145b8 <_svfiprintf_r+0x60>
 80145b4:	2a25      	cmp	r2, #37	@ 0x25
 80145b6:	d1f9      	bne.n	80145ac <_svfiprintf_r+0x54>
 80145b8:	ebba 0b04 	subs.w	fp, sl, r4
 80145bc:	d00b      	beq.n	80145d6 <_svfiprintf_r+0x7e>
 80145be:	465b      	mov	r3, fp
 80145c0:	4622      	mov	r2, r4
 80145c2:	4629      	mov	r1, r5
 80145c4:	4638      	mov	r0, r7
 80145c6:	f7ff ff6b 	bl	80144a0 <__ssputs_r>
 80145ca:	3001      	adds	r0, #1
 80145cc:	f000 80a7 	beq.w	801471e <_svfiprintf_r+0x1c6>
 80145d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80145d2:	445a      	add	r2, fp
 80145d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80145d6:	f89a 3000 	ldrb.w	r3, [sl]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	f000 809f 	beq.w	801471e <_svfiprintf_r+0x1c6>
 80145e0:	2300      	movs	r3, #0
 80145e2:	f04f 32ff 	mov.w	r2, #4294967295
 80145e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80145ea:	f10a 0a01 	add.w	sl, sl, #1
 80145ee:	9304      	str	r3, [sp, #16]
 80145f0:	9307      	str	r3, [sp, #28]
 80145f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80145f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80145f8:	4654      	mov	r4, sl
 80145fa:	2205      	movs	r2, #5
 80145fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014600:	484e      	ldr	r0, [pc, #312]	@ (801473c <_svfiprintf_r+0x1e4>)
 8014602:	f7eb fe6d 	bl	80002e0 <memchr>
 8014606:	9a04      	ldr	r2, [sp, #16]
 8014608:	b9d8      	cbnz	r0, 8014642 <_svfiprintf_r+0xea>
 801460a:	06d0      	lsls	r0, r2, #27
 801460c:	bf44      	itt	mi
 801460e:	2320      	movmi	r3, #32
 8014610:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014614:	0711      	lsls	r1, r2, #28
 8014616:	bf44      	itt	mi
 8014618:	232b      	movmi	r3, #43	@ 0x2b
 801461a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801461e:	f89a 3000 	ldrb.w	r3, [sl]
 8014622:	2b2a      	cmp	r3, #42	@ 0x2a
 8014624:	d015      	beq.n	8014652 <_svfiprintf_r+0xfa>
 8014626:	9a07      	ldr	r2, [sp, #28]
 8014628:	4654      	mov	r4, sl
 801462a:	2000      	movs	r0, #0
 801462c:	f04f 0c0a 	mov.w	ip, #10
 8014630:	4621      	mov	r1, r4
 8014632:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014636:	3b30      	subs	r3, #48	@ 0x30
 8014638:	2b09      	cmp	r3, #9
 801463a:	d94b      	bls.n	80146d4 <_svfiprintf_r+0x17c>
 801463c:	b1b0      	cbz	r0, 801466c <_svfiprintf_r+0x114>
 801463e:	9207      	str	r2, [sp, #28]
 8014640:	e014      	b.n	801466c <_svfiprintf_r+0x114>
 8014642:	eba0 0308 	sub.w	r3, r0, r8
 8014646:	fa09 f303 	lsl.w	r3, r9, r3
 801464a:	4313      	orrs	r3, r2
 801464c:	9304      	str	r3, [sp, #16]
 801464e:	46a2      	mov	sl, r4
 8014650:	e7d2      	b.n	80145f8 <_svfiprintf_r+0xa0>
 8014652:	9b03      	ldr	r3, [sp, #12]
 8014654:	1d19      	adds	r1, r3, #4
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	9103      	str	r1, [sp, #12]
 801465a:	2b00      	cmp	r3, #0
 801465c:	bfbb      	ittet	lt
 801465e:	425b      	neglt	r3, r3
 8014660:	f042 0202 	orrlt.w	r2, r2, #2
 8014664:	9307      	strge	r3, [sp, #28]
 8014666:	9307      	strlt	r3, [sp, #28]
 8014668:	bfb8      	it	lt
 801466a:	9204      	strlt	r2, [sp, #16]
 801466c:	7823      	ldrb	r3, [r4, #0]
 801466e:	2b2e      	cmp	r3, #46	@ 0x2e
 8014670:	d10a      	bne.n	8014688 <_svfiprintf_r+0x130>
 8014672:	7863      	ldrb	r3, [r4, #1]
 8014674:	2b2a      	cmp	r3, #42	@ 0x2a
 8014676:	d132      	bne.n	80146de <_svfiprintf_r+0x186>
 8014678:	9b03      	ldr	r3, [sp, #12]
 801467a:	1d1a      	adds	r2, r3, #4
 801467c:	681b      	ldr	r3, [r3, #0]
 801467e:	9203      	str	r2, [sp, #12]
 8014680:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014684:	3402      	adds	r4, #2
 8014686:	9305      	str	r3, [sp, #20]
 8014688:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801474c <_svfiprintf_r+0x1f4>
 801468c:	7821      	ldrb	r1, [r4, #0]
 801468e:	2203      	movs	r2, #3
 8014690:	4650      	mov	r0, sl
 8014692:	f7eb fe25 	bl	80002e0 <memchr>
 8014696:	b138      	cbz	r0, 80146a8 <_svfiprintf_r+0x150>
 8014698:	9b04      	ldr	r3, [sp, #16]
 801469a:	eba0 000a 	sub.w	r0, r0, sl
 801469e:	2240      	movs	r2, #64	@ 0x40
 80146a0:	4082      	lsls	r2, r0
 80146a2:	4313      	orrs	r3, r2
 80146a4:	3401      	adds	r4, #1
 80146a6:	9304      	str	r3, [sp, #16]
 80146a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80146ac:	4824      	ldr	r0, [pc, #144]	@ (8014740 <_svfiprintf_r+0x1e8>)
 80146ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80146b2:	2206      	movs	r2, #6
 80146b4:	f7eb fe14 	bl	80002e0 <memchr>
 80146b8:	2800      	cmp	r0, #0
 80146ba:	d036      	beq.n	801472a <_svfiprintf_r+0x1d2>
 80146bc:	4b21      	ldr	r3, [pc, #132]	@ (8014744 <_svfiprintf_r+0x1ec>)
 80146be:	bb1b      	cbnz	r3, 8014708 <_svfiprintf_r+0x1b0>
 80146c0:	9b03      	ldr	r3, [sp, #12]
 80146c2:	3307      	adds	r3, #7
 80146c4:	f023 0307 	bic.w	r3, r3, #7
 80146c8:	3308      	adds	r3, #8
 80146ca:	9303      	str	r3, [sp, #12]
 80146cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80146ce:	4433      	add	r3, r6
 80146d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80146d2:	e76a      	b.n	80145aa <_svfiprintf_r+0x52>
 80146d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80146d8:	460c      	mov	r4, r1
 80146da:	2001      	movs	r0, #1
 80146dc:	e7a8      	b.n	8014630 <_svfiprintf_r+0xd8>
 80146de:	2300      	movs	r3, #0
 80146e0:	3401      	adds	r4, #1
 80146e2:	9305      	str	r3, [sp, #20]
 80146e4:	4619      	mov	r1, r3
 80146e6:	f04f 0c0a 	mov.w	ip, #10
 80146ea:	4620      	mov	r0, r4
 80146ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80146f0:	3a30      	subs	r2, #48	@ 0x30
 80146f2:	2a09      	cmp	r2, #9
 80146f4:	d903      	bls.n	80146fe <_svfiprintf_r+0x1a6>
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d0c6      	beq.n	8014688 <_svfiprintf_r+0x130>
 80146fa:	9105      	str	r1, [sp, #20]
 80146fc:	e7c4      	b.n	8014688 <_svfiprintf_r+0x130>
 80146fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8014702:	4604      	mov	r4, r0
 8014704:	2301      	movs	r3, #1
 8014706:	e7f0      	b.n	80146ea <_svfiprintf_r+0x192>
 8014708:	ab03      	add	r3, sp, #12
 801470a:	9300      	str	r3, [sp, #0]
 801470c:	462a      	mov	r2, r5
 801470e:	4b0e      	ldr	r3, [pc, #56]	@ (8014748 <_svfiprintf_r+0x1f0>)
 8014710:	a904      	add	r1, sp, #16
 8014712:	4638      	mov	r0, r7
 8014714:	f7fd ff14 	bl	8012540 <_printf_float>
 8014718:	1c42      	adds	r2, r0, #1
 801471a:	4606      	mov	r6, r0
 801471c:	d1d6      	bne.n	80146cc <_svfiprintf_r+0x174>
 801471e:	89ab      	ldrh	r3, [r5, #12]
 8014720:	065b      	lsls	r3, r3, #25
 8014722:	f53f af2d 	bmi.w	8014580 <_svfiprintf_r+0x28>
 8014726:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014728:	e72c      	b.n	8014584 <_svfiprintf_r+0x2c>
 801472a:	ab03      	add	r3, sp, #12
 801472c:	9300      	str	r3, [sp, #0]
 801472e:	462a      	mov	r2, r5
 8014730:	4b05      	ldr	r3, [pc, #20]	@ (8014748 <_svfiprintf_r+0x1f0>)
 8014732:	a904      	add	r1, sp, #16
 8014734:	4638      	mov	r0, r7
 8014736:	f7fe f98b 	bl	8012a50 <_printf_i>
 801473a:	e7ed      	b.n	8014718 <_svfiprintf_r+0x1c0>
 801473c:	08015308 	.word	0x08015308
 8014740:	08015312 	.word	0x08015312
 8014744:	08012541 	.word	0x08012541
 8014748:	080144a1 	.word	0x080144a1
 801474c:	0801530e 	.word	0x0801530e

08014750 <__sflush_r>:
 8014750:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014758:	0716      	lsls	r6, r2, #28
 801475a:	4605      	mov	r5, r0
 801475c:	460c      	mov	r4, r1
 801475e:	d454      	bmi.n	801480a <__sflush_r+0xba>
 8014760:	684b      	ldr	r3, [r1, #4]
 8014762:	2b00      	cmp	r3, #0
 8014764:	dc02      	bgt.n	801476c <__sflush_r+0x1c>
 8014766:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014768:	2b00      	cmp	r3, #0
 801476a:	dd48      	ble.n	80147fe <__sflush_r+0xae>
 801476c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801476e:	2e00      	cmp	r6, #0
 8014770:	d045      	beq.n	80147fe <__sflush_r+0xae>
 8014772:	2300      	movs	r3, #0
 8014774:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014778:	682f      	ldr	r7, [r5, #0]
 801477a:	6a21      	ldr	r1, [r4, #32]
 801477c:	602b      	str	r3, [r5, #0]
 801477e:	d030      	beq.n	80147e2 <__sflush_r+0x92>
 8014780:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014782:	89a3      	ldrh	r3, [r4, #12]
 8014784:	0759      	lsls	r1, r3, #29
 8014786:	d505      	bpl.n	8014794 <__sflush_r+0x44>
 8014788:	6863      	ldr	r3, [r4, #4]
 801478a:	1ad2      	subs	r2, r2, r3
 801478c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801478e:	b10b      	cbz	r3, 8014794 <__sflush_r+0x44>
 8014790:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014792:	1ad2      	subs	r2, r2, r3
 8014794:	2300      	movs	r3, #0
 8014796:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014798:	6a21      	ldr	r1, [r4, #32]
 801479a:	4628      	mov	r0, r5
 801479c:	47b0      	blx	r6
 801479e:	1c43      	adds	r3, r0, #1
 80147a0:	89a3      	ldrh	r3, [r4, #12]
 80147a2:	d106      	bne.n	80147b2 <__sflush_r+0x62>
 80147a4:	6829      	ldr	r1, [r5, #0]
 80147a6:	291d      	cmp	r1, #29
 80147a8:	d82b      	bhi.n	8014802 <__sflush_r+0xb2>
 80147aa:	4a2a      	ldr	r2, [pc, #168]	@ (8014854 <__sflush_r+0x104>)
 80147ac:	410a      	asrs	r2, r1
 80147ae:	07d6      	lsls	r6, r2, #31
 80147b0:	d427      	bmi.n	8014802 <__sflush_r+0xb2>
 80147b2:	2200      	movs	r2, #0
 80147b4:	6062      	str	r2, [r4, #4]
 80147b6:	04d9      	lsls	r1, r3, #19
 80147b8:	6922      	ldr	r2, [r4, #16]
 80147ba:	6022      	str	r2, [r4, #0]
 80147bc:	d504      	bpl.n	80147c8 <__sflush_r+0x78>
 80147be:	1c42      	adds	r2, r0, #1
 80147c0:	d101      	bne.n	80147c6 <__sflush_r+0x76>
 80147c2:	682b      	ldr	r3, [r5, #0]
 80147c4:	b903      	cbnz	r3, 80147c8 <__sflush_r+0x78>
 80147c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80147c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80147ca:	602f      	str	r7, [r5, #0]
 80147cc:	b1b9      	cbz	r1, 80147fe <__sflush_r+0xae>
 80147ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80147d2:	4299      	cmp	r1, r3
 80147d4:	d002      	beq.n	80147dc <__sflush_r+0x8c>
 80147d6:	4628      	mov	r0, r5
 80147d8:	f7ff f9e0 	bl	8013b9c <_free_r>
 80147dc:	2300      	movs	r3, #0
 80147de:	6363      	str	r3, [r4, #52]	@ 0x34
 80147e0:	e00d      	b.n	80147fe <__sflush_r+0xae>
 80147e2:	2301      	movs	r3, #1
 80147e4:	4628      	mov	r0, r5
 80147e6:	47b0      	blx	r6
 80147e8:	4602      	mov	r2, r0
 80147ea:	1c50      	adds	r0, r2, #1
 80147ec:	d1c9      	bne.n	8014782 <__sflush_r+0x32>
 80147ee:	682b      	ldr	r3, [r5, #0]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d0c6      	beq.n	8014782 <__sflush_r+0x32>
 80147f4:	2b1d      	cmp	r3, #29
 80147f6:	d001      	beq.n	80147fc <__sflush_r+0xac>
 80147f8:	2b16      	cmp	r3, #22
 80147fa:	d11e      	bne.n	801483a <__sflush_r+0xea>
 80147fc:	602f      	str	r7, [r5, #0]
 80147fe:	2000      	movs	r0, #0
 8014800:	e022      	b.n	8014848 <__sflush_r+0xf8>
 8014802:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014806:	b21b      	sxth	r3, r3
 8014808:	e01b      	b.n	8014842 <__sflush_r+0xf2>
 801480a:	690f      	ldr	r7, [r1, #16]
 801480c:	2f00      	cmp	r7, #0
 801480e:	d0f6      	beq.n	80147fe <__sflush_r+0xae>
 8014810:	0793      	lsls	r3, r2, #30
 8014812:	680e      	ldr	r6, [r1, #0]
 8014814:	bf08      	it	eq
 8014816:	694b      	ldreq	r3, [r1, #20]
 8014818:	600f      	str	r7, [r1, #0]
 801481a:	bf18      	it	ne
 801481c:	2300      	movne	r3, #0
 801481e:	eba6 0807 	sub.w	r8, r6, r7
 8014822:	608b      	str	r3, [r1, #8]
 8014824:	f1b8 0f00 	cmp.w	r8, #0
 8014828:	dde9      	ble.n	80147fe <__sflush_r+0xae>
 801482a:	6a21      	ldr	r1, [r4, #32]
 801482c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801482e:	4643      	mov	r3, r8
 8014830:	463a      	mov	r2, r7
 8014832:	4628      	mov	r0, r5
 8014834:	47b0      	blx	r6
 8014836:	2800      	cmp	r0, #0
 8014838:	dc08      	bgt.n	801484c <__sflush_r+0xfc>
 801483a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801483e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014842:	81a3      	strh	r3, [r4, #12]
 8014844:	f04f 30ff 	mov.w	r0, #4294967295
 8014848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801484c:	4407      	add	r7, r0
 801484e:	eba8 0800 	sub.w	r8, r8, r0
 8014852:	e7e7      	b.n	8014824 <__sflush_r+0xd4>
 8014854:	dfbffffe 	.word	0xdfbffffe

08014858 <_fflush_r>:
 8014858:	b538      	push	{r3, r4, r5, lr}
 801485a:	690b      	ldr	r3, [r1, #16]
 801485c:	4605      	mov	r5, r0
 801485e:	460c      	mov	r4, r1
 8014860:	b913      	cbnz	r3, 8014868 <_fflush_r+0x10>
 8014862:	2500      	movs	r5, #0
 8014864:	4628      	mov	r0, r5
 8014866:	bd38      	pop	{r3, r4, r5, pc}
 8014868:	b118      	cbz	r0, 8014872 <_fflush_r+0x1a>
 801486a:	6a03      	ldr	r3, [r0, #32]
 801486c:	b90b      	cbnz	r3, 8014872 <_fflush_r+0x1a>
 801486e:	f7fe fa9b 	bl	8012da8 <__sinit>
 8014872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014876:	2b00      	cmp	r3, #0
 8014878:	d0f3      	beq.n	8014862 <_fflush_r+0xa>
 801487a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801487c:	07d0      	lsls	r0, r2, #31
 801487e:	d404      	bmi.n	801488a <_fflush_r+0x32>
 8014880:	0599      	lsls	r1, r3, #22
 8014882:	d402      	bmi.n	801488a <_fflush_r+0x32>
 8014884:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014886:	f7fe fba6 	bl	8012fd6 <__retarget_lock_acquire_recursive>
 801488a:	4628      	mov	r0, r5
 801488c:	4621      	mov	r1, r4
 801488e:	f7ff ff5f 	bl	8014750 <__sflush_r>
 8014892:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014894:	07da      	lsls	r2, r3, #31
 8014896:	4605      	mov	r5, r0
 8014898:	d4e4      	bmi.n	8014864 <_fflush_r+0xc>
 801489a:	89a3      	ldrh	r3, [r4, #12]
 801489c:	059b      	lsls	r3, r3, #22
 801489e:	d4e1      	bmi.n	8014864 <_fflush_r+0xc>
 80148a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80148a2:	f7fe fb99 	bl	8012fd8 <__retarget_lock_release_recursive>
 80148a6:	e7dd      	b.n	8014864 <_fflush_r+0xc>

080148a8 <memmove>:
 80148a8:	4288      	cmp	r0, r1
 80148aa:	b510      	push	{r4, lr}
 80148ac:	eb01 0402 	add.w	r4, r1, r2
 80148b0:	d902      	bls.n	80148b8 <memmove+0x10>
 80148b2:	4284      	cmp	r4, r0
 80148b4:	4623      	mov	r3, r4
 80148b6:	d807      	bhi.n	80148c8 <memmove+0x20>
 80148b8:	1e43      	subs	r3, r0, #1
 80148ba:	42a1      	cmp	r1, r4
 80148bc:	d008      	beq.n	80148d0 <memmove+0x28>
 80148be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80148c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80148c6:	e7f8      	b.n	80148ba <memmove+0x12>
 80148c8:	4402      	add	r2, r0
 80148ca:	4601      	mov	r1, r0
 80148cc:	428a      	cmp	r2, r1
 80148ce:	d100      	bne.n	80148d2 <memmove+0x2a>
 80148d0:	bd10      	pop	{r4, pc}
 80148d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80148d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80148da:	e7f7      	b.n	80148cc <memmove+0x24>

080148dc <_sbrk_r>:
 80148dc:	b538      	push	{r3, r4, r5, lr}
 80148de:	4d06      	ldr	r5, [pc, #24]	@ (80148f8 <_sbrk_r+0x1c>)
 80148e0:	2300      	movs	r3, #0
 80148e2:	4604      	mov	r4, r0
 80148e4:	4608      	mov	r0, r1
 80148e6:	602b      	str	r3, [r5, #0]
 80148e8:	f7ed f8fa 	bl	8001ae0 <_sbrk>
 80148ec:	1c43      	adds	r3, r0, #1
 80148ee:	d102      	bne.n	80148f6 <_sbrk_r+0x1a>
 80148f0:	682b      	ldr	r3, [r5, #0]
 80148f2:	b103      	cbz	r3, 80148f6 <_sbrk_r+0x1a>
 80148f4:	6023      	str	r3, [r4, #0]
 80148f6:	bd38      	pop	{r3, r4, r5, pc}
 80148f8:	24002768 	.word	0x24002768

080148fc <memcpy>:
 80148fc:	440a      	add	r2, r1
 80148fe:	4291      	cmp	r1, r2
 8014900:	f100 33ff 	add.w	r3, r0, #4294967295
 8014904:	d100      	bne.n	8014908 <memcpy+0xc>
 8014906:	4770      	bx	lr
 8014908:	b510      	push	{r4, lr}
 801490a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801490e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014912:	4291      	cmp	r1, r2
 8014914:	d1f9      	bne.n	801490a <memcpy+0xe>
 8014916:	bd10      	pop	{r4, pc}

08014918 <__assert_func>:
 8014918:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801491a:	4614      	mov	r4, r2
 801491c:	461a      	mov	r2, r3
 801491e:	4b09      	ldr	r3, [pc, #36]	@ (8014944 <__assert_func+0x2c>)
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	4605      	mov	r5, r0
 8014924:	68d8      	ldr	r0, [r3, #12]
 8014926:	b954      	cbnz	r4, 801493e <__assert_func+0x26>
 8014928:	4b07      	ldr	r3, [pc, #28]	@ (8014948 <__assert_func+0x30>)
 801492a:	461c      	mov	r4, r3
 801492c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014930:	9100      	str	r1, [sp, #0]
 8014932:	462b      	mov	r3, r5
 8014934:	4905      	ldr	r1, [pc, #20]	@ (801494c <__assert_func+0x34>)
 8014936:	f000 f86f 	bl	8014a18 <fiprintf>
 801493a:	f000 f87f 	bl	8014a3c <abort>
 801493e:	4b04      	ldr	r3, [pc, #16]	@ (8014950 <__assert_func+0x38>)
 8014940:	e7f4      	b.n	801492c <__assert_func+0x14>
 8014942:	bf00      	nop
 8014944:	2400012c 	.word	0x2400012c
 8014948:	0801535e 	.word	0x0801535e
 801494c:	08015330 	.word	0x08015330
 8014950:	08015323 	.word	0x08015323

08014954 <_calloc_r>:
 8014954:	b570      	push	{r4, r5, r6, lr}
 8014956:	fba1 5402 	umull	r5, r4, r1, r2
 801495a:	b93c      	cbnz	r4, 801496c <_calloc_r+0x18>
 801495c:	4629      	mov	r1, r5
 801495e:	f7ff f991 	bl	8013c84 <_malloc_r>
 8014962:	4606      	mov	r6, r0
 8014964:	b928      	cbnz	r0, 8014972 <_calloc_r+0x1e>
 8014966:	2600      	movs	r6, #0
 8014968:	4630      	mov	r0, r6
 801496a:	bd70      	pop	{r4, r5, r6, pc}
 801496c:	220c      	movs	r2, #12
 801496e:	6002      	str	r2, [r0, #0]
 8014970:	e7f9      	b.n	8014966 <_calloc_r+0x12>
 8014972:	462a      	mov	r2, r5
 8014974:	4621      	mov	r1, r4
 8014976:	f7fe fab0 	bl	8012eda <memset>
 801497a:	e7f5      	b.n	8014968 <_calloc_r+0x14>

0801497c <__ascii_mbtowc>:
 801497c:	b082      	sub	sp, #8
 801497e:	b901      	cbnz	r1, 8014982 <__ascii_mbtowc+0x6>
 8014980:	a901      	add	r1, sp, #4
 8014982:	b142      	cbz	r2, 8014996 <__ascii_mbtowc+0x1a>
 8014984:	b14b      	cbz	r3, 801499a <__ascii_mbtowc+0x1e>
 8014986:	7813      	ldrb	r3, [r2, #0]
 8014988:	600b      	str	r3, [r1, #0]
 801498a:	7812      	ldrb	r2, [r2, #0]
 801498c:	1e10      	subs	r0, r2, #0
 801498e:	bf18      	it	ne
 8014990:	2001      	movne	r0, #1
 8014992:	b002      	add	sp, #8
 8014994:	4770      	bx	lr
 8014996:	4610      	mov	r0, r2
 8014998:	e7fb      	b.n	8014992 <__ascii_mbtowc+0x16>
 801499a:	f06f 0001 	mvn.w	r0, #1
 801499e:	e7f8      	b.n	8014992 <__ascii_mbtowc+0x16>

080149a0 <_realloc_r>:
 80149a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149a4:	4680      	mov	r8, r0
 80149a6:	4615      	mov	r5, r2
 80149a8:	460c      	mov	r4, r1
 80149aa:	b921      	cbnz	r1, 80149b6 <_realloc_r+0x16>
 80149ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80149b0:	4611      	mov	r1, r2
 80149b2:	f7ff b967 	b.w	8013c84 <_malloc_r>
 80149b6:	b92a      	cbnz	r2, 80149c4 <_realloc_r+0x24>
 80149b8:	f7ff f8f0 	bl	8013b9c <_free_r>
 80149bc:	2400      	movs	r4, #0
 80149be:	4620      	mov	r0, r4
 80149c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149c4:	f000 f841 	bl	8014a4a <_malloc_usable_size_r>
 80149c8:	4285      	cmp	r5, r0
 80149ca:	4606      	mov	r6, r0
 80149cc:	d802      	bhi.n	80149d4 <_realloc_r+0x34>
 80149ce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80149d2:	d8f4      	bhi.n	80149be <_realloc_r+0x1e>
 80149d4:	4629      	mov	r1, r5
 80149d6:	4640      	mov	r0, r8
 80149d8:	f7ff f954 	bl	8013c84 <_malloc_r>
 80149dc:	4607      	mov	r7, r0
 80149de:	2800      	cmp	r0, #0
 80149e0:	d0ec      	beq.n	80149bc <_realloc_r+0x1c>
 80149e2:	42b5      	cmp	r5, r6
 80149e4:	462a      	mov	r2, r5
 80149e6:	4621      	mov	r1, r4
 80149e8:	bf28      	it	cs
 80149ea:	4632      	movcs	r2, r6
 80149ec:	f7ff ff86 	bl	80148fc <memcpy>
 80149f0:	4621      	mov	r1, r4
 80149f2:	4640      	mov	r0, r8
 80149f4:	f7ff f8d2 	bl	8013b9c <_free_r>
 80149f8:	463c      	mov	r4, r7
 80149fa:	e7e0      	b.n	80149be <_realloc_r+0x1e>

080149fc <__ascii_wctomb>:
 80149fc:	4603      	mov	r3, r0
 80149fe:	4608      	mov	r0, r1
 8014a00:	b141      	cbz	r1, 8014a14 <__ascii_wctomb+0x18>
 8014a02:	2aff      	cmp	r2, #255	@ 0xff
 8014a04:	d904      	bls.n	8014a10 <__ascii_wctomb+0x14>
 8014a06:	228a      	movs	r2, #138	@ 0x8a
 8014a08:	601a      	str	r2, [r3, #0]
 8014a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8014a0e:	4770      	bx	lr
 8014a10:	700a      	strb	r2, [r1, #0]
 8014a12:	2001      	movs	r0, #1
 8014a14:	4770      	bx	lr
	...

08014a18 <fiprintf>:
 8014a18:	b40e      	push	{r1, r2, r3}
 8014a1a:	b503      	push	{r0, r1, lr}
 8014a1c:	4601      	mov	r1, r0
 8014a1e:	ab03      	add	r3, sp, #12
 8014a20:	4805      	ldr	r0, [pc, #20]	@ (8014a38 <fiprintf+0x20>)
 8014a22:	f853 2b04 	ldr.w	r2, [r3], #4
 8014a26:	6800      	ldr	r0, [r0, #0]
 8014a28:	9301      	str	r3, [sp, #4]
 8014a2a:	f000 f83f 	bl	8014aac <_vfiprintf_r>
 8014a2e:	b002      	add	sp, #8
 8014a30:	f85d eb04 	ldr.w	lr, [sp], #4
 8014a34:	b003      	add	sp, #12
 8014a36:	4770      	bx	lr
 8014a38:	2400012c 	.word	0x2400012c

08014a3c <abort>:
 8014a3c:	b508      	push	{r3, lr}
 8014a3e:	2006      	movs	r0, #6
 8014a40:	f000 fa08 	bl	8014e54 <raise>
 8014a44:	2001      	movs	r0, #1
 8014a46:	f7ec ffd3 	bl	80019f0 <_exit>

08014a4a <_malloc_usable_size_r>:
 8014a4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014a4e:	1f18      	subs	r0, r3, #4
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	bfbc      	itt	lt
 8014a54:	580b      	ldrlt	r3, [r1, r0]
 8014a56:	18c0      	addlt	r0, r0, r3
 8014a58:	4770      	bx	lr

08014a5a <__sfputc_r>:
 8014a5a:	6893      	ldr	r3, [r2, #8]
 8014a5c:	3b01      	subs	r3, #1
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	b410      	push	{r4}
 8014a62:	6093      	str	r3, [r2, #8]
 8014a64:	da08      	bge.n	8014a78 <__sfputc_r+0x1e>
 8014a66:	6994      	ldr	r4, [r2, #24]
 8014a68:	42a3      	cmp	r3, r4
 8014a6a:	db01      	blt.n	8014a70 <__sfputc_r+0x16>
 8014a6c:	290a      	cmp	r1, #10
 8014a6e:	d103      	bne.n	8014a78 <__sfputc_r+0x1e>
 8014a70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014a74:	f000 b932 	b.w	8014cdc <__swbuf_r>
 8014a78:	6813      	ldr	r3, [r2, #0]
 8014a7a:	1c58      	adds	r0, r3, #1
 8014a7c:	6010      	str	r0, [r2, #0]
 8014a7e:	7019      	strb	r1, [r3, #0]
 8014a80:	4608      	mov	r0, r1
 8014a82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014a86:	4770      	bx	lr

08014a88 <__sfputs_r>:
 8014a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a8a:	4606      	mov	r6, r0
 8014a8c:	460f      	mov	r7, r1
 8014a8e:	4614      	mov	r4, r2
 8014a90:	18d5      	adds	r5, r2, r3
 8014a92:	42ac      	cmp	r4, r5
 8014a94:	d101      	bne.n	8014a9a <__sfputs_r+0x12>
 8014a96:	2000      	movs	r0, #0
 8014a98:	e007      	b.n	8014aaa <__sfputs_r+0x22>
 8014a9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a9e:	463a      	mov	r2, r7
 8014aa0:	4630      	mov	r0, r6
 8014aa2:	f7ff ffda 	bl	8014a5a <__sfputc_r>
 8014aa6:	1c43      	adds	r3, r0, #1
 8014aa8:	d1f3      	bne.n	8014a92 <__sfputs_r+0xa>
 8014aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014aac <_vfiprintf_r>:
 8014aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ab0:	460d      	mov	r5, r1
 8014ab2:	b09d      	sub	sp, #116	@ 0x74
 8014ab4:	4614      	mov	r4, r2
 8014ab6:	4698      	mov	r8, r3
 8014ab8:	4606      	mov	r6, r0
 8014aba:	b118      	cbz	r0, 8014ac4 <_vfiprintf_r+0x18>
 8014abc:	6a03      	ldr	r3, [r0, #32]
 8014abe:	b90b      	cbnz	r3, 8014ac4 <_vfiprintf_r+0x18>
 8014ac0:	f7fe f972 	bl	8012da8 <__sinit>
 8014ac4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014ac6:	07d9      	lsls	r1, r3, #31
 8014ac8:	d405      	bmi.n	8014ad6 <_vfiprintf_r+0x2a>
 8014aca:	89ab      	ldrh	r3, [r5, #12]
 8014acc:	059a      	lsls	r2, r3, #22
 8014ace:	d402      	bmi.n	8014ad6 <_vfiprintf_r+0x2a>
 8014ad0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014ad2:	f7fe fa80 	bl	8012fd6 <__retarget_lock_acquire_recursive>
 8014ad6:	89ab      	ldrh	r3, [r5, #12]
 8014ad8:	071b      	lsls	r3, r3, #28
 8014ada:	d501      	bpl.n	8014ae0 <_vfiprintf_r+0x34>
 8014adc:	692b      	ldr	r3, [r5, #16]
 8014ade:	b99b      	cbnz	r3, 8014b08 <_vfiprintf_r+0x5c>
 8014ae0:	4629      	mov	r1, r5
 8014ae2:	4630      	mov	r0, r6
 8014ae4:	f000 f938 	bl	8014d58 <__swsetup_r>
 8014ae8:	b170      	cbz	r0, 8014b08 <_vfiprintf_r+0x5c>
 8014aea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014aec:	07dc      	lsls	r4, r3, #31
 8014aee:	d504      	bpl.n	8014afa <_vfiprintf_r+0x4e>
 8014af0:	f04f 30ff 	mov.w	r0, #4294967295
 8014af4:	b01d      	add	sp, #116	@ 0x74
 8014af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014afa:	89ab      	ldrh	r3, [r5, #12]
 8014afc:	0598      	lsls	r0, r3, #22
 8014afe:	d4f7      	bmi.n	8014af0 <_vfiprintf_r+0x44>
 8014b00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014b02:	f7fe fa69 	bl	8012fd8 <__retarget_lock_release_recursive>
 8014b06:	e7f3      	b.n	8014af0 <_vfiprintf_r+0x44>
 8014b08:	2300      	movs	r3, #0
 8014b0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8014b0c:	2320      	movs	r3, #32
 8014b0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014b12:	f8cd 800c 	str.w	r8, [sp, #12]
 8014b16:	2330      	movs	r3, #48	@ 0x30
 8014b18:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014cc8 <_vfiprintf_r+0x21c>
 8014b1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014b20:	f04f 0901 	mov.w	r9, #1
 8014b24:	4623      	mov	r3, r4
 8014b26:	469a      	mov	sl, r3
 8014b28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014b2c:	b10a      	cbz	r2, 8014b32 <_vfiprintf_r+0x86>
 8014b2e:	2a25      	cmp	r2, #37	@ 0x25
 8014b30:	d1f9      	bne.n	8014b26 <_vfiprintf_r+0x7a>
 8014b32:	ebba 0b04 	subs.w	fp, sl, r4
 8014b36:	d00b      	beq.n	8014b50 <_vfiprintf_r+0xa4>
 8014b38:	465b      	mov	r3, fp
 8014b3a:	4622      	mov	r2, r4
 8014b3c:	4629      	mov	r1, r5
 8014b3e:	4630      	mov	r0, r6
 8014b40:	f7ff ffa2 	bl	8014a88 <__sfputs_r>
 8014b44:	3001      	adds	r0, #1
 8014b46:	f000 80a7 	beq.w	8014c98 <_vfiprintf_r+0x1ec>
 8014b4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014b4c:	445a      	add	r2, fp
 8014b4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8014b50:	f89a 3000 	ldrb.w	r3, [sl]
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	f000 809f 	beq.w	8014c98 <_vfiprintf_r+0x1ec>
 8014b5a:	2300      	movs	r3, #0
 8014b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8014b60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014b64:	f10a 0a01 	add.w	sl, sl, #1
 8014b68:	9304      	str	r3, [sp, #16]
 8014b6a:	9307      	str	r3, [sp, #28]
 8014b6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014b70:	931a      	str	r3, [sp, #104]	@ 0x68
 8014b72:	4654      	mov	r4, sl
 8014b74:	2205      	movs	r2, #5
 8014b76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b7a:	4853      	ldr	r0, [pc, #332]	@ (8014cc8 <_vfiprintf_r+0x21c>)
 8014b7c:	f7eb fbb0 	bl	80002e0 <memchr>
 8014b80:	9a04      	ldr	r2, [sp, #16]
 8014b82:	b9d8      	cbnz	r0, 8014bbc <_vfiprintf_r+0x110>
 8014b84:	06d1      	lsls	r1, r2, #27
 8014b86:	bf44      	itt	mi
 8014b88:	2320      	movmi	r3, #32
 8014b8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014b8e:	0713      	lsls	r3, r2, #28
 8014b90:	bf44      	itt	mi
 8014b92:	232b      	movmi	r3, #43	@ 0x2b
 8014b94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014b98:	f89a 3000 	ldrb.w	r3, [sl]
 8014b9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8014b9e:	d015      	beq.n	8014bcc <_vfiprintf_r+0x120>
 8014ba0:	9a07      	ldr	r2, [sp, #28]
 8014ba2:	4654      	mov	r4, sl
 8014ba4:	2000      	movs	r0, #0
 8014ba6:	f04f 0c0a 	mov.w	ip, #10
 8014baa:	4621      	mov	r1, r4
 8014bac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014bb0:	3b30      	subs	r3, #48	@ 0x30
 8014bb2:	2b09      	cmp	r3, #9
 8014bb4:	d94b      	bls.n	8014c4e <_vfiprintf_r+0x1a2>
 8014bb6:	b1b0      	cbz	r0, 8014be6 <_vfiprintf_r+0x13a>
 8014bb8:	9207      	str	r2, [sp, #28]
 8014bba:	e014      	b.n	8014be6 <_vfiprintf_r+0x13a>
 8014bbc:	eba0 0308 	sub.w	r3, r0, r8
 8014bc0:	fa09 f303 	lsl.w	r3, r9, r3
 8014bc4:	4313      	orrs	r3, r2
 8014bc6:	9304      	str	r3, [sp, #16]
 8014bc8:	46a2      	mov	sl, r4
 8014bca:	e7d2      	b.n	8014b72 <_vfiprintf_r+0xc6>
 8014bcc:	9b03      	ldr	r3, [sp, #12]
 8014bce:	1d19      	adds	r1, r3, #4
 8014bd0:	681b      	ldr	r3, [r3, #0]
 8014bd2:	9103      	str	r1, [sp, #12]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	bfbb      	ittet	lt
 8014bd8:	425b      	neglt	r3, r3
 8014bda:	f042 0202 	orrlt.w	r2, r2, #2
 8014bde:	9307      	strge	r3, [sp, #28]
 8014be0:	9307      	strlt	r3, [sp, #28]
 8014be2:	bfb8      	it	lt
 8014be4:	9204      	strlt	r2, [sp, #16]
 8014be6:	7823      	ldrb	r3, [r4, #0]
 8014be8:	2b2e      	cmp	r3, #46	@ 0x2e
 8014bea:	d10a      	bne.n	8014c02 <_vfiprintf_r+0x156>
 8014bec:	7863      	ldrb	r3, [r4, #1]
 8014bee:	2b2a      	cmp	r3, #42	@ 0x2a
 8014bf0:	d132      	bne.n	8014c58 <_vfiprintf_r+0x1ac>
 8014bf2:	9b03      	ldr	r3, [sp, #12]
 8014bf4:	1d1a      	adds	r2, r3, #4
 8014bf6:	681b      	ldr	r3, [r3, #0]
 8014bf8:	9203      	str	r2, [sp, #12]
 8014bfa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014bfe:	3402      	adds	r4, #2
 8014c00:	9305      	str	r3, [sp, #20]
 8014c02:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014cd8 <_vfiprintf_r+0x22c>
 8014c06:	7821      	ldrb	r1, [r4, #0]
 8014c08:	2203      	movs	r2, #3
 8014c0a:	4650      	mov	r0, sl
 8014c0c:	f7eb fb68 	bl	80002e0 <memchr>
 8014c10:	b138      	cbz	r0, 8014c22 <_vfiprintf_r+0x176>
 8014c12:	9b04      	ldr	r3, [sp, #16]
 8014c14:	eba0 000a 	sub.w	r0, r0, sl
 8014c18:	2240      	movs	r2, #64	@ 0x40
 8014c1a:	4082      	lsls	r2, r0
 8014c1c:	4313      	orrs	r3, r2
 8014c1e:	3401      	adds	r4, #1
 8014c20:	9304      	str	r3, [sp, #16]
 8014c22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c26:	4829      	ldr	r0, [pc, #164]	@ (8014ccc <_vfiprintf_r+0x220>)
 8014c28:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014c2c:	2206      	movs	r2, #6
 8014c2e:	f7eb fb57 	bl	80002e0 <memchr>
 8014c32:	2800      	cmp	r0, #0
 8014c34:	d03f      	beq.n	8014cb6 <_vfiprintf_r+0x20a>
 8014c36:	4b26      	ldr	r3, [pc, #152]	@ (8014cd0 <_vfiprintf_r+0x224>)
 8014c38:	bb1b      	cbnz	r3, 8014c82 <_vfiprintf_r+0x1d6>
 8014c3a:	9b03      	ldr	r3, [sp, #12]
 8014c3c:	3307      	adds	r3, #7
 8014c3e:	f023 0307 	bic.w	r3, r3, #7
 8014c42:	3308      	adds	r3, #8
 8014c44:	9303      	str	r3, [sp, #12]
 8014c46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014c48:	443b      	add	r3, r7
 8014c4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8014c4c:	e76a      	b.n	8014b24 <_vfiprintf_r+0x78>
 8014c4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8014c52:	460c      	mov	r4, r1
 8014c54:	2001      	movs	r0, #1
 8014c56:	e7a8      	b.n	8014baa <_vfiprintf_r+0xfe>
 8014c58:	2300      	movs	r3, #0
 8014c5a:	3401      	adds	r4, #1
 8014c5c:	9305      	str	r3, [sp, #20]
 8014c5e:	4619      	mov	r1, r3
 8014c60:	f04f 0c0a 	mov.w	ip, #10
 8014c64:	4620      	mov	r0, r4
 8014c66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014c6a:	3a30      	subs	r2, #48	@ 0x30
 8014c6c:	2a09      	cmp	r2, #9
 8014c6e:	d903      	bls.n	8014c78 <_vfiprintf_r+0x1cc>
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d0c6      	beq.n	8014c02 <_vfiprintf_r+0x156>
 8014c74:	9105      	str	r1, [sp, #20]
 8014c76:	e7c4      	b.n	8014c02 <_vfiprintf_r+0x156>
 8014c78:	fb0c 2101 	mla	r1, ip, r1, r2
 8014c7c:	4604      	mov	r4, r0
 8014c7e:	2301      	movs	r3, #1
 8014c80:	e7f0      	b.n	8014c64 <_vfiprintf_r+0x1b8>
 8014c82:	ab03      	add	r3, sp, #12
 8014c84:	9300      	str	r3, [sp, #0]
 8014c86:	462a      	mov	r2, r5
 8014c88:	4b12      	ldr	r3, [pc, #72]	@ (8014cd4 <_vfiprintf_r+0x228>)
 8014c8a:	a904      	add	r1, sp, #16
 8014c8c:	4630      	mov	r0, r6
 8014c8e:	f7fd fc57 	bl	8012540 <_printf_float>
 8014c92:	4607      	mov	r7, r0
 8014c94:	1c78      	adds	r0, r7, #1
 8014c96:	d1d6      	bne.n	8014c46 <_vfiprintf_r+0x19a>
 8014c98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014c9a:	07d9      	lsls	r1, r3, #31
 8014c9c:	d405      	bmi.n	8014caa <_vfiprintf_r+0x1fe>
 8014c9e:	89ab      	ldrh	r3, [r5, #12]
 8014ca0:	059a      	lsls	r2, r3, #22
 8014ca2:	d402      	bmi.n	8014caa <_vfiprintf_r+0x1fe>
 8014ca4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014ca6:	f7fe f997 	bl	8012fd8 <__retarget_lock_release_recursive>
 8014caa:	89ab      	ldrh	r3, [r5, #12]
 8014cac:	065b      	lsls	r3, r3, #25
 8014cae:	f53f af1f 	bmi.w	8014af0 <_vfiprintf_r+0x44>
 8014cb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014cb4:	e71e      	b.n	8014af4 <_vfiprintf_r+0x48>
 8014cb6:	ab03      	add	r3, sp, #12
 8014cb8:	9300      	str	r3, [sp, #0]
 8014cba:	462a      	mov	r2, r5
 8014cbc:	4b05      	ldr	r3, [pc, #20]	@ (8014cd4 <_vfiprintf_r+0x228>)
 8014cbe:	a904      	add	r1, sp, #16
 8014cc0:	4630      	mov	r0, r6
 8014cc2:	f7fd fec5 	bl	8012a50 <_printf_i>
 8014cc6:	e7e4      	b.n	8014c92 <_vfiprintf_r+0x1e6>
 8014cc8:	08015308 	.word	0x08015308
 8014ccc:	08015312 	.word	0x08015312
 8014cd0:	08012541 	.word	0x08012541
 8014cd4:	08014a89 	.word	0x08014a89
 8014cd8:	0801530e 	.word	0x0801530e

08014cdc <__swbuf_r>:
 8014cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cde:	460e      	mov	r6, r1
 8014ce0:	4614      	mov	r4, r2
 8014ce2:	4605      	mov	r5, r0
 8014ce4:	b118      	cbz	r0, 8014cee <__swbuf_r+0x12>
 8014ce6:	6a03      	ldr	r3, [r0, #32]
 8014ce8:	b90b      	cbnz	r3, 8014cee <__swbuf_r+0x12>
 8014cea:	f7fe f85d 	bl	8012da8 <__sinit>
 8014cee:	69a3      	ldr	r3, [r4, #24]
 8014cf0:	60a3      	str	r3, [r4, #8]
 8014cf2:	89a3      	ldrh	r3, [r4, #12]
 8014cf4:	071a      	lsls	r2, r3, #28
 8014cf6:	d501      	bpl.n	8014cfc <__swbuf_r+0x20>
 8014cf8:	6923      	ldr	r3, [r4, #16]
 8014cfa:	b943      	cbnz	r3, 8014d0e <__swbuf_r+0x32>
 8014cfc:	4621      	mov	r1, r4
 8014cfe:	4628      	mov	r0, r5
 8014d00:	f000 f82a 	bl	8014d58 <__swsetup_r>
 8014d04:	b118      	cbz	r0, 8014d0e <__swbuf_r+0x32>
 8014d06:	f04f 37ff 	mov.w	r7, #4294967295
 8014d0a:	4638      	mov	r0, r7
 8014d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d0e:	6823      	ldr	r3, [r4, #0]
 8014d10:	6922      	ldr	r2, [r4, #16]
 8014d12:	1a98      	subs	r0, r3, r2
 8014d14:	6963      	ldr	r3, [r4, #20]
 8014d16:	b2f6      	uxtb	r6, r6
 8014d18:	4283      	cmp	r3, r0
 8014d1a:	4637      	mov	r7, r6
 8014d1c:	dc05      	bgt.n	8014d2a <__swbuf_r+0x4e>
 8014d1e:	4621      	mov	r1, r4
 8014d20:	4628      	mov	r0, r5
 8014d22:	f7ff fd99 	bl	8014858 <_fflush_r>
 8014d26:	2800      	cmp	r0, #0
 8014d28:	d1ed      	bne.n	8014d06 <__swbuf_r+0x2a>
 8014d2a:	68a3      	ldr	r3, [r4, #8]
 8014d2c:	3b01      	subs	r3, #1
 8014d2e:	60a3      	str	r3, [r4, #8]
 8014d30:	6823      	ldr	r3, [r4, #0]
 8014d32:	1c5a      	adds	r2, r3, #1
 8014d34:	6022      	str	r2, [r4, #0]
 8014d36:	701e      	strb	r6, [r3, #0]
 8014d38:	6962      	ldr	r2, [r4, #20]
 8014d3a:	1c43      	adds	r3, r0, #1
 8014d3c:	429a      	cmp	r2, r3
 8014d3e:	d004      	beq.n	8014d4a <__swbuf_r+0x6e>
 8014d40:	89a3      	ldrh	r3, [r4, #12]
 8014d42:	07db      	lsls	r3, r3, #31
 8014d44:	d5e1      	bpl.n	8014d0a <__swbuf_r+0x2e>
 8014d46:	2e0a      	cmp	r6, #10
 8014d48:	d1df      	bne.n	8014d0a <__swbuf_r+0x2e>
 8014d4a:	4621      	mov	r1, r4
 8014d4c:	4628      	mov	r0, r5
 8014d4e:	f7ff fd83 	bl	8014858 <_fflush_r>
 8014d52:	2800      	cmp	r0, #0
 8014d54:	d0d9      	beq.n	8014d0a <__swbuf_r+0x2e>
 8014d56:	e7d6      	b.n	8014d06 <__swbuf_r+0x2a>

08014d58 <__swsetup_r>:
 8014d58:	b538      	push	{r3, r4, r5, lr}
 8014d5a:	4b29      	ldr	r3, [pc, #164]	@ (8014e00 <__swsetup_r+0xa8>)
 8014d5c:	4605      	mov	r5, r0
 8014d5e:	6818      	ldr	r0, [r3, #0]
 8014d60:	460c      	mov	r4, r1
 8014d62:	b118      	cbz	r0, 8014d6c <__swsetup_r+0x14>
 8014d64:	6a03      	ldr	r3, [r0, #32]
 8014d66:	b90b      	cbnz	r3, 8014d6c <__swsetup_r+0x14>
 8014d68:	f7fe f81e 	bl	8012da8 <__sinit>
 8014d6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d70:	0719      	lsls	r1, r3, #28
 8014d72:	d422      	bmi.n	8014dba <__swsetup_r+0x62>
 8014d74:	06da      	lsls	r2, r3, #27
 8014d76:	d407      	bmi.n	8014d88 <__swsetup_r+0x30>
 8014d78:	2209      	movs	r2, #9
 8014d7a:	602a      	str	r2, [r5, #0]
 8014d7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014d80:	81a3      	strh	r3, [r4, #12]
 8014d82:	f04f 30ff 	mov.w	r0, #4294967295
 8014d86:	e033      	b.n	8014df0 <__swsetup_r+0x98>
 8014d88:	0758      	lsls	r0, r3, #29
 8014d8a:	d512      	bpl.n	8014db2 <__swsetup_r+0x5a>
 8014d8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014d8e:	b141      	cbz	r1, 8014da2 <__swsetup_r+0x4a>
 8014d90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014d94:	4299      	cmp	r1, r3
 8014d96:	d002      	beq.n	8014d9e <__swsetup_r+0x46>
 8014d98:	4628      	mov	r0, r5
 8014d9a:	f7fe feff 	bl	8013b9c <_free_r>
 8014d9e:	2300      	movs	r3, #0
 8014da0:	6363      	str	r3, [r4, #52]	@ 0x34
 8014da2:	89a3      	ldrh	r3, [r4, #12]
 8014da4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014da8:	81a3      	strh	r3, [r4, #12]
 8014daa:	2300      	movs	r3, #0
 8014dac:	6063      	str	r3, [r4, #4]
 8014dae:	6923      	ldr	r3, [r4, #16]
 8014db0:	6023      	str	r3, [r4, #0]
 8014db2:	89a3      	ldrh	r3, [r4, #12]
 8014db4:	f043 0308 	orr.w	r3, r3, #8
 8014db8:	81a3      	strh	r3, [r4, #12]
 8014dba:	6923      	ldr	r3, [r4, #16]
 8014dbc:	b94b      	cbnz	r3, 8014dd2 <__swsetup_r+0x7a>
 8014dbe:	89a3      	ldrh	r3, [r4, #12]
 8014dc0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014dc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014dc8:	d003      	beq.n	8014dd2 <__swsetup_r+0x7a>
 8014dca:	4621      	mov	r1, r4
 8014dcc:	4628      	mov	r0, r5
 8014dce:	f000 f883 	bl	8014ed8 <__smakebuf_r>
 8014dd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014dd6:	f013 0201 	ands.w	r2, r3, #1
 8014dda:	d00a      	beq.n	8014df2 <__swsetup_r+0x9a>
 8014ddc:	2200      	movs	r2, #0
 8014dde:	60a2      	str	r2, [r4, #8]
 8014de0:	6962      	ldr	r2, [r4, #20]
 8014de2:	4252      	negs	r2, r2
 8014de4:	61a2      	str	r2, [r4, #24]
 8014de6:	6922      	ldr	r2, [r4, #16]
 8014de8:	b942      	cbnz	r2, 8014dfc <__swsetup_r+0xa4>
 8014dea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014dee:	d1c5      	bne.n	8014d7c <__swsetup_r+0x24>
 8014df0:	bd38      	pop	{r3, r4, r5, pc}
 8014df2:	0799      	lsls	r1, r3, #30
 8014df4:	bf58      	it	pl
 8014df6:	6962      	ldrpl	r2, [r4, #20]
 8014df8:	60a2      	str	r2, [r4, #8]
 8014dfa:	e7f4      	b.n	8014de6 <__swsetup_r+0x8e>
 8014dfc:	2000      	movs	r0, #0
 8014dfe:	e7f7      	b.n	8014df0 <__swsetup_r+0x98>
 8014e00:	2400012c 	.word	0x2400012c

08014e04 <_raise_r>:
 8014e04:	291f      	cmp	r1, #31
 8014e06:	b538      	push	{r3, r4, r5, lr}
 8014e08:	4605      	mov	r5, r0
 8014e0a:	460c      	mov	r4, r1
 8014e0c:	d904      	bls.n	8014e18 <_raise_r+0x14>
 8014e0e:	2316      	movs	r3, #22
 8014e10:	6003      	str	r3, [r0, #0]
 8014e12:	f04f 30ff 	mov.w	r0, #4294967295
 8014e16:	bd38      	pop	{r3, r4, r5, pc}
 8014e18:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014e1a:	b112      	cbz	r2, 8014e22 <_raise_r+0x1e>
 8014e1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014e20:	b94b      	cbnz	r3, 8014e36 <_raise_r+0x32>
 8014e22:	4628      	mov	r0, r5
 8014e24:	f000 f830 	bl	8014e88 <_getpid_r>
 8014e28:	4622      	mov	r2, r4
 8014e2a:	4601      	mov	r1, r0
 8014e2c:	4628      	mov	r0, r5
 8014e2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014e32:	f000 b817 	b.w	8014e64 <_kill_r>
 8014e36:	2b01      	cmp	r3, #1
 8014e38:	d00a      	beq.n	8014e50 <_raise_r+0x4c>
 8014e3a:	1c59      	adds	r1, r3, #1
 8014e3c:	d103      	bne.n	8014e46 <_raise_r+0x42>
 8014e3e:	2316      	movs	r3, #22
 8014e40:	6003      	str	r3, [r0, #0]
 8014e42:	2001      	movs	r0, #1
 8014e44:	e7e7      	b.n	8014e16 <_raise_r+0x12>
 8014e46:	2100      	movs	r1, #0
 8014e48:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014e4c:	4620      	mov	r0, r4
 8014e4e:	4798      	blx	r3
 8014e50:	2000      	movs	r0, #0
 8014e52:	e7e0      	b.n	8014e16 <_raise_r+0x12>

08014e54 <raise>:
 8014e54:	4b02      	ldr	r3, [pc, #8]	@ (8014e60 <raise+0xc>)
 8014e56:	4601      	mov	r1, r0
 8014e58:	6818      	ldr	r0, [r3, #0]
 8014e5a:	f7ff bfd3 	b.w	8014e04 <_raise_r>
 8014e5e:	bf00      	nop
 8014e60:	2400012c 	.word	0x2400012c

08014e64 <_kill_r>:
 8014e64:	b538      	push	{r3, r4, r5, lr}
 8014e66:	4d07      	ldr	r5, [pc, #28]	@ (8014e84 <_kill_r+0x20>)
 8014e68:	2300      	movs	r3, #0
 8014e6a:	4604      	mov	r4, r0
 8014e6c:	4608      	mov	r0, r1
 8014e6e:	4611      	mov	r1, r2
 8014e70:	602b      	str	r3, [r5, #0]
 8014e72:	f7ec fdad 	bl	80019d0 <_kill>
 8014e76:	1c43      	adds	r3, r0, #1
 8014e78:	d102      	bne.n	8014e80 <_kill_r+0x1c>
 8014e7a:	682b      	ldr	r3, [r5, #0]
 8014e7c:	b103      	cbz	r3, 8014e80 <_kill_r+0x1c>
 8014e7e:	6023      	str	r3, [r4, #0]
 8014e80:	bd38      	pop	{r3, r4, r5, pc}
 8014e82:	bf00      	nop
 8014e84:	24002768 	.word	0x24002768

08014e88 <_getpid_r>:
 8014e88:	f7ec bd9a 	b.w	80019c0 <_getpid>

08014e8c <__swhatbuf_r>:
 8014e8c:	b570      	push	{r4, r5, r6, lr}
 8014e8e:	460c      	mov	r4, r1
 8014e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e94:	2900      	cmp	r1, #0
 8014e96:	b096      	sub	sp, #88	@ 0x58
 8014e98:	4615      	mov	r5, r2
 8014e9a:	461e      	mov	r6, r3
 8014e9c:	da0d      	bge.n	8014eba <__swhatbuf_r+0x2e>
 8014e9e:	89a3      	ldrh	r3, [r4, #12]
 8014ea0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014ea4:	f04f 0100 	mov.w	r1, #0
 8014ea8:	bf14      	ite	ne
 8014eaa:	2340      	movne	r3, #64	@ 0x40
 8014eac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014eb0:	2000      	movs	r0, #0
 8014eb2:	6031      	str	r1, [r6, #0]
 8014eb4:	602b      	str	r3, [r5, #0]
 8014eb6:	b016      	add	sp, #88	@ 0x58
 8014eb8:	bd70      	pop	{r4, r5, r6, pc}
 8014eba:	466a      	mov	r2, sp
 8014ebc:	f000 f848 	bl	8014f50 <_fstat_r>
 8014ec0:	2800      	cmp	r0, #0
 8014ec2:	dbec      	blt.n	8014e9e <__swhatbuf_r+0x12>
 8014ec4:	9901      	ldr	r1, [sp, #4]
 8014ec6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014eca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014ece:	4259      	negs	r1, r3
 8014ed0:	4159      	adcs	r1, r3
 8014ed2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014ed6:	e7eb      	b.n	8014eb0 <__swhatbuf_r+0x24>

08014ed8 <__smakebuf_r>:
 8014ed8:	898b      	ldrh	r3, [r1, #12]
 8014eda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014edc:	079d      	lsls	r5, r3, #30
 8014ede:	4606      	mov	r6, r0
 8014ee0:	460c      	mov	r4, r1
 8014ee2:	d507      	bpl.n	8014ef4 <__smakebuf_r+0x1c>
 8014ee4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014ee8:	6023      	str	r3, [r4, #0]
 8014eea:	6123      	str	r3, [r4, #16]
 8014eec:	2301      	movs	r3, #1
 8014eee:	6163      	str	r3, [r4, #20]
 8014ef0:	b003      	add	sp, #12
 8014ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ef4:	ab01      	add	r3, sp, #4
 8014ef6:	466a      	mov	r2, sp
 8014ef8:	f7ff ffc8 	bl	8014e8c <__swhatbuf_r>
 8014efc:	9f00      	ldr	r7, [sp, #0]
 8014efe:	4605      	mov	r5, r0
 8014f00:	4639      	mov	r1, r7
 8014f02:	4630      	mov	r0, r6
 8014f04:	f7fe febe 	bl	8013c84 <_malloc_r>
 8014f08:	b948      	cbnz	r0, 8014f1e <__smakebuf_r+0x46>
 8014f0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f0e:	059a      	lsls	r2, r3, #22
 8014f10:	d4ee      	bmi.n	8014ef0 <__smakebuf_r+0x18>
 8014f12:	f023 0303 	bic.w	r3, r3, #3
 8014f16:	f043 0302 	orr.w	r3, r3, #2
 8014f1a:	81a3      	strh	r3, [r4, #12]
 8014f1c:	e7e2      	b.n	8014ee4 <__smakebuf_r+0xc>
 8014f1e:	89a3      	ldrh	r3, [r4, #12]
 8014f20:	6020      	str	r0, [r4, #0]
 8014f22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014f26:	81a3      	strh	r3, [r4, #12]
 8014f28:	9b01      	ldr	r3, [sp, #4]
 8014f2a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014f2e:	b15b      	cbz	r3, 8014f48 <__smakebuf_r+0x70>
 8014f30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014f34:	4630      	mov	r0, r6
 8014f36:	f000 f81d 	bl	8014f74 <_isatty_r>
 8014f3a:	b128      	cbz	r0, 8014f48 <__smakebuf_r+0x70>
 8014f3c:	89a3      	ldrh	r3, [r4, #12]
 8014f3e:	f023 0303 	bic.w	r3, r3, #3
 8014f42:	f043 0301 	orr.w	r3, r3, #1
 8014f46:	81a3      	strh	r3, [r4, #12]
 8014f48:	89a3      	ldrh	r3, [r4, #12]
 8014f4a:	431d      	orrs	r5, r3
 8014f4c:	81a5      	strh	r5, [r4, #12]
 8014f4e:	e7cf      	b.n	8014ef0 <__smakebuf_r+0x18>

08014f50 <_fstat_r>:
 8014f50:	b538      	push	{r3, r4, r5, lr}
 8014f52:	4d07      	ldr	r5, [pc, #28]	@ (8014f70 <_fstat_r+0x20>)
 8014f54:	2300      	movs	r3, #0
 8014f56:	4604      	mov	r4, r0
 8014f58:	4608      	mov	r0, r1
 8014f5a:	4611      	mov	r1, r2
 8014f5c:	602b      	str	r3, [r5, #0]
 8014f5e:	f7ec fd97 	bl	8001a90 <_fstat>
 8014f62:	1c43      	adds	r3, r0, #1
 8014f64:	d102      	bne.n	8014f6c <_fstat_r+0x1c>
 8014f66:	682b      	ldr	r3, [r5, #0]
 8014f68:	b103      	cbz	r3, 8014f6c <_fstat_r+0x1c>
 8014f6a:	6023      	str	r3, [r4, #0]
 8014f6c:	bd38      	pop	{r3, r4, r5, pc}
 8014f6e:	bf00      	nop
 8014f70:	24002768 	.word	0x24002768

08014f74 <_isatty_r>:
 8014f74:	b538      	push	{r3, r4, r5, lr}
 8014f76:	4d06      	ldr	r5, [pc, #24]	@ (8014f90 <_isatty_r+0x1c>)
 8014f78:	2300      	movs	r3, #0
 8014f7a:	4604      	mov	r4, r0
 8014f7c:	4608      	mov	r0, r1
 8014f7e:	602b      	str	r3, [r5, #0]
 8014f80:	f7ec fd96 	bl	8001ab0 <_isatty>
 8014f84:	1c43      	adds	r3, r0, #1
 8014f86:	d102      	bne.n	8014f8e <_isatty_r+0x1a>
 8014f88:	682b      	ldr	r3, [r5, #0]
 8014f8a:	b103      	cbz	r3, 8014f8e <_isatty_r+0x1a>
 8014f8c:	6023      	str	r3, [r4, #0]
 8014f8e:	bd38      	pop	{r3, r4, r5, pc}
 8014f90:	24002768 	.word	0x24002768

08014f94 <lrintf>:
 8014f94:	ee10 3a10 	vmov	r3, s0
 8014f98:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014f9c:	f1a2 007f 	sub.w	r0, r2, #127	@ 0x7f
 8014fa0:	281e      	cmp	r0, #30
 8014fa2:	b082      	sub	sp, #8
 8014fa4:	dc2f      	bgt.n	8015006 <lrintf+0x72>
 8014fa6:	1c41      	adds	r1, r0, #1
 8014fa8:	da02      	bge.n	8014fb0 <lrintf+0x1c>
 8014faa:	2000      	movs	r0, #0
 8014fac:	b002      	add	sp, #8
 8014fae:	4770      	bx	lr
 8014fb0:	2816      	cmp	r0, #22
 8014fb2:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 8014fb6:	dd0a      	ble.n	8014fce <lrintf+0x3a>
 8014fb8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8014fbc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8014fc0:	3a96      	subs	r2, #150	@ 0x96
 8014fc2:	fa03 f002 	lsl.w	r0, r3, r2
 8014fc6:	2900      	cmp	r1, #0
 8014fc8:	d0f0      	beq.n	8014fac <lrintf+0x18>
 8014fca:	4240      	negs	r0, r0
 8014fcc:	e7ee      	b.n	8014fac <lrintf+0x18>
 8014fce:	4b10      	ldr	r3, [pc, #64]	@ (8015010 <lrintf+0x7c>)
 8014fd0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8014fd4:	ed93 7a00 	vldr	s14, [r3]
 8014fd8:	ee37 0a00 	vadd.f32	s0, s14, s0
 8014fdc:	ed8d 0a01 	vstr	s0, [sp, #4]
 8014fe0:	eddd 7a01 	vldr	s15, [sp, #4]
 8014fe4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014fe8:	ee17 3a90 	vmov	r3, s15
 8014fec:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8014ff0:	d0db      	beq.n	8014faa <lrintf+0x16>
 8014ff2:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8014ff6:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8014ffa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8014ffe:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8015002:	40d8      	lsrs	r0, r3
 8015004:	e7df      	b.n	8014fc6 <lrintf+0x32>
 8015006:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801500a:	ee17 0a90 	vmov	r0, s15
 801500e:	e7cd      	b.n	8014fac <lrintf+0x18>
 8015010:	08015460 	.word	0x08015460

08015014 <_init>:
 8015014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015016:	bf00      	nop
 8015018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801501a:	bc08      	pop	{r3}
 801501c:	469e      	mov	lr, r3
 801501e:	4770      	bx	lr

08015020 <_fini>:
 8015020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015022:	bf00      	nop
 8015024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015026:	bc08      	pop	{r3}
 8015028:	469e      	mov	lr, r3
 801502a:	4770      	bx	lr
