
Rx_M4_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014cf4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  08014f98  08014f98  00015f98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080153b8  080153b8  000172f0  2**0
                  CONTENTS
  4 .ARM          00000008  080153b8  080153b8  000163b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080153c0  080153c0  000172f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080153c0  080153c0  000163c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080153c4  080153c4  000163c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002f0  24000000  080153c8  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002470  240002f0  080156b8  000172f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24002760  080156b8  00017760  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000172f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029b38  00000000  00000000  0001731e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005660  00000000  00000000  00040e56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f60  00000000  00000000  000464b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001817  00000000  00000000  00048418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00042939  00000000  00000000  00049c2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d992  00000000  00000000  0008c568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a2d37  00000000  00000000  000b9efa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0025cc31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009424  00000000  00000000  0025cc74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  00266098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002f0 	.word	0x240002f0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014f7c 	.word	0x08014f7c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002f4 	.word	0x240002f4
 80002dc:	08014f7c 	.word	0x08014f7c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3d      	ldr	r3, [pc, #244]	@ (800077c <SystemInit+0xfc>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800068a:	4a3c      	ldr	r2, [pc, #240]	@ (800077c <SystemInit+0xfc>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b39      	ldr	r3, [pc, #228]	@ (800077c <SystemInit+0xfc>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a38      	ldr	r2, [pc, #224]	@ (800077c <SystemInit+0xfc>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b37      	ldr	r3, [pc, #220]	@ (8000780 <SystemInit+0x100>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b34      	ldr	r3, [pc, #208]	@ (8000780 <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a32      	ldr	r2, [pc, #200]	@ (8000780 <SystemInit+0x100>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b31      	ldr	r3, [pc, #196]	@ (8000784 <SystemInit+0x104>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a30      	ldr	r2, [pc, #192]	@ (8000784 <SystemInit+0x104>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000784 <SystemInit+0x104>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000784 <SystemInit+0x104>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492c      	ldr	r1, [pc, #176]	@ (8000784 <SystemInit+0x104>)
 80006d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000788 <SystemInit+0x108>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <SystemInit+0x100>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 0308 	and.w	r3, r3, #8
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d007      	beq.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a24      	ldr	r2, [pc, #144]	@ (8000780 <SystemInit+0x100>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <SystemInit+0x104>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <SystemInit+0x104>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <SystemInit+0x104>)
 800070a:	4a20      	ldr	r2, [pc, #128]	@ (800078c <SystemInit+0x10c>)
 800070c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <SystemInit+0x104>)
 8000710:	4a1f      	ldr	r2, [pc, #124]	@ (8000790 <SystemInit+0x110>)
 8000712:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <SystemInit+0x104>)
 8000716:	4a1f      	ldr	r2, [pc, #124]	@ (8000794 <SystemInit+0x114>)
 8000718:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <SystemInit+0x104>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <SystemInit+0x104>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	@ (8000794 <SystemInit+0x114>)
 8000724:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <SystemInit+0x104>)
 800072e:	4a19      	ldr	r2, [pc, #100]	@ (8000794 <SystemInit+0x114>)
 8000730:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <SystemInit+0x104>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	@ (8000784 <SystemInit+0x104>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <SystemInit+0x104>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <SystemInit+0x118>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800074e:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <SystemInit+0x118>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000754:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <SystemInit+0x11c>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <SystemInit+0x120>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <SystemInit+0x124>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <SystemInit+0x128>)
 800076c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000770:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	52002000 	.word	0x52002000
 8000784:	58024400 	.word	0x58024400
 8000788:	eaf6ed7f 	.word	0xeaf6ed7f
 800078c:	02020200 	.word	0x02020200
 8000790:	01ff0000 	.word	0x01ff0000
 8000794:	01010280 	.word	0x01010280
 8000798:	580000c0 	.word	0x580000c0
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	@ 0x28
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007be:	463b      	mov	r3, r7
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
 80007cc:	615a      	str	r2, [r3, #20]
 80007ce:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007d0:	4b30      	ldr	r3, [pc, #192]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007d2:	4a31      	ldr	r2, [pc, #196]	@ (8000898 <MX_ADC1_Init+0xec>)
 80007d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80007d6:	4b2f      	ldr	r3, [pc, #188]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007d8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80007dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80007de:	4b2d      	ldr	r3, [pc, #180]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007e4:	4b2b      	ldr	r3, [pc, #172]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ea:	4b2a      	ldr	r3, [pc, #168]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007ec:	2204      	movs	r2, #4
 80007ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007f0:	4b28      	ldr	r3, [pc, #160]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007f6:	4b27      	ldr	r3, [pc, #156]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80007fc:	4b25      	ldr	r3, [pc, #148]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007fe:	2201      	movs	r2, #1
 8000800:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000802:	4b24      	ldr	r3, [pc, #144]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000804:	2200      	movs	r2, #0
 8000806:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000808:	4b22      	ldr	r3, [pc, #136]	@ (8000894 <MX_ADC1_Init+0xe8>)
 800080a:	2200      	movs	r2, #0
 800080c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800080e:	4b21      	ldr	r3, [pc, #132]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000810:	2200      	movs	r2, #0
 8000812:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000814:	4b1f      	ldr	r3, [pc, #124]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000816:	2200      	movs	r2, #0
 8000818:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800081a:	4b1e      	ldr	r3, [pc, #120]	@ (8000894 <MX_ADC1_Init+0xe8>)
 800081c:	2200      	movs	r2, #0
 800081e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000820:	4b1c      	ldr	r3, [pc, #112]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000822:	2200      	movs	r2, #0
 8000824:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000826:	4b1b      	ldr	r3, [pc, #108]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000828:	2200      	movs	r2, #0
 800082a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800082e:	4819      	ldr	r0, [pc, #100]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000830:	f002 fb1c 	bl	8002e6c <HAL_ADC_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800083a:	f000 fd7a 	bl	8001332 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	4812      	ldr	r0, [pc, #72]	@ (8000894 <MX_ADC1_Init+0xe8>)
 800084a:	f003 fb95 	bl	8003f78 <HAL_ADCEx_MultiModeConfigChannel>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000854:	f000 fd6d 	bl	8001332 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000858:	4b10      	ldr	r3, [pc, #64]	@ (800089c <MX_ADC1_Init+0xf0>)
 800085a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800085c:	2306      	movs	r3, #6
 800085e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000860:	2300      	movs	r3, #0
 8000862:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000864:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000868:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800086a:	2304      	movs	r3, #4
 800086c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000872:	2300      	movs	r3, #0
 8000874:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000876:	463b      	mov	r3, r7
 8000878:	4619      	mov	r1, r3
 800087a:	4806      	ldr	r0, [pc, #24]	@ (8000894 <MX_ADC1_Init+0xe8>)
 800087c:	f002 fe64 	bl	8003548 <HAL_ADC_ConfigChannel>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000886:	f000 fd54 	bl	8001332 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	3728      	adds	r7, #40	@ 0x28
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	2400030c 	.word	0x2400030c
 8000898:	40022000 	.word	0x40022000
 800089c:	2a000400 	.word	0x2a000400

080008a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	@ 0x28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a18      	ldr	r2, [pc, #96]	@ (8000920 <HAL_ADC_MspInit+0x80>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d129      	bne.n	8000916 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80008c2:	4b18      	ldr	r3, [pc, #96]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 80008c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008c8:	4a16      	ldr	r2, [pc, #88]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 80008ca:	f043 0320 	orr.w	r3, r3, #32
 80008ce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80008d2:	4b14      	ldr	r3, [pc, #80]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 80008d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008d8:	f003 0320 	and.w	r3, r3, #32
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e0:	4b10      	ldr	r3, [pc, #64]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 80008e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e6:	4a0f      	ldr	r2, [pc, #60]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 80008e8:	f043 0304 	orr.w	r3, r3, #4
 80008ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 80008f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f6:	f003 0304 	and.w	r3, r3, #4
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008fe:	2301      	movs	r3, #1
 8000900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000902:	2303      	movs	r3, #3
 8000904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	4805      	ldr	r0, [pc, #20]	@ (8000928 <HAL_ADC_MspInit+0x88>)
 8000912:	f005 fe7b 	bl	800660c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000916:	bf00      	nop
 8000918:	3728      	adds	r7, #40	@ 0x28
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40022000 	.word	0x40022000
 8000924:	58024400 	.word	0x58024400
 8000928:	58020800 	.word	0x58020800

0800092c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000932:	4b19      	ldr	r3, [pc, #100]	@ (8000998 <MX_DMA_Init+0x6c>)
 8000934:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000938:	4a17      	ldr	r2, [pc, #92]	@ (8000998 <MX_DMA_Init+0x6c>)
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000942:	4b15      	ldr	r3, [pc, #84]	@ (8000998 <MX_DMA_Init+0x6c>)
 8000944:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000948:	f003 0301 	and.w	r3, r3, #1
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000950:	2200      	movs	r2, #0
 8000952:	2100      	movs	r1, #0
 8000954:	200c      	movs	r0, #12
 8000956:	f003 fcc8 	bl	80042ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800095a:	200c      	movs	r0, #12
 800095c:	f003 fcdf 	bl	800431e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000960:	2200      	movs	r2, #0
 8000962:	2100      	movs	r1, #0
 8000964:	200e      	movs	r0, #14
 8000966:	f003 fcc0 	bl	80042ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800096a:	200e      	movs	r0, #14
 800096c:	f003 fcd7 	bl	800431e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000970:	2200      	movs	r2, #0
 8000972:	2100      	movs	r1, #0
 8000974:	200f      	movs	r0, #15
 8000976:	f003 fcb8 	bl	80042ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800097a:	200f      	movs	r0, #15
 800097c:	f003 fccf 	bl	800431e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000980:	2200      	movs	r2, #0
 8000982:	2100      	movs	r1, #0
 8000984:	2010      	movs	r0, #16
 8000986:	f003 fcb0 	bl	80042ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800098a:	2010      	movs	r0, #16
 800098c:	f003 fcc7 	bl	800431e <HAL_NVIC_EnableIRQ>

}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	58024400 	.word	0x58024400

0800099c <dshot_init>:
static void dshot_enable_dma_request();


/* Functions */
void dshot_init(dshot_type_e dshot_type)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
	dshot_set_timer(dshot_type);
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f000 f833 	bl	8000a14 <dshot_set_timer>
	dshot_put_tc_callback_function();
 80009ae:	f000 f8d3 	bl	8000b58 <dshot_put_tc_callback_function>
	dshot_start_pwm();
 80009b2:	f000 f8ef 	bl	8000b94 <dshot_start_pwm>
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <dshot_write>:

void dshot_write(uint16_t* motor_value)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b082      	sub	sp, #8
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer_all(motor_value);
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f000 f962 	bl	8000c90 <dshot_prepare_dmabuffer_all>
	dshot_dma_start();
 80009cc:	f000 f98c 	bl	8000ce8 <dshot_dma_start>
	dshot_enable_dma_request();
 80009d0:	f000 f9c2 	bl	8000d58 <dshot_enable_dma_request>
}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <dshot_choose_type>:


/* Static functions */
static uint32_t dshot_choose_type(dshot_type_e dshot_type)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
	switch (dshot_type)
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d003      	beq.n	80009f4 <dshot_choose_type+0x18>
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	d103      	bne.n	80009f8 <dshot_choose_type+0x1c>
	{
		case(DSHOT600):
				return DSHOT600_HZ;
 80009f0:	4b05      	ldr	r3, [pc, #20]	@ (8000a08 <dshot_choose_type+0x2c>)
 80009f2:	e002      	b.n	80009fa <dshot_choose_type+0x1e>

		case(DSHOT300):
				return DSHOT300_HZ;
 80009f4:	4b05      	ldr	r3, [pc, #20]	@ (8000a0c <dshot_choose_type+0x30>)
 80009f6:	e000      	b.n	80009fa <dshot_choose_type+0x1e>

		default:
		case(DSHOT150):
				return DSHOT150_HZ;
 80009f8:	4b05      	ldr	r3, [pc, #20]	@ (8000a10 <dshot_choose_type+0x34>)
	}
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	00b71b00 	.word	0x00b71b00
 8000a0c:	005b8d80 	.word	0x005b8d80
 8000a10:	002dc6c0 	.word	0x002dc6c0

08000a14 <dshot_set_timer>:

static void dshot_set_timer(dshot_type_e dshot_type)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	ed2d 8b02 	vpush	{d8}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
	uint16_t dshot_prescaler;
	uint32_t timer_clock = TIMER_CLOCK; // all timer clock is same as SystemCoreClock in stm32f411
 8000a22:	4b27      	ldr	r3, [pc, #156]	@ (8000ac0 <dshot_set_timer+0xac>)
 8000a24:	60fb      	str	r3, [r7, #12]

	// Calculate prescaler by dshot type
	dshot_prescaler = lrintf((float) timer_clock / dshot_choose_type(dshot_type) + 0.01f) - 1;
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	ee07 3a90 	vmov	s15, r3
 8000a2c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff ffd2 	bl	80009dc <dshot_choose_type>
 8000a38:	ee07 0a90 	vmov	s15, r0
 8000a3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a40:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000a44:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000ac4 <dshot_set_timer+0xb0>
 8000a48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a4c:	eeb0 0a67 	vmov.f32	s0, s15
 8000a50:	f014 fa54 	bl	8014efc <lrintf>
 8000a54:	4603      	mov	r3, r0
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	817b      	strh	r3, [r7, #10]

	// motor1
	__HAL_TIM_SET_PRESCALER(MOTOR_1_TIM, dshot_prescaler);
 8000a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac8 <dshot_set_timer+0xb4>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	897a      	ldrh	r2, [r7, #10]
 8000a62:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_1_TIM, MOTOR_BITLENGTH);
 8000a64:	4b18      	ldr	r3, [pc, #96]	@ (8000ac8 <dshot_set_timer+0xb4>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2214      	movs	r2, #20
 8000a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a6c:	4b16      	ldr	r3, [pc, #88]	@ (8000ac8 <dshot_set_timer+0xb4>)
 8000a6e:	2214      	movs	r2, #20
 8000a70:	60da      	str	r2, [r3, #12]

	// motor2
	__HAL_TIM_SET_PRESCALER(MOTOR_2_TIM, dshot_prescaler);
 8000a72:	4b16      	ldr	r3, [pc, #88]	@ (8000acc <dshot_set_timer+0xb8>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	897a      	ldrh	r2, [r7, #10]
 8000a78:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_2_TIM, MOTOR_BITLENGTH);
 8000a7a:	4b14      	ldr	r3, [pc, #80]	@ (8000acc <dshot_set_timer+0xb8>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2214      	movs	r2, #20
 8000a80:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a82:	4b12      	ldr	r3, [pc, #72]	@ (8000acc <dshot_set_timer+0xb8>)
 8000a84:	2214      	movs	r2, #20
 8000a86:	60da      	str	r2, [r3, #12]

	// motor3
	__HAL_TIM_SET_PRESCALER(MOTOR_3_TIM, dshot_prescaler);
 8000a88:	4b10      	ldr	r3, [pc, #64]	@ (8000acc <dshot_set_timer+0xb8>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	897a      	ldrh	r2, [r7, #10]
 8000a8e:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_3_TIM, MOTOR_BITLENGTH);
 8000a90:	4b0e      	ldr	r3, [pc, #56]	@ (8000acc <dshot_set_timer+0xb8>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2214      	movs	r2, #20
 8000a96:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a98:	4b0c      	ldr	r3, [pc, #48]	@ (8000acc <dshot_set_timer+0xb8>)
 8000a9a:	2214      	movs	r2, #20
 8000a9c:	60da      	str	r2, [r3, #12]

	// motor4
	__HAL_TIM_SET_PRESCALER(MOTOR_4_TIM, dshot_prescaler);
 8000a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac8 <dshot_set_timer+0xb4>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	897a      	ldrh	r2, [r7, #10]
 8000aa4:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_4_TIM, MOTOR_BITLENGTH);
 8000aa6:	4b08      	ldr	r3, [pc, #32]	@ (8000ac8 <dshot_set_timer+0xb4>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2214      	movs	r2, #20
 8000aac:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000aae:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <dshot_set_timer+0xb4>)
 8000ab0:	2214      	movs	r2, #20
 8000ab2:	60da      	str	r2, [r3, #12]
}
 8000ab4:	bf00      	nop
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	ecbd 8b02 	vpop	{d8}
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	0bebc200 	.word	0x0bebc200
 8000ac4:	3c23d70a 	.word	0x3c23d70a
 8000ac8:	240006c8 	.word	0x240006c8
 8000acc:	240005e4 	.word	0x240005e4

08000ad0 <dshot_dma_tc_callback>:

// __HAL_TIM_DISABLE_DMA is needed to eliminate the delay between different dshot signals
// I don't know why :(
static void dshot_dma_tc_callback(DMA_HandleTypeDef *hdma)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000adc:	60fb      	str	r3, [r7, #12]

	if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d108      	bne.n	8000afa <dshot_dma_tc_callback+0x2a>
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	68da      	ldr	r2, [r3, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000af6:	60da      	str	r2, [r3, #12]
	}
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
	}
}
 8000af8:	e028      	b.n	8000b4c <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC2])
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d108      	bne.n	8000b16 <dshot_dma_tc_callback+0x46>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	68da      	ldr	r2, [r3, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000b12:	60da      	str	r2, [r3, #12]
}
 8000b14:	e01a      	b.n	8000b4c <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC3])
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d108      	bne.n	8000b32 <dshot_dma_tc_callback+0x62>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	68da      	ldr	r2, [r3, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000b2e:	60da      	str	r2, [r3, #12]
}
 8000b30:	e00c      	b.n	8000b4c <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d107      	bne.n	8000b4c <dshot_dma_tc_callback+0x7c>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	68da      	ldr	r2, [r3, #12]
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000b4a:	60da      	str	r2, [r3, #12]
}
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <dshot_put_tc_callback_function>:

static void dshot_put_tc_callback_function()
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
	// TIM_DMA_ID_CCx depends on timer channel
	MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = dshot_dma_tc_callback;
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b88 <dshot_put_tc_callback_function+0x30>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b60:	4a0a      	ldr	r2, [pc, #40]	@ (8000b8c <dshot_put_tc_callback_function+0x34>)
 8000b62:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = dshot_dma_tc_callback;
 8000b64:	4b0a      	ldr	r3, [pc, #40]	@ (8000b90 <dshot_put_tc_callback_function+0x38>)
 8000b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b68:	4a08      	ldr	r2, [pc, #32]	@ (8000b8c <dshot_put_tc_callback_function+0x34>)
 8000b6a:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dshot_dma_tc_callback;
 8000b6c:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <dshot_put_tc_callback_function+0x38>)
 8000b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b70:	4a06      	ldr	r2, [pc, #24]	@ (8000b8c <dshot_put_tc_callback_function+0x34>)
 8000b72:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = dshot_dma_tc_callback;
 8000b74:	4b04      	ldr	r3, [pc, #16]	@ (8000b88 <dshot_put_tc_callback_function+0x30>)
 8000b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b78:	4a04      	ldr	r2, [pc, #16]	@ (8000b8c <dshot_put_tc_callback_function+0x34>)
 8000b7a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	240006c8 	.word	0x240006c8
 8000b8c:	08000ad1 	.word	0x08000ad1
 8000b90:	240005e4 	.word	0x240005e4

08000b94 <dshot_start_pwm>:

static void dshot_start_pwm()
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	// Start the timer channel now.
    // Enabling/disabling DMA request can restart a new cycle without PWM start/stop.
  	HAL_TIM_PWM_Start(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL);
 8000b98:	210c      	movs	r1, #12
 8000b9a:	4808      	ldr	r0, [pc, #32]	@ (8000bbc <dshot_start_pwm+0x28>)
 8000b9c:	f00b f85c 	bl	800bc58 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL);
 8000ba0:	2108      	movs	r1, #8
 8000ba2:	4807      	ldr	r0, [pc, #28]	@ (8000bc0 <dshot_start_pwm+0x2c>)
 8000ba4:	f00b f858 	bl	800bc58 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL);
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <dshot_start_pwm+0x2c>)
 8000bac:	f00b f854 	bl	800bc58 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL);
 8000bb0:	2104      	movs	r1, #4
 8000bb2:	4802      	ldr	r0, [pc, #8]	@ (8000bbc <dshot_start_pwm+0x28>)
 8000bb4:	f00b f850 	bl	800bc58 <HAL_TIM_PWM_Start>
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	240006c8 	.word	0x240006c8
 8000bc0:	240005e4 	.word	0x240005e4

08000bc4 <dshot_prepare_packet>:

static uint16_t dshot_prepare_packet(uint16_t value)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b087      	sub	sp, #28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	80fb      	strh	r3, [r7, #6]
	uint16_t packet;
	bool dshot_telemetry = false;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	72fb      	strb	r3, [r7, #11]

	packet = (value << 1) | (dshot_telemetry ? 1 : 0);
 8000bd2:	88fb      	ldrh	r3, [r7, #6]
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	b21a      	sxth	r2, r3
 8000bd8:	7afb      	ldrb	r3, [r7, #11]
 8000bda:	b21b      	sxth	r3, r3
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	b21b      	sxth	r3, r3
 8000be0:	813b      	strh	r3, [r7, #8]

	// compute checksum
	unsigned csum = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
	unsigned csum_data = packet;
 8000be6:	893b      	ldrh	r3, [r7, #8]
 8000be8:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < 3; i++)
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	e009      	b.n	8000c04 <dshot_prepare_packet+0x40>
	{
        csum ^=  csum_data; // xor data by nibbles
 8000bf0:	697a      	ldr	r2, [r7, #20]
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	4053      	eors	r3, r2
 8000bf6:	617b      	str	r3, [r7, #20]
        csum_data >>= 4;
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	091b      	lsrs	r3, r3, #4
 8000bfc:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 3; i++)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	3301      	adds	r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	ddf2      	ble.n	8000bf0 <dshot_prepare_packet+0x2c>
	}

	csum &= 0xf;
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	f003 030f 	and.w	r3, r3, #15
 8000c10:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 8000c12:	893b      	ldrh	r3, [r7, #8]
 8000c14:	011b      	lsls	r3, r3, #4
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	813b      	strh	r3, [r7, #8]

	return packet;
 8000c20:	893b      	ldrh	r3, [r7, #8]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	371c      	adds	r7, #28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <dshot_prepare_dmabuffer>:

// Convert 16 bits packet to 16 pwm signal
static void dshot_prepare_dmabuffer(uint32_t* motor_dmabuffer, uint16_t value)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b084      	sub	sp, #16
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
 8000c36:	460b      	mov	r3, r1
 8000c38:	807b      	strh	r3, [r7, #2]
	uint16_t packet;
	packet = dshot_prepare_packet(value);
 8000c3a:	887b      	ldrh	r3, [r7, #2]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ffc1 	bl	8000bc4 <dshot_prepare_packet>
 8000c42:	4603      	mov	r3, r0
 8000c44:	81fb      	strh	r3, [r7, #14]

	for(int i = 0; i < 16; i++)
 8000c46:	2300      	movs	r3, #0
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	e011      	b.n	8000c70 <dshot_prepare_dmabuffer+0x42>
	{
		motor_dmabuffer[i] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;
 8000c4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	da01      	bge.n	8000c58 <dshot_prepare_dmabuffer+0x2a>
 8000c54:	220e      	movs	r2, #14
 8000c56:	e000      	b.n	8000c5a <dshot_prepare_dmabuffer+0x2c>
 8000c58:	2207      	movs	r2, #7
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	440b      	add	r3, r1
 8000c62:	601a      	str	r2, [r3, #0]
		packet <<= 1;
 8000c64:	89fb      	ldrh	r3, [r7, #14]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < 16; i++)
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	2b0f      	cmp	r3, #15
 8000c74:	ddea      	ble.n	8000c4c <dshot_prepare_dmabuffer+0x1e>
	}

	motor_dmabuffer[16] = 0;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	3340      	adds	r3, #64	@ 0x40
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
	motor_dmabuffer[17] = 0;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	3344      	adds	r3, #68	@ 0x44
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
}
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <dshot_prepare_dmabuffer_all>:

static void dshot_prepare_dmabuffer_all(uint16_t* motor_value)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer(motor1_dmabuffer, motor_value[0]);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	480e      	ldr	r0, [pc, #56]	@ (8000cd8 <dshot_prepare_dmabuffer_all+0x48>)
 8000ca0:	f7ff ffc5 	bl	8000c2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor2_dmabuffer, motor_value[1]);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3302      	adds	r3, #2
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	4619      	mov	r1, r3
 8000cac:	480b      	ldr	r0, [pc, #44]	@ (8000cdc <dshot_prepare_dmabuffer_all+0x4c>)
 8000cae:	f7ff ffbe 	bl	8000c2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor3_dmabuffer, motor_value[2]);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	3304      	adds	r3, #4
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4809      	ldr	r0, [pc, #36]	@ (8000ce0 <dshot_prepare_dmabuffer_all+0x50>)
 8000cbc:	f7ff ffb7 	bl	8000c2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor4_dmabuffer, motor_value[3]);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3306      	adds	r3, #6
 8000cc4:	881b      	ldrh	r3, [r3, #0]
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4806      	ldr	r0, [pc, #24]	@ (8000ce4 <dshot_prepare_dmabuffer_all+0x54>)
 8000cca:	f7ff ffb0 	bl	8000c2e <dshot_prepare_dmabuffer>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	24000370 	.word	0x24000370
 8000cdc:	240003b8 	.word	0x240003b8
 8000ce0:	24000400 	.word	0x24000400
 8000ce4:	24000448 	.word	0x24000448

08000ce8 <dshot_dma_start>:

static void dshot_dma_start()
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
	HAL_DMA_Start_IT(MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4], (uint32_t)motor1_dmabuffer, (uint32_t)&MOTOR_1_TIM->Instance->CCR4, DSHOT_DMA_BUFFER_SIZE);
 8000cec:	4b14      	ldr	r3, [pc, #80]	@ (8000d40 <dshot_dma_start+0x58>)
 8000cee:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000cf0:	4914      	ldr	r1, [pc, #80]	@ (8000d44 <dshot_dma_start+0x5c>)
 8000cf2:	4b13      	ldr	r3, [pc, #76]	@ (8000d40 <dshot_dma_start+0x58>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	3340      	adds	r3, #64	@ 0x40
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	2312      	movs	r3, #18
 8000cfc:	f003 fe9a 	bl	8004a34 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3], (uint32_t)motor2_dmabuffer, (uint32_t)&MOTOR_2_TIM->Instance->CCR3, DSHOT_DMA_BUFFER_SIZE);
 8000d00:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <dshot_dma_start+0x60>)
 8000d02:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8000d04:	4911      	ldr	r1, [pc, #68]	@ (8000d4c <dshot_dma_start+0x64>)
 8000d06:	4b10      	ldr	r3, [pc, #64]	@ (8000d48 <dshot_dma_start+0x60>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	333c      	adds	r3, #60	@ 0x3c
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	2312      	movs	r3, #18
 8000d10:	f003 fe90 	bl	8004a34 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1], (uint32_t)motor3_dmabuffer, (uint32_t)&MOTOR_3_TIM->Instance->CCR1, DSHOT_DMA_BUFFER_SIZE);
 8000d14:	4b0c      	ldr	r3, [pc, #48]	@ (8000d48 <dshot_dma_start+0x60>)
 8000d16:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8000d18:	490d      	ldr	r1, [pc, #52]	@ (8000d50 <dshot_dma_start+0x68>)
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d48 <dshot_dma_start+0x60>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	3334      	adds	r3, #52	@ 0x34
 8000d20:	461a      	mov	r2, r3
 8000d22:	2312      	movs	r3, #18
 8000d24:	f003 fe86 	bl	8004a34 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2], (uint32_t)motor4_dmabuffer, (uint32_t)&MOTOR_4_TIM->Instance->CCR2, DSHOT_DMA_BUFFER_SIZE);
 8000d28:	4b05      	ldr	r3, [pc, #20]	@ (8000d40 <dshot_dma_start+0x58>)
 8000d2a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000d2c:	4909      	ldr	r1, [pc, #36]	@ (8000d54 <dshot_dma_start+0x6c>)
 8000d2e:	4b04      	ldr	r3, [pc, #16]	@ (8000d40 <dshot_dma_start+0x58>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	3338      	adds	r3, #56	@ 0x38
 8000d34:	461a      	mov	r2, r3
 8000d36:	2312      	movs	r3, #18
 8000d38:	f003 fe7c 	bl	8004a34 <HAL_DMA_Start_IT>
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	240006c8 	.word	0x240006c8
 8000d44:	24000370 	.word	0x24000370
 8000d48:	240005e4 	.word	0x240005e4
 8000d4c:	240003b8 	.word	0x240003b8
 8000d50:	24000400 	.word	0x24000400
 8000d54:	24000448 	.word	0x24000448

08000d58 <dshot_enable_dma_request>:

static void dshot_enable_dma_request()
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE_DMA(MOTOR_1_TIM, TIM_DMA_CC4);
 8000d5c:	4b12      	ldr	r3, [pc, #72]	@ (8000da8 <dshot_enable_dma_request+0x50>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	68da      	ldr	r2, [r3, #12]
 8000d62:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <dshot_enable_dma_request+0x50>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000d6a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_2_TIM, TIM_DMA_CC3);
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dac <dshot_enable_dma_request+0x54>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	68da      	ldr	r2, [r3, #12]
 8000d72:	4b0e      	ldr	r3, [pc, #56]	@ (8000dac <dshot_enable_dma_request+0x54>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000d7a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_3_TIM, TIM_DMA_CC1);
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dac <dshot_enable_dma_request+0x54>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	68da      	ldr	r2, [r3, #12]
 8000d82:	4b0a      	ldr	r3, [pc, #40]	@ (8000dac <dshot_enable_dma_request+0x54>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000d8a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_4_TIM, TIM_DMA_CC2);
 8000d8c:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <dshot_enable_dma_request+0x50>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	68da      	ldr	r2, [r3, #12]
 8000d92:	4b05      	ldr	r3, [pc, #20]	@ (8000da8 <dshot_enable_dma_request+0x50>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000d9a:	60da      	str	r2, [r3, #12]
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	240006c8 	.word	0x240006c8
 8000dac:	240005e4 	.word	0x240005e4

08000db0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b087      	sub	sp, #28
 8000db4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db6:	4b28      	ldr	r3, [pc, #160]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dbc:	4a26      	ldr	r2, [pc, #152]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000dbe:	f043 0304 	orr.w	r3, r3, #4
 8000dc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dc6:	4b24      	ldr	r3, [pc, #144]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dcc:	f003 0304 	and.w	r3, r3, #4
 8000dd0:	617b      	str	r3, [r7, #20]
 8000dd2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd4:	4b20      	ldr	r3, [pc, #128]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dda:	4a1f      	ldr	r2, [pc, #124]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000de4:	4b1c      	ldr	r3, [pc, #112]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000df2:	4b19      	ldr	r3, [pc, #100]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df8:	4a17      	ldr	r2, [pc, #92]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000dfa:	f043 0310 	orr.w	r3, r3, #16
 8000dfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e02:	4b15      	ldr	r3, [pc, #84]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e08:	f003 0310 	and.w	r3, r3, #16
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e10:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e16:	4a10      	ldr	r2, [pc, #64]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e18:	f043 0308 	orr.w	r3, r3, #8
 8000e1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e20:	4b0d      	ldr	r3, [pc, #52]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e26:	f003 0308 	and.w	r3, r3, #8
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e34:	4a08      	ldr	r2, [pc, #32]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e36:	f043 0302 	orr.w	r3, r3, #2
 8000e3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e3e:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e44:	f003 0302 	and.w	r3, r3, #2
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	687b      	ldr	r3, [r7, #4]

}
 8000e4c:	bf00      	nop
 8000e4e:	371c      	adds	r7, #28
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	58024400 	.word	0x58024400

08000e5c <get_M4>:
	}
	return res;
}

void  get_M4(int *data) // get data from M4 to M7 buffer
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	if (xfr_ptr->sts_4to7 == 1) // if M4 to M7 buffer has data
 8000e64:	4b14      	ldr	r3, [pc, #80]	@ (8000eb8 <get_M4+0x5c>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d11e      	bne.n	8000eac <get_M4+0x50>
	{
		xfr_ptr->sts_4to7 = 2; // lock the M4 to M7 buffer
 8000e6e:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <get_M4+0x5c>)
 8000e70:	2202      	movs	r2, #2
 8000e72:	701a      	strb	r2, [r3, #0]
		for(int n = 0; n < 6; n++)
 8000e74:	2300      	movs	r3, #0
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	e012      	b.n	8000ea0 <get_M4+0x44>
		{
			data[n] = xfr_ptr->M4toM7[n]; // transfer data
 8000e7a:	490f      	ldr	r1, [pc, #60]	@ (8000eb8 <get_M4+0x5c>)
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	441a      	add	r2, r3
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	440b      	add	r3, r1
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	6013      	str	r3, [r2, #0]
			xfr_ptr->M4toM7[n] = 0; // clear M4 to M7 buffer
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb8 <get_M4+0x5c>)
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	4413      	add	r3, r2
 8000e96:	2200      	movs	r2, #0
 8000e98:	605a      	str	r2, [r3, #4]
		for(int n = 0; n < 6; n++)
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	2b05      	cmp	r3, #5
 8000ea4:	dde9      	ble.n	8000e7a <get_M4+0x1e>
		}
		xfr_ptr->sts_4to7 = 0; // M4 to M7 buffer is empty
 8000ea6:	4b04      	ldr	r3, [pc, #16]	@ (8000eb8 <get_M4+0x5c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	701a      	strb	r2, [r3, #0]
	}
	// return the buffer (pointer)
}
 8000eac:	bf00      	nop
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	38001000 	.word	0x38001000

08000ebc <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	contador = __HAL_TIM_GET_COUNTER(&htim4);
 8000ec4:	4b05      	ldr	r3, [pc, #20]	@ (8000edc <HAL_TIM_IC_CaptureCallback+0x20>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eca:	4a05      	ldr	r2, [pc, #20]	@ (8000ee0 <HAL_TIM_IC_CaptureCallback+0x24>)
 8000ecc:	6013      	str	r3, [r2, #0]
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	2400067c 	.word	0x2400067c
 8000ee0:	240004d0 	.word	0x240004d0
 8000ee4:	00000000 	.word	0x00000000

08000ee8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b0a4      	sub	sp, #144	@ 0x90
 8000eec:	af06      	add	r7, sp, #24
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000eee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ef2:	677b      	str	r3, [r7, #116]	@ 0x74
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000ef4:	bf00      	nop
 8000ef6:	4ba4      	ldr	r3, [pc, #656]	@ (8001188 <main+0x2a0>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d004      	beq.n	8000f0c <main+0x24>
 8000f02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f04:	1e5a      	subs	r2, r3, #1
 8000f06:	677a      	str	r2, [r7, #116]	@ 0x74
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	dcf4      	bgt.n	8000ef6 <main+0xe>
  if ( timeout < 0 )
 8000f0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	da01      	bge.n	8000f16 <main+0x2e>
  {
  Error_Handler();
 8000f12:	f000 fa0e 	bl	8001332 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f16:	f001 fd05 	bl	8002924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f1a:	f000 f957 	bl	80011cc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f1e:	f000 f9d5 	bl	80012cc <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000f22:	4b99      	ldr	r3, [pc, #612]	@ (8001188 <main+0x2a0>)
 8000f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f28:	4a97      	ldr	r2, [pc, #604]	@ (8001188 <main+0x2a0>)
 8000f2a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f32:	4b95      	ldr	r3, [pc, #596]	@ (8001188 <main+0x2a0>)
 8000f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f3c:	603b      	str	r3, [r7, #0]
 8000f3e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000f40:	2000      	movs	r0, #0
 8000f42:	f005 fd47 	bl	80069d4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000f46:	2100      	movs	r1, #0
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f005 fd5d 	bl	8006a08 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000f4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f52:	677b      	str	r3, [r7, #116]	@ 0x74
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000f54:	bf00      	nop
 8000f56:	4b8c      	ldr	r3, [pc, #560]	@ (8001188 <main+0x2a0>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d104      	bne.n	8000f6c <main+0x84>
 8000f62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f64:	1e5a      	subs	r2, r3, #1
 8000f66:	677a      	str	r2, [r7, #116]	@ 0x74
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	dcf4      	bgt.n	8000f56 <main+0x6e>
if ( timeout < 0 )
 8000f6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	da01      	bge.n	8000f76 <main+0x8e>
{
Error_Handler();
 8000f72:	f000 f9de 	bl	8001332 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f76:	f7ff ff1b 	bl	8000db0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f7a:	f7ff fcd7 	bl	800092c <MX_DMA_Init>
  MX_TIM2_Init();
 8000f7e:	f000 fdf3 	bl	8001b68 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000f82:	f000 ff01 	bl	8001d88 <MX_TIM5_Init>
  MX_TIM3_Init();
 8000f86:	f000 fe53 	bl	8001c30 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f8a:	f000 fea7 	bl	8001cdc <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8000f8e:	f010 fcad 	bl	80118ec <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000f92:	f000 fd8f 	bl	8001ab4 <MX_TIM1_Init>
  MX_TIM8_Init();
 8000f96:	f000 ff5b 	bl	8001e50 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000f9a:	f000 ffb3 	bl	8001f04 <MX_TIM15_Init>
  MX_ADC1_Init();
 8000f9e:	f7ff fc05 	bl	80007ac <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000fa2:	213c      	movs	r1, #60	@ 0x3c
 8000fa4:	4879      	ldr	r0, [pc, #484]	@ (800118c <main+0x2a4>)
 8000fa6:	f00b f80b 	bl	800bfc0 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8000faa:	213c      	movs	r1, #60	@ 0x3c
 8000fac:	4878      	ldr	r0, [pc, #480]	@ (8001190 <main+0x2a8>)
 8000fae:	f00b f807 	bl	800bfc0 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 8000fb2:	213c      	movs	r1, #60	@ 0x3c
 8000fb4:	4877      	ldr	r0, [pc, #476]	@ (8001194 <main+0x2ac>)
 8000fb6:	f00b f803 	bl	800bfc0 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8000fba:	213c      	movs	r1, #60	@ 0x3c
 8000fbc:	4876      	ldr	r0, [pc, #472]	@ (8001198 <main+0x2b0>)
 8000fbe:	f00a ffff 	bl	800bfc0 <HAL_TIM_Encoder_Start_IT>
	uint8_t * xfr_data; // pointer to transfer data


	//initialize inter-core status pointers
	xfr_ptr->sts_4to7 = 0;
 8000fc2:	4b76      	ldr	r3, [pc, #472]	@ (800119c <main+0x2b4>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]
	xfr_ptr->sts_7to4 = 0;
 8000fc8:	4b74      	ldr	r3, [pc, #464]	@ (800119c <main+0x2b4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	705a      	strb	r2, [r3, #1]


	  if (HAL_TIM_Base_Start_IT(&htim15) != HAL_OK)
 8000fce:	4874      	ldr	r0, [pc, #464]	@ (80011a0 <main+0x2b8>)
 8000fd0:	f00a fd72 	bl	800bab8 <HAL_TIM_Base_Start_IT>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <main+0xf6>
	    {
	      /* Starting Error */
	      Error_Handler();
 8000fda:	f000 f9aa 	bl	8001332 <Error_Handler>
	    }
	  dshot_init(DSHOT300);
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f7ff fcdc 	bl	800099c <dshot_init>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f001 fab9 	bl	800255c <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000fea:	2001      	movs	r0, #1
 8000fec:	f001 fab6 	bl	800255c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000ff0:	2002      	movs	r0, #2
 8000ff2:	f001 fab3 	bl	800255c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f001 fb25 	bl	8002648 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000ffe:	4b69      	ldr	r3, [pc, #420]	@ (80011a4 <main+0x2bc>)
 8001000:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001004:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8001006:	4b67      	ldr	r3, [pc, #412]	@ (80011a4 <main+0x2bc>)
 8001008:	2200      	movs	r2, #0
 800100a:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800100c:	4b65      	ldr	r3, [pc, #404]	@ (80011a4 <main+0x2bc>)
 800100e:	2200      	movs	r2, #0
 8001010:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8001012:	4b64      	ldr	r3, [pc, #400]	@ (80011a4 <main+0x2bc>)
 8001014:	2200      	movs	r2, #0
 8001016:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8001018:	4b62      	ldr	r3, [pc, #392]	@ (80011a4 <main+0x2bc>)
 800101a:	2200      	movs	r2, #0
 800101c:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800101e:	4961      	ldr	r1, [pc, #388]	@ (80011a4 <main+0x2bc>)
 8001020:	2000      	movs	r0, #0
 8001022:	f001 fba1 	bl	8002768 <BSP_COM_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <main+0x148>
  {
    Error_Handler();
 800102c:	f000 f981 	bl	8001332 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char message[100]={'\0'};
 8001030:	2300      	movs	r3, #0
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	f107 0308 	add.w	r3, r7, #8
 8001038:	2260      	movs	r2, #96	@ 0x60
 800103a:	2100      	movs	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f011 ff00 	bl	8012e42 <memset>
  //Inicializa referencia como zero
  HAL_Delay(7000);
 8001042:	f641 3058 	movw	r0, #7000	@ 0x1b58
 8001046:	f001 fcff 	bl	8002a48 <HAL_Delay>

  uint32_t Leitura= 0;
 800104a:	2300      	movs	r3, #0
 800104c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  float Leitura2 = 0;
 800104e:	f04f 0300 	mov.w	r3, #0
 8001052:	66bb      	str	r3, [r7, #104]	@ 0x68
  extern volatile float uM[4];
  extern volatile float error[4];
  while (1)
  {
	      //comunicacao entre cores
	  	  if (xfr_ptr->sts_4to7 == 1)
 8001054:	4b51      	ldr	r3, [pc, #324]	@ (800119c <main+0x2b4>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b01      	cmp	r3, #1
 800105c:	d102      	bne.n	8001064 <main+0x17c>
	  	  {
	  		 get_M4(new_mensagem); // get data sent from M4 to M7
 800105e:	4852      	ldr	r0, [pc, #328]	@ (80011a8 <main+0x2c0>)
 8001060:	f7ff fefc 	bl	8000e5c <get_M4>
	  	  }

	  	  //validacao da mensagem, utilizamos 111 como um ID de inicio e 112 de final

	  	  if((new_mensagem[0]==111)&&(new_mensagem[5]==112)){
 8001064:	4b50      	ldr	r3, [pc, #320]	@ (80011a8 <main+0x2c0>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b6f      	cmp	r3, #111	@ 0x6f
 800106a:	d11a      	bne.n	80010a2 <main+0x1ba>
 800106c:	4b4e      	ldr	r3, [pc, #312]	@ (80011a8 <main+0x2c0>)
 800106e:	695b      	ldr	r3, [r3, #20]
 8001070:	2b70      	cmp	r3, #112	@ 0x70
 8001072:	d116      	bne.n	80010a2 <main+0x1ba>
	  		for(uint8_t n=0;n<6;n++){
 8001074:	2300      	movs	r3, #0
 8001076:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 800107a:	e00e      	b.n	800109a <main+0x1b2>
	  		  old_mensagem[n] = new_mensagem[n];
 800107c:	f897 2073 	ldrb.w	r2, [r7, #115]	@ 0x73
 8001080:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001084:	4948      	ldr	r1, [pc, #288]	@ (80011a8 <main+0x2c0>)
 8001086:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800108a:	4948      	ldr	r1, [pc, #288]	@ (80011ac <main+0x2c4>)
 800108c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  		for(uint8_t n=0;n<6;n++){
 8001090:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001094:	3301      	adds	r3, #1
 8001096:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 800109a:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800109e:	2b05      	cmp	r3, #5
 80010a0:	d9ec      	bls.n	800107c <main+0x194>
	  		}
	  	  }

	  	  for(uint8_t n=0; n<4;n++){
 80010a2:	2300      	movs	r3, #0
 80010a4:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
 80010a8:	e019      	b.n	80010de <main+0x1f6>
	  		 ref[n] = (float)old_mensagem[n+1]/100;
 80010aa:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80010ae:	3301      	adds	r3, #1
 80010b0:	4a3e      	ldr	r2, [pc, #248]	@ (80011ac <main+0x2c4>)
 80010b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b6:	ee07 3a90 	vmov	s15, r3
 80010ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010be:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80010c2:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80011b0 <main+0x2c8>
 80010c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ca:	4a3a      	ldr	r2, [pc, #232]	@ (80011b4 <main+0x2cc>)
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	4413      	add	r3, r2
 80010d0:	edc3 7a00 	vstr	s15, [r3]
	  	  for(uint8_t n=0; n<4;n++){
 80010d4:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80010d8:	3301      	adds	r3, #1
 80010da:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
 80010de:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80010e2:	2b03      	cmp	r3, #3
 80010e4:	d9e1      	bls.n	80010aa <main+0x1c2>
	  	for(uint8_t n=0; n<4;n++){
	  		ref[n] =2;
	  	}
	  	   */
	  	  //print para o puttyW
	  	  sprintf(message, "ref %f vel %f uM %f erro %f\n \r",ref[1], speed[1], uM[1],error[1]);
 80010e6:	4b33      	ldr	r3, [pc, #204]	@ (80011b4 <main+0x2cc>)
 80010e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80010ec:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 80010f0:	4b31      	ldr	r3, [pc, #196]	@ (80011b8 <main+0x2d0>)
 80010f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80010f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010fa:	4b30      	ldr	r3, [pc, #192]	@ (80011bc <main+0x2d4>)
 80010fc:	edd3 6a01 	vldr	s13, [r3, #4]
 8001100:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001104:	4b2e      	ldr	r3, [pc, #184]	@ (80011c0 <main+0x2d8>)
 8001106:	edd3 5a01 	vldr	s11, [r3, #4]
 800110a:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 800110e:	1d38      	adds	r0, r7, #4
 8001110:	ed8d 5b04 	vstr	d5, [sp, #16]
 8001114:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001118:	ed8d 7b00 	vstr	d7, [sp]
 800111c:	ec53 2b14 	vmov	r2, r3, d4
 8001120:	4928      	ldr	r1, [pc, #160]	@ (80011c4 <main+0x2dc>)
 8001122:	f011 fe2b 	bl	8012d7c <siprintf>
	  	  CDC_Transmit_FS(message,sizeof(message));
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	2164      	movs	r1, #100	@ 0x64
 800112a:	4618      	mov	r0, r3
 800112c:	f010 fc9e 	bl	8011a6c <CDC_Transmit_FS>

	  	  //Iniciar ADC

	  	  HAL_ADC_Start(&hadc1);
 8001130:	4825      	ldr	r0, [pc, #148]	@ (80011c8 <main+0x2e0>)
 8001132:	f002 f83d 	bl	80031b0 <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001136:	f04f 31ff 	mov.w	r1, #4294967295
 800113a:	4823      	ldr	r0, [pc, #140]	@ (80011c8 <main+0x2e0>)
 800113c:	f002 f902 	bl	8003344 <HAL_ADC_PollForConversion>
	  	  Leitura = HAL_ADC_GetValue(&hadc1);
 8001140:	4821      	ldr	r0, [pc, #132]	@ (80011c8 <main+0x2e0>)
 8001142:	f002 f9f3 	bl	800352c <HAL_ADC_GetValue>
 8001146:	66f8      	str	r0, [r7, #108]	@ 0x6c
	  	  Leitura2 = (Leitura*3.3)/65535;
 8001148:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800114a:	ee07 3a90 	vmov	s15, r3
 800114e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001152:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8001178 <main+0x290>
 8001156:	ee27 6b06 	vmul.f64	d6, d7, d6
 800115a:	ed9f 5b09 	vldr	d5, [pc, #36]	@ 8001180 <main+0x298>
 800115e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001162:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001166:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_Delay(100);
 800116a:	2064      	movs	r0, #100	@ 0x64
 800116c:	f001 fc6c 	bl	8002a48 <HAL_Delay>
  {
 8001170:	e770      	b.n	8001054 <main+0x16c>
 8001172:	bf00      	nop
 8001174:	f3af 8000 	nop.w
 8001178:	66666666 	.word	0x66666666
 800117c:	400a6666 	.word	0x400a6666
 8001180:	00000000 	.word	0x00000000
 8001184:	40efffe0 	.word	0x40efffe0
 8001188:	58024400 	.word	0x58024400
 800118c:	2400067c 	.word	0x2400067c
 8001190:	24000598 	.word	0x24000598
 8001194:	24000714 	.word	0x24000714
 8001198:	24000630 	.word	0x24000630
 800119c:	38001000 	.word	0x38001000
 80011a0:	24000760 	.word	0x24000760
 80011a4:	24000490 	.word	0x24000490
 80011a8:	240004a0 	.word	0x240004a0
 80011ac:	240004b8 	.word	0x240004b8
 80011b0:	42c80000 	.word	0x42c80000
 80011b4:	240004d4 	.word	0x240004d4
 80011b8:	24000574 	.word	0x24000574
 80011bc:	24000508 	.word	0x24000508
 80011c0:	240004e8 	.word	0x240004e8
 80011c4:	08014f98 	.word	0x08014f98
 80011c8:	2400030c 	.word	0x2400030c

080011cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b09c      	sub	sp, #112	@ 0x70
 80011d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011d6:	224c      	movs	r2, #76	@ 0x4c
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f011 fe31 	bl	8012e42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	2220      	movs	r2, #32
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f011 fe2b 	bl	8012e42 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80011ec:	2004      	movs	r0, #4
 80011ee:	f006 febd 	bl	8007f6c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011f2:	2300      	movs	r3, #0
 80011f4:	603b      	str	r3, [r7, #0]
 80011f6:	4b33      	ldr	r3, [pc, #204]	@ (80012c4 <SystemClock_Config+0xf8>)
 80011f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011fa:	4a32      	ldr	r2, [pc, #200]	@ (80012c4 <SystemClock_Config+0xf8>)
 80011fc:	f023 0301 	bic.w	r3, r3, #1
 8001200:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001202:	4b30      	ldr	r3, [pc, #192]	@ (80012c4 <SystemClock_Config+0xf8>)
 8001204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	4b2e      	ldr	r3, [pc, #184]	@ (80012c8 <SystemClock_Config+0xfc>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001214:	4a2c      	ldr	r2, [pc, #176]	@ (80012c8 <SystemClock_Config+0xfc>)
 8001216:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800121a:	6193      	str	r3, [r2, #24]
 800121c:	4b2a      	ldr	r3, [pc, #168]	@ (80012c8 <SystemClock_Config+0xfc>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001224:	603b      	str	r3, [r7, #0]
 8001226:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001228:	bf00      	nop
 800122a:	4b27      	ldr	r3, [pc, #156]	@ (80012c8 <SystemClock_Config+0xfc>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001232:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001236:	d1f8      	bne.n	800122a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001238:	2322      	movs	r3, #34	@ 0x22
 800123a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800123c:	2301      	movs	r3, #1
 800123e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001240:	2340      	movs	r3, #64	@ 0x40
 8001242:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001244:	2301      	movs	r3, #1
 8001246:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001248:	2302      	movs	r3, #2
 800124a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800124c:	2300      	movs	r3, #0
 800124e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001250:	2304      	movs	r3, #4
 8001252:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8001254:	2319      	movs	r3, #25
 8001256:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001258:	2302      	movs	r3, #2
 800125a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800125c:	2305      	movs	r3, #5
 800125e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001260:	2302      	movs	r3, #2
 8001262:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001264:	230c      	movs	r3, #12
 8001266:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001268:	2300      	movs	r3, #0
 800126a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001270:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001274:	4618      	mov	r0, r3
 8001276:	f006 fee3 	bl	8008040 <HAL_RCC_OscConfig>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001280:	f000 f857 	bl	8001332 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001284:	233f      	movs	r3, #63	@ 0x3f
 8001286:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001288:	2303      	movs	r3, #3
 800128a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800128c:	2300      	movs	r3, #0
 800128e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001290:	2300      	movs	r3, #0
 8001292:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001294:	2340      	movs	r3, #64	@ 0x40
 8001296:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001298:	2340      	movs	r3, #64	@ 0x40
 800129a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800129c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80012a2:	2340      	movs	r3, #64	@ 0x40
 80012a4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	2104      	movs	r1, #4
 80012aa:	4618      	mov	r0, r3
 80012ac:	f007 fb22 	bl	80088f4 <HAL_RCC_ClockConfig>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <SystemClock_Config+0xee>
  {
    Error_Handler();
 80012b6:	f000 f83c 	bl	8001332 <Error_Handler>
  }
}
 80012ba:	bf00      	nop
 80012bc:	3770      	adds	r7, #112	@ 0x70
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	58000400 	.word	0x58000400
 80012c8:	58024800 	.word	0x58024800

080012cc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b0b0      	sub	sp, #192	@ 0xc0
 80012d0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012d2:	463b      	mov	r3, r7
 80012d4:	22c0      	movs	r2, #192	@ 0xc0
 80012d6:	2100      	movs	r1, #0
 80012d8:	4618      	mov	r0, r3
 80012da:	f011 fdb2 	bl	8012e42 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI1;
 80012de:	f44f 2201 	mov.w	r2, #528384	@ 0x81000
 80012e2:	f04f 0300 	mov.w	r3, #0
 80012e6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80012ea:	2304      	movs	r3, #4
 80012ec:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 80012ee:	2309      	movs	r3, #9
 80012f0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80012f2:	2302      	movs	r3, #2
 80012f4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80012f6:	2302      	movs	r3, #2
 80012f8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80012fa:	2302      	movs	r3, #2
 80012fc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80012fe:	23c0      	movs	r3, #192	@ 0xc0
 8001300:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001302:	2320      	movs	r3, #32
 8001304:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8001306:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800130a:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800130c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001310:	663b      	str	r3, [r7, #96]	@ 0x60
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001312:	2300      	movs	r3, #0
 8001314:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001318:	463b      	mov	r3, r7
 800131a:	4618      	mov	r0, r3
 800131c:	f007 fe76 	bl	800900c <HAL_RCCEx_PeriphCLKConfig>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 8001326:	f000 f804 	bl	8001332 <Error_Handler>
  }
}
 800132a:	bf00      	nop
 800132c:	37c0      	adds	r7, #192	@ 0xc0
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001336:	b672      	cpsid	i
}
 8001338:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800133a:	bf00      	nop
 800133c:	e7fd      	b.n	800133a <Error_Handler+0x8>
	...

08001340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001346:	4b0a      	ldr	r3, [pc, #40]	@ (8001370 <HAL_MspInit+0x30>)
 8001348:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800134c:	4a08      	ldr	r2, [pc, #32]	@ (8001370 <HAL_MspInit+0x30>)
 800134e:	f043 0302 	orr.w	r3, r3, #2
 8001352:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001356:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <HAL_MspInit+0x30>)
 8001358:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	607b      	str	r3, [r7, #4]
 8001362:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	58024400 	.word	0x58024400

08001374 <map>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//Função de mapeamento
uint16_t map(float x, int in_min, int in_max, int out_min, int out_max) {
 8001374:	b480      	push	{r7}
 8001376:	b087      	sub	sp, #28
 8001378:	af00      	add	r7, sp, #0
 800137a:	ed87 0a05 	vstr	s0, [r7, #20]
 800137e:	6138      	str	r0, [r7, #16]
 8001380:	60f9      	str	r1, [r7, #12]
 8001382:	60ba      	str	r2, [r7, #8]
 8001384:	607b      	str	r3, [r7, #4]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	ee07 3a90 	vmov	s15, r3
 800138c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001390:	ed97 7a05 	vldr	s14, [r7, #20]
 8001394:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	ee07 3a90 	vmov	s15, r3
 80013a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	ee07 3a90 	vmov	s15, r3
 80013b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	ee07 3a90 	vmov	s15, r3
 80013c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013ce:	ee17 3a90 	vmov	r3, s15
 80013d2:	b29b      	uxth	r3, r3
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	371c      	adds	r7, #28
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <Controle>:

void Controle(){
 80013e0:	b590      	push	{r4, r7, lr}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
	for(uint8_t n=0;n<4;n++){
 80013e6:	2300      	movs	r3, #0
 80013e8:	71fb      	strb	r3, [r7, #7]
 80013ea:	e0f1      	b.n	80015d0 <Controle+0x1f0>
		//Calculo de erro
		error[n] =ref[n] -  speed[n];
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	4aa7      	ldr	r2, [pc, #668]	@ (800168c <Controle+0x2ac>)
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	ed93 7a00 	vldr	s14, [r3]
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	4aa5      	ldr	r2, [pc, #660]	@ (8001690 <Controle+0x2b0>)
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	edd3 7a00 	vldr	s15, [r3]
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	ee77 7a67 	vsub.f32	s15, s14, s15
 800140a:	4aa2      	ldr	r2, [pc, #648]	@ (8001694 <Controle+0x2b4>)
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4413      	add	r3, r2
 8001410:	edc3 7a00 	vstr	s15, [r3]
		//Variação da ação de controle para esta iteração
		deltaU[n] = Kc*(error[n]- preverror[n]) + error[n]*Ki -Kd*(speed[n]-2*prevspeed[n] + prevspeed2[n]);
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	4a9f      	ldr	r2, [pc, #636]	@ (8001694 <Controle+0x2b4>)
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	ed93 7a00 	vldr	s14, [r3]
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	4a9d      	ldr	r2, [pc, #628]	@ (8001698 <Controle+0x2b8>)
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	edd3 7a00 	vldr	s15, [r3]
 800142c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001430:	4b9a      	ldr	r3, [pc, #616]	@ (800169c <Controle+0x2bc>)
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	ee27 7a27 	vmul.f32	s14, s14, s15
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	4a95      	ldr	r2, [pc, #596]	@ (8001694 <Controle+0x2b4>)
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	edd3 6a00 	vldr	s13, [r3]
 8001446:	4b96      	ldr	r3, [pc, #600]	@ (80016a0 <Controle+0x2c0>)
 8001448:	edd3 7a00 	vldr	s15, [r3]
 800144c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001450:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	4a8e      	ldr	r2, [pc, #568]	@ (8001690 <Controle+0x2b0>)
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	edd3 6a00 	vldr	s13, [r3]
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	4a90      	ldr	r2, [pc, #576]	@ (80016a4 <Controle+0x2c4>)
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	edd3 7a00 	vldr	s15, [r3]
 800146c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001470:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	4a8c      	ldr	r2, [pc, #560]	@ (80016a8 <Controle+0x2c8>)
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4413      	add	r3, r2
 800147c:	edd3 7a00 	vldr	s15, [r3]
 8001480:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001484:	4b89      	ldr	r3, [pc, #548]	@ (80016ac <Controle+0x2cc>)
 8001486:	edd3 7a00 	vldr	s15, [r3]
 800148a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001494:	4a86      	ldr	r2, [pc, #536]	@ (80016b0 <Controle+0x2d0>)
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	edc3 7a00 	vstr	s15, [r3]
		//Ação de controle
		uM[n] = uM[n] + deltaU[n];
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	4a84      	ldr	r2, [pc, #528]	@ (80016b4 <Controle+0x2d4>)
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	ed93 7a00 	vldr	s14, [r3]
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	4a80      	ldr	r2, [pc, #512]	@ (80016b0 <Controle+0x2d0>)
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	edd3 7a00 	vldr	s15, [r3]
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014bc:	4a7d      	ldr	r2, [pc, #500]	@ (80016b4 <Controle+0x2d4>)
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	edc3 7a00 	vstr	s15, [r3]
		//Saturado para evitar que a ação de controle ultrapasse o limite
		if( uM[n] < -1023){
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	4a7a      	ldr	r2, [pc, #488]	@ (80016b4 <Controle+0x2d4>)
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	edd3 7a00 	vldr	s15, [r3]
 80014d2:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 80016b8 <Controle+0x2d8>
 80014d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014de:	d505      	bpl.n	80014ec <Controle+0x10c>
			uM[n]= -1023;
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	4a74      	ldr	r2, [pc, #464]	@ (80016b4 <Controle+0x2d4>)
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4413      	add	r3, r2
 80014e8:	4a74      	ldr	r2, [pc, #464]	@ (80016bc <Controle+0x2dc>)
 80014ea:	601a      	str	r2, [r3, #0]
		}
		if(uM[n]>1023){
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	4a71      	ldr	r2, [pc, #452]	@ (80016b4 <Controle+0x2d4>)
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	edd3 7a00 	vldr	s15, [r3]
 80014f8:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 80016c0 <Controle+0x2e0>
 80014fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001504:	dd05      	ble.n	8001512 <Controle+0x132>
			uM[n]= 1023;
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	4a6a      	ldr	r2, [pc, #424]	@ (80016b4 <Controle+0x2d4>)
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4413      	add	r3, r2
 800150e:	4a6d      	ldr	r2, [pc, #436]	@ (80016c4 <Controle+0x2e4>)
 8001510:	601a      	str	r2, [r3, #0]
		}
		//Mapeamento da variavel de ação de controle no alcançe dado
		if(ref[n]==0){
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	4a5d      	ldr	r2, [pc, #372]	@ (800168c <Controle+0x2ac>)
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
 800151a:	edd3 7a00 	vldr	s15, [r3]
 800151e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001526:	d10c      	bne.n	8001542 <Controle+0x162>
			D[n]=0;
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	4a67      	ldr	r2, [pc, #412]	@ (80016c8 <Controle+0x2e8>)
 800152c:	2100      	movs	r1, #0
 800152e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			uM[n] = 0;
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	4a5f      	ldr	r2, [pc, #380]	@ (80016b4 <Controle+0x2d4>)
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	f04f 0200 	mov.w	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	e043      	b.n	80015ca <Controle+0x1ea>
		}else if(uM[n]>=0 ){
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	4a5b      	ldr	r2, [pc, #364]	@ (80016b4 <Controle+0x2d4>)
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	edd3 7a00 	vldr	s15, [r3]
 800154e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001556:	db17      	blt.n	8001588 <Controle+0x1a8>
			D[n] = map(uM[n],0,1023,350,1023);
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	4a56      	ldr	r2, [pc, #344]	@ (80016b4 <Controle+0x2d4>)
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	edd3 7a00 	vldr	s15, [r3]
 8001564:	79fc      	ldrb	r4, [r7, #7]
 8001566:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800156a:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800156e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8001572:	2000      	movs	r0, #0
 8001574:	eeb0 0a67 	vmov.f32	s0, s15
 8001578:	f7ff fefc 	bl	8001374 <map>
 800157c:	4603      	mov	r3, r0
 800157e:	461a      	mov	r2, r3
 8001580:	4b51      	ldr	r3, [pc, #324]	@ (80016c8 <Controle+0x2e8>)
 8001582:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8001586:	e020      	b.n	80015ca <Controle+0x1ea>

		}else if(uM[n]<0){
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	4a4a      	ldr	r2, [pc, #296]	@ (80016b4 <Controle+0x2d4>)
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	edd3 7a00 	vldr	s15, [r3]
 8001594:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800159c:	d515      	bpl.n	80015ca <Controle+0x1ea>
			D[n]= map(uM[n],-1023,0,2047,1374);
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	4a44      	ldr	r2, [pc, #272]	@ (80016b4 <Controle+0x2d4>)
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4413      	add	r3, r2
 80015a6:	edd3 7a00 	vldr	s15, [r3]
 80015aa:	79fc      	ldrb	r4, [r7, #7]
 80015ac:	f240 535e 	movw	r3, #1374	@ 0x55e
 80015b0:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80015b4:	2100      	movs	r1, #0
 80015b6:	4845      	ldr	r0, [pc, #276]	@ (80016cc <Controle+0x2ec>)
 80015b8:	eeb0 0a67 	vmov.f32	s0, s15
 80015bc:	f7ff feda 	bl	8001374 <map>
 80015c0:	4603      	mov	r3, r0
 80015c2:	461a      	mov	r2, r3
 80015c4:	4b40      	ldr	r3, [pc, #256]	@ (80016c8 <Controle+0x2e8>)
 80015c6:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	for(uint8_t n=0;n<4;n++){
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	3301      	adds	r3, #1
 80015ce:	71fb      	strb	r3, [r7, #7]
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	2b03      	cmp	r3, #3
 80015d4:	f67f af0a 	bls.w	80013ec <Controle+0xc>

		}
	}

	//Logica para salvar o erro e a velocidade anterior
	cont = cont +1;
 80015d8:	4b3d      	ldr	r3, [pc, #244]	@ (80016d0 <Controle+0x2f0>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	3301      	adds	r3, #1
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	4b3b      	ldr	r3, [pc, #236]	@ (80016d0 <Controle+0x2f0>)
 80015e2:	701a      	strb	r2, [r3, #0]
	if(cont == 1){
 80015e4:	4b3a      	ldr	r3, [pc, #232]	@ (80016d0 <Controle+0x2f0>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d11d      	bne.n	8001628 <Controle+0x248>
		for(uint8_t n=0;n<4;n++){
 80015ec:	2300      	movs	r3, #0
 80015ee:	71bb      	strb	r3, [r7, #6]
 80015f0:	e016      	b.n	8001620 <Controle+0x240>
			prevspeed[n] = speed[n];
 80015f2:	79ba      	ldrb	r2, [r7, #6]
 80015f4:	79bb      	ldrb	r3, [r7, #6]
 80015f6:	4926      	ldr	r1, [pc, #152]	@ (8001690 <Controle+0x2b0>)
 80015f8:	0092      	lsls	r2, r2, #2
 80015fa:	440a      	add	r2, r1
 80015fc:	6812      	ldr	r2, [r2, #0]
 80015fe:	4929      	ldr	r1, [pc, #164]	@ (80016a4 <Controle+0x2c4>)
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	440b      	add	r3, r1
 8001604:	601a      	str	r2, [r3, #0]
			preverror[n] = error[n];
 8001606:	79ba      	ldrb	r2, [r7, #6]
 8001608:	79bb      	ldrb	r3, [r7, #6]
 800160a:	4922      	ldr	r1, [pc, #136]	@ (8001694 <Controle+0x2b4>)
 800160c:	0092      	lsls	r2, r2, #2
 800160e:	440a      	add	r2, r1
 8001610:	6812      	ldr	r2, [r2, #0]
 8001612:	4921      	ldr	r1, [pc, #132]	@ (8001698 <Controle+0x2b8>)
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	440b      	add	r3, r1
 8001618:	601a      	str	r2, [r3, #0]
		for(uint8_t n=0;n<4;n++){
 800161a:	79bb      	ldrb	r3, [r7, #6]
 800161c:	3301      	adds	r3, #1
 800161e:	71bb      	strb	r3, [r7, #6]
 8001620:	79bb      	ldrb	r3, [r7, #6]
 8001622:	2b03      	cmp	r3, #3
 8001624:	d9e5      	bls.n	80015f2 <Controle+0x212>
			prevspeed[n] = speed[n];
			preverror[n] = error[n];
		}
		cont = 1;
	}
}
 8001626:	e02d      	b.n	8001684 <Controle+0x2a4>
	} else if(cont ==2){
 8001628:	4b29      	ldr	r3, [pc, #164]	@ (80016d0 <Controle+0x2f0>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b02      	cmp	r3, #2
 800162e:	d129      	bne.n	8001684 <Controle+0x2a4>
		for(uint8_t n=0;n<4;n++){
 8001630:	2300      	movs	r3, #0
 8001632:	717b      	strb	r3, [r7, #5]
 8001634:	e020      	b.n	8001678 <Controle+0x298>
			prevspeed2[n] = prevspeed[n];
 8001636:	797a      	ldrb	r2, [r7, #5]
 8001638:	797b      	ldrb	r3, [r7, #5]
 800163a:	491a      	ldr	r1, [pc, #104]	@ (80016a4 <Controle+0x2c4>)
 800163c:	0092      	lsls	r2, r2, #2
 800163e:	440a      	add	r2, r1
 8001640:	6812      	ldr	r2, [r2, #0]
 8001642:	4919      	ldr	r1, [pc, #100]	@ (80016a8 <Controle+0x2c8>)
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	440b      	add	r3, r1
 8001648:	601a      	str	r2, [r3, #0]
			prevspeed[n] = speed[n];
 800164a:	797a      	ldrb	r2, [r7, #5]
 800164c:	797b      	ldrb	r3, [r7, #5]
 800164e:	4910      	ldr	r1, [pc, #64]	@ (8001690 <Controle+0x2b0>)
 8001650:	0092      	lsls	r2, r2, #2
 8001652:	440a      	add	r2, r1
 8001654:	6812      	ldr	r2, [r2, #0]
 8001656:	4913      	ldr	r1, [pc, #76]	@ (80016a4 <Controle+0x2c4>)
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	440b      	add	r3, r1
 800165c:	601a      	str	r2, [r3, #0]
			preverror[n] = error[n];
 800165e:	797a      	ldrb	r2, [r7, #5]
 8001660:	797b      	ldrb	r3, [r7, #5]
 8001662:	490c      	ldr	r1, [pc, #48]	@ (8001694 <Controle+0x2b4>)
 8001664:	0092      	lsls	r2, r2, #2
 8001666:	440a      	add	r2, r1
 8001668:	6812      	ldr	r2, [r2, #0]
 800166a:	490b      	ldr	r1, [pc, #44]	@ (8001698 <Controle+0x2b8>)
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	440b      	add	r3, r1
 8001670:	601a      	str	r2, [r3, #0]
		for(uint8_t n=0;n<4;n++){
 8001672:	797b      	ldrb	r3, [r7, #5]
 8001674:	3301      	adds	r3, #1
 8001676:	717b      	strb	r3, [r7, #5]
 8001678:	797b      	ldrb	r3, [r7, #5]
 800167a:	2b03      	cmp	r3, #3
 800167c:	d9db      	bls.n	8001636 <Controle+0x256>
		cont = 1;
 800167e:	4b14      	ldr	r3, [pc, #80]	@ (80016d0 <Controle+0x2f0>)
 8001680:	2201      	movs	r2, #1
 8001682:	701a      	strb	r2, [r3, #0]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	bd90      	pop	{r4, r7, pc}
 800168c:	240004d4 	.word	0x240004d4
 8001690:	24000574 	.word	0x24000574
 8001694:	240004e8 	.word	0x240004e8
 8001698:	24000538 	.word	0x24000538
 800169c:	24000008 	.word	0x24000008
 80016a0:	2400000c 	.word	0x2400000c
 80016a4:	24000518 	.word	0x24000518
 80016a8:	24000528 	.word	0x24000528
 80016ac:	240004e4 	.word	0x240004e4
 80016b0:	240004f8 	.word	0x240004f8
 80016b4:	24000508 	.word	0x24000508
 80016b8:	c47fc000 	.word	0xc47fc000
 80016bc:	c47fc000 	.word	0xc47fc000
 80016c0:	447fc000 	.word	0x447fc000
 80016c4:	447fc000 	.word	0x447fc000
 80016c8:	2400054c 	.word	0x2400054c
 80016cc:	fffffc01 	.word	0xfffffc01
 80016d0:	24000548 	.word	0x24000548

080016d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016d8:	bf00      	nop
 80016da:	e7fd      	b.n	80016d8 <NMI_Handler+0x4>

080016dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e0:	bf00      	nop
 80016e2:	e7fd      	b.n	80016e0 <HardFault_Handler+0x4>

080016e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e8:	bf00      	nop
 80016ea:	e7fd      	b.n	80016e8 <MemManage_Handler+0x4>

080016ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f0:	bf00      	nop
 80016f2:	e7fd      	b.n	80016f0 <BusFault_Handler+0x4>

080016f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f8:	bf00      	nop
 80016fa:	e7fd      	b.n	80016f8 <UsageFault_Handler+0x4>

080016fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800172a:	f001 f96d 	bl	8002a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8001738:	4802      	ldr	r0, [pc, #8]	@ (8001744 <DMA1_Stream1_IRQHandler+0x10>)
 800173a:	f003 fbe5 	bl	8004f08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	24000824 	.word	0x24000824

08001748 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 800174c:	4802      	ldr	r0, [pc, #8]	@ (8001758 <DMA1_Stream3_IRQHandler+0x10>)
 800174e:	f003 fbdb 	bl	8004f08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	2400089c 	.word	0x2400089c

0800175c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8001760:	4802      	ldr	r0, [pc, #8]	@ (800176c <DMA1_Stream4_IRQHandler+0x10>)
 8001762:	f003 fbd1 	bl	8004f08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	24000914 	.word	0x24000914

08001770 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001774:	4802      	ldr	r0, [pc, #8]	@ (8001780 <DMA1_Stream5_IRQHandler+0x10>)
 8001776:	f003 fbc7 	bl	8004f08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	240007ac 	.word	0x240007ac

08001784 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001788:	4802      	ldr	r0, [pc, #8]	@ (8001794 <TIM4_IRQHandler+0x10>)
 800178a:	f00a fcc7 	bl	800c11c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	2400067c 	.word	0x2400067c

08001798 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800179c:	2000      	movs	r0, #0
 800179e:	f000 ffc5 	bl	800272c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80017ac:	4802      	ldr	r0, [pc, #8]	@ (80017b8 <OTG_FS_IRQHandler+0x10>)
 80017ae:	f005 fa80 	bl	8006cb2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	24001f10 	.word	0x24001f10
 80017bc:	00000000 	.word	0x00000000

080017c0 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80017c6:	484c      	ldr	r0, [pc, #304]	@ (80018f8 <TIM15_IRQHandler+0x138>)
 80017c8:	f00a fca8 	bl	800c11c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */
  //
  //Enc[0] = TIM4->CNT;
  Enc[0] = TIM1->CNT;
 80017cc:	4b4b      	ldr	r3, [pc, #300]	@ (80018fc <TIM15_IRQHandler+0x13c>)
 80017ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d0:	4a4b      	ldr	r2, [pc, #300]	@ (8001900 <TIM15_IRQHandler+0x140>)
 80017d2:	6013      	str	r3, [r2, #0]
  //Enc[1] = TIM1->CNT;
  Enc[2] = TIM3->CNT;
 80017d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001904 <TIM15_IRQHandler+0x144>)
 80017d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d8:	4a49      	ldr	r2, [pc, #292]	@ (8001900 <TIM15_IRQHandler+0x140>)
 80017da:	6093      	str	r3, [r2, #8]
  Enc[3] = TIM4->CNT;
 80017dc:	4b4a      	ldr	r3, [pc, #296]	@ (8001908 <TIM15_IRQHandler+0x148>)
 80017de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e0:	4a47      	ldr	r2, [pc, #284]	@ (8001900 <TIM15_IRQHandler+0x140>)
 80017e2:	60d3      	str	r3, [r2, #12]
  Enc[1] = TIM8->CNT;
 80017e4:	4b49      	ldr	r3, [pc, #292]	@ (800190c <TIM15_IRQHandler+0x14c>)
 80017e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e8:	4a45      	ldr	r2, [pc, #276]	@ (8001900 <TIM15_IRQHandler+0x140>)
 80017ea:	6053      	str	r3, [r2, #4]

  TIM4->CNT = 0;
 80017ec:	4b46      	ldr	r3, [pc, #280]	@ (8001908 <TIM15_IRQHandler+0x148>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	625a      	str	r2, [r3, #36]	@ 0x24
  TIM1->CNT = 0;
 80017f2:	4b42      	ldr	r3, [pc, #264]	@ (80018fc <TIM15_IRQHandler+0x13c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	625a      	str	r2, [r3, #36]	@ 0x24
  TIM8->CNT = 0;
 80017f8:	4b44      	ldr	r3, [pc, #272]	@ (800190c <TIM15_IRQHandler+0x14c>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	625a      	str	r2, [r3, #36]	@ 0x24
  TIM3->CNT = 0;
 80017fe:	4b41      	ldr	r3, [pc, #260]	@ (8001904 <TIM15_IRQHandler+0x144>)
 8001800:	2200      	movs	r2, #0
 8001802:	625a      	str	r2, [r3, #36]	@ 0x24
  static float last_vel[4] ={0,0,0,0};
  for(uint8_t i=0;i<4;i++){
 8001804:	2300      	movs	r3, #0
 8001806:	71fb      	strb	r3, [r7, #7]
 8001808:	e061      	b.n	80018ce <TIM15_IRQHandler+0x10e>
	  vel[i] = Enc[i];
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	4a3c      	ldr	r2, [pc, #240]	@ (8001900 <TIM15_IRQHandler+0x140>)
 800180e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	4611      	mov	r1, r2
 8001816:	4a3e      	ldr	r2, [pc, #248]	@ (8001910 <TIM15_IRQHandler+0x150>)
 8001818:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  if(vel[i]>60000){
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	4a3c      	ldr	r2, [pc, #240]	@ (8001910 <TIM15_IRQHandler+0x150>)
 8001820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001824:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8001828:	4293      	cmp	r3, r2
 800182a:	dd09      	ble.n	8001840 <TIM15_IRQHandler+0x80>
			  vel[i] = vel[i] - 65355;
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	4a38      	ldr	r2, [pc, #224]	@ (8001910 <TIM15_IRQHandler+0x150>)
 8001830:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001834:	79fa      	ldrb	r2, [r7, #7]
 8001836:	4b37      	ldr	r3, [pc, #220]	@ (8001914 <TIM15_IRQHandler+0x154>)
 8001838:	440b      	add	r3, r1
 800183a:	4935      	ldr	r1, [pc, #212]	@ (8001910 <TIM15_IRQHandler+0x150>)
 800183c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	  }
	  speed[i] = -1*vel[i]/(163.84);
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	4a33      	ldr	r2, [pc, #204]	@ (8001910 <TIM15_IRQHandler+0x150>)
 8001844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001848:	425b      	negs	r3, r3
 800184a:	ee07 3a90 	vmov	s15, r3
 800184e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001852:	ed9f 5b27 	vldr	d5, [pc, #156]	@ 80018f0 <TIM15_IRQHandler+0x130>
 8001856:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001860:	4a2d      	ldr	r2, [pc, #180]	@ (8001918 <TIM15_IRQHandler+0x158>)
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	edc3 7a00 	vstr	s15, [r3]
	  if(speed[i]>10 || speed[i]<-10){
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	4a2a      	ldr	r2, [pc, #168]	@ (8001918 <TIM15_IRQHandler+0x158>)
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	edd3 7a00 	vldr	s15, [r3]
 8001876:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800187a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800187e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001882:	dc0c      	bgt.n	800189e <TIM15_IRQHandler+0xde>
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	4a24      	ldr	r2, [pc, #144]	@ (8001918 <TIM15_IRQHandler+0x158>)
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	edd3 7a00 	vldr	s15, [r3]
 8001890:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 8001894:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800189c:	d50a      	bpl.n	80018b4 <TIM15_IRQHandler+0xf4>
		  speed[i] = last_vel[i];
 800189e:	79fa      	ldrb	r2, [r7, #7]
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	491e      	ldr	r1, [pc, #120]	@ (800191c <TIM15_IRQHandler+0x15c>)
 80018a4:	0092      	lsls	r2, r2, #2
 80018a6:	440a      	add	r2, r1
 80018a8:	6812      	ldr	r2, [r2, #0]
 80018aa:	491b      	ldr	r1, [pc, #108]	@ (8001918 <TIM15_IRQHandler+0x158>)
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	440b      	add	r3, r1
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	e009      	b.n	80018c8 <TIM15_IRQHandler+0x108>
	  } else{
		  last_vel[i] = speed[i];
 80018b4:	79fa      	ldrb	r2, [r7, #7]
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	4917      	ldr	r1, [pc, #92]	@ (8001918 <TIM15_IRQHandler+0x158>)
 80018ba:	0092      	lsls	r2, r2, #2
 80018bc:	440a      	add	r2, r1
 80018be:	6812      	ldr	r2, [r2, #0]
 80018c0:	4916      	ldr	r1, [pc, #88]	@ (800191c <TIM15_IRQHandler+0x15c>)
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0;i<4;i++){
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	3301      	adds	r3, #1
 80018cc:	71fb      	strb	r3, [r7, #7]
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	2b03      	cmp	r3, #3
 80018d2:	d99a      	bls.n	800180a <TIM15_IRQHandler+0x4a>
	  }
  }


  //velocidade = speed[0];
  Controle();
 80018d4:	f7ff fd84 	bl	80013e0 <Controle>

  dshot_write(D);
 80018d8:	4811      	ldr	r0, [pc, #68]	@ (8001920 <TIM15_IRQHandler+0x160>)
 80018da:	f7ff f870 	bl	80009be <dshot_write>

  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 80018de:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018e2:	4810      	ldr	r0, [pc, #64]	@ (8001924 <TIM15_IRQHandler+0x164>)
 80018e4:	f005 f85b 	bl	800699e <HAL_GPIO_TogglePin>
  /* USER CODE END TIM15_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	47ae147b 	.word	0x47ae147b
 80018f4:	40647ae1 	.word	0x40647ae1
 80018f8:	24000760 	.word	0x24000760
 80018fc:	40010000 	.word	0x40010000
 8001900:	24000554 	.word	0x24000554
 8001904:	40000400 	.word	0x40000400
 8001908:	40000800 	.word	0x40000800
 800190c:	40010400 	.word	0x40010400
 8001910:	24000564 	.word	0x24000564
 8001914:	ffff00b5 	.word	0xffff00b5
 8001918:	24000574 	.word	0x24000574
 800191c:	24000584 	.word	0x24000584
 8001920:	2400054c 	.word	0x2400054c
 8001924:	58020400 	.word	0x58020400

08001928 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return 1;
 800192c:	2301      	movs	r3, #1
}
 800192e:	4618      	mov	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <_kill>:

int _kill(int pid, int sig)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001942:	f011 fad1 	bl	8012ee8 <__errno>
 8001946:	4603      	mov	r3, r0
 8001948:	2216      	movs	r2, #22
 800194a:	601a      	str	r2, [r3, #0]
  return -1;
 800194c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001950:	4618      	mov	r0, r3
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <_exit>:

void _exit (int status)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001960:	f04f 31ff 	mov.w	r1, #4294967295
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7ff ffe7 	bl	8001938 <_kill>
  while (1) {}    /* Make sure we hang here */
 800196a:	bf00      	nop
 800196c:	e7fd      	b.n	800196a <_exit+0x12>

0800196e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b086      	sub	sp, #24
 8001972:	af00      	add	r7, sp, #0
 8001974:	60f8      	str	r0, [r7, #12]
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
 800197e:	e00a      	b.n	8001996 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001980:	f3af 8000 	nop.w
 8001984:	4601      	mov	r1, r0
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	60ba      	str	r2, [r7, #8]
 800198c:	b2ca      	uxtb	r2, r1
 800198e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	3301      	adds	r3, #1
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	429a      	cmp	r2, r3
 800199c:	dbf0      	blt.n	8001980 <_read+0x12>
  }

  return len;
 800199e:	687b      	ldr	r3, [r7, #4]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	e009      	b.n	80019ce <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	1c5a      	adds	r2, r3, #1
 80019be:	60ba      	str	r2, [r7, #8]
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f000 ff32 	bl	800282c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	3301      	adds	r3, #1
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	dbf1      	blt.n	80019ba <_write+0x12>
  }
  return len;
 80019d6:	687b      	ldr	r3, [r7, #4]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <_close>:

int _close(int file)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a08:	605a      	str	r2, [r3, #4]
  return 0;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <_isatty>:

int _isatty(int file)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a20:	2301      	movs	r3, #1
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b085      	sub	sp, #20
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	60f8      	str	r0, [r7, #12]
 8001a36:	60b9      	str	r1, [r7, #8]
 8001a38:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a50:	4a14      	ldr	r2, [pc, #80]	@ (8001aa4 <_sbrk+0x5c>)
 8001a52:	4b15      	ldr	r3, [pc, #84]	@ (8001aa8 <_sbrk+0x60>)
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a5c:	4b13      	ldr	r3, [pc, #76]	@ (8001aac <_sbrk+0x64>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d102      	bne.n	8001a6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a64:	4b11      	ldr	r3, [pc, #68]	@ (8001aac <_sbrk+0x64>)
 8001a66:	4a12      	ldr	r2, [pc, #72]	@ (8001ab0 <_sbrk+0x68>)
 8001a68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a6a:	4b10      	ldr	r3, [pc, #64]	@ (8001aac <_sbrk+0x64>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d207      	bcs.n	8001a88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a78:	f011 fa36 	bl	8012ee8 <__errno>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	220c      	movs	r2, #12
 8001a80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a82:	f04f 33ff 	mov.w	r3, #4294967295
 8001a86:	e009      	b.n	8001a9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a88:	4b08      	ldr	r3, [pc, #32]	@ (8001aac <_sbrk+0x64>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a8e:	4b07      	ldr	r3, [pc, #28]	@ (8001aac <_sbrk+0x64>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	4a05      	ldr	r2, [pc, #20]	@ (8001aac <_sbrk+0x64>)
 8001a98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	24080000 	.word	0x24080000
 8001aa8:	00000400 	.word	0x00000400
 8001aac:	24000594 	.word	0x24000594
 8001ab0:	24002760 	.word	0x24002760

08001ab4 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim5_ch4;
DMA_HandleTypeDef hdma_tim5_ch2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08c      	sub	sp, #48	@ 0x30
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001aba:	f107 030c 	add.w	r3, r7, #12
 8001abe:	2224      	movs	r2, #36	@ 0x24
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f011 f9bd 	bl	8012e42 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac8:	463b      	mov	r3, r7
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ad2:	4b23      	ldr	r3, [pc, #140]	@ (8001b60 <MX_TIM1_Init+0xac>)
 8001ad4:	4a23      	ldr	r2, [pc, #140]	@ (8001b64 <MX_TIM1_Init+0xb0>)
 8001ad6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ad8:	4b21      	ldr	r3, [pc, #132]	@ (8001b60 <MX_TIM1_Init+0xac>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ade:	4b20      	ldr	r3, [pc, #128]	@ (8001b60 <MX_TIM1_Init+0xac>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ae4:	4b1e      	ldr	r3, [pc, #120]	@ (8001b60 <MX_TIM1_Init+0xac>)
 8001ae6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001aea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aec:	4b1c      	ldr	r3, [pc, #112]	@ (8001b60 <MX_TIM1_Init+0xac>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001af2:	4b1b      	ldr	r3, [pc, #108]	@ (8001b60 <MX_TIM1_Init+0xac>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af8:	4b19      	ldr	r3, [pc, #100]	@ (8001b60 <MX_TIM1_Init+0xac>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001afe:	2303      	movs	r3, #3
 8001b00:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001b02:	2302      	movs	r3, #2
 8001b04:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b06:	2301      	movs	r3, #1
 8001b08:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001b12:	2302      	movs	r3, #2
 8001b14:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b16:	2301      	movs	r3, #1
 8001b18:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001b22:	f107 030c 	add.w	r3, r7, #12
 8001b26:	4619      	mov	r1, r3
 8001b28:	480d      	ldr	r0, [pc, #52]	@ (8001b60 <MX_TIM1_Init+0xac>)
 8001b2a:	f00a f9a3 	bl	800be74 <HAL_TIM_Encoder_Init>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001b34:	f7ff fbfd 	bl	8001332 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b44:	463b      	mov	r3, r7
 8001b46:	4619      	mov	r1, r3
 8001b48:	4805      	ldr	r0, [pc, #20]	@ (8001b60 <MX_TIM1_Init+0xac>)
 8001b4a:	f00b fa63 	bl	800d014 <HAL_TIMEx_MasterConfigSynchronization>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001b54:	f7ff fbed 	bl	8001332 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b58:	bf00      	nop
 8001b5a:	3730      	adds	r7, #48	@ 0x30
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	24000598 	.word	0x24000598
 8001b64:	40010000 	.word	0x40010000

08001b68 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08a      	sub	sp, #40	@ 0x28
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b6e:	f107 031c 	add.w	r3, r7, #28
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]
 8001b78:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b7a:	463b      	mov	r3, r7
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
 8001b88:	615a      	str	r2, [r3, #20]
 8001b8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b8c:	4b27      	ldr	r3, [pc, #156]	@ (8001c2c <MX_TIM2_Init+0xc4>)
 8001b8e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b94:	4b25      	ldr	r3, [pc, #148]	@ (8001c2c <MX_TIM2_Init+0xc4>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b9a:	4b24      	ldr	r3, [pc, #144]	@ (8001c2c <MX_TIM2_Init+0xc4>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001ba0:	4b22      	ldr	r3, [pc, #136]	@ (8001c2c <MX_TIM2_Init+0xc4>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba6:	4b21      	ldr	r3, [pc, #132]	@ (8001c2c <MX_TIM2_Init+0xc4>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bac:	4b1f      	ldr	r3, [pc, #124]	@ (8001c2c <MX_TIM2_Init+0xc4>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001bb2:	481e      	ldr	r0, [pc, #120]	@ (8001c2c <MX_TIM2_Init+0xc4>)
 8001bb4:	f009 fff8 	bl	800bba8 <HAL_TIM_PWM_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001bbe:	f7ff fbb8 	bl	8001332 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bca:	f107 031c 	add.w	r3, r7, #28
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4816      	ldr	r0, [pc, #88]	@ (8001c2c <MX_TIM2_Init+0xc4>)
 8001bd2:	f00b fa1f 	bl	800d014 <HAL_TIMEx_MasterConfigSynchronization>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001bdc:	f7ff fba9 	bl	8001332 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001be0:	2360      	movs	r3, #96	@ 0x60
 8001be2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bec:	2300      	movs	r3, #0
 8001bee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bf0:	463b      	mov	r3, r7
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	480d      	ldr	r0, [pc, #52]	@ (8001c2c <MX_TIM2_Init+0xc4>)
 8001bf8:	f00a fb98 	bl	800c32c <HAL_TIM_PWM_ConfigChannel>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001c02:	f7ff fb96 	bl	8001332 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c06:	463b      	mov	r3, r7
 8001c08:	2208      	movs	r2, #8
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4807      	ldr	r0, [pc, #28]	@ (8001c2c <MX_TIM2_Init+0xc4>)
 8001c0e:	f00a fb8d 	bl	800c32c <HAL_TIM_PWM_ConfigChannel>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001c18:	f7ff fb8b 	bl	8001332 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c1c:	4803      	ldr	r0, [pc, #12]	@ (8001c2c <MX_TIM2_Init+0xc4>)
 8001c1e:	f000 fc13 	bl	8002448 <HAL_TIM_MspPostInit>

}
 8001c22:	bf00      	nop
 8001c24:	3728      	adds	r7, #40	@ 0x28
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	240005e4 	.word	0x240005e4

08001c30 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08c      	sub	sp, #48	@ 0x30
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c36:	f107 030c 	add.w	r3, r7, #12
 8001c3a:	2224      	movs	r2, #36	@ 0x24
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f011 f8ff 	bl	8012e42 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c44:	463b      	mov	r3, r7
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	605a      	str	r2, [r3, #4]
 8001c4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c4e:	4b21      	ldr	r3, [pc, #132]	@ (8001cd4 <MX_TIM3_Init+0xa4>)
 8001c50:	4a21      	ldr	r2, [pc, #132]	@ (8001cd8 <MX_TIM3_Init+0xa8>)
 8001c52:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c54:	4b1f      	ldr	r3, [pc, #124]	@ (8001cd4 <MX_TIM3_Init+0xa4>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd4 <MX_TIM3_Init+0xa4>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c60:	4b1c      	ldr	r3, [pc, #112]	@ (8001cd4 <MX_TIM3_Init+0xa4>)
 8001c62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c68:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd4 <MX_TIM3_Init+0xa4>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c6e:	4b19      	ldr	r3, [pc, #100]	@ (8001cd4 <MX_TIM3_Init+0xa4>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c74:	2303      	movs	r3, #3
 8001c76:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c80:	2300      	movs	r3, #0
 8001c82:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c90:	2300      	movs	r3, #0
 8001c92:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001c98:	f107 030c 	add.w	r3, r7, #12
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	480d      	ldr	r0, [pc, #52]	@ (8001cd4 <MX_TIM3_Init+0xa4>)
 8001ca0:	f00a f8e8 	bl	800be74 <HAL_TIM_Encoder_Init>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001caa:	f7ff fb42 	bl	8001332 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cb6:	463b      	mov	r3, r7
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4806      	ldr	r0, [pc, #24]	@ (8001cd4 <MX_TIM3_Init+0xa4>)
 8001cbc:	f00b f9aa 	bl	800d014 <HAL_TIMEx_MasterConfigSynchronization>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001cc6:	f7ff fb34 	bl	8001332 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001cca:	bf00      	nop
 8001ccc:	3730      	adds	r7, #48	@ 0x30
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	24000630 	.word	0x24000630
 8001cd8:	40000400 	.word	0x40000400

08001cdc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08c      	sub	sp, #48	@ 0x30
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ce2:	f107 030c 	add.w	r3, r7, #12
 8001ce6:	2224      	movs	r2, #36	@ 0x24
 8001ce8:	2100      	movs	r1, #0
 8001cea:	4618      	mov	r0, r3
 8001cec:	f011 f8a9 	bl	8012e42 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf0:	463b      	mov	r3, r7
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	605a      	str	r2, [r3, #4]
 8001cf8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001cfa:	4b21      	ldr	r3, [pc, #132]	@ (8001d80 <MX_TIM4_Init+0xa4>)
 8001cfc:	4a21      	ldr	r2, [pc, #132]	@ (8001d84 <MX_TIM4_Init+0xa8>)
 8001cfe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d00:	4b1f      	ldr	r3, [pc, #124]	@ (8001d80 <MX_TIM4_Init+0xa4>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d06:	4b1e      	ldr	r3, [pc, #120]	@ (8001d80 <MX_TIM4_Init+0xa4>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001d80 <MX_TIM4_Init+0xa4>)
 8001d0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d12:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d14:	4b1a      	ldr	r3, [pc, #104]	@ (8001d80 <MX_TIM4_Init+0xa4>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d1a:	4b19      	ldr	r3, [pc, #100]	@ (8001d80 <MX_TIM4_Init+0xa4>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d20:	2303      	movs	r3, #3
 8001d22:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001d24:	2302      	movs	r3, #2
 8001d26:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001d34:	2302      	movs	r3, #2
 8001d36:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001d40:	2300      	movs	r3, #0
 8001d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001d44:	f107 030c 	add.w	r3, r7, #12
 8001d48:	4619      	mov	r1, r3
 8001d4a:	480d      	ldr	r0, [pc, #52]	@ (8001d80 <MX_TIM4_Init+0xa4>)
 8001d4c:	f00a f892 	bl	800be74 <HAL_TIM_Encoder_Init>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001d56:	f7ff faec 	bl	8001332 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d62:	463b      	mov	r3, r7
 8001d64:	4619      	mov	r1, r3
 8001d66:	4806      	ldr	r0, [pc, #24]	@ (8001d80 <MX_TIM4_Init+0xa4>)
 8001d68:	f00b f954 	bl	800d014 <HAL_TIMEx_MasterConfigSynchronization>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001d72:	f7ff fade 	bl	8001332 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d76:	bf00      	nop
 8001d78:	3730      	adds	r7, #48	@ 0x30
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	2400067c 	.word	0x2400067c
 8001d84:	40000800 	.word	0x40000800

08001d88 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08a      	sub	sp, #40	@ 0x28
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d8e:	f107 031c 	add.w	r3, r7, #28
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]
 8001d98:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d9a:	463b      	mov	r3, r7
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
 8001da8:	615a      	str	r2, [r3, #20]
 8001daa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001dac:	4b26      	ldr	r3, [pc, #152]	@ (8001e48 <MX_TIM5_Init+0xc0>)
 8001dae:	4a27      	ldr	r2, [pc, #156]	@ (8001e4c <MX_TIM5_Init+0xc4>)
 8001db0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001db2:	4b25      	ldr	r3, [pc, #148]	@ (8001e48 <MX_TIM5_Init+0xc0>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db8:	4b23      	ldr	r3, [pc, #140]	@ (8001e48 <MX_TIM5_Init+0xc0>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8001dbe:	4b22      	ldr	r3, [pc, #136]	@ (8001e48 <MX_TIM5_Init+0xc0>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc4:	4b20      	ldr	r3, [pc, #128]	@ (8001e48 <MX_TIM5_Init+0xc0>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dca:	4b1f      	ldr	r3, [pc, #124]	@ (8001e48 <MX_TIM5_Init+0xc0>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001dd0:	481d      	ldr	r0, [pc, #116]	@ (8001e48 <MX_TIM5_Init+0xc0>)
 8001dd2:	f009 fee9 	bl	800bba8 <HAL_TIM_PWM_Init>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001ddc:	f7ff faa9 	bl	8001332 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de0:	2300      	movs	r3, #0
 8001de2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de4:	2300      	movs	r3, #0
 8001de6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001de8:	f107 031c 	add.w	r3, r7, #28
 8001dec:	4619      	mov	r1, r3
 8001dee:	4816      	ldr	r0, [pc, #88]	@ (8001e48 <MX_TIM5_Init+0xc0>)
 8001df0:	f00b f910 	bl	800d014 <HAL_TIMEx_MasterConfigSynchronization>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001dfa:	f7ff fa9a 	bl	8001332 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dfe:	2360      	movs	r3, #96	@ 0x60
 8001e00:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e06:	2300      	movs	r3, #0
 8001e08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e0e:	463b      	mov	r3, r7
 8001e10:	2204      	movs	r2, #4
 8001e12:	4619      	mov	r1, r3
 8001e14:	480c      	ldr	r0, [pc, #48]	@ (8001e48 <MX_TIM5_Init+0xc0>)
 8001e16:	f00a fa89 	bl	800c32c <HAL_TIM_PWM_ConfigChannel>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001e20:	f7ff fa87 	bl	8001332 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e24:	463b      	mov	r3, r7
 8001e26:	220c      	movs	r2, #12
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4807      	ldr	r0, [pc, #28]	@ (8001e48 <MX_TIM5_Init+0xc0>)
 8001e2c:	f00a fa7e 	bl	800c32c <HAL_TIM_PWM_ConfigChannel>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001e36:	f7ff fa7c 	bl	8001332 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001e3a:	4803      	ldr	r0, [pc, #12]	@ (8001e48 <MX_TIM5_Init+0xc0>)
 8001e3c:	f000 fb04 	bl	8002448 <HAL_TIM_MspPostInit>

}
 8001e40:	bf00      	nop
 8001e42:	3728      	adds	r7, #40	@ 0x28
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	240006c8 	.word	0x240006c8
 8001e4c:	40000c00 	.word	0x40000c00

08001e50 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08c      	sub	sp, #48	@ 0x30
 8001e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e56:	f107 030c 	add.w	r3, r7, #12
 8001e5a:	2224      	movs	r2, #36	@ 0x24
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f010 ffef 	bl	8012e42 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e64:	463b      	mov	r3, r7
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	605a      	str	r2, [r3, #4]
 8001e6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001e6e:	4b23      	ldr	r3, [pc, #140]	@ (8001efc <MX_TIM8_Init+0xac>)
 8001e70:	4a23      	ldr	r2, [pc, #140]	@ (8001f00 <MX_TIM8_Init+0xb0>)
 8001e72:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001e74:	4b21      	ldr	r3, [pc, #132]	@ (8001efc <MX_TIM8_Init+0xac>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e7a:	4b20      	ldr	r3, [pc, #128]	@ (8001efc <MX_TIM8_Init+0xac>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001e80:	4b1e      	ldr	r3, [pc, #120]	@ (8001efc <MX_TIM8_Init+0xac>)
 8001e82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e86:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e88:	4b1c      	ldr	r3, [pc, #112]	@ (8001efc <MX_TIM8_Init+0xac>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001efc <MX_TIM8_Init+0xac>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e94:	4b19      	ldr	r3, [pc, #100]	@ (8001efc <MX_TIM8_Init+0xac>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001ebe:	f107 030c 	add.w	r3, r7, #12
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	480d      	ldr	r0, [pc, #52]	@ (8001efc <MX_TIM8_Init+0xac>)
 8001ec6:	f009 ffd5 	bl	800be74 <HAL_TIM_Encoder_Init>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001ed0:	f7ff fa2f 	bl	8001332 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001ee0:	463b      	mov	r3, r7
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4805      	ldr	r0, [pc, #20]	@ (8001efc <MX_TIM8_Init+0xac>)
 8001ee6:	f00b f895 	bl	800d014 <HAL_TIMEx_MasterConfigSynchronization>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001ef0:	f7ff fa1f 	bl	8001332 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001ef4:	bf00      	nop
 8001ef6:	3730      	adds	r7, #48	@ 0x30
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	24000714 	.word	0x24000714
 8001f00:	40010400 	.word	0x40010400

08001f04 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b088      	sub	sp, #32
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f0a:	f107 0310 	add.w	r3, r7, #16
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	609a      	str	r2, [r3, #8]
 8001f16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f18:	1d3b      	adds	r3, r7, #4
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	605a      	str	r2, [r3, #4]
 8001f20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001f22:	4b1f      	ldr	r3, [pc, #124]	@ (8001fa0 <MX_TIM15_Init+0x9c>)
 8001f24:	4a1f      	ldr	r2, [pc, #124]	@ (8001fa4 <MX_TIM15_Init+0xa0>)
 8001f26:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 19999;
 8001f28:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa0 <MX_TIM15_Init+0x9c>)
 8001f2a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001f2e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f30:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa0 <MX_TIM15_Init+0x9c>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 99;
 8001f36:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa0 <MX_TIM15_Init+0x9c>)
 8001f38:	2263      	movs	r2, #99	@ 0x63
 8001f3a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f3c:	4b18      	ldr	r3, [pc, #96]	@ (8001fa0 <MX_TIM15_Init+0x9c>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001f42:	4b17      	ldr	r3, [pc, #92]	@ (8001fa0 <MX_TIM15_Init+0x9c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f48:	4b15      	ldr	r3, [pc, #84]	@ (8001fa0 <MX_TIM15_Init+0x9c>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001f4e:	4814      	ldr	r0, [pc, #80]	@ (8001fa0 <MX_TIM15_Init+0x9c>)
 8001f50:	f009 fd5a 	bl	800ba08 <HAL_TIM_Base_Init>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8001f5a:	f7ff f9ea 	bl	8001332 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f62:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001f64:	f107 0310 	add.w	r3, r7, #16
 8001f68:	4619      	mov	r1, r3
 8001f6a:	480d      	ldr	r0, [pc, #52]	@ (8001fa0 <MX_TIM15_Init+0x9c>)
 8001f6c:	f00a faf2 	bl	800c554 <HAL_TIM_ConfigClockSource>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8001f76:	f7ff f9dc 	bl	8001332 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001f82:	1d3b      	adds	r3, r7, #4
 8001f84:	4619      	mov	r1, r3
 8001f86:	4806      	ldr	r0, [pc, #24]	@ (8001fa0 <MX_TIM15_Init+0x9c>)
 8001f88:	f00b f844 	bl	800d014 <HAL_TIMEx_MasterConfigSynchronization>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8001f92:	f7ff f9ce 	bl	8001332 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001f96:	bf00      	nop
 8001f98:	3720      	adds	r7, #32
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	24000760 	.word	0x24000760
 8001fa4:	40014000 	.word	0x40014000

08001fa8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b090      	sub	sp, #64	@ 0x40
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a6d      	ldr	r2, [pc, #436]	@ (800217c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d12f      	bne.n	800202a <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fca:	4b6d      	ldr	r3, [pc, #436]	@ (8002180 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001fcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fd0:	4a6b      	ldr	r2, [pc, #428]	@ (8002180 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001fd2:	f043 0301 	orr.w	r3, r3, #1
 8001fd6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001fda:	4b69      	ldr	r3, [pc, #420]	@ (8002180 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001fdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fe8:	4b65      	ldr	r3, [pc, #404]	@ (8002180 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fee:	4a64      	ldr	r2, [pc, #400]	@ (8002180 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001ff0:	f043 0310 	orr.w	r3, r3, #16
 8001ff4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ff8:	4b61      	ldr	r3, [pc, #388]	@ (8002180 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ffe:	f003 0310 	and.w	r3, r3, #16
 8002002:	627b      	str	r3, [r7, #36]	@ 0x24
 8002004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC2_A_Pin|ENC2_B_Pin;
 8002006:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800200a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200c:	2302      	movs	r3, #2
 800200e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002014:	2300      	movs	r3, #0
 8002016:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002018:	2301      	movs	r3, #1
 800201a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800201c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002020:	4619      	mov	r1, r3
 8002022:	4858      	ldr	r0, [pc, #352]	@ (8002184 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8002024:	f004 faf2 	bl	800660c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002028:	e0a3      	b.n	8002172 <HAL_TIM_Encoder_MspInit+0x1ca>
  else if(tim_encoderHandle->Instance==TIM3)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a56      	ldr	r2, [pc, #344]	@ (8002188 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d12e      	bne.n	8002092 <HAL_TIM_Encoder_MspInit+0xea>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002034:	4b52      	ldr	r3, [pc, #328]	@ (8002180 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002036:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800203a:	4a51      	ldr	r2, [pc, #324]	@ (8002180 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800203c:	f043 0302 	orr.w	r3, r3, #2
 8002040:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002044:	4b4e      	ldr	r3, [pc, #312]	@ (8002180 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002046:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	623b      	str	r3, [r7, #32]
 8002050:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002052:	4b4b      	ldr	r3, [pc, #300]	@ (8002180 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002058:	4a49      	ldr	r2, [pc, #292]	@ (8002180 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800205a:	f043 0302 	orr.w	r3, r3, #2
 800205e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002062:	4b47      	ldr	r3, [pc, #284]	@ (8002180 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	61fb      	str	r3, [r7, #28]
 800206e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ENC4_A_Pin|ENC4_B_Pin;
 8002070:	2330      	movs	r3, #48	@ 0x30
 8002072:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002074:	2302      	movs	r3, #2
 8002076:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207c:	2300      	movs	r3, #0
 800207e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002080:	2302      	movs	r3, #2
 8002082:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002084:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002088:	4619      	mov	r1, r3
 800208a:	4840      	ldr	r0, [pc, #256]	@ (800218c <HAL_TIM_Encoder_MspInit+0x1e4>)
 800208c:	f004 fabe 	bl	800660c <HAL_GPIO_Init>
}
 8002090:	e06f      	b.n	8002172 <HAL_TIM_Encoder_MspInit+0x1ca>
  else if(tim_encoderHandle->Instance==TIM4)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a3e      	ldr	r2, [pc, #248]	@ (8002190 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d137      	bne.n	800210c <HAL_TIM_Encoder_MspInit+0x164>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800209c:	4b38      	ldr	r3, [pc, #224]	@ (8002180 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800209e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020a2:	4a37      	ldr	r2, [pc, #220]	@ (8002180 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80020a4:	f043 0304 	orr.w	r3, r3, #4
 80020a8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80020ac:	4b34      	ldr	r3, [pc, #208]	@ (8002180 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80020ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020b2:	f003 0304 	and.w	r3, r3, #4
 80020b6:	61bb      	str	r3, [r7, #24]
 80020b8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ba:	4b31      	ldr	r3, [pc, #196]	@ (8002180 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80020bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020c0:	4a2f      	ldr	r2, [pc, #188]	@ (8002180 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80020c2:	f043 0308 	orr.w	r3, r3, #8
 80020c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002180 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80020cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020d0:	f003 0308 	and.w	r3, r3, #8
 80020d4:	617b      	str	r3, [r7, #20]
 80020d6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ENC1_A_Pin|ENC1_B_Pin;
 80020d8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80020dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020de:	2302      	movs	r3, #2
 80020e0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e6:	2300      	movs	r3, #0
 80020e8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80020ea:	2302      	movs	r3, #2
 80020ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020f2:	4619      	mov	r1, r3
 80020f4:	4827      	ldr	r0, [pc, #156]	@ (8002194 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80020f6:	f004 fa89 	bl	800660c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80020fa:	2200      	movs	r2, #0
 80020fc:	2100      	movs	r1, #0
 80020fe:	201e      	movs	r0, #30
 8002100:	f002 f8f3 	bl	80042ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002104:	201e      	movs	r0, #30
 8002106:	f002 f90a 	bl	800431e <HAL_NVIC_EnableIRQ>
}
 800210a:	e032      	b.n	8002172 <HAL_TIM_Encoder_MspInit+0x1ca>
  else if(tim_encoderHandle->Instance==TIM8)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a21      	ldr	r2, [pc, #132]	@ (8002198 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d12d      	bne.n	8002172 <HAL_TIM_Encoder_MspInit+0x1ca>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002116:	4b1a      	ldr	r3, [pc, #104]	@ (8002180 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002118:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800211c:	4a18      	ldr	r2, [pc, #96]	@ (8002180 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800211e:	f043 0302 	orr.w	r3, r3, #2
 8002122:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002126:	4b16      	ldr	r3, [pc, #88]	@ (8002180 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002128:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002134:	4b12      	ldr	r3, [pc, #72]	@ (8002180 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800213a:	4a11      	ldr	r2, [pc, #68]	@ (8002180 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800213c:	f043 0304 	orr.w	r3, r3, #4
 8002140:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002144:	4b0e      	ldr	r3, [pc, #56]	@ (8002180 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC3_A_Pin|ENC3_B_Pin;
 8002152:	23c0      	movs	r3, #192	@ 0xc0
 8002154:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002156:	2302      	movs	r3, #2
 8002158:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215a:	2300      	movs	r3, #0
 800215c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215e:	2300      	movs	r3, #0
 8002160:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002162:	2303      	movs	r3, #3
 8002164:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002166:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800216a:	4619      	mov	r1, r3
 800216c:	480b      	ldr	r0, [pc, #44]	@ (800219c <HAL_TIM_Encoder_MspInit+0x1f4>)
 800216e:	f004 fa4d 	bl	800660c <HAL_GPIO_Init>
}
 8002172:	bf00      	nop
 8002174:	3740      	adds	r7, #64	@ 0x40
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40010000 	.word	0x40010000
 8002180:	58024400 	.word	0x58024400
 8002184:	58021000 	.word	0x58021000
 8002188:	40000400 	.word	0x40000400
 800218c:	58020400 	.word	0x58020400
 8002190:	40000800 	.word	0x40000800
 8002194:	58020c00 	.word	0x58020c00
 8002198:	40010400 	.word	0x40010400
 800219c:	58020800 	.word	0x58020800

080021a0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021b0:	f040 8082 	bne.w	80022b8 <HAL_TIM_PWM_MspInit+0x118>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021b4:	4b86      	ldr	r3, [pc, #536]	@ (80023d0 <HAL_TIM_PWM_MspInit+0x230>)
 80021b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80021ba:	4a85      	ldr	r2, [pc, #532]	@ (80023d0 <HAL_TIM_PWM_MspInit+0x230>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80021c4:	4b82      	ldr	r3, [pc, #520]	@ (80023d0 <HAL_TIM_PWM_MspInit+0x230>)
 80021c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 80021d2:	4b80      	ldr	r3, [pc, #512]	@ (80023d4 <HAL_TIM_PWM_MspInit+0x234>)
 80021d4:	4a80      	ldr	r2, [pc, #512]	@ (80023d8 <HAL_TIM_PWM_MspInit+0x238>)
 80021d6:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 80021d8:	4b7e      	ldr	r3, [pc, #504]	@ (80023d4 <HAL_TIM_PWM_MspInit+0x234>)
 80021da:	2212      	movs	r2, #18
 80021dc:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021de:	4b7d      	ldr	r3, [pc, #500]	@ (80023d4 <HAL_TIM_PWM_MspInit+0x234>)
 80021e0:	2240      	movs	r2, #64	@ 0x40
 80021e2:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80021e4:	4b7b      	ldr	r3, [pc, #492]	@ (80023d4 <HAL_TIM_PWM_MspInit+0x234>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80021ea:	4b7a      	ldr	r3, [pc, #488]	@ (80023d4 <HAL_TIM_PWM_MspInit+0x234>)
 80021ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021f0:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80021f2:	4b78      	ldr	r3, [pc, #480]	@ (80023d4 <HAL_TIM_PWM_MspInit+0x234>)
 80021f4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80021f8:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80021fa:	4b76      	ldr	r3, [pc, #472]	@ (80023d4 <HAL_TIM_PWM_MspInit+0x234>)
 80021fc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002200:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8002202:	4b74      	ldr	r3, [pc, #464]	@ (80023d4 <HAL_TIM_PWM_MspInit+0x234>)
 8002204:	2200      	movs	r2, #0
 8002206:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8002208:	4b72      	ldr	r3, [pc, #456]	@ (80023d4 <HAL_TIM_PWM_MspInit+0x234>)
 800220a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800220e:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002210:	4b70      	ldr	r3, [pc, #448]	@ (80023d4 <HAL_TIM_PWM_MspInit+0x234>)
 8002212:	2204      	movs	r2, #4
 8002214:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim2_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002216:	4b6f      	ldr	r3, [pc, #444]	@ (80023d4 <HAL_TIM_PWM_MspInit+0x234>)
 8002218:	2200      	movs	r2, #0
 800221a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim2_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 800221c:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <HAL_TIM_PWM_MspInit+0x234>)
 800221e:	2200      	movs	r2, #0
 8002220:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim2_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002222:	4b6c      	ldr	r3, [pc, #432]	@ (80023d4 <HAL_TIM_PWM_MspInit+0x234>)
 8002224:	2200      	movs	r2, #0
 8002226:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002228:	486a      	ldr	r0, [pc, #424]	@ (80023d4 <HAL_TIM_PWM_MspInit+0x234>)
 800222a:	f002 f8a7 	bl	800437c <HAL_DMA_Init>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <HAL_TIM_PWM_MspInit+0x98>
    {
      Error_Handler();
 8002234:	f7ff f87d 	bl	8001332 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a66      	ldr	r2, [pc, #408]	@ (80023d4 <HAL_TIM_PWM_MspInit+0x234>)
 800223c:	625a      	str	r2, [r3, #36]	@ 0x24
 800223e:	4a65      	ldr	r2, [pc, #404]	@ (80023d4 <HAL_TIM_PWM_MspInit+0x234>)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 8002244:	4b65      	ldr	r3, [pc, #404]	@ (80023dc <HAL_TIM_PWM_MspInit+0x23c>)
 8002246:	4a66      	ldr	r2, [pc, #408]	@ (80023e0 <HAL_TIM_PWM_MspInit+0x240>)
 8002248:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 800224a:	4b64      	ldr	r3, [pc, #400]	@ (80023dc <HAL_TIM_PWM_MspInit+0x23c>)
 800224c:	2214      	movs	r2, #20
 800224e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002250:	4b62      	ldr	r3, [pc, #392]	@ (80023dc <HAL_TIM_PWM_MspInit+0x23c>)
 8002252:	2240      	movs	r2, #64	@ 0x40
 8002254:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002256:	4b61      	ldr	r3, [pc, #388]	@ (80023dc <HAL_TIM_PWM_MspInit+0x23c>)
 8002258:	2200      	movs	r2, #0
 800225a:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800225c:	4b5f      	ldr	r3, [pc, #380]	@ (80023dc <HAL_TIM_PWM_MspInit+0x23c>)
 800225e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002262:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002264:	4b5d      	ldr	r3, [pc, #372]	@ (80023dc <HAL_TIM_PWM_MspInit+0x23c>)
 8002266:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800226a:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800226c:	4b5b      	ldr	r3, [pc, #364]	@ (80023dc <HAL_TIM_PWM_MspInit+0x23c>)
 800226e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002272:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8002274:	4b59      	ldr	r3, [pc, #356]	@ (80023dc <HAL_TIM_PWM_MspInit+0x23c>)
 8002276:	2200      	movs	r2, #0
 8002278:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 800227a:	4b58      	ldr	r3, [pc, #352]	@ (80023dc <HAL_TIM_PWM_MspInit+0x23c>)
 800227c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002280:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002282:	4b56      	ldr	r3, [pc, #344]	@ (80023dc <HAL_TIM_PWM_MspInit+0x23c>)
 8002284:	2204      	movs	r2, #4
 8002286:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim2_ch3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002288:	4b54      	ldr	r3, [pc, #336]	@ (80023dc <HAL_TIM_PWM_MspInit+0x23c>)
 800228a:	2200      	movs	r2, #0
 800228c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim2_ch3.Init.MemBurst = DMA_MBURST_SINGLE;
 800228e:	4b53      	ldr	r3, [pc, #332]	@ (80023dc <HAL_TIM_PWM_MspInit+0x23c>)
 8002290:	2200      	movs	r2, #0
 8002292:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim2_ch3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002294:	4b51      	ldr	r3, [pc, #324]	@ (80023dc <HAL_TIM_PWM_MspInit+0x23c>)
 8002296:	2200      	movs	r2, #0
 8002298:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 800229a:	4850      	ldr	r0, [pc, #320]	@ (80023dc <HAL_TIM_PWM_MspInit+0x23c>)
 800229c:	f002 f86e 	bl	800437c <HAL_DMA_Init>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_TIM_PWM_MspInit+0x10a>
    {
      Error_Handler();
 80022a6:	f7ff f844 	bl	8001332 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a4b      	ldr	r2, [pc, #300]	@ (80023dc <HAL_TIM_PWM_MspInit+0x23c>)
 80022ae:	62da      	str	r2, [r3, #44]	@ 0x2c
 80022b0:	4a4a      	ldr	r2, [pc, #296]	@ (80023dc <HAL_TIM_PWM_MspInit+0x23c>)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80022b6:	e086      	b.n	80023c6 <HAL_TIM_PWM_MspInit+0x226>
  else if(tim_pwmHandle->Instance==TIM5)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a49      	ldr	r2, [pc, #292]	@ (80023e4 <HAL_TIM_PWM_MspInit+0x244>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	f040 8081 	bne.w	80023c6 <HAL_TIM_PWM_MspInit+0x226>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80022c4:	4b42      	ldr	r3, [pc, #264]	@ (80023d0 <HAL_TIM_PWM_MspInit+0x230>)
 80022c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022ca:	4a41      	ldr	r2, [pc, #260]	@ (80023d0 <HAL_TIM_PWM_MspInit+0x230>)
 80022cc:	f043 0308 	orr.w	r3, r3, #8
 80022d0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80022d4:	4b3e      	ldr	r3, [pc, #248]	@ (80023d0 <HAL_TIM_PWM_MspInit+0x230>)
 80022d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022da:	f003 0308 	and.w	r3, r3, #8
 80022de:	60bb      	str	r3, [r7, #8]
 80022e0:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream3;
 80022e2:	4b41      	ldr	r3, [pc, #260]	@ (80023e8 <HAL_TIM_PWM_MspInit+0x248>)
 80022e4:	4a41      	ldr	r2, [pc, #260]	@ (80023ec <HAL_TIM_PWM_MspInit+0x24c>)
 80022e6:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 80022e8:	4b3f      	ldr	r3, [pc, #252]	@ (80023e8 <HAL_TIM_PWM_MspInit+0x248>)
 80022ea:	223a      	movs	r2, #58	@ 0x3a
 80022ec:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022ee:	4b3e      	ldr	r3, [pc, #248]	@ (80023e8 <HAL_TIM_PWM_MspInit+0x248>)
 80022f0:	2240      	movs	r2, #64	@ 0x40
 80022f2:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80022f4:	4b3c      	ldr	r3, [pc, #240]	@ (80023e8 <HAL_TIM_PWM_MspInit+0x248>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80022fa:	4b3b      	ldr	r3, [pc, #236]	@ (80023e8 <HAL_TIM_PWM_MspInit+0x248>)
 80022fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002300:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002302:	4b39      	ldr	r3, [pc, #228]	@ (80023e8 <HAL_TIM_PWM_MspInit+0x248>)
 8002304:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002308:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800230a:	4b37      	ldr	r3, [pc, #220]	@ (80023e8 <HAL_TIM_PWM_MspInit+0x248>)
 800230c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002310:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 8002312:	4b35      	ldr	r3, [pc, #212]	@ (80023e8 <HAL_TIM_PWM_MspInit+0x248>)
 8002314:	2200      	movs	r2, #0
 8002316:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 8002318:	4b33      	ldr	r3, [pc, #204]	@ (80023e8 <HAL_TIM_PWM_MspInit+0x248>)
 800231a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800231e:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002320:	4b31      	ldr	r3, [pc, #196]	@ (80023e8 <HAL_TIM_PWM_MspInit+0x248>)
 8002322:	2204      	movs	r2, #4
 8002324:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim5_ch4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002326:	4b30      	ldr	r3, [pc, #192]	@ (80023e8 <HAL_TIM_PWM_MspInit+0x248>)
 8002328:	2200      	movs	r2, #0
 800232a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim5_ch4.Init.MemBurst = DMA_MBURST_SINGLE;
 800232c:	4b2e      	ldr	r3, [pc, #184]	@ (80023e8 <HAL_TIM_PWM_MspInit+0x248>)
 800232e:	2200      	movs	r2, #0
 8002330:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim5_ch4.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002332:	4b2d      	ldr	r3, [pc, #180]	@ (80023e8 <HAL_TIM_PWM_MspInit+0x248>)
 8002334:	2200      	movs	r2, #0
 8002336:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 8002338:	482b      	ldr	r0, [pc, #172]	@ (80023e8 <HAL_TIM_PWM_MspInit+0x248>)
 800233a:	f002 f81f 	bl	800437c <HAL_DMA_Init>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <HAL_TIM_PWM_MspInit+0x1a8>
      Error_Handler();
 8002344:	f7fe fff5 	bl	8001332 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a27      	ldr	r2, [pc, #156]	@ (80023e8 <HAL_TIM_PWM_MspInit+0x248>)
 800234c:	631a      	str	r2, [r3, #48]	@ 0x30
 800234e:	4a26      	ldr	r2, [pc, #152]	@ (80023e8 <HAL_TIM_PWM_MspInit+0x248>)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 8002354:	4b26      	ldr	r3, [pc, #152]	@ (80023f0 <HAL_TIM_PWM_MspInit+0x250>)
 8002356:	4a27      	ldr	r2, [pc, #156]	@ (80023f4 <HAL_TIM_PWM_MspInit+0x254>)
 8002358:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Request = DMA_REQUEST_TIM5_CH2;
 800235a:	4b25      	ldr	r3, [pc, #148]	@ (80023f0 <HAL_TIM_PWM_MspInit+0x250>)
 800235c:	2238      	movs	r2, #56	@ 0x38
 800235e:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002360:	4b23      	ldr	r3, [pc, #140]	@ (80023f0 <HAL_TIM_PWM_MspInit+0x250>)
 8002362:	2240      	movs	r2, #64	@ 0x40
 8002364:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002366:	4b22      	ldr	r3, [pc, #136]	@ (80023f0 <HAL_TIM_PWM_MspInit+0x250>)
 8002368:	2200      	movs	r2, #0
 800236a:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800236c:	4b20      	ldr	r3, [pc, #128]	@ (80023f0 <HAL_TIM_PWM_MspInit+0x250>)
 800236e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002372:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002374:	4b1e      	ldr	r3, [pc, #120]	@ (80023f0 <HAL_TIM_PWM_MspInit+0x250>)
 8002376:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800237a:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800237c:	4b1c      	ldr	r3, [pc, #112]	@ (80023f0 <HAL_TIM_PWM_MspInit+0x250>)
 800237e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002382:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 8002384:	4b1a      	ldr	r3, [pc, #104]	@ (80023f0 <HAL_TIM_PWM_MspInit+0x250>)
 8002386:	2200      	movs	r2, #0
 8002388:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 800238a:	4b19      	ldr	r3, [pc, #100]	@ (80023f0 <HAL_TIM_PWM_MspInit+0x250>)
 800238c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002390:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002392:	4b17      	ldr	r3, [pc, #92]	@ (80023f0 <HAL_TIM_PWM_MspInit+0x250>)
 8002394:	2204      	movs	r2, #4
 8002396:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim5_ch2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002398:	4b15      	ldr	r3, [pc, #84]	@ (80023f0 <HAL_TIM_PWM_MspInit+0x250>)
 800239a:	2200      	movs	r2, #0
 800239c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim5_ch2.Init.MemBurst = DMA_MBURST_SINGLE;
 800239e:	4b14      	ldr	r3, [pc, #80]	@ (80023f0 <HAL_TIM_PWM_MspInit+0x250>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim5_ch2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80023a4:	4b12      	ldr	r3, [pc, #72]	@ (80023f0 <HAL_TIM_PWM_MspInit+0x250>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 80023aa:	4811      	ldr	r0, [pc, #68]	@ (80023f0 <HAL_TIM_PWM_MspInit+0x250>)
 80023ac:	f001 ffe6 	bl	800437c <HAL_DMA_Init>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_TIM_PWM_MspInit+0x21a>
      Error_Handler();
 80023b6:	f7fe ffbc 	bl	8001332 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a0c      	ldr	r2, [pc, #48]	@ (80023f0 <HAL_TIM_PWM_MspInit+0x250>)
 80023be:	629a      	str	r2, [r3, #40]	@ 0x28
 80023c0:	4a0b      	ldr	r2, [pc, #44]	@ (80023f0 <HAL_TIM_PWM_MspInit+0x250>)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80023c6:	bf00      	nop
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	58024400 	.word	0x58024400
 80023d4:	240007ac 	.word	0x240007ac
 80023d8:	40020088 	.word	0x40020088
 80023dc:	24000824 	.word	0x24000824
 80023e0:	40020028 	.word	0x40020028
 80023e4:	40000c00 	.word	0x40000c00
 80023e8:	2400089c 	.word	0x2400089c
 80023ec:	40020058 	.word	0x40020058
 80023f0:	24000914 	.word	0x24000914
 80023f4:	40020070 	.word	0x40020070

080023f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM15)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a0e      	ldr	r2, [pc, #56]	@ (8002440 <HAL_TIM_Base_MspInit+0x48>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d116      	bne.n	8002438 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800240a:	4b0e      	ldr	r3, [pc, #56]	@ (8002444 <HAL_TIM_Base_MspInit+0x4c>)
 800240c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002410:	4a0c      	ldr	r2, [pc, #48]	@ (8002444 <HAL_TIM_Base_MspInit+0x4c>)
 8002412:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002416:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800241a:	4b0a      	ldr	r3, [pc, #40]	@ (8002444 <HAL_TIM_Base_MspInit+0x4c>)
 800241c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002420:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	68fb      	ldr	r3, [r7, #12]

    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8002428:	2200      	movs	r2, #0
 800242a:	2100      	movs	r1, #0
 800242c:	2074      	movs	r0, #116	@ 0x74
 800242e:	f001 ff5c 	bl	80042ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8002432:	2074      	movs	r0, #116	@ 0x74
 8002434:	f001 ff73 	bl	800431e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002438:	bf00      	nop
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40014000 	.word	0x40014000
 8002444:	58024400 	.word	0x58024400

08002448 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08a      	sub	sp, #40	@ 0x28
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002450:	f107 0314 	add.w	r3, r7, #20
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	605a      	str	r2, [r3, #4]
 800245a:	609a      	str	r2, [r3, #8]
 800245c:	60da      	str	r2, [r3, #12]
 800245e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002468:	d11f      	bne.n	80024aa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800246a:	4b24      	ldr	r3, [pc, #144]	@ (80024fc <HAL_TIM_MspPostInit+0xb4>)
 800246c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002470:	4a22      	ldr	r2, [pc, #136]	@ (80024fc <HAL_TIM_MspPostInit+0xb4>)
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800247a:	4b20      	ldr	r3, [pc, #128]	@ (80024fc <HAL_TIM_MspPostInit+0xb4>)
 800247c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = M3_Pin|M2_Pin;
 8002488:	2305      	movs	r3, #5
 800248a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248c:	2302      	movs	r3, #2
 800248e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002490:	2300      	movs	r3, #0
 8002492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002494:	2300      	movs	r3, #0
 8002496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002498:	2301      	movs	r3, #1
 800249a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800249c:	f107 0314 	add.w	r3, r7, #20
 80024a0:	4619      	mov	r1, r3
 80024a2:	4817      	ldr	r0, [pc, #92]	@ (8002500 <HAL_TIM_MspPostInit+0xb8>)
 80024a4:	f004 f8b2 	bl	800660c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80024a8:	e023      	b.n	80024f2 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM5)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a15      	ldr	r2, [pc, #84]	@ (8002504 <HAL_TIM_MspPostInit+0xbc>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d11e      	bne.n	80024f2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b4:	4b11      	ldr	r3, [pc, #68]	@ (80024fc <HAL_TIM_MspPostInit+0xb4>)
 80024b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024ba:	4a10      	ldr	r2, [pc, #64]	@ (80024fc <HAL_TIM_MspPostInit+0xb4>)
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024c4:	4b0d      	ldr	r3, [pc, #52]	@ (80024fc <HAL_TIM_MspPostInit+0xb4>)
 80024c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M4_Pin|M1_Pin;
 80024d2:	230a      	movs	r3, #10
 80024d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d6:	2302      	movs	r3, #2
 80024d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024de:	2300      	movs	r3, #0
 80024e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80024e2:	2302      	movs	r3, #2
 80024e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e6:	f107 0314 	add.w	r3, r7, #20
 80024ea:	4619      	mov	r1, r3
 80024ec:	4804      	ldr	r0, [pc, #16]	@ (8002500 <HAL_TIM_MspPostInit+0xb8>)
 80024ee:	f004 f88d 	bl	800660c <HAL_GPIO_Init>
}
 80024f2:	bf00      	nop
 80024f4:	3728      	adds	r7, #40	@ 0x28
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	58024400 	.word	0x58024400
 8002500:	58020000 	.word	0x58020000
 8002504:	40000c00 	.word	0x40000c00

08002508 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002508:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002540 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800250c:	f7fe f8b8 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002510:	480c      	ldr	r0, [pc, #48]	@ (8002544 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002512:	490d      	ldr	r1, [pc, #52]	@ (8002548 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002514:	4a0d      	ldr	r2, [pc, #52]	@ (800254c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002518:	e002      	b.n	8002520 <LoopCopyDataInit>

0800251a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800251a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800251c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800251e:	3304      	adds	r3, #4

08002520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002524:	d3f9      	bcc.n	800251a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002526:	4a0a      	ldr	r2, [pc, #40]	@ (8002550 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002528:	4c0a      	ldr	r4, [pc, #40]	@ (8002554 <LoopFillZerobss+0x22>)
  movs r3, #0
 800252a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800252c:	e001      	b.n	8002532 <LoopFillZerobss>

0800252e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800252e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002530:	3204      	adds	r2, #4

08002532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002534:	d3fb      	bcc.n	800252e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002536:	f010 fcdd 	bl	8012ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800253a:	f7fe fcd5 	bl	8000ee8 <main>
  bx  lr
 800253e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002540:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002544:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002548:	240002f0 	.word	0x240002f0
  ldr r2, =_sidata
 800254c:	080153c8 	.word	0x080153c8
  ldr r2, =_sbss
 8002550:	240002f0 	.word	0x240002f0
  ldr r4, =_ebss
 8002554:	24002760 	.word	0x24002760

08002558 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002558:	e7fe      	b.n	8002558 <ADC3_IRQHandler>
	...

0800255c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08c      	sub	sp, #48	@ 0x30
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002566:	2300      	movs	r3, #0
 8002568:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800256a:	79fb      	ldrb	r3, [r7, #7]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d009      	beq.n	8002584 <BSP_LED_Init+0x28>
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d006      	beq.n	8002584 <BSP_LED_Init+0x28>
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	2b02      	cmp	r3, #2
 800257a:	d003      	beq.n	8002584 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800257c:	f06f 0301 	mvn.w	r3, #1
 8002580:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002582:	e055      	b.n	8002630 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8002584:	79fb      	ldrb	r3, [r7, #7]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10f      	bne.n	80025aa <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 800258a:	4b2c      	ldr	r3, [pc, #176]	@ (800263c <BSP_LED_Init+0xe0>)
 800258c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002590:	4a2a      	ldr	r2, [pc, #168]	@ (800263c <BSP_LED_Init+0xe0>)
 8002592:	f043 0302 	orr.w	r3, r3, #2
 8002596:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800259a:	4b28      	ldr	r3, [pc, #160]	@ (800263c <BSP_LED_Init+0xe0>)
 800259c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	617b      	str	r3, [r7, #20]
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	e021      	b.n	80025ee <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d10f      	bne.n	80025d0 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80025b0:	4b22      	ldr	r3, [pc, #136]	@ (800263c <BSP_LED_Init+0xe0>)
 80025b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025b6:	4a21      	ldr	r2, [pc, #132]	@ (800263c <BSP_LED_Init+0xe0>)
 80025b8:	f043 0310 	orr.w	r3, r3, #16
 80025bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025c0:	4b1e      	ldr	r3, [pc, #120]	@ (800263c <BSP_LED_Init+0xe0>)
 80025c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025c6:	f003 0310 	and.w	r3, r3, #16
 80025ca:	613b      	str	r3, [r7, #16]
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	e00e      	b.n	80025ee <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80025d0:	4b1a      	ldr	r3, [pc, #104]	@ (800263c <BSP_LED_Init+0xe0>)
 80025d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025d6:	4a19      	ldr	r2, [pc, #100]	@ (800263c <BSP_LED_Init+0xe0>)
 80025d8:	f043 0302 	orr.w	r3, r3, #2
 80025dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025e0:	4b16      	ldr	r3, [pc, #88]	@ (800263c <BSP_LED_Init+0xe0>)
 80025e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80025ee:	79fb      	ldrb	r3, [r7, #7]
 80025f0:	4a13      	ldr	r2, [pc, #76]	@ (8002640 <BSP_LED_Init+0xe4>)
 80025f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025f6:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80025f8:	2301      	movs	r3, #1
 80025fa:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002600:	2303      	movs	r3, #3
 8002602:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002604:	79fb      	ldrb	r3, [r7, #7]
 8002606:	4a0f      	ldr	r2, [pc, #60]	@ (8002644 <BSP_LED_Init+0xe8>)
 8002608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800260c:	f107 0218 	add.w	r2, r7, #24
 8002610:	4611      	mov	r1, r2
 8002612:	4618      	mov	r0, r3
 8002614:	f003 fffa 	bl	800660c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002618:	79fb      	ldrb	r3, [r7, #7]
 800261a:	4a0a      	ldr	r2, [pc, #40]	@ (8002644 <BSP_LED_Init+0xe8>)
 800261c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	4a07      	ldr	r2, [pc, #28]	@ (8002640 <BSP_LED_Init+0xe4>)
 8002624:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002628:	2200      	movs	r2, #0
 800262a:	4619      	mov	r1, r3
 800262c:	f004 f99e 	bl	800696c <HAL_GPIO_WritePin>
  }

  return ret;
 8002630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002632:	4618      	mov	r0, r3
 8002634:	3730      	adds	r7, #48	@ 0x30
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	58024400 	.word	0x58024400
 8002640:	08015010 	.word	0x08015010
 8002644:	24000014 	.word	0x24000014

08002648 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b088      	sub	sp, #32
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	460a      	mov	r2, r1
 8002652:	71fb      	strb	r3, [r7, #7]
 8002654:	4613      	mov	r3, r2
 8002656:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8002658:	4b2e      	ldr	r3, [pc, #184]	@ (8002714 <BSP_PB_Init+0xcc>)
 800265a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800265e:	4a2d      	ldr	r2, [pc, #180]	@ (8002714 <BSP_PB_Init+0xcc>)
 8002660:	f043 0304 	orr.w	r3, r3, #4
 8002664:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002668:	4b2a      	ldr	r3, [pc, #168]	@ (8002714 <BSP_PB_Init+0xcc>)
 800266a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800266e:	f003 0304 	and.w	r3, r3, #4
 8002672:	60bb      	str	r3, [r7, #8]
 8002674:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8002676:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800267a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800267c:	2302      	movs	r3, #2
 800267e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002680:	2302      	movs	r3, #2
 8002682:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8002684:	79bb      	ldrb	r3, [r7, #6]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10c      	bne.n	80026a4 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800268a:	2300      	movs	r3, #0
 800268c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800268e:	79fb      	ldrb	r3, [r7, #7]
 8002690:	4a21      	ldr	r2, [pc, #132]	@ (8002718 <BSP_PB_Init+0xd0>)
 8002692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002696:	f107 020c 	add.w	r2, r7, #12
 800269a:	4611      	mov	r1, r2
 800269c:	4618      	mov	r0, r3
 800269e:	f003 ffb5 	bl	800660c <HAL_GPIO_Init>
 80026a2:	e031      	b.n	8002708 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80026a4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80026a8:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80026aa:	79fb      	ldrb	r3, [r7, #7]
 80026ac:	4a1a      	ldr	r2, [pc, #104]	@ (8002718 <BSP_PB_Init+0xd0>)
 80026ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b2:	f107 020c 	add.w	r2, r7, #12
 80026b6:	4611      	mov	r1, r2
 80026b8:	4618      	mov	r0, r3
 80026ba:	f003 ffa7 	bl	800660c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80026be:	79fb      	ldrb	r3, [r7, #7]
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	4a16      	ldr	r2, [pc, #88]	@ (800271c <BSP_PB_Init+0xd4>)
 80026c4:	441a      	add	r2, r3
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	4915      	ldr	r1, [pc, #84]	@ (8002720 <BSP_PB_Init+0xd8>)
 80026ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80026ce:	4619      	mov	r1, r3
 80026d0:	4610      	mov	r0, r2
 80026d2:	f003 ff4a 	bl	800656a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	4a10      	ldr	r2, [pc, #64]	@ (800271c <BSP_PB_Init+0xd4>)
 80026dc:	1898      	adds	r0, r3, r2
 80026de:	79fb      	ldrb	r3, [r7, #7]
 80026e0:	4a10      	ldr	r2, [pc, #64]	@ (8002724 <BSP_PB_Init+0xdc>)
 80026e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e6:	461a      	mov	r2, r3
 80026e8:	2100      	movs	r1, #0
 80026ea:	f003 ff1f 	bl	800652c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80026ee:	2028      	movs	r0, #40	@ 0x28
 80026f0:	79fb      	ldrb	r3, [r7, #7]
 80026f2:	4a0d      	ldr	r2, [pc, #52]	@ (8002728 <BSP_PB_Init+0xe0>)
 80026f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f8:	2200      	movs	r2, #0
 80026fa:	4619      	mov	r1, r3
 80026fc:	f001 fdf5 	bl	80042ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002700:	2328      	movs	r3, #40	@ 0x28
 8002702:	4618      	mov	r0, r3
 8002704:	f001 fe0b 	bl	800431e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3720      	adds	r7, #32
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	58024400 	.word	0x58024400
 8002718:	24000020 	.word	0x24000020
 800271c:	2400098c 	.word	0x2400098c
 8002720:	08015018 	.word	0x08015018
 8002724:	24000024 	.word	0x24000024
 8002728:	24000028 	.word	0x24000028

0800272c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8002736:	79fb      	ldrb	r3, [r7, #7]
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	4a04      	ldr	r2, [pc, #16]	@ (800274c <BSP_PB_IRQHandler+0x20>)
 800273c:	4413      	add	r3, r2
 800273e:	4618      	mov	r0, r3
 8002740:	f003 ff28 	bl	8006594 <HAL_EXTI_IRQHandler>
}
 8002744:	bf00      	nop
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	2400098c 	.word	0x2400098c

08002750 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
	...

08002768 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	6039      	str	r1, [r7, #0]
 8002772:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002774:	2300      	movs	r3, #0
 8002776:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8002778:	79fb      	ldrb	r3, [r7, #7]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800277e:	f06f 0301 	mvn.w	r3, #1
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	e018      	b.n	80027b8 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	2294      	movs	r2, #148	@ 0x94
 800278a:	fb02 f303 	mul.w	r3, r2, r3
 800278e:	4a0d      	ldr	r2, [pc, #52]	@ (80027c4 <BSP_COM_Init+0x5c>)
 8002790:	4413      	add	r3, r2
 8002792:	4618      	mov	r0, r3
 8002794:	f000 f86e 	bl	8002874 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8002798:	79fb      	ldrb	r3, [r7, #7]
 800279a:	2294      	movs	r2, #148	@ 0x94
 800279c:	fb02 f303 	mul.w	r3, r2, r3
 80027a0:	4a08      	ldr	r2, [pc, #32]	@ (80027c4 <BSP_COM_Init+0x5c>)
 80027a2:	4413      	add	r3, r2
 80027a4:	6839      	ldr	r1, [r7, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 f80e 	bl	80027c8 <MX_USART3_Init>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d002      	beq.n	80027b8 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80027b2:	f06f 0303 	mvn.w	r3, #3
 80027b6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80027b8:	68fb      	ldr	r3, [r7, #12]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	24000994 	.word	0x24000994

080027c8 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80027d2:	4b15      	ldr	r3, [pc, #84]	@ (8002828 <MX_USART3_Init+0x60>)
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	220c      	movs	r2, #12
 80027e6:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	895b      	ldrh	r3, [r3, #10]
 80027ec:	461a      	mov	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	891b      	ldrh	r3, [r3, #8]
 80027fe:	461a      	mov	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	899b      	ldrh	r3, [r3, #12]
 8002808:	461a      	mov	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002814:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f00a fca8 	bl	800d16c <HAL_UART_Init>
 800281c:	4603      	mov	r3, r0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	24000010 	.word	0x24000010

0800282c <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8002834:	4b09      	ldr	r3, [pc, #36]	@ (800285c <__io_putchar+0x30>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	461a      	mov	r2, r3
 800283a:	2394      	movs	r3, #148	@ 0x94
 800283c:	fb02 f303 	mul.w	r3, r2, r3
 8002840:	4a07      	ldr	r2, [pc, #28]	@ (8002860 <__io_putchar+0x34>)
 8002842:	1898      	adds	r0, r3, r2
 8002844:	1d39      	adds	r1, r7, #4
 8002846:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800284a:	2201      	movs	r2, #1
 800284c:	f00a fce8 	bl	800d220 <HAL_UART_Transmit>
  return ch;
 8002850:	687b      	ldr	r3, [r7, #4]
}
 8002852:	4618      	mov	r0, r3
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	24000a28 	.word	0x24000a28
 8002860:	24000994 	.word	0x24000994

08002864 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002868:	2000      	movs	r0, #0
 800286a:	f7ff ff71 	bl	8002750 <BSP_PB_Callback>
}
 800286e:	bf00      	nop
 8002870:	bd80      	pop	{r7, pc}
	...

08002874 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b08a      	sub	sp, #40	@ 0x28
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 800287c:	4b27      	ldr	r3, [pc, #156]	@ (800291c <COM1_MspInit+0xa8>)
 800287e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002882:	4a26      	ldr	r2, [pc, #152]	@ (800291c <COM1_MspInit+0xa8>)
 8002884:	f043 0308 	orr.w	r3, r3, #8
 8002888:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800288c:	4b23      	ldr	r3, [pc, #140]	@ (800291c <COM1_MspInit+0xa8>)
 800288e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	613b      	str	r3, [r7, #16]
 8002898:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 800289a:	4b20      	ldr	r3, [pc, #128]	@ (800291c <COM1_MspInit+0xa8>)
 800289c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028a0:	4a1e      	ldr	r2, [pc, #120]	@ (800291c <COM1_MspInit+0xa8>)
 80028a2:	f043 0308 	orr.w	r3, r3, #8
 80028a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028aa:	4b1c      	ldr	r3, [pc, #112]	@ (800291c <COM1_MspInit+0xa8>)
 80028ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028b0:	f003 0308 	and.w	r3, r3, #8
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80028b8:	4b18      	ldr	r3, [pc, #96]	@ (800291c <COM1_MspInit+0xa8>)
 80028ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028be:	4a17      	ldr	r2, [pc, #92]	@ (800291c <COM1_MspInit+0xa8>)
 80028c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028c4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80028c8:	4b14      	ldr	r3, [pc, #80]	@ (800291c <COM1_MspInit+0xa8>)
 80028ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028d2:	60bb      	str	r3, [r7, #8]
 80028d4:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 80028d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028da:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80028dc:	2302      	movs	r3, #2
 80028de:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80028e0:	2302      	movs	r3, #2
 80028e2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80028e4:	2301      	movs	r3, #1
 80028e6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80028e8:	2307      	movs	r3, #7
 80028ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80028ec:	f107 0314 	add.w	r3, r7, #20
 80028f0:	4619      	mov	r1, r3
 80028f2:	480b      	ldr	r0, [pc, #44]	@ (8002920 <COM1_MspInit+0xac>)
 80028f4:	f003 fe8a 	bl	800660c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 80028f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028fc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80028fe:	2302      	movs	r3, #2
 8002900:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8002902:	2307      	movs	r3, #7
 8002904:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8002906:	f107 0314 	add.w	r3, r7, #20
 800290a:	4619      	mov	r1, r3
 800290c:	4804      	ldr	r0, [pc, #16]	@ (8002920 <COM1_MspInit+0xac>)
 800290e:	f003 fe7d 	bl	800660c <HAL_GPIO_Init>
}
 8002912:	bf00      	nop
 8002914:	3728      	adds	r7, #40	@ 0x28
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	58024400 	.word	0x58024400
 8002920:	58020c00 	.word	0x58020c00

08002924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800292a:	2003      	movs	r0, #3
 800292c:	f001 fcd2 	bl	80042d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002930:	f006 f996 	bl	8008c60 <HAL_RCC_GetSysClockFreq>
 8002934:	4602      	mov	r2, r0
 8002936:	4b15      	ldr	r3, [pc, #84]	@ (800298c <HAL_Init+0x68>)
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	0a1b      	lsrs	r3, r3, #8
 800293c:	f003 030f 	and.w	r3, r3, #15
 8002940:	4913      	ldr	r1, [pc, #76]	@ (8002990 <HAL_Init+0x6c>)
 8002942:	5ccb      	ldrb	r3, [r1, r3]
 8002944:	f003 031f 	and.w	r3, r3, #31
 8002948:	fa22 f303 	lsr.w	r3, r2, r3
 800294c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800294e:	4b0f      	ldr	r3, [pc, #60]	@ (800298c <HAL_Init+0x68>)
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	4a0e      	ldr	r2, [pc, #56]	@ (8002990 <HAL_Init+0x6c>)
 8002958:	5cd3      	ldrb	r3, [r2, r3]
 800295a:	f003 031f 	and.w	r3, r3, #31
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	fa22 f303 	lsr.w	r3, r2, r3
 8002964:	4a0b      	ldr	r2, [pc, #44]	@ (8002994 <HAL_Init+0x70>)
 8002966:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002968:	4a0b      	ldr	r2, [pc, #44]	@ (8002998 <HAL_Init+0x74>)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800296e:	2000      	movs	r0, #0
 8002970:	f000 f814 	bl	800299c <HAL_InitTick>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e002      	b.n	8002984 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800297e:	f7fe fcdf 	bl	8001340 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	58024400 	.word	0x58024400
 8002990:	08015000 	.word	0x08015000
 8002994:	24000004 	.word	0x24000004
 8002998:	24000000 	.word	0x24000000

0800299c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80029a4:	4b15      	ldr	r3, [pc, #84]	@ (80029fc <HAL_InitTick+0x60>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e021      	b.n	80029f4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80029b0:	4b13      	ldr	r3, [pc, #76]	@ (8002a00 <HAL_InitTick+0x64>)
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	4b11      	ldr	r3, [pc, #68]	@ (80029fc <HAL_InitTick+0x60>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	4619      	mov	r1, r3
 80029ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029be:	fbb3 f3f1 	udiv	r3, r3, r1
 80029c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c6:	4618      	mov	r0, r3
 80029c8:	f001 fcb7 	bl	800433a <HAL_SYSTICK_Config>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e00e      	b.n	80029f4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b0f      	cmp	r3, #15
 80029da:	d80a      	bhi.n	80029f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029dc:	2200      	movs	r2, #0
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	f04f 30ff 	mov.w	r0, #4294967295
 80029e4:	f001 fc81 	bl	80042ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029e8:	4a06      	ldr	r2, [pc, #24]	@ (8002a04 <HAL_InitTick+0x68>)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
 80029f0:	e000      	b.n	80029f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	24000030 	.word	0x24000030
 8002a00:	24000000 	.word	0x24000000
 8002a04:	2400002c 	.word	0x2400002c

08002a08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a0c:	4b06      	ldr	r3, [pc, #24]	@ (8002a28 <HAL_IncTick+0x20>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	461a      	mov	r2, r3
 8002a12:	4b06      	ldr	r3, [pc, #24]	@ (8002a2c <HAL_IncTick+0x24>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4413      	add	r3, r2
 8002a18:	4a04      	ldr	r2, [pc, #16]	@ (8002a2c <HAL_IncTick+0x24>)
 8002a1a:	6013      	str	r3, [r2, #0]
}
 8002a1c:	bf00      	nop
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	24000030 	.word	0x24000030
 8002a2c:	24000a2c 	.word	0x24000a2c

08002a30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  return uwTick;
 8002a34:	4b03      	ldr	r3, [pc, #12]	@ (8002a44 <HAL_GetTick+0x14>)
 8002a36:	681b      	ldr	r3, [r3, #0]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	24000a2c 	.word	0x24000a2c

08002a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a50:	f7ff ffee 	bl	8002a30 <HAL_GetTick>
 8002a54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a60:	d005      	beq.n	8002a6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a62:	4b0a      	ldr	r3, [pc, #40]	@ (8002a8c <HAL_Delay+0x44>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	461a      	mov	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a6e:	bf00      	nop
 8002a70:	f7ff ffde 	bl	8002a30 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d8f7      	bhi.n	8002a70 <HAL_Delay+0x28>
  {
  }
}
 8002a80:	bf00      	nop
 8002a82:	bf00      	nop
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	24000030 	.word	0x24000030

08002a90 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002a94:	4b03      	ldr	r3, [pc, #12]	@ (8002aa4 <HAL_GetREVID+0x14>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	0c1b      	lsrs	r3, r3, #16
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	5c001000 	.word	0x5c001000

08002aa8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	431a      	orrs	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	609a      	str	r2, [r3, #8]
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
 8002ad6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	609a      	str	r2, [r3, #8]
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
 8002b1c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	3360      	adds	r3, #96	@ 0x60
 8002b22:	461a      	mov	r2, r3
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	430b      	orrs	r3, r1
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002b44:	bf00      	nop
 8002b46:	371c      	adds	r7, #28
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	f003 031f 	and.w	r3, r3, #31
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b70:	431a      	orrs	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	611a      	str	r2, [r3, #16]
}
 8002b76:	bf00      	nop
 8002b78:	3714      	adds	r7, #20
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b087      	sub	sp, #28
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	60f8      	str	r0, [r7, #12]
 8002b8a:	60b9      	str	r1, [r7, #8]
 8002b8c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	3360      	adds	r3, #96	@ 0x60
 8002b92:	461a      	mov	r2, r3
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	601a      	str	r2, [r3, #0]
  }
}
 8002bac:	bf00      	nop
 8002bae:	371c      	adds	r7, #28
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e000      	b.n	8002bd2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b087      	sub	sp, #28
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	60f8      	str	r0, [r7, #12]
 8002be6:	60b9      	str	r1, [r7, #8]
 8002be8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	3330      	adds	r3, #48	@ 0x30
 8002bee:	461a      	mov	r2, r3
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	0a1b      	lsrs	r3, r3, #8
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	f003 030c 	and.w	r3, r3, #12
 8002bfa:	4413      	add	r3, r2
 8002bfc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	f003 031f 	and.w	r3, r3, #31
 8002c08:	211f      	movs	r1, #31
 8002c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	401a      	ands	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	0e9b      	lsrs	r3, r3, #26
 8002c16:	f003 011f 	and.w	r1, r3, #31
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	f003 031f 	and.w	r3, r3, #31
 8002c20:	fa01 f303 	lsl.w	r3, r1, r3
 8002c24:	431a      	orrs	r2, r3
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c2a:	bf00      	nop
 8002c2c:	371c      	adds	r7, #28
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b087      	sub	sp, #28
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	60f8      	str	r0, [r7, #12]
 8002c3e:	60b9      	str	r1, [r7, #8]
 8002c40:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	3314      	adds	r3, #20
 8002c46:	461a      	mov	r2, r3
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	0e5b      	lsrs	r3, r3, #25
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	f003 0304 	and.w	r3, r3, #4
 8002c52:	4413      	add	r3, r2
 8002c54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	0d1b      	lsrs	r3, r3, #20
 8002c5e:	f003 031f 	and.w	r3, r3, #31
 8002c62:	2107      	movs	r1, #7
 8002c64:	fa01 f303 	lsl.w	r3, r1, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	401a      	ands	r2, r3
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	0d1b      	lsrs	r3, r3, #20
 8002c70:	f003 031f 	and.w	r3, r3, #31
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c80:	bf00      	nop
 8002c82:	371c      	adds	r7, #28
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	401a      	ands	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f003 0318 	and.w	r3, r3, #24
 8002cae:	4908      	ldr	r1, [pc, #32]	@ (8002cd0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002cb0:	40d9      	lsrs	r1, r3
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	400b      	ands	r3, r1
 8002cb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002cc2:	bf00      	nop
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	000fffff 	.word	0x000fffff

08002cd4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 031f 	and.w	r3, r3, #31
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	4b04      	ldr	r3, [pc, #16]	@ (8002d2c <LL_ADC_DisableDeepPowerDown+0x20>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6093      	str	r3, [r2, #8]
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	5fffffc0 	.word	0x5fffffc0

08002d30 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d44:	d101      	bne.n	8002d4a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	4b05      	ldr	r3, [pc, #20]	@ (8002d7c <LL_ADC_EnableInternalRegulator+0x24>)
 8002d66:	4013      	ands	r3, r2
 8002d68:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	6fffffc0 	.word	0x6fffffc0

08002d80 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d94:	d101      	bne.n	8002d9a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d96:	2301      	movs	r3, #1
 8002d98:	e000      	b.n	8002d9c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	4b05      	ldr	r3, [pc, #20]	@ (8002dcc <LL_ADC_Enable+0x24>)
 8002db6:	4013      	ands	r3, r2
 8002db8:	f043 0201 	orr.w	r2, r3, #1
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	7fffffc0 	.word	0x7fffffc0

08002dd0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d101      	bne.n	8002de8 <LL_ADC_IsEnabled+0x18>
 8002de4:	2301      	movs	r3, #1
 8002de6:	e000      	b.n	8002dea <LL_ADC_IsEnabled+0x1a>
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
	...

08002df8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	4b05      	ldr	r3, [pc, #20]	@ (8002e1c <LL_ADC_REG_StartConversion+0x24>)
 8002e06:	4013      	ands	r3, r2
 8002e08:	f043 0204 	orr.w	r2, r3, #4
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	7fffffc0 	.word	0x7fffffc0

08002e20 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b04      	cmp	r3, #4
 8002e32:	d101      	bne.n	8002e38 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e34:	2301      	movs	r3, #1
 8002e36:	e000      	b.n	8002e3a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d101      	bne.n	8002e5e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e000      	b.n	8002e60 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e6c:	b590      	push	{r4, r7, lr}
 8002e6e:	b089      	sub	sp, #36	@ 0x24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e74:	2300      	movs	r3, #0
 8002e76:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e18f      	b.n	80031a6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d109      	bne.n	8002ea8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f7fd fd03 	bl	80008a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff ff3f 	bl	8002d30 <LL_ADC_IsDeepPowerDownEnabled>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d004      	beq.n	8002ec2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff ff25 	bl	8002d0c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff ff5a 	bl	8002d80 <LL_ADC_IsInternalRegulatorEnabled>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d114      	bne.n	8002efc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff ff3e 	bl	8002d58 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002edc:	4b87      	ldr	r3, [pc, #540]	@ (80030fc <HAL_ADC_Init+0x290>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	099b      	lsrs	r3, r3, #6
 8002ee2:	4a87      	ldr	r2, [pc, #540]	@ (8003100 <HAL_ADC_Init+0x294>)
 8002ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee8:	099b      	lsrs	r3, r3, #6
 8002eea:	3301      	adds	r3, #1
 8002eec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002eee:	e002      	b.n	8002ef6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1f9      	bne.n	8002ef0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff ff3d 	bl	8002d80 <LL_ADC_IsInternalRegulatorEnabled>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10d      	bne.n	8002f28 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f10:	f043 0210 	orr.w	r2, r3, #16
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f1c:	f043 0201 	orr.w	r2, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff ff77 	bl	8002e20 <LL_ADC_REG_IsConversionOngoing>
 8002f32:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f38:	f003 0310 	and.w	r3, r3, #16
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f040 8129 	bne.w	8003194 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f040 8125 	bne.w	8003194 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f4e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002f52:	f043 0202 	orr.w	r2, r3, #2
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff ff36 	bl	8002dd0 <LL_ADC_IsEnabled>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d136      	bne.n	8002fd8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a65      	ldr	r2, [pc, #404]	@ (8003104 <HAL_ADC_Init+0x298>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d004      	beq.n	8002f7e <HAL_ADC_Init+0x112>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a63      	ldr	r2, [pc, #396]	@ (8003108 <HAL_ADC_Init+0x29c>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d10e      	bne.n	8002f9c <HAL_ADC_Init+0x130>
 8002f7e:	4861      	ldr	r0, [pc, #388]	@ (8003104 <HAL_ADC_Init+0x298>)
 8002f80:	f7ff ff26 	bl	8002dd0 <LL_ADC_IsEnabled>
 8002f84:	4604      	mov	r4, r0
 8002f86:	4860      	ldr	r0, [pc, #384]	@ (8003108 <HAL_ADC_Init+0x29c>)
 8002f88:	f7ff ff22 	bl	8002dd0 <LL_ADC_IsEnabled>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	4323      	orrs	r3, r4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	bf0c      	ite	eq
 8002f94:	2301      	moveq	r3, #1
 8002f96:	2300      	movne	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	e008      	b.n	8002fae <HAL_ADC_Init+0x142>
 8002f9c:	485b      	ldr	r0, [pc, #364]	@ (800310c <HAL_ADC_Init+0x2a0>)
 8002f9e:	f7ff ff17 	bl	8002dd0 <LL_ADC_IsEnabled>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	bf0c      	ite	eq
 8002fa8:	2301      	moveq	r3, #1
 8002faa:	2300      	movne	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d012      	beq.n	8002fd8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a53      	ldr	r2, [pc, #332]	@ (8003104 <HAL_ADC_Init+0x298>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d004      	beq.n	8002fc6 <HAL_ADC_Init+0x15a>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a51      	ldr	r2, [pc, #324]	@ (8003108 <HAL_ADC_Init+0x29c>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d101      	bne.n	8002fca <HAL_ADC_Init+0x15e>
 8002fc6:	4a52      	ldr	r2, [pc, #328]	@ (8003110 <HAL_ADC_Init+0x2a4>)
 8002fc8:	e000      	b.n	8002fcc <HAL_ADC_Init+0x160>
 8002fca:	4a52      	ldr	r2, [pc, #328]	@ (8003114 <HAL_ADC_Init+0x2a8>)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4610      	mov	r0, r2
 8002fd4:	f7ff fd68 	bl	8002aa8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002fd8:	f7ff fd5a 	bl	8002a90 <HAL_GetREVID>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d914      	bls.n	8003010 <HAL_ADC_Init+0x1a4>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	2b10      	cmp	r3, #16
 8002fec:	d110      	bne.n	8003010 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	7d5b      	ldrb	r3, [r3, #21]
 8002ff2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ff8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002ffe:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	7f1b      	ldrb	r3, [r3, #28]
 8003004:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003006:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003008:	f043 030c 	orr.w	r3, r3, #12
 800300c:	61bb      	str	r3, [r7, #24]
 800300e:	e00d      	b.n	800302c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	7d5b      	ldrb	r3, [r3, #21]
 8003014:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800301a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003020:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	7f1b      	ldrb	r3, [r3, #28]
 8003026:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003028:	4313      	orrs	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	7f1b      	ldrb	r3, [r3, #28]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d106      	bne.n	8003042 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	3b01      	subs	r3, #1
 800303a:	045b      	lsls	r3, r3, #17
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	4313      	orrs	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003046:	2b00      	cmp	r3, #0
 8003048:	d009      	beq.n	800305e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003056:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68da      	ldr	r2, [r3, #12]
 8003064:	4b2c      	ldr	r3, [pc, #176]	@ (8003118 <HAL_ADC_Init+0x2ac>)
 8003066:	4013      	ands	r3, r2
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6812      	ldr	r2, [r2, #0]
 800306c:	69b9      	ldr	r1, [r7, #24]
 800306e:	430b      	orrs	r3, r1
 8003070:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f7ff fed2 	bl	8002e20 <LL_ADC_REG_IsConversionOngoing>
 800307c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff fedf 	bl	8002e46 <LL_ADC_INJ_IsConversionOngoing>
 8003088:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d15f      	bne.n	8003150 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d15c      	bne.n	8003150 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	7d1b      	ldrb	r3, [r3, #20]
 800309a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80030a0:	4313      	orrs	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	4b1c      	ldr	r3, [pc, #112]	@ (800311c <HAL_ADC_Init+0x2b0>)
 80030ac:	4013      	ands	r3, r2
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6812      	ldr	r2, [r2, #0]
 80030b2:	69b9      	ldr	r1, [r7, #24]
 80030b4:	430b      	orrs	r3, r1
 80030b6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d130      	bne.n	8003124 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	691a      	ldr	r2, [r3, #16]
 80030ce:	4b14      	ldr	r3, [pc, #80]	@ (8003120 <HAL_ADC_Init+0x2b4>)
 80030d0:	4013      	ands	r3, r2
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80030d6:	3a01      	subs	r2, #1
 80030d8:	0411      	lsls	r1, r2, #16
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80030de:	4311      	orrs	r1, r2
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80030e4:	4311      	orrs	r1, r2
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80030ea:	430a      	orrs	r2, r1
 80030ec:	431a      	orrs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0201 	orr.w	r2, r2, #1
 80030f6:	611a      	str	r2, [r3, #16]
 80030f8:	e01c      	b.n	8003134 <HAL_ADC_Init+0x2c8>
 80030fa:	bf00      	nop
 80030fc:	24000000 	.word	0x24000000
 8003100:	053e2d63 	.word	0x053e2d63
 8003104:	40022000 	.word	0x40022000
 8003108:	40022100 	.word	0x40022100
 800310c:	58026000 	.word	0x58026000
 8003110:	40022300 	.word	0x40022300
 8003114:	58026300 	.word	0x58026300
 8003118:	fff0c003 	.word	0xfff0c003
 800311c:	ffffbffc 	.word	0xffffbffc
 8003120:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	691a      	ldr	r2, [r3, #16]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0201 	bic.w	r2, r2, #1
 8003132:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	430a      	orrs	r2, r1
 8003148:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 fde2 	bl	8003d14 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d10c      	bne.n	8003172 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315e:	f023 010f 	bic.w	r1, r3, #15
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	1e5a      	subs	r2, r3, #1
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003170:	e007      	b.n	8003182 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 020f 	bic.w	r2, r2, #15
 8003180:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003186:	f023 0303 	bic.w	r3, r3, #3
 800318a:	f043 0201 	orr.w	r2, r3, #1
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	655a      	str	r2, [r3, #84]	@ 0x54
 8003192:	e007      	b.n	80031a4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003198:	f043 0210 	orr.w	r2, r3, #16
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80031a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3724      	adds	r7, #36	@ 0x24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd90      	pop	{r4, r7, pc}
 80031ae:	bf00      	nop

080031b0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a5c      	ldr	r2, [pc, #368]	@ (8003330 <HAL_ADC_Start+0x180>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d004      	beq.n	80031cc <HAL_ADC_Start+0x1c>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a5b      	ldr	r2, [pc, #364]	@ (8003334 <HAL_ADC_Start+0x184>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d101      	bne.n	80031d0 <HAL_ADC_Start+0x20>
 80031cc:	4b5a      	ldr	r3, [pc, #360]	@ (8003338 <HAL_ADC_Start+0x188>)
 80031ce:	e000      	b.n	80031d2 <HAL_ADC_Start+0x22>
 80031d0:	4b5a      	ldr	r3, [pc, #360]	@ (800333c <HAL_ADC_Start+0x18c>)
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7ff fd7e 	bl	8002cd4 <LL_ADC_GetMultimode>
 80031d8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff fe1e 	bl	8002e20 <LL_ADC_REG_IsConversionOngoing>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f040 809a 	bne.w	8003320 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d101      	bne.n	80031fa <HAL_ADC_Start+0x4a>
 80031f6:	2302      	movs	r3, #2
 80031f8:	e095      	b.n	8003326 <HAL_ADC_Start+0x176>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 fcfc 	bl	8003c00 <ADC_Enable>
 8003208:	4603      	mov	r3, r0
 800320a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800320c:	7dfb      	ldrb	r3, [r7, #23]
 800320e:	2b00      	cmp	r3, #0
 8003210:	f040 8081 	bne.w	8003316 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003218:	4b49      	ldr	r3, [pc, #292]	@ (8003340 <HAL_ADC_Start+0x190>)
 800321a:	4013      	ands	r3, r2
 800321c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a42      	ldr	r2, [pc, #264]	@ (8003334 <HAL_ADC_Start+0x184>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d002      	beq.n	8003234 <HAL_ADC_Start+0x84>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	e000      	b.n	8003236 <HAL_ADC_Start+0x86>
 8003234:	4b3e      	ldr	r3, [pc, #248]	@ (8003330 <HAL_ADC_Start+0x180>)
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6812      	ldr	r2, [r2, #0]
 800323a:	4293      	cmp	r3, r2
 800323c:	d002      	beq.n	8003244 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d105      	bne.n	8003250 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003248:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003254:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003258:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800325c:	d106      	bne.n	800326c <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003262:	f023 0206 	bic.w	r2, r3, #6
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	659a      	str	r2, [r3, #88]	@ 0x58
 800326a:	e002      	b.n	8003272 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	221c      	movs	r2, #28
 8003278:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a2b      	ldr	r2, [pc, #172]	@ (8003334 <HAL_ADC_Start+0x184>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d002      	beq.n	8003292 <HAL_ADC_Start+0xe2>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	e000      	b.n	8003294 <HAL_ADC_Start+0xe4>
 8003292:	4b27      	ldr	r3, [pc, #156]	@ (8003330 <HAL_ADC_Start+0x180>)
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	6812      	ldr	r2, [r2, #0]
 8003298:	4293      	cmp	r3, r2
 800329a:	d008      	beq.n	80032ae <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d005      	beq.n	80032ae <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	2b05      	cmp	r3, #5
 80032a6:	d002      	beq.n	80032ae <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	2b09      	cmp	r3, #9
 80032ac:	d114      	bne.n	80032d8 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d007      	beq.n	80032cc <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032c0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80032c4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff fd91 	bl	8002df8 <LL_ADC_REG_StartConversion>
 80032d6:	e025      	b.n	8003324 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032dc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a12      	ldr	r2, [pc, #72]	@ (8003334 <HAL_ADC_Start+0x184>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d002      	beq.n	80032f4 <HAL_ADC_Start+0x144>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	e000      	b.n	80032f6 <HAL_ADC_Start+0x146>
 80032f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003330 <HAL_ADC_Start+0x180>)
 80032f6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00f      	beq.n	8003324 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003308:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800330c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	655a      	str	r2, [r3, #84]	@ 0x54
 8003314:	e006      	b.n	8003324 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800331e:	e001      	b.n	8003324 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003320:	2302      	movs	r3, #2
 8003322:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003324:	7dfb      	ldrb	r3, [r7, #23]
}
 8003326:	4618      	mov	r0, r3
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	40022000 	.word	0x40022000
 8003334:	40022100 	.word	0x40022100
 8003338:	40022300 	.word	0x40022300
 800333c:	58026300 	.word	0x58026300
 8003340:	fffff0fe 	.word	0xfffff0fe

08003344 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b088      	sub	sp, #32
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a72      	ldr	r2, [pc, #456]	@ (800351c <HAL_ADC_PollForConversion+0x1d8>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d004      	beq.n	8003362 <HAL_ADC_PollForConversion+0x1e>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a70      	ldr	r2, [pc, #448]	@ (8003520 <HAL_ADC_PollForConversion+0x1dc>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d101      	bne.n	8003366 <HAL_ADC_PollForConversion+0x22>
 8003362:	4b70      	ldr	r3, [pc, #448]	@ (8003524 <HAL_ADC_PollForConversion+0x1e0>)
 8003364:	e000      	b.n	8003368 <HAL_ADC_PollForConversion+0x24>
 8003366:	4b70      	ldr	r3, [pc, #448]	@ (8003528 <HAL_ADC_PollForConversion+0x1e4>)
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff fcb3 	bl	8002cd4 <LL_ADC_GetMultimode>
 800336e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	2b08      	cmp	r3, #8
 8003376:	d102      	bne.n	800337e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003378:	2308      	movs	r3, #8
 800337a:	61fb      	str	r3, [r7, #28]
 800337c:	e037      	b.n	80033ee <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d005      	beq.n	8003390 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	2b05      	cmp	r3, #5
 8003388:	d002      	beq.n	8003390 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	2b09      	cmp	r3, #9
 800338e:	d111      	bne.n	80033b4 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b00      	cmp	r3, #0
 800339c:	d007      	beq.n	80033ae <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a2:	f043 0220 	orr.w	r2, r3, #32
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e0b1      	b.n	8003512 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80033ae:	2304      	movs	r3, #4
 80033b0:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80033b2:	e01c      	b.n	80033ee <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a58      	ldr	r2, [pc, #352]	@ (800351c <HAL_ADC_PollForConversion+0x1d8>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d004      	beq.n	80033c8 <HAL_ADC_PollForConversion+0x84>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a57      	ldr	r2, [pc, #348]	@ (8003520 <HAL_ADC_PollForConversion+0x1dc>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d101      	bne.n	80033cc <HAL_ADC_PollForConversion+0x88>
 80033c8:	4b56      	ldr	r3, [pc, #344]	@ (8003524 <HAL_ADC_PollForConversion+0x1e0>)
 80033ca:	e000      	b.n	80033ce <HAL_ADC_PollForConversion+0x8a>
 80033cc:	4b56      	ldr	r3, [pc, #344]	@ (8003528 <HAL_ADC_PollForConversion+0x1e4>)
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff fc8e 	bl	8002cf0 <LL_ADC_GetMultiDMATransfer>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d007      	beq.n	80033ea <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033de:	f043 0220 	orr.w	r2, r3, #32
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e093      	b.n	8003512 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80033ea:	2304      	movs	r3, #4
 80033ec:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80033ee:	f7ff fb1f 	bl	8002a30 <HAL_GetTick>
 80033f2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80033f4:	e021      	b.n	800343a <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fc:	d01d      	beq.n	800343a <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80033fe:	f7ff fb17 	bl	8002a30 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	429a      	cmp	r2, r3
 800340c:	d302      	bcc.n	8003414 <HAL_ADC_PollForConversion+0xd0>
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d112      	bne.n	800343a <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	4013      	ands	r3, r2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10b      	bne.n	800343a <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003426:	f043 0204 	orr.w	r2, r3, #4
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e06b      	b.n	8003512 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	4013      	ands	r3, r2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0d6      	beq.n	80033f6 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800344c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff fbad 	bl	8002bb8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d01c      	beq.n	800349e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	7d5b      	ldrb	r3, [r3, #21]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d118      	bne.n	800349e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	2b08      	cmp	r3, #8
 8003478:	d111      	bne.n	800349e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800347e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800348a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d105      	bne.n	800349e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003496:	f043 0201 	orr.w	r2, r3, #1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a1f      	ldr	r2, [pc, #124]	@ (8003520 <HAL_ADC_PollForConversion+0x1dc>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d002      	beq.n	80034ae <HAL_ADC_PollForConversion+0x16a>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	e000      	b.n	80034b0 <HAL_ADC_PollForConversion+0x16c>
 80034ae:	4b1b      	ldr	r3, [pc, #108]	@ (800351c <HAL_ADC_PollForConversion+0x1d8>)
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	6812      	ldr	r2, [r2, #0]
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d008      	beq.n	80034ca <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d005      	beq.n	80034ca <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	2b05      	cmp	r3, #5
 80034c2:	d002      	beq.n	80034ca <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	2b09      	cmp	r3, #9
 80034c8:	d104      	bne.n	80034d4 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	61bb      	str	r3, [r7, #24]
 80034d2:	e00c      	b.n	80034ee <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a11      	ldr	r2, [pc, #68]	@ (8003520 <HAL_ADC_PollForConversion+0x1dc>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d002      	beq.n	80034e4 <HAL_ADC_PollForConversion+0x1a0>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	e000      	b.n	80034e6 <HAL_ADC_PollForConversion+0x1a2>
 80034e4:	4b0d      	ldr	r3, [pc, #52]	@ (800351c <HAL_ADC_PollForConversion+0x1d8>)
 80034e6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d104      	bne.n	80034fe <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2208      	movs	r2, #8
 80034fa:	601a      	str	r2, [r3, #0]
 80034fc:	e008      	b.n	8003510 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d103      	bne.n	8003510 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	220c      	movs	r2, #12
 800350e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3720      	adds	r7, #32
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	40022000 	.word	0x40022000
 8003520:	40022100 	.word	0x40022100
 8003524:	40022300 	.word	0x40022300
 8003528:	58026300 	.word	0x58026300

0800352c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800353a:	4618      	mov	r0, r3
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
	...

08003548 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003548:	b590      	push	{r4, r7, lr}
 800354a:	b0a1      	sub	sp, #132	@ 0x84
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003552:	2300      	movs	r3, #0
 8003554:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003558:	2300      	movs	r3, #0
 800355a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	4a65      	ldr	r2, [pc, #404]	@ (80036f8 <HAL_ADC_ConfigChannel+0x1b0>)
 8003562:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800356a:	2b01      	cmp	r3, #1
 800356c:	d101      	bne.n	8003572 <HAL_ADC_ConfigChannel+0x2a>
 800356e:	2302      	movs	r3, #2
 8003570:	e32e      	b.n	8003bd0 <HAL_ADC_ConfigChannel+0x688>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f7ff fc4e 	bl	8002e20 <LL_ADC_REG_IsConversionOngoing>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	f040 8313 	bne.w	8003bb2 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	db2c      	blt.n	80035ee <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800359c:	2b00      	cmp	r3, #0
 800359e:	d108      	bne.n	80035b2 <HAL_ADC_ConfigChannel+0x6a>
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	0e9b      	lsrs	r3, r3, #26
 80035a6:	f003 031f 	and.w	r3, r3, #31
 80035aa:	2201      	movs	r2, #1
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	e016      	b.n	80035e0 <HAL_ADC_ConfigChannel+0x98>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80035ba:	fa93 f3a3 	rbit	r3, r3
 80035be:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80035c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035c2:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80035c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80035ca:	2320      	movs	r3, #32
 80035cc:	e003      	b.n	80035d6 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80035ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035d0:	fab3 f383 	clz	r3, r3
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	f003 031f 	and.w	r3, r3, #31
 80035da:	2201      	movs	r2, #1
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	6812      	ldr	r2, [r2, #0]
 80035e4:	69d1      	ldr	r1, [r2, #28]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6812      	ldr	r2, [r2, #0]
 80035ea:	430b      	orrs	r3, r1
 80035ec:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6818      	ldr	r0, [r3, #0]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	6859      	ldr	r1, [r3, #4]
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	461a      	mov	r2, r3
 80035fc:	f7ff faef 	bl	8002bde <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4618      	mov	r0, r3
 8003606:	f7ff fc0b 	bl	8002e20 <LL_ADC_REG_IsConversionOngoing>
 800360a:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4618      	mov	r0, r3
 8003612:	f7ff fc18 	bl	8002e46 <LL_ADC_INJ_IsConversionOngoing>
 8003616:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003618:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800361a:	2b00      	cmp	r3, #0
 800361c:	f040 80b8 	bne.w	8003790 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003620:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003622:	2b00      	cmp	r3, #0
 8003624:	f040 80b4 	bne.w	8003790 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6818      	ldr	r0, [r3, #0]
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	6819      	ldr	r1, [r3, #0]
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	461a      	mov	r2, r3
 8003636:	f7ff fafe 	bl	8002c36 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800363a:	4b30      	ldr	r3, [pc, #192]	@ (80036fc <HAL_ADC_ConfigChannel+0x1b4>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003642:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003646:	d10b      	bne.n	8003660 <HAL_ADC_ConfigChannel+0x118>
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	695a      	ldr	r2, [r3, #20]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	089b      	lsrs	r3, r3, #2
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	e01d      	b.n	800369c <HAL_ADC_ConfigChannel+0x154>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f003 0310 	and.w	r3, r3, #16
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10b      	bne.n	8003686 <HAL_ADC_ConfigChannel+0x13e>
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	695a      	ldr	r2, [r3, #20]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	089b      	lsrs	r3, r3, #2
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	e00a      	b.n	800369c <HAL_ADC_ConfigChannel+0x154>
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	695a      	ldr	r2, [r3, #20]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	089b      	lsrs	r3, r3, #2
 8003692:	f003 0304 	and.w	r3, r3, #4
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d02c      	beq.n	8003700 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6818      	ldr	r0, [r3, #0]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	6919      	ldr	r1, [r3, #16]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80036b4:	f7ff fa2c 	bl	8002b10 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6818      	ldr	r0, [r3, #0]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	6919      	ldr	r1, [r3, #16]
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	7e5b      	ldrb	r3, [r3, #25]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d102      	bne.n	80036ce <HAL_ADC_ConfigChannel+0x186>
 80036c8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80036cc:	e000      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x188>
 80036ce:	2300      	movs	r3, #0
 80036d0:	461a      	mov	r2, r3
 80036d2:	f7ff fa56 	bl	8002b82 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6818      	ldr	r0, [r3, #0]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	6919      	ldr	r1, [r3, #16]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	7e1b      	ldrb	r3, [r3, #24]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d102      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x1a4>
 80036e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80036ea:	e000      	b.n	80036ee <HAL_ADC_ConfigChannel+0x1a6>
 80036ec:	2300      	movs	r3, #0
 80036ee:	461a      	mov	r2, r3
 80036f0:	f7ff fa2e 	bl	8002b50 <LL_ADC_SetDataRightShift>
 80036f4:	e04c      	b.n	8003790 <HAL_ADC_ConfigChannel+0x248>
 80036f6:	bf00      	nop
 80036f8:	47ff0000 	.word	0x47ff0000
 80036fc:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003706:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	069b      	lsls	r3, r3, #26
 8003710:	429a      	cmp	r2, r3
 8003712:	d107      	bne.n	8003724 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003722:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800372a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	069b      	lsls	r3, r3, #26
 8003734:	429a      	cmp	r2, r3
 8003736:	d107      	bne.n	8003748 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003746:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800374e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	069b      	lsls	r3, r3, #26
 8003758:	429a      	cmp	r2, r3
 800375a:	d107      	bne.n	800376c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800376a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003772:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	069b      	lsls	r3, r3, #26
 800377c:	429a      	cmp	r2, r3
 800377e:	d107      	bne.n	8003790 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800378e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4618      	mov	r0, r3
 8003796:	f7ff fb1b 	bl	8002dd0 <LL_ADC_IsEnabled>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	f040 8211 	bne.w	8003bc4 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6818      	ldr	r0, [r3, #0]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	6819      	ldr	r1, [r3, #0]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	461a      	mov	r2, r3
 80037b0:	f7ff fa6c 	bl	8002c8c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	4aa1      	ldr	r2, [pc, #644]	@ (8003a40 <HAL_ADC_ConfigChannel+0x4f8>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	f040 812e 	bne.w	8003a1c <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10b      	bne.n	80037e8 <HAL_ADC_ConfigChannel+0x2a0>
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	0e9b      	lsrs	r3, r3, #26
 80037d6:	3301      	adds	r3, #1
 80037d8:	f003 031f 	and.w	r3, r3, #31
 80037dc:	2b09      	cmp	r3, #9
 80037de:	bf94      	ite	ls
 80037e0:	2301      	movls	r3, #1
 80037e2:	2300      	movhi	r3, #0
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	e019      	b.n	800381c <HAL_ADC_ConfigChannel+0x2d4>
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037f0:	fa93 f3a3 	rbit	r3, r3
 80037f4:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80037f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80037fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d101      	bne.n	8003804 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8003800:	2320      	movs	r3, #32
 8003802:	e003      	b.n	800380c <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8003804:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003806:	fab3 f383 	clz	r3, r3
 800380a:	b2db      	uxtb	r3, r3
 800380c:	3301      	adds	r3, #1
 800380e:	f003 031f 	and.w	r3, r3, #31
 8003812:	2b09      	cmp	r3, #9
 8003814:	bf94      	ite	ls
 8003816:	2301      	movls	r3, #1
 8003818:	2300      	movhi	r3, #0
 800381a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800381c:	2b00      	cmp	r3, #0
 800381e:	d079      	beq.n	8003914 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003828:	2b00      	cmp	r3, #0
 800382a:	d107      	bne.n	800383c <HAL_ADC_ConfigChannel+0x2f4>
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	0e9b      	lsrs	r3, r3, #26
 8003832:	3301      	adds	r3, #1
 8003834:	069b      	lsls	r3, r3, #26
 8003836:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800383a:	e015      	b.n	8003868 <HAL_ADC_ConfigChannel+0x320>
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003842:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003844:	fa93 f3a3 	rbit	r3, r3
 8003848:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800384a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800384c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800384e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8003854:	2320      	movs	r3, #32
 8003856:	e003      	b.n	8003860 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8003858:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800385a:	fab3 f383 	clz	r3, r3
 800385e:	b2db      	uxtb	r3, r3
 8003860:	3301      	adds	r3, #1
 8003862:	069b      	lsls	r3, r3, #26
 8003864:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003870:	2b00      	cmp	r3, #0
 8003872:	d109      	bne.n	8003888 <HAL_ADC_ConfigChannel+0x340>
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	0e9b      	lsrs	r3, r3, #26
 800387a:	3301      	adds	r3, #1
 800387c:	f003 031f 	and.w	r3, r3, #31
 8003880:	2101      	movs	r1, #1
 8003882:	fa01 f303 	lsl.w	r3, r1, r3
 8003886:	e017      	b.n	80038b8 <HAL_ADC_ConfigChannel+0x370>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003890:	fa93 f3a3 	rbit	r3, r3
 8003894:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003896:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003898:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800389a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80038a0:	2320      	movs	r3, #32
 80038a2:	e003      	b.n	80038ac <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80038a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038a6:	fab3 f383 	clz	r3, r3
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	3301      	adds	r3, #1
 80038ae:	f003 031f 	and.w	r3, r3, #31
 80038b2:	2101      	movs	r1, #1
 80038b4:	fa01 f303 	lsl.w	r3, r1, r3
 80038b8:	ea42 0103 	orr.w	r1, r2, r3
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10a      	bne.n	80038de <HAL_ADC_ConfigChannel+0x396>
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	0e9b      	lsrs	r3, r3, #26
 80038ce:	3301      	adds	r3, #1
 80038d0:	f003 021f 	and.w	r2, r3, #31
 80038d4:	4613      	mov	r3, r2
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	4413      	add	r3, r2
 80038da:	051b      	lsls	r3, r3, #20
 80038dc:	e018      	b.n	8003910 <HAL_ADC_ConfigChannel+0x3c8>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038e6:	fa93 f3a3 	rbit	r3, r3
 80038ea:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80038ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80038f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80038f6:	2320      	movs	r3, #32
 80038f8:	e003      	b.n	8003902 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80038fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038fc:	fab3 f383 	clz	r3, r3
 8003900:	b2db      	uxtb	r3, r3
 8003902:	3301      	adds	r3, #1
 8003904:	f003 021f 	and.w	r2, r3, #31
 8003908:	4613      	mov	r3, r2
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	4413      	add	r3, r2
 800390e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003910:	430b      	orrs	r3, r1
 8003912:	e07e      	b.n	8003a12 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800391c:	2b00      	cmp	r3, #0
 800391e:	d107      	bne.n	8003930 <HAL_ADC_ConfigChannel+0x3e8>
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	0e9b      	lsrs	r3, r3, #26
 8003926:	3301      	adds	r3, #1
 8003928:	069b      	lsls	r3, r3, #26
 800392a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800392e:	e015      	b.n	800395c <HAL_ADC_ConfigChannel+0x414>
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003938:	fa93 f3a3 	rbit	r3, r3
 800393c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800393e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003940:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003944:	2b00      	cmp	r3, #0
 8003946:	d101      	bne.n	800394c <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8003948:	2320      	movs	r3, #32
 800394a:	e003      	b.n	8003954 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 800394c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800394e:	fab3 f383 	clz	r3, r3
 8003952:	b2db      	uxtb	r3, r3
 8003954:	3301      	adds	r3, #1
 8003956:	069b      	lsls	r3, r3, #26
 8003958:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003964:	2b00      	cmp	r3, #0
 8003966:	d109      	bne.n	800397c <HAL_ADC_ConfigChannel+0x434>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	0e9b      	lsrs	r3, r3, #26
 800396e:	3301      	adds	r3, #1
 8003970:	f003 031f 	and.w	r3, r3, #31
 8003974:	2101      	movs	r1, #1
 8003976:	fa01 f303 	lsl.w	r3, r1, r3
 800397a:	e017      	b.n	80039ac <HAL_ADC_ConfigChannel+0x464>
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	fa93 f3a3 	rbit	r3, r3
 8003988:	61bb      	str	r3, [r7, #24]
  return result;
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800398e:	6a3b      	ldr	r3, [r7, #32]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8003994:	2320      	movs	r3, #32
 8003996:	e003      	b.n	80039a0 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8003998:	6a3b      	ldr	r3, [r7, #32]
 800399a:	fab3 f383 	clz	r3, r3
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	3301      	adds	r3, #1
 80039a2:	f003 031f 	and.w	r3, r3, #31
 80039a6:	2101      	movs	r1, #1
 80039a8:	fa01 f303 	lsl.w	r3, r1, r3
 80039ac:	ea42 0103 	orr.w	r1, r2, r3
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10d      	bne.n	80039d8 <HAL_ADC_ConfigChannel+0x490>
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	0e9b      	lsrs	r3, r3, #26
 80039c2:	3301      	adds	r3, #1
 80039c4:	f003 021f 	and.w	r2, r3, #31
 80039c8:	4613      	mov	r3, r2
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	4413      	add	r3, r2
 80039ce:	3b1e      	subs	r3, #30
 80039d0:	051b      	lsls	r3, r3, #20
 80039d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80039d6:	e01b      	b.n	8003a10 <HAL_ADC_ConfigChannel+0x4c8>
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	fa93 f3a3 	rbit	r3, r3
 80039e4:	60fb      	str	r3, [r7, #12]
  return result;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80039f0:	2320      	movs	r3, #32
 80039f2:	e003      	b.n	80039fc <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	fab3 f383 	clz	r3, r3
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	3301      	adds	r3, #1
 80039fe:	f003 021f 	and.w	r2, r3, #31
 8003a02:	4613      	mov	r3, r2
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	4413      	add	r3, r2
 8003a08:	3b1e      	subs	r3, #30
 8003a0a:	051b      	lsls	r3, r3, #20
 8003a0c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a10:	430b      	orrs	r3, r1
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	6892      	ldr	r2, [r2, #8]
 8003a16:	4619      	mov	r1, r3
 8003a18:	f7ff f90d 	bl	8002c36 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f280 80cf 	bge.w	8003bc4 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a06      	ldr	r2, [pc, #24]	@ (8003a44 <HAL_ADC_ConfigChannel+0x4fc>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d004      	beq.n	8003a3a <HAL_ADC_ConfigChannel+0x4f2>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a04      	ldr	r2, [pc, #16]	@ (8003a48 <HAL_ADC_ConfigChannel+0x500>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d10a      	bne.n	8003a50 <HAL_ADC_ConfigChannel+0x508>
 8003a3a:	4b04      	ldr	r3, [pc, #16]	@ (8003a4c <HAL_ADC_ConfigChannel+0x504>)
 8003a3c:	e009      	b.n	8003a52 <HAL_ADC_ConfigChannel+0x50a>
 8003a3e:	bf00      	nop
 8003a40:	47ff0000 	.word	0x47ff0000
 8003a44:	40022000 	.word	0x40022000
 8003a48:	40022100 	.word	0x40022100
 8003a4c:	40022300 	.word	0x40022300
 8003a50:	4b61      	ldr	r3, [pc, #388]	@ (8003bd8 <HAL_ADC_ConfigChannel+0x690>)
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7ff f84e 	bl	8002af4 <LL_ADC_GetCommonPathInternalCh>
 8003a58:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a5f      	ldr	r2, [pc, #380]	@ (8003bdc <HAL_ADC_ConfigChannel+0x694>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d004      	beq.n	8003a6e <HAL_ADC_ConfigChannel+0x526>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a5d      	ldr	r2, [pc, #372]	@ (8003be0 <HAL_ADC_ConfigChannel+0x698>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d10e      	bne.n	8003a8c <HAL_ADC_ConfigChannel+0x544>
 8003a6e:	485b      	ldr	r0, [pc, #364]	@ (8003bdc <HAL_ADC_ConfigChannel+0x694>)
 8003a70:	f7ff f9ae 	bl	8002dd0 <LL_ADC_IsEnabled>
 8003a74:	4604      	mov	r4, r0
 8003a76:	485a      	ldr	r0, [pc, #360]	@ (8003be0 <HAL_ADC_ConfigChannel+0x698>)
 8003a78:	f7ff f9aa 	bl	8002dd0 <LL_ADC_IsEnabled>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	4323      	orrs	r3, r4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	bf0c      	ite	eq
 8003a84:	2301      	moveq	r3, #1
 8003a86:	2300      	movne	r3, #0
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	e008      	b.n	8003a9e <HAL_ADC_ConfigChannel+0x556>
 8003a8c:	4855      	ldr	r0, [pc, #340]	@ (8003be4 <HAL_ADC_ConfigChannel+0x69c>)
 8003a8e:	f7ff f99f 	bl	8002dd0 <LL_ADC_IsEnabled>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	bf0c      	ite	eq
 8003a98:	2301      	moveq	r3, #1
 8003a9a:	2300      	movne	r3, #0
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d07d      	beq.n	8003b9e <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a50      	ldr	r2, [pc, #320]	@ (8003be8 <HAL_ADC_ConfigChannel+0x6a0>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d130      	bne.n	8003b0e <HAL_ADC_ConfigChannel+0x5c6>
 8003aac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003aae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d12b      	bne.n	8003b0e <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a4a      	ldr	r2, [pc, #296]	@ (8003be4 <HAL_ADC_ConfigChannel+0x69c>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	f040 8081 	bne.w	8003bc4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a45      	ldr	r2, [pc, #276]	@ (8003bdc <HAL_ADC_ConfigChannel+0x694>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d004      	beq.n	8003ad6 <HAL_ADC_ConfigChannel+0x58e>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a43      	ldr	r2, [pc, #268]	@ (8003be0 <HAL_ADC_ConfigChannel+0x698>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d101      	bne.n	8003ada <HAL_ADC_ConfigChannel+0x592>
 8003ad6:	4a45      	ldr	r2, [pc, #276]	@ (8003bec <HAL_ADC_ConfigChannel+0x6a4>)
 8003ad8:	e000      	b.n	8003adc <HAL_ADC_ConfigChannel+0x594>
 8003ada:	4a3f      	ldr	r2, [pc, #252]	@ (8003bd8 <HAL_ADC_ConfigChannel+0x690>)
 8003adc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ade:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	4610      	mov	r0, r2
 8003ae6:	f7fe fff2 	bl	8002ace <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003aea:	4b41      	ldr	r3, [pc, #260]	@ (8003bf0 <HAL_ADC_ConfigChannel+0x6a8>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	099b      	lsrs	r3, r3, #6
 8003af0:	4a40      	ldr	r2, [pc, #256]	@ (8003bf4 <HAL_ADC_ConfigChannel+0x6ac>)
 8003af2:	fba2 2303 	umull	r2, r3, r2, r3
 8003af6:	099b      	lsrs	r3, r3, #6
 8003af8:	3301      	adds	r3, #1
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003afe:	e002      	b.n	8003b06 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	3b01      	subs	r3, #1
 8003b04:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1f9      	bne.n	8003b00 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b0c:	e05a      	b.n	8003bc4 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a39      	ldr	r2, [pc, #228]	@ (8003bf8 <HAL_ADC_ConfigChannel+0x6b0>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d11e      	bne.n	8003b56 <HAL_ADC_ConfigChannel+0x60e>
 8003b18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b1a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d119      	bne.n	8003b56 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a2f      	ldr	r2, [pc, #188]	@ (8003be4 <HAL_ADC_ConfigChannel+0x69c>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d14b      	bne.n	8003bc4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a2a      	ldr	r2, [pc, #168]	@ (8003bdc <HAL_ADC_ConfigChannel+0x694>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d004      	beq.n	8003b40 <HAL_ADC_ConfigChannel+0x5f8>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a29      	ldr	r2, [pc, #164]	@ (8003be0 <HAL_ADC_ConfigChannel+0x698>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d101      	bne.n	8003b44 <HAL_ADC_ConfigChannel+0x5fc>
 8003b40:	4a2a      	ldr	r2, [pc, #168]	@ (8003bec <HAL_ADC_ConfigChannel+0x6a4>)
 8003b42:	e000      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x5fe>
 8003b44:	4a24      	ldr	r2, [pc, #144]	@ (8003bd8 <HAL_ADC_ConfigChannel+0x690>)
 8003b46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b48:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	4610      	mov	r0, r2
 8003b50:	f7fe ffbd 	bl	8002ace <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b54:	e036      	b.n	8003bc4 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a28      	ldr	r2, [pc, #160]	@ (8003bfc <HAL_ADC_ConfigChannel+0x6b4>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d131      	bne.n	8003bc4 <HAL_ADC_ConfigChannel+0x67c>
 8003b60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d12c      	bne.n	8003bc4 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a1d      	ldr	r2, [pc, #116]	@ (8003be4 <HAL_ADC_ConfigChannel+0x69c>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d127      	bne.n	8003bc4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a18      	ldr	r2, [pc, #96]	@ (8003bdc <HAL_ADC_ConfigChannel+0x694>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d004      	beq.n	8003b88 <HAL_ADC_ConfigChannel+0x640>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a17      	ldr	r2, [pc, #92]	@ (8003be0 <HAL_ADC_ConfigChannel+0x698>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d101      	bne.n	8003b8c <HAL_ADC_ConfigChannel+0x644>
 8003b88:	4a18      	ldr	r2, [pc, #96]	@ (8003bec <HAL_ADC_ConfigChannel+0x6a4>)
 8003b8a:	e000      	b.n	8003b8e <HAL_ADC_ConfigChannel+0x646>
 8003b8c:	4a12      	ldr	r2, [pc, #72]	@ (8003bd8 <HAL_ADC_ConfigChannel+0x690>)
 8003b8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b90:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003b94:	4619      	mov	r1, r3
 8003b96:	4610      	mov	r0, r2
 8003b98:	f7fe ff99 	bl	8002ace <LL_ADC_SetCommonPathInternalCh>
 8003b9c:	e012      	b.n	8003bc4 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ba2:	f043 0220 	orr.w	r2, r3, #32
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003bb0:	e008      	b.n	8003bc4 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bb6:	f043 0220 	orr.w	r2, r3, #32
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003bcc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3784      	adds	r7, #132	@ 0x84
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd90      	pop	{r4, r7, pc}
 8003bd8:	58026300 	.word	0x58026300
 8003bdc:	40022000 	.word	0x40022000
 8003be0:	40022100 	.word	0x40022100
 8003be4:	58026000 	.word	0x58026000
 8003be8:	cb840000 	.word	0xcb840000
 8003bec:	40022300 	.word	0x40022300
 8003bf0:	24000000 	.word	0x24000000
 8003bf4:	053e2d63 	.word	0x053e2d63
 8003bf8:	c7520000 	.word	0xc7520000
 8003bfc:	cfb80000 	.word	0xcfb80000

08003c00 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7ff f8df 	bl	8002dd0 <LL_ADC_IsEnabled>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d16e      	bne.n	8003cf6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689a      	ldr	r2, [r3, #8]
 8003c1e:	4b38      	ldr	r3, [pc, #224]	@ (8003d00 <ADC_Enable+0x100>)
 8003c20:	4013      	ands	r3, r2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00d      	beq.n	8003c42 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c2a:	f043 0210 	orr.w	r2, r3, #16
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c36:	f043 0201 	orr.w	r2, r3, #1
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e05a      	b.n	8003cf8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7ff f8ae 	bl	8002da8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003c4c:	f7fe fef0 	bl	8002a30 <HAL_GetTick>
 8003c50:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a2b      	ldr	r2, [pc, #172]	@ (8003d04 <ADC_Enable+0x104>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d004      	beq.n	8003c66 <ADC_Enable+0x66>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a29      	ldr	r2, [pc, #164]	@ (8003d08 <ADC_Enable+0x108>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d101      	bne.n	8003c6a <ADC_Enable+0x6a>
 8003c66:	4b29      	ldr	r3, [pc, #164]	@ (8003d0c <ADC_Enable+0x10c>)
 8003c68:	e000      	b.n	8003c6c <ADC_Enable+0x6c>
 8003c6a:	4b29      	ldr	r3, [pc, #164]	@ (8003d10 <ADC_Enable+0x110>)
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7ff f831 	bl	8002cd4 <LL_ADC_GetMultimode>
 8003c72:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a23      	ldr	r2, [pc, #140]	@ (8003d08 <ADC_Enable+0x108>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d002      	beq.n	8003c84 <ADC_Enable+0x84>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	e000      	b.n	8003c86 <ADC_Enable+0x86>
 8003c84:	4b1f      	ldr	r3, [pc, #124]	@ (8003d04 <ADC_Enable+0x104>)
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6812      	ldr	r2, [r2, #0]
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d02c      	beq.n	8003ce8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d130      	bne.n	8003cf6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c94:	e028      	b.n	8003ce8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7ff f898 	bl	8002dd0 <LL_ADC_IsEnabled>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d104      	bne.n	8003cb0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7ff f87c 	bl	8002da8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003cb0:	f7fe febe 	bl	8002a30 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d914      	bls.n	8003ce8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d00d      	beq.n	8003ce8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd0:	f043 0210 	orr.w	r2, r3, #16
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cdc:	f043 0201 	orr.w	r2, r3, #1
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e007      	b.n	8003cf8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d1cf      	bne.n	8003c96 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	8000003f 	.word	0x8000003f
 8003d04:	40022000 	.word	0x40022000
 8003d08:	40022100 	.word	0x40022100
 8003d0c:	40022300 	.word	0x40022300
 8003d10:	58026300 	.word	0x58026300

08003d14 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a7a      	ldr	r2, [pc, #488]	@ (8003f0c <ADC_ConfigureBoostMode+0x1f8>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d004      	beq.n	8003d30 <ADC_ConfigureBoostMode+0x1c>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a79      	ldr	r2, [pc, #484]	@ (8003f10 <ADC_ConfigureBoostMode+0x1fc>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d109      	bne.n	8003d44 <ADC_ConfigureBoostMode+0x30>
 8003d30:	4b78      	ldr	r3, [pc, #480]	@ (8003f14 <ADC_ConfigureBoostMode+0x200>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	bf14      	ite	ne
 8003d3c:	2301      	movne	r3, #1
 8003d3e:	2300      	moveq	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	e008      	b.n	8003d56 <ADC_ConfigureBoostMode+0x42>
 8003d44:	4b74      	ldr	r3, [pc, #464]	@ (8003f18 <ADC_ConfigureBoostMode+0x204>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	bf14      	ite	ne
 8003d50:	2301      	movne	r3, #1
 8003d52:	2300      	moveq	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d01c      	beq.n	8003d94 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003d5a:	f005 f8fb 	bl	8008f54 <HAL_RCC_GetHCLKFreq>
 8003d5e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d68:	d010      	beq.n	8003d8c <ADC_ConfigureBoostMode+0x78>
 8003d6a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d6e:	d873      	bhi.n	8003e58 <ADC_ConfigureBoostMode+0x144>
 8003d70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d74:	d002      	beq.n	8003d7c <ADC_ConfigureBoostMode+0x68>
 8003d76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d7a:	d16d      	bne.n	8003e58 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	0c1b      	lsrs	r3, r3, #16
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d88:	60fb      	str	r3, [r7, #12]
        break;
 8003d8a:	e068      	b.n	8003e5e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	089b      	lsrs	r3, r3, #2
 8003d90:	60fb      	str	r3, [r7, #12]
        break;
 8003d92:	e064      	b.n	8003e5e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003d94:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003d98:	f04f 0100 	mov.w	r1, #0
 8003d9c:	f006 fb40 	bl	800a420 <HAL_RCCEx_GetPeriphCLKFreq>
 8003da0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003daa:	d051      	beq.n	8003e50 <ADC_ConfigureBoostMode+0x13c>
 8003dac:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003db0:	d854      	bhi.n	8003e5c <ADC_ConfigureBoostMode+0x148>
 8003db2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003db6:	d047      	beq.n	8003e48 <ADC_ConfigureBoostMode+0x134>
 8003db8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003dbc:	d84e      	bhi.n	8003e5c <ADC_ConfigureBoostMode+0x148>
 8003dbe:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003dc2:	d03d      	beq.n	8003e40 <ADC_ConfigureBoostMode+0x12c>
 8003dc4:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003dc8:	d848      	bhi.n	8003e5c <ADC_ConfigureBoostMode+0x148>
 8003dca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003dce:	d033      	beq.n	8003e38 <ADC_ConfigureBoostMode+0x124>
 8003dd0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003dd4:	d842      	bhi.n	8003e5c <ADC_ConfigureBoostMode+0x148>
 8003dd6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003dda:	d029      	beq.n	8003e30 <ADC_ConfigureBoostMode+0x11c>
 8003ddc:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003de0:	d83c      	bhi.n	8003e5c <ADC_ConfigureBoostMode+0x148>
 8003de2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003de6:	d01a      	beq.n	8003e1e <ADC_ConfigureBoostMode+0x10a>
 8003de8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003dec:	d836      	bhi.n	8003e5c <ADC_ConfigureBoostMode+0x148>
 8003dee:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003df2:	d014      	beq.n	8003e1e <ADC_ConfigureBoostMode+0x10a>
 8003df4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003df8:	d830      	bhi.n	8003e5c <ADC_ConfigureBoostMode+0x148>
 8003dfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dfe:	d00e      	beq.n	8003e1e <ADC_ConfigureBoostMode+0x10a>
 8003e00:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e04:	d82a      	bhi.n	8003e5c <ADC_ConfigureBoostMode+0x148>
 8003e06:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003e0a:	d008      	beq.n	8003e1e <ADC_ConfigureBoostMode+0x10a>
 8003e0c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003e10:	d824      	bhi.n	8003e5c <ADC_ConfigureBoostMode+0x148>
 8003e12:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e16:	d002      	beq.n	8003e1e <ADC_ConfigureBoostMode+0x10a>
 8003e18:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003e1c:	d11e      	bne.n	8003e5c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	0c9b      	lsrs	r3, r3, #18
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2c:	60fb      	str	r3, [r7, #12]
        break;
 8003e2e:	e016      	b.n	8003e5e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	091b      	lsrs	r3, r3, #4
 8003e34:	60fb      	str	r3, [r7, #12]
        break;
 8003e36:	e012      	b.n	8003e5e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	095b      	lsrs	r3, r3, #5
 8003e3c:	60fb      	str	r3, [r7, #12]
        break;
 8003e3e:	e00e      	b.n	8003e5e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	099b      	lsrs	r3, r3, #6
 8003e44:	60fb      	str	r3, [r7, #12]
        break;
 8003e46:	e00a      	b.n	8003e5e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	09db      	lsrs	r3, r3, #7
 8003e4c:	60fb      	str	r3, [r7, #12]
        break;
 8003e4e:	e006      	b.n	8003e5e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	0a1b      	lsrs	r3, r3, #8
 8003e54:	60fb      	str	r3, [r7, #12]
        break;
 8003e56:	e002      	b.n	8003e5e <ADC_ConfigureBoostMode+0x14a>
        break;
 8003e58:	bf00      	nop
 8003e5a:	e000      	b.n	8003e5e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003e5c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003e5e:	f7fe fe17 	bl	8002a90 <HAL_GetREVID>
 8003e62:	4603      	mov	r3, r0
 8003e64:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d815      	bhi.n	8003e98 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4a2b      	ldr	r2, [pc, #172]	@ (8003f1c <ADC_ConfigureBoostMode+0x208>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d908      	bls.n	8003e86 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689a      	ldr	r2, [r3, #8]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e82:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003e84:	e03e      	b.n	8003f04 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689a      	ldr	r2, [r3, #8]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e94:	609a      	str	r2, [r3, #8]
}
 8003e96:	e035      	b.n	8003f04 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	085b      	lsrs	r3, r3, #1
 8003e9c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	4a1f      	ldr	r2, [pc, #124]	@ (8003f20 <ADC_ConfigureBoostMode+0x20c>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d808      	bhi.n	8003eb8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689a      	ldr	r2, [r3, #8]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003eb4:	609a      	str	r2, [r3, #8]
}
 8003eb6:	e025      	b.n	8003f04 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4a1a      	ldr	r2, [pc, #104]	@ (8003f24 <ADC_ConfigureBoostMode+0x210>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d80a      	bhi.n	8003ed6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ed2:	609a      	str	r2, [r3, #8]
}
 8003ed4:	e016      	b.n	8003f04 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	4a13      	ldr	r2, [pc, #76]	@ (8003f28 <ADC_ConfigureBoostMode+0x214>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d80a      	bhi.n	8003ef4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ef0:	609a      	str	r2, [r3, #8]
}
 8003ef2:	e007      	b.n	8003f04 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689a      	ldr	r2, [r3, #8]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003f02:	609a      	str	r2, [r3, #8]
}
 8003f04:	bf00      	nop
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	40022000 	.word	0x40022000
 8003f10:	40022100 	.word	0x40022100
 8003f14:	40022300 	.word	0x40022300
 8003f18:	58026300 	.word	0x58026300
 8003f1c:	01312d00 	.word	0x01312d00
 8003f20:	005f5e10 	.word	0x005f5e10
 8003f24:	00bebc20 	.word	0x00bebc20
 8003f28:	017d7840 	.word	0x017d7840

08003f2c <LL_ADC_IsEnabled>:
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d101      	bne.n	8003f44 <LL_ADC_IsEnabled+0x18>
 8003f40:	2301      	movs	r3, #1
 8003f42:	e000      	b.n	8003f46 <LL_ADC_IsEnabled+0x1a>
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <LL_ADC_REG_IsConversionOngoing>:
{
 8003f52:	b480      	push	{r7}
 8003f54:	b083      	sub	sp, #12
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 0304 	and.w	r3, r3, #4
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	d101      	bne.n	8003f6a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f66:	2301      	movs	r3, #1
 8003f68:	e000      	b.n	8003f6c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003f78:	b590      	push	{r4, r7, lr}
 8003f7a:	b09f      	sub	sp, #124	@ 0x7c
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d101      	bne.n	8003f96 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003f92:	2302      	movs	r3, #2
 8003f94:	e0be      	b.n	8004114 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a5c      	ldr	r2, [pc, #368]	@ (800411c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d102      	bne.n	8003fb6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003fb0:	4b5b      	ldr	r3, [pc, #364]	@ (8004120 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003fb2:	60bb      	str	r3, [r7, #8]
 8003fb4:	e001      	b.n	8003fba <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10b      	bne.n	8003fd8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fc4:	f043 0220 	orr.w	r2, r3, #32
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e09d      	b.n	8004114 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7ff ffb9 	bl	8003f52 <LL_ADC_REG_IsConversionOngoing>
 8003fe0:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7ff ffb3 	bl	8003f52 <LL_ADC_REG_IsConversionOngoing>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d17f      	bne.n	80040f2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003ff2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d17c      	bne.n	80040f2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a47      	ldr	r2, [pc, #284]	@ (800411c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d004      	beq.n	800400c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a46      	ldr	r2, [pc, #280]	@ (8004120 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d101      	bne.n	8004010 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800400c:	4b45      	ldr	r3, [pc, #276]	@ (8004124 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800400e:	e000      	b.n	8004012 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004010:	4b45      	ldr	r3, [pc, #276]	@ (8004128 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004012:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d039      	beq.n	8004090 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800401c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	431a      	orrs	r2, r3
 800402a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800402c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a3a      	ldr	r2, [pc, #232]	@ (800411c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d004      	beq.n	8004042 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a38      	ldr	r2, [pc, #224]	@ (8004120 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d10e      	bne.n	8004060 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004042:	4836      	ldr	r0, [pc, #216]	@ (800411c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004044:	f7ff ff72 	bl	8003f2c <LL_ADC_IsEnabled>
 8004048:	4604      	mov	r4, r0
 800404a:	4835      	ldr	r0, [pc, #212]	@ (8004120 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800404c:	f7ff ff6e 	bl	8003f2c <LL_ADC_IsEnabled>
 8004050:	4603      	mov	r3, r0
 8004052:	4323      	orrs	r3, r4
 8004054:	2b00      	cmp	r3, #0
 8004056:	bf0c      	ite	eq
 8004058:	2301      	moveq	r3, #1
 800405a:	2300      	movne	r3, #0
 800405c:	b2db      	uxtb	r3, r3
 800405e:	e008      	b.n	8004072 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004060:	4832      	ldr	r0, [pc, #200]	@ (800412c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004062:	f7ff ff63 	bl	8003f2c <LL_ADC_IsEnabled>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	bf0c      	ite	eq
 800406c:	2301      	moveq	r3, #1
 800406e:	2300      	movne	r3, #0
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d047      	beq.n	8004106 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004076:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004078:	689a      	ldr	r2, [r3, #8]
 800407a:	4b2d      	ldr	r3, [pc, #180]	@ (8004130 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800407c:	4013      	ands	r3, r2
 800407e:	683a      	ldr	r2, [r7, #0]
 8004080:	6811      	ldr	r1, [r2, #0]
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	6892      	ldr	r2, [r2, #8]
 8004086:	430a      	orrs	r2, r1
 8004088:	431a      	orrs	r2, r3
 800408a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800408c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800408e:	e03a      	b.n	8004106 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004090:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004098:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800409a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a1e      	ldr	r2, [pc, #120]	@ (800411c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d004      	beq.n	80040b0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a1d      	ldr	r2, [pc, #116]	@ (8004120 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d10e      	bne.n	80040ce <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80040b0:	481a      	ldr	r0, [pc, #104]	@ (800411c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80040b2:	f7ff ff3b 	bl	8003f2c <LL_ADC_IsEnabled>
 80040b6:	4604      	mov	r4, r0
 80040b8:	4819      	ldr	r0, [pc, #100]	@ (8004120 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040ba:	f7ff ff37 	bl	8003f2c <LL_ADC_IsEnabled>
 80040be:	4603      	mov	r3, r0
 80040c0:	4323      	orrs	r3, r4
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	bf0c      	ite	eq
 80040c6:	2301      	moveq	r3, #1
 80040c8:	2300      	movne	r3, #0
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	e008      	b.n	80040e0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80040ce:	4817      	ldr	r0, [pc, #92]	@ (800412c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80040d0:	f7ff ff2c 	bl	8003f2c <LL_ADC_IsEnabled>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	bf0c      	ite	eq
 80040da:	2301      	moveq	r3, #1
 80040dc:	2300      	movne	r3, #0
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d010      	beq.n	8004106 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80040e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	4b11      	ldr	r3, [pc, #68]	@ (8004130 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80040ea:	4013      	ands	r3, r2
 80040ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80040ee:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80040f0:	e009      	b.n	8004106 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040f6:	f043 0220 	orr.w	r2, r3, #32
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8004104:	e000      	b.n	8004108 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004106:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004110:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8004114:	4618      	mov	r0, r3
 8004116:	377c      	adds	r7, #124	@ 0x7c
 8004118:	46bd      	mov	sp, r7
 800411a:	bd90      	pop	{r4, r7, pc}
 800411c:	40022000 	.word	0x40022000
 8004120:	40022100 	.word	0x40022100
 8004124:	40022300 	.word	0x40022300
 8004128:	58026300 	.word	0x58026300
 800412c:	58026000 	.word	0x58026000
 8004130:	fffff0e0 	.word	0xfffff0e0

08004134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f003 0307 	and.w	r3, r3, #7
 8004142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004144:	4b0b      	ldr	r3, [pc, #44]	@ (8004174 <__NVIC_SetPriorityGrouping+0x40>)
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004150:	4013      	ands	r3, r2
 8004152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800415c:	4b06      	ldr	r3, [pc, #24]	@ (8004178 <__NVIC_SetPriorityGrouping+0x44>)
 800415e:	4313      	orrs	r3, r2
 8004160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004162:	4a04      	ldr	r2, [pc, #16]	@ (8004174 <__NVIC_SetPriorityGrouping+0x40>)
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	60d3      	str	r3, [r2, #12]
}
 8004168:	bf00      	nop
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	e000ed00 	.word	0xe000ed00
 8004178:	05fa0000 	.word	0x05fa0000

0800417c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004180:	4b04      	ldr	r3, [pc, #16]	@ (8004194 <__NVIC_GetPriorityGrouping+0x18>)
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	0a1b      	lsrs	r3, r3, #8
 8004186:	f003 0307 	and.w	r3, r3, #7
}
 800418a:	4618      	mov	r0, r3
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	e000ed00 	.word	0xe000ed00

08004198 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	4603      	mov	r3, r0
 80041a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80041a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	db0b      	blt.n	80041c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041aa:	88fb      	ldrh	r3, [r7, #6]
 80041ac:	f003 021f 	and.w	r2, r3, #31
 80041b0:	4907      	ldr	r1, [pc, #28]	@ (80041d0 <__NVIC_EnableIRQ+0x38>)
 80041b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041b6:	095b      	lsrs	r3, r3, #5
 80041b8:	2001      	movs	r0, #1
 80041ba:	fa00 f202 	lsl.w	r2, r0, r2
 80041be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041c2:	bf00      	nop
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	e000e100 	.word	0xe000e100

080041d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	4603      	mov	r3, r0
 80041dc:	6039      	str	r1, [r7, #0]
 80041de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80041e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	db0a      	blt.n	80041fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	490c      	ldr	r1, [pc, #48]	@ (8004220 <__NVIC_SetPriority+0x4c>)
 80041ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041f2:	0112      	lsls	r2, r2, #4
 80041f4:	b2d2      	uxtb	r2, r2
 80041f6:	440b      	add	r3, r1
 80041f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041fc:	e00a      	b.n	8004214 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	b2da      	uxtb	r2, r3
 8004202:	4908      	ldr	r1, [pc, #32]	@ (8004224 <__NVIC_SetPriority+0x50>)
 8004204:	88fb      	ldrh	r3, [r7, #6]
 8004206:	f003 030f 	and.w	r3, r3, #15
 800420a:	3b04      	subs	r3, #4
 800420c:	0112      	lsls	r2, r2, #4
 800420e:	b2d2      	uxtb	r2, r2
 8004210:	440b      	add	r3, r1
 8004212:	761a      	strb	r2, [r3, #24]
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	e000e100 	.word	0xe000e100
 8004224:	e000ed00 	.word	0xe000ed00

08004228 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004228:	b480      	push	{r7}
 800422a:	b089      	sub	sp, #36	@ 0x24
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	f1c3 0307 	rsb	r3, r3, #7
 8004242:	2b04      	cmp	r3, #4
 8004244:	bf28      	it	cs
 8004246:	2304      	movcs	r3, #4
 8004248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	3304      	adds	r3, #4
 800424e:	2b06      	cmp	r3, #6
 8004250:	d902      	bls.n	8004258 <NVIC_EncodePriority+0x30>
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	3b03      	subs	r3, #3
 8004256:	e000      	b.n	800425a <NVIC_EncodePriority+0x32>
 8004258:	2300      	movs	r3, #0
 800425a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800425c:	f04f 32ff 	mov.w	r2, #4294967295
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	fa02 f303 	lsl.w	r3, r2, r3
 8004266:	43da      	mvns	r2, r3
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	401a      	ands	r2, r3
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004270:	f04f 31ff 	mov.w	r1, #4294967295
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	fa01 f303 	lsl.w	r3, r1, r3
 800427a:	43d9      	mvns	r1, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004280:	4313      	orrs	r3, r2
         );
}
 8004282:	4618      	mov	r0, r3
 8004284:	3724      	adds	r7, #36	@ 0x24
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
	...

08004290 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3b01      	subs	r3, #1
 800429c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042a0:	d301      	bcc.n	80042a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042a2:	2301      	movs	r3, #1
 80042a4:	e00f      	b.n	80042c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042a6:	4a0a      	ldr	r2, [pc, #40]	@ (80042d0 <SysTick_Config+0x40>)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	3b01      	subs	r3, #1
 80042ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042ae:	210f      	movs	r1, #15
 80042b0:	f04f 30ff 	mov.w	r0, #4294967295
 80042b4:	f7ff ff8e 	bl	80041d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042b8:	4b05      	ldr	r3, [pc, #20]	@ (80042d0 <SysTick_Config+0x40>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042be:	4b04      	ldr	r3, [pc, #16]	@ (80042d0 <SysTick_Config+0x40>)
 80042c0:	2207      	movs	r2, #7
 80042c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	e000e010 	.word	0xe000e010

080042d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f7ff ff29 	bl	8004134 <__NVIC_SetPriorityGrouping>
}
 80042e2:	bf00      	nop
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b086      	sub	sp, #24
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	4603      	mov	r3, r0
 80042f2:	60b9      	str	r1, [r7, #8]
 80042f4:	607a      	str	r2, [r7, #4]
 80042f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80042f8:	f7ff ff40 	bl	800417c <__NVIC_GetPriorityGrouping>
 80042fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	68b9      	ldr	r1, [r7, #8]
 8004302:	6978      	ldr	r0, [r7, #20]
 8004304:	f7ff ff90 	bl	8004228 <NVIC_EncodePriority>
 8004308:	4602      	mov	r2, r0
 800430a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800430e:	4611      	mov	r1, r2
 8004310:	4618      	mov	r0, r3
 8004312:	f7ff ff5f 	bl	80041d4 <__NVIC_SetPriority>
}
 8004316:	bf00      	nop
 8004318:	3718      	adds	r7, #24
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b082      	sub	sp, #8
 8004322:	af00      	add	r7, sp, #0
 8004324:	4603      	mov	r3, r0
 8004326:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004328:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff ff33 	bl	8004198 <__NVIC_EnableIRQ>
}
 8004332:	bf00      	nop
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b082      	sub	sp, #8
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7ff ffa4 	bl	8004290 <SysTick_Config>
 8004348:	4603      	mov	r3, r0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
	...

08004354 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8004358:	4b07      	ldr	r3, [pc, #28]	@ (8004378 <HAL_GetCurrentCPUID+0x24>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	091b      	lsrs	r3, r3, #4
 800435e:	f003 030f 	and.w	r3, r3, #15
 8004362:	2b07      	cmp	r3, #7
 8004364:	d101      	bne.n	800436a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8004366:	2303      	movs	r3, #3
 8004368:	e000      	b.n	800436c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 800436a:	2301      	movs	r3, #1
  }
}
 800436c:	4618      	mov	r0, r3
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	e000ed00 	.word	0xe000ed00

0800437c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004384:	f7fe fb54 	bl	8002a30 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d101      	bne.n	8004394 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e316      	b.n	80049c2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a66      	ldr	r2, [pc, #408]	@ (8004534 <HAL_DMA_Init+0x1b8>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d04a      	beq.n	8004434 <HAL_DMA_Init+0xb8>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a65      	ldr	r2, [pc, #404]	@ (8004538 <HAL_DMA_Init+0x1bc>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d045      	beq.n	8004434 <HAL_DMA_Init+0xb8>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a63      	ldr	r2, [pc, #396]	@ (800453c <HAL_DMA_Init+0x1c0>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d040      	beq.n	8004434 <HAL_DMA_Init+0xb8>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a62      	ldr	r2, [pc, #392]	@ (8004540 <HAL_DMA_Init+0x1c4>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d03b      	beq.n	8004434 <HAL_DMA_Init+0xb8>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a60      	ldr	r2, [pc, #384]	@ (8004544 <HAL_DMA_Init+0x1c8>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d036      	beq.n	8004434 <HAL_DMA_Init+0xb8>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a5f      	ldr	r2, [pc, #380]	@ (8004548 <HAL_DMA_Init+0x1cc>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d031      	beq.n	8004434 <HAL_DMA_Init+0xb8>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a5d      	ldr	r2, [pc, #372]	@ (800454c <HAL_DMA_Init+0x1d0>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d02c      	beq.n	8004434 <HAL_DMA_Init+0xb8>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a5c      	ldr	r2, [pc, #368]	@ (8004550 <HAL_DMA_Init+0x1d4>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d027      	beq.n	8004434 <HAL_DMA_Init+0xb8>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a5a      	ldr	r2, [pc, #360]	@ (8004554 <HAL_DMA_Init+0x1d8>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d022      	beq.n	8004434 <HAL_DMA_Init+0xb8>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a59      	ldr	r2, [pc, #356]	@ (8004558 <HAL_DMA_Init+0x1dc>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d01d      	beq.n	8004434 <HAL_DMA_Init+0xb8>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a57      	ldr	r2, [pc, #348]	@ (800455c <HAL_DMA_Init+0x1e0>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d018      	beq.n	8004434 <HAL_DMA_Init+0xb8>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a56      	ldr	r2, [pc, #344]	@ (8004560 <HAL_DMA_Init+0x1e4>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d013      	beq.n	8004434 <HAL_DMA_Init+0xb8>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a54      	ldr	r2, [pc, #336]	@ (8004564 <HAL_DMA_Init+0x1e8>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d00e      	beq.n	8004434 <HAL_DMA_Init+0xb8>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a53      	ldr	r2, [pc, #332]	@ (8004568 <HAL_DMA_Init+0x1ec>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d009      	beq.n	8004434 <HAL_DMA_Init+0xb8>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a51      	ldr	r2, [pc, #324]	@ (800456c <HAL_DMA_Init+0x1f0>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d004      	beq.n	8004434 <HAL_DMA_Init+0xb8>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a50      	ldr	r2, [pc, #320]	@ (8004570 <HAL_DMA_Init+0x1f4>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d101      	bne.n	8004438 <HAL_DMA_Init+0xbc>
 8004434:	2301      	movs	r3, #1
 8004436:	e000      	b.n	800443a <HAL_DMA_Init+0xbe>
 8004438:	2300      	movs	r3, #0
 800443a:	2b00      	cmp	r3, #0
 800443c:	f000 813b 	beq.w	80046b6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2202      	movs	r2, #2
 8004444:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a37      	ldr	r2, [pc, #220]	@ (8004534 <HAL_DMA_Init+0x1b8>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d04a      	beq.n	80044f0 <HAL_DMA_Init+0x174>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a36      	ldr	r2, [pc, #216]	@ (8004538 <HAL_DMA_Init+0x1bc>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d045      	beq.n	80044f0 <HAL_DMA_Init+0x174>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a34      	ldr	r2, [pc, #208]	@ (800453c <HAL_DMA_Init+0x1c0>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d040      	beq.n	80044f0 <HAL_DMA_Init+0x174>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a33      	ldr	r2, [pc, #204]	@ (8004540 <HAL_DMA_Init+0x1c4>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d03b      	beq.n	80044f0 <HAL_DMA_Init+0x174>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a31      	ldr	r2, [pc, #196]	@ (8004544 <HAL_DMA_Init+0x1c8>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d036      	beq.n	80044f0 <HAL_DMA_Init+0x174>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a30      	ldr	r2, [pc, #192]	@ (8004548 <HAL_DMA_Init+0x1cc>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d031      	beq.n	80044f0 <HAL_DMA_Init+0x174>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a2e      	ldr	r2, [pc, #184]	@ (800454c <HAL_DMA_Init+0x1d0>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d02c      	beq.n	80044f0 <HAL_DMA_Init+0x174>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a2d      	ldr	r2, [pc, #180]	@ (8004550 <HAL_DMA_Init+0x1d4>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d027      	beq.n	80044f0 <HAL_DMA_Init+0x174>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a2b      	ldr	r2, [pc, #172]	@ (8004554 <HAL_DMA_Init+0x1d8>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d022      	beq.n	80044f0 <HAL_DMA_Init+0x174>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a2a      	ldr	r2, [pc, #168]	@ (8004558 <HAL_DMA_Init+0x1dc>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d01d      	beq.n	80044f0 <HAL_DMA_Init+0x174>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a28      	ldr	r2, [pc, #160]	@ (800455c <HAL_DMA_Init+0x1e0>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d018      	beq.n	80044f0 <HAL_DMA_Init+0x174>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a27      	ldr	r2, [pc, #156]	@ (8004560 <HAL_DMA_Init+0x1e4>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d013      	beq.n	80044f0 <HAL_DMA_Init+0x174>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a25      	ldr	r2, [pc, #148]	@ (8004564 <HAL_DMA_Init+0x1e8>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d00e      	beq.n	80044f0 <HAL_DMA_Init+0x174>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a24      	ldr	r2, [pc, #144]	@ (8004568 <HAL_DMA_Init+0x1ec>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d009      	beq.n	80044f0 <HAL_DMA_Init+0x174>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a22      	ldr	r2, [pc, #136]	@ (800456c <HAL_DMA_Init+0x1f0>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d004      	beq.n	80044f0 <HAL_DMA_Init+0x174>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a21      	ldr	r2, [pc, #132]	@ (8004570 <HAL_DMA_Init+0x1f4>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d108      	bne.n	8004502 <HAL_DMA_Init+0x186>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0201 	bic.w	r2, r2, #1
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	e007      	b.n	8004512 <HAL_DMA_Init+0x196>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 0201 	bic.w	r2, r2, #1
 8004510:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004512:	e02f      	b.n	8004574 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004514:	f7fe fa8c 	bl	8002a30 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b05      	cmp	r3, #5
 8004520:	d928      	bls.n	8004574 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2220      	movs	r2, #32
 8004526:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2203      	movs	r2, #3
 800452c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e246      	b.n	80049c2 <HAL_DMA_Init+0x646>
 8004534:	40020010 	.word	0x40020010
 8004538:	40020028 	.word	0x40020028
 800453c:	40020040 	.word	0x40020040
 8004540:	40020058 	.word	0x40020058
 8004544:	40020070 	.word	0x40020070
 8004548:	40020088 	.word	0x40020088
 800454c:	400200a0 	.word	0x400200a0
 8004550:	400200b8 	.word	0x400200b8
 8004554:	40020410 	.word	0x40020410
 8004558:	40020428 	.word	0x40020428
 800455c:	40020440 	.word	0x40020440
 8004560:	40020458 	.word	0x40020458
 8004564:	40020470 	.word	0x40020470
 8004568:	40020488 	.word	0x40020488
 800456c:	400204a0 	.word	0x400204a0
 8004570:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1c8      	bne.n	8004514 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	4b83      	ldr	r3, [pc, #524]	@ (800479c <HAL_DMA_Init+0x420>)
 800458e:	4013      	ands	r3, r2
 8004590:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800459a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045a6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045b2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	4313      	orrs	r3, r2
 80045be:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c4:	2b04      	cmp	r3, #4
 80045c6:	d107      	bne.n	80045d8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d0:	4313      	orrs	r3, r2
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80045d8:	4b71      	ldr	r3, [pc, #452]	@ (80047a0 <HAL_DMA_Init+0x424>)
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	4b71      	ldr	r3, [pc, #452]	@ (80047a4 <HAL_DMA_Init+0x428>)
 80045de:	4013      	ands	r3, r2
 80045e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045e4:	d328      	bcc.n	8004638 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2b28      	cmp	r3, #40	@ 0x28
 80045ec:	d903      	bls.n	80045f6 <HAL_DMA_Init+0x27a>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80045f4:	d917      	bls.n	8004626 <HAL_DMA_Init+0x2aa>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	2b3e      	cmp	r3, #62	@ 0x3e
 80045fc:	d903      	bls.n	8004606 <HAL_DMA_Init+0x28a>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2b42      	cmp	r3, #66	@ 0x42
 8004604:	d90f      	bls.n	8004626 <HAL_DMA_Init+0x2aa>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	2b46      	cmp	r3, #70	@ 0x46
 800460c:	d903      	bls.n	8004616 <HAL_DMA_Init+0x29a>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2b48      	cmp	r3, #72	@ 0x48
 8004614:	d907      	bls.n	8004626 <HAL_DMA_Init+0x2aa>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2b4e      	cmp	r3, #78	@ 0x4e
 800461c:	d905      	bls.n	800462a <HAL_DMA_Init+0x2ae>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b52      	cmp	r3, #82	@ 0x52
 8004624:	d801      	bhi.n	800462a <HAL_DMA_Init+0x2ae>
 8004626:	2301      	movs	r3, #1
 8004628:	e000      	b.n	800462c <HAL_DMA_Init+0x2b0>
 800462a:	2300      	movs	r3, #0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d003      	beq.n	8004638 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004636:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f023 0307 	bic.w	r3, r3, #7
 800464e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	4313      	orrs	r3, r2
 8004658:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465e:	2b04      	cmp	r3, #4
 8004660:	d117      	bne.n	8004692 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	4313      	orrs	r3, r2
 800466a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00e      	beq.n	8004692 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f001 fdcf 	bl	8006218 <DMA_CheckFifoParam>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d008      	beq.n	8004692 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2240      	movs	r2, #64	@ 0x40
 8004684:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e197      	b.n	80049c2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f001 fd0a 	bl	80060b4 <DMA_CalcBaseAndBitshift>
 80046a0:	4603      	mov	r3, r0
 80046a2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046a8:	f003 031f 	and.w	r3, r3, #31
 80046ac:	223f      	movs	r2, #63	@ 0x3f
 80046ae:	409a      	lsls	r2, r3
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	609a      	str	r2, [r3, #8]
 80046b4:	e0cd      	b.n	8004852 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a3b      	ldr	r2, [pc, #236]	@ (80047a8 <HAL_DMA_Init+0x42c>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d022      	beq.n	8004706 <HAL_DMA_Init+0x38a>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a39      	ldr	r2, [pc, #228]	@ (80047ac <HAL_DMA_Init+0x430>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d01d      	beq.n	8004706 <HAL_DMA_Init+0x38a>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a38      	ldr	r2, [pc, #224]	@ (80047b0 <HAL_DMA_Init+0x434>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d018      	beq.n	8004706 <HAL_DMA_Init+0x38a>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a36      	ldr	r2, [pc, #216]	@ (80047b4 <HAL_DMA_Init+0x438>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d013      	beq.n	8004706 <HAL_DMA_Init+0x38a>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a35      	ldr	r2, [pc, #212]	@ (80047b8 <HAL_DMA_Init+0x43c>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d00e      	beq.n	8004706 <HAL_DMA_Init+0x38a>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a33      	ldr	r2, [pc, #204]	@ (80047bc <HAL_DMA_Init+0x440>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d009      	beq.n	8004706 <HAL_DMA_Init+0x38a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a32      	ldr	r2, [pc, #200]	@ (80047c0 <HAL_DMA_Init+0x444>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d004      	beq.n	8004706 <HAL_DMA_Init+0x38a>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a30      	ldr	r2, [pc, #192]	@ (80047c4 <HAL_DMA_Init+0x448>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d101      	bne.n	800470a <HAL_DMA_Init+0x38e>
 8004706:	2301      	movs	r3, #1
 8004708:	e000      	b.n	800470c <HAL_DMA_Init+0x390>
 800470a:	2300      	movs	r3, #0
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 8097 	beq.w	8004840 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a24      	ldr	r2, [pc, #144]	@ (80047a8 <HAL_DMA_Init+0x42c>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d021      	beq.n	8004760 <HAL_DMA_Init+0x3e4>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a22      	ldr	r2, [pc, #136]	@ (80047ac <HAL_DMA_Init+0x430>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d01c      	beq.n	8004760 <HAL_DMA_Init+0x3e4>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a21      	ldr	r2, [pc, #132]	@ (80047b0 <HAL_DMA_Init+0x434>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d017      	beq.n	8004760 <HAL_DMA_Init+0x3e4>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a1f      	ldr	r2, [pc, #124]	@ (80047b4 <HAL_DMA_Init+0x438>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d012      	beq.n	8004760 <HAL_DMA_Init+0x3e4>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a1e      	ldr	r2, [pc, #120]	@ (80047b8 <HAL_DMA_Init+0x43c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d00d      	beq.n	8004760 <HAL_DMA_Init+0x3e4>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a1c      	ldr	r2, [pc, #112]	@ (80047bc <HAL_DMA_Init+0x440>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d008      	beq.n	8004760 <HAL_DMA_Init+0x3e4>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a1b      	ldr	r2, [pc, #108]	@ (80047c0 <HAL_DMA_Init+0x444>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d003      	beq.n	8004760 <HAL_DMA_Init+0x3e4>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a19      	ldr	r2, [pc, #100]	@ (80047c4 <HAL_DMA_Init+0x448>)
 800475e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2202      	movs	r2, #2
 8004764:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	4b13      	ldr	r3, [pc, #76]	@ (80047c8 <HAL_DMA_Init+0x44c>)
 800477c:	4013      	ands	r3, r2
 800477e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	2b40      	cmp	r3, #64	@ 0x40
 8004786:	d021      	beq.n	80047cc <HAL_DMA_Init+0x450>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	2b80      	cmp	r3, #128	@ 0x80
 800478e:	d102      	bne.n	8004796 <HAL_DMA_Init+0x41a>
 8004790:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004794:	e01b      	b.n	80047ce <HAL_DMA_Init+0x452>
 8004796:	2300      	movs	r3, #0
 8004798:	e019      	b.n	80047ce <HAL_DMA_Init+0x452>
 800479a:	bf00      	nop
 800479c:	fe10803f 	.word	0xfe10803f
 80047a0:	5c001000 	.word	0x5c001000
 80047a4:	ffff0000 	.word	0xffff0000
 80047a8:	58025408 	.word	0x58025408
 80047ac:	5802541c 	.word	0x5802541c
 80047b0:	58025430 	.word	0x58025430
 80047b4:	58025444 	.word	0x58025444
 80047b8:	58025458 	.word	0x58025458
 80047bc:	5802546c 	.word	0x5802546c
 80047c0:	58025480 	.word	0x58025480
 80047c4:	58025494 	.word	0x58025494
 80047c8:	fffe000f 	.word	0xfffe000f
 80047cc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	68d2      	ldr	r2, [r2, #12]
 80047d2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80047d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80047dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80047e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80047ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80047f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80047fc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	4313      	orrs	r3, r2
 8004802:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	461a      	mov	r2, r3
 8004812:	4b6e      	ldr	r3, [pc, #440]	@ (80049cc <HAL_DMA_Init+0x650>)
 8004814:	4413      	add	r3, r2
 8004816:	4a6e      	ldr	r2, [pc, #440]	@ (80049d0 <HAL_DMA_Init+0x654>)
 8004818:	fba2 2303 	umull	r2, r3, r2, r3
 800481c:	091b      	lsrs	r3, r3, #4
 800481e:	009a      	lsls	r2, r3, #2
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f001 fc45 	bl	80060b4 <DMA_CalcBaseAndBitshift>
 800482a:	4603      	mov	r3, r0
 800482c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004832:	f003 031f 	and.w	r3, r3, #31
 8004836:	2201      	movs	r2, #1
 8004838:	409a      	lsls	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	605a      	str	r2, [r3, #4]
 800483e:	e008      	b.n	8004852 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2240      	movs	r2, #64	@ 0x40
 8004844:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2203      	movs	r2, #3
 800484a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e0b7      	b.n	80049c2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a5f      	ldr	r2, [pc, #380]	@ (80049d4 <HAL_DMA_Init+0x658>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d072      	beq.n	8004942 <HAL_DMA_Init+0x5c6>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a5d      	ldr	r2, [pc, #372]	@ (80049d8 <HAL_DMA_Init+0x65c>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d06d      	beq.n	8004942 <HAL_DMA_Init+0x5c6>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a5c      	ldr	r2, [pc, #368]	@ (80049dc <HAL_DMA_Init+0x660>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d068      	beq.n	8004942 <HAL_DMA_Init+0x5c6>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a5a      	ldr	r2, [pc, #360]	@ (80049e0 <HAL_DMA_Init+0x664>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d063      	beq.n	8004942 <HAL_DMA_Init+0x5c6>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a59      	ldr	r2, [pc, #356]	@ (80049e4 <HAL_DMA_Init+0x668>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d05e      	beq.n	8004942 <HAL_DMA_Init+0x5c6>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a57      	ldr	r2, [pc, #348]	@ (80049e8 <HAL_DMA_Init+0x66c>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d059      	beq.n	8004942 <HAL_DMA_Init+0x5c6>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a56      	ldr	r2, [pc, #344]	@ (80049ec <HAL_DMA_Init+0x670>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d054      	beq.n	8004942 <HAL_DMA_Init+0x5c6>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a54      	ldr	r2, [pc, #336]	@ (80049f0 <HAL_DMA_Init+0x674>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d04f      	beq.n	8004942 <HAL_DMA_Init+0x5c6>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a53      	ldr	r2, [pc, #332]	@ (80049f4 <HAL_DMA_Init+0x678>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d04a      	beq.n	8004942 <HAL_DMA_Init+0x5c6>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a51      	ldr	r2, [pc, #324]	@ (80049f8 <HAL_DMA_Init+0x67c>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d045      	beq.n	8004942 <HAL_DMA_Init+0x5c6>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a50      	ldr	r2, [pc, #320]	@ (80049fc <HAL_DMA_Init+0x680>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d040      	beq.n	8004942 <HAL_DMA_Init+0x5c6>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a4e      	ldr	r2, [pc, #312]	@ (8004a00 <HAL_DMA_Init+0x684>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d03b      	beq.n	8004942 <HAL_DMA_Init+0x5c6>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a4d      	ldr	r2, [pc, #308]	@ (8004a04 <HAL_DMA_Init+0x688>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d036      	beq.n	8004942 <HAL_DMA_Init+0x5c6>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a4b      	ldr	r2, [pc, #300]	@ (8004a08 <HAL_DMA_Init+0x68c>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d031      	beq.n	8004942 <HAL_DMA_Init+0x5c6>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a4a      	ldr	r2, [pc, #296]	@ (8004a0c <HAL_DMA_Init+0x690>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d02c      	beq.n	8004942 <HAL_DMA_Init+0x5c6>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a48      	ldr	r2, [pc, #288]	@ (8004a10 <HAL_DMA_Init+0x694>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d027      	beq.n	8004942 <HAL_DMA_Init+0x5c6>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a47      	ldr	r2, [pc, #284]	@ (8004a14 <HAL_DMA_Init+0x698>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d022      	beq.n	8004942 <HAL_DMA_Init+0x5c6>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a45      	ldr	r2, [pc, #276]	@ (8004a18 <HAL_DMA_Init+0x69c>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d01d      	beq.n	8004942 <HAL_DMA_Init+0x5c6>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a44      	ldr	r2, [pc, #272]	@ (8004a1c <HAL_DMA_Init+0x6a0>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d018      	beq.n	8004942 <HAL_DMA_Init+0x5c6>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a42      	ldr	r2, [pc, #264]	@ (8004a20 <HAL_DMA_Init+0x6a4>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d013      	beq.n	8004942 <HAL_DMA_Init+0x5c6>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a41      	ldr	r2, [pc, #260]	@ (8004a24 <HAL_DMA_Init+0x6a8>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d00e      	beq.n	8004942 <HAL_DMA_Init+0x5c6>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a3f      	ldr	r2, [pc, #252]	@ (8004a28 <HAL_DMA_Init+0x6ac>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d009      	beq.n	8004942 <HAL_DMA_Init+0x5c6>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a3e      	ldr	r2, [pc, #248]	@ (8004a2c <HAL_DMA_Init+0x6b0>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d004      	beq.n	8004942 <HAL_DMA_Init+0x5c6>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a3c      	ldr	r2, [pc, #240]	@ (8004a30 <HAL_DMA_Init+0x6b4>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d101      	bne.n	8004946 <HAL_DMA_Init+0x5ca>
 8004942:	2301      	movs	r3, #1
 8004944:	e000      	b.n	8004948 <HAL_DMA_Init+0x5cc>
 8004946:	2300      	movs	r3, #0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d032      	beq.n	80049b2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f001 fcdf 	bl	8006310 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	2b80      	cmp	r3, #128	@ 0x80
 8004958:	d102      	bne.n	8004960 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004968:	b2d2      	uxtb	r2, r2
 800496a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004974:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d010      	beq.n	80049a0 <HAL_DMA_Init+0x624>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	2b08      	cmp	r3, #8
 8004984:	d80c      	bhi.n	80049a0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f001 fd5c 	bl	8006444 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004990:	2200      	movs	r2, #0
 8004992:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800499c:	605a      	str	r2, [r3, #4]
 800499e:	e008      	b.n	80049b2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3718      	adds	r7, #24
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	a7fdabf8 	.word	0xa7fdabf8
 80049d0:	cccccccd 	.word	0xcccccccd
 80049d4:	40020010 	.word	0x40020010
 80049d8:	40020028 	.word	0x40020028
 80049dc:	40020040 	.word	0x40020040
 80049e0:	40020058 	.word	0x40020058
 80049e4:	40020070 	.word	0x40020070
 80049e8:	40020088 	.word	0x40020088
 80049ec:	400200a0 	.word	0x400200a0
 80049f0:	400200b8 	.word	0x400200b8
 80049f4:	40020410 	.word	0x40020410
 80049f8:	40020428 	.word	0x40020428
 80049fc:	40020440 	.word	0x40020440
 8004a00:	40020458 	.word	0x40020458
 8004a04:	40020470 	.word	0x40020470
 8004a08:	40020488 	.word	0x40020488
 8004a0c:	400204a0 	.word	0x400204a0
 8004a10:	400204b8 	.word	0x400204b8
 8004a14:	58025408 	.word	0x58025408
 8004a18:	5802541c 	.word	0x5802541c
 8004a1c:	58025430 	.word	0x58025430
 8004a20:	58025444 	.word	0x58025444
 8004a24:	58025458 	.word	0x58025458
 8004a28:	5802546c 	.word	0x5802546c
 8004a2c:	58025480 	.word	0x58025480
 8004a30:	58025494 	.word	0x58025494

08004a34 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
 8004a40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a42:	2300      	movs	r3, #0
 8004a44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d101      	bne.n	8004a50 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e226      	b.n	8004e9e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d101      	bne.n	8004a5e <HAL_DMA_Start_IT+0x2a>
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	e21f      	b.n	8004e9e <HAL_DMA_Start_IT+0x46a>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	f040 820a 	bne.w	8004e88 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2202      	movs	r2, #2
 8004a78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a68      	ldr	r2, [pc, #416]	@ (8004c28 <HAL_DMA_Start_IT+0x1f4>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d04a      	beq.n	8004b22 <HAL_DMA_Start_IT+0xee>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a66      	ldr	r2, [pc, #408]	@ (8004c2c <HAL_DMA_Start_IT+0x1f8>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d045      	beq.n	8004b22 <HAL_DMA_Start_IT+0xee>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a65      	ldr	r2, [pc, #404]	@ (8004c30 <HAL_DMA_Start_IT+0x1fc>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d040      	beq.n	8004b22 <HAL_DMA_Start_IT+0xee>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a63      	ldr	r2, [pc, #396]	@ (8004c34 <HAL_DMA_Start_IT+0x200>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d03b      	beq.n	8004b22 <HAL_DMA_Start_IT+0xee>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a62      	ldr	r2, [pc, #392]	@ (8004c38 <HAL_DMA_Start_IT+0x204>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d036      	beq.n	8004b22 <HAL_DMA_Start_IT+0xee>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a60      	ldr	r2, [pc, #384]	@ (8004c3c <HAL_DMA_Start_IT+0x208>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d031      	beq.n	8004b22 <HAL_DMA_Start_IT+0xee>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a5f      	ldr	r2, [pc, #380]	@ (8004c40 <HAL_DMA_Start_IT+0x20c>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d02c      	beq.n	8004b22 <HAL_DMA_Start_IT+0xee>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a5d      	ldr	r2, [pc, #372]	@ (8004c44 <HAL_DMA_Start_IT+0x210>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d027      	beq.n	8004b22 <HAL_DMA_Start_IT+0xee>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a5c      	ldr	r2, [pc, #368]	@ (8004c48 <HAL_DMA_Start_IT+0x214>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d022      	beq.n	8004b22 <HAL_DMA_Start_IT+0xee>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a5a      	ldr	r2, [pc, #360]	@ (8004c4c <HAL_DMA_Start_IT+0x218>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d01d      	beq.n	8004b22 <HAL_DMA_Start_IT+0xee>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a59      	ldr	r2, [pc, #356]	@ (8004c50 <HAL_DMA_Start_IT+0x21c>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d018      	beq.n	8004b22 <HAL_DMA_Start_IT+0xee>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a57      	ldr	r2, [pc, #348]	@ (8004c54 <HAL_DMA_Start_IT+0x220>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d013      	beq.n	8004b22 <HAL_DMA_Start_IT+0xee>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a56      	ldr	r2, [pc, #344]	@ (8004c58 <HAL_DMA_Start_IT+0x224>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d00e      	beq.n	8004b22 <HAL_DMA_Start_IT+0xee>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a54      	ldr	r2, [pc, #336]	@ (8004c5c <HAL_DMA_Start_IT+0x228>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d009      	beq.n	8004b22 <HAL_DMA_Start_IT+0xee>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a53      	ldr	r2, [pc, #332]	@ (8004c60 <HAL_DMA_Start_IT+0x22c>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d004      	beq.n	8004b22 <HAL_DMA_Start_IT+0xee>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a51      	ldr	r2, [pc, #324]	@ (8004c64 <HAL_DMA_Start_IT+0x230>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d108      	bne.n	8004b34 <HAL_DMA_Start_IT+0x100>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f022 0201 	bic.w	r2, r2, #1
 8004b30:	601a      	str	r2, [r3, #0]
 8004b32:	e007      	b.n	8004b44 <HAL_DMA_Start_IT+0x110>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f022 0201 	bic.w	r2, r2, #1
 8004b42:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	68b9      	ldr	r1, [r7, #8]
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f001 f906 	bl	8005d5c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a34      	ldr	r2, [pc, #208]	@ (8004c28 <HAL_DMA_Start_IT+0x1f4>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d04a      	beq.n	8004bf0 <HAL_DMA_Start_IT+0x1bc>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a33      	ldr	r2, [pc, #204]	@ (8004c2c <HAL_DMA_Start_IT+0x1f8>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d045      	beq.n	8004bf0 <HAL_DMA_Start_IT+0x1bc>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a31      	ldr	r2, [pc, #196]	@ (8004c30 <HAL_DMA_Start_IT+0x1fc>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d040      	beq.n	8004bf0 <HAL_DMA_Start_IT+0x1bc>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a30      	ldr	r2, [pc, #192]	@ (8004c34 <HAL_DMA_Start_IT+0x200>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d03b      	beq.n	8004bf0 <HAL_DMA_Start_IT+0x1bc>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a2e      	ldr	r2, [pc, #184]	@ (8004c38 <HAL_DMA_Start_IT+0x204>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d036      	beq.n	8004bf0 <HAL_DMA_Start_IT+0x1bc>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a2d      	ldr	r2, [pc, #180]	@ (8004c3c <HAL_DMA_Start_IT+0x208>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d031      	beq.n	8004bf0 <HAL_DMA_Start_IT+0x1bc>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a2b      	ldr	r2, [pc, #172]	@ (8004c40 <HAL_DMA_Start_IT+0x20c>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d02c      	beq.n	8004bf0 <HAL_DMA_Start_IT+0x1bc>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a2a      	ldr	r2, [pc, #168]	@ (8004c44 <HAL_DMA_Start_IT+0x210>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d027      	beq.n	8004bf0 <HAL_DMA_Start_IT+0x1bc>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a28      	ldr	r2, [pc, #160]	@ (8004c48 <HAL_DMA_Start_IT+0x214>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d022      	beq.n	8004bf0 <HAL_DMA_Start_IT+0x1bc>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a27      	ldr	r2, [pc, #156]	@ (8004c4c <HAL_DMA_Start_IT+0x218>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d01d      	beq.n	8004bf0 <HAL_DMA_Start_IT+0x1bc>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a25      	ldr	r2, [pc, #148]	@ (8004c50 <HAL_DMA_Start_IT+0x21c>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d018      	beq.n	8004bf0 <HAL_DMA_Start_IT+0x1bc>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a24      	ldr	r2, [pc, #144]	@ (8004c54 <HAL_DMA_Start_IT+0x220>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d013      	beq.n	8004bf0 <HAL_DMA_Start_IT+0x1bc>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a22      	ldr	r2, [pc, #136]	@ (8004c58 <HAL_DMA_Start_IT+0x224>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d00e      	beq.n	8004bf0 <HAL_DMA_Start_IT+0x1bc>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a21      	ldr	r2, [pc, #132]	@ (8004c5c <HAL_DMA_Start_IT+0x228>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d009      	beq.n	8004bf0 <HAL_DMA_Start_IT+0x1bc>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a1f      	ldr	r2, [pc, #124]	@ (8004c60 <HAL_DMA_Start_IT+0x22c>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d004      	beq.n	8004bf0 <HAL_DMA_Start_IT+0x1bc>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a1e      	ldr	r2, [pc, #120]	@ (8004c64 <HAL_DMA_Start_IT+0x230>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d101      	bne.n	8004bf4 <HAL_DMA_Start_IT+0x1c0>
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e000      	b.n	8004bf6 <HAL_DMA_Start_IT+0x1c2>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d036      	beq.n	8004c68 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f023 021e 	bic.w	r2, r3, #30
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f042 0216 	orr.w	r2, r2, #22
 8004c0c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d03e      	beq.n	8004c94 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f042 0208 	orr.w	r2, r2, #8
 8004c24:	601a      	str	r2, [r3, #0]
 8004c26:	e035      	b.n	8004c94 <HAL_DMA_Start_IT+0x260>
 8004c28:	40020010 	.word	0x40020010
 8004c2c:	40020028 	.word	0x40020028
 8004c30:	40020040 	.word	0x40020040
 8004c34:	40020058 	.word	0x40020058
 8004c38:	40020070 	.word	0x40020070
 8004c3c:	40020088 	.word	0x40020088
 8004c40:	400200a0 	.word	0x400200a0
 8004c44:	400200b8 	.word	0x400200b8
 8004c48:	40020410 	.word	0x40020410
 8004c4c:	40020428 	.word	0x40020428
 8004c50:	40020440 	.word	0x40020440
 8004c54:	40020458 	.word	0x40020458
 8004c58:	40020470 	.word	0x40020470
 8004c5c:	40020488 	.word	0x40020488
 8004c60:	400204a0 	.word	0x400204a0
 8004c64:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f023 020e 	bic.w	r2, r3, #14
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f042 020a 	orr.w	r2, r2, #10
 8004c7a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d007      	beq.n	8004c94 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 0204 	orr.w	r2, r2, #4
 8004c92:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a83      	ldr	r2, [pc, #524]	@ (8004ea8 <HAL_DMA_Start_IT+0x474>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d072      	beq.n	8004d84 <HAL_DMA_Start_IT+0x350>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a82      	ldr	r2, [pc, #520]	@ (8004eac <HAL_DMA_Start_IT+0x478>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d06d      	beq.n	8004d84 <HAL_DMA_Start_IT+0x350>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a80      	ldr	r2, [pc, #512]	@ (8004eb0 <HAL_DMA_Start_IT+0x47c>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d068      	beq.n	8004d84 <HAL_DMA_Start_IT+0x350>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a7f      	ldr	r2, [pc, #508]	@ (8004eb4 <HAL_DMA_Start_IT+0x480>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d063      	beq.n	8004d84 <HAL_DMA_Start_IT+0x350>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a7d      	ldr	r2, [pc, #500]	@ (8004eb8 <HAL_DMA_Start_IT+0x484>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d05e      	beq.n	8004d84 <HAL_DMA_Start_IT+0x350>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a7c      	ldr	r2, [pc, #496]	@ (8004ebc <HAL_DMA_Start_IT+0x488>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d059      	beq.n	8004d84 <HAL_DMA_Start_IT+0x350>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a7a      	ldr	r2, [pc, #488]	@ (8004ec0 <HAL_DMA_Start_IT+0x48c>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d054      	beq.n	8004d84 <HAL_DMA_Start_IT+0x350>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a79      	ldr	r2, [pc, #484]	@ (8004ec4 <HAL_DMA_Start_IT+0x490>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d04f      	beq.n	8004d84 <HAL_DMA_Start_IT+0x350>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a77      	ldr	r2, [pc, #476]	@ (8004ec8 <HAL_DMA_Start_IT+0x494>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d04a      	beq.n	8004d84 <HAL_DMA_Start_IT+0x350>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a76      	ldr	r2, [pc, #472]	@ (8004ecc <HAL_DMA_Start_IT+0x498>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d045      	beq.n	8004d84 <HAL_DMA_Start_IT+0x350>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a74      	ldr	r2, [pc, #464]	@ (8004ed0 <HAL_DMA_Start_IT+0x49c>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d040      	beq.n	8004d84 <HAL_DMA_Start_IT+0x350>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a73      	ldr	r2, [pc, #460]	@ (8004ed4 <HAL_DMA_Start_IT+0x4a0>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d03b      	beq.n	8004d84 <HAL_DMA_Start_IT+0x350>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a71      	ldr	r2, [pc, #452]	@ (8004ed8 <HAL_DMA_Start_IT+0x4a4>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d036      	beq.n	8004d84 <HAL_DMA_Start_IT+0x350>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a70      	ldr	r2, [pc, #448]	@ (8004edc <HAL_DMA_Start_IT+0x4a8>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d031      	beq.n	8004d84 <HAL_DMA_Start_IT+0x350>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a6e      	ldr	r2, [pc, #440]	@ (8004ee0 <HAL_DMA_Start_IT+0x4ac>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d02c      	beq.n	8004d84 <HAL_DMA_Start_IT+0x350>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a6d      	ldr	r2, [pc, #436]	@ (8004ee4 <HAL_DMA_Start_IT+0x4b0>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d027      	beq.n	8004d84 <HAL_DMA_Start_IT+0x350>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a6b      	ldr	r2, [pc, #428]	@ (8004ee8 <HAL_DMA_Start_IT+0x4b4>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d022      	beq.n	8004d84 <HAL_DMA_Start_IT+0x350>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a6a      	ldr	r2, [pc, #424]	@ (8004eec <HAL_DMA_Start_IT+0x4b8>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d01d      	beq.n	8004d84 <HAL_DMA_Start_IT+0x350>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a68      	ldr	r2, [pc, #416]	@ (8004ef0 <HAL_DMA_Start_IT+0x4bc>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d018      	beq.n	8004d84 <HAL_DMA_Start_IT+0x350>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a67      	ldr	r2, [pc, #412]	@ (8004ef4 <HAL_DMA_Start_IT+0x4c0>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d013      	beq.n	8004d84 <HAL_DMA_Start_IT+0x350>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a65      	ldr	r2, [pc, #404]	@ (8004ef8 <HAL_DMA_Start_IT+0x4c4>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d00e      	beq.n	8004d84 <HAL_DMA_Start_IT+0x350>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a64      	ldr	r2, [pc, #400]	@ (8004efc <HAL_DMA_Start_IT+0x4c8>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d009      	beq.n	8004d84 <HAL_DMA_Start_IT+0x350>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a62      	ldr	r2, [pc, #392]	@ (8004f00 <HAL_DMA_Start_IT+0x4cc>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d004      	beq.n	8004d84 <HAL_DMA_Start_IT+0x350>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a61      	ldr	r2, [pc, #388]	@ (8004f04 <HAL_DMA_Start_IT+0x4d0>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d101      	bne.n	8004d88 <HAL_DMA_Start_IT+0x354>
 8004d84:	2301      	movs	r3, #1
 8004d86:	e000      	b.n	8004d8a <HAL_DMA_Start_IT+0x356>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d01a      	beq.n	8004dc4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d007      	beq.n	8004dac <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004da6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004daa:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d007      	beq.n	8004dc4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dbe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004dc2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a37      	ldr	r2, [pc, #220]	@ (8004ea8 <HAL_DMA_Start_IT+0x474>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d04a      	beq.n	8004e64 <HAL_DMA_Start_IT+0x430>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a36      	ldr	r2, [pc, #216]	@ (8004eac <HAL_DMA_Start_IT+0x478>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d045      	beq.n	8004e64 <HAL_DMA_Start_IT+0x430>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a34      	ldr	r2, [pc, #208]	@ (8004eb0 <HAL_DMA_Start_IT+0x47c>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d040      	beq.n	8004e64 <HAL_DMA_Start_IT+0x430>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a33      	ldr	r2, [pc, #204]	@ (8004eb4 <HAL_DMA_Start_IT+0x480>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d03b      	beq.n	8004e64 <HAL_DMA_Start_IT+0x430>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a31      	ldr	r2, [pc, #196]	@ (8004eb8 <HAL_DMA_Start_IT+0x484>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d036      	beq.n	8004e64 <HAL_DMA_Start_IT+0x430>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a30      	ldr	r2, [pc, #192]	@ (8004ebc <HAL_DMA_Start_IT+0x488>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d031      	beq.n	8004e64 <HAL_DMA_Start_IT+0x430>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a2e      	ldr	r2, [pc, #184]	@ (8004ec0 <HAL_DMA_Start_IT+0x48c>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d02c      	beq.n	8004e64 <HAL_DMA_Start_IT+0x430>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a2d      	ldr	r2, [pc, #180]	@ (8004ec4 <HAL_DMA_Start_IT+0x490>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d027      	beq.n	8004e64 <HAL_DMA_Start_IT+0x430>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a2b      	ldr	r2, [pc, #172]	@ (8004ec8 <HAL_DMA_Start_IT+0x494>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d022      	beq.n	8004e64 <HAL_DMA_Start_IT+0x430>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a2a      	ldr	r2, [pc, #168]	@ (8004ecc <HAL_DMA_Start_IT+0x498>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d01d      	beq.n	8004e64 <HAL_DMA_Start_IT+0x430>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a28      	ldr	r2, [pc, #160]	@ (8004ed0 <HAL_DMA_Start_IT+0x49c>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d018      	beq.n	8004e64 <HAL_DMA_Start_IT+0x430>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a27      	ldr	r2, [pc, #156]	@ (8004ed4 <HAL_DMA_Start_IT+0x4a0>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d013      	beq.n	8004e64 <HAL_DMA_Start_IT+0x430>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a25      	ldr	r2, [pc, #148]	@ (8004ed8 <HAL_DMA_Start_IT+0x4a4>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d00e      	beq.n	8004e64 <HAL_DMA_Start_IT+0x430>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a24      	ldr	r2, [pc, #144]	@ (8004edc <HAL_DMA_Start_IT+0x4a8>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d009      	beq.n	8004e64 <HAL_DMA_Start_IT+0x430>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a22      	ldr	r2, [pc, #136]	@ (8004ee0 <HAL_DMA_Start_IT+0x4ac>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d004      	beq.n	8004e64 <HAL_DMA_Start_IT+0x430>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a21      	ldr	r2, [pc, #132]	@ (8004ee4 <HAL_DMA_Start_IT+0x4b0>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d108      	bne.n	8004e76 <HAL_DMA_Start_IT+0x442>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f042 0201 	orr.w	r2, r2, #1
 8004e72:	601a      	str	r2, [r3, #0]
 8004e74:	e012      	b.n	8004e9c <HAL_DMA_Start_IT+0x468>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f042 0201 	orr.w	r2, r2, #1
 8004e84:	601a      	str	r2, [r3, #0]
 8004e86:	e009      	b.n	8004e9c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e8e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3718      	adds	r7, #24
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	40020010 	.word	0x40020010
 8004eac:	40020028 	.word	0x40020028
 8004eb0:	40020040 	.word	0x40020040
 8004eb4:	40020058 	.word	0x40020058
 8004eb8:	40020070 	.word	0x40020070
 8004ebc:	40020088 	.word	0x40020088
 8004ec0:	400200a0 	.word	0x400200a0
 8004ec4:	400200b8 	.word	0x400200b8
 8004ec8:	40020410 	.word	0x40020410
 8004ecc:	40020428 	.word	0x40020428
 8004ed0:	40020440 	.word	0x40020440
 8004ed4:	40020458 	.word	0x40020458
 8004ed8:	40020470 	.word	0x40020470
 8004edc:	40020488 	.word	0x40020488
 8004ee0:	400204a0 	.word	0x400204a0
 8004ee4:	400204b8 	.word	0x400204b8
 8004ee8:	58025408 	.word	0x58025408
 8004eec:	5802541c 	.word	0x5802541c
 8004ef0:	58025430 	.word	0x58025430
 8004ef4:	58025444 	.word	0x58025444
 8004ef8:	58025458 	.word	0x58025458
 8004efc:	5802546c 	.word	0x5802546c
 8004f00:	58025480 	.word	0x58025480
 8004f04:	58025494 	.word	0x58025494

08004f08 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b08a      	sub	sp, #40	@ 0x28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004f10:	2300      	movs	r3, #0
 8004f12:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004f14:	4b67      	ldr	r3, [pc, #412]	@ (80050b4 <HAL_DMA_IRQHandler+0x1ac>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a67      	ldr	r2, [pc, #412]	@ (80050b8 <HAL_DMA_IRQHandler+0x1b0>)
 8004f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1e:	0a9b      	lsrs	r3, r3, #10
 8004f20:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f26:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f2c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004f2e:	6a3b      	ldr	r3, [r7, #32]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a5f      	ldr	r2, [pc, #380]	@ (80050bc <HAL_DMA_IRQHandler+0x1b4>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d04a      	beq.n	8004fda <HAL_DMA_IRQHandler+0xd2>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a5d      	ldr	r2, [pc, #372]	@ (80050c0 <HAL_DMA_IRQHandler+0x1b8>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d045      	beq.n	8004fda <HAL_DMA_IRQHandler+0xd2>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a5c      	ldr	r2, [pc, #368]	@ (80050c4 <HAL_DMA_IRQHandler+0x1bc>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d040      	beq.n	8004fda <HAL_DMA_IRQHandler+0xd2>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a5a      	ldr	r2, [pc, #360]	@ (80050c8 <HAL_DMA_IRQHandler+0x1c0>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d03b      	beq.n	8004fda <HAL_DMA_IRQHandler+0xd2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a59      	ldr	r2, [pc, #356]	@ (80050cc <HAL_DMA_IRQHandler+0x1c4>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d036      	beq.n	8004fda <HAL_DMA_IRQHandler+0xd2>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a57      	ldr	r2, [pc, #348]	@ (80050d0 <HAL_DMA_IRQHandler+0x1c8>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d031      	beq.n	8004fda <HAL_DMA_IRQHandler+0xd2>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a56      	ldr	r2, [pc, #344]	@ (80050d4 <HAL_DMA_IRQHandler+0x1cc>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d02c      	beq.n	8004fda <HAL_DMA_IRQHandler+0xd2>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a54      	ldr	r2, [pc, #336]	@ (80050d8 <HAL_DMA_IRQHandler+0x1d0>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d027      	beq.n	8004fda <HAL_DMA_IRQHandler+0xd2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a53      	ldr	r2, [pc, #332]	@ (80050dc <HAL_DMA_IRQHandler+0x1d4>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d022      	beq.n	8004fda <HAL_DMA_IRQHandler+0xd2>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a51      	ldr	r2, [pc, #324]	@ (80050e0 <HAL_DMA_IRQHandler+0x1d8>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d01d      	beq.n	8004fda <HAL_DMA_IRQHandler+0xd2>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a50      	ldr	r2, [pc, #320]	@ (80050e4 <HAL_DMA_IRQHandler+0x1dc>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d018      	beq.n	8004fda <HAL_DMA_IRQHandler+0xd2>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a4e      	ldr	r2, [pc, #312]	@ (80050e8 <HAL_DMA_IRQHandler+0x1e0>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d013      	beq.n	8004fda <HAL_DMA_IRQHandler+0xd2>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a4d      	ldr	r2, [pc, #308]	@ (80050ec <HAL_DMA_IRQHandler+0x1e4>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d00e      	beq.n	8004fda <HAL_DMA_IRQHandler+0xd2>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a4b      	ldr	r2, [pc, #300]	@ (80050f0 <HAL_DMA_IRQHandler+0x1e8>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d009      	beq.n	8004fda <HAL_DMA_IRQHandler+0xd2>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a4a      	ldr	r2, [pc, #296]	@ (80050f4 <HAL_DMA_IRQHandler+0x1ec>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d004      	beq.n	8004fda <HAL_DMA_IRQHandler+0xd2>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a48      	ldr	r2, [pc, #288]	@ (80050f8 <HAL_DMA_IRQHandler+0x1f0>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d101      	bne.n	8004fde <HAL_DMA_IRQHandler+0xd6>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e000      	b.n	8004fe0 <HAL_DMA_IRQHandler+0xd8>
 8004fde:	2300      	movs	r3, #0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f000 842b 	beq.w	800583c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fea:	f003 031f 	and.w	r3, r3, #31
 8004fee:	2208      	movs	r2, #8
 8004ff0:	409a      	lsls	r2, r3
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f000 80a2 	beq.w	8005140 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a2e      	ldr	r2, [pc, #184]	@ (80050bc <HAL_DMA_IRQHandler+0x1b4>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d04a      	beq.n	800509c <HAL_DMA_IRQHandler+0x194>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a2d      	ldr	r2, [pc, #180]	@ (80050c0 <HAL_DMA_IRQHandler+0x1b8>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d045      	beq.n	800509c <HAL_DMA_IRQHandler+0x194>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a2b      	ldr	r2, [pc, #172]	@ (80050c4 <HAL_DMA_IRQHandler+0x1bc>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d040      	beq.n	800509c <HAL_DMA_IRQHandler+0x194>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a2a      	ldr	r2, [pc, #168]	@ (80050c8 <HAL_DMA_IRQHandler+0x1c0>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d03b      	beq.n	800509c <HAL_DMA_IRQHandler+0x194>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a28      	ldr	r2, [pc, #160]	@ (80050cc <HAL_DMA_IRQHandler+0x1c4>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d036      	beq.n	800509c <HAL_DMA_IRQHandler+0x194>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a27      	ldr	r2, [pc, #156]	@ (80050d0 <HAL_DMA_IRQHandler+0x1c8>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d031      	beq.n	800509c <HAL_DMA_IRQHandler+0x194>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a25      	ldr	r2, [pc, #148]	@ (80050d4 <HAL_DMA_IRQHandler+0x1cc>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d02c      	beq.n	800509c <HAL_DMA_IRQHandler+0x194>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a24      	ldr	r2, [pc, #144]	@ (80050d8 <HAL_DMA_IRQHandler+0x1d0>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d027      	beq.n	800509c <HAL_DMA_IRQHandler+0x194>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a22      	ldr	r2, [pc, #136]	@ (80050dc <HAL_DMA_IRQHandler+0x1d4>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d022      	beq.n	800509c <HAL_DMA_IRQHandler+0x194>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a21      	ldr	r2, [pc, #132]	@ (80050e0 <HAL_DMA_IRQHandler+0x1d8>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d01d      	beq.n	800509c <HAL_DMA_IRQHandler+0x194>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a1f      	ldr	r2, [pc, #124]	@ (80050e4 <HAL_DMA_IRQHandler+0x1dc>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d018      	beq.n	800509c <HAL_DMA_IRQHandler+0x194>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a1e      	ldr	r2, [pc, #120]	@ (80050e8 <HAL_DMA_IRQHandler+0x1e0>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d013      	beq.n	800509c <HAL_DMA_IRQHandler+0x194>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a1c      	ldr	r2, [pc, #112]	@ (80050ec <HAL_DMA_IRQHandler+0x1e4>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d00e      	beq.n	800509c <HAL_DMA_IRQHandler+0x194>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a1b      	ldr	r2, [pc, #108]	@ (80050f0 <HAL_DMA_IRQHandler+0x1e8>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d009      	beq.n	800509c <HAL_DMA_IRQHandler+0x194>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a19      	ldr	r2, [pc, #100]	@ (80050f4 <HAL_DMA_IRQHandler+0x1ec>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d004      	beq.n	800509c <HAL_DMA_IRQHandler+0x194>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a18      	ldr	r2, [pc, #96]	@ (80050f8 <HAL_DMA_IRQHandler+0x1f0>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d12f      	bne.n	80050fc <HAL_DMA_IRQHandler+0x1f4>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0304 	and.w	r3, r3, #4
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	bf14      	ite	ne
 80050aa:	2301      	movne	r3, #1
 80050ac:	2300      	moveq	r3, #0
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	e02e      	b.n	8005110 <HAL_DMA_IRQHandler+0x208>
 80050b2:	bf00      	nop
 80050b4:	24000000 	.word	0x24000000
 80050b8:	1b4e81b5 	.word	0x1b4e81b5
 80050bc:	40020010 	.word	0x40020010
 80050c0:	40020028 	.word	0x40020028
 80050c4:	40020040 	.word	0x40020040
 80050c8:	40020058 	.word	0x40020058
 80050cc:	40020070 	.word	0x40020070
 80050d0:	40020088 	.word	0x40020088
 80050d4:	400200a0 	.word	0x400200a0
 80050d8:	400200b8 	.word	0x400200b8
 80050dc:	40020410 	.word	0x40020410
 80050e0:	40020428 	.word	0x40020428
 80050e4:	40020440 	.word	0x40020440
 80050e8:	40020458 	.word	0x40020458
 80050ec:	40020470 	.word	0x40020470
 80050f0:	40020488 	.word	0x40020488
 80050f4:	400204a0 	.word	0x400204a0
 80050f8:	400204b8 	.word	0x400204b8
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0308 	and.w	r3, r3, #8
 8005106:	2b00      	cmp	r3, #0
 8005108:	bf14      	ite	ne
 800510a:	2301      	movne	r3, #1
 800510c:	2300      	moveq	r3, #0
 800510e:	b2db      	uxtb	r3, r3
 8005110:	2b00      	cmp	r3, #0
 8005112:	d015      	beq.n	8005140 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 0204 	bic.w	r2, r2, #4
 8005122:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005128:	f003 031f 	and.w	r3, r3, #31
 800512c:	2208      	movs	r2, #8
 800512e:	409a      	lsls	r2, r3
 8005130:	6a3b      	ldr	r3, [r7, #32]
 8005132:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005138:	f043 0201 	orr.w	r2, r3, #1
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005144:	f003 031f 	and.w	r3, r3, #31
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	fa22 f303 	lsr.w	r3, r2, r3
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	2b00      	cmp	r3, #0
 8005154:	d06e      	beq.n	8005234 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a69      	ldr	r2, [pc, #420]	@ (8005300 <HAL_DMA_IRQHandler+0x3f8>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d04a      	beq.n	80051f6 <HAL_DMA_IRQHandler+0x2ee>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a67      	ldr	r2, [pc, #412]	@ (8005304 <HAL_DMA_IRQHandler+0x3fc>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d045      	beq.n	80051f6 <HAL_DMA_IRQHandler+0x2ee>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a66      	ldr	r2, [pc, #408]	@ (8005308 <HAL_DMA_IRQHandler+0x400>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d040      	beq.n	80051f6 <HAL_DMA_IRQHandler+0x2ee>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a64      	ldr	r2, [pc, #400]	@ (800530c <HAL_DMA_IRQHandler+0x404>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d03b      	beq.n	80051f6 <HAL_DMA_IRQHandler+0x2ee>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a63      	ldr	r2, [pc, #396]	@ (8005310 <HAL_DMA_IRQHandler+0x408>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d036      	beq.n	80051f6 <HAL_DMA_IRQHandler+0x2ee>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a61      	ldr	r2, [pc, #388]	@ (8005314 <HAL_DMA_IRQHandler+0x40c>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d031      	beq.n	80051f6 <HAL_DMA_IRQHandler+0x2ee>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a60      	ldr	r2, [pc, #384]	@ (8005318 <HAL_DMA_IRQHandler+0x410>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d02c      	beq.n	80051f6 <HAL_DMA_IRQHandler+0x2ee>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a5e      	ldr	r2, [pc, #376]	@ (800531c <HAL_DMA_IRQHandler+0x414>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d027      	beq.n	80051f6 <HAL_DMA_IRQHandler+0x2ee>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a5d      	ldr	r2, [pc, #372]	@ (8005320 <HAL_DMA_IRQHandler+0x418>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d022      	beq.n	80051f6 <HAL_DMA_IRQHandler+0x2ee>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a5b      	ldr	r2, [pc, #364]	@ (8005324 <HAL_DMA_IRQHandler+0x41c>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d01d      	beq.n	80051f6 <HAL_DMA_IRQHandler+0x2ee>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a5a      	ldr	r2, [pc, #360]	@ (8005328 <HAL_DMA_IRQHandler+0x420>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d018      	beq.n	80051f6 <HAL_DMA_IRQHandler+0x2ee>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a58      	ldr	r2, [pc, #352]	@ (800532c <HAL_DMA_IRQHandler+0x424>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d013      	beq.n	80051f6 <HAL_DMA_IRQHandler+0x2ee>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a57      	ldr	r2, [pc, #348]	@ (8005330 <HAL_DMA_IRQHandler+0x428>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d00e      	beq.n	80051f6 <HAL_DMA_IRQHandler+0x2ee>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a55      	ldr	r2, [pc, #340]	@ (8005334 <HAL_DMA_IRQHandler+0x42c>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d009      	beq.n	80051f6 <HAL_DMA_IRQHandler+0x2ee>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a54      	ldr	r2, [pc, #336]	@ (8005338 <HAL_DMA_IRQHandler+0x430>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d004      	beq.n	80051f6 <HAL_DMA_IRQHandler+0x2ee>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a52      	ldr	r2, [pc, #328]	@ (800533c <HAL_DMA_IRQHandler+0x434>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d10a      	bne.n	800520c <HAL_DMA_IRQHandler+0x304>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005200:	2b00      	cmp	r3, #0
 8005202:	bf14      	ite	ne
 8005204:	2301      	movne	r3, #1
 8005206:	2300      	moveq	r3, #0
 8005208:	b2db      	uxtb	r3, r3
 800520a:	e003      	b.n	8005214 <HAL_DMA_IRQHandler+0x30c>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2300      	movs	r3, #0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00d      	beq.n	8005234 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800521c:	f003 031f 	and.w	r3, r3, #31
 8005220:	2201      	movs	r2, #1
 8005222:	409a      	lsls	r2, r3
 8005224:	6a3b      	ldr	r3, [r7, #32]
 8005226:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800522c:	f043 0202 	orr.w	r2, r3, #2
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005238:	f003 031f 	and.w	r3, r3, #31
 800523c:	2204      	movs	r2, #4
 800523e:	409a      	lsls	r2, r3
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	4013      	ands	r3, r2
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 808f 	beq.w	8005368 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a2c      	ldr	r2, [pc, #176]	@ (8005300 <HAL_DMA_IRQHandler+0x3f8>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d04a      	beq.n	80052ea <HAL_DMA_IRQHandler+0x3e2>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a2a      	ldr	r2, [pc, #168]	@ (8005304 <HAL_DMA_IRQHandler+0x3fc>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d045      	beq.n	80052ea <HAL_DMA_IRQHandler+0x3e2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a29      	ldr	r2, [pc, #164]	@ (8005308 <HAL_DMA_IRQHandler+0x400>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d040      	beq.n	80052ea <HAL_DMA_IRQHandler+0x3e2>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a27      	ldr	r2, [pc, #156]	@ (800530c <HAL_DMA_IRQHandler+0x404>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d03b      	beq.n	80052ea <HAL_DMA_IRQHandler+0x3e2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a26      	ldr	r2, [pc, #152]	@ (8005310 <HAL_DMA_IRQHandler+0x408>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d036      	beq.n	80052ea <HAL_DMA_IRQHandler+0x3e2>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a24      	ldr	r2, [pc, #144]	@ (8005314 <HAL_DMA_IRQHandler+0x40c>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d031      	beq.n	80052ea <HAL_DMA_IRQHandler+0x3e2>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a23      	ldr	r2, [pc, #140]	@ (8005318 <HAL_DMA_IRQHandler+0x410>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d02c      	beq.n	80052ea <HAL_DMA_IRQHandler+0x3e2>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a21      	ldr	r2, [pc, #132]	@ (800531c <HAL_DMA_IRQHandler+0x414>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d027      	beq.n	80052ea <HAL_DMA_IRQHandler+0x3e2>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a20      	ldr	r2, [pc, #128]	@ (8005320 <HAL_DMA_IRQHandler+0x418>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d022      	beq.n	80052ea <HAL_DMA_IRQHandler+0x3e2>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a1e      	ldr	r2, [pc, #120]	@ (8005324 <HAL_DMA_IRQHandler+0x41c>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d01d      	beq.n	80052ea <HAL_DMA_IRQHandler+0x3e2>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a1d      	ldr	r2, [pc, #116]	@ (8005328 <HAL_DMA_IRQHandler+0x420>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d018      	beq.n	80052ea <HAL_DMA_IRQHandler+0x3e2>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a1b      	ldr	r2, [pc, #108]	@ (800532c <HAL_DMA_IRQHandler+0x424>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d013      	beq.n	80052ea <HAL_DMA_IRQHandler+0x3e2>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a1a      	ldr	r2, [pc, #104]	@ (8005330 <HAL_DMA_IRQHandler+0x428>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d00e      	beq.n	80052ea <HAL_DMA_IRQHandler+0x3e2>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a18      	ldr	r2, [pc, #96]	@ (8005334 <HAL_DMA_IRQHandler+0x42c>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d009      	beq.n	80052ea <HAL_DMA_IRQHandler+0x3e2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a17      	ldr	r2, [pc, #92]	@ (8005338 <HAL_DMA_IRQHandler+0x430>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d004      	beq.n	80052ea <HAL_DMA_IRQHandler+0x3e2>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a15      	ldr	r2, [pc, #84]	@ (800533c <HAL_DMA_IRQHandler+0x434>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d12a      	bne.n	8005340 <HAL_DMA_IRQHandler+0x438>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0302 	and.w	r3, r3, #2
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	bf14      	ite	ne
 80052f8:	2301      	movne	r3, #1
 80052fa:	2300      	moveq	r3, #0
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	e023      	b.n	8005348 <HAL_DMA_IRQHandler+0x440>
 8005300:	40020010 	.word	0x40020010
 8005304:	40020028 	.word	0x40020028
 8005308:	40020040 	.word	0x40020040
 800530c:	40020058 	.word	0x40020058
 8005310:	40020070 	.word	0x40020070
 8005314:	40020088 	.word	0x40020088
 8005318:	400200a0 	.word	0x400200a0
 800531c:	400200b8 	.word	0x400200b8
 8005320:	40020410 	.word	0x40020410
 8005324:	40020428 	.word	0x40020428
 8005328:	40020440 	.word	0x40020440
 800532c:	40020458 	.word	0x40020458
 8005330:	40020470 	.word	0x40020470
 8005334:	40020488 	.word	0x40020488
 8005338:	400204a0 	.word	0x400204a0
 800533c:	400204b8 	.word	0x400204b8
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2300      	movs	r3, #0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00d      	beq.n	8005368 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005350:	f003 031f 	and.w	r3, r3, #31
 8005354:	2204      	movs	r2, #4
 8005356:	409a      	lsls	r2, r3
 8005358:	6a3b      	ldr	r3, [r7, #32]
 800535a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005360:	f043 0204 	orr.w	r2, r3, #4
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800536c:	f003 031f 	and.w	r3, r3, #31
 8005370:	2210      	movs	r2, #16
 8005372:	409a      	lsls	r2, r3
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	4013      	ands	r3, r2
 8005378:	2b00      	cmp	r3, #0
 800537a:	f000 80a6 	beq.w	80054ca <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a85      	ldr	r2, [pc, #532]	@ (8005598 <HAL_DMA_IRQHandler+0x690>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d04a      	beq.n	800541e <HAL_DMA_IRQHandler+0x516>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a83      	ldr	r2, [pc, #524]	@ (800559c <HAL_DMA_IRQHandler+0x694>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d045      	beq.n	800541e <HAL_DMA_IRQHandler+0x516>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a82      	ldr	r2, [pc, #520]	@ (80055a0 <HAL_DMA_IRQHandler+0x698>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d040      	beq.n	800541e <HAL_DMA_IRQHandler+0x516>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a80      	ldr	r2, [pc, #512]	@ (80055a4 <HAL_DMA_IRQHandler+0x69c>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d03b      	beq.n	800541e <HAL_DMA_IRQHandler+0x516>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a7f      	ldr	r2, [pc, #508]	@ (80055a8 <HAL_DMA_IRQHandler+0x6a0>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d036      	beq.n	800541e <HAL_DMA_IRQHandler+0x516>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a7d      	ldr	r2, [pc, #500]	@ (80055ac <HAL_DMA_IRQHandler+0x6a4>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d031      	beq.n	800541e <HAL_DMA_IRQHandler+0x516>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a7c      	ldr	r2, [pc, #496]	@ (80055b0 <HAL_DMA_IRQHandler+0x6a8>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d02c      	beq.n	800541e <HAL_DMA_IRQHandler+0x516>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a7a      	ldr	r2, [pc, #488]	@ (80055b4 <HAL_DMA_IRQHandler+0x6ac>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d027      	beq.n	800541e <HAL_DMA_IRQHandler+0x516>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a79      	ldr	r2, [pc, #484]	@ (80055b8 <HAL_DMA_IRQHandler+0x6b0>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d022      	beq.n	800541e <HAL_DMA_IRQHandler+0x516>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a77      	ldr	r2, [pc, #476]	@ (80055bc <HAL_DMA_IRQHandler+0x6b4>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d01d      	beq.n	800541e <HAL_DMA_IRQHandler+0x516>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a76      	ldr	r2, [pc, #472]	@ (80055c0 <HAL_DMA_IRQHandler+0x6b8>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d018      	beq.n	800541e <HAL_DMA_IRQHandler+0x516>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a74      	ldr	r2, [pc, #464]	@ (80055c4 <HAL_DMA_IRQHandler+0x6bc>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d013      	beq.n	800541e <HAL_DMA_IRQHandler+0x516>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a73      	ldr	r2, [pc, #460]	@ (80055c8 <HAL_DMA_IRQHandler+0x6c0>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d00e      	beq.n	800541e <HAL_DMA_IRQHandler+0x516>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a71      	ldr	r2, [pc, #452]	@ (80055cc <HAL_DMA_IRQHandler+0x6c4>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d009      	beq.n	800541e <HAL_DMA_IRQHandler+0x516>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a70      	ldr	r2, [pc, #448]	@ (80055d0 <HAL_DMA_IRQHandler+0x6c8>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d004      	beq.n	800541e <HAL_DMA_IRQHandler+0x516>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a6e      	ldr	r2, [pc, #440]	@ (80055d4 <HAL_DMA_IRQHandler+0x6cc>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d10a      	bne.n	8005434 <HAL_DMA_IRQHandler+0x52c>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0308 	and.w	r3, r3, #8
 8005428:	2b00      	cmp	r3, #0
 800542a:	bf14      	ite	ne
 800542c:	2301      	movne	r3, #1
 800542e:	2300      	moveq	r3, #0
 8005430:	b2db      	uxtb	r3, r3
 8005432:	e009      	b.n	8005448 <HAL_DMA_IRQHandler+0x540>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0304 	and.w	r3, r3, #4
 800543e:	2b00      	cmp	r3, #0
 8005440:	bf14      	ite	ne
 8005442:	2301      	movne	r3, #1
 8005444:	2300      	moveq	r3, #0
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b00      	cmp	r3, #0
 800544a:	d03e      	beq.n	80054ca <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005450:	f003 031f 	and.w	r3, r3, #31
 8005454:	2210      	movs	r2, #16
 8005456:	409a      	lsls	r2, r3
 8005458:	6a3b      	ldr	r3, [r7, #32]
 800545a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d018      	beq.n	800549c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d108      	bne.n	800548a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800547c:	2b00      	cmp	r3, #0
 800547e:	d024      	beq.n	80054ca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	4798      	blx	r3
 8005488:	e01f      	b.n	80054ca <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800548e:	2b00      	cmp	r3, #0
 8005490:	d01b      	beq.n	80054ca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	4798      	blx	r3
 800549a:	e016      	b.n	80054ca <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d107      	bne.n	80054ba <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f022 0208 	bic.w	r2, r2, #8
 80054b8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054ce:	f003 031f 	and.w	r3, r3, #31
 80054d2:	2220      	movs	r2, #32
 80054d4:	409a      	lsls	r2, r3
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	4013      	ands	r3, r2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f000 8110 	beq.w	8005700 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a2c      	ldr	r2, [pc, #176]	@ (8005598 <HAL_DMA_IRQHandler+0x690>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d04a      	beq.n	8005580 <HAL_DMA_IRQHandler+0x678>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a2b      	ldr	r2, [pc, #172]	@ (800559c <HAL_DMA_IRQHandler+0x694>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d045      	beq.n	8005580 <HAL_DMA_IRQHandler+0x678>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a29      	ldr	r2, [pc, #164]	@ (80055a0 <HAL_DMA_IRQHandler+0x698>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d040      	beq.n	8005580 <HAL_DMA_IRQHandler+0x678>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a28      	ldr	r2, [pc, #160]	@ (80055a4 <HAL_DMA_IRQHandler+0x69c>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d03b      	beq.n	8005580 <HAL_DMA_IRQHandler+0x678>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a26      	ldr	r2, [pc, #152]	@ (80055a8 <HAL_DMA_IRQHandler+0x6a0>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d036      	beq.n	8005580 <HAL_DMA_IRQHandler+0x678>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a25      	ldr	r2, [pc, #148]	@ (80055ac <HAL_DMA_IRQHandler+0x6a4>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d031      	beq.n	8005580 <HAL_DMA_IRQHandler+0x678>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a23      	ldr	r2, [pc, #140]	@ (80055b0 <HAL_DMA_IRQHandler+0x6a8>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d02c      	beq.n	8005580 <HAL_DMA_IRQHandler+0x678>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a22      	ldr	r2, [pc, #136]	@ (80055b4 <HAL_DMA_IRQHandler+0x6ac>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d027      	beq.n	8005580 <HAL_DMA_IRQHandler+0x678>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a20      	ldr	r2, [pc, #128]	@ (80055b8 <HAL_DMA_IRQHandler+0x6b0>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d022      	beq.n	8005580 <HAL_DMA_IRQHandler+0x678>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a1f      	ldr	r2, [pc, #124]	@ (80055bc <HAL_DMA_IRQHandler+0x6b4>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d01d      	beq.n	8005580 <HAL_DMA_IRQHandler+0x678>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a1d      	ldr	r2, [pc, #116]	@ (80055c0 <HAL_DMA_IRQHandler+0x6b8>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d018      	beq.n	8005580 <HAL_DMA_IRQHandler+0x678>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a1c      	ldr	r2, [pc, #112]	@ (80055c4 <HAL_DMA_IRQHandler+0x6bc>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d013      	beq.n	8005580 <HAL_DMA_IRQHandler+0x678>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a1a      	ldr	r2, [pc, #104]	@ (80055c8 <HAL_DMA_IRQHandler+0x6c0>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d00e      	beq.n	8005580 <HAL_DMA_IRQHandler+0x678>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a19      	ldr	r2, [pc, #100]	@ (80055cc <HAL_DMA_IRQHandler+0x6c4>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d009      	beq.n	8005580 <HAL_DMA_IRQHandler+0x678>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a17      	ldr	r2, [pc, #92]	@ (80055d0 <HAL_DMA_IRQHandler+0x6c8>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d004      	beq.n	8005580 <HAL_DMA_IRQHandler+0x678>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a16      	ldr	r2, [pc, #88]	@ (80055d4 <HAL_DMA_IRQHandler+0x6cc>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d12b      	bne.n	80055d8 <HAL_DMA_IRQHandler+0x6d0>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0310 	and.w	r3, r3, #16
 800558a:	2b00      	cmp	r3, #0
 800558c:	bf14      	ite	ne
 800558e:	2301      	movne	r3, #1
 8005590:	2300      	moveq	r3, #0
 8005592:	b2db      	uxtb	r3, r3
 8005594:	e02a      	b.n	80055ec <HAL_DMA_IRQHandler+0x6e4>
 8005596:	bf00      	nop
 8005598:	40020010 	.word	0x40020010
 800559c:	40020028 	.word	0x40020028
 80055a0:	40020040 	.word	0x40020040
 80055a4:	40020058 	.word	0x40020058
 80055a8:	40020070 	.word	0x40020070
 80055ac:	40020088 	.word	0x40020088
 80055b0:	400200a0 	.word	0x400200a0
 80055b4:	400200b8 	.word	0x400200b8
 80055b8:	40020410 	.word	0x40020410
 80055bc:	40020428 	.word	0x40020428
 80055c0:	40020440 	.word	0x40020440
 80055c4:	40020458 	.word	0x40020458
 80055c8:	40020470 	.word	0x40020470
 80055cc:	40020488 	.word	0x40020488
 80055d0:	400204a0 	.word	0x400204a0
 80055d4:	400204b8 	.word	0x400204b8
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	bf14      	ite	ne
 80055e6:	2301      	movne	r3, #1
 80055e8:	2300      	moveq	r3, #0
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f000 8087 	beq.w	8005700 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055f6:	f003 031f 	and.w	r3, r3, #31
 80055fa:	2220      	movs	r2, #32
 80055fc:	409a      	lsls	r2, r3
 80055fe:	6a3b      	ldr	r3, [r7, #32]
 8005600:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005608:	b2db      	uxtb	r3, r3
 800560a:	2b04      	cmp	r3, #4
 800560c:	d139      	bne.n	8005682 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f022 0216 	bic.w	r2, r2, #22
 800561c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	695a      	ldr	r2, [r3, #20]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800562c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005632:	2b00      	cmp	r3, #0
 8005634:	d103      	bne.n	800563e <HAL_DMA_IRQHandler+0x736>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800563a:	2b00      	cmp	r3, #0
 800563c:	d007      	beq.n	800564e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 0208 	bic.w	r2, r2, #8
 800564c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005652:	f003 031f 	and.w	r3, r3, #31
 8005656:	223f      	movs	r2, #63	@ 0x3f
 8005658:	409a      	lsls	r2, r3
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005672:	2b00      	cmp	r3, #0
 8005674:	f000 834a 	beq.w	8005d0c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	4798      	blx	r3
          }
          return;
 8005680:	e344      	b.n	8005d0c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d018      	beq.n	80056c2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d108      	bne.n	80056b0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d02c      	beq.n	8005700 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	4798      	blx	r3
 80056ae:	e027      	b.n	8005700 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d023      	beq.n	8005700 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	4798      	blx	r3
 80056c0:	e01e      	b.n	8005700 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d10f      	bne.n	80056f0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 0210 	bic.w	r2, r2, #16
 80056de:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d003      	beq.n	8005700 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005704:	2b00      	cmp	r3, #0
 8005706:	f000 8306 	beq.w	8005d16 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	2b00      	cmp	r3, #0
 8005714:	f000 8088 	beq.w	8005828 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2204      	movs	r2, #4
 800571c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a7a      	ldr	r2, [pc, #488]	@ (8005910 <HAL_DMA_IRQHandler+0xa08>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d04a      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x8b8>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a79      	ldr	r2, [pc, #484]	@ (8005914 <HAL_DMA_IRQHandler+0xa0c>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d045      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x8b8>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a77      	ldr	r2, [pc, #476]	@ (8005918 <HAL_DMA_IRQHandler+0xa10>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d040      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x8b8>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a76      	ldr	r2, [pc, #472]	@ (800591c <HAL_DMA_IRQHandler+0xa14>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d03b      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x8b8>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a74      	ldr	r2, [pc, #464]	@ (8005920 <HAL_DMA_IRQHandler+0xa18>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d036      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x8b8>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a73      	ldr	r2, [pc, #460]	@ (8005924 <HAL_DMA_IRQHandler+0xa1c>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d031      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x8b8>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a71      	ldr	r2, [pc, #452]	@ (8005928 <HAL_DMA_IRQHandler+0xa20>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d02c      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x8b8>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a70      	ldr	r2, [pc, #448]	@ (800592c <HAL_DMA_IRQHandler+0xa24>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d027      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x8b8>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a6e      	ldr	r2, [pc, #440]	@ (8005930 <HAL_DMA_IRQHandler+0xa28>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d022      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x8b8>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a6d      	ldr	r2, [pc, #436]	@ (8005934 <HAL_DMA_IRQHandler+0xa2c>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d01d      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x8b8>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a6b      	ldr	r2, [pc, #428]	@ (8005938 <HAL_DMA_IRQHandler+0xa30>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d018      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x8b8>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a6a      	ldr	r2, [pc, #424]	@ (800593c <HAL_DMA_IRQHandler+0xa34>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d013      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x8b8>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a68      	ldr	r2, [pc, #416]	@ (8005940 <HAL_DMA_IRQHandler+0xa38>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d00e      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x8b8>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a67      	ldr	r2, [pc, #412]	@ (8005944 <HAL_DMA_IRQHandler+0xa3c>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d009      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x8b8>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a65      	ldr	r2, [pc, #404]	@ (8005948 <HAL_DMA_IRQHandler+0xa40>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d004      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x8b8>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a64      	ldr	r2, [pc, #400]	@ (800594c <HAL_DMA_IRQHandler+0xa44>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d108      	bne.n	80057d2 <HAL_DMA_IRQHandler+0x8ca>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f022 0201 	bic.w	r2, r2, #1
 80057ce:	601a      	str	r2, [r3, #0]
 80057d0:	e007      	b.n	80057e2 <HAL_DMA_IRQHandler+0x8da>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f022 0201 	bic.w	r2, r2, #1
 80057e0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	3301      	adds	r3, #1
 80057e6:	60fb      	str	r3, [r7, #12]
 80057e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d307      	bcc.n	80057fe <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0301 	and.w	r3, r3, #1
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d1f2      	bne.n	80057e2 <HAL_DMA_IRQHandler+0x8da>
 80057fc:	e000      	b.n	8005800 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80057fe:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0301 	and.w	r3, r3, #1
 800580a:	2b00      	cmp	r3, #0
 800580c:	d004      	beq.n	8005818 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2203      	movs	r2, #3
 8005812:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005816:	e003      	b.n	8005820 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800582c:	2b00      	cmp	r3, #0
 800582e:	f000 8272 	beq.w	8005d16 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	4798      	blx	r3
 800583a:	e26c      	b.n	8005d16 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a43      	ldr	r2, [pc, #268]	@ (8005950 <HAL_DMA_IRQHandler+0xa48>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d022      	beq.n	800588c <HAL_DMA_IRQHandler+0x984>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a42      	ldr	r2, [pc, #264]	@ (8005954 <HAL_DMA_IRQHandler+0xa4c>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d01d      	beq.n	800588c <HAL_DMA_IRQHandler+0x984>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a40      	ldr	r2, [pc, #256]	@ (8005958 <HAL_DMA_IRQHandler+0xa50>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d018      	beq.n	800588c <HAL_DMA_IRQHandler+0x984>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a3f      	ldr	r2, [pc, #252]	@ (800595c <HAL_DMA_IRQHandler+0xa54>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d013      	beq.n	800588c <HAL_DMA_IRQHandler+0x984>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a3d      	ldr	r2, [pc, #244]	@ (8005960 <HAL_DMA_IRQHandler+0xa58>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d00e      	beq.n	800588c <HAL_DMA_IRQHandler+0x984>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a3c      	ldr	r2, [pc, #240]	@ (8005964 <HAL_DMA_IRQHandler+0xa5c>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d009      	beq.n	800588c <HAL_DMA_IRQHandler+0x984>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a3a      	ldr	r2, [pc, #232]	@ (8005968 <HAL_DMA_IRQHandler+0xa60>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d004      	beq.n	800588c <HAL_DMA_IRQHandler+0x984>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a39      	ldr	r2, [pc, #228]	@ (800596c <HAL_DMA_IRQHandler+0xa64>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d101      	bne.n	8005890 <HAL_DMA_IRQHandler+0x988>
 800588c:	2301      	movs	r3, #1
 800588e:	e000      	b.n	8005892 <HAL_DMA_IRQHandler+0x98a>
 8005890:	2300      	movs	r3, #0
 8005892:	2b00      	cmp	r3, #0
 8005894:	f000 823f 	beq.w	8005d16 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058a4:	f003 031f 	and.w	r3, r3, #31
 80058a8:	2204      	movs	r2, #4
 80058aa:	409a      	lsls	r2, r3
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	4013      	ands	r3, r2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f000 80cd 	beq.w	8005a50 <HAL_DMA_IRQHandler+0xb48>
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	f003 0304 	and.w	r3, r3, #4
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 80c7 	beq.w	8005a50 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058c6:	f003 031f 	and.w	r3, r3, #31
 80058ca:	2204      	movs	r2, #4
 80058cc:	409a      	lsls	r2, r3
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d049      	beq.n	8005970 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d109      	bne.n	80058fa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f000 8210 	beq.w	8005d10 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058f8:	e20a      	b.n	8005d10 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f000 8206 	beq.w	8005d10 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800590c:	e200      	b.n	8005d10 <HAL_DMA_IRQHandler+0xe08>
 800590e:	bf00      	nop
 8005910:	40020010 	.word	0x40020010
 8005914:	40020028 	.word	0x40020028
 8005918:	40020040 	.word	0x40020040
 800591c:	40020058 	.word	0x40020058
 8005920:	40020070 	.word	0x40020070
 8005924:	40020088 	.word	0x40020088
 8005928:	400200a0 	.word	0x400200a0
 800592c:	400200b8 	.word	0x400200b8
 8005930:	40020410 	.word	0x40020410
 8005934:	40020428 	.word	0x40020428
 8005938:	40020440 	.word	0x40020440
 800593c:	40020458 	.word	0x40020458
 8005940:	40020470 	.word	0x40020470
 8005944:	40020488 	.word	0x40020488
 8005948:	400204a0 	.word	0x400204a0
 800594c:	400204b8 	.word	0x400204b8
 8005950:	58025408 	.word	0x58025408
 8005954:	5802541c 	.word	0x5802541c
 8005958:	58025430 	.word	0x58025430
 800595c:	58025444 	.word	0x58025444
 8005960:	58025458 	.word	0x58025458
 8005964:	5802546c 	.word	0x5802546c
 8005968:	58025480 	.word	0x58025480
 800596c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	f003 0320 	and.w	r3, r3, #32
 8005976:	2b00      	cmp	r3, #0
 8005978:	d160      	bne.n	8005a3c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a7f      	ldr	r2, [pc, #508]	@ (8005b7c <HAL_DMA_IRQHandler+0xc74>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d04a      	beq.n	8005a1a <HAL_DMA_IRQHandler+0xb12>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a7d      	ldr	r2, [pc, #500]	@ (8005b80 <HAL_DMA_IRQHandler+0xc78>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d045      	beq.n	8005a1a <HAL_DMA_IRQHandler+0xb12>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a7c      	ldr	r2, [pc, #496]	@ (8005b84 <HAL_DMA_IRQHandler+0xc7c>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d040      	beq.n	8005a1a <HAL_DMA_IRQHandler+0xb12>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a7a      	ldr	r2, [pc, #488]	@ (8005b88 <HAL_DMA_IRQHandler+0xc80>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d03b      	beq.n	8005a1a <HAL_DMA_IRQHandler+0xb12>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a79      	ldr	r2, [pc, #484]	@ (8005b8c <HAL_DMA_IRQHandler+0xc84>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d036      	beq.n	8005a1a <HAL_DMA_IRQHandler+0xb12>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a77      	ldr	r2, [pc, #476]	@ (8005b90 <HAL_DMA_IRQHandler+0xc88>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d031      	beq.n	8005a1a <HAL_DMA_IRQHandler+0xb12>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a76      	ldr	r2, [pc, #472]	@ (8005b94 <HAL_DMA_IRQHandler+0xc8c>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d02c      	beq.n	8005a1a <HAL_DMA_IRQHandler+0xb12>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a74      	ldr	r2, [pc, #464]	@ (8005b98 <HAL_DMA_IRQHandler+0xc90>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d027      	beq.n	8005a1a <HAL_DMA_IRQHandler+0xb12>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a73      	ldr	r2, [pc, #460]	@ (8005b9c <HAL_DMA_IRQHandler+0xc94>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d022      	beq.n	8005a1a <HAL_DMA_IRQHandler+0xb12>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a71      	ldr	r2, [pc, #452]	@ (8005ba0 <HAL_DMA_IRQHandler+0xc98>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d01d      	beq.n	8005a1a <HAL_DMA_IRQHandler+0xb12>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a70      	ldr	r2, [pc, #448]	@ (8005ba4 <HAL_DMA_IRQHandler+0xc9c>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d018      	beq.n	8005a1a <HAL_DMA_IRQHandler+0xb12>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a6e      	ldr	r2, [pc, #440]	@ (8005ba8 <HAL_DMA_IRQHandler+0xca0>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d013      	beq.n	8005a1a <HAL_DMA_IRQHandler+0xb12>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a6d      	ldr	r2, [pc, #436]	@ (8005bac <HAL_DMA_IRQHandler+0xca4>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d00e      	beq.n	8005a1a <HAL_DMA_IRQHandler+0xb12>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a6b      	ldr	r2, [pc, #428]	@ (8005bb0 <HAL_DMA_IRQHandler+0xca8>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d009      	beq.n	8005a1a <HAL_DMA_IRQHandler+0xb12>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a6a      	ldr	r2, [pc, #424]	@ (8005bb4 <HAL_DMA_IRQHandler+0xcac>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d004      	beq.n	8005a1a <HAL_DMA_IRQHandler+0xb12>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a68      	ldr	r2, [pc, #416]	@ (8005bb8 <HAL_DMA_IRQHandler+0xcb0>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d108      	bne.n	8005a2c <HAL_DMA_IRQHandler+0xb24>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f022 0208 	bic.w	r2, r2, #8
 8005a28:	601a      	str	r2, [r3, #0]
 8005a2a:	e007      	b.n	8005a3c <HAL_DMA_IRQHandler+0xb34>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f022 0204 	bic.w	r2, r2, #4
 8005a3a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f000 8165 	beq.w	8005d10 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a4e:	e15f      	b.n	8005d10 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a54:	f003 031f 	and.w	r3, r3, #31
 8005a58:	2202      	movs	r2, #2
 8005a5a:	409a      	lsls	r2, r3
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	4013      	ands	r3, r2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 80c5 	beq.w	8005bf0 <HAL_DMA_IRQHandler+0xce8>
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	f003 0302 	and.w	r3, r3, #2
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f000 80bf 	beq.w	8005bf0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a76:	f003 031f 	and.w	r3, r3, #31
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	409a      	lsls	r2, r3
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d018      	beq.n	8005abe <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d109      	bne.n	8005aaa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f000 813a 	beq.w	8005d14 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005aa8:	e134      	b.n	8005d14 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	f000 8130 	beq.w	8005d14 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005abc:	e12a      	b.n	8005d14 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	f003 0320 	and.w	r3, r3, #32
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f040 8089 	bne.w	8005bdc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a2b      	ldr	r2, [pc, #172]	@ (8005b7c <HAL_DMA_IRQHandler+0xc74>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d04a      	beq.n	8005b6a <HAL_DMA_IRQHandler+0xc62>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a29      	ldr	r2, [pc, #164]	@ (8005b80 <HAL_DMA_IRQHandler+0xc78>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d045      	beq.n	8005b6a <HAL_DMA_IRQHandler+0xc62>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a28      	ldr	r2, [pc, #160]	@ (8005b84 <HAL_DMA_IRQHandler+0xc7c>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d040      	beq.n	8005b6a <HAL_DMA_IRQHandler+0xc62>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a26      	ldr	r2, [pc, #152]	@ (8005b88 <HAL_DMA_IRQHandler+0xc80>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d03b      	beq.n	8005b6a <HAL_DMA_IRQHandler+0xc62>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a25      	ldr	r2, [pc, #148]	@ (8005b8c <HAL_DMA_IRQHandler+0xc84>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d036      	beq.n	8005b6a <HAL_DMA_IRQHandler+0xc62>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a23      	ldr	r2, [pc, #140]	@ (8005b90 <HAL_DMA_IRQHandler+0xc88>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d031      	beq.n	8005b6a <HAL_DMA_IRQHandler+0xc62>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a22      	ldr	r2, [pc, #136]	@ (8005b94 <HAL_DMA_IRQHandler+0xc8c>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d02c      	beq.n	8005b6a <HAL_DMA_IRQHandler+0xc62>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a20      	ldr	r2, [pc, #128]	@ (8005b98 <HAL_DMA_IRQHandler+0xc90>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d027      	beq.n	8005b6a <HAL_DMA_IRQHandler+0xc62>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a1f      	ldr	r2, [pc, #124]	@ (8005b9c <HAL_DMA_IRQHandler+0xc94>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d022      	beq.n	8005b6a <HAL_DMA_IRQHandler+0xc62>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a1d      	ldr	r2, [pc, #116]	@ (8005ba0 <HAL_DMA_IRQHandler+0xc98>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d01d      	beq.n	8005b6a <HAL_DMA_IRQHandler+0xc62>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a1c      	ldr	r2, [pc, #112]	@ (8005ba4 <HAL_DMA_IRQHandler+0xc9c>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d018      	beq.n	8005b6a <HAL_DMA_IRQHandler+0xc62>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a1a      	ldr	r2, [pc, #104]	@ (8005ba8 <HAL_DMA_IRQHandler+0xca0>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d013      	beq.n	8005b6a <HAL_DMA_IRQHandler+0xc62>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a19      	ldr	r2, [pc, #100]	@ (8005bac <HAL_DMA_IRQHandler+0xca4>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d00e      	beq.n	8005b6a <HAL_DMA_IRQHandler+0xc62>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a17      	ldr	r2, [pc, #92]	@ (8005bb0 <HAL_DMA_IRQHandler+0xca8>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d009      	beq.n	8005b6a <HAL_DMA_IRQHandler+0xc62>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a16      	ldr	r2, [pc, #88]	@ (8005bb4 <HAL_DMA_IRQHandler+0xcac>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d004      	beq.n	8005b6a <HAL_DMA_IRQHandler+0xc62>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a14      	ldr	r2, [pc, #80]	@ (8005bb8 <HAL_DMA_IRQHandler+0xcb0>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d128      	bne.n	8005bbc <HAL_DMA_IRQHandler+0xcb4>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 0214 	bic.w	r2, r2, #20
 8005b78:	601a      	str	r2, [r3, #0]
 8005b7a:	e027      	b.n	8005bcc <HAL_DMA_IRQHandler+0xcc4>
 8005b7c:	40020010 	.word	0x40020010
 8005b80:	40020028 	.word	0x40020028
 8005b84:	40020040 	.word	0x40020040
 8005b88:	40020058 	.word	0x40020058
 8005b8c:	40020070 	.word	0x40020070
 8005b90:	40020088 	.word	0x40020088
 8005b94:	400200a0 	.word	0x400200a0
 8005b98:	400200b8 	.word	0x400200b8
 8005b9c:	40020410 	.word	0x40020410
 8005ba0:	40020428 	.word	0x40020428
 8005ba4:	40020440 	.word	0x40020440
 8005ba8:	40020458 	.word	0x40020458
 8005bac:	40020470 	.word	0x40020470
 8005bb0:	40020488 	.word	0x40020488
 8005bb4:	400204a0 	.word	0x400204a0
 8005bb8:	400204b8 	.word	0x400204b8
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f022 020a 	bic.w	r2, r2, #10
 8005bca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f000 8097 	beq.w	8005d14 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005bee:	e091      	b.n	8005d14 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bf4:	f003 031f 	and.w	r3, r3, #31
 8005bf8:	2208      	movs	r2, #8
 8005bfa:	409a      	lsls	r2, r3
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	4013      	ands	r3, r2
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f000 8088 	beq.w	8005d16 <HAL_DMA_IRQHandler+0xe0e>
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	f003 0308 	and.w	r3, r3, #8
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f000 8082 	beq.w	8005d16 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a41      	ldr	r2, [pc, #260]	@ (8005d1c <HAL_DMA_IRQHandler+0xe14>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d04a      	beq.n	8005cb2 <HAL_DMA_IRQHandler+0xdaa>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a3f      	ldr	r2, [pc, #252]	@ (8005d20 <HAL_DMA_IRQHandler+0xe18>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d045      	beq.n	8005cb2 <HAL_DMA_IRQHandler+0xdaa>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a3e      	ldr	r2, [pc, #248]	@ (8005d24 <HAL_DMA_IRQHandler+0xe1c>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d040      	beq.n	8005cb2 <HAL_DMA_IRQHandler+0xdaa>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a3c      	ldr	r2, [pc, #240]	@ (8005d28 <HAL_DMA_IRQHandler+0xe20>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d03b      	beq.n	8005cb2 <HAL_DMA_IRQHandler+0xdaa>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a3b      	ldr	r2, [pc, #236]	@ (8005d2c <HAL_DMA_IRQHandler+0xe24>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d036      	beq.n	8005cb2 <HAL_DMA_IRQHandler+0xdaa>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a39      	ldr	r2, [pc, #228]	@ (8005d30 <HAL_DMA_IRQHandler+0xe28>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d031      	beq.n	8005cb2 <HAL_DMA_IRQHandler+0xdaa>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a38      	ldr	r2, [pc, #224]	@ (8005d34 <HAL_DMA_IRQHandler+0xe2c>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d02c      	beq.n	8005cb2 <HAL_DMA_IRQHandler+0xdaa>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a36      	ldr	r2, [pc, #216]	@ (8005d38 <HAL_DMA_IRQHandler+0xe30>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d027      	beq.n	8005cb2 <HAL_DMA_IRQHandler+0xdaa>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a35      	ldr	r2, [pc, #212]	@ (8005d3c <HAL_DMA_IRQHandler+0xe34>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d022      	beq.n	8005cb2 <HAL_DMA_IRQHandler+0xdaa>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a33      	ldr	r2, [pc, #204]	@ (8005d40 <HAL_DMA_IRQHandler+0xe38>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d01d      	beq.n	8005cb2 <HAL_DMA_IRQHandler+0xdaa>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a32      	ldr	r2, [pc, #200]	@ (8005d44 <HAL_DMA_IRQHandler+0xe3c>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d018      	beq.n	8005cb2 <HAL_DMA_IRQHandler+0xdaa>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a30      	ldr	r2, [pc, #192]	@ (8005d48 <HAL_DMA_IRQHandler+0xe40>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d013      	beq.n	8005cb2 <HAL_DMA_IRQHandler+0xdaa>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a2f      	ldr	r2, [pc, #188]	@ (8005d4c <HAL_DMA_IRQHandler+0xe44>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d00e      	beq.n	8005cb2 <HAL_DMA_IRQHandler+0xdaa>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a2d      	ldr	r2, [pc, #180]	@ (8005d50 <HAL_DMA_IRQHandler+0xe48>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d009      	beq.n	8005cb2 <HAL_DMA_IRQHandler+0xdaa>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a2c      	ldr	r2, [pc, #176]	@ (8005d54 <HAL_DMA_IRQHandler+0xe4c>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d004      	beq.n	8005cb2 <HAL_DMA_IRQHandler+0xdaa>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a2a      	ldr	r2, [pc, #168]	@ (8005d58 <HAL_DMA_IRQHandler+0xe50>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d108      	bne.n	8005cc4 <HAL_DMA_IRQHandler+0xdbc>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f022 021c 	bic.w	r2, r2, #28
 8005cc0:	601a      	str	r2, [r3, #0]
 8005cc2:	e007      	b.n	8005cd4 <HAL_DMA_IRQHandler+0xdcc>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f022 020e 	bic.w	r2, r2, #14
 8005cd2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cd8:	f003 031f 	and.w	r3, r3, #31
 8005cdc:	2201      	movs	r2, #1
 8005cde:	409a      	lsls	r2, r3
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d009      	beq.n	8005d16 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	4798      	blx	r3
 8005d0a:	e004      	b.n	8005d16 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005d0c:	bf00      	nop
 8005d0e:	e002      	b.n	8005d16 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d10:	bf00      	nop
 8005d12:	e000      	b.n	8005d16 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d14:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005d16:	3728      	adds	r7, #40	@ 0x28
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	40020010 	.word	0x40020010
 8005d20:	40020028 	.word	0x40020028
 8005d24:	40020040 	.word	0x40020040
 8005d28:	40020058 	.word	0x40020058
 8005d2c:	40020070 	.word	0x40020070
 8005d30:	40020088 	.word	0x40020088
 8005d34:	400200a0 	.word	0x400200a0
 8005d38:	400200b8 	.word	0x400200b8
 8005d3c:	40020410 	.word	0x40020410
 8005d40:	40020428 	.word	0x40020428
 8005d44:	40020440 	.word	0x40020440
 8005d48:	40020458 	.word	0x40020458
 8005d4c:	40020470 	.word	0x40020470
 8005d50:	40020488 	.word	0x40020488
 8005d54:	400204a0 	.word	0x400204a0
 8005d58:	400204b8 	.word	0x400204b8

08005d5c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b087      	sub	sp, #28
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
 8005d68:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d6e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d74:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a7f      	ldr	r2, [pc, #508]	@ (8005f78 <DMA_SetConfig+0x21c>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d072      	beq.n	8005e66 <DMA_SetConfig+0x10a>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a7d      	ldr	r2, [pc, #500]	@ (8005f7c <DMA_SetConfig+0x220>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d06d      	beq.n	8005e66 <DMA_SetConfig+0x10a>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a7c      	ldr	r2, [pc, #496]	@ (8005f80 <DMA_SetConfig+0x224>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d068      	beq.n	8005e66 <DMA_SetConfig+0x10a>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a7a      	ldr	r2, [pc, #488]	@ (8005f84 <DMA_SetConfig+0x228>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d063      	beq.n	8005e66 <DMA_SetConfig+0x10a>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a79      	ldr	r2, [pc, #484]	@ (8005f88 <DMA_SetConfig+0x22c>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d05e      	beq.n	8005e66 <DMA_SetConfig+0x10a>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a77      	ldr	r2, [pc, #476]	@ (8005f8c <DMA_SetConfig+0x230>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d059      	beq.n	8005e66 <DMA_SetConfig+0x10a>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a76      	ldr	r2, [pc, #472]	@ (8005f90 <DMA_SetConfig+0x234>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d054      	beq.n	8005e66 <DMA_SetConfig+0x10a>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a74      	ldr	r2, [pc, #464]	@ (8005f94 <DMA_SetConfig+0x238>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d04f      	beq.n	8005e66 <DMA_SetConfig+0x10a>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a73      	ldr	r2, [pc, #460]	@ (8005f98 <DMA_SetConfig+0x23c>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d04a      	beq.n	8005e66 <DMA_SetConfig+0x10a>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a71      	ldr	r2, [pc, #452]	@ (8005f9c <DMA_SetConfig+0x240>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d045      	beq.n	8005e66 <DMA_SetConfig+0x10a>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a70      	ldr	r2, [pc, #448]	@ (8005fa0 <DMA_SetConfig+0x244>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d040      	beq.n	8005e66 <DMA_SetConfig+0x10a>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a6e      	ldr	r2, [pc, #440]	@ (8005fa4 <DMA_SetConfig+0x248>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d03b      	beq.n	8005e66 <DMA_SetConfig+0x10a>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a6d      	ldr	r2, [pc, #436]	@ (8005fa8 <DMA_SetConfig+0x24c>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d036      	beq.n	8005e66 <DMA_SetConfig+0x10a>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a6b      	ldr	r2, [pc, #428]	@ (8005fac <DMA_SetConfig+0x250>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d031      	beq.n	8005e66 <DMA_SetConfig+0x10a>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a6a      	ldr	r2, [pc, #424]	@ (8005fb0 <DMA_SetConfig+0x254>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d02c      	beq.n	8005e66 <DMA_SetConfig+0x10a>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a68      	ldr	r2, [pc, #416]	@ (8005fb4 <DMA_SetConfig+0x258>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d027      	beq.n	8005e66 <DMA_SetConfig+0x10a>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a67      	ldr	r2, [pc, #412]	@ (8005fb8 <DMA_SetConfig+0x25c>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d022      	beq.n	8005e66 <DMA_SetConfig+0x10a>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a65      	ldr	r2, [pc, #404]	@ (8005fbc <DMA_SetConfig+0x260>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d01d      	beq.n	8005e66 <DMA_SetConfig+0x10a>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a64      	ldr	r2, [pc, #400]	@ (8005fc0 <DMA_SetConfig+0x264>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d018      	beq.n	8005e66 <DMA_SetConfig+0x10a>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a62      	ldr	r2, [pc, #392]	@ (8005fc4 <DMA_SetConfig+0x268>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d013      	beq.n	8005e66 <DMA_SetConfig+0x10a>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a61      	ldr	r2, [pc, #388]	@ (8005fc8 <DMA_SetConfig+0x26c>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d00e      	beq.n	8005e66 <DMA_SetConfig+0x10a>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a5f      	ldr	r2, [pc, #380]	@ (8005fcc <DMA_SetConfig+0x270>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d009      	beq.n	8005e66 <DMA_SetConfig+0x10a>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a5e      	ldr	r2, [pc, #376]	@ (8005fd0 <DMA_SetConfig+0x274>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d004      	beq.n	8005e66 <DMA_SetConfig+0x10a>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a5c      	ldr	r2, [pc, #368]	@ (8005fd4 <DMA_SetConfig+0x278>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d101      	bne.n	8005e6a <DMA_SetConfig+0x10e>
 8005e66:	2301      	movs	r3, #1
 8005e68:	e000      	b.n	8005e6c <DMA_SetConfig+0x110>
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00d      	beq.n	8005e8c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005e78:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d004      	beq.n	8005e8c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005e8a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a39      	ldr	r2, [pc, #228]	@ (8005f78 <DMA_SetConfig+0x21c>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d04a      	beq.n	8005f2c <DMA_SetConfig+0x1d0>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a38      	ldr	r2, [pc, #224]	@ (8005f7c <DMA_SetConfig+0x220>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d045      	beq.n	8005f2c <DMA_SetConfig+0x1d0>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a36      	ldr	r2, [pc, #216]	@ (8005f80 <DMA_SetConfig+0x224>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d040      	beq.n	8005f2c <DMA_SetConfig+0x1d0>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a35      	ldr	r2, [pc, #212]	@ (8005f84 <DMA_SetConfig+0x228>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d03b      	beq.n	8005f2c <DMA_SetConfig+0x1d0>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a33      	ldr	r2, [pc, #204]	@ (8005f88 <DMA_SetConfig+0x22c>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d036      	beq.n	8005f2c <DMA_SetConfig+0x1d0>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a32      	ldr	r2, [pc, #200]	@ (8005f8c <DMA_SetConfig+0x230>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d031      	beq.n	8005f2c <DMA_SetConfig+0x1d0>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a30      	ldr	r2, [pc, #192]	@ (8005f90 <DMA_SetConfig+0x234>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d02c      	beq.n	8005f2c <DMA_SetConfig+0x1d0>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a2f      	ldr	r2, [pc, #188]	@ (8005f94 <DMA_SetConfig+0x238>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d027      	beq.n	8005f2c <DMA_SetConfig+0x1d0>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a2d      	ldr	r2, [pc, #180]	@ (8005f98 <DMA_SetConfig+0x23c>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d022      	beq.n	8005f2c <DMA_SetConfig+0x1d0>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a2c      	ldr	r2, [pc, #176]	@ (8005f9c <DMA_SetConfig+0x240>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d01d      	beq.n	8005f2c <DMA_SetConfig+0x1d0>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a2a      	ldr	r2, [pc, #168]	@ (8005fa0 <DMA_SetConfig+0x244>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d018      	beq.n	8005f2c <DMA_SetConfig+0x1d0>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a29      	ldr	r2, [pc, #164]	@ (8005fa4 <DMA_SetConfig+0x248>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d013      	beq.n	8005f2c <DMA_SetConfig+0x1d0>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a27      	ldr	r2, [pc, #156]	@ (8005fa8 <DMA_SetConfig+0x24c>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d00e      	beq.n	8005f2c <DMA_SetConfig+0x1d0>
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a26      	ldr	r2, [pc, #152]	@ (8005fac <DMA_SetConfig+0x250>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d009      	beq.n	8005f2c <DMA_SetConfig+0x1d0>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a24      	ldr	r2, [pc, #144]	@ (8005fb0 <DMA_SetConfig+0x254>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d004      	beq.n	8005f2c <DMA_SetConfig+0x1d0>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a23      	ldr	r2, [pc, #140]	@ (8005fb4 <DMA_SetConfig+0x258>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d101      	bne.n	8005f30 <DMA_SetConfig+0x1d4>
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e000      	b.n	8005f32 <DMA_SetConfig+0x1d6>
 8005f30:	2300      	movs	r3, #0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d059      	beq.n	8005fea <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f3a:	f003 031f 	and.w	r3, r3, #31
 8005f3e:	223f      	movs	r2, #63	@ 0x3f
 8005f40:	409a      	lsls	r2, r3
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005f54:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	683a      	ldr	r2, [r7, #0]
 8005f5c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	2b40      	cmp	r3, #64	@ 0x40
 8005f64:	d138      	bne.n	8005fd8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005f76:	e086      	b.n	8006086 <DMA_SetConfig+0x32a>
 8005f78:	40020010 	.word	0x40020010
 8005f7c:	40020028 	.word	0x40020028
 8005f80:	40020040 	.word	0x40020040
 8005f84:	40020058 	.word	0x40020058
 8005f88:	40020070 	.word	0x40020070
 8005f8c:	40020088 	.word	0x40020088
 8005f90:	400200a0 	.word	0x400200a0
 8005f94:	400200b8 	.word	0x400200b8
 8005f98:	40020410 	.word	0x40020410
 8005f9c:	40020428 	.word	0x40020428
 8005fa0:	40020440 	.word	0x40020440
 8005fa4:	40020458 	.word	0x40020458
 8005fa8:	40020470 	.word	0x40020470
 8005fac:	40020488 	.word	0x40020488
 8005fb0:	400204a0 	.word	0x400204a0
 8005fb4:	400204b8 	.word	0x400204b8
 8005fb8:	58025408 	.word	0x58025408
 8005fbc:	5802541c 	.word	0x5802541c
 8005fc0:	58025430 	.word	0x58025430
 8005fc4:	58025444 	.word	0x58025444
 8005fc8:	58025458 	.word	0x58025458
 8005fcc:	5802546c 	.word	0x5802546c
 8005fd0:	58025480 	.word	0x58025480
 8005fd4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	60da      	str	r2, [r3, #12]
}
 8005fe8:	e04d      	b.n	8006086 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a29      	ldr	r2, [pc, #164]	@ (8006094 <DMA_SetConfig+0x338>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d022      	beq.n	800603a <DMA_SetConfig+0x2de>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a27      	ldr	r2, [pc, #156]	@ (8006098 <DMA_SetConfig+0x33c>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d01d      	beq.n	800603a <DMA_SetConfig+0x2de>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a26      	ldr	r2, [pc, #152]	@ (800609c <DMA_SetConfig+0x340>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d018      	beq.n	800603a <DMA_SetConfig+0x2de>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a24      	ldr	r2, [pc, #144]	@ (80060a0 <DMA_SetConfig+0x344>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d013      	beq.n	800603a <DMA_SetConfig+0x2de>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a23      	ldr	r2, [pc, #140]	@ (80060a4 <DMA_SetConfig+0x348>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d00e      	beq.n	800603a <DMA_SetConfig+0x2de>
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a21      	ldr	r2, [pc, #132]	@ (80060a8 <DMA_SetConfig+0x34c>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d009      	beq.n	800603a <DMA_SetConfig+0x2de>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a20      	ldr	r2, [pc, #128]	@ (80060ac <DMA_SetConfig+0x350>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d004      	beq.n	800603a <DMA_SetConfig+0x2de>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a1e      	ldr	r2, [pc, #120]	@ (80060b0 <DMA_SetConfig+0x354>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d101      	bne.n	800603e <DMA_SetConfig+0x2e2>
 800603a:	2301      	movs	r3, #1
 800603c:	e000      	b.n	8006040 <DMA_SetConfig+0x2e4>
 800603e:	2300      	movs	r3, #0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d020      	beq.n	8006086 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006048:	f003 031f 	and.w	r3, r3, #31
 800604c:	2201      	movs	r2, #1
 800604e:	409a      	lsls	r2, r3
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	683a      	ldr	r2, [r7, #0]
 800605a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	2b40      	cmp	r3, #64	@ 0x40
 8006062:	d108      	bne.n	8006076 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	60da      	str	r2, [r3, #12]
}
 8006074:	e007      	b.n	8006086 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	60da      	str	r2, [r3, #12]
}
 8006086:	bf00      	nop
 8006088:	371c      	adds	r7, #28
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	58025408 	.word	0x58025408
 8006098:	5802541c 	.word	0x5802541c
 800609c:	58025430 	.word	0x58025430
 80060a0:	58025444 	.word	0x58025444
 80060a4:	58025458 	.word	0x58025458
 80060a8:	5802546c 	.word	0x5802546c
 80060ac:	58025480 	.word	0x58025480
 80060b0:	58025494 	.word	0x58025494

080060b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a42      	ldr	r2, [pc, #264]	@ (80061cc <DMA_CalcBaseAndBitshift+0x118>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d04a      	beq.n	800615c <DMA_CalcBaseAndBitshift+0xa8>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a41      	ldr	r2, [pc, #260]	@ (80061d0 <DMA_CalcBaseAndBitshift+0x11c>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d045      	beq.n	800615c <DMA_CalcBaseAndBitshift+0xa8>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a3f      	ldr	r2, [pc, #252]	@ (80061d4 <DMA_CalcBaseAndBitshift+0x120>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d040      	beq.n	800615c <DMA_CalcBaseAndBitshift+0xa8>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a3e      	ldr	r2, [pc, #248]	@ (80061d8 <DMA_CalcBaseAndBitshift+0x124>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d03b      	beq.n	800615c <DMA_CalcBaseAndBitshift+0xa8>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a3c      	ldr	r2, [pc, #240]	@ (80061dc <DMA_CalcBaseAndBitshift+0x128>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d036      	beq.n	800615c <DMA_CalcBaseAndBitshift+0xa8>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a3b      	ldr	r2, [pc, #236]	@ (80061e0 <DMA_CalcBaseAndBitshift+0x12c>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d031      	beq.n	800615c <DMA_CalcBaseAndBitshift+0xa8>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a39      	ldr	r2, [pc, #228]	@ (80061e4 <DMA_CalcBaseAndBitshift+0x130>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d02c      	beq.n	800615c <DMA_CalcBaseAndBitshift+0xa8>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a38      	ldr	r2, [pc, #224]	@ (80061e8 <DMA_CalcBaseAndBitshift+0x134>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d027      	beq.n	800615c <DMA_CalcBaseAndBitshift+0xa8>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a36      	ldr	r2, [pc, #216]	@ (80061ec <DMA_CalcBaseAndBitshift+0x138>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d022      	beq.n	800615c <DMA_CalcBaseAndBitshift+0xa8>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a35      	ldr	r2, [pc, #212]	@ (80061f0 <DMA_CalcBaseAndBitshift+0x13c>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d01d      	beq.n	800615c <DMA_CalcBaseAndBitshift+0xa8>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a33      	ldr	r2, [pc, #204]	@ (80061f4 <DMA_CalcBaseAndBitshift+0x140>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d018      	beq.n	800615c <DMA_CalcBaseAndBitshift+0xa8>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a32      	ldr	r2, [pc, #200]	@ (80061f8 <DMA_CalcBaseAndBitshift+0x144>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d013      	beq.n	800615c <DMA_CalcBaseAndBitshift+0xa8>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a30      	ldr	r2, [pc, #192]	@ (80061fc <DMA_CalcBaseAndBitshift+0x148>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d00e      	beq.n	800615c <DMA_CalcBaseAndBitshift+0xa8>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a2f      	ldr	r2, [pc, #188]	@ (8006200 <DMA_CalcBaseAndBitshift+0x14c>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d009      	beq.n	800615c <DMA_CalcBaseAndBitshift+0xa8>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a2d      	ldr	r2, [pc, #180]	@ (8006204 <DMA_CalcBaseAndBitshift+0x150>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d004      	beq.n	800615c <DMA_CalcBaseAndBitshift+0xa8>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a2c      	ldr	r2, [pc, #176]	@ (8006208 <DMA_CalcBaseAndBitshift+0x154>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d101      	bne.n	8006160 <DMA_CalcBaseAndBitshift+0xac>
 800615c:	2301      	movs	r3, #1
 800615e:	e000      	b.n	8006162 <DMA_CalcBaseAndBitshift+0xae>
 8006160:	2300      	movs	r3, #0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d024      	beq.n	80061b0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	b2db      	uxtb	r3, r3
 800616c:	3b10      	subs	r3, #16
 800616e:	4a27      	ldr	r2, [pc, #156]	@ (800620c <DMA_CalcBaseAndBitshift+0x158>)
 8006170:	fba2 2303 	umull	r2, r3, r2, r3
 8006174:	091b      	lsrs	r3, r3, #4
 8006176:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f003 0307 	and.w	r3, r3, #7
 800617e:	4a24      	ldr	r2, [pc, #144]	@ (8006210 <DMA_CalcBaseAndBitshift+0x15c>)
 8006180:	5cd3      	ldrb	r3, [r2, r3]
 8006182:	461a      	mov	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2b03      	cmp	r3, #3
 800618c:	d908      	bls.n	80061a0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	461a      	mov	r2, r3
 8006194:	4b1f      	ldr	r3, [pc, #124]	@ (8006214 <DMA_CalcBaseAndBitshift+0x160>)
 8006196:	4013      	ands	r3, r2
 8006198:	1d1a      	adds	r2, r3, #4
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	659a      	str	r2, [r3, #88]	@ 0x58
 800619e:	e00d      	b.n	80061bc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	461a      	mov	r2, r3
 80061a6:	4b1b      	ldr	r3, [pc, #108]	@ (8006214 <DMA_CalcBaseAndBitshift+0x160>)
 80061a8:	4013      	ands	r3, r2
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80061ae:	e005      	b.n	80061bc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3714      	adds	r7, #20
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr
 80061cc:	40020010 	.word	0x40020010
 80061d0:	40020028 	.word	0x40020028
 80061d4:	40020040 	.word	0x40020040
 80061d8:	40020058 	.word	0x40020058
 80061dc:	40020070 	.word	0x40020070
 80061e0:	40020088 	.word	0x40020088
 80061e4:	400200a0 	.word	0x400200a0
 80061e8:	400200b8 	.word	0x400200b8
 80061ec:	40020410 	.word	0x40020410
 80061f0:	40020428 	.word	0x40020428
 80061f4:	40020440 	.word	0x40020440
 80061f8:	40020458 	.word	0x40020458
 80061fc:	40020470 	.word	0x40020470
 8006200:	40020488 	.word	0x40020488
 8006204:	400204a0 	.word	0x400204a0
 8006208:	400204b8 	.word	0x400204b8
 800620c:	aaaaaaab 	.word	0xaaaaaaab
 8006210:	0801501c 	.word	0x0801501c
 8006214:	fffffc00 	.word	0xfffffc00

08006218 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006220:	2300      	movs	r3, #0
 8006222:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d120      	bne.n	800626e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006230:	2b03      	cmp	r3, #3
 8006232:	d858      	bhi.n	80062e6 <DMA_CheckFifoParam+0xce>
 8006234:	a201      	add	r2, pc, #4	@ (adr r2, 800623c <DMA_CheckFifoParam+0x24>)
 8006236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623a:	bf00      	nop
 800623c:	0800624d 	.word	0x0800624d
 8006240:	0800625f 	.word	0x0800625f
 8006244:	0800624d 	.word	0x0800624d
 8006248:	080062e7 	.word	0x080062e7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006250:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d048      	beq.n	80062ea <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800625c:	e045      	b.n	80062ea <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006262:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006266:	d142      	bne.n	80062ee <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800626c:	e03f      	b.n	80062ee <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006276:	d123      	bne.n	80062c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800627c:	2b03      	cmp	r3, #3
 800627e:	d838      	bhi.n	80062f2 <DMA_CheckFifoParam+0xda>
 8006280:	a201      	add	r2, pc, #4	@ (adr r2, 8006288 <DMA_CheckFifoParam+0x70>)
 8006282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006286:	bf00      	nop
 8006288:	08006299 	.word	0x08006299
 800628c:	0800629f 	.word	0x0800629f
 8006290:	08006299 	.word	0x08006299
 8006294:	080062b1 	.word	0x080062b1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	73fb      	strb	r3, [r7, #15]
        break;
 800629c:	e030      	b.n	8006300 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d025      	beq.n	80062f6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80062ae:	e022      	b.n	80062f6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80062b8:	d11f      	bne.n	80062fa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80062be:	e01c      	b.n	80062fa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d902      	bls.n	80062ce <DMA_CheckFifoParam+0xb6>
 80062c8:	2b03      	cmp	r3, #3
 80062ca:	d003      	beq.n	80062d4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80062cc:	e018      	b.n	8006300 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	73fb      	strb	r3, [r7, #15]
        break;
 80062d2:	e015      	b.n	8006300 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00e      	beq.n	80062fe <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	73fb      	strb	r3, [r7, #15]
    break;
 80062e4:	e00b      	b.n	80062fe <DMA_CheckFifoParam+0xe6>
        break;
 80062e6:	bf00      	nop
 80062e8:	e00a      	b.n	8006300 <DMA_CheckFifoParam+0xe8>
        break;
 80062ea:	bf00      	nop
 80062ec:	e008      	b.n	8006300 <DMA_CheckFifoParam+0xe8>
        break;
 80062ee:	bf00      	nop
 80062f0:	e006      	b.n	8006300 <DMA_CheckFifoParam+0xe8>
        break;
 80062f2:	bf00      	nop
 80062f4:	e004      	b.n	8006300 <DMA_CheckFifoParam+0xe8>
        break;
 80062f6:	bf00      	nop
 80062f8:	e002      	b.n	8006300 <DMA_CheckFifoParam+0xe8>
        break;
 80062fa:	bf00      	nop
 80062fc:	e000      	b.n	8006300 <DMA_CheckFifoParam+0xe8>
    break;
 80062fe:	bf00      	nop
    }
  }

  return status;
 8006300:	7bfb      	ldrb	r3, [r7, #15]
}
 8006302:	4618      	mov	r0, r3
 8006304:	3714      	adds	r7, #20
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop

08006310 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a38      	ldr	r2, [pc, #224]	@ (8006404 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d022      	beq.n	800636e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a36      	ldr	r2, [pc, #216]	@ (8006408 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d01d      	beq.n	800636e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a35      	ldr	r2, [pc, #212]	@ (800640c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d018      	beq.n	800636e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a33      	ldr	r2, [pc, #204]	@ (8006410 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d013      	beq.n	800636e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a32      	ldr	r2, [pc, #200]	@ (8006414 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d00e      	beq.n	800636e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a30      	ldr	r2, [pc, #192]	@ (8006418 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d009      	beq.n	800636e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a2f      	ldr	r2, [pc, #188]	@ (800641c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d004      	beq.n	800636e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a2d      	ldr	r2, [pc, #180]	@ (8006420 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d101      	bne.n	8006372 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800636e:	2301      	movs	r3, #1
 8006370:	e000      	b.n	8006374 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006372:	2300      	movs	r3, #0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d01a      	beq.n	80063ae <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	b2db      	uxtb	r3, r3
 800637e:	3b08      	subs	r3, #8
 8006380:	4a28      	ldr	r2, [pc, #160]	@ (8006424 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006382:	fba2 2303 	umull	r2, r3, r2, r3
 8006386:	091b      	lsrs	r3, r3, #4
 8006388:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	4b26      	ldr	r3, [pc, #152]	@ (8006428 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800638e:	4413      	add	r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	461a      	mov	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a24      	ldr	r2, [pc, #144]	@ (800642c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800639c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f003 031f 	and.w	r3, r3, #31
 80063a4:	2201      	movs	r2, #1
 80063a6:	409a      	lsls	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80063ac:	e024      	b.n	80063f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	3b10      	subs	r3, #16
 80063b6:	4a1e      	ldr	r2, [pc, #120]	@ (8006430 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80063b8:	fba2 2303 	umull	r2, r3, r2, r3
 80063bc:	091b      	lsrs	r3, r3, #4
 80063be:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	4a1c      	ldr	r2, [pc, #112]	@ (8006434 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d806      	bhi.n	80063d6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	4a1b      	ldr	r2, [pc, #108]	@ (8006438 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d902      	bls.n	80063d6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	3308      	adds	r3, #8
 80063d4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	4b18      	ldr	r3, [pc, #96]	@ (800643c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80063da:	4413      	add	r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	461a      	mov	r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a16      	ldr	r2, [pc, #88]	@ (8006440 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80063e8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f003 031f 	and.w	r3, r3, #31
 80063f0:	2201      	movs	r2, #1
 80063f2:	409a      	lsls	r2, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80063f8:	bf00      	nop
 80063fa:	3714      	adds	r7, #20
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr
 8006404:	58025408 	.word	0x58025408
 8006408:	5802541c 	.word	0x5802541c
 800640c:	58025430 	.word	0x58025430
 8006410:	58025444 	.word	0x58025444
 8006414:	58025458 	.word	0x58025458
 8006418:	5802546c 	.word	0x5802546c
 800641c:	58025480 	.word	0x58025480
 8006420:	58025494 	.word	0x58025494
 8006424:	cccccccd 	.word	0xcccccccd
 8006428:	16009600 	.word	0x16009600
 800642c:	58025880 	.word	0x58025880
 8006430:	aaaaaaab 	.word	0xaaaaaaab
 8006434:	400204b8 	.word	0x400204b8
 8006438:	4002040f 	.word	0x4002040f
 800643c:	10008200 	.word	0x10008200
 8006440:	40020880 	.word	0x40020880

08006444 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	b2db      	uxtb	r3, r3
 8006452:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d04a      	beq.n	80064f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2b08      	cmp	r3, #8
 800645e:	d847      	bhi.n	80064f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a25      	ldr	r2, [pc, #148]	@ (80064fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d022      	beq.n	80064b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a24      	ldr	r2, [pc, #144]	@ (8006500 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d01d      	beq.n	80064b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a22      	ldr	r2, [pc, #136]	@ (8006504 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d018      	beq.n	80064b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a21      	ldr	r2, [pc, #132]	@ (8006508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d013      	beq.n	80064b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a1f      	ldr	r2, [pc, #124]	@ (800650c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d00e      	beq.n	80064b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a1e      	ldr	r2, [pc, #120]	@ (8006510 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d009      	beq.n	80064b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a1c      	ldr	r2, [pc, #112]	@ (8006514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d004      	beq.n	80064b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a1b      	ldr	r2, [pc, #108]	@ (8006518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d101      	bne.n	80064b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80064b0:	2301      	movs	r3, #1
 80064b2:	e000      	b.n	80064b6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80064b4:	2300      	movs	r3, #0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00a      	beq.n	80064d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	4b17      	ldr	r3, [pc, #92]	@ (800651c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80064be:	4413      	add	r3, r2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	461a      	mov	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a15      	ldr	r2, [pc, #84]	@ (8006520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80064cc:	671a      	str	r2, [r3, #112]	@ 0x70
 80064ce:	e009      	b.n	80064e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	4b14      	ldr	r3, [pc, #80]	@ (8006524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80064d4:	4413      	add	r3, r2
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	461a      	mov	r2, r3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a11      	ldr	r2, [pc, #68]	@ (8006528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80064e2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	3b01      	subs	r3, #1
 80064e8:	2201      	movs	r2, #1
 80064ea:	409a      	lsls	r2, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80064f0:	bf00      	nop
 80064f2:	3714      	adds	r7, #20
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr
 80064fc:	58025408 	.word	0x58025408
 8006500:	5802541c 	.word	0x5802541c
 8006504:	58025430 	.word	0x58025430
 8006508:	58025444 	.word	0x58025444
 800650c:	58025458 	.word	0x58025458
 8006510:	5802546c 	.word	0x5802546c
 8006514:	58025480 	.word	0x58025480
 8006518:	58025494 	.word	0x58025494
 800651c:	1600963f 	.word	0x1600963f
 8006520:	58025940 	.word	0x58025940
 8006524:	1000823f 	.word	0x1000823f
 8006528:	40020940 	.word	0x40020940

0800652c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800652c:	b480      	push	{r7}
 800652e:	b087      	sub	sp, #28
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	460b      	mov	r3, r1
 8006536:	607a      	str	r2, [r7, #4]
 8006538:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800653a:	2300      	movs	r3, #0
 800653c:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d101      	bne.n	8006548 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e00a      	b.n	800655e <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8006548:	7afb      	ldrb	r3, [r7, #11]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d103      	bne.n	8006556 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	605a      	str	r2, [r3, #4]
      break;
 8006554:	e002      	b.n	800655c <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	75fb      	strb	r3, [r7, #23]
      break;
 800655a:	bf00      	nop
  }

  return status;
 800655c:	7dfb      	ldrb	r3, [r7, #23]
}
 800655e:	4618      	mov	r0, r3
 8006560:	371c      	adds	r7, #28
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr

0800656a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800656a:	b480      	push	{r7}
 800656c:	b083      	sub	sp, #12
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
 8006572:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d101      	bne.n	800657e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e003      	b.n	8006586 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	683a      	ldr	r2, [r7, #0]
 8006582:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006584:	2300      	movs	r3, #0
  }
}
 8006586:	4618      	mov	r0, r3
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
	...

08006594 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b086      	sub	sp, #24
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	0c1b      	lsrs	r3, r3, #16
 80065a2:	f003 0303 	and.w	r3, r3, #3
 80065a6:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 031f 	and.w	r3, r3, #31
 80065b0:	2201      	movs	r2, #1
 80065b2:	fa02 f303 	lsl.w	r3, r2, r3
 80065b6:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 80065b8:	f7fd fecc 	bl	8004354 <HAL_GetCurrentCPUID>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b03      	cmp	r3, #3
 80065c0:	d105      	bne.n	80065ce <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	011a      	lsls	r2, r3, #4
 80065c6:	4b0f      	ldr	r3, [pc, #60]	@ (8006604 <HAL_EXTI_IRQHandler+0x70>)
 80065c8:	4413      	add	r3, r2
 80065ca:	617b      	str	r3, [r7, #20]
 80065cc:	e004      	b.n	80065d8 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	011a      	lsls	r2, r3, #4
 80065d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006608 <HAL_EXTI_IRQHandler+0x74>)
 80065d4:	4413      	add	r3, r2
 80065d6:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	4013      	ands	r3, r2
 80065e0:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d009      	beq.n	80065fc <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d002      	beq.n	80065fc <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	4798      	blx	r3
    }
  }
}
 80065fc:	bf00      	nop
 80065fe:	3718      	adds	r7, #24
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	58000088 	.word	0x58000088
 8006608:	580000c8 	.word	0x580000c8

0800660c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800660c:	b480      	push	{r7}
 800660e:	b089      	sub	sp, #36	@ 0x24
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006616:	2300      	movs	r3, #0
 8006618:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800661a:	4b89      	ldr	r3, [pc, #548]	@ (8006840 <HAL_GPIO_Init+0x234>)
 800661c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800661e:	e194      	b.n	800694a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	2101      	movs	r1, #1
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	fa01 f303 	lsl.w	r3, r1, r3
 800662c:	4013      	ands	r3, r2
 800662e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	2b00      	cmp	r3, #0
 8006634:	f000 8186 	beq.w	8006944 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	f003 0303 	and.w	r3, r3, #3
 8006640:	2b01      	cmp	r3, #1
 8006642:	d005      	beq.n	8006650 <HAL_GPIO_Init+0x44>
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	f003 0303 	and.w	r3, r3, #3
 800664c:	2b02      	cmp	r3, #2
 800664e:	d130      	bne.n	80066b2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	005b      	lsls	r3, r3, #1
 800665a:	2203      	movs	r2, #3
 800665c:	fa02 f303 	lsl.w	r3, r2, r3
 8006660:	43db      	mvns	r3, r3
 8006662:	69ba      	ldr	r2, [r7, #24]
 8006664:	4013      	ands	r3, r2
 8006666:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	68da      	ldr	r2, [r3, #12]
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	005b      	lsls	r3, r3, #1
 8006670:	fa02 f303 	lsl.w	r3, r2, r3
 8006674:	69ba      	ldr	r2, [r7, #24]
 8006676:	4313      	orrs	r3, r2
 8006678:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	69ba      	ldr	r2, [r7, #24]
 800667e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006686:	2201      	movs	r2, #1
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	fa02 f303 	lsl.w	r3, r2, r3
 800668e:	43db      	mvns	r3, r3
 8006690:	69ba      	ldr	r2, [r7, #24]
 8006692:	4013      	ands	r3, r2
 8006694:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	091b      	lsrs	r3, r3, #4
 800669c:	f003 0201 	and.w	r2, r3, #1
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	fa02 f303 	lsl.w	r3, r2, r3
 80066a6:	69ba      	ldr	r2, [r7, #24]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	69ba      	ldr	r2, [r7, #24]
 80066b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f003 0303 	and.w	r3, r3, #3
 80066ba:	2b03      	cmp	r3, #3
 80066bc:	d017      	beq.n	80066ee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	005b      	lsls	r3, r3, #1
 80066c8:	2203      	movs	r2, #3
 80066ca:	fa02 f303 	lsl.w	r3, r2, r3
 80066ce:	43db      	mvns	r3, r3
 80066d0:	69ba      	ldr	r2, [r7, #24]
 80066d2:	4013      	ands	r3, r2
 80066d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	689a      	ldr	r2, [r3, #8]
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	005b      	lsls	r3, r3, #1
 80066de:	fa02 f303 	lsl.w	r3, r2, r3
 80066e2:	69ba      	ldr	r2, [r7, #24]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	69ba      	ldr	r2, [r7, #24]
 80066ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f003 0303 	and.w	r3, r3, #3
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d123      	bne.n	8006742 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	08da      	lsrs	r2, r3, #3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	3208      	adds	r2, #8
 8006702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006706:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	f003 0307 	and.w	r3, r3, #7
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	220f      	movs	r2, #15
 8006712:	fa02 f303 	lsl.w	r3, r2, r3
 8006716:	43db      	mvns	r3, r3
 8006718:	69ba      	ldr	r2, [r7, #24]
 800671a:	4013      	ands	r3, r2
 800671c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	691a      	ldr	r2, [r3, #16]
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	f003 0307 	and.w	r3, r3, #7
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	fa02 f303 	lsl.w	r3, r2, r3
 800672e:	69ba      	ldr	r2, [r7, #24]
 8006730:	4313      	orrs	r3, r2
 8006732:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	08da      	lsrs	r2, r3, #3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	3208      	adds	r2, #8
 800673c:	69b9      	ldr	r1, [r7, #24]
 800673e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	005b      	lsls	r3, r3, #1
 800674c:	2203      	movs	r2, #3
 800674e:	fa02 f303 	lsl.w	r3, r2, r3
 8006752:	43db      	mvns	r3, r3
 8006754:	69ba      	ldr	r2, [r7, #24]
 8006756:	4013      	ands	r3, r2
 8006758:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f003 0203 	and.w	r2, r3, #3
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	005b      	lsls	r3, r3, #1
 8006766:	fa02 f303 	lsl.w	r3, r2, r3
 800676a:	69ba      	ldr	r2, [r7, #24]
 800676c:	4313      	orrs	r3, r2
 800676e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	69ba      	ldr	r2, [r7, #24]
 8006774:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800677e:	2b00      	cmp	r3, #0
 8006780:	f000 80e0 	beq.w	8006944 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006784:	4b2f      	ldr	r3, [pc, #188]	@ (8006844 <HAL_GPIO_Init+0x238>)
 8006786:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800678a:	4a2e      	ldr	r2, [pc, #184]	@ (8006844 <HAL_GPIO_Init+0x238>)
 800678c:	f043 0302 	orr.w	r3, r3, #2
 8006790:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006794:	4b2b      	ldr	r3, [pc, #172]	@ (8006844 <HAL_GPIO_Init+0x238>)
 8006796:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800679a:	f003 0302 	and.w	r3, r3, #2
 800679e:	60fb      	str	r3, [r7, #12]
 80067a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80067a2:	4a29      	ldr	r2, [pc, #164]	@ (8006848 <HAL_GPIO_Init+0x23c>)
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	089b      	lsrs	r3, r3, #2
 80067a8:	3302      	adds	r3, #2
 80067aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	f003 0303 	and.w	r3, r3, #3
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	220f      	movs	r2, #15
 80067ba:	fa02 f303 	lsl.w	r3, r2, r3
 80067be:	43db      	mvns	r3, r3
 80067c0:	69ba      	ldr	r2, [r7, #24]
 80067c2:	4013      	ands	r3, r2
 80067c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a20      	ldr	r2, [pc, #128]	@ (800684c <HAL_GPIO_Init+0x240>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d052      	beq.n	8006874 <HAL_GPIO_Init+0x268>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a1f      	ldr	r2, [pc, #124]	@ (8006850 <HAL_GPIO_Init+0x244>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d031      	beq.n	800683a <HAL_GPIO_Init+0x22e>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a1e      	ldr	r2, [pc, #120]	@ (8006854 <HAL_GPIO_Init+0x248>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d02b      	beq.n	8006836 <HAL_GPIO_Init+0x22a>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a1d      	ldr	r2, [pc, #116]	@ (8006858 <HAL_GPIO_Init+0x24c>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d025      	beq.n	8006832 <HAL_GPIO_Init+0x226>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a1c      	ldr	r2, [pc, #112]	@ (800685c <HAL_GPIO_Init+0x250>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d01f      	beq.n	800682e <HAL_GPIO_Init+0x222>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a1b      	ldr	r2, [pc, #108]	@ (8006860 <HAL_GPIO_Init+0x254>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d019      	beq.n	800682a <HAL_GPIO_Init+0x21e>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a1a      	ldr	r2, [pc, #104]	@ (8006864 <HAL_GPIO_Init+0x258>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d013      	beq.n	8006826 <HAL_GPIO_Init+0x21a>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a19      	ldr	r2, [pc, #100]	@ (8006868 <HAL_GPIO_Init+0x25c>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d00d      	beq.n	8006822 <HAL_GPIO_Init+0x216>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a18      	ldr	r2, [pc, #96]	@ (800686c <HAL_GPIO_Init+0x260>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d007      	beq.n	800681e <HAL_GPIO_Init+0x212>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a17      	ldr	r2, [pc, #92]	@ (8006870 <HAL_GPIO_Init+0x264>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d101      	bne.n	800681a <HAL_GPIO_Init+0x20e>
 8006816:	2309      	movs	r3, #9
 8006818:	e02d      	b.n	8006876 <HAL_GPIO_Init+0x26a>
 800681a:	230a      	movs	r3, #10
 800681c:	e02b      	b.n	8006876 <HAL_GPIO_Init+0x26a>
 800681e:	2308      	movs	r3, #8
 8006820:	e029      	b.n	8006876 <HAL_GPIO_Init+0x26a>
 8006822:	2307      	movs	r3, #7
 8006824:	e027      	b.n	8006876 <HAL_GPIO_Init+0x26a>
 8006826:	2306      	movs	r3, #6
 8006828:	e025      	b.n	8006876 <HAL_GPIO_Init+0x26a>
 800682a:	2305      	movs	r3, #5
 800682c:	e023      	b.n	8006876 <HAL_GPIO_Init+0x26a>
 800682e:	2304      	movs	r3, #4
 8006830:	e021      	b.n	8006876 <HAL_GPIO_Init+0x26a>
 8006832:	2303      	movs	r3, #3
 8006834:	e01f      	b.n	8006876 <HAL_GPIO_Init+0x26a>
 8006836:	2302      	movs	r3, #2
 8006838:	e01d      	b.n	8006876 <HAL_GPIO_Init+0x26a>
 800683a:	2301      	movs	r3, #1
 800683c:	e01b      	b.n	8006876 <HAL_GPIO_Init+0x26a>
 800683e:	bf00      	nop
 8006840:	58000080 	.word	0x58000080
 8006844:	58024400 	.word	0x58024400
 8006848:	58000400 	.word	0x58000400
 800684c:	58020000 	.word	0x58020000
 8006850:	58020400 	.word	0x58020400
 8006854:	58020800 	.word	0x58020800
 8006858:	58020c00 	.word	0x58020c00
 800685c:	58021000 	.word	0x58021000
 8006860:	58021400 	.word	0x58021400
 8006864:	58021800 	.word	0x58021800
 8006868:	58021c00 	.word	0x58021c00
 800686c:	58022000 	.word	0x58022000
 8006870:	58022400 	.word	0x58022400
 8006874:	2300      	movs	r3, #0
 8006876:	69fa      	ldr	r2, [r7, #28]
 8006878:	f002 0203 	and.w	r2, r2, #3
 800687c:	0092      	lsls	r2, r2, #2
 800687e:	4093      	lsls	r3, r2
 8006880:	69ba      	ldr	r2, [r7, #24]
 8006882:	4313      	orrs	r3, r2
 8006884:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006886:	4938      	ldr	r1, [pc, #224]	@ (8006968 <HAL_GPIO_Init+0x35c>)
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	089b      	lsrs	r3, r3, #2
 800688c:	3302      	adds	r3, #2
 800688e:	69ba      	ldr	r2, [r7, #24]
 8006890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006894:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	43db      	mvns	r3, r3
 80068a0:	69ba      	ldr	r2, [r7, #24]
 80068a2:	4013      	ands	r3, r2
 80068a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d003      	beq.n	80068ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80068b2:	69ba      	ldr	r2, [r7, #24]
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80068ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80068c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	43db      	mvns	r3, r3
 80068ce:	69ba      	ldr	r2, [r7, #24]
 80068d0:	4013      	ands	r3, r2
 80068d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d003      	beq.n	80068e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80068e0:	69ba      	ldr	r2, [r7, #24]
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80068e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	43db      	mvns	r3, r3
 80068fa:	69ba      	ldr	r2, [r7, #24]
 80068fc:	4013      	ands	r3, r2
 80068fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d003      	beq.n	8006914 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800690c:	69ba      	ldr	r2, [r7, #24]
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	4313      	orrs	r3, r2
 8006912:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	69ba      	ldr	r2, [r7, #24]
 8006918:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	43db      	mvns	r3, r3
 8006924:	69ba      	ldr	r2, [r7, #24]
 8006926:	4013      	ands	r3, r2
 8006928:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d003      	beq.n	800693e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006936:	69ba      	ldr	r2, [r7, #24]
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	4313      	orrs	r3, r2
 800693c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	69ba      	ldr	r2, [r7, #24]
 8006942:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	3301      	adds	r3, #1
 8006948:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	fa22 f303 	lsr.w	r3, r2, r3
 8006954:	2b00      	cmp	r3, #0
 8006956:	f47f ae63 	bne.w	8006620 <HAL_GPIO_Init+0x14>
  }
}
 800695a:	bf00      	nop
 800695c:	bf00      	nop
 800695e:	3724      	adds	r7, #36	@ 0x24
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr
 8006968:	58000400 	.word	0x58000400

0800696c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	460b      	mov	r3, r1
 8006976:	807b      	strh	r3, [r7, #2]
 8006978:	4613      	mov	r3, r2
 800697a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800697c:	787b      	ldrb	r3, [r7, #1]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d003      	beq.n	800698a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006982:	887a      	ldrh	r2, [r7, #2]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006988:	e003      	b.n	8006992 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800698a:	887b      	ldrh	r3, [r7, #2]
 800698c:	041a      	lsls	r2, r3, #16
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	619a      	str	r2, [r3, #24]
}
 8006992:	bf00      	nop
 8006994:	370c      	adds	r7, #12
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr

0800699e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800699e:	b480      	push	{r7}
 80069a0:	b085      	sub	sp, #20
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
 80069a6:	460b      	mov	r3, r1
 80069a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80069b0:	887a      	ldrh	r2, [r7, #2]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	4013      	ands	r3, r2
 80069b6:	041a      	lsls	r2, r3, #16
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	43d9      	mvns	r1, r3
 80069bc:	887b      	ldrh	r3, [r7, #2]
 80069be:	400b      	ands	r3, r1
 80069c0:	431a      	orrs	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	619a      	str	r2, [r3, #24]
}
 80069c6:	bf00      	nop
 80069c8:	3714      	adds	r7, #20
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
	...

080069d4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80069dc:	4a08      	ldr	r2, [pc, #32]	@ (8006a00 <HAL_HSEM_FastTake+0x2c>)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	3320      	adds	r3, #32
 80069e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069e6:	4a07      	ldr	r2, [pc, #28]	@ (8006a04 <HAL_HSEM_FastTake+0x30>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d101      	bne.n	80069f0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80069ec:	2300      	movs	r3, #0
 80069ee:	e000      	b.n	80069f2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	370c      	adds	r7, #12
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	58026400 	.word	0x58026400
 8006a04:	80000300 	.word	0x80000300

08006a08 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8006a12:	4906      	ldr	r1, [pc, #24]	@ (8006a2c <HAL_HSEM_Release+0x24>)
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr
 8006a2c:	58026400 	.word	0x58026400

08006a30 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af02      	add	r7, sp, #8
 8006a36:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d101      	bne.n	8006a42 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e0fe      	b.n	8006c40 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d106      	bne.n	8006a5c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f00b f950 	bl	8011cfc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2203      	movs	r2, #3
 8006a60:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f007 fd14 	bl	800e496 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6818      	ldr	r0, [r3, #0]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	7c1a      	ldrb	r2, [r3, #16]
 8006a76:	f88d 2000 	strb.w	r2, [sp]
 8006a7a:	3304      	adds	r3, #4
 8006a7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a7e:	f007 fbe5 	bl	800e24c <USB_CoreInit>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d005      	beq.n	8006a94 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2202      	movs	r2, #2
 8006a8c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	e0d5      	b.n	8006c40 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2100      	movs	r1, #0
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f007 fd0c 	bl	800e4b8 <USB_SetCurrentMode>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d005      	beq.n	8006ab2 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2202      	movs	r2, #2
 8006aaa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e0c6      	b.n	8006c40 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	73fb      	strb	r3, [r7, #15]
 8006ab6:	e04a      	b.n	8006b4e <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006ab8:	7bfa      	ldrb	r2, [r7, #15]
 8006aba:	6879      	ldr	r1, [r7, #4]
 8006abc:	4613      	mov	r3, r2
 8006abe:	00db      	lsls	r3, r3, #3
 8006ac0:	4413      	add	r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	440b      	add	r3, r1
 8006ac6:	3315      	adds	r3, #21
 8006ac8:	2201      	movs	r2, #1
 8006aca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006acc:	7bfa      	ldrb	r2, [r7, #15]
 8006ace:	6879      	ldr	r1, [r7, #4]
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	00db      	lsls	r3, r3, #3
 8006ad4:	4413      	add	r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	440b      	add	r3, r1
 8006ada:	3314      	adds	r3, #20
 8006adc:	7bfa      	ldrb	r2, [r7, #15]
 8006ade:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006ae0:	7bfa      	ldrb	r2, [r7, #15]
 8006ae2:	7bfb      	ldrb	r3, [r7, #15]
 8006ae4:	b298      	uxth	r0, r3
 8006ae6:	6879      	ldr	r1, [r7, #4]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	00db      	lsls	r3, r3, #3
 8006aec:	4413      	add	r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	440b      	add	r3, r1
 8006af2:	332e      	adds	r3, #46	@ 0x2e
 8006af4:	4602      	mov	r2, r0
 8006af6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006af8:	7bfa      	ldrb	r2, [r7, #15]
 8006afa:	6879      	ldr	r1, [r7, #4]
 8006afc:	4613      	mov	r3, r2
 8006afe:	00db      	lsls	r3, r3, #3
 8006b00:	4413      	add	r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	440b      	add	r3, r1
 8006b06:	3318      	adds	r3, #24
 8006b08:	2200      	movs	r2, #0
 8006b0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006b0c:	7bfa      	ldrb	r2, [r7, #15]
 8006b0e:	6879      	ldr	r1, [r7, #4]
 8006b10:	4613      	mov	r3, r2
 8006b12:	00db      	lsls	r3, r3, #3
 8006b14:	4413      	add	r3, r2
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	440b      	add	r3, r1
 8006b1a:	331c      	adds	r3, #28
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006b20:	7bfa      	ldrb	r2, [r7, #15]
 8006b22:	6879      	ldr	r1, [r7, #4]
 8006b24:	4613      	mov	r3, r2
 8006b26:	00db      	lsls	r3, r3, #3
 8006b28:	4413      	add	r3, r2
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	440b      	add	r3, r1
 8006b2e:	3320      	adds	r3, #32
 8006b30:	2200      	movs	r2, #0
 8006b32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006b34:	7bfa      	ldrb	r2, [r7, #15]
 8006b36:	6879      	ldr	r1, [r7, #4]
 8006b38:	4613      	mov	r3, r2
 8006b3a:	00db      	lsls	r3, r3, #3
 8006b3c:	4413      	add	r3, r2
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	440b      	add	r3, r1
 8006b42:	3324      	adds	r3, #36	@ 0x24
 8006b44:	2200      	movs	r2, #0
 8006b46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b48:	7bfb      	ldrb	r3, [r7, #15]
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	73fb      	strb	r3, [r7, #15]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	791b      	ldrb	r3, [r3, #4]
 8006b52:	7bfa      	ldrb	r2, [r7, #15]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d3af      	bcc.n	8006ab8 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b58:	2300      	movs	r3, #0
 8006b5a:	73fb      	strb	r3, [r7, #15]
 8006b5c:	e044      	b.n	8006be8 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006b5e:	7bfa      	ldrb	r2, [r7, #15]
 8006b60:	6879      	ldr	r1, [r7, #4]
 8006b62:	4613      	mov	r3, r2
 8006b64:	00db      	lsls	r3, r3, #3
 8006b66:	4413      	add	r3, r2
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	440b      	add	r3, r1
 8006b6c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006b70:	2200      	movs	r2, #0
 8006b72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006b74:	7bfa      	ldrb	r2, [r7, #15]
 8006b76:	6879      	ldr	r1, [r7, #4]
 8006b78:	4613      	mov	r3, r2
 8006b7a:	00db      	lsls	r3, r3, #3
 8006b7c:	4413      	add	r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	440b      	add	r3, r1
 8006b82:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006b86:	7bfa      	ldrb	r2, [r7, #15]
 8006b88:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006b8a:	7bfa      	ldrb	r2, [r7, #15]
 8006b8c:	6879      	ldr	r1, [r7, #4]
 8006b8e:	4613      	mov	r3, r2
 8006b90:	00db      	lsls	r3, r3, #3
 8006b92:	4413      	add	r3, r2
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	440b      	add	r3, r1
 8006b98:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006ba0:	7bfa      	ldrb	r2, [r7, #15]
 8006ba2:	6879      	ldr	r1, [r7, #4]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	00db      	lsls	r3, r3, #3
 8006ba8:	4413      	add	r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	440b      	add	r3, r1
 8006bae:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006bb6:	7bfa      	ldrb	r2, [r7, #15]
 8006bb8:	6879      	ldr	r1, [r7, #4]
 8006bba:	4613      	mov	r3, r2
 8006bbc:	00db      	lsls	r3, r3, #3
 8006bbe:	4413      	add	r3, r2
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	440b      	add	r3, r1
 8006bc4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006bc8:	2200      	movs	r2, #0
 8006bca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006bcc:	7bfa      	ldrb	r2, [r7, #15]
 8006bce:	6879      	ldr	r1, [r7, #4]
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	00db      	lsls	r3, r3, #3
 8006bd4:	4413      	add	r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	440b      	add	r3, r1
 8006bda:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006bde:	2200      	movs	r2, #0
 8006be0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006be2:	7bfb      	ldrb	r3, [r7, #15]
 8006be4:	3301      	adds	r3, #1
 8006be6:	73fb      	strb	r3, [r7, #15]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	791b      	ldrb	r3, [r3, #4]
 8006bec:	7bfa      	ldrb	r2, [r7, #15]
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d3b5      	bcc.n	8006b5e <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6818      	ldr	r0, [r3, #0]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	7c1a      	ldrb	r2, [r3, #16]
 8006bfa:	f88d 2000 	strb.w	r2, [sp]
 8006bfe:	3304      	adds	r3, #4
 8006c00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c02:	f007 fca5 	bl	800e550 <USB_DevInit>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d005      	beq.n	8006c18 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2202      	movs	r2, #2
 8006c10:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	e013      	b.n	8006c40 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2201      	movs	r2, #1
 8006c22:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	7b1b      	ldrb	r3, [r3, #12]
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d102      	bne.n	8006c34 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f001 f96c 	bl	8007f0c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f008 fce4 	bl	800f606 <USB_DevDisconnect>

  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3710      	adds	r7, #16
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d101      	bne.n	8006c64 <HAL_PCD_Start+0x1c>
 8006c60:	2302      	movs	r3, #2
 8006c62:	e022      	b.n	8006caa <HAL_PCD_Start+0x62>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d009      	beq.n	8006c8c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d105      	bne.n	8006c8c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c84:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4618      	mov	r0, r3
 8006c92:	f007 fbef 	bl	800e474 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f008 fc92 	bl	800f5c4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3710      	adds	r7, #16
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006cb2:	b590      	push	{r4, r7, lr}
 8006cb4:	b08d      	sub	sp, #52	@ 0x34
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cc0:	6a3b      	ldr	r3, [r7, #32]
 8006cc2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f008 fd50 	bl	800f76e <USB_GetMode>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f040 84b9 	bne.w	8007648 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f008 fcb4 	bl	800f648 <USB_ReadInterrupts>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f000 84af 	beq.w	8007646 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	0a1b      	lsrs	r3, r3, #8
 8006cf2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4618      	mov	r0, r3
 8006d02:	f008 fca1 	bl	800f648 <USB_ReadInterrupts>
 8006d06:	4603      	mov	r3, r0
 8006d08:	f003 0302 	and.w	r3, r3, #2
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	d107      	bne.n	8006d20 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	695a      	ldr	r2, [r3, #20]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f002 0202 	and.w	r2, r2, #2
 8006d1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4618      	mov	r0, r3
 8006d26:	f008 fc8f 	bl	800f648 <USB_ReadInterrupts>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	f003 0310 	and.w	r3, r3, #16
 8006d30:	2b10      	cmp	r3, #16
 8006d32:	d161      	bne.n	8006df8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	699a      	ldr	r2, [r3, #24]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f022 0210 	bic.w	r2, r2, #16
 8006d42:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006d44:	6a3b      	ldr	r3, [r7, #32]
 8006d46:	6a1b      	ldr	r3, [r3, #32]
 8006d48:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	f003 020f 	and.w	r2, r3, #15
 8006d50:	4613      	mov	r3, r2
 8006d52:	00db      	lsls	r3, r3, #3
 8006d54:	4413      	add	r3, r2
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	4413      	add	r3, r2
 8006d60:	3304      	adds	r3, #4
 8006d62:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	0c5b      	lsrs	r3, r3, #17
 8006d68:	f003 030f 	and.w	r3, r3, #15
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	d124      	bne.n	8006dba <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006d70:	69ba      	ldr	r2, [r7, #24]
 8006d72:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006d76:	4013      	ands	r3, r2
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d035      	beq.n	8006de8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	091b      	lsrs	r3, r3, #4
 8006d84:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006d86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	6a38      	ldr	r0, [r7, #32]
 8006d90:	f008 fac6 	bl	800f320 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	68da      	ldr	r2, [r3, #12]
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	091b      	lsrs	r3, r3, #4
 8006d9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006da0:	441a      	add	r2, r3
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	695a      	ldr	r2, [r3, #20]
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	091b      	lsrs	r3, r3, #4
 8006dae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006db2:	441a      	add	r2, r3
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	615a      	str	r2, [r3, #20]
 8006db8:	e016      	b.n	8006de8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	0c5b      	lsrs	r3, r3, #17
 8006dbe:	f003 030f 	and.w	r3, r3, #15
 8006dc2:	2b06      	cmp	r3, #6
 8006dc4:	d110      	bne.n	8006de8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006dcc:	2208      	movs	r2, #8
 8006dce:	4619      	mov	r1, r3
 8006dd0:	6a38      	ldr	r0, [r7, #32]
 8006dd2:	f008 faa5 	bl	800f320 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	695a      	ldr	r2, [r3, #20]
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	091b      	lsrs	r3, r3, #4
 8006dde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006de2:	441a      	add	r2, r3
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	699a      	ldr	r2, [r3, #24]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f042 0210 	orr.w	r2, r2, #16
 8006df6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f008 fc23 	bl	800f648 <USB_ReadInterrupts>
 8006e02:	4603      	mov	r3, r0
 8006e04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006e08:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006e0c:	f040 80a7 	bne.w	8006f5e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006e10:	2300      	movs	r3, #0
 8006e12:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f008 fc28 	bl	800f66e <USB_ReadDevAllOutEpInterrupt>
 8006e1e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8006e20:	e099      	b.n	8006f56 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e24:	f003 0301 	and.w	r3, r3, #1
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f000 808e 	beq.w	8006f4a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e34:	b2d2      	uxtb	r2, r2
 8006e36:	4611      	mov	r1, r2
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f008 fc4c 	bl	800f6d6 <USB_ReadDevOutEPInterrupt>
 8006e3e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	f003 0301 	and.w	r3, r3, #1
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00c      	beq.n	8006e64 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e4c:	015a      	lsls	r2, r3, #5
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	4413      	add	r3, r2
 8006e52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e56:	461a      	mov	r2, r3
 8006e58:	2301      	movs	r3, #1
 8006e5a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006e5c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 fece 	bl	8007c00 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	f003 0308 	and.w	r3, r3, #8
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00c      	beq.n	8006e88 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e70:	015a      	lsls	r2, r3, #5
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	4413      	add	r3, r2
 8006e76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	2308      	movs	r3, #8
 8006e7e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006e80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 ffa4 	bl	8007dd0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	f003 0310 	and.w	r3, r3, #16
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d008      	beq.n	8006ea4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e94:	015a      	lsls	r2, r3, #5
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	4413      	add	r3, r2
 8006e9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	2310      	movs	r3, #16
 8006ea2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	f003 0302 	and.w	r3, r3, #2
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d030      	beq.n	8006f10 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006eae:	6a3b      	ldr	r3, [r7, #32]
 8006eb0:	695b      	ldr	r3, [r3, #20]
 8006eb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006eb6:	2b80      	cmp	r3, #128	@ 0x80
 8006eb8:	d109      	bne.n	8006ece <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	69fa      	ldr	r2, [r7, #28]
 8006ec4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ec8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006ecc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006ece:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	00db      	lsls	r3, r3, #3
 8006ed4:	4413      	add	r3, r2
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	4413      	add	r3, r2
 8006ee0:	3304      	adds	r3, #4
 8006ee2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	78db      	ldrb	r3, [r3, #3]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d108      	bne.n	8006efe <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f00b f835 	bl	8011f68 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f00:	015a      	lsls	r2, r3, #5
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	4413      	add	r3, r2
 8006f06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	2302      	movs	r3, #2
 8006f0e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	f003 0320 	and.w	r3, r3, #32
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d008      	beq.n	8006f2c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1c:	015a      	lsls	r2, r3, #5
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	4413      	add	r3, r2
 8006f22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f26:	461a      	mov	r2, r3
 8006f28:	2320      	movs	r3, #32
 8006f2a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d009      	beq.n	8006f4a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f38:	015a      	lsls	r2, r3, #5
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f42:	461a      	mov	r2, r3
 8006f44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006f48:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f52:	085b      	lsrs	r3, r3, #1
 8006f54:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f47f af62 	bne.w	8006e22 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4618      	mov	r0, r3
 8006f64:	f008 fb70 	bl	800f648 <USB_ReadInterrupts>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006f6e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f72:	f040 80db 	bne.w	800712c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f008 fb91 	bl	800f6a2 <USB_ReadDevAllInEpInterrupt>
 8006f80:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8006f82:	2300      	movs	r3, #0
 8006f84:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8006f86:	e0cd      	b.n	8007124 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f8a:	f003 0301 	and.w	r3, r3, #1
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	f000 80c2 	beq.w	8007118 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f9a:	b2d2      	uxtb	r2, r2
 8006f9c:	4611      	mov	r1, r2
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f008 fbb7 	bl	800f712 <USB_ReadDevInEPInterrupt>
 8006fa4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	f003 0301 	and.w	r3, r3, #1
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d057      	beq.n	8007060 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb2:	f003 030f 	and.w	r3, r3, #15
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fbc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	43db      	mvns	r3, r3
 8006fca:	69f9      	ldr	r1, [r7, #28]
 8006fcc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd6:	015a      	lsls	r2, r3, #5
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	4413      	add	r3, r2
 8006fdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	799b      	ldrb	r3, [r3, #6]
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d132      	bne.n	8007054 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006fee:	6879      	ldr	r1, [r7, #4]
 8006ff0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	00db      	lsls	r3, r3, #3
 8006ff6:	4413      	add	r3, r2
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	440b      	add	r3, r1
 8006ffc:	3320      	adds	r3, #32
 8006ffe:	6819      	ldr	r1, [r3, #0]
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007004:	4613      	mov	r3, r2
 8007006:	00db      	lsls	r3, r3, #3
 8007008:	4413      	add	r3, r2
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	4403      	add	r3, r0
 800700e:	331c      	adds	r3, #28
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4419      	add	r1, r3
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007018:	4613      	mov	r3, r2
 800701a:	00db      	lsls	r3, r3, #3
 800701c:	4413      	add	r3, r2
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	4403      	add	r3, r0
 8007022:	3320      	adds	r3, #32
 8007024:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007028:	2b00      	cmp	r3, #0
 800702a:	d113      	bne.n	8007054 <HAL_PCD_IRQHandler+0x3a2>
 800702c:	6879      	ldr	r1, [r7, #4]
 800702e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007030:	4613      	mov	r3, r2
 8007032:	00db      	lsls	r3, r3, #3
 8007034:	4413      	add	r3, r2
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	440b      	add	r3, r1
 800703a:	3324      	adds	r3, #36	@ 0x24
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d108      	bne.n	8007054 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6818      	ldr	r0, [r3, #0]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800704c:	461a      	mov	r2, r3
 800704e:	2101      	movs	r1, #1
 8007050:	f008 fbc0 	bl	800f7d4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007056:	b2db      	uxtb	r3, r3
 8007058:	4619      	mov	r1, r3
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f00a feff 	bl	8011e5e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	f003 0308 	and.w	r3, r3, #8
 8007066:	2b00      	cmp	r3, #0
 8007068:	d008      	beq.n	800707c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800706a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706c:	015a      	lsls	r2, r3, #5
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	4413      	add	r3, r2
 8007072:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007076:	461a      	mov	r2, r3
 8007078:	2308      	movs	r3, #8
 800707a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	f003 0310 	and.w	r3, r3, #16
 8007082:	2b00      	cmp	r3, #0
 8007084:	d008      	beq.n	8007098 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007088:	015a      	lsls	r2, r3, #5
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	4413      	add	r3, r2
 800708e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007092:	461a      	mov	r2, r3
 8007094:	2310      	movs	r3, #16
 8007096:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d008      	beq.n	80070b4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80070a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a4:	015a      	lsls	r2, r3, #5
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	4413      	add	r3, r2
 80070aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070ae:	461a      	mov	r2, r3
 80070b0:	2340      	movs	r3, #64	@ 0x40
 80070b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	f003 0302 	and.w	r3, r3, #2
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d023      	beq.n	8007106 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80070be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80070c0:	6a38      	ldr	r0, [r7, #32]
 80070c2:	f007 fba3 	bl	800e80c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80070c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070c8:	4613      	mov	r3, r2
 80070ca:	00db      	lsls	r3, r3, #3
 80070cc:	4413      	add	r3, r2
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	3310      	adds	r3, #16
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	4413      	add	r3, r2
 80070d6:	3304      	adds	r3, #4
 80070d8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	78db      	ldrb	r3, [r3, #3]
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d108      	bne.n	80070f4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	2200      	movs	r2, #0
 80070e6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80070e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	4619      	mov	r1, r3
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f00a ff4c 	bl	8011f8c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80070f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f6:	015a      	lsls	r2, r3, #5
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	4413      	add	r3, r2
 80070fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007100:	461a      	mov	r2, r3
 8007102:	2302      	movs	r3, #2
 8007104:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800710c:	2b00      	cmp	r3, #0
 800710e:	d003      	beq.n	8007118 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007110:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 fce8 	bl	8007ae8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711a:	3301      	adds	r3, #1
 800711c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800711e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007120:	085b      	lsrs	r3, r3, #1
 8007122:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007126:	2b00      	cmp	r3, #0
 8007128:	f47f af2e 	bne.w	8006f88 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4618      	mov	r0, r3
 8007132:	f008 fa89 	bl	800f648 <USB_ReadInterrupts>
 8007136:	4603      	mov	r3, r0
 8007138:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800713c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007140:	d122      	bne.n	8007188 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	69fa      	ldr	r2, [r7, #28]
 800714c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007150:	f023 0301 	bic.w	r3, r3, #1
 8007154:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800715c:	2b01      	cmp	r3, #1
 800715e:	d108      	bne.n	8007172 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007168:	2100      	movs	r1, #0
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 fef2 	bl	8007f54 <HAL_PCDEx_LPM_Callback>
 8007170:	e002      	b.n	8007178 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f00a feea 	bl	8011f4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	695a      	ldr	r2, [r3, #20]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8007186:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4618      	mov	r0, r3
 800718e:	f008 fa5b 	bl	800f648 <USB_ReadInterrupts>
 8007192:	4603      	mov	r3, r0
 8007194:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007198:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800719c:	d112      	bne.n	80071c4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	f003 0301 	and.w	r3, r3, #1
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d102      	bne.n	80071b4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f00a fea6 	bl	8011f00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	695a      	ldr	r2, [r3, #20]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80071c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4618      	mov	r0, r3
 80071ca:	f008 fa3d 	bl	800f648 <USB_ReadInterrupts>
 80071ce:	4603      	mov	r3, r0
 80071d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80071d8:	d121      	bne.n	800721e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	695a      	ldr	r2, [r3, #20]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80071e8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d111      	bne.n	8007218 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007202:	089b      	lsrs	r3, r3, #2
 8007204:	f003 020f 	and.w	r2, r3, #15
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800720e:	2101      	movs	r1, #1
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 fe9f 	bl	8007f54 <HAL_PCDEx_LPM_Callback>
 8007216:	e002      	b.n	800721e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f00a fe71 	bl	8011f00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4618      	mov	r0, r3
 8007224:	f008 fa10 	bl	800f648 <USB_ReadInterrupts>
 8007228:	4603      	mov	r3, r0
 800722a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800722e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007232:	f040 80b7 	bne.w	80073a4 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	69fa      	ldr	r2, [r7, #28]
 8007240:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007244:	f023 0301 	bic.w	r3, r3, #1
 8007248:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2110      	movs	r1, #16
 8007250:	4618      	mov	r0, r3
 8007252:	f007 fadb 	bl	800e80c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007256:	2300      	movs	r3, #0
 8007258:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800725a:	e046      	b.n	80072ea <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800725c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800725e:	015a      	lsls	r2, r3, #5
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	4413      	add	r3, r2
 8007264:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007268:	461a      	mov	r2, r3
 800726a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800726e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007272:	015a      	lsls	r2, r3, #5
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	4413      	add	r3, r2
 8007278:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007280:	0151      	lsls	r1, r2, #5
 8007282:	69fa      	ldr	r2, [r7, #28]
 8007284:	440a      	add	r2, r1
 8007286:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800728a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800728e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007292:	015a      	lsls	r2, r3, #5
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	4413      	add	r3, r2
 8007298:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800729c:	461a      	mov	r2, r3
 800729e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80072a2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80072a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072a6:	015a      	lsls	r2, r3, #5
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	4413      	add	r3, r2
 80072ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072b4:	0151      	lsls	r1, r2, #5
 80072b6:	69fa      	ldr	r2, [r7, #28]
 80072b8:	440a      	add	r2, r1
 80072ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80072c2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80072c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072c6:	015a      	lsls	r2, r3, #5
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	4413      	add	r3, r2
 80072cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072d4:	0151      	lsls	r1, r2, #5
 80072d6:	69fa      	ldr	r2, [r7, #28]
 80072d8:	440a      	add	r2, r1
 80072da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072de:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80072e2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e6:	3301      	adds	r3, #1
 80072e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	791b      	ldrb	r3, [r3, #4]
 80072ee:	461a      	mov	r2, r3
 80072f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d3b2      	bcc.n	800725c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80072f6:	69fb      	ldr	r3, [r7, #28]
 80072f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072fc:	69db      	ldr	r3, [r3, #28]
 80072fe:	69fa      	ldr	r2, [r7, #28]
 8007300:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007304:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8007308:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	7bdb      	ldrb	r3, [r3, #15]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d016      	beq.n	8007340 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007318:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800731c:	69fa      	ldr	r2, [r7, #28]
 800731e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007322:	f043 030b 	orr.w	r3, r3, #11
 8007326:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007332:	69fa      	ldr	r2, [r7, #28]
 8007334:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007338:	f043 030b 	orr.w	r3, r3, #11
 800733c:	6453      	str	r3, [r2, #68]	@ 0x44
 800733e:	e015      	b.n	800736c <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007346:	695a      	ldr	r2, [r3, #20]
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800734e:	4619      	mov	r1, r3
 8007350:	f242 032b 	movw	r3, #8235	@ 0x202b
 8007354:	4313      	orrs	r3, r2
 8007356:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	69fa      	ldr	r2, [r7, #28]
 8007362:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007366:	f043 030b 	orr.w	r3, r3, #11
 800736a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	69fa      	ldr	r2, [r7, #28]
 8007376:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800737a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800737e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6818      	ldr	r0, [r3, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800738e:	461a      	mov	r2, r3
 8007390:	f008 fa20 	bl	800f7d4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	695a      	ldr	r2, [r3, #20]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80073a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4618      	mov	r0, r3
 80073aa:	f008 f94d 	bl	800f648 <USB_ReadInterrupts>
 80073ae:	4603      	mov	r3, r0
 80073b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80073b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073b8:	d123      	bne.n	8007402 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4618      	mov	r0, r3
 80073c0:	f008 f9e4 	bl	800f78c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4618      	mov	r0, r3
 80073ca:	f007 fa98 	bl	800e8fe <USB_GetDevSpeed>
 80073ce:	4603      	mov	r3, r0
 80073d0:	461a      	mov	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681c      	ldr	r4, [r3, #0]
 80073da:	f001 fdbb 	bl	8008f54 <HAL_RCC_GetHCLKFreq>
 80073de:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80073e4:	461a      	mov	r2, r3
 80073e6:	4620      	mov	r0, r4
 80073e8:	f006 ffa2 	bl	800e330 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f00a fd5e 	bl	8011eae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	695a      	ldr	r2, [r3, #20]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8007400:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4618      	mov	r0, r3
 8007408:	f008 f91e 	bl	800f648 <USB_ReadInterrupts>
 800740c:	4603      	mov	r3, r0
 800740e:	f003 0308 	and.w	r3, r3, #8
 8007412:	2b08      	cmp	r3, #8
 8007414:	d10a      	bne.n	800742c <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f00a fd3b 	bl	8011e92 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	695a      	ldr	r2, [r3, #20]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f002 0208 	and.w	r2, r2, #8
 800742a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4618      	mov	r0, r3
 8007432:	f008 f909 	bl	800f648 <USB_ReadInterrupts>
 8007436:	4603      	mov	r3, r0
 8007438:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800743c:	2b80      	cmp	r3, #128	@ 0x80
 800743e:	d123      	bne.n	8007488 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007440:	6a3b      	ldr	r3, [r7, #32]
 8007442:	699b      	ldr	r3, [r3, #24]
 8007444:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007448:	6a3b      	ldr	r3, [r7, #32]
 800744a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800744c:	2301      	movs	r3, #1
 800744e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007450:	e014      	b.n	800747c <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007452:	6879      	ldr	r1, [r7, #4]
 8007454:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007456:	4613      	mov	r3, r2
 8007458:	00db      	lsls	r3, r3, #3
 800745a:	4413      	add	r3, r2
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	440b      	add	r3, r1
 8007460:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	2b01      	cmp	r3, #1
 8007468:	d105      	bne.n	8007476 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800746a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800746c:	b2db      	uxtb	r3, r3
 800746e:	4619      	mov	r1, r3
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fb08 	bl	8007a86 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007478:	3301      	adds	r3, #1
 800747a:	627b      	str	r3, [r7, #36]	@ 0x24
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	791b      	ldrb	r3, [r3, #4]
 8007480:	461a      	mov	r2, r3
 8007482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007484:	4293      	cmp	r3, r2
 8007486:	d3e4      	bcc.n	8007452 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4618      	mov	r0, r3
 800748e:	f008 f8db 	bl	800f648 <USB_ReadInterrupts>
 8007492:	4603      	mov	r3, r0
 8007494:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007498:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800749c:	d13c      	bne.n	8007518 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800749e:	2301      	movs	r3, #1
 80074a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80074a2:	e02b      	b.n	80074fc <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80074a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a6:	015a      	lsls	r2, r3, #5
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	4413      	add	r3, r2
 80074ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80074b4:	6879      	ldr	r1, [r7, #4]
 80074b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074b8:	4613      	mov	r3, r2
 80074ba:	00db      	lsls	r3, r3, #3
 80074bc:	4413      	add	r3, r2
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	440b      	add	r3, r1
 80074c2:	3318      	adds	r3, #24
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d115      	bne.n	80074f6 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80074ca:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	da12      	bge.n	80074f6 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80074d0:	6879      	ldr	r1, [r7, #4]
 80074d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074d4:	4613      	mov	r3, r2
 80074d6:	00db      	lsls	r3, r3, #3
 80074d8:	4413      	add	r3, r2
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	440b      	add	r3, r1
 80074de:	3317      	adds	r3, #23
 80074e0:	2201      	movs	r2, #1
 80074e2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80074e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	4619      	mov	r1, r3
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fac8 	bl	8007a86 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80074f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f8:	3301      	adds	r3, #1
 80074fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	791b      	ldrb	r3, [r3, #4]
 8007500:	461a      	mov	r2, r3
 8007502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007504:	4293      	cmp	r3, r2
 8007506:	d3cd      	bcc.n	80074a4 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	695a      	ldr	r2, [r3, #20]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8007516:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4618      	mov	r0, r3
 800751e:	f008 f893 	bl	800f648 <USB_ReadInterrupts>
 8007522:	4603      	mov	r3, r0
 8007524:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007528:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800752c:	d156      	bne.n	80075dc <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800752e:	2301      	movs	r3, #1
 8007530:	627b      	str	r3, [r7, #36]	@ 0x24
 8007532:	e045      	b.n	80075c0 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007536:	015a      	lsls	r2, r3, #5
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	4413      	add	r3, r2
 800753c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007544:	6879      	ldr	r1, [r7, #4]
 8007546:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007548:	4613      	mov	r3, r2
 800754a:	00db      	lsls	r3, r3, #3
 800754c:	4413      	add	r3, r2
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	440b      	add	r3, r1
 8007552:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	2b01      	cmp	r3, #1
 800755a:	d12e      	bne.n	80075ba <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800755c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800755e:	2b00      	cmp	r3, #0
 8007560:	da2b      	bge.n	80075ba <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800756e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007572:	429a      	cmp	r2, r3
 8007574:	d121      	bne.n	80075ba <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007576:	6879      	ldr	r1, [r7, #4]
 8007578:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800757a:	4613      	mov	r3, r2
 800757c:	00db      	lsls	r3, r3, #3
 800757e:	4413      	add	r3, r2
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	440b      	add	r3, r1
 8007584:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007588:	2201      	movs	r2, #1
 800758a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800758c:	6a3b      	ldr	r3, [r7, #32]
 800758e:	699b      	ldr	r3, [r3, #24]
 8007590:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007594:	6a3b      	ldr	r3, [r7, #32]
 8007596:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007598:	6a3b      	ldr	r3, [r7, #32]
 800759a:	695b      	ldr	r3, [r3, #20]
 800759c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d10a      	bne.n	80075ba <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	69fa      	ldr	r2, [r7, #28]
 80075ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80075b6:	6053      	str	r3, [r2, #4]
            break;
 80075b8:	e008      	b.n	80075cc <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80075ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075bc:	3301      	adds	r3, #1
 80075be:	627b      	str	r3, [r7, #36]	@ 0x24
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	791b      	ldrb	r3, [r3, #4]
 80075c4:	461a      	mov	r2, r3
 80075c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d3b3      	bcc.n	8007534 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	695a      	ldr	r2, [r3, #20]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80075da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4618      	mov	r0, r3
 80075e2:	f008 f831 	bl	800f648 <USB_ReadInterrupts>
 80075e6:	4603      	mov	r3, r0
 80075e8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80075ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075f0:	d10a      	bne.n	8007608 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f00a fcdc 	bl	8011fb0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	695a      	ldr	r2, [r3, #20]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007606:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4618      	mov	r0, r3
 800760e:	f008 f81b 	bl	800f648 <USB_ReadInterrupts>
 8007612:	4603      	mov	r3, r0
 8007614:	f003 0304 	and.w	r3, r3, #4
 8007618:	2b04      	cmp	r3, #4
 800761a:	d115      	bne.n	8007648 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	f003 0304 	and.w	r3, r3, #4
 800762a:	2b00      	cmp	r3, #0
 800762c:	d002      	beq.n	8007634 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f00a fccc 	bl	8011fcc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	6859      	ldr	r1, [r3, #4]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	69ba      	ldr	r2, [r7, #24]
 8007640:	430a      	orrs	r2, r1
 8007642:	605a      	str	r2, [r3, #4]
 8007644:	e000      	b.n	8007648 <HAL_PCD_IRQHandler+0x996>
      return;
 8007646:	bf00      	nop
    }
  }
}
 8007648:	3734      	adds	r7, #52	@ 0x34
 800764a:	46bd      	mov	sp, r7
 800764c:	bd90      	pop	{r4, r7, pc}

0800764e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b082      	sub	sp, #8
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
 8007656:	460b      	mov	r3, r1
 8007658:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007660:	2b01      	cmp	r3, #1
 8007662:	d101      	bne.n	8007668 <HAL_PCD_SetAddress+0x1a>
 8007664:	2302      	movs	r3, #2
 8007666:	e012      	b.n	800768e <HAL_PCD_SetAddress+0x40>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	78fa      	ldrb	r2, [r7, #3]
 8007674:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	78fa      	ldrb	r2, [r7, #3]
 800767c:	4611      	mov	r1, r2
 800767e:	4618      	mov	r0, r3
 8007680:	f007 ff7a 	bl	800f578 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3708      	adds	r7, #8
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b084      	sub	sp, #16
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
 800769e:	4608      	mov	r0, r1
 80076a0:	4611      	mov	r1, r2
 80076a2:	461a      	mov	r2, r3
 80076a4:	4603      	mov	r3, r0
 80076a6:	70fb      	strb	r3, [r7, #3]
 80076a8:	460b      	mov	r3, r1
 80076aa:	803b      	strh	r3, [r7, #0]
 80076ac:	4613      	mov	r3, r2
 80076ae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80076b0:	2300      	movs	r3, #0
 80076b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80076b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	da0f      	bge.n	80076dc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80076bc:	78fb      	ldrb	r3, [r7, #3]
 80076be:	f003 020f 	and.w	r2, r3, #15
 80076c2:	4613      	mov	r3, r2
 80076c4:	00db      	lsls	r3, r3, #3
 80076c6:	4413      	add	r3, r2
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	3310      	adds	r3, #16
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	4413      	add	r3, r2
 80076d0:	3304      	adds	r3, #4
 80076d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2201      	movs	r2, #1
 80076d8:	705a      	strb	r2, [r3, #1]
 80076da:	e00f      	b.n	80076fc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80076dc:	78fb      	ldrb	r3, [r7, #3]
 80076de:	f003 020f 	and.w	r2, r3, #15
 80076e2:	4613      	mov	r3, r2
 80076e4:	00db      	lsls	r3, r3, #3
 80076e6:	4413      	add	r3, r2
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	4413      	add	r3, r2
 80076f2:	3304      	adds	r3, #4
 80076f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80076fc:	78fb      	ldrb	r3, [r7, #3]
 80076fe:	f003 030f 	and.w	r3, r3, #15
 8007702:	b2da      	uxtb	r2, r3
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007708:	883a      	ldrh	r2, [r7, #0]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	78ba      	ldrb	r2, [r7, #2]
 8007712:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	785b      	ldrb	r3, [r3, #1]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d004      	beq.n	8007726 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	461a      	mov	r2, r3
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007726:	78bb      	ldrb	r3, [r7, #2]
 8007728:	2b02      	cmp	r3, #2
 800772a:	d102      	bne.n	8007732 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2200      	movs	r2, #0
 8007730:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007738:	2b01      	cmp	r3, #1
 800773a:	d101      	bne.n	8007740 <HAL_PCD_EP_Open+0xaa>
 800773c:	2302      	movs	r3, #2
 800773e:	e00e      	b.n	800775e <HAL_PCD_EP_Open+0xc8>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	68f9      	ldr	r1, [r7, #12]
 800774e:	4618      	mov	r0, r3
 8007750:	f007 f8fa 	bl	800e948 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800775c:	7afb      	ldrb	r3, [r7, #11]
}
 800775e:	4618      	mov	r0, r3
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b084      	sub	sp, #16
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
 800776e:	460b      	mov	r3, r1
 8007770:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007772:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007776:	2b00      	cmp	r3, #0
 8007778:	da0f      	bge.n	800779a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800777a:	78fb      	ldrb	r3, [r7, #3]
 800777c:	f003 020f 	and.w	r2, r3, #15
 8007780:	4613      	mov	r3, r2
 8007782:	00db      	lsls	r3, r3, #3
 8007784:	4413      	add	r3, r2
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	3310      	adds	r3, #16
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	4413      	add	r3, r2
 800778e:	3304      	adds	r3, #4
 8007790:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2201      	movs	r2, #1
 8007796:	705a      	strb	r2, [r3, #1]
 8007798:	e00f      	b.n	80077ba <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800779a:	78fb      	ldrb	r3, [r7, #3]
 800779c:	f003 020f 	and.w	r2, r3, #15
 80077a0:	4613      	mov	r3, r2
 80077a2:	00db      	lsls	r3, r3, #3
 80077a4:	4413      	add	r3, r2
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	4413      	add	r3, r2
 80077b0:	3304      	adds	r3, #4
 80077b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2200      	movs	r2, #0
 80077b8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80077ba:	78fb      	ldrb	r3, [r7, #3]
 80077bc:	f003 030f 	and.w	r3, r3, #15
 80077c0:	b2da      	uxtb	r2, r3
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d101      	bne.n	80077d4 <HAL_PCD_EP_Close+0x6e>
 80077d0:	2302      	movs	r3, #2
 80077d2:	e00e      	b.n	80077f2 <HAL_PCD_EP_Close+0x8c>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68f9      	ldr	r1, [r7, #12]
 80077e2:	4618      	mov	r0, r3
 80077e4:	f007 f938 	bl	800ea58 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b086      	sub	sp, #24
 80077fe:	af00      	add	r7, sp, #0
 8007800:	60f8      	str	r0, [r7, #12]
 8007802:	607a      	str	r2, [r7, #4]
 8007804:	603b      	str	r3, [r7, #0]
 8007806:	460b      	mov	r3, r1
 8007808:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800780a:	7afb      	ldrb	r3, [r7, #11]
 800780c:	f003 020f 	and.w	r2, r3, #15
 8007810:	4613      	mov	r3, r2
 8007812:	00db      	lsls	r3, r3, #3
 8007814:	4413      	add	r3, r2
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	4413      	add	r3, r2
 8007820:	3304      	adds	r3, #4
 8007822:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	683a      	ldr	r2, [r7, #0]
 800782e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	2200      	movs	r2, #0
 8007834:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	2200      	movs	r2, #0
 800783a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800783c:	7afb      	ldrb	r3, [r7, #11]
 800783e:	f003 030f 	and.w	r3, r3, #15
 8007842:	b2da      	uxtb	r2, r3
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	799b      	ldrb	r3, [r3, #6]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d102      	bne.n	8007856 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6818      	ldr	r0, [r3, #0]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	799b      	ldrb	r3, [r3, #6]
 800785e:	461a      	mov	r2, r3
 8007860:	6979      	ldr	r1, [r7, #20]
 8007862:	f007 f9d5 	bl	800ec10 <USB_EPStartXfer>

  return HAL_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3718      	adds	r7, #24
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	460b      	mov	r3, r1
 800787a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800787c:	78fb      	ldrb	r3, [r7, #3]
 800787e:	f003 020f 	and.w	r2, r3, #15
 8007882:	6879      	ldr	r1, [r7, #4]
 8007884:	4613      	mov	r3, r2
 8007886:	00db      	lsls	r3, r3, #3
 8007888:	4413      	add	r3, r2
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	440b      	add	r3, r1
 800788e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8007892:	681b      	ldr	r3, [r3, #0]
}
 8007894:	4618      	mov	r0, r3
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b086      	sub	sp, #24
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	607a      	str	r2, [r7, #4]
 80078aa:	603b      	str	r3, [r7, #0]
 80078ac:	460b      	mov	r3, r1
 80078ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80078b0:	7afb      	ldrb	r3, [r7, #11]
 80078b2:	f003 020f 	and.w	r2, r3, #15
 80078b6:	4613      	mov	r3, r2
 80078b8:	00db      	lsls	r3, r3, #3
 80078ba:	4413      	add	r3, r2
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	3310      	adds	r3, #16
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	4413      	add	r3, r2
 80078c4:	3304      	adds	r3, #4
 80078c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	683a      	ldr	r2, [r7, #0]
 80078d2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	2200      	movs	r2, #0
 80078d8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	2201      	movs	r2, #1
 80078de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80078e0:	7afb      	ldrb	r3, [r7, #11]
 80078e2:	f003 030f 	and.w	r3, r3, #15
 80078e6:	b2da      	uxtb	r2, r3
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	799b      	ldrb	r3, [r3, #6]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d102      	bne.n	80078fa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6818      	ldr	r0, [r3, #0]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	799b      	ldrb	r3, [r3, #6]
 8007902:	461a      	mov	r2, r3
 8007904:	6979      	ldr	r1, [r7, #20]
 8007906:	f007 f983 	bl	800ec10 <USB_EPStartXfer>

  return HAL_OK;
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3718      	adds	r7, #24
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	460b      	mov	r3, r1
 800791e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007920:	78fb      	ldrb	r3, [r7, #3]
 8007922:	f003 030f 	and.w	r3, r3, #15
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	7912      	ldrb	r2, [r2, #4]
 800792a:	4293      	cmp	r3, r2
 800792c:	d901      	bls.n	8007932 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	e04f      	b.n	80079d2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007932:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007936:	2b00      	cmp	r3, #0
 8007938:	da0f      	bge.n	800795a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800793a:	78fb      	ldrb	r3, [r7, #3]
 800793c:	f003 020f 	and.w	r2, r3, #15
 8007940:	4613      	mov	r3, r2
 8007942:	00db      	lsls	r3, r3, #3
 8007944:	4413      	add	r3, r2
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	3310      	adds	r3, #16
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	4413      	add	r3, r2
 800794e:	3304      	adds	r3, #4
 8007950:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2201      	movs	r2, #1
 8007956:	705a      	strb	r2, [r3, #1]
 8007958:	e00d      	b.n	8007976 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800795a:	78fa      	ldrb	r2, [r7, #3]
 800795c:	4613      	mov	r3, r2
 800795e:	00db      	lsls	r3, r3, #3
 8007960:	4413      	add	r3, r2
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	4413      	add	r3, r2
 800796c:	3304      	adds	r3, #4
 800796e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2200      	movs	r2, #0
 8007974:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2201      	movs	r2, #1
 800797a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800797c:	78fb      	ldrb	r3, [r7, #3]
 800797e:	f003 030f 	and.w	r3, r3, #15
 8007982:	b2da      	uxtb	r2, r3
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800798e:	2b01      	cmp	r3, #1
 8007990:	d101      	bne.n	8007996 <HAL_PCD_EP_SetStall+0x82>
 8007992:	2302      	movs	r3, #2
 8007994:	e01d      	b.n	80079d2 <HAL_PCD_EP_SetStall+0xbe>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2201      	movs	r2, #1
 800799a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	68f9      	ldr	r1, [r7, #12]
 80079a4:	4618      	mov	r0, r3
 80079a6:	f007 fd13 	bl	800f3d0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80079aa:	78fb      	ldrb	r3, [r7, #3]
 80079ac:	f003 030f 	and.w	r3, r3, #15
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d109      	bne.n	80079c8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6818      	ldr	r0, [r3, #0]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	7999      	ldrb	r1, [r3, #6]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80079c2:	461a      	mov	r2, r3
 80079c4:	f007 ff06 	bl	800f7d4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3710      	adds	r7, #16
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80079da:	b580      	push	{r7, lr}
 80079dc:	b084      	sub	sp, #16
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
 80079e2:	460b      	mov	r3, r1
 80079e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80079e6:	78fb      	ldrb	r3, [r7, #3]
 80079e8:	f003 030f 	and.w	r3, r3, #15
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	7912      	ldrb	r2, [r2, #4]
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d901      	bls.n	80079f8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e042      	b.n	8007a7e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80079f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	da0f      	bge.n	8007a20 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a00:	78fb      	ldrb	r3, [r7, #3]
 8007a02:	f003 020f 	and.w	r2, r3, #15
 8007a06:	4613      	mov	r3, r2
 8007a08:	00db      	lsls	r3, r3, #3
 8007a0a:	4413      	add	r3, r2
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	3310      	adds	r3, #16
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	4413      	add	r3, r2
 8007a14:	3304      	adds	r3, #4
 8007a16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	705a      	strb	r2, [r3, #1]
 8007a1e:	e00f      	b.n	8007a40 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007a20:	78fb      	ldrb	r3, [r7, #3]
 8007a22:	f003 020f 	and.w	r2, r3, #15
 8007a26:	4613      	mov	r3, r2
 8007a28:	00db      	lsls	r3, r3, #3
 8007a2a:	4413      	add	r3, r2
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	4413      	add	r3, r2
 8007a36:	3304      	adds	r3, #4
 8007a38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a46:	78fb      	ldrb	r3, [r7, #3]
 8007a48:	f003 030f 	and.w	r3, r3, #15
 8007a4c:	b2da      	uxtb	r2, r3
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d101      	bne.n	8007a60 <HAL_PCD_EP_ClrStall+0x86>
 8007a5c:	2302      	movs	r3, #2
 8007a5e:	e00e      	b.n	8007a7e <HAL_PCD_EP_ClrStall+0xa4>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68f9      	ldr	r1, [r7, #12]
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f007 fd1c 	bl	800f4ac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007a7c:	2300      	movs	r3, #0
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3710      	adds	r7, #16
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}

08007a86 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b084      	sub	sp, #16
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
 8007a8e:	460b      	mov	r3, r1
 8007a90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007a92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	da0c      	bge.n	8007ab4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a9a:	78fb      	ldrb	r3, [r7, #3]
 8007a9c:	f003 020f 	and.w	r2, r3, #15
 8007aa0:	4613      	mov	r3, r2
 8007aa2:	00db      	lsls	r3, r3, #3
 8007aa4:	4413      	add	r3, r2
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	3310      	adds	r3, #16
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	4413      	add	r3, r2
 8007aae:	3304      	adds	r3, #4
 8007ab0:	60fb      	str	r3, [r7, #12]
 8007ab2:	e00c      	b.n	8007ace <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007ab4:	78fb      	ldrb	r3, [r7, #3]
 8007ab6:	f003 020f 	and.w	r2, r3, #15
 8007aba:	4613      	mov	r3, r2
 8007abc:	00db      	lsls	r3, r3, #3
 8007abe:	4413      	add	r3, r2
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	4413      	add	r3, r2
 8007aca:	3304      	adds	r3, #4
 8007acc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	68f9      	ldr	r1, [r7, #12]
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f007 fb3b 	bl	800f150 <USB_EPStopXfer>
 8007ada:	4603      	mov	r3, r0
 8007adc:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007ade:	7afb      	ldrb	r3, [r7, #11]
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3710      	adds	r7, #16
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b08a      	sub	sp, #40	@ 0x28
 8007aec:	af02      	add	r7, sp, #8
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007afc:	683a      	ldr	r2, [r7, #0]
 8007afe:	4613      	mov	r3, r2
 8007b00:	00db      	lsls	r3, r3, #3
 8007b02:	4413      	add	r3, r2
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	3310      	adds	r3, #16
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	4413      	add	r3, r2
 8007b0c:	3304      	adds	r3, #4
 8007b0e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	695a      	ldr	r2, [r3, #20]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d901      	bls.n	8007b20 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e06b      	b.n	8007bf8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	691a      	ldr	r2, [r3, #16]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	695b      	ldr	r3, [r3, #20]
 8007b28:	1ad3      	subs	r3, r2, r3
 8007b2a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	69fa      	ldr	r2, [r7, #28]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d902      	bls.n	8007b3c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	3303      	adds	r3, #3
 8007b40:	089b      	lsrs	r3, r3, #2
 8007b42:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007b44:	e02a      	b.n	8007b9c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	691a      	ldr	r2, [r3, #16]
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	695b      	ldr	r3, [r3, #20]
 8007b4e:	1ad3      	subs	r3, r2, r3
 8007b50:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	69fa      	ldr	r2, [r7, #28]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d902      	bls.n	8007b62 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	3303      	adds	r3, #3
 8007b66:	089b      	lsrs	r3, r3, #2
 8007b68:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	68d9      	ldr	r1, [r3, #12]
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	b2da      	uxtb	r2, r3
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007b7a:	9300      	str	r3, [sp, #0]
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	6978      	ldr	r0, [r7, #20]
 8007b80:	f007 fb90 	bl	800f2a4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	68da      	ldr	r2, [r3, #12]
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	441a      	add	r2, r3
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	695a      	ldr	r2, [r3, #20]
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	441a      	add	r2, r3
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	015a      	lsls	r2, r3, #5
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ba8:	699b      	ldr	r3, [r3, #24]
 8007baa:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007bac:	69ba      	ldr	r2, [r7, #24]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d809      	bhi.n	8007bc6 <PCD_WriteEmptyTxFifo+0xde>
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	695a      	ldr	r2, [r3, #20]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d203      	bcs.n	8007bc6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1bf      	bne.n	8007b46 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	691a      	ldr	r2, [r3, #16]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	695b      	ldr	r3, [r3, #20]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d811      	bhi.n	8007bf6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	f003 030f 	and.w	r3, r3, #15
 8007bd8:	2201      	movs	r2, #1
 8007bda:	fa02 f303 	lsl.w	r3, r2, r3
 8007bde:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007be6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	43db      	mvns	r3, r3
 8007bec:	6939      	ldr	r1, [r7, #16]
 8007bee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007bf2:	4013      	ands	r3, r2
 8007bf4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8007bf6:	2300      	movs	r3, #0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3720      	adds	r7, #32
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b088      	sub	sp, #32
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	333c      	adds	r3, #60	@ 0x3c
 8007c18:	3304      	adds	r3, #4
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	015a      	lsls	r2, r3, #5
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	4413      	add	r3, r2
 8007c26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	799b      	ldrb	r3, [r3, #6]
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d17b      	bne.n	8007d2e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	f003 0308 	and.w	r3, r3, #8
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d015      	beq.n	8007c6c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	4a61      	ldr	r2, [pc, #388]	@ (8007dc8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	f240 80b9 	bls.w	8007dbc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	f000 80b3 	beq.w	8007dbc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	015a      	lsls	r2, r3, #5
 8007c5a:	69bb      	ldr	r3, [r7, #24]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c62:	461a      	mov	r2, r3
 8007c64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c68:	6093      	str	r3, [r2, #8]
 8007c6a:	e0a7      	b.n	8007dbc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	f003 0320 	and.w	r3, r3, #32
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d009      	beq.n	8007c8a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	015a      	lsls	r2, r3, #5
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c82:	461a      	mov	r2, r3
 8007c84:	2320      	movs	r3, #32
 8007c86:	6093      	str	r3, [r2, #8]
 8007c88:	e098      	b.n	8007dbc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	f040 8093 	bne.w	8007dbc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	4a4b      	ldr	r2, [pc, #300]	@ (8007dc8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d90f      	bls.n	8007cbe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00a      	beq.n	8007cbe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	015a      	lsls	r2, r3, #5
 8007cac:	69bb      	ldr	r3, [r7, #24]
 8007cae:	4413      	add	r3, r2
 8007cb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cba:	6093      	str	r3, [r2, #8]
 8007cbc:	e07e      	b.n	8007dbc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007cbe:	683a      	ldr	r2, [r7, #0]
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	00db      	lsls	r3, r3, #3
 8007cc4:	4413      	add	r3, r2
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	4413      	add	r3, r2
 8007cd0:	3304      	adds	r3, #4
 8007cd2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	6a1a      	ldr	r2, [r3, #32]
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	0159      	lsls	r1, r3, #5
 8007cdc:	69bb      	ldr	r3, [r7, #24]
 8007cde:	440b      	add	r3, r1
 8007ce0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cea:	1ad2      	subs	r2, r2, r3
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d114      	bne.n	8007d20 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d109      	bne.n	8007d12 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6818      	ldr	r0, [r3, #0]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007d08:	461a      	mov	r2, r3
 8007d0a:	2101      	movs	r1, #1
 8007d0c:	f007 fd62 	bl	800f7d4 <USB_EP0_OutStart>
 8007d10:	e006      	b.n	8007d20 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	68da      	ldr	r2, [r3, #12]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	695b      	ldr	r3, [r3, #20]
 8007d1a:	441a      	add	r2, r3
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	4619      	mov	r1, r3
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f00a f87e 	bl	8011e28 <HAL_PCD_DataOutStageCallback>
 8007d2c:	e046      	b.n	8007dbc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	4a26      	ldr	r2, [pc, #152]	@ (8007dcc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d124      	bne.n	8007d80 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d00a      	beq.n	8007d56 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	015a      	lsls	r2, r3, #5
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	4413      	add	r3, r2
 8007d48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d52:	6093      	str	r3, [r2, #8]
 8007d54:	e032      	b.n	8007dbc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	f003 0320 	and.w	r3, r3, #32
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d008      	beq.n	8007d72 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	015a      	lsls	r2, r3, #5
 8007d64:	69bb      	ldr	r3, [r7, #24]
 8007d66:	4413      	add	r3, r2
 8007d68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	2320      	movs	r3, #32
 8007d70:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	4619      	mov	r1, r3
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f00a f855 	bl	8011e28 <HAL_PCD_DataOutStageCallback>
 8007d7e:	e01d      	b.n	8007dbc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d114      	bne.n	8007db0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007d86:	6879      	ldr	r1, [r7, #4]
 8007d88:	683a      	ldr	r2, [r7, #0]
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	00db      	lsls	r3, r3, #3
 8007d8e:	4413      	add	r3, r2
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	440b      	add	r3, r1
 8007d94:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d108      	bne.n	8007db0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6818      	ldr	r0, [r3, #0]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007da8:	461a      	mov	r2, r3
 8007daa:	2100      	movs	r1, #0
 8007dac:	f007 fd12 	bl	800f7d4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	4619      	mov	r1, r3
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f00a f836 	bl	8011e28 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3720      	adds	r7, #32
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	4f54300a 	.word	0x4f54300a
 8007dcc:	4f54310a 	.word	0x4f54310a

08007dd0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b086      	sub	sp, #24
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	333c      	adds	r3, #60	@ 0x3c
 8007de8:	3304      	adds	r3, #4
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	015a      	lsls	r2, r3, #5
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	4413      	add	r3, r2
 8007df6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	4a15      	ldr	r2, [pc, #84]	@ (8007e58 <PCD_EP_OutSetupPacket_int+0x88>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d90e      	bls.n	8007e24 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d009      	beq.n	8007e24 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	015a      	lsls	r2, r3, #5
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	4413      	add	r3, r2
 8007e18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e22:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f009 ffed 	bl	8011e04 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	4a0a      	ldr	r2, [pc, #40]	@ (8007e58 <PCD_EP_OutSetupPacket_int+0x88>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d90c      	bls.n	8007e4c <PCD_EP_OutSetupPacket_int+0x7c>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	799b      	ldrb	r3, [r3, #6]
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d108      	bne.n	8007e4c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6818      	ldr	r0, [r3, #0]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007e44:	461a      	mov	r2, r3
 8007e46:	2101      	movs	r1, #1
 8007e48:	f007 fcc4 	bl	800f7d4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3718      	adds	r7, #24
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	4f54300a 	.word	0x4f54300a

08007e5c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b085      	sub	sp, #20
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	460b      	mov	r3, r1
 8007e66:	70fb      	strb	r3, [r7, #3]
 8007e68:	4613      	mov	r3, r2
 8007e6a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e72:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007e74:	78fb      	ldrb	r3, [r7, #3]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d107      	bne.n	8007e8a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007e7a:	883b      	ldrh	r3, [r7, #0]
 8007e7c:	0419      	lsls	r1, r3, #16
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	68ba      	ldr	r2, [r7, #8]
 8007e84:	430a      	orrs	r2, r1
 8007e86:	629a      	str	r2, [r3, #40]	@ 0x28
 8007e88:	e028      	b.n	8007edc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e90:	0c1b      	lsrs	r3, r3, #16
 8007e92:	68ba      	ldr	r2, [r7, #8]
 8007e94:	4413      	add	r3, r2
 8007e96:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007e98:	2300      	movs	r3, #0
 8007e9a:	73fb      	strb	r3, [r7, #15]
 8007e9c:	e00d      	b.n	8007eba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	7bfb      	ldrb	r3, [r7, #15]
 8007ea4:	3340      	adds	r3, #64	@ 0x40
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	4413      	add	r3, r2
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	0c1b      	lsrs	r3, r3, #16
 8007eae:	68ba      	ldr	r2, [r7, #8]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007eb4:	7bfb      	ldrb	r3, [r7, #15]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	73fb      	strb	r3, [r7, #15]
 8007eba:	7bfa      	ldrb	r2, [r7, #15]
 8007ebc:	78fb      	ldrb	r3, [r7, #3]
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d3ec      	bcc.n	8007e9e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007ec4:	883b      	ldrh	r3, [r7, #0]
 8007ec6:	0418      	lsls	r0, r3, #16
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6819      	ldr	r1, [r3, #0]
 8007ecc:	78fb      	ldrb	r3, [r7, #3]
 8007ece:	3b01      	subs	r3, #1
 8007ed0:	68ba      	ldr	r2, [r7, #8]
 8007ed2:	4302      	orrs	r2, r0
 8007ed4:	3340      	adds	r3, #64	@ 0x40
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	440b      	add	r3, r1
 8007eda:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3714      	adds	r7, #20
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr

08007eea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007eea:	b480      	push	{r7}
 8007eec:	b083      	sub	sp, #12
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	887a      	ldrh	r2, [r7, #2]
 8007efc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b085      	sub	sp, #20
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	699b      	ldr	r3, [r3, #24]
 8007f2e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007f3a:	4b05      	ldr	r3, [pc, #20]	@ (8007f50 <HAL_PCDEx_ActivateLPM+0x44>)
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	68fa      	ldr	r2, [r7, #12]
 8007f40:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8007f42:	2300      	movs	r3, #0
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3714      	adds	r7, #20
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr
 8007f50:	10000003 	.word	0x10000003

08007f54 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007f60:	bf00      	nop
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007f74:	4b29      	ldr	r3, [pc, #164]	@ (800801c <HAL_PWREx_ConfigSupply+0xb0>)
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	f003 0307 	and.w	r3, r3, #7
 8007f7c:	2b06      	cmp	r3, #6
 8007f7e:	d00a      	beq.n	8007f96 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007f80:	4b26      	ldr	r3, [pc, #152]	@ (800801c <HAL_PWREx_ConfigSupply+0xb0>)
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d001      	beq.n	8007f92 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e040      	b.n	8008014 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007f92:	2300      	movs	r3, #0
 8007f94:	e03e      	b.n	8008014 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007f96:	4b21      	ldr	r3, [pc, #132]	@ (800801c <HAL_PWREx_ConfigSupply+0xb0>)
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8007f9e:	491f      	ldr	r1, [pc, #124]	@ (800801c <HAL_PWREx_ConfigSupply+0xb0>)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007fa6:	f7fa fd43 	bl	8002a30 <HAL_GetTick>
 8007faa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007fac:	e009      	b.n	8007fc2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007fae:	f7fa fd3f 	bl	8002a30 <HAL_GetTick>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	1ad3      	subs	r3, r2, r3
 8007fb8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007fbc:	d901      	bls.n	8007fc2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e028      	b.n	8008014 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007fc2:	4b16      	ldr	r3, [pc, #88]	@ (800801c <HAL_PWREx_ConfigSupply+0xb0>)
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007fca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fce:	d1ee      	bne.n	8007fae <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2b1e      	cmp	r3, #30
 8007fd4:	d008      	beq.n	8007fe8 <HAL_PWREx_ConfigSupply+0x7c>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2b2e      	cmp	r3, #46	@ 0x2e
 8007fda:	d005      	beq.n	8007fe8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2b1d      	cmp	r3, #29
 8007fe0:	d002      	beq.n	8007fe8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2b2d      	cmp	r3, #45	@ 0x2d
 8007fe6:	d114      	bne.n	8008012 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007fe8:	f7fa fd22 	bl	8002a30 <HAL_GetTick>
 8007fec:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007fee:	e009      	b.n	8008004 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007ff0:	f7fa fd1e 	bl	8002a30 <HAL_GetTick>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	1ad3      	subs	r3, r2, r3
 8007ffa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007ffe:	d901      	bls.n	8008004 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	e007      	b.n	8008014 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008004:	4b05      	ldr	r3, [pc, #20]	@ (800801c <HAL_PWREx_ConfigSupply+0xb0>)
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800800c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008010:	d1ee      	bne.n	8007ff0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	58024800 	.word	0x58024800

08008020 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8008020:	b480      	push	{r7}
 8008022:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008024:	4b05      	ldr	r3, [pc, #20]	@ (800803c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	4a04      	ldr	r2, [pc, #16]	@ (800803c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800802a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800802e:	60d3      	str	r3, [r2, #12]
}
 8008030:	bf00      	nop
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	58024800 	.word	0x58024800

08008040 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b08c      	sub	sp, #48	@ 0x30
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d102      	bne.n	8008054 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	f000 bc48 	b.w	80088e4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f003 0301 	and.w	r3, r3, #1
 800805c:	2b00      	cmp	r3, #0
 800805e:	f000 8088 	beq.w	8008172 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008062:	4b99      	ldr	r3, [pc, #612]	@ (80082c8 <HAL_RCC_OscConfig+0x288>)
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800806a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800806c:	4b96      	ldr	r3, [pc, #600]	@ (80082c8 <HAL_RCC_OscConfig+0x288>)
 800806e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008070:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008074:	2b10      	cmp	r3, #16
 8008076:	d007      	beq.n	8008088 <HAL_RCC_OscConfig+0x48>
 8008078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800807a:	2b18      	cmp	r3, #24
 800807c:	d111      	bne.n	80080a2 <HAL_RCC_OscConfig+0x62>
 800807e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008080:	f003 0303 	and.w	r3, r3, #3
 8008084:	2b02      	cmp	r3, #2
 8008086:	d10c      	bne.n	80080a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008088:	4b8f      	ldr	r3, [pc, #572]	@ (80082c8 <HAL_RCC_OscConfig+0x288>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008090:	2b00      	cmp	r3, #0
 8008092:	d06d      	beq.n	8008170 <HAL_RCC_OscConfig+0x130>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d169      	bne.n	8008170 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	f000 bc21 	b.w	80088e4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080aa:	d106      	bne.n	80080ba <HAL_RCC_OscConfig+0x7a>
 80080ac:	4b86      	ldr	r3, [pc, #536]	@ (80082c8 <HAL_RCC_OscConfig+0x288>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a85      	ldr	r2, [pc, #532]	@ (80082c8 <HAL_RCC_OscConfig+0x288>)
 80080b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80080b6:	6013      	str	r3, [r2, #0]
 80080b8:	e02e      	b.n	8008118 <HAL_RCC_OscConfig+0xd8>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d10c      	bne.n	80080dc <HAL_RCC_OscConfig+0x9c>
 80080c2:	4b81      	ldr	r3, [pc, #516]	@ (80082c8 <HAL_RCC_OscConfig+0x288>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a80      	ldr	r2, [pc, #512]	@ (80082c8 <HAL_RCC_OscConfig+0x288>)
 80080c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080cc:	6013      	str	r3, [r2, #0]
 80080ce:	4b7e      	ldr	r3, [pc, #504]	@ (80082c8 <HAL_RCC_OscConfig+0x288>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a7d      	ldr	r2, [pc, #500]	@ (80082c8 <HAL_RCC_OscConfig+0x288>)
 80080d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80080d8:	6013      	str	r3, [r2, #0]
 80080da:	e01d      	b.n	8008118 <HAL_RCC_OscConfig+0xd8>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80080e4:	d10c      	bne.n	8008100 <HAL_RCC_OscConfig+0xc0>
 80080e6:	4b78      	ldr	r3, [pc, #480]	@ (80082c8 <HAL_RCC_OscConfig+0x288>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a77      	ldr	r2, [pc, #476]	@ (80082c8 <HAL_RCC_OscConfig+0x288>)
 80080ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80080f0:	6013      	str	r3, [r2, #0]
 80080f2:	4b75      	ldr	r3, [pc, #468]	@ (80082c8 <HAL_RCC_OscConfig+0x288>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a74      	ldr	r2, [pc, #464]	@ (80082c8 <HAL_RCC_OscConfig+0x288>)
 80080f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80080fc:	6013      	str	r3, [r2, #0]
 80080fe:	e00b      	b.n	8008118 <HAL_RCC_OscConfig+0xd8>
 8008100:	4b71      	ldr	r3, [pc, #452]	@ (80082c8 <HAL_RCC_OscConfig+0x288>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a70      	ldr	r2, [pc, #448]	@ (80082c8 <HAL_RCC_OscConfig+0x288>)
 8008106:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800810a:	6013      	str	r3, [r2, #0]
 800810c:	4b6e      	ldr	r3, [pc, #440]	@ (80082c8 <HAL_RCC_OscConfig+0x288>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a6d      	ldr	r2, [pc, #436]	@ (80082c8 <HAL_RCC_OscConfig+0x288>)
 8008112:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d013      	beq.n	8008148 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008120:	f7fa fc86 	bl	8002a30 <HAL_GetTick>
 8008124:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008126:	e008      	b.n	800813a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008128:	f7fa fc82 	bl	8002a30 <HAL_GetTick>
 800812c:	4602      	mov	r2, r0
 800812e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	2b64      	cmp	r3, #100	@ 0x64
 8008134:	d901      	bls.n	800813a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008136:	2303      	movs	r3, #3
 8008138:	e3d4      	b.n	80088e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800813a:	4b63      	ldr	r3, [pc, #396]	@ (80082c8 <HAL_RCC_OscConfig+0x288>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008142:	2b00      	cmp	r3, #0
 8008144:	d0f0      	beq.n	8008128 <HAL_RCC_OscConfig+0xe8>
 8008146:	e014      	b.n	8008172 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008148:	f7fa fc72 	bl	8002a30 <HAL_GetTick>
 800814c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800814e:	e008      	b.n	8008162 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008150:	f7fa fc6e 	bl	8002a30 <HAL_GetTick>
 8008154:	4602      	mov	r2, r0
 8008156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008158:	1ad3      	subs	r3, r2, r3
 800815a:	2b64      	cmp	r3, #100	@ 0x64
 800815c:	d901      	bls.n	8008162 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800815e:	2303      	movs	r3, #3
 8008160:	e3c0      	b.n	80088e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008162:	4b59      	ldr	r3, [pc, #356]	@ (80082c8 <HAL_RCC_OscConfig+0x288>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800816a:	2b00      	cmp	r3, #0
 800816c:	d1f0      	bne.n	8008150 <HAL_RCC_OscConfig+0x110>
 800816e:	e000      	b.n	8008172 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f003 0302 	and.w	r3, r3, #2
 800817a:	2b00      	cmp	r3, #0
 800817c:	f000 80ca 	beq.w	8008314 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008180:	4b51      	ldr	r3, [pc, #324]	@ (80082c8 <HAL_RCC_OscConfig+0x288>)
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008188:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800818a:	4b4f      	ldr	r3, [pc, #316]	@ (80082c8 <HAL_RCC_OscConfig+0x288>)
 800818c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800818e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008190:	6a3b      	ldr	r3, [r7, #32]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d007      	beq.n	80081a6 <HAL_RCC_OscConfig+0x166>
 8008196:	6a3b      	ldr	r3, [r7, #32]
 8008198:	2b18      	cmp	r3, #24
 800819a:	d156      	bne.n	800824a <HAL_RCC_OscConfig+0x20a>
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	f003 0303 	and.w	r3, r3, #3
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d151      	bne.n	800824a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80081a6:	4b48      	ldr	r3, [pc, #288]	@ (80082c8 <HAL_RCC_OscConfig+0x288>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f003 0304 	and.w	r3, r3, #4
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d005      	beq.n	80081be <HAL_RCC_OscConfig+0x17e>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d101      	bne.n	80081be <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e392      	b.n	80088e4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80081be:	4b42      	ldr	r3, [pc, #264]	@ (80082c8 <HAL_RCC_OscConfig+0x288>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f023 0219 	bic.w	r2, r3, #25
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	493f      	ldr	r1, [pc, #252]	@ (80082c8 <HAL_RCC_OscConfig+0x288>)
 80081cc:	4313      	orrs	r3, r2
 80081ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081d0:	f7fa fc2e 	bl	8002a30 <HAL_GetTick>
 80081d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80081d6:	e008      	b.n	80081ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081d8:	f7fa fc2a 	bl	8002a30 <HAL_GetTick>
 80081dc:	4602      	mov	r2, r0
 80081de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e0:	1ad3      	subs	r3, r2, r3
 80081e2:	2b02      	cmp	r3, #2
 80081e4:	d901      	bls.n	80081ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80081e6:	2303      	movs	r3, #3
 80081e8:	e37c      	b.n	80088e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80081ea:	4b37      	ldr	r3, [pc, #220]	@ (80082c8 <HAL_RCC_OscConfig+0x288>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f003 0304 	and.w	r3, r3, #4
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d0f0      	beq.n	80081d8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081f6:	f7fa fc4b 	bl	8002a90 <HAL_GetREVID>
 80081fa:	4603      	mov	r3, r0
 80081fc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008200:	4293      	cmp	r3, r2
 8008202:	d817      	bhi.n	8008234 <HAL_RCC_OscConfig+0x1f4>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	691b      	ldr	r3, [r3, #16]
 8008208:	2b40      	cmp	r3, #64	@ 0x40
 800820a:	d108      	bne.n	800821e <HAL_RCC_OscConfig+0x1de>
 800820c:	4b2e      	ldr	r3, [pc, #184]	@ (80082c8 <HAL_RCC_OscConfig+0x288>)
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008214:	4a2c      	ldr	r2, [pc, #176]	@ (80082c8 <HAL_RCC_OscConfig+0x288>)
 8008216:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800821a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800821c:	e07a      	b.n	8008314 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800821e:	4b2a      	ldr	r3, [pc, #168]	@ (80082c8 <HAL_RCC_OscConfig+0x288>)
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	031b      	lsls	r3, r3, #12
 800822c:	4926      	ldr	r1, [pc, #152]	@ (80082c8 <HAL_RCC_OscConfig+0x288>)
 800822e:	4313      	orrs	r3, r2
 8008230:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008232:	e06f      	b.n	8008314 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008234:	4b24      	ldr	r3, [pc, #144]	@ (80082c8 <HAL_RCC_OscConfig+0x288>)
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	691b      	ldr	r3, [r3, #16]
 8008240:	061b      	lsls	r3, r3, #24
 8008242:	4921      	ldr	r1, [pc, #132]	@ (80082c8 <HAL_RCC_OscConfig+0x288>)
 8008244:	4313      	orrs	r3, r2
 8008246:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008248:	e064      	b.n	8008314 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d047      	beq.n	80082e2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008252:	4b1d      	ldr	r3, [pc, #116]	@ (80082c8 <HAL_RCC_OscConfig+0x288>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f023 0219 	bic.w	r2, r3, #25
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	68db      	ldr	r3, [r3, #12]
 800825e:	491a      	ldr	r1, [pc, #104]	@ (80082c8 <HAL_RCC_OscConfig+0x288>)
 8008260:	4313      	orrs	r3, r2
 8008262:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008264:	f7fa fbe4 	bl	8002a30 <HAL_GetTick>
 8008268:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800826a:	e008      	b.n	800827e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800826c:	f7fa fbe0 	bl	8002a30 <HAL_GetTick>
 8008270:	4602      	mov	r2, r0
 8008272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008274:	1ad3      	subs	r3, r2, r3
 8008276:	2b02      	cmp	r3, #2
 8008278:	d901      	bls.n	800827e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800827a:	2303      	movs	r3, #3
 800827c:	e332      	b.n	80088e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800827e:	4b12      	ldr	r3, [pc, #72]	@ (80082c8 <HAL_RCC_OscConfig+0x288>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 0304 	and.w	r3, r3, #4
 8008286:	2b00      	cmp	r3, #0
 8008288:	d0f0      	beq.n	800826c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800828a:	f7fa fc01 	bl	8002a90 <HAL_GetREVID>
 800828e:	4603      	mov	r3, r0
 8008290:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008294:	4293      	cmp	r3, r2
 8008296:	d819      	bhi.n	80082cc <HAL_RCC_OscConfig+0x28c>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	691b      	ldr	r3, [r3, #16]
 800829c:	2b40      	cmp	r3, #64	@ 0x40
 800829e:	d108      	bne.n	80082b2 <HAL_RCC_OscConfig+0x272>
 80082a0:	4b09      	ldr	r3, [pc, #36]	@ (80082c8 <HAL_RCC_OscConfig+0x288>)
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80082a8:	4a07      	ldr	r2, [pc, #28]	@ (80082c8 <HAL_RCC_OscConfig+0x288>)
 80082aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082ae:	6053      	str	r3, [r2, #4]
 80082b0:	e030      	b.n	8008314 <HAL_RCC_OscConfig+0x2d4>
 80082b2:	4b05      	ldr	r3, [pc, #20]	@ (80082c8 <HAL_RCC_OscConfig+0x288>)
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	691b      	ldr	r3, [r3, #16]
 80082be:	031b      	lsls	r3, r3, #12
 80082c0:	4901      	ldr	r1, [pc, #4]	@ (80082c8 <HAL_RCC_OscConfig+0x288>)
 80082c2:	4313      	orrs	r3, r2
 80082c4:	604b      	str	r3, [r1, #4]
 80082c6:	e025      	b.n	8008314 <HAL_RCC_OscConfig+0x2d4>
 80082c8:	58024400 	.word	0x58024400
 80082cc:	4b9a      	ldr	r3, [pc, #616]	@ (8008538 <HAL_RCC_OscConfig+0x4f8>)
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	061b      	lsls	r3, r3, #24
 80082da:	4997      	ldr	r1, [pc, #604]	@ (8008538 <HAL_RCC_OscConfig+0x4f8>)
 80082dc:	4313      	orrs	r3, r2
 80082de:	604b      	str	r3, [r1, #4]
 80082e0:	e018      	b.n	8008314 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80082e2:	4b95      	ldr	r3, [pc, #596]	@ (8008538 <HAL_RCC_OscConfig+0x4f8>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a94      	ldr	r2, [pc, #592]	@ (8008538 <HAL_RCC_OscConfig+0x4f8>)
 80082e8:	f023 0301 	bic.w	r3, r3, #1
 80082ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082ee:	f7fa fb9f 	bl	8002a30 <HAL_GetTick>
 80082f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80082f4:	e008      	b.n	8008308 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80082f6:	f7fa fb9b 	bl	8002a30 <HAL_GetTick>
 80082fa:	4602      	mov	r2, r0
 80082fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082fe:	1ad3      	subs	r3, r2, r3
 8008300:	2b02      	cmp	r3, #2
 8008302:	d901      	bls.n	8008308 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008304:	2303      	movs	r3, #3
 8008306:	e2ed      	b.n	80088e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008308:	4b8b      	ldr	r3, [pc, #556]	@ (8008538 <HAL_RCC_OscConfig+0x4f8>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f003 0304 	and.w	r3, r3, #4
 8008310:	2b00      	cmp	r3, #0
 8008312:	d1f0      	bne.n	80082f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f003 0310 	and.w	r3, r3, #16
 800831c:	2b00      	cmp	r3, #0
 800831e:	f000 80a9 	beq.w	8008474 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008322:	4b85      	ldr	r3, [pc, #532]	@ (8008538 <HAL_RCC_OscConfig+0x4f8>)
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800832a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800832c:	4b82      	ldr	r3, [pc, #520]	@ (8008538 <HAL_RCC_OscConfig+0x4f8>)
 800832e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008330:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	2b08      	cmp	r3, #8
 8008336:	d007      	beq.n	8008348 <HAL_RCC_OscConfig+0x308>
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	2b18      	cmp	r3, #24
 800833c:	d13a      	bne.n	80083b4 <HAL_RCC_OscConfig+0x374>
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	f003 0303 	and.w	r3, r3, #3
 8008344:	2b01      	cmp	r3, #1
 8008346:	d135      	bne.n	80083b4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008348:	4b7b      	ldr	r3, [pc, #492]	@ (8008538 <HAL_RCC_OscConfig+0x4f8>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008350:	2b00      	cmp	r3, #0
 8008352:	d005      	beq.n	8008360 <HAL_RCC_OscConfig+0x320>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	69db      	ldr	r3, [r3, #28]
 8008358:	2b80      	cmp	r3, #128	@ 0x80
 800835a:	d001      	beq.n	8008360 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e2c1      	b.n	80088e4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008360:	f7fa fb96 	bl	8002a90 <HAL_GetREVID>
 8008364:	4603      	mov	r3, r0
 8008366:	f241 0203 	movw	r2, #4099	@ 0x1003
 800836a:	4293      	cmp	r3, r2
 800836c:	d817      	bhi.n	800839e <HAL_RCC_OscConfig+0x35e>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a1b      	ldr	r3, [r3, #32]
 8008372:	2b20      	cmp	r3, #32
 8008374:	d108      	bne.n	8008388 <HAL_RCC_OscConfig+0x348>
 8008376:	4b70      	ldr	r3, [pc, #448]	@ (8008538 <HAL_RCC_OscConfig+0x4f8>)
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800837e:	4a6e      	ldr	r2, [pc, #440]	@ (8008538 <HAL_RCC_OscConfig+0x4f8>)
 8008380:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008384:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008386:	e075      	b.n	8008474 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008388:	4b6b      	ldr	r3, [pc, #428]	@ (8008538 <HAL_RCC_OscConfig+0x4f8>)
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a1b      	ldr	r3, [r3, #32]
 8008394:	069b      	lsls	r3, r3, #26
 8008396:	4968      	ldr	r1, [pc, #416]	@ (8008538 <HAL_RCC_OscConfig+0x4f8>)
 8008398:	4313      	orrs	r3, r2
 800839a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800839c:	e06a      	b.n	8008474 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800839e:	4b66      	ldr	r3, [pc, #408]	@ (8008538 <HAL_RCC_OscConfig+0x4f8>)
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6a1b      	ldr	r3, [r3, #32]
 80083aa:	061b      	lsls	r3, r3, #24
 80083ac:	4962      	ldr	r1, [pc, #392]	@ (8008538 <HAL_RCC_OscConfig+0x4f8>)
 80083ae:	4313      	orrs	r3, r2
 80083b0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80083b2:	e05f      	b.n	8008474 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	69db      	ldr	r3, [r3, #28]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d042      	beq.n	8008442 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80083bc:	4b5e      	ldr	r3, [pc, #376]	@ (8008538 <HAL_RCC_OscConfig+0x4f8>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a5d      	ldr	r2, [pc, #372]	@ (8008538 <HAL_RCC_OscConfig+0x4f8>)
 80083c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083c8:	f7fa fb32 	bl	8002a30 <HAL_GetTick>
 80083cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80083ce:	e008      	b.n	80083e2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80083d0:	f7fa fb2e 	bl	8002a30 <HAL_GetTick>
 80083d4:	4602      	mov	r2, r0
 80083d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d8:	1ad3      	subs	r3, r2, r3
 80083da:	2b02      	cmp	r3, #2
 80083dc:	d901      	bls.n	80083e2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80083de:	2303      	movs	r3, #3
 80083e0:	e280      	b.n	80088e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80083e2:	4b55      	ldr	r3, [pc, #340]	@ (8008538 <HAL_RCC_OscConfig+0x4f8>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d0f0      	beq.n	80083d0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80083ee:	f7fa fb4f 	bl	8002a90 <HAL_GetREVID>
 80083f2:	4603      	mov	r3, r0
 80083f4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d817      	bhi.n	800842c <HAL_RCC_OscConfig+0x3ec>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6a1b      	ldr	r3, [r3, #32]
 8008400:	2b20      	cmp	r3, #32
 8008402:	d108      	bne.n	8008416 <HAL_RCC_OscConfig+0x3d6>
 8008404:	4b4c      	ldr	r3, [pc, #304]	@ (8008538 <HAL_RCC_OscConfig+0x4f8>)
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800840c:	4a4a      	ldr	r2, [pc, #296]	@ (8008538 <HAL_RCC_OscConfig+0x4f8>)
 800840e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008412:	6053      	str	r3, [r2, #4]
 8008414:	e02e      	b.n	8008474 <HAL_RCC_OscConfig+0x434>
 8008416:	4b48      	ldr	r3, [pc, #288]	@ (8008538 <HAL_RCC_OscConfig+0x4f8>)
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a1b      	ldr	r3, [r3, #32]
 8008422:	069b      	lsls	r3, r3, #26
 8008424:	4944      	ldr	r1, [pc, #272]	@ (8008538 <HAL_RCC_OscConfig+0x4f8>)
 8008426:	4313      	orrs	r3, r2
 8008428:	604b      	str	r3, [r1, #4]
 800842a:	e023      	b.n	8008474 <HAL_RCC_OscConfig+0x434>
 800842c:	4b42      	ldr	r3, [pc, #264]	@ (8008538 <HAL_RCC_OscConfig+0x4f8>)
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6a1b      	ldr	r3, [r3, #32]
 8008438:	061b      	lsls	r3, r3, #24
 800843a:	493f      	ldr	r1, [pc, #252]	@ (8008538 <HAL_RCC_OscConfig+0x4f8>)
 800843c:	4313      	orrs	r3, r2
 800843e:	60cb      	str	r3, [r1, #12]
 8008440:	e018      	b.n	8008474 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008442:	4b3d      	ldr	r3, [pc, #244]	@ (8008538 <HAL_RCC_OscConfig+0x4f8>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a3c      	ldr	r2, [pc, #240]	@ (8008538 <HAL_RCC_OscConfig+0x4f8>)
 8008448:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800844c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800844e:	f7fa faef 	bl	8002a30 <HAL_GetTick>
 8008452:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008454:	e008      	b.n	8008468 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008456:	f7fa faeb 	bl	8002a30 <HAL_GetTick>
 800845a:	4602      	mov	r2, r0
 800845c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800845e:	1ad3      	subs	r3, r2, r3
 8008460:	2b02      	cmp	r3, #2
 8008462:	d901      	bls.n	8008468 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008464:	2303      	movs	r3, #3
 8008466:	e23d      	b.n	80088e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008468:	4b33      	ldr	r3, [pc, #204]	@ (8008538 <HAL_RCC_OscConfig+0x4f8>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008470:	2b00      	cmp	r3, #0
 8008472:	d1f0      	bne.n	8008456 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 0308 	and.w	r3, r3, #8
 800847c:	2b00      	cmp	r3, #0
 800847e:	d036      	beq.n	80084ee <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	695b      	ldr	r3, [r3, #20]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d019      	beq.n	80084bc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008488:	4b2b      	ldr	r3, [pc, #172]	@ (8008538 <HAL_RCC_OscConfig+0x4f8>)
 800848a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800848c:	4a2a      	ldr	r2, [pc, #168]	@ (8008538 <HAL_RCC_OscConfig+0x4f8>)
 800848e:	f043 0301 	orr.w	r3, r3, #1
 8008492:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008494:	f7fa facc 	bl	8002a30 <HAL_GetTick>
 8008498:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800849a:	e008      	b.n	80084ae <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800849c:	f7fa fac8 	bl	8002a30 <HAL_GetTick>
 80084a0:	4602      	mov	r2, r0
 80084a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a4:	1ad3      	subs	r3, r2, r3
 80084a6:	2b02      	cmp	r3, #2
 80084a8:	d901      	bls.n	80084ae <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80084aa:	2303      	movs	r3, #3
 80084ac:	e21a      	b.n	80088e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80084ae:	4b22      	ldr	r3, [pc, #136]	@ (8008538 <HAL_RCC_OscConfig+0x4f8>)
 80084b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084b2:	f003 0302 	and.w	r3, r3, #2
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d0f0      	beq.n	800849c <HAL_RCC_OscConfig+0x45c>
 80084ba:	e018      	b.n	80084ee <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80084bc:	4b1e      	ldr	r3, [pc, #120]	@ (8008538 <HAL_RCC_OscConfig+0x4f8>)
 80084be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084c0:	4a1d      	ldr	r2, [pc, #116]	@ (8008538 <HAL_RCC_OscConfig+0x4f8>)
 80084c2:	f023 0301 	bic.w	r3, r3, #1
 80084c6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084c8:	f7fa fab2 	bl	8002a30 <HAL_GetTick>
 80084cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80084ce:	e008      	b.n	80084e2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084d0:	f7fa faae 	bl	8002a30 <HAL_GetTick>
 80084d4:	4602      	mov	r2, r0
 80084d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d8:	1ad3      	subs	r3, r2, r3
 80084da:	2b02      	cmp	r3, #2
 80084dc:	d901      	bls.n	80084e2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80084de:	2303      	movs	r3, #3
 80084e0:	e200      	b.n	80088e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80084e2:	4b15      	ldr	r3, [pc, #84]	@ (8008538 <HAL_RCC_OscConfig+0x4f8>)
 80084e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084e6:	f003 0302 	and.w	r3, r3, #2
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d1f0      	bne.n	80084d0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f003 0320 	and.w	r3, r3, #32
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d039      	beq.n	800856e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	699b      	ldr	r3, [r3, #24]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d01c      	beq.n	800853c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008502:	4b0d      	ldr	r3, [pc, #52]	@ (8008538 <HAL_RCC_OscConfig+0x4f8>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a0c      	ldr	r2, [pc, #48]	@ (8008538 <HAL_RCC_OscConfig+0x4f8>)
 8008508:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800850c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800850e:	f7fa fa8f 	bl	8002a30 <HAL_GetTick>
 8008512:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008514:	e008      	b.n	8008528 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008516:	f7fa fa8b 	bl	8002a30 <HAL_GetTick>
 800851a:	4602      	mov	r2, r0
 800851c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800851e:	1ad3      	subs	r3, r2, r3
 8008520:	2b02      	cmp	r3, #2
 8008522:	d901      	bls.n	8008528 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008524:	2303      	movs	r3, #3
 8008526:	e1dd      	b.n	80088e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008528:	4b03      	ldr	r3, [pc, #12]	@ (8008538 <HAL_RCC_OscConfig+0x4f8>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008530:	2b00      	cmp	r3, #0
 8008532:	d0f0      	beq.n	8008516 <HAL_RCC_OscConfig+0x4d6>
 8008534:	e01b      	b.n	800856e <HAL_RCC_OscConfig+0x52e>
 8008536:	bf00      	nop
 8008538:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800853c:	4b9b      	ldr	r3, [pc, #620]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a9a      	ldr	r2, [pc, #616]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 8008542:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008546:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008548:	f7fa fa72 	bl	8002a30 <HAL_GetTick>
 800854c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800854e:	e008      	b.n	8008562 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008550:	f7fa fa6e 	bl	8002a30 <HAL_GetTick>
 8008554:	4602      	mov	r2, r0
 8008556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008558:	1ad3      	subs	r3, r2, r3
 800855a:	2b02      	cmp	r3, #2
 800855c:	d901      	bls.n	8008562 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800855e:	2303      	movs	r3, #3
 8008560:	e1c0      	b.n	80088e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008562:	4b92      	ldr	r3, [pc, #584]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800856a:	2b00      	cmp	r3, #0
 800856c:	d1f0      	bne.n	8008550 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f003 0304 	and.w	r3, r3, #4
 8008576:	2b00      	cmp	r3, #0
 8008578:	f000 8081 	beq.w	800867e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800857c:	4b8c      	ldr	r3, [pc, #560]	@ (80087b0 <HAL_RCC_OscConfig+0x770>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a8b      	ldr	r2, [pc, #556]	@ (80087b0 <HAL_RCC_OscConfig+0x770>)
 8008582:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008586:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008588:	f7fa fa52 	bl	8002a30 <HAL_GetTick>
 800858c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800858e:	e008      	b.n	80085a2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008590:	f7fa fa4e 	bl	8002a30 <HAL_GetTick>
 8008594:	4602      	mov	r2, r0
 8008596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008598:	1ad3      	subs	r3, r2, r3
 800859a:	2b64      	cmp	r3, #100	@ 0x64
 800859c:	d901      	bls.n	80085a2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800859e:	2303      	movs	r3, #3
 80085a0:	e1a0      	b.n	80088e4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80085a2:	4b83      	ldr	r3, [pc, #524]	@ (80087b0 <HAL_RCC_OscConfig+0x770>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d0f0      	beq.n	8008590 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d106      	bne.n	80085c4 <HAL_RCC_OscConfig+0x584>
 80085b6:	4b7d      	ldr	r3, [pc, #500]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 80085b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085ba:	4a7c      	ldr	r2, [pc, #496]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 80085bc:	f043 0301 	orr.w	r3, r3, #1
 80085c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80085c2:	e02d      	b.n	8008620 <HAL_RCC_OscConfig+0x5e0>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d10c      	bne.n	80085e6 <HAL_RCC_OscConfig+0x5a6>
 80085cc:	4b77      	ldr	r3, [pc, #476]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 80085ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085d0:	4a76      	ldr	r2, [pc, #472]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 80085d2:	f023 0301 	bic.w	r3, r3, #1
 80085d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80085d8:	4b74      	ldr	r3, [pc, #464]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 80085da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085dc:	4a73      	ldr	r2, [pc, #460]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 80085de:	f023 0304 	bic.w	r3, r3, #4
 80085e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80085e4:	e01c      	b.n	8008620 <HAL_RCC_OscConfig+0x5e0>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	2b05      	cmp	r3, #5
 80085ec:	d10c      	bne.n	8008608 <HAL_RCC_OscConfig+0x5c8>
 80085ee:	4b6f      	ldr	r3, [pc, #444]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 80085f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085f2:	4a6e      	ldr	r2, [pc, #440]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 80085f4:	f043 0304 	orr.w	r3, r3, #4
 80085f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80085fa:	4b6c      	ldr	r3, [pc, #432]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 80085fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085fe:	4a6b      	ldr	r2, [pc, #428]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 8008600:	f043 0301 	orr.w	r3, r3, #1
 8008604:	6713      	str	r3, [r2, #112]	@ 0x70
 8008606:	e00b      	b.n	8008620 <HAL_RCC_OscConfig+0x5e0>
 8008608:	4b68      	ldr	r3, [pc, #416]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 800860a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800860c:	4a67      	ldr	r2, [pc, #412]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 800860e:	f023 0301 	bic.w	r3, r3, #1
 8008612:	6713      	str	r3, [r2, #112]	@ 0x70
 8008614:	4b65      	ldr	r3, [pc, #404]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 8008616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008618:	4a64      	ldr	r2, [pc, #400]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 800861a:	f023 0304 	bic.w	r3, r3, #4
 800861e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d015      	beq.n	8008654 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008628:	f7fa fa02 	bl	8002a30 <HAL_GetTick>
 800862c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800862e:	e00a      	b.n	8008646 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008630:	f7fa f9fe 	bl	8002a30 <HAL_GetTick>
 8008634:	4602      	mov	r2, r0
 8008636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008638:	1ad3      	subs	r3, r2, r3
 800863a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800863e:	4293      	cmp	r3, r2
 8008640:	d901      	bls.n	8008646 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008642:	2303      	movs	r3, #3
 8008644:	e14e      	b.n	80088e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008646:	4b59      	ldr	r3, [pc, #356]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 8008648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800864a:	f003 0302 	and.w	r3, r3, #2
 800864e:	2b00      	cmp	r3, #0
 8008650:	d0ee      	beq.n	8008630 <HAL_RCC_OscConfig+0x5f0>
 8008652:	e014      	b.n	800867e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008654:	f7fa f9ec 	bl	8002a30 <HAL_GetTick>
 8008658:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800865a:	e00a      	b.n	8008672 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800865c:	f7fa f9e8 	bl	8002a30 <HAL_GetTick>
 8008660:	4602      	mov	r2, r0
 8008662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008664:	1ad3      	subs	r3, r2, r3
 8008666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800866a:	4293      	cmp	r3, r2
 800866c:	d901      	bls.n	8008672 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800866e:	2303      	movs	r3, #3
 8008670:	e138      	b.n	80088e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008672:	4b4e      	ldr	r3, [pc, #312]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 8008674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008676:	f003 0302 	and.w	r3, r3, #2
 800867a:	2b00      	cmp	r3, #0
 800867c:	d1ee      	bne.n	800865c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008682:	2b00      	cmp	r3, #0
 8008684:	f000 812d 	beq.w	80088e2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008688:	4b48      	ldr	r3, [pc, #288]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 800868a:	691b      	ldr	r3, [r3, #16]
 800868c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008690:	2b18      	cmp	r3, #24
 8008692:	f000 80bd 	beq.w	8008810 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800869a:	2b02      	cmp	r3, #2
 800869c:	f040 809e 	bne.w	80087dc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086a0:	4b42      	ldr	r3, [pc, #264]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a41      	ldr	r2, [pc, #260]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 80086a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80086aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086ac:	f7fa f9c0 	bl	8002a30 <HAL_GetTick>
 80086b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80086b2:	e008      	b.n	80086c6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086b4:	f7fa f9bc 	bl	8002a30 <HAL_GetTick>
 80086b8:	4602      	mov	r2, r0
 80086ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086bc:	1ad3      	subs	r3, r2, r3
 80086be:	2b02      	cmp	r3, #2
 80086c0:	d901      	bls.n	80086c6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80086c2:	2303      	movs	r3, #3
 80086c4:	e10e      	b.n	80088e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80086c6:	4b39      	ldr	r3, [pc, #228]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d1f0      	bne.n	80086b4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80086d2:	4b36      	ldr	r3, [pc, #216]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 80086d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80086d6:	4b37      	ldr	r3, [pc, #220]	@ (80087b4 <HAL_RCC_OscConfig+0x774>)
 80086d8:	4013      	ands	r3, r2
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80086e2:	0112      	lsls	r2, r2, #4
 80086e4:	430a      	orrs	r2, r1
 80086e6:	4931      	ldr	r1, [pc, #196]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 80086e8:	4313      	orrs	r3, r2
 80086ea:	628b      	str	r3, [r1, #40]	@ 0x28
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086f0:	3b01      	subs	r3, #1
 80086f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086fa:	3b01      	subs	r3, #1
 80086fc:	025b      	lsls	r3, r3, #9
 80086fe:	b29b      	uxth	r3, r3
 8008700:	431a      	orrs	r2, r3
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008706:	3b01      	subs	r3, #1
 8008708:	041b      	lsls	r3, r3, #16
 800870a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800870e:	431a      	orrs	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008714:	3b01      	subs	r3, #1
 8008716:	061b      	lsls	r3, r3, #24
 8008718:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800871c:	4923      	ldr	r1, [pc, #140]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 800871e:	4313      	orrs	r3, r2
 8008720:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008722:	4b22      	ldr	r3, [pc, #136]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 8008724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008726:	4a21      	ldr	r2, [pc, #132]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 8008728:	f023 0301 	bic.w	r3, r3, #1
 800872c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800872e:	4b1f      	ldr	r3, [pc, #124]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 8008730:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008732:	4b21      	ldr	r3, [pc, #132]	@ (80087b8 <HAL_RCC_OscConfig+0x778>)
 8008734:	4013      	ands	r3, r2
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800873a:	00d2      	lsls	r2, r2, #3
 800873c:	491b      	ldr	r1, [pc, #108]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 800873e:	4313      	orrs	r3, r2
 8008740:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008742:	4b1a      	ldr	r3, [pc, #104]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 8008744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008746:	f023 020c 	bic.w	r2, r3, #12
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800874e:	4917      	ldr	r1, [pc, #92]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 8008750:	4313      	orrs	r3, r2
 8008752:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008754:	4b15      	ldr	r3, [pc, #84]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 8008756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008758:	f023 0202 	bic.w	r2, r3, #2
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008760:	4912      	ldr	r1, [pc, #72]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 8008762:	4313      	orrs	r3, r2
 8008764:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008766:	4b11      	ldr	r3, [pc, #68]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 8008768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800876a:	4a10      	ldr	r2, [pc, #64]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 800876c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008770:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008772:	4b0e      	ldr	r3, [pc, #56]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 8008774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008776:	4a0d      	ldr	r2, [pc, #52]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 8008778:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800877c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800877e:	4b0b      	ldr	r3, [pc, #44]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 8008780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008782:	4a0a      	ldr	r2, [pc, #40]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 8008784:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008788:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800878a:	4b08      	ldr	r3, [pc, #32]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 800878c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800878e:	4a07      	ldr	r2, [pc, #28]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 8008790:	f043 0301 	orr.w	r3, r3, #1
 8008794:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008796:	4b05      	ldr	r3, [pc, #20]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a04      	ldr	r2, [pc, #16]	@ (80087ac <HAL_RCC_OscConfig+0x76c>)
 800879c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80087a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087a2:	f7fa f945 	bl	8002a30 <HAL_GetTick>
 80087a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80087a8:	e011      	b.n	80087ce <HAL_RCC_OscConfig+0x78e>
 80087aa:	bf00      	nop
 80087ac:	58024400 	.word	0x58024400
 80087b0:	58024800 	.word	0x58024800
 80087b4:	fffffc0c 	.word	0xfffffc0c
 80087b8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087bc:	f7fa f938 	bl	8002a30 <HAL_GetTick>
 80087c0:	4602      	mov	r2, r0
 80087c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c4:	1ad3      	subs	r3, r2, r3
 80087c6:	2b02      	cmp	r3, #2
 80087c8:	d901      	bls.n	80087ce <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80087ca:	2303      	movs	r3, #3
 80087cc:	e08a      	b.n	80088e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80087ce:	4b47      	ldr	r3, [pc, #284]	@ (80088ec <HAL_RCC_OscConfig+0x8ac>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d0f0      	beq.n	80087bc <HAL_RCC_OscConfig+0x77c>
 80087da:	e082      	b.n	80088e2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087dc:	4b43      	ldr	r3, [pc, #268]	@ (80088ec <HAL_RCC_OscConfig+0x8ac>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a42      	ldr	r2, [pc, #264]	@ (80088ec <HAL_RCC_OscConfig+0x8ac>)
 80087e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80087e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087e8:	f7fa f922 	bl	8002a30 <HAL_GetTick>
 80087ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80087ee:	e008      	b.n	8008802 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087f0:	f7fa f91e 	bl	8002a30 <HAL_GetTick>
 80087f4:	4602      	mov	r2, r0
 80087f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	d901      	bls.n	8008802 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80087fe:	2303      	movs	r3, #3
 8008800:	e070      	b.n	80088e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008802:	4b3a      	ldr	r3, [pc, #232]	@ (80088ec <HAL_RCC_OscConfig+0x8ac>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800880a:	2b00      	cmp	r3, #0
 800880c:	d1f0      	bne.n	80087f0 <HAL_RCC_OscConfig+0x7b0>
 800880e:	e068      	b.n	80088e2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008810:	4b36      	ldr	r3, [pc, #216]	@ (80088ec <HAL_RCC_OscConfig+0x8ac>)
 8008812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008814:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008816:	4b35      	ldr	r3, [pc, #212]	@ (80088ec <HAL_RCC_OscConfig+0x8ac>)
 8008818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800881a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008820:	2b01      	cmp	r3, #1
 8008822:	d031      	beq.n	8008888 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	f003 0203 	and.w	r2, r3, #3
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800882e:	429a      	cmp	r2, r3
 8008830:	d12a      	bne.n	8008888 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	091b      	lsrs	r3, r3, #4
 8008836:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800883e:	429a      	cmp	r2, r3
 8008840:	d122      	bne.n	8008888 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800884c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800884e:	429a      	cmp	r2, r3
 8008850:	d11a      	bne.n	8008888 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	0a5b      	lsrs	r3, r3, #9
 8008856:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800885e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008860:	429a      	cmp	r2, r3
 8008862:	d111      	bne.n	8008888 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	0c1b      	lsrs	r3, r3, #16
 8008868:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008870:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008872:	429a      	cmp	r2, r3
 8008874:	d108      	bne.n	8008888 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	0e1b      	lsrs	r3, r3, #24
 800887a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008882:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008884:	429a      	cmp	r2, r3
 8008886:	d001      	beq.n	800888c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008888:	2301      	movs	r3, #1
 800888a:	e02b      	b.n	80088e4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800888c:	4b17      	ldr	r3, [pc, #92]	@ (80088ec <HAL_RCC_OscConfig+0x8ac>)
 800888e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008890:	08db      	lsrs	r3, r3, #3
 8008892:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008896:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800889c:	693a      	ldr	r2, [r7, #16]
 800889e:	429a      	cmp	r2, r3
 80088a0:	d01f      	beq.n	80088e2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80088a2:	4b12      	ldr	r3, [pc, #72]	@ (80088ec <HAL_RCC_OscConfig+0x8ac>)
 80088a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088a6:	4a11      	ldr	r2, [pc, #68]	@ (80088ec <HAL_RCC_OscConfig+0x8ac>)
 80088a8:	f023 0301 	bic.w	r3, r3, #1
 80088ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80088ae:	f7fa f8bf 	bl	8002a30 <HAL_GetTick>
 80088b2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80088b4:	bf00      	nop
 80088b6:	f7fa f8bb 	bl	8002a30 <HAL_GetTick>
 80088ba:	4602      	mov	r2, r0
 80088bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088be:	4293      	cmp	r3, r2
 80088c0:	d0f9      	beq.n	80088b6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80088c2:	4b0a      	ldr	r3, [pc, #40]	@ (80088ec <HAL_RCC_OscConfig+0x8ac>)
 80088c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088c6:	4b0a      	ldr	r3, [pc, #40]	@ (80088f0 <HAL_RCC_OscConfig+0x8b0>)
 80088c8:	4013      	ands	r3, r2
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80088ce:	00d2      	lsls	r2, r2, #3
 80088d0:	4906      	ldr	r1, [pc, #24]	@ (80088ec <HAL_RCC_OscConfig+0x8ac>)
 80088d2:	4313      	orrs	r3, r2
 80088d4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80088d6:	4b05      	ldr	r3, [pc, #20]	@ (80088ec <HAL_RCC_OscConfig+0x8ac>)
 80088d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088da:	4a04      	ldr	r2, [pc, #16]	@ (80088ec <HAL_RCC_OscConfig+0x8ac>)
 80088dc:	f043 0301 	orr.w	r3, r3, #1
 80088e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80088e2:	2300      	movs	r3, #0
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3730      	adds	r7, #48	@ 0x30
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}
 80088ec:	58024400 	.word	0x58024400
 80088f0:	ffff0007 	.word	0xffff0007

080088f4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b086      	sub	sp, #24
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d101      	bne.n	8008908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	e19c      	b.n	8008c42 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008908:	4b8a      	ldr	r3, [pc, #552]	@ (8008b34 <HAL_RCC_ClockConfig+0x240>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f003 030f 	and.w	r3, r3, #15
 8008910:	683a      	ldr	r2, [r7, #0]
 8008912:	429a      	cmp	r2, r3
 8008914:	d910      	bls.n	8008938 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008916:	4b87      	ldr	r3, [pc, #540]	@ (8008b34 <HAL_RCC_ClockConfig+0x240>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f023 020f 	bic.w	r2, r3, #15
 800891e:	4985      	ldr	r1, [pc, #532]	@ (8008b34 <HAL_RCC_ClockConfig+0x240>)
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	4313      	orrs	r3, r2
 8008924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008926:	4b83      	ldr	r3, [pc, #524]	@ (8008b34 <HAL_RCC_ClockConfig+0x240>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f003 030f 	and.w	r3, r3, #15
 800892e:	683a      	ldr	r2, [r7, #0]
 8008930:	429a      	cmp	r2, r3
 8008932:	d001      	beq.n	8008938 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	e184      	b.n	8008c42 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f003 0304 	and.w	r3, r3, #4
 8008940:	2b00      	cmp	r3, #0
 8008942:	d010      	beq.n	8008966 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	691a      	ldr	r2, [r3, #16]
 8008948:	4b7b      	ldr	r3, [pc, #492]	@ (8008b38 <HAL_RCC_ClockConfig+0x244>)
 800894a:	699b      	ldr	r3, [r3, #24]
 800894c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008950:	429a      	cmp	r2, r3
 8008952:	d908      	bls.n	8008966 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008954:	4b78      	ldr	r3, [pc, #480]	@ (8008b38 <HAL_RCC_ClockConfig+0x244>)
 8008956:	699b      	ldr	r3, [r3, #24]
 8008958:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	691b      	ldr	r3, [r3, #16]
 8008960:	4975      	ldr	r1, [pc, #468]	@ (8008b38 <HAL_RCC_ClockConfig+0x244>)
 8008962:	4313      	orrs	r3, r2
 8008964:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f003 0308 	and.w	r3, r3, #8
 800896e:	2b00      	cmp	r3, #0
 8008970:	d010      	beq.n	8008994 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	695a      	ldr	r2, [r3, #20]
 8008976:	4b70      	ldr	r3, [pc, #448]	@ (8008b38 <HAL_RCC_ClockConfig+0x244>)
 8008978:	69db      	ldr	r3, [r3, #28]
 800897a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800897e:	429a      	cmp	r2, r3
 8008980:	d908      	bls.n	8008994 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008982:	4b6d      	ldr	r3, [pc, #436]	@ (8008b38 <HAL_RCC_ClockConfig+0x244>)
 8008984:	69db      	ldr	r3, [r3, #28]
 8008986:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	695b      	ldr	r3, [r3, #20]
 800898e:	496a      	ldr	r1, [pc, #424]	@ (8008b38 <HAL_RCC_ClockConfig+0x244>)
 8008990:	4313      	orrs	r3, r2
 8008992:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f003 0310 	and.w	r3, r3, #16
 800899c:	2b00      	cmp	r3, #0
 800899e:	d010      	beq.n	80089c2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	699a      	ldr	r2, [r3, #24]
 80089a4:	4b64      	ldr	r3, [pc, #400]	@ (8008b38 <HAL_RCC_ClockConfig+0x244>)
 80089a6:	69db      	ldr	r3, [r3, #28]
 80089a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d908      	bls.n	80089c2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80089b0:	4b61      	ldr	r3, [pc, #388]	@ (8008b38 <HAL_RCC_ClockConfig+0x244>)
 80089b2:	69db      	ldr	r3, [r3, #28]
 80089b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	699b      	ldr	r3, [r3, #24]
 80089bc:	495e      	ldr	r1, [pc, #376]	@ (8008b38 <HAL_RCC_ClockConfig+0x244>)
 80089be:	4313      	orrs	r3, r2
 80089c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f003 0320 	and.w	r3, r3, #32
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d010      	beq.n	80089f0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	69da      	ldr	r2, [r3, #28]
 80089d2:	4b59      	ldr	r3, [pc, #356]	@ (8008b38 <HAL_RCC_ClockConfig+0x244>)
 80089d4:	6a1b      	ldr	r3, [r3, #32]
 80089d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80089da:	429a      	cmp	r2, r3
 80089dc:	d908      	bls.n	80089f0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80089de:	4b56      	ldr	r3, [pc, #344]	@ (8008b38 <HAL_RCC_ClockConfig+0x244>)
 80089e0:	6a1b      	ldr	r3, [r3, #32]
 80089e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	69db      	ldr	r3, [r3, #28]
 80089ea:	4953      	ldr	r1, [pc, #332]	@ (8008b38 <HAL_RCC_ClockConfig+0x244>)
 80089ec:	4313      	orrs	r3, r2
 80089ee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f003 0302 	and.w	r3, r3, #2
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d010      	beq.n	8008a1e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	68da      	ldr	r2, [r3, #12]
 8008a00:	4b4d      	ldr	r3, [pc, #308]	@ (8008b38 <HAL_RCC_ClockConfig+0x244>)
 8008a02:	699b      	ldr	r3, [r3, #24]
 8008a04:	f003 030f 	and.w	r3, r3, #15
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d908      	bls.n	8008a1e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a0c:	4b4a      	ldr	r3, [pc, #296]	@ (8008b38 <HAL_RCC_ClockConfig+0x244>)
 8008a0e:	699b      	ldr	r3, [r3, #24]
 8008a10:	f023 020f 	bic.w	r2, r3, #15
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	4947      	ldr	r1, [pc, #284]	@ (8008b38 <HAL_RCC_ClockConfig+0x244>)
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 0301 	and.w	r3, r3, #1
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d055      	beq.n	8008ad6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008a2a:	4b43      	ldr	r3, [pc, #268]	@ (8008b38 <HAL_RCC_ClockConfig+0x244>)
 8008a2c:	699b      	ldr	r3, [r3, #24]
 8008a2e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	4940      	ldr	r1, [pc, #256]	@ (8008b38 <HAL_RCC_ClockConfig+0x244>)
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	2b02      	cmp	r3, #2
 8008a42:	d107      	bne.n	8008a54 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008a44:	4b3c      	ldr	r3, [pc, #240]	@ (8008b38 <HAL_RCC_ClockConfig+0x244>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d121      	bne.n	8008a94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008a50:	2301      	movs	r3, #1
 8008a52:	e0f6      	b.n	8008c42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	2b03      	cmp	r3, #3
 8008a5a:	d107      	bne.n	8008a6c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008a5c:	4b36      	ldr	r3, [pc, #216]	@ (8008b38 <HAL_RCC_ClockConfig+0x244>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d115      	bne.n	8008a94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e0ea      	b.n	8008c42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d107      	bne.n	8008a84 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008a74:	4b30      	ldr	r3, [pc, #192]	@ (8008b38 <HAL_RCC_ClockConfig+0x244>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d109      	bne.n	8008a94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008a80:	2301      	movs	r3, #1
 8008a82:	e0de      	b.n	8008c42 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a84:	4b2c      	ldr	r3, [pc, #176]	@ (8008b38 <HAL_RCC_ClockConfig+0x244>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f003 0304 	and.w	r3, r3, #4
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d101      	bne.n	8008a94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
 8008a92:	e0d6      	b.n	8008c42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008a94:	4b28      	ldr	r3, [pc, #160]	@ (8008b38 <HAL_RCC_ClockConfig+0x244>)
 8008a96:	691b      	ldr	r3, [r3, #16]
 8008a98:	f023 0207 	bic.w	r2, r3, #7
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	4925      	ldr	r1, [pc, #148]	@ (8008b38 <HAL_RCC_ClockConfig+0x244>)
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008aa6:	f7f9 ffc3 	bl	8002a30 <HAL_GetTick>
 8008aaa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008aac:	e00a      	b.n	8008ac4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008aae:	f7f9 ffbf 	bl	8002a30 <HAL_GetTick>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	1ad3      	subs	r3, r2, r3
 8008ab8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d901      	bls.n	8008ac4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008ac0:	2303      	movs	r3, #3
 8008ac2:	e0be      	b.n	8008c42 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ac4:	4b1c      	ldr	r3, [pc, #112]	@ (8008b38 <HAL_RCC_ClockConfig+0x244>)
 8008ac6:	691b      	ldr	r3, [r3, #16]
 8008ac8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	00db      	lsls	r3, r3, #3
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d1eb      	bne.n	8008aae <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f003 0302 	and.w	r3, r3, #2
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d010      	beq.n	8008b04 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	68da      	ldr	r2, [r3, #12]
 8008ae6:	4b14      	ldr	r3, [pc, #80]	@ (8008b38 <HAL_RCC_ClockConfig+0x244>)
 8008ae8:	699b      	ldr	r3, [r3, #24]
 8008aea:	f003 030f 	and.w	r3, r3, #15
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d208      	bcs.n	8008b04 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008af2:	4b11      	ldr	r3, [pc, #68]	@ (8008b38 <HAL_RCC_ClockConfig+0x244>)
 8008af4:	699b      	ldr	r3, [r3, #24]
 8008af6:	f023 020f 	bic.w	r2, r3, #15
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	490e      	ldr	r1, [pc, #56]	@ (8008b38 <HAL_RCC_ClockConfig+0x244>)
 8008b00:	4313      	orrs	r3, r2
 8008b02:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008b04:	4b0b      	ldr	r3, [pc, #44]	@ (8008b34 <HAL_RCC_ClockConfig+0x240>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f003 030f 	and.w	r3, r3, #15
 8008b0c:	683a      	ldr	r2, [r7, #0]
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d214      	bcs.n	8008b3c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b12:	4b08      	ldr	r3, [pc, #32]	@ (8008b34 <HAL_RCC_ClockConfig+0x240>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f023 020f 	bic.w	r2, r3, #15
 8008b1a:	4906      	ldr	r1, [pc, #24]	@ (8008b34 <HAL_RCC_ClockConfig+0x240>)
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b22:	4b04      	ldr	r3, [pc, #16]	@ (8008b34 <HAL_RCC_ClockConfig+0x240>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f003 030f 	and.w	r3, r3, #15
 8008b2a:	683a      	ldr	r2, [r7, #0]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d005      	beq.n	8008b3c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008b30:	2301      	movs	r3, #1
 8008b32:	e086      	b.n	8008c42 <HAL_RCC_ClockConfig+0x34e>
 8008b34:	52002000 	.word	0x52002000
 8008b38:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f003 0304 	and.w	r3, r3, #4
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d010      	beq.n	8008b6a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	691a      	ldr	r2, [r3, #16]
 8008b4c:	4b3f      	ldr	r3, [pc, #252]	@ (8008c4c <HAL_RCC_ClockConfig+0x358>)
 8008b4e:	699b      	ldr	r3, [r3, #24]
 8008b50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d208      	bcs.n	8008b6a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008b58:	4b3c      	ldr	r3, [pc, #240]	@ (8008c4c <HAL_RCC_ClockConfig+0x358>)
 8008b5a:	699b      	ldr	r3, [r3, #24]
 8008b5c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	691b      	ldr	r3, [r3, #16]
 8008b64:	4939      	ldr	r1, [pc, #228]	@ (8008c4c <HAL_RCC_ClockConfig+0x358>)
 8008b66:	4313      	orrs	r3, r2
 8008b68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f003 0308 	and.w	r3, r3, #8
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d010      	beq.n	8008b98 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	695a      	ldr	r2, [r3, #20]
 8008b7a:	4b34      	ldr	r3, [pc, #208]	@ (8008c4c <HAL_RCC_ClockConfig+0x358>)
 8008b7c:	69db      	ldr	r3, [r3, #28]
 8008b7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d208      	bcs.n	8008b98 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008b86:	4b31      	ldr	r3, [pc, #196]	@ (8008c4c <HAL_RCC_ClockConfig+0x358>)
 8008b88:	69db      	ldr	r3, [r3, #28]
 8008b8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	695b      	ldr	r3, [r3, #20]
 8008b92:	492e      	ldr	r1, [pc, #184]	@ (8008c4c <HAL_RCC_ClockConfig+0x358>)
 8008b94:	4313      	orrs	r3, r2
 8008b96:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f003 0310 	and.w	r3, r3, #16
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d010      	beq.n	8008bc6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	699a      	ldr	r2, [r3, #24]
 8008ba8:	4b28      	ldr	r3, [pc, #160]	@ (8008c4c <HAL_RCC_ClockConfig+0x358>)
 8008baa:	69db      	ldr	r3, [r3, #28]
 8008bac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d208      	bcs.n	8008bc6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008bb4:	4b25      	ldr	r3, [pc, #148]	@ (8008c4c <HAL_RCC_ClockConfig+0x358>)
 8008bb6:	69db      	ldr	r3, [r3, #28]
 8008bb8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	699b      	ldr	r3, [r3, #24]
 8008bc0:	4922      	ldr	r1, [pc, #136]	@ (8008c4c <HAL_RCC_ClockConfig+0x358>)
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f003 0320 	and.w	r3, r3, #32
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d010      	beq.n	8008bf4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	69da      	ldr	r2, [r3, #28]
 8008bd6:	4b1d      	ldr	r3, [pc, #116]	@ (8008c4c <HAL_RCC_ClockConfig+0x358>)
 8008bd8:	6a1b      	ldr	r3, [r3, #32]
 8008bda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d208      	bcs.n	8008bf4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008be2:	4b1a      	ldr	r3, [pc, #104]	@ (8008c4c <HAL_RCC_ClockConfig+0x358>)
 8008be4:	6a1b      	ldr	r3, [r3, #32]
 8008be6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	69db      	ldr	r3, [r3, #28]
 8008bee:	4917      	ldr	r1, [pc, #92]	@ (8008c4c <HAL_RCC_ClockConfig+0x358>)
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008bf4:	f000 f834 	bl	8008c60 <HAL_RCC_GetSysClockFreq>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	4b14      	ldr	r3, [pc, #80]	@ (8008c4c <HAL_RCC_ClockConfig+0x358>)
 8008bfc:	699b      	ldr	r3, [r3, #24]
 8008bfe:	0a1b      	lsrs	r3, r3, #8
 8008c00:	f003 030f 	and.w	r3, r3, #15
 8008c04:	4912      	ldr	r1, [pc, #72]	@ (8008c50 <HAL_RCC_ClockConfig+0x35c>)
 8008c06:	5ccb      	ldrb	r3, [r1, r3]
 8008c08:	f003 031f 	and.w	r3, r3, #31
 8008c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8008c10:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c12:	4b0e      	ldr	r3, [pc, #56]	@ (8008c4c <HAL_RCC_ClockConfig+0x358>)
 8008c14:	699b      	ldr	r3, [r3, #24]
 8008c16:	f003 030f 	and.w	r3, r3, #15
 8008c1a:	4a0d      	ldr	r2, [pc, #52]	@ (8008c50 <HAL_RCC_ClockConfig+0x35c>)
 8008c1c:	5cd3      	ldrb	r3, [r2, r3]
 8008c1e:	f003 031f 	and.w	r3, r3, #31
 8008c22:	693a      	ldr	r2, [r7, #16]
 8008c24:	fa22 f303 	lsr.w	r3, r2, r3
 8008c28:	4a0a      	ldr	r2, [pc, #40]	@ (8008c54 <HAL_RCC_ClockConfig+0x360>)
 8008c2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008c2c:	4a0a      	ldr	r2, [pc, #40]	@ (8008c58 <HAL_RCC_ClockConfig+0x364>)
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008c32:	4b0a      	ldr	r3, [pc, #40]	@ (8008c5c <HAL_RCC_ClockConfig+0x368>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7f9 feb0 	bl	800299c <HAL_InitTick>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3718      	adds	r7, #24
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	58024400 	.word	0x58024400
 8008c50:	08015000 	.word	0x08015000
 8008c54:	24000004 	.word	0x24000004
 8008c58:	24000000 	.word	0x24000000
 8008c5c:	2400002c 	.word	0x2400002c

08008c60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b089      	sub	sp, #36	@ 0x24
 8008c64:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c66:	4bb3      	ldr	r3, [pc, #716]	@ (8008f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008c6e:	2b18      	cmp	r3, #24
 8008c70:	f200 8155 	bhi.w	8008f1e <HAL_RCC_GetSysClockFreq+0x2be>
 8008c74:	a201      	add	r2, pc, #4	@ (adr r2, 8008c7c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c7a:	bf00      	nop
 8008c7c:	08008ce1 	.word	0x08008ce1
 8008c80:	08008f1f 	.word	0x08008f1f
 8008c84:	08008f1f 	.word	0x08008f1f
 8008c88:	08008f1f 	.word	0x08008f1f
 8008c8c:	08008f1f 	.word	0x08008f1f
 8008c90:	08008f1f 	.word	0x08008f1f
 8008c94:	08008f1f 	.word	0x08008f1f
 8008c98:	08008f1f 	.word	0x08008f1f
 8008c9c:	08008d07 	.word	0x08008d07
 8008ca0:	08008f1f 	.word	0x08008f1f
 8008ca4:	08008f1f 	.word	0x08008f1f
 8008ca8:	08008f1f 	.word	0x08008f1f
 8008cac:	08008f1f 	.word	0x08008f1f
 8008cb0:	08008f1f 	.word	0x08008f1f
 8008cb4:	08008f1f 	.word	0x08008f1f
 8008cb8:	08008f1f 	.word	0x08008f1f
 8008cbc:	08008d0d 	.word	0x08008d0d
 8008cc0:	08008f1f 	.word	0x08008f1f
 8008cc4:	08008f1f 	.word	0x08008f1f
 8008cc8:	08008f1f 	.word	0x08008f1f
 8008ccc:	08008f1f 	.word	0x08008f1f
 8008cd0:	08008f1f 	.word	0x08008f1f
 8008cd4:	08008f1f 	.word	0x08008f1f
 8008cd8:	08008f1f 	.word	0x08008f1f
 8008cdc:	08008d13 	.word	0x08008d13
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ce0:	4b94      	ldr	r3, [pc, #592]	@ (8008f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f003 0320 	and.w	r3, r3, #32
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d009      	beq.n	8008d00 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008cec:	4b91      	ldr	r3, [pc, #580]	@ (8008f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	08db      	lsrs	r3, r3, #3
 8008cf2:	f003 0303 	and.w	r3, r3, #3
 8008cf6:	4a90      	ldr	r2, [pc, #576]	@ (8008f38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8008cfc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008cfe:	e111      	b.n	8008f24 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008d00:	4b8d      	ldr	r3, [pc, #564]	@ (8008f38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008d02:	61bb      	str	r3, [r7, #24]
      break;
 8008d04:	e10e      	b.n	8008f24 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008d06:	4b8d      	ldr	r3, [pc, #564]	@ (8008f3c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008d08:	61bb      	str	r3, [r7, #24]
      break;
 8008d0a:	e10b      	b.n	8008f24 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008d0c:	4b8c      	ldr	r3, [pc, #560]	@ (8008f40 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008d0e:	61bb      	str	r3, [r7, #24]
      break;
 8008d10:	e108      	b.n	8008f24 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d12:	4b88      	ldr	r3, [pc, #544]	@ (8008f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d16:	f003 0303 	and.w	r3, r3, #3
 8008d1a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008d1c:	4b85      	ldr	r3, [pc, #532]	@ (8008f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d20:	091b      	lsrs	r3, r3, #4
 8008d22:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008d26:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008d28:	4b82      	ldr	r3, [pc, #520]	@ (8008f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d2c:	f003 0301 	and.w	r3, r3, #1
 8008d30:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008d32:	4b80      	ldr	r3, [pc, #512]	@ (8008f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d36:	08db      	lsrs	r3, r3, #3
 8008d38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d3c:	68fa      	ldr	r2, [r7, #12]
 8008d3e:	fb02 f303 	mul.w	r3, r2, r3
 8008d42:	ee07 3a90 	vmov	s15, r3
 8008d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d4a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	f000 80e1 	beq.w	8008f18 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	2b02      	cmp	r3, #2
 8008d5a:	f000 8083 	beq.w	8008e64 <HAL_RCC_GetSysClockFreq+0x204>
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	f200 80a1 	bhi.w	8008ea8 <HAL_RCC_GetSysClockFreq+0x248>
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d003      	beq.n	8008d74 <HAL_RCC_GetSysClockFreq+0x114>
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d056      	beq.n	8008e20 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008d72:	e099      	b.n	8008ea8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d74:	4b6f      	ldr	r3, [pc, #444]	@ (8008f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f003 0320 	and.w	r3, r3, #32
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d02d      	beq.n	8008ddc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d80:	4b6c      	ldr	r3, [pc, #432]	@ (8008f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	08db      	lsrs	r3, r3, #3
 8008d86:	f003 0303 	and.w	r3, r3, #3
 8008d8a:	4a6b      	ldr	r2, [pc, #428]	@ (8008f38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d90:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	ee07 3a90 	vmov	s15, r3
 8008d98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	ee07 3a90 	vmov	s15, r3
 8008da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008daa:	4b62      	ldr	r3, [pc, #392]	@ (8008f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008db2:	ee07 3a90 	vmov	s15, r3
 8008db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dba:	ed97 6a02 	vldr	s12, [r7, #8]
 8008dbe:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008f44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008dc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dd6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008dda:	e087      	b.n	8008eec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	ee07 3a90 	vmov	s15, r3
 8008de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008de6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008f48 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008dea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dee:	4b51      	ldr	r3, [pc, #324]	@ (8008f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008df6:	ee07 3a90 	vmov	s15, r3
 8008dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e02:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008f44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008e1e:	e065      	b.n	8008eec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	ee07 3a90 	vmov	s15, r3
 8008e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e2a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008f4c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e32:	4b40      	ldr	r3, [pc, #256]	@ (8008f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e3a:	ee07 3a90 	vmov	s15, r3
 8008e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e42:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e46:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008f44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008e62:	e043      	b.n	8008eec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	ee07 3a90 	vmov	s15, r3
 8008e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e6e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008f50 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e76:	4b2f      	ldr	r3, [pc, #188]	@ (8008f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e7e:	ee07 3a90 	vmov	s15, r3
 8008e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e86:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e8a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008f44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ea2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008ea6:	e021      	b.n	8008eec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	ee07 3a90 	vmov	s15, r3
 8008eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eb2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008f4c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eba:	4b1e      	ldr	r3, [pc, #120]	@ (8008f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ec2:	ee07 3a90 	vmov	s15, r3
 8008ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eca:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ece:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008f44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008eda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ee6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008eea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008eec:	4b11      	ldr	r3, [pc, #68]	@ (8008f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ef0:	0a5b      	lsrs	r3, r3, #9
 8008ef2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	ee07 3a90 	vmov	s15, r3
 8008f00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008f04:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f10:	ee17 3a90 	vmov	r3, s15
 8008f14:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008f16:	e005      	b.n	8008f24 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	61bb      	str	r3, [r7, #24]
      break;
 8008f1c:	e002      	b.n	8008f24 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008f1e:	4b07      	ldr	r3, [pc, #28]	@ (8008f3c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008f20:	61bb      	str	r3, [r7, #24]
      break;
 8008f22:	bf00      	nop
  }

  return sysclockfreq;
 8008f24:	69bb      	ldr	r3, [r7, #24]
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3724      	adds	r7, #36	@ 0x24
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr
 8008f32:	bf00      	nop
 8008f34:	58024400 	.word	0x58024400
 8008f38:	03d09000 	.word	0x03d09000
 8008f3c:	003d0900 	.word	0x003d0900
 8008f40:	017d7840 	.word	0x017d7840
 8008f44:	46000000 	.word	0x46000000
 8008f48:	4c742400 	.word	0x4c742400
 8008f4c:	4a742400 	.word	0x4a742400
 8008f50:	4bbebc20 	.word	0x4bbebc20

08008f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008f5a:	f7ff fe81 	bl	8008c60 <HAL_RCC_GetSysClockFreq>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	4b10      	ldr	r3, [pc, #64]	@ (8008fa4 <HAL_RCC_GetHCLKFreq+0x50>)
 8008f62:	699b      	ldr	r3, [r3, #24]
 8008f64:	0a1b      	lsrs	r3, r3, #8
 8008f66:	f003 030f 	and.w	r3, r3, #15
 8008f6a:	490f      	ldr	r1, [pc, #60]	@ (8008fa8 <HAL_RCC_GetHCLKFreq+0x54>)
 8008f6c:	5ccb      	ldrb	r3, [r1, r3]
 8008f6e:	f003 031f 	and.w	r3, r3, #31
 8008f72:	fa22 f303 	lsr.w	r3, r2, r3
 8008f76:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f78:	4b0a      	ldr	r3, [pc, #40]	@ (8008fa4 <HAL_RCC_GetHCLKFreq+0x50>)
 8008f7a:	699b      	ldr	r3, [r3, #24]
 8008f7c:	f003 030f 	and.w	r3, r3, #15
 8008f80:	4a09      	ldr	r2, [pc, #36]	@ (8008fa8 <HAL_RCC_GetHCLKFreq+0x54>)
 8008f82:	5cd3      	ldrb	r3, [r2, r3]
 8008f84:	f003 031f 	and.w	r3, r3, #31
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f8e:	4a07      	ldr	r2, [pc, #28]	@ (8008fac <HAL_RCC_GetHCLKFreq+0x58>)
 8008f90:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008f92:	4a07      	ldr	r2, [pc, #28]	@ (8008fb0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008f98:	4b04      	ldr	r3, [pc, #16]	@ (8008fac <HAL_RCC_GetHCLKFreq+0x58>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3708      	adds	r7, #8
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	58024400 	.word	0x58024400
 8008fa8:	08015000 	.word	0x08015000
 8008fac:	24000004 	.word	0x24000004
 8008fb0:	24000000 	.word	0x24000000

08008fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008fb8:	f7ff ffcc 	bl	8008f54 <HAL_RCC_GetHCLKFreq>
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	4b06      	ldr	r3, [pc, #24]	@ (8008fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008fc0:	69db      	ldr	r3, [r3, #28]
 8008fc2:	091b      	lsrs	r3, r3, #4
 8008fc4:	f003 0307 	and.w	r3, r3, #7
 8008fc8:	4904      	ldr	r1, [pc, #16]	@ (8008fdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8008fca:	5ccb      	ldrb	r3, [r1, r3]
 8008fcc:	f003 031f 	and.w	r3, r3, #31
 8008fd0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	bd80      	pop	{r7, pc}
 8008fd8:	58024400 	.word	0x58024400
 8008fdc:	08015000 	.word	0x08015000

08008fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008fe4:	f7ff ffb6 	bl	8008f54 <HAL_RCC_GetHCLKFreq>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	4b06      	ldr	r3, [pc, #24]	@ (8009004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008fec:	69db      	ldr	r3, [r3, #28]
 8008fee:	0a1b      	lsrs	r3, r3, #8
 8008ff0:	f003 0307 	and.w	r3, r3, #7
 8008ff4:	4904      	ldr	r1, [pc, #16]	@ (8009008 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008ff6:	5ccb      	ldrb	r3, [r1, r3]
 8008ff8:	f003 031f 	and.w	r3, r3, #31
 8008ffc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009000:	4618      	mov	r0, r3
 8009002:	bd80      	pop	{r7, pc}
 8009004:	58024400 	.word	0x58024400
 8009008:	08015000 	.word	0x08015000

0800900c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800900c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009010:	b0ca      	sub	sp, #296	@ 0x128
 8009012:	af00      	add	r7, sp, #0
 8009014:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009018:	2300      	movs	r3, #0
 800901a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800901e:	2300      	movs	r3, #0
 8009020:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009030:	2500      	movs	r5, #0
 8009032:	ea54 0305 	orrs.w	r3, r4, r5
 8009036:	d049      	beq.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800903c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800903e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009042:	d02f      	beq.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009044:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009048:	d828      	bhi.n	800909c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800904a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800904e:	d01a      	beq.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009050:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009054:	d822      	bhi.n	800909c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009056:	2b00      	cmp	r3, #0
 8009058:	d003      	beq.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800905a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800905e:	d007      	beq.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009060:	e01c      	b.n	800909c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009062:	4bb8      	ldr	r3, [pc, #736]	@ (8009344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009066:	4ab7      	ldr	r2, [pc, #732]	@ (8009344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009068:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800906c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800906e:	e01a      	b.n	80090a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009074:	3308      	adds	r3, #8
 8009076:	2102      	movs	r1, #2
 8009078:	4618      	mov	r0, r3
 800907a:	f002 fb61 	bl	800b740 <RCCEx_PLL2_Config>
 800907e:	4603      	mov	r3, r0
 8009080:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009084:	e00f      	b.n	80090a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800908a:	3328      	adds	r3, #40	@ 0x28
 800908c:	2102      	movs	r1, #2
 800908e:	4618      	mov	r0, r3
 8009090:	f002 fc08 	bl	800b8a4 <RCCEx_PLL3_Config>
 8009094:	4603      	mov	r3, r0
 8009096:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800909a:	e004      	b.n	80090a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800909c:	2301      	movs	r3, #1
 800909e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80090a2:	e000      	b.n	80090a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80090a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d10a      	bne.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80090ae:	4ba5      	ldr	r3, [pc, #660]	@ (8009344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090b2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80090b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80090bc:	4aa1      	ldr	r2, [pc, #644]	@ (8009344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090be:	430b      	orrs	r3, r1
 80090c0:	6513      	str	r3, [r2, #80]	@ 0x50
 80090c2:	e003      	b.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80090cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80090d8:	f04f 0900 	mov.w	r9, #0
 80090dc:	ea58 0309 	orrs.w	r3, r8, r9
 80090e0:	d047      	beq.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80090e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090e8:	2b04      	cmp	r3, #4
 80090ea:	d82a      	bhi.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80090ec:	a201      	add	r2, pc, #4	@ (adr r2, 80090f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80090ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f2:	bf00      	nop
 80090f4:	08009109 	.word	0x08009109
 80090f8:	08009117 	.word	0x08009117
 80090fc:	0800912d 	.word	0x0800912d
 8009100:	0800914b 	.word	0x0800914b
 8009104:	0800914b 	.word	0x0800914b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009108:	4b8e      	ldr	r3, [pc, #568]	@ (8009344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800910a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800910c:	4a8d      	ldr	r2, [pc, #564]	@ (8009344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800910e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009112:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009114:	e01a      	b.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800911a:	3308      	adds	r3, #8
 800911c:	2100      	movs	r1, #0
 800911e:	4618      	mov	r0, r3
 8009120:	f002 fb0e 	bl	800b740 <RCCEx_PLL2_Config>
 8009124:	4603      	mov	r3, r0
 8009126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800912a:	e00f      	b.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800912c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009130:	3328      	adds	r3, #40	@ 0x28
 8009132:	2100      	movs	r1, #0
 8009134:	4618      	mov	r0, r3
 8009136:	f002 fbb5 	bl	800b8a4 <RCCEx_PLL3_Config>
 800913a:	4603      	mov	r3, r0
 800913c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009140:	e004      	b.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009142:	2301      	movs	r3, #1
 8009144:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009148:	e000      	b.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800914a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800914c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009150:	2b00      	cmp	r3, #0
 8009152:	d10a      	bne.n	800916a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009154:	4b7b      	ldr	r3, [pc, #492]	@ (8009344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009156:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009158:	f023 0107 	bic.w	r1, r3, #7
 800915c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009162:	4a78      	ldr	r2, [pc, #480]	@ (8009344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009164:	430b      	orrs	r3, r1
 8009166:	6513      	str	r3, [r2, #80]	@ 0x50
 8009168:	e003      	b.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800916a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800916e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800917e:	f04f 0b00 	mov.w	fp, #0
 8009182:	ea5a 030b 	orrs.w	r3, sl, fp
 8009186:	d04c      	beq.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800918c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800918e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009192:	d030      	beq.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009194:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009198:	d829      	bhi.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800919a:	2bc0      	cmp	r3, #192	@ 0xc0
 800919c:	d02d      	beq.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800919e:	2bc0      	cmp	r3, #192	@ 0xc0
 80091a0:	d825      	bhi.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80091a2:	2b80      	cmp	r3, #128	@ 0x80
 80091a4:	d018      	beq.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80091a6:	2b80      	cmp	r3, #128	@ 0x80
 80091a8:	d821      	bhi.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d002      	beq.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80091ae:	2b40      	cmp	r3, #64	@ 0x40
 80091b0:	d007      	beq.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80091b2:	e01c      	b.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091b4:	4b63      	ldr	r3, [pc, #396]	@ (8009344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80091b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091b8:	4a62      	ldr	r2, [pc, #392]	@ (8009344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80091ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80091be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80091c0:	e01c      	b.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80091c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091c6:	3308      	adds	r3, #8
 80091c8:	2100      	movs	r1, #0
 80091ca:	4618      	mov	r0, r3
 80091cc:	f002 fab8 	bl	800b740 <RCCEx_PLL2_Config>
 80091d0:	4603      	mov	r3, r0
 80091d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80091d6:	e011      	b.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80091d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091dc:	3328      	adds	r3, #40	@ 0x28
 80091de:	2100      	movs	r1, #0
 80091e0:	4618      	mov	r0, r3
 80091e2:	f002 fb5f 	bl	800b8a4 <RCCEx_PLL3_Config>
 80091e6:	4603      	mov	r3, r0
 80091e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80091ec:	e006      	b.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091ee:	2301      	movs	r3, #1
 80091f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80091f4:	e002      	b.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80091f6:	bf00      	nop
 80091f8:	e000      	b.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80091fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009200:	2b00      	cmp	r3, #0
 8009202:	d10a      	bne.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009204:	4b4f      	ldr	r3, [pc, #316]	@ (8009344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009206:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009208:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800920c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009212:	4a4c      	ldr	r2, [pc, #304]	@ (8009344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009214:	430b      	orrs	r3, r1
 8009216:	6513      	str	r3, [r2, #80]	@ 0x50
 8009218:	e003      	b.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800921a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800921e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800922e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8009232:	2300      	movs	r3, #0
 8009234:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8009238:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800923c:	460b      	mov	r3, r1
 800923e:	4313      	orrs	r3, r2
 8009240:	d053      	beq.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009246:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800924a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800924e:	d035      	beq.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009250:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009254:	d82e      	bhi.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009256:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800925a:	d031      	beq.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800925c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009260:	d828      	bhi.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009262:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009266:	d01a      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009268:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800926c:	d822      	bhi.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800926e:	2b00      	cmp	r3, #0
 8009270:	d003      	beq.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009272:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009276:	d007      	beq.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009278:	e01c      	b.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800927a:	4b32      	ldr	r3, [pc, #200]	@ (8009344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800927c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800927e:	4a31      	ldr	r2, [pc, #196]	@ (8009344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009280:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009284:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009286:	e01c      	b.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800928c:	3308      	adds	r3, #8
 800928e:	2100      	movs	r1, #0
 8009290:	4618      	mov	r0, r3
 8009292:	f002 fa55 	bl	800b740 <RCCEx_PLL2_Config>
 8009296:	4603      	mov	r3, r0
 8009298:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800929c:	e011      	b.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800929e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092a2:	3328      	adds	r3, #40	@ 0x28
 80092a4:	2100      	movs	r1, #0
 80092a6:	4618      	mov	r0, r3
 80092a8:	f002 fafc 	bl	800b8a4 <RCCEx_PLL3_Config>
 80092ac:	4603      	mov	r3, r0
 80092ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80092b2:	e006      	b.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80092b4:	2301      	movs	r3, #1
 80092b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80092ba:	e002      	b.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80092bc:	bf00      	nop
 80092be:	e000      	b.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80092c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d10b      	bne.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80092ca:	4b1e      	ldr	r3, [pc, #120]	@ (8009344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80092cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092ce:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80092d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80092da:	4a1a      	ldr	r2, [pc, #104]	@ (8009344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80092dc:	430b      	orrs	r3, r1
 80092de:	6593      	str	r3, [r2, #88]	@ 0x58
 80092e0:	e003      	b.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80092ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80092f6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80092fa:	2300      	movs	r3, #0
 80092fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009300:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8009304:	460b      	mov	r3, r1
 8009306:	4313      	orrs	r3, r2
 8009308:	d056      	beq.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800930a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800930e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009312:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009316:	d038      	beq.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009318:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800931c:	d831      	bhi.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800931e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009322:	d034      	beq.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009324:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009328:	d82b      	bhi.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800932a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800932e:	d01d      	beq.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009330:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009334:	d825      	bhi.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009336:	2b00      	cmp	r3, #0
 8009338:	d006      	beq.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800933a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800933e:	d00a      	beq.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009340:	e01f      	b.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009342:	bf00      	nop
 8009344:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009348:	4ba2      	ldr	r3, [pc, #648]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800934a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800934c:	4aa1      	ldr	r2, [pc, #644]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800934e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009352:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009354:	e01c      	b.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800935a:	3308      	adds	r3, #8
 800935c:	2100      	movs	r1, #0
 800935e:	4618      	mov	r0, r3
 8009360:	f002 f9ee 	bl	800b740 <RCCEx_PLL2_Config>
 8009364:	4603      	mov	r3, r0
 8009366:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800936a:	e011      	b.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800936c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009370:	3328      	adds	r3, #40	@ 0x28
 8009372:	2100      	movs	r1, #0
 8009374:	4618      	mov	r0, r3
 8009376:	f002 fa95 	bl	800b8a4 <RCCEx_PLL3_Config>
 800937a:	4603      	mov	r3, r0
 800937c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009380:	e006      	b.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009388:	e002      	b.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800938a:	bf00      	nop
 800938c:	e000      	b.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800938e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009390:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009394:	2b00      	cmp	r3, #0
 8009396:	d10b      	bne.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009398:	4b8e      	ldr	r3, [pc, #568]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800939a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800939c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80093a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80093a8:	4a8a      	ldr	r2, [pc, #552]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093aa:	430b      	orrs	r3, r1
 80093ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80093ae:	e003      	b.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80093b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80093c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80093c8:	2300      	movs	r3, #0
 80093ca:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80093ce:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80093d2:	460b      	mov	r3, r1
 80093d4:	4313      	orrs	r3, r2
 80093d6:	d03a      	beq.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80093d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093de:	2b30      	cmp	r3, #48	@ 0x30
 80093e0:	d01f      	beq.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80093e2:	2b30      	cmp	r3, #48	@ 0x30
 80093e4:	d819      	bhi.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80093e6:	2b20      	cmp	r3, #32
 80093e8:	d00c      	beq.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80093ea:	2b20      	cmp	r3, #32
 80093ec:	d815      	bhi.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d019      	beq.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80093f2:	2b10      	cmp	r3, #16
 80093f4:	d111      	bne.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093f6:	4b77      	ldr	r3, [pc, #476]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093fa:	4a76      	ldr	r2, [pc, #472]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009400:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009402:	e011      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009408:	3308      	adds	r3, #8
 800940a:	2102      	movs	r1, #2
 800940c:	4618      	mov	r0, r3
 800940e:	f002 f997 	bl	800b740 <RCCEx_PLL2_Config>
 8009412:	4603      	mov	r3, r0
 8009414:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009418:	e006      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800941a:	2301      	movs	r3, #1
 800941c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009420:	e002      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009422:	bf00      	nop
 8009424:	e000      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009426:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009428:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800942c:	2b00      	cmp	r3, #0
 800942e:	d10a      	bne.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009430:	4b68      	ldr	r3, [pc, #416]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009432:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009434:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800943c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800943e:	4a65      	ldr	r2, [pc, #404]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009440:	430b      	orrs	r3, r1
 8009442:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009444:	e003      	b.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009446:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800944a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800944e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009456:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800945a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800945e:	2300      	movs	r3, #0
 8009460:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009464:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009468:	460b      	mov	r3, r1
 800946a:	4313      	orrs	r3, r2
 800946c:	d051      	beq.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800946e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009472:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009474:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009478:	d035      	beq.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800947a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800947e:	d82e      	bhi.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009480:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009484:	d031      	beq.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009486:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800948a:	d828      	bhi.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800948c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009490:	d01a      	beq.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009492:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009496:	d822      	bhi.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009498:	2b00      	cmp	r3, #0
 800949a:	d003      	beq.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800949c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094a0:	d007      	beq.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80094a2:	e01c      	b.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094a4:	4b4b      	ldr	r3, [pc, #300]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80094a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094a8:	4a4a      	ldr	r2, [pc, #296]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80094aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80094b0:	e01c      	b.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80094b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094b6:	3308      	adds	r3, #8
 80094b8:	2100      	movs	r1, #0
 80094ba:	4618      	mov	r0, r3
 80094bc:	f002 f940 	bl	800b740 <RCCEx_PLL2_Config>
 80094c0:	4603      	mov	r3, r0
 80094c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80094c6:	e011      	b.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80094c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094cc:	3328      	adds	r3, #40	@ 0x28
 80094ce:	2100      	movs	r1, #0
 80094d0:	4618      	mov	r0, r3
 80094d2:	f002 f9e7 	bl	800b8a4 <RCCEx_PLL3_Config>
 80094d6:	4603      	mov	r3, r0
 80094d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80094dc:	e006      	b.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094de:	2301      	movs	r3, #1
 80094e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80094e4:	e002      	b.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80094e6:	bf00      	nop
 80094e8:	e000      	b.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80094ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d10a      	bne.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80094f4:	4b37      	ldr	r3, [pc, #220]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80094f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094f8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80094fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009500:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009502:	4a34      	ldr	r2, [pc, #208]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009504:	430b      	orrs	r3, r1
 8009506:	6513      	str	r3, [r2, #80]	@ 0x50
 8009508:	e003      	b.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800950a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800950e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800951e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009522:	2300      	movs	r3, #0
 8009524:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009528:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800952c:	460b      	mov	r3, r1
 800952e:	4313      	orrs	r3, r2
 8009530:	d056      	beq.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009536:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009538:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800953c:	d033      	beq.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800953e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009542:	d82c      	bhi.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009544:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009548:	d02f      	beq.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800954a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800954e:	d826      	bhi.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009550:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009554:	d02b      	beq.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009556:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800955a:	d820      	bhi.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800955c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009560:	d012      	beq.n	8009588 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009562:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009566:	d81a      	bhi.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009568:	2b00      	cmp	r3, #0
 800956a:	d022      	beq.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800956c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009570:	d115      	bne.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009576:	3308      	adds	r3, #8
 8009578:	2101      	movs	r1, #1
 800957a:	4618      	mov	r0, r3
 800957c:	f002 f8e0 	bl	800b740 <RCCEx_PLL2_Config>
 8009580:	4603      	mov	r3, r0
 8009582:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009586:	e015      	b.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800958c:	3328      	adds	r3, #40	@ 0x28
 800958e:	2101      	movs	r1, #1
 8009590:	4618      	mov	r0, r3
 8009592:	f002 f987 	bl	800b8a4 <RCCEx_PLL3_Config>
 8009596:	4603      	mov	r3, r0
 8009598:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800959c:	e00a      	b.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800959e:	2301      	movs	r3, #1
 80095a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80095a4:	e006      	b.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80095a6:	bf00      	nop
 80095a8:	e004      	b.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80095aa:	bf00      	nop
 80095ac:	e002      	b.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80095ae:	bf00      	nop
 80095b0:	e000      	b.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80095b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d10d      	bne.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80095bc:	4b05      	ldr	r3, [pc, #20]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80095be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095c0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80095c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095ca:	4a02      	ldr	r2, [pc, #8]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80095cc:	430b      	orrs	r3, r1
 80095ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80095d0:	e006      	b.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80095d2:	bf00      	nop
 80095d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80095e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80095ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80095f0:	2300      	movs	r3, #0
 80095f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80095f6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80095fa:	460b      	mov	r3, r1
 80095fc:	4313      	orrs	r3, r2
 80095fe:	d055      	beq.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009604:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009608:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800960c:	d033      	beq.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800960e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009612:	d82c      	bhi.n	800966e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009614:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009618:	d02f      	beq.n	800967a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800961a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800961e:	d826      	bhi.n	800966e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009620:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009624:	d02b      	beq.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009626:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800962a:	d820      	bhi.n	800966e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800962c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009630:	d012      	beq.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009632:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009636:	d81a      	bhi.n	800966e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009638:	2b00      	cmp	r3, #0
 800963a:	d022      	beq.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800963c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009640:	d115      	bne.n	800966e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009646:	3308      	adds	r3, #8
 8009648:	2101      	movs	r1, #1
 800964a:	4618      	mov	r0, r3
 800964c:	f002 f878 	bl	800b740 <RCCEx_PLL2_Config>
 8009650:	4603      	mov	r3, r0
 8009652:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009656:	e015      	b.n	8009684 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800965c:	3328      	adds	r3, #40	@ 0x28
 800965e:	2101      	movs	r1, #1
 8009660:	4618      	mov	r0, r3
 8009662:	f002 f91f 	bl	800b8a4 <RCCEx_PLL3_Config>
 8009666:	4603      	mov	r3, r0
 8009668:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800966c:	e00a      	b.n	8009684 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800966e:	2301      	movs	r3, #1
 8009670:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009674:	e006      	b.n	8009684 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009676:	bf00      	nop
 8009678:	e004      	b.n	8009684 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800967a:	bf00      	nop
 800967c:	e002      	b.n	8009684 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800967e:	bf00      	nop
 8009680:	e000      	b.n	8009684 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009682:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009684:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009688:	2b00      	cmp	r3, #0
 800968a:	d10b      	bne.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800968c:	4ba3      	ldr	r3, [pc, #652]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800968e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009690:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009698:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800969c:	4a9f      	ldr	r2, [pc, #636]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800969e:	430b      	orrs	r3, r1
 80096a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80096a2:	e003      	b.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80096ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80096b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80096bc:	2300      	movs	r3, #0
 80096be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80096c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80096c6:	460b      	mov	r3, r1
 80096c8:	4313      	orrs	r3, r2
 80096ca:	d037      	beq.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80096cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096d6:	d00e      	beq.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80096d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096dc:	d816      	bhi.n	800970c <HAL_RCCEx_PeriphCLKConfig+0x700>
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d018      	beq.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80096e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096e6:	d111      	bne.n	800970c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096e8:	4b8c      	ldr	r3, [pc, #560]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ec:	4a8b      	ldr	r2, [pc, #556]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80096f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80096f4:	e00f      	b.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80096f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096fa:	3308      	adds	r3, #8
 80096fc:	2101      	movs	r1, #1
 80096fe:	4618      	mov	r0, r3
 8009700:	f002 f81e 	bl	800b740 <RCCEx_PLL2_Config>
 8009704:	4603      	mov	r3, r0
 8009706:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800970a:	e004      	b.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800970c:	2301      	movs	r3, #1
 800970e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009712:	e000      	b.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009714:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009716:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800971a:	2b00      	cmp	r3, #0
 800971c:	d10a      	bne.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800971e:	4b7f      	ldr	r3, [pc, #508]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009720:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009722:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800972a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800972c:	4a7b      	ldr	r2, [pc, #492]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800972e:	430b      	orrs	r3, r1
 8009730:	6513      	str	r3, [r2, #80]	@ 0x50
 8009732:	e003      	b.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009734:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009738:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800973c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009744:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009748:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800974c:	2300      	movs	r3, #0
 800974e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009752:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009756:	460b      	mov	r3, r1
 8009758:	4313      	orrs	r3, r2
 800975a:	d039      	beq.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800975c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009760:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009762:	2b03      	cmp	r3, #3
 8009764:	d81c      	bhi.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009766:	a201      	add	r2, pc, #4	@ (adr r2, 800976c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800976c:	080097a9 	.word	0x080097a9
 8009770:	0800977d 	.word	0x0800977d
 8009774:	0800978b 	.word	0x0800978b
 8009778:	080097a9 	.word	0x080097a9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800977c:	4b67      	ldr	r3, [pc, #412]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800977e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009780:	4a66      	ldr	r2, [pc, #408]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009782:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009786:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009788:	e00f      	b.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800978a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800978e:	3308      	adds	r3, #8
 8009790:	2102      	movs	r1, #2
 8009792:	4618      	mov	r0, r3
 8009794:	f001 ffd4 	bl	800b740 <RCCEx_PLL2_Config>
 8009798:	4603      	mov	r3, r0
 800979a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800979e:	e004      	b.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80097a0:	2301      	movs	r3, #1
 80097a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80097a6:	e000      	b.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80097a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d10a      	bne.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80097b2:	4b5a      	ldr	r3, [pc, #360]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097b6:	f023 0103 	bic.w	r1, r3, #3
 80097ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097c0:	4a56      	ldr	r2, [pc, #344]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097c2:	430b      	orrs	r3, r1
 80097c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80097c6:	e003      	b.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80097d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80097dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80097e0:	2300      	movs	r3, #0
 80097e2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80097e6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80097ea:	460b      	mov	r3, r1
 80097ec:	4313      	orrs	r3, r2
 80097ee:	f000 809f 	beq.w	8009930 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80097f2:	4b4b      	ldr	r3, [pc, #300]	@ (8009920 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a4a      	ldr	r2, [pc, #296]	@ (8009920 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80097f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80097fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80097fe:	f7f9 f917 	bl	8002a30 <HAL_GetTick>
 8009802:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009806:	e00b      	b.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009808:	f7f9 f912 	bl	8002a30 <HAL_GetTick>
 800980c:	4602      	mov	r2, r0
 800980e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009812:	1ad3      	subs	r3, r2, r3
 8009814:	2b64      	cmp	r3, #100	@ 0x64
 8009816:	d903      	bls.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009818:	2303      	movs	r3, #3
 800981a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800981e:	e005      	b.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009820:	4b3f      	ldr	r3, [pc, #252]	@ (8009920 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009828:	2b00      	cmp	r3, #0
 800982a:	d0ed      	beq.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800982c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009830:	2b00      	cmp	r3, #0
 8009832:	d179      	bne.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009834:	4b39      	ldr	r3, [pc, #228]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009836:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800983c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009840:	4053      	eors	r3, r2
 8009842:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009846:	2b00      	cmp	r3, #0
 8009848:	d015      	beq.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800984a:	4b34      	ldr	r3, [pc, #208]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800984c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800984e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009852:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009856:	4b31      	ldr	r3, [pc, #196]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800985a:	4a30      	ldr	r2, [pc, #192]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800985c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009860:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009862:	4b2e      	ldr	r3, [pc, #184]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009866:	4a2d      	ldr	r2, [pc, #180]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009868:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800986c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800986e:	4a2b      	ldr	r2, [pc, #172]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009870:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009874:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800987a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800987e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009882:	d118      	bne.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009884:	f7f9 f8d4 	bl	8002a30 <HAL_GetTick>
 8009888:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800988c:	e00d      	b.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800988e:	f7f9 f8cf 	bl	8002a30 <HAL_GetTick>
 8009892:	4602      	mov	r2, r0
 8009894:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009898:	1ad2      	subs	r2, r2, r3
 800989a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800989e:	429a      	cmp	r2, r3
 80098a0:	d903      	bls.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80098a2:	2303      	movs	r3, #3
 80098a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80098a8:	e005      	b.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80098aa:	4b1c      	ldr	r3, [pc, #112]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098ae:	f003 0302 	and.w	r3, r3, #2
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d0eb      	beq.n	800988e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80098b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d129      	bne.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80098be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80098c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80098ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80098ce:	d10e      	bne.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80098d0:	4b12      	ldr	r3, [pc, #72]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098d2:	691b      	ldr	r3, [r3, #16]
 80098d4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80098d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80098e0:	091a      	lsrs	r2, r3, #4
 80098e2:	4b10      	ldr	r3, [pc, #64]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80098e4:	4013      	ands	r3, r2
 80098e6:	4a0d      	ldr	r2, [pc, #52]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098e8:	430b      	orrs	r3, r1
 80098ea:	6113      	str	r3, [r2, #16]
 80098ec:	e005      	b.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80098ee:	4b0b      	ldr	r3, [pc, #44]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098f0:	691b      	ldr	r3, [r3, #16]
 80098f2:	4a0a      	ldr	r2, [pc, #40]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098f4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80098f8:	6113      	str	r3, [r2, #16]
 80098fa:	4b08      	ldr	r3, [pc, #32]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098fc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80098fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009902:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009906:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800990a:	4a04      	ldr	r2, [pc, #16]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800990c:	430b      	orrs	r3, r1
 800990e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009910:	e00e      	b.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009912:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009916:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800991a:	e009      	b.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800991c:	58024400 	.word	0x58024400
 8009920:	58024800 	.word	0x58024800
 8009924:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009928:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800992c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009938:	f002 0301 	and.w	r3, r2, #1
 800993c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009940:	2300      	movs	r3, #0
 8009942:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009946:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800994a:	460b      	mov	r3, r1
 800994c:	4313      	orrs	r3, r2
 800994e:	f000 8089 	beq.w	8009a64 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009956:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009958:	2b28      	cmp	r3, #40	@ 0x28
 800995a:	d86b      	bhi.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800995c:	a201      	add	r2, pc, #4	@ (adr r2, 8009964 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800995e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009962:	bf00      	nop
 8009964:	08009a3d 	.word	0x08009a3d
 8009968:	08009a35 	.word	0x08009a35
 800996c:	08009a35 	.word	0x08009a35
 8009970:	08009a35 	.word	0x08009a35
 8009974:	08009a35 	.word	0x08009a35
 8009978:	08009a35 	.word	0x08009a35
 800997c:	08009a35 	.word	0x08009a35
 8009980:	08009a35 	.word	0x08009a35
 8009984:	08009a09 	.word	0x08009a09
 8009988:	08009a35 	.word	0x08009a35
 800998c:	08009a35 	.word	0x08009a35
 8009990:	08009a35 	.word	0x08009a35
 8009994:	08009a35 	.word	0x08009a35
 8009998:	08009a35 	.word	0x08009a35
 800999c:	08009a35 	.word	0x08009a35
 80099a0:	08009a35 	.word	0x08009a35
 80099a4:	08009a1f 	.word	0x08009a1f
 80099a8:	08009a35 	.word	0x08009a35
 80099ac:	08009a35 	.word	0x08009a35
 80099b0:	08009a35 	.word	0x08009a35
 80099b4:	08009a35 	.word	0x08009a35
 80099b8:	08009a35 	.word	0x08009a35
 80099bc:	08009a35 	.word	0x08009a35
 80099c0:	08009a35 	.word	0x08009a35
 80099c4:	08009a3d 	.word	0x08009a3d
 80099c8:	08009a35 	.word	0x08009a35
 80099cc:	08009a35 	.word	0x08009a35
 80099d0:	08009a35 	.word	0x08009a35
 80099d4:	08009a35 	.word	0x08009a35
 80099d8:	08009a35 	.word	0x08009a35
 80099dc:	08009a35 	.word	0x08009a35
 80099e0:	08009a35 	.word	0x08009a35
 80099e4:	08009a3d 	.word	0x08009a3d
 80099e8:	08009a35 	.word	0x08009a35
 80099ec:	08009a35 	.word	0x08009a35
 80099f0:	08009a35 	.word	0x08009a35
 80099f4:	08009a35 	.word	0x08009a35
 80099f8:	08009a35 	.word	0x08009a35
 80099fc:	08009a35 	.word	0x08009a35
 8009a00:	08009a35 	.word	0x08009a35
 8009a04:	08009a3d 	.word	0x08009a3d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a0c:	3308      	adds	r3, #8
 8009a0e:	2101      	movs	r1, #1
 8009a10:	4618      	mov	r0, r3
 8009a12:	f001 fe95 	bl	800b740 <RCCEx_PLL2_Config>
 8009a16:	4603      	mov	r3, r0
 8009a18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009a1c:	e00f      	b.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a22:	3328      	adds	r3, #40	@ 0x28
 8009a24:	2101      	movs	r1, #1
 8009a26:	4618      	mov	r0, r3
 8009a28:	f001 ff3c 	bl	800b8a4 <RCCEx_PLL3_Config>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009a32:	e004      	b.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a34:	2301      	movs	r3, #1
 8009a36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009a3a:	e000      	b.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009a3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d10a      	bne.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009a46:	4bbf      	ldr	r3, [pc, #764]	@ (8009d44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a4a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009a54:	4abb      	ldr	r2, [pc, #748]	@ (8009d44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a56:	430b      	orrs	r3, r1
 8009a58:	6553      	str	r3, [r2, #84]	@ 0x54
 8009a5a:	e003      	b.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6c:	f002 0302 	and.w	r3, r2, #2
 8009a70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009a74:	2300      	movs	r3, #0
 8009a76:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009a7a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009a7e:	460b      	mov	r3, r1
 8009a80:	4313      	orrs	r3, r2
 8009a82:	d041      	beq.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a8a:	2b05      	cmp	r3, #5
 8009a8c:	d824      	bhi.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009a8e:	a201      	add	r2, pc, #4	@ (adr r2, 8009a94 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a94:	08009ae1 	.word	0x08009ae1
 8009a98:	08009aad 	.word	0x08009aad
 8009a9c:	08009ac3 	.word	0x08009ac3
 8009aa0:	08009ae1 	.word	0x08009ae1
 8009aa4:	08009ae1 	.word	0x08009ae1
 8009aa8:	08009ae1 	.word	0x08009ae1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ab0:	3308      	adds	r3, #8
 8009ab2:	2101      	movs	r1, #1
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f001 fe43 	bl	800b740 <RCCEx_PLL2_Config>
 8009aba:	4603      	mov	r3, r0
 8009abc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009ac0:	e00f      	b.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ac6:	3328      	adds	r3, #40	@ 0x28
 8009ac8:	2101      	movs	r1, #1
 8009aca:	4618      	mov	r0, r3
 8009acc:	f001 feea 	bl	800b8a4 <RCCEx_PLL3_Config>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009ad6:	e004      	b.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009ade:	e000      	b.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009ae0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ae2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d10a      	bne.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009aea:	4b96      	ldr	r3, [pc, #600]	@ (8009d44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009aee:	f023 0107 	bic.w	r1, r3, #7
 8009af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009af6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009af8:	4a92      	ldr	r2, [pc, #584]	@ (8009d44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009afa:	430b      	orrs	r3, r1
 8009afc:	6553      	str	r3, [r2, #84]	@ 0x54
 8009afe:	e003      	b.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b10:	f002 0304 	and.w	r3, r2, #4
 8009b14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009b18:	2300      	movs	r3, #0
 8009b1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009b1e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009b22:	460b      	mov	r3, r1
 8009b24:	4313      	orrs	r3, r2
 8009b26:	d044      	beq.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009b30:	2b05      	cmp	r3, #5
 8009b32:	d825      	bhi.n	8009b80 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009b34:	a201      	add	r2, pc, #4	@ (adr r2, 8009b3c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b3a:	bf00      	nop
 8009b3c:	08009b89 	.word	0x08009b89
 8009b40:	08009b55 	.word	0x08009b55
 8009b44:	08009b6b 	.word	0x08009b6b
 8009b48:	08009b89 	.word	0x08009b89
 8009b4c:	08009b89 	.word	0x08009b89
 8009b50:	08009b89 	.word	0x08009b89
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b58:	3308      	adds	r3, #8
 8009b5a:	2101      	movs	r1, #1
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f001 fdef 	bl	800b740 <RCCEx_PLL2_Config>
 8009b62:	4603      	mov	r3, r0
 8009b64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009b68:	e00f      	b.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b6e:	3328      	adds	r3, #40	@ 0x28
 8009b70:	2101      	movs	r1, #1
 8009b72:	4618      	mov	r0, r3
 8009b74:	f001 fe96 	bl	800b8a4 <RCCEx_PLL3_Config>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009b7e:	e004      	b.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b80:	2301      	movs	r3, #1
 8009b82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009b86:	e000      	b.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009b88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d10b      	bne.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009b92:	4b6c      	ldr	r3, [pc, #432]	@ (8009d44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b96:	f023 0107 	bic.w	r1, r3, #7
 8009b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009ba2:	4a68      	ldr	r2, [pc, #416]	@ (8009d44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ba4:	430b      	orrs	r3, r1
 8009ba6:	6593      	str	r3, [r2, #88]	@ 0x58
 8009ba8:	e003      	b.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009baa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bba:	f002 0320 	and.w	r3, r2, #32
 8009bbe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009bc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009bcc:	460b      	mov	r3, r1
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	d055      	beq.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009bde:	d033      	beq.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009be0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009be4:	d82c      	bhi.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009be6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bea:	d02f      	beq.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009bec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bf0:	d826      	bhi.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009bf2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009bf6:	d02b      	beq.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009bf8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009bfc:	d820      	bhi.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009bfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c02:	d012      	beq.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009c04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c08:	d81a      	bhi.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d022      	beq.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009c0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c12:	d115      	bne.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c18:	3308      	adds	r3, #8
 8009c1a:	2100      	movs	r1, #0
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f001 fd8f 	bl	800b740 <RCCEx_PLL2_Config>
 8009c22:	4603      	mov	r3, r0
 8009c24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009c28:	e015      	b.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c2e:	3328      	adds	r3, #40	@ 0x28
 8009c30:	2102      	movs	r1, #2
 8009c32:	4618      	mov	r0, r3
 8009c34:	f001 fe36 	bl	800b8a4 <RCCEx_PLL3_Config>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009c3e:	e00a      	b.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c40:	2301      	movs	r3, #1
 8009c42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009c46:	e006      	b.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009c48:	bf00      	nop
 8009c4a:	e004      	b.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009c4c:	bf00      	nop
 8009c4e:	e002      	b.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009c50:	bf00      	nop
 8009c52:	e000      	b.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009c54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d10b      	bne.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009c5e:	4b39      	ldr	r3, [pc, #228]	@ (8009d44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c62:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c6e:	4a35      	ldr	r2, [pc, #212]	@ (8009d44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009c70:	430b      	orrs	r3, r1
 8009c72:	6553      	str	r3, [r2, #84]	@ 0x54
 8009c74:	e003      	b.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c86:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009c8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009c8e:	2300      	movs	r3, #0
 8009c90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009c94:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009c98:	460b      	mov	r3, r1
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	d058      	beq.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ca2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009ca6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009caa:	d033      	beq.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009cac:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009cb0:	d82c      	bhi.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009cb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009cb6:	d02f      	beq.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009cb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009cbc:	d826      	bhi.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009cbe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009cc2:	d02b      	beq.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009cc4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009cc8:	d820      	bhi.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009cca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009cce:	d012      	beq.n	8009cf6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009cd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009cd4:	d81a      	bhi.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d022      	beq.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009cda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009cde:	d115      	bne.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ce4:	3308      	adds	r3, #8
 8009ce6:	2100      	movs	r1, #0
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f001 fd29 	bl	800b740 <RCCEx_PLL2_Config>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009cf4:	e015      	b.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cfa:	3328      	adds	r3, #40	@ 0x28
 8009cfc:	2102      	movs	r1, #2
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f001 fdd0 	bl	800b8a4 <RCCEx_PLL3_Config>
 8009d04:	4603      	mov	r3, r0
 8009d06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009d0a:	e00a      	b.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009d12:	e006      	b.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009d14:	bf00      	nop
 8009d16:	e004      	b.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009d18:	bf00      	nop
 8009d1a:	e002      	b.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009d1c:	bf00      	nop
 8009d1e:	e000      	b.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009d20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d10e      	bne.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009d2a:	4b06      	ldr	r3, [pc, #24]	@ (8009d44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d2e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009d3a:	4a02      	ldr	r2, [pc, #8]	@ (8009d44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009d3c:	430b      	orrs	r3, r1
 8009d3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009d40:	e006      	b.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009d42:	bf00      	nop
 8009d44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d58:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009d5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009d60:	2300      	movs	r3, #0
 8009d62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009d66:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009d6a:	460b      	mov	r3, r1
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	d055      	beq.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d74:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009d78:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009d7c:	d033      	beq.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009d7e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009d82:	d82c      	bhi.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009d84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d88:	d02f      	beq.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009d8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d8e:	d826      	bhi.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009d90:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009d94:	d02b      	beq.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009d96:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009d9a:	d820      	bhi.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009d9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009da0:	d012      	beq.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009da2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009da6:	d81a      	bhi.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d022      	beq.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009dac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009db0:	d115      	bne.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009db6:	3308      	adds	r3, #8
 8009db8:	2100      	movs	r1, #0
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f001 fcc0 	bl	800b740 <RCCEx_PLL2_Config>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009dc6:	e015      	b.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dcc:	3328      	adds	r3, #40	@ 0x28
 8009dce:	2102      	movs	r1, #2
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f001 fd67 	bl	800b8a4 <RCCEx_PLL3_Config>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009ddc:	e00a      	b.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009dde:	2301      	movs	r3, #1
 8009de0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009de4:	e006      	b.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009de6:	bf00      	nop
 8009de8:	e004      	b.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009dea:	bf00      	nop
 8009dec:	e002      	b.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009dee:	bf00      	nop
 8009df0:	e000      	b.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009df2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009df4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d10b      	bne.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009dfc:	4ba1      	ldr	r3, [pc, #644]	@ (800a084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e00:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e08:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009e0c:	4a9d      	ldr	r2, [pc, #628]	@ (800a084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e0e:	430b      	orrs	r3, r1
 8009e10:	6593      	str	r3, [r2, #88]	@ 0x58
 8009e12:	e003      	b.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e24:	f002 0308 	and.w	r3, r2, #8
 8009e28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009e32:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009e36:	460b      	mov	r3, r1
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	d01e      	beq.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e48:	d10c      	bne.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e4e:	3328      	adds	r3, #40	@ 0x28
 8009e50:	2102      	movs	r1, #2
 8009e52:	4618      	mov	r0, r3
 8009e54:	f001 fd26 	bl	800b8a4 <RCCEx_PLL3_Config>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d002      	beq.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009e64:	4b87      	ldr	r3, [pc, #540]	@ (800a084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e68:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e74:	4a83      	ldr	r2, [pc, #524]	@ (800a084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e76:	430b      	orrs	r3, r1
 8009e78:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e82:	f002 0310 	and.w	r3, r2, #16
 8009e86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009e90:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009e94:	460b      	mov	r3, r1
 8009e96:	4313      	orrs	r3, r2
 8009e98:	d01e      	beq.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009ea2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ea6:	d10c      	bne.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eac:	3328      	adds	r3, #40	@ 0x28
 8009eae:	2102      	movs	r1, #2
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f001 fcf7 	bl	800b8a4 <RCCEx_PLL3_Config>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d002      	beq.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009ec2:	4b70      	ldr	r3, [pc, #448]	@ (800a084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ec6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ece:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009ed2:	4a6c      	ldr	r2, [pc, #432]	@ (800a084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ed4:	430b      	orrs	r3, r1
 8009ed6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009ee4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009ee8:	2300      	movs	r3, #0
 8009eea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009eee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	d03e      	beq.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009efc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009f00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f04:	d022      	beq.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009f06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f0a:	d81b      	bhi.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d003      	beq.n	8009f18 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009f10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f14:	d00b      	beq.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009f16:	e015      	b.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f1c:	3308      	adds	r3, #8
 8009f1e:	2100      	movs	r1, #0
 8009f20:	4618      	mov	r0, r3
 8009f22:	f001 fc0d 	bl	800b740 <RCCEx_PLL2_Config>
 8009f26:	4603      	mov	r3, r0
 8009f28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009f2c:	e00f      	b.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f32:	3328      	adds	r3, #40	@ 0x28
 8009f34:	2102      	movs	r1, #2
 8009f36:	4618      	mov	r0, r3
 8009f38:	f001 fcb4 	bl	800b8a4 <RCCEx_PLL3_Config>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009f42:	e004      	b.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f44:	2301      	movs	r3, #1
 8009f46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f4a:	e000      	b.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009f4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d10b      	bne.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009f56:	4b4b      	ldr	r3, [pc, #300]	@ (800a084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f5a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009f66:	4a47      	ldr	r2, [pc, #284]	@ (800a084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f68:	430b      	orrs	r3, r1
 8009f6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8009f6c:	e003      	b.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009f82:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009f84:	2300      	movs	r3, #0
 8009f86:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009f88:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009f8c:	460b      	mov	r3, r1
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	d03b      	beq.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f9a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009f9e:	d01f      	beq.n	8009fe0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009fa0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009fa4:	d818      	bhi.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009fa6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009faa:	d003      	beq.n	8009fb4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009fac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009fb0:	d007      	beq.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009fb2:	e011      	b.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fb4:	4b33      	ldr	r3, [pc, #204]	@ (800a084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fb8:	4a32      	ldr	r2, [pc, #200]	@ (800a084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009fba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009fbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009fc0:	e00f      	b.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fc6:	3328      	adds	r3, #40	@ 0x28
 8009fc8:	2101      	movs	r1, #1
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f001 fc6a 	bl	800b8a4 <RCCEx_PLL3_Config>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009fd6:	e004      	b.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009fde:	e000      	b.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009fe0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fe2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d10b      	bne.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009fea:	4b26      	ldr	r3, [pc, #152]	@ (800a084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ffa:	4a22      	ldr	r2, [pc, #136]	@ (800a084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ffc:	430b      	orrs	r3, r1
 8009ffe:	6553      	str	r3, [r2, #84]	@ 0x54
 800a000:	e003      	b.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a002:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a006:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a00a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a012:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a016:	673b      	str	r3, [r7, #112]	@ 0x70
 800a018:	2300      	movs	r3, #0
 800a01a:	677b      	str	r3, [r7, #116]	@ 0x74
 800a01c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a020:	460b      	mov	r3, r1
 800a022:	4313      	orrs	r3, r2
 800a024:	d034      	beq.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a02a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d003      	beq.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a030:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a034:	d007      	beq.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a036:	e011      	b.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a038:	4b12      	ldr	r3, [pc, #72]	@ (800a084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a03a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a03c:	4a11      	ldr	r2, [pc, #68]	@ (800a084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a03e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a042:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a044:	e00e      	b.n	800a064 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a04a:	3308      	adds	r3, #8
 800a04c:	2102      	movs	r1, #2
 800a04e:	4618      	mov	r0, r3
 800a050:	f001 fb76 	bl	800b740 <RCCEx_PLL2_Config>
 800a054:	4603      	mov	r3, r0
 800a056:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a05a:	e003      	b.n	800a064 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a05c:	2301      	movs	r3, #1
 800a05e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a062:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a064:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d10d      	bne.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a06c:	4b05      	ldr	r3, [pc, #20]	@ (800a084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a06e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a070:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a078:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a07a:	4a02      	ldr	r2, [pc, #8]	@ (800a084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a07c:	430b      	orrs	r3, r1
 800a07e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a080:	e006      	b.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a082:	bf00      	nop
 800a084:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a088:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a08c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a098:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a09c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a09e:	2300      	movs	r3, #0
 800a0a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a0a2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a0a6:	460b      	mov	r3, r1
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	d00c      	beq.n	800a0c6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a0ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0b0:	3328      	adds	r3, #40	@ 0x28
 800a0b2:	2102      	movs	r1, #2
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f001 fbf5 	bl	800b8a4 <RCCEx_PLL3_Config>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d002      	beq.n	800a0c6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a0c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ce:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a0d2:	663b      	str	r3, [r7, #96]	@ 0x60
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	667b      	str	r3, [r7, #100]	@ 0x64
 800a0d8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a0dc:	460b      	mov	r3, r1
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	d038      	beq.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a0e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a0ee:	d018      	beq.n	800a122 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a0f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a0f4:	d811      	bhi.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a0f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0fa:	d014      	beq.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a0fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a100:	d80b      	bhi.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a102:	2b00      	cmp	r3, #0
 800a104:	d011      	beq.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a106:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a10a:	d106      	bne.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a10c:	4bc3      	ldr	r3, [pc, #780]	@ (800a41c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a10e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a110:	4ac2      	ldr	r2, [pc, #776]	@ (800a41c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a112:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a116:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a118:	e008      	b.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a11a:	2301      	movs	r3, #1
 800a11c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a120:	e004      	b.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a122:	bf00      	nop
 800a124:	e002      	b.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a126:	bf00      	nop
 800a128:	e000      	b.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a12a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a12c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a130:	2b00      	cmp	r3, #0
 800a132:	d10b      	bne.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a134:	4bb9      	ldr	r3, [pc, #740]	@ (800a41c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a138:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a13c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a140:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a144:	4ab5      	ldr	r2, [pc, #724]	@ (800a41c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a146:	430b      	orrs	r3, r1
 800a148:	6553      	str	r3, [r2, #84]	@ 0x54
 800a14a:	e003      	b.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a14c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a150:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a15c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a160:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a162:	2300      	movs	r3, #0
 800a164:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a166:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a16a:	460b      	mov	r3, r1
 800a16c:	4313      	orrs	r3, r2
 800a16e:	d009      	beq.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a170:	4baa      	ldr	r3, [pc, #680]	@ (800a41c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a172:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a174:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a17c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a17e:	4aa7      	ldr	r2, [pc, #668]	@ (800a41c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a180:	430b      	orrs	r3, r1
 800a182:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800a190:	653b      	str	r3, [r7, #80]	@ 0x50
 800a192:	2300      	movs	r3, #0
 800a194:	657b      	str	r3, [r7, #84]	@ 0x54
 800a196:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a19a:	460b      	mov	r3, r1
 800a19c:	4313      	orrs	r3, r2
 800a19e:	d00a      	beq.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a1a0:	4b9e      	ldr	r3, [pc, #632]	@ (800a41c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1a2:	691b      	ldr	r3, [r3, #16]
 800a1a4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800a1a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1ac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a1b0:	4a9a      	ldr	r2, [pc, #616]	@ (800a41c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1b2:	430b      	orrs	r3, r1
 800a1b4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a1b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1be:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a1c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a1c8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	d009      	beq.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a1d2:	4b92      	ldr	r3, [pc, #584]	@ (800a41c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1d6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a1da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1e0:	4a8e      	ldr	r2, [pc, #568]	@ (800a41c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1e2:	430b      	orrs	r3, r1
 800a1e4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a1e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ee:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a1f2:	643b      	str	r3, [r7, #64]	@ 0x40
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	647b      	str	r3, [r7, #68]	@ 0x44
 800a1f8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	4313      	orrs	r3, r2
 800a200:	d00e      	beq.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a202:	4b86      	ldr	r3, [pc, #536]	@ (800a41c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a204:	691b      	ldr	r3, [r3, #16]
 800a206:	4a85      	ldr	r2, [pc, #532]	@ (800a41c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a208:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a20c:	6113      	str	r3, [r2, #16]
 800a20e:	4b83      	ldr	r3, [pc, #524]	@ (800a41c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a210:	6919      	ldr	r1, [r3, #16]
 800a212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a216:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a21a:	4a80      	ldr	r2, [pc, #512]	@ (800a41c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a21c:	430b      	orrs	r3, r1
 800a21e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a228:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a22c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a22e:	2300      	movs	r3, #0
 800a230:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a232:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a236:	460b      	mov	r3, r1
 800a238:	4313      	orrs	r3, r2
 800a23a:	d009      	beq.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a23c:	4b77      	ldr	r3, [pc, #476]	@ (800a41c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a23e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a240:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a24a:	4a74      	ldr	r2, [pc, #464]	@ (800a41c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a24c:	430b      	orrs	r3, r1
 800a24e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a258:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a25c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a25e:	2300      	movs	r3, #0
 800a260:	637b      	str	r3, [r7, #52]	@ 0x34
 800a262:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a266:	460b      	mov	r3, r1
 800a268:	4313      	orrs	r3, r2
 800a26a:	d00a      	beq.n	800a282 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a26c:	4b6b      	ldr	r3, [pc, #428]	@ (800a41c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a26e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a270:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a278:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a27c:	4a67      	ldr	r2, [pc, #412]	@ (800a41c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a27e:	430b      	orrs	r3, r1
 800a280:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28a:	2100      	movs	r1, #0
 800a28c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a28e:	f003 0301 	and.w	r3, r3, #1
 800a292:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a294:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a298:	460b      	mov	r3, r1
 800a29a:	4313      	orrs	r3, r2
 800a29c:	d011      	beq.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a29e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2a2:	3308      	adds	r3, #8
 800a2a4:	2100      	movs	r1, #0
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f001 fa4a 	bl	800b740 <RCCEx_PLL2_Config>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a2b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d003      	beq.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a2c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ca:	2100      	movs	r1, #0
 800a2cc:	6239      	str	r1, [r7, #32]
 800a2ce:	f003 0302 	and.w	r3, r3, #2
 800a2d2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a2d4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a2d8:	460b      	mov	r3, r1
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	d011      	beq.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a2de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2e2:	3308      	adds	r3, #8
 800a2e4:	2101      	movs	r1, #1
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f001 fa2a 	bl	800b740 <RCCEx_PLL2_Config>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a2f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d003      	beq.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30a:	2100      	movs	r1, #0
 800a30c:	61b9      	str	r1, [r7, #24]
 800a30e:	f003 0304 	and.w	r3, r3, #4
 800a312:	61fb      	str	r3, [r7, #28]
 800a314:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a318:	460b      	mov	r3, r1
 800a31a:	4313      	orrs	r3, r2
 800a31c:	d011      	beq.n	800a342 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a31e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a322:	3308      	adds	r3, #8
 800a324:	2102      	movs	r1, #2
 800a326:	4618      	mov	r0, r3
 800a328:	f001 fa0a 	bl	800b740 <RCCEx_PLL2_Config>
 800a32c:	4603      	mov	r3, r0
 800a32e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a332:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a336:	2b00      	cmp	r3, #0
 800a338:	d003      	beq.n	800a342 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a33a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a33e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a34a:	2100      	movs	r1, #0
 800a34c:	6139      	str	r1, [r7, #16]
 800a34e:	f003 0308 	and.w	r3, r3, #8
 800a352:	617b      	str	r3, [r7, #20]
 800a354:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a358:	460b      	mov	r3, r1
 800a35a:	4313      	orrs	r3, r2
 800a35c:	d011      	beq.n	800a382 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a35e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a362:	3328      	adds	r3, #40	@ 0x28
 800a364:	2100      	movs	r1, #0
 800a366:	4618      	mov	r0, r3
 800a368:	f001 fa9c 	bl	800b8a4 <RCCEx_PLL3_Config>
 800a36c:	4603      	mov	r3, r0
 800a36e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800a372:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a376:	2b00      	cmp	r3, #0
 800a378:	d003      	beq.n	800a382 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a37a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a37e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38a:	2100      	movs	r1, #0
 800a38c:	60b9      	str	r1, [r7, #8]
 800a38e:	f003 0310 	and.w	r3, r3, #16
 800a392:	60fb      	str	r3, [r7, #12]
 800a394:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a398:	460b      	mov	r3, r1
 800a39a:	4313      	orrs	r3, r2
 800a39c:	d011      	beq.n	800a3c2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a39e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3a2:	3328      	adds	r3, #40	@ 0x28
 800a3a4:	2101      	movs	r1, #1
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f001 fa7c 	bl	800b8a4 <RCCEx_PLL3_Config>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a3b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d003      	beq.n	800a3c2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a3c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ca:	2100      	movs	r1, #0
 800a3cc:	6039      	str	r1, [r7, #0]
 800a3ce:	f003 0320 	and.w	r3, r3, #32
 800a3d2:	607b      	str	r3, [r7, #4]
 800a3d4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a3d8:	460b      	mov	r3, r1
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	d011      	beq.n	800a402 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a3de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3e2:	3328      	adds	r3, #40	@ 0x28
 800a3e4:	2102      	movs	r1, #2
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f001 fa5c 	bl	800b8a4 <RCCEx_PLL3_Config>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a3f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d003      	beq.n	800a402 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800a402:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800a406:	2b00      	cmp	r3, #0
 800a408:	d101      	bne.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a40a:	2300      	movs	r3, #0
 800a40c:	e000      	b.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a40e:	2301      	movs	r3, #1
}
 800a410:	4618      	mov	r0, r3
 800a412:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800a416:	46bd      	mov	sp, r7
 800a418:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a41c:	58024400 	.word	0x58024400

0800a420 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b090      	sub	sp, #64	@ 0x40
 800a424:	af00      	add	r7, sp, #0
 800a426:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a42a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a42e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a432:	430b      	orrs	r3, r1
 800a434:	f040 8094 	bne.w	800a560 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a438:	4b9e      	ldr	r3, [pc, #632]	@ (800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a43a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a43c:	f003 0307 	and.w	r3, r3, #7
 800a440:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a444:	2b04      	cmp	r3, #4
 800a446:	f200 8087 	bhi.w	800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a44a:	a201      	add	r2, pc, #4	@ (adr r2, 800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a44c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a450:	0800a465 	.word	0x0800a465
 800a454:	0800a48d 	.word	0x0800a48d
 800a458:	0800a4b5 	.word	0x0800a4b5
 800a45c:	0800a551 	.word	0x0800a551
 800a460:	0800a4dd 	.word	0x0800a4dd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a464:	4b93      	ldr	r3, [pc, #588]	@ (800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a46c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a470:	d108      	bne.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a472:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a476:	4618      	mov	r0, r3
 800a478:	f001 f810 	bl	800b49c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a47c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a47e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a480:	f000 bd45 	b.w	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a484:	2300      	movs	r3, #0
 800a486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a488:	f000 bd41 	b.w	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a48c:	4b89      	ldr	r3, [pc, #548]	@ (800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a494:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a498:	d108      	bne.n	800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a49a:	f107 0318 	add.w	r3, r7, #24
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f000 fd54 	bl	800af4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a4a4:	69bb      	ldr	r3, [r7, #24]
 800a4a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4a8:	f000 bd31 	b.w	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4b0:	f000 bd2d 	b.w	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a4b4:	4b7f      	ldr	r3, [pc, #508]	@ (800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a4bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4c0:	d108      	bne.n	800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4c2:	f107 030c 	add.w	r3, r7, #12
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f000 fe94 	bl	800b1f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4d0:	f000 bd1d 	b.w	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4d8:	f000 bd19 	b.w	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a4dc:	4b75      	ldr	r3, [pc, #468]	@ (800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4e0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a4e4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a4e6:	4b73      	ldr	r3, [pc, #460]	@ (800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f003 0304 	and.w	r3, r3, #4
 800a4ee:	2b04      	cmp	r3, #4
 800a4f0:	d10c      	bne.n	800a50c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a4f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d109      	bne.n	800a50c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4f8:	4b6e      	ldr	r3, [pc, #440]	@ (800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	08db      	lsrs	r3, r3, #3
 800a4fe:	f003 0303 	and.w	r3, r3, #3
 800a502:	4a6d      	ldr	r2, [pc, #436]	@ (800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a504:	fa22 f303 	lsr.w	r3, r2, r3
 800a508:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a50a:	e01f      	b.n	800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a50c:	4b69      	ldr	r3, [pc, #420]	@ (800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a514:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a518:	d106      	bne.n	800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a51a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a51c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a520:	d102      	bne.n	800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a522:	4b66      	ldr	r3, [pc, #408]	@ (800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a524:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a526:	e011      	b.n	800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a528:	4b62      	ldr	r3, [pc, #392]	@ (800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a530:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a534:	d106      	bne.n	800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a538:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a53c:	d102      	bne.n	800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a53e:	4b60      	ldr	r3, [pc, #384]	@ (800a6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a540:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a542:	e003      	b.n	800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a544:	2300      	movs	r3, #0
 800a546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a548:	f000 bce1 	b.w	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a54c:	f000 bcdf 	b.w	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a550:	4b5c      	ldr	r3, [pc, #368]	@ (800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a554:	f000 bcdb 	b.w	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a558:	2300      	movs	r3, #0
 800a55a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a55c:	f000 bcd7 	b.w	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a560:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a564:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a568:	430b      	orrs	r3, r1
 800a56a:	f040 80ad 	bne.w	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a56e:	4b51      	ldr	r3, [pc, #324]	@ (800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a570:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a572:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a576:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a57a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a57e:	d056      	beq.n	800a62e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a582:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a586:	f200 8090 	bhi.w	800a6aa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a58a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a58c:	2bc0      	cmp	r3, #192	@ 0xc0
 800a58e:	f000 8088 	beq.w	800a6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a594:	2bc0      	cmp	r3, #192	@ 0xc0
 800a596:	f200 8088 	bhi.w	800a6aa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a59a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a59c:	2b80      	cmp	r3, #128	@ 0x80
 800a59e:	d032      	beq.n	800a606 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a5a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5a2:	2b80      	cmp	r3, #128	@ 0x80
 800a5a4:	f200 8081 	bhi.w	800a6aa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a5a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d003      	beq.n	800a5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a5ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5b0:	2b40      	cmp	r3, #64	@ 0x40
 800a5b2:	d014      	beq.n	800a5de <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a5b4:	e079      	b.n	800a6aa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a5b6:	4b3f      	ldr	r3, [pc, #252]	@ (800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a5c2:	d108      	bne.n	800a5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a5c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f000 ff67 	bl	800b49c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a5ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5d2:	f000 bc9c 	b.w	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5da:	f000 bc98 	b.w	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5de:	4b35      	ldr	r3, [pc, #212]	@ (800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a5e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a5ea:	d108      	bne.n	800a5fe <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5ec:	f107 0318 	add.w	r3, r7, #24
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f000 fcab 	bl	800af4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a5f6:	69bb      	ldr	r3, [r7, #24]
 800a5f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5fa:	f000 bc88 	b.w	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5fe:	2300      	movs	r3, #0
 800a600:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a602:	f000 bc84 	b.w	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a606:	4b2b      	ldr	r3, [pc, #172]	@ (800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a60e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a612:	d108      	bne.n	800a626 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a614:	f107 030c 	add.w	r3, r7, #12
 800a618:	4618      	mov	r0, r3
 800a61a:	f000 fdeb 	bl	800b1f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a622:	f000 bc74 	b.w	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a626:	2300      	movs	r3, #0
 800a628:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a62a:	f000 bc70 	b.w	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a62e:	4b21      	ldr	r3, [pc, #132]	@ (800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a632:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a636:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a638:	4b1e      	ldr	r3, [pc, #120]	@ (800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f003 0304 	and.w	r3, r3, #4
 800a640:	2b04      	cmp	r3, #4
 800a642:	d10c      	bne.n	800a65e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a646:	2b00      	cmp	r3, #0
 800a648:	d109      	bne.n	800a65e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a64a:	4b1a      	ldr	r3, [pc, #104]	@ (800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	08db      	lsrs	r3, r3, #3
 800a650:	f003 0303 	and.w	r3, r3, #3
 800a654:	4a18      	ldr	r2, [pc, #96]	@ (800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a656:	fa22 f303 	lsr.w	r3, r2, r3
 800a65a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a65c:	e01f      	b.n	800a69e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a65e:	4b15      	ldr	r3, [pc, #84]	@ (800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a666:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a66a:	d106      	bne.n	800a67a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a66c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a66e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a672:	d102      	bne.n	800a67a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a674:	4b11      	ldr	r3, [pc, #68]	@ (800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a676:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a678:	e011      	b.n	800a69e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a67a:	4b0e      	ldr	r3, [pc, #56]	@ (800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a682:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a686:	d106      	bne.n	800a696 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a68a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a68e:	d102      	bne.n	800a696 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a690:	4b0b      	ldr	r3, [pc, #44]	@ (800a6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a692:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a694:	e003      	b.n	800a69e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a696:	2300      	movs	r3, #0
 800a698:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a69a:	f000 bc38 	b.w	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a69e:	f000 bc36 	b.w	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a6a2:	4b08      	ldr	r3, [pc, #32]	@ (800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a6a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6a6:	f000 bc32 	b.w	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6ae:	f000 bc2e 	b.w	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a6b2:	bf00      	nop
 800a6b4:	58024400 	.word	0x58024400
 800a6b8:	03d09000 	.word	0x03d09000
 800a6bc:	003d0900 	.word	0x003d0900
 800a6c0:	017d7840 	.word	0x017d7840
 800a6c4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a6c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6cc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a6d0:	430b      	orrs	r3, r1
 800a6d2:	f040 809c 	bne.w	800a80e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a6d6:	4b9e      	ldr	r3, [pc, #632]	@ (800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6da:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a6de:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a6e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a6e6:	d054      	beq.n	800a792 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a6e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a6ee:	f200 808b 	bhi.w	800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6f4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a6f8:	f000 8083 	beq.w	800a802 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a6fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6fe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a702:	f200 8081 	bhi.w	800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a708:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a70c:	d02f      	beq.n	800a76e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a70e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a710:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a714:	d878      	bhi.n	800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d004      	beq.n	800a726 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a71c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a71e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a722:	d012      	beq.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a724:	e070      	b.n	800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a726:	4b8a      	ldr	r3, [pc, #552]	@ (800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a72e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a732:	d107      	bne.n	800a744 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a734:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a738:	4618      	mov	r0, r3
 800a73a:	f000 feaf 	bl	800b49c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a73e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a740:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a742:	e3e4      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a744:	2300      	movs	r3, #0
 800a746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a748:	e3e1      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a74a:	4b81      	ldr	r3, [pc, #516]	@ (800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a752:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a756:	d107      	bne.n	800a768 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a758:	f107 0318 	add.w	r3, r7, #24
 800a75c:	4618      	mov	r0, r3
 800a75e:	f000 fbf5 	bl	800af4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a762:	69bb      	ldr	r3, [r7, #24]
 800a764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a766:	e3d2      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a768:	2300      	movs	r3, #0
 800a76a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a76c:	e3cf      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a76e:	4b78      	ldr	r3, [pc, #480]	@ (800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a776:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a77a:	d107      	bne.n	800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a77c:	f107 030c 	add.w	r3, r7, #12
 800a780:	4618      	mov	r0, r3
 800a782:	f000 fd37 	bl	800b1f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a78a:	e3c0      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a78c:	2300      	movs	r3, #0
 800a78e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a790:	e3bd      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a792:	4b6f      	ldr	r3, [pc, #444]	@ (800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a796:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a79a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a79c:	4b6c      	ldr	r3, [pc, #432]	@ (800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f003 0304 	and.w	r3, r3, #4
 800a7a4:	2b04      	cmp	r3, #4
 800a7a6:	d10c      	bne.n	800a7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a7a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d109      	bne.n	800a7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a7ae:	4b68      	ldr	r3, [pc, #416]	@ (800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	08db      	lsrs	r3, r3, #3
 800a7b4:	f003 0303 	and.w	r3, r3, #3
 800a7b8:	4a66      	ldr	r2, [pc, #408]	@ (800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a7ba:	fa22 f303 	lsr.w	r3, r2, r3
 800a7be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7c0:	e01e      	b.n	800a800 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a7c2:	4b63      	ldr	r3, [pc, #396]	@ (800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7ce:	d106      	bne.n	800a7de <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a7d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7d6:	d102      	bne.n	800a7de <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a7d8:	4b5f      	ldr	r3, [pc, #380]	@ (800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a7da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7dc:	e010      	b.n	800a800 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a7de:	4b5c      	ldr	r3, [pc, #368]	@ (800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7ea:	d106      	bne.n	800a7fa <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a7ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7f2:	d102      	bne.n	800a7fa <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a7f4:	4b59      	ldr	r3, [pc, #356]	@ (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a7f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7f8:	e002      	b.n	800a800 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a7fe:	e386      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a800:	e385      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a802:	4b57      	ldr	r3, [pc, #348]	@ (800a960 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a806:	e382      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a808:	2300      	movs	r3, #0
 800a80a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a80c:	e37f      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a80e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a812:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a816:	430b      	orrs	r3, r1
 800a818:	f040 80a7 	bne.w	800a96a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a81c:	4b4c      	ldr	r3, [pc, #304]	@ (800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a81e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a820:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a824:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a828:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a82c:	d055      	beq.n	800a8da <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a82e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a830:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a834:	f200 8096 	bhi.w	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a83a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a83e:	f000 8084 	beq.w	800a94a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a844:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a848:	f200 808c 	bhi.w	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a84c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a84e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a852:	d030      	beq.n	800a8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a856:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a85a:	f200 8083 	bhi.w	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a85e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a860:	2b00      	cmp	r3, #0
 800a862:	d004      	beq.n	800a86e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a866:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a86a:	d012      	beq.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a86c:	e07a      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a86e:	4b38      	ldr	r3, [pc, #224]	@ (800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a876:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a87a:	d107      	bne.n	800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a87c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a880:	4618      	mov	r0, r3
 800a882:	f000 fe0b 	bl	800b49c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a88a:	e340      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a88c:	2300      	movs	r3, #0
 800a88e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a890:	e33d      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a892:	4b2f      	ldr	r3, [pc, #188]	@ (800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a89a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a89e:	d107      	bne.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8a0:	f107 0318 	add.w	r3, r7, #24
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f000 fb51 	bl	800af4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a8aa:	69bb      	ldr	r3, [r7, #24]
 800a8ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8ae:	e32e      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8b4:	e32b      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a8b6:	4b26      	ldr	r3, [pc, #152]	@ (800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a8be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8c2:	d107      	bne.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8c4:	f107 030c 	add.w	r3, r7, #12
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f000 fc93 	bl	800b1f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8d2:	e31c      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8d8:	e319      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a8da:	4b1d      	ldr	r3, [pc, #116]	@ (800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a8dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a8e2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a8e4:	4b1a      	ldr	r3, [pc, #104]	@ (800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f003 0304 	and.w	r3, r3, #4
 800a8ec:	2b04      	cmp	r3, #4
 800a8ee:	d10c      	bne.n	800a90a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a8f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d109      	bne.n	800a90a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a8f6:	4b16      	ldr	r3, [pc, #88]	@ (800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	08db      	lsrs	r3, r3, #3
 800a8fc:	f003 0303 	and.w	r3, r3, #3
 800a900:	4a14      	ldr	r2, [pc, #80]	@ (800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a902:	fa22 f303 	lsr.w	r3, r2, r3
 800a906:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a908:	e01e      	b.n	800a948 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a90a:	4b11      	ldr	r3, [pc, #68]	@ (800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a912:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a916:	d106      	bne.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a91a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a91e:	d102      	bne.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a920:	4b0d      	ldr	r3, [pc, #52]	@ (800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a922:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a924:	e010      	b.n	800a948 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a926:	4b0a      	ldr	r3, [pc, #40]	@ (800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a92e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a932:	d106      	bne.n	800a942 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a936:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a93a:	d102      	bne.n	800a942 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a93c:	4b07      	ldr	r3, [pc, #28]	@ (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a93e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a940:	e002      	b.n	800a948 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a942:	2300      	movs	r3, #0
 800a944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a946:	e2e2      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a948:	e2e1      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a94a:	4b05      	ldr	r3, [pc, #20]	@ (800a960 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a94c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a94e:	e2de      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a950:	58024400 	.word	0x58024400
 800a954:	03d09000 	.word	0x03d09000
 800a958:	003d0900 	.word	0x003d0900
 800a95c:	017d7840 	.word	0x017d7840
 800a960:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a964:	2300      	movs	r3, #0
 800a966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a968:	e2d1      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a96a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a96e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a972:	430b      	orrs	r3, r1
 800a974:	f040 809c 	bne.w	800aab0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a978:	4b93      	ldr	r3, [pc, #588]	@ (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a97a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a97c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a980:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a984:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a988:	d054      	beq.n	800aa34 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a98a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a98c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a990:	f200 808b 	bhi.w	800aaaa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a996:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a99a:	f000 8083 	beq.w	800aaa4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a99e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a9a4:	f200 8081 	bhi.w	800aaaa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a9a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9ae:	d02f      	beq.n	800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a9b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9b6:	d878      	bhi.n	800aaaa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a9b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d004      	beq.n	800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a9be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9c4:	d012      	beq.n	800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a9c6:	e070      	b.n	800aaaa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a9c8:	4b7f      	ldr	r3, [pc, #508]	@ (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a9d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a9d4:	d107      	bne.n	800a9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a9d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f000 fd5e 	bl	800b49c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a9e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9e4:	e293      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9ea:	e290      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9ec:	4b76      	ldr	r3, [pc, #472]	@ (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a9f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a9f8:	d107      	bne.n	800aa0a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9fa:	f107 0318 	add.w	r3, r7, #24
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f000 faa4 	bl	800af4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa04:	69bb      	ldr	r3, [r7, #24]
 800aa06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa08:	e281      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa0e:	e27e      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa10:	4b6d      	ldr	r3, [pc, #436]	@ (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa1c:	d107      	bne.n	800aa2e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa1e:	f107 030c 	add.w	r3, r7, #12
 800aa22:	4618      	mov	r0, r3
 800aa24:	f000 fbe6 	bl	800b1f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa2c:	e26f      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa32:	e26c      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aa34:	4b64      	ldr	r3, [pc, #400]	@ (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa38:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aa3c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa3e:	4b62      	ldr	r3, [pc, #392]	@ (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f003 0304 	and.w	r3, r3, #4
 800aa46:	2b04      	cmp	r3, #4
 800aa48:	d10c      	bne.n	800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800aa4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d109      	bne.n	800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa50:	4b5d      	ldr	r3, [pc, #372]	@ (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	08db      	lsrs	r3, r3, #3
 800aa56:	f003 0303 	and.w	r3, r3, #3
 800aa5a:	4a5c      	ldr	r2, [pc, #368]	@ (800abcc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800aa5c:	fa22 f303 	lsr.w	r3, r2, r3
 800aa60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa62:	e01e      	b.n	800aaa2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa64:	4b58      	ldr	r3, [pc, #352]	@ (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa70:	d106      	bne.n	800aa80 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800aa72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa78:	d102      	bne.n	800aa80 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aa7a:	4b55      	ldr	r3, [pc, #340]	@ (800abd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800aa7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa7e:	e010      	b.n	800aaa2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa80:	4b51      	ldr	r3, [pc, #324]	@ (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa8c:	d106      	bne.n	800aa9c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800aa8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa94:	d102      	bne.n	800aa9c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aa96:	4b4f      	ldr	r3, [pc, #316]	@ (800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800aa98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa9a:	e002      	b.n	800aaa2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800aaa0:	e235      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aaa2:	e234      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aaa4:	4b4c      	ldr	r3, [pc, #304]	@ (800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800aaa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaa8:	e231      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaae:	e22e      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800aab0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aab4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800aab8:	430b      	orrs	r3, r1
 800aaba:	f040 808f 	bne.w	800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800aabe:	4b42      	ldr	r3, [pc, #264]	@ (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aac0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aac2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800aac6:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800aac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800aace:	d06b      	beq.n	800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800aad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aad2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800aad6:	d874      	bhi.n	800abc2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800aad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aada:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aade:	d056      	beq.n	800ab8e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800aae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aae2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aae6:	d86c      	bhi.n	800abc2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800aae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aaee:	d03b      	beq.n	800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800aaf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaf2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aaf6:	d864      	bhi.n	800abc2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800aaf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aafa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aafe:	d021      	beq.n	800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800ab00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab06:	d85c      	bhi.n	800abc2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ab08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d004      	beq.n	800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800ab0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab14:	d004      	beq.n	800ab20 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800ab16:	e054      	b.n	800abc2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800ab18:	f7fe fa4c 	bl	8008fb4 <HAL_RCC_GetPCLK1Freq>
 800ab1c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ab1e:	e1f6      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab20:	4b29      	ldr	r3, [pc, #164]	@ (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab2c:	d107      	bne.n	800ab3e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab2e:	f107 0318 	add.w	r3, r7, #24
 800ab32:	4618      	mov	r0, r3
 800ab34:	f000 fa0a 	bl	800af4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ab38:	69fb      	ldr	r3, [r7, #28]
 800ab3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab3c:	e1e7      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab42:	e1e4      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab44:	4b20      	ldr	r3, [pc, #128]	@ (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ab4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab50:	d107      	bne.n	800ab62 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab52:	f107 030c 	add.w	r3, r7, #12
 800ab56:	4618      	mov	r0, r3
 800ab58:	f000 fb4c 	bl	800b1f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab60:	e1d5      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab62:	2300      	movs	r3, #0
 800ab64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab66:	e1d2      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ab68:	4b17      	ldr	r3, [pc, #92]	@ (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f003 0304 	and.w	r3, r3, #4
 800ab70:	2b04      	cmp	r3, #4
 800ab72:	d109      	bne.n	800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab74:	4b14      	ldr	r3, [pc, #80]	@ (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	08db      	lsrs	r3, r3, #3
 800ab7a:	f003 0303 	and.w	r3, r3, #3
 800ab7e:	4a13      	ldr	r2, [pc, #76]	@ (800abcc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ab80:	fa22 f303 	lsr.w	r3, r2, r3
 800ab84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab86:	e1c2      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab8c:	e1bf      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ab8e:	4b0e      	ldr	r3, [pc, #56]	@ (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab9a:	d102      	bne.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800ab9c:	4b0c      	ldr	r3, [pc, #48]	@ (800abd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ab9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aba0:	e1b5      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aba2:	2300      	movs	r3, #0
 800aba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aba6:	e1b2      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aba8:	4b07      	ldr	r3, [pc, #28]	@ (800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800abb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800abb4:	d102      	bne.n	800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800abb6:	4b07      	ldr	r3, [pc, #28]	@ (800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800abb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abba:	e1a8      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abbc:	2300      	movs	r3, #0
 800abbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abc0:	e1a5      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800abc2:	2300      	movs	r3, #0
 800abc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abc6:	e1a2      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800abc8:	58024400 	.word	0x58024400
 800abcc:	03d09000 	.word	0x03d09000
 800abd0:	003d0900 	.word	0x003d0900
 800abd4:	017d7840 	.word	0x017d7840
 800abd8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800abdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abe0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800abe4:	430b      	orrs	r3, r1
 800abe6:	d173      	bne.n	800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800abe8:	4b9c      	ldr	r3, [pc, #624]	@ (800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800abf0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800abf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abf4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800abf8:	d02f      	beq.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800abfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac00:	d863      	bhi.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800ac02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d004      	beq.n	800ac12 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800ac08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac0e:	d012      	beq.n	800ac36 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800ac10:	e05b      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac12:	4b92      	ldr	r3, [pc, #584]	@ (800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac1e:	d107      	bne.n	800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac20:	f107 0318 	add.w	r3, r7, #24
 800ac24:	4618      	mov	r0, r3
 800ac26:	f000 f991 	bl	800af4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ac2a:	69bb      	ldr	r3, [r7, #24]
 800ac2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac2e:	e16e      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac30:	2300      	movs	r3, #0
 800ac32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac34:	e16b      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac36:	4b89      	ldr	r3, [pc, #548]	@ (800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ac3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac42:	d107      	bne.n	800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac44:	f107 030c 	add.w	r3, r7, #12
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f000 fad3 	bl	800b1f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac52:	e15c      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac54:	2300      	movs	r3, #0
 800ac56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac58:	e159      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ac5a:	4b80      	ldr	r3, [pc, #512]	@ (800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac5e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ac62:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac64:	4b7d      	ldr	r3, [pc, #500]	@ (800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f003 0304 	and.w	r3, r3, #4
 800ac6c:	2b04      	cmp	r3, #4
 800ac6e:	d10c      	bne.n	800ac8a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800ac70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d109      	bne.n	800ac8a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac76:	4b79      	ldr	r3, [pc, #484]	@ (800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	08db      	lsrs	r3, r3, #3
 800ac7c:	f003 0303 	and.w	r3, r3, #3
 800ac80:	4a77      	ldr	r2, [pc, #476]	@ (800ae60 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ac82:	fa22 f303 	lsr.w	r3, r2, r3
 800ac86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac88:	e01e      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ac8a:	4b74      	ldr	r3, [pc, #464]	@ (800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac96:	d106      	bne.n	800aca6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800ac98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac9e:	d102      	bne.n	800aca6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aca0:	4b70      	ldr	r3, [pc, #448]	@ (800ae64 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800aca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aca4:	e010      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aca6:	4b6d      	ldr	r3, [pc, #436]	@ (800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800acae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800acb2:	d106      	bne.n	800acc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800acb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800acba:	d102      	bne.n	800acc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800acbc:	4b6a      	ldr	r3, [pc, #424]	@ (800ae68 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800acbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800acc0:	e002      	b.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800acc2:	2300      	movs	r3, #0
 800acc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800acc6:	e122      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800acc8:	e121      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800acca:	2300      	movs	r3, #0
 800accc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acce:	e11e      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800acd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acd4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800acd8:	430b      	orrs	r3, r1
 800acda:	d133      	bne.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800acdc:	4b5f      	ldr	r3, [pc, #380]	@ (800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800acde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ace0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ace4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ace6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d004      	beq.n	800acf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800acec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800acf2:	d012      	beq.n	800ad1a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800acf4:	e023      	b.n	800ad3e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800acf6:	4b59      	ldr	r3, [pc, #356]	@ (800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800acfe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ad02:	d107      	bne.n	800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f000 fbc7 	bl	800b49c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad12:	e0fc      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad14:	2300      	movs	r3, #0
 800ad16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad18:	e0f9      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad1a:	4b50      	ldr	r3, [pc, #320]	@ (800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad26:	d107      	bne.n	800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad28:	f107 0318 	add.w	r3, r7, #24
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f000 f90d 	bl	800af4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ad32:	6a3b      	ldr	r3, [r7, #32]
 800ad34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad36:	e0ea      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad3c:	e0e7      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad42:	e0e4      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ad44:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad48:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800ad4c:	430b      	orrs	r3, r1
 800ad4e:	f040 808d 	bne.w	800ae6c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800ad52:	4b42      	ldr	r3, [pc, #264]	@ (800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad56:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800ad5a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ad5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ad62:	d06b      	beq.n	800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800ad64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ad6a:	d874      	bhi.n	800ae56 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ad6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad72:	d056      	beq.n	800ae22 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800ad74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad7a:	d86c      	bhi.n	800ae56 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ad7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad7e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ad82:	d03b      	beq.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800ad84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad86:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ad8a:	d864      	bhi.n	800ae56 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ad8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad92:	d021      	beq.n	800add8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800ad94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad9a:	d85c      	bhi.n	800ae56 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ad9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d004      	beq.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800ada2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ada4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ada8:	d004      	beq.n	800adb4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800adaa:	e054      	b.n	800ae56 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800adac:	f000 f8b8 	bl	800af20 <HAL_RCCEx_GetD3PCLK1Freq>
 800adb0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800adb2:	e0ac      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800adb4:	4b29      	ldr	r3, [pc, #164]	@ (800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800adbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800adc0:	d107      	bne.n	800add2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800adc2:	f107 0318 	add.w	r3, r7, #24
 800adc6:	4618      	mov	r0, r3
 800adc8:	f000 f8c0 	bl	800af4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800adcc:	69fb      	ldr	r3, [r7, #28]
 800adce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800add0:	e09d      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800add2:	2300      	movs	r3, #0
 800add4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800add6:	e09a      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800add8:	4b20      	ldr	r3, [pc, #128]	@ (800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ade0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ade4:	d107      	bne.n	800adf6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ade6:	f107 030c 	add.w	r3, r7, #12
 800adea:	4618      	mov	r0, r3
 800adec:	f000 fa02 	bl	800b1f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adf4:	e08b      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800adf6:	2300      	movs	r3, #0
 800adf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adfa:	e088      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800adfc:	4b17      	ldr	r3, [pc, #92]	@ (800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f003 0304 	and.w	r3, r3, #4
 800ae04:	2b04      	cmp	r3, #4
 800ae06:	d109      	bne.n	800ae1c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae08:	4b14      	ldr	r3, [pc, #80]	@ (800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	08db      	lsrs	r3, r3, #3
 800ae0e:	f003 0303 	and.w	r3, r3, #3
 800ae12:	4a13      	ldr	r2, [pc, #76]	@ (800ae60 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ae14:	fa22 f303 	lsr.w	r3, r2, r3
 800ae18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae1a:	e078      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae20:	e075      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ae22:	4b0e      	ldr	r3, [pc, #56]	@ (800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae2e:	d102      	bne.n	800ae36 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800ae30:	4b0c      	ldr	r3, [pc, #48]	@ (800ae64 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ae32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae34:	e06b      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae36:	2300      	movs	r3, #0
 800ae38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae3a:	e068      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ae3c:	4b07      	ldr	r3, [pc, #28]	@ (800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae48:	d102      	bne.n	800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800ae4a:	4b07      	ldr	r3, [pc, #28]	@ (800ae68 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ae4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae4e:	e05e      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae50:	2300      	movs	r3, #0
 800ae52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae54:	e05b      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ae56:	2300      	movs	r3, #0
 800ae58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae5a:	e058      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ae5c:	58024400 	.word	0x58024400
 800ae60:	03d09000 	.word	0x03d09000
 800ae64:	003d0900 	.word	0x003d0900
 800ae68:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ae6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae70:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800ae74:	430b      	orrs	r3, r1
 800ae76:	d148      	bne.n	800af0a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ae78:	4b27      	ldr	r3, [pc, #156]	@ (800af18 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ae7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae7c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ae80:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ae82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae88:	d02a      	beq.n	800aee0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800ae8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae90:	d838      	bhi.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800ae92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d004      	beq.n	800aea2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800ae98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae9e:	d00d      	beq.n	800aebc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800aea0:	e030      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aea2:	4b1d      	ldr	r3, [pc, #116]	@ (800af18 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aeaa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aeae:	d102      	bne.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800aeb0:	4b1a      	ldr	r3, [pc, #104]	@ (800af1c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800aeb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aeb4:	e02b      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aeba:	e028      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aebc:	4b16      	ldr	r3, [pc, #88]	@ (800af18 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aec4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aec8:	d107      	bne.n	800aeda <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aeca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aece:	4618      	mov	r0, r3
 800aed0:	f000 fae4 	bl	800b49c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aed8:	e019      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aeda:	2300      	movs	r3, #0
 800aedc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aede:	e016      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aee0:	4b0d      	ldr	r3, [pc, #52]	@ (800af18 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aee8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aeec:	d107      	bne.n	800aefe <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aeee:	f107 0318 	add.w	r3, r7, #24
 800aef2:	4618      	mov	r0, r3
 800aef4:	f000 f82a 	bl	800af4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aef8:	69fb      	ldr	r3, [r7, #28]
 800aefa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aefc:	e007      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aefe:	2300      	movs	r3, #0
 800af00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af02:	e004      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800af04:	2300      	movs	r3, #0
 800af06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af08:	e001      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800af0a:	2300      	movs	r3, #0
 800af0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800af0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800af10:	4618      	mov	r0, r3
 800af12:	3740      	adds	r7, #64	@ 0x40
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}
 800af18:	58024400 	.word	0x58024400
 800af1c:	017d7840 	.word	0x017d7840

0800af20 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800af24:	f7fe f816 	bl	8008f54 <HAL_RCC_GetHCLKFreq>
 800af28:	4602      	mov	r2, r0
 800af2a:	4b06      	ldr	r3, [pc, #24]	@ (800af44 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800af2c:	6a1b      	ldr	r3, [r3, #32]
 800af2e:	091b      	lsrs	r3, r3, #4
 800af30:	f003 0307 	and.w	r3, r3, #7
 800af34:	4904      	ldr	r1, [pc, #16]	@ (800af48 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800af36:	5ccb      	ldrb	r3, [r1, r3]
 800af38:	f003 031f 	and.w	r3, r3, #31
 800af3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800af40:	4618      	mov	r0, r3
 800af42:	bd80      	pop	{r7, pc}
 800af44:	58024400 	.word	0x58024400
 800af48:	08015000 	.word	0x08015000

0800af4c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b089      	sub	sp, #36	@ 0x24
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af54:	4ba1      	ldr	r3, [pc, #644]	@ (800b1dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af58:	f003 0303 	and.w	r3, r3, #3
 800af5c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800af5e:	4b9f      	ldr	r3, [pc, #636]	@ (800b1dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af62:	0b1b      	lsrs	r3, r3, #12
 800af64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800af68:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800af6a:	4b9c      	ldr	r3, [pc, #624]	@ (800b1dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af6e:	091b      	lsrs	r3, r3, #4
 800af70:	f003 0301 	and.w	r3, r3, #1
 800af74:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800af76:	4b99      	ldr	r3, [pc, #612]	@ (800b1dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af7a:	08db      	lsrs	r3, r3, #3
 800af7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af80:	693a      	ldr	r2, [r7, #16]
 800af82:	fb02 f303 	mul.w	r3, r2, r3
 800af86:	ee07 3a90 	vmov	s15, r3
 800af8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	2b00      	cmp	r3, #0
 800af96:	f000 8111 	beq.w	800b1bc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800af9a:	69bb      	ldr	r3, [r7, #24]
 800af9c:	2b02      	cmp	r3, #2
 800af9e:	f000 8083 	beq.w	800b0a8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800afa2:	69bb      	ldr	r3, [r7, #24]
 800afa4:	2b02      	cmp	r3, #2
 800afa6:	f200 80a1 	bhi.w	800b0ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800afaa:	69bb      	ldr	r3, [r7, #24]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d003      	beq.n	800afb8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800afb0:	69bb      	ldr	r3, [r7, #24]
 800afb2:	2b01      	cmp	r3, #1
 800afb4:	d056      	beq.n	800b064 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800afb6:	e099      	b.n	800b0ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800afb8:	4b88      	ldr	r3, [pc, #544]	@ (800b1dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f003 0320 	and.w	r3, r3, #32
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d02d      	beq.n	800b020 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800afc4:	4b85      	ldr	r3, [pc, #532]	@ (800b1dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	08db      	lsrs	r3, r3, #3
 800afca:	f003 0303 	and.w	r3, r3, #3
 800afce:	4a84      	ldr	r2, [pc, #528]	@ (800b1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800afd0:	fa22 f303 	lsr.w	r3, r2, r3
 800afd4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	ee07 3a90 	vmov	s15, r3
 800afdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	ee07 3a90 	vmov	s15, r3
 800afe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afee:	4b7b      	ldr	r3, [pc, #492]	@ (800b1dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aff6:	ee07 3a90 	vmov	s15, r3
 800affa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800affe:	ed97 6a03 	vldr	s12, [r7, #12]
 800b002:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b1e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b00a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b00e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b01a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b01e:	e087      	b.n	800b130 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	ee07 3a90 	vmov	s15, r3
 800b026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b02a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b1e8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b02e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b032:	4b6a      	ldr	r3, [pc, #424]	@ (800b1dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b03a:	ee07 3a90 	vmov	s15, r3
 800b03e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b042:	ed97 6a03 	vldr	s12, [r7, #12]
 800b046:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b1e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b04a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b04e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b052:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b05a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b05e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b062:	e065      	b.n	800b130 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	ee07 3a90 	vmov	s15, r3
 800b06a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b06e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b1ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b076:	4b59      	ldr	r3, [pc, #356]	@ (800b1dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b07a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b07e:	ee07 3a90 	vmov	s15, r3
 800b082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b086:	ed97 6a03 	vldr	s12, [r7, #12]
 800b08a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b1e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b08e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b096:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b09a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b09e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0a6:	e043      	b.n	800b130 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	ee07 3a90 	vmov	s15, r3
 800b0ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0b2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b1f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b0b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0ba:	4b48      	ldr	r3, [pc, #288]	@ (800b1dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0c2:	ee07 3a90 	vmov	s15, r3
 800b0c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0ce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b1e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b0d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b0de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0ea:	e021      	b.n	800b130 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	ee07 3a90 	vmov	s15, r3
 800b0f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0f6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b1ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b0fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0fe:	4b37      	ldr	r3, [pc, #220]	@ (800b1dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b106:	ee07 3a90 	vmov	s15, r3
 800b10a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b10e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b112:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b1e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b11a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b11e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b12a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b12e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b130:	4b2a      	ldr	r3, [pc, #168]	@ (800b1dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b134:	0a5b      	lsrs	r3, r3, #9
 800b136:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b13a:	ee07 3a90 	vmov	s15, r3
 800b13e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b142:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b146:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b14a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b14e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b152:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b156:	ee17 2a90 	vmov	r2, s15
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b15e:	4b1f      	ldr	r3, [pc, #124]	@ (800b1dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b162:	0c1b      	lsrs	r3, r3, #16
 800b164:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b168:	ee07 3a90 	vmov	s15, r3
 800b16c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b170:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b174:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b178:	edd7 6a07 	vldr	s13, [r7, #28]
 800b17c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b180:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b184:	ee17 2a90 	vmov	r2, s15
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b18c:	4b13      	ldr	r3, [pc, #76]	@ (800b1dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b18e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b190:	0e1b      	lsrs	r3, r3, #24
 800b192:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b196:	ee07 3a90 	vmov	s15, r3
 800b19a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b19e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b1a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1a6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1b2:	ee17 2a90 	vmov	r2, s15
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b1ba:	e008      	b.n	800b1ce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	609a      	str	r2, [r3, #8]
}
 800b1ce:	bf00      	nop
 800b1d0:	3724      	adds	r7, #36	@ 0x24
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d8:	4770      	bx	lr
 800b1da:	bf00      	nop
 800b1dc:	58024400 	.word	0x58024400
 800b1e0:	03d09000 	.word	0x03d09000
 800b1e4:	46000000 	.word	0x46000000
 800b1e8:	4c742400 	.word	0x4c742400
 800b1ec:	4a742400 	.word	0x4a742400
 800b1f0:	4bbebc20 	.word	0x4bbebc20

0800b1f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b089      	sub	sp, #36	@ 0x24
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b1fc:	4ba1      	ldr	r3, [pc, #644]	@ (800b484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b200:	f003 0303 	and.w	r3, r3, #3
 800b204:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b206:	4b9f      	ldr	r3, [pc, #636]	@ (800b484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b20a:	0d1b      	lsrs	r3, r3, #20
 800b20c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b210:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b212:	4b9c      	ldr	r3, [pc, #624]	@ (800b484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b216:	0a1b      	lsrs	r3, r3, #8
 800b218:	f003 0301 	and.w	r3, r3, #1
 800b21c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b21e:	4b99      	ldr	r3, [pc, #612]	@ (800b484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b222:	08db      	lsrs	r3, r3, #3
 800b224:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b228:	693a      	ldr	r2, [r7, #16]
 800b22a:	fb02 f303 	mul.w	r3, r2, r3
 800b22e:	ee07 3a90 	vmov	s15, r3
 800b232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b236:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	f000 8111 	beq.w	800b464 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b242:	69bb      	ldr	r3, [r7, #24]
 800b244:	2b02      	cmp	r3, #2
 800b246:	f000 8083 	beq.w	800b350 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b24a:	69bb      	ldr	r3, [r7, #24]
 800b24c:	2b02      	cmp	r3, #2
 800b24e:	f200 80a1 	bhi.w	800b394 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b252:	69bb      	ldr	r3, [r7, #24]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d003      	beq.n	800b260 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b258:	69bb      	ldr	r3, [r7, #24]
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	d056      	beq.n	800b30c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b25e:	e099      	b.n	800b394 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b260:	4b88      	ldr	r3, [pc, #544]	@ (800b484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f003 0320 	and.w	r3, r3, #32
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d02d      	beq.n	800b2c8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b26c:	4b85      	ldr	r3, [pc, #532]	@ (800b484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	08db      	lsrs	r3, r3, #3
 800b272:	f003 0303 	and.w	r3, r3, #3
 800b276:	4a84      	ldr	r2, [pc, #528]	@ (800b488 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b278:	fa22 f303 	lsr.w	r3, r2, r3
 800b27c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	ee07 3a90 	vmov	s15, r3
 800b284:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	ee07 3a90 	vmov	s15, r3
 800b28e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b296:	4b7b      	ldr	r3, [pc, #492]	@ (800b484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b29a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b29e:	ee07 3a90 	vmov	s15, r3
 800b2a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2aa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b48c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b2ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b2ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b2c6:	e087      	b.n	800b3d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	ee07 3a90 	vmov	s15, r3
 800b2ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2d2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b490 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b2d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2da:	4b6a      	ldr	r3, [pc, #424]	@ (800b484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2e2:	ee07 3a90 	vmov	s15, r3
 800b2e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2ee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b48c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b2f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b2fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b302:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b306:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b30a:	e065      	b.n	800b3d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	ee07 3a90 	vmov	s15, r3
 800b312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b316:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b494 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b31a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b31e:	4b59      	ldr	r3, [pc, #356]	@ (800b484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b326:	ee07 3a90 	vmov	s15, r3
 800b32a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b32e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b332:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b48c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b33a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b33e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b34a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b34e:	e043      	b.n	800b3d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	ee07 3a90 	vmov	s15, r3
 800b356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b35a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b498 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b35e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b362:	4b48      	ldr	r3, [pc, #288]	@ (800b484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b36a:	ee07 3a90 	vmov	s15, r3
 800b36e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b372:	ed97 6a03 	vldr	s12, [r7, #12]
 800b376:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b48c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b37a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b37e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b382:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b38a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b38e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b392:	e021      	b.n	800b3d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	ee07 3a90 	vmov	s15, r3
 800b39a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b39e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b494 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b3a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3a6:	4b37      	ldr	r3, [pc, #220]	@ (800b484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3ae:	ee07 3a90 	vmov	s15, r3
 800b3b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3ba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b48c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b3be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3d6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b3d8:	4b2a      	ldr	r3, [pc, #168]	@ (800b484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3dc:	0a5b      	lsrs	r3, r3, #9
 800b3de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b3e2:	ee07 3a90 	vmov	s15, r3
 800b3e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b3ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3f2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3fe:	ee17 2a90 	vmov	r2, s15
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b406:	4b1f      	ldr	r3, [pc, #124]	@ (800b484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b40a:	0c1b      	lsrs	r3, r3, #16
 800b40c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b410:	ee07 3a90 	vmov	s15, r3
 800b414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b418:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b41c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b420:	edd7 6a07 	vldr	s13, [r7, #28]
 800b424:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b428:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b42c:	ee17 2a90 	vmov	r2, s15
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b434:	4b13      	ldr	r3, [pc, #76]	@ (800b484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b438:	0e1b      	lsrs	r3, r3, #24
 800b43a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b43e:	ee07 3a90 	vmov	s15, r3
 800b442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b446:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b44a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b44e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b452:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b456:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b45a:	ee17 2a90 	vmov	r2, s15
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b462:	e008      	b.n	800b476 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2200      	movs	r2, #0
 800b468:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2200      	movs	r2, #0
 800b46e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	609a      	str	r2, [r3, #8]
}
 800b476:	bf00      	nop
 800b478:	3724      	adds	r7, #36	@ 0x24
 800b47a:	46bd      	mov	sp, r7
 800b47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b480:	4770      	bx	lr
 800b482:	bf00      	nop
 800b484:	58024400 	.word	0x58024400
 800b488:	03d09000 	.word	0x03d09000
 800b48c:	46000000 	.word	0x46000000
 800b490:	4c742400 	.word	0x4c742400
 800b494:	4a742400 	.word	0x4a742400
 800b498:	4bbebc20 	.word	0x4bbebc20

0800b49c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b089      	sub	sp, #36	@ 0x24
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b4a4:	4ba0      	ldr	r3, [pc, #640]	@ (800b728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4a8:	f003 0303 	and.w	r3, r3, #3
 800b4ac:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b4ae:	4b9e      	ldr	r3, [pc, #632]	@ (800b728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4b2:	091b      	lsrs	r3, r3, #4
 800b4b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b4b8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b4ba:	4b9b      	ldr	r3, [pc, #620]	@ (800b728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4be:	f003 0301 	and.w	r3, r3, #1
 800b4c2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b4c4:	4b98      	ldr	r3, [pc, #608]	@ (800b728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4c8:	08db      	lsrs	r3, r3, #3
 800b4ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b4ce:	693a      	ldr	r2, [r7, #16]
 800b4d0:	fb02 f303 	mul.w	r3, r2, r3
 800b4d4:	ee07 3a90 	vmov	s15, r3
 800b4d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4dc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	f000 8111 	beq.w	800b70a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b4e8:	69bb      	ldr	r3, [r7, #24]
 800b4ea:	2b02      	cmp	r3, #2
 800b4ec:	f000 8083 	beq.w	800b5f6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b4f0:	69bb      	ldr	r3, [r7, #24]
 800b4f2:	2b02      	cmp	r3, #2
 800b4f4:	f200 80a1 	bhi.w	800b63a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b4f8:	69bb      	ldr	r3, [r7, #24]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d003      	beq.n	800b506 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b4fe:	69bb      	ldr	r3, [r7, #24]
 800b500:	2b01      	cmp	r3, #1
 800b502:	d056      	beq.n	800b5b2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b504:	e099      	b.n	800b63a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b506:	4b88      	ldr	r3, [pc, #544]	@ (800b728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f003 0320 	and.w	r3, r3, #32
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d02d      	beq.n	800b56e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b512:	4b85      	ldr	r3, [pc, #532]	@ (800b728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	08db      	lsrs	r3, r3, #3
 800b518:	f003 0303 	and.w	r3, r3, #3
 800b51c:	4a83      	ldr	r2, [pc, #524]	@ (800b72c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b51e:	fa22 f303 	lsr.w	r3, r2, r3
 800b522:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	ee07 3a90 	vmov	s15, r3
 800b52a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	ee07 3a90 	vmov	s15, r3
 800b534:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b538:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b53c:	4b7a      	ldr	r3, [pc, #488]	@ (800b728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b53e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b544:	ee07 3a90 	vmov	s15, r3
 800b548:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b54c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b550:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b730 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b554:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b558:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b55c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b560:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b564:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b568:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b56c:	e087      	b.n	800b67e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	ee07 3a90 	vmov	s15, r3
 800b574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b578:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b734 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b57c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b580:	4b69      	ldr	r3, [pc, #420]	@ (800b728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b588:	ee07 3a90 	vmov	s15, r3
 800b58c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b590:	ed97 6a03 	vldr	s12, [r7, #12]
 800b594:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b730 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b598:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b59c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b5b0:	e065      	b.n	800b67e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	ee07 3a90 	vmov	s15, r3
 800b5b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5bc:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b738 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b5c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5c4:	4b58      	ldr	r3, [pc, #352]	@ (800b728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5cc:	ee07 3a90 	vmov	s15, r3
 800b5d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5d4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5d8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b730 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b5dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b5f4:	e043      	b.n	800b67e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	ee07 3a90 	vmov	s15, r3
 800b5fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b600:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b73c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b604:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b608:	4b47      	ldr	r3, [pc, #284]	@ (800b728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b60a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b60c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b610:	ee07 3a90 	vmov	s15, r3
 800b614:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b618:	ed97 6a03 	vldr	s12, [r7, #12]
 800b61c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b730 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b620:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b624:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b628:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b62c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b630:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b634:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b638:	e021      	b.n	800b67e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	ee07 3a90 	vmov	s15, r3
 800b640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b644:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b734 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b648:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b64c:	4b36      	ldr	r3, [pc, #216]	@ (800b728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b64e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b654:	ee07 3a90 	vmov	s15, r3
 800b658:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b65c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b660:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b730 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b664:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b668:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b66c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b670:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b674:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b678:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b67c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b67e:	4b2a      	ldr	r3, [pc, #168]	@ (800b728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b682:	0a5b      	lsrs	r3, r3, #9
 800b684:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b688:	ee07 3a90 	vmov	s15, r3
 800b68c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b690:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b694:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b698:	edd7 6a07 	vldr	s13, [r7, #28]
 800b69c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6a4:	ee17 2a90 	vmov	r2, s15
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b6ac:	4b1e      	ldr	r3, [pc, #120]	@ (800b728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6b0:	0c1b      	lsrs	r3, r3, #16
 800b6b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6b6:	ee07 3a90 	vmov	s15, r3
 800b6ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b6c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6d2:	ee17 2a90 	vmov	r2, s15
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b6da:	4b13      	ldr	r3, [pc, #76]	@ (800b728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6de:	0e1b      	lsrs	r3, r3, #24
 800b6e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6e4:	ee07 3a90 	vmov	s15, r3
 800b6e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b6f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6f4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b700:	ee17 2a90 	vmov	r2, s15
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b708:	e008      	b.n	800b71c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2200      	movs	r2, #0
 800b70e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2200      	movs	r2, #0
 800b714:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2200      	movs	r2, #0
 800b71a:	609a      	str	r2, [r3, #8]
}
 800b71c:	bf00      	nop
 800b71e:	3724      	adds	r7, #36	@ 0x24
 800b720:	46bd      	mov	sp, r7
 800b722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b726:	4770      	bx	lr
 800b728:	58024400 	.word	0x58024400
 800b72c:	03d09000 	.word	0x03d09000
 800b730:	46000000 	.word	0x46000000
 800b734:	4c742400 	.word	0x4c742400
 800b738:	4a742400 	.word	0x4a742400
 800b73c:	4bbebc20 	.word	0x4bbebc20

0800b740 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b084      	sub	sp, #16
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b74a:	2300      	movs	r3, #0
 800b74c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b74e:	4b53      	ldr	r3, [pc, #332]	@ (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b752:	f003 0303 	and.w	r3, r3, #3
 800b756:	2b03      	cmp	r3, #3
 800b758:	d101      	bne.n	800b75e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b75a:	2301      	movs	r3, #1
 800b75c:	e099      	b.n	800b892 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b75e:	4b4f      	ldr	r3, [pc, #316]	@ (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	4a4e      	ldr	r2, [pc, #312]	@ (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b764:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b768:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b76a:	f7f7 f961 	bl	8002a30 <HAL_GetTick>
 800b76e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b770:	e008      	b.n	800b784 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b772:	f7f7 f95d 	bl	8002a30 <HAL_GetTick>
 800b776:	4602      	mov	r2, r0
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	1ad3      	subs	r3, r2, r3
 800b77c:	2b02      	cmp	r3, #2
 800b77e:	d901      	bls.n	800b784 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b780:	2303      	movs	r3, #3
 800b782:	e086      	b.n	800b892 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b784:	4b45      	ldr	r3, [pc, #276]	@ (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d1f0      	bne.n	800b772 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b790:	4b42      	ldr	r3, [pc, #264]	@ (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b794:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	031b      	lsls	r3, r3, #12
 800b79e:	493f      	ldr	r1, [pc, #252]	@ (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b7a0:	4313      	orrs	r3, r2
 800b7a2:	628b      	str	r3, [r1, #40]	@ 0x28
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	685b      	ldr	r3, [r3, #4]
 800b7a8:	3b01      	subs	r3, #1
 800b7aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	689b      	ldr	r3, [r3, #8]
 800b7b2:	3b01      	subs	r3, #1
 800b7b4:	025b      	lsls	r3, r3, #9
 800b7b6:	b29b      	uxth	r3, r3
 800b7b8:	431a      	orrs	r2, r3
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	68db      	ldr	r3, [r3, #12]
 800b7be:	3b01      	subs	r3, #1
 800b7c0:	041b      	lsls	r3, r3, #16
 800b7c2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b7c6:	431a      	orrs	r2, r3
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	691b      	ldr	r3, [r3, #16]
 800b7cc:	3b01      	subs	r3, #1
 800b7ce:	061b      	lsls	r3, r3, #24
 800b7d0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b7d4:	4931      	ldr	r1, [pc, #196]	@ (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b7d6:	4313      	orrs	r3, r2
 800b7d8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b7da:	4b30      	ldr	r3, [pc, #192]	@ (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b7dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7de:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	695b      	ldr	r3, [r3, #20]
 800b7e6:	492d      	ldr	r1, [pc, #180]	@ (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b7e8:	4313      	orrs	r3, r2
 800b7ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b7ec:	4b2b      	ldr	r3, [pc, #172]	@ (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b7ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7f0:	f023 0220 	bic.w	r2, r3, #32
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	699b      	ldr	r3, [r3, #24]
 800b7f8:	4928      	ldr	r1, [pc, #160]	@ (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b7fa:	4313      	orrs	r3, r2
 800b7fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b7fe:	4b27      	ldr	r3, [pc, #156]	@ (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b802:	4a26      	ldr	r2, [pc, #152]	@ (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b804:	f023 0310 	bic.w	r3, r3, #16
 800b808:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b80a:	4b24      	ldr	r3, [pc, #144]	@ (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b80c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b80e:	4b24      	ldr	r3, [pc, #144]	@ (800b8a0 <RCCEx_PLL2_Config+0x160>)
 800b810:	4013      	ands	r3, r2
 800b812:	687a      	ldr	r2, [r7, #4]
 800b814:	69d2      	ldr	r2, [r2, #28]
 800b816:	00d2      	lsls	r2, r2, #3
 800b818:	4920      	ldr	r1, [pc, #128]	@ (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b81a:	4313      	orrs	r3, r2
 800b81c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b81e:	4b1f      	ldr	r3, [pc, #124]	@ (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b822:	4a1e      	ldr	r2, [pc, #120]	@ (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b824:	f043 0310 	orr.w	r3, r3, #16
 800b828:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d106      	bne.n	800b83e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b830:	4b1a      	ldr	r3, [pc, #104]	@ (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b834:	4a19      	ldr	r2, [pc, #100]	@ (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b836:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b83a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b83c:	e00f      	b.n	800b85e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	2b01      	cmp	r3, #1
 800b842:	d106      	bne.n	800b852 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b844:	4b15      	ldr	r3, [pc, #84]	@ (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b848:	4a14      	ldr	r2, [pc, #80]	@ (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b84a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b84e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b850:	e005      	b.n	800b85e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b852:	4b12      	ldr	r3, [pc, #72]	@ (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b856:	4a11      	ldr	r2, [pc, #68]	@ (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b858:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b85c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b85e:	4b0f      	ldr	r3, [pc, #60]	@ (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	4a0e      	ldr	r2, [pc, #56]	@ (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b864:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b868:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b86a:	f7f7 f8e1 	bl	8002a30 <HAL_GetTick>
 800b86e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b870:	e008      	b.n	800b884 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b872:	f7f7 f8dd 	bl	8002a30 <HAL_GetTick>
 800b876:	4602      	mov	r2, r0
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	1ad3      	subs	r3, r2, r3
 800b87c:	2b02      	cmp	r3, #2
 800b87e:	d901      	bls.n	800b884 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b880:	2303      	movs	r3, #3
 800b882:	e006      	b.n	800b892 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b884:	4b05      	ldr	r3, [pc, #20]	@ (800b89c <RCCEx_PLL2_Config+0x15c>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d0f0      	beq.n	800b872 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b890:	7bfb      	ldrb	r3, [r7, #15]
}
 800b892:	4618      	mov	r0, r3
 800b894:	3710      	adds	r7, #16
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}
 800b89a:	bf00      	nop
 800b89c:	58024400 	.word	0x58024400
 800b8a0:	ffff0007 	.word	0xffff0007

0800b8a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b084      	sub	sp, #16
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b8b2:	4b53      	ldr	r3, [pc, #332]	@ (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b8b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8b6:	f003 0303 	and.w	r3, r3, #3
 800b8ba:	2b03      	cmp	r3, #3
 800b8bc:	d101      	bne.n	800b8c2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b8be:	2301      	movs	r3, #1
 800b8c0:	e099      	b.n	800b9f6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b8c2:	4b4f      	ldr	r3, [pc, #316]	@ (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	4a4e      	ldr	r2, [pc, #312]	@ (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b8c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b8cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b8ce:	f7f7 f8af 	bl	8002a30 <HAL_GetTick>
 800b8d2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b8d4:	e008      	b.n	800b8e8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b8d6:	f7f7 f8ab 	bl	8002a30 <HAL_GetTick>
 800b8da:	4602      	mov	r2, r0
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	1ad3      	subs	r3, r2, r3
 800b8e0:	2b02      	cmp	r3, #2
 800b8e2:	d901      	bls.n	800b8e8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b8e4:	2303      	movs	r3, #3
 800b8e6:	e086      	b.n	800b9f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b8e8:	4b45      	ldr	r3, [pc, #276]	@ (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d1f0      	bne.n	800b8d6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b8f4:	4b42      	ldr	r3, [pc, #264]	@ (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b8f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8f8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	051b      	lsls	r3, r3, #20
 800b902:	493f      	ldr	r1, [pc, #252]	@ (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b904:	4313      	orrs	r3, r2
 800b906:	628b      	str	r3, [r1, #40]	@ 0x28
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	685b      	ldr	r3, [r3, #4]
 800b90c:	3b01      	subs	r3, #1
 800b90e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	689b      	ldr	r3, [r3, #8]
 800b916:	3b01      	subs	r3, #1
 800b918:	025b      	lsls	r3, r3, #9
 800b91a:	b29b      	uxth	r3, r3
 800b91c:	431a      	orrs	r2, r3
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	68db      	ldr	r3, [r3, #12]
 800b922:	3b01      	subs	r3, #1
 800b924:	041b      	lsls	r3, r3, #16
 800b926:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b92a:	431a      	orrs	r2, r3
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	691b      	ldr	r3, [r3, #16]
 800b930:	3b01      	subs	r3, #1
 800b932:	061b      	lsls	r3, r3, #24
 800b934:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b938:	4931      	ldr	r1, [pc, #196]	@ (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b93a:	4313      	orrs	r3, r2
 800b93c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b93e:	4b30      	ldr	r3, [pc, #192]	@ (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b942:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	695b      	ldr	r3, [r3, #20]
 800b94a:	492d      	ldr	r1, [pc, #180]	@ (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b94c:	4313      	orrs	r3, r2
 800b94e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b950:	4b2b      	ldr	r3, [pc, #172]	@ (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b954:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	699b      	ldr	r3, [r3, #24]
 800b95c:	4928      	ldr	r1, [pc, #160]	@ (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b95e:	4313      	orrs	r3, r2
 800b960:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b962:	4b27      	ldr	r3, [pc, #156]	@ (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b966:	4a26      	ldr	r2, [pc, #152]	@ (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b968:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b96c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b96e:	4b24      	ldr	r3, [pc, #144]	@ (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b970:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b972:	4b24      	ldr	r3, [pc, #144]	@ (800ba04 <RCCEx_PLL3_Config+0x160>)
 800b974:	4013      	ands	r3, r2
 800b976:	687a      	ldr	r2, [r7, #4]
 800b978:	69d2      	ldr	r2, [r2, #28]
 800b97a:	00d2      	lsls	r2, r2, #3
 800b97c:	4920      	ldr	r1, [pc, #128]	@ (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b97e:	4313      	orrs	r3, r2
 800b980:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b982:	4b1f      	ldr	r3, [pc, #124]	@ (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b986:	4a1e      	ldr	r2, [pc, #120]	@ (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b988:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b98c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d106      	bne.n	800b9a2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b994:	4b1a      	ldr	r3, [pc, #104]	@ (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b998:	4a19      	ldr	r2, [pc, #100]	@ (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b99a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b99e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b9a0:	e00f      	b.n	800b9c2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	d106      	bne.n	800b9b6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b9a8:	4b15      	ldr	r3, [pc, #84]	@ (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b9aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ac:	4a14      	ldr	r2, [pc, #80]	@ (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b9ae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b9b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b9b4:	e005      	b.n	800b9c2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b9b6:	4b12      	ldr	r3, [pc, #72]	@ (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b9b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ba:	4a11      	ldr	r2, [pc, #68]	@ (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b9bc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b9c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b9c2:	4b0f      	ldr	r3, [pc, #60]	@ (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	4a0e      	ldr	r2, [pc, #56]	@ (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b9c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b9cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b9ce:	f7f7 f82f 	bl	8002a30 <HAL_GetTick>
 800b9d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b9d4:	e008      	b.n	800b9e8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b9d6:	f7f7 f82b 	bl	8002a30 <HAL_GetTick>
 800b9da:	4602      	mov	r2, r0
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	1ad3      	subs	r3, r2, r3
 800b9e0:	2b02      	cmp	r3, #2
 800b9e2:	d901      	bls.n	800b9e8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b9e4:	2303      	movs	r3, #3
 800b9e6:	e006      	b.n	800b9f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b9e8:	4b05      	ldr	r3, [pc, #20]	@ (800ba00 <RCCEx_PLL3_Config+0x15c>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d0f0      	beq.n	800b9d6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b9f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3710      	adds	r7, #16
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	bf00      	nop
 800ba00:	58024400 	.word	0x58024400
 800ba04:	ffff0007 	.word	0xffff0007

0800ba08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b082      	sub	sp, #8
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d101      	bne.n	800ba1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ba16:	2301      	movs	r3, #1
 800ba18:	e049      	b.n	800baae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ba20:	b2db      	uxtb	r3, r3
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d106      	bne.n	800ba34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2200      	movs	r2, #0
 800ba2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f7f6 fce2 	bl	80023f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2202      	movs	r2, #2
 800ba38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681a      	ldr	r2, [r3, #0]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	3304      	adds	r3, #4
 800ba44:	4619      	mov	r1, r3
 800ba46:	4610      	mov	r0, r2
 800ba48:	f000 fea4 	bl	800c794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2201      	movs	r2, #1
 800ba50:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2201      	movs	r2, #1
 800ba58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2201      	movs	r2, #1
 800ba60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2201      	movs	r2, #1
 800ba68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2201      	movs	r2, #1
 800ba70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2201      	movs	r2, #1
 800ba78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2201      	movs	r2, #1
 800ba80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2201      	movs	r2, #1
 800ba88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2201      	movs	r2, #1
 800ba90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2201      	movs	r2, #1
 800ba98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2201      	movs	r2, #1
 800baa0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2201      	movs	r2, #1
 800baa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800baac:	2300      	movs	r3, #0
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3708      	adds	r7, #8
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}
	...

0800bab8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bab8:	b480      	push	{r7}
 800baba:	b085      	sub	sp, #20
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bac6:	b2db      	uxtb	r3, r3
 800bac8:	2b01      	cmp	r3, #1
 800baca:	d001      	beq.n	800bad0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bacc:	2301      	movs	r3, #1
 800bace:	e054      	b.n	800bb7a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2202      	movs	r2, #2
 800bad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	68da      	ldr	r2, [r3, #12]
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f042 0201 	orr.w	r2, r2, #1
 800bae6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	4a26      	ldr	r2, [pc, #152]	@ (800bb88 <HAL_TIM_Base_Start_IT+0xd0>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d022      	beq.n	800bb38 <HAL_TIM_Base_Start_IT+0x80>
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bafa:	d01d      	beq.n	800bb38 <HAL_TIM_Base_Start_IT+0x80>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	4a22      	ldr	r2, [pc, #136]	@ (800bb8c <HAL_TIM_Base_Start_IT+0xd4>)
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d018      	beq.n	800bb38 <HAL_TIM_Base_Start_IT+0x80>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	4a21      	ldr	r2, [pc, #132]	@ (800bb90 <HAL_TIM_Base_Start_IT+0xd8>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d013      	beq.n	800bb38 <HAL_TIM_Base_Start_IT+0x80>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	4a1f      	ldr	r2, [pc, #124]	@ (800bb94 <HAL_TIM_Base_Start_IT+0xdc>)
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d00e      	beq.n	800bb38 <HAL_TIM_Base_Start_IT+0x80>
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	4a1e      	ldr	r2, [pc, #120]	@ (800bb98 <HAL_TIM_Base_Start_IT+0xe0>)
 800bb20:	4293      	cmp	r3, r2
 800bb22:	d009      	beq.n	800bb38 <HAL_TIM_Base_Start_IT+0x80>
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	4a1c      	ldr	r2, [pc, #112]	@ (800bb9c <HAL_TIM_Base_Start_IT+0xe4>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d004      	beq.n	800bb38 <HAL_TIM_Base_Start_IT+0x80>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	4a1b      	ldr	r2, [pc, #108]	@ (800bba0 <HAL_TIM_Base_Start_IT+0xe8>)
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d115      	bne.n	800bb64 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	689a      	ldr	r2, [r3, #8]
 800bb3e:	4b19      	ldr	r3, [pc, #100]	@ (800bba4 <HAL_TIM_Base_Start_IT+0xec>)
 800bb40:	4013      	ands	r3, r2
 800bb42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2b06      	cmp	r3, #6
 800bb48:	d015      	beq.n	800bb76 <HAL_TIM_Base_Start_IT+0xbe>
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bb50:	d011      	beq.n	800bb76 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	681a      	ldr	r2, [r3, #0]
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f042 0201 	orr.w	r2, r2, #1
 800bb60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb62:	e008      	b.n	800bb76 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	681a      	ldr	r2, [r3, #0]
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f042 0201 	orr.w	r2, r2, #1
 800bb72:	601a      	str	r2, [r3, #0]
 800bb74:	e000      	b.n	800bb78 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bb78:	2300      	movs	r3, #0
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3714      	adds	r7, #20
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb84:	4770      	bx	lr
 800bb86:	bf00      	nop
 800bb88:	40010000 	.word	0x40010000
 800bb8c:	40000400 	.word	0x40000400
 800bb90:	40000800 	.word	0x40000800
 800bb94:	40000c00 	.word	0x40000c00
 800bb98:	40010400 	.word	0x40010400
 800bb9c:	40001800 	.word	0x40001800
 800bba0:	40014000 	.word	0x40014000
 800bba4:	00010007 	.word	0x00010007

0800bba8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b082      	sub	sp, #8
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d101      	bne.n	800bbba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	e049      	b.n	800bc4e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bbc0:	b2db      	uxtb	r3, r3
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d106      	bne.n	800bbd4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2200      	movs	r2, #0
 800bbca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f7f6 fae6 	bl	80021a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2202      	movs	r2, #2
 800bbd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681a      	ldr	r2, [r3, #0]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	3304      	adds	r3, #4
 800bbe4:	4619      	mov	r1, r3
 800bbe6:	4610      	mov	r0, r2
 800bbe8:	f000 fdd4 	bl	800c794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2201      	movs	r2, #1
 800bbf0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2201      	movs	r2, #1
 800bc00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2201      	movs	r2, #1
 800bc08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2201      	movs	r2, #1
 800bc10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2201      	movs	r2, #1
 800bc18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2201      	movs	r2, #1
 800bc20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2201      	movs	r2, #1
 800bc28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2201      	movs	r2, #1
 800bc30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2201      	movs	r2, #1
 800bc38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2201      	movs	r2, #1
 800bc40:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2201      	movs	r2, #1
 800bc48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bc4c:	2300      	movs	r3, #0
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3708      	adds	r7, #8
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
	...

0800bc58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b084      	sub	sp, #16
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d109      	bne.n	800bc7c <HAL_TIM_PWM_Start+0x24>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bc6e:	b2db      	uxtb	r3, r3
 800bc70:	2b01      	cmp	r3, #1
 800bc72:	bf14      	ite	ne
 800bc74:	2301      	movne	r3, #1
 800bc76:	2300      	moveq	r3, #0
 800bc78:	b2db      	uxtb	r3, r3
 800bc7a:	e03c      	b.n	800bcf6 <HAL_TIM_PWM_Start+0x9e>
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	2b04      	cmp	r3, #4
 800bc80:	d109      	bne.n	800bc96 <HAL_TIM_PWM_Start+0x3e>
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800bc88:	b2db      	uxtb	r3, r3
 800bc8a:	2b01      	cmp	r3, #1
 800bc8c:	bf14      	ite	ne
 800bc8e:	2301      	movne	r3, #1
 800bc90:	2300      	moveq	r3, #0
 800bc92:	b2db      	uxtb	r3, r3
 800bc94:	e02f      	b.n	800bcf6 <HAL_TIM_PWM_Start+0x9e>
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	2b08      	cmp	r3, #8
 800bc9a:	d109      	bne.n	800bcb0 <HAL_TIM_PWM_Start+0x58>
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bca2:	b2db      	uxtb	r3, r3
 800bca4:	2b01      	cmp	r3, #1
 800bca6:	bf14      	ite	ne
 800bca8:	2301      	movne	r3, #1
 800bcaa:	2300      	moveq	r3, #0
 800bcac:	b2db      	uxtb	r3, r3
 800bcae:	e022      	b.n	800bcf6 <HAL_TIM_PWM_Start+0x9e>
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	2b0c      	cmp	r3, #12
 800bcb4:	d109      	bne.n	800bcca <HAL_TIM_PWM_Start+0x72>
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bcbc:	b2db      	uxtb	r3, r3
 800bcbe:	2b01      	cmp	r3, #1
 800bcc0:	bf14      	ite	ne
 800bcc2:	2301      	movne	r3, #1
 800bcc4:	2300      	moveq	r3, #0
 800bcc6:	b2db      	uxtb	r3, r3
 800bcc8:	e015      	b.n	800bcf6 <HAL_TIM_PWM_Start+0x9e>
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	2b10      	cmp	r3, #16
 800bcce:	d109      	bne.n	800bce4 <HAL_TIM_PWM_Start+0x8c>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bcd6:	b2db      	uxtb	r3, r3
 800bcd8:	2b01      	cmp	r3, #1
 800bcda:	bf14      	ite	ne
 800bcdc:	2301      	movne	r3, #1
 800bcde:	2300      	moveq	r3, #0
 800bce0:	b2db      	uxtb	r3, r3
 800bce2:	e008      	b.n	800bcf6 <HAL_TIM_PWM_Start+0x9e>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800bcea:	b2db      	uxtb	r3, r3
 800bcec:	2b01      	cmp	r3, #1
 800bcee:	bf14      	ite	ne
 800bcf0:	2301      	movne	r3, #1
 800bcf2:	2300      	moveq	r3, #0
 800bcf4:	b2db      	uxtb	r3, r3
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d001      	beq.n	800bcfe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	e0a1      	b.n	800be42 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d104      	bne.n	800bd0e <HAL_TIM_PWM_Start+0xb6>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2202      	movs	r2, #2
 800bd08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bd0c:	e023      	b.n	800bd56 <HAL_TIM_PWM_Start+0xfe>
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	2b04      	cmp	r3, #4
 800bd12:	d104      	bne.n	800bd1e <HAL_TIM_PWM_Start+0xc6>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2202      	movs	r2, #2
 800bd18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bd1c:	e01b      	b.n	800bd56 <HAL_TIM_PWM_Start+0xfe>
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	2b08      	cmp	r3, #8
 800bd22:	d104      	bne.n	800bd2e <HAL_TIM_PWM_Start+0xd6>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2202      	movs	r2, #2
 800bd28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bd2c:	e013      	b.n	800bd56 <HAL_TIM_PWM_Start+0xfe>
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	2b0c      	cmp	r3, #12
 800bd32:	d104      	bne.n	800bd3e <HAL_TIM_PWM_Start+0xe6>
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2202      	movs	r2, #2
 800bd38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bd3c:	e00b      	b.n	800bd56 <HAL_TIM_PWM_Start+0xfe>
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	2b10      	cmp	r3, #16
 800bd42:	d104      	bne.n	800bd4e <HAL_TIM_PWM_Start+0xf6>
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2202      	movs	r2, #2
 800bd48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bd4c:	e003      	b.n	800bd56 <HAL_TIM_PWM_Start+0xfe>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2202      	movs	r2, #2
 800bd52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	6839      	ldr	r1, [r7, #0]
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f001 f932 	bl	800cfc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	4a38      	ldr	r2, [pc, #224]	@ (800be4c <HAL_TIM_PWM_Start+0x1f4>)
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	d013      	beq.n	800bd96 <HAL_TIM_PWM_Start+0x13e>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	4a37      	ldr	r2, [pc, #220]	@ (800be50 <HAL_TIM_PWM_Start+0x1f8>)
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d00e      	beq.n	800bd96 <HAL_TIM_PWM_Start+0x13e>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	4a35      	ldr	r2, [pc, #212]	@ (800be54 <HAL_TIM_PWM_Start+0x1fc>)
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	d009      	beq.n	800bd96 <HAL_TIM_PWM_Start+0x13e>
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	4a34      	ldr	r2, [pc, #208]	@ (800be58 <HAL_TIM_PWM_Start+0x200>)
 800bd88:	4293      	cmp	r3, r2
 800bd8a:	d004      	beq.n	800bd96 <HAL_TIM_PWM_Start+0x13e>
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	4a32      	ldr	r2, [pc, #200]	@ (800be5c <HAL_TIM_PWM_Start+0x204>)
 800bd92:	4293      	cmp	r3, r2
 800bd94:	d101      	bne.n	800bd9a <HAL_TIM_PWM_Start+0x142>
 800bd96:	2301      	movs	r3, #1
 800bd98:	e000      	b.n	800bd9c <HAL_TIM_PWM_Start+0x144>
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d007      	beq.n	800bdb0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bdae:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	4a25      	ldr	r2, [pc, #148]	@ (800be4c <HAL_TIM_PWM_Start+0x1f4>)
 800bdb6:	4293      	cmp	r3, r2
 800bdb8:	d022      	beq.n	800be00 <HAL_TIM_PWM_Start+0x1a8>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bdc2:	d01d      	beq.n	800be00 <HAL_TIM_PWM_Start+0x1a8>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	4a25      	ldr	r2, [pc, #148]	@ (800be60 <HAL_TIM_PWM_Start+0x208>)
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	d018      	beq.n	800be00 <HAL_TIM_PWM_Start+0x1a8>
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	4a24      	ldr	r2, [pc, #144]	@ (800be64 <HAL_TIM_PWM_Start+0x20c>)
 800bdd4:	4293      	cmp	r3, r2
 800bdd6:	d013      	beq.n	800be00 <HAL_TIM_PWM_Start+0x1a8>
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4a22      	ldr	r2, [pc, #136]	@ (800be68 <HAL_TIM_PWM_Start+0x210>)
 800bdde:	4293      	cmp	r3, r2
 800bde0:	d00e      	beq.n	800be00 <HAL_TIM_PWM_Start+0x1a8>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	4a1a      	ldr	r2, [pc, #104]	@ (800be50 <HAL_TIM_PWM_Start+0x1f8>)
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d009      	beq.n	800be00 <HAL_TIM_PWM_Start+0x1a8>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	4a1e      	ldr	r2, [pc, #120]	@ (800be6c <HAL_TIM_PWM_Start+0x214>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	d004      	beq.n	800be00 <HAL_TIM_PWM_Start+0x1a8>
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	4a16      	ldr	r2, [pc, #88]	@ (800be54 <HAL_TIM_PWM_Start+0x1fc>)
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d115      	bne.n	800be2c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	689a      	ldr	r2, [r3, #8]
 800be06:	4b1a      	ldr	r3, [pc, #104]	@ (800be70 <HAL_TIM_PWM_Start+0x218>)
 800be08:	4013      	ands	r3, r2
 800be0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	2b06      	cmp	r3, #6
 800be10:	d015      	beq.n	800be3e <HAL_TIM_PWM_Start+0x1e6>
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be18:	d011      	beq.n	800be3e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	681a      	ldr	r2, [r3, #0]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f042 0201 	orr.w	r2, r2, #1
 800be28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be2a:	e008      	b.n	800be3e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	681a      	ldr	r2, [r3, #0]
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f042 0201 	orr.w	r2, r2, #1
 800be3a:	601a      	str	r2, [r3, #0]
 800be3c:	e000      	b.n	800be40 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800be40:	2300      	movs	r3, #0
}
 800be42:	4618      	mov	r0, r3
 800be44:	3710      	adds	r7, #16
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}
 800be4a:	bf00      	nop
 800be4c:	40010000 	.word	0x40010000
 800be50:	40010400 	.word	0x40010400
 800be54:	40014000 	.word	0x40014000
 800be58:	40014400 	.word	0x40014400
 800be5c:	40014800 	.word	0x40014800
 800be60:	40000400 	.word	0x40000400
 800be64:	40000800 	.word	0x40000800
 800be68:	40000c00 	.word	0x40000c00
 800be6c:	40001800 	.word	0x40001800
 800be70:	00010007 	.word	0x00010007

0800be74 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b086      	sub	sp, #24
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
 800be7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d101      	bne.n	800be88 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800be84:	2301      	movs	r3, #1
 800be86:	e08f      	b.n	800bfa8 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800be8e:	b2db      	uxtb	r3, r3
 800be90:	2b00      	cmp	r3, #0
 800be92:	d106      	bne.n	800bea2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2200      	movs	r2, #0
 800be98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f7f6 f883 	bl	8001fa8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2202      	movs	r2, #2
 800bea6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	6899      	ldr	r1, [r3, #8]
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681a      	ldr	r2, [r3, #0]
 800beb4:	4b3e      	ldr	r3, [pc, #248]	@ (800bfb0 <HAL_TIM_Encoder_Init+0x13c>)
 800beb6:	400b      	ands	r3, r1
 800beb8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681a      	ldr	r2, [r3, #0]
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	3304      	adds	r3, #4
 800bec2:	4619      	mov	r1, r3
 800bec4:	4610      	mov	r0, r2
 800bec6:	f000 fc65 	bl	800c794 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	689b      	ldr	r3, [r3, #8]
 800bed0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	699b      	ldr	r3, [r3, #24]
 800bed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	6a1b      	ldr	r3, [r3, #32]
 800bee0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	697a      	ldr	r2, [r7, #20]
 800bee8:	4313      	orrs	r3, r2
 800beea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800beec:	693a      	ldr	r2, [r7, #16]
 800beee:	4b31      	ldr	r3, [pc, #196]	@ (800bfb4 <HAL_TIM_Encoder_Init+0x140>)
 800bef0:	4013      	ands	r3, r2
 800bef2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	689a      	ldr	r2, [r3, #8]
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	699b      	ldr	r3, [r3, #24]
 800befc:	021b      	lsls	r3, r3, #8
 800befe:	4313      	orrs	r3, r2
 800bf00:	693a      	ldr	r2, [r7, #16]
 800bf02:	4313      	orrs	r3, r2
 800bf04:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800bf06:	693a      	ldr	r2, [r7, #16]
 800bf08:	4b2b      	ldr	r3, [pc, #172]	@ (800bfb8 <HAL_TIM_Encoder_Init+0x144>)
 800bf0a:	4013      	ands	r3, r2
 800bf0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800bf0e:	693a      	ldr	r2, [r7, #16]
 800bf10:	4b2a      	ldr	r3, [pc, #168]	@ (800bfbc <HAL_TIM_Encoder_Init+0x148>)
 800bf12:	4013      	ands	r3, r2
 800bf14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	68da      	ldr	r2, [r3, #12]
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	69db      	ldr	r3, [r3, #28]
 800bf1e:	021b      	lsls	r3, r3, #8
 800bf20:	4313      	orrs	r3, r2
 800bf22:	693a      	ldr	r2, [r7, #16]
 800bf24:	4313      	orrs	r3, r2
 800bf26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	691b      	ldr	r3, [r3, #16]
 800bf2c:	011a      	lsls	r2, r3, #4
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	6a1b      	ldr	r3, [r3, #32]
 800bf32:	031b      	lsls	r3, r3, #12
 800bf34:	4313      	orrs	r3, r2
 800bf36:	693a      	ldr	r2, [r7, #16]
 800bf38:	4313      	orrs	r3, r2
 800bf3a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800bf42:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800bf4a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	685a      	ldr	r2, [r3, #4]
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	695b      	ldr	r3, [r3, #20]
 800bf54:	011b      	lsls	r3, r3, #4
 800bf56:	4313      	orrs	r3, r2
 800bf58:	68fa      	ldr	r2, [r7, #12]
 800bf5a:	4313      	orrs	r3, r2
 800bf5c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	697a      	ldr	r2, [r7, #20]
 800bf64:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	693a      	ldr	r2, [r7, #16]
 800bf6c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	68fa      	ldr	r2, [r7, #12]
 800bf74:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2201      	movs	r2, #1
 800bf7a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2201      	movs	r2, #1
 800bf82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2201      	movs	r2, #1
 800bf8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2201      	movs	r2, #1
 800bf92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2201      	movs	r2, #1
 800bf9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2201      	movs	r2, #1
 800bfa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bfa6:	2300      	movs	r3, #0
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	3718      	adds	r7, #24
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}
 800bfb0:	fffebff8 	.word	0xfffebff8
 800bfb4:	fffffcfc 	.word	0xfffffcfc
 800bfb8:	fffff3f3 	.word	0xfffff3f3
 800bfbc:	ffff0f0f 	.word	0xffff0f0f

0800bfc0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b084      	sub	sp, #16
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
 800bfc8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bfd0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800bfd8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bfe0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bfe8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d110      	bne.n	800c012 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bff0:	7bfb      	ldrb	r3, [r7, #15]
 800bff2:	2b01      	cmp	r3, #1
 800bff4:	d102      	bne.n	800bffc <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800bff6:	7b7b      	ldrb	r3, [r7, #13]
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	d001      	beq.n	800c000 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800bffc:	2301      	movs	r3, #1
 800bffe:	e089      	b.n	800c114 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2202      	movs	r2, #2
 800c004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2202      	movs	r2, #2
 800c00c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c010:	e031      	b.n	800c076 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	2b04      	cmp	r3, #4
 800c016:	d110      	bne.n	800c03a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c018:	7bbb      	ldrb	r3, [r7, #14]
 800c01a:	2b01      	cmp	r3, #1
 800c01c:	d102      	bne.n	800c024 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c01e:	7b3b      	ldrb	r3, [r7, #12]
 800c020:	2b01      	cmp	r3, #1
 800c022:	d001      	beq.n	800c028 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800c024:	2301      	movs	r3, #1
 800c026:	e075      	b.n	800c114 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2202      	movs	r2, #2
 800c02c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2202      	movs	r2, #2
 800c034:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c038:	e01d      	b.n	800c076 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c03a:	7bfb      	ldrb	r3, [r7, #15]
 800c03c:	2b01      	cmp	r3, #1
 800c03e:	d108      	bne.n	800c052 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c040:	7bbb      	ldrb	r3, [r7, #14]
 800c042:	2b01      	cmp	r3, #1
 800c044:	d105      	bne.n	800c052 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c046:	7b7b      	ldrb	r3, [r7, #13]
 800c048:	2b01      	cmp	r3, #1
 800c04a:	d102      	bne.n	800c052 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c04c:	7b3b      	ldrb	r3, [r7, #12]
 800c04e:	2b01      	cmp	r3, #1
 800c050:	d001      	beq.n	800c056 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800c052:	2301      	movs	r3, #1
 800c054:	e05e      	b.n	800c114 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2202      	movs	r2, #2
 800c05a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2202      	movs	r2, #2
 800c062:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2202      	movs	r2, #2
 800c06a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2202      	movs	r2, #2
 800c072:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d003      	beq.n	800c084 <HAL_TIM_Encoder_Start_IT+0xc4>
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	2b04      	cmp	r3, #4
 800c080:	d010      	beq.n	800c0a4 <HAL_TIM_Encoder_Start_IT+0xe4>
 800c082:	e01f      	b.n	800c0c4 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	2201      	movs	r2, #1
 800c08a:	2100      	movs	r1, #0
 800c08c:	4618      	mov	r0, r3
 800c08e:	f000 ff9b 	bl	800cfc8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	68da      	ldr	r2, [r3, #12]
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	f042 0202 	orr.w	r2, r2, #2
 800c0a0:	60da      	str	r2, [r3, #12]
      break;
 800c0a2:	e02e      	b.n	800c102 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	2201      	movs	r2, #1
 800c0aa:	2104      	movs	r1, #4
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f000 ff8b 	bl	800cfc8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	68da      	ldr	r2, [r3, #12]
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	f042 0204 	orr.w	r2, r2, #4
 800c0c0:	60da      	str	r2, [r3, #12]
      break;
 800c0c2:	e01e      	b.n	800c102 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	2201      	movs	r2, #1
 800c0ca:	2100      	movs	r1, #0
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f000 ff7b 	bl	800cfc8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	2104      	movs	r1, #4
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f000 ff74 	bl	800cfc8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	68da      	ldr	r2, [r3, #12]
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f042 0202 	orr.w	r2, r2, #2
 800c0ee:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	68da      	ldr	r2, [r3, #12]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f042 0204 	orr.w	r2, r2, #4
 800c0fe:	60da      	str	r2, [r3, #12]
      break;
 800c100:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	681a      	ldr	r2, [r3, #0]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f042 0201 	orr.w	r2, r2, #1
 800c110:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c112:	2300      	movs	r3, #0
}
 800c114:	4618      	mov	r0, r3
 800c116:	3710      	adds	r7, #16
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b084      	sub	sp, #16
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	68db      	ldr	r3, [r3, #12]
 800c12a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	691b      	ldr	r3, [r3, #16]
 800c132:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	f003 0302 	and.w	r3, r3, #2
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d020      	beq.n	800c180 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	f003 0302 	and.w	r3, r3, #2
 800c144:	2b00      	cmp	r3, #0
 800c146:	d01b      	beq.n	800c180 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f06f 0202 	mvn.w	r2, #2
 800c150:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2201      	movs	r2, #1
 800c156:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	699b      	ldr	r3, [r3, #24]
 800c15e:	f003 0303 	and.w	r3, r3, #3
 800c162:	2b00      	cmp	r3, #0
 800c164:	d003      	beq.n	800c16e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f7f4 fea8 	bl	8000ebc <HAL_TIM_IC_CaptureCallback>
 800c16c:	e005      	b.n	800c17a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f000 faf2 	bl	800c758 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f000 faf9 	bl	800c76c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2200      	movs	r2, #0
 800c17e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	f003 0304 	and.w	r3, r3, #4
 800c186:	2b00      	cmp	r3, #0
 800c188:	d020      	beq.n	800c1cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	f003 0304 	and.w	r3, r3, #4
 800c190:	2b00      	cmp	r3, #0
 800c192:	d01b      	beq.n	800c1cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f06f 0204 	mvn.w	r2, #4
 800c19c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2202      	movs	r2, #2
 800c1a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	699b      	ldr	r3, [r3, #24]
 800c1aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d003      	beq.n	800c1ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f7f4 fe82 	bl	8000ebc <HAL_TIM_IC_CaptureCallback>
 800c1b8:	e005      	b.n	800c1c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f000 facc 	bl	800c758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f000 fad3 	bl	800c76c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	f003 0308 	and.w	r3, r3, #8
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d020      	beq.n	800c218 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	f003 0308 	and.w	r3, r3, #8
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d01b      	beq.n	800c218 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f06f 0208 	mvn.w	r2, #8
 800c1e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2204      	movs	r2, #4
 800c1ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	69db      	ldr	r3, [r3, #28]
 800c1f6:	f003 0303 	and.w	r3, r3, #3
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d003      	beq.n	800c206 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f7f4 fe5c 	bl	8000ebc <HAL_TIM_IC_CaptureCallback>
 800c204:	e005      	b.n	800c212 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f000 faa6 	bl	800c758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f000 faad 	bl	800c76c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2200      	movs	r2, #0
 800c216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	f003 0310 	and.w	r3, r3, #16
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d020      	beq.n	800c264 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	f003 0310 	and.w	r3, r3, #16
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d01b      	beq.n	800c264 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f06f 0210 	mvn.w	r2, #16
 800c234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2208      	movs	r2, #8
 800c23a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	69db      	ldr	r3, [r3, #28]
 800c242:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c246:	2b00      	cmp	r3, #0
 800c248:	d003      	beq.n	800c252 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f7f4 fe36 	bl	8000ebc <HAL_TIM_IC_CaptureCallback>
 800c250:	e005      	b.n	800c25e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f000 fa80 	bl	800c758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f000 fa87 	bl	800c76c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2200      	movs	r2, #0
 800c262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	f003 0301 	and.w	r3, r3, #1
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d00c      	beq.n	800c288 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	f003 0301 	and.w	r3, r3, #1
 800c274:	2b00      	cmp	r3, #0
 800c276:	d007      	beq.n	800c288 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	f06f 0201 	mvn.w	r2, #1
 800c280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f000 fa5e 	bl	800c744 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d104      	bne.n	800c29c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d00c      	beq.n	800c2b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d007      	beq.n	800c2b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c2ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f000 ff47 	bl	800d144 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d00c      	beq.n	800c2da <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d007      	beq.n	800c2da <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c2d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f000 ff3f 	bl	800d158 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d00c      	beq.n	800c2fe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d007      	beq.n	800c2fe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c2f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f000 fa41 	bl	800c780 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	f003 0320 	and.w	r3, r3, #32
 800c304:	2b00      	cmp	r3, #0
 800c306:	d00c      	beq.n	800c322 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	f003 0320 	and.w	r3, r3, #32
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d007      	beq.n	800c322 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f06f 0220 	mvn.w	r2, #32
 800c31a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f000 ff07 	bl	800d130 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c322:	bf00      	nop
 800c324:	3710      	adds	r7, #16
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
	...

0800c32c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b086      	sub	sp, #24
 800c330:	af00      	add	r7, sp, #0
 800c332:	60f8      	str	r0, [r7, #12]
 800c334:	60b9      	str	r1, [r7, #8]
 800c336:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c338:	2300      	movs	r3, #0
 800c33a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c342:	2b01      	cmp	r3, #1
 800c344:	d101      	bne.n	800c34a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c346:	2302      	movs	r3, #2
 800c348:	e0ff      	b.n	800c54a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	2201      	movs	r2, #1
 800c34e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2b14      	cmp	r3, #20
 800c356:	f200 80f0 	bhi.w	800c53a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c35a:	a201      	add	r2, pc, #4	@ (adr r2, 800c360 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c360:	0800c3b5 	.word	0x0800c3b5
 800c364:	0800c53b 	.word	0x0800c53b
 800c368:	0800c53b 	.word	0x0800c53b
 800c36c:	0800c53b 	.word	0x0800c53b
 800c370:	0800c3f5 	.word	0x0800c3f5
 800c374:	0800c53b 	.word	0x0800c53b
 800c378:	0800c53b 	.word	0x0800c53b
 800c37c:	0800c53b 	.word	0x0800c53b
 800c380:	0800c437 	.word	0x0800c437
 800c384:	0800c53b 	.word	0x0800c53b
 800c388:	0800c53b 	.word	0x0800c53b
 800c38c:	0800c53b 	.word	0x0800c53b
 800c390:	0800c477 	.word	0x0800c477
 800c394:	0800c53b 	.word	0x0800c53b
 800c398:	0800c53b 	.word	0x0800c53b
 800c39c:	0800c53b 	.word	0x0800c53b
 800c3a0:	0800c4b9 	.word	0x0800c4b9
 800c3a4:	0800c53b 	.word	0x0800c53b
 800c3a8:	0800c53b 	.word	0x0800c53b
 800c3ac:	0800c53b 	.word	0x0800c53b
 800c3b0:	0800c4f9 	.word	0x0800c4f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	68b9      	ldr	r1, [r7, #8]
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f000 fa90 	bl	800c8e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	699a      	ldr	r2, [r3, #24]
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f042 0208 	orr.w	r2, r2, #8
 800c3ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	699a      	ldr	r2, [r3, #24]
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	f022 0204 	bic.w	r2, r2, #4
 800c3de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	6999      	ldr	r1, [r3, #24]
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	691a      	ldr	r2, [r3, #16]
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	430a      	orrs	r2, r1
 800c3f0:	619a      	str	r2, [r3, #24]
      break;
 800c3f2:	e0a5      	b.n	800c540 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	68b9      	ldr	r1, [r7, #8]
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f000 fb00 	bl	800ca00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	699a      	ldr	r2, [r3, #24]
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c40e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	699a      	ldr	r2, [r3, #24]
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c41e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	6999      	ldr	r1, [r3, #24]
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	691b      	ldr	r3, [r3, #16]
 800c42a:	021a      	lsls	r2, r3, #8
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	430a      	orrs	r2, r1
 800c432:	619a      	str	r2, [r3, #24]
      break;
 800c434:	e084      	b.n	800c540 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	68b9      	ldr	r1, [r7, #8]
 800c43c:	4618      	mov	r0, r3
 800c43e:	f000 fb69 	bl	800cb14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	69da      	ldr	r2, [r3, #28]
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f042 0208 	orr.w	r2, r2, #8
 800c450:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	69da      	ldr	r2, [r3, #28]
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f022 0204 	bic.w	r2, r2, #4
 800c460:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	69d9      	ldr	r1, [r3, #28]
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	691a      	ldr	r2, [r3, #16]
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	430a      	orrs	r2, r1
 800c472:	61da      	str	r2, [r3, #28]
      break;
 800c474:	e064      	b.n	800c540 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	68b9      	ldr	r1, [r7, #8]
 800c47c:	4618      	mov	r0, r3
 800c47e:	f000 fbd1 	bl	800cc24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	69da      	ldr	r2, [r3, #28]
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c490:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	69da      	ldr	r2, [r3, #28]
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c4a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	69d9      	ldr	r1, [r3, #28]
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	691b      	ldr	r3, [r3, #16]
 800c4ac:	021a      	lsls	r2, r3, #8
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	430a      	orrs	r2, r1
 800c4b4:	61da      	str	r2, [r3, #28]
      break;
 800c4b6:	e043      	b.n	800c540 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	68b9      	ldr	r1, [r7, #8]
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f000 fc1a 	bl	800ccf8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f042 0208 	orr.w	r2, r2, #8
 800c4d2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	f022 0204 	bic.w	r2, r2, #4
 800c4e2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	691a      	ldr	r2, [r3, #16]
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	430a      	orrs	r2, r1
 800c4f4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c4f6:	e023      	b.n	800c540 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	68b9      	ldr	r1, [r7, #8]
 800c4fe:	4618      	mov	r0, r3
 800c500:	f000 fc5e 	bl	800cdc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c512:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c522:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	691b      	ldr	r3, [r3, #16]
 800c52e:	021a      	lsls	r2, r3, #8
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	430a      	orrs	r2, r1
 800c536:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c538:	e002      	b.n	800c540 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c53a:	2301      	movs	r3, #1
 800c53c:	75fb      	strb	r3, [r7, #23]
      break;
 800c53e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	2200      	movs	r2, #0
 800c544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c548:	7dfb      	ldrb	r3, [r7, #23]
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3718      	adds	r7, #24
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}
 800c552:	bf00      	nop

0800c554 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b084      	sub	sp, #16
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
 800c55c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c55e:	2300      	movs	r3, #0
 800c560:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c568:	2b01      	cmp	r3, #1
 800c56a:	d101      	bne.n	800c570 <HAL_TIM_ConfigClockSource+0x1c>
 800c56c:	2302      	movs	r3, #2
 800c56e:	e0dc      	b.n	800c72a <HAL_TIM_ConfigClockSource+0x1d6>
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2201      	movs	r2, #1
 800c574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2202      	movs	r2, #2
 800c57c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	689b      	ldr	r3, [r3, #8]
 800c586:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c588:	68ba      	ldr	r2, [r7, #8]
 800c58a:	4b6a      	ldr	r3, [pc, #424]	@ (800c734 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c58c:	4013      	ands	r3, r2
 800c58e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c596:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	68ba      	ldr	r2, [r7, #8]
 800c59e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	4a64      	ldr	r2, [pc, #400]	@ (800c738 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c5a6:	4293      	cmp	r3, r2
 800c5a8:	f000 80a9 	beq.w	800c6fe <HAL_TIM_ConfigClockSource+0x1aa>
 800c5ac:	4a62      	ldr	r2, [pc, #392]	@ (800c738 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	f200 80ae 	bhi.w	800c710 <HAL_TIM_ConfigClockSource+0x1bc>
 800c5b4:	4a61      	ldr	r2, [pc, #388]	@ (800c73c <HAL_TIM_ConfigClockSource+0x1e8>)
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	f000 80a1 	beq.w	800c6fe <HAL_TIM_ConfigClockSource+0x1aa>
 800c5bc:	4a5f      	ldr	r2, [pc, #380]	@ (800c73c <HAL_TIM_ConfigClockSource+0x1e8>)
 800c5be:	4293      	cmp	r3, r2
 800c5c0:	f200 80a6 	bhi.w	800c710 <HAL_TIM_ConfigClockSource+0x1bc>
 800c5c4:	4a5e      	ldr	r2, [pc, #376]	@ (800c740 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c5c6:	4293      	cmp	r3, r2
 800c5c8:	f000 8099 	beq.w	800c6fe <HAL_TIM_ConfigClockSource+0x1aa>
 800c5cc:	4a5c      	ldr	r2, [pc, #368]	@ (800c740 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c5ce:	4293      	cmp	r3, r2
 800c5d0:	f200 809e 	bhi.w	800c710 <HAL_TIM_ConfigClockSource+0x1bc>
 800c5d4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c5d8:	f000 8091 	beq.w	800c6fe <HAL_TIM_ConfigClockSource+0x1aa>
 800c5dc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c5e0:	f200 8096 	bhi.w	800c710 <HAL_TIM_ConfigClockSource+0x1bc>
 800c5e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c5e8:	f000 8089 	beq.w	800c6fe <HAL_TIM_ConfigClockSource+0x1aa>
 800c5ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c5f0:	f200 808e 	bhi.w	800c710 <HAL_TIM_ConfigClockSource+0x1bc>
 800c5f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c5f8:	d03e      	beq.n	800c678 <HAL_TIM_ConfigClockSource+0x124>
 800c5fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c5fe:	f200 8087 	bhi.w	800c710 <HAL_TIM_ConfigClockSource+0x1bc>
 800c602:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c606:	f000 8086 	beq.w	800c716 <HAL_TIM_ConfigClockSource+0x1c2>
 800c60a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c60e:	d87f      	bhi.n	800c710 <HAL_TIM_ConfigClockSource+0x1bc>
 800c610:	2b70      	cmp	r3, #112	@ 0x70
 800c612:	d01a      	beq.n	800c64a <HAL_TIM_ConfigClockSource+0xf6>
 800c614:	2b70      	cmp	r3, #112	@ 0x70
 800c616:	d87b      	bhi.n	800c710 <HAL_TIM_ConfigClockSource+0x1bc>
 800c618:	2b60      	cmp	r3, #96	@ 0x60
 800c61a:	d050      	beq.n	800c6be <HAL_TIM_ConfigClockSource+0x16a>
 800c61c:	2b60      	cmp	r3, #96	@ 0x60
 800c61e:	d877      	bhi.n	800c710 <HAL_TIM_ConfigClockSource+0x1bc>
 800c620:	2b50      	cmp	r3, #80	@ 0x50
 800c622:	d03c      	beq.n	800c69e <HAL_TIM_ConfigClockSource+0x14a>
 800c624:	2b50      	cmp	r3, #80	@ 0x50
 800c626:	d873      	bhi.n	800c710 <HAL_TIM_ConfigClockSource+0x1bc>
 800c628:	2b40      	cmp	r3, #64	@ 0x40
 800c62a:	d058      	beq.n	800c6de <HAL_TIM_ConfigClockSource+0x18a>
 800c62c:	2b40      	cmp	r3, #64	@ 0x40
 800c62e:	d86f      	bhi.n	800c710 <HAL_TIM_ConfigClockSource+0x1bc>
 800c630:	2b30      	cmp	r3, #48	@ 0x30
 800c632:	d064      	beq.n	800c6fe <HAL_TIM_ConfigClockSource+0x1aa>
 800c634:	2b30      	cmp	r3, #48	@ 0x30
 800c636:	d86b      	bhi.n	800c710 <HAL_TIM_ConfigClockSource+0x1bc>
 800c638:	2b20      	cmp	r3, #32
 800c63a:	d060      	beq.n	800c6fe <HAL_TIM_ConfigClockSource+0x1aa>
 800c63c:	2b20      	cmp	r3, #32
 800c63e:	d867      	bhi.n	800c710 <HAL_TIM_ConfigClockSource+0x1bc>
 800c640:	2b00      	cmp	r3, #0
 800c642:	d05c      	beq.n	800c6fe <HAL_TIM_ConfigClockSource+0x1aa>
 800c644:	2b10      	cmp	r3, #16
 800c646:	d05a      	beq.n	800c6fe <HAL_TIM_ConfigClockSource+0x1aa>
 800c648:	e062      	b.n	800c710 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c65a:	f000 fc95 	bl	800cf88 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	689b      	ldr	r3, [r3, #8]
 800c664:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c66c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	68ba      	ldr	r2, [r7, #8]
 800c674:	609a      	str	r2, [r3, #8]
      break;
 800c676:	e04f      	b.n	800c718 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c688:	f000 fc7e 	bl	800cf88 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	689a      	ldr	r2, [r3, #8]
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c69a:	609a      	str	r2, [r3, #8]
      break;
 800c69c:	e03c      	b.n	800c718 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	f000 fbee 	bl	800ce8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	2150      	movs	r1, #80	@ 0x50
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f000 fc48 	bl	800cf4c <TIM_ITRx_SetConfig>
      break;
 800c6bc:	e02c      	b.n	800c718 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c6ca:	461a      	mov	r2, r3
 800c6cc:	f000 fc0d 	bl	800ceea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	2160      	movs	r1, #96	@ 0x60
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f000 fc38 	bl	800cf4c <TIM_ITRx_SetConfig>
      break;
 800c6dc:	e01c      	b.n	800c718 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	f000 fbce 	bl	800ce8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	2140      	movs	r1, #64	@ 0x40
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f000 fc28 	bl	800cf4c <TIM_ITRx_SetConfig>
      break;
 800c6fc:	e00c      	b.n	800c718 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681a      	ldr	r2, [r3, #0]
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	4619      	mov	r1, r3
 800c708:	4610      	mov	r0, r2
 800c70a:	f000 fc1f 	bl	800cf4c <TIM_ITRx_SetConfig>
      break;
 800c70e:	e003      	b.n	800c718 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c710:	2301      	movs	r3, #1
 800c712:	73fb      	strb	r3, [r7, #15]
      break;
 800c714:	e000      	b.n	800c718 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c716:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2201      	movs	r2, #1
 800c71c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2200      	movs	r2, #0
 800c724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c728:	7bfb      	ldrb	r3, [r7, #15]
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3710      	adds	r7, #16
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}
 800c732:	bf00      	nop
 800c734:	ffceff88 	.word	0xffceff88
 800c738:	00100040 	.word	0x00100040
 800c73c:	00100030 	.word	0x00100030
 800c740:	00100020 	.word	0x00100020

0800c744 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c744:	b480      	push	{r7}
 800c746:	b083      	sub	sp, #12
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c74c:	bf00      	nop
 800c74e:	370c      	adds	r7, #12
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr

0800c758 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c758:	b480      	push	{r7}
 800c75a:	b083      	sub	sp, #12
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c760:	bf00      	nop
 800c762:	370c      	adds	r7, #12
 800c764:	46bd      	mov	sp, r7
 800c766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76a:	4770      	bx	lr

0800c76c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c76c:	b480      	push	{r7}
 800c76e:	b083      	sub	sp, #12
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c774:	bf00      	nop
 800c776:	370c      	adds	r7, #12
 800c778:	46bd      	mov	sp, r7
 800c77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77e:	4770      	bx	lr

0800c780 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c780:	b480      	push	{r7}
 800c782:	b083      	sub	sp, #12
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c788:	bf00      	nop
 800c78a:	370c      	adds	r7, #12
 800c78c:	46bd      	mov	sp, r7
 800c78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c792:	4770      	bx	lr

0800c794 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c794:	b480      	push	{r7}
 800c796:	b085      	sub	sp, #20
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	4a46      	ldr	r2, [pc, #280]	@ (800c8c0 <TIM_Base_SetConfig+0x12c>)
 800c7a8:	4293      	cmp	r3, r2
 800c7aa:	d013      	beq.n	800c7d4 <TIM_Base_SetConfig+0x40>
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c7b2:	d00f      	beq.n	800c7d4 <TIM_Base_SetConfig+0x40>
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	4a43      	ldr	r2, [pc, #268]	@ (800c8c4 <TIM_Base_SetConfig+0x130>)
 800c7b8:	4293      	cmp	r3, r2
 800c7ba:	d00b      	beq.n	800c7d4 <TIM_Base_SetConfig+0x40>
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	4a42      	ldr	r2, [pc, #264]	@ (800c8c8 <TIM_Base_SetConfig+0x134>)
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	d007      	beq.n	800c7d4 <TIM_Base_SetConfig+0x40>
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	4a41      	ldr	r2, [pc, #260]	@ (800c8cc <TIM_Base_SetConfig+0x138>)
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	d003      	beq.n	800c7d4 <TIM_Base_SetConfig+0x40>
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	4a40      	ldr	r2, [pc, #256]	@ (800c8d0 <TIM_Base_SetConfig+0x13c>)
 800c7d0:	4293      	cmp	r3, r2
 800c7d2:	d108      	bne.n	800c7e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	685b      	ldr	r3, [r3, #4]
 800c7e0:	68fa      	ldr	r2, [r7, #12]
 800c7e2:	4313      	orrs	r3, r2
 800c7e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	4a35      	ldr	r2, [pc, #212]	@ (800c8c0 <TIM_Base_SetConfig+0x12c>)
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	d01f      	beq.n	800c82e <TIM_Base_SetConfig+0x9a>
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c7f4:	d01b      	beq.n	800c82e <TIM_Base_SetConfig+0x9a>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	4a32      	ldr	r2, [pc, #200]	@ (800c8c4 <TIM_Base_SetConfig+0x130>)
 800c7fa:	4293      	cmp	r3, r2
 800c7fc:	d017      	beq.n	800c82e <TIM_Base_SetConfig+0x9a>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	4a31      	ldr	r2, [pc, #196]	@ (800c8c8 <TIM_Base_SetConfig+0x134>)
 800c802:	4293      	cmp	r3, r2
 800c804:	d013      	beq.n	800c82e <TIM_Base_SetConfig+0x9a>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	4a30      	ldr	r2, [pc, #192]	@ (800c8cc <TIM_Base_SetConfig+0x138>)
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d00f      	beq.n	800c82e <TIM_Base_SetConfig+0x9a>
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	4a2f      	ldr	r2, [pc, #188]	@ (800c8d0 <TIM_Base_SetConfig+0x13c>)
 800c812:	4293      	cmp	r3, r2
 800c814:	d00b      	beq.n	800c82e <TIM_Base_SetConfig+0x9a>
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	4a2e      	ldr	r2, [pc, #184]	@ (800c8d4 <TIM_Base_SetConfig+0x140>)
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d007      	beq.n	800c82e <TIM_Base_SetConfig+0x9a>
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	4a2d      	ldr	r2, [pc, #180]	@ (800c8d8 <TIM_Base_SetConfig+0x144>)
 800c822:	4293      	cmp	r3, r2
 800c824:	d003      	beq.n	800c82e <TIM_Base_SetConfig+0x9a>
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	4a2c      	ldr	r2, [pc, #176]	@ (800c8dc <TIM_Base_SetConfig+0x148>)
 800c82a:	4293      	cmp	r3, r2
 800c82c:	d108      	bne.n	800c840 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	68db      	ldr	r3, [r3, #12]
 800c83a:	68fa      	ldr	r2, [r7, #12]
 800c83c:	4313      	orrs	r3, r2
 800c83e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	695b      	ldr	r3, [r3, #20]
 800c84a:	4313      	orrs	r3, r2
 800c84c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	68fa      	ldr	r2, [r7, #12]
 800c852:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	689a      	ldr	r2, [r3, #8]
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	681a      	ldr	r2, [r3, #0]
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	4a16      	ldr	r2, [pc, #88]	@ (800c8c0 <TIM_Base_SetConfig+0x12c>)
 800c868:	4293      	cmp	r3, r2
 800c86a:	d00f      	beq.n	800c88c <TIM_Base_SetConfig+0xf8>
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	4a18      	ldr	r2, [pc, #96]	@ (800c8d0 <TIM_Base_SetConfig+0x13c>)
 800c870:	4293      	cmp	r3, r2
 800c872:	d00b      	beq.n	800c88c <TIM_Base_SetConfig+0xf8>
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	4a17      	ldr	r2, [pc, #92]	@ (800c8d4 <TIM_Base_SetConfig+0x140>)
 800c878:	4293      	cmp	r3, r2
 800c87a:	d007      	beq.n	800c88c <TIM_Base_SetConfig+0xf8>
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	4a16      	ldr	r2, [pc, #88]	@ (800c8d8 <TIM_Base_SetConfig+0x144>)
 800c880:	4293      	cmp	r3, r2
 800c882:	d003      	beq.n	800c88c <TIM_Base_SetConfig+0xf8>
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	4a15      	ldr	r2, [pc, #84]	@ (800c8dc <TIM_Base_SetConfig+0x148>)
 800c888:	4293      	cmp	r3, r2
 800c88a:	d103      	bne.n	800c894 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	691a      	ldr	r2, [r3, #16]
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2201      	movs	r2, #1
 800c898:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	691b      	ldr	r3, [r3, #16]
 800c89e:	f003 0301 	and.w	r3, r3, #1
 800c8a2:	2b01      	cmp	r3, #1
 800c8a4:	d105      	bne.n	800c8b2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	691b      	ldr	r3, [r3, #16]
 800c8aa:	f023 0201 	bic.w	r2, r3, #1
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	611a      	str	r2, [r3, #16]
  }
}
 800c8b2:	bf00      	nop
 800c8b4:	3714      	adds	r7, #20
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8bc:	4770      	bx	lr
 800c8be:	bf00      	nop
 800c8c0:	40010000 	.word	0x40010000
 800c8c4:	40000400 	.word	0x40000400
 800c8c8:	40000800 	.word	0x40000800
 800c8cc:	40000c00 	.word	0x40000c00
 800c8d0:	40010400 	.word	0x40010400
 800c8d4:	40014000 	.word	0x40014000
 800c8d8:	40014400 	.word	0x40014400
 800c8dc:	40014800 	.word	0x40014800

0800c8e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	b087      	sub	sp, #28
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
 800c8e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6a1b      	ldr	r3, [r3, #32]
 800c8ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	6a1b      	ldr	r3, [r3, #32]
 800c8f4:	f023 0201 	bic.w	r2, r3, #1
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	685b      	ldr	r3, [r3, #4]
 800c900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	699b      	ldr	r3, [r3, #24]
 800c906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c908:	68fa      	ldr	r2, [r7, #12]
 800c90a:	4b37      	ldr	r3, [pc, #220]	@ (800c9e8 <TIM_OC1_SetConfig+0x108>)
 800c90c:	4013      	ands	r3, r2
 800c90e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	f023 0303 	bic.w	r3, r3, #3
 800c916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	68fa      	ldr	r2, [r7, #12]
 800c91e:	4313      	orrs	r3, r2
 800c920:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	f023 0302 	bic.w	r3, r3, #2
 800c928:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	689b      	ldr	r3, [r3, #8]
 800c92e:	697a      	ldr	r2, [r7, #20]
 800c930:	4313      	orrs	r3, r2
 800c932:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	4a2d      	ldr	r2, [pc, #180]	@ (800c9ec <TIM_OC1_SetConfig+0x10c>)
 800c938:	4293      	cmp	r3, r2
 800c93a:	d00f      	beq.n	800c95c <TIM_OC1_SetConfig+0x7c>
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	4a2c      	ldr	r2, [pc, #176]	@ (800c9f0 <TIM_OC1_SetConfig+0x110>)
 800c940:	4293      	cmp	r3, r2
 800c942:	d00b      	beq.n	800c95c <TIM_OC1_SetConfig+0x7c>
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	4a2b      	ldr	r2, [pc, #172]	@ (800c9f4 <TIM_OC1_SetConfig+0x114>)
 800c948:	4293      	cmp	r3, r2
 800c94a:	d007      	beq.n	800c95c <TIM_OC1_SetConfig+0x7c>
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	4a2a      	ldr	r2, [pc, #168]	@ (800c9f8 <TIM_OC1_SetConfig+0x118>)
 800c950:	4293      	cmp	r3, r2
 800c952:	d003      	beq.n	800c95c <TIM_OC1_SetConfig+0x7c>
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	4a29      	ldr	r2, [pc, #164]	@ (800c9fc <TIM_OC1_SetConfig+0x11c>)
 800c958:	4293      	cmp	r3, r2
 800c95a:	d10c      	bne.n	800c976 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c95c:	697b      	ldr	r3, [r7, #20]
 800c95e:	f023 0308 	bic.w	r3, r3, #8
 800c962:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	68db      	ldr	r3, [r3, #12]
 800c968:	697a      	ldr	r2, [r7, #20]
 800c96a:	4313      	orrs	r3, r2
 800c96c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c96e:	697b      	ldr	r3, [r7, #20]
 800c970:	f023 0304 	bic.w	r3, r3, #4
 800c974:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	4a1c      	ldr	r2, [pc, #112]	@ (800c9ec <TIM_OC1_SetConfig+0x10c>)
 800c97a:	4293      	cmp	r3, r2
 800c97c:	d00f      	beq.n	800c99e <TIM_OC1_SetConfig+0xbe>
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	4a1b      	ldr	r2, [pc, #108]	@ (800c9f0 <TIM_OC1_SetConfig+0x110>)
 800c982:	4293      	cmp	r3, r2
 800c984:	d00b      	beq.n	800c99e <TIM_OC1_SetConfig+0xbe>
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	4a1a      	ldr	r2, [pc, #104]	@ (800c9f4 <TIM_OC1_SetConfig+0x114>)
 800c98a:	4293      	cmp	r3, r2
 800c98c:	d007      	beq.n	800c99e <TIM_OC1_SetConfig+0xbe>
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	4a19      	ldr	r2, [pc, #100]	@ (800c9f8 <TIM_OC1_SetConfig+0x118>)
 800c992:	4293      	cmp	r3, r2
 800c994:	d003      	beq.n	800c99e <TIM_OC1_SetConfig+0xbe>
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	4a18      	ldr	r2, [pc, #96]	@ (800c9fc <TIM_OC1_SetConfig+0x11c>)
 800c99a:	4293      	cmp	r3, r2
 800c99c:	d111      	bne.n	800c9c2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c99e:	693b      	ldr	r3, [r7, #16]
 800c9a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c9a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c9a6:	693b      	ldr	r3, [r7, #16]
 800c9a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c9ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	695b      	ldr	r3, [r3, #20]
 800c9b2:	693a      	ldr	r2, [r7, #16]
 800c9b4:	4313      	orrs	r3, r2
 800c9b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	699b      	ldr	r3, [r3, #24]
 800c9bc:	693a      	ldr	r2, [r7, #16]
 800c9be:	4313      	orrs	r3, r2
 800c9c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	693a      	ldr	r2, [r7, #16]
 800c9c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	68fa      	ldr	r2, [r7, #12]
 800c9cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	685a      	ldr	r2, [r3, #4]
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	697a      	ldr	r2, [r7, #20]
 800c9da:	621a      	str	r2, [r3, #32]
}
 800c9dc:	bf00      	nop
 800c9de:	371c      	adds	r7, #28
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr
 800c9e8:	fffeff8f 	.word	0xfffeff8f
 800c9ec:	40010000 	.word	0x40010000
 800c9f0:	40010400 	.word	0x40010400
 800c9f4:	40014000 	.word	0x40014000
 800c9f8:	40014400 	.word	0x40014400
 800c9fc:	40014800 	.word	0x40014800

0800ca00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ca00:	b480      	push	{r7}
 800ca02:	b087      	sub	sp, #28
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6a1b      	ldr	r3, [r3, #32]
 800ca0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6a1b      	ldr	r3, [r3, #32]
 800ca14:	f023 0210 	bic.w	r2, r3, #16
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	685b      	ldr	r3, [r3, #4]
 800ca20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	699b      	ldr	r3, [r3, #24]
 800ca26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ca28:	68fa      	ldr	r2, [r7, #12]
 800ca2a:	4b34      	ldr	r3, [pc, #208]	@ (800cafc <TIM_OC2_SetConfig+0xfc>)
 800ca2c:	4013      	ands	r3, r2
 800ca2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ca36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	021b      	lsls	r3, r3, #8
 800ca3e:	68fa      	ldr	r2, [r7, #12]
 800ca40:	4313      	orrs	r3, r2
 800ca42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ca44:	697b      	ldr	r3, [r7, #20]
 800ca46:	f023 0320 	bic.w	r3, r3, #32
 800ca4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	689b      	ldr	r3, [r3, #8]
 800ca50:	011b      	lsls	r3, r3, #4
 800ca52:	697a      	ldr	r2, [r7, #20]
 800ca54:	4313      	orrs	r3, r2
 800ca56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	4a29      	ldr	r2, [pc, #164]	@ (800cb00 <TIM_OC2_SetConfig+0x100>)
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	d003      	beq.n	800ca68 <TIM_OC2_SetConfig+0x68>
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	4a28      	ldr	r2, [pc, #160]	@ (800cb04 <TIM_OC2_SetConfig+0x104>)
 800ca64:	4293      	cmp	r3, r2
 800ca66:	d10d      	bne.n	800ca84 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ca68:	697b      	ldr	r3, [r7, #20]
 800ca6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ca6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	68db      	ldr	r3, [r3, #12]
 800ca74:	011b      	lsls	r3, r3, #4
 800ca76:	697a      	ldr	r2, [r7, #20]
 800ca78:	4313      	orrs	r3, r2
 800ca7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ca82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	4a1e      	ldr	r2, [pc, #120]	@ (800cb00 <TIM_OC2_SetConfig+0x100>)
 800ca88:	4293      	cmp	r3, r2
 800ca8a:	d00f      	beq.n	800caac <TIM_OC2_SetConfig+0xac>
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	4a1d      	ldr	r2, [pc, #116]	@ (800cb04 <TIM_OC2_SetConfig+0x104>)
 800ca90:	4293      	cmp	r3, r2
 800ca92:	d00b      	beq.n	800caac <TIM_OC2_SetConfig+0xac>
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	4a1c      	ldr	r2, [pc, #112]	@ (800cb08 <TIM_OC2_SetConfig+0x108>)
 800ca98:	4293      	cmp	r3, r2
 800ca9a:	d007      	beq.n	800caac <TIM_OC2_SetConfig+0xac>
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	4a1b      	ldr	r2, [pc, #108]	@ (800cb0c <TIM_OC2_SetConfig+0x10c>)
 800caa0:	4293      	cmp	r3, r2
 800caa2:	d003      	beq.n	800caac <TIM_OC2_SetConfig+0xac>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	4a1a      	ldr	r2, [pc, #104]	@ (800cb10 <TIM_OC2_SetConfig+0x110>)
 800caa8:	4293      	cmp	r3, r2
 800caaa:	d113      	bne.n	800cad4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800caac:	693b      	ldr	r3, [r7, #16]
 800caae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cab2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cab4:	693b      	ldr	r3, [r7, #16]
 800cab6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800caba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	695b      	ldr	r3, [r3, #20]
 800cac0:	009b      	lsls	r3, r3, #2
 800cac2:	693a      	ldr	r2, [r7, #16]
 800cac4:	4313      	orrs	r3, r2
 800cac6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	699b      	ldr	r3, [r3, #24]
 800cacc:	009b      	lsls	r3, r3, #2
 800cace:	693a      	ldr	r2, [r7, #16]
 800cad0:	4313      	orrs	r3, r2
 800cad2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	693a      	ldr	r2, [r7, #16]
 800cad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	68fa      	ldr	r2, [r7, #12]
 800cade:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	685a      	ldr	r2, [r3, #4]
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	697a      	ldr	r2, [r7, #20]
 800caec:	621a      	str	r2, [r3, #32]
}
 800caee:	bf00      	nop
 800caf0:	371c      	adds	r7, #28
 800caf2:	46bd      	mov	sp, r7
 800caf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf8:	4770      	bx	lr
 800cafa:	bf00      	nop
 800cafc:	feff8fff 	.word	0xfeff8fff
 800cb00:	40010000 	.word	0x40010000
 800cb04:	40010400 	.word	0x40010400
 800cb08:	40014000 	.word	0x40014000
 800cb0c:	40014400 	.word	0x40014400
 800cb10:	40014800 	.word	0x40014800

0800cb14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cb14:	b480      	push	{r7}
 800cb16:	b087      	sub	sp, #28
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
 800cb1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6a1b      	ldr	r3, [r3, #32]
 800cb22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6a1b      	ldr	r3, [r3, #32]
 800cb28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	685b      	ldr	r3, [r3, #4]
 800cb34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	69db      	ldr	r3, [r3, #28]
 800cb3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cb3c:	68fa      	ldr	r2, [r7, #12]
 800cb3e:	4b33      	ldr	r3, [pc, #204]	@ (800cc0c <TIM_OC3_SetConfig+0xf8>)
 800cb40:	4013      	ands	r3, r2
 800cb42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	f023 0303 	bic.w	r3, r3, #3
 800cb4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	68fa      	ldr	r2, [r7, #12]
 800cb52:	4313      	orrs	r3, r2
 800cb54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cb5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	689b      	ldr	r3, [r3, #8]
 800cb62:	021b      	lsls	r3, r3, #8
 800cb64:	697a      	ldr	r2, [r7, #20]
 800cb66:	4313      	orrs	r3, r2
 800cb68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	4a28      	ldr	r2, [pc, #160]	@ (800cc10 <TIM_OC3_SetConfig+0xfc>)
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	d003      	beq.n	800cb7a <TIM_OC3_SetConfig+0x66>
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	4a27      	ldr	r2, [pc, #156]	@ (800cc14 <TIM_OC3_SetConfig+0x100>)
 800cb76:	4293      	cmp	r3, r2
 800cb78:	d10d      	bne.n	800cb96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cb7a:	697b      	ldr	r3, [r7, #20]
 800cb7c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cb80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	68db      	ldr	r3, [r3, #12]
 800cb86:	021b      	lsls	r3, r3, #8
 800cb88:	697a      	ldr	r2, [r7, #20]
 800cb8a:	4313      	orrs	r3, r2
 800cb8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cb8e:	697b      	ldr	r3, [r7, #20]
 800cb90:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cb94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	4a1d      	ldr	r2, [pc, #116]	@ (800cc10 <TIM_OC3_SetConfig+0xfc>)
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	d00f      	beq.n	800cbbe <TIM_OC3_SetConfig+0xaa>
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	4a1c      	ldr	r2, [pc, #112]	@ (800cc14 <TIM_OC3_SetConfig+0x100>)
 800cba2:	4293      	cmp	r3, r2
 800cba4:	d00b      	beq.n	800cbbe <TIM_OC3_SetConfig+0xaa>
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	4a1b      	ldr	r2, [pc, #108]	@ (800cc18 <TIM_OC3_SetConfig+0x104>)
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	d007      	beq.n	800cbbe <TIM_OC3_SetConfig+0xaa>
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	4a1a      	ldr	r2, [pc, #104]	@ (800cc1c <TIM_OC3_SetConfig+0x108>)
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d003      	beq.n	800cbbe <TIM_OC3_SetConfig+0xaa>
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	4a19      	ldr	r2, [pc, #100]	@ (800cc20 <TIM_OC3_SetConfig+0x10c>)
 800cbba:	4293      	cmp	r3, r2
 800cbbc:	d113      	bne.n	800cbe6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cbbe:	693b      	ldr	r3, [r7, #16]
 800cbc0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cbc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cbcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	695b      	ldr	r3, [r3, #20]
 800cbd2:	011b      	lsls	r3, r3, #4
 800cbd4:	693a      	ldr	r2, [r7, #16]
 800cbd6:	4313      	orrs	r3, r2
 800cbd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	699b      	ldr	r3, [r3, #24]
 800cbde:	011b      	lsls	r3, r3, #4
 800cbe0:	693a      	ldr	r2, [r7, #16]
 800cbe2:	4313      	orrs	r3, r2
 800cbe4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	693a      	ldr	r2, [r7, #16]
 800cbea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	68fa      	ldr	r2, [r7, #12]
 800cbf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	685a      	ldr	r2, [r3, #4]
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	697a      	ldr	r2, [r7, #20]
 800cbfe:	621a      	str	r2, [r3, #32]
}
 800cc00:	bf00      	nop
 800cc02:	371c      	adds	r7, #28
 800cc04:	46bd      	mov	sp, r7
 800cc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0a:	4770      	bx	lr
 800cc0c:	fffeff8f 	.word	0xfffeff8f
 800cc10:	40010000 	.word	0x40010000
 800cc14:	40010400 	.word	0x40010400
 800cc18:	40014000 	.word	0x40014000
 800cc1c:	40014400 	.word	0x40014400
 800cc20:	40014800 	.word	0x40014800

0800cc24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cc24:	b480      	push	{r7}
 800cc26:	b087      	sub	sp, #28
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6a1b      	ldr	r3, [r3, #32]
 800cc32:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	6a1b      	ldr	r3, [r3, #32]
 800cc38:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	685b      	ldr	r3, [r3, #4]
 800cc44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	69db      	ldr	r3, [r3, #28]
 800cc4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cc4c:	68fa      	ldr	r2, [r7, #12]
 800cc4e:	4b24      	ldr	r3, [pc, #144]	@ (800cce0 <TIM_OC4_SetConfig+0xbc>)
 800cc50:	4013      	ands	r3, r2
 800cc52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cc5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	021b      	lsls	r3, r3, #8
 800cc62:	68fa      	ldr	r2, [r7, #12]
 800cc64:	4313      	orrs	r3, r2
 800cc66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cc6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	689b      	ldr	r3, [r3, #8]
 800cc74:	031b      	lsls	r3, r3, #12
 800cc76:	693a      	ldr	r2, [r7, #16]
 800cc78:	4313      	orrs	r3, r2
 800cc7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	4a19      	ldr	r2, [pc, #100]	@ (800cce4 <TIM_OC4_SetConfig+0xc0>)
 800cc80:	4293      	cmp	r3, r2
 800cc82:	d00f      	beq.n	800cca4 <TIM_OC4_SetConfig+0x80>
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	4a18      	ldr	r2, [pc, #96]	@ (800cce8 <TIM_OC4_SetConfig+0xc4>)
 800cc88:	4293      	cmp	r3, r2
 800cc8a:	d00b      	beq.n	800cca4 <TIM_OC4_SetConfig+0x80>
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	4a17      	ldr	r2, [pc, #92]	@ (800ccec <TIM_OC4_SetConfig+0xc8>)
 800cc90:	4293      	cmp	r3, r2
 800cc92:	d007      	beq.n	800cca4 <TIM_OC4_SetConfig+0x80>
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	4a16      	ldr	r2, [pc, #88]	@ (800ccf0 <TIM_OC4_SetConfig+0xcc>)
 800cc98:	4293      	cmp	r3, r2
 800cc9a:	d003      	beq.n	800cca4 <TIM_OC4_SetConfig+0x80>
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	4a15      	ldr	r2, [pc, #84]	@ (800ccf4 <TIM_OC4_SetConfig+0xd0>)
 800cca0:	4293      	cmp	r3, r2
 800cca2:	d109      	bne.n	800ccb8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ccaa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	695b      	ldr	r3, [r3, #20]
 800ccb0:	019b      	lsls	r3, r3, #6
 800ccb2:	697a      	ldr	r2, [r7, #20]
 800ccb4:	4313      	orrs	r3, r2
 800ccb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	697a      	ldr	r2, [r7, #20]
 800ccbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	68fa      	ldr	r2, [r7, #12]
 800ccc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	685a      	ldr	r2, [r3, #4]
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	693a      	ldr	r2, [r7, #16]
 800ccd0:	621a      	str	r2, [r3, #32]
}
 800ccd2:	bf00      	nop
 800ccd4:	371c      	adds	r7, #28
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccdc:	4770      	bx	lr
 800ccde:	bf00      	nop
 800cce0:	feff8fff 	.word	0xfeff8fff
 800cce4:	40010000 	.word	0x40010000
 800cce8:	40010400 	.word	0x40010400
 800ccec:	40014000 	.word	0x40014000
 800ccf0:	40014400 	.word	0x40014400
 800ccf4:	40014800 	.word	0x40014800

0800ccf8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b087      	sub	sp, #28
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	6a1b      	ldr	r3, [r3, #32]
 800cd06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6a1b      	ldr	r3, [r3, #32]
 800cd0c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	685b      	ldr	r3, [r3, #4]
 800cd18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cd20:	68fa      	ldr	r2, [r7, #12]
 800cd22:	4b21      	ldr	r3, [pc, #132]	@ (800cda8 <TIM_OC5_SetConfig+0xb0>)
 800cd24:	4013      	ands	r3, r2
 800cd26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	68fa      	ldr	r2, [r7, #12]
 800cd2e:	4313      	orrs	r3, r2
 800cd30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cd32:	693b      	ldr	r3, [r7, #16]
 800cd34:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800cd38:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	689b      	ldr	r3, [r3, #8]
 800cd3e:	041b      	lsls	r3, r3, #16
 800cd40:	693a      	ldr	r2, [r7, #16]
 800cd42:	4313      	orrs	r3, r2
 800cd44:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	4a18      	ldr	r2, [pc, #96]	@ (800cdac <TIM_OC5_SetConfig+0xb4>)
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	d00f      	beq.n	800cd6e <TIM_OC5_SetConfig+0x76>
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	4a17      	ldr	r2, [pc, #92]	@ (800cdb0 <TIM_OC5_SetConfig+0xb8>)
 800cd52:	4293      	cmp	r3, r2
 800cd54:	d00b      	beq.n	800cd6e <TIM_OC5_SetConfig+0x76>
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	4a16      	ldr	r2, [pc, #88]	@ (800cdb4 <TIM_OC5_SetConfig+0xbc>)
 800cd5a:	4293      	cmp	r3, r2
 800cd5c:	d007      	beq.n	800cd6e <TIM_OC5_SetConfig+0x76>
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	4a15      	ldr	r2, [pc, #84]	@ (800cdb8 <TIM_OC5_SetConfig+0xc0>)
 800cd62:	4293      	cmp	r3, r2
 800cd64:	d003      	beq.n	800cd6e <TIM_OC5_SetConfig+0x76>
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	4a14      	ldr	r2, [pc, #80]	@ (800cdbc <TIM_OC5_SetConfig+0xc4>)
 800cd6a:	4293      	cmp	r3, r2
 800cd6c:	d109      	bne.n	800cd82 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cd74:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	695b      	ldr	r3, [r3, #20]
 800cd7a:	021b      	lsls	r3, r3, #8
 800cd7c:	697a      	ldr	r2, [r7, #20]
 800cd7e:	4313      	orrs	r3, r2
 800cd80:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	697a      	ldr	r2, [r7, #20]
 800cd86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	68fa      	ldr	r2, [r7, #12]
 800cd8c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	685a      	ldr	r2, [r3, #4]
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	693a      	ldr	r2, [r7, #16]
 800cd9a:	621a      	str	r2, [r3, #32]
}
 800cd9c:	bf00      	nop
 800cd9e:	371c      	adds	r7, #28
 800cda0:	46bd      	mov	sp, r7
 800cda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda6:	4770      	bx	lr
 800cda8:	fffeff8f 	.word	0xfffeff8f
 800cdac:	40010000 	.word	0x40010000
 800cdb0:	40010400 	.word	0x40010400
 800cdb4:	40014000 	.word	0x40014000
 800cdb8:	40014400 	.word	0x40014400
 800cdbc:	40014800 	.word	0x40014800

0800cdc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b087      	sub	sp, #28
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	6a1b      	ldr	r3, [r3, #32]
 800cdce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6a1b      	ldr	r3, [r3, #32]
 800cdd4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	685b      	ldr	r3, [r3, #4]
 800cde0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cde6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cde8:	68fa      	ldr	r2, [r7, #12]
 800cdea:	4b22      	ldr	r3, [pc, #136]	@ (800ce74 <TIM_OC6_SetConfig+0xb4>)
 800cdec:	4013      	ands	r3, r2
 800cdee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	021b      	lsls	r3, r3, #8
 800cdf6:	68fa      	ldr	r2, [r7, #12]
 800cdf8:	4313      	orrs	r3, r2
 800cdfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cdfc:	693b      	ldr	r3, [r7, #16]
 800cdfe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ce02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	689b      	ldr	r3, [r3, #8]
 800ce08:	051b      	lsls	r3, r3, #20
 800ce0a:	693a      	ldr	r2, [r7, #16]
 800ce0c:	4313      	orrs	r3, r2
 800ce0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	4a19      	ldr	r2, [pc, #100]	@ (800ce78 <TIM_OC6_SetConfig+0xb8>)
 800ce14:	4293      	cmp	r3, r2
 800ce16:	d00f      	beq.n	800ce38 <TIM_OC6_SetConfig+0x78>
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	4a18      	ldr	r2, [pc, #96]	@ (800ce7c <TIM_OC6_SetConfig+0xbc>)
 800ce1c:	4293      	cmp	r3, r2
 800ce1e:	d00b      	beq.n	800ce38 <TIM_OC6_SetConfig+0x78>
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	4a17      	ldr	r2, [pc, #92]	@ (800ce80 <TIM_OC6_SetConfig+0xc0>)
 800ce24:	4293      	cmp	r3, r2
 800ce26:	d007      	beq.n	800ce38 <TIM_OC6_SetConfig+0x78>
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	4a16      	ldr	r2, [pc, #88]	@ (800ce84 <TIM_OC6_SetConfig+0xc4>)
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	d003      	beq.n	800ce38 <TIM_OC6_SetConfig+0x78>
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	4a15      	ldr	r2, [pc, #84]	@ (800ce88 <TIM_OC6_SetConfig+0xc8>)
 800ce34:	4293      	cmp	r3, r2
 800ce36:	d109      	bne.n	800ce4c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ce3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	695b      	ldr	r3, [r3, #20]
 800ce44:	029b      	lsls	r3, r3, #10
 800ce46:	697a      	ldr	r2, [r7, #20]
 800ce48:	4313      	orrs	r3, r2
 800ce4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	697a      	ldr	r2, [r7, #20]
 800ce50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	68fa      	ldr	r2, [r7, #12]
 800ce56:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	685a      	ldr	r2, [r3, #4]
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	693a      	ldr	r2, [r7, #16]
 800ce64:	621a      	str	r2, [r3, #32]
}
 800ce66:	bf00      	nop
 800ce68:	371c      	adds	r7, #28
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce70:	4770      	bx	lr
 800ce72:	bf00      	nop
 800ce74:	feff8fff 	.word	0xfeff8fff
 800ce78:	40010000 	.word	0x40010000
 800ce7c:	40010400 	.word	0x40010400
 800ce80:	40014000 	.word	0x40014000
 800ce84:	40014400 	.word	0x40014400
 800ce88:	40014800 	.word	0x40014800

0800ce8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ce8c:	b480      	push	{r7}
 800ce8e:	b087      	sub	sp, #28
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	60f8      	str	r0, [r7, #12]
 800ce94:	60b9      	str	r1, [r7, #8]
 800ce96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	6a1b      	ldr	r3, [r3, #32]
 800ce9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	6a1b      	ldr	r3, [r3, #32]
 800cea2:	f023 0201 	bic.w	r2, r3, #1
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	699b      	ldr	r3, [r3, #24]
 800ceae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ceb0:	693b      	ldr	r3, [r7, #16]
 800ceb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ceb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	011b      	lsls	r3, r3, #4
 800cebc:	693a      	ldr	r2, [r7, #16]
 800cebe:	4313      	orrs	r3, r2
 800cec0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	f023 030a 	bic.w	r3, r3, #10
 800cec8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ceca:	697a      	ldr	r2, [r7, #20]
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	4313      	orrs	r3, r2
 800ced0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	693a      	ldr	r2, [r7, #16]
 800ced6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	697a      	ldr	r2, [r7, #20]
 800cedc:	621a      	str	r2, [r3, #32]
}
 800cede:	bf00      	nop
 800cee0:	371c      	adds	r7, #28
 800cee2:	46bd      	mov	sp, r7
 800cee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee8:	4770      	bx	lr

0800ceea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ceea:	b480      	push	{r7}
 800ceec:	b087      	sub	sp, #28
 800ceee:	af00      	add	r7, sp, #0
 800cef0:	60f8      	str	r0, [r7, #12]
 800cef2:	60b9      	str	r1, [r7, #8]
 800cef4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	6a1b      	ldr	r3, [r3, #32]
 800cefa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	6a1b      	ldr	r3, [r3, #32]
 800cf00:	f023 0210 	bic.w	r2, r3, #16
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	699b      	ldr	r3, [r3, #24]
 800cf0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cf0e:	693b      	ldr	r3, [r7, #16]
 800cf10:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800cf14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	031b      	lsls	r3, r3, #12
 800cf1a:	693a      	ldr	r2, [r7, #16]
 800cf1c:	4313      	orrs	r3, r2
 800cf1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cf20:	697b      	ldr	r3, [r7, #20]
 800cf22:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800cf26:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cf28:	68bb      	ldr	r3, [r7, #8]
 800cf2a:	011b      	lsls	r3, r3, #4
 800cf2c:	697a      	ldr	r2, [r7, #20]
 800cf2e:	4313      	orrs	r3, r2
 800cf30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	693a      	ldr	r2, [r7, #16]
 800cf36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	697a      	ldr	r2, [r7, #20]
 800cf3c:	621a      	str	r2, [r3, #32]
}
 800cf3e:	bf00      	nop
 800cf40:	371c      	adds	r7, #28
 800cf42:	46bd      	mov	sp, r7
 800cf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf48:	4770      	bx	lr
	...

0800cf4c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	b085      	sub	sp, #20
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
 800cf54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	689b      	ldr	r3, [r3, #8]
 800cf5a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cf5c:	68fa      	ldr	r2, [r7, #12]
 800cf5e:	4b09      	ldr	r3, [pc, #36]	@ (800cf84 <TIM_ITRx_SetConfig+0x38>)
 800cf60:	4013      	ands	r3, r2
 800cf62:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cf64:	683a      	ldr	r2, [r7, #0]
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	4313      	orrs	r3, r2
 800cf6a:	f043 0307 	orr.w	r3, r3, #7
 800cf6e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	68fa      	ldr	r2, [r7, #12]
 800cf74:	609a      	str	r2, [r3, #8]
}
 800cf76:	bf00      	nop
 800cf78:	3714      	adds	r7, #20
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf80:	4770      	bx	lr
 800cf82:	bf00      	nop
 800cf84:	ffcfff8f 	.word	0xffcfff8f

0800cf88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cf88:	b480      	push	{r7}
 800cf8a:	b087      	sub	sp, #28
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	60f8      	str	r0, [r7, #12]
 800cf90:	60b9      	str	r1, [r7, #8]
 800cf92:	607a      	str	r2, [r7, #4]
 800cf94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	689b      	ldr	r3, [r3, #8]
 800cf9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cfa2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	021a      	lsls	r2, r3, #8
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	431a      	orrs	r2, r3
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	4313      	orrs	r3, r2
 800cfb0:	697a      	ldr	r2, [r7, #20]
 800cfb2:	4313      	orrs	r3, r2
 800cfb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	697a      	ldr	r2, [r7, #20]
 800cfba:	609a      	str	r2, [r3, #8]
}
 800cfbc:	bf00      	nop
 800cfbe:	371c      	adds	r7, #28
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc6:	4770      	bx	lr

0800cfc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cfc8:	b480      	push	{r7}
 800cfca:	b087      	sub	sp, #28
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	60f8      	str	r0, [r7, #12]
 800cfd0:	60b9      	str	r1, [r7, #8]
 800cfd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	f003 031f 	and.w	r3, r3, #31
 800cfda:	2201      	movs	r2, #1
 800cfdc:	fa02 f303 	lsl.w	r3, r2, r3
 800cfe0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	6a1a      	ldr	r2, [r3, #32]
 800cfe6:	697b      	ldr	r3, [r7, #20]
 800cfe8:	43db      	mvns	r3, r3
 800cfea:	401a      	ands	r2, r3
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	6a1a      	ldr	r2, [r3, #32]
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	f003 031f 	and.w	r3, r3, #31
 800cffa:	6879      	ldr	r1, [r7, #4]
 800cffc:	fa01 f303 	lsl.w	r3, r1, r3
 800d000:	431a      	orrs	r2, r3
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	621a      	str	r2, [r3, #32]
}
 800d006:	bf00      	nop
 800d008:	371c      	adds	r7, #28
 800d00a:	46bd      	mov	sp, r7
 800d00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d010:	4770      	bx	lr
	...

0800d014 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d014:	b480      	push	{r7}
 800d016:	b085      	sub	sp, #20
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
 800d01c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d024:	2b01      	cmp	r3, #1
 800d026:	d101      	bne.n	800d02c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d028:	2302      	movs	r3, #2
 800d02a:	e06d      	b.n	800d108 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2201      	movs	r2, #1
 800d030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2202      	movs	r2, #2
 800d038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	685b      	ldr	r3, [r3, #4]
 800d042:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	689b      	ldr	r3, [r3, #8]
 800d04a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	4a30      	ldr	r2, [pc, #192]	@ (800d114 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d052:	4293      	cmp	r3, r2
 800d054:	d004      	beq.n	800d060 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	4a2f      	ldr	r2, [pc, #188]	@ (800d118 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d05c:	4293      	cmp	r3, r2
 800d05e:	d108      	bne.n	800d072 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d066:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	685b      	ldr	r3, [r3, #4]
 800d06c:	68fa      	ldr	r2, [r7, #12]
 800d06e:	4313      	orrs	r3, r2
 800d070:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d078:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	68fa      	ldr	r2, [r7, #12]
 800d080:	4313      	orrs	r3, r2
 800d082:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	68fa      	ldr	r2, [r7, #12]
 800d08a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4a20      	ldr	r2, [pc, #128]	@ (800d114 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d092:	4293      	cmp	r3, r2
 800d094:	d022      	beq.n	800d0dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d09e:	d01d      	beq.n	800d0dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	4a1d      	ldr	r2, [pc, #116]	@ (800d11c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d018      	beq.n	800d0dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	4a1c      	ldr	r2, [pc, #112]	@ (800d120 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d0b0:	4293      	cmp	r3, r2
 800d0b2:	d013      	beq.n	800d0dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	4a1a      	ldr	r2, [pc, #104]	@ (800d124 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d0ba:	4293      	cmp	r3, r2
 800d0bc:	d00e      	beq.n	800d0dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	4a15      	ldr	r2, [pc, #84]	@ (800d118 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d0c4:	4293      	cmp	r3, r2
 800d0c6:	d009      	beq.n	800d0dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	4a16      	ldr	r2, [pc, #88]	@ (800d128 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d0ce:	4293      	cmp	r3, r2
 800d0d0:	d004      	beq.n	800d0dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	4a15      	ldr	r2, [pc, #84]	@ (800d12c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d0d8:	4293      	cmp	r3, r2
 800d0da:	d10c      	bne.n	800d0f6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d0e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	689b      	ldr	r3, [r3, #8]
 800d0e8:	68ba      	ldr	r2, [r7, #8]
 800d0ea:	4313      	orrs	r3, r2
 800d0ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	68ba      	ldr	r2, [r7, #8]
 800d0f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2201      	movs	r2, #1
 800d0fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2200      	movs	r2, #0
 800d102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d106:	2300      	movs	r3, #0
}
 800d108:	4618      	mov	r0, r3
 800d10a:	3714      	adds	r7, #20
 800d10c:	46bd      	mov	sp, r7
 800d10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d112:	4770      	bx	lr
 800d114:	40010000 	.word	0x40010000
 800d118:	40010400 	.word	0x40010400
 800d11c:	40000400 	.word	0x40000400
 800d120:	40000800 	.word	0x40000800
 800d124:	40000c00 	.word	0x40000c00
 800d128:	40001800 	.word	0x40001800
 800d12c:	40014000 	.word	0x40014000

0800d130 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d130:	b480      	push	{r7}
 800d132:	b083      	sub	sp, #12
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d138:	bf00      	nop
 800d13a:	370c      	adds	r7, #12
 800d13c:	46bd      	mov	sp, r7
 800d13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d142:	4770      	bx	lr

0800d144 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d144:	b480      	push	{r7}
 800d146:	b083      	sub	sp, #12
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d14c:	bf00      	nop
 800d14e:	370c      	adds	r7, #12
 800d150:	46bd      	mov	sp, r7
 800d152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d156:	4770      	bx	lr

0800d158 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d158:	b480      	push	{r7}
 800d15a:	b083      	sub	sp, #12
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d160:	bf00      	nop
 800d162:	370c      	adds	r7, #12
 800d164:	46bd      	mov	sp, r7
 800d166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16a:	4770      	bx	lr

0800d16c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b082      	sub	sp, #8
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d101      	bne.n	800d17e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d17a:	2301      	movs	r3, #1
 800d17c:	e042      	b.n	800d204 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d184:	2b00      	cmp	r3, #0
 800d186:	d106      	bne.n	800d196 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2200      	movs	r2, #0
 800d18c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f000 f83b 	bl	800d20c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	2224      	movs	r2, #36	@ 0x24
 800d19a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	681a      	ldr	r2, [r3, #0]
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	f022 0201 	bic.w	r2, r2, #1
 800d1ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d002      	beq.n	800d1bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f000 fe28 	bl	800de0c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f000 f8bd 	bl	800d33c <UART_SetConfig>
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	2b01      	cmp	r3, #1
 800d1c6:	d101      	bne.n	800d1cc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d1c8:	2301      	movs	r3, #1
 800d1ca:	e01b      	b.n	800d204 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	685a      	ldr	r2, [r3, #4]
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d1da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	689a      	ldr	r2, [r3, #8]
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d1ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	681a      	ldr	r2, [r3, #0]
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	f042 0201 	orr.w	r2, r2, #1
 800d1fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f000 fea7 	bl	800df50 <UART_CheckIdleState>
 800d202:	4603      	mov	r3, r0
}
 800d204:	4618      	mov	r0, r3
 800d206:	3708      	adds	r7, #8
 800d208:	46bd      	mov	sp, r7
 800d20a:	bd80      	pop	{r7, pc}

0800d20c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800d20c:	b480      	push	{r7}
 800d20e:	b083      	sub	sp, #12
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800d214:	bf00      	nop
 800d216:	370c      	adds	r7, #12
 800d218:	46bd      	mov	sp, r7
 800d21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21e:	4770      	bx	lr

0800d220 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b08a      	sub	sp, #40	@ 0x28
 800d224:	af02      	add	r7, sp, #8
 800d226:	60f8      	str	r0, [r7, #12]
 800d228:	60b9      	str	r1, [r7, #8]
 800d22a:	603b      	str	r3, [r7, #0]
 800d22c:	4613      	mov	r3, r2
 800d22e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d236:	2b20      	cmp	r3, #32
 800d238:	d17b      	bne.n	800d332 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d002      	beq.n	800d246 <HAL_UART_Transmit+0x26>
 800d240:	88fb      	ldrh	r3, [r7, #6]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d101      	bne.n	800d24a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d246:	2301      	movs	r3, #1
 800d248:	e074      	b.n	800d334 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	2200      	movs	r2, #0
 800d24e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	2221      	movs	r2, #33	@ 0x21
 800d256:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d25a:	f7f5 fbe9 	bl	8002a30 <HAL_GetTick>
 800d25e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	88fa      	ldrh	r2, [r7, #6]
 800d264:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	88fa      	ldrh	r2, [r7, #6]
 800d26c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	689b      	ldr	r3, [r3, #8]
 800d274:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d278:	d108      	bne.n	800d28c <HAL_UART_Transmit+0x6c>
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	691b      	ldr	r3, [r3, #16]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d104      	bne.n	800d28c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d282:	2300      	movs	r3, #0
 800d284:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	61bb      	str	r3, [r7, #24]
 800d28a:	e003      	b.n	800d294 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d28c:	68bb      	ldr	r3, [r7, #8]
 800d28e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d290:	2300      	movs	r3, #0
 800d292:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d294:	e030      	b.n	800d2f8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	9300      	str	r3, [sp, #0]
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	2200      	movs	r2, #0
 800d29e:	2180      	movs	r1, #128	@ 0x80
 800d2a0:	68f8      	ldr	r0, [r7, #12]
 800d2a2:	f000 feff 	bl	800e0a4 <UART_WaitOnFlagUntilTimeout>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d005      	beq.n	800d2b8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	2220      	movs	r2, #32
 800d2b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800d2b4:	2303      	movs	r3, #3
 800d2b6:	e03d      	b.n	800d334 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d2b8:	69fb      	ldr	r3, [r7, #28]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d10b      	bne.n	800d2d6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d2be:	69bb      	ldr	r3, [r7, #24]
 800d2c0:	881b      	ldrh	r3, [r3, #0]
 800d2c2:	461a      	mov	r2, r3
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d2cc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800d2ce:	69bb      	ldr	r3, [r7, #24]
 800d2d0:	3302      	adds	r3, #2
 800d2d2:	61bb      	str	r3, [r7, #24]
 800d2d4:	e007      	b.n	800d2e6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d2d6:	69fb      	ldr	r3, [r7, #28]
 800d2d8:	781a      	ldrb	r2, [r3, #0]
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800d2e0:	69fb      	ldr	r3, [r7, #28]
 800d2e2:	3301      	adds	r3, #1
 800d2e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d2ec:	b29b      	uxth	r3, r3
 800d2ee:	3b01      	subs	r3, #1
 800d2f0:	b29a      	uxth	r2, r3
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d2fe:	b29b      	uxth	r3, r3
 800d300:	2b00      	cmp	r3, #0
 800d302:	d1c8      	bne.n	800d296 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	9300      	str	r3, [sp, #0]
 800d308:	697b      	ldr	r3, [r7, #20]
 800d30a:	2200      	movs	r2, #0
 800d30c:	2140      	movs	r1, #64	@ 0x40
 800d30e:	68f8      	ldr	r0, [r7, #12]
 800d310:	f000 fec8 	bl	800e0a4 <UART_WaitOnFlagUntilTimeout>
 800d314:	4603      	mov	r3, r0
 800d316:	2b00      	cmp	r3, #0
 800d318:	d005      	beq.n	800d326 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	2220      	movs	r2, #32
 800d31e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800d322:	2303      	movs	r3, #3
 800d324:	e006      	b.n	800d334 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	2220      	movs	r2, #32
 800d32a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800d32e:	2300      	movs	r3, #0
 800d330:	e000      	b.n	800d334 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d332:	2302      	movs	r3, #2
  }
}
 800d334:	4618      	mov	r0, r3
 800d336:	3720      	adds	r7, #32
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}

0800d33c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d33c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d340:	b092      	sub	sp, #72	@ 0x48
 800d342:	af00      	add	r7, sp, #0
 800d344:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d346:	2300      	movs	r3, #0
 800d348:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d34c:	697b      	ldr	r3, [r7, #20]
 800d34e:	689a      	ldr	r2, [r3, #8]
 800d350:	697b      	ldr	r3, [r7, #20]
 800d352:	691b      	ldr	r3, [r3, #16]
 800d354:	431a      	orrs	r2, r3
 800d356:	697b      	ldr	r3, [r7, #20]
 800d358:	695b      	ldr	r3, [r3, #20]
 800d35a:	431a      	orrs	r2, r3
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	69db      	ldr	r3, [r3, #28]
 800d360:	4313      	orrs	r3, r2
 800d362:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d364:	697b      	ldr	r3, [r7, #20]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	681a      	ldr	r2, [r3, #0]
 800d36a:	4bbe      	ldr	r3, [pc, #760]	@ (800d664 <UART_SetConfig+0x328>)
 800d36c:	4013      	ands	r3, r2
 800d36e:	697a      	ldr	r2, [r7, #20]
 800d370:	6812      	ldr	r2, [r2, #0]
 800d372:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d374:	430b      	orrs	r3, r1
 800d376:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d378:	697b      	ldr	r3, [r7, #20]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	685b      	ldr	r3, [r3, #4]
 800d37e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d382:	697b      	ldr	r3, [r7, #20]
 800d384:	68da      	ldr	r2, [r3, #12]
 800d386:	697b      	ldr	r3, [r7, #20]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	430a      	orrs	r2, r1
 800d38c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d38e:	697b      	ldr	r3, [r7, #20]
 800d390:	699b      	ldr	r3, [r3, #24]
 800d392:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d394:	697b      	ldr	r3, [r7, #20]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	4ab3      	ldr	r2, [pc, #716]	@ (800d668 <UART_SetConfig+0x32c>)
 800d39a:	4293      	cmp	r3, r2
 800d39c:	d004      	beq.n	800d3a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d39e:	697b      	ldr	r3, [r7, #20]
 800d3a0:	6a1b      	ldr	r3, [r3, #32]
 800d3a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d3a4:	4313      	orrs	r3, r2
 800d3a6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d3a8:	697b      	ldr	r3, [r7, #20]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	689a      	ldr	r2, [r3, #8]
 800d3ae:	4baf      	ldr	r3, [pc, #700]	@ (800d66c <UART_SetConfig+0x330>)
 800d3b0:	4013      	ands	r3, r2
 800d3b2:	697a      	ldr	r2, [r7, #20]
 800d3b4:	6812      	ldr	r2, [r2, #0]
 800d3b6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d3b8:	430b      	orrs	r3, r1
 800d3ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d3bc:	697b      	ldr	r3, [r7, #20]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3c2:	f023 010f 	bic.w	r1, r3, #15
 800d3c6:	697b      	ldr	r3, [r7, #20]
 800d3c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d3ca:	697b      	ldr	r3, [r7, #20]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	430a      	orrs	r2, r1
 800d3d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d3d2:	697b      	ldr	r3, [r7, #20]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	4aa6      	ldr	r2, [pc, #664]	@ (800d670 <UART_SetConfig+0x334>)
 800d3d8:	4293      	cmp	r3, r2
 800d3da:	d177      	bne.n	800d4cc <UART_SetConfig+0x190>
 800d3dc:	4ba5      	ldr	r3, [pc, #660]	@ (800d674 <UART_SetConfig+0x338>)
 800d3de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d3e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d3e4:	2b28      	cmp	r3, #40	@ 0x28
 800d3e6:	d86d      	bhi.n	800d4c4 <UART_SetConfig+0x188>
 800d3e8:	a201      	add	r2, pc, #4	@ (adr r2, 800d3f0 <UART_SetConfig+0xb4>)
 800d3ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3ee:	bf00      	nop
 800d3f0:	0800d495 	.word	0x0800d495
 800d3f4:	0800d4c5 	.word	0x0800d4c5
 800d3f8:	0800d4c5 	.word	0x0800d4c5
 800d3fc:	0800d4c5 	.word	0x0800d4c5
 800d400:	0800d4c5 	.word	0x0800d4c5
 800d404:	0800d4c5 	.word	0x0800d4c5
 800d408:	0800d4c5 	.word	0x0800d4c5
 800d40c:	0800d4c5 	.word	0x0800d4c5
 800d410:	0800d49d 	.word	0x0800d49d
 800d414:	0800d4c5 	.word	0x0800d4c5
 800d418:	0800d4c5 	.word	0x0800d4c5
 800d41c:	0800d4c5 	.word	0x0800d4c5
 800d420:	0800d4c5 	.word	0x0800d4c5
 800d424:	0800d4c5 	.word	0x0800d4c5
 800d428:	0800d4c5 	.word	0x0800d4c5
 800d42c:	0800d4c5 	.word	0x0800d4c5
 800d430:	0800d4a5 	.word	0x0800d4a5
 800d434:	0800d4c5 	.word	0x0800d4c5
 800d438:	0800d4c5 	.word	0x0800d4c5
 800d43c:	0800d4c5 	.word	0x0800d4c5
 800d440:	0800d4c5 	.word	0x0800d4c5
 800d444:	0800d4c5 	.word	0x0800d4c5
 800d448:	0800d4c5 	.word	0x0800d4c5
 800d44c:	0800d4c5 	.word	0x0800d4c5
 800d450:	0800d4ad 	.word	0x0800d4ad
 800d454:	0800d4c5 	.word	0x0800d4c5
 800d458:	0800d4c5 	.word	0x0800d4c5
 800d45c:	0800d4c5 	.word	0x0800d4c5
 800d460:	0800d4c5 	.word	0x0800d4c5
 800d464:	0800d4c5 	.word	0x0800d4c5
 800d468:	0800d4c5 	.word	0x0800d4c5
 800d46c:	0800d4c5 	.word	0x0800d4c5
 800d470:	0800d4b5 	.word	0x0800d4b5
 800d474:	0800d4c5 	.word	0x0800d4c5
 800d478:	0800d4c5 	.word	0x0800d4c5
 800d47c:	0800d4c5 	.word	0x0800d4c5
 800d480:	0800d4c5 	.word	0x0800d4c5
 800d484:	0800d4c5 	.word	0x0800d4c5
 800d488:	0800d4c5 	.word	0x0800d4c5
 800d48c:	0800d4c5 	.word	0x0800d4c5
 800d490:	0800d4bd 	.word	0x0800d4bd
 800d494:	2301      	movs	r3, #1
 800d496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d49a:	e222      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d49c:	2304      	movs	r3, #4
 800d49e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4a2:	e21e      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d4a4:	2308      	movs	r3, #8
 800d4a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4aa:	e21a      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d4ac:	2310      	movs	r3, #16
 800d4ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4b2:	e216      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d4b4:	2320      	movs	r3, #32
 800d4b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4ba:	e212      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d4bc:	2340      	movs	r3, #64	@ 0x40
 800d4be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4c2:	e20e      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d4c4:	2380      	movs	r3, #128	@ 0x80
 800d4c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4ca:	e20a      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d4cc:	697b      	ldr	r3, [r7, #20]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	4a69      	ldr	r2, [pc, #420]	@ (800d678 <UART_SetConfig+0x33c>)
 800d4d2:	4293      	cmp	r3, r2
 800d4d4:	d130      	bne.n	800d538 <UART_SetConfig+0x1fc>
 800d4d6:	4b67      	ldr	r3, [pc, #412]	@ (800d674 <UART_SetConfig+0x338>)
 800d4d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d4da:	f003 0307 	and.w	r3, r3, #7
 800d4de:	2b05      	cmp	r3, #5
 800d4e0:	d826      	bhi.n	800d530 <UART_SetConfig+0x1f4>
 800d4e2:	a201      	add	r2, pc, #4	@ (adr r2, 800d4e8 <UART_SetConfig+0x1ac>)
 800d4e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4e8:	0800d501 	.word	0x0800d501
 800d4ec:	0800d509 	.word	0x0800d509
 800d4f0:	0800d511 	.word	0x0800d511
 800d4f4:	0800d519 	.word	0x0800d519
 800d4f8:	0800d521 	.word	0x0800d521
 800d4fc:	0800d529 	.word	0x0800d529
 800d500:	2300      	movs	r3, #0
 800d502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d506:	e1ec      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d508:	2304      	movs	r3, #4
 800d50a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d50e:	e1e8      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d510:	2308      	movs	r3, #8
 800d512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d516:	e1e4      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d518:	2310      	movs	r3, #16
 800d51a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d51e:	e1e0      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d520:	2320      	movs	r3, #32
 800d522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d526:	e1dc      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d528:	2340      	movs	r3, #64	@ 0x40
 800d52a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d52e:	e1d8      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d530:	2380      	movs	r3, #128	@ 0x80
 800d532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d536:	e1d4      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d538:	697b      	ldr	r3, [r7, #20]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	4a4f      	ldr	r2, [pc, #316]	@ (800d67c <UART_SetConfig+0x340>)
 800d53e:	4293      	cmp	r3, r2
 800d540:	d130      	bne.n	800d5a4 <UART_SetConfig+0x268>
 800d542:	4b4c      	ldr	r3, [pc, #304]	@ (800d674 <UART_SetConfig+0x338>)
 800d544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d546:	f003 0307 	and.w	r3, r3, #7
 800d54a:	2b05      	cmp	r3, #5
 800d54c:	d826      	bhi.n	800d59c <UART_SetConfig+0x260>
 800d54e:	a201      	add	r2, pc, #4	@ (adr r2, 800d554 <UART_SetConfig+0x218>)
 800d550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d554:	0800d56d 	.word	0x0800d56d
 800d558:	0800d575 	.word	0x0800d575
 800d55c:	0800d57d 	.word	0x0800d57d
 800d560:	0800d585 	.word	0x0800d585
 800d564:	0800d58d 	.word	0x0800d58d
 800d568:	0800d595 	.word	0x0800d595
 800d56c:	2300      	movs	r3, #0
 800d56e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d572:	e1b6      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d574:	2304      	movs	r3, #4
 800d576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d57a:	e1b2      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d57c:	2308      	movs	r3, #8
 800d57e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d582:	e1ae      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d584:	2310      	movs	r3, #16
 800d586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d58a:	e1aa      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d58c:	2320      	movs	r3, #32
 800d58e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d592:	e1a6      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d594:	2340      	movs	r3, #64	@ 0x40
 800d596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d59a:	e1a2      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d59c:	2380      	movs	r3, #128	@ 0x80
 800d59e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5a2:	e19e      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d5a4:	697b      	ldr	r3, [r7, #20]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	4a35      	ldr	r2, [pc, #212]	@ (800d680 <UART_SetConfig+0x344>)
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	d130      	bne.n	800d610 <UART_SetConfig+0x2d4>
 800d5ae:	4b31      	ldr	r3, [pc, #196]	@ (800d674 <UART_SetConfig+0x338>)
 800d5b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d5b2:	f003 0307 	and.w	r3, r3, #7
 800d5b6:	2b05      	cmp	r3, #5
 800d5b8:	d826      	bhi.n	800d608 <UART_SetConfig+0x2cc>
 800d5ba:	a201      	add	r2, pc, #4	@ (adr r2, 800d5c0 <UART_SetConfig+0x284>)
 800d5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5c0:	0800d5d9 	.word	0x0800d5d9
 800d5c4:	0800d5e1 	.word	0x0800d5e1
 800d5c8:	0800d5e9 	.word	0x0800d5e9
 800d5cc:	0800d5f1 	.word	0x0800d5f1
 800d5d0:	0800d5f9 	.word	0x0800d5f9
 800d5d4:	0800d601 	.word	0x0800d601
 800d5d8:	2300      	movs	r3, #0
 800d5da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5de:	e180      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d5e0:	2304      	movs	r3, #4
 800d5e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5e6:	e17c      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d5e8:	2308      	movs	r3, #8
 800d5ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5ee:	e178      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d5f0:	2310      	movs	r3, #16
 800d5f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5f6:	e174      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d5f8:	2320      	movs	r3, #32
 800d5fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5fe:	e170      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d600:	2340      	movs	r3, #64	@ 0x40
 800d602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d606:	e16c      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d608:	2380      	movs	r3, #128	@ 0x80
 800d60a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d60e:	e168      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	4a1b      	ldr	r2, [pc, #108]	@ (800d684 <UART_SetConfig+0x348>)
 800d616:	4293      	cmp	r3, r2
 800d618:	d142      	bne.n	800d6a0 <UART_SetConfig+0x364>
 800d61a:	4b16      	ldr	r3, [pc, #88]	@ (800d674 <UART_SetConfig+0x338>)
 800d61c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d61e:	f003 0307 	and.w	r3, r3, #7
 800d622:	2b05      	cmp	r3, #5
 800d624:	d838      	bhi.n	800d698 <UART_SetConfig+0x35c>
 800d626:	a201      	add	r2, pc, #4	@ (adr r2, 800d62c <UART_SetConfig+0x2f0>)
 800d628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d62c:	0800d645 	.word	0x0800d645
 800d630:	0800d64d 	.word	0x0800d64d
 800d634:	0800d655 	.word	0x0800d655
 800d638:	0800d65d 	.word	0x0800d65d
 800d63c:	0800d689 	.word	0x0800d689
 800d640:	0800d691 	.word	0x0800d691
 800d644:	2300      	movs	r3, #0
 800d646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d64a:	e14a      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d64c:	2304      	movs	r3, #4
 800d64e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d652:	e146      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d654:	2308      	movs	r3, #8
 800d656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d65a:	e142      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d65c:	2310      	movs	r3, #16
 800d65e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d662:	e13e      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d664:	cfff69f3 	.word	0xcfff69f3
 800d668:	58000c00 	.word	0x58000c00
 800d66c:	11fff4ff 	.word	0x11fff4ff
 800d670:	40011000 	.word	0x40011000
 800d674:	58024400 	.word	0x58024400
 800d678:	40004400 	.word	0x40004400
 800d67c:	40004800 	.word	0x40004800
 800d680:	40004c00 	.word	0x40004c00
 800d684:	40005000 	.word	0x40005000
 800d688:	2320      	movs	r3, #32
 800d68a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d68e:	e128      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d690:	2340      	movs	r3, #64	@ 0x40
 800d692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d696:	e124      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d698:	2380      	movs	r3, #128	@ 0x80
 800d69a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d69e:	e120      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d6a0:	697b      	ldr	r3, [r7, #20]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	4acb      	ldr	r2, [pc, #812]	@ (800d9d4 <UART_SetConfig+0x698>)
 800d6a6:	4293      	cmp	r3, r2
 800d6a8:	d176      	bne.n	800d798 <UART_SetConfig+0x45c>
 800d6aa:	4bcb      	ldr	r3, [pc, #812]	@ (800d9d8 <UART_SetConfig+0x69c>)
 800d6ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d6ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d6b2:	2b28      	cmp	r3, #40	@ 0x28
 800d6b4:	d86c      	bhi.n	800d790 <UART_SetConfig+0x454>
 800d6b6:	a201      	add	r2, pc, #4	@ (adr r2, 800d6bc <UART_SetConfig+0x380>)
 800d6b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6bc:	0800d761 	.word	0x0800d761
 800d6c0:	0800d791 	.word	0x0800d791
 800d6c4:	0800d791 	.word	0x0800d791
 800d6c8:	0800d791 	.word	0x0800d791
 800d6cc:	0800d791 	.word	0x0800d791
 800d6d0:	0800d791 	.word	0x0800d791
 800d6d4:	0800d791 	.word	0x0800d791
 800d6d8:	0800d791 	.word	0x0800d791
 800d6dc:	0800d769 	.word	0x0800d769
 800d6e0:	0800d791 	.word	0x0800d791
 800d6e4:	0800d791 	.word	0x0800d791
 800d6e8:	0800d791 	.word	0x0800d791
 800d6ec:	0800d791 	.word	0x0800d791
 800d6f0:	0800d791 	.word	0x0800d791
 800d6f4:	0800d791 	.word	0x0800d791
 800d6f8:	0800d791 	.word	0x0800d791
 800d6fc:	0800d771 	.word	0x0800d771
 800d700:	0800d791 	.word	0x0800d791
 800d704:	0800d791 	.word	0x0800d791
 800d708:	0800d791 	.word	0x0800d791
 800d70c:	0800d791 	.word	0x0800d791
 800d710:	0800d791 	.word	0x0800d791
 800d714:	0800d791 	.word	0x0800d791
 800d718:	0800d791 	.word	0x0800d791
 800d71c:	0800d779 	.word	0x0800d779
 800d720:	0800d791 	.word	0x0800d791
 800d724:	0800d791 	.word	0x0800d791
 800d728:	0800d791 	.word	0x0800d791
 800d72c:	0800d791 	.word	0x0800d791
 800d730:	0800d791 	.word	0x0800d791
 800d734:	0800d791 	.word	0x0800d791
 800d738:	0800d791 	.word	0x0800d791
 800d73c:	0800d781 	.word	0x0800d781
 800d740:	0800d791 	.word	0x0800d791
 800d744:	0800d791 	.word	0x0800d791
 800d748:	0800d791 	.word	0x0800d791
 800d74c:	0800d791 	.word	0x0800d791
 800d750:	0800d791 	.word	0x0800d791
 800d754:	0800d791 	.word	0x0800d791
 800d758:	0800d791 	.word	0x0800d791
 800d75c:	0800d789 	.word	0x0800d789
 800d760:	2301      	movs	r3, #1
 800d762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d766:	e0bc      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d768:	2304      	movs	r3, #4
 800d76a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d76e:	e0b8      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d770:	2308      	movs	r3, #8
 800d772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d776:	e0b4      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d778:	2310      	movs	r3, #16
 800d77a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d77e:	e0b0      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d780:	2320      	movs	r3, #32
 800d782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d786:	e0ac      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d788:	2340      	movs	r3, #64	@ 0x40
 800d78a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d78e:	e0a8      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d790:	2380      	movs	r3, #128	@ 0x80
 800d792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d796:	e0a4      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d798:	697b      	ldr	r3, [r7, #20]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	4a8f      	ldr	r2, [pc, #572]	@ (800d9dc <UART_SetConfig+0x6a0>)
 800d79e:	4293      	cmp	r3, r2
 800d7a0:	d130      	bne.n	800d804 <UART_SetConfig+0x4c8>
 800d7a2:	4b8d      	ldr	r3, [pc, #564]	@ (800d9d8 <UART_SetConfig+0x69c>)
 800d7a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d7a6:	f003 0307 	and.w	r3, r3, #7
 800d7aa:	2b05      	cmp	r3, #5
 800d7ac:	d826      	bhi.n	800d7fc <UART_SetConfig+0x4c0>
 800d7ae:	a201      	add	r2, pc, #4	@ (adr r2, 800d7b4 <UART_SetConfig+0x478>)
 800d7b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7b4:	0800d7cd 	.word	0x0800d7cd
 800d7b8:	0800d7d5 	.word	0x0800d7d5
 800d7bc:	0800d7dd 	.word	0x0800d7dd
 800d7c0:	0800d7e5 	.word	0x0800d7e5
 800d7c4:	0800d7ed 	.word	0x0800d7ed
 800d7c8:	0800d7f5 	.word	0x0800d7f5
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7d2:	e086      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d7d4:	2304      	movs	r3, #4
 800d7d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7da:	e082      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d7dc:	2308      	movs	r3, #8
 800d7de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7e2:	e07e      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d7e4:	2310      	movs	r3, #16
 800d7e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7ea:	e07a      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d7ec:	2320      	movs	r3, #32
 800d7ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7f2:	e076      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d7f4:	2340      	movs	r3, #64	@ 0x40
 800d7f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7fa:	e072      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d7fc:	2380      	movs	r3, #128	@ 0x80
 800d7fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d802:	e06e      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d804:	697b      	ldr	r3, [r7, #20]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	4a75      	ldr	r2, [pc, #468]	@ (800d9e0 <UART_SetConfig+0x6a4>)
 800d80a:	4293      	cmp	r3, r2
 800d80c:	d130      	bne.n	800d870 <UART_SetConfig+0x534>
 800d80e:	4b72      	ldr	r3, [pc, #456]	@ (800d9d8 <UART_SetConfig+0x69c>)
 800d810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d812:	f003 0307 	and.w	r3, r3, #7
 800d816:	2b05      	cmp	r3, #5
 800d818:	d826      	bhi.n	800d868 <UART_SetConfig+0x52c>
 800d81a:	a201      	add	r2, pc, #4	@ (adr r2, 800d820 <UART_SetConfig+0x4e4>)
 800d81c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d820:	0800d839 	.word	0x0800d839
 800d824:	0800d841 	.word	0x0800d841
 800d828:	0800d849 	.word	0x0800d849
 800d82c:	0800d851 	.word	0x0800d851
 800d830:	0800d859 	.word	0x0800d859
 800d834:	0800d861 	.word	0x0800d861
 800d838:	2300      	movs	r3, #0
 800d83a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d83e:	e050      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d840:	2304      	movs	r3, #4
 800d842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d846:	e04c      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d848:	2308      	movs	r3, #8
 800d84a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d84e:	e048      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d850:	2310      	movs	r3, #16
 800d852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d856:	e044      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d858:	2320      	movs	r3, #32
 800d85a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d85e:	e040      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d860:	2340      	movs	r3, #64	@ 0x40
 800d862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d866:	e03c      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d868:	2380      	movs	r3, #128	@ 0x80
 800d86a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d86e:	e038      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	4a5b      	ldr	r2, [pc, #364]	@ (800d9e4 <UART_SetConfig+0x6a8>)
 800d876:	4293      	cmp	r3, r2
 800d878:	d130      	bne.n	800d8dc <UART_SetConfig+0x5a0>
 800d87a:	4b57      	ldr	r3, [pc, #348]	@ (800d9d8 <UART_SetConfig+0x69c>)
 800d87c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d87e:	f003 0307 	and.w	r3, r3, #7
 800d882:	2b05      	cmp	r3, #5
 800d884:	d826      	bhi.n	800d8d4 <UART_SetConfig+0x598>
 800d886:	a201      	add	r2, pc, #4	@ (adr r2, 800d88c <UART_SetConfig+0x550>)
 800d888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d88c:	0800d8a5 	.word	0x0800d8a5
 800d890:	0800d8ad 	.word	0x0800d8ad
 800d894:	0800d8b5 	.word	0x0800d8b5
 800d898:	0800d8bd 	.word	0x0800d8bd
 800d89c:	0800d8c5 	.word	0x0800d8c5
 800d8a0:	0800d8cd 	.word	0x0800d8cd
 800d8a4:	2302      	movs	r3, #2
 800d8a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8aa:	e01a      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d8ac:	2304      	movs	r3, #4
 800d8ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8b2:	e016      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d8b4:	2308      	movs	r3, #8
 800d8b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8ba:	e012      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d8bc:	2310      	movs	r3, #16
 800d8be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8c2:	e00e      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d8c4:	2320      	movs	r3, #32
 800d8c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8ca:	e00a      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d8cc:	2340      	movs	r3, #64	@ 0x40
 800d8ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8d2:	e006      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d8d4:	2380      	movs	r3, #128	@ 0x80
 800d8d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8da:	e002      	b.n	800d8e2 <UART_SetConfig+0x5a6>
 800d8dc:	2380      	movs	r3, #128	@ 0x80
 800d8de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	4a3f      	ldr	r2, [pc, #252]	@ (800d9e4 <UART_SetConfig+0x6a8>)
 800d8e8:	4293      	cmp	r3, r2
 800d8ea:	f040 80f8 	bne.w	800dade <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d8ee:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d8f2:	2b20      	cmp	r3, #32
 800d8f4:	dc46      	bgt.n	800d984 <UART_SetConfig+0x648>
 800d8f6:	2b02      	cmp	r3, #2
 800d8f8:	f2c0 8082 	blt.w	800da00 <UART_SetConfig+0x6c4>
 800d8fc:	3b02      	subs	r3, #2
 800d8fe:	2b1e      	cmp	r3, #30
 800d900:	d87e      	bhi.n	800da00 <UART_SetConfig+0x6c4>
 800d902:	a201      	add	r2, pc, #4	@ (adr r2, 800d908 <UART_SetConfig+0x5cc>)
 800d904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d908:	0800d98b 	.word	0x0800d98b
 800d90c:	0800da01 	.word	0x0800da01
 800d910:	0800d993 	.word	0x0800d993
 800d914:	0800da01 	.word	0x0800da01
 800d918:	0800da01 	.word	0x0800da01
 800d91c:	0800da01 	.word	0x0800da01
 800d920:	0800d9a3 	.word	0x0800d9a3
 800d924:	0800da01 	.word	0x0800da01
 800d928:	0800da01 	.word	0x0800da01
 800d92c:	0800da01 	.word	0x0800da01
 800d930:	0800da01 	.word	0x0800da01
 800d934:	0800da01 	.word	0x0800da01
 800d938:	0800da01 	.word	0x0800da01
 800d93c:	0800da01 	.word	0x0800da01
 800d940:	0800d9b3 	.word	0x0800d9b3
 800d944:	0800da01 	.word	0x0800da01
 800d948:	0800da01 	.word	0x0800da01
 800d94c:	0800da01 	.word	0x0800da01
 800d950:	0800da01 	.word	0x0800da01
 800d954:	0800da01 	.word	0x0800da01
 800d958:	0800da01 	.word	0x0800da01
 800d95c:	0800da01 	.word	0x0800da01
 800d960:	0800da01 	.word	0x0800da01
 800d964:	0800da01 	.word	0x0800da01
 800d968:	0800da01 	.word	0x0800da01
 800d96c:	0800da01 	.word	0x0800da01
 800d970:	0800da01 	.word	0x0800da01
 800d974:	0800da01 	.word	0x0800da01
 800d978:	0800da01 	.word	0x0800da01
 800d97c:	0800da01 	.word	0x0800da01
 800d980:	0800d9f3 	.word	0x0800d9f3
 800d984:	2b40      	cmp	r3, #64	@ 0x40
 800d986:	d037      	beq.n	800d9f8 <UART_SetConfig+0x6bc>
 800d988:	e03a      	b.n	800da00 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d98a:	f7fd fac9 	bl	800af20 <HAL_RCCEx_GetD3PCLK1Freq>
 800d98e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d990:	e03c      	b.n	800da0c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d992:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d996:	4618      	mov	r0, r3
 800d998:	f7fd fad8 	bl	800af4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d99c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d99e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d9a0:	e034      	b.n	800da0c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d9a2:	f107 0318 	add.w	r3, r7, #24
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f7fd fc24 	bl	800b1f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d9ac:	69fb      	ldr	r3, [r7, #28]
 800d9ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d9b0:	e02c      	b.n	800da0c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d9b2:	4b09      	ldr	r3, [pc, #36]	@ (800d9d8 <UART_SetConfig+0x69c>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	f003 0320 	and.w	r3, r3, #32
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d016      	beq.n	800d9ec <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d9be:	4b06      	ldr	r3, [pc, #24]	@ (800d9d8 <UART_SetConfig+0x69c>)
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	08db      	lsrs	r3, r3, #3
 800d9c4:	f003 0303 	and.w	r3, r3, #3
 800d9c8:	4a07      	ldr	r2, [pc, #28]	@ (800d9e8 <UART_SetConfig+0x6ac>)
 800d9ca:	fa22 f303 	lsr.w	r3, r2, r3
 800d9ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d9d0:	e01c      	b.n	800da0c <UART_SetConfig+0x6d0>
 800d9d2:	bf00      	nop
 800d9d4:	40011400 	.word	0x40011400
 800d9d8:	58024400 	.word	0x58024400
 800d9dc:	40007800 	.word	0x40007800
 800d9e0:	40007c00 	.word	0x40007c00
 800d9e4:	58000c00 	.word	0x58000c00
 800d9e8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d9ec:	4b9d      	ldr	r3, [pc, #628]	@ (800dc64 <UART_SetConfig+0x928>)
 800d9ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d9f0:	e00c      	b.n	800da0c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d9f2:	4b9d      	ldr	r3, [pc, #628]	@ (800dc68 <UART_SetConfig+0x92c>)
 800d9f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d9f6:	e009      	b.n	800da0c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d9f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d9fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d9fe:	e005      	b.n	800da0c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800da00:	2300      	movs	r3, #0
 800da02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800da04:	2301      	movs	r3, #1
 800da06:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800da0a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800da0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da0e:	2b00      	cmp	r3, #0
 800da10:	f000 81de 	beq.w	800ddd0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800da14:	697b      	ldr	r3, [r7, #20]
 800da16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da18:	4a94      	ldr	r2, [pc, #592]	@ (800dc6c <UART_SetConfig+0x930>)
 800da1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da1e:	461a      	mov	r2, r3
 800da20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da22:	fbb3 f3f2 	udiv	r3, r3, r2
 800da26:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	685a      	ldr	r2, [r3, #4]
 800da2c:	4613      	mov	r3, r2
 800da2e:	005b      	lsls	r3, r3, #1
 800da30:	4413      	add	r3, r2
 800da32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da34:	429a      	cmp	r2, r3
 800da36:	d305      	bcc.n	800da44 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800da38:	697b      	ldr	r3, [r7, #20]
 800da3a:	685b      	ldr	r3, [r3, #4]
 800da3c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800da3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da40:	429a      	cmp	r2, r3
 800da42:	d903      	bls.n	800da4c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800da44:	2301      	movs	r3, #1
 800da46:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800da4a:	e1c1      	b.n	800ddd0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da4e:	2200      	movs	r2, #0
 800da50:	60bb      	str	r3, [r7, #8]
 800da52:	60fa      	str	r2, [r7, #12]
 800da54:	697b      	ldr	r3, [r7, #20]
 800da56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da58:	4a84      	ldr	r2, [pc, #528]	@ (800dc6c <UART_SetConfig+0x930>)
 800da5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da5e:	b29b      	uxth	r3, r3
 800da60:	2200      	movs	r2, #0
 800da62:	603b      	str	r3, [r7, #0]
 800da64:	607a      	str	r2, [r7, #4]
 800da66:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800da6e:	f7f2 fc8f 	bl	8000390 <__aeabi_uldivmod>
 800da72:	4602      	mov	r2, r0
 800da74:	460b      	mov	r3, r1
 800da76:	4610      	mov	r0, r2
 800da78:	4619      	mov	r1, r3
 800da7a:	f04f 0200 	mov.w	r2, #0
 800da7e:	f04f 0300 	mov.w	r3, #0
 800da82:	020b      	lsls	r3, r1, #8
 800da84:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800da88:	0202      	lsls	r2, r0, #8
 800da8a:	6979      	ldr	r1, [r7, #20]
 800da8c:	6849      	ldr	r1, [r1, #4]
 800da8e:	0849      	lsrs	r1, r1, #1
 800da90:	2000      	movs	r0, #0
 800da92:	460c      	mov	r4, r1
 800da94:	4605      	mov	r5, r0
 800da96:	eb12 0804 	adds.w	r8, r2, r4
 800da9a:	eb43 0905 	adc.w	r9, r3, r5
 800da9e:	697b      	ldr	r3, [r7, #20]
 800daa0:	685b      	ldr	r3, [r3, #4]
 800daa2:	2200      	movs	r2, #0
 800daa4:	469a      	mov	sl, r3
 800daa6:	4693      	mov	fp, r2
 800daa8:	4652      	mov	r2, sl
 800daaa:	465b      	mov	r3, fp
 800daac:	4640      	mov	r0, r8
 800daae:	4649      	mov	r1, r9
 800dab0:	f7f2 fc6e 	bl	8000390 <__aeabi_uldivmod>
 800dab4:	4602      	mov	r2, r0
 800dab6:	460b      	mov	r3, r1
 800dab8:	4613      	mov	r3, r2
 800daba:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dabc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dabe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dac2:	d308      	bcc.n	800dad6 <UART_SetConfig+0x79a>
 800dac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dac6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800daca:	d204      	bcs.n	800dad6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dad2:	60da      	str	r2, [r3, #12]
 800dad4:	e17c      	b.n	800ddd0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800dad6:	2301      	movs	r3, #1
 800dad8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800dadc:	e178      	b.n	800ddd0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dade:	697b      	ldr	r3, [r7, #20]
 800dae0:	69db      	ldr	r3, [r3, #28]
 800dae2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dae6:	f040 80c5 	bne.w	800dc74 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800daea:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800daee:	2b20      	cmp	r3, #32
 800daf0:	dc48      	bgt.n	800db84 <UART_SetConfig+0x848>
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	db7b      	blt.n	800dbee <UART_SetConfig+0x8b2>
 800daf6:	2b20      	cmp	r3, #32
 800daf8:	d879      	bhi.n	800dbee <UART_SetConfig+0x8b2>
 800dafa:	a201      	add	r2, pc, #4	@ (adr r2, 800db00 <UART_SetConfig+0x7c4>)
 800dafc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db00:	0800db8b 	.word	0x0800db8b
 800db04:	0800db93 	.word	0x0800db93
 800db08:	0800dbef 	.word	0x0800dbef
 800db0c:	0800dbef 	.word	0x0800dbef
 800db10:	0800db9b 	.word	0x0800db9b
 800db14:	0800dbef 	.word	0x0800dbef
 800db18:	0800dbef 	.word	0x0800dbef
 800db1c:	0800dbef 	.word	0x0800dbef
 800db20:	0800dbab 	.word	0x0800dbab
 800db24:	0800dbef 	.word	0x0800dbef
 800db28:	0800dbef 	.word	0x0800dbef
 800db2c:	0800dbef 	.word	0x0800dbef
 800db30:	0800dbef 	.word	0x0800dbef
 800db34:	0800dbef 	.word	0x0800dbef
 800db38:	0800dbef 	.word	0x0800dbef
 800db3c:	0800dbef 	.word	0x0800dbef
 800db40:	0800dbbb 	.word	0x0800dbbb
 800db44:	0800dbef 	.word	0x0800dbef
 800db48:	0800dbef 	.word	0x0800dbef
 800db4c:	0800dbef 	.word	0x0800dbef
 800db50:	0800dbef 	.word	0x0800dbef
 800db54:	0800dbef 	.word	0x0800dbef
 800db58:	0800dbef 	.word	0x0800dbef
 800db5c:	0800dbef 	.word	0x0800dbef
 800db60:	0800dbef 	.word	0x0800dbef
 800db64:	0800dbef 	.word	0x0800dbef
 800db68:	0800dbef 	.word	0x0800dbef
 800db6c:	0800dbef 	.word	0x0800dbef
 800db70:	0800dbef 	.word	0x0800dbef
 800db74:	0800dbef 	.word	0x0800dbef
 800db78:	0800dbef 	.word	0x0800dbef
 800db7c:	0800dbef 	.word	0x0800dbef
 800db80:	0800dbe1 	.word	0x0800dbe1
 800db84:	2b40      	cmp	r3, #64	@ 0x40
 800db86:	d02e      	beq.n	800dbe6 <UART_SetConfig+0x8aa>
 800db88:	e031      	b.n	800dbee <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800db8a:	f7fb fa13 	bl	8008fb4 <HAL_RCC_GetPCLK1Freq>
 800db8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800db90:	e033      	b.n	800dbfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800db92:	f7fb fa25 	bl	8008fe0 <HAL_RCC_GetPCLK2Freq>
 800db96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800db98:	e02f      	b.n	800dbfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800db9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800db9e:	4618      	mov	r0, r3
 800dba0:	f7fd f9d4 	bl	800af4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dba8:	e027      	b.n	800dbfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dbaa:	f107 0318 	add.w	r3, r7, #24
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f7fd fb20 	bl	800b1f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dbb4:	69fb      	ldr	r3, [r7, #28]
 800dbb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dbb8:	e01f      	b.n	800dbfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dbba:	4b2d      	ldr	r3, [pc, #180]	@ (800dc70 <UART_SetConfig+0x934>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	f003 0320 	and.w	r3, r3, #32
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d009      	beq.n	800dbda <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dbc6:	4b2a      	ldr	r3, [pc, #168]	@ (800dc70 <UART_SetConfig+0x934>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	08db      	lsrs	r3, r3, #3
 800dbcc:	f003 0303 	and.w	r3, r3, #3
 800dbd0:	4a24      	ldr	r2, [pc, #144]	@ (800dc64 <UART_SetConfig+0x928>)
 800dbd2:	fa22 f303 	lsr.w	r3, r2, r3
 800dbd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dbd8:	e00f      	b.n	800dbfa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800dbda:	4b22      	ldr	r3, [pc, #136]	@ (800dc64 <UART_SetConfig+0x928>)
 800dbdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dbde:	e00c      	b.n	800dbfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dbe0:	4b21      	ldr	r3, [pc, #132]	@ (800dc68 <UART_SetConfig+0x92c>)
 800dbe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dbe4:	e009      	b.n	800dbfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dbe6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dbea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dbec:	e005      	b.n	800dbfa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800dbf2:	2301      	movs	r3, #1
 800dbf4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800dbf8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dbfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	f000 80e7 	beq.w	800ddd0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dc02:	697b      	ldr	r3, [r7, #20]
 800dc04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc06:	4a19      	ldr	r2, [pc, #100]	@ (800dc6c <UART_SetConfig+0x930>)
 800dc08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc0c:	461a      	mov	r2, r3
 800dc0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc10:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc14:	005a      	lsls	r2, r3, #1
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	685b      	ldr	r3, [r3, #4]
 800dc1a:	085b      	lsrs	r3, r3, #1
 800dc1c:	441a      	add	r2, r3
 800dc1e:	697b      	ldr	r3, [r7, #20]
 800dc20:	685b      	ldr	r3, [r3, #4]
 800dc22:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc26:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dc28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc2a:	2b0f      	cmp	r3, #15
 800dc2c:	d916      	bls.n	800dc5c <UART_SetConfig+0x920>
 800dc2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dc34:	d212      	bcs.n	800dc5c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dc36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc38:	b29b      	uxth	r3, r3
 800dc3a:	f023 030f 	bic.w	r3, r3, #15
 800dc3e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dc40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc42:	085b      	lsrs	r3, r3, #1
 800dc44:	b29b      	uxth	r3, r3
 800dc46:	f003 0307 	and.w	r3, r3, #7
 800dc4a:	b29a      	uxth	r2, r3
 800dc4c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800dc4e:	4313      	orrs	r3, r2
 800dc50:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800dc52:	697b      	ldr	r3, [r7, #20]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800dc58:	60da      	str	r2, [r3, #12]
 800dc5a:	e0b9      	b.n	800ddd0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800dc62:	e0b5      	b.n	800ddd0 <UART_SetConfig+0xa94>
 800dc64:	03d09000 	.word	0x03d09000
 800dc68:	003d0900 	.word	0x003d0900
 800dc6c:	08015024 	.word	0x08015024
 800dc70:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800dc74:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800dc78:	2b20      	cmp	r3, #32
 800dc7a:	dc49      	bgt.n	800dd10 <UART_SetConfig+0x9d4>
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	db7c      	blt.n	800dd7a <UART_SetConfig+0xa3e>
 800dc80:	2b20      	cmp	r3, #32
 800dc82:	d87a      	bhi.n	800dd7a <UART_SetConfig+0xa3e>
 800dc84:	a201      	add	r2, pc, #4	@ (adr r2, 800dc8c <UART_SetConfig+0x950>)
 800dc86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc8a:	bf00      	nop
 800dc8c:	0800dd17 	.word	0x0800dd17
 800dc90:	0800dd1f 	.word	0x0800dd1f
 800dc94:	0800dd7b 	.word	0x0800dd7b
 800dc98:	0800dd7b 	.word	0x0800dd7b
 800dc9c:	0800dd27 	.word	0x0800dd27
 800dca0:	0800dd7b 	.word	0x0800dd7b
 800dca4:	0800dd7b 	.word	0x0800dd7b
 800dca8:	0800dd7b 	.word	0x0800dd7b
 800dcac:	0800dd37 	.word	0x0800dd37
 800dcb0:	0800dd7b 	.word	0x0800dd7b
 800dcb4:	0800dd7b 	.word	0x0800dd7b
 800dcb8:	0800dd7b 	.word	0x0800dd7b
 800dcbc:	0800dd7b 	.word	0x0800dd7b
 800dcc0:	0800dd7b 	.word	0x0800dd7b
 800dcc4:	0800dd7b 	.word	0x0800dd7b
 800dcc8:	0800dd7b 	.word	0x0800dd7b
 800dccc:	0800dd47 	.word	0x0800dd47
 800dcd0:	0800dd7b 	.word	0x0800dd7b
 800dcd4:	0800dd7b 	.word	0x0800dd7b
 800dcd8:	0800dd7b 	.word	0x0800dd7b
 800dcdc:	0800dd7b 	.word	0x0800dd7b
 800dce0:	0800dd7b 	.word	0x0800dd7b
 800dce4:	0800dd7b 	.word	0x0800dd7b
 800dce8:	0800dd7b 	.word	0x0800dd7b
 800dcec:	0800dd7b 	.word	0x0800dd7b
 800dcf0:	0800dd7b 	.word	0x0800dd7b
 800dcf4:	0800dd7b 	.word	0x0800dd7b
 800dcf8:	0800dd7b 	.word	0x0800dd7b
 800dcfc:	0800dd7b 	.word	0x0800dd7b
 800dd00:	0800dd7b 	.word	0x0800dd7b
 800dd04:	0800dd7b 	.word	0x0800dd7b
 800dd08:	0800dd7b 	.word	0x0800dd7b
 800dd0c:	0800dd6d 	.word	0x0800dd6d
 800dd10:	2b40      	cmp	r3, #64	@ 0x40
 800dd12:	d02e      	beq.n	800dd72 <UART_SetConfig+0xa36>
 800dd14:	e031      	b.n	800dd7a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dd16:	f7fb f94d 	bl	8008fb4 <HAL_RCC_GetPCLK1Freq>
 800dd1a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dd1c:	e033      	b.n	800dd86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dd1e:	f7fb f95f 	bl	8008fe0 <HAL_RCC_GetPCLK2Freq>
 800dd22:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dd24:	e02f      	b.n	800dd86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dd26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	f7fd f90e 	bl	800af4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dd30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd34:	e027      	b.n	800dd86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dd36:	f107 0318 	add.w	r3, r7, #24
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	f7fd fa5a 	bl	800b1f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dd40:	69fb      	ldr	r3, [r7, #28]
 800dd42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd44:	e01f      	b.n	800dd86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dd46:	4b2d      	ldr	r3, [pc, #180]	@ (800ddfc <UART_SetConfig+0xac0>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	f003 0320 	and.w	r3, r3, #32
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d009      	beq.n	800dd66 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dd52:	4b2a      	ldr	r3, [pc, #168]	@ (800ddfc <UART_SetConfig+0xac0>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	08db      	lsrs	r3, r3, #3
 800dd58:	f003 0303 	and.w	r3, r3, #3
 800dd5c:	4a28      	ldr	r2, [pc, #160]	@ (800de00 <UART_SetConfig+0xac4>)
 800dd5e:	fa22 f303 	lsr.w	r3, r2, r3
 800dd62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dd64:	e00f      	b.n	800dd86 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800dd66:	4b26      	ldr	r3, [pc, #152]	@ (800de00 <UART_SetConfig+0xac4>)
 800dd68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd6a:	e00c      	b.n	800dd86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dd6c:	4b25      	ldr	r3, [pc, #148]	@ (800de04 <UART_SetConfig+0xac8>)
 800dd6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd70:	e009      	b.n	800dd86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dd72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dd76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd78:	e005      	b.n	800dd86 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800dd7e:	2301      	movs	r3, #1
 800dd80:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800dd84:	bf00      	nop
    }

    if (pclk != 0U)
 800dd86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d021      	beq.n	800ddd0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dd8c:	697b      	ldr	r3, [r7, #20]
 800dd8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd90:	4a1d      	ldr	r2, [pc, #116]	@ (800de08 <UART_SetConfig+0xacc>)
 800dd92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dd96:	461a      	mov	r2, r3
 800dd98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd9a:	fbb3 f2f2 	udiv	r2, r3, r2
 800dd9e:	697b      	ldr	r3, [r7, #20]
 800dda0:	685b      	ldr	r3, [r3, #4]
 800dda2:	085b      	lsrs	r3, r3, #1
 800dda4:	441a      	add	r2, r3
 800dda6:	697b      	ldr	r3, [r7, #20]
 800dda8:	685b      	ldr	r3, [r3, #4]
 800ddaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddae:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ddb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddb2:	2b0f      	cmp	r3, #15
 800ddb4:	d909      	bls.n	800ddca <UART_SetConfig+0xa8e>
 800ddb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ddbc:	d205      	bcs.n	800ddca <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ddbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddc0:	b29a      	uxth	r2, r3
 800ddc2:	697b      	ldr	r3, [r7, #20]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	60da      	str	r2, [r3, #12]
 800ddc8:	e002      	b.n	800ddd0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ddca:	2301      	movs	r3, #1
 800ddcc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ddd0:	697b      	ldr	r3, [r7, #20]
 800ddd2:	2201      	movs	r2, #1
 800ddd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ddd8:	697b      	ldr	r3, [r7, #20]
 800ddda:	2201      	movs	r2, #1
 800dddc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dde0:	697b      	ldr	r3, [r7, #20]
 800dde2:	2200      	movs	r2, #0
 800dde4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	2200      	movs	r2, #0
 800ddea:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ddec:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	3748      	adds	r7, #72	@ 0x48
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ddfa:	bf00      	nop
 800ddfc:	58024400 	.word	0x58024400
 800de00:	03d09000 	.word	0x03d09000
 800de04:	003d0900 	.word	0x003d0900
 800de08:	08015024 	.word	0x08015024

0800de0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800de0c:	b480      	push	{r7}
 800de0e:	b083      	sub	sp, #12
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de18:	f003 0308 	and.w	r3, r3, #8
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d00a      	beq.n	800de36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	685b      	ldr	r3, [r3, #4]
 800de26:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	430a      	orrs	r2, r1
 800de34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de3a:	f003 0301 	and.w	r3, r3, #1
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d00a      	beq.n	800de58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	685b      	ldr	r3, [r3, #4]
 800de48:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	430a      	orrs	r2, r1
 800de56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de5c:	f003 0302 	and.w	r3, r3, #2
 800de60:	2b00      	cmp	r3, #0
 800de62:	d00a      	beq.n	800de7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	685b      	ldr	r3, [r3, #4]
 800de6a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	430a      	orrs	r2, r1
 800de78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de7e:	f003 0304 	and.w	r3, r3, #4
 800de82:	2b00      	cmp	r3, #0
 800de84:	d00a      	beq.n	800de9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	685b      	ldr	r3, [r3, #4]
 800de8c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	430a      	orrs	r2, r1
 800de9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dea0:	f003 0310 	and.w	r3, r3, #16
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d00a      	beq.n	800debe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	689b      	ldr	r3, [r3, #8]
 800deae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	430a      	orrs	r2, r1
 800debc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dec2:	f003 0320 	and.w	r3, r3, #32
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d00a      	beq.n	800dee0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	689b      	ldr	r3, [r3, #8]
 800ded0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	430a      	orrs	r2, r1
 800dede:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d01a      	beq.n	800df22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	685b      	ldr	r3, [r3, #4]
 800def2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	430a      	orrs	r2, r1
 800df00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800df06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800df0a:	d10a      	bne.n	800df22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	685b      	ldr	r3, [r3, #4]
 800df12:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	430a      	orrs	r2, r1
 800df20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d00a      	beq.n	800df44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	685b      	ldr	r3, [r3, #4]
 800df34:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	430a      	orrs	r2, r1
 800df42:	605a      	str	r2, [r3, #4]
  }
}
 800df44:	bf00      	nop
 800df46:	370c      	adds	r7, #12
 800df48:	46bd      	mov	sp, r7
 800df4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4e:	4770      	bx	lr

0800df50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b098      	sub	sp, #96	@ 0x60
 800df54:	af02      	add	r7, sp, #8
 800df56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2200      	movs	r2, #0
 800df5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800df60:	f7f4 fd66 	bl	8002a30 <HAL_GetTick>
 800df64:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	f003 0308 	and.w	r3, r3, #8
 800df70:	2b08      	cmp	r3, #8
 800df72:	d12f      	bne.n	800dfd4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800df74:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800df78:	9300      	str	r3, [sp, #0]
 800df7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800df7c:	2200      	movs	r2, #0
 800df7e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f000 f88e 	bl	800e0a4 <UART_WaitOnFlagUntilTimeout>
 800df88:	4603      	mov	r3, r0
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d022      	beq.n	800dfd4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df96:	e853 3f00 	ldrex	r3, [r3]
 800df9a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800df9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dfa2:	653b      	str	r3, [r7, #80]	@ 0x50
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	461a      	mov	r2, r3
 800dfaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dfac:	647b      	str	r3, [r7, #68]	@ 0x44
 800dfae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfb0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dfb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dfb4:	e841 2300 	strex	r3, r2, [r1]
 800dfb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800dfba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d1e6      	bne.n	800df8e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2220      	movs	r2, #32
 800dfc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	2200      	movs	r2, #0
 800dfcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dfd0:	2303      	movs	r3, #3
 800dfd2:	e063      	b.n	800e09c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	f003 0304 	and.w	r3, r3, #4
 800dfde:	2b04      	cmp	r3, #4
 800dfe0:	d149      	bne.n	800e076 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dfe2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800dfe6:	9300      	str	r3, [sp, #0]
 800dfe8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dfea:	2200      	movs	r2, #0
 800dfec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800dff0:	6878      	ldr	r0, [r7, #4]
 800dff2:	f000 f857 	bl	800e0a4 <UART_WaitOnFlagUntilTimeout>
 800dff6:	4603      	mov	r3, r0
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d03c      	beq.n	800e076 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e004:	e853 3f00 	ldrex	r3, [r3]
 800e008:	623b      	str	r3, [r7, #32]
   return(result);
 800e00a:	6a3b      	ldr	r3, [r7, #32]
 800e00c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e010:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	461a      	mov	r2, r3
 800e018:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e01a:	633b      	str	r3, [r7, #48]	@ 0x30
 800e01c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e01e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e020:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e022:	e841 2300 	strex	r3, r2, [r1]
 800e026:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d1e6      	bne.n	800dffc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	3308      	adds	r3, #8
 800e034:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e036:	693b      	ldr	r3, [r7, #16]
 800e038:	e853 3f00 	ldrex	r3, [r3]
 800e03c:	60fb      	str	r3, [r7, #12]
   return(result);
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	f023 0301 	bic.w	r3, r3, #1
 800e044:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	3308      	adds	r3, #8
 800e04c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e04e:	61fa      	str	r2, [r7, #28]
 800e050:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e052:	69b9      	ldr	r1, [r7, #24]
 800e054:	69fa      	ldr	r2, [r7, #28]
 800e056:	e841 2300 	strex	r3, r2, [r1]
 800e05a:	617b      	str	r3, [r7, #20]
   return(result);
 800e05c:	697b      	ldr	r3, [r7, #20]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d1e5      	bne.n	800e02e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2220      	movs	r2, #32
 800e066:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	2200      	movs	r2, #0
 800e06e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e072:	2303      	movs	r3, #3
 800e074:	e012      	b.n	800e09c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	2220      	movs	r2, #32
 800e07a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	2220      	movs	r2, #32
 800e082:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	2200      	movs	r2, #0
 800e08a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2200      	movs	r2, #0
 800e090:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2200      	movs	r2, #0
 800e096:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e09a:	2300      	movs	r3, #0
}
 800e09c:	4618      	mov	r0, r3
 800e09e:	3758      	adds	r7, #88	@ 0x58
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	bd80      	pop	{r7, pc}

0800e0a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b084      	sub	sp, #16
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	60f8      	str	r0, [r7, #12]
 800e0ac:	60b9      	str	r1, [r7, #8]
 800e0ae:	603b      	str	r3, [r7, #0]
 800e0b0:	4613      	mov	r3, r2
 800e0b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e0b4:	e04f      	b.n	800e156 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e0b6:	69bb      	ldr	r3, [r7, #24]
 800e0b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0bc:	d04b      	beq.n	800e156 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e0be:	f7f4 fcb7 	bl	8002a30 <HAL_GetTick>
 800e0c2:	4602      	mov	r2, r0
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	1ad3      	subs	r3, r2, r3
 800e0c8:	69ba      	ldr	r2, [r7, #24]
 800e0ca:	429a      	cmp	r2, r3
 800e0cc:	d302      	bcc.n	800e0d4 <UART_WaitOnFlagUntilTimeout+0x30>
 800e0ce:	69bb      	ldr	r3, [r7, #24]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d101      	bne.n	800e0d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e0d4:	2303      	movs	r3, #3
 800e0d6:	e04e      	b.n	800e176 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	f003 0304 	and.w	r3, r3, #4
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d037      	beq.n	800e156 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	2b80      	cmp	r3, #128	@ 0x80
 800e0ea:	d034      	beq.n	800e156 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e0ec:	68bb      	ldr	r3, [r7, #8]
 800e0ee:	2b40      	cmp	r3, #64	@ 0x40
 800e0f0:	d031      	beq.n	800e156 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	69db      	ldr	r3, [r3, #28]
 800e0f8:	f003 0308 	and.w	r3, r3, #8
 800e0fc:	2b08      	cmp	r3, #8
 800e0fe:	d110      	bne.n	800e122 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	2208      	movs	r2, #8
 800e106:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e108:	68f8      	ldr	r0, [r7, #12]
 800e10a:	f000 f839 	bl	800e180 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	2208      	movs	r2, #8
 800e112:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	2200      	movs	r2, #0
 800e11a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e11e:	2301      	movs	r3, #1
 800e120:	e029      	b.n	800e176 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	69db      	ldr	r3, [r3, #28]
 800e128:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e12c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e130:	d111      	bne.n	800e156 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e13a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e13c:	68f8      	ldr	r0, [r7, #12]
 800e13e:	f000 f81f 	bl	800e180 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	2220      	movs	r2, #32
 800e146:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	2200      	movs	r2, #0
 800e14e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e152:	2303      	movs	r3, #3
 800e154:	e00f      	b.n	800e176 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	69da      	ldr	r2, [r3, #28]
 800e15c:	68bb      	ldr	r3, [r7, #8]
 800e15e:	4013      	ands	r3, r2
 800e160:	68ba      	ldr	r2, [r7, #8]
 800e162:	429a      	cmp	r2, r3
 800e164:	bf0c      	ite	eq
 800e166:	2301      	moveq	r3, #1
 800e168:	2300      	movne	r3, #0
 800e16a:	b2db      	uxtb	r3, r3
 800e16c:	461a      	mov	r2, r3
 800e16e:	79fb      	ldrb	r3, [r7, #7]
 800e170:	429a      	cmp	r2, r3
 800e172:	d0a0      	beq.n	800e0b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e174:	2300      	movs	r3, #0
}
 800e176:	4618      	mov	r0, r3
 800e178:	3710      	adds	r7, #16
 800e17a:	46bd      	mov	sp, r7
 800e17c:	bd80      	pop	{r7, pc}
	...

0800e180 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e180:	b480      	push	{r7}
 800e182:	b095      	sub	sp, #84	@ 0x54
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e18e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e190:	e853 3f00 	ldrex	r3, [r3]
 800e194:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e198:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e19c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	461a      	mov	r2, r3
 800e1a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e1a6:	643b      	str	r3, [r7, #64]	@ 0x40
 800e1a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e1ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e1ae:	e841 2300 	strex	r3, r2, [r1]
 800e1b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e1b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d1e6      	bne.n	800e188 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	3308      	adds	r3, #8
 800e1c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1c2:	6a3b      	ldr	r3, [r7, #32]
 800e1c4:	e853 3f00 	ldrex	r3, [r3]
 800e1c8:	61fb      	str	r3, [r7, #28]
   return(result);
 800e1ca:	69fa      	ldr	r2, [r7, #28]
 800e1cc:	4b1e      	ldr	r3, [pc, #120]	@ (800e248 <UART_EndRxTransfer+0xc8>)
 800e1ce:	4013      	ands	r3, r2
 800e1d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	3308      	adds	r3, #8
 800e1d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e1da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e1dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e1e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e1e2:	e841 2300 	strex	r3, r2, [r1]
 800e1e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e1e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d1e5      	bne.n	800e1ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e1f2:	2b01      	cmp	r3, #1
 800e1f4:	d118      	bne.n	800e228 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	e853 3f00 	ldrex	r3, [r3]
 800e202:	60bb      	str	r3, [r7, #8]
   return(result);
 800e204:	68bb      	ldr	r3, [r7, #8]
 800e206:	f023 0310 	bic.w	r3, r3, #16
 800e20a:	647b      	str	r3, [r7, #68]	@ 0x44
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	461a      	mov	r2, r3
 800e212:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e214:	61bb      	str	r3, [r7, #24]
 800e216:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e218:	6979      	ldr	r1, [r7, #20]
 800e21a:	69ba      	ldr	r2, [r7, #24]
 800e21c:	e841 2300 	strex	r3, r2, [r1]
 800e220:	613b      	str	r3, [r7, #16]
   return(result);
 800e222:	693b      	ldr	r3, [r7, #16]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d1e6      	bne.n	800e1f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2220      	movs	r2, #32
 800e22c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	2200      	movs	r2, #0
 800e234:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	2200      	movs	r2, #0
 800e23a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e23c:	bf00      	nop
 800e23e:	3754      	adds	r7, #84	@ 0x54
 800e240:	46bd      	mov	sp, r7
 800e242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e246:	4770      	bx	lr
 800e248:	effffffe 	.word	0xeffffffe

0800e24c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e24c:	b084      	sub	sp, #16
 800e24e:	b580      	push	{r7, lr}
 800e250:	b084      	sub	sp, #16
 800e252:	af00      	add	r7, sp, #0
 800e254:	6078      	str	r0, [r7, #4]
 800e256:	f107 001c 	add.w	r0, r7, #28
 800e25a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e25e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800e262:	2b01      	cmp	r3, #1
 800e264:	d121      	bne.n	800e2aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e26a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	68da      	ldr	r2, [r3, #12]
 800e276:	4b2c      	ldr	r3, [pc, #176]	@ (800e328 <USB_CoreInit+0xdc>)
 800e278:	4013      	ands	r3, r2
 800e27a:	687a      	ldr	r2, [r7, #4]
 800e27c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	68db      	ldr	r3, [r3, #12]
 800e282:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e28a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e28e:	2b01      	cmp	r3, #1
 800e290:	d105      	bne.n	800e29e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	68db      	ldr	r3, [r3, #12]
 800e296:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	f001 faf6 	bl	800f890 <USB_CoreReset>
 800e2a4:	4603      	mov	r3, r0
 800e2a6:	73fb      	strb	r3, [r7, #15]
 800e2a8:	e01b      	b.n	800e2e2 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	68db      	ldr	r3, [r3, #12]
 800e2ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e2b6:	6878      	ldr	r0, [r7, #4]
 800e2b8:	f001 faea 	bl	800f890 <USB_CoreReset>
 800e2bc:	4603      	mov	r3, r0
 800e2be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e2c0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d106      	bne.n	800e2d6 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2cc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	639a      	str	r2, [r3, #56]	@ 0x38
 800e2d4:	e005      	b.n	800e2e2 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2da:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e2e2:	7fbb      	ldrb	r3, [r7, #30]
 800e2e4:	2b01      	cmp	r3, #1
 800e2e6:	d116      	bne.n	800e316 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e2ec:	b29a      	uxth	r2, r3
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e2f6:	4b0d      	ldr	r3, [pc, #52]	@ (800e32c <USB_CoreInit+0xe0>)
 800e2f8:	4313      	orrs	r3, r2
 800e2fa:	687a      	ldr	r2, [r7, #4]
 800e2fc:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	689b      	ldr	r3, [r3, #8]
 800e302:	f043 0206 	orr.w	r2, r3, #6
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	689b      	ldr	r3, [r3, #8]
 800e30e:	f043 0220 	orr.w	r2, r3, #32
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e316:	7bfb      	ldrb	r3, [r7, #15]
}
 800e318:	4618      	mov	r0, r3
 800e31a:	3710      	adds	r7, #16
 800e31c:	46bd      	mov	sp, r7
 800e31e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e322:	b004      	add	sp, #16
 800e324:	4770      	bx	lr
 800e326:	bf00      	nop
 800e328:	ffbdffbf 	.word	0xffbdffbf
 800e32c:	03ee0000 	.word	0x03ee0000

0800e330 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e330:	b480      	push	{r7}
 800e332:	b087      	sub	sp, #28
 800e334:	af00      	add	r7, sp, #0
 800e336:	60f8      	str	r0, [r7, #12]
 800e338:	60b9      	str	r1, [r7, #8]
 800e33a:	4613      	mov	r3, r2
 800e33c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e33e:	79fb      	ldrb	r3, [r7, #7]
 800e340:	2b02      	cmp	r3, #2
 800e342:	d165      	bne.n	800e410 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e344:	68bb      	ldr	r3, [r7, #8]
 800e346:	4a41      	ldr	r2, [pc, #260]	@ (800e44c <USB_SetTurnaroundTime+0x11c>)
 800e348:	4293      	cmp	r3, r2
 800e34a:	d906      	bls.n	800e35a <USB_SetTurnaroundTime+0x2a>
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	4a40      	ldr	r2, [pc, #256]	@ (800e450 <USB_SetTurnaroundTime+0x120>)
 800e350:	4293      	cmp	r3, r2
 800e352:	d202      	bcs.n	800e35a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e354:	230f      	movs	r3, #15
 800e356:	617b      	str	r3, [r7, #20]
 800e358:	e062      	b.n	800e420 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e35a:	68bb      	ldr	r3, [r7, #8]
 800e35c:	4a3c      	ldr	r2, [pc, #240]	@ (800e450 <USB_SetTurnaroundTime+0x120>)
 800e35e:	4293      	cmp	r3, r2
 800e360:	d306      	bcc.n	800e370 <USB_SetTurnaroundTime+0x40>
 800e362:	68bb      	ldr	r3, [r7, #8]
 800e364:	4a3b      	ldr	r2, [pc, #236]	@ (800e454 <USB_SetTurnaroundTime+0x124>)
 800e366:	4293      	cmp	r3, r2
 800e368:	d202      	bcs.n	800e370 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e36a:	230e      	movs	r3, #14
 800e36c:	617b      	str	r3, [r7, #20]
 800e36e:	e057      	b.n	800e420 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	4a38      	ldr	r2, [pc, #224]	@ (800e454 <USB_SetTurnaroundTime+0x124>)
 800e374:	4293      	cmp	r3, r2
 800e376:	d306      	bcc.n	800e386 <USB_SetTurnaroundTime+0x56>
 800e378:	68bb      	ldr	r3, [r7, #8]
 800e37a:	4a37      	ldr	r2, [pc, #220]	@ (800e458 <USB_SetTurnaroundTime+0x128>)
 800e37c:	4293      	cmp	r3, r2
 800e37e:	d202      	bcs.n	800e386 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e380:	230d      	movs	r3, #13
 800e382:	617b      	str	r3, [r7, #20]
 800e384:	e04c      	b.n	800e420 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e386:	68bb      	ldr	r3, [r7, #8]
 800e388:	4a33      	ldr	r2, [pc, #204]	@ (800e458 <USB_SetTurnaroundTime+0x128>)
 800e38a:	4293      	cmp	r3, r2
 800e38c:	d306      	bcc.n	800e39c <USB_SetTurnaroundTime+0x6c>
 800e38e:	68bb      	ldr	r3, [r7, #8]
 800e390:	4a32      	ldr	r2, [pc, #200]	@ (800e45c <USB_SetTurnaroundTime+0x12c>)
 800e392:	4293      	cmp	r3, r2
 800e394:	d802      	bhi.n	800e39c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e396:	230c      	movs	r3, #12
 800e398:	617b      	str	r3, [r7, #20]
 800e39a:	e041      	b.n	800e420 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e39c:	68bb      	ldr	r3, [r7, #8]
 800e39e:	4a2f      	ldr	r2, [pc, #188]	@ (800e45c <USB_SetTurnaroundTime+0x12c>)
 800e3a0:	4293      	cmp	r3, r2
 800e3a2:	d906      	bls.n	800e3b2 <USB_SetTurnaroundTime+0x82>
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	4a2e      	ldr	r2, [pc, #184]	@ (800e460 <USB_SetTurnaroundTime+0x130>)
 800e3a8:	4293      	cmp	r3, r2
 800e3aa:	d802      	bhi.n	800e3b2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e3ac:	230b      	movs	r3, #11
 800e3ae:	617b      	str	r3, [r7, #20]
 800e3b0:	e036      	b.n	800e420 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e3b2:	68bb      	ldr	r3, [r7, #8]
 800e3b4:	4a2a      	ldr	r2, [pc, #168]	@ (800e460 <USB_SetTurnaroundTime+0x130>)
 800e3b6:	4293      	cmp	r3, r2
 800e3b8:	d906      	bls.n	800e3c8 <USB_SetTurnaroundTime+0x98>
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	4a29      	ldr	r2, [pc, #164]	@ (800e464 <USB_SetTurnaroundTime+0x134>)
 800e3be:	4293      	cmp	r3, r2
 800e3c0:	d802      	bhi.n	800e3c8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e3c2:	230a      	movs	r3, #10
 800e3c4:	617b      	str	r3, [r7, #20]
 800e3c6:	e02b      	b.n	800e420 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e3c8:	68bb      	ldr	r3, [r7, #8]
 800e3ca:	4a26      	ldr	r2, [pc, #152]	@ (800e464 <USB_SetTurnaroundTime+0x134>)
 800e3cc:	4293      	cmp	r3, r2
 800e3ce:	d906      	bls.n	800e3de <USB_SetTurnaroundTime+0xae>
 800e3d0:	68bb      	ldr	r3, [r7, #8]
 800e3d2:	4a25      	ldr	r2, [pc, #148]	@ (800e468 <USB_SetTurnaroundTime+0x138>)
 800e3d4:	4293      	cmp	r3, r2
 800e3d6:	d202      	bcs.n	800e3de <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e3d8:	2309      	movs	r3, #9
 800e3da:	617b      	str	r3, [r7, #20]
 800e3dc:	e020      	b.n	800e420 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	4a21      	ldr	r2, [pc, #132]	@ (800e468 <USB_SetTurnaroundTime+0x138>)
 800e3e2:	4293      	cmp	r3, r2
 800e3e4:	d306      	bcc.n	800e3f4 <USB_SetTurnaroundTime+0xc4>
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	4a20      	ldr	r2, [pc, #128]	@ (800e46c <USB_SetTurnaroundTime+0x13c>)
 800e3ea:	4293      	cmp	r3, r2
 800e3ec:	d802      	bhi.n	800e3f4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e3ee:	2308      	movs	r3, #8
 800e3f0:	617b      	str	r3, [r7, #20]
 800e3f2:	e015      	b.n	800e420 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e3f4:	68bb      	ldr	r3, [r7, #8]
 800e3f6:	4a1d      	ldr	r2, [pc, #116]	@ (800e46c <USB_SetTurnaroundTime+0x13c>)
 800e3f8:	4293      	cmp	r3, r2
 800e3fa:	d906      	bls.n	800e40a <USB_SetTurnaroundTime+0xda>
 800e3fc:	68bb      	ldr	r3, [r7, #8]
 800e3fe:	4a1c      	ldr	r2, [pc, #112]	@ (800e470 <USB_SetTurnaroundTime+0x140>)
 800e400:	4293      	cmp	r3, r2
 800e402:	d202      	bcs.n	800e40a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e404:	2307      	movs	r3, #7
 800e406:	617b      	str	r3, [r7, #20]
 800e408:	e00a      	b.n	800e420 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e40a:	2306      	movs	r3, #6
 800e40c:	617b      	str	r3, [r7, #20]
 800e40e:	e007      	b.n	800e420 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e410:	79fb      	ldrb	r3, [r7, #7]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d102      	bne.n	800e41c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e416:	2309      	movs	r3, #9
 800e418:	617b      	str	r3, [r7, #20]
 800e41a:	e001      	b.n	800e420 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e41c:	2309      	movs	r3, #9
 800e41e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	68db      	ldr	r3, [r3, #12]
 800e424:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	68da      	ldr	r2, [r3, #12]
 800e430:	697b      	ldr	r3, [r7, #20]
 800e432:	029b      	lsls	r3, r3, #10
 800e434:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800e438:	431a      	orrs	r2, r3
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e43e:	2300      	movs	r3, #0
}
 800e440:	4618      	mov	r0, r3
 800e442:	371c      	adds	r7, #28
 800e444:	46bd      	mov	sp, r7
 800e446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44a:	4770      	bx	lr
 800e44c:	00d8acbf 	.word	0x00d8acbf
 800e450:	00e4e1c0 	.word	0x00e4e1c0
 800e454:	00f42400 	.word	0x00f42400
 800e458:	01067380 	.word	0x01067380
 800e45c:	011a499f 	.word	0x011a499f
 800e460:	01312cff 	.word	0x01312cff
 800e464:	014ca43f 	.word	0x014ca43f
 800e468:	016e3600 	.word	0x016e3600
 800e46c:	01a6ab1f 	.word	0x01a6ab1f
 800e470:	01e84800 	.word	0x01e84800

0800e474 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e474:	b480      	push	{r7}
 800e476:	b083      	sub	sp, #12
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	689b      	ldr	r3, [r3, #8]
 800e480:	f043 0201 	orr.w	r2, r3, #1
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e488:	2300      	movs	r3, #0
}
 800e48a:	4618      	mov	r0, r3
 800e48c:	370c      	adds	r7, #12
 800e48e:	46bd      	mov	sp, r7
 800e490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e494:	4770      	bx	lr

0800e496 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e496:	b480      	push	{r7}
 800e498:	b083      	sub	sp, #12
 800e49a:	af00      	add	r7, sp, #0
 800e49c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	689b      	ldr	r3, [r3, #8]
 800e4a2:	f023 0201 	bic.w	r2, r3, #1
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e4aa:	2300      	movs	r3, #0
}
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	370c      	adds	r7, #12
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b6:	4770      	bx	lr

0800e4b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b084      	sub	sp, #16
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
 800e4c0:	460b      	mov	r3, r1
 800e4c2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	68db      	ldr	r3, [r3, #12]
 800e4cc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e4d4:	78fb      	ldrb	r3, [r7, #3]
 800e4d6:	2b01      	cmp	r3, #1
 800e4d8:	d115      	bne.n	800e506 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	68db      	ldr	r3, [r3, #12]
 800e4de:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e4e6:	200a      	movs	r0, #10
 800e4e8:	f7f4 faae 	bl	8002a48 <HAL_Delay>
      ms += 10U;
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	330a      	adds	r3, #10
 800e4f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	f001 f93b 	bl	800f76e <USB_GetMode>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	2b01      	cmp	r3, #1
 800e4fc:	d01e      	beq.n	800e53c <USB_SetCurrentMode+0x84>
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	2bc7      	cmp	r3, #199	@ 0xc7
 800e502:	d9f0      	bls.n	800e4e6 <USB_SetCurrentMode+0x2e>
 800e504:	e01a      	b.n	800e53c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e506:	78fb      	ldrb	r3, [r7, #3]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d115      	bne.n	800e538 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	68db      	ldr	r3, [r3, #12]
 800e510:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e518:	200a      	movs	r0, #10
 800e51a:	f7f4 fa95 	bl	8002a48 <HAL_Delay>
      ms += 10U;
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	330a      	adds	r3, #10
 800e522:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e524:	6878      	ldr	r0, [r7, #4]
 800e526:	f001 f922 	bl	800f76e <USB_GetMode>
 800e52a:	4603      	mov	r3, r0
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d005      	beq.n	800e53c <USB_SetCurrentMode+0x84>
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	2bc7      	cmp	r3, #199	@ 0xc7
 800e534:	d9f0      	bls.n	800e518 <USB_SetCurrentMode+0x60>
 800e536:	e001      	b.n	800e53c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e538:	2301      	movs	r3, #1
 800e53a:	e005      	b.n	800e548 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	2bc8      	cmp	r3, #200	@ 0xc8
 800e540:	d101      	bne.n	800e546 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e542:	2301      	movs	r3, #1
 800e544:	e000      	b.n	800e548 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e546:	2300      	movs	r3, #0
}
 800e548:	4618      	mov	r0, r3
 800e54a:	3710      	adds	r7, #16
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}

0800e550 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e550:	b084      	sub	sp, #16
 800e552:	b580      	push	{r7, lr}
 800e554:	b086      	sub	sp, #24
 800e556:	af00      	add	r7, sp, #0
 800e558:	6078      	str	r0, [r7, #4]
 800e55a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800e55e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e562:	2300      	movs	r3, #0
 800e564:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e56a:	2300      	movs	r3, #0
 800e56c:	613b      	str	r3, [r7, #16]
 800e56e:	e009      	b.n	800e584 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e570:	687a      	ldr	r2, [r7, #4]
 800e572:	693b      	ldr	r3, [r7, #16]
 800e574:	3340      	adds	r3, #64	@ 0x40
 800e576:	009b      	lsls	r3, r3, #2
 800e578:	4413      	add	r3, r2
 800e57a:	2200      	movs	r2, #0
 800e57c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e57e:	693b      	ldr	r3, [r7, #16]
 800e580:	3301      	adds	r3, #1
 800e582:	613b      	str	r3, [r7, #16]
 800e584:	693b      	ldr	r3, [r7, #16]
 800e586:	2b0e      	cmp	r3, #14
 800e588:	d9f2      	bls.n	800e570 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e58a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d11c      	bne.n	800e5cc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e598:	685b      	ldr	r3, [r3, #4]
 800e59a:	68fa      	ldr	r2, [r7, #12]
 800e59c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e5a0:	f043 0302 	orr.w	r3, r3, #2
 800e5a4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5aa:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	601a      	str	r2, [r3, #0]
 800e5ca:	e005      	b.n	800e5d8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5d0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e5de:	461a      	mov	r2, r3
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e5e4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800e5e8:	2b01      	cmp	r3, #1
 800e5ea:	d10d      	bne.n	800e608 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e5ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d104      	bne.n	800e5fe <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e5f4:	2100      	movs	r1, #0
 800e5f6:	6878      	ldr	r0, [r7, #4]
 800e5f8:	f000 f968 	bl	800e8cc <USB_SetDevSpeed>
 800e5fc:	e008      	b.n	800e610 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e5fe:	2101      	movs	r1, #1
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	f000 f963 	bl	800e8cc <USB_SetDevSpeed>
 800e606:	e003      	b.n	800e610 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e608:	2103      	movs	r1, #3
 800e60a:	6878      	ldr	r0, [r7, #4]
 800e60c:	f000 f95e 	bl	800e8cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e610:	2110      	movs	r1, #16
 800e612:	6878      	ldr	r0, [r7, #4]
 800e614:	f000 f8fa 	bl	800e80c <USB_FlushTxFifo>
 800e618:	4603      	mov	r3, r0
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d001      	beq.n	800e622 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800e61e:	2301      	movs	r3, #1
 800e620:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e622:	6878      	ldr	r0, [r7, #4]
 800e624:	f000 f924 	bl	800e870 <USB_FlushRxFifo>
 800e628:	4603      	mov	r3, r0
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d001      	beq.n	800e632 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800e62e:	2301      	movs	r3, #1
 800e630:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e638:	461a      	mov	r2, r3
 800e63a:	2300      	movs	r3, #0
 800e63c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e644:	461a      	mov	r2, r3
 800e646:	2300      	movs	r3, #0
 800e648:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e650:	461a      	mov	r2, r3
 800e652:	2300      	movs	r3, #0
 800e654:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e656:	2300      	movs	r3, #0
 800e658:	613b      	str	r3, [r7, #16]
 800e65a:	e043      	b.n	800e6e4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e65c:	693b      	ldr	r3, [r7, #16]
 800e65e:	015a      	lsls	r2, r3, #5
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	4413      	add	r3, r2
 800e664:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e66e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e672:	d118      	bne.n	800e6a6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800e674:	693b      	ldr	r3, [r7, #16]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d10a      	bne.n	800e690 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e67a:	693b      	ldr	r3, [r7, #16]
 800e67c:	015a      	lsls	r2, r3, #5
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	4413      	add	r3, r2
 800e682:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e686:	461a      	mov	r2, r3
 800e688:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e68c:	6013      	str	r3, [r2, #0]
 800e68e:	e013      	b.n	800e6b8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e690:	693b      	ldr	r3, [r7, #16]
 800e692:	015a      	lsls	r2, r3, #5
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	4413      	add	r3, r2
 800e698:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e69c:	461a      	mov	r2, r3
 800e69e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e6a2:	6013      	str	r3, [r2, #0]
 800e6a4:	e008      	b.n	800e6b8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e6a6:	693b      	ldr	r3, [r7, #16]
 800e6a8:	015a      	lsls	r2, r3, #5
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	4413      	add	r3, r2
 800e6ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6b2:	461a      	mov	r2, r3
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e6b8:	693b      	ldr	r3, [r7, #16]
 800e6ba:	015a      	lsls	r2, r3, #5
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	4413      	add	r3, r2
 800e6c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6c4:	461a      	mov	r2, r3
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e6ca:	693b      	ldr	r3, [r7, #16]
 800e6cc:	015a      	lsls	r2, r3, #5
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	4413      	add	r3, r2
 800e6d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6d6:	461a      	mov	r2, r3
 800e6d8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e6dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e6de:	693b      	ldr	r3, [r7, #16]
 800e6e0:	3301      	adds	r3, #1
 800e6e2:	613b      	str	r3, [r7, #16]
 800e6e4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e6e8:	461a      	mov	r2, r3
 800e6ea:	693b      	ldr	r3, [r7, #16]
 800e6ec:	4293      	cmp	r3, r2
 800e6ee:	d3b5      	bcc.n	800e65c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	613b      	str	r3, [r7, #16]
 800e6f4:	e043      	b.n	800e77e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e6f6:	693b      	ldr	r3, [r7, #16]
 800e6f8:	015a      	lsls	r2, r3, #5
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	4413      	add	r3, r2
 800e6fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e708:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e70c:	d118      	bne.n	800e740 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800e70e:	693b      	ldr	r3, [r7, #16]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d10a      	bne.n	800e72a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e714:	693b      	ldr	r3, [r7, #16]
 800e716:	015a      	lsls	r2, r3, #5
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	4413      	add	r3, r2
 800e71c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e720:	461a      	mov	r2, r3
 800e722:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e726:	6013      	str	r3, [r2, #0]
 800e728:	e013      	b.n	800e752 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e72a:	693b      	ldr	r3, [r7, #16]
 800e72c:	015a      	lsls	r2, r3, #5
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	4413      	add	r3, r2
 800e732:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e736:	461a      	mov	r2, r3
 800e738:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e73c:	6013      	str	r3, [r2, #0]
 800e73e:	e008      	b.n	800e752 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e740:	693b      	ldr	r3, [r7, #16]
 800e742:	015a      	lsls	r2, r3, #5
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	4413      	add	r3, r2
 800e748:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e74c:	461a      	mov	r2, r3
 800e74e:	2300      	movs	r3, #0
 800e750:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e752:	693b      	ldr	r3, [r7, #16]
 800e754:	015a      	lsls	r2, r3, #5
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	4413      	add	r3, r2
 800e75a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e75e:	461a      	mov	r2, r3
 800e760:	2300      	movs	r3, #0
 800e762:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e764:	693b      	ldr	r3, [r7, #16]
 800e766:	015a      	lsls	r2, r3, #5
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	4413      	add	r3, r2
 800e76c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e770:	461a      	mov	r2, r3
 800e772:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e776:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	3301      	adds	r3, #1
 800e77c:	613b      	str	r3, [r7, #16]
 800e77e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e782:	461a      	mov	r2, r3
 800e784:	693b      	ldr	r3, [r7, #16]
 800e786:	4293      	cmp	r3, r2
 800e788:	d3b5      	bcc.n	800e6f6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e790:	691b      	ldr	r3, [r3, #16]
 800e792:	68fa      	ldr	r2, [r7, #12]
 800e794:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e798:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e79c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800e7aa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e7ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d105      	bne.n	800e7c0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	699b      	ldr	r3, [r3, #24]
 800e7b8:	f043 0210 	orr.w	r2, r3, #16
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	699a      	ldr	r2, [r3, #24]
 800e7c4:	4b0f      	ldr	r3, [pc, #60]	@ (800e804 <USB_DevInit+0x2b4>)
 800e7c6:	4313      	orrs	r3, r2
 800e7c8:	687a      	ldr	r2, [r7, #4]
 800e7ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e7cc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d005      	beq.n	800e7e0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	699b      	ldr	r3, [r3, #24]
 800e7d8:	f043 0208 	orr.w	r2, r3, #8
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e7e0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e7e4:	2b01      	cmp	r3, #1
 800e7e6:	d105      	bne.n	800e7f4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	699a      	ldr	r2, [r3, #24]
 800e7ec:	4b06      	ldr	r3, [pc, #24]	@ (800e808 <USB_DevInit+0x2b8>)
 800e7ee:	4313      	orrs	r3, r2
 800e7f0:	687a      	ldr	r2, [r7, #4]
 800e7f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e7f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	3718      	adds	r7, #24
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e800:	b004      	add	sp, #16
 800e802:	4770      	bx	lr
 800e804:	803c3800 	.word	0x803c3800
 800e808:	40000004 	.word	0x40000004

0800e80c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e80c:	b480      	push	{r7}
 800e80e:	b085      	sub	sp, #20
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
 800e814:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e816:	2300      	movs	r3, #0
 800e818:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	3301      	adds	r3, #1
 800e81e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e826:	d901      	bls.n	800e82c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e828:	2303      	movs	r3, #3
 800e82a:	e01b      	b.n	800e864 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	691b      	ldr	r3, [r3, #16]
 800e830:	2b00      	cmp	r3, #0
 800e832:	daf2      	bge.n	800e81a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e834:	2300      	movs	r3, #0
 800e836:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	019b      	lsls	r3, r3, #6
 800e83c:	f043 0220 	orr.w	r2, r3, #32
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	3301      	adds	r3, #1
 800e848:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e850:	d901      	bls.n	800e856 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e852:	2303      	movs	r3, #3
 800e854:	e006      	b.n	800e864 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	691b      	ldr	r3, [r3, #16]
 800e85a:	f003 0320 	and.w	r3, r3, #32
 800e85e:	2b20      	cmp	r3, #32
 800e860:	d0f0      	beq.n	800e844 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e862:	2300      	movs	r3, #0
}
 800e864:	4618      	mov	r0, r3
 800e866:	3714      	adds	r7, #20
 800e868:	46bd      	mov	sp, r7
 800e86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86e:	4770      	bx	lr

0800e870 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e870:	b480      	push	{r7}
 800e872:	b085      	sub	sp, #20
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e878:	2300      	movs	r3, #0
 800e87a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	3301      	adds	r3, #1
 800e880:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e888:	d901      	bls.n	800e88e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e88a:	2303      	movs	r3, #3
 800e88c:	e018      	b.n	800e8c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	691b      	ldr	r3, [r3, #16]
 800e892:	2b00      	cmp	r3, #0
 800e894:	daf2      	bge.n	800e87c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e896:	2300      	movs	r3, #0
 800e898:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2210      	movs	r2, #16
 800e89e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	3301      	adds	r3, #1
 800e8a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e8ac:	d901      	bls.n	800e8b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e8ae:	2303      	movs	r3, #3
 800e8b0:	e006      	b.n	800e8c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	691b      	ldr	r3, [r3, #16]
 800e8b6:	f003 0310 	and.w	r3, r3, #16
 800e8ba:	2b10      	cmp	r3, #16
 800e8bc:	d0f0      	beq.n	800e8a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e8be:	2300      	movs	r3, #0
}
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	3714      	adds	r7, #20
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ca:	4770      	bx	lr

0800e8cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e8cc:	b480      	push	{r7}
 800e8ce:	b085      	sub	sp, #20
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
 800e8d4:	460b      	mov	r3, r1
 800e8d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e8e2:	681a      	ldr	r2, [r3, #0]
 800e8e4:	78fb      	ldrb	r3, [r7, #3]
 800e8e6:	68f9      	ldr	r1, [r7, #12]
 800e8e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e8ec:	4313      	orrs	r3, r2
 800e8ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e8f0:	2300      	movs	r3, #0
}
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	3714      	adds	r7, #20
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fc:	4770      	bx	lr

0800e8fe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800e8fe:	b480      	push	{r7}
 800e900:	b087      	sub	sp, #28
 800e902:	af00      	add	r7, sp, #0
 800e904:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e90a:	693b      	ldr	r3, [r7, #16]
 800e90c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e910:	689b      	ldr	r3, [r3, #8]
 800e912:	f003 0306 	and.w	r3, r3, #6
 800e916:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d102      	bne.n	800e924 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e91e:	2300      	movs	r3, #0
 800e920:	75fb      	strb	r3, [r7, #23]
 800e922:	e00a      	b.n	800e93a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	2b02      	cmp	r3, #2
 800e928:	d002      	beq.n	800e930 <USB_GetDevSpeed+0x32>
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	2b06      	cmp	r3, #6
 800e92e:	d102      	bne.n	800e936 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e930:	2302      	movs	r3, #2
 800e932:	75fb      	strb	r3, [r7, #23]
 800e934:	e001      	b.n	800e93a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e936:	230f      	movs	r3, #15
 800e938:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e93a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e93c:	4618      	mov	r0, r3
 800e93e:	371c      	adds	r7, #28
 800e940:	46bd      	mov	sp, r7
 800e942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e946:	4770      	bx	lr

0800e948 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e948:	b480      	push	{r7}
 800e94a:	b085      	sub	sp, #20
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
 800e950:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e956:	683b      	ldr	r3, [r7, #0]
 800e958:	781b      	ldrb	r3, [r3, #0]
 800e95a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	785b      	ldrb	r3, [r3, #1]
 800e960:	2b01      	cmp	r3, #1
 800e962:	d139      	bne.n	800e9d8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e96a:	69da      	ldr	r2, [r3, #28]
 800e96c:	683b      	ldr	r3, [r7, #0]
 800e96e:	781b      	ldrb	r3, [r3, #0]
 800e970:	f003 030f 	and.w	r3, r3, #15
 800e974:	2101      	movs	r1, #1
 800e976:	fa01 f303 	lsl.w	r3, r1, r3
 800e97a:	b29b      	uxth	r3, r3
 800e97c:	68f9      	ldr	r1, [r7, #12]
 800e97e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e982:	4313      	orrs	r3, r2
 800e984:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e986:	68bb      	ldr	r3, [r7, #8]
 800e988:	015a      	lsls	r2, r3, #5
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	4413      	add	r3, r2
 800e98e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d153      	bne.n	800ea44 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e99c:	68bb      	ldr	r3, [r7, #8]
 800e99e:	015a      	lsls	r2, r3, #5
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	4413      	add	r3, r2
 800e9a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e9a8:	681a      	ldr	r2, [r3, #0]
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	689b      	ldr	r3, [r3, #8]
 800e9ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	791b      	ldrb	r3, [r3, #4]
 800e9b6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e9b8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e9ba:	68bb      	ldr	r3, [r7, #8]
 800e9bc:	059b      	lsls	r3, r3, #22
 800e9be:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e9c0:	431a      	orrs	r2, r3
 800e9c2:	68bb      	ldr	r3, [r7, #8]
 800e9c4:	0159      	lsls	r1, r3, #5
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	440b      	add	r3, r1
 800e9ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e9ce:	4619      	mov	r1, r3
 800e9d0:	4b20      	ldr	r3, [pc, #128]	@ (800ea54 <USB_ActivateEndpoint+0x10c>)
 800e9d2:	4313      	orrs	r3, r2
 800e9d4:	600b      	str	r3, [r1, #0]
 800e9d6:	e035      	b.n	800ea44 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e9de:	69da      	ldr	r2, [r3, #28]
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	781b      	ldrb	r3, [r3, #0]
 800e9e4:	f003 030f 	and.w	r3, r3, #15
 800e9e8:	2101      	movs	r1, #1
 800e9ea:	fa01 f303 	lsl.w	r3, r1, r3
 800e9ee:	041b      	lsls	r3, r3, #16
 800e9f0:	68f9      	ldr	r1, [r7, #12]
 800e9f2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e9f6:	4313      	orrs	r3, r2
 800e9f8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e9fa:	68bb      	ldr	r3, [r7, #8]
 800e9fc:	015a      	lsls	r2, r3, #5
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	4413      	add	r3, r2
 800ea02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d119      	bne.n	800ea44 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ea10:	68bb      	ldr	r3, [r7, #8]
 800ea12:	015a      	lsls	r2, r3, #5
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	4413      	add	r3, r2
 800ea18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea1c:	681a      	ldr	r2, [r3, #0]
 800ea1e:	683b      	ldr	r3, [r7, #0]
 800ea20:	689b      	ldr	r3, [r3, #8]
 800ea22:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ea26:	683b      	ldr	r3, [r7, #0]
 800ea28:	791b      	ldrb	r3, [r3, #4]
 800ea2a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ea2c:	430b      	orrs	r3, r1
 800ea2e:	431a      	orrs	r2, r3
 800ea30:	68bb      	ldr	r3, [r7, #8]
 800ea32:	0159      	lsls	r1, r3, #5
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	440b      	add	r3, r1
 800ea38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea3c:	4619      	mov	r1, r3
 800ea3e:	4b05      	ldr	r3, [pc, #20]	@ (800ea54 <USB_ActivateEndpoint+0x10c>)
 800ea40:	4313      	orrs	r3, r2
 800ea42:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ea44:	2300      	movs	r3, #0
}
 800ea46:	4618      	mov	r0, r3
 800ea48:	3714      	adds	r7, #20
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea50:	4770      	bx	lr
 800ea52:	bf00      	nop
 800ea54:	10008000 	.word	0x10008000

0800ea58 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ea58:	b480      	push	{r7}
 800ea5a:	b085      	sub	sp, #20
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
 800ea60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ea66:	683b      	ldr	r3, [r7, #0]
 800ea68:	781b      	ldrb	r3, [r3, #0]
 800ea6a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	785b      	ldrb	r3, [r3, #1]
 800ea70:	2b01      	cmp	r3, #1
 800ea72:	d161      	bne.n	800eb38 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ea74:	68bb      	ldr	r3, [r7, #8]
 800ea76:	015a      	lsls	r2, r3, #5
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	4413      	add	r3, r2
 800ea7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ea86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ea8a:	d11f      	bne.n	800eacc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ea8c:	68bb      	ldr	r3, [r7, #8]
 800ea8e:	015a      	lsls	r2, r3, #5
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	4413      	add	r3, r2
 800ea94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	68ba      	ldr	r2, [r7, #8]
 800ea9c:	0151      	lsls	r1, r2, #5
 800ea9e:	68fa      	ldr	r2, [r7, #12]
 800eaa0:	440a      	add	r2, r1
 800eaa2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eaa6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800eaaa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800eaac:	68bb      	ldr	r3, [r7, #8]
 800eaae:	015a      	lsls	r2, r3, #5
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	4413      	add	r3, r2
 800eab4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	68ba      	ldr	r2, [r7, #8]
 800eabc:	0151      	lsls	r1, r2, #5
 800eabe:	68fa      	ldr	r2, [r7, #12]
 800eac0:	440a      	add	r2, r1
 800eac2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eac6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800eaca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ead2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	781b      	ldrb	r3, [r3, #0]
 800ead8:	f003 030f 	and.w	r3, r3, #15
 800eadc:	2101      	movs	r1, #1
 800eade:	fa01 f303 	lsl.w	r3, r1, r3
 800eae2:	b29b      	uxth	r3, r3
 800eae4:	43db      	mvns	r3, r3
 800eae6:	68f9      	ldr	r1, [r7, #12]
 800eae8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800eaec:	4013      	ands	r3, r2
 800eaee:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eaf6:	69da      	ldr	r2, [r3, #28]
 800eaf8:	683b      	ldr	r3, [r7, #0]
 800eafa:	781b      	ldrb	r3, [r3, #0]
 800eafc:	f003 030f 	and.w	r3, r3, #15
 800eb00:	2101      	movs	r1, #1
 800eb02:	fa01 f303 	lsl.w	r3, r1, r3
 800eb06:	b29b      	uxth	r3, r3
 800eb08:	43db      	mvns	r3, r3
 800eb0a:	68f9      	ldr	r1, [r7, #12]
 800eb0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800eb10:	4013      	ands	r3, r2
 800eb12:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800eb14:	68bb      	ldr	r3, [r7, #8]
 800eb16:	015a      	lsls	r2, r3, #5
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	4413      	add	r3, r2
 800eb1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb20:	681a      	ldr	r2, [r3, #0]
 800eb22:	68bb      	ldr	r3, [r7, #8]
 800eb24:	0159      	lsls	r1, r3, #5
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	440b      	add	r3, r1
 800eb2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb2e:	4619      	mov	r1, r3
 800eb30:	4b35      	ldr	r3, [pc, #212]	@ (800ec08 <USB_DeactivateEndpoint+0x1b0>)
 800eb32:	4013      	ands	r3, r2
 800eb34:	600b      	str	r3, [r1, #0]
 800eb36:	e060      	b.n	800ebfa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800eb38:	68bb      	ldr	r3, [r7, #8]
 800eb3a:	015a      	lsls	r2, r3, #5
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	4413      	add	r3, r2
 800eb40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800eb4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800eb4e:	d11f      	bne.n	800eb90 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800eb50:	68bb      	ldr	r3, [r7, #8]
 800eb52:	015a      	lsls	r2, r3, #5
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	4413      	add	r3, r2
 800eb58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	68ba      	ldr	r2, [r7, #8]
 800eb60:	0151      	lsls	r1, r2, #5
 800eb62:	68fa      	ldr	r2, [r7, #12]
 800eb64:	440a      	add	r2, r1
 800eb66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eb6a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800eb6e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800eb70:	68bb      	ldr	r3, [r7, #8]
 800eb72:	015a      	lsls	r2, r3, #5
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	4413      	add	r3, r2
 800eb78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	68ba      	ldr	r2, [r7, #8]
 800eb80:	0151      	lsls	r1, r2, #5
 800eb82:	68fa      	ldr	r2, [r7, #12]
 800eb84:	440a      	add	r2, r1
 800eb86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eb8a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800eb8e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eb96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	781b      	ldrb	r3, [r3, #0]
 800eb9c:	f003 030f 	and.w	r3, r3, #15
 800eba0:	2101      	movs	r1, #1
 800eba2:	fa01 f303 	lsl.w	r3, r1, r3
 800eba6:	041b      	lsls	r3, r3, #16
 800eba8:	43db      	mvns	r3, r3
 800ebaa:	68f9      	ldr	r1, [r7, #12]
 800ebac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ebb0:	4013      	ands	r3, r2
 800ebb2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ebba:	69da      	ldr	r2, [r3, #28]
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	781b      	ldrb	r3, [r3, #0]
 800ebc0:	f003 030f 	and.w	r3, r3, #15
 800ebc4:	2101      	movs	r1, #1
 800ebc6:	fa01 f303 	lsl.w	r3, r1, r3
 800ebca:	041b      	lsls	r3, r3, #16
 800ebcc:	43db      	mvns	r3, r3
 800ebce:	68f9      	ldr	r1, [r7, #12]
 800ebd0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ebd4:	4013      	ands	r3, r2
 800ebd6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ebd8:	68bb      	ldr	r3, [r7, #8]
 800ebda:	015a      	lsls	r2, r3, #5
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	4413      	add	r3, r2
 800ebe0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebe4:	681a      	ldr	r2, [r3, #0]
 800ebe6:	68bb      	ldr	r3, [r7, #8]
 800ebe8:	0159      	lsls	r1, r3, #5
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	440b      	add	r3, r1
 800ebee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebf2:	4619      	mov	r1, r3
 800ebf4:	4b05      	ldr	r3, [pc, #20]	@ (800ec0c <USB_DeactivateEndpoint+0x1b4>)
 800ebf6:	4013      	ands	r3, r2
 800ebf8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ebfa:	2300      	movs	r3, #0
}
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	3714      	adds	r7, #20
 800ec00:	46bd      	mov	sp, r7
 800ec02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec06:	4770      	bx	lr
 800ec08:	ec337800 	.word	0xec337800
 800ec0c:	eff37800 	.word	0xeff37800

0800ec10 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b08a      	sub	sp, #40	@ 0x28
 800ec14:	af02      	add	r7, sp, #8
 800ec16:	60f8      	str	r0, [r7, #12]
 800ec18:	60b9      	str	r1, [r7, #8]
 800ec1a:	4613      	mov	r3, r2
 800ec1c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ec22:	68bb      	ldr	r3, [r7, #8]
 800ec24:	781b      	ldrb	r3, [r3, #0]
 800ec26:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ec28:	68bb      	ldr	r3, [r7, #8]
 800ec2a:	785b      	ldrb	r3, [r3, #1]
 800ec2c:	2b01      	cmp	r3, #1
 800ec2e:	f040 8181 	bne.w	800ef34 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ec32:	68bb      	ldr	r3, [r7, #8]
 800ec34:	691b      	ldr	r3, [r3, #16]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d132      	bne.n	800eca0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ec3a:	69bb      	ldr	r3, [r7, #24]
 800ec3c:	015a      	lsls	r2, r3, #5
 800ec3e:	69fb      	ldr	r3, [r7, #28]
 800ec40:	4413      	add	r3, r2
 800ec42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec46:	691a      	ldr	r2, [r3, #16]
 800ec48:	69bb      	ldr	r3, [r7, #24]
 800ec4a:	0159      	lsls	r1, r3, #5
 800ec4c:	69fb      	ldr	r3, [r7, #28]
 800ec4e:	440b      	add	r3, r1
 800ec50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec54:	4619      	mov	r1, r3
 800ec56:	4ba5      	ldr	r3, [pc, #660]	@ (800eeec <USB_EPStartXfer+0x2dc>)
 800ec58:	4013      	ands	r3, r2
 800ec5a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ec5c:	69bb      	ldr	r3, [r7, #24]
 800ec5e:	015a      	lsls	r2, r3, #5
 800ec60:	69fb      	ldr	r3, [r7, #28]
 800ec62:	4413      	add	r3, r2
 800ec64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec68:	691b      	ldr	r3, [r3, #16]
 800ec6a:	69ba      	ldr	r2, [r7, #24]
 800ec6c:	0151      	lsls	r1, r2, #5
 800ec6e:	69fa      	ldr	r2, [r7, #28]
 800ec70:	440a      	add	r2, r1
 800ec72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ec76:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ec7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ec7c:	69bb      	ldr	r3, [r7, #24]
 800ec7e:	015a      	lsls	r2, r3, #5
 800ec80:	69fb      	ldr	r3, [r7, #28]
 800ec82:	4413      	add	r3, r2
 800ec84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec88:	691a      	ldr	r2, [r3, #16]
 800ec8a:	69bb      	ldr	r3, [r7, #24]
 800ec8c:	0159      	lsls	r1, r3, #5
 800ec8e:	69fb      	ldr	r3, [r7, #28]
 800ec90:	440b      	add	r3, r1
 800ec92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec96:	4619      	mov	r1, r3
 800ec98:	4b95      	ldr	r3, [pc, #596]	@ (800eef0 <USB_EPStartXfer+0x2e0>)
 800ec9a:	4013      	ands	r3, r2
 800ec9c:	610b      	str	r3, [r1, #16]
 800ec9e:	e092      	b.n	800edc6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800eca0:	69bb      	ldr	r3, [r7, #24]
 800eca2:	015a      	lsls	r2, r3, #5
 800eca4:	69fb      	ldr	r3, [r7, #28]
 800eca6:	4413      	add	r3, r2
 800eca8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ecac:	691a      	ldr	r2, [r3, #16]
 800ecae:	69bb      	ldr	r3, [r7, #24]
 800ecb0:	0159      	lsls	r1, r3, #5
 800ecb2:	69fb      	ldr	r3, [r7, #28]
 800ecb4:	440b      	add	r3, r1
 800ecb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ecba:	4619      	mov	r1, r3
 800ecbc:	4b8c      	ldr	r3, [pc, #560]	@ (800eef0 <USB_EPStartXfer+0x2e0>)
 800ecbe:	4013      	ands	r3, r2
 800ecc0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ecc2:	69bb      	ldr	r3, [r7, #24]
 800ecc4:	015a      	lsls	r2, r3, #5
 800ecc6:	69fb      	ldr	r3, [r7, #28]
 800ecc8:	4413      	add	r3, r2
 800ecca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ecce:	691a      	ldr	r2, [r3, #16]
 800ecd0:	69bb      	ldr	r3, [r7, #24]
 800ecd2:	0159      	lsls	r1, r3, #5
 800ecd4:	69fb      	ldr	r3, [r7, #28]
 800ecd6:	440b      	add	r3, r1
 800ecd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ecdc:	4619      	mov	r1, r3
 800ecde:	4b83      	ldr	r3, [pc, #524]	@ (800eeec <USB_EPStartXfer+0x2dc>)
 800ece0:	4013      	ands	r3, r2
 800ece2:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800ece4:	69bb      	ldr	r3, [r7, #24]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d11a      	bne.n	800ed20 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800ecea:	68bb      	ldr	r3, [r7, #8]
 800ecec:	691a      	ldr	r2, [r3, #16]
 800ecee:	68bb      	ldr	r3, [r7, #8]
 800ecf0:	689b      	ldr	r3, [r3, #8]
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	d903      	bls.n	800ecfe <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800ecf6:	68bb      	ldr	r3, [r7, #8]
 800ecf8:	689a      	ldr	r2, [r3, #8]
 800ecfa:	68bb      	ldr	r3, [r7, #8]
 800ecfc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ecfe:	69bb      	ldr	r3, [r7, #24]
 800ed00:	015a      	lsls	r2, r3, #5
 800ed02:	69fb      	ldr	r3, [r7, #28]
 800ed04:	4413      	add	r3, r2
 800ed06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ed0a:	691b      	ldr	r3, [r3, #16]
 800ed0c:	69ba      	ldr	r2, [r7, #24]
 800ed0e:	0151      	lsls	r1, r2, #5
 800ed10:	69fa      	ldr	r2, [r7, #28]
 800ed12:	440a      	add	r2, r1
 800ed14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ed18:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ed1c:	6113      	str	r3, [r2, #16]
 800ed1e:	e01b      	b.n	800ed58 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ed20:	69bb      	ldr	r3, [r7, #24]
 800ed22:	015a      	lsls	r2, r3, #5
 800ed24:	69fb      	ldr	r3, [r7, #28]
 800ed26:	4413      	add	r3, r2
 800ed28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ed2c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ed2e:	68bb      	ldr	r3, [r7, #8]
 800ed30:	6919      	ldr	r1, [r3, #16]
 800ed32:	68bb      	ldr	r3, [r7, #8]
 800ed34:	689b      	ldr	r3, [r3, #8]
 800ed36:	440b      	add	r3, r1
 800ed38:	1e59      	subs	r1, r3, #1
 800ed3a:	68bb      	ldr	r3, [r7, #8]
 800ed3c:	689b      	ldr	r3, [r3, #8]
 800ed3e:	fbb1 f3f3 	udiv	r3, r1, r3
 800ed42:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ed44:	4b6b      	ldr	r3, [pc, #428]	@ (800eef4 <USB_EPStartXfer+0x2e4>)
 800ed46:	400b      	ands	r3, r1
 800ed48:	69b9      	ldr	r1, [r7, #24]
 800ed4a:	0148      	lsls	r0, r1, #5
 800ed4c:	69f9      	ldr	r1, [r7, #28]
 800ed4e:	4401      	add	r1, r0
 800ed50:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ed54:	4313      	orrs	r3, r2
 800ed56:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ed58:	69bb      	ldr	r3, [r7, #24]
 800ed5a:	015a      	lsls	r2, r3, #5
 800ed5c:	69fb      	ldr	r3, [r7, #28]
 800ed5e:	4413      	add	r3, r2
 800ed60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ed64:	691a      	ldr	r2, [r3, #16]
 800ed66:	68bb      	ldr	r3, [r7, #8]
 800ed68:	691b      	ldr	r3, [r3, #16]
 800ed6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ed6e:	69b9      	ldr	r1, [r7, #24]
 800ed70:	0148      	lsls	r0, r1, #5
 800ed72:	69f9      	ldr	r1, [r7, #28]
 800ed74:	4401      	add	r1, r0
 800ed76:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ed7a:	4313      	orrs	r3, r2
 800ed7c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ed7e:	68bb      	ldr	r3, [r7, #8]
 800ed80:	791b      	ldrb	r3, [r3, #4]
 800ed82:	2b01      	cmp	r3, #1
 800ed84:	d11f      	bne.n	800edc6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ed86:	69bb      	ldr	r3, [r7, #24]
 800ed88:	015a      	lsls	r2, r3, #5
 800ed8a:	69fb      	ldr	r3, [r7, #28]
 800ed8c:	4413      	add	r3, r2
 800ed8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ed92:	691b      	ldr	r3, [r3, #16]
 800ed94:	69ba      	ldr	r2, [r7, #24]
 800ed96:	0151      	lsls	r1, r2, #5
 800ed98:	69fa      	ldr	r2, [r7, #28]
 800ed9a:	440a      	add	r2, r1
 800ed9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eda0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800eda4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800eda6:	69bb      	ldr	r3, [r7, #24]
 800eda8:	015a      	lsls	r2, r3, #5
 800edaa:	69fb      	ldr	r3, [r7, #28]
 800edac:	4413      	add	r3, r2
 800edae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800edb2:	691b      	ldr	r3, [r3, #16]
 800edb4:	69ba      	ldr	r2, [r7, #24]
 800edb6:	0151      	lsls	r1, r2, #5
 800edb8:	69fa      	ldr	r2, [r7, #28]
 800edba:	440a      	add	r2, r1
 800edbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800edc0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800edc4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800edc6:	79fb      	ldrb	r3, [r7, #7]
 800edc8:	2b01      	cmp	r3, #1
 800edca:	d14b      	bne.n	800ee64 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800edcc:	68bb      	ldr	r3, [r7, #8]
 800edce:	69db      	ldr	r3, [r3, #28]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d009      	beq.n	800ede8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800edd4:	69bb      	ldr	r3, [r7, #24]
 800edd6:	015a      	lsls	r2, r3, #5
 800edd8:	69fb      	ldr	r3, [r7, #28]
 800edda:	4413      	add	r3, r2
 800eddc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ede0:	461a      	mov	r2, r3
 800ede2:	68bb      	ldr	r3, [r7, #8]
 800ede4:	69db      	ldr	r3, [r3, #28]
 800ede6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	791b      	ldrb	r3, [r3, #4]
 800edec:	2b01      	cmp	r3, #1
 800edee:	d128      	bne.n	800ee42 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800edf0:	69fb      	ldr	r3, [r7, #28]
 800edf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800edf6:	689b      	ldr	r3, [r3, #8]
 800edf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d110      	bne.n	800ee22 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ee00:	69bb      	ldr	r3, [r7, #24]
 800ee02:	015a      	lsls	r2, r3, #5
 800ee04:	69fb      	ldr	r3, [r7, #28]
 800ee06:	4413      	add	r3, r2
 800ee08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	69ba      	ldr	r2, [r7, #24]
 800ee10:	0151      	lsls	r1, r2, #5
 800ee12:	69fa      	ldr	r2, [r7, #28]
 800ee14:	440a      	add	r2, r1
 800ee16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ee1a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ee1e:	6013      	str	r3, [r2, #0]
 800ee20:	e00f      	b.n	800ee42 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ee22:	69bb      	ldr	r3, [r7, #24]
 800ee24:	015a      	lsls	r2, r3, #5
 800ee26:	69fb      	ldr	r3, [r7, #28]
 800ee28:	4413      	add	r3, r2
 800ee2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	69ba      	ldr	r2, [r7, #24]
 800ee32:	0151      	lsls	r1, r2, #5
 800ee34:	69fa      	ldr	r2, [r7, #28]
 800ee36:	440a      	add	r2, r1
 800ee38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ee3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ee40:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ee42:	69bb      	ldr	r3, [r7, #24]
 800ee44:	015a      	lsls	r2, r3, #5
 800ee46:	69fb      	ldr	r3, [r7, #28]
 800ee48:	4413      	add	r3, r2
 800ee4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	69ba      	ldr	r2, [r7, #24]
 800ee52:	0151      	lsls	r1, r2, #5
 800ee54:	69fa      	ldr	r2, [r7, #28]
 800ee56:	440a      	add	r2, r1
 800ee58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ee5c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ee60:	6013      	str	r3, [r2, #0]
 800ee62:	e16a      	b.n	800f13a <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ee64:	69bb      	ldr	r3, [r7, #24]
 800ee66:	015a      	lsls	r2, r3, #5
 800ee68:	69fb      	ldr	r3, [r7, #28]
 800ee6a:	4413      	add	r3, r2
 800ee6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	69ba      	ldr	r2, [r7, #24]
 800ee74:	0151      	lsls	r1, r2, #5
 800ee76:	69fa      	ldr	r2, [r7, #28]
 800ee78:	440a      	add	r2, r1
 800ee7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ee7e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ee82:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ee84:	68bb      	ldr	r3, [r7, #8]
 800ee86:	791b      	ldrb	r3, [r3, #4]
 800ee88:	2b01      	cmp	r3, #1
 800ee8a:	d015      	beq.n	800eeb8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ee8c:	68bb      	ldr	r3, [r7, #8]
 800ee8e:	691b      	ldr	r3, [r3, #16]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	f000 8152 	beq.w	800f13a <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ee96:	69fb      	ldr	r3, [r7, #28]
 800ee98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ee9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ee9e:	68bb      	ldr	r3, [r7, #8]
 800eea0:	781b      	ldrb	r3, [r3, #0]
 800eea2:	f003 030f 	and.w	r3, r3, #15
 800eea6:	2101      	movs	r1, #1
 800eea8:	fa01 f303 	lsl.w	r3, r1, r3
 800eeac:	69f9      	ldr	r1, [r7, #28]
 800eeae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800eeb2:	4313      	orrs	r3, r2
 800eeb4:	634b      	str	r3, [r1, #52]	@ 0x34
 800eeb6:	e140      	b.n	800f13a <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800eeb8:	69fb      	ldr	r3, [r7, #28]
 800eeba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eebe:	689b      	ldr	r3, [r3, #8]
 800eec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d117      	bne.n	800eef8 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800eec8:	69bb      	ldr	r3, [r7, #24]
 800eeca:	015a      	lsls	r2, r3, #5
 800eecc:	69fb      	ldr	r3, [r7, #28]
 800eece:	4413      	add	r3, r2
 800eed0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	69ba      	ldr	r2, [r7, #24]
 800eed8:	0151      	lsls	r1, r2, #5
 800eeda:	69fa      	ldr	r2, [r7, #28]
 800eedc:	440a      	add	r2, r1
 800eede:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eee2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800eee6:	6013      	str	r3, [r2, #0]
 800eee8:	e016      	b.n	800ef18 <USB_EPStartXfer+0x308>
 800eeea:	bf00      	nop
 800eeec:	e007ffff 	.word	0xe007ffff
 800eef0:	fff80000 	.word	0xfff80000
 800eef4:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800eef8:	69bb      	ldr	r3, [r7, #24]
 800eefa:	015a      	lsls	r2, r3, #5
 800eefc:	69fb      	ldr	r3, [r7, #28]
 800eefe:	4413      	add	r3, r2
 800ef00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	69ba      	ldr	r2, [r7, #24]
 800ef08:	0151      	lsls	r1, r2, #5
 800ef0a:	69fa      	ldr	r2, [r7, #28]
 800ef0c:	440a      	add	r2, r1
 800ef0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ef12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ef16:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ef18:	68bb      	ldr	r3, [r7, #8]
 800ef1a:	68d9      	ldr	r1, [r3, #12]
 800ef1c:	68bb      	ldr	r3, [r7, #8]
 800ef1e:	781a      	ldrb	r2, [r3, #0]
 800ef20:	68bb      	ldr	r3, [r7, #8]
 800ef22:	691b      	ldr	r3, [r3, #16]
 800ef24:	b298      	uxth	r0, r3
 800ef26:	79fb      	ldrb	r3, [r7, #7]
 800ef28:	9300      	str	r3, [sp, #0]
 800ef2a:	4603      	mov	r3, r0
 800ef2c:	68f8      	ldr	r0, [r7, #12]
 800ef2e:	f000 f9b9 	bl	800f2a4 <USB_WritePacket>
 800ef32:	e102      	b.n	800f13a <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ef34:	69bb      	ldr	r3, [r7, #24]
 800ef36:	015a      	lsls	r2, r3, #5
 800ef38:	69fb      	ldr	r3, [r7, #28]
 800ef3a:	4413      	add	r3, r2
 800ef3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef40:	691a      	ldr	r2, [r3, #16]
 800ef42:	69bb      	ldr	r3, [r7, #24]
 800ef44:	0159      	lsls	r1, r3, #5
 800ef46:	69fb      	ldr	r3, [r7, #28]
 800ef48:	440b      	add	r3, r1
 800ef4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef4e:	4619      	mov	r1, r3
 800ef50:	4b7c      	ldr	r3, [pc, #496]	@ (800f144 <USB_EPStartXfer+0x534>)
 800ef52:	4013      	ands	r3, r2
 800ef54:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ef56:	69bb      	ldr	r3, [r7, #24]
 800ef58:	015a      	lsls	r2, r3, #5
 800ef5a:	69fb      	ldr	r3, [r7, #28]
 800ef5c:	4413      	add	r3, r2
 800ef5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef62:	691a      	ldr	r2, [r3, #16]
 800ef64:	69bb      	ldr	r3, [r7, #24]
 800ef66:	0159      	lsls	r1, r3, #5
 800ef68:	69fb      	ldr	r3, [r7, #28]
 800ef6a:	440b      	add	r3, r1
 800ef6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef70:	4619      	mov	r1, r3
 800ef72:	4b75      	ldr	r3, [pc, #468]	@ (800f148 <USB_EPStartXfer+0x538>)
 800ef74:	4013      	ands	r3, r2
 800ef76:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800ef78:	69bb      	ldr	r3, [r7, #24]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d12f      	bne.n	800efde <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800ef7e:	68bb      	ldr	r3, [r7, #8]
 800ef80:	691b      	ldr	r3, [r3, #16]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d003      	beq.n	800ef8e <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800ef86:	68bb      	ldr	r3, [r7, #8]
 800ef88:	689a      	ldr	r2, [r3, #8]
 800ef8a:	68bb      	ldr	r3, [r7, #8]
 800ef8c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800ef8e:	68bb      	ldr	r3, [r7, #8]
 800ef90:	689a      	ldr	r2, [r3, #8]
 800ef92:	68bb      	ldr	r3, [r7, #8]
 800ef94:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ef96:	69bb      	ldr	r3, [r7, #24]
 800ef98:	015a      	lsls	r2, r3, #5
 800ef9a:	69fb      	ldr	r3, [r7, #28]
 800ef9c:	4413      	add	r3, r2
 800ef9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800efa2:	691a      	ldr	r2, [r3, #16]
 800efa4:	68bb      	ldr	r3, [r7, #8]
 800efa6:	6a1b      	ldr	r3, [r3, #32]
 800efa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800efac:	69b9      	ldr	r1, [r7, #24]
 800efae:	0148      	lsls	r0, r1, #5
 800efb0:	69f9      	ldr	r1, [r7, #28]
 800efb2:	4401      	add	r1, r0
 800efb4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800efb8:	4313      	orrs	r3, r2
 800efba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800efbc:	69bb      	ldr	r3, [r7, #24]
 800efbe:	015a      	lsls	r2, r3, #5
 800efc0:	69fb      	ldr	r3, [r7, #28]
 800efc2:	4413      	add	r3, r2
 800efc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800efc8:	691b      	ldr	r3, [r3, #16]
 800efca:	69ba      	ldr	r2, [r7, #24]
 800efcc:	0151      	lsls	r1, r2, #5
 800efce:	69fa      	ldr	r2, [r7, #28]
 800efd0:	440a      	add	r2, r1
 800efd2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800efd6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800efda:	6113      	str	r3, [r2, #16]
 800efdc:	e05f      	b.n	800f09e <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800efde:	68bb      	ldr	r3, [r7, #8]
 800efe0:	691b      	ldr	r3, [r3, #16]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d123      	bne.n	800f02e <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800efe6:	69bb      	ldr	r3, [r7, #24]
 800efe8:	015a      	lsls	r2, r3, #5
 800efea:	69fb      	ldr	r3, [r7, #28]
 800efec:	4413      	add	r3, r2
 800efee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eff2:	691a      	ldr	r2, [r3, #16]
 800eff4:	68bb      	ldr	r3, [r7, #8]
 800eff6:	689b      	ldr	r3, [r3, #8]
 800eff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800effc:	69b9      	ldr	r1, [r7, #24]
 800effe:	0148      	lsls	r0, r1, #5
 800f000:	69f9      	ldr	r1, [r7, #28]
 800f002:	4401      	add	r1, r0
 800f004:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f008:	4313      	orrs	r3, r2
 800f00a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f00c:	69bb      	ldr	r3, [r7, #24]
 800f00e:	015a      	lsls	r2, r3, #5
 800f010:	69fb      	ldr	r3, [r7, #28]
 800f012:	4413      	add	r3, r2
 800f014:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f018:	691b      	ldr	r3, [r3, #16]
 800f01a:	69ba      	ldr	r2, [r7, #24]
 800f01c:	0151      	lsls	r1, r2, #5
 800f01e:	69fa      	ldr	r2, [r7, #28]
 800f020:	440a      	add	r2, r1
 800f022:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f026:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f02a:	6113      	str	r3, [r2, #16]
 800f02c:	e037      	b.n	800f09e <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f02e:	68bb      	ldr	r3, [r7, #8]
 800f030:	691a      	ldr	r2, [r3, #16]
 800f032:	68bb      	ldr	r3, [r7, #8]
 800f034:	689b      	ldr	r3, [r3, #8]
 800f036:	4413      	add	r3, r2
 800f038:	1e5a      	subs	r2, r3, #1
 800f03a:	68bb      	ldr	r3, [r7, #8]
 800f03c:	689b      	ldr	r3, [r3, #8]
 800f03e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f042:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800f044:	68bb      	ldr	r3, [r7, #8]
 800f046:	689b      	ldr	r3, [r3, #8]
 800f048:	8afa      	ldrh	r2, [r7, #22]
 800f04a:	fb03 f202 	mul.w	r2, r3, r2
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f052:	69bb      	ldr	r3, [r7, #24]
 800f054:	015a      	lsls	r2, r3, #5
 800f056:	69fb      	ldr	r3, [r7, #28]
 800f058:	4413      	add	r3, r2
 800f05a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f05e:	691a      	ldr	r2, [r3, #16]
 800f060:	8afb      	ldrh	r3, [r7, #22]
 800f062:	04d9      	lsls	r1, r3, #19
 800f064:	4b39      	ldr	r3, [pc, #228]	@ (800f14c <USB_EPStartXfer+0x53c>)
 800f066:	400b      	ands	r3, r1
 800f068:	69b9      	ldr	r1, [r7, #24]
 800f06a:	0148      	lsls	r0, r1, #5
 800f06c:	69f9      	ldr	r1, [r7, #28]
 800f06e:	4401      	add	r1, r0
 800f070:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f074:	4313      	orrs	r3, r2
 800f076:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800f078:	69bb      	ldr	r3, [r7, #24]
 800f07a:	015a      	lsls	r2, r3, #5
 800f07c:	69fb      	ldr	r3, [r7, #28]
 800f07e:	4413      	add	r3, r2
 800f080:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f084:	691a      	ldr	r2, [r3, #16]
 800f086:	68bb      	ldr	r3, [r7, #8]
 800f088:	6a1b      	ldr	r3, [r3, #32]
 800f08a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f08e:	69b9      	ldr	r1, [r7, #24]
 800f090:	0148      	lsls	r0, r1, #5
 800f092:	69f9      	ldr	r1, [r7, #28]
 800f094:	4401      	add	r1, r0
 800f096:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f09a:	4313      	orrs	r3, r2
 800f09c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800f09e:	79fb      	ldrb	r3, [r7, #7]
 800f0a0:	2b01      	cmp	r3, #1
 800f0a2:	d10d      	bne.n	800f0c0 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f0a4:	68bb      	ldr	r3, [r7, #8]
 800f0a6:	68db      	ldr	r3, [r3, #12]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d009      	beq.n	800f0c0 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f0ac:	68bb      	ldr	r3, [r7, #8]
 800f0ae:	68d9      	ldr	r1, [r3, #12]
 800f0b0:	69bb      	ldr	r3, [r7, #24]
 800f0b2:	015a      	lsls	r2, r3, #5
 800f0b4:	69fb      	ldr	r3, [r7, #28]
 800f0b6:	4413      	add	r3, r2
 800f0b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f0bc:	460a      	mov	r2, r1
 800f0be:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f0c0:	68bb      	ldr	r3, [r7, #8]
 800f0c2:	791b      	ldrb	r3, [r3, #4]
 800f0c4:	2b01      	cmp	r3, #1
 800f0c6:	d128      	bne.n	800f11a <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f0c8:	69fb      	ldr	r3, [r7, #28]
 800f0ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f0ce:	689b      	ldr	r3, [r3, #8]
 800f0d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d110      	bne.n	800f0fa <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f0d8:	69bb      	ldr	r3, [r7, #24]
 800f0da:	015a      	lsls	r2, r3, #5
 800f0dc:	69fb      	ldr	r3, [r7, #28]
 800f0de:	4413      	add	r3, r2
 800f0e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	69ba      	ldr	r2, [r7, #24]
 800f0e8:	0151      	lsls	r1, r2, #5
 800f0ea:	69fa      	ldr	r2, [r7, #28]
 800f0ec:	440a      	add	r2, r1
 800f0ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f0f2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f0f6:	6013      	str	r3, [r2, #0]
 800f0f8:	e00f      	b.n	800f11a <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f0fa:	69bb      	ldr	r3, [r7, #24]
 800f0fc:	015a      	lsls	r2, r3, #5
 800f0fe:	69fb      	ldr	r3, [r7, #28]
 800f100:	4413      	add	r3, r2
 800f102:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	69ba      	ldr	r2, [r7, #24]
 800f10a:	0151      	lsls	r1, r2, #5
 800f10c:	69fa      	ldr	r2, [r7, #28]
 800f10e:	440a      	add	r2, r1
 800f110:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f114:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f118:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f11a:	69bb      	ldr	r3, [r7, #24]
 800f11c:	015a      	lsls	r2, r3, #5
 800f11e:	69fb      	ldr	r3, [r7, #28]
 800f120:	4413      	add	r3, r2
 800f122:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	69ba      	ldr	r2, [r7, #24]
 800f12a:	0151      	lsls	r1, r2, #5
 800f12c:	69fa      	ldr	r2, [r7, #28]
 800f12e:	440a      	add	r2, r1
 800f130:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f134:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800f138:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f13a:	2300      	movs	r3, #0
}
 800f13c:	4618      	mov	r0, r3
 800f13e:	3720      	adds	r7, #32
 800f140:	46bd      	mov	sp, r7
 800f142:	bd80      	pop	{r7, pc}
 800f144:	fff80000 	.word	0xfff80000
 800f148:	e007ffff 	.word	0xe007ffff
 800f14c:	1ff80000 	.word	0x1ff80000

0800f150 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f150:	b480      	push	{r7}
 800f152:	b087      	sub	sp, #28
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
 800f158:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f15a:	2300      	movs	r3, #0
 800f15c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800f15e:	2300      	movs	r3, #0
 800f160:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f166:	683b      	ldr	r3, [r7, #0]
 800f168:	785b      	ldrb	r3, [r3, #1]
 800f16a:	2b01      	cmp	r3, #1
 800f16c:	d14a      	bne.n	800f204 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f16e:	683b      	ldr	r3, [r7, #0]
 800f170:	781b      	ldrb	r3, [r3, #0]
 800f172:	015a      	lsls	r2, r3, #5
 800f174:	693b      	ldr	r3, [r7, #16]
 800f176:	4413      	add	r3, r2
 800f178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f182:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f186:	f040 8086 	bne.w	800f296 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800f18a:	683b      	ldr	r3, [r7, #0]
 800f18c:	781b      	ldrb	r3, [r3, #0]
 800f18e:	015a      	lsls	r2, r3, #5
 800f190:	693b      	ldr	r3, [r7, #16]
 800f192:	4413      	add	r3, r2
 800f194:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	683a      	ldr	r2, [r7, #0]
 800f19c:	7812      	ldrb	r2, [r2, #0]
 800f19e:	0151      	lsls	r1, r2, #5
 800f1a0:	693a      	ldr	r2, [r7, #16]
 800f1a2:	440a      	add	r2, r1
 800f1a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f1a8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f1ac:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	781b      	ldrb	r3, [r3, #0]
 800f1b2:	015a      	lsls	r2, r3, #5
 800f1b4:	693b      	ldr	r3, [r7, #16]
 800f1b6:	4413      	add	r3, r2
 800f1b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	683a      	ldr	r2, [r7, #0]
 800f1c0:	7812      	ldrb	r2, [r2, #0]
 800f1c2:	0151      	lsls	r1, r2, #5
 800f1c4:	693a      	ldr	r2, [r7, #16]
 800f1c6:	440a      	add	r2, r1
 800f1c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f1cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f1d0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	3301      	adds	r3, #1
 800f1d6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	f242 7210 	movw	r2, #10000	@ 0x2710
 800f1de:	4293      	cmp	r3, r2
 800f1e0:	d902      	bls.n	800f1e8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800f1e2:	2301      	movs	r3, #1
 800f1e4:	75fb      	strb	r3, [r7, #23]
          break;
 800f1e6:	e056      	b.n	800f296 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800f1e8:	683b      	ldr	r3, [r7, #0]
 800f1ea:	781b      	ldrb	r3, [r3, #0]
 800f1ec:	015a      	lsls	r2, r3, #5
 800f1ee:	693b      	ldr	r3, [r7, #16]
 800f1f0:	4413      	add	r3, r2
 800f1f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f1fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f200:	d0e7      	beq.n	800f1d2 <USB_EPStopXfer+0x82>
 800f202:	e048      	b.n	800f296 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	781b      	ldrb	r3, [r3, #0]
 800f208:	015a      	lsls	r2, r3, #5
 800f20a:	693b      	ldr	r3, [r7, #16]
 800f20c:	4413      	add	r3, r2
 800f20e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f218:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f21c:	d13b      	bne.n	800f296 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	781b      	ldrb	r3, [r3, #0]
 800f222:	015a      	lsls	r2, r3, #5
 800f224:	693b      	ldr	r3, [r7, #16]
 800f226:	4413      	add	r3, r2
 800f228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	683a      	ldr	r2, [r7, #0]
 800f230:	7812      	ldrb	r2, [r2, #0]
 800f232:	0151      	lsls	r1, r2, #5
 800f234:	693a      	ldr	r2, [r7, #16]
 800f236:	440a      	add	r2, r1
 800f238:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f23c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f240:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800f242:	683b      	ldr	r3, [r7, #0]
 800f244:	781b      	ldrb	r3, [r3, #0]
 800f246:	015a      	lsls	r2, r3, #5
 800f248:	693b      	ldr	r3, [r7, #16]
 800f24a:	4413      	add	r3, r2
 800f24c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	683a      	ldr	r2, [r7, #0]
 800f254:	7812      	ldrb	r2, [r2, #0]
 800f256:	0151      	lsls	r1, r2, #5
 800f258:	693a      	ldr	r2, [r7, #16]
 800f25a:	440a      	add	r2, r1
 800f25c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f260:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f264:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	3301      	adds	r3, #1
 800f26a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800f272:	4293      	cmp	r3, r2
 800f274:	d902      	bls.n	800f27c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800f276:	2301      	movs	r3, #1
 800f278:	75fb      	strb	r3, [r7, #23]
          break;
 800f27a:	e00c      	b.n	800f296 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	781b      	ldrb	r3, [r3, #0]
 800f280:	015a      	lsls	r2, r3, #5
 800f282:	693b      	ldr	r3, [r7, #16]
 800f284:	4413      	add	r3, r2
 800f286:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f290:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f294:	d0e7      	beq.n	800f266 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800f296:	7dfb      	ldrb	r3, [r7, #23]
}
 800f298:	4618      	mov	r0, r3
 800f29a:	371c      	adds	r7, #28
 800f29c:	46bd      	mov	sp, r7
 800f29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a2:	4770      	bx	lr

0800f2a4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f2a4:	b480      	push	{r7}
 800f2a6:	b089      	sub	sp, #36	@ 0x24
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	60f8      	str	r0, [r7, #12]
 800f2ac:	60b9      	str	r1, [r7, #8]
 800f2ae:	4611      	mov	r1, r2
 800f2b0:	461a      	mov	r2, r3
 800f2b2:	460b      	mov	r3, r1
 800f2b4:	71fb      	strb	r3, [r7, #7]
 800f2b6:	4613      	mov	r3, r2
 800f2b8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800f2be:	68bb      	ldr	r3, [r7, #8]
 800f2c0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800f2c2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d123      	bne.n	800f312 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f2ca:	88bb      	ldrh	r3, [r7, #4]
 800f2cc:	3303      	adds	r3, #3
 800f2ce:	089b      	lsrs	r3, r3, #2
 800f2d0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	61bb      	str	r3, [r7, #24]
 800f2d6:	e018      	b.n	800f30a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f2d8:	79fb      	ldrb	r3, [r7, #7]
 800f2da:	031a      	lsls	r2, r3, #12
 800f2dc:	697b      	ldr	r3, [r7, #20]
 800f2de:	4413      	add	r3, r2
 800f2e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f2e4:	461a      	mov	r2, r3
 800f2e6:	69fb      	ldr	r3, [r7, #28]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f2ec:	69fb      	ldr	r3, [r7, #28]
 800f2ee:	3301      	adds	r3, #1
 800f2f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f2f2:	69fb      	ldr	r3, [r7, #28]
 800f2f4:	3301      	adds	r3, #1
 800f2f6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f2f8:	69fb      	ldr	r3, [r7, #28]
 800f2fa:	3301      	adds	r3, #1
 800f2fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f2fe:	69fb      	ldr	r3, [r7, #28]
 800f300:	3301      	adds	r3, #1
 800f302:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f304:	69bb      	ldr	r3, [r7, #24]
 800f306:	3301      	adds	r3, #1
 800f308:	61bb      	str	r3, [r7, #24]
 800f30a:	69ba      	ldr	r2, [r7, #24]
 800f30c:	693b      	ldr	r3, [r7, #16]
 800f30e:	429a      	cmp	r2, r3
 800f310:	d3e2      	bcc.n	800f2d8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f312:	2300      	movs	r3, #0
}
 800f314:	4618      	mov	r0, r3
 800f316:	3724      	adds	r7, #36	@ 0x24
 800f318:	46bd      	mov	sp, r7
 800f31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31e:	4770      	bx	lr

0800f320 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f320:	b480      	push	{r7}
 800f322:	b08b      	sub	sp, #44	@ 0x2c
 800f324:	af00      	add	r7, sp, #0
 800f326:	60f8      	str	r0, [r7, #12]
 800f328:	60b9      	str	r1, [r7, #8]
 800f32a:	4613      	mov	r3, r2
 800f32c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800f332:	68bb      	ldr	r3, [r7, #8]
 800f334:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800f336:	88fb      	ldrh	r3, [r7, #6]
 800f338:	089b      	lsrs	r3, r3, #2
 800f33a:	b29b      	uxth	r3, r3
 800f33c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800f33e:	88fb      	ldrh	r3, [r7, #6]
 800f340:	f003 0303 	and.w	r3, r3, #3
 800f344:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800f346:	2300      	movs	r3, #0
 800f348:	623b      	str	r3, [r7, #32]
 800f34a:	e014      	b.n	800f376 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f34c:	69bb      	ldr	r3, [r7, #24]
 800f34e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f352:	681a      	ldr	r2, [r3, #0]
 800f354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f356:	601a      	str	r2, [r3, #0]
    pDest++;
 800f358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f35a:	3301      	adds	r3, #1
 800f35c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800f35e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f360:	3301      	adds	r3, #1
 800f362:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800f364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f366:	3301      	adds	r3, #1
 800f368:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800f36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f36c:	3301      	adds	r3, #1
 800f36e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800f370:	6a3b      	ldr	r3, [r7, #32]
 800f372:	3301      	adds	r3, #1
 800f374:	623b      	str	r3, [r7, #32]
 800f376:	6a3a      	ldr	r2, [r7, #32]
 800f378:	697b      	ldr	r3, [r7, #20]
 800f37a:	429a      	cmp	r2, r3
 800f37c:	d3e6      	bcc.n	800f34c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800f37e:	8bfb      	ldrh	r3, [r7, #30]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d01e      	beq.n	800f3c2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800f384:	2300      	movs	r3, #0
 800f386:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800f388:	69bb      	ldr	r3, [r7, #24]
 800f38a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f38e:	461a      	mov	r2, r3
 800f390:	f107 0310 	add.w	r3, r7, #16
 800f394:	6812      	ldr	r2, [r2, #0]
 800f396:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f398:	693a      	ldr	r2, [r7, #16]
 800f39a:	6a3b      	ldr	r3, [r7, #32]
 800f39c:	b2db      	uxtb	r3, r3
 800f39e:	00db      	lsls	r3, r3, #3
 800f3a0:	fa22 f303 	lsr.w	r3, r2, r3
 800f3a4:	b2da      	uxtb	r2, r3
 800f3a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3a8:	701a      	strb	r2, [r3, #0]
      i++;
 800f3aa:	6a3b      	ldr	r3, [r7, #32]
 800f3ac:	3301      	adds	r3, #1
 800f3ae:	623b      	str	r3, [r7, #32]
      pDest++;
 800f3b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3b2:	3301      	adds	r3, #1
 800f3b4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800f3b6:	8bfb      	ldrh	r3, [r7, #30]
 800f3b8:	3b01      	subs	r3, #1
 800f3ba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800f3bc:	8bfb      	ldrh	r3, [r7, #30]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d1ea      	bne.n	800f398 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800f3c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	372c      	adds	r7, #44	@ 0x2c
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ce:	4770      	bx	lr

0800f3d0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f3d0:	b480      	push	{r7}
 800f3d2:	b085      	sub	sp, #20
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
 800f3d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	781b      	ldrb	r3, [r3, #0]
 800f3e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f3e4:	683b      	ldr	r3, [r7, #0]
 800f3e6:	785b      	ldrb	r3, [r3, #1]
 800f3e8:	2b01      	cmp	r3, #1
 800f3ea:	d12c      	bne.n	800f446 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f3ec:	68bb      	ldr	r3, [r7, #8]
 800f3ee:	015a      	lsls	r2, r3, #5
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	4413      	add	r3, r2
 800f3f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	db12      	blt.n	800f424 <USB_EPSetStall+0x54>
 800f3fe:	68bb      	ldr	r3, [r7, #8]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d00f      	beq.n	800f424 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f404:	68bb      	ldr	r3, [r7, #8]
 800f406:	015a      	lsls	r2, r3, #5
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	4413      	add	r3, r2
 800f40c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	68ba      	ldr	r2, [r7, #8]
 800f414:	0151      	lsls	r1, r2, #5
 800f416:	68fa      	ldr	r2, [r7, #12]
 800f418:	440a      	add	r2, r1
 800f41a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f41e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f422:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f424:	68bb      	ldr	r3, [r7, #8]
 800f426:	015a      	lsls	r2, r3, #5
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	4413      	add	r3, r2
 800f42c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	68ba      	ldr	r2, [r7, #8]
 800f434:	0151      	lsls	r1, r2, #5
 800f436:	68fa      	ldr	r2, [r7, #12]
 800f438:	440a      	add	r2, r1
 800f43a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f43e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f442:	6013      	str	r3, [r2, #0]
 800f444:	e02b      	b.n	800f49e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f446:	68bb      	ldr	r3, [r7, #8]
 800f448:	015a      	lsls	r2, r3, #5
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	4413      	add	r3, r2
 800f44e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	2b00      	cmp	r3, #0
 800f456:	db12      	blt.n	800f47e <USB_EPSetStall+0xae>
 800f458:	68bb      	ldr	r3, [r7, #8]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d00f      	beq.n	800f47e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f45e:	68bb      	ldr	r3, [r7, #8]
 800f460:	015a      	lsls	r2, r3, #5
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	4413      	add	r3, r2
 800f466:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	68ba      	ldr	r2, [r7, #8]
 800f46e:	0151      	lsls	r1, r2, #5
 800f470:	68fa      	ldr	r2, [r7, #12]
 800f472:	440a      	add	r2, r1
 800f474:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f478:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f47c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f47e:	68bb      	ldr	r3, [r7, #8]
 800f480:	015a      	lsls	r2, r3, #5
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	4413      	add	r3, r2
 800f486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	68ba      	ldr	r2, [r7, #8]
 800f48e:	0151      	lsls	r1, r2, #5
 800f490:	68fa      	ldr	r2, [r7, #12]
 800f492:	440a      	add	r2, r1
 800f494:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f498:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f49c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f49e:	2300      	movs	r3, #0
}
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	3714      	adds	r7, #20
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4aa:	4770      	bx	lr

0800f4ac <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f4ac:	b480      	push	{r7}
 800f4ae:	b085      	sub	sp, #20
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
 800f4b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f4ba:	683b      	ldr	r3, [r7, #0]
 800f4bc:	781b      	ldrb	r3, [r3, #0]
 800f4be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f4c0:	683b      	ldr	r3, [r7, #0]
 800f4c2:	785b      	ldrb	r3, [r3, #1]
 800f4c4:	2b01      	cmp	r3, #1
 800f4c6:	d128      	bne.n	800f51a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f4c8:	68bb      	ldr	r3, [r7, #8]
 800f4ca:	015a      	lsls	r2, r3, #5
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	4413      	add	r3, r2
 800f4d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	68ba      	ldr	r2, [r7, #8]
 800f4d8:	0151      	lsls	r1, r2, #5
 800f4da:	68fa      	ldr	r2, [r7, #12]
 800f4dc:	440a      	add	r2, r1
 800f4de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f4e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f4e6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	791b      	ldrb	r3, [r3, #4]
 800f4ec:	2b03      	cmp	r3, #3
 800f4ee:	d003      	beq.n	800f4f8 <USB_EPClearStall+0x4c>
 800f4f0:	683b      	ldr	r3, [r7, #0]
 800f4f2:	791b      	ldrb	r3, [r3, #4]
 800f4f4:	2b02      	cmp	r3, #2
 800f4f6:	d138      	bne.n	800f56a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f4f8:	68bb      	ldr	r3, [r7, #8]
 800f4fa:	015a      	lsls	r2, r3, #5
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	4413      	add	r3, r2
 800f500:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	68ba      	ldr	r2, [r7, #8]
 800f508:	0151      	lsls	r1, r2, #5
 800f50a:	68fa      	ldr	r2, [r7, #12]
 800f50c:	440a      	add	r2, r1
 800f50e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f512:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f516:	6013      	str	r3, [r2, #0]
 800f518:	e027      	b.n	800f56a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f51a:	68bb      	ldr	r3, [r7, #8]
 800f51c:	015a      	lsls	r2, r3, #5
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	4413      	add	r3, r2
 800f522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	68ba      	ldr	r2, [r7, #8]
 800f52a:	0151      	lsls	r1, r2, #5
 800f52c:	68fa      	ldr	r2, [r7, #12]
 800f52e:	440a      	add	r2, r1
 800f530:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f534:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f538:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f53a:	683b      	ldr	r3, [r7, #0]
 800f53c:	791b      	ldrb	r3, [r3, #4]
 800f53e:	2b03      	cmp	r3, #3
 800f540:	d003      	beq.n	800f54a <USB_EPClearStall+0x9e>
 800f542:	683b      	ldr	r3, [r7, #0]
 800f544:	791b      	ldrb	r3, [r3, #4]
 800f546:	2b02      	cmp	r3, #2
 800f548:	d10f      	bne.n	800f56a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	015a      	lsls	r2, r3, #5
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	4413      	add	r3, r2
 800f552:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	68ba      	ldr	r2, [r7, #8]
 800f55a:	0151      	lsls	r1, r2, #5
 800f55c:	68fa      	ldr	r2, [r7, #12]
 800f55e:	440a      	add	r2, r1
 800f560:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f564:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f568:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f56a:	2300      	movs	r3, #0
}
 800f56c:	4618      	mov	r0, r3
 800f56e:	3714      	adds	r7, #20
 800f570:	46bd      	mov	sp, r7
 800f572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f576:	4770      	bx	lr

0800f578 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f578:	b480      	push	{r7}
 800f57a:	b085      	sub	sp, #20
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
 800f580:	460b      	mov	r3, r1
 800f582:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	68fa      	ldr	r2, [r7, #12]
 800f592:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f596:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800f59a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f5a2:	681a      	ldr	r2, [r3, #0]
 800f5a4:	78fb      	ldrb	r3, [r7, #3]
 800f5a6:	011b      	lsls	r3, r3, #4
 800f5a8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800f5ac:	68f9      	ldr	r1, [r7, #12]
 800f5ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f5b2:	4313      	orrs	r3, r2
 800f5b4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f5b6:	2300      	movs	r3, #0
}
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	3714      	adds	r7, #20
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c2:	4770      	bx	lr

0800f5c4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f5c4:	b480      	push	{r7}
 800f5c6:	b085      	sub	sp, #20
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	68fa      	ldr	r2, [r7, #12]
 800f5da:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f5de:	f023 0303 	bic.w	r3, r3, #3
 800f5e2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f5ea:	685b      	ldr	r3, [r3, #4]
 800f5ec:	68fa      	ldr	r2, [r7, #12]
 800f5ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f5f2:	f023 0302 	bic.w	r3, r3, #2
 800f5f6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f5f8:	2300      	movs	r3, #0
}
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	3714      	adds	r7, #20
 800f5fe:	46bd      	mov	sp, r7
 800f600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f604:	4770      	bx	lr

0800f606 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f606:	b480      	push	{r7}
 800f608:	b085      	sub	sp, #20
 800f60a:	af00      	add	r7, sp, #0
 800f60c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	68fa      	ldr	r2, [r7, #12]
 800f61c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f620:	f023 0303 	bic.w	r3, r3, #3
 800f624:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f62c:	685b      	ldr	r3, [r3, #4]
 800f62e:	68fa      	ldr	r2, [r7, #12]
 800f630:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f634:	f043 0302 	orr.w	r3, r3, #2
 800f638:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f63a:	2300      	movs	r3, #0
}
 800f63c:	4618      	mov	r0, r3
 800f63e:	3714      	adds	r7, #20
 800f640:	46bd      	mov	sp, r7
 800f642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f646:	4770      	bx	lr

0800f648 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800f648:	b480      	push	{r7}
 800f64a:	b085      	sub	sp, #20
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	695b      	ldr	r3, [r3, #20]
 800f654:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	699b      	ldr	r3, [r3, #24]
 800f65a:	68fa      	ldr	r2, [r7, #12]
 800f65c:	4013      	ands	r3, r2
 800f65e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f660:	68fb      	ldr	r3, [r7, #12]
}
 800f662:	4618      	mov	r0, r3
 800f664:	3714      	adds	r7, #20
 800f666:	46bd      	mov	sp, r7
 800f668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66c:	4770      	bx	lr

0800f66e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f66e:	b480      	push	{r7}
 800f670:	b085      	sub	sp, #20
 800f672:	af00      	add	r7, sp, #0
 800f674:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f680:	699b      	ldr	r3, [r3, #24]
 800f682:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f68a:	69db      	ldr	r3, [r3, #28]
 800f68c:	68ba      	ldr	r2, [r7, #8]
 800f68e:	4013      	ands	r3, r2
 800f690:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f692:	68bb      	ldr	r3, [r7, #8]
 800f694:	0c1b      	lsrs	r3, r3, #16
}
 800f696:	4618      	mov	r0, r3
 800f698:	3714      	adds	r7, #20
 800f69a:	46bd      	mov	sp, r7
 800f69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a0:	4770      	bx	lr

0800f6a2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f6a2:	b480      	push	{r7}
 800f6a4:	b085      	sub	sp, #20
 800f6a6:	af00      	add	r7, sp, #0
 800f6a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f6b4:	699b      	ldr	r3, [r3, #24]
 800f6b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f6be:	69db      	ldr	r3, [r3, #28]
 800f6c0:	68ba      	ldr	r2, [r7, #8]
 800f6c2:	4013      	ands	r3, r2
 800f6c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f6c6:	68bb      	ldr	r3, [r7, #8]
 800f6c8:	b29b      	uxth	r3, r3
}
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	3714      	adds	r7, #20
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d4:	4770      	bx	lr

0800f6d6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f6d6:	b480      	push	{r7}
 800f6d8:	b085      	sub	sp, #20
 800f6da:	af00      	add	r7, sp, #0
 800f6dc:	6078      	str	r0, [r7, #4]
 800f6de:	460b      	mov	r3, r1
 800f6e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f6e6:	78fb      	ldrb	r3, [r7, #3]
 800f6e8:	015a      	lsls	r2, r3, #5
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	4413      	add	r3, r2
 800f6ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f6f2:	689b      	ldr	r3, [r3, #8]
 800f6f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f6fc:	695b      	ldr	r3, [r3, #20]
 800f6fe:	68ba      	ldr	r2, [r7, #8]
 800f700:	4013      	ands	r3, r2
 800f702:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f704:	68bb      	ldr	r3, [r7, #8]
}
 800f706:	4618      	mov	r0, r3
 800f708:	3714      	adds	r7, #20
 800f70a:	46bd      	mov	sp, r7
 800f70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f710:	4770      	bx	lr

0800f712 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f712:	b480      	push	{r7}
 800f714:	b087      	sub	sp, #28
 800f716:	af00      	add	r7, sp, #0
 800f718:	6078      	str	r0, [r7, #4]
 800f71a:	460b      	mov	r3, r1
 800f71c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f722:	697b      	ldr	r3, [r7, #20]
 800f724:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f728:	691b      	ldr	r3, [r3, #16]
 800f72a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f72c:	697b      	ldr	r3, [r7, #20]
 800f72e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f732:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f734:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f736:	78fb      	ldrb	r3, [r7, #3]
 800f738:	f003 030f 	and.w	r3, r3, #15
 800f73c:	68fa      	ldr	r2, [r7, #12]
 800f73e:	fa22 f303 	lsr.w	r3, r2, r3
 800f742:	01db      	lsls	r3, r3, #7
 800f744:	b2db      	uxtb	r3, r3
 800f746:	693a      	ldr	r2, [r7, #16]
 800f748:	4313      	orrs	r3, r2
 800f74a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f74c:	78fb      	ldrb	r3, [r7, #3]
 800f74e:	015a      	lsls	r2, r3, #5
 800f750:	697b      	ldr	r3, [r7, #20]
 800f752:	4413      	add	r3, r2
 800f754:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f758:	689b      	ldr	r3, [r3, #8]
 800f75a:	693a      	ldr	r2, [r7, #16]
 800f75c:	4013      	ands	r3, r2
 800f75e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f760:	68bb      	ldr	r3, [r7, #8]
}
 800f762:	4618      	mov	r0, r3
 800f764:	371c      	adds	r7, #28
 800f766:	46bd      	mov	sp, r7
 800f768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76c:	4770      	bx	lr

0800f76e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800f76e:	b480      	push	{r7}
 800f770:	b083      	sub	sp, #12
 800f772:	af00      	add	r7, sp, #0
 800f774:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	695b      	ldr	r3, [r3, #20]
 800f77a:	f003 0301 	and.w	r3, r3, #1
}
 800f77e:	4618      	mov	r0, r3
 800f780:	370c      	adds	r7, #12
 800f782:	46bd      	mov	sp, r7
 800f784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f788:	4770      	bx	lr
	...

0800f78c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800f78c:	b480      	push	{r7}
 800f78e:	b085      	sub	sp, #20
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f79e:	681a      	ldr	r2, [r3, #0]
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f7a6:	4619      	mov	r1, r3
 800f7a8:	4b09      	ldr	r3, [pc, #36]	@ (800f7d0 <USB_ActivateSetup+0x44>)
 800f7aa:	4013      	ands	r3, r2
 800f7ac:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f7b4:	685b      	ldr	r3, [r3, #4]
 800f7b6:	68fa      	ldr	r2, [r7, #12]
 800f7b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f7bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f7c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f7c2:	2300      	movs	r3, #0
}
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	3714      	adds	r7, #20
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ce:	4770      	bx	lr
 800f7d0:	fffff800 	.word	0xfffff800

0800f7d4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800f7d4:	b480      	push	{r7}
 800f7d6:	b087      	sub	sp, #28
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	60f8      	str	r0, [r7, #12]
 800f7dc:	460b      	mov	r3, r1
 800f7de:	607a      	str	r2, [r7, #4]
 800f7e0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	333c      	adds	r3, #60	@ 0x3c
 800f7ea:	3304      	adds	r3, #4
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f7f0:	693b      	ldr	r3, [r7, #16]
 800f7f2:	4a26      	ldr	r2, [pc, #152]	@ (800f88c <USB_EP0_OutStart+0xb8>)
 800f7f4:	4293      	cmp	r3, r2
 800f7f6:	d90a      	bls.n	800f80e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f7f8:	697b      	ldr	r3, [r7, #20]
 800f7fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f804:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f808:	d101      	bne.n	800f80e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f80a:	2300      	movs	r3, #0
 800f80c:	e037      	b.n	800f87e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f80e:	697b      	ldr	r3, [r7, #20]
 800f810:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f814:	461a      	mov	r2, r3
 800f816:	2300      	movs	r3, #0
 800f818:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f81a:	697b      	ldr	r3, [r7, #20]
 800f81c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f820:	691b      	ldr	r3, [r3, #16]
 800f822:	697a      	ldr	r2, [r7, #20]
 800f824:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f828:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f82c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f82e:	697b      	ldr	r3, [r7, #20]
 800f830:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f834:	691b      	ldr	r3, [r3, #16]
 800f836:	697a      	ldr	r2, [r7, #20]
 800f838:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f83c:	f043 0318 	orr.w	r3, r3, #24
 800f840:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f842:	697b      	ldr	r3, [r7, #20]
 800f844:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f848:	691b      	ldr	r3, [r3, #16]
 800f84a:	697a      	ldr	r2, [r7, #20]
 800f84c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f850:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800f854:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f856:	7afb      	ldrb	r3, [r7, #11]
 800f858:	2b01      	cmp	r3, #1
 800f85a:	d10f      	bne.n	800f87c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f85c:	697b      	ldr	r3, [r7, #20]
 800f85e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f862:	461a      	mov	r2, r3
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f868:	697b      	ldr	r3, [r7, #20]
 800f86a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	697a      	ldr	r2, [r7, #20]
 800f872:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f876:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800f87a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f87c:	2300      	movs	r3, #0
}
 800f87e:	4618      	mov	r0, r3
 800f880:	371c      	adds	r7, #28
 800f882:	46bd      	mov	sp, r7
 800f884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f888:	4770      	bx	lr
 800f88a:	bf00      	nop
 800f88c:	4f54300a 	.word	0x4f54300a

0800f890 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f890:	b480      	push	{r7}
 800f892:	b085      	sub	sp, #20
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f898:	2300      	movs	r3, #0
 800f89a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	3301      	adds	r3, #1
 800f8a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f8a8:	d901      	bls.n	800f8ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f8aa:	2303      	movs	r3, #3
 800f8ac:	e01b      	b.n	800f8e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	691b      	ldr	r3, [r3, #16]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	daf2      	bge.n	800f89c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	691b      	ldr	r3, [r3, #16]
 800f8be:	f043 0201 	orr.w	r2, r3, #1
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	3301      	adds	r3, #1
 800f8ca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f8d2:	d901      	bls.n	800f8d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f8d4:	2303      	movs	r3, #3
 800f8d6:	e006      	b.n	800f8e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	691b      	ldr	r3, [r3, #16]
 800f8dc:	f003 0301 	and.w	r3, r3, #1
 800f8e0:	2b01      	cmp	r3, #1
 800f8e2:	d0f0      	beq.n	800f8c6 <USB_CoreReset+0x36>

  return HAL_OK;
 800f8e4:	2300      	movs	r3, #0
}
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	3714      	adds	r7, #20
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f0:	4770      	bx	lr
	...

0800f8f4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b084      	sub	sp, #16
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
 800f8fc:	460b      	mov	r3, r1
 800f8fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f900:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800f904:	f002 fcfe 	bl	8012304 <USBD_static_malloc>
 800f908:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d109      	bne.n	800f924 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	32b0      	adds	r2, #176	@ 0xb0
 800f91a:	2100      	movs	r1, #0
 800f91c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800f920:	2302      	movs	r3, #2
 800f922:	e0d4      	b.n	800face <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800f924:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800f928:	2100      	movs	r1, #0
 800f92a:	68f8      	ldr	r0, [r7, #12]
 800f92c:	f003 fa89 	bl	8012e42 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	32b0      	adds	r2, #176	@ 0xb0
 800f93a:	68f9      	ldr	r1, [r7, #12]
 800f93c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	32b0      	adds	r2, #176	@ 0xb0
 800f94a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	7c1b      	ldrb	r3, [r3, #16]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d138      	bne.n	800f9ce <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f95c:	4b5e      	ldr	r3, [pc, #376]	@ (800fad8 <USBD_CDC_Init+0x1e4>)
 800f95e:	7819      	ldrb	r1, [r3, #0]
 800f960:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f964:	2202      	movs	r2, #2
 800f966:	6878      	ldr	r0, [r7, #4]
 800f968:	f002 fba9 	bl	80120be <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f96c:	4b5a      	ldr	r3, [pc, #360]	@ (800fad8 <USBD_CDC_Init+0x1e4>)
 800f96e:	781b      	ldrb	r3, [r3, #0]
 800f970:	f003 020f 	and.w	r2, r3, #15
 800f974:	6879      	ldr	r1, [r7, #4]
 800f976:	4613      	mov	r3, r2
 800f978:	009b      	lsls	r3, r3, #2
 800f97a:	4413      	add	r3, r2
 800f97c:	009b      	lsls	r3, r3, #2
 800f97e:	440b      	add	r3, r1
 800f980:	3324      	adds	r3, #36	@ 0x24
 800f982:	2201      	movs	r2, #1
 800f984:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f986:	4b55      	ldr	r3, [pc, #340]	@ (800fadc <USBD_CDC_Init+0x1e8>)
 800f988:	7819      	ldrb	r1, [r3, #0]
 800f98a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f98e:	2202      	movs	r2, #2
 800f990:	6878      	ldr	r0, [r7, #4]
 800f992:	f002 fb94 	bl	80120be <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f996:	4b51      	ldr	r3, [pc, #324]	@ (800fadc <USBD_CDC_Init+0x1e8>)
 800f998:	781b      	ldrb	r3, [r3, #0]
 800f99a:	f003 020f 	and.w	r2, r3, #15
 800f99e:	6879      	ldr	r1, [r7, #4]
 800f9a0:	4613      	mov	r3, r2
 800f9a2:	009b      	lsls	r3, r3, #2
 800f9a4:	4413      	add	r3, r2
 800f9a6:	009b      	lsls	r3, r3, #2
 800f9a8:	440b      	add	r3, r1
 800f9aa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f9ae:	2201      	movs	r2, #1
 800f9b0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f9b2:	4b4b      	ldr	r3, [pc, #300]	@ (800fae0 <USBD_CDC_Init+0x1ec>)
 800f9b4:	781b      	ldrb	r3, [r3, #0]
 800f9b6:	f003 020f 	and.w	r2, r3, #15
 800f9ba:	6879      	ldr	r1, [r7, #4]
 800f9bc:	4613      	mov	r3, r2
 800f9be:	009b      	lsls	r3, r3, #2
 800f9c0:	4413      	add	r3, r2
 800f9c2:	009b      	lsls	r3, r3, #2
 800f9c4:	440b      	add	r3, r1
 800f9c6:	3326      	adds	r3, #38	@ 0x26
 800f9c8:	2210      	movs	r2, #16
 800f9ca:	801a      	strh	r2, [r3, #0]
 800f9cc:	e035      	b.n	800fa3a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f9ce:	4b42      	ldr	r3, [pc, #264]	@ (800fad8 <USBD_CDC_Init+0x1e4>)
 800f9d0:	7819      	ldrb	r1, [r3, #0]
 800f9d2:	2340      	movs	r3, #64	@ 0x40
 800f9d4:	2202      	movs	r2, #2
 800f9d6:	6878      	ldr	r0, [r7, #4]
 800f9d8:	f002 fb71 	bl	80120be <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f9dc:	4b3e      	ldr	r3, [pc, #248]	@ (800fad8 <USBD_CDC_Init+0x1e4>)
 800f9de:	781b      	ldrb	r3, [r3, #0]
 800f9e0:	f003 020f 	and.w	r2, r3, #15
 800f9e4:	6879      	ldr	r1, [r7, #4]
 800f9e6:	4613      	mov	r3, r2
 800f9e8:	009b      	lsls	r3, r3, #2
 800f9ea:	4413      	add	r3, r2
 800f9ec:	009b      	lsls	r3, r3, #2
 800f9ee:	440b      	add	r3, r1
 800f9f0:	3324      	adds	r3, #36	@ 0x24
 800f9f2:	2201      	movs	r2, #1
 800f9f4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f9f6:	4b39      	ldr	r3, [pc, #228]	@ (800fadc <USBD_CDC_Init+0x1e8>)
 800f9f8:	7819      	ldrb	r1, [r3, #0]
 800f9fa:	2340      	movs	r3, #64	@ 0x40
 800f9fc:	2202      	movs	r2, #2
 800f9fe:	6878      	ldr	r0, [r7, #4]
 800fa00:	f002 fb5d 	bl	80120be <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800fa04:	4b35      	ldr	r3, [pc, #212]	@ (800fadc <USBD_CDC_Init+0x1e8>)
 800fa06:	781b      	ldrb	r3, [r3, #0]
 800fa08:	f003 020f 	and.w	r2, r3, #15
 800fa0c:	6879      	ldr	r1, [r7, #4]
 800fa0e:	4613      	mov	r3, r2
 800fa10:	009b      	lsls	r3, r3, #2
 800fa12:	4413      	add	r3, r2
 800fa14:	009b      	lsls	r3, r3, #2
 800fa16:	440b      	add	r3, r1
 800fa18:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fa1c:	2201      	movs	r2, #1
 800fa1e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800fa20:	4b2f      	ldr	r3, [pc, #188]	@ (800fae0 <USBD_CDC_Init+0x1ec>)
 800fa22:	781b      	ldrb	r3, [r3, #0]
 800fa24:	f003 020f 	and.w	r2, r3, #15
 800fa28:	6879      	ldr	r1, [r7, #4]
 800fa2a:	4613      	mov	r3, r2
 800fa2c:	009b      	lsls	r3, r3, #2
 800fa2e:	4413      	add	r3, r2
 800fa30:	009b      	lsls	r3, r3, #2
 800fa32:	440b      	add	r3, r1
 800fa34:	3326      	adds	r3, #38	@ 0x26
 800fa36:	2210      	movs	r2, #16
 800fa38:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800fa3a:	4b29      	ldr	r3, [pc, #164]	@ (800fae0 <USBD_CDC_Init+0x1ec>)
 800fa3c:	7819      	ldrb	r1, [r3, #0]
 800fa3e:	2308      	movs	r3, #8
 800fa40:	2203      	movs	r2, #3
 800fa42:	6878      	ldr	r0, [r7, #4]
 800fa44:	f002 fb3b 	bl	80120be <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800fa48:	4b25      	ldr	r3, [pc, #148]	@ (800fae0 <USBD_CDC_Init+0x1ec>)
 800fa4a:	781b      	ldrb	r3, [r3, #0]
 800fa4c:	f003 020f 	and.w	r2, r3, #15
 800fa50:	6879      	ldr	r1, [r7, #4]
 800fa52:	4613      	mov	r3, r2
 800fa54:	009b      	lsls	r3, r3, #2
 800fa56:	4413      	add	r3, r2
 800fa58:	009b      	lsls	r3, r3, #2
 800fa5a:	440b      	add	r3, r1
 800fa5c:	3324      	adds	r3, #36	@ 0x24
 800fa5e:	2201      	movs	r2, #1
 800fa60:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	2200      	movs	r2, #0
 800fa66:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fa70:	687a      	ldr	r2, [r7, #4]
 800fa72:	33b0      	adds	r3, #176	@ 0xb0
 800fa74:	009b      	lsls	r3, r3, #2
 800fa76:	4413      	add	r3, r2
 800fa78:	685b      	ldr	r3, [r3, #4]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	2200      	movs	r2, #0
 800fa82:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	2200      	movs	r2, #0
 800fa8a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d101      	bne.n	800fa9c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800fa98:	2302      	movs	r3, #2
 800fa9a:	e018      	b.n	800face <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	7c1b      	ldrb	r3, [r3, #16]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d10a      	bne.n	800faba <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800faa4:	4b0d      	ldr	r3, [pc, #52]	@ (800fadc <USBD_CDC_Init+0x1e8>)
 800faa6:	7819      	ldrb	r1, [r3, #0]
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800faae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fab2:	6878      	ldr	r0, [r7, #4]
 800fab4:	f002 fbf2 	bl	801229c <USBD_LL_PrepareReceive>
 800fab8:	e008      	b.n	800facc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800faba:	4b08      	ldr	r3, [pc, #32]	@ (800fadc <USBD_CDC_Init+0x1e8>)
 800fabc:	7819      	ldrb	r1, [r3, #0]
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fac4:	2340      	movs	r3, #64	@ 0x40
 800fac6:	6878      	ldr	r0, [r7, #4]
 800fac8:	f002 fbe8 	bl	801229c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800facc:	2300      	movs	r3, #0
}
 800face:	4618      	mov	r0, r3
 800fad0:	3710      	adds	r7, #16
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd80      	pop	{r7, pc}
 800fad6:	bf00      	nop
 800fad8:	240000bb 	.word	0x240000bb
 800fadc:	240000bc 	.word	0x240000bc
 800fae0:	240000bd 	.word	0x240000bd

0800fae4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b082      	sub	sp, #8
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
 800faec:	460b      	mov	r3, r1
 800faee:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800faf0:	4b3a      	ldr	r3, [pc, #232]	@ (800fbdc <USBD_CDC_DeInit+0xf8>)
 800faf2:	781b      	ldrb	r3, [r3, #0]
 800faf4:	4619      	mov	r1, r3
 800faf6:	6878      	ldr	r0, [r7, #4]
 800faf8:	f002 fb07 	bl	801210a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800fafc:	4b37      	ldr	r3, [pc, #220]	@ (800fbdc <USBD_CDC_DeInit+0xf8>)
 800fafe:	781b      	ldrb	r3, [r3, #0]
 800fb00:	f003 020f 	and.w	r2, r3, #15
 800fb04:	6879      	ldr	r1, [r7, #4]
 800fb06:	4613      	mov	r3, r2
 800fb08:	009b      	lsls	r3, r3, #2
 800fb0a:	4413      	add	r3, r2
 800fb0c:	009b      	lsls	r3, r3, #2
 800fb0e:	440b      	add	r3, r1
 800fb10:	3324      	adds	r3, #36	@ 0x24
 800fb12:	2200      	movs	r2, #0
 800fb14:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800fb16:	4b32      	ldr	r3, [pc, #200]	@ (800fbe0 <USBD_CDC_DeInit+0xfc>)
 800fb18:	781b      	ldrb	r3, [r3, #0]
 800fb1a:	4619      	mov	r1, r3
 800fb1c:	6878      	ldr	r0, [r7, #4]
 800fb1e:	f002 faf4 	bl	801210a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800fb22:	4b2f      	ldr	r3, [pc, #188]	@ (800fbe0 <USBD_CDC_DeInit+0xfc>)
 800fb24:	781b      	ldrb	r3, [r3, #0]
 800fb26:	f003 020f 	and.w	r2, r3, #15
 800fb2a:	6879      	ldr	r1, [r7, #4]
 800fb2c:	4613      	mov	r3, r2
 800fb2e:	009b      	lsls	r3, r3, #2
 800fb30:	4413      	add	r3, r2
 800fb32:	009b      	lsls	r3, r3, #2
 800fb34:	440b      	add	r3, r1
 800fb36:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800fb3e:	4b29      	ldr	r3, [pc, #164]	@ (800fbe4 <USBD_CDC_DeInit+0x100>)
 800fb40:	781b      	ldrb	r3, [r3, #0]
 800fb42:	4619      	mov	r1, r3
 800fb44:	6878      	ldr	r0, [r7, #4]
 800fb46:	f002 fae0 	bl	801210a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800fb4a:	4b26      	ldr	r3, [pc, #152]	@ (800fbe4 <USBD_CDC_DeInit+0x100>)
 800fb4c:	781b      	ldrb	r3, [r3, #0]
 800fb4e:	f003 020f 	and.w	r2, r3, #15
 800fb52:	6879      	ldr	r1, [r7, #4]
 800fb54:	4613      	mov	r3, r2
 800fb56:	009b      	lsls	r3, r3, #2
 800fb58:	4413      	add	r3, r2
 800fb5a:	009b      	lsls	r3, r3, #2
 800fb5c:	440b      	add	r3, r1
 800fb5e:	3324      	adds	r3, #36	@ 0x24
 800fb60:	2200      	movs	r2, #0
 800fb62:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800fb64:	4b1f      	ldr	r3, [pc, #124]	@ (800fbe4 <USBD_CDC_DeInit+0x100>)
 800fb66:	781b      	ldrb	r3, [r3, #0]
 800fb68:	f003 020f 	and.w	r2, r3, #15
 800fb6c:	6879      	ldr	r1, [r7, #4]
 800fb6e:	4613      	mov	r3, r2
 800fb70:	009b      	lsls	r3, r3, #2
 800fb72:	4413      	add	r3, r2
 800fb74:	009b      	lsls	r3, r3, #2
 800fb76:	440b      	add	r3, r1
 800fb78:	3326      	adds	r3, #38	@ 0x26
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	32b0      	adds	r2, #176	@ 0xb0
 800fb88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d01f      	beq.n	800fbd0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fb96:	687a      	ldr	r2, [r7, #4]
 800fb98:	33b0      	adds	r3, #176	@ 0xb0
 800fb9a:	009b      	lsls	r3, r3, #2
 800fb9c:	4413      	add	r3, r2
 800fb9e:	685b      	ldr	r3, [r3, #4]
 800fba0:	685b      	ldr	r3, [r3, #4]
 800fba2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	32b0      	adds	r2, #176	@ 0xb0
 800fbae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f002 fbb4 	bl	8012320 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	32b0      	adds	r2, #176	@ 0xb0
 800fbc2:	2100      	movs	r1, #0
 800fbc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	2200      	movs	r2, #0
 800fbcc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800fbd0:	2300      	movs	r3, #0
}
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	3708      	adds	r7, #8
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	bd80      	pop	{r7, pc}
 800fbda:	bf00      	nop
 800fbdc:	240000bb 	.word	0x240000bb
 800fbe0:	240000bc 	.word	0x240000bc
 800fbe4:	240000bd 	.word	0x240000bd

0800fbe8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b086      	sub	sp, #24
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
 800fbf0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	32b0      	adds	r2, #176	@ 0xb0
 800fbfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc00:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800fc02:	2300      	movs	r3, #0
 800fc04:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800fc06:	2300      	movs	r3, #0
 800fc08:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800fc0e:	693b      	ldr	r3, [r7, #16]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d101      	bne.n	800fc18 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800fc14:	2303      	movs	r3, #3
 800fc16:	e0bf      	b.n	800fd98 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	781b      	ldrb	r3, [r3, #0]
 800fc1c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d050      	beq.n	800fcc6 <USBD_CDC_Setup+0xde>
 800fc24:	2b20      	cmp	r3, #32
 800fc26:	f040 80af 	bne.w	800fd88 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800fc2a:	683b      	ldr	r3, [r7, #0]
 800fc2c:	88db      	ldrh	r3, [r3, #6]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d03a      	beq.n	800fca8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800fc32:	683b      	ldr	r3, [r7, #0]
 800fc34:	781b      	ldrb	r3, [r3, #0]
 800fc36:	b25b      	sxtb	r3, r3
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	da1b      	bge.n	800fc74 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fc42:	687a      	ldr	r2, [r7, #4]
 800fc44:	33b0      	adds	r3, #176	@ 0xb0
 800fc46:	009b      	lsls	r3, r3, #2
 800fc48:	4413      	add	r3, r2
 800fc4a:	685b      	ldr	r3, [r3, #4]
 800fc4c:	689b      	ldr	r3, [r3, #8]
 800fc4e:	683a      	ldr	r2, [r7, #0]
 800fc50:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800fc52:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800fc54:	683a      	ldr	r2, [r7, #0]
 800fc56:	88d2      	ldrh	r2, [r2, #6]
 800fc58:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800fc5a:	683b      	ldr	r3, [r7, #0]
 800fc5c:	88db      	ldrh	r3, [r3, #6]
 800fc5e:	2b07      	cmp	r3, #7
 800fc60:	bf28      	it	cs
 800fc62:	2307      	movcs	r3, #7
 800fc64:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800fc66:	693b      	ldr	r3, [r7, #16]
 800fc68:	89fa      	ldrh	r2, [r7, #14]
 800fc6a:	4619      	mov	r1, r3
 800fc6c:	6878      	ldr	r0, [r7, #4]
 800fc6e:	f001 fdbd 	bl	80117ec <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800fc72:	e090      	b.n	800fd96 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800fc74:	683b      	ldr	r3, [r7, #0]
 800fc76:	785a      	ldrb	r2, [r3, #1]
 800fc78:	693b      	ldr	r3, [r7, #16]
 800fc7a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800fc7e:	683b      	ldr	r3, [r7, #0]
 800fc80:	88db      	ldrh	r3, [r3, #6]
 800fc82:	2b3f      	cmp	r3, #63	@ 0x3f
 800fc84:	d803      	bhi.n	800fc8e <USBD_CDC_Setup+0xa6>
 800fc86:	683b      	ldr	r3, [r7, #0]
 800fc88:	88db      	ldrh	r3, [r3, #6]
 800fc8a:	b2da      	uxtb	r2, r3
 800fc8c:	e000      	b.n	800fc90 <USBD_CDC_Setup+0xa8>
 800fc8e:	2240      	movs	r2, #64	@ 0x40
 800fc90:	693b      	ldr	r3, [r7, #16]
 800fc92:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800fc96:	6939      	ldr	r1, [r7, #16]
 800fc98:	693b      	ldr	r3, [r7, #16]
 800fc9a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800fc9e:	461a      	mov	r2, r3
 800fca0:	6878      	ldr	r0, [r7, #4]
 800fca2:	f001 fdcf 	bl	8011844 <USBD_CtlPrepareRx>
      break;
 800fca6:	e076      	b.n	800fd96 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fcae:	687a      	ldr	r2, [r7, #4]
 800fcb0:	33b0      	adds	r3, #176	@ 0xb0
 800fcb2:	009b      	lsls	r3, r3, #2
 800fcb4:	4413      	add	r3, r2
 800fcb6:	685b      	ldr	r3, [r3, #4]
 800fcb8:	689b      	ldr	r3, [r3, #8]
 800fcba:	683a      	ldr	r2, [r7, #0]
 800fcbc:	7850      	ldrb	r0, [r2, #1]
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	6839      	ldr	r1, [r7, #0]
 800fcc2:	4798      	blx	r3
      break;
 800fcc4:	e067      	b.n	800fd96 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fcc6:	683b      	ldr	r3, [r7, #0]
 800fcc8:	785b      	ldrb	r3, [r3, #1]
 800fcca:	2b0b      	cmp	r3, #11
 800fccc:	d851      	bhi.n	800fd72 <USBD_CDC_Setup+0x18a>
 800fcce:	a201      	add	r2, pc, #4	@ (adr r2, 800fcd4 <USBD_CDC_Setup+0xec>)
 800fcd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcd4:	0800fd05 	.word	0x0800fd05
 800fcd8:	0800fd81 	.word	0x0800fd81
 800fcdc:	0800fd73 	.word	0x0800fd73
 800fce0:	0800fd73 	.word	0x0800fd73
 800fce4:	0800fd73 	.word	0x0800fd73
 800fce8:	0800fd73 	.word	0x0800fd73
 800fcec:	0800fd73 	.word	0x0800fd73
 800fcf0:	0800fd73 	.word	0x0800fd73
 800fcf4:	0800fd73 	.word	0x0800fd73
 800fcf8:	0800fd73 	.word	0x0800fd73
 800fcfc:	0800fd2f 	.word	0x0800fd2f
 800fd00:	0800fd59 	.word	0x0800fd59
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fd0a:	b2db      	uxtb	r3, r3
 800fd0c:	2b03      	cmp	r3, #3
 800fd0e:	d107      	bne.n	800fd20 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800fd10:	f107 030a 	add.w	r3, r7, #10
 800fd14:	2202      	movs	r2, #2
 800fd16:	4619      	mov	r1, r3
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	f001 fd67 	bl	80117ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800fd1e:	e032      	b.n	800fd86 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800fd20:	6839      	ldr	r1, [r7, #0]
 800fd22:	6878      	ldr	r0, [r7, #4]
 800fd24:	f001 fce5 	bl	80116f2 <USBD_CtlError>
            ret = USBD_FAIL;
 800fd28:	2303      	movs	r3, #3
 800fd2a:	75fb      	strb	r3, [r7, #23]
          break;
 800fd2c:	e02b      	b.n	800fd86 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fd34:	b2db      	uxtb	r3, r3
 800fd36:	2b03      	cmp	r3, #3
 800fd38:	d107      	bne.n	800fd4a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800fd3a:	f107 030d 	add.w	r3, r7, #13
 800fd3e:	2201      	movs	r2, #1
 800fd40:	4619      	mov	r1, r3
 800fd42:	6878      	ldr	r0, [r7, #4]
 800fd44:	f001 fd52 	bl	80117ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800fd48:	e01d      	b.n	800fd86 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800fd4a:	6839      	ldr	r1, [r7, #0]
 800fd4c:	6878      	ldr	r0, [r7, #4]
 800fd4e:	f001 fcd0 	bl	80116f2 <USBD_CtlError>
            ret = USBD_FAIL;
 800fd52:	2303      	movs	r3, #3
 800fd54:	75fb      	strb	r3, [r7, #23]
          break;
 800fd56:	e016      	b.n	800fd86 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fd5e:	b2db      	uxtb	r3, r3
 800fd60:	2b03      	cmp	r3, #3
 800fd62:	d00f      	beq.n	800fd84 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800fd64:	6839      	ldr	r1, [r7, #0]
 800fd66:	6878      	ldr	r0, [r7, #4]
 800fd68:	f001 fcc3 	bl	80116f2 <USBD_CtlError>
            ret = USBD_FAIL;
 800fd6c:	2303      	movs	r3, #3
 800fd6e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800fd70:	e008      	b.n	800fd84 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800fd72:	6839      	ldr	r1, [r7, #0]
 800fd74:	6878      	ldr	r0, [r7, #4]
 800fd76:	f001 fcbc 	bl	80116f2 <USBD_CtlError>
          ret = USBD_FAIL;
 800fd7a:	2303      	movs	r3, #3
 800fd7c:	75fb      	strb	r3, [r7, #23]
          break;
 800fd7e:	e002      	b.n	800fd86 <USBD_CDC_Setup+0x19e>
          break;
 800fd80:	bf00      	nop
 800fd82:	e008      	b.n	800fd96 <USBD_CDC_Setup+0x1ae>
          break;
 800fd84:	bf00      	nop
      }
      break;
 800fd86:	e006      	b.n	800fd96 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800fd88:	6839      	ldr	r1, [r7, #0]
 800fd8a:	6878      	ldr	r0, [r7, #4]
 800fd8c:	f001 fcb1 	bl	80116f2 <USBD_CtlError>
      ret = USBD_FAIL;
 800fd90:	2303      	movs	r3, #3
 800fd92:	75fb      	strb	r3, [r7, #23]
      break;
 800fd94:	bf00      	nop
  }

  return (uint8_t)ret;
 800fd96:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd98:	4618      	mov	r0, r3
 800fd9a:	3718      	adds	r7, #24
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	bd80      	pop	{r7, pc}

0800fda0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b084      	sub	sp, #16
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
 800fda8:	460b      	mov	r3, r1
 800fdaa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fdb2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	32b0      	adds	r2, #176	@ 0xb0
 800fdbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d101      	bne.n	800fdca <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800fdc6:	2303      	movs	r3, #3
 800fdc8:	e065      	b.n	800fe96 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	32b0      	adds	r2, #176	@ 0xb0
 800fdd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdd8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800fdda:	78fb      	ldrb	r3, [r7, #3]
 800fddc:	f003 020f 	and.w	r2, r3, #15
 800fde0:	6879      	ldr	r1, [r7, #4]
 800fde2:	4613      	mov	r3, r2
 800fde4:	009b      	lsls	r3, r3, #2
 800fde6:	4413      	add	r3, r2
 800fde8:	009b      	lsls	r3, r3, #2
 800fdea:	440b      	add	r3, r1
 800fdec:	3318      	adds	r3, #24
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d02f      	beq.n	800fe54 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800fdf4:	78fb      	ldrb	r3, [r7, #3]
 800fdf6:	f003 020f 	and.w	r2, r3, #15
 800fdfa:	6879      	ldr	r1, [r7, #4]
 800fdfc:	4613      	mov	r3, r2
 800fdfe:	009b      	lsls	r3, r3, #2
 800fe00:	4413      	add	r3, r2
 800fe02:	009b      	lsls	r3, r3, #2
 800fe04:	440b      	add	r3, r1
 800fe06:	3318      	adds	r3, #24
 800fe08:	681a      	ldr	r2, [r3, #0]
 800fe0a:	78fb      	ldrb	r3, [r7, #3]
 800fe0c:	f003 010f 	and.w	r1, r3, #15
 800fe10:	68f8      	ldr	r0, [r7, #12]
 800fe12:	460b      	mov	r3, r1
 800fe14:	00db      	lsls	r3, r3, #3
 800fe16:	440b      	add	r3, r1
 800fe18:	009b      	lsls	r3, r3, #2
 800fe1a:	4403      	add	r3, r0
 800fe1c:	331c      	adds	r3, #28
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	fbb2 f1f3 	udiv	r1, r2, r3
 800fe24:	fb01 f303 	mul.w	r3, r1, r3
 800fe28:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d112      	bne.n	800fe54 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800fe2e:	78fb      	ldrb	r3, [r7, #3]
 800fe30:	f003 020f 	and.w	r2, r3, #15
 800fe34:	6879      	ldr	r1, [r7, #4]
 800fe36:	4613      	mov	r3, r2
 800fe38:	009b      	lsls	r3, r3, #2
 800fe3a:	4413      	add	r3, r2
 800fe3c:	009b      	lsls	r3, r3, #2
 800fe3e:	440b      	add	r3, r1
 800fe40:	3318      	adds	r3, #24
 800fe42:	2200      	movs	r2, #0
 800fe44:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800fe46:	78f9      	ldrb	r1, [r7, #3]
 800fe48:	2300      	movs	r3, #0
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	6878      	ldr	r0, [r7, #4]
 800fe4e:	f002 fa04 	bl	801225a <USBD_LL_Transmit>
 800fe52:	e01f      	b.n	800fe94 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800fe54:	68bb      	ldr	r3, [r7, #8]
 800fe56:	2200      	movs	r2, #0
 800fe58:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fe62:	687a      	ldr	r2, [r7, #4]
 800fe64:	33b0      	adds	r3, #176	@ 0xb0
 800fe66:	009b      	lsls	r3, r3, #2
 800fe68:	4413      	add	r3, r2
 800fe6a:	685b      	ldr	r3, [r3, #4]
 800fe6c:	691b      	ldr	r3, [r3, #16]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d010      	beq.n	800fe94 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fe78:	687a      	ldr	r2, [r7, #4]
 800fe7a:	33b0      	adds	r3, #176	@ 0xb0
 800fe7c:	009b      	lsls	r3, r3, #2
 800fe7e:	4413      	add	r3, r2
 800fe80:	685b      	ldr	r3, [r3, #4]
 800fe82:	691b      	ldr	r3, [r3, #16]
 800fe84:	68ba      	ldr	r2, [r7, #8]
 800fe86:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800fe8a:	68ba      	ldr	r2, [r7, #8]
 800fe8c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800fe90:	78fa      	ldrb	r2, [r7, #3]
 800fe92:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800fe94:	2300      	movs	r3, #0
}
 800fe96:	4618      	mov	r0, r3
 800fe98:	3710      	adds	r7, #16
 800fe9a:	46bd      	mov	sp, r7
 800fe9c:	bd80      	pop	{r7, pc}

0800fe9e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fe9e:	b580      	push	{r7, lr}
 800fea0:	b084      	sub	sp, #16
 800fea2:	af00      	add	r7, sp, #0
 800fea4:	6078      	str	r0, [r7, #4]
 800fea6:	460b      	mov	r3, r1
 800fea8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	32b0      	adds	r2, #176	@ 0xb0
 800feb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800feb8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	32b0      	adds	r2, #176	@ 0xb0
 800fec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d101      	bne.n	800fed0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800fecc:	2303      	movs	r3, #3
 800fece:	e01a      	b.n	800ff06 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800fed0:	78fb      	ldrb	r3, [r7, #3]
 800fed2:	4619      	mov	r1, r3
 800fed4:	6878      	ldr	r0, [r7, #4]
 800fed6:	f002 fa02 	bl	80122de <USBD_LL_GetRxDataSize>
 800feda:	4602      	mov	r2, r0
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fee8:	687a      	ldr	r2, [r7, #4]
 800feea:	33b0      	adds	r3, #176	@ 0xb0
 800feec:	009b      	lsls	r3, r3, #2
 800feee:	4413      	add	r3, r2
 800fef0:	685b      	ldr	r3, [r3, #4]
 800fef2:	68db      	ldr	r3, [r3, #12]
 800fef4:	68fa      	ldr	r2, [r7, #12]
 800fef6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800fefa:	68fa      	ldr	r2, [r7, #12]
 800fefc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ff00:	4611      	mov	r1, r2
 800ff02:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ff04:	2300      	movs	r3, #0
}
 800ff06:	4618      	mov	r0, r3
 800ff08:	3710      	adds	r7, #16
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	bd80      	pop	{r7, pc}

0800ff0e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ff0e:	b580      	push	{r7, lr}
 800ff10:	b084      	sub	sp, #16
 800ff12:	af00      	add	r7, sp, #0
 800ff14:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	32b0      	adds	r2, #176	@ 0xb0
 800ff20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff24:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d101      	bne.n	800ff30 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ff2c:	2303      	movs	r3, #3
 800ff2e:	e024      	b.n	800ff7a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ff36:	687a      	ldr	r2, [r7, #4]
 800ff38:	33b0      	adds	r3, #176	@ 0xb0
 800ff3a:	009b      	lsls	r3, r3, #2
 800ff3c:	4413      	add	r3, r2
 800ff3e:	685b      	ldr	r3, [r3, #4]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d019      	beq.n	800ff78 <USBD_CDC_EP0_RxReady+0x6a>
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ff4a:	2bff      	cmp	r3, #255	@ 0xff
 800ff4c:	d014      	beq.n	800ff78 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ff54:	687a      	ldr	r2, [r7, #4]
 800ff56:	33b0      	adds	r3, #176	@ 0xb0
 800ff58:	009b      	lsls	r3, r3, #2
 800ff5a:	4413      	add	r3, r2
 800ff5c:	685b      	ldr	r3, [r3, #4]
 800ff5e:	689b      	ldr	r3, [r3, #8]
 800ff60:	68fa      	ldr	r2, [r7, #12]
 800ff62:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800ff66:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ff68:	68fa      	ldr	r2, [r7, #12]
 800ff6a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ff6e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	22ff      	movs	r2, #255	@ 0xff
 800ff74:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800ff78:	2300      	movs	r3, #0
}
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	3710      	adds	r7, #16
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	bd80      	pop	{r7, pc}
	...

0800ff84 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b086      	sub	sp, #24
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ff8c:	2182      	movs	r1, #130	@ 0x82
 800ff8e:	4818      	ldr	r0, [pc, #96]	@ (800fff0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ff90:	f000 fd4f 	bl	8010a32 <USBD_GetEpDesc>
 800ff94:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ff96:	2101      	movs	r1, #1
 800ff98:	4815      	ldr	r0, [pc, #84]	@ (800fff0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ff9a:	f000 fd4a 	bl	8010a32 <USBD_GetEpDesc>
 800ff9e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ffa0:	2181      	movs	r1, #129	@ 0x81
 800ffa2:	4813      	ldr	r0, [pc, #76]	@ (800fff0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ffa4:	f000 fd45 	bl	8010a32 <USBD_GetEpDesc>
 800ffa8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ffaa:	697b      	ldr	r3, [r7, #20]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d002      	beq.n	800ffb6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ffb0:	697b      	ldr	r3, [r7, #20]
 800ffb2:	2210      	movs	r2, #16
 800ffb4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ffb6:	693b      	ldr	r3, [r7, #16]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d006      	beq.n	800ffca <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ffbc:	693b      	ldr	r3, [r7, #16]
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ffc4:	711a      	strb	r2, [r3, #4]
 800ffc6:	2200      	movs	r2, #0
 800ffc8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d006      	beq.n	800ffde <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	2200      	movs	r2, #0
 800ffd4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ffd8:	711a      	strb	r2, [r3, #4]
 800ffda:	2200      	movs	r2, #0
 800ffdc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	2243      	movs	r2, #67	@ 0x43
 800ffe2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ffe4:	4b02      	ldr	r3, [pc, #8]	@ (800fff0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	3718      	adds	r7, #24
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}
 800ffee:	bf00      	nop
 800fff0:	24000078 	.word	0x24000078

0800fff4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b086      	sub	sp, #24
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800fffc:	2182      	movs	r1, #130	@ 0x82
 800fffe:	4818      	ldr	r0, [pc, #96]	@ (8010060 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010000:	f000 fd17 	bl	8010a32 <USBD_GetEpDesc>
 8010004:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010006:	2101      	movs	r1, #1
 8010008:	4815      	ldr	r0, [pc, #84]	@ (8010060 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801000a:	f000 fd12 	bl	8010a32 <USBD_GetEpDesc>
 801000e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010010:	2181      	movs	r1, #129	@ 0x81
 8010012:	4813      	ldr	r0, [pc, #76]	@ (8010060 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010014:	f000 fd0d 	bl	8010a32 <USBD_GetEpDesc>
 8010018:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801001a:	697b      	ldr	r3, [r7, #20]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d002      	beq.n	8010026 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8010020:	697b      	ldr	r3, [r7, #20]
 8010022:	2210      	movs	r2, #16
 8010024:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010026:	693b      	ldr	r3, [r7, #16]
 8010028:	2b00      	cmp	r3, #0
 801002a:	d006      	beq.n	801003a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801002c:	693b      	ldr	r3, [r7, #16]
 801002e:	2200      	movs	r2, #0
 8010030:	711a      	strb	r2, [r3, #4]
 8010032:	2200      	movs	r2, #0
 8010034:	f042 0202 	orr.w	r2, r2, #2
 8010038:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	2b00      	cmp	r3, #0
 801003e:	d006      	beq.n	801004e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	2200      	movs	r2, #0
 8010044:	711a      	strb	r2, [r3, #4]
 8010046:	2200      	movs	r2, #0
 8010048:	f042 0202 	orr.w	r2, r2, #2
 801004c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	2243      	movs	r2, #67	@ 0x43
 8010052:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010054:	4b02      	ldr	r3, [pc, #8]	@ (8010060 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8010056:	4618      	mov	r0, r3
 8010058:	3718      	adds	r7, #24
 801005a:	46bd      	mov	sp, r7
 801005c:	bd80      	pop	{r7, pc}
 801005e:	bf00      	nop
 8010060:	24000078 	.word	0x24000078

08010064 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b086      	sub	sp, #24
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801006c:	2182      	movs	r1, #130	@ 0x82
 801006e:	4818      	ldr	r0, [pc, #96]	@ (80100d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010070:	f000 fcdf 	bl	8010a32 <USBD_GetEpDesc>
 8010074:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010076:	2101      	movs	r1, #1
 8010078:	4815      	ldr	r0, [pc, #84]	@ (80100d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801007a:	f000 fcda 	bl	8010a32 <USBD_GetEpDesc>
 801007e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010080:	2181      	movs	r1, #129	@ 0x81
 8010082:	4813      	ldr	r0, [pc, #76]	@ (80100d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010084:	f000 fcd5 	bl	8010a32 <USBD_GetEpDesc>
 8010088:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801008a:	697b      	ldr	r3, [r7, #20]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d002      	beq.n	8010096 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010090:	697b      	ldr	r3, [r7, #20]
 8010092:	2210      	movs	r2, #16
 8010094:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010096:	693b      	ldr	r3, [r7, #16]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d006      	beq.n	80100aa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801009c:	693b      	ldr	r3, [r7, #16]
 801009e:	2200      	movs	r2, #0
 80100a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80100a4:	711a      	strb	r2, [r3, #4]
 80100a6:	2200      	movs	r2, #0
 80100a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d006      	beq.n	80100be <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	2200      	movs	r2, #0
 80100b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80100b8:	711a      	strb	r2, [r3, #4]
 80100ba:	2200      	movs	r2, #0
 80100bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	2243      	movs	r2, #67	@ 0x43
 80100c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80100c4:	4b02      	ldr	r3, [pc, #8]	@ (80100d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80100c6:	4618      	mov	r0, r3
 80100c8:	3718      	adds	r7, #24
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd80      	pop	{r7, pc}
 80100ce:	bf00      	nop
 80100d0:	24000078 	.word	0x24000078

080100d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80100d4:	b480      	push	{r7}
 80100d6:	b083      	sub	sp, #12
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	220a      	movs	r2, #10
 80100e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80100e2:	4b03      	ldr	r3, [pc, #12]	@ (80100f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80100e4:	4618      	mov	r0, r3
 80100e6:	370c      	adds	r7, #12
 80100e8:	46bd      	mov	sp, r7
 80100ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ee:	4770      	bx	lr
 80100f0:	24000034 	.word	0x24000034

080100f4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80100f4:	b480      	push	{r7}
 80100f6:	b083      	sub	sp, #12
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
 80100fc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80100fe:	683b      	ldr	r3, [r7, #0]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d101      	bne.n	8010108 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010104:	2303      	movs	r3, #3
 8010106:	e009      	b.n	801011c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801010e:	687a      	ldr	r2, [r7, #4]
 8010110:	33b0      	adds	r3, #176	@ 0xb0
 8010112:	009b      	lsls	r3, r3, #2
 8010114:	4413      	add	r3, r2
 8010116:	683a      	ldr	r2, [r7, #0]
 8010118:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801011a:	2300      	movs	r3, #0
}
 801011c:	4618      	mov	r0, r3
 801011e:	370c      	adds	r7, #12
 8010120:	46bd      	mov	sp, r7
 8010122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010126:	4770      	bx	lr

08010128 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8010128:	b480      	push	{r7}
 801012a:	b087      	sub	sp, #28
 801012c:	af00      	add	r7, sp, #0
 801012e:	60f8      	str	r0, [r7, #12]
 8010130:	60b9      	str	r1, [r7, #8]
 8010132:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	32b0      	adds	r2, #176	@ 0xb0
 801013e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010142:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8010144:	697b      	ldr	r3, [r7, #20]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d101      	bne.n	801014e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801014a:	2303      	movs	r3, #3
 801014c:	e008      	b.n	8010160 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801014e:	697b      	ldr	r3, [r7, #20]
 8010150:	68ba      	ldr	r2, [r7, #8]
 8010152:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8010156:	697b      	ldr	r3, [r7, #20]
 8010158:	687a      	ldr	r2, [r7, #4]
 801015a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 801015e:	2300      	movs	r3, #0
}
 8010160:	4618      	mov	r0, r3
 8010162:	371c      	adds	r7, #28
 8010164:	46bd      	mov	sp, r7
 8010166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016a:	4770      	bx	lr

0801016c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801016c:	b480      	push	{r7}
 801016e:	b085      	sub	sp, #20
 8010170:	af00      	add	r7, sp, #0
 8010172:	6078      	str	r0, [r7, #4]
 8010174:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	32b0      	adds	r2, #176	@ 0xb0
 8010180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010184:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d101      	bne.n	8010190 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801018c:	2303      	movs	r3, #3
 801018e:	e004      	b.n	801019a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	683a      	ldr	r2, [r7, #0]
 8010194:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8010198:	2300      	movs	r3, #0
}
 801019a:	4618      	mov	r0, r3
 801019c:	3714      	adds	r7, #20
 801019e:	46bd      	mov	sp, r7
 80101a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a4:	4770      	bx	lr
	...

080101a8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b084      	sub	sp, #16
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	32b0      	adds	r2, #176	@ 0xb0
 80101ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101be:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80101c0:	2301      	movs	r3, #1
 80101c2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80101c4:	68bb      	ldr	r3, [r7, #8]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d101      	bne.n	80101ce <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80101ca:	2303      	movs	r3, #3
 80101cc:	e025      	b.n	801021a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80101ce:	68bb      	ldr	r3, [r7, #8]
 80101d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d11f      	bne.n	8010218 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80101d8:	68bb      	ldr	r3, [r7, #8]
 80101da:	2201      	movs	r2, #1
 80101dc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80101e0:	4b10      	ldr	r3, [pc, #64]	@ (8010224 <USBD_CDC_TransmitPacket+0x7c>)
 80101e2:	781b      	ldrb	r3, [r3, #0]
 80101e4:	f003 020f 	and.w	r2, r3, #15
 80101e8:	68bb      	ldr	r3, [r7, #8]
 80101ea:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80101ee:	6878      	ldr	r0, [r7, #4]
 80101f0:	4613      	mov	r3, r2
 80101f2:	009b      	lsls	r3, r3, #2
 80101f4:	4413      	add	r3, r2
 80101f6:	009b      	lsls	r3, r3, #2
 80101f8:	4403      	add	r3, r0
 80101fa:	3318      	adds	r3, #24
 80101fc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80101fe:	4b09      	ldr	r3, [pc, #36]	@ (8010224 <USBD_CDC_TransmitPacket+0x7c>)
 8010200:	7819      	ldrb	r1, [r3, #0]
 8010202:	68bb      	ldr	r3, [r7, #8]
 8010204:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8010208:	68bb      	ldr	r3, [r7, #8]
 801020a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 801020e:	6878      	ldr	r0, [r7, #4]
 8010210:	f002 f823 	bl	801225a <USBD_LL_Transmit>

    ret = USBD_OK;
 8010214:	2300      	movs	r3, #0
 8010216:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8010218:	7bfb      	ldrb	r3, [r7, #15]
}
 801021a:	4618      	mov	r0, r3
 801021c:	3710      	adds	r7, #16
 801021e:	46bd      	mov	sp, r7
 8010220:	bd80      	pop	{r7, pc}
 8010222:	bf00      	nop
 8010224:	240000bb 	.word	0x240000bb

08010228 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010228:	b580      	push	{r7, lr}
 801022a:	b084      	sub	sp, #16
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	32b0      	adds	r2, #176	@ 0xb0
 801023a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801023e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	32b0      	adds	r2, #176	@ 0xb0
 801024a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d101      	bne.n	8010256 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8010252:	2303      	movs	r3, #3
 8010254:	e018      	b.n	8010288 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	7c1b      	ldrb	r3, [r3, #16]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d10a      	bne.n	8010274 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801025e:	4b0c      	ldr	r3, [pc, #48]	@ (8010290 <USBD_CDC_ReceivePacket+0x68>)
 8010260:	7819      	ldrb	r1, [r3, #0]
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010268:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801026c:	6878      	ldr	r0, [r7, #4]
 801026e:	f002 f815 	bl	801229c <USBD_LL_PrepareReceive>
 8010272:	e008      	b.n	8010286 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010274:	4b06      	ldr	r3, [pc, #24]	@ (8010290 <USBD_CDC_ReceivePacket+0x68>)
 8010276:	7819      	ldrb	r1, [r3, #0]
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801027e:	2340      	movs	r3, #64	@ 0x40
 8010280:	6878      	ldr	r0, [r7, #4]
 8010282:	f002 f80b 	bl	801229c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010286:	2300      	movs	r3, #0
}
 8010288:	4618      	mov	r0, r3
 801028a:	3710      	adds	r7, #16
 801028c:	46bd      	mov	sp, r7
 801028e:	bd80      	pop	{r7, pc}
 8010290:	240000bc 	.word	0x240000bc

08010294 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010294:	b580      	push	{r7, lr}
 8010296:	b086      	sub	sp, #24
 8010298:	af00      	add	r7, sp, #0
 801029a:	60f8      	str	r0, [r7, #12]
 801029c:	60b9      	str	r1, [r7, #8]
 801029e:	4613      	mov	r3, r2
 80102a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d101      	bne.n	80102ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80102a8:	2303      	movs	r3, #3
 80102aa:	e01f      	b.n	80102ec <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	2200      	movs	r2, #0
 80102b0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	2200      	movs	r2, #0
 80102b8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	2200      	movs	r2, #0
 80102c0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80102c4:	68bb      	ldr	r3, [r7, #8]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d003      	beq.n	80102d2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	68ba      	ldr	r2, [r7, #8]
 80102ce:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	2201      	movs	r2, #1
 80102d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	79fa      	ldrb	r2, [r7, #7]
 80102de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80102e0:	68f8      	ldr	r0, [r7, #12]
 80102e2:	f001 fe81 	bl	8011fe8 <USBD_LL_Init>
 80102e6:	4603      	mov	r3, r0
 80102e8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80102ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80102ec:	4618      	mov	r0, r3
 80102ee:	3718      	adds	r7, #24
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}

080102f4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b084      	sub	sp, #16
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
 80102fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80102fe:	2300      	movs	r3, #0
 8010300:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8010302:	683b      	ldr	r3, [r7, #0]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d101      	bne.n	801030c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010308:	2303      	movs	r3, #3
 801030a:	e025      	b.n	8010358 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	683a      	ldr	r2, [r7, #0]
 8010310:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	32ae      	adds	r2, #174	@ 0xae
 801031e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010324:	2b00      	cmp	r3, #0
 8010326:	d00f      	beq.n	8010348 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	32ae      	adds	r2, #174	@ 0xae
 8010332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010338:	f107 020e 	add.w	r2, r7, #14
 801033c:	4610      	mov	r0, r2
 801033e:	4798      	blx	r3
 8010340:	4602      	mov	r2, r0
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801034e:	1c5a      	adds	r2, r3, #1
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8010356:	2300      	movs	r3, #0
}
 8010358:	4618      	mov	r0, r3
 801035a:	3710      	adds	r7, #16
 801035c:	46bd      	mov	sp, r7
 801035e:	bd80      	pop	{r7, pc}

08010360 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010360:	b580      	push	{r7, lr}
 8010362:	b082      	sub	sp, #8
 8010364:	af00      	add	r7, sp, #0
 8010366:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010368:	6878      	ldr	r0, [r7, #4]
 801036a:	f001 fe8d 	bl	8012088 <USBD_LL_Start>
 801036e:	4603      	mov	r3, r0
}
 8010370:	4618      	mov	r0, r3
 8010372:	3708      	adds	r7, #8
 8010374:	46bd      	mov	sp, r7
 8010376:	bd80      	pop	{r7, pc}

08010378 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8010378:	b480      	push	{r7}
 801037a:	b083      	sub	sp, #12
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010380:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8010382:	4618      	mov	r0, r3
 8010384:	370c      	adds	r7, #12
 8010386:	46bd      	mov	sp, r7
 8010388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801038c:	4770      	bx	lr

0801038e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801038e:	b580      	push	{r7, lr}
 8010390:	b084      	sub	sp, #16
 8010392:	af00      	add	r7, sp, #0
 8010394:	6078      	str	r0, [r7, #4]
 8010396:	460b      	mov	r3, r1
 8010398:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801039a:	2300      	movs	r3, #0
 801039c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d009      	beq.n	80103bc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	78fa      	ldrb	r2, [r7, #3]
 80103b2:	4611      	mov	r1, r2
 80103b4:	6878      	ldr	r0, [r7, #4]
 80103b6:	4798      	blx	r3
 80103b8:	4603      	mov	r3, r0
 80103ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80103bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80103be:	4618      	mov	r0, r3
 80103c0:	3710      	adds	r7, #16
 80103c2:	46bd      	mov	sp, r7
 80103c4:	bd80      	pop	{r7, pc}

080103c6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80103c6:	b580      	push	{r7, lr}
 80103c8:	b084      	sub	sp, #16
 80103ca:	af00      	add	r7, sp, #0
 80103cc:	6078      	str	r0, [r7, #4]
 80103ce:	460b      	mov	r3, r1
 80103d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80103d2:	2300      	movs	r3, #0
 80103d4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80103dc:	685b      	ldr	r3, [r3, #4]
 80103de:	78fa      	ldrb	r2, [r7, #3]
 80103e0:	4611      	mov	r1, r2
 80103e2:	6878      	ldr	r0, [r7, #4]
 80103e4:	4798      	blx	r3
 80103e6:	4603      	mov	r3, r0
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d001      	beq.n	80103f0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80103ec:	2303      	movs	r3, #3
 80103ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80103f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80103f2:	4618      	mov	r0, r3
 80103f4:	3710      	adds	r7, #16
 80103f6:	46bd      	mov	sp, r7
 80103f8:	bd80      	pop	{r7, pc}

080103fa <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80103fa:	b580      	push	{r7, lr}
 80103fc:	b084      	sub	sp, #16
 80103fe:	af00      	add	r7, sp, #0
 8010400:	6078      	str	r0, [r7, #4]
 8010402:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801040a:	6839      	ldr	r1, [r7, #0]
 801040c:	4618      	mov	r0, r3
 801040e:	f001 f936 	bl	801167e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	2201      	movs	r2, #1
 8010416:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8010420:	461a      	mov	r2, r3
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801042e:	f003 031f 	and.w	r3, r3, #31
 8010432:	2b02      	cmp	r3, #2
 8010434:	d01a      	beq.n	801046c <USBD_LL_SetupStage+0x72>
 8010436:	2b02      	cmp	r3, #2
 8010438:	d822      	bhi.n	8010480 <USBD_LL_SetupStage+0x86>
 801043a:	2b00      	cmp	r3, #0
 801043c:	d002      	beq.n	8010444 <USBD_LL_SetupStage+0x4a>
 801043e:	2b01      	cmp	r3, #1
 8010440:	d00a      	beq.n	8010458 <USBD_LL_SetupStage+0x5e>
 8010442:	e01d      	b.n	8010480 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801044a:	4619      	mov	r1, r3
 801044c:	6878      	ldr	r0, [r7, #4]
 801044e:	f000 fb63 	bl	8010b18 <USBD_StdDevReq>
 8010452:	4603      	mov	r3, r0
 8010454:	73fb      	strb	r3, [r7, #15]
      break;
 8010456:	e020      	b.n	801049a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801045e:	4619      	mov	r1, r3
 8010460:	6878      	ldr	r0, [r7, #4]
 8010462:	f000 fbcb 	bl	8010bfc <USBD_StdItfReq>
 8010466:	4603      	mov	r3, r0
 8010468:	73fb      	strb	r3, [r7, #15]
      break;
 801046a:	e016      	b.n	801049a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010472:	4619      	mov	r1, r3
 8010474:	6878      	ldr	r0, [r7, #4]
 8010476:	f000 fc2d 	bl	8010cd4 <USBD_StdEPReq>
 801047a:	4603      	mov	r3, r0
 801047c:	73fb      	strb	r3, [r7, #15]
      break;
 801047e:	e00c      	b.n	801049a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010486:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801048a:	b2db      	uxtb	r3, r3
 801048c:	4619      	mov	r1, r3
 801048e:	6878      	ldr	r0, [r7, #4]
 8010490:	f001 fe5a 	bl	8012148 <USBD_LL_StallEP>
 8010494:	4603      	mov	r3, r0
 8010496:	73fb      	strb	r3, [r7, #15]
      break;
 8010498:	bf00      	nop
  }

  return ret;
 801049a:	7bfb      	ldrb	r3, [r7, #15]
}
 801049c:	4618      	mov	r0, r3
 801049e:	3710      	adds	r7, #16
 80104a0:	46bd      	mov	sp, r7
 80104a2:	bd80      	pop	{r7, pc}

080104a4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b086      	sub	sp, #24
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	60f8      	str	r0, [r7, #12]
 80104ac:	460b      	mov	r3, r1
 80104ae:	607a      	str	r2, [r7, #4]
 80104b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80104b2:	2300      	movs	r3, #0
 80104b4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80104b6:	7afb      	ldrb	r3, [r7, #11]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d16e      	bne.n	801059a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80104c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80104ca:	2b03      	cmp	r3, #3
 80104cc:	f040 8098 	bne.w	8010600 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80104d0:	693b      	ldr	r3, [r7, #16]
 80104d2:	689a      	ldr	r2, [r3, #8]
 80104d4:	693b      	ldr	r3, [r7, #16]
 80104d6:	68db      	ldr	r3, [r3, #12]
 80104d8:	429a      	cmp	r2, r3
 80104da:	d913      	bls.n	8010504 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80104dc:	693b      	ldr	r3, [r7, #16]
 80104de:	689a      	ldr	r2, [r3, #8]
 80104e0:	693b      	ldr	r3, [r7, #16]
 80104e2:	68db      	ldr	r3, [r3, #12]
 80104e4:	1ad2      	subs	r2, r2, r3
 80104e6:	693b      	ldr	r3, [r7, #16]
 80104e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80104ea:	693b      	ldr	r3, [r7, #16]
 80104ec:	68da      	ldr	r2, [r3, #12]
 80104ee:	693b      	ldr	r3, [r7, #16]
 80104f0:	689b      	ldr	r3, [r3, #8]
 80104f2:	4293      	cmp	r3, r2
 80104f4:	bf28      	it	cs
 80104f6:	4613      	movcs	r3, r2
 80104f8:	461a      	mov	r2, r3
 80104fa:	6879      	ldr	r1, [r7, #4]
 80104fc:	68f8      	ldr	r0, [r7, #12]
 80104fe:	f001 f9be 	bl	801187e <USBD_CtlContinueRx>
 8010502:	e07d      	b.n	8010600 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801050a:	f003 031f 	and.w	r3, r3, #31
 801050e:	2b02      	cmp	r3, #2
 8010510:	d014      	beq.n	801053c <USBD_LL_DataOutStage+0x98>
 8010512:	2b02      	cmp	r3, #2
 8010514:	d81d      	bhi.n	8010552 <USBD_LL_DataOutStage+0xae>
 8010516:	2b00      	cmp	r3, #0
 8010518:	d002      	beq.n	8010520 <USBD_LL_DataOutStage+0x7c>
 801051a:	2b01      	cmp	r3, #1
 801051c:	d003      	beq.n	8010526 <USBD_LL_DataOutStage+0x82>
 801051e:	e018      	b.n	8010552 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8010520:	2300      	movs	r3, #0
 8010522:	75bb      	strb	r3, [r7, #22]
            break;
 8010524:	e018      	b.n	8010558 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801052c:	b2db      	uxtb	r3, r3
 801052e:	4619      	mov	r1, r3
 8010530:	68f8      	ldr	r0, [r7, #12]
 8010532:	f000 fa64 	bl	80109fe <USBD_CoreFindIF>
 8010536:	4603      	mov	r3, r0
 8010538:	75bb      	strb	r3, [r7, #22]
            break;
 801053a:	e00d      	b.n	8010558 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8010542:	b2db      	uxtb	r3, r3
 8010544:	4619      	mov	r1, r3
 8010546:	68f8      	ldr	r0, [r7, #12]
 8010548:	f000 fa66 	bl	8010a18 <USBD_CoreFindEP>
 801054c:	4603      	mov	r3, r0
 801054e:	75bb      	strb	r3, [r7, #22]
            break;
 8010550:	e002      	b.n	8010558 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8010552:	2300      	movs	r3, #0
 8010554:	75bb      	strb	r3, [r7, #22]
            break;
 8010556:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8010558:	7dbb      	ldrb	r3, [r7, #22]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d119      	bne.n	8010592 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010564:	b2db      	uxtb	r3, r3
 8010566:	2b03      	cmp	r3, #3
 8010568:	d113      	bne.n	8010592 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801056a:	7dba      	ldrb	r2, [r7, #22]
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	32ae      	adds	r2, #174	@ 0xae
 8010570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010574:	691b      	ldr	r3, [r3, #16]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d00b      	beq.n	8010592 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801057a:	7dba      	ldrb	r2, [r7, #22]
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8010582:	7dba      	ldrb	r2, [r7, #22]
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	32ae      	adds	r2, #174	@ 0xae
 8010588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801058c:	691b      	ldr	r3, [r3, #16]
 801058e:	68f8      	ldr	r0, [r7, #12]
 8010590:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8010592:	68f8      	ldr	r0, [r7, #12]
 8010594:	f001 f984 	bl	80118a0 <USBD_CtlSendStatus>
 8010598:	e032      	b.n	8010600 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801059a:	7afb      	ldrb	r3, [r7, #11]
 801059c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80105a0:	b2db      	uxtb	r3, r3
 80105a2:	4619      	mov	r1, r3
 80105a4:	68f8      	ldr	r0, [r7, #12]
 80105a6:	f000 fa37 	bl	8010a18 <USBD_CoreFindEP>
 80105aa:	4603      	mov	r3, r0
 80105ac:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80105ae:	7dbb      	ldrb	r3, [r7, #22]
 80105b0:	2bff      	cmp	r3, #255	@ 0xff
 80105b2:	d025      	beq.n	8010600 <USBD_LL_DataOutStage+0x15c>
 80105b4:	7dbb      	ldrb	r3, [r7, #22]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d122      	bne.n	8010600 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80105c0:	b2db      	uxtb	r3, r3
 80105c2:	2b03      	cmp	r3, #3
 80105c4:	d117      	bne.n	80105f6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80105c6:	7dba      	ldrb	r2, [r7, #22]
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	32ae      	adds	r2, #174	@ 0xae
 80105cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105d0:	699b      	ldr	r3, [r3, #24]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d00f      	beq.n	80105f6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80105d6:	7dba      	ldrb	r2, [r7, #22]
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80105de:	7dba      	ldrb	r2, [r7, #22]
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	32ae      	adds	r2, #174	@ 0xae
 80105e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105e8:	699b      	ldr	r3, [r3, #24]
 80105ea:	7afa      	ldrb	r2, [r7, #11]
 80105ec:	4611      	mov	r1, r2
 80105ee:	68f8      	ldr	r0, [r7, #12]
 80105f0:	4798      	blx	r3
 80105f2:	4603      	mov	r3, r0
 80105f4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80105f6:	7dfb      	ldrb	r3, [r7, #23]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d001      	beq.n	8010600 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80105fc:	7dfb      	ldrb	r3, [r7, #23]
 80105fe:	e000      	b.n	8010602 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8010600:	2300      	movs	r3, #0
}
 8010602:	4618      	mov	r0, r3
 8010604:	3718      	adds	r7, #24
 8010606:	46bd      	mov	sp, r7
 8010608:	bd80      	pop	{r7, pc}

0801060a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801060a:	b580      	push	{r7, lr}
 801060c:	b086      	sub	sp, #24
 801060e:	af00      	add	r7, sp, #0
 8010610:	60f8      	str	r0, [r7, #12]
 8010612:	460b      	mov	r3, r1
 8010614:	607a      	str	r2, [r7, #4]
 8010616:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8010618:	7afb      	ldrb	r3, [r7, #11]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d16f      	bne.n	80106fe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	3314      	adds	r3, #20
 8010622:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801062a:	2b02      	cmp	r3, #2
 801062c:	d15a      	bne.n	80106e4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801062e:	693b      	ldr	r3, [r7, #16]
 8010630:	689a      	ldr	r2, [r3, #8]
 8010632:	693b      	ldr	r3, [r7, #16]
 8010634:	68db      	ldr	r3, [r3, #12]
 8010636:	429a      	cmp	r2, r3
 8010638:	d914      	bls.n	8010664 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801063a:	693b      	ldr	r3, [r7, #16]
 801063c:	689a      	ldr	r2, [r3, #8]
 801063e:	693b      	ldr	r3, [r7, #16]
 8010640:	68db      	ldr	r3, [r3, #12]
 8010642:	1ad2      	subs	r2, r2, r3
 8010644:	693b      	ldr	r3, [r7, #16]
 8010646:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010648:	693b      	ldr	r3, [r7, #16]
 801064a:	689b      	ldr	r3, [r3, #8]
 801064c:	461a      	mov	r2, r3
 801064e:	6879      	ldr	r1, [r7, #4]
 8010650:	68f8      	ldr	r0, [r7, #12]
 8010652:	f001 f8e6 	bl	8011822 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010656:	2300      	movs	r3, #0
 8010658:	2200      	movs	r2, #0
 801065a:	2100      	movs	r1, #0
 801065c:	68f8      	ldr	r0, [r7, #12]
 801065e:	f001 fe1d 	bl	801229c <USBD_LL_PrepareReceive>
 8010662:	e03f      	b.n	80106e4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010664:	693b      	ldr	r3, [r7, #16]
 8010666:	68da      	ldr	r2, [r3, #12]
 8010668:	693b      	ldr	r3, [r7, #16]
 801066a:	689b      	ldr	r3, [r3, #8]
 801066c:	429a      	cmp	r2, r3
 801066e:	d11c      	bne.n	80106aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010670:	693b      	ldr	r3, [r7, #16]
 8010672:	685a      	ldr	r2, [r3, #4]
 8010674:	693b      	ldr	r3, [r7, #16]
 8010676:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010678:	429a      	cmp	r2, r3
 801067a:	d316      	bcc.n	80106aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801067c:	693b      	ldr	r3, [r7, #16]
 801067e:	685a      	ldr	r2, [r3, #4]
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010686:	429a      	cmp	r2, r3
 8010688:	d20f      	bcs.n	80106aa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801068a:	2200      	movs	r2, #0
 801068c:	2100      	movs	r1, #0
 801068e:	68f8      	ldr	r0, [r7, #12]
 8010690:	f001 f8c7 	bl	8011822 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	2200      	movs	r2, #0
 8010698:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801069c:	2300      	movs	r3, #0
 801069e:	2200      	movs	r2, #0
 80106a0:	2100      	movs	r1, #0
 80106a2:	68f8      	ldr	r0, [r7, #12]
 80106a4:	f001 fdfa 	bl	801229c <USBD_LL_PrepareReceive>
 80106a8:	e01c      	b.n	80106e4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80106b0:	b2db      	uxtb	r3, r3
 80106b2:	2b03      	cmp	r3, #3
 80106b4:	d10f      	bne.n	80106d6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80106bc:	68db      	ldr	r3, [r3, #12]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d009      	beq.n	80106d6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	2200      	movs	r2, #0
 80106c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80106d0:	68db      	ldr	r3, [r3, #12]
 80106d2:	68f8      	ldr	r0, [r7, #12]
 80106d4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80106d6:	2180      	movs	r1, #128	@ 0x80
 80106d8:	68f8      	ldr	r0, [r7, #12]
 80106da:	f001 fd35 	bl	8012148 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80106de:	68f8      	ldr	r0, [r7, #12]
 80106e0:	f001 f8f1 	bl	80118c6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d03a      	beq.n	8010764 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80106ee:	68f8      	ldr	r0, [r7, #12]
 80106f0:	f7ff fe42 	bl	8010378 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	2200      	movs	r2, #0
 80106f8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80106fc:	e032      	b.n	8010764 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80106fe:	7afb      	ldrb	r3, [r7, #11]
 8010700:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010704:	b2db      	uxtb	r3, r3
 8010706:	4619      	mov	r1, r3
 8010708:	68f8      	ldr	r0, [r7, #12]
 801070a:	f000 f985 	bl	8010a18 <USBD_CoreFindEP>
 801070e:	4603      	mov	r3, r0
 8010710:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010712:	7dfb      	ldrb	r3, [r7, #23]
 8010714:	2bff      	cmp	r3, #255	@ 0xff
 8010716:	d025      	beq.n	8010764 <USBD_LL_DataInStage+0x15a>
 8010718:	7dfb      	ldrb	r3, [r7, #23]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d122      	bne.n	8010764 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010724:	b2db      	uxtb	r3, r3
 8010726:	2b03      	cmp	r3, #3
 8010728:	d11c      	bne.n	8010764 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801072a:	7dfa      	ldrb	r2, [r7, #23]
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	32ae      	adds	r2, #174	@ 0xae
 8010730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010734:	695b      	ldr	r3, [r3, #20]
 8010736:	2b00      	cmp	r3, #0
 8010738:	d014      	beq.n	8010764 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801073a:	7dfa      	ldrb	r2, [r7, #23]
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8010742:	7dfa      	ldrb	r2, [r7, #23]
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	32ae      	adds	r2, #174	@ 0xae
 8010748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801074c:	695b      	ldr	r3, [r3, #20]
 801074e:	7afa      	ldrb	r2, [r7, #11]
 8010750:	4611      	mov	r1, r2
 8010752:	68f8      	ldr	r0, [r7, #12]
 8010754:	4798      	blx	r3
 8010756:	4603      	mov	r3, r0
 8010758:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801075a:	7dbb      	ldrb	r3, [r7, #22]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d001      	beq.n	8010764 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8010760:	7dbb      	ldrb	r3, [r7, #22]
 8010762:	e000      	b.n	8010766 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8010764:	2300      	movs	r3, #0
}
 8010766:	4618      	mov	r0, r3
 8010768:	3718      	adds	r7, #24
 801076a:	46bd      	mov	sp, r7
 801076c:	bd80      	pop	{r7, pc}

0801076e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801076e:	b580      	push	{r7, lr}
 8010770:	b084      	sub	sp, #16
 8010772:	af00      	add	r7, sp, #0
 8010774:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8010776:	2300      	movs	r3, #0
 8010778:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	2201      	movs	r2, #1
 801077e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	2200      	movs	r2, #0
 8010786:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	2200      	movs	r2, #0
 801078e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	2200      	movs	r2, #0
 8010794:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	2200      	movs	r2, #0
 801079c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d014      	beq.n	80107d4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80107b0:	685b      	ldr	r3, [r3, #4]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d00e      	beq.n	80107d4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80107bc:	685b      	ldr	r3, [r3, #4]
 80107be:	687a      	ldr	r2, [r7, #4]
 80107c0:	6852      	ldr	r2, [r2, #4]
 80107c2:	b2d2      	uxtb	r2, r2
 80107c4:	4611      	mov	r1, r2
 80107c6:	6878      	ldr	r0, [r7, #4]
 80107c8:	4798      	blx	r3
 80107ca:	4603      	mov	r3, r0
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d001      	beq.n	80107d4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80107d0:	2303      	movs	r3, #3
 80107d2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80107d4:	2340      	movs	r3, #64	@ 0x40
 80107d6:	2200      	movs	r2, #0
 80107d8:	2100      	movs	r1, #0
 80107da:	6878      	ldr	r0, [r7, #4]
 80107dc:	f001 fc6f 	bl	80120be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	2201      	movs	r2, #1
 80107e4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	2240      	movs	r2, #64	@ 0x40
 80107ec:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80107f0:	2340      	movs	r3, #64	@ 0x40
 80107f2:	2200      	movs	r2, #0
 80107f4:	2180      	movs	r1, #128	@ 0x80
 80107f6:	6878      	ldr	r0, [r7, #4]
 80107f8:	f001 fc61 	bl	80120be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	2201      	movs	r2, #1
 8010800:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	2240      	movs	r2, #64	@ 0x40
 8010806:	621a      	str	r2, [r3, #32]

  return ret;
 8010808:	7bfb      	ldrb	r3, [r7, #15]
}
 801080a:	4618      	mov	r0, r3
 801080c:	3710      	adds	r7, #16
 801080e:	46bd      	mov	sp, r7
 8010810:	bd80      	pop	{r7, pc}

08010812 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010812:	b480      	push	{r7}
 8010814:	b083      	sub	sp, #12
 8010816:	af00      	add	r7, sp, #0
 8010818:	6078      	str	r0, [r7, #4]
 801081a:	460b      	mov	r3, r1
 801081c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	78fa      	ldrb	r2, [r7, #3]
 8010822:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010824:	2300      	movs	r3, #0
}
 8010826:	4618      	mov	r0, r3
 8010828:	370c      	adds	r7, #12
 801082a:	46bd      	mov	sp, r7
 801082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010830:	4770      	bx	lr

08010832 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010832:	b480      	push	{r7}
 8010834:	b083      	sub	sp, #12
 8010836:	af00      	add	r7, sp, #0
 8010838:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010840:	b2db      	uxtb	r3, r3
 8010842:	2b04      	cmp	r3, #4
 8010844:	d006      	beq.n	8010854 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801084c:	b2da      	uxtb	r2, r3
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	2204      	movs	r2, #4
 8010858:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 801085c:	2300      	movs	r3, #0
}
 801085e:	4618      	mov	r0, r3
 8010860:	370c      	adds	r7, #12
 8010862:	46bd      	mov	sp, r7
 8010864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010868:	4770      	bx	lr

0801086a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801086a:	b480      	push	{r7}
 801086c:	b083      	sub	sp, #12
 801086e:	af00      	add	r7, sp, #0
 8010870:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010878:	b2db      	uxtb	r3, r3
 801087a:	2b04      	cmp	r3, #4
 801087c:	d106      	bne.n	801088c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8010884:	b2da      	uxtb	r2, r3
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 801088c:	2300      	movs	r3, #0
}
 801088e:	4618      	mov	r0, r3
 8010890:	370c      	adds	r7, #12
 8010892:	46bd      	mov	sp, r7
 8010894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010898:	4770      	bx	lr

0801089a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801089a:	b580      	push	{r7, lr}
 801089c:	b082      	sub	sp, #8
 801089e:	af00      	add	r7, sp, #0
 80108a0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80108a8:	b2db      	uxtb	r3, r3
 80108aa:	2b03      	cmp	r3, #3
 80108ac:	d110      	bne.n	80108d0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d00b      	beq.n	80108d0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80108be:	69db      	ldr	r3, [r3, #28]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d005      	beq.n	80108d0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80108ca:	69db      	ldr	r3, [r3, #28]
 80108cc:	6878      	ldr	r0, [r7, #4]
 80108ce:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80108d0:	2300      	movs	r3, #0
}
 80108d2:	4618      	mov	r0, r3
 80108d4:	3708      	adds	r7, #8
 80108d6:	46bd      	mov	sp, r7
 80108d8:	bd80      	pop	{r7, pc}

080108da <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80108da:	b580      	push	{r7, lr}
 80108dc:	b082      	sub	sp, #8
 80108de:	af00      	add	r7, sp, #0
 80108e0:	6078      	str	r0, [r7, #4]
 80108e2:	460b      	mov	r3, r1
 80108e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	32ae      	adds	r2, #174	@ 0xae
 80108f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d101      	bne.n	80108fc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80108f8:	2303      	movs	r3, #3
 80108fa:	e01c      	b.n	8010936 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010902:	b2db      	uxtb	r3, r3
 8010904:	2b03      	cmp	r3, #3
 8010906:	d115      	bne.n	8010934 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	32ae      	adds	r2, #174	@ 0xae
 8010912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010916:	6a1b      	ldr	r3, [r3, #32]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d00b      	beq.n	8010934 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	32ae      	adds	r2, #174	@ 0xae
 8010926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801092a:	6a1b      	ldr	r3, [r3, #32]
 801092c:	78fa      	ldrb	r2, [r7, #3]
 801092e:	4611      	mov	r1, r2
 8010930:	6878      	ldr	r0, [r7, #4]
 8010932:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010934:	2300      	movs	r3, #0
}
 8010936:	4618      	mov	r0, r3
 8010938:	3708      	adds	r7, #8
 801093a:	46bd      	mov	sp, r7
 801093c:	bd80      	pop	{r7, pc}

0801093e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801093e:	b580      	push	{r7, lr}
 8010940:	b082      	sub	sp, #8
 8010942:	af00      	add	r7, sp, #0
 8010944:	6078      	str	r0, [r7, #4]
 8010946:	460b      	mov	r3, r1
 8010948:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	32ae      	adds	r2, #174	@ 0xae
 8010954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010958:	2b00      	cmp	r3, #0
 801095a:	d101      	bne.n	8010960 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 801095c:	2303      	movs	r3, #3
 801095e:	e01c      	b.n	801099a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010966:	b2db      	uxtb	r3, r3
 8010968:	2b03      	cmp	r3, #3
 801096a:	d115      	bne.n	8010998 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	32ae      	adds	r2, #174	@ 0xae
 8010976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801097a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801097c:	2b00      	cmp	r3, #0
 801097e:	d00b      	beq.n	8010998 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	32ae      	adds	r2, #174	@ 0xae
 801098a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801098e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010990:	78fa      	ldrb	r2, [r7, #3]
 8010992:	4611      	mov	r1, r2
 8010994:	6878      	ldr	r0, [r7, #4]
 8010996:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010998:	2300      	movs	r3, #0
}
 801099a:	4618      	mov	r0, r3
 801099c:	3708      	adds	r7, #8
 801099e:	46bd      	mov	sp, r7
 80109a0:	bd80      	pop	{r7, pc}

080109a2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80109a2:	b480      	push	{r7}
 80109a4:	b083      	sub	sp, #12
 80109a6:	af00      	add	r7, sp, #0
 80109a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80109aa:	2300      	movs	r3, #0
}
 80109ac:	4618      	mov	r0, r3
 80109ae:	370c      	adds	r7, #12
 80109b0:	46bd      	mov	sp, r7
 80109b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b6:	4770      	bx	lr

080109b8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b084      	sub	sp, #16
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80109c0:	2300      	movs	r3, #0
 80109c2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	2201      	movs	r2, #1
 80109c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d00e      	beq.n	80109f4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80109dc:	685b      	ldr	r3, [r3, #4]
 80109de:	687a      	ldr	r2, [r7, #4]
 80109e0:	6852      	ldr	r2, [r2, #4]
 80109e2:	b2d2      	uxtb	r2, r2
 80109e4:	4611      	mov	r1, r2
 80109e6:	6878      	ldr	r0, [r7, #4]
 80109e8:	4798      	blx	r3
 80109ea:	4603      	mov	r3, r0
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d001      	beq.n	80109f4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80109f0:	2303      	movs	r3, #3
 80109f2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80109f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80109f6:	4618      	mov	r0, r3
 80109f8:	3710      	adds	r7, #16
 80109fa:	46bd      	mov	sp, r7
 80109fc:	bd80      	pop	{r7, pc}

080109fe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80109fe:	b480      	push	{r7}
 8010a00:	b083      	sub	sp, #12
 8010a02:	af00      	add	r7, sp, #0
 8010a04:	6078      	str	r0, [r7, #4]
 8010a06:	460b      	mov	r3, r1
 8010a08:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010a0a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	370c      	adds	r7, #12
 8010a10:	46bd      	mov	sp, r7
 8010a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a16:	4770      	bx	lr

08010a18 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010a18:	b480      	push	{r7}
 8010a1a:	b083      	sub	sp, #12
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	6078      	str	r0, [r7, #4]
 8010a20:	460b      	mov	r3, r1
 8010a22:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010a24:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010a26:	4618      	mov	r0, r3
 8010a28:	370c      	adds	r7, #12
 8010a2a:	46bd      	mov	sp, r7
 8010a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a30:	4770      	bx	lr

08010a32 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8010a32:	b580      	push	{r7, lr}
 8010a34:	b086      	sub	sp, #24
 8010a36:	af00      	add	r7, sp, #0
 8010a38:	6078      	str	r0, [r7, #4]
 8010a3a:	460b      	mov	r3, r1
 8010a3c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8010a46:	2300      	movs	r3, #0
 8010a48:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	885b      	ldrh	r3, [r3, #2]
 8010a4e:	b29b      	uxth	r3, r3
 8010a50:	68fa      	ldr	r2, [r7, #12]
 8010a52:	7812      	ldrb	r2, [r2, #0]
 8010a54:	4293      	cmp	r3, r2
 8010a56:	d91f      	bls.n	8010a98 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	781b      	ldrb	r3, [r3, #0]
 8010a5c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8010a5e:	e013      	b.n	8010a88 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8010a60:	f107 030a 	add.w	r3, r7, #10
 8010a64:	4619      	mov	r1, r3
 8010a66:	6978      	ldr	r0, [r7, #20]
 8010a68:	f000 f81b 	bl	8010aa2 <USBD_GetNextDesc>
 8010a6c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8010a6e:	697b      	ldr	r3, [r7, #20]
 8010a70:	785b      	ldrb	r3, [r3, #1]
 8010a72:	2b05      	cmp	r3, #5
 8010a74:	d108      	bne.n	8010a88 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8010a76:	697b      	ldr	r3, [r7, #20]
 8010a78:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8010a7a:	693b      	ldr	r3, [r7, #16]
 8010a7c:	789b      	ldrb	r3, [r3, #2]
 8010a7e:	78fa      	ldrb	r2, [r7, #3]
 8010a80:	429a      	cmp	r2, r3
 8010a82:	d008      	beq.n	8010a96 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8010a84:	2300      	movs	r3, #0
 8010a86:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	885b      	ldrh	r3, [r3, #2]
 8010a8c:	b29a      	uxth	r2, r3
 8010a8e:	897b      	ldrh	r3, [r7, #10]
 8010a90:	429a      	cmp	r2, r3
 8010a92:	d8e5      	bhi.n	8010a60 <USBD_GetEpDesc+0x2e>
 8010a94:	e000      	b.n	8010a98 <USBD_GetEpDesc+0x66>
          break;
 8010a96:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8010a98:	693b      	ldr	r3, [r7, #16]
}
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	3718      	adds	r7, #24
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	bd80      	pop	{r7, pc}

08010aa2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8010aa2:	b480      	push	{r7}
 8010aa4:	b085      	sub	sp, #20
 8010aa6:	af00      	add	r7, sp, #0
 8010aa8:	6078      	str	r0, [r7, #4]
 8010aaa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8010ab0:	683b      	ldr	r3, [r7, #0]
 8010ab2:	881b      	ldrh	r3, [r3, #0]
 8010ab4:	68fa      	ldr	r2, [r7, #12]
 8010ab6:	7812      	ldrb	r2, [r2, #0]
 8010ab8:	4413      	add	r3, r2
 8010aba:	b29a      	uxth	r2, r3
 8010abc:	683b      	ldr	r3, [r7, #0]
 8010abe:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	781b      	ldrb	r3, [r3, #0]
 8010ac4:	461a      	mov	r2, r3
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	4413      	add	r3, r2
 8010aca:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8010acc:	68fb      	ldr	r3, [r7, #12]
}
 8010ace:	4618      	mov	r0, r3
 8010ad0:	3714      	adds	r7, #20
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad8:	4770      	bx	lr

08010ada <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010ada:	b480      	push	{r7}
 8010adc:	b087      	sub	sp, #28
 8010ade:	af00      	add	r7, sp, #0
 8010ae0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010ae6:	697b      	ldr	r3, [r7, #20]
 8010ae8:	781b      	ldrb	r3, [r3, #0]
 8010aea:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010aec:	697b      	ldr	r3, [r7, #20]
 8010aee:	3301      	adds	r3, #1
 8010af0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010af2:	697b      	ldr	r3, [r7, #20]
 8010af4:	781b      	ldrb	r3, [r3, #0]
 8010af6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010af8:	8a3b      	ldrh	r3, [r7, #16]
 8010afa:	021b      	lsls	r3, r3, #8
 8010afc:	b21a      	sxth	r2, r3
 8010afe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010b02:	4313      	orrs	r3, r2
 8010b04:	b21b      	sxth	r3, r3
 8010b06:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010b08:	89fb      	ldrh	r3, [r7, #14]
}
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	371c      	adds	r7, #28
 8010b0e:	46bd      	mov	sp, r7
 8010b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b14:	4770      	bx	lr
	...

08010b18 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b084      	sub	sp, #16
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
 8010b20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010b22:	2300      	movs	r3, #0
 8010b24:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010b26:	683b      	ldr	r3, [r7, #0]
 8010b28:	781b      	ldrb	r3, [r3, #0]
 8010b2a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010b2e:	2b40      	cmp	r3, #64	@ 0x40
 8010b30:	d005      	beq.n	8010b3e <USBD_StdDevReq+0x26>
 8010b32:	2b40      	cmp	r3, #64	@ 0x40
 8010b34:	d857      	bhi.n	8010be6 <USBD_StdDevReq+0xce>
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d00f      	beq.n	8010b5a <USBD_StdDevReq+0x42>
 8010b3a:	2b20      	cmp	r3, #32
 8010b3c:	d153      	bne.n	8010be6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	32ae      	adds	r2, #174	@ 0xae
 8010b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b4c:	689b      	ldr	r3, [r3, #8]
 8010b4e:	6839      	ldr	r1, [r7, #0]
 8010b50:	6878      	ldr	r0, [r7, #4]
 8010b52:	4798      	blx	r3
 8010b54:	4603      	mov	r3, r0
 8010b56:	73fb      	strb	r3, [r7, #15]
      break;
 8010b58:	e04a      	b.n	8010bf0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010b5a:	683b      	ldr	r3, [r7, #0]
 8010b5c:	785b      	ldrb	r3, [r3, #1]
 8010b5e:	2b09      	cmp	r3, #9
 8010b60:	d83b      	bhi.n	8010bda <USBD_StdDevReq+0xc2>
 8010b62:	a201      	add	r2, pc, #4	@ (adr r2, 8010b68 <USBD_StdDevReq+0x50>)
 8010b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b68:	08010bbd 	.word	0x08010bbd
 8010b6c:	08010bd1 	.word	0x08010bd1
 8010b70:	08010bdb 	.word	0x08010bdb
 8010b74:	08010bc7 	.word	0x08010bc7
 8010b78:	08010bdb 	.word	0x08010bdb
 8010b7c:	08010b9b 	.word	0x08010b9b
 8010b80:	08010b91 	.word	0x08010b91
 8010b84:	08010bdb 	.word	0x08010bdb
 8010b88:	08010bb3 	.word	0x08010bb3
 8010b8c:	08010ba5 	.word	0x08010ba5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010b90:	6839      	ldr	r1, [r7, #0]
 8010b92:	6878      	ldr	r0, [r7, #4]
 8010b94:	f000 fa3c 	bl	8011010 <USBD_GetDescriptor>
          break;
 8010b98:	e024      	b.n	8010be4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8010b9a:	6839      	ldr	r1, [r7, #0]
 8010b9c:	6878      	ldr	r0, [r7, #4]
 8010b9e:	f000 fbcb 	bl	8011338 <USBD_SetAddress>
          break;
 8010ba2:	e01f      	b.n	8010be4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010ba4:	6839      	ldr	r1, [r7, #0]
 8010ba6:	6878      	ldr	r0, [r7, #4]
 8010ba8:	f000 fc0a 	bl	80113c0 <USBD_SetConfig>
 8010bac:	4603      	mov	r3, r0
 8010bae:	73fb      	strb	r3, [r7, #15]
          break;
 8010bb0:	e018      	b.n	8010be4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8010bb2:	6839      	ldr	r1, [r7, #0]
 8010bb4:	6878      	ldr	r0, [r7, #4]
 8010bb6:	f000 fcad 	bl	8011514 <USBD_GetConfig>
          break;
 8010bba:	e013      	b.n	8010be4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010bbc:	6839      	ldr	r1, [r7, #0]
 8010bbe:	6878      	ldr	r0, [r7, #4]
 8010bc0:	f000 fcde 	bl	8011580 <USBD_GetStatus>
          break;
 8010bc4:	e00e      	b.n	8010be4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8010bc6:	6839      	ldr	r1, [r7, #0]
 8010bc8:	6878      	ldr	r0, [r7, #4]
 8010bca:	f000 fd0d 	bl	80115e8 <USBD_SetFeature>
          break;
 8010bce:	e009      	b.n	8010be4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010bd0:	6839      	ldr	r1, [r7, #0]
 8010bd2:	6878      	ldr	r0, [r7, #4]
 8010bd4:	f000 fd31 	bl	801163a <USBD_ClrFeature>
          break;
 8010bd8:	e004      	b.n	8010be4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8010bda:	6839      	ldr	r1, [r7, #0]
 8010bdc:	6878      	ldr	r0, [r7, #4]
 8010bde:	f000 fd88 	bl	80116f2 <USBD_CtlError>
          break;
 8010be2:	bf00      	nop
      }
      break;
 8010be4:	e004      	b.n	8010bf0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8010be6:	6839      	ldr	r1, [r7, #0]
 8010be8:	6878      	ldr	r0, [r7, #4]
 8010bea:	f000 fd82 	bl	80116f2 <USBD_CtlError>
      break;
 8010bee:	bf00      	nop
  }

  return ret;
 8010bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	3710      	adds	r7, #16
 8010bf6:	46bd      	mov	sp, r7
 8010bf8:	bd80      	pop	{r7, pc}
 8010bfa:	bf00      	nop

08010bfc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	b084      	sub	sp, #16
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	6078      	str	r0, [r7, #4]
 8010c04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010c06:	2300      	movs	r3, #0
 8010c08:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010c0a:	683b      	ldr	r3, [r7, #0]
 8010c0c:	781b      	ldrb	r3, [r3, #0]
 8010c0e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010c12:	2b40      	cmp	r3, #64	@ 0x40
 8010c14:	d005      	beq.n	8010c22 <USBD_StdItfReq+0x26>
 8010c16:	2b40      	cmp	r3, #64	@ 0x40
 8010c18:	d852      	bhi.n	8010cc0 <USBD_StdItfReq+0xc4>
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d001      	beq.n	8010c22 <USBD_StdItfReq+0x26>
 8010c1e:	2b20      	cmp	r3, #32
 8010c20:	d14e      	bne.n	8010cc0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010c28:	b2db      	uxtb	r3, r3
 8010c2a:	3b01      	subs	r3, #1
 8010c2c:	2b02      	cmp	r3, #2
 8010c2e:	d840      	bhi.n	8010cb2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010c30:	683b      	ldr	r3, [r7, #0]
 8010c32:	889b      	ldrh	r3, [r3, #4]
 8010c34:	b2db      	uxtb	r3, r3
 8010c36:	2b01      	cmp	r3, #1
 8010c38:	d836      	bhi.n	8010ca8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8010c3a:	683b      	ldr	r3, [r7, #0]
 8010c3c:	889b      	ldrh	r3, [r3, #4]
 8010c3e:	b2db      	uxtb	r3, r3
 8010c40:	4619      	mov	r1, r3
 8010c42:	6878      	ldr	r0, [r7, #4]
 8010c44:	f7ff fedb 	bl	80109fe <USBD_CoreFindIF>
 8010c48:	4603      	mov	r3, r0
 8010c4a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010c4c:	7bbb      	ldrb	r3, [r7, #14]
 8010c4e:	2bff      	cmp	r3, #255	@ 0xff
 8010c50:	d01d      	beq.n	8010c8e <USBD_StdItfReq+0x92>
 8010c52:	7bbb      	ldrb	r3, [r7, #14]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d11a      	bne.n	8010c8e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8010c58:	7bba      	ldrb	r2, [r7, #14]
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	32ae      	adds	r2, #174	@ 0xae
 8010c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c62:	689b      	ldr	r3, [r3, #8]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d00f      	beq.n	8010c88 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8010c68:	7bba      	ldrb	r2, [r7, #14]
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010c70:	7bba      	ldrb	r2, [r7, #14]
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	32ae      	adds	r2, #174	@ 0xae
 8010c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c7a:	689b      	ldr	r3, [r3, #8]
 8010c7c:	6839      	ldr	r1, [r7, #0]
 8010c7e:	6878      	ldr	r0, [r7, #4]
 8010c80:	4798      	blx	r3
 8010c82:	4603      	mov	r3, r0
 8010c84:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010c86:	e004      	b.n	8010c92 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8010c88:	2303      	movs	r3, #3
 8010c8a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010c8c:	e001      	b.n	8010c92 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8010c8e:	2303      	movs	r3, #3
 8010c90:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010c92:	683b      	ldr	r3, [r7, #0]
 8010c94:	88db      	ldrh	r3, [r3, #6]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d110      	bne.n	8010cbc <USBD_StdItfReq+0xc0>
 8010c9a:	7bfb      	ldrb	r3, [r7, #15]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d10d      	bne.n	8010cbc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8010ca0:	6878      	ldr	r0, [r7, #4]
 8010ca2:	f000 fdfd 	bl	80118a0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010ca6:	e009      	b.n	8010cbc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8010ca8:	6839      	ldr	r1, [r7, #0]
 8010caa:	6878      	ldr	r0, [r7, #4]
 8010cac:	f000 fd21 	bl	80116f2 <USBD_CtlError>
          break;
 8010cb0:	e004      	b.n	8010cbc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8010cb2:	6839      	ldr	r1, [r7, #0]
 8010cb4:	6878      	ldr	r0, [r7, #4]
 8010cb6:	f000 fd1c 	bl	80116f2 <USBD_CtlError>
          break;
 8010cba:	e000      	b.n	8010cbe <USBD_StdItfReq+0xc2>
          break;
 8010cbc:	bf00      	nop
      }
      break;
 8010cbe:	e004      	b.n	8010cca <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8010cc0:	6839      	ldr	r1, [r7, #0]
 8010cc2:	6878      	ldr	r0, [r7, #4]
 8010cc4:	f000 fd15 	bl	80116f2 <USBD_CtlError>
      break;
 8010cc8:	bf00      	nop
  }

  return ret;
 8010cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ccc:	4618      	mov	r0, r3
 8010cce:	3710      	adds	r7, #16
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	bd80      	pop	{r7, pc}

08010cd4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	b084      	sub	sp, #16
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	6078      	str	r0, [r7, #4]
 8010cdc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8010cde:	2300      	movs	r3, #0
 8010ce0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8010ce2:	683b      	ldr	r3, [r7, #0]
 8010ce4:	889b      	ldrh	r3, [r3, #4]
 8010ce6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010ce8:	683b      	ldr	r3, [r7, #0]
 8010cea:	781b      	ldrb	r3, [r3, #0]
 8010cec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010cf0:	2b40      	cmp	r3, #64	@ 0x40
 8010cf2:	d007      	beq.n	8010d04 <USBD_StdEPReq+0x30>
 8010cf4:	2b40      	cmp	r3, #64	@ 0x40
 8010cf6:	f200 817f 	bhi.w	8010ff8 <USBD_StdEPReq+0x324>
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d02a      	beq.n	8010d54 <USBD_StdEPReq+0x80>
 8010cfe:	2b20      	cmp	r3, #32
 8010d00:	f040 817a 	bne.w	8010ff8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8010d04:	7bbb      	ldrb	r3, [r7, #14]
 8010d06:	4619      	mov	r1, r3
 8010d08:	6878      	ldr	r0, [r7, #4]
 8010d0a:	f7ff fe85 	bl	8010a18 <USBD_CoreFindEP>
 8010d0e:	4603      	mov	r3, r0
 8010d10:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010d12:	7b7b      	ldrb	r3, [r7, #13]
 8010d14:	2bff      	cmp	r3, #255	@ 0xff
 8010d16:	f000 8174 	beq.w	8011002 <USBD_StdEPReq+0x32e>
 8010d1a:	7b7b      	ldrb	r3, [r7, #13]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	f040 8170 	bne.w	8011002 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8010d22:	7b7a      	ldrb	r2, [r7, #13]
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8010d2a:	7b7a      	ldrb	r2, [r7, #13]
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	32ae      	adds	r2, #174	@ 0xae
 8010d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d34:	689b      	ldr	r3, [r3, #8]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	f000 8163 	beq.w	8011002 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8010d3c:	7b7a      	ldrb	r2, [r7, #13]
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	32ae      	adds	r2, #174	@ 0xae
 8010d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d46:	689b      	ldr	r3, [r3, #8]
 8010d48:	6839      	ldr	r1, [r7, #0]
 8010d4a:	6878      	ldr	r0, [r7, #4]
 8010d4c:	4798      	blx	r3
 8010d4e:	4603      	mov	r3, r0
 8010d50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8010d52:	e156      	b.n	8011002 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010d54:	683b      	ldr	r3, [r7, #0]
 8010d56:	785b      	ldrb	r3, [r3, #1]
 8010d58:	2b03      	cmp	r3, #3
 8010d5a:	d008      	beq.n	8010d6e <USBD_StdEPReq+0x9a>
 8010d5c:	2b03      	cmp	r3, #3
 8010d5e:	f300 8145 	bgt.w	8010fec <USBD_StdEPReq+0x318>
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	f000 809b 	beq.w	8010e9e <USBD_StdEPReq+0x1ca>
 8010d68:	2b01      	cmp	r3, #1
 8010d6a:	d03c      	beq.n	8010de6 <USBD_StdEPReq+0x112>
 8010d6c:	e13e      	b.n	8010fec <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010d74:	b2db      	uxtb	r3, r3
 8010d76:	2b02      	cmp	r3, #2
 8010d78:	d002      	beq.n	8010d80 <USBD_StdEPReq+0xac>
 8010d7a:	2b03      	cmp	r3, #3
 8010d7c:	d016      	beq.n	8010dac <USBD_StdEPReq+0xd8>
 8010d7e:	e02c      	b.n	8010dda <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010d80:	7bbb      	ldrb	r3, [r7, #14]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d00d      	beq.n	8010da2 <USBD_StdEPReq+0xce>
 8010d86:	7bbb      	ldrb	r3, [r7, #14]
 8010d88:	2b80      	cmp	r3, #128	@ 0x80
 8010d8a:	d00a      	beq.n	8010da2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010d8c:	7bbb      	ldrb	r3, [r7, #14]
 8010d8e:	4619      	mov	r1, r3
 8010d90:	6878      	ldr	r0, [r7, #4]
 8010d92:	f001 f9d9 	bl	8012148 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010d96:	2180      	movs	r1, #128	@ 0x80
 8010d98:	6878      	ldr	r0, [r7, #4]
 8010d9a:	f001 f9d5 	bl	8012148 <USBD_LL_StallEP>
 8010d9e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010da0:	e020      	b.n	8010de4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8010da2:	6839      	ldr	r1, [r7, #0]
 8010da4:	6878      	ldr	r0, [r7, #4]
 8010da6:	f000 fca4 	bl	80116f2 <USBD_CtlError>
              break;
 8010daa:	e01b      	b.n	8010de4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010dac:	683b      	ldr	r3, [r7, #0]
 8010dae:	885b      	ldrh	r3, [r3, #2]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d10e      	bne.n	8010dd2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010db4:	7bbb      	ldrb	r3, [r7, #14]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d00b      	beq.n	8010dd2 <USBD_StdEPReq+0xfe>
 8010dba:	7bbb      	ldrb	r3, [r7, #14]
 8010dbc:	2b80      	cmp	r3, #128	@ 0x80
 8010dbe:	d008      	beq.n	8010dd2 <USBD_StdEPReq+0xfe>
 8010dc0:	683b      	ldr	r3, [r7, #0]
 8010dc2:	88db      	ldrh	r3, [r3, #6]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d104      	bne.n	8010dd2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010dc8:	7bbb      	ldrb	r3, [r7, #14]
 8010dca:	4619      	mov	r1, r3
 8010dcc:	6878      	ldr	r0, [r7, #4]
 8010dce:	f001 f9bb 	bl	8012148 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8010dd2:	6878      	ldr	r0, [r7, #4]
 8010dd4:	f000 fd64 	bl	80118a0 <USBD_CtlSendStatus>

              break;
 8010dd8:	e004      	b.n	8010de4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8010dda:	6839      	ldr	r1, [r7, #0]
 8010ddc:	6878      	ldr	r0, [r7, #4]
 8010dde:	f000 fc88 	bl	80116f2 <USBD_CtlError>
              break;
 8010de2:	bf00      	nop
          }
          break;
 8010de4:	e107      	b.n	8010ff6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010dec:	b2db      	uxtb	r3, r3
 8010dee:	2b02      	cmp	r3, #2
 8010df0:	d002      	beq.n	8010df8 <USBD_StdEPReq+0x124>
 8010df2:	2b03      	cmp	r3, #3
 8010df4:	d016      	beq.n	8010e24 <USBD_StdEPReq+0x150>
 8010df6:	e04b      	b.n	8010e90 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010df8:	7bbb      	ldrb	r3, [r7, #14]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d00d      	beq.n	8010e1a <USBD_StdEPReq+0x146>
 8010dfe:	7bbb      	ldrb	r3, [r7, #14]
 8010e00:	2b80      	cmp	r3, #128	@ 0x80
 8010e02:	d00a      	beq.n	8010e1a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010e04:	7bbb      	ldrb	r3, [r7, #14]
 8010e06:	4619      	mov	r1, r3
 8010e08:	6878      	ldr	r0, [r7, #4]
 8010e0a:	f001 f99d 	bl	8012148 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010e0e:	2180      	movs	r1, #128	@ 0x80
 8010e10:	6878      	ldr	r0, [r7, #4]
 8010e12:	f001 f999 	bl	8012148 <USBD_LL_StallEP>
 8010e16:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010e18:	e040      	b.n	8010e9c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8010e1a:	6839      	ldr	r1, [r7, #0]
 8010e1c:	6878      	ldr	r0, [r7, #4]
 8010e1e:	f000 fc68 	bl	80116f2 <USBD_CtlError>
              break;
 8010e22:	e03b      	b.n	8010e9c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010e24:	683b      	ldr	r3, [r7, #0]
 8010e26:	885b      	ldrh	r3, [r3, #2]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d136      	bne.n	8010e9a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010e2c:	7bbb      	ldrb	r3, [r7, #14]
 8010e2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d004      	beq.n	8010e40 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010e36:	7bbb      	ldrb	r3, [r7, #14]
 8010e38:	4619      	mov	r1, r3
 8010e3a:	6878      	ldr	r0, [r7, #4]
 8010e3c:	f001 f9a3 	bl	8012186 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8010e40:	6878      	ldr	r0, [r7, #4]
 8010e42:	f000 fd2d 	bl	80118a0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8010e46:	7bbb      	ldrb	r3, [r7, #14]
 8010e48:	4619      	mov	r1, r3
 8010e4a:	6878      	ldr	r0, [r7, #4]
 8010e4c:	f7ff fde4 	bl	8010a18 <USBD_CoreFindEP>
 8010e50:	4603      	mov	r3, r0
 8010e52:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010e54:	7b7b      	ldrb	r3, [r7, #13]
 8010e56:	2bff      	cmp	r3, #255	@ 0xff
 8010e58:	d01f      	beq.n	8010e9a <USBD_StdEPReq+0x1c6>
 8010e5a:	7b7b      	ldrb	r3, [r7, #13]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d11c      	bne.n	8010e9a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8010e60:	7b7a      	ldrb	r2, [r7, #13]
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8010e68:	7b7a      	ldrb	r2, [r7, #13]
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	32ae      	adds	r2, #174	@ 0xae
 8010e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e72:	689b      	ldr	r3, [r3, #8]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d010      	beq.n	8010e9a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010e78:	7b7a      	ldrb	r2, [r7, #13]
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	32ae      	adds	r2, #174	@ 0xae
 8010e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e82:	689b      	ldr	r3, [r3, #8]
 8010e84:	6839      	ldr	r1, [r7, #0]
 8010e86:	6878      	ldr	r0, [r7, #4]
 8010e88:	4798      	blx	r3
 8010e8a:	4603      	mov	r3, r0
 8010e8c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8010e8e:	e004      	b.n	8010e9a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8010e90:	6839      	ldr	r1, [r7, #0]
 8010e92:	6878      	ldr	r0, [r7, #4]
 8010e94:	f000 fc2d 	bl	80116f2 <USBD_CtlError>
              break;
 8010e98:	e000      	b.n	8010e9c <USBD_StdEPReq+0x1c8>
              break;
 8010e9a:	bf00      	nop
          }
          break;
 8010e9c:	e0ab      	b.n	8010ff6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010ea4:	b2db      	uxtb	r3, r3
 8010ea6:	2b02      	cmp	r3, #2
 8010ea8:	d002      	beq.n	8010eb0 <USBD_StdEPReq+0x1dc>
 8010eaa:	2b03      	cmp	r3, #3
 8010eac:	d032      	beq.n	8010f14 <USBD_StdEPReq+0x240>
 8010eae:	e097      	b.n	8010fe0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010eb0:	7bbb      	ldrb	r3, [r7, #14]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d007      	beq.n	8010ec6 <USBD_StdEPReq+0x1f2>
 8010eb6:	7bbb      	ldrb	r3, [r7, #14]
 8010eb8:	2b80      	cmp	r3, #128	@ 0x80
 8010eba:	d004      	beq.n	8010ec6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8010ebc:	6839      	ldr	r1, [r7, #0]
 8010ebe:	6878      	ldr	r0, [r7, #4]
 8010ec0:	f000 fc17 	bl	80116f2 <USBD_CtlError>
                break;
 8010ec4:	e091      	b.n	8010fea <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010ec6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	da0b      	bge.n	8010ee6 <USBD_StdEPReq+0x212>
 8010ece:	7bbb      	ldrb	r3, [r7, #14]
 8010ed0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010ed4:	4613      	mov	r3, r2
 8010ed6:	009b      	lsls	r3, r3, #2
 8010ed8:	4413      	add	r3, r2
 8010eda:	009b      	lsls	r3, r3, #2
 8010edc:	3310      	adds	r3, #16
 8010ede:	687a      	ldr	r2, [r7, #4]
 8010ee0:	4413      	add	r3, r2
 8010ee2:	3304      	adds	r3, #4
 8010ee4:	e00b      	b.n	8010efe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010ee6:	7bbb      	ldrb	r3, [r7, #14]
 8010ee8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010eec:	4613      	mov	r3, r2
 8010eee:	009b      	lsls	r3, r3, #2
 8010ef0:	4413      	add	r3, r2
 8010ef2:	009b      	lsls	r3, r3, #2
 8010ef4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010ef8:	687a      	ldr	r2, [r7, #4]
 8010efa:	4413      	add	r3, r2
 8010efc:	3304      	adds	r3, #4
 8010efe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010f00:	68bb      	ldr	r3, [r7, #8]
 8010f02:	2200      	movs	r2, #0
 8010f04:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010f06:	68bb      	ldr	r3, [r7, #8]
 8010f08:	2202      	movs	r2, #2
 8010f0a:	4619      	mov	r1, r3
 8010f0c:	6878      	ldr	r0, [r7, #4]
 8010f0e:	f000 fc6d 	bl	80117ec <USBD_CtlSendData>
              break;
 8010f12:	e06a      	b.n	8010fea <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010f14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	da11      	bge.n	8010f40 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010f1c:	7bbb      	ldrb	r3, [r7, #14]
 8010f1e:	f003 020f 	and.w	r2, r3, #15
 8010f22:	6879      	ldr	r1, [r7, #4]
 8010f24:	4613      	mov	r3, r2
 8010f26:	009b      	lsls	r3, r3, #2
 8010f28:	4413      	add	r3, r2
 8010f2a:	009b      	lsls	r3, r3, #2
 8010f2c:	440b      	add	r3, r1
 8010f2e:	3324      	adds	r3, #36	@ 0x24
 8010f30:	881b      	ldrh	r3, [r3, #0]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d117      	bne.n	8010f66 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010f36:	6839      	ldr	r1, [r7, #0]
 8010f38:	6878      	ldr	r0, [r7, #4]
 8010f3a:	f000 fbda 	bl	80116f2 <USBD_CtlError>
                  break;
 8010f3e:	e054      	b.n	8010fea <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010f40:	7bbb      	ldrb	r3, [r7, #14]
 8010f42:	f003 020f 	and.w	r2, r3, #15
 8010f46:	6879      	ldr	r1, [r7, #4]
 8010f48:	4613      	mov	r3, r2
 8010f4a:	009b      	lsls	r3, r3, #2
 8010f4c:	4413      	add	r3, r2
 8010f4e:	009b      	lsls	r3, r3, #2
 8010f50:	440b      	add	r3, r1
 8010f52:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010f56:	881b      	ldrh	r3, [r3, #0]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d104      	bne.n	8010f66 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010f5c:	6839      	ldr	r1, [r7, #0]
 8010f5e:	6878      	ldr	r0, [r7, #4]
 8010f60:	f000 fbc7 	bl	80116f2 <USBD_CtlError>
                  break;
 8010f64:	e041      	b.n	8010fea <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010f66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	da0b      	bge.n	8010f86 <USBD_StdEPReq+0x2b2>
 8010f6e:	7bbb      	ldrb	r3, [r7, #14]
 8010f70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010f74:	4613      	mov	r3, r2
 8010f76:	009b      	lsls	r3, r3, #2
 8010f78:	4413      	add	r3, r2
 8010f7a:	009b      	lsls	r3, r3, #2
 8010f7c:	3310      	adds	r3, #16
 8010f7e:	687a      	ldr	r2, [r7, #4]
 8010f80:	4413      	add	r3, r2
 8010f82:	3304      	adds	r3, #4
 8010f84:	e00b      	b.n	8010f9e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010f86:	7bbb      	ldrb	r3, [r7, #14]
 8010f88:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010f8c:	4613      	mov	r3, r2
 8010f8e:	009b      	lsls	r3, r3, #2
 8010f90:	4413      	add	r3, r2
 8010f92:	009b      	lsls	r3, r3, #2
 8010f94:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010f98:	687a      	ldr	r2, [r7, #4]
 8010f9a:	4413      	add	r3, r2
 8010f9c:	3304      	adds	r3, #4
 8010f9e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010fa0:	7bbb      	ldrb	r3, [r7, #14]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d002      	beq.n	8010fac <USBD_StdEPReq+0x2d8>
 8010fa6:	7bbb      	ldrb	r3, [r7, #14]
 8010fa8:	2b80      	cmp	r3, #128	@ 0x80
 8010faa:	d103      	bne.n	8010fb4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8010fac:	68bb      	ldr	r3, [r7, #8]
 8010fae:	2200      	movs	r2, #0
 8010fb0:	601a      	str	r2, [r3, #0]
 8010fb2:	e00e      	b.n	8010fd2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010fb4:	7bbb      	ldrb	r3, [r7, #14]
 8010fb6:	4619      	mov	r1, r3
 8010fb8:	6878      	ldr	r0, [r7, #4]
 8010fba:	f001 f903 	bl	80121c4 <USBD_LL_IsStallEP>
 8010fbe:	4603      	mov	r3, r0
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d003      	beq.n	8010fcc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8010fc4:	68bb      	ldr	r3, [r7, #8]
 8010fc6:	2201      	movs	r2, #1
 8010fc8:	601a      	str	r2, [r3, #0]
 8010fca:	e002      	b.n	8010fd2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8010fcc:	68bb      	ldr	r3, [r7, #8]
 8010fce:	2200      	movs	r2, #0
 8010fd0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010fd2:	68bb      	ldr	r3, [r7, #8]
 8010fd4:	2202      	movs	r2, #2
 8010fd6:	4619      	mov	r1, r3
 8010fd8:	6878      	ldr	r0, [r7, #4]
 8010fda:	f000 fc07 	bl	80117ec <USBD_CtlSendData>
              break;
 8010fde:	e004      	b.n	8010fea <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8010fe0:	6839      	ldr	r1, [r7, #0]
 8010fe2:	6878      	ldr	r0, [r7, #4]
 8010fe4:	f000 fb85 	bl	80116f2 <USBD_CtlError>
              break;
 8010fe8:	bf00      	nop
          }
          break;
 8010fea:	e004      	b.n	8010ff6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8010fec:	6839      	ldr	r1, [r7, #0]
 8010fee:	6878      	ldr	r0, [r7, #4]
 8010ff0:	f000 fb7f 	bl	80116f2 <USBD_CtlError>
          break;
 8010ff4:	bf00      	nop
      }
      break;
 8010ff6:	e005      	b.n	8011004 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8010ff8:	6839      	ldr	r1, [r7, #0]
 8010ffa:	6878      	ldr	r0, [r7, #4]
 8010ffc:	f000 fb79 	bl	80116f2 <USBD_CtlError>
      break;
 8011000:	e000      	b.n	8011004 <USBD_StdEPReq+0x330>
      break;
 8011002:	bf00      	nop
  }

  return ret;
 8011004:	7bfb      	ldrb	r3, [r7, #15]
}
 8011006:	4618      	mov	r0, r3
 8011008:	3710      	adds	r7, #16
 801100a:	46bd      	mov	sp, r7
 801100c:	bd80      	pop	{r7, pc}
	...

08011010 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011010:	b580      	push	{r7, lr}
 8011012:	b084      	sub	sp, #16
 8011014:	af00      	add	r7, sp, #0
 8011016:	6078      	str	r0, [r7, #4]
 8011018:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801101a:	2300      	movs	r3, #0
 801101c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801101e:	2300      	movs	r3, #0
 8011020:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011022:	2300      	movs	r3, #0
 8011024:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011026:	683b      	ldr	r3, [r7, #0]
 8011028:	885b      	ldrh	r3, [r3, #2]
 801102a:	0a1b      	lsrs	r3, r3, #8
 801102c:	b29b      	uxth	r3, r3
 801102e:	3b01      	subs	r3, #1
 8011030:	2b0e      	cmp	r3, #14
 8011032:	f200 8152 	bhi.w	80112da <USBD_GetDescriptor+0x2ca>
 8011036:	a201      	add	r2, pc, #4	@ (adr r2, 801103c <USBD_GetDescriptor+0x2c>)
 8011038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801103c:	080110ad 	.word	0x080110ad
 8011040:	080110c5 	.word	0x080110c5
 8011044:	08011105 	.word	0x08011105
 8011048:	080112db 	.word	0x080112db
 801104c:	080112db 	.word	0x080112db
 8011050:	0801127b 	.word	0x0801127b
 8011054:	080112a7 	.word	0x080112a7
 8011058:	080112db 	.word	0x080112db
 801105c:	080112db 	.word	0x080112db
 8011060:	080112db 	.word	0x080112db
 8011064:	080112db 	.word	0x080112db
 8011068:	080112db 	.word	0x080112db
 801106c:	080112db 	.word	0x080112db
 8011070:	080112db 	.word	0x080112db
 8011074:	08011079 	.word	0x08011079
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801107e:	69db      	ldr	r3, [r3, #28]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d00b      	beq.n	801109c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801108a:	69db      	ldr	r3, [r3, #28]
 801108c:	687a      	ldr	r2, [r7, #4]
 801108e:	7c12      	ldrb	r2, [r2, #16]
 8011090:	f107 0108 	add.w	r1, r7, #8
 8011094:	4610      	mov	r0, r2
 8011096:	4798      	blx	r3
 8011098:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801109a:	e126      	b.n	80112ea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801109c:	6839      	ldr	r1, [r7, #0]
 801109e:	6878      	ldr	r0, [r7, #4]
 80110a0:	f000 fb27 	bl	80116f2 <USBD_CtlError>
        err++;
 80110a4:	7afb      	ldrb	r3, [r7, #11]
 80110a6:	3301      	adds	r3, #1
 80110a8:	72fb      	strb	r3, [r7, #11]
      break;
 80110aa:	e11e      	b.n	80112ea <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	687a      	ldr	r2, [r7, #4]
 80110b6:	7c12      	ldrb	r2, [r2, #16]
 80110b8:	f107 0108 	add.w	r1, r7, #8
 80110bc:	4610      	mov	r0, r2
 80110be:	4798      	blx	r3
 80110c0:	60f8      	str	r0, [r7, #12]
      break;
 80110c2:	e112      	b.n	80112ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	7c1b      	ldrb	r3, [r3, #16]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d10d      	bne.n	80110e8 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80110d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80110d4:	f107 0208 	add.w	r2, r7, #8
 80110d8:	4610      	mov	r0, r2
 80110da:	4798      	blx	r3
 80110dc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	3301      	adds	r3, #1
 80110e2:	2202      	movs	r2, #2
 80110e4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80110e6:	e100      	b.n	80112ea <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80110ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110f0:	f107 0208 	add.w	r2, r7, #8
 80110f4:	4610      	mov	r0, r2
 80110f6:	4798      	blx	r3
 80110f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	3301      	adds	r3, #1
 80110fe:	2202      	movs	r2, #2
 8011100:	701a      	strb	r2, [r3, #0]
      break;
 8011102:	e0f2      	b.n	80112ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011104:	683b      	ldr	r3, [r7, #0]
 8011106:	885b      	ldrh	r3, [r3, #2]
 8011108:	b2db      	uxtb	r3, r3
 801110a:	2b05      	cmp	r3, #5
 801110c:	f200 80ac 	bhi.w	8011268 <USBD_GetDescriptor+0x258>
 8011110:	a201      	add	r2, pc, #4	@ (adr r2, 8011118 <USBD_GetDescriptor+0x108>)
 8011112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011116:	bf00      	nop
 8011118:	08011131 	.word	0x08011131
 801111c:	08011165 	.word	0x08011165
 8011120:	08011199 	.word	0x08011199
 8011124:	080111cd 	.word	0x080111cd
 8011128:	08011201 	.word	0x08011201
 801112c:	08011235 	.word	0x08011235
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011136:	685b      	ldr	r3, [r3, #4]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d00b      	beq.n	8011154 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011142:	685b      	ldr	r3, [r3, #4]
 8011144:	687a      	ldr	r2, [r7, #4]
 8011146:	7c12      	ldrb	r2, [r2, #16]
 8011148:	f107 0108 	add.w	r1, r7, #8
 801114c:	4610      	mov	r0, r2
 801114e:	4798      	blx	r3
 8011150:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011152:	e091      	b.n	8011278 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011154:	6839      	ldr	r1, [r7, #0]
 8011156:	6878      	ldr	r0, [r7, #4]
 8011158:	f000 facb 	bl	80116f2 <USBD_CtlError>
            err++;
 801115c:	7afb      	ldrb	r3, [r7, #11]
 801115e:	3301      	adds	r3, #1
 8011160:	72fb      	strb	r3, [r7, #11]
          break;
 8011162:	e089      	b.n	8011278 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801116a:	689b      	ldr	r3, [r3, #8]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d00b      	beq.n	8011188 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011176:	689b      	ldr	r3, [r3, #8]
 8011178:	687a      	ldr	r2, [r7, #4]
 801117a:	7c12      	ldrb	r2, [r2, #16]
 801117c:	f107 0108 	add.w	r1, r7, #8
 8011180:	4610      	mov	r0, r2
 8011182:	4798      	blx	r3
 8011184:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011186:	e077      	b.n	8011278 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011188:	6839      	ldr	r1, [r7, #0]
 801118a:	6878      	ldr	r0, [r7, #4]
 801118c:	f000 fab1 	bl	80116f2 <USBD_CtlError>
            err++;
 8011190:	7afb      	ldrb	r3, [r7, #11]
 8011192:	3301      	adds	r3, #1
 8011194:	72fb      	strb	r3, [r7, #11]
          break;
 8011196:	e06f      	b.n	8011278 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801119e:	68db      	ldr	r3, [r3, #12]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d00b      	beq.n	80111bc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80111aa:	68db      	ldr	r3, [r3, #12]
 80111ac:	687a      	ldr	r2, [r7, #4]
 80111ae:	7c12      	ldrb	r2, [r2, #16]
 80111b0:	f107 0108 	add.w	r1, r7, #8
 80111b4:	4610      	mov	r0, r2
 80111b6:	4798      	blx	r3
 80111b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80111ba:	e05d      	b.n	8011278 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80111bc:	6839      	ldr	r1, [r7, #0]
 80111be:	6878      	ldr	r0, [r7, #4]
 80111c0:	f000 fa97 	bl	80116f2 <USBD_CtlError>
            err++;
 80111c4:	7afb      	ldrb	r3, [r7, #11]
 80111c6:	3301      	adds	r3, #1
 80111c8:	72fb      	strb	r3, [r7, #11]
          break;
 80111ca:	e055      	b.n	8011278 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80111d2:	691b      	ldr	r3, [r3, #16]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d00b      	beq.n	80111f0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80111de:	691b      	ldr	r3, [r3, #16]
 80111e0:	687a      	ldr	r2, [r7, #4]
 80111e2:	7c12      	ldrb	r2, [r2, #16]
 80111e4:	f107 0108 	add.w	r1, r7, #8
 80111e8:	4610      	mov	r0, r2
 80111ea:	4798      	blx	r3
 80111ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80111ee:	e043      	b.n	8011278 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80111f0:	6839      	ldr	r1, [r7, #0]
 80111f2:	6878      	ldr	r0, [r7, #4]
 80111f4:	f000 fa7d 	bl	80116f2 <USBD_CtlError>
            err++;
 80111f8:	7afb      	ldrb	r3, [r7, #11]
 80111fa:	3301      	adds	r3, #1
 80111fc:	72fb      	strb	r3, [r7, #11]
          break;
 80111fe:	e03b      	b.n	8011278 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011206:	695b      	ldr	r3, [r3, #20]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d00b      	beq.n	8011224 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011212:	695b      	ldr	r3, [r3, #20]
 8011214:	687a      	ldr	r2, [r7, #4]
 8011216:	7c12      	ldrb	r2, [r2, #16]
 8011218:	f107 0108 	add.w	r1, r7, #8
 801121c:	4610      	mov	r0, r2
 801121e:	4798      	blx	r3
 8011220:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011222:	e029      	b.n	8011278 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011224:	6839      	ldr	r1, [r7, #0]
 8011226:	6878      	ldr	r0, [r7, #4]
 8011228:	f000 fa63 	bl	80116f2 <USBD_CtlError>
            err++;
 801122c:	7afb      	ldrb	r3, [r7, #11]
 801122e:	3301      	adds	r3, #1
 8011230:	72fb      	strb	r3, [r7, #11]
          break;
 8011232:	e021      	b.n	8011278 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801123a:	699b      	ldr	r3, [r3, #24]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d00b      	beq.n	8011258 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011246:	699b      	ldr	r3, [r3, #24]
 8011248:	687a      	ldr	r2, [r7, #4]
 801124a:	7c12      	ldrb	r2, [r2, #16]
 801124c:	f107 0108 	add.w	r1, r7, #8
 8011250:	4610      	mov	r0, r2
 8011252:	4798      	blx	r3
 8011254:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011256:	e00f      	b.n	8011278 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011258:	6839      	ldr	r1, [r7, #0]
 801125a:	6878      	ldr	r0, [r7, #4]
 801125c:	f000 fa49 	bl	80116f2 <USBD_CtlError>
            err++;
 8011260:	7afb      	ldrb	r3, [r7, #11]
 8011262:	3301      	adds	r3, #1
 8011264:	72fb      	strb	r3, [r7, #11]
          break;
 8011266:	e007      	b.n	8011278 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8011268:	6839      	ldr	r1, [r7, #0]
 801126a:	6878      	ldr	r0, [r7, #4]
 801126c:	f000 fa41 	bl	80116f2 <USBD_CtlError>
          err++;
 8011270:	7afb      	ldrb	r3, [r7, #11]
 8011272:	3301      	adds	r3, #1
 8011274:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8011276:	bf00      	nop
      }
      break;
 8011278:	e037      	b.n	80112ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	7c1b      	ldrb	r3, [r3, #16]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d109      	bne.n	8011296 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011288:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801128a:	f107 0208 	add.w	r2, r7, #8
 801128e:	4610      	mov	r0, r2
 8011290:	4798      	blx	r3
 8011292:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011294:	e029      	b.n	80112ea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011296:	6839      	ldr	r1, [r7, #0]
 8011298:	6878      	ldr	r0, [r7, #4]
 801129a:	f000 fa2a 	bl	80116f2 <USBD_CtlError>
        err++;
 801129e:	7afb      	ldrb	r3, [r7, #11]
 80112a0:	3301      	adds	r3, #1
 80112a2:	72fb      	strb	r3, [r7, #11]
      break;
 80112a4:	e021      	b.n	80112ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	7c1b      	ldrb	r3, [r3, #16]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d10d      	bne.n	80112ca <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80112b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80112b6:	f107 0208 	add.w	r2, r7, #8
 80112ba:	4610      	mov	r0, r2
 80112bc:	4798      	blx	r3
 80112be:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	3301      	adds	r3, #1
 80112c4:	2207      	movs	r2, #7
 80112c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80112c8:	e00f      	b.n	80112ea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80112ca:	6839      	ldr	r1, [r7, #0]
 80112cc:	6878      	ldr	r0, [r7, #4]
 80112ce:	f000 fa10 	bl	80116f2 <USBD_CtlError>
        err++;
 80112d2:	7afb      	ldrb	r3, [r7, #11]
 80112d4:	3301      	adds	r3, #1
 80112d6:	72fb      	strb	r3, [r7, #11]
      break;
 80112d8:	e007      	b.n	80112ea <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80112da:	6839      	ldr	r1, [r7, #0]
 80112dc:	6878      	ldr	r0, [r7, #4]
 80112de:	f000 fa08 	bl	80116f2 <USBD_CtlError>
      err++;
 80112e2:	7afb      	ldrb	r3, [r7, #11]
 80112e4:	3301      	adds	r3, #1
 80112e6:	72fb      	strb	r3, [r7, #11]
      break;
 80112e8:	bf00      	nop
  }

  if (err != 0U)
 80112ea:	7afb      	ldrb	r3, [r7, #11]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d11e      	bne.n	801132e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80112f0:	683b      	ldr	r3, [r7, #0]
 80112f2:	88db      	ldrh	r3, [r3, #6]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d016      	beq.n	8011326 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80112f8:	893b      	ldrh	r3, [r7, #8]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d00e      	beq.n	801131c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80112fe:	683b      	ldr	r3, [r7, #0]
 8011300:	88da      	ldrh	r2, [r3, #6]
 8011302:	893b      	ldrh	r3, [r7, #8]
 8011304:	4293      	cmp	r3, r2
 8011306:	bf28      	it	cs
 8011308:	4613      	movcs	r3, r2
 801130a:	b29b      	uxth	r3, r3
 801130c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801130e:	893b      	ldrh	r3, [r7, #8]
 8011310:	461a      	mov	r2, r3
 8011312:	68f9      	ldr	r1, [r7, #12]
 8011314:	6878      	ldr	r0, [r7, #4]
 8011316:	f000 fa69 	bl	80117ec <USBD_CtlSendData>
 801131a:	e009      	b.n	8011330 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801131c:	6839      	ldr	r1, [r7, #0]
 801131e:	6878      	ldr	r0, [r7, #4]
 8011320:	f000 f9e7 	bl	80116f2 <USBD_CtlError>
 8011324:	e004      	b.n	8011330 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8011326:	6878      	ldr	r0, [r7, #4]
 8011328:	f000 faba 	bl	80118a0 <USBD_CtlSendStatus>
 801132c:	e000      	b.n	8011330 <USBD_GetDescriptor+0x320>
    return;
 801132e:	bf00      	nop
  }
}
 8011330:	3710      	adds	r7, #16
 8011332:	46bd      	mov	sp, r7
 8011334:	bd80      	pop	{r7, pc}
 8011336:	bf00      	nop

08011338 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011338:	b580      	push	{r7, lr}
 801133a:	b084      	sub	sp, #16
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
 8011340:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011342:	683b      	ldr	r3, [r7, #0]
 8011344:	889b      	ldrh	r3, [r3, #4]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d131      	bne.n	80113ae <USBD_SetAddress+0x76>
 801134a:	683b      	ldr	r3, [r7, #0]
 801134c:	88db      	ldrh	r3, [r3, #6]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d12d      	bne.n	80113ae <USBD_SetAddress+0x76>
 8011352:	683b      	ldr	r3, [r7, #0]
 8011354:	885b      	ldrh	r3, [r3, #2]
 8011356:	2b7f      	cmp	r3, #127	@ 0x7f
 8011358:	d829      	bhi.n	80113ae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801135a:	683b      	ldr	r3, [r7, #0]
 801135c:	885b      	ldrh	r3, [r3, #2]
 801135e:	b2db      	uxtb	r3, r3
 8011360:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011364:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801136c:	b2db      	uxtb	r3, r3
 801136e:	2b03      	cmp	r3, #3
 8011370:	d104      	bne.n	801137c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8011372:	6839      	ldr	r1, [r7, #0]
 8011374:	6878      	ldr	r0, [r7, #4]
 8011376:	f000 f9bc 	bl	80116f2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801137a:	e01d      	b.n	80113b8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	7bfa      	ldrb	r2, [r7, #15]
 8011380:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011384:	7bfb      	ldrb	r3, [r7, #15]
 8011386:	4619      	mov	r1, r3
 8011388:	6878      	ldr	r0, [r7, #4]
 801138a:	f000 ff47 	bl	801221c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801138e:	6878      	ldr	r0, [r7, #4]
 8011390:	f000 fa86 	bl	80118a0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011394:	7bfb      	ldrb	r3, [r7, #15]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d004      	beq.n	80113a4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	2202      	movs	r2, #2
 801139e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80113a2:	e009      	b.n	80113b8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	2201      	movs	r2, #1
 80113a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80113ac:	e004      	b.n	80113b8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80113ae:	6839      	ldr	r1, [r7, #0]
 80113b0:	6878      	ldr	r0, [r7, #4]
 80113b2:	f000 f99e 	bl	80116f2 <USBD_CtlError>
  }
}
 80113b6:	bf00      	nop
 80113b8:	bf00      	nop
 80113ba:	3710      	adds	r7, #16
 80113bc:	46bd      	mov	sp, r7
 80113be:	bd80      	pop	{r7, pc}

080113c0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b084      	sub	sp, #16
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	6078      	str	r0, [r7, #4]
 80113c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80113ca:	2300      	movs	r3, #0
 80113cc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80113ce:	683b      	ldr	r3, [r7, #0]
 80113d0:	885b      	ldrh	r3, [r3, #2]
 80113d2:	b2da      	uxtb	r2, r3
 80113d4:	4b4e      	ldr	r3, [pc, #312]	@ (8011510 <USBD_SetConfig+0x150>)
 80113d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80113d8:	4b4d      	ldr	r3, [pc, #308]	@ (8011510 <USBD_SetConfig+0x150>)
 80113da:	781b      	ldrb	r3, [r3, #0]
 80113dc:	2b01      	cmp	r3, #1
 80113de:	d905      	bls.n	80113ec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80113e0:	6839      	ldr	r1, [r7, #0]
 80113e2:	6878      	ldr	r0, [r7, #4]
 80113e4:	f000 f985 	bl	80116f2 <USBD_CtlError>
    return USBD_FAIL;
 80113e8:	2303      	movs	r3, #3
 80113ea:	e08c      	b.n	8011506 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80113f2:	b2db      	uxtb	r3, r3
 80113f4:	2b02      	cmp	r3, #2
 80113f6:	d002      	beq.n	80113fe <USBD_SetConfig+0x3e>
 80113f8:	2b03      	cmp	r3, #3
 80113fa:	d029      	beq.n	8011450 <USBD_SetConfig+0x90>
 80113fc:	e075      	b.n	80114ea <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80113fe:	4b44      	ldr	r3, [pc, #272]	@ (8011510 <USBD_SetConfig+0x150>)
 8011400:	781b      	ldrb	r3, [r3, #0]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d020      	beq.n	8011448 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8011406:	4b42      	ldr	r3, [pc, #264]	@ (8011510 <USBD_SetConfig+0x150>)
 8011408:	781b      	ldrb	r3, [r3, #0]
 801140a:	461a      	mov	r2, r3
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011410:	4b3f      	ldr	r3, [pc, #252]	@ (8011510 <USBD_SetConfig+0x150>)
 8011412:	781b      	ldrb	r3, [r3, #0]
 8011414:	4619      	mov	r1, r3
 8011416:	6878      	ldr	r0, [r7, #4]
 8011418:	f7fe ffb9 	bl	801038e <USBD_SetClassConfig>
 801141c:	4603      	mov	r3, r0
 801141e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8011420:	7bfb      	ldrb	r3, [r7, #15]
 8011422:	2b00      	cmp	r3, #0
 8011424:	d008      	beq.n	8011438 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8011426:	6839      	ldr	r1, [r7, #0]
 8011428:	6878      	ldr	r0, [r7, #4]
 801142a:	f000 f962 	bl	80116f2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	2202      	movs	r2, #2
 8011432:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011436:	e065      	b.n	8011504 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011438:	6878      	ldr	r0, [r7, #4]
 801143a:	f000 fa31 	bl	80118a0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	2203      	movs	r2, #3
 8011442:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011446:	e05d      	b.n	8011504 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011448:	6878      	ldr	r0, [r7, #4]
 801144a:	f000 fa29 	bl	80118a0 <USBD_CtlSendStatus>
      break;
 801144e:	e059      	b.n	8011504 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011450:	4b2f      	ldr	r3, [pc, #188]	@ (8011510 <USBD_SetConfig+0x150>)
 8011452:	781b      	ldrb	r3, [r3, #0]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d112      	bne.n	801147e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	2202      	movs	r2, #2
 801145c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8011460:	4b2b      	ldr	r3, [pc, #172]	@ (8011510 <USBD_SetConfig+0x150>)
 8011462:	781b      	ldrb	r3, [r3, #0]
 8011464:	461a      	mov	r2, r3
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801146a:	4b29      	ldr	r3, [pc, #164]	@ (8011510 <USBD_SetConfig+0x150>)
 801146c:	781b      	ldrb	r3, [r3, #0]
 801146e:	4619      	mov	r1, r3
 8011470:	6878      	ldr	r0, [r7, #4]
 8011472:	f7fe ffa8 	bl	80103c6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8011476:	6878      	ldr	r0, [r7, #4]
 8011478:	f000 fa12 	bl	80118a0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801147c:	e042      	b.n	8011504 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801147e:	4b24      	ldr	r3, [pc, #144]	@ (8011510 <USBD_SetConfig+0x150>)
 8011480:	781b      	ldrb	r3, [r3, #0]
 8011482:	461a      	mov	r2, r3
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	685b      	ldr	r3, [r3, #4]
 8011488:	429a      	cmp	r2, r3
 801148a:	d02a      	beq.n	80114e2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	685b      	ldr	r3, [r3, #4]
 8011490:	b2db      	uxtb	r3, r3
 8011492:	4619      	mov	r1, r3
 8011494:	6878      	ldr	r0, [r7, #4]
 8011496:	f7fe ff96 	bl	80103c6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801149a:	4b1d      	ldr	r3, [pc, #116]	@ (8011510 <USBD_SetConfig+0x150>)
 801149c:	781b      	ldrb	r3, [r3, #0]
 801149e:	461a      	mov	r2, r3
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80114a4:	4b1a      	ldr	r3, [pc, #104]	@ (8011510 <USBD_SetConfig+0x150>)
 80114a6:	781b      	ldrb	r3, [r3, #0]
 80114a8:	4619      	mov	r1, r3
 80114aa:	6878      	ldr	r0, [r7, #4]
 80114ac:	f7fe ff6f 	bl	801038e <USBD_SetClassConfig>
 80114b0:	4603      	mov	r3, r0
 80114b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80114b4:	7bfb      	ldrb	r3, [r7, #15]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d00f      	beq.n	80114da <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80114ba:	6839      	ldr	r1, [r7, #0]
 80114bc:	6878      	ldr	r0, [r7, #4]
 80114be:	f000 f918 	bl	80116f2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	685b      	ldr	r3, [r3, #4]
 80114c6:	b2db      	uxtb	r3, r3
 80114c8:	4619      	mov	r1, r3
 80114ca:	6878      	ldr	r0, [r7, #4]
 80114cc:	f7fe ff7b 	bl	80103c6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	2202      	movs	r2, #2
 80114d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80114d8:	e014      	b.n	8011504 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80114da:	6878      	ldr	r0, [r7, #4]
 80114dc:	f000 f9e0 	bl	80118a0 <USBD_CtlSendStatus>
      break;
 80114e0:	e010      	b.n	8011504 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80114e2:	6878      	ldr	r0, [r7, #4]
 80114e4:	f000 f9dc 	bl	80118a0 <USBD_CtlSendStatus>
      break;
 80114e8:	e00c      	b.n	8011504 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80114ea:	6839      	ldr	r1, [r7, #0]
 80114ec:	6878      	ldr	r0, [r7, #4]
 80114ee:	f000 f900 	bl	80116f2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80114f2:	4b07      	ldr	r3, [pc, #28]	@ (8011510 <USBD_SetConfig+0x150>)
 80114f4:	781b      	ldrb	r3, [r3, #0]
 80114f6:	4619      	mov	r1, r3
 80114f8:	6878      	ldr	r0, [r7, #4]
 80114fa:	f7fe ff64 	bl	80103c6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80114fe:	2303      	movs	r3, #3
 8011500:	73fb      	strb	r3, [r7, #15]
      break;
 8011502:	bf00      	nop
  }

  return ret;
 8011504:	7bfb      	ldrb	r3, [r7, #15]
}
 8011506:	4618      	mov	r0, r3
 8011508:	3710      	adds	r7, #16
 801150a:	46bd      	mov	sp, r7
 801150c:	bd80      	pop	{r7, pc}
 801150e:	bf00      	nop
 8011510:	24000a30 	.word	0x24000a30

08011514 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011514:	b580      	push	{r7, lr}
 8011516:	b082      	sub	sp, #8
 8011518:	af00      	add	r7, sp, #0
 801151a:	6078      	str	r0, [r7, #4]
 801151c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801151e:	683b      	ldr	r3, [r7, #0]
 8011520:	88db      	ldrh	r3, [r3, #6]
 8011522:	2b01      	cmp	r3, #1
 8011524:	d004      	beq.n	8011530 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011526:	6839      	ldr	r1, [r7, #0]
 8011528:	6878      	ldr	r0, [r7, #4]
 801152a:	f000 f8e2 	bl	80116f2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801152e:	e023      	b.n	8011578 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011536:	b2db      	uxtb	r3, r3
 8011538:	2b02      	cmp	r3, #2
 801153a:	dc02      	bgt.n	8011542 <USBD_GetConfig+0x2e>
 801153c:	2b00      	cmp	r3, #0
 801153e:	dc03      	bgt.n	8011548 <USBD_GetConfig+0x34>
 8011540:	e015      	b.n	801156e <USBD_GetConfig+0x5a>
 8011542:	2b03      	cmp	r3, #3
 8011544:	d00b      	beq.n	801155e <USBD_GetConfig+0x4a>
 8011546:	e012      	b.n	801156e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	2200      	movs	r2, #0
 801154c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	3308      	adds	r3, #8
 8011552:	2201      	movs	r2, #1
 8011554:	4619      	mov	r1, r3
 8011556:	6878      	ldr	r0, [r7, #4]
 8011558:	f000 f948 	bl	80117ec <USBD_CtlSendData>
        break;
 801155c:	e00c      	b.n	8011578 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	3304      	adds	r3, #4
 8011562:	2201      	movs	r2, #1
 8011564:	4619      	mov	r1, r3
 8011566:	6878      	ldr	r0, [r7, #4]
 8011568:	f000 f940 	bl	80117ec <USBD_CtlSendData>
        break;
 801156c:	e004      	b.n	8011578 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801156e:	6839      	ldr	r1, [r7, #0]
 8011570:	6878      	ldr	r0, [r7, #4]
 8011572:	f000 f8be 	bl	80116f2 <USBD_CtlError>
        break;
 8011576:	bf00      	nop
}
 8011578:	bf00      	nop
 801157a:	3708      	adds	r7, #8
 801157c:	46bd      	mov	sp, r7
 801157e:	bd80      	pop	{r7, pc}

08011580 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011580:	b580      	push	{r7, lr}
 8011582:	b082      	sub	sp, #8
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
 8011588:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011590:	b2db      	uxtb	r3, r3
 8011592:	3b01      	subs	r3, #1
 8011594:	2b02      	cmp	r3, #2
 8011596:	d81e      	bhi.n	80115d6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011598:	683b      	ldr	r3, [r7, #0]
 801159a:	88db      	ldrh	r3, [r3, #6]
 801159c:	2b02      	cmp	r3, #2
 801159e:	d004      	beq.n	80115aa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80115a0:	6839      	ldr	r1, [r7, #0]
 80115a2:	6878      	ldr	r0, [r7, #4]
 80115a4:	f000 f8a5 	bl	80116f2 <USBD_CtlError>
        break;
 80115a8:	e01a      	b.n	80115e0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	2201      	movs	r2, #1
 80115ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d005      	beq.n	80115c6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	68db      	ldr	r3, [r3, #12]
 80115be:	f043 0202 	orr.w	r2, r3, #2
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	330c      	adds	r3, #12
 80115ca:	2202      	movs	r2, #2
 80115cc:	4619      	mov	r1, r3
 80115ce:	6878      	ldr	r0, [r7, #4]
 80115d0:	f000 f90c 	bl	80117ec <USBD_CtlSendData>
      break;
 80115d4:	e004      	b.n	80115e0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80115d6:	6839      	ldr	r1, [r7, #0]
 80115d8:	6878      	ldr	r0, [r7, #4]
 80115da:	f000 f88a 	bl	80116f2 <USBD_CtlError>
      break;
 80115de:	bf00      	nop
  }
}
 80115e0:	bf00      	nop
 80115e2:	3708      	adds	r7, #8
 80115e4:	46bd      	mov	sp, r7
 80115e6:	bd80      	pop	{r7, pc}

080115e8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80115e8:	b580      	push	{r7, lr}
 80115ea:	b082      	sub	sp, #8
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	6078      	str	r0, [r7, #4]
 80115f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80115f2:	683b      	ldr	r3, [r7, #0]
 80115f4:	885b      	ldrh	r3, [r3, #2]
 80115f6:	2b01      	cmp	r3, #1
 80115f8:	d107      	bne.n	801160a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	2201      	movs	r2, #1
 80115fe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8011602:	6878      	ldr	r0, [r7, #4]
 8011604:	f000 f94c 	bl	80118a0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8011608:	e013      	b.n	8011632 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801160a:	683b      	ldr	r3, [r7, #0]
 801160c:	885b      	ldrh	r3, [r3, #2]
 801160e:	2b02      	cmp	r3, #2
 8011610:	d10b      	bne.n	801162a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8011612:	683b      	ldr	r3, [r7, #0]
 8011614:	889b      	ldrh	r3, [r3, #4]
 8011616:	0a1b      	lsrs	r3, r3, #8
 8011618:	b29b      	uxth	r3, r3
 801161a:	b2da      	uxtb	r2, r3
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8011622:	6878      	ldr	r0, [r7, #4]
 8011624:	f000 f93c 	bl	80118a0 <USBD_CtlSendStatus>
}
 8011628:	e003      	b.n	8011632 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801162a:	6839      	ldr	r1, [r7, #0]
 801162c:	6878      	ldr	r0, [r7, #4]
 801162e:	f000 f860 	bl	80116f2 <USBD_CtlError>
}
 8011632:	bf00      	nop
 8011634:	3708      	adds	r7, #8
 8011636:	46bd      	mov	sp, r7
 8011638:	bd80      	pop	{r7, pc}

0801163a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801163a:	b580      	push	{r7, lr}
 801163c:	b082      	sub	sp, #8
 801163e:	af00      	add	r7, sp, #0
 8011640:	6078      	str	r0, [r7, #4]
 8011642:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801164a:	b2db      	uxtb	r3, r3
 801164c:	3b01      	subs	r3, #1
 801164e:	2b02      	cmp	r3, #2
 8011650:	d80b      	bhi.n	801166a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011652:	683b      	ldr	r3, [r7, #0]
 8011654:	885b      	ldrh	r3, [r3, #2]
 8011656:	2b01      	cmp	r3, #1
 8011658:	d10c      	bne.n	8011674 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	2200      	movs	r2, #0
 801165e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8011662:	6878      	ldr	r0, [r7, #4]
 8011664:	f000 f91c 	bl	80118a0 <USBD_CtlSendStatus>
      }
      break;
 8011668:	e004      	b.n	8011674 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801166a:	6839      	ldr	r1, [r7, #0]
 801166c:	6878      	ldr	r0, [r7, #4]
 801166e:	f000 f840 	bl	80116f2 <USBD_CtlError>
      break;
 8011672:	e000      	b.n	8011676 <USBD_ClrFeature+0x3c>
      break;
 8011674:	bf00      	nop
  }
}
 8011676:	bf00      	nop
 8011678:	3708      	adds	r7, #8
 801167a:	46bd      	mov	sp, r7
 801167c:	bd80      	pop	{r7, pc}

0801167e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801167e:	b580      	push	{r7, lr}
 8011680:	b084      	sub	sp, #16
 8011682:	af00      	add	r7, sp, #0
 8011684:	6078      	str	r0, [r7, #4]
 8011686:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011688:	683b      	ldr	r3, [r7, #0]
 801168a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	781a      	ldrb	r2, [r3, #0]
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	3301      	adds	r3, #1
 8011698:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	781a      	ldrb	r2, [r3, #0]
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	3301      	adds	r3, #1
 80116a6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80116a8:	68f8      	ldr	r0, [r7, #12]
 80116aa:	f7ff fa16 	bl	8010ada <SWAPBYTE>
 80116ae:	4603      	mov	r3, r0
 80116b0:	461a      	mov	r2, r3
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	3301      	adds	r3, #1
 80116ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	3301      	adds	r3, #1
 80116c0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80116c2:	68f8      	ldr	r0, [r7, #12]
 80116c4:	f7ff fa09 	bl	8010ada <SWAPBYTE>
 80116c8:	4603      	mov	r3, r0
 80116ca:	461a      	mov	r2, r3
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	3301      	adds	r3, #1
 80116d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	3301      	adds	r3, #1
 80116da:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80116dc:	68f8      	ldr	r0, [r7, #12]
 80116de:	f7ff f9fc 	bl	8010ada <SWAPBYTE>
 80116e2:	4603      	mov	r3, r0
 80116e4:	461a      	mov	r2, r3
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	80da      	strh	r2, [r3, #6]
}
 80116ea:	bf00      	nop
 80116ec:	3710      	adds	r7, #16
 80116ee:	46bd      	mov	sp, r7
 80116f0:	bd80      	pop	{r7, pc}

080116f2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80116f2:	b580      	push	{r7, lr}
 80116f4:	b082      	sub	sp, #8
 80116f6:	af00      	add	r7, sp, #0
 80116f8:	6078      	str	r0, [r7, #4]
 80116fa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80116fc:	2180      	movs	r1, #128	@ 0x80
 80116fe:	6878      	ldr	r0, [r7, #4]
 8011700:	f000 fd22 	bl	8012148 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011704:	2100      	movs	r1, #0
 8011706:	6878      	ldr	r0, [r7, #4]
 8011708:	f000 fd1e 	bl	8012148 <USBD_LL_StallEP>
}
 801170c:	bf00      	nop
 801170e:	3708      	adds	r7, #8
 8011710:	46bd      	mov	sp, r7
 8011712:	bd80      	pop	{r7, pc}

08011714 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011714:	b580      	push	{r7, lr}
 8011716:	b086      	sub	sp, #24
 8011718:	af00      	add	r7, sp, #0
 801171a:	60f8      	str	r0, [r7, #12]
 801171c:	60b9      	str	r1, [r7, #8]
 801171e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011720:	2300      	movs	r3, #0
 8011722:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	2b00      	cmp	r3, #0
 8011728:	d042      	beq.n	80117b0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 801172e:	6938      	ldr	r0, [r7, #16]
 8011730:	f000 f842 	bl	80117b8 <USBD_GetLen>
 8011734:	4603      	mov	r3, r0
 8011736:	3301      	adds	r3, #1
 8011738:	005b      	lsls	r3, r3, #1
 801173a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801173e:	d808      	bhi.n	8011752 <USBD_GetString+0x3e>
 8011740:	6938      	ldr	r0, [r7, #16]
 8011742:	f000 f839 	bl	80117b8 <USBD_GetLen>
 8011746:	4603      	mov	r3, r0
 8011748:	3301      	adds	r3, #1
 801174a:	b29b      	uxth	r3, r3
 801174c:	005b      	lsls	r3, r3, #1
 801174e:	b29a      	uxth	r2, r3
 8011750:	e001      	b.n	8011756 <USBD_GetString+0x42>
 8011752:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801175a:	7dfb      	ldrb	r3, [r7, #23]
 801175c:	68ba      	ldr	r2, [r7, #8]
 801175e:	4413      	add	r3, r2
 8011760:	687a      	ldr	r2, [r7, #4]
 8011762:	7812      	ldrb	r2, [r2, #0]
 8011764:	701a      	strb	r2, [r3, #0]
  idx++;
 8011766:	7dfb      	ldrb	r3, [r7, #23]
 8011768:	3301      	adds	r3, #1
 801176a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801176c:	7dfb      	ldrb	r3, [r7, #23]
 801176e:	68ba      	ldr	r2, [r7, #8]
 8011770:	4413      	add	r3, r2
 8011772:	2203      	movs	r2, #3
 8011774:	701a      	strb	r2, [r3, #0]
  idx++;
 8011776:	7dfb      	ldrb	r3, [r7, #23]
 8011778:	3301      	adds	r3, #1
 801177a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801177c:	e013      	b.n	80117a6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 801177e:	7dfb      	ldrb	r3, [r7, #23]
 8011780:	68ba      	ldr	r2, [r7, #8]
 8011782:	4413      	add	r3, r2
 8011784:	693a      	ldr	r2, [r7, #16]
 8011786:	7812      	ldrb	r2, [r2, #0]
 8011788:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801178a:	693b      	ldr	r3, [r7, #16]
 801178c:	3301      	adds	r3, #1
 801178e:	613b      	str	r3, [r7, #16]
    idx++;
 8011790:	7dfb      	ldrb	r3, [r7, #23]
 8011792:	3301      	adds	r3, #1
 8011794:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011796:	7dfb      	ldrb	r3, [r7, #23]
 8011798:	68ba      	ldr	r2, [r7, #8]
 801179a:	4413      	add	r3, r2
 801179c:	2200      	movs	r2, #0
 801179e:	701a      	strb	r2, [r3, #0]
    idx++;
 80117a0:	7dfb      	ldrb	r3, [r7, #23]
 80117a2:	3301      	adds	r3, #1
 80117a4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80117a6:	693b      	ldr	r3, [r7, #16]
 80117a8:	781b      	ldrb	r3, [r3, #0]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d1e7      	bne.n	801177e <USBD_GetString+0x6a>
 80117ae:	e000      	b.n	80117b2 <USBD_GetString+0x9e>
    return;
 80117b0:	bf00      	nop
  }
}
 80117b2:	3718      	adds	r7, #24
 80117b4:	46bd      	mov	sp, r7
 80117b6:	bd80      	pop	{r7, pc}

080117b8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80117b8:	b480      	push	{r7}
 80117ba:	b085      	sub	sp, #20
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80117c0:	2300      	movs	r3, #0
 80117c2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80117c8:	e005      	b.n	80117d6 <USBD_GetLen+0x1e>
  {
    len++;
 80117ca:	7bfb      	ldrb	r3, [r7, #15]
 80117cc:	3301      	adds	r3, #1
 80117ce:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80117d0:	68bb      	ldr	r3, [r7, #8]
 80117d2:	3301      	adds	r3, #1
 80117d4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80117d6:	68bb      	ldr	r3, [r7, #8]
 80117d8:	781b      	ldrb	r3, [r3, #0]
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d1f5      	bne.n	80117ca <USBD_GetLen+0x12>
  }

  return len;
 80117de:	7bfb      	ldrb	r3, [r7, #15]
}
 80117e0:	4618      	mov	r0, r3
 80117e2:	3714      	adds	r7, #20
 80117e4:	46bd      	mov	sp, r7
 80117e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ea:	4770      	bx	lr

080117ec <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80117ec:	b580      	push	{r7, lr}
 80117ee:	b084      	sub	sp, #16
 80117f0:	af00      	add	r7, sp, #0
 80117f2:	60f8      	str	r0, [r7, #12]
 80117f4:	60b9      	str	r1, [r7, #8]
 80117f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	2202      	movs	r2, #2
 80117fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	687a      	ldr	r2, [r7, #4]
 8011804:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	687a      	ldr	r2, [r7, #4]
 801180a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	68ba      	ldr	r2, [r7, #8]
 8011810:	2100      	movs	r1, #0
 8011812:	68f8      	ldr	r0, [r7, #12]
 8011814:	f000 fd21 	bl	801225a <USBD_LL_Transmit>

  return USBD_OK;
 8011818:	2300      	movs	r3, #0
}
 801181a:	4618      	mov	r0, r3
 801181c:	3710      	adds	r7, #16
 801181e:	46bd      	mov	sp, r7
 8011820:	bd80      	pop	{r7, pc}

08011822 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011822:	b580      	push	{r7, lr}
 8011824:	b084      	sub	sp, #16
 8011826:	af00      	add	r7, sp, #0
 8011828:	60f8      	str	r0, [r7, #12]
 801182a:	60b9      	str	r1, [r7, #8]
 801182c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	68ba      	ldr	r2, [r7, #8]
 8011832:	2100      	movs	r1, #0
 8011834:	68f8      	ldr	r0, [r7, #12]
 8011836:	f000 fd10 	bl	801225a <USBD_LL_Transmit>

  return USBD_OK;
 801183a:	2300      	movs	r3, #0
}
 801183c:	4618      	mov	r0, r3
 801183e:	3710      	adds	r7, #16
 8011840:	46bd      	mov	sp, r7
 8011842:	bd80      	pop	{r7, pc}

08011844 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011844:	b580      	push	{r7, lr}
 8011846:	b084      	sub	sp, #16
 8011848:	af00      	add	r7, sp, #0
 801184a:	60f8      	str	r0, [r7, #12]
 801184c:	60b9      	str	r1, [r7, #8]
 801184e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	2203      	movs	r2, #3
 8011854:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	687a      	ldr	r2, [r7, #4]
 801185c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	687a      	ldr	r2, [r7, #4]
 8011864:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	68ba      	ldr	r2, [r7, #8]
 801186c:	2100      	movs	r1, #0
 801186e:	68f8      	ldr	r0, [r7, #12]
 8011870:	f000 fd14 	bl	801229c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011874:	2300      	movs	r3, #0
}
 8011876:	4618      	mov	r0, r3
 8011878:	3710      	adds	r7, #16
 801187a:	46bd      	mov	sp, r7
 801187c:	bd80      	pop	{r7, pc}

0801187e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801187e:	b580      	push	{r7, lr}
 8011880:	b084      	sub	sp, #16
 8011882:	af00      	add	r7, sp, #0
 8011884:	60f8      	str	r0, [r7, #12]
 8011886:	60b9      	str	r1, [r7, #8]
 8011888:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	68ba      	ldr	r2, [r7, #8]
 801188e:	2100      	movs	r1, #0
 8011890:	68f8      	ldr	r0, [r7, #12]
 8011892:	f000 fd03 	bl	801229c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011896:	2300      	movs	r3, #0
}
 8011898:	4618      	mov	r0, r3
 801189a:	3710      	adds	r7, #16
 801189c:	46bd      	mov	sp, r7
 801189e:	bd80      	pop	{r7, pc}

080118a0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80118a0:	b580      	push	{r7, lr}
 80118a2:	b082      	sub	sp, #8
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	2204      	movs	r2, #4
 80118ac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80118b0:	2300      	movs	r3, #0
 80118b2:	2200      	movs	r2, #0
 80118b4:	2100      	movs	r1, #0
 80118b6:	6878      	ldr	r0, [r7, #4]
 80118b8:	f000 fccf 	bl	801225a <USBD_LL_Transmit>

  return USBD_OK;
 80118bc:	2300      	movs	r3, #0
}
 80118be:	4618      	mov	r0, r3
 80118c0:	3708      	adds	r7, #8
 80118c2:	46bd      	mov	sp, r7
 80118c4:	bd80      	pop	{r7, pc}

080118c6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80118c6:	b580      	push	{r7, lr}
 80118c8:	b082      	sub	sp, #8
 80118ca:	af00      	add	r7, sp, #0
 80118cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	2205      	movs	r2, #5
 80118d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80118d6:	2300      	movs	r3, #0
 80118d8:	2200      	movs	r2, #0
 80118da:	2100      	movs	r1, #0
 80118dc:	6878      	ldr	r0, [r7, #4]
 80118de:	f000 fcdd 	bl	801229c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80118e2:	2300      	movs	r3, #0
}
 80118e4:	4618      	mov	r0, r3
 80118e6:	3708      	adds	r7, #8
 80118e8:	46bd      	mov	sp, r7
 80118ea:	bd80      	pop	{r7, pc}

080118ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80118ec:	b580      	push	{r7, lr}
 80118ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80118f0:	2200      	movs	r2, #0
 80118f2:	4913      	ldr	r1, [pc, #76]	@ (8011940 <MX_USB_DEVICE_Init+0x54>)
 80118f4:	4813      	ldr	r0, [pc, #76]	@ (8011944 <MX_USB_DEVICE_Init+0x58>)
 80118f6:	f7fe fccd 	bl	8010294 <USBD_Init>
 80118fa:	4603      	mov	r3, r0
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d001      	beq.n	8011904 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011900:	f7ef fd17 	bl	8001332 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011904:	4910      	ldr	r1, [pc, #64]	@ (8011948 <MX_USB_DEVICE_Init+0x5c>)
 8011906:	480f      	ldr	r0, [pc, #60]	@ (8011944 <MX_USB_DEVICE_Init+0x58>)
 8011908:	f7fe fcf4 	bl	80102f4 <USBD_RegisterClass>
 801190c:	4603      	mov	r3, r0
 801190e:	2b00      	cmp	r3, #0
 8011910:	d001      	beq.n	8011916 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011912:	f7ef fd0e 	bl	8001332 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011916:	490d      	ldr	r1, [pc, #52]	@ (801194c <MX_USB_DEVICE_Init+0x60>)
 8011918:	480a      	ldr	r0, [pc, #40]	@ (8011944 <MX_USB_DEVICE_Init+0x58>)
 801191a:	f7fe fbeb 	bl	80100f4 <USBD_CDC_RegisterInterface>
 801191e:	4603      	mov	r3, r0
 8011920:	2b00      	cmp	r3, #0
 8011922:	d001      	beq.n	8011928 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011924:	f7ef fd05 	bl	8001332 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011928:	4806      	ldr	r0, [pc, #24]	@ (8011944 <MX_USB_DEVICE_Init+0x58>)
 801192a:	f7fe fd19 	bl	8010360 <USBD_Start>
 801192e:	4603      	mov	r3, r0
 8011930:	2b00      	cmp	r3, #0
 8011932:	d001      	beq.n	8011938 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011934:	f7ef fcfd 	bl	8001332 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8011938:	f7f6 fb72 	bl	8008020 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801193c:	bf00      	nop
 801193e:	bd80      	pop	{r7, pc}
 8011940:	240000d4 	.word	0x240000d4
 8011944:	24000a34 	.word	0x24000a34
 8011948:	24000040 	.word	0x24000040
 801194c:	240000c0 	.word	0x240000c0

08011950 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011950:	b580      	push	{r7, lr}
 8011952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011954:	2200      	movs	r2, #0
 8011956:	4905      	ldr	r1, [pc, #20]	@ (801196c <CDC_Init_FS+0x1c>)
 8011958:	4805      	ldr	r0, [pc, #20]	@ (8011970 <CDC_Init_FS+0x20>)
 801195a:	f7fe fbe5 	bl	8010128 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801195e:	4905      	ldr	r1, [pc, #20]	@ (8011974 <CDC_Init_FS+0x24>)
 8011960:	4803      	ldr	r0, [pc, #12]	@ (8011970 <CDC_Init_FS+0x20>)
 8011962:	f7fe fc03 	bl	801016c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011966:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011968:	4618      	mov	r0, r3
 801196a:	bd80      	pop	{r7, pc}
 801196c:	24001510 	.word	0x24001510
 8011970:	24000a34 	.word	0x24000a34
 8011974:	24000d10 	.word	0x24000d10

08011978 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011978:	b480      	push	{r7}
 801197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801197c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801197e:	4618      	mov	r0, r3
 8011980:	46bd      	mov	sp, r7
 8011982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011986:	4770      	bx	lr

08011988 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011988:	b480      	push	{r7}
 801198a:	b083      	sub	sp, #12
 801198c:	af00      	add	r7, sp, #0
 801198e:	4603      	mov	r3, r0
 8011990:	6039      	str	r1, [r7, #0]
 8011992:	71fb      	strb	r3, [r7, #7]
 8011994:	4613      	mov	r3, r2
 8011996:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011998:	79fb      	ldrb	r3, [r7, #7]
 801199a:	2b23      	cmp	r3, #35	@ 0x23
 801199c:	d84a      	bhi.n	8011a34 <CDC_Control_FS+0xac>
 801199e:	a201      	add	r2, pc, #4	@ (adr r2, 80119a4 <CDC_Control_FS+0x1c>)
 80119a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119a4:	08011a35 	.word	0x08011a35
 80119a8:	08011a35 	.word	0x08011a35
 80119ac:	08011a35 	.word	0x08011a35
 80119b0:	08011a35 	.word	0x08011a35
 80119b4:	08011a35 	.word	0x08011a35
 80119b8:	08011a35 	.word	0x08011a35
 80119bc:	08011a35 	.word	0x08011a35
 80119c0:	08011a35 	.word	0x08011a35
 80119c4:	08011a35 	.word	0x08011a35
 80119c8:	08011a35 	.word	0x08011a35
 80119cc:	08011a35 	.word	0x08011a35
 80119d0:	08011a35 	.word	0x08011a35
 80119d4:	08011a35 	.word	0x08011a35
 80119d8:	08011a35 	.word	0x08011a35
 80119dc:	08011a35 	.word	0x08011a35
 80119e0:	08011a35 	.word	0x08011a35
 80119e4:	08011a35 	.word	0x08011a35
 80119e8:	08011a35 	.word	0x08011a35
 80119ec:	08011a35 	.word	0x08011a35
 80119f0:	08011a35 	.word	0x08011a35
 80119f4:	08011a35 	.word	0x08011a35
 80119f8:	08011a35 	.word	0x08011a35
 80119fc:	08011a35 	.word	0x08011a35
 8011a00:	08011a35 	.word	0x08011a35
 8011a04:	08011a35 	.word	0x08011a35
 8011a08:	08011a35 	.word	0x08011a35
 8011a0c:	08011a35 	.word	0x08011a35
 8011a10:	08011a35 	.word	0x08011a35
 8011a14:	08011a35 	.word	0x08011a35
 8011a18:	08011a35 	.word	0x08011a35
 8011a1c:	08011a35 	.word	0x08011a35
 8011a20:	08011a35 	.word	0x08011a35
 8011a24:	08011a35 	.word	0x08011a35
 8011a28:	08011a35 	.word	0x08011a35
 8011a2c:	08011a35 	.word	0x08011a35
 8011a30:	08011a35 	.word	0x08011a35
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011a34:	bf00      	nop
  }

  return (USBD_OK);
 8011a36:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011a38:	4618      	mov	r0, r3
 8011a3a:	370c      	adds	r7, #12
 8011a3c:	46bd      	mov	sp, r7
 8011a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a42:	4770      	bx	lr

08011a44 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011a44:	b580      	push	{r7, lr}
 8011a46:	b082      	sub	sp, #8
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	6078      	str	r0, [r7, #4]
 8011a4c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011a4e:	6879      	ldr	r1, [r7, #4]
 8011a50:	4805      	ldr	r0, [pc, #20]	@ (8011a68 <CDC_Receive_FS+0x24>)
 8011a52:	f7fe fb8b 	bl	801016c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011a56:	4804      	ldr	r0, [pc, #16]	@ (8011a68 <CDC_Receive_FS+0x24>)
 8011a58:	f7fe fbe6 	bl	8010228 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011a5c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011a5e:	4618      	mov	r0, r3
 8011a60:	3708      	adds	r7, #8
 8011a62:	46bd      	mov	sp, r7
 8011a64:	bd80      	pop	{r7, pc}
 8011a66:	bf00      	nop
 8011a68:	24000a34 	.word	0x24000a34

08011a6c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	b084      	sub	sp, #16
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
 8011a74:	460b      	mov	r3, r1
 8011a76:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011a78:	2300      	movs	r3, #0
 8011a7a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8011a7c:	4b0d      	ldr	r3, [pc, #52]	@ (8011ab4 <CDC_Transmit_FS+0x48>)
 8011a7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011a82:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8011a84:	68bb      	ldr	r3, [r7, #8]
 8011a86:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d001      	beq.n	8011a92 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8011a8e:	2301      	movs	r3, #1
 8011a90:	e00b      	b.n	8011aaa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8011a92:	887b      	ldrh	r3, [r7, #2]
 8011a94:	461a      	mov	r2, r3
 8011a96:	6879      	ldr	r1, [r7, #4]
 8011a98:	4806      	ldr	r0, [pc, #24]	@ (8011ab4 <CDC_Transmit_FS+0x48>)
 8011a9a:	f7fe fb45 	bl	8010128 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8011a9e:	4805      	ldr	r0, [pc, #20]	@ (8011ab4 <CDC_Transmit_FS+0x48>)
 8011aa0:	f7fe fb82 	bl	80101a8 <USBD_CDC_TransmitPacket>
 8011aa4:	4603      	mov	r3, r0
 8011aa6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8011aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011aaa:	4618      	mov	r0, r3
 8011aac:	3710      	adds	r7, #16
 8011aae:	46bd      	mov	sp, r7
 8011ab0:	bd80      	pop	{r7, pc}
 8011ab2:	bf00      	nop
 8011ab4:	24000a34 	.word	0x24000a34

08011ab8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011ab8:	b480      	push	{r7}
 8011aba:	b087      	sub	sp, #28
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	60f8      	str	r0, [r7, #12]
 8011ac0:	60b9      	str	r1, [r7, #8]
 8011ac2:	4613      	mov	r3, r2
 8011ac4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011aca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011ace:	4618      	mov	r0, r3
 8011ad0:	371c      	adds	r7, #28
 8011ad2:	46bd      	mov	sp, r7
 8011ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad8:	4770      	bx	lr
	...

08011adc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011adc:	b480      	push	{r7}
 8011ade:	b083      	sub	sp, #12
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	4603      	mov	r3, r0
 8011ae4:	6039      	str	r1, [r7, #0]
 8011ae6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011ae8:	683b      	ldr	r3, [r7, #0]
 8011aea:	2212      	movs	r2, #18
 8011aec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011aee:	4b03      	ldr	r3, [pc, #12]	@ (8011afc <USBD_FS_DeviceDescriptor+0x20>)
}
 8011af0:	4618      	mov	r0, r3
 8011af2:	370c      	adds	r7, #12
 8011af4:	46bd      	mov	sp, r7
 8011af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011afa:	4770      	bx	lr
 8011afc:	240000f4 	.word	0x240000f4

08011b00 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011b00:	b480      	push	{r7}
 8011b02:	b083      	sub	sp, #12
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	4603      	mov	r3, r0
 8011b08:	6039      	str	r1, [r7, #0]
 8011b0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011b0c:	683b      	ldr	r3, [r7, #0]
 8011b0e:	2204      	movs	r2, #4
 8011b10:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011b12:	4b03      	ldr	r3, [pc, #12]	@ (8011b20 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011b14:	4618      	mov	r0, r3
 8011b16:	370c      	adds	r7, #12
 8011b18:	46bd      	mov	sp, r7
 8011b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b1e:	4770      	bx	lr
 8011b20:	24000108 	.word	0x24000108

08011b24 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011b24:	b580      	push	{r7, lr}
 8011b26:	b082      	sub	sp, #8
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	4603      	mov	r3, r0
 8011b2c:	6039      	str	r1, [r7, #0]
 8011b2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011b30:	79fb      	ldrb	r3, [r7, #7]
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d105      	bne.n	8011b42 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011b36:	683a      	ldr	r2, [r7, #0]
 8011b38:	4907      	ldr	r1, [pc, #28]	@ (8011b58 <USBD_FS_ProductStrDescriptor+0x34>)
 8011b3a:	4808      	ldr	r0, [pc, #32]	@ (8011b5c <USBD_FS_ProductStrDescriptor+0x38>)
 8011b3c:	f7ff fdea 	bl	8011714 <USBD_GetString>
 8011b40:	e004      	b.n	8011b4c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011b42:	683a      	ldr	r2, [r7, #0]
 8011b44:	4904      	ldr	r1, [pc, #16]	@ (8011b58 <USBD_FS_ProductStrDescriptor+0x34>)
 8011b46:	4805      	ldr	r0, [pc, #20]	@ (8011b5c <USBD_FS_ProductStrDescriptor+0x38>)
 8011b48:	f7ff fde4 	bl	8011714 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011b4c:	4b02      	ldr	r3, [pc, #8]	@ (8011b58 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011b4e:	4618      	mov	r0, r3
 8011b50:	3708      	adds	r7, #8
 8011b52:	46bd      	mov	sp, r7
 8011b54:	bd80      	pop	{r7, pc}
 8011b56:	bf00      	nop
 8011b58:	24001d10 	.word	0x24001d10
 8011b5c:	08014fb8 	.word	0x08014fb8

08011b60 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011b60:	b580      	push	{r7, lr}
 8011b62:	b082      	sub	sp, #8
 8011b64:	af00      	add	r7, sp, #0
 8011b66:	4603      	mov	r3, r0
 8011b68:	6039      	str	r1, [r7, #0]
 8011b6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011b6c:	683a      	ldr	r2, [r7, #0]
 8011b6e:	4904      	ldr	r1, [pc, #16]	@ (8011b80 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011b70:	4804      	ldr	r0, [pc, #16]	@ (8011b84 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011b72:	f7ff fdcf 	bl	8011714 <USBD_GetString>
  return USBD_StrDesc;
 8011b76:	4b02      	ldr	r3, [pc, #8]	@ (8011b80 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011b78:	4618      	mov	r0, r3
 8011b7a:	3708      	adds	r7, #8
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	bd80      	pop	{r7, pc}
 8011b80:	24001d10 	.word	0x24001d10
 8011b84:	08014fd0 	.word	0x08014fd0

08011b88 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	b082      	sub	sp, #8
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	4603      	mov	r3, r0
 8011b90:	6039      	str	r1, [r7, #0]
 8011b92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011b94:	683b      	ldr	r3, [r7, #0]
 8011b96:	221a      	movs	r2, #26
 8011b98:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011b9a:	f000 f843 	bl	8011c24 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011b9e:	4b02      	ldr	r3, [pc, #8]	@ (8011ba8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	3708      	adds	r7, #8
 8011ba4:	46bd      	mov	sp, r7
 8011ba6:	bd80      	pop	{r7, pc}
 8011ba8:	2400010c 	.word	0x2400010c

08011bac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b082      	sub	sp, #8
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	4603      	mov	r3, r0
 8011bb4:	6039      	str	r1, [r7, #0]
 8011bb6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011bb8:	79fb      	ldrb	r3, [r7, #7]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d105      	bne.n	8011bca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011bbe:	683a      	ldr	r2, [r7, #0]
 8011bc0:	4907      	ldr	r1, [pc, #28]	@ (8011be0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011bc2:	4808      	ldr	r0, [pc, #32]	@ (8011be4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011bc4:	f7ff fda6 	bl	8011714 <USBD_GetString>
 8011bc8:	e004      	b.n	8011bd4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011bca:	683a      	ldr	r2, [r7, #0]
 8011bcc:	4904      	ldr	r1, [pc, #16]	@ (8011be0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011bce:	4805      	ldr	r0, [pc, #20]	@ (8011be4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011bd0:	f7ff fda0 	bl	8011714 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011bd4:	4b02      	ldr	r3, [pc, #8]	@ (8011be0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	3708      	adds	r7, #8
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	bd80      	pop	{r7, pc}
 8011bde:	bf00      	nop
 8011be0:	24001d10 	.word	0x24001d10
 8011be4:	08014fe4 	.word	0x08014fe4

08011be8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011be8:	b580      	push	{r7, lr}
 8011bea:	b082      	sub	sp, #8
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	4603      	mov	r3, r0
 8011bf0:	6039      	str	r1, [r7, #0]
 8011bf2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011bf4:	79fb      	ldrb	r3, [r7, #7]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d105      	bne.n	8011c06 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011bfa:	683a      	ldr	r2, [r7, #0]
 8011bfc:	4907      	ldr	r1, [pc, #28]	@ (8011c1c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011bfe:	4808      	ldr	r0, [pc, #32]	@ (8011c20 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011c00:	f7ff fd88 	bl	8011714 <USBD_GetString>
 8011c04:	e004      	b.n	8011c10 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011c06:	683a      	ldr	r2, [r7, #0]
 8011c08:	4904      	ldr	r1, [pc, #16]	@ (8011c1c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011c0a:	4805      	ldr	r0, [pc, #20]	@ (8011c20 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011c0c:	f7ff fd82 	bl	8011714 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011c10:	4b02      	ldr	r3, [pc, #8]	@ (8011c1c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011c12:	4618      	mov	r0, r3
 8011c14:	3708      	adds	r7, #8
 8011c16:	46bd      	mov	sp, r7
 8011c18:	bd80      	pop	{r7, pc}
 8011c1a:	bf00      	nop
 8011c1c:	24001d10 	.word	0x24001d10
 8011c20:	08014ff0 	.word	0x08014ff0

08011c24 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b084      	sub	sp, #16
 8011c28:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8011c68 <Get_SerialNum+0x44>)
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011c30:	4b0e      	ldr	r3, [pc, #56]	@ (8011c6c <Get_SerialNum+0x48>)
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011c36:	4b0e      	ldr	r3, [pc, #56]	@ (8011c70 <Get_SerialNum+0x4c>)
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011c3c:	68fa      	ldr	r2, [r7, #12]
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	4413      	add	r3, r2
 8011c42:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d009      	beq.n	8011c5e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011c4a:	2208      	movs	r2, #8
 8011c4c:	4909      	ldr	r1, [pc, #36]	@ (8011c74 <Get_SerialNum+0x50>)
 8011c4e:	68f8      	ldr	r0, [r7, #12]
 8011c50:	f000 f814 	bl	8011c7c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011c54:	2204      	movs	r2, #4
 8011c56:	4908      	ldr	r1, [pc, #32]	@ (8011c78 <Get_SerialNum+0x54>)
 8011c58:	68b8      	ldr	r0, [r7, #8]
 8011c5a:	f000 f80f 	bl	8011c7c <IntToUnicode>
  }
}
 8011c5e:	bf00      	nop
 8011c60:	3710      	adds	r7, #16
 8011c62:	46bd      	mov	sp, r7
 8011c64:	bd80      	pop	{r7, pc}
 8011c66:	bf00      	nop
 8011c68:	1ff1e800 	.word	0x1ff1e800
 8011c6c:	1ff1e804 	.word	0x1ff1e804
 8011c70:	1ff1e808 	.word	0x1ff1e808
 8011c74:	2400010e 	.word	0x2400010e
 8011c78:	2400011e 	.word	0x2400011e

08011c7c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011c7c:	b480      	push	{r7}
 8011c7e:	b087      	sub	sp, #28
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	60f8      	str	r0, [r7, #12]
 8011c84:	60b9      	str	r1, [r7, #8]
 8011c86:	4613      	mov	r3, r2
 8011c88:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011c8a:	2300      	movs	r3, #0
 8011c8c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011c8e:	2300      	movs	r3, #0
 8011c90:	75fb      	strb	r3, [r7, #23]
 8011c92:	e027      	b.n	8011ce4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	0f1b      	lsrs	r3, r3, #28
 8011c98:	2b09      	cmp	r3, #9
 8011c9a:	d80b      	bhi.n	8011cb4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	0f1b      	lsrs	r3, r3, #28
 8011ca0:	b2da      	uxtb	r2, r3
 8011ca2:	7dfb      	ldrb	r3, [r7, #23]
 8011ca4:	005b      	lsls	r3, r3, #1
 8011ca6:	4619      	mov	r1, r3
 8011ca8:	68bb      	ldr	r3, [r7, #8]
 8011caa:	440b      	add	r3, r1
 8011cac:	3230      	adds	r2, #48	@ 0x30
 8011cae:	b2d2      	uxtb	r2, r2
 8011cb0:	701a      	strb	r2, [r3, #0]
 8011cb2:	e00a      	b.n	8011cca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	0f1b      	lsrs	r3, r3, #28
 8011cb8:	b2da      	uxtb	r2, r3
 8011cba:	7dfb      	ldrb	r3, [r7, #23]
 8011cbc:	005b      	lsls	r3, r3, #1
 8011cbe:	4619      	mov	r1, r3
 8011cc0:	68bb      	ldr	r3, [r7, #8]
 8011cc2:	440b      	add	r3, r1
 8011cc4:	3237      	adds	r2, #55	@ 0x37
 8011cc6:	b2d2      	uxtb	r2, r2
 8011cc8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	011b      	lsls	r3, r3, #4
 8011cce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011cd0:	7dfb      	ldrb	r3, [r7, #23]
 8011cd2:	005b      	lsls	r3, r3, #1
 8011cd4:	3301      	adds	r3, #1
 8011cd6:	68ba      	ldr	r2, [r7, #8]
 8011cd8:	4413      	add	r3, r2
 8011cda:	2200      	movs	r2, #0
 8011cdc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011cde:	7dfb      	ldrb	r3, [r7, #23]
 8011ce0:	3301      	adds	r3, #1
 8011ce2:	75fb      	strb	r3, [r7, #23]
 8011ce4:	7dfa      	ldrb	r2, [r7, #23]
 8011ce6:	79fb      	ldrb	r3, [r7, #7]
 8011ce8:	429a      	cmp	r2, r3
 8011cea:	d3d3      	bcc.n	8011c94 <IntToUnicode+0x18>
  }
}
 8011cec:	bf00      	nop
 8011cee:	bf00      	nop
 8011cf0:	371c      	adds	r7, #28
 8011cf2:	46bd      	mov	sp, r7
 8011cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf8:	4770      	bx	lr
	...

08011cfc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	b0ba      	sub	sp, #232	@ 0xe8
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011d04:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8011d08:	2200      	movs	r2, #0
 8011d0a:	601a      	str	r2, [r3, #0]
 8011d0c:	605a      	str	r2, [r3, #4]
 8011d0e:	609a      	str	r2, [r3, #8]
 8011d10:	60da      	str	r2, [r3, #12]
 8011d12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011d14:	f107 0310 	add.w	r3, r7, #16
 8011d18:	22c0      	movs	r2, #192	@ 0xc0
 8011d1a:	2100      	movs	r1, #0
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	f001 f890 	bl	8012e42 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	4a34      	ldr	r2, [pc, #208]	@ (8011df8 <HAL_PCD_MspInit+0xfc>)
 8011d28:	4293      	cmp	r3, r2
 8011d2a:	d161      	bne.n	8011df0 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8011d2c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8011d30:	f04f 0300 	mov.w	r3, #0
 8011d34:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8011d38:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8011d3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011d40:	f107 0310 	add.w	r3, r7, #16
 8011d44:	4618      	mov	r0, r3
 8011d46:	f7f7 f961 	bl	800900c <HAL_RCCEx_PeriphCLKConfig>
 8011d4a:	4603      	mov	r3, r0
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d001      	beq.n	8011d54 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8011d50:	f7ef faef 	bl	8001332 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8011d54:	f7f6 f964 	bl	8008020 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011d58:	4b28      	ldr	r3, [pc, #160]	@ (8011dfc <HAL_PCD_MspInit+0x100>)
 8011d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011d5e:	4a27      	ldr	r2, [pc, #156]	@ (8011dfc <HAL_PCD_MspInit+0x100>)
 8011d60:	f043 0301 	orr.w	r3, r3, #1
 8011d64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8011d68:	4b24      	ldr	r3, [pc, #144]	@ (8011dfc <HAL_PCD_MspInit+0x100>)
 8011d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011d6e:	f003 0301 	and.w	r3, r3, #1
 8011d72:	60fb      	str	r3, [r7, #12]
 8011d74:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8011d76:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8011d7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011d7e:	2302      	movs	r3, #2
 8011d80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d84:	2300      	movs	r3, #0
 8011d86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8011d90:	230a      	movs	r3, #10
 8011d92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011d96:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8011d9a:	4619      	mov	r1, r3
 8011d9c:	4818      	ldr	r0, [pc, #96]	@ (8011e00 <HAL_PCD_MspInit+0x104>)
 8011d9e:	f7f4 fc35 	bl	800660c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8011da2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011da6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011daa:	2300      	movs	r3, #0
 8011dac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011db0:	2300      	movs	r3, #0
 8011db2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011db6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8011dba:	4619      	mov	r1, r3
 8011dbc:	4810      	ldr	r0, [pc, #64]	@ (8011e00 <HAL_PCD_MspInit+0x104>)
 8011dbe:	f7f4 fc25 	bl	800660c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8011dfc <HAL_PCD_MspInit+0x100>)
 8011dc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011dc8:	4a0c      	ldr	r2, [pc, #48]	@ (8011dfc <HAL_PCD_MspInit+0x100>)
 8011dca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011dce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8011dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8011dfc <HAL_PCD_MspInit+0x100>)
 8011dd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011dd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011ddc:	60bb      	str	r3, [r7, #8]
 8011dde:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8011de0:	2200      	movs	r2, #0
 8011de2:	2100      	movs	r1, #0
 8011de4:	2065      	movs	r0, #101	@ 0x65
 8011de6:	f7f2 fa80 	bl	80042ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011dea:	2065      	movs	r0, #101	@ 0x65
 8011dec:	f7f2 fa97 	bl	800431e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011df0:	bf00      	nop
 8011df2:	37e8      	adds	r7, #232	@ 0xe8
 8011df4:	46bd      	mov	sp, r7
 8011df6:	bd80      	pop	{r7, pc}
 8011df8:	40080000 	.word	0x40080000
 8011dfc:	58024400 	.word	0x58024400
 8011e00:	58020000 	.word	0x58020000

08011e04 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b082      	sub	sp, #8
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8011e18:	4619      	mov	r1, r3
 8011e1a:	4610      	mov	r0, r2
 8011e1c:	f7fe faed 	bl	80103fa <USBD_LL_SetupStage>
}
 8011e20:	bf00      	nop
 8011e22:	3708      	adds	r7, #8
 8011e24:	46bd      	mov	sp, r7
 8011e26:	bd80      	pop	{r7, pc}

08011e28 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e28:	b580      	push	{r7, lr}
 8011e2a:	b082      	sub	sp, #8
 8011e2c:	af00      	add	r7, sp, #0
 8011e2e:	6078      	str	r0, [r7, #4]
 8011e30:	460b      	mov	r3, r1
 8011e32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8011e3a:	78fa      	ldrb	r2, [r7, #3]
 8011e3c:	6879      	ldr	r1, [r7, #4]
 8011e3e:	4613      	mov	r3, r2
 8011e40:	00db      	lsls	r3, r3, #3
 8011e42:	4413      	add	r3, r2
 8011e44:	009b      	lsls	r3, r3, #2
 8011e46:	440b      	add	r3, r1
 8011e48:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8011e4c:	681a      	ldr	r2, [r3, #0]
 8011e4e:	78fb      	ldrb	r3, [r7, #3]
 8011e50:	4619      	mov	r1, r3
 8011e52:	f7fe fb27 	bl	80104a4 <USBD_LL_DataOutStage>
}
 8011e56:	bf00      	nop
 8011e58:	3708      	adds	r7, #8
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	bd80      	pop	{r7, pc}

08011e5e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e5e:	b580      	push	{r7, lr}
 8011e60:	b082      	sub	sp, #8
 8011e62:	af00      	add	r7, sp, #0
 8011e64:	6078      	str	r0, [r7, #4]
 8011e66:	460b      	mov	r3, r1
 8011e68:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8011e70:	78fa      	ldrb	r2, [r7, #3]
 8011e72:	6879      	ldr	r1, [r7, #4]
 8011e74:	4613      	mov	r3, r2
 8011e76:	00db      	lsls	r3, r3, #3
 8011e78:	4413      	add	r3, r2
 8011e7a:	009b      	lsls	r3, r3, #2
 8011e7c:	440b      	add	r3, r1
 8011e7e:	3320      	adds	r3, #32
 8011e80:	681a      	ldr	r2, [r3, #0]
 8011e82:	78fb      	ldrb	r3, [r7, #3]
 8011e84:	4619      	mov	r1, r3
 8011e86:	f7fe fbc0 	bl	801060a <USBD_LL_DataInStage>
}
 8011e8a:	bf00      	nop
 8011e8c:	3708      	adds	r7, #8
 8011e8e:	46bd      	mov	sp, r7
 8011e90:	bd80      	pop	{r7, pc}

08011e92 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e92:	b580      	push	{r7, lr}
 8011e94:	b082      	sub	sp, #8
 8011e96:	af00      	add	r7, sp, #0
 8011e98:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	f7fe fcfa 	bl	801089a <USBD_LL_SOF>
}
 8011ea6:	bf00      	nop
 8011ea8:	3708      	adds	r7, #8
 8011eaa:	46bd      	mov	sp, r7
 8011eac:	bd80      	pop	{r7, pc}

08011eae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011eae:	b580      	push	{r7, lr}
 8011eb0:	b084      	sub	sp, #16
 8011eb2:	af00      	add	r7, sp, #0
 8011eb4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011eb6:	2301      	movs	r3, #1
 8011eb8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	79db      	ldrb	r3, [r3, #7]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d102      	bne.n	8011ec8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8011ec2:	2300      	movs	r3, #0
 8011ec4:	73fb      	strb	r3, [r7, #15]
 8011ec6:	e008      	b.n	8011eda <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	79db      	ldrb	r3, [r3, #7]
 8011ecc:	2b02      	cmp	r3, #2
 8011ece:	d102      	bne.n	8011ed6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8011ed0:	2301      	movs	r3, #1
 8011ed2:	73fb      	strb	r3, [r7, #15]
 8011ed4:	e001      	b.n	8011eda <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8011ed6:	f7ef fa2c 	bl	8001332 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011ee0:	7bfa      	ldrb	r2, [r7, #15]
 8011ee2:	4611      	mov	r1, r2
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	f7fe fc94 	bl	8010812 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	f7fe fc3c 	bl	801076e <USBD_LL_Reset>
}
 8011ef6:	bf00      	nop
 8011ef8:	3710      	adds	r7, #16
 8011efa:	46bd      	mov	sp, r7
 8011efc:	bd80      	pop	{r7, pc}
	...

08011f00 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b082      	sub	sp, #8
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011f0e:	4618      	mov	r0, r3
 8011f10:	f7fe fc8f 	bl	8010832 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	687a      	ldr	r2, [r7, #4]
 8011f20:	6812      	ldr	r2, [r2, #0]
 8011f22:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011f26:	f043 0301 	orr.w	r3, r3, #1
 8011f2a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	7adb      	ldrb	r3, [r3, #11]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d005      	beq.n	8011f40 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011f34:	4b04      	ldr	r3, [pc, #16]	@ (8011f48 <HAL_PCD_SuspendCallback+0x48>)
 8011f36:	691b      	ldr	r3, [r3, #16]
 8011f38:	4a03      	ldr	r2, [pc, #12]	@ (8011f48 <HAL_PCD_SuspendCallback+0x48>)
 8011f3a:	f043 0306 	orr.w	r3, r3, #6
 8011f3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011f40:	bf00      	nop
 8011f42:	3708      	adds	r7, #8
 8011f44:	46bd      	mov	sp, r7
 8011f46:	bd80      	pop	{r7, pc}
 8011f48:	e000ed00 	.word	0xe000ed00

08011f4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	b082      	sub	sp, #8
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	f7fe fc85 	bl	801086a <USBD_LL_Resume>
}
 8011f60:	bf00      	nop
 8011f62:	3708      	adds	r7, #8
 8011f64:	46bd      	mov	sp, r7
 8011f66:	bd80      	pop	{r7, pc}

08011f68 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	b082      	sub	sp, #8
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
 8011f70:	460b      	mov	r3, r1
 8011f72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011f7a:	78fa      	ldrb	r2, [r7, #3]
 8011f7c:	4611      	mov	r1, r2
 8011f7e:	4618      	mov	r0, r3
 8011f80:	f7fe fcdd 	bl	801093e <USBD_LL_IsoOUTIncomplete>
}
 8011f84:	bf00      	nop
 8011f86:	3708      	adds	r7, #8
 8011f88:	46bd      	mov	sp, r7
 8011f8a:	bd80      	pop	{r7, pc}

08011f8c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f8c:	b580      	push	{r7, lr}
 8011f8e:	b082      	sub	sp, #8
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	6078      	str	r0, [r7, #4]
 8011f94:	460b      	mov	r3, r1
 8011f96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011f9e:	78fa      	ldrb	r2, [r7, #3]
 8011fa0:	4611      	mov	r1, r2
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	f7fe fc99 	bl	80108da <USBD_LL_IsoINIncomplete>
}
 8011fa8:	bf00      	nop
 8011faa:	3708      	adds	r7, #8
 8011fac:	46bd      	mov	sp, r7
 8011fae:	bd80      	pop	{r7, pc}

08011fb0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011fb0:	b580      	push	{r7, lr}
 8011fb2:	b082      	sub	sp, #8
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	f7fe fcef 	bl	80109a2 <USBD_LL_DevConnected>
}
 8011fc4:	bf00      	nop
 8011fc6:	3708      	adds	r7, #8
 8011fc8:	46bd      	mov	sp, r7
 8011fca:	bd80      	pop	{r7, pc}

08011fcc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011fcc:	b580      	push	{r7, lr}
 8011fce:	b082      	sub	sp, #8
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011fda:	4618      	mov	r0, r3
 8011fdc:	f7fe fcec 	bl	80109b8 <USBD_LL_DevDisconnected>
}
 8011fe0:	bf00      	nop
 8011fe2:	3708      	adds	r7, #8
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	bd80      	pop	{r7, pc}

08011fe8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b082      	sub	sp, #8
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	781b      	ldrb	r3, [r3, #0]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d13e      	bne.n	8012076 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011ff8:	4a21      	ldr	r2, [pc, #132]	@ (8012080 <USBD_LL_Init+0x98>)
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	4a1f      	ldr	r2, [pc, #124]	@ (8012080 <USBD_LL_Init+0x98>)
 8012004:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012008:	4b1d      	ldr	r3, [pc, #116]	@ (8012080 <USBD_LL_Init+0x98>)
 801200a:	4a1e      	ldr	r2, [pc, #120]	@ (8012084 <USBD_LL_Init+0x9c>)
 801200c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801200e:	4b1c      	ldr	r3, [pc, #112]	@ (8012080 <USBD_LL_Init+0x98>)
 8012010:	2209      	movs	r2, #9
 8012012:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8012014:	4b1a      	ldr	r3, [pc, #104]	@ (8012080 <USBD_LL_Init+0x98>)
 8012016:	2202      	movs	r2, #2
 8012018:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801201a:	4b19      	ldr	r3, [pc, #100]	@ (8012080 <USBD_LL_Init+0x98>)
 801201c:	2200      	movs	r2, #0
 801201e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012020:	4b17      	ldr	r3, [pc, #92]	@ (8012080 <USBD_LL_Init+0x98>)
 8012022:	2202      	movs	r2, #2
 8012024:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8012026:	4b16      	ldr	r3, [pc, #88]	@ (8012080 <USBD_LL_Init+0x98>)
 8012028:	2201      	movs	r2, #1
 801202a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801202c:	4b14      	ldr	r3, [pc, #80]	@ (8012080 <USBD_LL_Init+0x98>)
 801202e:	2200      	movs	r2, #0
 8012030:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8012032:	4b13      	ldr	r3, [pc, #76]	@ (8012080 <USBD_LL_Init+0x98>)
 8012034:	2200      	movs	r2, #0
 8012036:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8012038:	4b11      	ldr	r3, [pc, #68]	@ (8012080 <USBD_LL_Init+0x98>)
 801203a:	2201      	movs	r2, #1
 801203c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 801203e:	4b10      	ldr	r3, [pc, #64]	@ (8012080 <USBD_LL_Init+0x98>)
 8012040:	2201      	movs	r2, #1
 8012042:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8012044:	4b0e      	ldr	r3, [pc, #56]	@ (8012080 <USBD_LL_Init+0x98>)
 8012046:	2200      	movs	r2, #0
 8012048:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801204a:	480d      	ldr	r0, [pc, #52]	@ (8012080 <USBD_LL_Init+0x98>)
 801204c:	f7f4 fcf0 	bl	8006a30 <HAL_PCD_Init>
 8012050:	4603      	mov	r3, r0
 8012052:	2b00      	cmp	r3, #0
 8012054:	d001      	beq.n	801205a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8012056:	f7ef f96c 	bl	8001332 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801205a:	2180      	movs	r1, #128	@ 0x80
 801205c:	4808      	ldr	r0, [pc, #32]	@ (8012080 <USBD_LL_Init+0x98>)
 801205e:	f7f5 ff44 	bl	8007eea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8012062:	2240      	movs	r2, #64	@ 0x40
 8012064:	2100      	movs	r1, #0
 8012066:	4806      	ldr	r0, [pc, #24]	@ (8012080 <USBD_LL_Init+0x98>)
 8012068:	f7f5 fef8 	bl	8007e5c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801206c:	2280      	movs	r2, #128	@ 0x80
 801206e:	2101      	movs	r1, #1
 8012070:	4803      	ldr	r0, [pc, #12]	@ (8012080 <USBD_LL_Init+0x98>)
 8012072:	f7f5 fef3 	bl	8007e5c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8012076:	2300      	movs	r3, #0
}
 8012078:	4618      	mov	r0, r3
 801207a:	3708      	adds	r7, #8
 801207c:	46bd      	mov	sp, r7
 801207e:	bd80      	pop	{r7, pc}
 8012080:	24001f10 	.word	0x24001f10
 8012084:	40080000 	.word	0x40080000

08012088 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012088:	b580      	push	{r7, lr}
 801208a:	b084      	sub	sp, #16
 801208c:	af00      	add	r7, sp, #0
 801208e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012090:	2300      	movs	r3, #0
 8012092:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012094:	2300      	movs	r3, #0
 8012096:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801209e:	4618      	mov	r0, r3
 80120a0:	f7f4 fdd2 	bl	8006c48 <HAL_PCD_Start>
 80120a4:	4603      	mov	r3, r0
 80120a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80120a8:	7bfb      	ldrb	r3, [r7, #15]
 80120aa:	4618      	mov	r0, r3
 80120ac:	f000 f942 	bl	8012334 <USBD_Get_USB_Status>
 80120b0:	4603      	mov	r3, r0
 80120b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80120b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80120b6:	4618      	mov	r0, r3
 80120b8:	3710      	adds	r7, #16
 80120ba:	46bd      	mov	sp, r7
 80120bc:	bd80      	pop	{r7, pc}

080120be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80120be:	b580      	push	{r7, lr}
 80120c0:	b084      	sub	sp, #16
 80120c2:	af00      	add	r7, sp, #0
 80120c4:	6078      	str	r0, [r7, #4]
 80120c6:	4608      	mov	r0, r1
 80120c8:	4611      	mov	r1, r2
 80120ca:	461a      	mov	r2, r3
 80120cc:	4603      	mov	r3, r0
 80120ce:	70fb      	strb	r3, [r7, #3]
 80120d0:	460b      	mov	r3, r1
 80120d2:	70bb      	strb	r3, [r7, #2]
 80120d4:	4613      	mov	r3, r2
 80120d6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80120d8:	2300      	movs	r3, #0
 80120da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80120dc:	2300      	movs	r3, #0
 80120de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80120e6:	78bb      	ldrb	r3, [r7, #2]
 80120e8:	883a      	ldrh	r2, [r7, #0]
 80120ea:	78f9      	ldrb	r1, [r7, #3]
 80120ec:	f7f5 fad3 	bl	8007696 <HAL_PCD_EP_Open>
 80120f0:	4603      	mov	r3, r0
 80120f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80120f4:	7bfb      	ldrb	r3, [r7, #15]
 80120f6:	4618      	mov	r0, r3
 80120f8:	f000 f91c 	bl	8012334 <USBD_Get_USB_Status>
 80120fc:	4603      	mov	r3, r0
 80120fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012100:	7bbb      	ldrb	r3, [r7, #14]
}
 8012102:	4618      	mov	r0, r3
 8012104:	3710      	adds	r7, #16
 8012106:	46bd      	mov	sp, r7
 8012108:	bd80      	pop	{r7, pc}

0801210a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801210a:	b580      	push	{r7, lr}
 801210c:	b084      	sub	sp, #16
 801210e:	af00      	add	r7, sp, #0
 8012110:	6078      	str	r0, [r7, #4]
 8012112:	460b      	mov	r3, r1
 8012114:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012116:	2300      	movs	r3, #0
 8012118:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801211a:	2300      	movs	r3, #0
 801211c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012124:	78fa      	ldrb	r2, [r7, #3]
 8012126:	4611      	mov	r1, r2
 8012128:	4618      	mov	r0, r3
 801212a:	f7f5 fb1c 	bl	8007766 <HAL_PCD_EP_Close>
 801212e:	4603      	mov	r3, r0
 8012130:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012132:	7bfb      	ldrb	r3, [r7, #15]
 8012134:	4618      	mov	r0, r3
 8012136:	f000 f8fd 	bl	8012334 <USBD_Get_USB_Status>
 801213a:	4603      	mov	r3, r0
 801213c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801213e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012140:	4618      	mov	r0, r3
 8012142:	3710      	adds	r7, #16
 8012144:	46bd      	mov	sp, r7
 8012146:	bd80      	pop	{r7, pc}

08012148 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012148:	b580      	push	{r7, lr}
 801214a:	b084      	sub	sp, #16
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]
 8012150:	460b      	mov	r3, r1
 8012152:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012154:	2300      	movs	r3, #0
 8012156:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012158:	2300      	movs	r3, #0
 801215a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012162:	78fa      	ldrb	r2, [r7, #3]
 8012164:	4611      	mov	r1, r2
 8012166:	4618      	mov	r0, r3
 8012168:	f7f5 fbd4 	bl	8007914 <HAL_PCD_EP_SetStall>
 801216c:	4603      	mov	r3, r0
 801216e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012170:	7bfb      	ldrb	r3, [r7, #15]
 8012172:	4618      	mov	r0, r3
 8012174:	f000 f8de 	bl	8012334 <USBD_Get_USB_Status>
 8012178:	4603      	mov	r3, r0
 801217a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801217c:	7bbb      	ldrb	r3, [r7, #14]
}
 801217e:	4618      	mov	r0, r3
 8012180:	3710      	adds	r7, #16
 8012182:	46bd      	mov	sp, r7
 8012184:	bd80      	pop	{r7, pc}

08012186 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012186:	b580      	push	{r7, lr}
 8012188:	b084      	sub	sp, #16
 801218a:	af00      	add	r7, sp, #0
 801218c:	6078      	str	r0, [r7, #4]
 801218e:	460b      	mov	r3, r1
 8012190:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012192:	2300      	movs	r3, #0
 8012194:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012196:	2300      	movs	r3, #0
 8012198:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80121a0:	78fa      	ldrb	r2, [r7, #3]
 80121a2:	4611      	mov	r1, r2
 80121a4:	4618      	mov	r0, r3
 80121a6:	f7f5 fc18 	bl	80079da <HAL_PCD_EP_ClrStall>
 80121aa:	4603      	mov	r3, r0
 80121ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80121ae:	7bfb      	ldrb	r3, [r7, #15]
 80121b0:	4618      	mov	r0, r3
 80121b2:	f000 f8bf 	bl	8012334 <USBD_Get_USB_Status>
 80121b6:	4603      	mov	r3, r0
 80121b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80121ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80121bc:	4618      	mov	r0, r3
 80121be:	3710      	adds	r7, #16
 80121c0:	46bd      	mov	sp, r7
 80121c2:	bd80      	pop	{r7, pc}

080121c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80121c4:	b480      	push	{r7}
 80121c6:	b085      	sub	sp, #20
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	6078      	str	r0, [r7, #4]
 80121cc:	460b      	mov	r3, r1
 80121ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80121d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80121d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	da0b      	bge.n	80121f8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80121e0:	78fb      	ldrb	r3, [r7, #3]
 80121e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80121e6:	68f9      	ldr	r1, [r7, #12]
 80121e8:	4613      	mov	r3, r2
 80121ea:	00db      	lsls	r3, r3, #3
 80121ec:	4413      	add	r3, r2
 80121ee:	009b      	lsls	r3, r3, #2
 80121f0:	440b      	add	r3, r1
 80121f2:	3316      	adds	r3, #22
 80121f4:	781b      	ldrb	r3, [r3, #0]
 80121f6:	e00b      	b.n	8012210 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80121f8:	78fb      	ldrb	r3, [r7, #3]
 80121fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80121fe:	68f9      	ldr	r1, [r7, #12]
 8012200:	4613      	mov	r3, r2
 8012202:	00db      	lsls	r3, r3, #3
 8012204:	4413      	add	r3, r2
 8012206:	009b      	lsls	r3, r3, #2
 8012208:	440b      	add	r3, r1
 801220a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801220e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012210:	4618      	mov	r0, r3
 8012212:	3714      	adds	r7, #20
 8012214:	46bd      	mov	sp, r7
 8012216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221a:	4770      	bx	lr

0801221c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801221c:	b580      	push	{r7, lr}
 801221e:	b084      	sub	sp, #16
 8012220:	af00      	add	r7, sp, #0
 8012222:	6078      	str	r0, [r7, #4]
 8012224:	460b      	mov	r3, r1
 8012226:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012228:	2300      	movs	r3, #0
 801222a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801222c:	2300      	movs	r3, #0
 801222e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012236:	78fa      	ldrb	r2, [r7, #3]
 8012238:	4611      	mov	r1, r2
 801223a:	4618      	mov	r0, r3
 801223c:	f7f5 fa07 	bl	800764e <HAL_PCD_SetAddress>
 8012240:	4603      	mov	r3, r0
 8012242:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012244:	7bfb      	ldrb	r3, [r7, #15]
 8012246:	4618      	mov	r0, r3
 8012248:	f000 f874 	bl	8012334 <USBD_Get_USB_Status>
 801224c:	4603      	mov	r3, r0
 801224e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012250:	7bbb      	ldrb	r3, [r7, #14]
}
 8012252:	4618      	mov	r0, r3
 8012254:	3710      	adds	r7, #16
 8012256:	46bd      	mov	sp, r7
 8012258:	bd80      	pop	{r7, pc}

0801225a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801225a:	b580      	push	{r7, lr}
 801225c:	b086      	sub	sp, #24
 801225e:	af00      	add	r7, sp, #0
 8012260:	60f8      	str	r0, [r7, #12]
 8012262:	607a      	str	r2, [r7, #4]
 8012264:	603b      	str	r3, [r7, #0]
 8012266:	460b      	mov	r3, r1
 8012268:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801226a:	2300      	movs	r3, #0
 801226c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801226e:	2300      	movs	r3, #0
 8012270:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012278:	7af9      	ldrb	r1, [r7, #11]
 801227a:	683b      	ldr	r3, [r7, #0]
 801227c:	687a      	ldr	r2, [r7, #4]
 801227e:	f7f5 fb0f 	bl	80078a0 <HAL_PCD_EP_Transmit>
 8012282:	4603      	mov	r3, r0
 8012284:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012286:	7dfb      	ldrb	r3, [r7, #23]
 8012288:	4618      	mov	r0, r3
 801228a:	f000 f853 	bl	8012334 <USBD_Get_USB_Status>
 801228e:	4603      	mov	r3, r0
 8012290:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012292:	7dbb      	ldrb	r3, [r7, #22]
}
 8012294:	4618      	mov	r0, r3
 8012296:	3718      	adds	r7, #24
 8012298:	46bd      	mov	sp, r7
 801229a:	bd80      	pop	{r7, pc}

0801229c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801229c:	b580      	push	{r7, lr}
 801229e:	b086      	sub	sp, #24
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	60f8      	str	r0, [r7, #12]
 80122a4:	607a      	str	r2, [r7, #4]
 80122a6:	603b      	str	r3, [r7, #0]
 80122a8:	460b      	mov	r3, r1
 80122aa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80122ac:	2300      	movs	r3, #0
 80122ae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80122b0:	2300      	movs	r3, #0
 80122b2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80122ba:	7af9      	ldrb	r1, [r7, #11]
 80122bc:	683b      	ldr	r3, [r7, #0]
 80122be:	687a      	ldr	r2, [r7, #4]
 80122c0:	f7f5 fa9b 	bl	80077fa <HAL_PCD_EP_Receive>
 80122c4:	4603      	mov	r3, r0
 80122c6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80122c8:	7dfb      	ldrb	r3, [r7, #23]
 80122ca:	4618      	mov	r0, r3
 80122cc:	f000 f832 	bl	8012334 <USBD_Get_USB_Status>
 80122d0:	4603      	mov	r3, r0
 80122d2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80122d4:	7dbb      	ldrb	r3, [r7, #22]
}
 80122d6:	4618      	mov	r0, r3
 80122d8:	3718      	adds	r7, #24
 80122da:	46bd      	mov	sp, r7
 80122dc:	bd80      	pop	{r7, pc}

080122de <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80122de:	b580      	push	{r7, lr}
 80122e0:	b082      	sub	sp, #8
 80122e2:	af00      	add	r7, sp, #0
 80122e4:	6078      	str	r0, [r7, #4]
 80122e6:	460b      	mov	r3, r1
 80122e8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80122f0:	78fa      	ldrb	r2, [r7, #3]
 80122f2:	4611      	mov	r1, r2
 80122f4:	4618      	mov	r0, r3
 80122f6:	f7f5 fabb 	bl	8007870 <HAL_PCD_EP_GetRxCount>
 80122fa:	4603      	mov	r3, r0
}
 80122fc:	4618      	mov	r0, r3
 80122fe:	3708      	adds	r7, #8
 8012300:	46bd      	mov	sp, r7
 8012302:	bd80      	pop	{r7, pc}

08012304 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012304:	b480      	push	{r7}
 8012306:	b083      	sub	sp, #12
 8012308:	af00      	add	r7, sp, #0
 801230a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801230c:	4b03      	ldr	r3, [pc, #12]	@ (801231c <USBD_static_malloc+0x18>)
}
 801230e:	4618      	mov	r0, r3
 8012310:	370c      	adds	r7, #12
 8012312:	46bd      	mov	sp, r7
 8012314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012318:	4770      	bx	lr
 801231a:	bf00      	nop
 801231c:	240023f4 	.word	0x240023f4

08012320 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012320:	b480      	push	{r7}
 8012322:	b083      	sub	sp, #12
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8012328:	bf00      	nop
 801232a:	370c      	adds	r7, #12
 801232c:	46bd      	mov	sp, r7
 801232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012332:	4770      	bx	lr

08012334 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012334:	b480      	push	{r7}
 8012336:	b085      	sub	sp, #20
 8012338:	af00      	add	r7, sp, #0
 801233a:	4603      	mov	r3, r0
 801233c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801233e:	2300      	movs	r3, #0
 8012340:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012342:	79fb      	ldrb	r3, [r7, #7]
 8012344:	2b03      	cmp	r3, #3
 8012346:	d817      	bhi.n	8012378 <USBD_Get_USB_Status+0x44>
 8012348:	a201      	add	r2, pc, #4	@ (adr r2, 8012350 <USBD_Get_USB_Status+0x1c>)
 801234a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801234e:	bf00      	nop
 8012350:	08012361 	.word	0x08012361
 8012354:	08012367 	.word	0x08012367
 8012358:	0801236d 	.word	0x0801236d
 801235c:	08012373 	.word	0x08012373
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012360:	2300      	movs	r3, #0
 8012362:	73fb      	strb	r3, [r7, #15]
    break;
 8012364:	e00b      	b.n	801237e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012366:	2303      	movs	r3, #3
 8012368:	73fb      	strb	r3, [r7, #15]
    break;
 801236a:	e008      	b.n	801237e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801236c:	2301      	movs	r3, #1
 801236e:	73fb      	strb	r3, [r7, #15]
    break;
 8012370:	e005      	b.n	801237e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012372:	2303      	movs	r3, #3
 8012374:	73fb      	strb	r3, [r7, #15]
    break;
 8012376:	e002      	b.n	801237e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012378:	2303      	movs	r3, #3
 801237a:	73fb      	strb	r3, [r7, #15]
    break;
 801237c:	bf00      	nop
  }
  return usb_status;
 801237e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012380:	4618      	mov	r0, r3
 8012382:	3714      	adds	r7, #20
 8012384:	46bd      	mov	sp, r7
 8012386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801238a:	4770      	bx	lr

0801238c <__cvt>:
 801238c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801238e:	ed2d 8b02 	vpush	{d8}
 8012392:	eeb0 8b40 	vmov.f64	d8, d0
 8012396:	b085      	sub	sp, #20
 8012398:	4617      	mov	r7, r2
 801239a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801239c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801239e:	ee18 2a90 	vmov	r2, s17
 80123a2:	f025 0520 	bic.w	r5, r5, #32
 80123a6:	2a00      	cmp	r2, #0
 80123a8:	bfb6      	itet	lt
 80123aa:	222d      	movlt	r2, #45	@ 0x2d
 80123ac:	2200      	movge	r2, #0
 80123ae:	eeb1 8b40 	vneglt.f64	d8, d0
 80123b2:	2d46      	cmp	r5, #70	@ 0x46
 80123b4:	460c      	mov	r4, r1
 80123b6:	701a      	strb	r2, [r3, #0]
 80123b8:	d004      	beq.n	80123c4 <__cvt+0x38>
 80123ba:	2d45      	cmp	r5, #69	@ 0x45
 80123bc:	d100      	bne.n	80123c0 <__cvt+0x34>
 80123be:	3401      	adds	r4, #1
 80123c0:	2102      	movs	r1, #2
 80123c2:	e000      	b.n	80123c6 <__cvt+0x3a>
 80123c4:	2103      	movs	r1, #3
 80123c6:	ab03      	add	r3, sp, #12
 80123c8:	9301      	str	r3, [sp, #4]
 80123ca:	ab02      	add	r3, sp, #8
 80123cc:	9300      	str	r3, [sp, #0]
 80123ce:	4622      	mov	r2, r4
 80123d0:	4633      	mov	r3, r6
 80123d2:	eeb0 0b48 	vmov.f64	d0, d8
 80123d6:	f000 fe3f 	bl	8013058 <_dtoa_r>
 80123da:	2d47      	cmp	r5, #71	@ 0x47
 80123dc:	d114      	bne.n	8012408 <__cvt+0x7c>
 80123de:	07fb      	lsls	r3, r7, #31
 80123e0:	d50a      	bpl.n	80123f8 <__cvt+0x6c>
 80123e2:	1902      	adds	r2, r0, r4
 80123e4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80123e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123ec:	bf08      	it	eq
 80123ee:	9203      	streq	r2, [sp, #12]
 80123f0:	2130      	movs	r1, #48	@ 0x30
 80123f2:	9b03      	ldr	r3, [sp, #12]
 80123f4:	4293      	cmp	r3, r2
 80123f6:	d319      	bcc.n	801242c <__cvt+0xa0>
 80123f8:	9b03      	ldr	r3, [sp, #12]
 80123fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80123fc:	1a1b      	subs	r3, r3, r0
 80123fe:	6013      	str	r3, [r2, #0]
 8012400:	b005      	add	sp, #20
 8012402:	ecbd 8b02 	vpop	{d8}
 8012406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012408:	2d46      	cmp	r5, #70	@ 0x46
 801240a:	eb00 0204 	add.w	r2, r0, r4
 801240e:	d1e9      	bne.n	80123e4 <__cvt+0x58>
 8012410:	7803      	ldrb	r3, [r0, #0]
 8012412:	2b30      	cmp	r3, #48	@ 0x30
 8012414:	d107      	bne.n	8012426 <__cvt+0x9a>
 8012416:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801241a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801241e:	bf1c      	itt	ne
 8012420:	f1c4 0401 	rsbne	r4, r4, #1
 8012424:	6034      	strne	r4, [r6, #0]
 8012426:	6833      	ldr	r3, [r6, #0]
 8012428:	441a      	add	r2, r3
 801242a:	e7db      	b.n	80123e4 <__cvt+0x58>
 801242c:	1c5c      	adds	r4, r3, #1
 801242e:	9403      	str	r4, [sp, #12]
 8012430:	7019      	strb	r1, [r3, #0]
 8012432:	e7de      	b.n	80123f2 <__cvt+0x66>

08012434 <__exponent>:
 8012434:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012436:	2900      	cmp	r1, #0
 8012438:	bfba      	itte	lt
 801243a:	4249      	neglt	r1, r1
 801243c:	232d      	movlt	r3, #45	@ 0x2d
 801243e:	232b      	movge	r3, #43	@ 0x2b
 8012440:	2909      	cmp	r1, #9
 8012442:	7002      	strb	r2, [r0, #0]
 8012444:	7043      	strb	r3, [r0, #1]
 8012446:	dd29      	ble.n	801249c <__exponent+0x68>
 8012448:	f10d 0307 	add.w	r3, sp, #7
 801244c:	461d      	mov	r5, r3
 801244e:	270a      	movs	r7, #10
 8012450:	461a      	mov	r2, r3
 8012452:	fbb1 f6f7 	udiv	r6, r1, r7
 8012456:	fb07 1416 	mls	r4, r7, r6, r1
 801245a:	3430      	adds	r4, #48	@ 0x30
 801245c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8012460:	460c      	mov	r4, r1
 8012462:	2c63      	cmp	r4, #99	@ 0x63
 8012464:	f103 33ff 	add.w	r3, r3, #4294967295
 8012468:	4631      	mov	r1, r6
 801246a:	dcf1      	bgt.n	8012450 <__exponent+0x1c>
 801246c:	3130      	adds	r1, #48	@ 0x30
 801246e:	1e94      	subs	r4, r2, #2
 8012470:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012474:	1c41      	adds	r1, r0, #1
 8012476:	4623      	mov	r3, r4
 8012478:	42ab      	cmp	r3, r5
 801247a:	d30a      	bcc.n	8012492 <__exponent+0x5e>
 801247c:	f10d 0309 	add.w	r3, sp, #9
 8012480:	1a9b      	subs	r3, r3, r2
 8012482:	42ac      	cmp	r4, r5
 8012484:	bf88      	it	hi
 8012486:	2300      	movhi	r3, #0
 8012488:	3302      	adds	r3, #2
 801248a:	4403      	add	r3, r0
 801248c:	1a18      	subs	r0, r3, r0
 801248e:	b003      	add	sp, #12
 8012490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012492:	f813 6b01 	ldrb.w	r6, [r3], #1
 8012496:	f801 6f01 	strb.w	r6, [r1, #1]!
 801249a:	e7ed      	b.n	8012478 <__exponent+0x44>
 801249c:	2330      	movs	r3, #48	@ 0x30
 801249e:	3130      	adds	r1, #48	@ 0x30
 80124a0:	7083      	strb	r3, [r0, #2]
 80124a2:	70c1      	strb	r1, [r0, #3]
 80124a4:	1d03      	adds	r3, r0, #4
 80124a6:	e7f1      	b.n	801248c <__exponent+0x58>

080124a8 <_printf_float>:
 80124a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124ac:	b08d      	sub	sp, #52	@ 0x34
 80124ae:	460c      	mov	r4, r1
 80124b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80124b4:	4616      	mov	r6, r2
 80124b6:	461f      	mov	r7, r3
 80124b8:	4605      	mov	r5, r0
 80124ba:	f000 fccb 	bl	8012e54 <_localeconv_r>
 80124be:	f8d0 b000 	ldr.w	fp, [r0]
 80124c2:	4658      	mov	r0, fp
 80124c4:	f7ed ff5c 	bl	8000380 <strlen>
 80124c8:	2300      	movs	r3, #0
 80124ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80124cc:	f8d8 3000 	ldr.w	r3, [r8]
 80124d0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80124d4:	6822      	ldr	r2, [r4, #0]
 80124d6:	9005      	str	r0, [sp, #20]
 80124d8:	3307      	adds	r3, #7
 80124da:	f023 0307 	bic.w	r3, r3, #7
 80124de:	f103 0108 	add.w	r1, r3, #8
 80124e2:	f8c8 1000 	str.w	r1, [r8]
 80124e6:	ed93 0b00 	vldr	d0, [r3]
 80124ea:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8012748 <_printf_float+0x2a0>
 80124ee:	eeb0 7bc0 	vabs.f64	d7, d0
 80124f2:	eeb4 7b46 	vcmp.f64	d7, d6
 80124f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124fa:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80124fe:	dd24      	ble.n	801254a <_printf_float+0xa2>
 8012500:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012508:	d502      	bpl.n	8012510 <_printf_float+0x68>
 801250a:	232d      	movs	r3, #45	@ 0x2d
 801250c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012510:	498f      	ldr	r1, [pc, #572]	@ (8012750 <_printf_float+0x2a8>)
 8012512:	4b90      	ldr	r3, [pc, #576]	@ (8012754 <_printf_float+0x2ac>)
 8012514:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8012518:	bf94      	ite	ls
 801251a:	4688      	movls	r8, r1
 801251c:	4698      	movhi	r8, r3
 801251e:	f022 0204 	bic.w	r2, r2, #4
 8012522:	2303      	movs	r3, #3
 8012524:	6123      	str	r3, [r4, #16]
 8012526:	6022      	str	r2, [r4, #0]
 8012528:	f04f 0a00 	mov.w	sl, #0
 801252c:	9700      	str	r7, [sp, #0]
 801252e:	4633      	mov	r3, r6
 8012530:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012532:	4621      	mov	r1, r4
 8012534:	4628      	mov	r0, r5
 8012536:	f000 f9d1 	bl	80128dc <_printf_common>
 801253a:	3001      	adds	r0, #1
 801253c:	f040 8089 	bne.w	8012652 <_printf_float+0x1aa>
 8012540:	f04f 30ff 	mov.w	r0, #4294967295
 8012544:	b00d      	add	sp, #52	@ 0x34
 8012546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801254a:	eeb4 0b40 	vcmp.f64	d0, d0
 801254e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012552:	d709      	bvc.n	8012568 <_printf_float+0xc0>
 8012554:	ee10 3a90 	vmov	r3, s1
 8012558:	2b00      	cmp	r3, #0
 801255a:	bfbc      	itt	lt
 801255c:	232d      	movlt	r3, #45	@ 0x2d
 801255e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8012562:	497d      	ldr	r1, [pc, #500]	@ (8012758 <_printf_float+0x2b0>)
 8012564:	4b7d      	ldr	r3, [pc, #500]	@ (801275c <_printf_float+0x2b4>)
 8012566:	e7d5      	b.n	8012514 <_printf_float+0x6c>
 8012568:	6863      	ldr	r3, [r4, #4]
 801256a:	1c59      	adds	r1, r3, #1
 801256c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8012570:	d139      	bne.n	80125e6 <_printf_float+0x13e>
 8012572:	2306      	movs	r3, #6
 8012574:	6063      	str	r3, [r4, #4]
 8012576:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801257a:	2300      	movs	r3, #0
 801257c:	6022      	str	r2, [r4, #0]
 801257e:	9303      	str	r3, [sp, #12]
 8012580:	ab0a      	add	r3, sp, #40	@ 0x28
 8012582:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8012586:	ab09      	add	r3, sp, #36	@ 0x24
 8012588:	9300      	str	r3, [sp, #0]
 801258a:	6861      	ldr	r1, [r4, #4]
 801258c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8012590:	4628      	mov	r0, r5
 8012592:	f7ff fefb 	bl	801238c <__cvt>
 8012596:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801259a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801259c:	4680      	mov	r8, r0
 801259e:	d129      	bne.n	80125f4 <_printf_float+0x14c>
 80125a0:	1cc8      	adds	r0, r1, #3
 80125a2:	db02      	blt.n	80125aa <_printf_float+0x102>
 80125a4:	6863      	ldr	r3, [r4, #4]
 80125a6:	4299      	cmp	r1, r3
 80125a8:	dd41      	ble.n	801262e <_printf_float+0x186>
 80125aa:	f1a9 0902 	sub.w	r9, r9, #2
 80125ae:	fa5f f989 	uxtb.w	r9, r9
 80125b2:	3901      	subs	r1, #1
 80125b4:	464a      	mov	r2, r9
 80125b6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80125ba:	9109      	str	r1, [sp, #36]	@ 0x24
 80125bc:	f7ff ff3a 	bl	8012434 <__exponent>
 80125c0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80125c2:	1813      	adds	r3, r2, r0
 80125c4:	2a01      	cmp	r2, #1
 80125c6:	4682      	mov	sl, r0
 80125c8:	6123      	str	r3, [r4, #16]
 80125ca:	dc02      	bgt.n	80125d2 <_printf_float+0x12a>
 80125cc:	6822      	ldr	r2, [r4, #0]
 80125ce:	07d2      	lsls	r2, r2, #31
 80125d0:	d501      	bpl.n	80125d6 <_printf_float+0x12e>
 80125d2:	3301      	adds	r3, #1
 80125d4:	6123      	str	r3, [r4, #16]
 80125d6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d0a6      	beq.n	801252c <_printf_float+0x84>
 80125de:	232d      	movs	r3, #45	@ 0x2d
 80125e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80125e4:	e7a2      	b.n	801252c <_printf_float+0x84>
 80125e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80125ea:	d1c4      	bne.n	8012576 <_printf_float+0xce>
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d1c2      	bne.n	8012576 <_printf_float+0xce>
 80125f0:	2301      	movs	r3, #1
 80125f2:	e7bf      	b.n	8012574 <_printf_float+0xcc>
 80125f4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80125f8:	d9db      	bls.n	80125b2 <_printf_float+0x10a>
 80125fa:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80125fe:	d118      	bne.n	8012632 <_printf_float+0x18a>
 8012600:	2900      	cmp	r1, #0
 8012602:	6863      	ldr	r3, [r4, #4]
 8012604:	dd0b      	ble.n	801261e <_printf_float+0x176>
 8012606:	6121      	str	r1, [r4, #16]
 8012608:	b913      	cbnz	r3, 8012610 <_printf_float+0x168>
 801260a:	6822      	ldr	r2, [r4, #0]
 801260c:	07d0      	lsls	r0, r2, #31
 801260e:	d502      	bpl.n	8012616 <_printf_float+0x16e>
 8012610:	3301      	adds	r3, #1
 8012612:	440b      	add	r3, r1
 8012614:	6123      	str	r3, [r4, #16]
 8012616:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012618:	f04f 0a00 	mov.w	sl, #0
 801261c:	e7db      	b.n	80125d6 <_printf_float+0x12e>
 801261e:	b913      	cbnz	r3, 8012626 <_printf_float+0x17e>
 8012620:	6822      	ldr	r2, [r4, #0]
 8012622:	07d2      	lsls	r2, r2, #31
 8012624:	d501      	bpl.n	801262a <_printf_float+0x182>
 8012626:	3302      	adds	r3, #2
 8012628:	e7f4      	b.n	8012614 <_printf_float+0x16c>
 801262a:	2301      	movs	r3, #1
 801262c:	e7f2      	b.n	8012614 <_printf_float+0x16c>
 801262e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8012632:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012634:	4299      	cmp	r1, r3
 8012636:	db05      	blt.n	8012644 <_printf_float+0x19c>
 8012638:	6823      	ldr	r3, [r4, #0]
 801263a:	6121      	str	r1, [r4, #16]
 801263c:	07d8      	lsls	r0, r3, #31
 801263e:	d5ea      	bpl.n	8012616 <_printf_float+0x16e>
 8012640:	1c4b      	adds	r3, r1, #1
 8012642:	e7e7      	b.n	8012614 <_printf_float+0x16c>
 8012644:	2900      	cmp	r1, #0
 8012646:	bfd4      	ite	le
 8012648:	f1c1 0202 	rsble	r2, r1, #2
 801264c:	2201      	movgt	r2, #1
 801264e:	4413      	add	r3, r2
 8012650:	e7e0      	b.n	8012614 <_printf_float+0x16c>
 8012652:	6823      	ldr	r3, [r4, #0]
 8012654:	055a      	lsls	r2, r3, #21
 8012656:	d407      	bmi.n	8012668 <_printf_float+0x1c0>
 8012658:	6923      	ldr	r3, [r4, #16]
 801265a:	4642      	mov	r2, r8
 801265c:	4631      	mov	r1, r6
 801265e:	4628      	mov	r0, r5
 8012660:	47b8      	blx	r7
 8012662:	3001      	adds	r0, #1
 8012664:	d12a      	bne.n	80126bc <_printf_float+0x214>
 8012666:	e76b      	b.n	8012540 <_printf_float+0x98>
 8012668:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801266c:	f240 80e0 	bls.w	8012830 <_printf_float+0x388>
 8012670:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8012674:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801267c:	d133      	bne.n	80126e6 <_printf_float+0x23e>
 801267e:	4a38      	ldr	r2, [pc, #224]	@ (8012760 <_printf_float+0x2b8>)
 8012680:	2301      	movs	r3, #1
 8012682:	4631      	mov	r1, r6
 8012684:	4628      	mov	r0, r5
 8012686:	47b8      	blx	r7
 8012688:	3001      	adds	r0, #1
 801268a:	f43f af59 	beq.w	8012540 <_printf_float+0x98>
 801268e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8012692:	4543      	cmp	r3, r8
 8012694:	db02      	blt.n	801269c <_printf_float+0x1f4>
 8012696:	6823      	ldr	r3, [r4, #0]
 8012698:	07d8      	lsls	r0, r3, #31
 801269a:	d50f      	bpl.n	80126bc <_printf_float+0x214>
 801269c:	9b05      	ldr	r3, [sp, #20]
 801269e:	465a      	mov	r2, fp
 80126a0:	4631      	mov	r1, r6
 80126a2:	4628      	mov	r0, r5
 80126a4:	47b8      	blx	r7
 80126a6:	3001      	adds	r0, #1
 80126a8:	f43f af4a 	beq.w	8012540 <_printf_float+0x98>
 80126ac:	f04f 0900 	mov.w	r9, #0
 80126b0:	f108 38ff 	add.w	r8, r8, #4294967295
 80126b4:	f104 0a1a 	add.w	sl, r4, #26
 80126b8:	45c8      	cmp	r8, r9
 80126ba:	dc09      	bgt.n	80126d0 <_printf_float+0x228>
 80126bc:	6823      	ldr	r3, [r4, #0]
 80126be:	079b      	lsls	r3, r3, #30
 80126c0:	f100 8107 	bmi.w	80128d2 <_printf_float+0x42a>
 80126c4:	68e0      	ldr	r0, [r4, #12]
 80126c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80126c8:	4298      	cmp	r0, r3
 80126ca:	bfb8      	it	lt
 80126cc:	4618      	movlt	r0, r3
 80126ce:	e739      	b.n	8012544 <_printf_float+0x9c>
 80126d0:	2301      	movs	r3, #1
 80126d2:	4652      	mov	r2, sl
 80126d4:	4631      	mov	r1, r6
 80126d6:	4628      	mov	r0, r5
 80126d8:	47b8      	blx	r7
 80126da:	3001      	adds	r0, #1
 80126dc:	f43f af30 	beq.w	8012540 <_printf_float+0x98>
 80126e0:	f109 0901 	add.w	r9, r9, #1
 80126e4:	e7e8      	b.n	80126b8 <_printf_float+0x210>
 80126e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	dc3b      	bgt.n	8012764 <_printf_float+0x2bc>
 80126ec:	4a1c      	ldr	r2, [pc, #112]	@ (8012760 <_printf_float+0x2b8>)
 80126ee:	2301      	movs	r3, #1
 80126f0:	4631      	mov	r1, r6
 80126f2:	4628      	mov	r0, r5
 80126f4:	47b8      	blx	r7
 80126f6:	3001      	adds	r0, #1
 80126f8:	f43f af22 	beq.w	8012540 <_printf_float+0x98>
 80126fc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012700:	ea59 0303 	orrs.w	r3, r9, r3
 8012704:	d102      	bne.n	801270c <_printf_float+0x264>
 8012706:	6823      	ldr	r3, [r4, #0]
 8012708:	07d9      	lsls	r1, r3, #31
 801270a:	d5d7      	bpl.n	80126bc <_printf_float+0x214>
 801270c:	9b05      	ldr	r3, [sp, #20]
 801270e:	465a      	mov	r2, fp
 8012710:	4631      	mov	r1, r6
 8012712:	4628      	mov	r0, r5
 8012714:	47b8      	blx	r7
 8012716:	3001      	adds	r0, #1
 8012718:	f43f af12 	beq.w	8012540 <_printf_float+0x98>
 801271c:	f04f 0a00 	mov.w	sl, #0
 8012720:	f104 0b1a 	add.w	fp, r4, #26
 8012724:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012726:	425b      	negs	r3, r3
 8012728:	4553      	cmp	r3, sl
 801272a:	dc01      	bgt.n	8012730 <_printf_float+0x288>
 801272c:	464b      	mov	r3, r9
 801272e:	e794      	b.n	801265a <_printf_float+0x1b2>
 8012730:	2301      	movs	r3, #1
 8012732:	465a      	mov	r2, fp
 8012734:	4631      	mov	r1, r6
 8012736:	4628      	mov	r0, r5
 8012738:	47b8      	blx	r7
 801273a:	3001      	adds	r0, #1
 801273c:	f43f af00 	beq.w	8012540 <_printf_float+0x98>
 8012740:	f10a 0a01 	add.w	sl, sl, #1
 8012744:	e7ee      	b.n	8012724 <_printf_float+0x27c>
 8012746:	bf00      	nop
 8012748:	ffffffff 	.word	0xffffffff
 801274c:	7fefffff 	.word	0x7fefffff
 8012750:	0801503c 	.word	0x0801503c
 8012754:	08015040 	.word	0x08015040
 8012758:	08015044 	.word	0x08015044
 801275c:	08015048 	.word	0x08015048
 8012760:	0801504c 	.word	0x0801504c
 8012764:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012766:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801276a:	4553      	cmp	r3, sl
 801276c:	bfa8      	it	ge
 801276e:	4653      	movge	r3, sl
 8012770:	2b00      	cmp	r3, #0
 8012772:	4699      	mov	r9, r3
 8012774:	dc37      	bgt.n	80127e6 <_printf_float+0x33e>
 8012776:	2300      	movs	r3, #0
 8012778:	9307      	str	r3, [sp, #28]
 801277a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801277e:	f104 021a 	add.w	r2, r4, #26
 8012782:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012784:	9907      	ldr	r1, [sp, #28]
 8012786:	9306      	str	r3, [sp, #24]
 8012788:	eba3 0309 	sub.w	r3, r3, r9
 801278c:	428b      	cmp	r3, r1
 801278e:	dc31      	bgt.n	80127f4 <_printf_float+0x34c>
 8012790:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012792:	459a      	cmp	sl, r3
 8012794:	dc3b      	bgt.n	801280e <_printf_float+0x366>
 8012796:	6823      	ldr	r3, [r4, #0]
 8012798:	07da      	lsls	r2, r3, #31
 801279a:	d438      	bmi.n	801280e <_printf_float+0x366>
 801279c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801279e:	ebaa 0903 	sub.w	r9, sl, r3
 80127a2:	9b06      	ldr	r3, [sp, #24]
 80127a4:	ebaa 0303 	sub.w	r3, sl, r3
 80127a8:	4599      	cmp	r9, r3
 80127aa:	bfa8      	it	ge
 80127ac:	4699      	movge	r9, r3
 80127ae:	f1b9 0f00 	cmp.w	r9, #0
 80127b2:	dc34      	bgt.n	801281e <_printf_float+0x376>
 80127b4:	f04f 0800 	mov.w	r8, #0
 80127b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80127bc:	f104 0b1a 	add.w	fp, r4, #26
 80127c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80127c2:	ebaa 0303 	sub.w	r3, sl, r3
 80127c6:	eba3 0309 	sub.w	r3, r3, r9
 80127ca:	4543      	cmp	r3, r8
 80127cc:	f77f af76 	ble.w	80126bc <_printf_float+0x214>
 80127d0:	2301      	movs	r3, #1
 80127d2:	465a      	mov	r2, fp
 80127d4:	4631      	mov	r1, r6
 80127d6:	4628      	mov	r0, r5
 80127d8:	47b8      	blx	r7
 80127da:	3001      	adds	r0, #1
 80127dc:	f43f aeb0 	beq.w	8012540 <_printf_float+0x98>
 80127e0:	f108 0801 	add.w	r8, r8, #1
 80127e4:	e7ec      	b.n	80127c0 <_printf_float+0x318>
 80127e6:	4642      	mov	r2, r8
 80127e8:	4631      	mov	r1, r6
 80127ea:	4628      	mov	r0, r5
 80127ec:	47b8      	blx	r7
 80127ee:	3001      	adds	r0, #1
 80127f0:	d1c1      	bne.n	8012776 <_printf_float+0x2ce>
 80127f2:	e6a5      	b.n	8012540 <_printf_float+0x98>
 80127f4:	2301      	movs	r3, #1
 80127f6:	4631      	mov	r1, r6
 80127f8:	4628      	mov	r0, r5
 80127fa:	9206      	str	r2, [sp, #24]
 80127fc:	47b8      	blx	r7
 80127fe:	3001      	adds	r0, #1
 8012800:	f43f ae9e 	beq.w	8012540 <_printf_float+0x98>
 8012804:	9b07      	ldr	r3, [sp, #28]
 8012806:	9a06      	ldr	r2, [sp, #24]
 8012808:	3301      	adds	r3, #1
 801280a:	9307      	str	r3, [sp, #28]
 801280c:	e7b9      	b.n	8012782 <_printf_float+0x2da>
 801280e:	9b05      	ldr	r3, [sp, #20]
 8012810:	465a      	mov	r2, fp
 8012812:	4631      	mov	r1, r6
 8012814:	4628      	mov	r0, r5
 8012816:	47b8      	blx	r7
 8012818:	3001      	adds	r0, #1
 801281a:	d1bf      	bne.n	801279c <_printf_float+0x2f4>
 801281c:	e690      	b.n	8012540 <_printf_float+0x98>
 801281e:	9a06      	ldr	r2, [sp, #24]
 8012820:	464b      	mov	r3, r9
 8012822:	4442      	add	r2, r8
 8012824:	4631      	mov	r1, r6
 8012826:	4628      	mov	r0, r5
 8012828:	47b8      	blx	r7
 801282a:	3001      	adds	r0, #1
 801282c:	d1c2      	bne.n	80127b4 <_printf_float+0x30c>
 801282e:	e687      	b.n	8012540 <_printf_float+0x98>
 8012830:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8012834:	f1b9 0f01 	cmp.w	r9, #1
 8012838:	dc01      	bgt.n	801283e <_printf_float+0x396>
 801283a:	07db      	lsls	r3, r3, #31
 801283c:	d536      	bpl.n	80128ac <_printf_float+0x404>
 801283e:	2301      	movs	r3, #1
 8012840:	4642      	mov	r2, r8
 8012842:	4631      	mov	r1, r6
 8012844:	4628      	mov	r0, r5
 8012846:	47b8      	blx	r7
 8012848:	3001      	adds	r0, #1
 801284a:	f43f ae79 	beq.w	8012540 <_printf_float+0x98>
 801284e:	9b05      	ldr	r3, [sp, #20]
 8012850:	465a      	mov	r2, fp
 8012852:	4631      	mov	r1, r6
 8012854:	4628      	mov	r0, r5
 8012856:	47b8      	blx	r7
 8012858:	3001      	adds	r0, #1
 801285a:	f43f ae71 	beq.w	8012540 <_printf_float+0x98>
 801285e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8012862:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801286a:	f109 39ff 	add.w	r9, r9, #4294967295
 801286e:	d018      	beq.n	80128a2 <_printf_float+0x3fa>
 8012870:	464b      	mov	r3, r9
 8012872:	f108 0201 	add.w	r2, r8, #1
 8012876:	4631      	mov	r1, r6
 8012878:	4628      	mov	r0, r5
 801287a:	47b8      	blx	r7
 801287c:	3001      	adds	r0, #1
 801287e:	d10c      	bne.n	801289a <_printf_float+0x3f2>
 8012880:	e65e      	b.n	8012540 <_printf_float+0x98>
 8012882:	2301      	movs	r3, #1
 8012884:	465a      	mov	r2, fp
 8012886:	4631      	mov	r1, r6
 8012888:	4628      	mov	r0, r5
 801288a:	47b8      	blx	r7
 801288c:	3001      	adds	r0, #1
 801288e:	f43f ae57 	beq.w	8012540 <_printf_float+0x98>
 8012892:	f108 0801 	add.w	r8, r8, #1
 8012896:	45c8      	cmp	r8, r9
 8012898:	dbf3      	blt.n	8012882 <_printf_float+0x3da>
 801289a:	4653      	mov	r3, sl
 801289c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80128a0:	e6dc      	b.n	801265c <_printf_float+0x1b4>
 80128a2:	f04f 0800 	mov.w	r8, #0
 80128a6:	f104 0b1a 	add.w	fp, r4, #26
 80128aa:	e7f4      	b.n	8012896 <_printf_float+0x3ee>
 80128ac:	2301      	movs	r3, #1
 80128ae:	4642      	mov	r2, r8
 80128b0:	e7e1      	b.n	8012876 <_printf_float+0x3ce>
 80128b2:	2301      	movs	r3, #1
 80128b4:	464a      	mov	r2, r9
 80128b6:	4631      	mov	r1, r6
 80128b8:	4628      	mov	r0, r5
 80128ba:	47b8      	blx	r7
 80128bc:	3001      	adds	r0, #1
 80128be:	f43f ae3f 	beq.w	8012540 <_printf_float+0x98>
 80128c2:	f108 0801 	add.w	r8, r8, #1
 80128c6:	68e3      	ldr	r3, [r4, #12]
 80128c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80128ca:	1a5b      	subs	r3, r3, r1
 80128cc:	4543      	cmp	r3, r8
 80128ce:	dcf0      	bgt.n	80128b2 <_printf_float+0x40a>
 80128d0:	e6f8      	b.n	80126c4 <_printf_float+0x21c>
 80128d2:	f04f 0800 	mov.w	r8, #0
 80128d6:	f104 0919 	add.w	r9, r4, #25
 80128da:	e7f4      	b.n	80128c6 <_printf_float+0x41e>

080128dc <_printf_common>:
 80128dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80128e0:	4616      	mov	r6, r2
 80128e2:	4698      	mov	r8, r3
 80128e4:	688a      	ldr	r2, [r1, #8]
 80128e6:	690b      	ldr	r3, [r1, #16]
 80128e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80128ec:	4293      	cmp	r3, r2
 80128ee:	bfb8      	it	lt
 80128f0:	4613      	movlt	r3, r2
 80128f2:	6033      	str	r3, [r6, #0]
 80128f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80128f8:	4607      	mov	r7, r0
 80128fa:	460c      	mov	r4, r1
 80128fc:	b10a      	cbz	r2, 8012902 <_printf_common+0x26>
 80128fe:	3301      	adds	r3, #1
 8012900:	6033      	str	r3, [r6, #0]
 8012902:	6823      	ldr	r3, [r4, #0]
 8012904:	0699      	lsls	r1, r3, #26
 8012906:	bf42      	ittt	mi
 8012908:	6833      	ldrmi	r3, [r6, #0]
 801290a:	3302      	addmi	r3, #2
 801290c:	6033      	strmi	r3, [r6, #0]
 801290e:	6825      	ldr	r5, [r4, #0]
 8012910:	f015 0506 	ands.w	r5, r5, #6
 8012914:	d106      	bne.n	8012924 <_printf_common+0x48>
 8012916:	f104 0a19 	add.w	sl, r4, #25
 801291a:	68e3      	ldr	r3, [r4, #12]
 801291c:	6832      	ldr	r2, [r6, #0]
 801291e:	1a9b      	subs	r3, r3, r2
 8012920:	42ab      	cmp	r3, r5
 8012922:	dc26      	bgt.n	8012972 <_printf_common+0x96>
 8012924:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012928:	6822      	ldr	r2, [r4, #0]
 801292a:	3b00      	subs	r3, #0
 801292c:	bf18      	it	ne
 801292e:	2301      	movne	r3, #1
 8012930:	0692      	lsls	r2, r2, #26
 8012932:	d42b      	bmi.n	801298c <_printf_common+0xb0>
 8012934:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012938:	4641      	mov	r1, r8
 801293a:	4638      	mov	r0, r7
 801293c:	47c8      	blx	r9
 801293e:	3001      	adds	r0, #1
 8012940:	d01e      	beq.n	8012980 <_printf_common+0xa4>
 8012942:	6823      	ldr	r3, [r4, #0]
 8012944:	6922      	ldr	r2, [r4, #16]
 8012946:	f003 0306 	and.w	r3, r3, #6
 801294a:	2b04      	cmp	r3, #4
 801294c:	bf02      	ittt	eq
 801294e:	68e5      	ldreq	r5, [r4, #12]
 8012950:	6833      	ldreq	r3, [r6, #0]
 8012952:	1aed      	subeq	r5, r5, r3
 8012954:	68a3      	ldr	r3, [r4, #8]
 8012956:	bf0c      	ite	eq
 8012958:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801295c:	2500      	movne	r5, #0
 801295e:	4293      	cmp	r3, r2
 8012960:	bfc4      	itt	gt
 8012962:	1a9b      	subgt	r3, r3, r2
 8012964:	18ed      	addgt	r5, r5, r3
 8012966:	2600      	movs	r6, #0
 8012968:	341a      	adds	r4, #26
 801296a:	42b5      	cmp	r5, r6
 801296c:	d11a      	bne.n	80129a4 <_printf_common+0xc8>
 801296e:	2000      	movs	r0, #0
 8012970:	e008      	b.n	8012984 <_printf_common+0xa8>
 8012972:	2301      	movs	r3, #1
 8012974:	4652      	mov	r2, sl
 8012976:	4641      	mov	r1, r8
 8012978:	4638      	mov	r0, r7
 801297a:	47c8      	blx	r9
 801297c:	3001      	adds	r0, #1
 801297e:	d103      	bne.n	8012988 <_printf_common+0xac>
 8012980:	f04f 30ff 	mov.w	r0, #4294967295
 8012984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012988:	3501      	adds	r5, #1
 801298a:	e7c6      	b.n	801291a <_printf_common+0x3e>
 801298c:	18e1      	adds	r1, r4, r3
 801298e:	1c5a      	adds	r2, r3, #1
 8012990:	2030      	movs	r0, #48	@ 0x30
 8012992:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012996:	4422      	add	r2, r4
 8012998:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801299c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80129a0:	3302      	adds	r3, #2
 80129a2:	e7c7      	b.n	8012934 <_printf_common+0x58>
 80129a4:	2301      	movs	r3, #1
 80129a6:	4622      	mov	r2, r4
 80129a8:	4641      	mov	r1, r8
 80129aa:	4638      	mov	r0, r7
 80129ac:	47c8      	blx	r9
 80129ae:	3001      	adds	r0, #1
 80129b0:	d0e6      	beq.n	8012980 <_printf_common+0xa4>
 80129b2:	3601      	adds	r6, #1
 80129b4:	e7d9      	b.n	801296a <_printf_common+0x8e>
	...

080129b8 <_printf_i>:
 80129b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80129bc:	7e0f      	ldrb	r7, [r1, #24]
 80129be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80129c0:	2f78      	cmp	r7, #120	@ 0x78
 80129c2:	4691      	mov	r9, r2
 80129c4:	4680      	mov	r8, r0
 80129c6:	460c      	mov	r4, r1
 80129c8:	469a      	mov	sl, r3
 80129ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80129ce:	d807      	bhi.n	80129e0 <_printf_i+0x28>
 80129d0:	2f62      	cmp	r7, #98	@ 0x62
 80129d2:	d80a      	bhi.n	80129ea <_printf_i+0x32>
 80129d4:	2f00      	cmp	r7, #0
 80129d6:	f000 80d2 	beq.w	8012b7e <_printf_i+0x1c6>
 80129da:	2f58      	cmp	r7, #88	@ 0x58
 80129dc:	f000 80b9 	beq.w	8012b52 <_printf_i+0x19a>
 80129e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80129e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80129e8:	e03a      	b.n	8012a60 <_printf_i+0xa8>
 80129ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80129ee:	2b15      	cmp	r3, #21
 80129f0:	d8f6      	bhi.n	80129e0 <_printf_i+0x28>
 80129f2:	a101      	add	r1, pc, #4	@ (adr r1, 80129f8 <_printf_i+0x40>)
 80129f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80129f8:	08012a51 	.word	0x08012a51
 80129fc:	08012a65 	.word	0x08012a65
 8012a00:	080129e1 	.word	0x080129e1
 8012a04:	080129e1 	.word	0x080129e1
 8012a08:	080129e1 	.word	0x080129e1
 8012a0c:	080129e1 	.word	0x080129e1
 8012a10:	08012a65 	.word	0x08012a65
 8012a14:	080129e1 	.word	0x080129e1
 8012a18:	080129e1 	.word	0x080129e1
 8012a1c:	080129e1 	.word	0x080129e1
 8012a20:	080129e1 	.word	0x080129e1
 8012a24:	08012b65 	.word	0x08012b65
 8012a28:	08012a8f 	.word	0x08012a8f
 8012a2c:	08012b1f 	.word	0x08012b1f
 8012a30:	080129e1 	.word	0x080129e1
 8012a34:	080129e1 	.word	0x080129e1
 8012a38:	08012b87 	.word	0x08012b87
 8012a3c:	080129e1 	.word	0x080129e1
 8012a40:	08012a8f 	.word	0x08012a8f
 8012a44:	080129e1 	.word	0x080129e1
 8012a48:	080129e1 	.word	0x080129e1
 8012a4c:	08012b27 	.word	0x08012b27
 8012a50:	6833      	ldr	r3, [r6, #0]
 8012a52:	1d1a      	adds	r2, r3, #4
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	6032      	str	r2, [r6, #0]
 8012a58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012a5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012a60:	2301      	movs	r3, #1
 8012a62:	e09d      	b.n	8012ba0 <_printf_i+0x1e8>
 8012a64:	6833      	ldr	r3, [r6, #0]
 8012a66:	6820      	ldr	r0, [r4, #0]
 8012a68:	1d19      	adds	r1, r3, #4
 8012a6a:	6031      	str	r1, [r6, #0]
 8012a6c:	0606      	lsls	r6, r0, #24
 8012a6e:	d501      	bpl.n	8012a74 <_printf_i+0xbc>
 8012a70:	681d      	ldr	r5, [r3, #0]
 8012a72:	e003      	b.n	8012a7c <_printf_i+0xc4>
 8012a74:	0645      	lsls	r5, r0, #25
 8012a76:	d5fb      	bpl.n	8012a70 <_printf_i+0xb8>
 8012a78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012a7c:	2d00      	cmp	r5, #0
 8012a7e:	da03      	bge.n	8012a88 <_printf_i+0xd0>
 8012a80:	232d      	movs	r3, #45	@ 0x2d
 8012a82:	426d      	negs	r5, r5
 8012a84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012a88:	4859      	ldr	r0, [pc, #356]	@ (8012bf0 <_printf_i+0x238>)
 8012a8a:	230a      	movs	r3, #10
 8012a8c:	e011      	b.n	8012ab2 <_printf_i+0xfa>
 8012a8e:	6821      	ldr	r1, [r4, #0]
 8012a90:	6833      	ldr	r3, [r6, #0]
 8012a92:	0608      	lsls	r0, r1, #24
 8012a94:	f853 5b04 	ldr.w	r5, [r3], #4
 8012a98:	d402      	bmi.n	8012aa0 <_printf_i+0xe8>
 8012a9a:	0649      	lsls	r1, r1, #25
 8012a9c:	bf48      	it	mi
 8012a9e:	b2ad      	uxthmi	r5, r5
 8012aa0:	2f6f      	cmp	r7, #111	@ 0x6f
 8012aa2:	4853      	ldr	r0, [pc, #332]	@ (8012bf0 <_printf_i+0x238>)
 8012aa4:	6033      	str	r3, [r6, #0]
 8012aa6:	bf14      	ite	ne
 8012aa8:	230a      	movne	r3, #10
 8012aaa:	2308      	moveq	r3, #8
 8012aac:	2100      	movs	r1, #0
 8012aae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012ab2:	6866      	ldr	r6, [r4, #4]
 8012ab4:	60a6      	str	r6, [r4, #8]
 8012ab6:	2e00      	cmp	r6, #0
 8012ab8:	bfa2      	ittt	ge
 8012aba:	6821      	ldrge	r1, [r4, #0]
 8012abc:	f021 0104 	bicge.w	r1, r1, #4
 8012ac0:	6021      	strge	r1, [r4, #0]
 8012ac2:	b90d      	cbnz	r5, 8012ac8 <_printf_i+0x110>
 8012ac4:	2e00      	cmp	r6, #0
 8012ac6:	d04b      	beq.n	8012b60 <_printf_i+0x1a8>
 8012ac8:	4616      	mov	r6, r2
 8012aca:	fbb5 f1f3 	udiv	r1, r5, r3
 8012ace:	fb03 5711 	mls	r7, r3, r1, r5
 8012ad2:	5dc7      	ldrb	r7, [r0, r7]
 8012ad4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012ad8:	462f      	mov	r7, r5
 8012ada:	42bb      	cmp	r3, r7
 8012adc:	460d      	mov	r5, r1
 8012ade:	d9f4      	bls.n	8012aca <_printf_i+0x112>
 8012ae0:	2b08      	cmp	r3, #8
 8012ae2:	d10b      	bne.n	8012afc <_printf_i+0x144>
 8012ae4:	6823      	ldr	r3, [r4, #0]
 8012ae6:	07df      	lsls	r7, r3, #31
 8012ae8:	d508      	bpl.n	8012afc <_printf_i+0x144>
 8012aea:	6923      	ldr	r3, [r4, #16]
 8012aec:	6861      	ldr	r1, [r4, #4]
 8012aee:	4299      	cmp	r1, r3
 8012af0:	bfde      	ittt	le
 8012af2:	2330      	movle	r3, #48	@ 0x30
 8012af4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012af8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012afc:	1b92      	subs	r2, r2, r6
 8012afe:	6122      	str	r2, [r4, #16]
 8012b00:	f8cd a000 	str.w	sl, [sp]
 8012b04:	464b      	mov	r3, r9
 8012b06:	aa03      	add	r2, sp, #12
 8012b08:	4621      	mov	r1, r4
 8012b0a:	4640      	mov	r0, r8
 8012b0c:	f7ff fee6 	bl	80128dc <_printf_common>
 8012b10:	3001      	adds	r0, #1
 8012b12:	d14a      	bne.n	8012baa <_printf_i+0x1f2>
 8012b14:	f04f 30ff 	mov.w	r0, #4294967295
 8012b18:	b004      	add	sp, #16
 8012b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b1e:	6823      	ldr	r3, [r4, #0]
 8012b20:	f043 0320 	orr.w	r3, r3, #32
 8012b24:	6023      	str	r3, [r4, #0]
 8012b26:	4833      	ldr	r0, [pc, #204]	@ (8012bf4 <_printf_i+0x23c>)
 8012b28:	2778      	movs	r7, #120	@ 0x78
 8012b2a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012b2e:	6823      	ldr	r3, [r4, #0]
 8012b30:	6831      	ldr	r1, [r6, #0]
 8012b32:	061f      	lsls	r7, r3, #24
 8012b34:	f851 5b04 	ldr.w	r5, [r1], #4
 8012b38:	d402      	bmi.n	8012b40 <_printf_i+0x188>
 8012b3a:	065f      	lsls	r7, r3, #25
 8012b3c:	bf48      	it	mi
 8012b3e:	b2ad      	uxthmi	r5, r5
 8012b40:	6031      	str	r1, [r6, #0]
 8012b42:	07d9      	lsls	r1, r3, #31
 8012b44:	bf44      	itt	mi
 8012b46:	f043 0320 	orrmi.w	r3, r3, #32
 8012b4a:	6023      	strmi	r3, [r4, #0]
 8012b4c:	b11d      	cbz	r5, 8012b56 <_printf_i+0x19e>
 8012b4e:	2310      	movs	r3, #16
 8012b50:	e7ac      	b.n	8012aac <_printf_i+0xf4>
 8012b52:	4827      	ldr	r0, [pc, #156]	@ (8012bf0 <_printf_i+0x238>)
 8012b54:	e7e9      	b.n	8012b2a <_printf_i+0x172>
 8012b56:	6823      	ldr	r3, [r4, #0]
 8012b58:	f023 0320 	bic.w	r3, r3, #32
 8012b5c:	6023      	str	r3, [r4, #0]
 8012b5e:	e7f6      	b.n	8012b4e <_printf_i+0x196>
 8012b60:	4616      	mov	r6, r2
 8012b62:	e7bd      	b.n	8012ae0 <_printf_i+0x128>
 8012b64:	6833      	ldr	r3, [r6, #0]
 8012b66:	6825      	ldr	r5, [r4, #0]
 8012b68:	6961      	ldr	r1, [r4, #20]
 8012b6a:	1d18      	adds	r0, r3, #4
 8012b6c:	6030      	str	r0, [r6, #0]
 8012b6e:	062e      	lsls	r6, r5, #24
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	d501      	bpl.n	8012b78 <_printf_i+0x1c0>
 8012b74:	6019      	str	r1, [r3, #0]
 8012b76:	e002      	b.n	8012b7e <_printf_i+0x1c6>
 8012b78:	0668      	lsls	r0, r5, #25
 8012b7a:	d5fb      	bpl.n	8012b74 <_printf_i+0x1bc>
 8012b7c:	8019      	strh	r1, [r3, #0]
 8012b7e:	2300      	movs	r3, #0
 8012b80:	6123      	str	r3, [r4, #16]
 8012b82:	4616      	mov	r6, r2
 8012b84:	e7bc      	b.n	8012b00 <_printf_i+0x148>
 8012b86:	6833      	ldr	r3, [r6, #0]
 8012b88:	1d1a      	adds	r2, r3, #4
 8012b8a:	6032      	str	r2, [r6, #0]
 8012b8c:	681e      	ldr	r6, [r3, #0]
 8012b8e:	6862      	ldr	r2, [r4, #4]
 8012b90:	2100      	movs	r1, #0
 8012b92:	4630      	mov	r0, r6
 8012b94:	f7ed fba4 	bl	80002e0 <memchr>
 8012b98:	b108      	cbz	r0, 8012b9e <_printf_i+0x1e6>
 8012b9a:	1b80      	subs	r0, r0, r6
 8012b9c:	6060      	str	r0, [r4, #4]
 8012b9e:	6863      	ldr	r3, [r4, #4]
 8012ba0:	6123      	str	r3, [r4, #16]
 8012ba2:	2300      	movs	r3, #0
 8012ba4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012ba8:	e7aa      	b.n	8012b00 <_printf_i+0x148>
 8012baa:	6923      	ldr	r3, [r4, #16]
 8012bac:	4632      	mov	r2, r6
 8012bae:	4649      	mov	r1, r9
 8012bb0:	4640      	mov	r0, r8
 8012bb2:	47d0      	blx	sl
 8012bb4:	3001      	adds	r0, #1
 8012bb6:	d0ad      	beq.n	8012b14 <_printf_i+0x15c>
 8012bb8:	6823      	ldr	r3, [r4, #0]
 8012bba:	079b      	lsls	r3, r3, #30
 8012bbc:	d413      	bmi.n	8012be6 <_printf_i+0x22e>
 8012bbe:	68e0      	ldr	r0, [r4, #12]
 8012bc0:	9b03      	ldr	r3, [sp, #12]
 8012bc2:	4298      	cmp	r0, r3
 8012bc4:	bfb8      	it	lt
 8012bc6:	4618      	movlt	r0, r3
 8012bc8:	e7a6      	b.n	8012b18 <_printf_i+0x160>
 8012bca:	2301      	movs	r3, #1
 8012bcc:	4632      	mov	r2, r6
 8012bce:	4649      	mov	r1, r9
 8012bd0:	4640      	mov	r0, r8
 8012bd2:	47d0      	blx	sl
 8012bd4:	3001      	adds	r0, #1
 8012bd6:	d09d      	beq.n	8012b14 <_printf_i+0x15c>
 8012bd8:	3501      	adds	r5, #1
 8012bda:	68e3      	ldr	r3, [r4, #12]
 8012bdc:	9903      	ldr	r1, [sp, #12]
 8012bde:	1a5b      	subs	r3, r3, r1
 8012be0:	42ab      	cmp	r3, r5
 8012be2:	dcf2      	bgt.n	8012bca <_printf_i+0x212>
 8012be4:	e7eb      	b.n	8012bbe <_printf_i+0x206>
 8012be6:	2500      	movs	r5, #0
 8012be8:	f104 0619 	add.w	r6, r4, #25
 8012bec:	e7f5      	b.n	8012bda <_printf_i+0x222>
 8012bee:	bf00      	nop
 8012bf0:	0801504e 	.word	0x0801504e
 8012bf4:	0801505f 	.word	0x0801505f

08012bf8 <std>:
 8012bf8:	2300      	movs	r3, #0
 8012bfa:	b510      	push	{r4, lr}
 8012bfc:	4604      	mov	r4, r0
 8012bfe:	e9c0 3300 	strd	r3, r3, [r0]
 8012c02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012c06:	6083      	str	r3, [r0, #8]
 8012c08:	8181      	strh	r1, [r0, #12]
 8012c0a:	6643      	str	r3, [r0, #100]	@ 0x64
 8012c0c:	81c2      	strh	r2, [r0, #14]
 8012c0e:	6183      	str	r3, [r0, #24]
 8012c10:	4619      	mov	r1, r3
 8012c12:	2208      	movs	r2, #8
 8012c14:	305c      	adds	r0, #92	@ 0x5c
 8012c16:	f000 f914 	bl	8012e42 <memset>
 8012c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8012c50 <std+0x58>)
 8012c1c:	6263      	str	r3, [r4, #36]	@ 0x24
 8012c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8012c54 <std+0x5c>)
 8012c20:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012c22:	4b0d      	ldr	r3, [pc, #52]	@ (8012c58 <std+0x60>)
 8012c24:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012c26:	4b0d      	ldr	r3, [pc, #52]	@ (8012c5c <std+0x64>)
 8012c28:	6323      	str	r3, [r4, #48]	@ 0x30
 8012c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8012c60 <std+0x68>)
 8012c2c:	6224      	str	r4, [r4, #32]
 8012c2e:	429c      	cmp	r4, r3
 8012c30:	d006      	beq.n	8012c40 <std+0x48>
 8012c32:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012c36:	4294      	cmp	r4, r2
 8012c38:	d002      	beq.n	8012c40 <std+0x48>
 8012c3a:	33d0      	adds	r3, #208	@ 0xd0
 8012c3c:	429c      	cmp	r4, r3
 8012c3e:	d105      	bne.n	8012c4c <std+0x54>
 8012c40:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c48:	f000 b978 	b.w	8012f3c <__retarget_lock_init_recursive>
 8012c4c:	bd10      	pop	{r4, pc}
 8012c4e:	bf00      	nop
 8012c50:	08012dbd 	.word	0x08012dbd
 8012c54:	08012ddf 	.word	0x08012ddf
 8012c58:	08012e17 	.word	0x08012e17
 8012c5c:	08012e3b 	.word	0x08012e3b
 8012c60:	24002614 	.word	0x24002614

08012c64 <stdio_exit_handler>:
 8012c64:	4a02      	ldr	r2, [pc, #8]	@ (8012c70 <stdio_exit_handler+0xc>)
 8012c66:	4903      	ldr	r1, [pc, #12]	@ (8012c74 <stdio_exit_handler+0x10>)
 8012c68:	4803      	ldr	r0, [pc, #12]	@ (8012c78 <stdio_exit_handler+0x14>)
 8012c6a:	f000 b869 	b.w	8012d40 <_fwalk_sglue>
 8012c6e:	bf00      	nop
 8012c70:	24000128 	.word	0x24000128
 8012c74:	080147c1 	.word	0x080147c1
 8012c78:	24000138 	.word	0x24000138

08012c7c <cleanup_stdio>:
 8012c7c:	6841      	ldr	r1, [r0, #4]
 8012c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8012cb0 <cleanup_stdio+0x34>)
 8012c80:	4299      	cmp	r1, r3
 8012c82:	b510      	push	{r4, lr}
 8012c84:	4604      	mov	r4, r0
 8012c86:	d001      	beq.n	8012c8c <cleanup_stdio+0x10>
 8012c88:	f001 fd9a 	bl	80147c0 <_fflush_r>
 8012c8c:	68a1      	ldr	r1, [r4, #8]
 8012c8e:	4b09      	ldr	r3, [pc, #36]	@ (8012cb4 <cleanup_stdio+0x38>)
 8012c90:	4299      	cmp	r1, r3
 8012c92:	d002      	beq.n	8012c9a <cleanup_stdio+0x1e>
 8012c94:	4620      	mov	r0, r4
 8012c96:	f001 fd93 	bl	80147c0 <_fflush_r>
 8012c9a:	68e1      	ldr	r1, [r4, #12]
 8012c9c:	4b06      	ldr	r3, [pc, #24]	@ (8012cb8 <cleanup_stdio+0x3c>)
 8012c9e:	4299      	cmp	r1, r3
 8012ca0:	d004      	beq.n	8012cac <cleanup_stdio+0x30>
 8012ca2:	4620      	mov	r0, r4
 8012ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ca8:	f001 bd8a 	b.w	80147c0 <_fflush_r>
 8012cac:	bd10      	pop	{r4, pc}
 8012cae:	bf00      	nop
 8012cb0:	24002614 	.word	0x24002614
 8012cb4:	2400267c 	.word	0x2400267c
 8012cb8:	240026e4 	.word	0x240026e4

08012cbc <global_stdio_init.part.0>:
 8012cbc:	b510      	push	{r4, lr}
 8012cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8012cec <global_stdio_init.part.0+0x30>)
 8012cc0:	4c0b      	ldr	r4, [pc, #44]	@ (8012cf0 <global_stdio_init.part.0+0x34>)
 8012cc2:	4a0c      	ldr	r2, [pc, #48]	@ (8012cf4 <global_stdio_init.part.0+0x38>)
 8012cc4:	601a      	str	r2, [r3, #0]
 8012cc6:	4620      	mov	r0, r4
 8012cc8:	2200      	movs	r2, #0
 8012cca:	2104      	movs	r1, #4
 8012ccc:	f7ff ff94 	bl	8012bf8 <std>
 8012cd0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012cd4:	2201      	movs	r2, #1
 8012cd6:	2109      	movs	r1, #9
 8012cd8:	f7ff ff8e 	bl	8012bf8 <std>
 8012cdc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012ce0:	2202      	movs	r2, #2
 8012ce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ce6:	2112      	movs	r1, #18
 8012ce8:	f7ff bf86 	b.w	8012bf8 <std>
 8012cec:	2400274c 	.word	0x2400274c
 8012cf0:	24002614 	.word	0x24002614
 8012cf4:	08012c65 	.word	0x08012c65

08012cf8 <__sfp_lock_acquire>:
 8012cf8:	4801      	ldr	r0, [pc, #4]	@ (8012d00 <__sfp_lock_acquire+0x8>)
 8012cfa:	f000 b920 	b.w	8012f3e <__retarget_lock_acquire_recursive>
 8012cfe:	bf00      	nop
 8012d00:	24002755 	.word	0x24002755

08012d04 <__sfp_lock_release>:
 8012d04:	4801      	ldr	r0, [pc, #4]	@ (8012d0c <__sfp_lock_release+0x8>)
 8012d06:	f000 b91b 	b.w	8012f40 <__retarget_lock_release_recursive>
 8012d0a:	bf00      	nop
 8012d0c:	24002755 	.word	0x24002755

08012d10 <__sinit>:
 8012d10:	b510      	push	{r4, lr}
 8012d12:	4604      	mov	r4, r0
 8012d14:	f7ff fff0 	bl	8012cf8 <__sfp_lock_acquire>
 8012d18:	6a23      	ldr	r3, [r4, #32]
 8012d1a:	b11b      	cbz	r3, 8012d24 <__sinit+0x14>
 8012d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d20:	f7ff bff0 	b.w	8012d04 <__sfp_lock_release>
 8012d24:	4b04      	ldr	r3, [pc, #16]	@ (8012d38 <__sinit+0x28>)
 8012d26:	6223      	str	r3, [r4, #32]
 8012d28:	4b04      	ldr	r3, [pc, #16]	@ (8012d3c <__sinit+0x2c>)
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d1f5      	bne.n	8012d1c <__sinit+0xc>
 8012d30:	f7ff ffc4 	bl	8012cbc <global_stdio_init.part.0>
 8012d34:	e7f2      	b.n	8012d1c <__sinit+0xc>
 8012d36:	bf00      	nop
 8012d38:	08012c7d 	.word	0x08012c7d
 8012d3c:	2400274c 	.word	0x2400274c

08012d40 <_fwalk_sglue>:
 8012d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d44:	4607      	mov	r7, r0
 8012d46:	4688      	mov	r8, r1
 8012d48:	4614      	mov	r4, r2
 8012d4a:	2600      	movs	r6, #0
 8012d4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012d50:	f1b9 0901 	subs.w	r9, r9, #1
 8012d54:	d505      	bpl.n	8012d62 <_fwalk_sglue+0x22>
 8012d56:	6824      	ldr	r4, [r4, #0]
 8012d58:	2c00      	cmp	r4, #0
 8012d5a:	d1f7      	bne.n	8012d4c <_fwalk_sglue+0xc>
 8012d5c:	4630      	mov	r0, r6
 8012d5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d62:	89ab      	ldrh	r3, [r5, #12]
 8012d64:	2b01      	cmp	r3, #1
 8012d66:	d907      	bls.n	8012d78 <_fwalk_sglue+0x38>
 8012d68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012d6c:	3301      	adds	r3, #1
 8012d6e:	d003      	beq.n	8012d78 <_fwalk_sglue+0x38>
 8012d70:	4629      	mov	r1, r5
 8012d72:	4638      	mov	r0, r7
 8012d74:	47c0      	blx	r8
 8012d76:	4306      	orrs	r6, r0
 8012d78:	3568      	adds	r5, #104	@ 0x68
 8012d7a:	e7e9      	b.n	8012d50 <_fwalk_sglue+0x10>

08012d7c <siprintf>:
 8012d7c:	b40e      	push	{r1, r2, r3}
 8012d7e:	b500      	push	{lr}
 8012d80:	b09c      	sub	sp, #112	@ 0x70
 8012d82:	ab1d      	add	r3, sp, #116	@ 0x74
 8012d84:	9002      	str	r0, [sp, #8]
 8012d86:	9006      	str	r0, [sp, #24]
 8012d88:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012d8c:	4809      	ldr	r0, [pc, #36]	@ (8012db4 <siprintf+0x38>)
 8012d8e:	9107      	str	r1, [sp, #28]
 8012d90:	9104      	str	r1, [sp, #16]
 8012d92:	4909      	ldr	r1, [pc, #36]	@ (8012db8 <siprintf+0x3c>)
 8012d94:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d98:	9105      	str	r1, [sp, #20]
 8012d9a:	6800      	ldr	r0, [r0, #0]
 8012d9c:	9301      	str	r3, [sp, #4]
 8012d9e:	a902      	add	r1, sp, #8
 8012da0:	f001 fb8e 	bl	80144c0 <_svfiprintf_r>
 8012da4:	9b02      	ldr	r3, [sp, #8]
 8012da6:	2200      	movs	r2, #0
 8012da8:	701a      	strb	r2, [r3, #0]
 8012daa:	b01c      	add	sp, #112	@ 0x70
 8012dac:	f85d eb04 	ldr.w	lr, [sp], #4
 8012db0:	b003      	add	sp, #12
 8012db2:	4770      	bx	lr
 8012db4:	24000134 	.word	0x24000134
 8012db8:	ffff0208 	.word	0xffff0208

08012dbc <__sread>:
 8012dbc:	b510      	push	{r4, lr}
 8012dbe:	460c      	mov	r4, r1
 8012dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012dc4:	f000 f86c 	bl	8012ea0 <_read_r>
 8012dc8:	2800      	cmp	r0, #0
 8012dca:	bfab      	itete	ge
 8012dcc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012dce:	89a3      	ldrhlt	r3, [r4, #12]
 8012dd0:	181b      	addge	r3, r3, r0
 8012dd2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012dd6:	bfac      	ite	ge
 8012dd8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012dda:	81a3      	strhlt	r3, [r4, #12]
 8012ddc:	bd10      	pop	{r4, pc}

08012dde <__swrite>:
 8012dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012de2:	461f      	mov	r7, r3
 8012de4:	898b      	ldrh	r3, [r1, #12]
 8012de6:	05db      	lsls	r3, r3, #23
 8012de8:	4605      	mov	r5, r0
 8012dea:	460c      	mov	r4, r1
 8012dec:	4616      	mov	r6, r2
 8012dee:	d505      	bpl.n	8012dfc <__swrite+0x1e>
 8012df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012df4:	2302      	movs	r3, #2
 8012df6:	2200      	movs	r2, #0
 8012df8:	f000 f840 	bl	8012e7c <_lseek_r>
 8012dfc:	89a3      	ldrh	r3, [r4, #12]
 8012dfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012e02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012e06:	81a3      	strh	r3, [r4, #12]
 8012e08:	4632      	mov	r2, r6
 8012e0a:	463b      	mov	r3, r7
 8012e0c:	4628      	mov	r0, r5
 8012e0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e12:	f000 b857 	b.w	8012ec4 <_write_r>

08012e16 <__sseek>:
 8012e16:	b510      	push	{r4, lr}
 8012e18:	460c      	mov	r4, r1
 8012e1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e1e:	f000 f82d 	bl	8012e7c <_lseek_r>
 8012e22:	1c43      	adds	r3, r0, #1
 8012e24:	89a3      	ldrh	r3, [r4, #12]
 8012e26:	bf15      	itete	ne
 8012e28:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012e2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012e2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012e32:	81a3      	strheq	r3, [r4, #12]
 8012e34:	bf18      	it	ne
 8012e36:	81a3      	strhne	r3, [r4, #12]
 8012e38:	bd10      	pop	{r4, pc}

08012e3a <__sclose>:
 8012e3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e3e:	f000 b80d 	b.w	8012e5c <_close_r>

08012e42 <memset>:
 8012e42:	4402      	add	r2, r0
 8012e44:	4603      	mov	r3, r0
 8012e46:	4293      	cmp	r3, r2
 8012e48:	d100      	bne.n	8012e4c <memset+0xa>
 8012e4a:	4770      	bx	lr
 8012e4c:	f803 1b01 	strb.w	r1, [r3], #1
 8012e50:	e7f9      	b.n	8012e46 <memset+0x4>
	...

08012e54 <_localeconv_r>:
 8012e54:	4800      	ldr	r0, [pc, #0]	@ (8012e58 <_localeconv_r+0x4>)
 8012e56:	4770      	bx	lr
 8012e58:	24000274 	.word	0x24000274

08012e5c <_close_r>:
 8012e5c:	b538      	push	{r3, r4, r5, lr}
 8012e5e:	4d06      	ldr	r5, [pc, #24]	@ (8012e78 <_close_r+0x1c>)
 8012e60:	2300      	movs	r3, #0
 8012e62:	4604      	mov	r4, r0
 8012e64:	4608      	mov	r0, r1
 8012e66:	602b      	str	r3, [r5, #0]
 8012e68:	f7ee fdba 	bl	80019e0 <_close>
 8012e6c:	1c43      	adds	r3, r0, #1
 8012e6e:	d102      	bne.n	8012e76 <_close_r+0x1a>
 8012e70:	682b      	ldr	r3, [r5, #0]
 8012e72:	b103      	cbz	r3, 8012e76 <_close_r+0x1a>
 8012e74:	6023      	str	r3, [r4, #0]
 8012e76:	bd38      	pop	{r3, r4, r5, pc}
 8012e78:	24002750 	.word	0x24002750

08012e7c <_lseek_r>:
 8012e7c:	b538      	push	{r3, r4, r5, lr}
 8012e7e:	4d07      	ldr	r5, [pc, #28]	@ (8012e9c <_lseek_r+0x20>)
 8012e80:	4604      	mov	r4, r0
 8012e82:	4608      	mov	r0, r1
 8012e84:	4611      	mov	r1, r2
 8012e86:	2200      	movs	r2, #0
 8012e88:	602a      	str	r2, [r5, #0]
 8012e8a:	461a      	mov	r2, r3
 8012e8c:	f7ee fdcf 	bl	8001a2e <_lseek>
 8012e90:	1c43      	adds	r3, r0, #1
 8012e92:	d102      	bne.n	8012e9a <_lseek_r+0x1e>
 8012e94:	682b      	ldr	r3, [r5, #0]
 8012e96:	b103      	cbz	r3, 8012e9a <_lseek_r+0x1e>
 8012e98:	6023      	str	r3, [r4, #0]
 8012e9a:	bd38      	pop	{r3, r4, r5, pc}
 8012e9c:	24002750 	.word	0x24002750

08012ea0 <_read_r>:
 8012ea0:	b538      	push	{r3, r4, r5, lr}
 8012ea2:	4d07      	ldr	r5, [pc, #28]	@ (8012ec0 <_read_r+0x20>)
 8012ea4:	4604      	mov	r4, r0
 8012ea6:	4608      	mov	r0, r1
 8012ea8:	4611      	mov	r1, r2
 8012eaa:	2200      	movs	r2, #0
 8012eac:	602a      	str	r2, [r5, #0]
 8012eae:	461a      	mov	r2, r3
 8012eb0:	f7ee fd5d 	bl	800196e <_read>
 8012eb4:	1c43      	adds	r3, r0, #1
 8012eb6:	d102      	bne.n	8012ebe <_read_r+0x1e>
 8012eb8:	682b      	ldr	r3, [r5, #0]
 8012eba:	b103      	cbz	r3, 8012ebe <_read_r+0x1e>
 8012ebc:	6023      	str	r3, [r4, #0]
 8012ebe:	bd38      	pop	{r3, r4, r5, pc}
 8012ec0:	24002750 	.word	0x24002750

08012ec4 <_write_r>:
 8012ec4:	b538      	push	{r3, r4, r5, lr}
 8012ec6:	4d07      	ldr	r5, [pc, #28]	@ (8012ee4 <_write_r+0x20>)
 8012ec8:	4604      	mov	r4, r0
 8012eca:	4608      	mov	r0, r1
 8012ecc:	4611      	mov	r1, r2
 8012ece:	2200      	movs	r2, #0
 8012ed0:	602a      	str	r2, [r5, #0]
 8012ed2:	461a      	mov	r2, r3
 8012ed4:	f7ee fd68 	bl	80019a8 <_write>
 8012ed8:	1c43      	adds	r3, r0, #1
 8012eda:	d102      	bne.n	8012ee2 <_write_r+0x1e>
 8012edc:	682b      	ldr	r3, [r5, #0]
 8012ede:	b103      	cbz	r3, 8012ee2 <_write_r+0x1e>
 8012ee0:	6023      	str	r3, [r4, #0]
 8012ee2:	bd38      	pop	{r3, r4, r5, pc}
 8012ee4:	24002750 	.word	0x24002750

08012ee8 <__errno>:
 8012ee8:	4b01      	ldr	r3, [pc, #4]	@ (8012ef0 <__errno+0x8>)
 8012eea:	6818      	ldr	r0, [r3, #0]
 8012eec:	4770      	bx	lr
 8012eee:	bf00      	nop
 8012ef0:	24000134 	.word	0x24000134

08012ef4 <__libc_init_array>:
 8012ef4:	b570      	push	{r4, r5, r6, lr}
 8012ef6:	4d0d      	ldr	r5, [pc, #52]	@ (8012f2c <__libc_init_array+0x38>)
 8012ef8:	4c0d      	ldr	r4, [pc, #52]	@ (8012f30 <__libc_init_array+0x3c>)
 8012efa:	1b64      	subs	r4, r4, r5
 8012efc:	10a4      	asrs	r4, r4, #2
 8012efe:	2600      	movs	r6, #0
 8012f00:	42a6      	cmp	r6, r4
 8012f02:	d109      	bne.n	8012f18 <__libc_init_array+0x24>
 8012f04:	4d0b      	ldr	r5, [pc, #44]	@ (8012f34 <__libc_init_array+0x40>)
 8012f06:	4c0c      	ldr	r4, [pc, #48]	@ (8012f38 <__libc_init_array+0x44>)
 8012f08:	f002 f838 	bl	8014f7c <_init>
 8012f0c:	1b64      	subs	r4, r4, r5
 8012f0e:	10a4      	asrs	r4, r4, #2
 8012f10:	2600      	movs	r6, #0
 8012f12:	42a6      	cmp	r6, r4
 8012f14:	d105      	bne.n	8012f22 <__libc_init_array+0x2e>
 8012f16:	bd70      	pop	{r4, r5, r6, pc}
 8012f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8012f1c:	4798      	blx	r3
 8012f1e:	3601      	adds	r6, #1
 8012f20:	e7ee      	b.n	8012f00 <__libc_init_array+0xc>
 8012f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8012f26:	4798      	blx	r3
 8012f28:	3601      	adds	r6, #1
 8012f2a:	e7f2      	b.n	8012f12 <__libc_init_array+0x1e>
 8012f2c:	080153c0 	.word	0x080153c0
 8012f30:	080153c0 	.word	0x080153c0
 8012f34:	080153c0 	.word	0x080153c0
 8012f38:	080153c4 	.word	0x080153c4

08012f3c <__retarget_lock_init_recursive>:
 8012f3c:	4770      	bx	lr

08012f3e <__retarget_lock_acquire_recursive>:
 8012f3e:	4770      	bx	lr

08012f40 <__retarget_lock_release_recursive>:
 8012f40:	4770      	bx	lr

08012f42 <quorem>:
 8012f42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f46:	6903      	ldr	r3, [r0, #16]
 8012f48:	690c      	ldr	r4, [r1, #16]
 8012f4a:	42a3      	cmp	r3, r4
 8012f4c:	4607      	mov	r7, r0
 8012f4e:	db7e      	blt.n	801304e <quorem+0x10c>
 8012f50:	3c01      	subs	r4, #1
 8012f52:	f101 0814 	add.w	r8, r1, #20
 8012f56:	00a3      	lsls	r3, r4, #2
 8012f58:	f100 0514 	add.w	r5, r0, #20
 8012f5c:	9300      	str	r3, [sp, #0]
 8012f5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012f62:	9301      	str	r3, [sp, #4]
 8012f64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012f68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012f6c:	3301      	adds	r3, #1
 8012f6e:	429a      	cmp	r2, r3
 8012f70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012f74:	fbb2 f6f3 	udiv	r6, r2, r3
 8012f78:	d32e      	bcc.n	8012fd8 <quorem+0x96>
 8012f7a:	f04f 0a00 	mov.w	sl, #0
 8012f7e:	46c4      	mov	ip, r8
 8012f80:	46ae      	mov	lr, r5
 8012f82:	46d3      	mov	fp, sl
 8012f84:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012f88:	b298      	uxth	r0, r3
 8012f8a:	fb06 a000 	mla	r0, r6, r0, sl
 8012f8e:	0c02      	lsrs	r2, r0, #16
 8012f90:	0c1b      	lsrs	r3, r3, #16
 8012f92:	fb06 2303 	mla	r3, r6, r3, r2
 8012f96:	f8de 2000 	ldr.w	r2, [lr]
 8012f9a:	b280      	uxth	r0, r0
 8012f9c:	b292      	uxth	r2, r2
 8012f9e:	1a12      	subs	r2, r2, r0
 8012fa0:	445a      	add	r2, fp
 8012fa2:	f8de 0000 	ldr.w	r0, [lr]
 8012fa6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012faa:	b29b      	uxth	r3, r3
 8012fac:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8012fb0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012fb4:	b292      	uxth	r2, r2
 8012fb6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012fba:	45e1      	cmp	r9, ip
 8012fbc:	f84e 2b04 	str.w	r2, [lr], #4
 8012fc0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012fc4:	d2de      	bcs.n	8012f84 <quorem+0x42>
 8012fc6:	9b00      	ldr	r3, [sp, #0]
 8012fc8:	58eb      	ldr	r3, [r5, r3]
 8012fca:	b92b      	cbnz	r3, 8012fd8 <quorem+0x96>
 8012fcc:	9b01      	ldr	r3, [sp, #4]
 8012fce:	3b04      	subs	r3, #4
 8012fd0:	429d      	cmp	r5, r3
 8012fd2:	461a      	mov	r2, r3
 8012fd4:	d32f      	bcc.n	8013036 <quorem+0xf4>
 8012fd6:	613c      	str	r4, [r7, #16]
 8012fd8:	4638      	mov	r0, r7
 8012fda:	f001 f90d 	bl	80141f8 <__mcmp>
 8012fde:	2800      	cmp	r0, #0
 8012fe0:	db25      	blt.n	801302e <quorem+0xec>
 8012fe2:	4629      	mov	r1, r5
 8012fe4:	2000      	movs	r0, #0
 8012fe6:	f858 2b04 	ldr.w	r2, [r8], #4
 8012fea:	f8d1 c000 	ldr.w	ip, [r1]
 8012fee:	fa1f fe82 	uxth.w	lr, r2
 8012ff2:	fa1f f38c 	uxth.w	r3, ip
 8012ff6:	eba3 030e 	sub.w	r3, r3, lr
 8012ffa:	4403      	add	r3, r0
 8012ffc:	0c12      	lsrs	r2, r2, #16
 8012ffe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8013002:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8013006:	b29b      	uxth	r3, r3
 8013008:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801300c:	45c1      	cmp	r9, r8
 801300e:	f841 3b04 	str.w	r3, [r1], #4
 8013012:	ea4f 4022 	mov.w	r0, r2, asr #16
 8013016:	d2e6      	bcs.n	8012fe6 <quorem+0xa4>
 8013018:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801301c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013020:	b922      	cbnz	r2, 801302c <quorem+0xea>
 8013022:	3b04      	subs	r3, #4
 8013024:	429d      	cmp	r5, r3
 8013026:	461a      	mov	r2, r3
 8013028:	d30b      	bcc.n	8013042 <quorem+0x100>
 801302a:	613c      	str	r4, [r7, #16]
 801302c:	3601      	adds	r6, #1
 801302e:	4630      	mov	r0, r6
 8013030:	b003      	add	sp, #12
 8013032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013036:	6812      	ldr	r2, [r2, #0]
 8013038:	3b04      	subs	r3, #4
 801303a:	2a00      	cmp	r2, #0
 801303c:	d1cb      	bne.n	8012fd6 <quorem+0x94>
 801303e:	3c01      	subs	r4, #1
 8013040:	e7c6      	b.n	8012fd0 <quorem+0x8e>
 8013042:	6812      	ldr	r2, [r2, #0]
 8013044:	3b04      	subs	r3, #4
 8013046:	2a00      	cmp	r2, #0
 8013048:	d1ef      	bne.n	801302a <quorem+0xe8>
 801304a:	3c01      	subs	r4, #1
 801304c:	e7ea      	b.n	8013024 <quorem+0xe2>
 801304e:	2000      	movs	r0, #0
 8013050:	e7ee      	b.n	8013030 <quorem+0xee>
 8013052:	0000      	movs	r0, r0
 8013054:	0000      	movs	r0, r0
	...

08013058 <_dtoa_r>:
 8013058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801305c:	ed2d 8b02 	vpush	{d8}
 8013060:	69c7      	ldr	r7, [r0, #28]
 8013062:	b091      	sub	sp, #68	@ 0x44
 8013064:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013068:	ec55 4b10 	vmov	r4, r5, d0
 801306c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801306e:	9107      	str	r1, [sp, #28]
 8013070:	4681      	mov	r9, r0
 8013072:	9209      	str	r2, [sp, #36]	@ 0x24
 8013074:	930d      	str	r3, [sp, #52]	@ 0x34
 8013076:	b97f      	cbnz	r7, 8013098 <_dtoa_r+0x40>
 8013078:	2010      	movs	r0, #16
 801307a:	f000 fd8d 	bl	8013b98 <malloc>
 801307e:	4602      	mov	r2, r0
 8013080:	f8c9 001c 	str.w	r0, [r9, #28]
 8013084:	b920      	cbnz	r0, 8013090 <_dtoa_r+0x38>
 8013086:	4ba0      	ldr	r3, [pc, #640]	@ (8013308 <_dtoa_r+0x2b0>)
 8013088:	21ef      	movs	r1, #239	@ 0xef
 801308a:	48a0      	ldr	r0, [pc, #640]	@ (801330c <_dtoa_r+0x2b4>)
 801308c:	f001 fbf8 	bl	8014880 <__assert_func>
 8013090:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8013094:	6007      	str	r7, [r0, #0]
 8013096:	60c7      	str	r7, [r0, #12]
 8013098:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801309c:	6819      	ldr	r1, [r3, #0]
 801309e:	b159      	cbz	r1, 80130b8 <_dtoa_r+0x60>
 80130a0:	685a      	ldr	r2, [r3, #4]
 80130a2:	604a      	str	r2, [r1, #4]
 80130a4:	2301      	movs	r3, #1
 80130a6:	4093      	lsls	r3, r2
 80130a8:	608b      	str	r3, [r1, #8]
 80130aa:	4648      	mov	r0, r9
 80130ac:	f000 fe6a 	bl	8013d84 <_Bfree>
 80130b0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80130b4:	2200      	movs	r2, #0
 80130b6:	601a      	str	r2, [r3, #0]
 80130b8:	1e2b      	subs	r3, r5, #0
 80130ba:	bfbb      	ittet	lt
 80130bc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80130c0:	9303      	strlt	r3, [sp, #12]
 80130c2:	2300      	movge	r3, #0
 80130c4:	2201      	movlt	r2, #1
 80130c6:	bfac      	ite	ge
 80130c8:	6033      	strge	r3, [r6, #0]
 80130ca:	6032      	strlt	r2, [r6, #0]
 80130cc:	4b90      	ldr	r3, [pc, #576]	@ (8013310 <_dtoa_r+0x2b8>)
 80130ce:	9e03      	ldr	r6, [sp, #12]
 80130d0:	43b3      	bics	r3, r6
 80130d2:	d110      	bne.n	80130f6 <_dtoa_r+0x9e>
 80130d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80130d6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80130da:	6013      	str	r3, [r2, #0]
 80130dc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80130e0:	4323      	orrs	r3, r4
 80130e2:	f000 84de 	beq.w	8013aa2 <_dtoa_r+0xa4a>
 80130e6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80130e8:	4f8a      	ldr	r7, [pc, #552]	@ (8013314 <_dtoa_r+0x2bc>)
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	f000 84e0 	beq.w	8013ab0 <_dtoa_r+0xa58>
 80130f0:	1cfb      	adds	r3, r7, #3
 80130f2:	f000 bcdb 	b.w	8013aac <_dtoa_r+0xa54>
 80130f6:	ed9d 8b02 	vldr	d8, [sp, #8]
 80130fa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80130fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013102:	d10a      	bne.n	801311a <_dtoa_r+0xc2>
 8013104:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013106:	2301      	movs	r3, #1
 8013108:	6013      	str	r3, [r2, #0]
 801310a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801310c:	b113      	cbz	r3, 8013114 <_dtoa_r+0xbc>
 801310e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8013110:	4b81      	ldr	r3, [pc, #516]	@ (8013318 <_dtoa_r+0x2c0>)
 8013112:	6013      	str	r3, [r2, #0]
 8013114:	4f81      	ldr	r7, [pc, #516]	@ (801331c <_dtoa_r+0x2c4>)
 8013116:	f000 bccb 	b.w	8013ab0 <_dtoa_r+0xa58>
 801311a:	aa0e      	add	r2, sp, #56	@ 0x38
 801311c:	a90f      	add	r1, sp, #60	@ 0x3c
 801311e:	4648      	mov	r0, r9
 8013120:	eeb0 0b48 	vmov.f64	d0, d8
 8013124:	f001 f918 	bl	8014358 <__d2b>
 8013128:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801312c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801312e:	9001      	str	r0, [sp, #4]
 8013130:	2b00      	cmp	r3, #0
 8013132:	d045      	beq.n	80131c0 <_dtoa_r+0x168>
 8013134:	eeb0 7b48 	vmov.f64	d7, d8
 8013138:	ee18 1a90 	vmov	r1, s17
 801313c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8013140:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8013144:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8013148:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801314c:	2500      	movs	r5, #0
 801314e:	ee07 1a90 	vmov	s15, r1
 8013152:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8013156:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80132f0 <_dtoa_r+0x298>
 801315a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801315e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80132f8 <_dtoa_r+0x2a0>
 8013162:	eea7 6b05 	vfma.f64	d6, d7, d5
 8013166:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8013300 <_dtoa_r+0x2a8>
 801316a:	ee07 3a90 	vmov	s15, r3
 801316e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8013172:	eeb0 7b46 	vmov.f64	d7, d6
 8013176:	eea4 7b05 	vfma.f64	d7, d4, d5
 801317a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801317e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8013182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013186:	ee16 8a90 	vmov	r8, s13
 801318a:	d508      	bpl.n	801319e <_dtoa_r+0x146>
 801318c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8013190:	eeb4 6b47 	vcmp.f64	d6, d7
 8013194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013198:	bf18      	it	ne
 801319a:	f108 38ff 	addne.w	r8, r8, #4294967295
 801319e:	f1b8 0f16 	cmp.w	r8, #22
 80131a2:	d82b      	bhi.n	80131fc <_dtoa_r+0x1a4>
 80131a4:	495e      	ldr	r1, [pc, #376]	@ (8013320 <_dtoa_r+0x2c8>)
 80131a6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80131aa:	ed91 7b00 	vldr	d7, [r1]
 80131ae:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80131b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131b6:	d501      	bpl.n	80131bc <_dtoa_r+0x164>
 80131b8:	f108 38ff 	add.w	r8, r8, #4294967295
 80131bc:	2100      	movs	r1, #0
 80131be:	e01e      	b.n	80131fe <_dtoa_r+0x1a6>
 80131c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80131c2:	4413      	add	r3, r2
 80131c4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80131c8:	2920      	cmp	r1, #32
 80131ca:	bfc1      	itttt	gt
 80131cc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80131d0:	408e      	lslgt	r6, r1
 80131d2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80131d6:	fa24 f101 	lsrgt.w	r1, r4, r1
 80131da:	bfd6      	itet	le
 80131dc:	f1c1 0120 	rsble	r1, r1, #32
 80131e0:	4331      	orrgt	r1, r6
 80131e2:	fa04 f101 	lslle.w	r1, r4, r1
 80131e6:	ee07 1a90 	vmov	s15, r1
 80131ea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80131ee:	3b01      	subs	r3, #1
 80131f0:	ee17 1a90 	vmov	r1, s15
 80131f4:	2501      	movs	r5, #1
 80131f6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80131fa:	e7a8      	b.n	801314e <_dtoa_r+0xf6>
 80131fc:	2101      	movs	r1, #1
 80131fe:	1ad2      	subs	r2, r2, r3
 8013200:	1e53      	subs	r3, r2, #1
 8013202:	9306      	str	r3, [sp, #24]
 8013204:	bf45      	ittet	mi
 8013206:	f1c2 0301 	rsbmi	r3, r2, #1
 801320a:	9305      	strmi	r3, [sp, #20]
 801320c:	2300      	movpl	r3, #0
 801320e:	2300      	movmi	r3, #0
 8013210:	bf4c      	ite	mi
 8013212:	9306      	strmi	r3, [sp, #24]
 8013214:	9305      	strpl	r3, [sp, #20]
 8013216:	f1b8 0f00 	cmp.w	r8, #0
 801321a:	910c      	str	r1, [sp, #48]	@ 0x30
 801321c:	db18      	blt.n	8013250 <_dtoa_r+0x1f8>
 801321e:	9b06      	ldr	r3, [sp, #24]
 8013220:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8013224:	4443      	add	r3, r8
 8013226:	9306      	str	r3, [sp, #24]
 8013228:	2300      	movs	r3, #0
 801322a:	9a07      	ldr	r2, [sp, #28]
 801322c:	2a09      	cmp	r2, #9
 801322e:	d849      	bhi.n	80132c4 <_dtoa_r+0x26c>
 8013230:	2a05      	cmp	r2, #5
 8013232:	bfc4      	itt	gt
 8013234:	3a04      	subgt	r2, #4
 8013236:	9207      	strgt	r2, [sp, #28]
 8013238:	9a07      	ldr	r2, [sp, #28]
 801323a:	f1a2 0202 	sub.w	r2, r2, #2
 801323e:	bfcc      	ite	gt
 8013240:	2400      	movgt	r4, #0
 8013242:	2401      	movle	r4, #1
 8013244:	2a03      	cmp	r2, #3
 8013246:	d848      	bhi.n	80132da <_dtoa_r+0x282>
 8013248:	e8df f002 	tbb	[pc, r2]
 801324c:	3a2c2e0b 	.word	0x3a2c2e0b
 8013250:	9b05      	ldr	r3, [sp, #20]
 8013252:	2200      	movs	r2, #0
 8013254:	eba3 0308 	sub.w	r3, r3, r8
 8013258:	9305      	str	r3, [sp, #20]
 801325a:	920a      	str	r2, [sp, #40]	@ 0x28
 801325c:	f1c8 0300 	rsb	r3, r8, #0
 8013260:	e7e3      	b.n	801322a <_dtoa_r+0x1d2>
 8013262:	2200      	movs	r2, #0
 8013264:	9208      	str	r2, [sp, #32]
 8013266:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013268:	2a00      	cmp	r2, #0
 801326a:	dc39      	bgt.n	80132e0 <_dtoa_r+0x288>
 801326c:	f04f 0b01 	mov.w	fp, #1
 8013270:	46da      	mov	sl, fp
 8013272:	465a      	mov	r2, fp
 8013274:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8013278:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801327c:	2100      	movs	r1, #0
 801327e:	2004      	movs	r0, #4
 8013280:	f100 0614 	add.w	r6, r0, #20
 8013284:	4296      	cmp	r6, r2
 8013286:	d930      	bls.n	80132ea <_dtoa_r+0x292>
 8013288:	6079      	str	r1, [r7, #4]
 801328a:	4648      	mov	r0, r9
 801328c:	9304      	str	r3, [sp, #16]
 801328e:	f000 fd39 	bl	8013d04 <_Balloc>
 8013292:	9b04      	ldr	r3, [sp, #16]
 8013294:	4607      	mov	r7, r0
 8013296:	2800      	cmp	r0, #0
 8013298:	d146      	bne.n	8013328 <_dtoa_r+0x2d0>
 801329a:	4b22      	ldr	r3, [pc, #136]	@ (8013324 <_dtoa_r+0x2cc>)
 801329c:	4602      	mov	r2, r0
 801329e:	f240 11af 	movw	r1, #431	@ 0x1af
 80132a2:	e6f2      	b.n	801308a <_dtoa_r+0x32>
 80132a4:	2201      	movs	r2, #1
 80132a6:	e7dd      	b.n	8013264 <_dtoa_r+0x20c>
 80132a8:	2200      	movs	r2, #0
 80132aa:	9208      	str	r2, [sp, #32]
 80132ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80132ae:	eb08 0b02 	add.w	fp, r8, r2
 80132b2:	f10b 0a01 	add.w	sl, fp, #1
 80132b6:	4652      	mov	r2, sl
 80132b8:	2a01      	cmp	r2, #1
 80132ba:	bfb8      	it	lt
 80132bc:	2201      	movlt	r2, #1
 80132be:	e7db      	b.n	8013278 <_dtoa_r+0x220>
 80132c0:	2201      	movs	r2, #1
 80132c2:	e7f2      	b.n	80132aa <_dtoa_r+0x252>
 80132c4:	2401      	movs	r4, #1
 80132c6:	2200      	movs	r2, #0
 80132c8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80132cc:	f04f 3bff 	mov.w	fp, #4294967295
 80132d0:	2100      	movs	r1, #0
 80132d2:	46da      	mov	sl, fp
 80132d4:	2212      	movs	r2, #18
 80132d6:	9109      	str	r1, [sp, #36]	@ 0x24
 80132d8:	e7ce      	b.n	8013278 <_dtoa_r+0x220>
 80132da:	2201      	movs	r2, #1
 80132dc:	9208      	str	r2, [sp, #32]
 80132de:	e7f5      	b.n	80132cc <_dtoa_r+0x274>
 80132e0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80132e4:	46da      	mov	sl, fp
 80132e6:	465a      	mov	r2, fp
 80132e8:	e7c6      	b.n	8013278 <_dtoa_r+0x220>
 80132ea:	3101      	adds	r1, #1
 80132ec:	0040      	lsls	r0, r0, #1
 80132ee:	e7c7      	b.n	8013280 <_dtoa_r+0x228>
 80132f0:	636f4361 	.word	0x636f4361
 80132f4:	3fd287a7 	.word	0x3fd287a7
 80132f8:	8b60c8b3 	.word	0x8b60c8b3
 80132fc:	3fc68a28 	.word	0x3fc68a28
 8013300:	509f79fb 	.word	0x509f79fb
 8013304:	3fd34413 	.word	0x3fd34413
 8013308:	0801507d 	.word	0x0801507d
 801330c:	08015094 	.word	0x08015094
 8013310:	7ff00000 	.word	0x7ff00000
 8013314:	08015079 	.word	0x08015079
 8013318:	0801504d 	.word	0x0801504d
 801331c:	0801504c 	.word	0x0801504c
 8013320:	08015190 	.word	0x08015190
 8013324:	080150ec 	.word	0x080150ec
 8013328:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801332c:	f1ba 0f0e 	cmp.w	sl, #14
 8013330:	6010      	str	r0, [r2, #0]
 8013332:	d86f      	bhi.n	8013414 <_dtoa_r+0x3bc>
 8013334:	2c00      	cmp	r4, #0
 8013336:	d06d      	beq.n	8013414 <_dtoa_r+0x3bc>
 8013338:	f1b8 0f00 	cmp.w	r8, #0
 801333c:	f340 80c2 	ble.w	80134c4 <_dtoa_r+0x46c>
 8013340:	4aca      	ldr	r2, [pc, #808]	@ (801366c <_dtoa_r+0x614>)
 8013342:	f008 010f 	and.w	r1, r8, #15
 8013346:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801334a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801334e:	ed92 7b00 	vldr	d7, [r2]
 8013352:	ea4f 1128 	mov.w	r1, r8, asr #4
 8013356:	f000 80a9 	beq.w	80134ac <_dtoa_r+0x454>
 801335a:	4ac5      	ldr	r2, [pc, #788]	@ (8013670 <_dtoa_r+0x618>)
 801335c:	ed92 6b08 	vldr	d6, [r2, #32]
 8013360:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8013364:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013368:	f001 010f 	and.w	r1, r1, #15
 801336c:	2203      	movs	r2, #3
 801336e:	48c0      	ldr	r0, [pc, #768]	@ (8013670 <_dtoa_r+0x618>)
 8013370:	2900      	cmp	r1, #0
 8013372:	f040 809d 	bne.w	80134b0 <_dtoa_r+0x458>
 8013376:	ed9d 6b02 	vldr	d6, [sp, #8]
 801337a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801337e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013382:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013384:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013388:	2900      	cmp	r1, #0
 801338a:	f000 80c1 	beq.w	8013510 <_dtoa_r+0x4b8>
 801338e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8013392:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801339a:	f140 80b9 	bpl.w	8013510 <_dtoa_r+0x4b8>
 801339e:	f1ba 0f00 	cmp.w	sl, #0
 80133a2:	f000 80b5 	beq.w	8013510 <_dtoa_r+0x4b8>
 80133a6:	f1bb 0f00 	cmp.w	fp, #0
 80133aa:	dd31      	ble.n	8013410 <_dtoa_r+0x3b8>
 80133ac:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80133b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80133b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80133b8:	f108 31ff 	add.w	r1, r8, #4294967295
 80133bc:	9104      	str	r1, [sp, #16]
 80133be:	3201      	adds	r2, #1
 80133c0:	465c      	mov	r4, fp
 80133c2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80133c6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80133ca:	ee07 2a90 	vmov	s15, r2
 80133ce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80133d2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80133d6:	ee15 2a90 	vmov	r2, s11
 80133da:	ec51 0b15 	vmov	r0, r1, d5
 80133de:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80133e2:	2c00      	cmp	r4, #0
 80133e4:	f040 8098 	bne.w	8013518 <_dtoa_r+0x4c0>
 80133e8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80133ec:	ee36 6b47 	vsub.f64	d6, d6, d7
 80133f0:	ec41 0b17 	vmov	d7, r0, r1
 80133f4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80133f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133fc:	f300 8261 	bgt.w	80138c2 <_dtoa_r+0x86a>
 8013400:	eeb1 7b47 	vneg.f64	d7, d7
 8013404:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801340c:	f100 80f5 	bmi.w	80135fa <_dtoa_r+0x5a2>
 8013410:	ed8d 8b02 	vstr	d8, [sp, #8]
 8013414:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013416:	2a00      	cmp	r2, #0
 8013418:	f2c0 812c 	blt.w	8013674 <_dtoa_r+0x61c>
 801341c:	f1b8 0f0e 	cmp.w	r8, #14
 8013420:	f300 8128 	bgt.w	8013674 <_dtoa_r+0x61c>
 8013424:	4b91      	ldr	r3, [pc, #580]	@ (801366c <_dtoa_r+0x614>)
 8013426:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801342a:	ed93 6b00 	vldr	d6, [r3]
 801342e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013430:	2b00      	cmp	r3, #0
 8013432:	da03      	bge.n	801343c <_dtoa_r+0x3e4>
 8013434:	f1ba 0f00 	cmp.w	sl, #0
 8013438:	f340 80d2 	ble.w	80135e0 <_dtoa_r+0x588>
 801343c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8013440:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013444:	463e      	mov	r6, r7
 8013446:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801344a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801344e:	ee15 3a10 	vmov	r3, s10
 8013452:	3330      	adds	r3, #48	@ 0x30
 8013454:	f806 3b01 	strb.w	r3, [r6], #1
 8013458:	1bf3      	subs	r3, r6, r7
 801345a:	459a      	cmp	sl, r3
 801345c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8013460:	eea3 7b46 	vfms.f64	d7, d3, d6
 8013464:	f040 80f8 	bne.w	8013658 <_dtoa_r+0x600>
 8013468:	ee37 7b07 	vadd.f64	d7, d7, d7
 801346c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013474:	f300 80dd 	bgt.w	8013632 <_dtoa_r+0x5da>
 8013478:	eeb4 7b46 	vcmp.f64	d7, d6
 801347c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013480:	d104      	bne.n	801348c <_dtoa_r+0x434>
 8013482:	ee15 3a10 	vmov	r3, s10
 8013486:	07db      	lsls	r3, r3, #31
 8013488:	f100 80d3 	bmi.w	8013632 <_dtoa_r+0x5da>
 801348c:	9901      	ldr	r1, [sp, #4]
 801348e:	4648      	mov	r0, r9
 8013490:	f000 fc78 	bl	8013d84 <_Bfree>
 8013494:	2300      	movs	r3, #0
 8013496:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013498:	7033      	strb	r3, [r6, #0]
 801349a:	f108 0301 	add.w	r3, r8, #1
 801349e:	6013      	str	r3, [r2, #0]
 80134a0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	f000 8304 	beq.w	8013ab0 <_dtoa_r+0xa58>
 80134a8:	601e      	str	r6, [r3, #0]
 80134aa:	e301      	b.n	8013ab0 <_dtoa_r+0xa58>
 80134ac:	2202      	movs	r2, #2
 80134ae:	e75e      	b.n	801336e <_dtoa_r+0x316>
 80134b0:	07cc      	lsls	r4, r1, #31
 80134b2:	d504      	bpl.n	80134be <_dtoa_r+0x466>
 80134b4:	ed90 6b00 	vldr	d6, [r0]
 80134b8:	3201      	adds	r2, #1
 80134ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80134be:	1049      	asrs	r1, r1, #1
 80134c0:	3008      	adds	r0, #8
 80134c2:	e755      	b.n	8013370 <_dtoa_r+0x318>
 80134c4:	d022      	beq.n	801350c <_dtoa_r+0x4b4>
 80134c6:	f1c8 0100 	rsb	r1, r8, #0
 80134ca:	4a68      	ldr	r2, [pc, #416]	@ (801366c <_dtoa_r+0x614>)
 80134cc:	f001 000f 	and.w	r0, r1, #15
 80134d0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80134d4:	ed92 7b00 	vldr	d7, [r2]
 80134d8:	ee28 7b07 	vmul.f64	d7, d8, d7
 80134dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80134e0:	4863      	ldr	r0, [pc, #396]	@ (8013670 <_dtoa_r+0x618>)
 80134e2:	1109      	asrs	r1, r1, #4
 80134e4:	2400      	movs	r4, #0
 80134e6:	2202      	movs	r2, #2
 80134e8:	b929      	cbnz	r1, 80134f6 <_dtoa_r+0x49e>
 80134ea:	2c00      	cmp	r4, #0
 80134ec:	f43f af49 	beq.w	8013382 <_dtoa_r+0x32a>
 80134f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80134f4:	e745      	b.n	8013382 <_dtoa_r+0x32a>
 80134f6:	07ce      	lsls	r6, r1, #31
 80134f8:	d505      	bpl.n	8013506 <_dtoa_r+0x4ae>
 80134fa:	ed90 6b00 	vldr	d6, [r0]
 80134fe:	3201      	adds	r2, #1
 8013500:	2401      	movs	r4, #1
 8013502:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013506:	1049      	asrs	r1, r1, #1
 8013508:	3008      	adds	r0, #8
 801350a:	e7ed      	b.n	80134e8 <_dtoa_r+0x490>
 801350c:	2202      	movs	r2, #2
 801350e:	e738      	b.n	8013382 <_dtoa_r+0x32a>
 8013510:	f8cd 8010 	str.w	r8, [sp, #16]
 8013514:	4654      	mov	r4, sl
 8013516:	e754      	b.n	80133c2 <_dtoa_r+0x36a>
 8013518:	4a54      	ldr	r2, [pc, #336]	@ (801366c <_dtoa_r+0x614>)
 801351a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801351e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8013522:	9a08      	ldr	r2, [sp, #32]
 8013524:	ec41 0b17 	vmov	d7, r0, r1
 8013528:	443c      	add	r4, r7
 801352a:	b34a      	cbz	r2, 8013580 <_dtoa_r+0x528>
 801352c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8013530:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8013534:	463e      	mov	r6, r7
 8013536:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801353a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801353e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8013542:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013546:	ee14 2a90 	vmov	r2, s9
 801354a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801354e:	3230      	adds	r2, #48	@ 0x30
 8013550:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013554:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801355c:	f806 2b01 	strb.w	r2, [r6], #1
 8013560:	d438      	bmi.n	80135d4 <_dtoa_r+0x57c>
 8013562:	ee32 5b46 	vsub.f64	d5, d2, d6
 8013566:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801356a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801356e:	d462      	bmi.n	8013636 <_dtoa_r+0x5de>
 8013570:	42a6      	cmp	r6, r4
 8013572:	f43f af4d 	beq.w	8013410 <_dtoa_r+0x3b8>
 8013576:	ee27 7b03 	vmul.f64	d7, d7, d3
 801357a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801357e:	e7e0      	b.n	8013542 <_dtoa_r+0x4ea>
 8013580:	4621      	mov	r1, r4
 8013582:	463e      	mov	r6, r7
 8013584:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013588:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801358c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013590:	ee14 2a90 	vmov	r2, s9
 8013594:	3230      	adds	r2, #48	@ 0x30
 8013596:	f806 2b01 	strb.w	r2, [r6], #1
 801359a:	42a6      	cmp	r6, r4
 801359c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80135a0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80135a4:	d119      	bne.n	80135da <_dtoa_r+0x582>
 80135a6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80135aa:	ee37 4b05 	vadd.f64	d4, d7, d5
 80135ae:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80135b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135b6:	dc3e      	bgt.n	8013636 <_dtoa_r+0x5de>
 80135b8:	ee35 5b47 	vsub.f64	d5, d5, d7
 80135bc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80135c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135c4:	f57f af24 	bpl.w	8013410 <_dtoa_r+0x3b8>
 80135c8:	460e      	mov	r6, r1
 80135ca:	3901      	subs	r1, #1
 80135cc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80135d0:	2b30      	cmp	r3, #48	@ 0x30
 80135d2:	d0f9      	beq.n	80135c8 <_dtoa_r+0x570>
 80135d4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80135d8:	e758      	b.n	801348c <_dtoa_r+0x434>
 80135da:	ee26 6b03 	vmul.f64	d6, d6, d3
 80135de:	e7d5      	b.n	801358c <_dtoa_r+0x534>
 80135e0:	d10b      	bne.n	80135fa <_dtoa_r+0x5a2>
 80135e2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80135e6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80135ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 80135ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80135f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135f6:	f2c0 8161 	blt.w	80138bc <_dtoa_r+0x864>
 80135fa:	2400      	movs	r4, #0
 80135fc:	4625      	mov	r5, r4
 80135fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013600:	43db      	mvns	r3, r3
 8013602:	9304      	str	r3, [sp, #16]
 8013604:	463e      	mov	r6, r7
 8013606:	f04f 0800 	mov.w	r8, #0
 801360a:	4621      	mov	r1, r4
 801360c:	4648      	mov	r0, r9
 801360e:	f000 fbb9 	bl	8013d84 <_Bfree>
 8013612:	2d00      	cmp	r5, #0
 8013614:	d0de      	beq.n	80135d4 <_dtoa_r+0x57c>
 8013616:	f1b8 0f00 	cmp.w	r8, #0
 801361a:	d005      	beq.n	8013628 <_dtoa_r+0x5d0>
 801361c:	45a8      	cmp	r8, r5
 801361e:	d003      	beq.n	8013628 <_dtoa_r+0x5d0>
 8013620:	4641      	mov	r1, r8
 8013622:	4648      	mov	r0, r9
 8013624:	f000 fbae 	bl	8013d84 <_Bfree>
 8013628:	4629      	mov	r1, r5
 801362a:	4648      	mov	r0, r9
 801362c:	f000 fbaa 	bl	8013d84 <_Bfree>
 8013630:	e7d0      	b.n	80135d4 <_dtoa_r+0x57c>
 8013632:	f8cd 8010 	str.w	r8, [sp, #16]
 8013636:	4633      	mov	r3, r6
 8013638:	461e      	mov	r6, r3
 801363a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801363e:	2a39      	cmp	r2, #57	@ 0x39
 8013640:	d106      	bne.n	8013650 <_dtoa_r+0x5f8>
 8013642:	429f      	cmp	r7, r3
 8013644:	d1f8      	bne.n	8013638 <_dtoa_r+0x5e0>
 8013646:	9a04      	ldr	r2, [sp, #16]
 8013648:	3201      	adds	r2, #1
 801364a:	9204      	str	r2, [sp, #16]
 801364c:	2230      	movs	r2, #48	@ 0x30
 801364e:	703a      	strb	r2, [r7, #0]
 8013650:	781a      	ldrb	r2, [r3, #0]
 8013652:	3201      	adds	r2, #1
 8013654:	701a      	strb	r2, [r3, #0]
 8013656:	e7bd      	b.n	80135d4 <_dtoa_r+0x57c>
 8013658:	ee27 7b04 	vmul.f64	d7, d7, d4
 801365c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013664:	f47f aeef 	bne.w	8013446 <_dtoa_r+0x3ee>
 8013668:	e710      	b.n	801348c <_dtoa_r+0x434>
 801366a:	bf00      	nop
 801366c:	08015190 	.word	0x08015190
 8013670:	08015168 	.word	0x08015168
 8013674:	9908      	ldr	r1, [sp, #32]
 8013676:	2900      	cmp	r1, #0
 8013678:	f000 80e3 	beq.w	8013842 <_dtoa_r+0x7ea>
 801367c:	9907      	ldr	r1, [sp, #28]
 801367e:	2901      	cmp	r1, #1
 8013680:	f300 80c8 	bgt.w	8013814 <_dtoa_r+0x7bc>
 8013684:	2d00      	cmp	r5, #0
 8013686:	f000 80c1 	beq.w	801380c <_dtoa_r+0x7b4>
 801368a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801368e:	9e05      	ldr	r6, [sp, #20]
 8013690:	461c      	mov	r4, r3
 8013692:	9304      	str	r3, [sp, #16]
 8013694:	9b05      	ldr	r3, [sp, #20]
 8013696:	4413      	add	r3, r2
 8013698:	9305      	str	r3, [sp, #20]
 801369a:	9b06      	ldr	r3, [sp, #24]
 801369c:	2101      	movs	r1, #1
 801369e:	4413      	add	r3, r2
 80136a0:	4648      	mov	r0, r9
 80136a2:	9306      	str	r3, [sp, #24]
 80136a4:	f000 fc22 	bl	8013eec <__i2b>
 80136a8:	9b04      	ldr	r3, [sp, #16]
 80136aa:	4605      	mov	r5, r0
 80136ac:	b166      	cbz	r6, 80136c8 <_dtoa_r+0x670>
 80136ae:	9a06      	ldr	r2, [sp, #24]
 80136b0:	2a00      	cmp	r2, #0
 80136b2:	dd09      	ble.n	80136c8 <_dtoa_r+0x670>
 80136b4:	42b2      	cmp	r2, r6
 80136b6:	9905      	ldr	r1, [sp, #20]
 80136b8:	bfa8      	it	ge
 80136ba:	4632      	movge	r2, r6
 80136bc:	1a89      	subs	r1, r1, r2
 80136be:	9105      	str	r1, [sp, #20]
 80136c0:	9906      	ldr	r1, [sp, #24]
 80136c2:	1ab6      	subs	r6, r6, r2
 80136c4:	1a8a      	subs	r2, r1, r2
 80136c6:	9206      	str	r2, [sp, #24]
 80136c8:	b1fb      	cbz	r3, 801370a <_dtoa_r+0x6b2>
 80136ca:	9a08      	ldr	r2, [sp, #32]
 80136cc:	2a00      	cmp	r2, #0
 80136ce:	f000 80bc 	beq.w	801384a <_dtoa_r+0x7f2>
 80136d2:	b19c      	cbz	r4, 80136fc <_dtoa_r+0x6a4>
 80136d4:	4629      	mov	r1, r5
 80136d6:	4622      	mov	r2, r4
 80136d8:	4648      	mov	r0, r9
 80136da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80136dc:	f000 fcc6 	bl	801406c <__pow5mult>
 80136e0:	9a01      	ldr	r2, [sp, #4]
 80136e2:	4601      	mov	r1, r0
 80136e4:	4605      	mov	r5, r0
 80136e6:	4648      	mov	r0, r9
 80136e8:	f000 fc16 	bl	8013f18 <__multiply>
 80136ec:	9901      	ldr	r1, [sp, #4]
 80136ee:	9004      	str	r0, [sp, #16]
 80136f0:	4648      	mov	r0, r9
 80136f2:	f000 fb47 	bl	8013d84 <_Bfree>
 80136f6:	9a04      	ldr	r2, [sp, #16]
 80136f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80136fa:	9201      	str	r2, [sp, #4]
 80136fc:	1b1a      	subs	r2, r3, r4
 80136fe:	d004      	beq.n	801370a <_dtoa_r+0x6b2>
 8013700:	9901      	ldr	r1, [sp, #4]
 8013702:	4648      	mov	r0, r9
 8013704:	f000 fcb2 	bl	801406c <__pow5mult>
 8013708:	9001      	str	r0, [sp, #4]
 801370a:	2101      	movs	r1, #1
 801370c:	4648      	mov	r0, r9
 801370e:	f000 fbed 	bl	8013eec <__i2b>
 8013712:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013714:	4604      	mov	r4, r0
 8013716:	2b00      	cmp	r3, #0
 8013718:	f000 81d0 	beq.w	8013abc <_dtoa_r+0xa64>
 801371c:	461a      	mov	r2, r3
 801371e:	4601      	mov	r1, r0
 8013720:	4648      	mov	r0, r9
 8013722:	f000 fca3 	bl	801406c <__pow5mult>
 8013726:	9b07      	ldr	r3, [sp, #28]
 8013728:	2b01      	cmp	r3, #1
 801372a:	4604      	mov	r4, r0
 801372c:	f300 8095 	bgt.w	801385a <_dtoa_r+0x802>
 8013730:	9b02      	ldr	r3, [sp, #8]
 8013732:	2b00      	cmp	r3, #0
 8013734:	f040 808b 	bne.w	801384e <_dtoa_r+0x7f6>
 8013738:	9b03      	ldr	r3, [sp, #12]
 801373a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801373e:	2a00      	cmp	r2, #0
 8013740:	f040 8087 	bne.w	8013852 <_dtoa_r+0x7fa>
 8013744:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8013748:	0d12      	lsrs	r2, r2, #20
 801374a:	0512      	lsls	r2, r2, #20
 801374c:	2a00      	cmp	r2, #0
 801374e:	f000 8082 	beq.w	8013856 <_dtoa_r+0x7fe>
 8013752:	9b05      	ldr	r3, [sp, #20]
 8013754:	3301      	adds	r3, #1
 8013756:	9305      	str	r3, [sp, #20]
 8013758:	9b06      	ldr	r3, [sp, #24]
 801375a:	3301      	adds	r3, #1
 801375c:	9306      	str	r3, [sp, #24]
 801375e:	2301      	movs	r3, #1
 8013760:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013762:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013764:	2b00      	cmp	r3, #0
 8013766:	f000 81af 	beq.w	8013ac8 <_dtoa_r+0xa70>
 801376a:	6922      	ldr	r2, [r4, #16]
 801376c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013770:	6910      	ldr	r0, [r2, #16]
 8013772:	f000 fb6f 	bl	8013e54 <__hi0bits>
 8013776:	f1c0 0020 	rsb	r0, r0, #32
 801377a:	9b06      	ldr	r3, [sp, #24]
 801377c:	4418      	add	r0, r3
 801377e:	f010 001f 	ands.w	r0, r0, #31
 8013782:	d076      	beq.n	8013872 <_dtoa_r+0x81a>
 8013784:	f1c0 0220 	rsb	r2, r0, #32
 8013788:	2a04      	cmp	r2, #4
 801378a:	dd69      	ble.n	8013860 <_dtoa_r+0x808>
 801378c:	9b05      	ldr	r3, [sp, #20]
 801378e:	f1c0 001c 	rsb	r0, r0, #28
 8013792:	4403      	add	r3, r0
 8013794:	9305      	str	r3, [sp, #20]
 8013796:	9b06      	ldr	r3, [sp, #24]
 8013798:	4406      	add	r6, r0
 801379a:	4403      	add	r3, r0
 801379c:	9306      	str	r3, [sp, #24]
 801379e:	9b05      	ldr	r3, [sp, #20]
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	dd05      	ble.n	80137b0 <_dtoa_r+0x758>
 80137a4:	9901      	ldr	r1, [sp, #4]
 80137a6:	461a      	mov	r2, r3
 80137a8:	4648      	mov	r0, r9
 80137aa:	f000 fcb9 	bl	8014120 <__lshift>
 80137ae:	9001      	str	r0, [sp, #4]
 80137b0:	9b06      	ldr	r3, [sp, #24]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	dd05      	ble.n	80137c2 <_dtoa_r+0x76a>
 80137b6:	4621      	mov	r1, r4
 80137b8:	461a      	mov	r2, r3
 80137ba:	4648      	mov	r0, r9
 80137bc:	f000 fcb0 	bl	8014120 <__lshift>
 80137c0:	4604      	mov	r4, r0
 80137c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d056      	beq.n	8013876 <_dtoa_r+0x81e>
 80137c8:	9801      	ldr	r0, [sp, #4]
 80137ca:	4621      	mov	r1, r4
 80137cc:	f000 fd14 	bl	80141f8 <__mcmp>
 80137d0:	2800      	cmp	r0, #0
 80137d2:	da50      	bge.n	8013876 <_dtoa_r+0x81e>
 80137d4:	f108 33ff 	add.w	r3, r8, #4294967295
 80137d8:	9304      	str	r3, [sp, #16]
 80137da:	9901      	ldr	r1, [sp, #4]
 80137dc:	2300      	movs	r3, #0
 80137de:	220a      	movs	r2, #10
 80137e0:	4648      	mov	r0, r9
 80137e2:	f000 faf1 	bl	8013dc8 <__multadd>
 80137e6:	9b08      	ldr	r3, [sp, #32]
 80137e8:	9001      	str	r0, [sp, #4]
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	f000 816e 	beq.w	8013acc <_dtoa_r+0xa74>
 80137f0:	4629      	mov	r1, r5
 80137f2:	2300      	movs	r3, #0
 80137f4:	220a      	movs	r2, #10
 80137f6:	4648      	mov	r0, r9
 80137f8:	f000 fae6 	bl	8013dc8 <__multadd>
 80137fc:	f1bb 0f00 	cmp.w	fp, #0
 8013800:	4605      	mov	r5, r0
 8013802:	dc64      	bgt.n	80138ce <_dtoa_r+0x876>
 8013804:	9b07      	ldr	r3, [sp, #28]
 8013806:	2b02      	cmp	r3, #2
 8013808:	dc3e      	bgt.n	8013888 <_dtoa_r+0x830>
 801380a:	e060      	b.n	80138ce <_dtoa_r+0x876>
 801380c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801380e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8013812:	e73c      	b.n	801368e <_dtoa_r+0x636>
 8013814:	f10a 34ff 	add.w	r4, sl, #4294967295
 8013818:	42a3      	cmp	r3, r4
 801381a:	bfbf      	itttt	lt
 801381c:	1ae2      	sublt	r2, r4, r3
 801381e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8013820:	189b      	addlt	r3, r3, r2
 8013822:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8013824:	bfae      	itee	ge
 8013826:	1b1c      	subge	r4, r3, r4
 8013828:	4623      	movlt	r3, r4
 801382a:	2400      	movlt	r4, #0
 801382c:	f1ba 0f00 	cmp.w	sl, #0
 8013830:	bfb5      	itete	lt
 8013832:	9a05      	ldrlt	r2, [sp, #20]
 8013834:	9e05      	ldrge	r6, [sp, #20]
 8013836:	eba2 060a 	sublt.w	r6, r2, sl
 801383a:	4652      	movge	r2, sl
 801383c:	bfb8      	it	lt
 801383e:	2200      	movlt	r2, #0
 8013840:	e727      	b.n	8013692 <_dtoa_r+0x63a>
 8013842:	9e05      	ldr	r6, [sp, #20]
 8013844:	9d08      	ldr	r5, [sp, #32]
 8013846:	461c      	mov	r4, r3
 8013848:	e730      	b.n	80136ac <_dtoa_r+0x654>
 801384a:	461a      	mov	r2, r3
 801384c:	e758      	b.n	8013700 <_dtoa_r+0x6a8>
 801384e:	2300      	movs	r3, #0
 8013850:	e786      	b.n	8013760 <_dtoa_r+0x708>
 8013852:	9b02      	ldr	r3, [sp, #8]
 8013854:	e784      	b.n	8013760 <_dtoa_r+0x708>
 8013856:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013858:	e783      	b.n	8013762 <_dtoa_r+0x70a>
 801385a:	2300      	movs	r3, #0
 801385c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801385e:	e784      	b.n	801376a <_dtoa_r+0x712>
 8013860:	d09d      	beq.n	801379e <_dtoa_r+0x746>
 8013862:	9b05      	ldr	r3, [sp, #20]
 8013864:	321c      	adds	r2, #28
 8013866:	4413      	add	r3, r2
 8013868:	9305      	str	r3, [sp, #20]
 801386a:	9b06      	ldr	r3, [sp, #24]
 801386c:	4416      	add	r6, r2
 801386e:	4413      	add	r3, r2
 8013870:	e794      	b.n	801379c <_dtoa_r+0x744>
 8013872:	4602      	mov	r2, r0
 8013874:	e7f5      	b.n	8013862 <_dtoa_r+0x80a>
 8013876:	f1ba 0f00 	cmp.w	sl, #0
 801387a:	f8cd 8010 	str.w	r8, [sp, #16]
 801387e:	46d3      	mov	fp, sl
 8013880:	dc21      	bgt.n	80138c6 <_dtoa_r+0x86e>
 8013882:	9b07      	ldr	r3, [sp, #28]
 8013884:	2b02      	cmp	r3, #2
 8013886:	dd1e      	ble.n	80138c6 <_dtoa_r+0x86e>
 8013888:	f1bb 0f00 	cmp.w	fp, #0
 801388c:	f47f aeb7 	bne.w	80135fe <_dtoa_r+0x5a6>
 8013890:	4621      	mov	r1, r4
 8013892:	465b      	mov	r3, fp
 8013894:	2205      	movs	r2, #5
 8013896:	4648      	mov	r0, r9
 8013898:	f000 fa96 	bl	8013dc8 <__multadd>
 801389c:	4601      	mov	r1, r0
 801389e:	4604      	mov	r4, r0
 80138a0:	9801      	ldr	r0, [sp, #4]
 80138a2:	f000 fca9 	bl	80141f8 <__mcmp>
 80138a6:	2800      	cmp	r0, #0
 80138a8:	f77f aea9 	ble.w	80135fe <_dtoa_r+0x5a6>
 80138ac:	463e      	mov	r6, r7
 80138ae:	2331      	movs	r3, #49	@ 0x31
 80138b0:	f806 3b01 	strb.w	r3, [r6], #1
 80138b4:	9b04      	ldr	r3, [sp, #16]
 80138b6:	3301      	adds	r3, #1
 80138b8:	9304      	str	r3, [sp, #16]
 80138ba:	e6a4      	b.n	8013606 <_dtoa_r+0x5ae>
 80138bc:	f8cd 8010 	str.w	r8, [sp, #16]
 80138c0:	4654      	mov	r4, sl
 80138c2:	4625      	mov	r5, r4
 80138c4:	e7f2      	b.n	80138ac <_dtoa_r+0x854>
 80138c6:	9b08      	ldr	r3, [sp, #32]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	f000 8103 	beq.w	8013ad4 <_dtoa_r+0xa7c>
 80138ce:	2e00      	cmp	r6, #0
 80138d0:	dd05      	ble.n	80138de <_dtoa_r+0x886>
 80138d2:	4629      	mov	r1, r5
 80138d4:	4632      	mov	r2, r6
 80138d6:	4648      	mov	r0, r9
 80138d8:	f000 fc22 	bl	8014120 <__lshift>
 80138dc:	4605      	mov	r5, r0
 80138de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d058      	beq.n	8013996 <_dtoa_r+0x93e>
 80138e4:	6869      	ldr	r1, [r5, #4]
 80138e6:	4648      	mov	r0, r9
 80138e8:	f000 fa0c 	bl	8013d04 <_Balloc>
 80138ec:	4606      	mov	r6, r0
 80138ee:	b928      	cbnz	r0, 80138fc <_dtoa_r+0x8a4>
 80138f0:	4b82      	ldr	r3, [pc, #520]	@ (8013afc <_dtoa_r+0xaa4>)
 80138f2:	4602      	mov	r2, r0
 80138f4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80138f8:	f7ff bbc7 	b.w	801308a <_dtoa_r+0x32>
 80138fc:	692a      	ldr	r2, [r5, #16]
 80138fe:	3202      	adds	r2, #2
 8013900:	0092      	lsls	r2, r2, #2
 8013902:	f105 010c 	add.w	r1, r5, #12
 8013906:	300c      	adds	r0, #12
 8013908:	f000 ffac 	bl	8014864 <memcpy>
 801390c:	2201      	movs	r2, #1
 801390e:	4631      	mov	r1, r6
 8013910:	4648      	mov	r0, r9
 8013912:	f000 fc05 	bl	8014120 <__lshift>
 8013916:	1c7b      	adds	r3, r7, #1
 8013918:	9305      	str	r3, [sp, #20]
 801391a:	eb07 030b 	add.w	r3, r7, fp
 801391e:	9309      	str	r3, [sp, #36]	@ 0x24
 8013920:	9b02      	ldr	r3, [sp, #8]
 8013922:	f003 0301 	and.w	r3, r3, #1
 8013926:	46a8      	mov	r8, r5
 8013928:	9308      	str	r3, [sp, #32]
 801392a:	4605      	mov	r5, r0
 801392c:	9b05      	ldr	r3, [sp, #20]
 801392e:	9801      	ldr	r0, [sp, #4]
 8013930:	4621      	mov	r1, r4
 8013932:	f103 3bff 	add.w	fp, r3, #4294967295
 8013936:	f7ff fb04 	bl	8012f42 <quorem>
 801393a:	4641      	mov	r1, r8
 801393c:	9002      	str	r0, [sp, #8]
 801393e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8013942:	9801      	ldr	r0, [sp, #4]
 8013944:	f000 fc58 	bl	80141f8 <__mcmp>
 8013948:	462a      	mov	r2, r5
 801394a:	9006      	str	r0, [sp, #24]
 801394c:	4621      	mov	r1, r4
 801394e:	4648      	mov	r0, r9
 8013950:	f000 fc6e 	bl	8014230 <__mdiff>
 8013954:	68c2      	ldr	r2, [r0, #12]
 8013956:	4606      	mov	r6, r0
 8013958:	b9fa      	cbnz	r2, 801399a <_dtoa_r+0x942>
 801395a:	4601      	mov	r1, r0
 801395c:	9801      	ldr	r0, [sp, #4]
 801395e:	f000 fc4b 	bl	80141f8 <__mcmp>
 8013962:	4602      	mov	r2, r0
 8013964:	4631      	mov	r1, r6
 8013966:	4648      	mov	r0, r9
 8013968:	920a      	str	r2, [sp, #40]	@ 0x28
 801396a:	f000 fa0b 	bl	8013d84 <_Bfree>
 801396e:	9b07      	ldr	r3, [sp, #28]
 8013970:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013972:	9e05      	ldr	r6, [sp, #20]
 8013974:	ea43 0102 	orr.w	r1, r3, r2
 8013978:	9b08      	ldr	r3, [sp, #32]
 801397a:	4319      	orrs	r1, r3
 801397c:	d10f      	bne.n	801399e <_dtoa_r+0x946>
 801397e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013982:	d028      	beq.n	80139d6 <_dtoa_r+0x97e>
 8013984:	9b06      	ldr	r3, [sp, #24]
 8013986:	2b00      	cmp	r3, #0
 8013988:	dd02      	ble.n	8013990 <_dtoa_r+0x938>
 801398a:	9b02      	ldr	r3, [sp, #8]
 801398c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8013990:	f88b a000 	strb.w	sl, [fp]
 8013994:	e639      	b.n	801360a <_dtoa_r+0x5b2>
 8013996:	4628      	mov	r0, r5
 8013998:	e7bd      	b.n	8013916 <_dtoa_r+0x8be>
 801399a:	2201      	movs	r2, #1
 801399c:	e7e2      	b.n	8013964 <_dtoa_r+0x90c>
 801399e:	9b06      	ldr	r3, [sp, #24]
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	db04      	blt.n	80139ae <_dtoa_r+0x956>
 80139a4:	9907      	ldr	r1, [sp, #28]
 80139a6:	430b      	orrs	r3, r1
 80139a8:	9908      	ldr	r1, [sp, #32]
 80139aa:	430b      	orrs	r3, r1
 80139ac:	d120      	bne.n	80139f0 <_dtoa_r+0x998>
 80139ae:	2a00      	cmp	r2, #0
 80139b0:	ddee      	ble.n	8013990 <_dtoa_r+0x938>
 80139b2:	9901      	ldr	r1, [sp, #4]
 80139b4:	2201      	movs	r2, #1
 80139b6:	4648      	mov	r0, r9
 80139b8:	f000 fbb2 	bl	8014120 <__lshift>
 80139bc:	4621      	mov	r1, r4
 80139be:	9001      	str	r0, [sp, #4]
 80139c0:	f000 fc1a 	bl	80141f8 <__mcmp>
 80139c4:	2800      	cmp	r0, #0
 80139c6:	dc03      	bgt.n	80139d0 <_dtoa_r+0x978>
 80139c8:	d1e2      	bne.n	8013990 <_dtoa_r+0x938>
 80139ca:	f01a 0f01 	tst.w	sl, #1
 80139ce:	d0df      	beq.n	8013990 <_dtoa_r+0x938>
 80139d0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80139d4:	d1d9      	bne.n	801398a <_dtoa_r+0x932>
 80139d6:	2339      	movs	r3, #57	@ 0x39
 80139d8:	f88b 3000 	strb.w	r3, [fp]
 80139dc:	4633      	mov	r3, r6
 80139de:	461e      	mov	r6, r3
 80139e0:	3b01      	subs	r3, #1
 80139e2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80139e6:	2a39      	cmp	r2, #57	@ 0x39
 80139e8:	d053      	beq.n	8013a92 <_dtoa_r+0xa3a>
 80139ea:	3201      	adds	r2, #1
 80139ec:	701a      	strb	r2, [r3, #0]
 80139ee:	e60c      	b.n	801360a <_dtoa_r+0x5b2>
 80139f0:	2a00      	cmp	r2, #0
 80139f2:	dd07      	ble.n	8013a04 <_dtoa_r+0x9ac>
 80139f4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80139f8:	d0ed      	beq.n	80139d6 <_dtoa_r+0x97e>
 80139fa:	f10a 0301 	add.w	r3, sl, #1
 80139fe:	f88b 3000 	strb.w	r3, [fp]
 8013a02:	e602      	b.n	801360a <_dtoa_r+0x5b2>
 8013a04:	9b05      	ldr	r3, [sp, #20]
 8013a06:	9a05      	ldr	r2, [sp, #20]
 8013a08:	f803 ac01 	strb.w	sl, [r3, #-1]
 8013a0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013a0e:	4293      	cmp	r3, r2
 8013a10:	d029      	beq.n	8013a66 <_dtoa_r+0xa0e>
 8013a12:	9901      	ldr	r1, [sp, #4]
 8013a14:	2300      	movs	r3, #0
 8013a16:	220a      	movs	r2, #10
 8013a18:	4648      	mov	r0, r9
 8013a1a:	f000 f9d5 	bl	8013dc8 <__multadd>
 8013a1e:	45a8      	cmp	r8, r5
 8013a20:	9001      	str	r0, [sp, #4]
 8013a22:	f04f 0300 	mov.w	r3, #0
 8013a26:	f04f 020a 	mov.w	r2, #10
 8013a2a:	4641      	mov	r1, r8
 8013a2c:	4648      	mov	r0, r9
 8013a2e:	d107      	bne.n	8013a40 <_dtoa_r+0x9e8>
 8013a30:	f000 f9ca 	bl	8013dc8 <__multadd>
 8013a34:	4680      	mov	r8, r0
 8013a36:	4605      	mov	r5, r0
 8013a38:	9b05      	ldr	r3, [sp, #20]
 8013a3a:	3301      	adds	r3, #1
 8013a3c:	9305      	str	r3, [sp, #20]
 8013a3e:	e775      	b.n	801392c <_dtoa_r+0x8d4>
 8013a40:	f000 f9c2 	bl	8013dc8 <__multadd>
 8013a44:	4629      	mov	r1, r5
 8013a46:	4680      	mov	r8, r0
 8013a48:	2300      	movs	r3, #0
 8013a4a:	220a      	movs	r2, #10
 8013a4c:	4648      	mov	r0, r9
 8013a4e:	f000 f9bb 	bl	8013dc8 <__multadd>
 8013a52:	4605      	mov	r5, r0
 8013a54:	e7f0      	b.n	8013a38 <_dtoa_r+0x9e0>
 8013a56:	f1bb 0f00 	cmp.w	fp, #0
 8013a5a:	bfcc      	ite	gt
 8013a5c:	465e      	movgt	r6, fp
 8013a5e:	2601      	movle	r6, #1
 8013a60:	443e      	add	r6, r7
 8013a62:	f04f 0800 	mov.w	r8, #0
 8013a66:	9901      	ldr	r1, [sp, #4]
 8013a68:	2201      	movs	r2, #1
 8013a6a:	4648      	mov	r0, r9
 8013a6c:	f000 fb58 	bl	8014120 <__lshift>
 8013a70:	4621      	mov	r1, r4
 8013a72:	9001      	str	r0, [sp, #4]
 8013a74:	f000 fbc0 	bl	80141f8 <__mcmp>
 8013a78:	2800      	cmp	r0, #0
 8013a7a:	dcaf      	bgt.n	80139dc <_dtoa_r+0x984>
 8013a7c:	d102      	bne.n	8013a84 <_dtoa_r+0xa2c>
 8013a7e:	f01a 0f01 	tst.w	sl, #1
 8013a82:	d1ab      	bne.n	80139dc <_dtoa_r+0x984>
 8013a84:	4633      	mov	r3, r6
 8013a86:	461e      	mov	r6, r3
 8013a88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013a8c:	2a30      	cmp	r2, #48	@ 0x30
 8013a8e:	d0fa      	beq.n	8013a86 <_dtoa_r+0xa2e>
 8013a90:	e5bb      	b.n	801360a <_dtoa_r+0x5b2>
 8013a92:	429f      	cmp	r7, r3
 8013a94:	d1a3      	bne.n	80139de <_dtoa_r+0x986>
 8013a96:	9b04      	ldr	r3, [sp, #16]
 8013a98:	3301      	adds	r3, #1
 8013a9a:	9304      	str	r3, [sp, #16]
 8013a9c:	2331      	movs	r3, #49	@ 0x31
 8013a9e:	703b      	strb	r3, [r7, #0]
 8013aa0:	e5b3      	b.n	801360a <_dtoa_r+0x5b2>
 8013aa2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013aa4:	4f16      	ldr	r7, [pc, #88]	@ (8013b00 <_dtoa_r+0xaa8>)
 8013aa6:	b11b      	cbz	r3, 8013ab0 <_dtoa_r+0xa58>
 8013aa8:	f107 0308 	add.w	r3, r7, #8
 8013aac:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8013aae:	6013      	str	r3, [r2, #0]
 8013ab0:	4638      	mov	r0, r7
 8013ab2:	b011      	add	sp, #68	@ 0x44
 8013ab4:	ecbd 8b02 	vpop	{d8}
 8013ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013abc:	9b07      	ldr	r3, [sp, #28]
 8013abe:	2b01      	cmp	r3, #1
 8013ac0:	f77f ae36 	ble.w	8013730 <_dtoa_r+0x6d8>
 8013ac4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013ac6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013ac8:	2001      	movs	r0, #1
 8013aca:	e656      	b.n	801377a <_dtoa_r+0x722>
 8013acc:	f1bb 0f00 	cmp.w	fp, #0
 8013ad0:	f77f aed7 	ble.w	8013882 <_dtoa_r+0x82a>
 8013ad4:	463e      	mov	r6, r7
 8013ad6:	9801      	ldr	r0, [sp, #4]
 8013ad8:	4621      	mov	r1, r4
 8013ada:	f7ff fa32 	bl	8012f42 <quorem>
 8013ade:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8013ae2:	f806 ab01 	strb.w	sl, [r6], #1
 8013ae6:	1bf2      	subs	r2, r6, r7
 8013ae8:	4593      	cmp	fp, r2
 8013aea:	ddb4      	ble.n	8013a56 <_dtoa_r+0x9fe>
 8013aec:	9901      	ldr	r1, [sp, #4]
 8013aee:	2300      	movs	r3, #0
 8013af0:	220a      	movs	r2, #10
 8013af2:	4648      	mov	r0, r9
 8013af4:	f000 f968 	bl	8013dc8 <__multadd>
 8013af8:	9001      	str	r0, [sp, #4]
 8013afa:	e7ec      	b.n	8013ad6 <_dtoa_r+0xa7e>
 8013afc:	080150ec 	.word	0x080150ec
 8013b00:	08015070 	.word	0x08015070

08013b04 <_free_r>:
 8013b04:	b538      	push	{r3, r4, r5, lr}
 8013b06:	4605      	mov	r5, r0
 8013b08:	2900      	cmp	r1, #0
 8013b0a:	d041      	beq.n	8013b90 <_free_r+0x8c>
 8013b0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013b10:	1f0c      	subs	r4, r1, #4
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	bfb8      	it	lt
 8013b16:	18e4      	addlt	r4, r4, r3
 8013b18:	f000 f8e8 	bl	8013cec <__malloc_lock>
 8013b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8013b94 <_free_r+0x90>)
 8013b1e:	6813      	ldr	r3, [r2, #0]
 8013b20:	b933      	cbnz	r3, 8013b30 <_free_r+0x2c>
 8013b22:	6063      	str	r3, [r4, #4]
 8013b24:	6014      	str	r4, [r2, #0]
 8013b26:	4628      	mov	r0, r5
 8013b28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013b2c:	f000 b8e4 	b.w	8013cf8 <__malloc_unlock>
 8013b30:	42a3      	cmp	r3, r4
 8013b32:	d908      	bls.n	8013b46 <_free_r+0x42>
 8013b34:	6820      	ldr	r0, [r4, #0]
 8013b36:	1821      	adds	r1, r4, r0
 8013b38:	428b      	cmp	r3, r1
 8013b3a:	bf01      	itttt	eq
 8013b3c:	6819      	ldreq	r1, [r3, #0]
 8013b3e:	685b      	ldreq	r3, [r3, #4]
 8013b40:	1809      	addeq	r1, r1, r0
 8013b42:	6021      	streq	r1, [r4, #0]
 8013b44:	e7ed      	b.n	8013b22 <_free_r+0x1e>
 8013b46:	461a      	mov	r2, r3
 8013b48:	685b      	ldr	r3, [r3, #4]
 8013b4a:	b10b      	cbz	r3, 8013b50 <_free_r+0x4c>
 8013b4c:	42a3      	cmp	r3, r4
 8013b4e:	d9fa      	bls.n	8013b46 <_free_r+0x42>
 8013b50:	6811      	ldr	r1, [r2, #0]
 8013b52:	1850      	adds	r0, r2, r1
 8013b54:	42a0      	cmp	r0, r4
 8013b56:	d10b      	bne.n	8013b70 <_free_r+0x6c>
 8013b58:	6820      	ldr	r0, [r4, #0]
 8013b5a:	4401      	add	r1, r0
 8013b5c:	1850      	adds	r0, r2, r1
 8013b5e:	4283      	cmp	r3, r0
 8013b60:	6011      	str	r1, [r2, #0]
 8013b62:	d1e0      	bne.n	8013b26 <_free_r+0x22>
 8013b64:	6818      	ldr	r0, [r3, #0]
 8013b66:	685b      	ldr	r3, [r3, #4]
 8013b68:	6053      	str	r3, [r2, #4]
 8013b6a:	4408      	add	r0, r1
 8013b6c:	6010      	str	r0, [r2, #0]
 8013b6e:	e7da      	b.n	8013b26 <_free_r+0x22>
 8013b70:	d902      	bls.n	8013b78 <_free_r+0x74>
 8013b72:	230c      	movs	r3, #12
 8013b74:	602b      	str	r3, [r5, #0]
 8013b76:	e7d6      	b.n	8013b26 <_free_r+0x22>
 8013b78:	6820      	ldr	r0, [r4, #0]
 8013b7a:	1821      	adds	r1, r4, r0
 8013b7c:	428b      	cmp	r3, r1
 8013b7e:	bf04      	itt	eq
 8013b80:	6819      	ldreq	r1, [r3, #0]
 8013b82:	685b      	ldreq	r3, [r3, #4]
 8013b84:	6063      	str	r3, [r4, #4]
 8013b86:	bf04      	itt	eq
 8013b88:	1809      	addeq	r1, r1, r0
 8013b8a:	6021      	streq	r1, [r4, #0]
 8013b8c:	6054      	str	r4, [r2, #4]
 8013b8e:	e7ca      	b.n	8013b26 <_free_r+0x22>
 8013b90:	bd38      	pop	{r3, r4, r5, pc}
 8013b92:	bf00      	nop
 8013b94:	2400275c 	.word	0x2400275c

08013b98 <malloc>:
 8013b98:	4b02      	ldr	r3, [pc, #8]	@ (8013ba4 <malloc+0xc>)
 8013b9a:	4601      	mov	r1, r0
 8013b9c:	6818      	ldr	r0, [r3, #0]
 8013b9e:	f000 b825 	b.w	8013bec <_malloc_r>
 8013ba2:	bf00      	nop
 8013ba4:	24000134 	.word	0x24000134

08013ba8 <sbrk_aligned>:
 8013ba8:	b570      	push	{r4, r5, r6, lr}
 8013baa:	4e0f      	ldr	r6, [pc, #60]	@ (8013be8 <sbrk_aligned+0x40>)
 8013bac:	460c      	mov	r4, r1
 8013bae:	6831      	ldr	r1, [r6, #0]
 8013bb0:	4605      	mov	r5, r0
 8013bb2:	b911      	cbnz	r1, 8013bba <sbrk_aligned+0x12>
 8013bb4:	f000 fe46 	bl	8014844 <_sbrk_r>
 8013bb8:	6030      	str	r0, [r6, #0]
 8013bba:	4621      	mov	r1, r4
 8013bbc:	4628      	mov	r0, r5
 8013bbe:	f000 fe41 	bl	8014844 <_sbrk_r>
 8013bc2:	1c43      	adds	r3, r0, #1
 8013bc4:	d103      	bne.n	8013bce <sbrk_aligned+0x26>
 8013bc6:	f04f 34ff 	mov.w	r4, #4294967295
 8013bca:	4620      	mov	r0, r4
 8013bcc:	bd70      	pop	{r4, r5, r6, pc}
 8013bce:	1cc4      	adds	r4, r0, #3
 8013bd0:	f024 0403 	bic.w	r4, r4, #3
 8013bd4:	42a0      	cmp	r0, r4
 8013bd6:	d0f8      	beq.n	8013bca <sbrk_aligned+0x22>
 8013bd8:	1a21      	subs	r1, r4, r0
 8013bda:	4628      	mov	r0, r5
 8013bdc:	f000 fe32 	bl	8014844 <_sbrk_r>
 8013be0:	3001      	adds	r0, #1
 8013be2:	d1f2      	bne.n	8013bca <sbrk_aligned+0x22>
 8013be4:	e7ef      	b.n	8013bc6 <sbrk_aligned+0x1e>
 8013be6:	bf00      	nop
 8013be8:	24002758 	.word	0x24002758

08013bec <_malloc_r>:
 8013bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013bf0:	1ccd      	adds	r5, r1, #3
 8013bf2:	f025 0503 	bic.w	r5, r5, #3
 8013bf6:	3508      	adds	r5, #8
 8013bf8:	2d0c      	cmp	r5, #12
 8013bfa:	bf38      	it	cc
 8013bfc:	250c      	movcc	r5, #12
 8013bfe:	2d00      	cmp	r5, #0
 8013c00:	4606      	mov	r6, r0
 8013c02:	db01      	blt.n	8013c08 <_malloc_r+0x1c>
 8013c04:	42a9      	cmp	r1, r5
 8013c06:	d904      	bls.n	8013c12 <_malloc_r+0x26>
 8013c08:	230c      	movs	r3, #12
 8013c0a:	6033      	str	r3, [r6, #0]
 8013c0c:	2000      	movs	r0, #0
 8013c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013ce8 <_malloc_r+0xfc>
 8013c16:	f000 f869 	bl	8013cec <__malloc_lock>
 8013c1a:	f8d8 3000 	ldr.w	r3, [r8]
 8013c1e:	461c      	mov	r4, r3
 8013c20:	bb44      	cbnz	r4, 8013c74 <_malloc_r+0x88>
 8013c22:	4629      	mov	r1, r5
 8013c24:	4630      	mov	r0, r6
 8013c26:	f7ff ffbf 	bl	8013ba8 <sbrk_aligned>
 8013c2a:	1c43      	adds	r3, r0, #1
 8013c2c:	4604      	mov	r4, r0
 8013c2e:	d158      	bne.n	8013ce2 <_malloc_r+0xf6>
 8013c30:	f8d8 4000 	ldr.w	r4, [r8]
 8013c34:	4627      	mov	r7, r4
 8013c36:	2f00      	cmp	r7, #0
 8013c38:	d143      	bne.n	8013cc2 <_malloc_r+0xd6>
 8013c3a:	2c00      	cmp	r4, #0
 8013c3c:	d04b      	beq.n	8013cd6 <_malloc_r+0xea>
 8013c3e:	6823      	ldr	r3, [r4, #0]
 8013c40:	4639      	mov	r1, r7
 8013c42:	4630      	mov	r0, r6
 8013c44:	eb04 0903 	add.w	r9, r4, r3
 8013c48:	f000 fdfc 	bl	8014844 <_sbrk_r>
 8013c4c:	4581      	cmp	r9, r0
 8013c4e:	d142      	bne.n	8013cd6 <_malloc_r+0xea>
 8013c50:	6821      	ldr	r1, [r4, #0]
 8013c52:	1a6d      	subs	r5, r5, r1
 8013c54:	4629      	mov	r1, r5
 8013c56:	4630      	mov	r0, r6
 8013c58:	f7ff ffa6 	bl	8013ba8 <sbrk_aligned>
 8013c5c:	3001      	adds	r0, #1
 8013c5e:	d03a      	beq.n	8013cd6 <_malloc_r+0xea>
 8013c60:	6823      	ldr	r3, [r4, #0]
 8013c62:	442b      	add	r3, r5
 8013c64:	6023      	str	r3, [r4, #0]
 8013c66:	f8d8 3000 	ldr.w	r3, [r8]
 8013c6a:	685a      	ldr	r2, [r3, #4]
 8013c6c:	bb62      	cbnz	r2, 8013cc8 <_malloc_r+0xdc>
 8013c6e:	f8c8 7000 	str.w	r7, [r8]
 8013c72:	e00f      	b.n	8013c94 <_malloc_r+0xa8>
 8013c74:	6822      	ldr	r2, [r4, #0]
 8013c76:	1b52      	subs	r2, r2, r5
 8013c78:	d420      	bmi.n	8013cbc <_malloc_r+0xd0>
 8013c7a:	2a0b      	cmp	r2, #11
 8013c7c:	d917      	bls.n	8013cae <_malloc_r+0xc2>
 8013c7e:	1961      	adds	r1, r4, r5
 8013c80:	42a3      	cmp	r3, r4
 8013c82:	6025      	str	r5, [r4, #0]
 8013c84:	bf18      	it	ne
 8013c86:	6059      	strne	r1, [r3, #4]
 8013c88:	6863      	ldr	r3, [r4, #4]
 8013c8a:	bf08      	it	eq
 8013c8c:	f8c8 1000 	streq.w	r1, [r8]
 8013c90:	5162      	str	r2, [r4, r5]
 8013c92:	604b      	str	r3, [r1, #4]
 8013c94:	4630      	mov	r0, r6
 8013c96:	f000 f82f 	bl	8013cf8 <__malloc_unlock>
 8013c9a:	f104 000b 	add.w	r0, r4, #11
 8013c9e:	1d23      	adds	r3, r4, #4
 8013ca0:	f020 0007 	bic.w	r0, r0, #7
 8013ca4:	1ac2      	subs	r2, r0, r3
 8013ca6:	bf1c      	itt	ne
 8013ca8:	1a1b      	subne	r3, r3, r0
 8013caa:	50a3      	strne	r3, [r4, r2]
 8013cac:	e7af      	b.n	8013c0e <_malloc_r+0x22>
 8013cae:	6862      	ldr	r2, [r4, #4]
 8013cb0:	42a3      	cmp	r3, r4
 8013cb2:	bf0c      	ite	eq
 8013cb4:	f8c8 2000 	streq.w	r2, [r8]
 8013cb8:	605a      	strne	r2, [r3, #4]
 8013cba:	e7eb      	b.n	8013c94 <_malloc_r+0xa8>
 8013cbc:	4623      	mov	r3, r4
 8013cbe:	6864      	ldr	r4, [r4, #4]
 8013cc0:	e7ae      	b.n	8013c20 <_malloc_r+0x34>
 8013cc2:	463c      	mov	r4, r7
 8013cc4:	687f      	ldr	r7, [r7, #4]
 8013cc6:	e7b6      	b.n	8013c36 <_malloc_r+0x4a>
 8013cc8:	461a      	mov	r2, r3
 8013cca:	685b      	ldr	r3, [r3, #4]
 8013ccc:	42a3      	cmp	r3, r4
 8013cce:	d1fb      	bne.n	8013cc8 <_malloc_r+0xdc>
 8013cd0:	2300      	movs	r3, #0
 8013cd2:	6053      	str	r3, [r2, #4]
 8013cd4:	e7de      	b.n	8013c94 <_malloc_r+0xa8>
 8013cd6:	230c      	movs	r3, #12
 8013cd8:	6033      	str	r3, [r6, #0]
 8013cda:	4630      	mov	r0, r6
 8013cdc:	f000 f80c 	bl	8013cf8 <__malloc_unlock>
 8013ce0:	e794      	b.n	8013c0c <_malloc_r+0x20>
 8013ce2:	6005      	str	r5, [r0, #0]
 8013ce4:	e7d6      	b.n	8013c94 <_malloc_r+0xa8>
 8013ce6:	bf00      	nop
 8013ce8:	2400275c 	.word	0x2400275c

08013cec <__malloc_lock>:
 8013cec:	4801      	ldr	r0, [pc, #4]	@ (8013cf4 <__malloc_lock+0x8>)
 8013cee:	f7ff b926 	b.w	8012f3e <__retarget_lock_acquire_recursive>
 8013cf2:	bf00      	nop
 8013cf4:	24002754 	.word	0x24002754

08013cf8 <__malloc_unlock>:
 8013cf8:	4801      	ldr	r0, [pc, #4]	@ (8013d00 <__malloc_unlock+0x8>)
 8013cfa:	f7ff b921 	b.w	8012f40 <__retarget_lock_release_recursive>
 8013cfe:	bf00      	nop
 8013d00:	24002754 	.word	0x24002754

08013d04 <_Balloc>:
 8013d04:	b570      	push	{r4, r5, r6, lr}
 8013d06:	69c6      	ldr	r6, [r0, #28]
 8013d08:	4604      	mov	r4, r0
 8013d0a:	460d      	mov	r5, r1
 8013d0c:	b976      	cbnz	r6, 8013d2c <_Balloc+0x28>
 8013d0e:	2010      	movs	r0, #16
 8013d10:	f7ff ff42 	bl	8013b98 <malloc>
 8013d14:	4602      	mov	r2, r0
 8013d16:	61e0      	str	r0, [r4, #28]
 8013d18:	b920      	cbnz	r0, 8013d24 <_Balloc+0x20>
 8013d1a:	4b18      	ldr	r3, [pc, #96]	@ (8013d7c <_Balloc+0x78>)
 8013d1c:	4818      	ldr	r0, [pc, #96]	@ (8013d80 <_Balloc+0x7c>)
 8013d1e:	216b      	movs	r1, #107	@ 0x6b
 8013d20:	f000 fdae 	bl	8014880 <__assert_func>
 8013d24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013d28:	6006      	str	r6, [r0, #0]
 8013d2a:	60c6      	str	r6, [r0, #12]
 8013d2c:	69e6      	ldr	r6, [r4, #28]
 8013d2e:	68f3      	ldr	r3, [r6, #12]
 8013d30:	b183      	cbz	r3, 8013d54 <_Balloc+0x50>
 8013d32:	69e3      	ldr	r3, [r4, #28]
 8013d34:	68db      	ldr	r3, [r3, #12]
 8013d36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013d3a:	b9b8      	cbnz	r0, 8013d6c <_Balloc+0x68>
 8013d3c:	2101      	movs	r1, #1
 8013d3e:	fa01 f605 	lsl.w	r6, r1, r5
 8013d42:	1d72      	adds	r2, r6, #5
 8013d44:	0092      	lsls	r2, r2, #2
 8013d46:	4620      	mov	r0, r4
 8013d48:	f000 fdb8 	bl	80148bc <_calloc_r>
 8013d4c:	b160      	cbz	r0, 8013d68 <_Balloc+0x64>
 8013d4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013d52:	e00e      	b.n	8013d72 <_Balloc+0x6e>
 8013d54:	2221      	movs	r2, #33	@ 0x21
 8013d56:	2104      	movs	r1, #4
 8013d58:	4620      	mov	r0, r4
 8013d5a:	f000 fdaf 	bl	80148bc <_calloc_r>
 8013d5e:	69e3      	ldr	r3, [r4, #28]
 8013d60:	60f0      	str	r0, [r6, #12]
 8013d62:	68db      	ldr	r3, [r3, #12]
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d1e4      	bne.n	8013d32 <_Balloc+0x2e>
 8013d68:	2000      	movs	r0, #0
 8013d6a:	bd70      	pop	{r4, r5, r6, pc}
 8013d6c:	6802      	ldr	r2, [r0, #0]
 8013d6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013d72:	2300      	movs	r3, #0
 8013d74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013d78:	e7f7      	b.n	8013d6a <_Balloc+0x66>
 8013d7a:	bf00      	nop
 8013d7c:	0801507d 	.word	0x0801507d
 8013d80:	080150fd 	.word	0x080150fd

08013d84 <_Bfree>:
 8013d84:	b570      	push	{r4, r5, r6, lr}
 8013d86:	69c6      	ldr	r6, [r0, #28]
 8013d88:	4605      	mov	r5, r0
 8013d8a:	460c      	mov	r4, r1
 8013d8c:	b976      	cbnz	r6, 8013dac <_Bfree+0x28>
 8013d8e:	2010      	movs	r0, #16
 8013d90:	f7ff ff02 	bl	8013b98 <malloc>
 8013d94:	4602      	mov	r2, r0
 8013d96:	61e8      	str	r0, [r5, #28]
 8013d98:	b920      	cbnz	r0, 8013da4 <_Bfree+0x20>
 8013d9a:	4b09      	ldr	r3, [pc, #36]	@ (8013dc0 <_Bfree+0x3c>)
 8013d9c:	4809      	ldr	r0, [pc, #36]	@ (8013dc4 <_Bfree+0x40>)
 8013d9e:	218f      	movs	r1, #143	@ 0x8f
 8013da0:	f000 fd6e 	bl	8014880 <__assert_func>
 8013da4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013da8:	6006      	str	r6, [r0, #0]
 8013daa:	60c6      	str	r6, [r0, #12]
 8013dac:	b13c      	cbz	r4, 8013dbe <_Bfree+0x3a>
 8013dae:	69eb      	ldr	r3, [r5, #28]
 8013db0:	6862      	ldr	r2, [r4, #4]
 8013db2:	68db      	ldr	r3, [r3, #12]
 8013db4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013db8:	6021      	str	r1, [r4, #0]
 8013dba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013dbe:	bd70      	pop	{r4, r5, r6, pc}
 8013dc0:	0801507d 	.word	0x0801507d
 8013dc4:	080150fd 	.word	0x080150fd

08013dc8 <__multadd>:
 8013dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dcc:	690d      	ldr	r5, [r1, #16]
 8013dce:	4607      	mov	r7, r0
 8013dd0:	460c      	mov	r4, r1
 8013dd2:	461e      	mov	r6, r3
 8013dd4:	f101 0c14 	add.w	ip, r1, #20
 8013dd8:	2000      	movs	r0, #0
 8013dda:	f8dc 3000 	ldr.w	r3, [ip]
 8013dde:	b299      	uxth	r1, r3
 8013de0:	fb02 6101 	mla	r1, r2, r1, r6
 8013de4:	0c1e      	lsrs	r6, r3, #16
 8013de6:	0c0b      	lsrs	r3, r1, #16
 8013de8:	fb02 3306 	mla	r3, r2, r6, r3
 8013dec:	b289      	uxth	r1, r1
 8013dee:	3001      	adds	r0, #1
 8013df0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013df4:	4285      	cmp	r5, r0
 8013df6:	f84c 1b04 	str.w	r1, [ip], #4
 8013dfa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013dfe:	dcec      	bgt.n	8013dda <__multadd+0x12>
 8013e00:	b30e      	cbz	r6, 8013e46 <__multadd+0x7e>
 8013e02:	68a3      	ldr	r3, [r4, #8]
 8013e04:	42ab      	cmp	r3, r5
 8013e06:	dc19      	bgt.n	8013e3c <__multadd+0x74>
 8013e08:	6861      	ldr	r1, [r4, #4]
 8013e0a:	4638      	mov	r0, r7
 8013e0c:	3101      	adds	r1, #1
 8013e0e:	f7ff ff79 	bl	8013d04 <_Balloc>
 8013e12:	4680      	mov	r8, r0
 8013e14:	b928      	cbnz	r0, 8013e22 <__multadd+0x5a>
 8013e16:	4602      	mov	r2, r0
 8013e18:	4b0c      	ldr	r3, [pc, #48]	@ (8013e4c <__multadd+0x84>)
 8013e1a:	480d      	ldr	r0, [pc, #52]	@ (8013e50 <__multadd+0x88>)
 8013e1c:	21ba      	movs	r1, #186	@ 0xba
 8013e1e:	f000 fd2f 	bl	8014880 <__assert_func>
 8013e22:	6922      	ldr	r2, [r4, #16]
 8013e24:	3202      	adds	r2, #2
 8013e26:	f104 010c 	add.w	r1, r4, #12
 8013e2a:	0092      	lsls	r2, r2, #2
 8013e2c:	300c      	adds	r0, #12
 8013e2e:	f000 fd19 	bl	8014864 <memcpy>
 8013e32:	4621      	mov	r1, r4
 8013e34:	4638      	mov	r0, r7
 8013e36:	f7ff ffa5 	bl	8013d84 <_Bfree>
 8013e3a:	4644      	mov	r4, r8
 8013e3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013e40:	3501      	adds	r5, #1
 8013e42:	615e      	str	r6, [r3, #20]
 8013e44:	6125      	str	r5, [r4, #16]
 8013e46:	4620      	mov	r0, r4
 8013e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e4c:	080150ec 	.word	0x080150ec
 8013e50:	080150fd 	.word	0x080150fd

08013e54 <__hi0bits>:
 8013e54:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013e58:	4603      	mov	r3, r0
 8013e5a:	bf36      	itet	cc
 8013e5c:	0403      	lslcc	r3, r0, #16
 8013e5e:	2000      	movcs	r0, #0
 8013e60:	2010      	movcc	r0, #16
 8013e62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013e66:	bf3c      	itt	cc
 8013e68:	021b      	lslcc	r3, r3, #8
 8013e6a:	3008      	addcc	r0, #8
 8013e6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013e70:	bf3c      	itt	cc
 8013e72:	011b      	lslcc	r3, r3, #4
 8013e74:	3004      	addcc	r0, #4
 8013e76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013e7a:	bf3c      	itt	cc
 8013e7c:	009b      	lslcc	r3, r3, #2
 8013e7e:	3002      	addcc	r0, #2
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	db05      	blt.n	8013e90 <__hi0bits+0x3c>
 8013e84:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013e88:	f100 0001 	add.w	r0, r0, #1
 8013e8c:	bf08      	it	eq
 8013e8e:	2020      	moveq	r0, #32
 8013e90:	4770      	bx	lr

08013e92 <__lo0bits>:
 8013e92:	6803      	ldr	r3, [r0, #0]
 8013e94:	4602      	mov	r2, r0
 8013e96:	f013 0007 	ands.w	r0, r3, #7
 8013e9a:	d00b      	beq.n	8013eb4 <__lo0bits+0x22>
 8013e9c:	07d9      	lsls	r1, r3, #31
 8013e9e:	d421      	bmi.n	8013ee4 <__lo0bits+0x52>
 8013ea0:	0798      	lsls	r0, r3, #30
 8013ea2:	bf49      	itett	mi
 8013ea4:	085b      	lsrmi	r3, r3, #1
 8013ea6:	089b      	lsrpl	r3, r3, #2
 8013ea8:	2001      	movmi	r0, #1
 8013eaa:	6013      	strmi	r3, [r2, #0]
 8013eac:	bf5c      	itt	pl
 8013eae:	6013      	strpl	r3, [r2, #0]
 8013eb0:	2002      	movpl	r0, #2
 8013eb2:	4770      	bx	lr
 8013eb4:	b299      	uxth	r1, r3
 8013eb6:	b909      	cbnz	r1, 8013ebc <__lo0bits+0x2a>
 8013eb8:	0c1b      	lsrs	r3, r3, #16
 8013eba:	2010      	movs	r0, #16
 8013ebc:	b2d9      	uxtb	r1, r3
 8013ebe:	b909      	cbnz	r1, 8013ec4 <__lo0bits+0x32>
 8013ec0:	3008      	adds	r0, #8
 8013ec2:	0a1b      	lsrs	r3, r3, #8
 8013ec4:	0719      	lsls	r1, r3, #28
 8013ec6:	bf04      	itt	eq
 8013ec8:	091b      	lsreq	r3, r3, #4
 8013eca:	3004      	addeq	r0, #4
 8013ecc:	0799      	lsls	r1, r3, #30
 8013ece:	bf04      	itt	eq
 8013ed0:	089b      	lsreq	r3, r3, #2
 8013ed2:	3002      	addeq	r0, #2
 8013ed4:	07d9      	lsls	r1, r3, #31
 8013ed6:	d403      	bmi.n	8013ee0 <__lo0bits+0x4e>
 8013ed8:	085b      	lsrs	r3, r3, #1
 8013eda:	f100 0001 	add.w	r0, r0, #1
 8013ede:	d003      	beq.n	8013ee8 <__lo0bits+0x56>
 8013ee0:	6013      	str	r3, [r2, #0]
 8013ee2:	4770      	bx	lr
 8013ee4:	2000      	movs	r0, #0
 8013ee6:	4770      	bx	lr
 8013ee8:	2020      	movs	r0, #32
 8013eea:	4770      	bx	lr

08013eec <__i2b>:
 8013eec:	b510      	push	{r4, lr}
 8013eee:	460c      	mov	r4, r1
 8013ef0:	2101      	movs	r1, #1
 8013ef2:	f7ff ff07 	bl	8013d04 <_Balloc>
 8013ef6:	4602      	mov	r2, r0
 8013ef8:	b928      	cbnz	r0, 8013f06 <__i2b+0x1a>
 8013efa:	4b05      	ldr	r3, [pc, #20]	@ (8013f10 <__i2b+0x24>)
 8013efc:	4805      	ldr	r0, [pc, #20]	@ (8013f14 <__i2b+0x28>)
 8013efe:	f240 1145 	movw	r1, #325	@ 0x145
 8013f02:	f000 fcbd 	bl	8014880 <__assert_func>
 8013f06:	2301      	movs	r3, #1
 8013f08:	6144      	str	r4, [r0, #20]
 8013f0a:	6103      	str	r3, [r0, #16]
 8013f0c:	bd10      	pop	{r4, pc}
 8013f0e:	bf00      	nop
 8013f10:	080150ec 	.word	0x080150ec
 8013f14:	080150fd 	.word	0x080150fd

08013f18 <__multiply>:
 8013f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f1c:	4614      	mov	r4, r2
 8013f1e:	690a      	ldr	r2, [r1, #16]
 8013f20:	6923      	ldr	r3, [r4, #16]
 8013f22:	429a      	cmp	r2, r3
 8013f24:	bfa8      	it	ge
 8013f26:	4623      	movge	r3, r4
 8013f28:	460f      	mov	r7, r1
 8013f2a:	bfa4      	itt	ge
 8013f2c:	460c      	movge	r4, r1
 8013f2e:	461f      	movge	r7, r3
 8013f30:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013f34:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013f38:	68a3      	ldr	r3, [r4, #8]
 8013f3a:	6861      	ldr	r1, [r4, #4]
 8013f3c:	eb0a 0609 	add.w	r6, sl, r9
 8013f40:	42b3      	cmp	r3, r6
 8013f42:	b085      	sub	sp, #20
 8013f44:	bfb8      	it	lt
 8013f46:	3101      	addlt	r1, #1
 8013f48:	f7ff fedc 	bl	8013d04 <_Balloc>
 8013f4c:	b930      	cbnz	r0, 8013f5c <__multiply+0x44>
 8013f4e:	4602      	mov	r2, r0
 8013f50:	4b44      	ldr	r3, [pc, #272]	@ (8014064 <__multiply+0x14c>)
 8013f52:	4845      	ldr	r0, [pc, #276]	@ (8014068 <__multiply+0x150>)
 8013f54:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013f58:	f000 fc92 	bl	8014880 <__assert_func>
 8013f5c:	f100 0514 	add.w	r5, r0, #20
 8013f60:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013f64:	462b      	mov	r3, r5
 8013f66:	2200      	movs	r2, #0
 8013f68:	4543      	cmp	r3, r8
 8013f6a:	d321      	bcc.n	8013fb0 <__multiply+0x98>
 8013f6c:	f107 0114 	add.w	r1, r7, #20
 8013f70:	f104 0214 	add.w	r2, r4, #20
 8013f74:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013f78:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013f7c:	9302      	str	r3, [sp, #8]
 8013f7e:	1b13      	subs	r3, r2, r4
 8013f80:	3b15      	subs	r3, #21
 8013f82:	f023 0303 	bic.w	r3, r3, #3
 8013f86:	3304      	adds	r3, #4
 8013f88:	f104 0715 	add.w	r7, r4, #21
 8013f8c:	42ba      	cmp	r2, r7
 8013f8e:	bf38      	it	cc
 8013f90:	2304      	movcc	r3, #4
 8013f92:	9301      	str	r3, [sp, #4]
 8013f94:	9b02      	ldr	r3, [sp, #8]
 8013f96:	9103      	str	r1, [sp, #12]
 8013f98:	428b      	cmp	r3, r1
 8013f9a:	d80c      	bhi.n	8013fb6 <__multiply+0x9e>
 8013f9c:	2e00      	cmp	r6, #0
 8013f9e:	dd03      	ble.n	8013fa8 <__multiply+0x90>
 8013fa0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d05b      	beq.n	8014060 <__multiply+0x148>
 8013fa8:	6106      	str	r6, [r0, #16]
 8013faa:	b005      	add	sp, #20
 8013fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fb0:	f843 2b04 	str.w	r2, [r3], #4
 8013fb4:	e7d8      	b.n	8013f68 <__multiply+0x50>
 8013fb6:	f8b1 a000 	ldrh.w	sl, [r1]
 8013fba:	f1ba 0f00 	cmp.w	sl, #0
 8013fbe:	d024      	beq.n	801400a <__multiply+0xf2>
 8013fc0:	f104 0e14 	add.w	lr, r4, #20
 8013fc4:	46a9      	mov	r9, r5
 8013fc6:	f04f 0c00 	mov.w	ip, #0
 8013fca:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013fce:	f8d9 3000 	ldr.w	r3, [r9]
 8013fd2:	fa1f fb87 	uxth.w	fp, r7
 8013fd6:	b29b      	uxth	r3, r3
 8013fd8:	fb0a 330b 	mla	r3, sl, fp, r3
 8013fdc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013fe0:	f8d9 7000 	ldr.w	r7, [r9]
 8013fe4:	4463      	add	r3, ip
 8013fe6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013fea:	fb0a c70b 	mla	r7, sl, fp, ip
 8013fee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8013ff2:	b29b      	uxth	r3, r3
 8013ff4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013ff8:	4572      	cmp	r2, lr
 8013ffa:	f849 3b04 	str.w	r3, [r9], #4
 8013ffe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8014002:	d8e2      	bhi.n	8013fca <__multiply+0xb2>
 8014004:	9b01      	ldr	r3, [sp, #4]
 8014006:	f845 c003 	str.w	ip, [r5, r3]
 801400a:	9b03      	ldr	r3, [sp, #12]
 801400c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8014010:	3104      	adds	r1, #4
 8014012:	f1b9 0f00 	cmp.w	r9, #0
 8014016:	d021      	beq.n	801405c <__multiply+0x144>
 8014018:	682b      	ldr	r3, [r5, #0]
 801401a:	f104 0c14 	add.w	ip, r4, #20
 801401e:	46ae      	mov	lr, r5
 8014020:	f04f 0a00 	mov.w	sl, #0
 8014024:	f8bc b000 	ldrh.w	fp, [ip]
 8014028:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801402c:	fb09 770b 	mla	r7, r9, fp, r7
 8014030:	4457      	add	r7, sl
 8014032:	b29b      	uxth	r3, r3
 8014034:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014038:	f84e 3b04 	str.w	r3, [lr], #4
 801403c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014040:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014044:	f8be 3000 	ldrh.w	r3, [lr]
 8014048:	fb09 330a 	mla	r3, r9, sl, r3
 801404c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8014050:	4562      	cmp	r2, ip
 8014052:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014056:	d8e5      	bhi.n	8014024 <__multiply+0x10c>
 8014058:	9f01      	ldr	r7, [sp, #4]
 801405a:	51eb      	str	r3, [r5, r7]
 801405c:	3504      	adds	r5, #4
 801405e:	e799      	b.n	8013f94 <__multiply+0x7c>
 8014060:	3e01      	subs	r6, #1
 8014062:	e79b      	b.n	8013f9c <__multiply+0x84>
 8014064:	080150ec 	.word	0x080150ec
 8014068:	080150fd 	.word	0x080150fd

0801406c <__pow5mult>:
 801406c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014070:	4615      	mov	r5, r2
 8014072:	f012 0203 	ands.w	r2, r2, #3
 8014076:	4607      	mov	r7, r0
 8014078:	460e      	mov	r6, r1
 801407a:	d007      	beq.n	801408c <__pow5mult+0x20>
 801407c:	4c25      	ldr	r4, [pc, #148]	@ (8014114 <__pow5mult+0xa8>)
 801407e:	3a01      	subs	r2, #1
 8014080:	2300      	movs	r3, #0
 8014082:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014086:	f7ff fe9f 	bl	8013dc8 <__multadd>
 801408a:	4606      	mov	r6, r0
 801408c:	10ad      	asrs	r5, r5, #2
 801408e:	d03d      	beq.n	801410c <__pow5mult+0xa0>
 8014090:	69fc      	ldr	r4, [r7, #28]
 8014092:	b97c      	cbnz	r4, 80140b4 <__pow5mult+0x48>
 8014094:	2010      	movs	r0, #16
 8014096:	f7ff fd7f 	bl	8013b98 <malloc>
 801409a:	4602      	mov	r2, r0
 801409c:	61f8      	str	r0, [r7, #28]
 801409e:	b928      	cbnz	r0, 80140ac <__pow5mult+0x40>
 80140a0:	4b1d      	ldr	r3, [pc, #116]	@ (8014118 <__pow5mult+0xac>)
 80140a2:	481e      	ldr	r0, [pc, #120]	@ (801411c <__pow5mult+0xb0>)
 80140a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80140a8:	f000 fbea 	bl	8014880 <__assert_func>
 80140ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80140b0:	6004      	str	r4, [r0, #0]
 80140b2:	60c4      	str	r4, [r0, #12]
 80140b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80140b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80140bc:	b94c      	cbnz	r4, 80140d2 <__pow5mult+0x66>
 80140be:	f240 2171 	movw	r1, #625	@ 0x271
 80140c2:	4638      	mov	r0, r7
 80140c4:	f7ff ff12 	bl	8013eec <__i2b>
 80140c8:	2300      	movs	r3, #0
 80140ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80140ce:	4604      	mov	r4, r0
 80140d0:	6003      	str	r3, [r0, #0]
 80140d2:	f04f 0900 	mov.w	r9, #0
 80140d6:	07eb      	lsls	r3, r5, #31
 80140d8:	d50a      	bpl.n	80140f0 <__pow5mult+0x84>
 80140da:	4631      	mov	r1, r6
 80140dc:	4622      	mov	r2, r4
 80140de:	4638      	mov	r0, r7
 80140e0:	f7ff ff1a 	bl	8013f18 <__multiply>
 80140e4:	4631      	mov	r1, r6
 80140e6:	4680      	mov	r8, r0
 80140e8:	4638      	mov	r0, r7
 80140ea:	f7ff fe4b 	bl	8013d84 <_Bfree>
 80140ee:	4646      	mov	r6, r8
 80140f0:	106d      	asrs	r5, r5, #1
 80140f2:	d00b      	beq.n	801410c <__pow5mult+0xa0>
 80140f4:	6820      	ldr	r0, [r4, #0]
 80140f6:	b938      	cbnz	r0, 8014108 <__pow5mult+0x9c>
 80140f8:	4622      	mov	r2, r4
 80140fa:	4621      	mov	r1, r4
 80140fc:	4638      	mov	r0, r7
 80140fe:	f7ff ff0b 	bl	8013f18 <__multiply>
 8014102:	6020      	str	r0, [r4, #0]
 8014104:	f8c0 9000 	str.w	r9, [r0]
 8014108:	4604      	mov	r4, r0
 801410a:	e7e4      	b.n	80140d6 <__pow5mult+0x6a>
 801410c:	4630      	mov	r0, r6
 801410e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014112:	bf00      	nop
 8014114:	08015158 	.word	0x08015158
 8014118:	0801507d 	.word	0x0801507d
 801411c:	080150fd 	.word	0x080150fd

08014120 <__lshift>:
 8014120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014124:	460c      	mov	r4, r1
 8014126:	6849      	ldr	r1, [r1, #4]
 8014128:	6923      	ldr	r3, [r4, #16]
 801412a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801412e:	68a3      	ldr	r3, [r4, #8]
 8014130:	4607      	mov	r7, r0
 8014132:	4691      	mov	r9, r2
 8014134:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014138:	f108 0601 	add.w	r6, r8, #1
 801413c:	42b3      	cmp	r3, r6
 801413e:	db0b      	blt.n	8014158 <__lshift+0x38>
 8014140:	4638      	mov	r0, r7
 8014142:	f7ff fddf 	bl	8013d04 <_Balloc>
 8014146:	4605      	mov	r5, r0
 8014148:	b948      	cbnz	r0, 801415e <__lshift+0x3e>
 801414a:	4602      	mov	r2, r0
 801414c:	4b28      	ldr	r3, [pc, #160]	@ (80141f0 <__lshift+0xd0>)
 801414e:	4829      	ldr	r0, [pc, #164]	@ (80141f4 <__lshift+0xd4>)
 8014150:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8014154:	f000 fb94 	bl	8014880 <__assert_func>
 8014158:	3101      	adds	r1, #1
 801415a:	005b      	lsls	r3, r3, #1
 801415c:	e7ee      	b.n	801413c <__lshift+0x1c>
 801415e:	2300      	movs	r3, #0
 8014160:	f100 0114 	add.w	r1, r0, #20
 8014164:	f100 0210 	add.w	r2, r0, #16
 8014168:	4618      	mov	r0, r3
 801416a:	4553      	cmp	r3, sl
 801416c:	db33      	blt.n	80141d6 <__lshift+0xb6>
 801416e:	6920      	ldr	r0, [r4, #16]
 8014170:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014174:	f104 0314 	add.w	r3, r4, #20
 8014178:	f019 091f 	ands.w	r9, r9, #31
 801417c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014180:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014184:	d02b      	beq.n	80141de <__lshift+0xbe>
 8014186:	f1c9 0e20 	rsb	lr, r9, #32
 801418a:	468a      	mov	sl, r1
 801418c:	2200      	movs	r2, #0
 801418e:	6818      	ldr	r0, [r3, #0]
 8014190:	fa00 f009 	lsl.w	r0, r0, r9
 8014194:	4310      	orrs	r0, r2
 8014196:	f84a 0b04 	str.w	r0, [sl], #4
 801419a:	f853 2b04 	ldr.w	r2, [r3], #4
 801419e:	459c      	cmp	ip, r3
 80141a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80141a4:	d8f3      	bhi.n	801418e <__lshift+0x6e>
 80141a6:	ebac 0304 	sub.w	r3, ip, r4
 80141aa:	3b15      	subs	r3, #21
 80141ac:	f023 0303 	bic.w	r3, r3, #3
 80141b0:	3304      	adds	r3, #4
 80141b2:	f104 0015 	add.w	r0, r4, #21
 80141b6:	4584      	cmp	ip, r0
 80141b8:	bf38      	it	cc
 80141ba:	2304      	movcc	r3, #4
 80141bc:	50ca      	str	r2, [r1, r3]
 80141be:	b10a      	cbz	r2, 80141c4 <__lshift+0xa4>
 80141c0:	f108 0602 	add.w	r6, r8, #2
 80141c4:	3e01      	subs	r6, #1
 80141c6:	4638      	mov	r0, r7
 80141c8:	612e      	str	r6, [r5, #16]
 80141ca:	4621      	mov	r1, r4
 80141cc:	f7ff fdda 	bl	8013d84 <_Bfree>
 80141d0:	4628      	mov	r0, r5
 80141d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80141da:	3301      	adds	r3, #1
 80141dc:	e7c5      	b.n	801416a <__lshift+0x4a>
 80141de:	3904      	subs	r1, #4
 80141e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80141e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80141e8:	459c      	cmp	ip, r3
 80141ea:	d8f9      	bhi.n	80141e0 <__lshift+0xc0>
 80141ec:	e7ea      	b.n	80141c4 <__lshift+0xa4>
 80141ee:	bf00      	nop
 80141f0:	080150ec 	.word	0x080150ec
 80141f4:	080150fd 	.word	0x080150fd

080141f8 <__mcmp>:
 80141f8:	690a      	ldr	r2, [r1, #16]
 80141fa:	4603      	mov	r3, r0
 80141fc:	6900      	ldr	r0, [r0, #16]
 80141fe:	1a80      	subs	r0, r0, r2
 8014200:	b530      	push	{r4, r5, lr}
 8014202:	d10e      	bne.n	8014222 <__mcmp+0x2a>
 8014204:	3314      	adds	r3, #20
 8014206:	3114      	adds	r1, #20
 8014208:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801420c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014210:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014214:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014218:	4295      	cmp	r5, r2
 801421a:	d003      	beq.n	8014224 <__mcmp+0x2c>
 801421c:	d205      	bcs.n	801422a <__mcmp+0x32>
 801421e:	f04f 30ff 	mov.w	r0, #4294967295
 8014222:	bd30      	pop	{r4, r5, pc}
 8014224:	42a3      	cmp	r3, r4
 8014226:	d3f3      	bcc.n	8014210 <__mcmp+0x18>
 8014228:	e7fb      	b.n	8014222 <__mcmp+0x2a>
 801422a:	2001      	movs	r0, #1
 801422c:	e7f9      	b.n	8014222 <__mcmp+0x2a>
	...

08014230 <__mdiff>:
 8014230:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014234:	4689      	mov	r9, r1
 8014236:	4606      	mov	r6, r0
 8014238:	4611      	mov	r1, r2
 801423a:	4648      	mov	r0, r9
 801423c:	4614      	mov	r4, r2
 801423e:	f7ff ffdb 	bl	80141f8 <__mcmp>
 8014242:	1e05      	subs	r5, r0, #0
 8014244:	d112      	bne.n	801426c <__mdiff+0x3c>
 8014246:	4629      	mov	r1, r5
 8014248:	4630      	mov	r0, r6
 801424a:	f7ff fd5b 	bl	8013d04 <_Balloc>
 801424e:	4602      	mov	r2, r0
 8014250:	b928      	cbnz	r0, 801425e <__mdiff+0x2e>
 8014252:	4b3f      	ldr	r3, [pc, #252]	@ (8014350 <__mdiff+0x120>)
 8014254:	f240 2137 	movw	r1, #567	@ 0x237
 8014258:	483e      	ldr	r0, [pc, #248]	@ (8014354 <__mdiff+0x124>)
 801425a:	f000 fb11 	bl	8014880 <__assert_func>
 801425e:	2301      	movs	r3, #1
 8014260:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014264:	4610      	mov	r0, r2
 8014266:	b003      	add	sp, #12
 8014268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801426c:	bfbc      	itt	lt
 801426e:	464b      	movlt	r3, r9
 8014270:	46a1      	movlt	r9, r4
 8014272:	4630      	mov	r0, r6
 8014274:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014278:	bfba      	itte	lt
 801427a:	461c      	movlt	r4, r3
 801427c:	2501      	movlt	r5, #1
 801427e:	2500      	movge	r5, #0
 8014280:	f7ff fd40 	bl	8013d04 <_Balloc>
 8014284:	4602      	mov	r2, r0
 8014286:	b918      	cbnz	r0, 8014290 <__mdiff+0x60>
 8014288:	4b31      	ldr	r3, [pc, #196]	@ (8014350 <__mdiff+0x120>)
 801428a:	f240 2145 	movw	r1, #581	@ 0x245
 801428e:	e7e3      	b.n	8014258 <__mdiff+0x28>
 8014290:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014294:	6926      	ldr	r6, [r4, #16]
 8014296:	60c5      	str	r5, [r0, #12]
 8014298:	f109 0310 	add.w	r3, r9, #16
 801429c:	f109 0514 	add.w	r5, r9, #20
 80142a0:	f104 0e14 	add.w	lr, r4, #20
 80142a4:	f100 0b14 	add.w	fp, r0, #20
 80142a8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80142ac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80142b0:	9301      	str	r3, [sp, #4]
 80142b2:	46d9      	mov	r9, fp
 80142b4:	f04f 0c00 	mov.w	ip, #0
 80142b8:	9b01      	ldr	r3, [sp, #4]
 80142ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 80142be:	f853 af04 	ldr.w	sl, [r3, #4]!
 80142c2:	9301      	str	r3, [sp, #4]
 80142c4:	fa1f f38a 	uxth.w	r3, sl
 80142c8:	4619      	mov	r1, r3
 80142ca:	b283      	uxth	r3, r0
 80142cc:	1acb      	subs	r3, r1, r3
 80142ce:	0c00      	lsrs	r0, r0, #16
 80142d0:	4463      	add	r3, ip
 80142d2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80142d6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80142da:	b29b      	uxth	r3, r3
 80142dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80142e0:	4576      	cmp	r6, lr
 80142e2:	f849 3b04 	str.w	r3, [r9], #4
 80142e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80142ea:	d8e5      	bhi.n	80142b8 <__mdiff+0x88>
 80142ec:	1b33      	subs	r3, r6, r4
 80142ee:	3b15      	subs	r3, #21
 80142f0:	f023 0303 	bic.w	r3, r3, #3
 80142f4:	3415      	adds	r4, #21
 80142f6:	3304      	adds	r3, #4
 80142f8:	42a6      	cmp	r6, r4
 80142fa:	bf38      	it	cc
 80142fc:	2304      	movcc	r3, #4
 80142fe:	441d      	add	r5, r3
 8014300:	445b      	add	r3, fp
 8014302:	461e      	mov	r6, r3
 8014304:	462c      	mov	r4, r5
 8014306:	4544      	cmp	r4, r8
 8014308:	d30e      	bcc.n	8014328 <__mdiff+0xf8>
 801430a:	f108 0103 	add.w	r1, r8, #3
 801430e:	1b49      	subs	r1, r1, r5
 8014310:	f021 0103 	bic.w	r1, r1, #3
 8014314:	3d03      	subs	r5, #3
 8014316:	45a8      	cmp	r8, r5
 8014318:	bf38      	it	cc
 801431a:	2100      	movcc	r1, #0
 801431c:	440b      	add	r3, r1
 801431e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014322:	b191      	cbz	r1, 801434a <__mdiff+0x11a>
 8014324:	6117      	str	r7, [r2, #16]
 8014326:	e79d      	b.n	8014264 <__mdiff+0x34>
 8014328:	f854 1b04 	ldr.w	r1, [r4], #4
 801432c:	46e6      	mov	lr, ip
 801432e:	0c08      	lsrs	r0, r1, #16
 8014330:	fa1c fc81 	uxtah	ip, ip, r1
 8014334:	4471      	add	r1, lr
 8014336:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801433a:	b289      	uxth	r1, r1
 801433c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014340:	f846 1b04 	str.w	r1, [r6], #4
 8014344:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014348:	e7dd      	b.n	8014306 <__mdiff+0xd6>
 801434a:	3f01      	subs	r7, #1
 801434c:	e7e7      	b.n	801431e <__mdiff+0xee>
 801434e:	bf00      	nop
 8014350:	080150ec 	.word	0x080150ec
 8014354:	080150fd 	.word	0x080150fd

08014358 <__d2b>:
 8014358:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801435c:	460f      	mov	r7, r1
 801435e:	2101      	movs	r1, #1
 8014360:	ec59 8b10 	vmov	r8, r9, d0
 8014364:	4616      	mov	r6, r2
 8014366:	f7ff fccd 	bl	8013d04 <_Balloc>
 801436a:	4604      	mov	r4, r0
 801436c:	b930      	cbnz	r0, 801437c <__d2b+0x24>
 801436e:	4602      	mov	r2, r0
 8014370:	4b23      	ldr	r3, [pc, #140]	@ (8014400 <__d2b+0xa8>)
 8014372:	4824      	ldr	r0, [pc, #144]	@ (8014404 <__d2b+0xac>)
 8014374:	f240 310f 	movw	r1, #783	@ 0x30f
 8014378:	f000 fa82 	bl	8014880 <__assert_func>
 801437c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014380:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014384:	b10d      	cbz	r5, 801438a <__d2b+0x32>
 8014386:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801438a:	9301      	str	r3, [sp, #4]
 801438c:	f1b8 0300 	subs.w	r3, r8, #0
 8014390:	d023      	beq.n	80143da <__d2b+0x82>
 8014392:	4668      	mov	r0, sp
 8014394:	9300      	str	r3, [sp, #0]
 8014396:	f7ff fd7c 	bl	8013e92 <__lo0bits>
 801439a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801439e:	b1d0      	cbz	r0, 80143d6 <__d2b+0x7e>
 80143a0:	f1c0 0320 	rsb	r3, r0, #32
 80143a4:	fa02 f303 	lsl.w	r3, r2, r3
 80143a8:	430b      	orrs	r3, r1
 80143aa:	40c2      	lsrs	r2, r0
 80143ac:	6163      	str	r3, [r4, #20]
 80143ae:	9201      	str	r2, [sp, #4]
 80143b0:	9b01      	ldr	r3, [sp, #4]
 80143b2:	61a3      	str	r3, [r4, #24]
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	bf0c      	ite	eq
 80143b8:	2201      	moveq	r2, #1
 80143ba:	2202      	movne	r2, #2
 80143bc:	6122      	str	r2, [r4, #16]
 80143be:	b1a5      	cbz	r5, 80143ea <__d2b+0x92>
 80143c0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80143c4:	4405      	add	r5, r0
 80143c6:	603d      	str	r5, [r7, #0]
 80143c8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80143cc:	6030      	str	r0, [r6, #0]
 80143ce:	4620      	mov	r0, r4
 80143d0:	b003      	add	sp, #12
 80143d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80143d6:	6161      	str	r1, [r4, #20]
 80143d8:	e7ea      	b.n	80143b0 <__d2b+0x58>
 80143da:	a801      	add	r0, sp, #4
 80143dc:	f7ff fd59 	bl	8013e92 <__lo0bits>
 80143e0:	9b01      	ldr	r3, [sp, #4]
 80143e2:	6163      	str	r3, [r4, #20]
 80143e4:	3020      	adds	r0, #32
 80143e6:	2201      	movs	r2, #1
 80143e8:	e7e8      	b.n	80143bc <__d2b+0x64>
 80143ea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80143ee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80143f2:	6038      	str	r0, [r7, #0]
 80143f4:	6918      	ldr	r0, [r3, #16]
 80143f6:	f7ff fd2d 	bl	8013e54 <__hi0bits>
 80143fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80143fe:	e7e5      	b.n	80143cc <__d2b+0x74>
 8014400:	080150ec 	.word	0x080150ec
 8014404:	080150fd 	.word	0x080150fd

08014408 <__ssputs_r>:
 8014408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801440c:	688e      	ldr	r6, [r1, #8]
 801440e:	461f      	mov	r7, r3
 8014410:	42be      	cmp	r6, r7
 8014412:	680b      	ldr	r3, [r1, #0]
 8014414:	4682      	mov	sl, r0
 8014416:	460c      	mov	r4, r1
 8014418:	4690      	mov	r8, r2
 801441a:	d82d      	bhi.n	8014478 <__ssputs_r+0x70>
 801441c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014420:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014424:	d026      	beq.n	8014474 <__ssputs_r+0x6c>
 8014426:	6965      	ldr	r5, [r4, #20]
 8014428:	6909      	ldr	r1, [r1, #16]
 801442a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801442e:	eba3 0901 	sub.w	r9, r3, r1
 8014432:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014436:	1c7b      	adds	r3, r7, #1
 8014438:	444b      	add	r3, r9
 801443a:	106d      	asrs	r5, r5, #1
 801443c:	429d      	cmp	r5, r3
 801443e:	bf38      	it	cc
 8014440:	461d      	movcc	r5, r3
 8014442:	0553      	lsls	r3, r2, #21
 8014444:	d527      	bpl.n	8014496 <__ssputs_r+0x8e>
 8014446:	4629      	mov	r1, r5
 8014448:	f7ff fbd0 	bl	8013bec <_malloc_r>
 801444c:	4606      	mov	r6, r0
 801444e:	b360      	cbz	r0, 80144aa <__ssputs_r+0xa2>
 8014450:	6921      	ldr	r1, [r4, #16]
 8014452:	464a      	mov	r2, r9
 8014454:	f000 fa06 	bl	8014864 <memcpy>
 8014458:	89a3      	ldrh	r3, [r4, #12]
 801445a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801445e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014462:	81a3      	strh	r3, [r4, #12]
 8014464:	6126      	str	r6, [r4, #16]
 8014466:	6165      	str	r5, [r4, #20]
 8014468:	444e      	add	r6, r9
 801446a:	eba5 0509 	sub.w	r5, r5, r9
 801446e:	6026      	str	r6, [r4, #0]
 8014470:	60a5      	str	r5, [r4, #8]
 8014472:	463e      	mov	r6, r7
 8014474:	42be      	cmp	r6, r7
 8014476:	d900      	bls.n	801447a <__ssputs_r+0x72>
 8014478:	463e      	mov	r6, r7
 801447a:	6820      	ldr	r0, [r4, #0]
 801447c:	4632      	mov	r2, r6
 801447e:	4641      	mov	r1, r8
 8014480:	f000 f9c6 	bl	8014810 <memmove>
 8014484:	68a3      	ldr	r3, [r4, #8]
 8014486:	1b9b      	subs	r3, r3, r6
 8014488:	60a3      	str	r3, [r4, #8]
 801448a:	6823      	ldr	r3, [r4, #0]
 801448c:	4433      	add	r3, r6
 801448e:	6023      	str	r3, [r4, #0]
 8014490:	2000      	movs	r0, #0
 8014492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014496:	462a      	mov	r2, r5
 8014498:	f000 fa36 	bl	8014908 <_realloc_r>
 801449c:	4606      	mov	r6, r0
 801449e:	2800      	cmp	r0, #0
 80144a0:	d1e0      	bne.n	8014464 <__ssputs_r+0x5c>
 80144a2:	6921      	ldr	r1, [r4, #16]
 80144a4:	4650      	mov	r0, sl
 80144a6:	f7ff fb2d 	bl	8013b04 <_free_r>
 80144aa:	230c      	movs	r3, #12
 80144ac:	f8ca 3000 	str.w	r3, [sl]
 80144b0:	89a3      	ldrh	r3, [r4, #12]
 80144b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80144b6:	81a3      	strh	r3, [r4, #12]
 80144b8:	f04f 30ff 	mov.w	r0, #4294967295
 80144bc:	e7e9      	b.n	8014492 <__ssputs_r+0x8a>
	...

080144c0 <_svfiprintf_r>:
 80144c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144c4:	4698      	mov	r8, r3
 80144c6:	898b      	ldrh	r3, [r1, #12]
 80144c8:	061b      	lsls	r3, r3, #24
 80144ca:	b09d      	sub	sp, #116	@ 0x74
 80144cc:	4607      	mov	r7, r0
 80144ce:	460d      	mov	r5, r1
 80144d0:	4614      	mov	r4, r2
 80144d2:	d510      	bpl.n	80144f6 <_svfiprintf_r+0x36>
 80144d4:	690b      	ldr	r3, [r1, #16]
 80144d6:	b973      	cbnz	r3, 80144f6 <_svfiprintf_r+0x36>
 80144d8:	2140      	movs	r1, #64	@ 0x40
 80144da:	f7ff fb87 	bl	8013bec <_malloc_r>
 80144de:	6028      	str	r0, [r5, #0]
 80144e0:	6128      	str	r0, [r5, #16]
 80144e2:	b930      	cbnz	r0, 80144f2 <_svfiprintf_r+0x32>
 80144e4:	230c      	movs	r3, #12
 80144e6:	603b      	str	r3, [r7, #0]
 80144e8:	f04f 30ff 	mov.w	r0, #4294967295
 80144ec:	b01d      	add	sp, #116	@ 0x74
 80144ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144f2:	2340      	movs	r3, #64	@ 0x40
 80144f4:	616b      	str	r3, [r5, #20]
 80144f6:	2300      	movs	r3, #0
 80144f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80144fa:	2320      	movs	r3, #32
 80144fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014500:	f8cd 800c 	str.w	r8, [sp, #12]
 8014504:	2330      	movs	r3, #48	@ 0x30
 8014506:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80146a4 <_svfiprintf_r+0x1e4>
 801450a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801450e:	f04f 0901 	mov.w	r9, #1
 8014512:	4623      	mov	r3, r4
 8014514:	469a      	mov	sl, r3
 8014516:	f813 2b01 	ldrb.w	r2, [r3], #1
 801451a:	b10a      	cbz	r2, 8014520 <_svfiprintf_r+0x60>
 801451c:	2a25      	cmp	r2, #37	@ 0x25
 801451e:	d1f9      	bne.n	8014514 <_svfiprintf_r+0x54>
 8014520:	ebba 0b04 	subs.w	fp, sl, r4
 8014524:	d00b      	beq.n	801453e <_svfiprintf_r+0x7e>
 8014526:	465b      	mov	r3, fp
 8014528:	4622      	mov	r2, r4
 801452a:	4629      	mov	r1, r5
 801452c:	4638      	mov	r0, r7
 801452e:	f7ff ff6b 	bl	8014408 <__ssputs_r>
 8014532:	3001      	adds	r0, #1
 8014534:	f000 80a7 	beq.w	8014686 <_svfiprintf_r+0x1c6>
 8014538:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801453a:	445a      	add	r2, fp
 801453c:	9209      	str	r2, [sp, #36]	@ 0x24
 801453e:	f89a 3000 	ldrb.w	r3, [sl]
 8014542:	2b00      	cmp	r3, #0
 8014544:	f000 809f 	beq.w	8014686 <_svfiprintf_r+0x1c6>
 8014548:	2300      	movs	r3, #0
 801454a:	f04f 32ff 	mov.w	r2, #4294967295
 801454e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014552:	f10a 0a01 	add.w	sl, sl, #1
 8014556:	9304      	str	r3, [sp, #16]
 8014558:	9307      	str	r3, [sp, #28]
 801455a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801455e:	931a      	str	r3, [sp, #104]	@ 0x68
 8014560:	4654      	mov	r4, sl
 8014562:	2205      	movs	r2, #5
 8014564:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014568:	484e      	ldr	r0, [pc, #312]	@ (80146a4 <_svfiprintf_r+0x1e4>)
 801456a:	f7eb feb9 	bl	80002e0 <memchr>
 801456e:	9a04      	ldr	r2, [sp, #16]
 8014570:	b9d8      	cbnz	r0, 80145aa <_svfiprintf_r+0xea>
 8014572:	06d0      	lsls	r0, r2, #27
 8014574:	bf44      	itt	mi
 8014576:	2320      	movmi	r3, #32
 8014578:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801457c:	0711      	lsls	r1, r2, #28
 801457e:	bf44      	itt	mi
 8014580:	232b      	movmi	r3, #43	@ 0x2b
 8014582:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014586:	f89a 3000 	ldrb.w	r3, [sl]
 801458a:	2b2a      	cmp	r3, #42	@ 0x2a
 801458c:	d015      	beq.n	80145ba <_svfiprintf_r+0xfa>
 801458e:	9a07      	ldr	r2, [sp, #28]
 8014590:	4654      	mov	r4, sl
 8014592:	2000      	movs	r0, #0
 8014594:	f04f 0c0a 	mov.w	ip, #10
 8014598:	4621      	mov	r1, r4
 801459a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801459e:	3b30      	subs	r3, #48	@ 0x30
 80145a0:	2b09      	cmp	r3, #9
 80145a2:	d94b      	bls.n	801463c <_svfiprintf_r+0x17c>
 80145a4:	b1b0      	cbz	r0, 80145d4 <_svfiprintf_r+0x114>
 80145a6:	9207      	str	r2, [sp, #28]
 80145a8:	e014      	b.n	80145d4 <_svfiprintf_r+0x114>
 80145aa:	eba0 0308 	sub.w	r3, r0, r8
 80145ae:	fa09 f303 	lsl.w	r3, r9, r3
 80145b2:	4313      	orrs	r3, r2
 80145b4:	9304      	str	r3, [sp, #16]
 80145b6:	46a2      	mov	sl, r4
 80145b8:	e7d2      	b.n	8014560 <_svfiprintf_r+0xa0>
 80145ba:	9b03      	ldr	r3, [sp, #12]
 80145bc:	1d19      	adds	r1, r3, #4
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	9103      	str	r1, [sp, #12]
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	bfbb      	ittet	lt
 80145c6:	425b      	neglt	r3, r3
 80145c8:	f042 0202 	orrlt.w	r2, r2, #2
 80145cc:	9307      	strge	r3, [sp, #28]
 80145ce:	9307      	strlt	r3, [sp, #28]
 80145d0:	bfb8      	it	lt
 80145d2:	9204      	strlt	r2, [sp, #16]
 80145d4:	7823      	ldrb	r3, [r4, #0]
 80145d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80145d8:	d10a      	bne.n	80145f0 <_svfiprintf_r+0x130>
 80145da:	7863      	ldrb	r3, [r4, #1]
 80145dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80145de:	d132      	bne.n	8014646 <_svfiprintf_r+0x186>
 80145e0:	9b03      	ldr	r3, [sp, #12]
 80145e2:	1d1a      	adds	r2, r3, #4
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	9203      	str	r2, [sp, #12]
 80145e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80145ec:	3402      	adds	r4, #2
 80145ee:	9305      	str	r3, [sp, #20]
 80145f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80146b4 <_svfiprintf_r+0x1f4>
 80145f4:	7821      	ldrb	r1, [r4, #0]
 80145f6:	2203      	movs	r2, #3
 80145f8:	4650      	mov	r0, sl
 80145fa:	f7eb fe71 	bl	80002e0 <memchr>
 80145fe:	b138      	cbz	r0, 8014610 <_svfiprintf_r+0x150>
 8014600:	9b04      	ldr	r3, [sp, #16]
 8014602:	eba0 000a 	sub.w	r0, r0, sl
 8014606:	2240      	movs	r2, #64	@ 0x40
 8014608:	4082      	lsls	r2, r0
 801460a:	4313      	orrs	r3, r2
 801460c:	3401      	adds	r4, #1
 801460e:	9304      	str	r3, [sp, #16]
 8014610:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014614:	4824      	ldr	r0, [pc, #144]	@ (80146a8 <_svfiprintf_r+0x1e8>)
 8014616:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801461a:	2206      	movs	r2, #6
 801461c:	f7eb fe60 	bl	80002e0 <memchr>
 8014620:	2800      	cmp	r0, #0
 8014622:	d036      	beq.n	8014692 <_svfiprintf_r+0x1d2>
 8014624:	4b21      	ldr	r3, [pc, #132]	@ (80146ac <_svfiprintf_r+0x1ec>)
 8014626:	bb1b      	cbnz	r3, 8014670 <_svfiprintf_r+0x1b0>
 8014628:	9b03      	ldr	r3, [sp, #12]
 801462a:	3307      	adds	r3, #7
 801462c:	f023 0307 	bic.w	r3, r3, #7
 8014630:	3308      	adds	r3, #8
 8014632:	9303      	str	r3, [sp, #12]
 8014634:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014636:	4433      	add	r3, r6
 8014638:	9309      	str	r3, [sp, #36]	@ 0x24
 801463a:	e76a      	b.n	8014512 <_svfiprintf_r+0x52>
 801463c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014640:	460c      	mov	r4, r1
 8014642:	2001      	movs	r0, #1
 8014644:	e7a8      	b.n	8014598 <_svfiprintf_r+0xd8>
 8014646:	2300      	movs	r3, #0
 8014648:	3401      	adds	r4, #1
 801464a:	9305      	str	r3, [sp, #20]
 801464c:	4619      	mov	r1, r3
 801464e:	f04f 0c0a 	mov.w	ip, #10
 8014652:	4620      	mov	r0, r4
 8014654:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014658:	3a30      	subs	r2, #48	@ 0x30
 801465a:	2a09      	cmp	r2, #9
 801465c:	d903      	bls.n	8014666 <_svfiprintf_r+0x1a6>
 801465e:	2b00      	cmp	r3, #0
 8014660:	d0c6      	beq.n	80145f0 <_svfiprintf_r+0x130>
 8014662:	9105      	str	r1, [sp, #20]
 8014664:	e7c4      	b.n	80145f0 <_svfiprintf_r+0x130>
 8014666:	fb0c 2101 	mla	r1, ip, r1, r2
 801466a:	4604      	mov	r4, r0
 801466c:	2301      	movs	r3, #1
 801466e:	e7f0      	b.n	8014652 <_svfiprintf_r+0x192>
 8014670:	ab03      	add	r3, sp, #12
 8014672:	9300      	str	r3, [sp, #0]
 8014674:	462a      	mov	r2, r5
 8014676:	4b0e      	ldr	r3, [pc, #56]	@ (80146b0 <_svfiprintf_r+0x1f0>)
 8014678:	a904      	add	r1, sp, #16
 801467a:	4638      	mov	r0, r7
 801467c:	f7fd ff14 	bl	80124a8 <_printf_float>
 8014680:	1c42      	adds	r2, r0, #1
 8014682:	4606      	mov	r6, r0
 8014684:	d1d6      	bne.n	8014634 <_svfiprintf_r+0x174>
 8014686:	89ab      	ldrh	r3, [r5, #12]
 8014688:	065b      	lsls	r3, r3, #25
 801468a:	f53f af2d 	bmi.w	80144e8 <_svfiprintf_r+0x28>
 801468e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014690:	e72c      	b.n	80144ec <_svfiprintf_r+0x2c>
 8014692:	ab03      	add	r3, sp, #12
 8014694:	9300      	str	r3, [sp, #0]
 8014696:	462a      	mov	r2, r5
 8014698:	4b05      	ldr	r3, [pc, #20]	@ (80146b0 <_svfiprintf_r+0x1f0>)
 801469a:	a904      	add	r1, sp, #16
 801469c:	4638      	mov	r0, r7
 801469e:	f7fe f98b 	bl	80129b8 <_printf_i>
 80146a2:	e7ed      	b.n	8014680 <_svfiprintf_r+0x1c0>
 80146a4:	08015258 	.word	0x08015258
 80146a8:	08015262 	.word	0x08015262
 80146ac:	080124a9 	.word	0x080124a9
 80146b0:	08014409 	.word	0x08014409
 80146b4:	0801525e 	.word	0x0801525e

080146b8 <__sflush_r>:
 80146b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80146bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146c0:	0716      	lsls	r6, r2, #28
 80146c2:	4605      	mov	r5, r0
 80146c4:	460c      	mov	r4, r1
 80146c6:	d454      	bmi.n	8014772 <__sflush_r+0xba>
 80146c8:	684b      	ldr	r3, [r1, #4]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	dc02      	bgt.n	80146d4 <__sflush_r+0x1c>
 80146ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	dd48      	ble.n	8014766 <__sflush_r+0xae>
 80146d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80146d6:	2e00      	cmp	r6, #0
 80146d8:	d045      	beq.n	8014766 <__sflush_r+0xae>
 80146da:	2300      	movs	r3, #0
 80146dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80146e0:	682f      	ldr	r7, [r5, #0]
 80146e2:	6a21      	ldr	r1, [r4, #32]
 80146e4:	602b      	str	r3, [r5, #0]
 80146e6:	d030      	beq.n	801474a <__sflush_r+0x92>
 80146e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80146ea:	89a3      	ldrh	r3, [r4, #12]
 80146ec:	0759      	lsls	r1, r3, #29
 80146ee:	d505      	bpl.n	80146fc <__sflush_r+0x44>
 80146f0:	6863      	ldr	r3, [r4, #4]
 80146f2:	1ad2      	subs	r2, r2, r3
 80146f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80146f6:	b10b      	cbz	r3, 80146fc <__sflush_r+0x44>
 80146f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80146fa:	1ad2      	subs	r2, r2, r3
 80146fc:	2300      	movs	r3, #0
 80146fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014700:	6a21      	ldr	r1, [r4, #32]
 8014702:	4628      	mov	r0, r5
 8014704:	47b0      	blx	r6
 8014706:	1c43      	adds	r3, r0, #1
 8014708:	89a3      	ldrh	r3, [r4, #12]
 801470a:	d106      	bne.n	801471a <__sflush_r+0x62>
 801470c:	6829      	ldr	r1, [r5, #0]
 801470e:	291d      	cmp	r1, #29
 8014710:	d82b      	bhi.n	801476a <__sflush_r+0xb2>
 8014712:	4a2a      	ldr	r2, [pc, #168]	@ (80147bc <__sflush_r+0x104>)
 8014714:	410a      	asrs	r2, r1
 8014716:	07d6      	lsls	r6, r2, #31
 8014718:	d427      	bmi.n	801476a <__sflush_r+0xb2>
 801471a:	2200      	movs	r2, #0
 801471c:	6062      	str	r2, [r4, #4]
 801471e:	04d9      	lsls	r1, r3, #19
 8014720:	6922      	ldr	r2, [r4, #16]
 8014722:	6022      	str	r2, [r4, #0]
 8014724:	d504      	bpl.n	8014730 <__sflush_r+0x78>
 8014726:	1c42      	adds	r2, r0, #1
 8014728:	d101      	bne.n	801472e <__sflush_r+0x76>
 801472a:	682b      	ldr	r3, [r5, #0]
 801472c:	b903      	cbnz	r3, 8014730 <__sflush_r+0x78>
 801472e:	6560      	str	r0, [r4, #84]	@ 0x54
 8014730:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014732:	602f      	str	r7, [r5, #0]
 8014734:	b1b9      	cbz	r1, 8014766 <__sflush_r+0xae>
 8014736:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801473a:	4299      	cmp	r1, r3
 801473c:	d002      	beq.n	8014744 <__sflush_r+0x8c>
 801473e:	4628      	mov	r0, r5
 8014740:	f7ff f9e0 	bl	8013b04 <_free_r>
 8014744:	2300      	movs	r3, #0
 8014746:	6363      	str	r3, [r4, #52]	@ 0x34
 8014748:	e00d      	b.n	8014766 <__sflush_r+0xae>
 801474a:	2301      	movs	r3, #1
 801474c:	4628      	mov	r0, r5
 801474e:	47b0      	blx	r6
 8014750:	4602      	mov	r2, r0
 8014752:	1c50      	adds	r0, r2, #1
 8014754:	d1c9      	bne.n	80146ea <__sflush_r+0x32>
 8014756:	682b      	ldr	r3, [r5, #0]
 8014758:	2b00      	cmp	r3, #0
 801475a:	d0c6      	beq.n	80146ea <__sflush_r+0x32>
 801475c:	2b1d      	cmp	r3, #29
 801475e:	d001      	beq.n	8014764 <__sflush_r+0xac>
 8014760:	2b16      	cmp	r3, #22
 8014762:	d11e      	bne.n	80147a2 <__sflush_r+0xea>
 8014764:	602f      	str	r7, [r5, #0]
 8014766:	2000      	movs	r0, #0
 8014768:	e022      	b.n	80147b0 <__sflush_r+0xf8>
 801476a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801476e:	b21b      	sxth	r3, r3
 8014770:	e01b      	b.n	80147aa <__sflush_r+0xf2>
 8014772:	690f      	ldr	r7, [r1, #16]
 8014774:	2f00      	cmp	r7, #0
 8014776:	d0f6      	beq.n	8014766 <__sflush_r+0xae>
 8014778:	0793      	lsls	r3, r2, #30
 801477a:	680e      	ldr	r6, [r1, #0]
 801477c:	bf08      	it	eq
 801477e:	694b      	ldreq	r3, [r1, #20]
 8014780:	600f      	str	r7, [r1, #0]
 8014782:	bf18      	it	ne
 8014784:	2300      	movne	r3, #0
 8014786:	eba6 0807 	sub.w	r8, r6, r7
 801478a:	608b      	str	r3, [r1, #8]
 801478c:	f1b8 0f00 	cmp.w	r8, #0
 8014790:	dde9      	ble.n	8014766 <__sflush_r+0xae>
 8014792:	6a21      	ldr	r1, [r4, #32]
 8014794:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014796:	4643      	mov	r3, r8
 8014798:	463a      	mov	r2, r7
 801479a:	4628      	mov	r0, r5
 801479c:	47b0      	blx	r6
 801479e:	2800      	cmp	r0, #0
 80147a0:	dc08      	bgt.n	80147b4 <__sflush_r+0xfc>
 80147a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80147a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80147aa:	81a3      	strh	r3, [r4, #12]
 80147ac:	f04f 30ff 	mov.w	r0, #4294967295
 80147b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147b4:	4407      	add	r7, r0
 80147b6:	eba8 0800 	sub.w	r8, r8, r0
 80147ba:	e7e7      	b.n	801478c <__sflush_r+0xd4>
 80147bc:	dfbffffe 	.word	0xdfbffffe

080147c0 <_fflush_r>:
 80147c0:	b538      	push	{r3, r4, r5, lr}
 80147c2:	690b      	ldr	r3, [r1, #16]
 80147c4:	4605      	mov	r5, r0
 80147c6:	460c      	mov	r4, r1
 80147c8:	b913      	cbnz	r3, 80147d0 <_fflush_r+0x10>
 80147ca:	2500      	movs	r5, #0
 80147cc:	4628      	mov	r0, r5
 80147ce:	bd38      	pop	{r3, r4, r5, pc}
 80147d0:	b118      	cbz	r0, 80147da <_fflush_r+0x1a>
 80147d2:	6a03      	ldr	r3, [r0, #32]
 80147d4:	b90b      	cbnz	r3, 80147da <_fflush_r+0x1a>
 80147d6:	f7fe fa9b 	bl	8012d10 <__sinit>
 80147da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d0f3      	beq.n	80147ca <_fflush_r+0xa>
 80147e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80147e4:	07d0      	lsls	r0, r2, #31
 80147e6:	d404      	bmi.n	80147f2 <_fflush_r+0x32>
 80147e8:	0599      	lsls	r1, r3, #22
 80147ea:	d402      	bmi.n	80147f2 <_fflush_r+0x32>
 80147ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80147ee:	f7fe fba6 	bl	8012f3e <__retarget_lock_acquire_recursive>
 80147f2:	4628      	mov	r0, r5
 80147f4:	4621      	mov	r1, r4
 80147f6:	f7ff ff5f 	bl	80146b8 <__sflush_r>
 80147fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80147fc:	07da      	lsls	r2, r3, #31
 80147fe:	4605      	mov	r5, r0
 8014800:	d4e4      	bmi.n	80147cc <_fflush_r+0xc>
 8014802:	89a3      	ldrh	r3, [r4, #12]
 8014804:	059b      	lsls	r3, r3, #22
 8014806:	d4e1      	bmi.n	80147cc <_fflush_r+0xc>
 8014808:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801480a:	f7fe fb99 	bl	8012f40 <__retarget_lock_release_recursive>
 801480e:	e7dd      	b.n	80147cc <_fflush_r+0xc>

08014810 <memmove>:
 8014810:	4288      	cmp	r0, r1
 8014812:	b510      	push	{r4, lr}
 8014814:	eb01 0402 	add.w	r4, r1, r2
 8014818:	d902      	bls.n	8014820 <memmove+0x10>
 801481a:	4284      	cmp	r4, r0
 801481c:	4623      	mov	r3, r4
 801481e:	d807      	bhi.n	8014830 <memmove+0x20>
 8014820:	1e43      	subs	r3, r0, #1
 8014822:	42a1      	cmp	r1, r4
 8014824:	d008      	beq.n	8014838 <memmove+0x28>
 8014826:	f811 2b01 	ldrb.w	r2, [r1], #1
 801482a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801482e:	e7f8      	b.n	8014822 <memmove+0x12>
 8014830:	4402      	add	r2, r0
 8014832:	4601      	mov	r1, r0
 8014834:	428a      	cmp	r2, r1
 8014836:	d100      	bne.n	801483a <memmove+0x2a>
 8014838:	bd10      	pop	{r4, pc}
 801483a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801483e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014842:	e7f7      	b.n	8014834 <memmove+0x24>

08014844 <_sbrk_r>:
 8014844:	b538      	push	{r3, r4, r5, lr}
 8014846:	4d06      	ldr	r5, [pc, #24]	@ (8014860 <_sbrk_r+0x1c>)
 8014848:	2300      	movs	r3, #0
 801484a:	4604      	mov	r4, r0
 801484c:	4608      	mov	r0, r1
 801484e:	602b      	str	r3, [r5, #0]
 8014850:	f7ed f8fa 	bl	8001a48 <_sbrk>
 8014854:	1c43      	adds	r3, r0, #1
 8014856:	d102      	bne.n	801485e <_sbrk_r+0x1a>
 8014858:	682b      	ldr	r3, [r5, #0]
 801485a:	b103      	cbz	r3, 801485e <_sbrk_r+0x1a>
 801485c:	6023      	str	r3, [r4, #0]
 801485e:	bd38      	pop	{r3, r4, r5, pc}
 8014860:	24002750 	.word	0x24002750

08014864 <memcpy>:
 8014864:	440a      	add	r2, r1
 8014866:	4291      	cmp	r1, r2
 8014868:	f100 33ff 	add.w	r3, r0, #4294967295
 801486c:	d100      	bne.n	8014870 <memcpy+0xc>
 801486e:	4770      	bx	lr
 8014870:	b510      	push	{r4, lr}
 8014872:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014876:	f803 4f01 	strb.w	r4, [r3, #1]!
 801487a:	4291      	cmp	r1, r2
 801487c:	d1f9      	bne.n	8014872 <memcpy+0xe>
 801487e:	bd10      	pop	{r4, pc}

08014880 <__assert_func>:
 8014880:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014882:	4614      	mov	r4, r2
 8014884:	461a      	mov	r2, r3
 8014886:	4b09      	ldr	r3, [pc, #36]	@ (80148ac <__assert_func+0x2c>)
 8014888:	681b      	ldr	r3, [r3, #0]
 801488a:	4605      	mov	r5, r0
 801488c:	68d8      	ldr	r0, [r3, #12]
 801488e:	b954      	cbnz	r4, 80148a6 <__assert_func+0x26>
 8014890:	4b07      	ldr	r3, [pc, #28]	@ (80148b0 <__assert_func+0x30>)
 8014892:	461c      	mov	r4, r3
 8014894:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014898:	9100      	str	r1, [sp, #0]
 801489a:	462b      	mov	r3, r5
 801489c:	4905      	ldr	r1, [pc, #20]	@ (80148b4 <__assert_func+0x34>)
 801489e:	f000 f86f 	bl	8014980 <fiprintf>
 80148a2:	f000 f87f 	bl	80149a4 <abort>
 80148a6:	4b04      	ldr	r3, [pc, #16]	@ (80148b8 <__assert_func+0x38>)
 80148a8:	e7f4      	b.n	8014894 <__assert_func+0x14>
 80148aa:	bf00      	nop
 80148ac:	24000134 	.word	0x24000134
 80148b0:	080152ae 	.word	0x080152ae
 80148b4:	08015280 	.word	0x08015280
 80148b8:	08015273 	.word	0x08015273

080148bc <_calloc_r>:
 80148bc:	b570      	push	{r4, r5, r6, lr}
 80148be:	fba1 5402 	umull	r5, r4, r1, r2
 80148c2:	b93c      	cbnz	r4, 80148d4 <_calloc_r+0x18>
 80148c4:	4629      	mov	r1, r5
 80148c6:	f7ff f991 	bl	8013bec <_malloc_r>
 80148ca:	4606      	mov	r6, r0
 80148cc:	b928      	cbnz	r0, 80148da <_calloc_r+0x1e>
 80148ce:	2600      	movs	r6, #0
 80148d0:	4630      	mov	r0, r6
 80148d2:	bd70      	pop	{r4, r5, r6, pc}
 80148d4:	220c      	movs	r2, #12
 80148d6:	6002      	str	r2, [r0, #0]
 80148d8:	e7f9      	b.n	80148ce <_calloc_r+0x12>
 80148da:	462a      	mov	r2, r5
 80148dc:	4621      	mov	r1, r4
 80148de:	f7fe fab0 	bl	8012e42 <memset>
 80148e2:	e7f5      	b.n	80148d0 <_calloc_r+0x14>

080148e4 <__ascii_mbtowc>:
 80148e4:	b082      	sub	sp, #8
 80148e6:	b901      	cbnz	r1, 80148ea <__ascii_mbtowc+0x6>
 80148e8:	a901      	add	r1, sp, #4
 80148ea:	b142      	cbz	r2, 80148fe <__ascii_mbtowc+0x1a>
 80148ec:	b14b      	cbz	r3, 8014902 <__ascii_mbtowc+0x1e>
 80148ee:	7813      	ldrb	r3, [r2, #0]
 80148f0:	600b      	str	r3, [r1, #0]
 80148f2:	7812      	ldrb	r2, [r2, #0]
 80148f4:	1e10      	subs	r0, r2, #0
 80148f6:	bf18      	it	ne
 80148f8:	2001      	movne	r0, #1
 80148fa:	b002      	add	sp, #8
 80148fc:	4770      	bx	lr
 80148fe:	4610      	mov	r0, r2
 8014900:	e7fb      	b.n	80148fa <__ascii_mbtowc+0x16>
 8014902:	f06f 0001 	mvn.w	r0, #1
 8014906:	e7f8      	b.n	80148fa <__ascii_mbtowc+0x16>

08014908 <_realloc_r>:
 8014908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801490c:	4680      	mov	r8, r0
 801490e:	4615      	mov	r5, r2
 8014910:	460c      	mov	r4, r1
 8014912:	b921      	cbnz	r1, 801491e <_realloc_r+0x16>
 8014914:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014918:	4611      	mov	r1, r2
 801491a:	f7ff b967 	b.w	8013bec <_malloc_r>
 801491e:	b92a      	cbnz	r2, 801492c <_realloc_r+0x24>
 8014920:	f7ff f8f0 	bl	8013b04 <_free_r>
 8014924:	2400      	movs	r4, #0
 8014926:	4620      	mov	r0, r4
 8014928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801492c:	f000 f841 	bl	80149b2 <_malloc_usable_size_r>
 8014930:	4285      	cmp	r5, r0
 8014932:	4606      	mov	r6, r0
 8014934:	d802      	bhi.n	801493c <_realloc_r+0x34>
 8014936:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801493a:	d8f4      	bhi.n	8014926 <_realloc_r+0x1e>
 801493c:	4629      	mov	r1, r5
 801493e:	4640      	mov	r0, r8
 8014940:	f7ff f954 	bl	8013bec <_malloc_r>
 8014944:	4607      	mov	r7, r0
 8014946:	2800      	cmp	r0, #0
 8014948:	d0ec      	beq.n	8014924 <_realloc_r+0x1c>
 801494a:	42b5      	cmp	r5, r6
 801494c:	462a      	mov	r2, r5
 801494e:	4621      	mov	r1, r4
 8014950:	bf28      	it	cs
 8014952:	4632      	movcs	r2, r6
 8014954:	f7ff ff86 	bl	8014864 <memcpy>
 8014958:	4621      	mov	r1, r4
 801495a:	4640      	mov	r0, r8
 801495c:	f7ff f8d2 	bl	8013b04 <_free_r>
 8014960:	463c      	mov	r4, r7
 8014962:	e7e0      	b.n	8014926 <_realloc_r+0x1e>

08014964 <__ascii_wctomb>:
 8014964:	4603      	mov	r3, r0
 8014966:	4608      	mov	r0, r1
 8014968:	b141      	cbz	r1, 801497c <__ascii_wctomb+0x18>
 801496a:	2aff      	cmp	r2, #255	@ 0xff
 801496c:	d904      	bls.n	8014978 <__ascii_wctomb+0x14>
 801496e:	228a      	movs	r2, #138	@ 0x8a
 8014970:	601a      	str	r2, [r3, #0]
 8014972:	f04f 30ff 	mov.w	r0, #4294967295
 8014976:	4770      	bx	lr
 8014978:	700a      	strb	r2, [r1, #0]
 801497a:	2001      	movs	r0, #1
 801497c:	4770      	bx	lr
	...

08014980 <fiprintf>:
 8014980:	b40e      	push	{r1, r2, r3}
 8014982:	b503      	push	{r0, r1, lr}
 8014984:	4601      	mov	r1, r0
 8014986:	ab03      	add	r3, sp, #12
 8014988:	4805      	ldr	r0, [pc, #20]	@ (80149a0 <fiprintf+0x20>)
 801498a:	f853 2b04 	ldr.w	r2, [r3], #4
 801498e:	6800      	ldr	r0, [r0, #0]
 8014990:	9301      	str	r3, [sp, #4]
 8014992:	f000 f83f 	bl	8014a14 <_vfiprintf_r>
 8014996:	b002      	add	sp, #8
 8014998:	f85d eb04 	ldr.w	lr, [sp], #4
 801499c:	b003      	add	sp, #12
 801499e:	4770      	bx	lr
 80149a0:	24000134 	.word	0x24000134

080149a4 <abort>:
 80149a4:	b508      	push	{r3, lr}
 80149a6:	2006      	movs	r0, #6
 80149a8:	f000 fa08 	bl	8014dbc <raise>
 80149ac:	2001      	movs	r0, #1
 80149ae:	f7ec ffd3 	bl	8001958 <_exit>

080149b2 <_malloc_usable_size_r>:
 80149b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80149b6:	1f18      	subs	r0, r3, #4
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	bfbc      	itt	lt
 80149bc:	580b      	ldrlt	r3, [r1, r0]
 80149be:	18c0      	addlt	r0, r0, r3
 80149c0:	4770      	bx	lr

080149c2 <__sfputc_r>:
 80149c2:	6893      	ldr	r3, [r2, #8]
 80149c4:	3b01      	subs	r3, #1
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	b410      	push	{r4}
 80149ca:	6093      	str	r3, [r2, #8]
 80149cc:	da08      	bge.n	80149e0 <__sfputc_r+0x1e>
 80149ce:	6994      	ldr	r4, [r2, #24]
 80149d0:	42a3      	cmp	r3, r4
 80149d2:	db01      	blt.n	80149d8 <__sfputc_r+0x16>
 80149d4:	290a      	cmp	r1, #10
 80149d6:	d103      	bne.n	80149e0 <__sfputc_r+0x1e>
 80149d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80149dc:	f000 b932 	b.w	8014c44 <__swbuf_r>
 80149e0:	6813      	ldr	r3, [r2, #0]
 80149e2:	1c58      	adds	r0, r3, #1
 80149e4:	6010      	str	r0, [r2, #0]
 80149e6:	7019      	strb	r1, [r3, #0]
 80149e8:	4608      	mov	r0, r1
 80149ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80149ee:	4770      	bx	lr

080149f0 <__sfputs_r>:
 80149f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149f2:	4606      	mov	r6, r0
 80149f4:	460f      	mov	r7, r1
 80149f6:	4614      	mov	r4, r2
 80149f8:	18d5      	adds	r5, r2, r3
 80149fa:	42ac      	cmp	r4, r5
 80149fc:	d101      	bne.n	8014a02 <__sfputs_r+0x12>
 80149fe:	2000      	movs	r0, #0
 8014a00:	e007      	b.n	8014a12 <__sfputs_r+0x22>
 8014a02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a06:	463a      	mov	r2, r7
 8014a08:	4630      	mov	r0, r6
 8014a0a:	f7ff ffda 	bl	80149c2 <__sfputc_r>
 8014a0e:	1c43      	adds	r3, r0, #1
 8014a10:	d1f3      	bne.n	80149fa <__sfputs_r+0xa>
 8014a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014a14 <_vfiprintf_r>:
 8014a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a18:	460d      	mov	r5, r1
 8014a1a:	b09d      	sub	sp, #116	@ 0x74
 8014a1c:	4614      	mov	r4, r2
 8014a1e:	4698      	mov	r8, r3
 8014a20:	4606      	mov	r6, r0
 8014a22:	b118      	cbz	r0, 8014a2c <_vfiprintf_r+0x18>
 8014a24:	6a03      	ldr	r3, [r0, #32]
 8014a26:	b90b      	cbnz	r3, 8014a2c <_vfiprintf_r+0x18>
 8014a28:	f7fe f972 	bl	8012d10 <__sinit>
 8014a2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014a2e:	07d9      	lsls	r1, r3, #31
 8014a30:	d405      	bmi.n	8014a3e <_vfiprintf_r+0x2a>
 8014a32:	89ab      	ldrh	r3, [r5, #12]
 8014a34:	059a      	lsls	r2, r3, #22
 8014a36:	d402      	bmi.n	8014a3e <_vfiprintf_r+0x2a>
 8014a38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014a3a:	f7fe fa80 	bl	8012f3e <__retarget_lock_acquire_recursive>
 8014a3e:	89ab      	ldrh	r3, [r5, #12]
 8014a40:	071b      	lsls	r3, r3, #28
 8014a42:	d501      	bpl.n	8014a48 <_vfiprintf_r+0x34>
 8014a44:	692b      	ldr	r3, [r5, #16]
 8014a46:	b99b      	cbnz	r3, 8014a70 <_vfiprintf_r+0x5c>
 8014a48:	4629      	mov	r1, r5
 8014a4a:	4630      	mov	r0, r6
 8014a4c:	f000 f938 	bl	8014cc0 <__swsetup_r>
 8014a50:	b170      	cbz	r0, 8014a70 <_vfiprintf_r+0x5c>
 8014a52:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014a54:	07dc      	lsls	r4, r3, #31
 8014a56:	d504      	bpl.n	8014a62 <_vfiprintf_r+0x4e>
 8014a58:	f04f 30ff 	mov.w	r0, #4294967295
 8014a5c:	b01d      	add	sp, #116	@ 0x74
 8014a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a62:	89ab      	ldrh	r3, [r5, #12]
 8014a64:	0598      	lsls	r0, r3, #22
 8014a66:	d4f7      	bmi.n	8014a58 <_vfiprintf_r+0x44>
 8014a68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014a6a:	f7fe fa69 	bl	8012f40 <__retarget_lock_release_recursive>
 8014a6e:	e7f3      	b.n	8014a58 <_vfiprintf_r+0x44>
 8014a70:	2300      	movs	r3, #0
 8014a72:	9309      	str	r3, [sp, #36]	@ 0x24
 8014a74:	2320      	movs	r3, #32
 8014a76:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014a7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8014a7e:	2330      	movs	r3, #48	@ 0x30
 8014a80:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014c30 <_vfiprintf_r+0x21c>
 8014a84:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014a88:	f04f 0901 	mov.w	r9, #1
 8014a8c:	4623      	mov	r3, r4
 8014a8e:	469a      	mov	sl, r3
 8014a90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014a94:	b10a      	cbz	r2, 8014a9a <_vfiprintf_r+0x86>
 8014a96:	2a25      	cmp	r2, #37	@ 0x25
 8014a98:	d1f9      	bne.n	8014a8e <_vfiprintf_r+0x7a>
 8014a9a:	ebba 0b04 	subs.w	fp, sl, r4
 8014a9e:	d00b      	beq.n	8014ab8 <_vfiprintf_r+0xa4>
 8014aa0:	465b      	mov	r3, fp
 8014aa2:	4622      	mov	r2, r4
 8014aa4:	4629      	mov	r1, r5
 8014aa6:	4630      	mov	r0, r6
 8014aa8:	f7ff ffa2 	bl	80149f0 <__sfputs_r>
 8014aac:	3001      	adds	r0, #1
 8014aae:	f000 80a7 	beq.w	8014c00 <_vfiprintf_r+0x1ec>
 8014ab2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014ab4:	445a      	add	r2, fp
 8014ab6:	9209      	str	r2, [sp, #36]	@ 0x24
 8014ab8:	f89a 3000 	ldrb.w	r3, [sl]
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	f000 809f 	beq.w	8014c00 <_vfiprintf_r+0x1ec>
 8014ac2:	2300      	movs	r3, #0
 8014ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8014ac8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014acc:	f10a 0a01 	add.w	sl, sl, #1
 8014ad0:	9304      	str	r3, [sp, #16]
 8014ad2:	9307      	str	r3, [sp, #28]
 8014ad4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014ad8:	931a      	str	r3, [sp, #104]	@ 0x68
 8014ada:	4654      	mov	r4, sl
 8014adc:	2205      	movs	r2, #5
 8014ade:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ae2:	4853      	ldr	r0, [pc, #332]	@ (8014c30 <_vfiprintf_r+0x21c>)
 8014ae4:	f7eb fbfc 	bl	80002e0 <memchr>
 8014ae8:	9a04      	ldr	r2, [sp, #16]
 8014aea:	b9d8      	cbnz	r0, 8014b24 <_vfiprintf_r+0x110>
 8014aec:	06d1      	lsls	r1, r2, #27
 8014aee:	bf44      	itt	mi
 8014af0:	2320      	movmi	r3, #32
 8014af2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014af6:	0713      	lsls	r3, r2, #28
 8014af8:	bf44      	itt	mi
 8014afa:	232b      	movmi	r3, #43	@ 0x2b
 8014afc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014b00:	f89a 3000 	ldrb.w	r3, [sl]
 8014b04:	2b2a      	cmp	r3, #42	@ 0x2a
 8014b06:	d015      	beq.n	8014b34 <_vfiprintf_r+0x120>
 8014b08:	9a07      	ldr	r2, [sp, #28]
 8014b0a:	4654      	mov	r4, sl
 8014b0c:	2000      	movs	r0, #0
 8014b0e:	f04f 0c0a 	mov.w	ip, #10
 8014b12:	4621      	mov	r1, r4
 8014b14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014b18:	3b30      	subs	r3, #48	@ 0x30
 8014b1a:	2b09      	cmp	r3, #9
 8014b1c:	d94b      	bls.n	8014bb6 <_vfiprintf_r+0x1a2>
 8014b1e:	b1b0      	cbz	r0, 8014b4e <_vfiprintf_r+0x13a>
 8014b20:	9207      	str	r2, [sp, #28]
 8014b22:	e014      	b.n	8014b4e <_vfiprintf_r+0x13a>
 8014b24:	eba0 0308 	sub.w	r3, r0, r8
 8014b28:	fa09 f303 	lsl.w	r3, r9, r3
 8014b2c:	4313      	orrs	r3, r2
 8014b2e:	9304      	str	r3, [sp, #16]
 8014b30:	46a2      	mov	sl, r4
 8014b32:	e7d2      	b.n	8014ada <_vfiprintf_r+0xc6>
 8014b34:	9b03      	ldr	r3, [sp, #12]
 8014b36:	1d19      	adds	r1, r3, #4
 8014b38:	681b      	ldr	r3, [r3, #0]
 8014b3a:	9103      	str	r1, [sp, #12]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	bfbb      	ittet	lt
 8014b40:	425b      	neglt	r3, r3
 8014b42:	f042 0202 	orrlt.w	r2, r2, #2
 8014b46:	9307      	strge	r3, [sp, #28]
 8014b48:	9307      	strlt	r3, [sp, #28]
 8014b4a:	bfb8      	it	lt
 8014b4c:	9204      	strlt	r2, [sp, #16]
 8014b4e:	7823      	ldrb	r3, [r4, #0]
 8014b50:	2b2e      	cmp	r3, #46	@ 0x2e
 8014b52:	d10a      	bne.n	8014b6a <_vfiprintf_r+0x156>
 8014b54:	7863      	ldrb	r3, [r4, #1]
 8014b56:	2b2a      	cmp	r3, #42	@ 0x2a
 8014b58:	d132      	bne.n	8014bc0 <_vfiprintf_r+0x1ac>
 8014b5a:	9b03      	ldr	r3, [sp, #12]
 8014b5c:	1d1a      	adds	r2, r3, #4
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	9203      	str	r2, [sp, #12]
 8014b62:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014b66:	3402      	adds	r4, #2
 8014b68:	9305      	str	r3, [sp, #20]
 8014b6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014c40 <_vfiprintf_r+0x22c>
 8014b6e:	7821      	ldrb	r1, [r4, #0]
 8014b70:	2203      	movs	r2, #3
 8014b72:	4650      	mov	r0, sl
 8014b74:	f7eb fbb4 	bl	80002e0 <memchr>
 8014b78:	b138      	cbz	r0, 8014b8a <_vfiprintf_r+0x176>
 8014b7a:	9b04      	ldr	r3, [sp, #16]
 8014b7c:	eba0 000a 	sub.w	r0, r0, sl
 8014b80:	2240      	movs	r2, #64	@ 0x40
 8014b82:	4082      	lsls	r2, r0
 8014b84:	4313      	orrs	r3, r2
 8014b86:	3401      	adds	r4, #1
 8014b88:	9304      	str	r3, [sp, #16]
 8014b8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b8e:	4829      	ldr	r0, [pc, #164]	@ (8014c34 <_vfiprintf_r+0x220>)
 8014b90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014b94:	2206      	movs	r2, #6
 8014b96:	f7eb fba3 	bl	80002e0 <memchr>
 8014b9a:	2800      	cmp	r0, #0
 8014b9c:	d03f      	beq.n	8014c1e <_vfiprintf_r+0x20a>
 8014b9e:	4b26      	ldr	r3, [pc, #152]	@ (8014c38 <_vfiprintf_r+0x224>)
 8014ba0:	bb1b      	cbnz	r3, 8014bea <_vfiprintf_r+0x1d6>
 8014ba2:	9b03      	ldr	r3, [sp, #12]
 8014ba4:	3307      	adds	r3, #7
 8014ba6:	f023 0307 	bic.w	r3, r3, #7
 8014baa:	3308      	adds	r3, #8
 8014bac:	9303      	str	r3, [sp, #12]
 8014bae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014bb0:	443b      	add	r3, r7
 8014bb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8014bb4:	e76a      	b.n	8014a8c <_vfiprintf_r+0x78>
 8014bb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8014bba:	460c      	mov	r4, r1
 8014bbc:	2001      	movs	r0, #1
 8014bbe:	e7a8      	b.n	8014b12 <_vfiprintf_r+0xfe>
 8014bc0:	2300      	movs	r3, #0
 8014bc2:	3401      	adds	r4, #1
 8014bc4:	9305      	str	r3, [sp, #20]
 8014bc6:	4619      	mov	r1, r3
 8014bc8:	f04f 0c0a 	mov.w	ip, #10
 8014bcc:	4620      	mov	r0, r4
 8014bce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014bd2:	3a30      	subs	r2, #48	@ 0x30
 8014bd4:	2a09      	cmp	r2, #9
 8014bd6:	d903      	bls.n	8014be0 <_vfiprintf_r+0x1cc>
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d0c6      	beq.n	8014b6a <_vfiprintf_r+0x156>
 8014bdc:	9105      	str	r1, [sp, #20]
 8014bde:	e7c4      	b.n	8014b6a <_vfiprintf_r+0x156>
 8014be0:	fb0c 2101 	mla	r1, ip, r1, r2
 8014be4:	4604      	mov	r4, r0
 8014be6:	2301      	movs	r3, #1
 8014be8:	e7f0      	b.n	8014bcc <_vfiprintf_r+0x1b8>
 8014bea:	ab03      	add	r3, sp, #12
 8014bec:	9300      	str	r3, [sp, #0]
 8014bee:	462a      	mov	r2, r5
 8014bf0:	4b12      	ldr	r3, [pc, #72]	@ (8014c3c <_vfiprintf_r+0x228>)
 8014bf2:	a904      	add	r1, sp, #16
 8014bf4:	4630      	mov	r0, r6
 8014bf6:	f7fd fc57 	bl	80124a8 <_printf_float>
 8014bfa:	4607      	mov	r7, r0
 8014bfc:	1c78      	adds	r0, r7, #1
 8014bfe:	d1d6      	bne.n	8014bae <_vfiprintf_r+0x19a>
 8014c00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014c02:	07d9      	lsls	r1, r3, #31
 8014c04:	d405      	bmi.n	8014c12 <_vfiprintf_r+0x1fe>
 8014c06:	89ab      	ldrh	r3, [r5, #12]
 8014c08:	059a      	lsls	r2, r3, #22
 8014c0a:	d402      	bmi.n	8014c12 <_vfiprintf_r+0x1fe>
 8014c0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014c0e:	f7fe f997 	bl	8012f40 <__retarget_lock_release_recursive>
 8014c12:	89ab      	ldrh	r3, [r5, #12]
 8014c14:	065b      	lsls	r3, r3, #25
 8014c16:	f53f af1f 	bmi.w	8014a58 <_vfiprintf_r+0x44>
 8014c1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014c1c:	e71e      	b.n	8014a5c <_vfiprintf_r+0x48>
 8014c1e:	ab03      	add	r3, sp, #12
 8014c20:	9300      	str	r3, [sp, #0]
 8014c22:	462a      	mov	r2, r5
 8014c24:	4b05      	ldr	r3, [pc, #20]	@ (8014c3c <_vfiprintf_r+0x228>)
 8014c26:	a904      	add	r1, sp, #16
 8014c28:	4630      	mov	r0, r6
 8014c2a:	f7fd fec5 	bl	80129b8 <_printf_i>
 8014c2e:	e7e4      	b.n	8014bfa <_vfiprintf_r+0x1e6>
 8014c30:	08015258 	.word	0x08015258
 8014c34:	08015262 	.word	0x08015262
 8014c38:	080124a9 	.word	0x080124a9
 8014c3c:	080149f1 	.word	0x080149f1
 8014c40:	0801525e 	.word	0x0801525e

08014c44 <__swbuf_r>:
 8014c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c46:	460e      	mov	r6, r1
 8014c48:	4614      	mov	r4, r2
 8014c4a:	4605      	mov	r5, r0
 8014c4c:	b118      	cbz	r0, 8014c56 <__swbuf_r+0x12>
 8014c4e:	6a03      	ldr	r3, [r0, #32]
 8014c50:	b90b      	cbnz	r3, 8014c56 <__swbuf_r+0x12>
 8014c52:	f7fe f85d 	bl	8012d10 <__sinit>
 8014c56:	69a3      	ldr	r3, [r4, #24]
 8014c58:	60a3      	str	r3, [r4, #8]
 8014c5a:	89a3      	ldrh	r3, [r4, #12]
 8014c5c:	071a      	lsls	r2, r3, #28
 8014c5e:	d501      	bpl.n	8014c64 <__swbuf_r+0x20>
 8014c60:	6923      	ldr	r3, [r4, #16]
 8014c62:	b943      	cbnz	r3, 8014c76 <__swbuf_r+0x32>
 8014c64:	4621      	mov	r1, r4
 8014c66:	4628      	mov	r0, r5
 8014c68:	f000 f82a 	bl	8014cc0 <__swsetup_r>
 8014c6c:	b118      	cbz	r0, 8014c76 <__swbuf_r+0x32>
 8014c6e:	f04f 37ff 	mov.w	r7, #4294967295
 8014c72:	4638      	mov	r0, r7
 8014c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c76:	6823      	ldr	r3, [r4, #0]
 8014c78:	6922      	ldr	r2, [r4, #16]
 8014c7a:	1a98      	subs	r0, r3, r2
 8014c7c:	6963      	ldr	r3, [r4, #20]
 8014c7e:	b2f6      	uxtb	r6, r6
 8014c80:	4283      	cmp	r3, r0
 8014c82:	4637      	mov	r7, r6
 8014c84:	dc05      	bgt.n	8014c92 <__swbuf_r+0x4e>
 8014c86:	4621      	mov	r1, r4
 8014c88:	4628      	mov	r0, r5
 8014c8a:	f7ff fd99 	bl	80147c0 <_fflush_r>
 8014c8e:	2800      	cmp	r0, #0
 8014c90:	d1ed      	bne.n	8014c6e <__swbuf_r+0x2a>
 8014c92:	68a3      	ldr	r3, [r4, #8]
 8014c94:	3b01      	subs	r3, #1
 8014c96:	60a3      	str	r3, [r4, #8]
 8014c98:	6823      	ldr	r3, [r4, #0]
 8014c9a:	1c5a      	adds	r2, r3, #1
 8014c9c:	6022      	str	r2, [r4, #0]
 8014c9e:	701e      	strb	r6, [r3, #0]
 8014ca0:	6962      	ldr	r2, [r4, #20]
 8014ca2:	1c43      	adds	r3, r0, #1
 8014ca4:	429a      	cmp	r2, r3
 8014ca6:	d004      	beq.n	8014cb2 <__swbuf_r+0x6e>
 8014ca8:	89a3      	ldrh	r3, [r4, #12]
 8014caa:	07db      	lsls	r3, r3, #31
 8014cac:	d5e1      	bpl.n	8014c72 <__swbuf_r+0x2e>
 8014cae:	2e0a      	cmp	r6, #10
 8014cb0:	d1df      	bne.n	8014c72 <__swbuf_r+0x2e>
 8014cb2:	4621      	mov	r1, r4
 8014cb4:	4628      	mov	r0, r5
 8014cb6:	f7ff fd83 	bl	80147c0 <_fflush_r>
 8014cba:	2800      	cmp	r0, #0
 8014cbc:	d0d9      	beq.n	8014c72 <__swbuf_r+0x2e>
 8014cbe:	e7d6      	b.n	8014c6e <__swbuf_r+0x2a>

08014cc0 <__swsetup_r>:
 8014cc0:	b538      	push	{r3, r4, r5, lr}
 8014cc2:	4b29      	ldr	r3, [pc, #164]	@ (8014d68 <__swsetup_r+0xa8>)
 8014cc4:	4605      	mov	r5, r0
 8014cc6:	6818      	ldr	r0, [r3, #0]
 8014cc8:	460c      	mov	r4, r1
 8014cca:	b118      	cbz	r0, 8014cd4 <__swsetup_r+0x14>
 8014ccc:	6a03      	ldr	r3, [r0, #32]
 8014cce:	b90b      	cbnz	r3, 8014cd4 <__swsetup_r+0x14>
 8014cd0:	f7fe f81e 	bl	8012d10 <__sinit>
 8014cd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014cd8:	0719      	lsls	r1, r3, #28
 8014cda:	d422      	bmi.n	8014d22 <__swsetup_r+0x62>
 8014cdc:	06da      	lsls	r2, r3, #27
 8014cde:	d407      	bmi.n	8014cf0 <__swsetup_r+0x30>
 8014ce0:	2209      	movs	r2, #9
 8014ce2:	602a      	str	r2, [r5, #0]
 8014ce4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014ce8:	81a3      	strh	r3, [r4, #12]
 8014cea:	f04f 30ff 	mov.w	r0, #4294967295
 8014cee:	e033      	b.n	8014d58 <__swsetup_r+0x98>
 8014cf0:	0758      	lsls	r0, r3, #29
 8014cf2:	d512      	bpl.n	8014d1a <__swsetup_r+0x5a>
 8014cf4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014cf6:	b141      	cbz	r1, 8014d0a <__swsetup_r+0x4a>
 8014cf8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014cfc:	4299      	cmp	r1, r3
 8014cfe:	d002      	beq.n	8014d06 <__swsetup_r+0x46>
 8014d00:	4628      	mov	r0, r5
 8014d02:	f7fe feff 	bl	8013b04 <_free_r>
 8014d06:	2300      	movs	r3, #0
 8014d08:	6363      	str	r3, [r4, #52]	@ 0x34
 8014d0a:	89a3      	ldrh	r3, [r4, #12]
 8014d0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014d10:	81a3      	strh	r3, [r4, #12]
 8014d12:	2300      	movs	r3, #0
 8014d14:	6063      	str	r3, [r4, #4]
 8014d16:	6923      	ldr	r3, [r4, #16]
 8014d18:	6023      	str	r3, [r4, #0]
 8014d1a:	89a3      	ldrh	r3, [r4, #12]
 8014d1c:	f043 0308 	orr.w	r3, r3, #8
 8014d20:	81a3      	strh	r3, [r4, #12]
 8014d22:	6923      	ldr	r3, [r4, #16]
 8014d24:	b94b      	cbnz	r3, 8014d3a <__swsetup_r+0x7a>
 8014d26:	89a3      	ldrh	r3, [r4, #12]
 8014d28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014d2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014d30:	d003      	beq.n	8014d3a <__swsetup_r+0x7a>
 8014d32:	4621      	mov	r1, r4
 8014d34:	4628      	mov	r0, r5
 8014d36:	f000 f883 	bl	8014e40 <__smakebuf_r>
 8014d3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d3e:	f013 0201 	ands.w	r2, r3, #1
 8014d42:	d00a      	beq.n	8014d5a <__swsetup_r+0x9a>
 8014d44:	2200      	movs	r2, #0
 8014d46:	60a2      	str	r2, [r4, #8]
 8014d48:	6962      	ldr	r2, [r4, #20]
 8014d4a:	4252      	negs	r2, r2
 8014d4c:	61a2      	str	r2, [r4, #24]
 8014d4e:	6922      	ldr	r2, [r4, #16]
 8014d50:	b942      	cbnz	r2, 8014d64 <__swsetup_r+0xa4>
 8014d52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014d56:	d1c5      	bne.n	8014ce4 <__swsetup_r+0x24>
 8014d58:	bd38      	pop	{r3, r4, r5, pc}
 8014d5a:	0799      	lsls	r1, r3, #30
 8014d5c:	bf58      	it	pl
 8014d5e:	6962      	ldrpl	r2, [r4, #20]
 8014d60:	60a2      	str	r2, [r4, #8]
 8014d62:	e7f4      	b.n	8014d4e <__swsetup_r+0x8e>
 8014d64:	2000      	movs	r0, #0
 8014d66:	e7f7      	b.n	8014d58 <__swsetup_r+0x98>
 8014d68:	24000134 	.word	0x24000134

08014d6c <_raise_r>:
 8014d6c:	291f      	cmp	r1, #31
 8014d6e:	b538      	push	{r3, r4, r5, lr}
 8014d70:	4605      	mov	r5, r0
 8014d72:	460c      	mov	r4, r1
 8014d74:	d904      	bls.n	8014d80 <_raise_r+0x14>
 8014d76:	2316      	movs	r3, #22
 8014d78:	6003      	str	r3, [r0, #0]
 8014d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8014d7e:	bd38      	pop	{r3, r4, r5, pc}
 8014d80:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014d82:	b112      	cbz	r2, 8014d8a <_raise_r+0x1e>
 8014d84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014d88:	b94b      	cbnz	r3, 8014d9e <_raise_r+0x32>
 8014d8a:	4628      	mov	r0, r5
 8014d8c:	f000 f830 	bl	8014df0 <_getpid_r>
 8014d90:	4622      	mov	r2, r4
 8014d92:	4601      	mov	r1, r0
 8014d94:	4628      	mov	r0, r5
 8014d96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014d9a:	f000 b817 	b.w	8014dcc <_kill_r>
 8014d9e:	2b01      	cmp	r3, #1
 8014da0:	d00a      	beq.n	8014db8 <_raise_r+0x4c>
 8014da2:	1c59      	adds	r1, r3, #1
 8014da4:	d103      	bne.n	8014dae <_raise_r+0x42>
 8014da6:	2316      	movs	r3, #22
 8014da8:	6003      	str	r3, [r0, #0]
 8014daa:	2001      	movs	r0, #1
 8014dac:	e7e7      	b.n	8014d7e <_raise_r+0x12>
 8014dae:	2100      	movs	r1, #0
 8014db0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014db4:	4620      	mov	r0, r4
 8014db6:	4798      	blx	r3
 8014db8:	2000      	movs	r0, #0
 8014dba:	e7e0      	b.n	8014d7e <_raise_r+0x12>

08014dbc <raise>:
 8014dbc:	4b02      	ldr	r3, [pc, #8]	@ (8014dc8 <raise+0xc>)
 8014dbe:	4601      	mov	r1, r0
 8014dc0:	6818      	ldr	r0, [r3, #0]
 8014dc2:	f7ff bfd3 	b.w	8014d6c <_raise_r>
 8014dc6:	bf00      	nop
 8014dc8:	24000134 	.word	0x24000134

08014dcc <_kill_r>:
 8014dcc:	b538      	push	{r3, r4, r5, lr}
 8014dce:	4d07      	ldr	r5, [pc, #28]	@ (8014dec <_kill_r+0x20>)
 8014dd0:	2300      	movs	r3, #0
 8014dd2:	4604      	mov	r4, r0
 8014dd4:	4608      	mov	r0, r1
 8014dd6:	4611      	mov	r1, r2
 8014dd8:	602b      	str	r3, [r5, #0]
 8014dda:	f7ec fdad 	bl	8001938 <_kill>
 8014dde:	1c43      	adds	r3, r0, #1
 8014de0:	d102      	bne.n	8014de8 <_kill_r+0x1c>
 8014de2:	682b      	ldr	r3, [r5, #0]
 8014de4:	b103      	cbz	r3, 8014de8 <_kill_r+0x1c>
 8014de6:	6023      	str	r3, [r4, #0]
 8014de8:	bd38      	pop	{r3, r4, r5, pc}
 8014dea:	bf00      	nop
 8014dec:	24002750 	.word	0x24002750

08014df0 <_getpid_r>:
 8014df0:	f7ec bd9a 	b.w	8001928 <_getpid>

08014df4 <__swhatbuf_r>:
 8014df4:	b570      	push	{r4, r5, r6, lr}
 8014df6:	460c      	mov	r4, r1
 8014df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014dfc:	2900      	cmp	r1, #0
 8014dfe:	b096      	sub	sp, #88	@ 0x58
 8014e00:	4615      	mov	r5, r2
 8014e02:	461e      	mov	r6, r3
 8014e04:	da0d      	bge.n	8014e22 <__swhatbuf_r+0x2e>
 8014e06:	89a3      	ldrh	r3, [r4, #12]
 8014e08:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014e0c:	f04f 0100 	mov.w	r1, #0
 8014e10:	bf14      	ite	ne
 8014e12:	2340      	movne	r3, #64	@ 0x40
 8014e14:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014e18:	2000      	movs	r0, #0
 8014e1a:	6031      	str	r1, [r6, #0]
 8014e1c:	602b      	str	r3, [r5, #0]
 8014e1e:	b016      	add	sp, #88	@ 0x58
 8014e20:	bd70      	pop	{r4, r5, r6, pc}
 8014e22:	466a      	mov	r2, sp
 8014e24:	f000 f848 	bl	8014eb8 <_fstat_r>
 8014e28:	2800      	cmp	r0, #0
 8014e2a:	dbec      	blt.n	8014e06 <__swhatbuf_r+0x12>
 8014e2c:	9901      	ldr	r1, [sp, #4]
 8014e2e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014e32:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014e36:	4259      	negs	r1, r3
 8014e38:	4159      	adcs	r1, r3
 8014e3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014e3e:	e7eb      	b.n	8014e18 <__swhatbuf_r+0x24>

08014e40 <__smakebuf_r>:
 8014e40:	898b      	ldrh	r3, [r1, #12]
 8014e42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014e44:	079d      	lsls	r5, r3, #30
 8014e46:	4606      	mov	r6, r0
 8014e48:	460c      	mov	r4, r1
 8014e4a:	d507      	bpl.n	8014e5c <__smakebuf_r+0x1c>
 8014e4c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014e50:	6023      	str	r3, [r4, #0]
 8014e52:	6123      	str	r3, [r4, #16]
 8014e54:	2301      	movs	r3, #1
 8014e56:	6163      	str	r3, [r4, #20]
 8014e58:	b003      	add	sp, #12
 8014e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e5c:	ab01      	add	r3, sp, #4
 8014e5e:	466a      	mov	r2, sp
 8014e60:	f7ff ffc8 	bl	8014df4 <__swhatbuf_r>
 8014e64:	9f00      	ldr	r7, [sp, #0]
 8014e66:	4605      	mov	r5, r0
 8014e68:	4639      	mov	r1, r7
 8014e6a:	4630      	mov	r0, r6
 8014e6c:	f7fe febe 	bl	8013bec <_malloc_r>
 8014e70:	b948      	cbnz	r0, 8014e86 <__smakebuf_r+0x46>
 8014e72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e76:	059a      	lsls	r2, r3, #22
 8014e78:	d4ee      	bmi.n	8014e58 <__smakebuf_r+0x18>
 8014e7a:	f023 0303 	bic.w	r3, r3, #3
 8014e7e:	f043 0302 	orr.w	r3, r3, #2
 8014e82:	81a3      	strh	r3, [r4, #12]
 8014e84:	e7e2      	b.n	8014e4c <__smakebuf_r+0xc>
 8014e86:	89a3      	ldrh	r3, [r4, #12]
 8014e88:	6020      	str	r0, [r4, #0]
 8014e8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014e8e:	81a3      	strh	r3, [r4, #12]
 8014e90:	9b01      	ldr	r3, [sp, #4]
 8014e92:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014e96:	b15b      	cbz	r3, 8014eb0 <__smakebuf_r+0x70>
 8014e98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014e9c:	4630      	mov	r0, r6
 8014e9e:	f000 f81d 	bl	8014edc <_isatty_r>
 8014ea2:	b128      	cbz	r0, 8014eb0 <__smakebuf_r+0x70>
 8014ea4:	89a3      	ldrh	r3, [r4, #12]
 8014ea6:	f023 0303 	bic.w	r3, r3, #3
 8014eaa:	f043 0301 	orr.w	r3, r3, #1
 8014eae:	81a3      	strh	r3, [r4, #12]
 8014eb0:	89a3      	ldrh	r3, [r4, #12]
 8014eb2:	431d      	orrs	r5, r3
 8014eb4:	81a5      	strh	r5, [r4, #12]
 8014eb6:	e7cf      	b.n	8014e58 <__smakebuf_r+0x18>

08014eb8 <_fstat_r>:
 8014eb8:	b538      	push	{r3, r4, r5, lr}
 8014eba:	4d07      	ldr	r5, [pc, #28]	@ (8014ed8 <_fstat_r+0x20>)
 8014ebc:	2300      	movs	r3, #0
 8014ebe:	4604      	mov	r4, r0
 8014ec0:	4608      	mov	r0, r1
 8014ec2:	4611      	mov	r1, r2
 8014ec4:	602b      	str	r3, [r5, #0]
 8014ec6:	f7ec fd97 	bl	80019f8 <_fstat>
 8014eca:	1c43      	adds	r3, r0, #1
 8014ecc:	d102      	bne.n	8014ed4 <_fstat_r+0x1c>
 8014ece:	682b      	ldr	r3, [r5, #0]
 8014ed0:	b103      	cbz	r3, 8014ed4 <_fstat_r+0x1c>
 8014ed2:	6023      	str	r3, [r4, #0]
 8014ed4:	bd38      	pop	{r3, r4, r5, pc}
 8014ed6:	bf00      	nop
 8014ed8:	24002750 	.word	0x24002750

08014edc <_isatty_r>:
 8014edc:	b538      	push	{r3, r4, r5, lr}
 8014ede:	4d06      	ldr	r5, [pc, #24]	@ (8014ef8 <_isatty_r+0x1c>)
 8014ee0:	2300      	movs	r3, #0
 8014ee2:	4604      	mov	r4, r0
 8014ee4:	4608      	mov	r0, r1
 8014ee6:	602b      	str	r3, [r5, #0]
 8014ee8:	f7ec fd96 	bl	8001a18 <_isatty>
 8014eec:	1c43      	adds	r3, r0, #1
 8014eee:	d102      	bne.n	8014ef6 <_isatty_r+0x1a>
 8014ef0:	682b      	ldr	r3, [r5, #0]
 8014ef2:	b103      	cbz	r3, 8014ef6 <_isatty_r+0x1a>
 8014ef4:	6023      	str	r3, [r4, #0]
 8014ef6:	bd38      	pop	{r3, r4, r5, pc}
 8014ef8:	24002750 	.word	0x24002750

08014efc <lrintf>:
 8014efc:	ee10 3a10 	vmov	r3, s0
 8014f00:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014f04:	f1a2 007f 	sub.w	r0, r2, #127	@ 0x7f
 8014f08:	281e      	cmp	r0, #30
 8014f0a:	b082      	sub	sp, #8
 8014f0c:	dc2f      	bgt.n	8014f6e <lrintf+0x72>
 8014f0e:	1c41      	adds	r1, r0, #1
 8014f10:	da02      	bge.n	8014f18 <lrintf+0x1c>
 8014f12:	2000      	movs	r0, #0
 8014f14:	b002      	add	sp, #8
 8014f16:	4770      	bx	lr
 8014f18:	2816      	cmp	r0, #22
 8014f1a:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 8014f1e:	dd0a      	ble.n	8014f36 <lrintf+0x3a>
 8014f20:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8014f24:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8014f28:	3a96      	subs	r2, #150	@ 0x96
 8014f2a:	fa03 f002 	lsl.w	r0, r3, r2
 8014f2e:	2900      	cmp	r1, #0
 8014f30:	d0f0      	beq.n	8014f14 <lrintf+0x18>
 8014f32:	4240      	negs	r0, r0
 8014f34:	e7ee      	b.n	8014f14 <lrintf+0x18>
 8014f36:	4b10      	ldr	r3, [pc, #64]	@ (8014f78 <lrintf+0x7c>)
 8014f38:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8014f3c:	ed93 7a00 	vldr	s14, [r3]
 8014f40:	ee37 0a00 	vadd.f32	s0, s14, s0
 8014f44:	ed8d 0a01 	vstr	s0, [sp, #4]
 8014f48:	eddd 7a01 	vldr	s15, [sp, #4]
 8014f4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014f50:	ee17 3a90 	vmov	r3, s15
 8014f54:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8014f58:	d0db      	beq.n	8014f12 <lrintf+0x16>
 8014f5a:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8014f5e:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8014f62:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8014f66:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8014f6a:	40d8      	lsrs	r0, r3
 8014f6c:	e7df      	b.n	8014f2e <lrintf+0x32>
 8014f6e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014f72:	ee17 0a90 	vmov	r0, s15
 8014f76:	e7cd      	b.n	8014f14 <lrintf+0x18>
 8014f78:	080153b0 	.word	0x080153b0

08014f7c <_init>:
 8014f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f7e:	bf00      	nop
 8014f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014f82:	bc08      	pop	{r3}
 8014f84:	469e      	mov	lr, r3
 8014f86:	4770      	bx	lr

08014f88 <_fini>:
 8014f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f8a:	bf00      	nop
 8014f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014f8e:	bc08      	pop	{r3}
 8014f90:	469e      	mov	lr, r3
 8014f92:	4770      	bx	lr
