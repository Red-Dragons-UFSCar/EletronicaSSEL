
Rx_M4_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001245c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  08012700  08012700  00013700  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012b08  08012b08  000142f4  2**0
                  CONTENTS
  4 .ARM          00000008  08012b08  08012b08  00013b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012b10  08012b10  000142f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012b10  08012b10  00013b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012b14  08012b14  00013b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002f4  24000000  08012b18  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023d4  240002f4  08012e0c  000142f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240026c8  08012e0c  000146c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000142f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024401  00000000  00000000  00014322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004df6  00000000  00000000  00038723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b18  00000000  00000000  0003d520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014cc  00000000  00000000  0003f038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ffdb  00000000  00000000  00040504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027f86  00000000  00000000  000804df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018e260  00000000  00000000  000a8465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002366c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008080  00000000  00000000  00236708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0023e788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002f4 	.word	0x240002f4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080126e4 	.word	0x080126e4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002f8 	.word	0x240002f8
 80002dc:	080126e4 	.word	0x080126e4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3d      	ldr	r3, [pc, #244]	@ (800077c <SystemInit+0xfc>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800068a:	4a3c      	ldr	r2, [pc, #240]	@ (800077c <SystemInit+0xfc>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b39      	ldr	r3, [pc, #228]	@ (800077c <SystemInit+0xfc>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a38      	ldr	r2, [pc, #224]	@ (800077c <SystemInit+0xfc>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b37      	ldr	r3, [pc, #220]	@ (8000780 <SystemInit+0x100>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b34      	ldr	r3, [pc, #208]	@ (8000780 <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a32      	ldr	r2, [pc, #200]	@ (8000780 <SystemInit+0x100>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b31      	ldr	r3, [pc, #196]	@ (8000784 <SystemInit+0x104>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a30      	ldr	r2, [pc, #192]	@ (8000784 <SystemInit+0x104>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000784 <SystemInit+0x104>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000784 <SystemInit+0x104>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492c      	ldr	r1, [pc, #176]	@ (8000784 <SystemInit+0x104>)
 80006d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000788 <SystemInit+0x108>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <SystemInit+0x100>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 0308 	and.w	r3, r3, #8
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d007      	beq.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a24      	ldr	r2, [pc, #144]	@ (8000780 <SystemInit+0x100>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <SystemInit+0x104>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <SystemInit+0x104>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <SystemInit+0x104>)
 800070a:	4a20      	ldr	r2, [pc, #128]	@ (800078c <SystemInit+0x10c>)
 800070c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <SystemInit+0x104>)
 8000710:	4a1f      	ldr	r2, [pc, #124]	@ (8000790 <SystemInit+0x110>)
 8000712:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <SystemInit+0x104>)
 8000716:	4a1f      	ldr	r2, [pc, #124]	@ (8000794 <SystemInit+0x114>)
 8000718:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <SystemInit+0x104>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <SystemInit+0x104>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	@ (8000794 <SystemInit+0x114>)
 8000724:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <SystemInit+0x104>)
 800072e:	4a19      	ldr	r2, [pc, #100]	@ (8000794 <SystemInit+0x114>)
 8000730:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <SystemInit+0x104>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	@ (8000784 <SystemInit+0x104>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <SystemInit+0x104>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <SystemInit+0x118>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800074e:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <SystemInit+0x118>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000754:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <SystemInit+0x11c>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <SystemInit+0x120>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <SystemInit+0x124>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <SystemInit+0x128>)
 800076c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000770:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	52002000 	.word	0x52002000
 8000784:	58024400 	.word	0x58024400
 8000788:	eaf6ed7f 	.word	0xeaf6ed7f
 800078c:	02020200 	.word	0x02020200
 8000790:	01ff0000 	.word	0x01ff0000
 8000794:	01010280 	.word	0x01010280
 8000798:	580000c0 	.word	0x580000c0
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007b2:	4b19      	ldr	r3, [pc, #100]	@ (8000818 <MX_DMA_Init+0x6c>)
 80007b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80007b8:	4a17      	ldr	r2, [pc, #92]	@ (8000818 <MX_DMA_Init+0x6c>)
 80007ba:	f043 0301 	orr.w	r3, r3, #1
 80007be:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80007c2:	4b15      	ldr	r3, [pc, #84]	@ (8000818 <MX_DMA_Init+0x6c>)
 80007c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80007c8:	f003 0301 	and.w	r3, r3, #1
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2100      	movs	r1, #0
 80007d4:	200c      	movs	r0, #12
 80007d6:	f002 f80c 	bl	80027f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80007da:	200c      	movs	r0, #12
 80007dc:	f002 f823 	bl	8002826 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2100      	movs	r1, #0
 80007e4:	200e      	movs	r0, #14
 80007e6:	f002 f804 	bl	80027f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80007ea:	200e      	movs	r0, #14
 80007ec:	f002 f81b 	bl	8002826 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2100      	movs	r1, #0
 80007f4:	200f      	movs	r0, #15
 80007f6:	f001 fffc 	bl	80027f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80007fa:	200f      	movs	r0, #15
 80007fc:	f002 f813 	bl	8002826 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000800:	2200      	movs	r2, #0
 8000802:	2100      	movs	r1, #0
 8000804:	2010      	movs	r0, #16
 8000806:	f001 fff4 	bl	80027f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800080a:	2010      	movs	r0, #16
 800080c:	f002 f80b 	bl	8002826 <HAL_NVIC_EnableIRQ>

}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	58024400 	.word	0x58024400

0800081c <dshot_init>:
static void dshot_enable_dma_request();


/* Functions */
void dshot_init(dshot_type_e dshot_type)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
	dshot_set_timer(dshot_type);
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	4618      	mov	r0, r3
 800082a:	f000 f833 	bl	8000894 <dshot_set_timer>
	dshot_put_tc_callback_function();
 800082e:	f000 f8d3 	bl	80009d8 <dshot_put_tc_callback_function>
	dshot_start_pwm();
 8000832:	f000 f8ef 	bl	8000a14 <dshot_start_pwm>
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <dshot_write>:

void dshot_write(uint16_t* motor_value)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b082      	sub	sp, #8
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer_all(motor_value);
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f000 f962 	bl	8000b10 <dshot_prepare_dmabuffer_all>
	dshot_dma_start();
 800084c:	f000 f98c 	bl	8000b68 <dshot_dma_start>
	dshot_enable_dma_request();
 8000850:	f000 f9c2 	bl	8000bd8 <dshot_enable_dma_request>
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <dshot_choose_type>:


/* Static functions */
static uint32_t dshot_choose_type(dshot_type_e dshot_type)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
	switch (dshot_type)
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d003      	beq.n	8000874 <dshot_choose_type+0x18>
 800086c:	2b02      	cmp	r3, #2
 800086e:	d103      	bne.n	8000878 <dshot_choose_type+0x1c>
	{
		case(DSHOT600):
				return DSHOT600_HZ;
 8000870:	4b05      	ldr	r3, [pc, #20]	@ (8000888 <dshot_choose_type+0x2c>)
 8000872:	e002      	b.n	800087a <dshot_choose_type+0x1e>

		case(DSHOT300):
				return DSHOT300_HZ;
 8000874:	4b05      	ldr	r3, [pc, #20]	@ (800088c <dshot_choose_type+0x30>)
 8000876:	e000      	b.n	800087a <dshot_choose_type+0x1e>

		default:
		case(DSHOT150):
				return DSHOT150_HZ;
 8000878:	4b05      	ldr	r3, [pc, #20]	@ (8000890 <dshot_choose_type+0x34>)
	}
}
 800087a:	4618      	mov	r0, r3
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	00b71b00 	.word	0x00b71b00
 800088c:	005b8d80 	.word	0x005b8d80
 8000890:	002dc6c0 	.word	0x002dc6c0

08000894 <dshot_set_timer>:

static void dshot_set_timer(dshot_type_e dshot_type)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	ed2d 8b02 	vpush	{d8}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
	uint16_t dshot_prescaler;
	uint32_t timer_clock = TIMER_CLOCK; // all timer clock is same as SystemCoreClock in stm32f411
 80008a2:	4b27      	ldr	r3, [pc, #156]	@ (8000940 <dshot_set_timer+0xac>)
 80008a4:	60fb      	str	r3, [r7, #12]

	// Calculate prescaler by dshot type
	dshot_prescaler = lrintf((float) timer_clock / dshot_choose_type(dshot_type) + 0.01f) - 1;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	ee07 3a90 	vmov	s15, r3
 80008ac:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff ffd2 	bl	800085c <dshot_choose_type>
 80008b8:	ee07 0a90 	vmov	s15, r0
 80008bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80008c0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80008c4:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000944 <dshot_set_timer+0xb0>
 80008c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80008cc:	eeb0 0a67 	vmov.f32	s0, s15
 80008d0:	f011 fec8 	bl	8012664 <lrintf>
 80008d4:	4603      	mov	r3, r0
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	3b01      	subs	r3, #1
 80008da:	817b      	strh	r3, [r7, #10]

	// motor1
	__HAL_TIM_SET_PRESCALER(MOTOR_1_TIM, dshot_prescaler);
 80008dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000948 <dshot_set_timer+0xb4>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	897a      	ldrh	r2, [r7, #10]
 80008e2:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_1_TIM, MOTOR_BITLENGTH);
 80008e4:	4b18      	ldr	r3, [pc, #96]	@ (8000948 <dshot_set_timer+0xb4>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2214      	movs	r2, #20
 80008ea:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008ec:	4b16      	ldr	r3, [pc, #88]	@ (8000948 <dshot_set_timer+0xb4>)
 80008ee:	2214      	movs	r2, #20
 80008f0:	60da      	str	r2, [r3, #12]

	// motor2
	__HAL_TIM_SET_PRESCALER(MOTOR_2_TIM, dshot_prescaler);
 80008f2:	4b16      	ldr	r3, [pc, #88]	@ (800094c <dshot_set_timer+0xb8>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	897a      	ldrh	r2, [r7, #10]
 80008f8:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_2_TIM, MOTOR_BITLENGTH);
 80008fa:	4b14      	ldr	r3, [pc, #80]	@ (800094c <dshot_set_timer+0xb8>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2214      	movs	r2, #20
 8000900:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000902:	4b12      	ldr	r3, [pc, #72]	@ (800094c <dshot_set_timer+0xb8>)
 8000904:	2214      	movs	r2, #20
 8000906:	60da      	str	r2, [r3, #12]

	// motor3
	__HAL_TIM_SET_PRESCALER(MOTOR_3_TIM, dshot_prescaler);
 8000908:	4b10      	ldr	r3, [pc, #64]	@ (800094c <dshot_set_timer+0xb8>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	897a      	ldrh	r2, [r7, #10]
 800090e:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_3_TIM, MOTOR_BITLENGTH);
 8000910:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <dshot_set_timer+0xb8>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2214      	movs	r2, #20
 8000916:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000918:	4b0c      	ldr	r3, [pc, #48]	@ (800094c <dshot_set_timer+0xb8>)
 800091a:	2214      	movs	r2, #20
 800091c:	60da      	str	r2, [r3, #12]

	// motor4
	__HAL_TIM_SET_PRESCALER(MOTOR_4_TIM, dshot_prescaler);
 800091e:	4b0a      	ldr	r3, [pc, #40]	@ (8000948 <dshot_set_timer+0xb4>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	897a      	ldrh	r2, [r7, #10]
 8000924:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_4_TIM, MOTOR_BITLENGTH);
 8000926:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <dshot_set_timer+0xb4>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2214      	movs	r2, #20
 800092c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800092e:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <dshot_set_timer+0xb4>)
 8000930:	2214      	movs	r2, #20
 8000932:	60da      	str	r2, [r3, #12]
}
 8000934:	bf00      	nop
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	ecbd 8b02 	vpop	{d8}
 800093e:	bd80      	pop	{r7, pc}
 8000940:	05f5e100 	.word	0x05f5e100
 8000944:	3c23d70a 	.word	0x3c23d70a
 8000948:	24000630 	.word	0x24000630
 800094c:	2400054c 	.word	0x2400054c

08000950 <dshot_dma_tc_callback>:

// __HAL_TIM_DISABLE_DMA is needed to eliminate the delay between different dshot signals
// I don't know why :(
static void dshot_dma_tc_callback(DMA_HandleTypeDef *hdma)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800095c:	60fb      	str	r3, [r7, #12]

	if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	429a      	cmp	r2, r3
 8000966:	d108      	bne.n	800097a <dshot_dma_tc_callback+0x2a>
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	68da      	ldr	r2, [r3, #12]
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000976:	60da      	str	r2, [r3, #12]
	}
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
	}
}
 8000978:	e028      	b.n	80009cc <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC2])
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	429a      	cmp	r2, r3
 8000982:	d108      	bne.n	8000996 <dshot_dma_tc_callback+0x46>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	68da      	ldr	r2, [r3, #12]
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000992:	60da      	str	r2, [r3, #12]
}
 8000994:	e01a      	b.n	80009cc <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC3])
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	429a      	cmp	r2, r3
 800099e:	d108      	bne.n	80009b2 <dshot_dma_tc_callback+0x62>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	68da      	ldr	r2, [r3, #12]
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80009ae:	60da      	str	r2, [r3, #12]
}
 80009b0:	e00c      	b.n	80009cc <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d107      	bne.n	80009cc <dshot_dma_tc_callback+0x7c>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	68da      	ldr	r2, [r3, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80009ca:	60da      	str	r2, [r3, #12]
}
 80009cc:	bf00      	nop
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <dshot_put_tc_callback_function>:

static void dshot_put_tc_callback_function()
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
	// TIM_DMA_ID_CCx depends on timer channel
	MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = dshot_dma_tc_callback;
 80009dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000a08 <dshot_put_tc_callback_function+0x30>)
 80009de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e0:	4a0a      	ldr	r2, [pc, #40]	@ (8000a0c <dshot_put_tc_callback_function+0x34>)
 80009e2:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = dshot_dma_tc_callback;
 80009e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000a10 <dshot_put_tc_callback_function+0x38>)
 80009e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009e8:	4a08      	ldr	r2, [pc, #32]	@ (8000a0c <dshot_put_tc_callback_function+0x34>)
 80009ea:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dshot_dma_tc_callback;
 80009ec:	4b08      	ldr	r3, [pc, #32]	@ (8000a10 <dshot_put_tc_callback_function+0x38>)
 80009ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009f0:	4a06      	ldr	r2, [pc, #24]	@ (8000a0c <dshot_put_tc_callback_function+0x34>)
 80009f2:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = dshot_dma_tc_callback;
 80009f4:	4b04      	ldr	r3, [pc, #16]	@ (8000a08 <dshot_put_tc_callback_function+0x30>)
 80009f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009f8:	4a04      	ldr	r2, [pc, #16]	@ (8000a0c <dshot_put_tc_callback_function+0x34>)
 80009fa:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	24000630 	.word	0x24000630
 8000a0c:	08000951 	.word	0x08000951
 8000a10:	2400054c 	.word	0x2400054c

08000a14 <dshot_start_pwm>:

static void dshot_start_pwm()
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	// Start the timer channel now.
    // Enabling/disabling DMA request can restart a new cycle without PWM start/stop.
  	HAL_TIM_PWM_Start(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL);
 8000a18:	210c      	movs	r1, #12
 8000a1a:	4808      	ldr	r0, [pc, #32]	@ (8000a3c <dshot_start_pwm+0x28>)
 8000a1c:	f008 fcce 	bl	80093bc <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL);
 8000a20:	2108      	movs	r1, #8
 8000a22:	4807      	ldr	r0, [pc, #28]	@ (8000a40 <dshot_start_pwm+0x2c>)
 8000a24:	f008 fcca 	bl	80093bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL);
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4805      	ldr	r0, [pc, #20]	@ (8000a40 <dshot_start_pwm+0x2c>)
 8000a2c:	f008 fcc6 	bl	80093bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL);
 8000a30:	2104      	movs	r1, #4
 8000a32:	4802      	ldr	r0, [pc, #8]	@ (8000a3c <dshot_start_pwm+0x28>)
 8000a34:	f008 fcc2 	bl	80093bc <HAL_TIM_PWM_Start>
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	24000630 	.word	0x24000630
 8000a40:	2400054c 	.word	0x2400054c

08000a44 <dshot_prepare_packet>:

static uint16_t dshot_prepare_packet(uint16_t value)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b087      	sub	sp, #28
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	80fb      	strh	r3, [r7, #6]
	uint16_t packet;
	bool dshot_telemetry = false;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	72fb      	strb	r3, [r7, #11]

	packet = (value << 1) | (dshot_telemetry ? 1 : 0);
 8000a52:	88fb      	ldrh	r3, [r7, #6]
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	b21a      	sxth	r2, r3
 8000a58:	7afb      	ldrb	r3, [r7, #11]
 8000a5a:	b21b      	sxth	r3, r3
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	b21b      	sxth	r3, r3
 8000a60:	813b      	strh	r3, [r7, #8]

	// compute checksum
	unsigned csum = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
	unsigned csum_data = packet;
 8000a66:	893b      	ldrh	r3, [r7, #8]
 8000a68:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < 3; i++)
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	e009      	b.n	8000a84 <dshot_prepare_packet+0x40>
	{
        csum ^=  csum_data; // xor data by nibbles
 8000a70:	697a      	ldr	r2, [r7, #20]
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	4053      	eors	r3, r2
 8000a76:	617b      	str	r3, [r7, #20]
        csum_data >>= 4;
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	091b      	lsrs	r3, r3, #4
 8000a7c:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 3; i++)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	3301      	adds	r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	2b02      	cmp	r3, #2
 8000a88:	ddf2      	ble.n	8000a70 <dshot_prepare_packet+0x2c>
	}

	csum &= 0xf;
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	f003 030f 	and.w	r3, r3, #15
 8000a90:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 8000a92:	893b      	ldrh	r3, [r7, #8]
 8000a94:	011b      	lsls	r3, r3, #4
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	813b      	strh	r3, [r7, #8]

	return packet;
 8000aa0:	893b      	ldrh	r3, [r7, #8]
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	371c      	adds	r7, #28
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <dshot_prepare_dmabuffer>:

// Convert 16 bits packet to 16 pwm signal
static void dshot_prepare_dmabuffer(uint32_t* motor_dmabuffer, uint16_t value)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b084      	sub	sp, #16
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	807b      	strh	r3, [r7, #2]
	uint16_t packet;
	packet = dshot_prepare_packet(value);
 8000aba:	887b      	ldrh	r3, [r7, #2]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff ffc1 	bl	8000a44 <dshot_prepare_packet>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	81fb      	strh	r3, [r7, #14]

	for(int i = 0; i < 16; i++)
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	e011      	b.n	8000af0 <dshot_prepare_dmabuffer+0x42>
	{
		motor_dmabuffer[i] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;
 8000acc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	da01      	bge.n	8000ad8 <dshot_prepare_dmabuffer+0x2a>
 8000ad4:	220e      	movs	r2, #14
 8000ad6:	e000      	b.n	8000ada <dshot_prepare_dmabuffer+0x2c>
 8000ad8:	2207      	movs	r2, #7
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	6879      	ldr	r1, [r7, #4]
 8000ae0:	440b      	add	r3, r1
 8000ae2:	601a      	str	r2, [r3, #0]
		packet <<= 1;
 8000ae4:	89fb      	ldrh	r3, [r7, #14]
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < 16; i++)
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	3301      	adds	r3, #1
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	2b0f      	cmp	r3, #15
 8000af4:	ddea      	ble.n	8000acc <dshot_prepare_dmabuffer+0x1e>
	}

	motor_dmabuffer[16] = 0;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	3340      	adds	r3, #64	@ 0x40
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
	motor_dmabuffer[17] = 0;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	3344      	adds	r3, #68	@ 0x44
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
}
 8000b06:	bf00      	nop
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <dshot_prepare_dmabuffer_all>:

static void dshot_prepare_dmabuffer_all(uint16_t* motor_value)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer(motor1_dmabuffer, motor_value[0]);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	881b      	ldrh	r3, [r3, #0]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	480e      	ldr	r0, [pc, #56]	@ (8000b58 <dshot_prepare_dmabuffer_all+0x48>)
 8000b20:	f7ff ffc5 	bl	8000aae <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor2_dmabuffer, motor_value[1]);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3302      	adds	r3, #2
 8000b28:	881b      	ldrh	r3, [r3, #0]
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	480b      	ldr	r0, [pc, #44]	@ (8000b5c <dshot_prepare_dmabuffer_all+0x4c>)
 8000b2e:	f7ff ffbe 	bl	8000aae <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor3_dmabuffer, motor_value[2]);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	3304      	adds	r3, #4
 8000b36:	881b      	ldrh	r3, [r3, #0]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4809      	ldr	r0, [pc, #36]	@ (8000b60 <dshot_prepare_dmabuffer_all+0x50>)
 8000b3c:	f7ff ffb7 	bl	8000aae <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor4_dmabuffer, motor_value[3]);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3306      	adds	r3, #6
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	4619      	mov	r1, r3
 8000b48:	4806      	ldr	r0, [pc, #24]	@ (8000b64 <dshot_prepare_dmabuffer_all+0x54>)
 8000b4a:	f7ff ffb0 	bl	8000aae <dshot_prepare_dmabuffer>
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	24000310 	.word	0x24000310
 8000b5c:	24000358 	.word	0x24000358
 8000b60:	240003a0 	.word	0x240003a0
 8000b64:	240003e8 	.word	0x240003e8

08000b68 <dshot_dma_start>:

static void dshot_dma_start()
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
	HAL_DMA_Start_IT(MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4], (uint32_t)motor1_dmabuffer, (uint32_t)&MOTOR_1_TIM->Instance->CCR4, DSHOT_DMA_BUFFER_SIZE);
 8000b6c:	4b14      	ldr	r3, [pc, #80]	@ (8000bc0 <dshot_dma_start+0x58>)
 8000b6e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000b70:	4914      	ldr	r1, [pc, #80]	@ (8000bc4 <dshot_dma_start+0x5c>)
 8000b72:	4b13      	ldr	r3, [pc, #76]	@ (8000bc0 <dshot_dma_start+0x58>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	3340      	adds	r3, #64	@ 0x40
 8000b78:	461a      	mov	r2, r3
 8000b7a:	2312      	movs	r3, #18
 8000b7c:	f002 f9de 	bl	8002f3c <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3], (uint32_t)motor2_dmabuffer, (uint32_t)&MOTOR_2_TIM->Instance->CCR3, DSHOT_DMA_BUFFER_SIZE);
 8000b80:	4b11      	ldr	r3, [pc, #68]	@ (8000bc8 <dshot_dma_start+0x60>)
 8000b82:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8000b84:	4911      	ldr	r1, [pc, #68]	@ (8000bcc <dshot_dma_start+0x64>)
 8000b86:	4b10      	ldr	r3, [pc, #64]	@ (8000bc8 <dshot_dma_start+0x60>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	333c      	adds	r3, #60	@ 0x3c
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	2312      	movs	r3, #18
 8000b90:	f002 f9d4 	bl	8002f3c <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1], (uint32_t)motor3_dmabuffer, (uint32_t)&MOTOR_3_TIM->Instance->CCR1, DSHOT_DMA_BUFFER_SIZE);
 8000b94:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc8 <dshot_dma_start+0x60>)
 8000b96:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8000b98:	490d      	ldr	r1, [pc, #52]	@ (8000bd0 <dshot_dma_start+0x68>)
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc8 <dshot_dma_start+0x60>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	3334      	adds	r3, #52	@ 0x34
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	2312      	movs	r3, #18
 8000ba4:	f002 f9ca 	bl	8002f3c <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2], (uint32_t)motor4_dmabuffer, (uint32_t)&MOTOR_4_TIM->Instance->CCR2, DSHOT_DMA_BUFFER_SIZE);
 8000ba8:	4b05      	ldr	r3, [pc, #20]	@ (8000bc0 <dshot_dma_start+0x58>)
 8000baa:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000bac:	4909      	ldr	r1, [pc, #36]	@ (8000bd4 <dshot_dma_start+0x6c>)
 8000bae:	4b04      	ldr	r3, [pc, #16]	@ (8000bc0 <dshot_dma_start+0x58>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	3338      	adds	r3, #56	@ 0x38
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	2312      	movs	r3, #18
 8000bb8:	f002 f9c0 	bl	8002f3c <HAL_DMA_Start_IT>
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	24000630 	.word	0x24000630
 8000bc4:	24000310 	.word	0x24000310
 8000bc8:	2400054c 	.word	0x2400054c
 8000bcc:	24000358 	.word	0x24000358
 8000bd0:	240003a0 	.word	0x240003a0
 8000bd4:	240003e8 	.word	0x240003e8

08000bd8 <dshot_enable_dma_request>:

static void dshot_enable_dma_request()
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE_DMA(MOTOR_1_TIM, TIM_DMA_CC4);
 8000bdc:	4b12      	ldr	r3, [pc, #72]	@ (8000c28 <dshot_enable_dma_request+0x50>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	68da      	ldr	r2, [r3, #12]
 8000be2:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <dshot_enable_dma_request+0x50>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000bea:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_2_TIM, TIM_DMA_CC3);
 8000bec:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <dshot_enable_dma_request+0x54>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	68da      	ldr	r2, [r3, #12]
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c2c <dshot_enable_dma_request+0x54>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000bfa:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_3_TIM, TIM_DMA_CC1);
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000c2c <dshot_enable_dma_request+0x54>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	68da      	ldr	r2, [r3, #12]
 8000c02:	4b0a      	ldr	r3, [pc, #40]	@ (8000c2c <dshot_enable_dma_request+0x54>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000c0a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_4_TIM, TIM_DMA_CC2);
 8000c0c:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <dshot_enable_dma_request+0x50>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	68da      	ldr	r2, [r3, #12]
 8000c12:	4b05      	ldr	r3, [pc, #20]	@ (8000c28 <dshot_enable_dma_request+0x50>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000c1a:	60da      	str	r2, [r3, #12]
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	24000630 	.word	0x24000630
 8000c2c:	2400054c 	.word	0x2400054c

08000c30 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b087      	sub	sp, #28
 8000c34:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	4b28      	ldr	r3, [pc, #160]	@ (8000cd8 <MX_GPIO_Init+0xa8>)
 8000c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c3c:	4a26      	ldr	r2, [pc, #152]	@ (8000cd8 <MX_GPIO_Init+0xa8>)
 8000c3e:	f043 0301 	orr.w	r3, r3, #1
 8000c42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c46:	4b24      	ldr	r3, [pc, #144]	@ (8000cd8 <MX_GPIO_Init+0xa8>)
 8000c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	617b      	str	r3, [r7, #20]
 8000c52:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c54:	4b20      	ldr	r3, [pc, #128]	@ (8000cd8 <MX_GPIO_Init+0xa8>)
 8000c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c5a:	4a1f      	ldr	r2, [pc, #124]	@ (8000cd8 <MX_GPIO_Init+0xa8>)
 8000c5c:	f043 0310 	orr.w	r3, r3, #16
 8000c60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c64:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd8 <MX_GPIO_Init+0xa8>)
 8000c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c6a:	f003 0310 	and.w	r3, r3, #16
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c72:	4b19      	ldr	r3, [pc, #100]	@ (8000cd8 <MX_GPIO_Init+0xa8>)
 8000c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c78:	4a17      	ldr	r2, [pc, #92]	@ (8000cd8 <MX_GPIO_Init+0xa8>)
 8000c7a:	f043 0308 	orr.w	r3, r3, #8
 8000c7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c82:	4b15      	ldr	r3, [pc, #84]	@ (8000cd8 <MX_GPIO_Init+0xa8>)
 8000c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c88:	f003 0308 	and.w	r3, r3, #8
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c90:	4b11      	ldr	r3, [pc, #68]	@ (8000cd8 <MX_GPIO_Init+0xa8>)
 8000c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c96:	4a10      	ldr	r2, [pc, #64]	@ (8000cd8 <MX_GPIO_Init+0xa8>)
 8000c98:	f043 0304 	orr.w	r3, r3, #4
 8000c9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd8 <MX_GPIO_Init+0xa8>)
 8000ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca6:	f003 0304 	and.w	r3, r3, #4
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cae:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd8 <MX_GPIO_Init+0xa8>)
 8000cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb4:	4a08      	ldr	r2, [pc, #32]	@ (8000cd8 <MX_GPIO_Init+0xa8>)
 8000cb6:	f043 0302 	orr.w	r3, r3, #2
 8000cba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cbe:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <MX_GPIO_Init+0xa8>)
 8000cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc4:	f003 0302 	and.w	r3, r3, #2
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	687b      	ldr	r3, [r7, #4]

}
 8000ccc:	bf00      	nop
 8000cce:	371c      	adds	r7, #28
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	58024400 	.word	0x58024400

08000cdc <HAL_TIM_IC_CaptureCallback>:
		}
		xfr_ptr->sts_4to7 = 0; // M4 to M7 buffer is empty
	}
	return buffer; // return the buffer (pointer)
}
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	contador = __HAL_TIM_GET_COUNTER(&htim4);
 8000ce4:	4b05      	ldr	r3, [pc, #20]	@ (8000cfc <HAL_TIM_IC_CaptureCallback+0x20>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cea:	4a05      	ldr	r2, [pc, #20]	@ (8000d00 <HAL_TIM_IC_CaptureCallback+0x24>)
 8000cec:	6013      	str	r3, [r2, #0]
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	240005e4 	.word	0x240005e4
 8000d00:	24000440 	.word	0x24000440

08000d04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b092      	sub	sp, #72	@ 0x48
 8000d08:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000d0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d0e:	647b      	str	r3, [r7, #68]	@ 0x44
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000d10:	bf00      	nop
 8000d12:	4b7a      	ldr	r3, [pc, #488]	@ (8000efc <main+0x1f8>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d004      	beq.n	8000d28 <main+0x24>
 8000d1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000d20:	1e5a      	subs	r2, r3, #1
 8000d22:	647a      	str	r2, [r7, #68]	@ 0x44
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	dcf4      	bgt.n	8000d12 <main+0xe>
  if ( timeout < 0 )
 8000d28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	da01      	bge.n	8000d32 <main+0x2e>
  {
  Error_Handler();
 8000d2e:	f000 f97f 	bl	8001030 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d32:	f001 fbc1 	bl	80024b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d36:	f000 f8fb 	bl	8000f30 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000d3a:	4b70      	ldr	r3, [pc, #448]	@ (8000efc <main+0x1f8>)
 8000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d40:	4a6e      	ldr	r2, [pc, #440]	@ (8000efc <main+0x1f8>)
 8000d42:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d4a:	4b6c      	ldr	r3, [pc, #432]	@ (8000efc <main+0x1f8>)
 8000d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f004 f8bf 	bl	8004edc <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000d5e:	2100      	movs	r1, #0
 8000d60:	2000      	movs	r0, #0
 8000d62:	f004 f8d5 	bl	8004f10 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000d66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d6a:	647b      	str	r3, [r7, #68]	@ 0x44
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000d6c:	bf00      	nop
 8000d6e:	4b63      	ldr	r3, [pc, #396]	@ (8000efc <main+0x1f8>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d104      	bne.n	8000d84 <main+0x80>
 8000d7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000d7c:	1e5a      	subs	r2, r3, #1
 8000d7e:	647a      	str	r2, [r7, #68]	@ 0x44
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	dcf4      	bgt.n	8000d6e <main+0x6a>
if ( timeout < 0 )
 8000d84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	da01      	bge.n	8000d8e <main+0x8a>
{
Error_Handler();
 8000d8a:	f000 f951 	bl	8001030 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d8e:	f7ff ff4f 	bl	8000c30 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d92:	f7ff fd0b 	bl	80007ac <MX_DMA_Init>
  MX_TIM2_Init();
 8000d96:	f000 fcdf 	bl	8001758 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000d9a:	f000 fded 	bl	8001978 <MX_TIM5_Init>
  MX_TIM3_Init();
 8000d9e:	f000 fd3f 	bl	8001820 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000da2:	f000 fd93 	bl	80018cc <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8000da6:	f00e f953 	bl	800f050 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000daa:	f000 fc7b 	bl	80016a4 <MX_TIM1_Init>
  MX_TIM8_Init();
 8000dae:	f000 fe47 	bl	8001a40 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000db2:	f000 fe9f 	bl	8001af4 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  int count = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	643b      	str	r3, [r7, #64]	@ 0x40
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000dba:	213c      	movs	r1, #60	@ 0x3c
 8000dbc:	4850      	ldr	r0, [pc, #320]	@ (8000f00 <main+0x1fc>)
 8000dbe:	f008 fcb1 	bl	8009724 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8000dc2:	213c      	movs	r1, #60	@ 0x3c
 8000dc4:	484f      	ldr	r0, [pc, #316]	@ (8000f04 <main+0x200>)
 8000dc6:	f008 fcad 	bl	8009724 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 8000dca:	213c      	movs	r1, #60	@ 0x3c
 8000dcc:	484e      	ldr	r0, [pc, #312]	@ (8000f08 <main+0x204>)
 8000dce:	f008 fca9 	bl	8009724 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8000dd2:	213c      	movs	r1, #60	@ 0x3c
 8000dd4:	484d      	ldr	r0, [pc, #308]	@ (8000f0c <main+0x208>)
 8000dd6:	f008 fca5 	bl	8009724 <HAL_TIM_Encoder_Start_IT>
	uint8_t * xfr_data; // pointer to transfer data


	//initialize inter-core status pointers
	xfr_ptr->sts_4to7 = 0;
 8000dda:	4b4d      	ldr	r3, [pc, #308]	@ (8000f10 <main+0x20c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	701a      	strb	r2, [r3, #0]
	xfr_ptr->sts_7to4 = 0;
 8000de0:	4b4b      	ldr	r3, [pc, #300]	@ (8000f10 <main+0x20c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	705a      	strb	r2, [r3, #1]
	extern uint16_t D[4];

	dshot_init(DSHOT300);
 8000de6:	2001      	movs	r0, #1
 8000de8:	f7ff fd18 	bl	800081c <dshot_init>
	  if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8000dec:	4847      	ldr	r0, [pc, #284]	@ (8000f0c <main+0x208>)
 8000dee:	f008 fa15 	bl	800921c <HAL_TIM_Base_Start_IT>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <main+0xf8>
	    {
	      /* Starting Error */
	      Error_Handler();
 8000df8:	f000 f91a 	bl	8001030 <Error_Handler>
	    }
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f001 f977 	bl	80020f0 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000e02:	2001      	movs	r0, #1
 8000e04:	f001 f974 	bl	80020f0 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000e08:	2002      	movs	r0, #2
 8000e0a:	f001 f971 	bl	80020f0 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000e0e:	2101      	movs	r1, #1
 8000e10:	2000      	movs	r0, #0
 8000e12:	f001 f9e3 	bl	80021dc <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000e16:	4b3f      	ldr	r3, [pc, #252]	@ (8000f14 <main+0x210>)
 8000e18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e1c:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000e1e:	4b3d      	ldr	r3, [pc, #244]	@ (8000f14 <main+0x210>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000e24:	4b3b      	ldr	r3, [pc, #236]	@ (8000f14 <main+0x210>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000e2a:	4b3a      	ldr	r3, [pc, #232]	@ (8000f14 <main+0x210>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000e30:	4b38      	ldr	r3, [pc, #224]	@ (8000f14 <main+0x210>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000e36:	4937      	ldr	r1, [pc, #220]	@ (8000f14 <main+0x210>)
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f001 fa5f 	bl	80022fc <BSP_COM_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <main+0x144>
  {
    Error_Handler();
 8000e44:	f000 f8f4 	bl	8001030 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char message[40]={'\0'};
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61bb      	str	r3, [r7, #24]
 8000e4c:	f107 031c 	add.w	r3, r7, #28
 8000e50:	2224      	movs	r2, #36	@ 0x24
 8000e52:	2100      	movs	r1, #0
 8000e54:	4618      	mov	r0, r3
 8000e56:	f00f fba8 	bl	80105aa <memset>
  uint16_t zero[4] = {0,0,0,0};
 8000e5a:	f107 0310 	add.w	r3, r7, #16
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
  uint16_t bi[4] = {2045,0,0,0};
 8000e64:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 8000e68:	813b      	strh	r3, [r7, #8]
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	817b      	strh	r3, [r7, #10]
 8000e6e:	2300      	movs	r3, #0
 8000e70:	81bb      	strh	r3, [r7, #12]
 8000e72:	2300      	movs	r3, #0
 8000e74:	81fb      	strh	r3, [r7, #14]
	  	  for(int n=0;n<4;n++){
	  		  motores[n] = (Mensagem[n]*2048)/255;

	  	  }
	  	  */
	  	  motores[0]=0;
 8000e76:	4b28      	ldr	r3, [pc, #160]	@ (8000f18 <main+0x214>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	801a      	strh	r2, [r3, #0]
	  	  if(count<5000){
 8000e7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e7e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000e82:	4293      	cmp	r3, r2
 8000e84:	dc09      	bgt.n	8000e9a <main+0x196>
	  		  ref[0] = 0;
 8000e86:	4b25      	ldr	r3, [pc, #148]	@ (8000f1c <main+0x218>)
 8000e88:	f04f 0200 	mov.w	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
	  		dshot_write(zero);
 8000e8e:	f107 0310 	add.w	r3, r7, #16
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff fcd3 	bl	800083e <dshot_write>
 8000e98:	e016      	b.n	8000ec8 <main+0x1c4>
	  	  } else if(count>=5000){
 8000e9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e9c:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	dd06      	ble.n	8000eb2 <main+0x1ae>
	  		  ref[0] = -6;
 8000ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f1c <main+0x218>)
 8000ea6:	4a1e      	ldr	r2, [pc, #120]	@ (8000f20 <main+0x21c>)
 8000ea8:	601a      	str	r2, [r3, #0]
	  		  dshot_write(D);
 8000eaa:	481e      	ldr	r0, [pc, #120]	@ (8000f24 <main+0x220>)
 8000eac:	f7ff fcc7 	bl	800083e <dshot_write>
 8000eb0:	e00a      	b.n	8000ec8 <main+0x1c4>

	  	  } else if(count >= 15000){
 8000eb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000eb4:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	dd05      	ble.n	8000ec8 <main+0x1c4>
	  		  ref[0] = -6;
 8000ebc:	4b17      	ldr	r3, [pc, #92]	@ (8000f1c <main+0x218>)
 8000ebe:	4a18      	ldr	r2, [pc, #96]	@ (8000f20 <main+0x21c>)
 8000ec0:	601a      	str	r2, [r3, #0]
	  		  dshot_write(D);
 8000ec2:	4818      	ldr	r0, [pc, #96]	@ (8000f24 <main+0x220>)
 8000ec4:	f7ff fcbb 	bl	800083e <dshot_write>
	  	  }

	  	  count++;
 8000ec8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000eca:	3301      	adds	r3, #1
 8000ecc:	643b      	str	r3, [r7, #64]	@ 0x40

	  	  sprintf(message, "%f \n \r", velocidade);
 8000ece:	4b16      	ldr	r3, [pc, #88]	@ (8000f28 <main+0x224>)
 8000ed0:	edd3 7a00 	vldr	s15, [r3]
 8000ed4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ed8:	f107 0018 	add.w	r0, r7, #24
 8000edc:	ec53 2b17 	vmov	r2, r3, d7
 8000ee0:	4912      	ldr	r1, [pc, #72]	@ (8000f2c <main+0x228>)
 8000ee2:	f00f faff 	bl	80104e4 <siprintf>
	  	  CDC_Transmit_FS(message,sizeof(message));
 8000ee6:	f107 0318 	add.w	r3, r7, #24
 8000eea:	2128      	movs	r1, #40	@ 0x28
 8000eec:	4618      	mov	r0, r3
 8000eee:	f00e f96f 	bl	800f1d0 <CDC_Transmit_FS>
	  	  HAL_Delay(1);
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f001 fb72 	bl	80025dc <HAL_Delay>
  {
 8000ef8:	e7bd      	b.n	8000e76 <main+0x172>
 8000efa:	bf00      	nop
 8000efc:	58024400 	.word	0x58024400
 8000f00:	240005e4 	.word	0x240005e4
 8000f04:	24000500 	.word	0x24000500
 8000f08:	2400067c 	.word	0x2400067c
 8000f0c:	24000598 	.word	0x24000598
 8000f10:	38001000 	.word	0x38001000
 8000f14:	24000430 	.word	0x24000430
 8000f18:	24000458 	.word	0x24000458
 8000f1c:	24000448 	.word	0x24000448
 8000f20:	c0c00000 	.word	0xc0c00000
 8000f24:	240004c4 	.word	0x240004c4
 8000f28:	24000444 	.word	0x24000444
 8000f2c:	08012700 	.word	0x08012700

08000f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b09c      	sub	sp, #112	@ 0x70
 8000f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f3a:	224c      	movs	r2, #76	@ 0x4c
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f00f fb33 	bl	80105aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	2220      	movs	r2, #32
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f00f fb2d 	bl	80105aa <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000f50:	2004      	movs	r0, #4
 8000f52:	f005 fa8f 	bl	8006474 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f56:	2300      	movs	r3, #0
 8000f58:	603b      	str	r3, [r7, #0]
 8000f5a:	4b33      	ldr	r3, [pc, #204]	@ (8001028 <SystemClock_Config+0xf8>)
 8000f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f5e:	4a32      	ldr	r2, [pc, #200]	@ (8001028 <SystemClock_Config+0xf8>)
 8000f60:	f023 0301 	bic.w	r3, r3, #1
 8000f64:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000f66:	4b30      	ldr	r3, [pc, #192]	@ (8001028 <SystemClock_Config+0xf8>)
 8000f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	603b      	str	r3, [r7, #0]
 8000f70:	4b2e      	ldr	r3, [pc, #184]	@ (800102c <SystemClock_Config+0xfc>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f78:	4a2c      	ldr	r2, [pc, #176]	@ (800102c <SystemClock_Config+0xfc>)
 8000f7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f7e:	6193      	str	r3, [r2, #24]
 8000f80:	4b2a      	ldr	r3, [pc, #168]	@ (800102c <SystemClock_Config+0xfc>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f88:	603b      	str	r3, [r7, #0]
 8000f8a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f8c:	bf00      	nop
 8000f8e:	4b27      	ldr	r3, [pc, #156]	@ (800102c <SystemClock_Config+0xfc>)
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f9a:	d1f8      	bne.n	8000f8e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000f9c:	2322      	movs	r3, #34	@ 0x22
 8000f9e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fa4:	2340      	movs	r3, #64	@ 0x40
 8000fa6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fac:	2302      	movs	r3, #2
 8000fae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fb4:	2304      	movs	r3, #4
 8000fb6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8000fb8:	2319      	movs	r3, #25
 8000fba:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000fc0:	2305      	movs	r3, #5
 8000fc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000fc8:	230c      	movs	r3, #12
 8000fca:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f005 fab5 	bl	8006548 <HAL_RCC_OscConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000fe4:	f000 f824 	bl	8001030 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe8:	233f      	movs	r3, #63	@ 0x3f
 8000fea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fec:	2303      	movs	r3, #3
 8000fee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ff8:	2340      	movs	r3, #64	@ 0x40
 8000ffa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ffc:	2340      	movs	r3, #64	@ 0x40
 8000ffe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001000:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001004:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001006:	2340      	movs	r3, #64	@ 0x40
 8001008:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	2104      	movs	r1, #4
 800100e:	4618      	mov	r0, r3
 8001010:	f005 fef4 	bl	8006dfc <HAL_RCC_ClockConfig>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <SystemClock_Config+0xee>
  {
    Error_Handler();
 800101a:	f000 f809 	bl	8001030 <Error_Handler>
  }
}
 800101e:	bf00      	nop
 8001020:	3770      	adds	r7, #112	@ 0x70
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	58000400 	.word	0x58000400
 800102c:	58024800 	.word	0x58024800

08001030 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001034:	b672      	cpsid	i
}
 8001036:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001038:	bf00      	nop
 800103a:	e7fd      	b.n	8001038 <Error_Handler+0x8>

0800103c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001042:	4b0a      	ldr	r3, [pc, #40]	@ (800106c <HAL_MspInit+0x30>)
 8001044:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001048:	4a08      	ldr	r2, [pc, #32]	@ (800106c <HAL_MspInit+0x30>)
 800104a:	f043 0302 	orr.w	r3, r3, #2
 800104e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001052:	4b06      	ldr	r3, [pc, #24]	@ (800106c <HAL_MspInit+0x30>)
 8001054:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	58024400 	.word	0x58024400

08001070 <map>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//Função de mapeamento
uint16_t map(float x, int in_min, int in_max, int out_min, int out_max) {
 8001070:	b480      	push	{r7}
 8001072:	b087      	sub	sp, #28
 8001074:	af00      	add	r7, sp, #0
 8001076:	ed87 0a05 	vstr	s0, [r7, #20]
 800107a:	6138      	str	r0, [r7, #16]
 800107c:	60f9      	str	r1, [r7, #12]
 800107e:	60ba      	str	r2, [r7, #8]
 8001080:	607b      	str	r3, [r7, #4]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	ee07 3a90 	vmov	s15, r3
 8001088:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800108c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001090:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	ee07 3a90 	vmov	s15, r3
 800109e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010a2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	ee07 3a90 	vmov	s15, r3
 80010b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	ee07 3a90 	vmov	s15, r3
 80010be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010ca:	ee17 3a90 	vmov	r3, s15
 80010ce:	b29b      	uxth	r3, r3
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	371c      	adds	r7, #28
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <Controle>:

void Controle(){
 80010dc:	b590      	push	{r4, r7, lr}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0

	for(uint8_t n=0;n<4;n++){
 80010e2:	2300      	movs	r3, #0
 80010e4:	71fb      	strb	r3, [r7, #7]
 80010e6:	e0d8      	b.n	800129a <Controle+0x1be>
		//Calculo de erro
		error[n] =ref[n] -  speed[n];
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	4a9b      	ldr	r2, [pc, #620]	@ (8001358 <Controle+0x27c>)
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	ed93 7a00 	vldr	s14, [r3]
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	4a99      	ldr	r2, [pc, #612]	@ (800135c <Controle+0x280>)
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	4413      	add	r3, r2
 80010fc:	edd3 7a00 	vldr	s15, [r3]
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001106:	4a96      	ldr	r2, [pc, #600]	@ (8001360 <Controle+0x284>)
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	edc3 7a00 	vstr	s15, [r3]
		//Variação da ação de controle para esta iteração
		deltaU[n] = Kc*(error[n]- preverror[n]) + error[n]*Ki -Kd*(speed[n]-2*prevspeed[n] + prevspeed2[n]);
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	4a93      	ldr	r2, [pc, #588]	@ (8001360 <Controle+0x284>)
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	4413      	add	r3, r2
 8001118:	ed93 7a00 	vldr	s14, [r3]
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	4a91      	ldr	r2, [pc, #580]	@ (8001364 <Controle+0x288>)
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	edd3 7a00 	vldr	s15, [r3]
 8001128:	ee37 7a67 	vsub.f32	s14, s14, s15
 800112c:	4b8e      	ldr	r3, [pc, #568]	@ (8001368 <Controle+0x28c>)
 800112e:	edd3 7a00 	vldr	s15, [r3]
 8001132:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	4a89      	ldr	r2, [pc, #548]	@ (8001360 <Controle+0x284>)
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4413      	add	r3, r2
 800113e:	edd3 6a00 	vldr	s13, [r3]
 8001142:	4b8a      	ldr	r3, [pc, #552]	@ (800136c <Controle+0x290>)
 8001144:	edd3 7a00 	vldr	s15, [r3]
 8001148:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800114c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	4a82      	ldr	r2, [pc, #520]	@ (800135c <Controle+0x280>)
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	4413      	add	r3, r2
 8001158:	edd3 6a00 	vldr	s13, [r3]
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	4a84      	ldr	r2, [pc, #528]	@ (8001370 <Controle+0x294>)
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	4413      	add	r3, r2
 8001164:	edd3 7a00 	vldr	s15, [r3]
 8001168:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800116c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	4a80      	ldr	r2, [pc, #512]	@ (8001374 <Controle+0x298>)
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	edd3 7a00 	vldr	s15, [r3]
 800117c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001180:	4b7d      	ldr	r3, [pc, #500]	@ (8001378 <Controle+0x29c>)
 8001182:	edd3 7a00 	vldr	s15, [r3]
 8001186:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001190:	4a7a      	ldr	r2, [pc, #488]	@ (800137c <Controle+0x2a0>)
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	4413      	add	r3, r2
 8001196:	edc3 7a00 	vstr	s15, [r3]
		//Ação de controle
		uM[n] = uM[n] + deltaU[n];
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	4a78      	ldr	r2, [pc, #480]	@ (8001380 <Controle+0x2a4>)
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	ed93 7a00 	vldr	s14, [r3]
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	4a74      	ldr	r2, [pc, #464]	@ (800137c <Controle+0x2a0>)
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	edd3 7a00 	vldr	s15, [r3]
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011b8:	4a71      	ldr	r2, [pc, #452]	@ (8001380 <Controle+0x2a4>)
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	edc3 7a00 	vstr	s15, [r3]
		//Saturado para evitar que a ação de controle ultrapasse o limite
		if( uM[n] < -1023){
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	4a6e      	ldr	r2, [pc, #440]	@ (8001380 <Controle+0x2a4>)
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	4413      	add	r3, r2
 80011ca:	edd3 7a00 	vldr	s15, [r3]
 80011ce:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8001384 <Controle+0x2a8>
 80011d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011da:	d505      	bpl.n	80011e8 <Controle+0x10c>
			uM[n]= -1023;
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	4a68      	ldr	r2, [pc, #416]	@ (8001380 <Controle+0x2a4>)
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	4a68      	ldr	r2, [pc, #416]	@ (8001388 <Controle+0x2ac>)
 80011e6:	601a      	str	r2, [r3, #0]
		}
		if(uM[n]>1023){
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	4a65      	ldr	r2, [pc, #404]	@ (8001380 <Controle+0x2a4>)
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	edd3 7a00 	vldr	s15, [r3]
 80011f4:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 800138c <Controle+0x2b0>
 80011f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001200:	dd05      	ble.n	800120e <Controle+0x132>
			uM[n]= 1023;
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	4a5e      	ldr	r2, [pc, #376]	@ (8001380 <Controle+0x2a4>)
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4413      	add	r3, r2
 800120a:	4a61      	ldr	r2, [pc, #388]	@ (8001390 <Controle+0x2b4>)
 800120c:	601a      	str	r2, [r3, #0]
		}
		//Mapeamento da variavel de ação de controle no alcançe dado
		if(uM[n]>=0){
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	4a5b      	ldr	r2, [pc, #364]	@ (8001380 <Controle+0x2a4>)
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	edd3 7a00 	vldr	s15, [r3]
 800121a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800121e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001222:	db16      	blt.n	8001252 <Controle+0x176>
			D[n] = map(uM[n],0,1023,200,1023);
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	4a56      	ldr	r2, [pc, #344]	@ (8001380 <Controle+0x2a4>)
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	edd3 7a00 	vldr	s15, [r3]
 8001230:	79fc      	ldrb	r4, [r7, #7]
 8001232:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8001236:	22c8      	movs	r2, #200	@ 0xc8
 8001238:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800123c:	2000      	movs	r0, #0
 800123e:	eeb0 0a67 	vmov.f32	s0, s15
 8001242:	f7ff ff15 	bl	8001070 <map>
 8001246:	4603      	mov	r3, r0
 8001248:	461a      	mov	r2, r3
 800124a:	4b52      	ldr	r3, [pc, #328]	@ (8001394 <Controle+0x2b8>)
 800124c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8001250:	e020      	b.n	8001294 <Controle+0x1b8>
		}else if(uM[n]<0){
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	4a4a      	ldr	r2, [pc, #296]	@ (8001380 <Controle+0x2a4>)
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	edd3 7a00 	vldr	s15, [r3]
 800125e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001266:	d515      	bpl.n	8001294 <Controle+0x1b8>
			D[n]= map(uM[n],-1023,0,2047,1224);
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	4a45      	ldr	r2, [pc, #276]	@ (8001380 <Controle+0x2a4>)
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4413      	add	r3, r2
 8001270:	edd3 7a00 	vldr	s15, [r3]
 8001274:	79fc      	ldrb	r4, [r7, #7]
 8001276:	f44f 6399 	mov.w	r3, #1224	@ 0x4c8
 800127a:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800127e:	2100      	movs	r1, #0
 8001280:	4845      	ldr	r0, [pc, #276]	@ (8001398 <Controle+0x2bc>)
 8001282:	eeb0 0a67 	vmov.f32	s0, s15
 8001286:	f7ff fef3 	bl	8001070 <map>
 800128a:	4603      	mov	r3, r0
 800128c:	461a      	mov	r2, r3
 800128e:	4b41      	ldr	r3, [pc, #260]	@ (8001394 <Controle+0x2b8>)
 8001290:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	for(uint8_t n=0;n<4;n++){
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	3301      	adds	r3, #1
 8001298:	71fb      	strb	r3, [r7, #7]
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	2b03      	cmp	r3, #3
 800129e:	f67f af23 	bls.w	80010e8 <Controle+0xc>
		}
	}

	//Logica para salvar o erro e a velocidade anterior
	cont = cont +1;
 80012a2:	4b3e      	ldr	r3, [pc, #248]	@ (800139c <Controle+0x2c0>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	3301      	adds	r3, #1
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4b3c      	ldr	r3, [pc, #240]	@ (800139c <Controle+0x2c0>)
 80012ac:	701a      	strb	r2, [r3, #0]
	if(cont == 1){
 80012ae:	4b3b      	ldr	r3, [pc, #236]	@ (800139c <Controle+0x2c0>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d11d      	bne.n	80012f2 <Controle+0x216>
		for(uint8_t n=0;n<4;n++){
 80012b6:	2300      	movs	r3, #0
 80012b8:	71bb      	strb	r3, [r7, #6]
 80012ba:	e016      	b.n	80012ea <Controle+0x20e>
			prevspeed[n] = speed[n];
 80012bc:	79ba      	ldrb	r2, [r7, #6]
 80012be:	79bb      	ldrb	r3, [r7, #6]
 80012c0:	4926      	ldr	r1, [pc, #152]	@ (800135c <Controle+0x280>)
 80012c2:	0092      	lsls	r2, r2, #2
 80012c4:	440a      	add	r2, r1
 80012c6:	6812      	ldr	r2, [r2, #0]
 80012c8:	4929      	ldr	r1, [pc, #164]	@ (8001370 <Controle+0x294>)
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	440b      	add	r3, r1
 80012ce:	601a      	str	r2, [r3, #0]
			preverror[n] = error[n];
 80012d0:	79ba      	ldrb	r2, [r7, #6]
 80012d2:	79bb      	ldrb	r3, [r7, #6]
 80012d4:	4922      	ldr	r1, [pc, #136]	@ (8001360 <Controle+0x284>)
 80012d6:	0092      	lsls	r2, r2, #2
 80012d8:	440a      	add	r2, r1
 80012da:	6812      	ldr	r2, [r2, #0]
 80012dc:	4921      	ldr	r1, [pc, #132]	@ (8001364 <Controle+0x288>)
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	440b      	add	r3, r1
 80012e2:	601a      	str	r2, [r3, #0]
		for(uint8_t n=0;n<4;n++){
 80012e4:	79bb      	ldrb	r3, [r7, #6]
 80012e6:	3301      	adds	r3, #1
 80012e8:	71bb      	strb	r3, [r7, #6]
 80012ea:	79bb      	ldrb	r3, [r7, #6]
 80012ec:	2b03      	cmp	r3, #3
 80012ee:	d9e5      	bls.n	80012bc <Controle+0x1e0>
			prevspeed[n] = speed[n];
			preverror[n] = error[n];
		}
		cont = 1;
	}
}
 80012f0:	e02d      	b.n	800134e <Controle+0x272>
	} else if(cont ==2){
 80012f2:	4b2a      	ldr	r3, [pc, #168]	@ (800139c <Controle+0x2c0>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d129      	bne.n	800134e <Controle+0x272>
		for(uint8_t n=0;n<4;n++){
 80012fa:	2300      	movs	r3, #0
 80012fc:	717b      	strb	r3, [r7, #5]
 80012fe:	e020      	b.n	8001342 <Controle+0x266>
			prevspeed2[n] = prevspeed[n];
 8001300:	797a      	ldrb	r2, [r7, #5]
 8001302:	797b      	ldrb	r3, [r7, #5]
 8001304:	491a      	ldr	r1, [pc, #104]	@ (8001370 <Controle+0x294>)
 8001306:	0092      	lsls	r2, r2, #2
 8001308:	440a      	add	r2, r1
 800130a:	6812      	ldr	r2, [r2, #0]
 800130c:	4919      	ldr	r1, [pc, #100]	@ (8001374 <Controle+0x298>)
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	440b      	add	r3, r1
 8001312:	601a      	str	r2, [r3, #0]
			prevspeed[n] = speed[n];
 8001314:	797a      	ldrb	r2, [r7, #5]
 8001316:	797b      	ldrb	r3, [r7, #5]
 8001318:	4910      	ldr	r1, [pc, #64]	@ (800135c <Controle+0x280>)
 800131a:	0092      	lsls	r2, r2, #2
 800131c:	440a      	add	r2, r1
 800131e:	6812      	ldr	r2, [r2, #0]
 8001320:	4913      	ldr	r1, [pc, #76]	@ (8001370 <Controle+0x294>)
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	440b      	add	r3, r1
 8001326:	601a      	str	r2, [r3, #0]
			preverror[n] = error[n];
 8001328:	797a      	ldrb	r2, [r7, #5]
 800132a:	797b      	ldrb	r3, [r7, #5]
 800132c:	490c      	ldr	r1, [pc, #48]	@ (8001360 <Controle+0x284>)
 800132e:	0092      	lsls	r2, r2, #2
 8001330:	440a      	add	r2, r1
 8001332:	6812      	ldr	r2, [r2, #0]
 8001334:	490b      	ldr	r1, [pc, #44]	@ (8001364 <Controle+0x288>)
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	440b      	add	r3, r1
 800133a:	601a      	str	r2, [r3, #0]
		for(uint8_t n=0;n<4;n++){
 800133c:	797b      	ldrb	r3, [r7, #5]
 800133e:	3301      	adds	r3, #1
 8001340:	717b      	strb	r3, [r7, #5]
 8001342:	797b      	ldrb	r3, [r7, #5]
 8001344:	2b03      	cmp	r3, #3
 8001346:	d9db      	bls.n	8001300 <Controle+0x224>
		cont = 1;
 8001348:	4b14      	ldr	r3, [pc, #80]	@ (800139c <Controle+0x2c0>)
 800134a:	2201      	movs	r2, #1
 800134c:	701a      	strb	r2, [r3, #0]
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	bd90      	pop	{r4, r7, pc}
 8001356:	bf00      	nop
 8001358:	24000448 	.word	0x24000448
 800135c:	240004ec 	.word	0x240004ec
 8001360:	24000460 	.word	0x24000460
 8001364:	240004b0 	.word	0x240004b0
 8001368:	24000008 	.word	0x24000008
 800136c:	2400000c 	.word	0x2400000c
 8001370:	24000490 	.word	0x24000490
 8001374:	240004a0 	.word	0x240004a0
 8001378:	24000010 	.word	0x24000010
 800137c:	24000470 	.word	0x24000470
 8001380:	24000480 	.word	0x24000480
 8001384:	c47fc000 	.word	0xc47fc000
 8001388:	c47fc000 	.word	0xc47fc000
 800138c:	447fc000 	.word	0x447fc000
 8001390:	447fc000 	.word	0x447fc000
 8001394:	240004c4 	.word	0x240004c4
 8001398:	fffffc01 	.word	0xfffffc01
 800139c:	240004c0 	.word	0x240004c0

080013a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <NMI_Handler+0x4>

080013a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <HardFault_Handler+0x4>

080013b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <MemManage_Handler+0x4>

080013b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <BusFault_Handler+0x4>

080013c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <UsageFault_Handler+0x4>

080013c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f6:	f001 f8d1 	bl	800259c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8001404:	4802      	ldr	r0, [pc, #8]	@ (8001410 <DMA1_Stream1_IRQHandler+0x10>)
 8001406:	f002 f803 	bl	8003410 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	2400078c 	.word	0x2400078c

08001414 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8001418:	4802      	ldr	r0, [pc, #8]	@ (8001424 <DMA1_Stream3_IRQHandler+0x10>)
 800141a:	f001 fff9 	bl	8003410 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	2400087c 	.word	0x2400087c

08001428 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 800142c:	4802      	ldr	r0, [pc, #8]	@ (8001438 <DMA1_Stream4_IRQHandler+0x10>)
 800142e:	f001 ffef 	bl	8003410 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	24000804 	.word	0x24000804

0800143c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001440:	4802      	ldr	r0, [pc, #8]	@ (800144c <DMA1_Stream5_IRQHandler+0x10>)
 8001442:	f001 ffe5 	bl	8003410 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	24000714 	.word	0x24000714

08001450 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001454:	2000      	movs	r0, #0
 8001456:	f000 ff33 	bl	80022c0 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001464:	4802      	ldr	r0, [pc, #8]	@ (8001470 <OTG_FS_IRQHandler+0x10>)
 8001466:	f003 fea8 	bl	80051ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	24001e78 	.word	0x24001e78
 8001474:	00000000 	.word	0x00000000

08001478 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 800147c:	481e      	ldr	r0, [pc, #120]	@ (80014f8 <TIM15_IRQHandler+0x80>)
 800147e:	f008 f9ff 	bl	8009880 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */
  Enc[0] = TIM4->CNT;
 8001482:	4b1e      	ldr	r3, [pc, #120]	@ (80014fc <TIM15_IRQHandler+0x84>)
 8001484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001486:	4a1e      	ldr	r2, [pc, #120]	@ (8001500 <TIM15_IRQHandler+0x88>)
 8001488:	6013      	str	r3, [r2, #0]
  TIM4->CNT = 0;
 800148a:	4b1c      	ldr	r3, [pc, #112]	@ (80014fc <TIM15_IRQHandler+0x84>)
 800148c:	2200      	movs	r2, #0
 800148e:	625a      	str	r2, [r3, #36]	@ 0x24
  vel[0] = Enc[0];
 8001490:	4b1b      	ldr	r3, [pc, #108]	@ (8001500 <TIM15_IRQHandler+0x88>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	461a      	mov	r2, r3
 8001496:	4b1b      	ldr	r3, [pc, #108]	@ (8001504 <TIM15_IRQHandler+0x8c>)
 8001498:	601a      	str	r2, [r3, #0]
  if(vel[0]>60000){
 800149a:	4b1a      	ldr	r3, [pc, #104]	@ (8001504 <TIM15_IRQHandler+0x8c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80014a2:	4293      	cmp	r3, r2
 80014a4:	dd05      	ble.n	80014b2 <TIM15_IRQHandler+0x3a>
		  vel[0] = vel[0] - 65356;
 80014a6:	4b17      	ldr	r3, [pc, #92]	@ (8001504 <TIM15_IRQHandler+0x8c>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	4b17      	ldr	r3, [pc, #92]	@ (8001508 <TIM15_IRQHandler+0x90>)
 80014ac:	4413      	add	r3, r2
 80014ae:	4a15      	ldr	r2, [pc, #84]	@ (8001504 <TIM15_IRQHandler+0x8c>)
 80014b0:	6013      	str	r3, [r2, #0]
  }
  speed[0] = vel[0]/(81.92);
 80014b2:	4b14      	ldr	r3, [pc, #80]	@ (8001504 <TIM15_IRQHandler+0x8c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	ee07 3a90 	vmov	s15, r3
 80014ba:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80014be:	ed9f 5b0c 	vldr	d5, [pc, #48]	@ 80014f0 <TIM15_IRQHandler+0x78>
 80014c2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014ca:	4b10      	ldr	r3, [pc, #64]	@ (800150c <TIM15_IRQHandler+0x94>)
 80014cc:	edc3 7a00 	vstr	s15, [r3]
  velocidade = speed[0];
 80014d0:	4b0e      	ldr	r3, [pc, #56]	@ (800150c <TIM15_IRQHandler+0x94>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a0e      	ldr	r2, [pc, #56]	@ (8001510 <TIM15_IRQHandler+0x98>)
 80014d6:	6013      	str	r3, [r2, #0]
  Controle();
 80014d8:	f7ff fe00 	bl	80010dc <Controle>

  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 80014dc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80014e0:	480c      	ldr	r0, [pc, #48]	@ (8001514 <TIM15_IRQHandler+0x9c>)
 80014e2:	f003 fce0 	bl	8004ea6 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM15_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	f3af 8000 	nop.w
 80014f0:	47ae147b 	.word	0x47ae147b
 80014f4:	40547ae1 	.word	0x40547ae1
 80014f8:	240006c8 	.word	0x240006c8
 80014fc:	40000800 	.word	0x40000800
 8001500:	240004cc 	.word	0x240004cc
 8001504:	240004dc 	.word	0x240004dc
 8001508:	ffff00b4 	.word	0xffff00b4
 800150c:	240004ec 	.word	0x240004ec
 8001510:	24000444 	.word	0x24000444
 8001514:	58020400 	.word	0x58020400

08001518 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return 1;
 800151c:	2301      	movs	r3, #1
}
 800151e:	4618      	mov	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <_kill>:

int _kill(int pid, int sig)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001532:	f00f f88d 	bl	8010650 <__errno>
 8001536:	4603      	mov	r3, r0
 8001538:	2216      	movs	r2, #22
 800153a:	601a      	str	r2, [r3, #0]
  return -1;
 800153c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <_exit>:

void _exit (int status)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001550:	f04f 31ff 	mov.w	r1, #4294967295
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f7ff ffe7 	bl	8001528 <_kill>
  while (1) {}    /* Make sure we hang here */
 800155a:	bf00      	nop
 800155c:	e7fd      	b.n	800155a <_exit+0x12>

0800155e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b086      	sub	sp, #24
 8001562:	af00      	add	r7, sp, #0
 8001564:	60f8      	str	r0, [r7, #12]
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	e00a      	b.n	8001586 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001570:	f3af 8000 	nop.w
 8001574:	4601      	mov	r1, r0
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	1c5a      	adds	r2, r3, #1
 800157a:	60ba      	str	r2, [r7, #8]
 800157c:	b2ca      	uxtb	r2, r1
 800157e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	3301      	adds	r3, #1
 8001584:	617b      	str	r3, [r7, #20]
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	429a      	cmp	r2, r3
 800158c:	dbf0      	blt.n	8001570 <_read+0x12>
  }

  return len;
 800158e:	687b      	ldr	r3, [r7, #4]
}
 8001590:	4618      	mov	r0, r3
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
 80015a8:	e009      	b.n	80015be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	1c5a      	adds	r2, r3, #1
 80015ae:	60ba      	str	r2, [r7, #8]
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 ff04 	bl	80023c0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	3301      	adds	r3, #1
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	dbf1      	blt.n	80015aa <_write+0x12>
  }
  return len;
 80015c6:	687b      	ldr	r3, [r7, #4]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <_close>:

int _close(int file)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015f8:	605a      	str	r2, [r3, #4]
  return 0;
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <_isatty>:

int _isatty(int file)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001610:	2301      	movs	r3, #1
}
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800161e:	b480      	push	{r7}
 8001620:	b085      	sub	sp, #20
 8001622:	af00      	add	r7, sp, #0
 8001624:	60f8      	str	r0, [r7, #12]
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001640:	4a14      	ldr	r2, [pc, #80]	@ (8001694 <_sbrk+0x5c>)
 8001642:	4b15      	ldr	r3, [pc, #84]	@ (8001698 <_sbrk+0x60>)
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800164c:	4b13      	ldr	r3, [pc, #76]	@ (800169c <_sbrk+0x64>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d102      	bne.n	800165a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001654:	4b11      	ldr	r3, [pc, #68]	@ (800169c <_sbrk+0x64>)
 8001656:	4a12      	ldr	r2, [pc, #72]	@ (80016a0 <_sbrk+0x68>)
 8001658:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800165a:	4b10      	ldr	r3, [pc, #64]	@ (800169c <_sbrk+0x64>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4413      	add	r3, r2
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	429a      	cmp	r2, r3
 8001666:	d207      	bcs.n	8001678 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001668:	f00e fff2 	bl	8010650 <__errno>
 800166c:	4603      	mov	r3, r0
 800166e:	220c      	movs	r2, #12
 8001670:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001672:	f04f 33ff 	mov.w	r3, #4294967295
 8001676:	e009      	b.n	800168c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001678:	4b08      	ldr	r3, [pc, #32]	@ (800169c <_sbrk+0x64>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800167e:	4b07      	ldr	r3, [pc, #28]	@ (800169c <_sbrk+0x64>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	4a05      	ldr	r2, [pc, #20]	@ (800169c <_sbrk+0x64>)
 8001688:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800168a:	68fb      	ldr	r3, [r7, #12]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	24080000 	.word	0x24080000
 8001698:	00000400 	.word	0x00000400
 800169c:	240004fc 	.word	0x240004fc
 80016a0:	240026c8 	.word	0x240026c8

080016a4 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim5_ch2;
DMA_HandleTypeDef hdma_tim5_ch4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08c      	sub	sp, #48	@ 0x30
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016aa:	f107 030c 	add.w	r3, r7, #12
 80016ae:	2224      	movs	r2, #36	@ 0x24
 80016b0:	2100      	movs	r1, #0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f00e ff79 	bl	80105aa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b8:	463b      	mov	r3, r7
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016c2:	4b23      	ldr	r3, [pc, #140]	@ (8001750 <MX_TIM1_Init+0xac>)
 80016c4:	4a23      	ldr	r2, [pc, #140]	@ (8001754 <MX_TIM1_Init+0xb0>)
 80016c6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80016c8:	4b21      	ldr	r3, [pc, #132]	@ (8001750 <MX_TIM1_Init+0xac>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ce:	4b20      	ldr	r3, [pc, #128]	@ (8001750 <MX_TIM1_Init+0xac>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80016d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001750 <MX_TIM1_Init+0xac>)
 80016d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001750 <MX_TIM1_Init+0xac>)
 80016de:	2200      	movs	r2, #0
 80016e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001750 <MX_TIM1_Init+0xac>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e8:	4b19      	ldr	r3, [pc, #100]	@ (8001750 <MX_TIM1_Init+0xac>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016ee:	2303      	movs	r3, #3
 80016f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80016f2:	2302      	movs	r3, #2
 80016f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016f6:	2301      	movs	r3, #1
 80016f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001702:	2302      	movs	r3, #2
 8001704:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001706:	2301      	movs	r3, #1
 8001708:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800170a:	2300      	movs	r3, #0
 800170c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001712:	f107 030c 	add.w	r3, r7, #12
 8001716:	4619      	mov	r1, r3
 8001718:	480d      	ldr	r0, [pc, #52]	@ (8001750 <MX_TIM1_Init+0xac>)
 800171a:	f007 ff5d 	bl	80095d8 <HAL_TIM_Encoder_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001724:	f7ff fc84 	bl	8001030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001728:	2300      	movs	r3, #0
 800172a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800172c:	2300      	movs	r3, #0
 800172e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001734:	463b      	mov	r3, r7
 8001736:	4619      	mov	r1, r3
 8001738:	4805      	ldr	r0, [pc, #20]	@ (8001750 <MX_TIM1_Init+0xac>)
 800173a:	f009 f81d 	bl	800a778 <HAL_TIMEx_MasterConfigSynchronization>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001744:	f7ff fc74 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001748:	bf00      	nop
 800174a:	3730      	adds	r7, #48	@ 0x30
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	24000500 	.word	0x24000500
 8001754:	40010000 	.word	0x40010000

08001758 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08a      	sub	sp, #40	@ 0x28
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800175e:	f107 031c 	add.w	r3, r7, #28
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800176a:	463b      	mov	r3, r7
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
 8001778:	615a      	str	r2, [r3, #20]
 800177a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800177c:	4b27      	ldr	r3, [pc, #156]	@ (800181c <MX_TIM2_Init+0xc4>)
 800177e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001782:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001784:	4b25      	ldr	r3, [pc, #148]	@ (800181c <MX_TIM2_Init+0xc4>)
 8001786:	2200      	movs	r2, #0
 8001788:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800178a:	4b24      	ldr	r3, [pc, #144]	@ (800181c <MX_TIM2_Init+0xc4>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001790:	4b22      	ldr	r3, [pc, #136]	@ (800181c <MX_TIM2_Init+0xc4>)
 8001792:	2200      	movs	r2, #0
 8001794:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001796:	4b21      	ldr	r3, [pc, #132]	@ (800181c <MX_TIM2_Init+0xc4>)
 8001798:	2200      	movs	r2, #0
 800179a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800179c:	4b1f      	ldr	r3, [pc, #124]	@ (800181c <MX_TIM2_Init+0xc4>)
 800179e:	2200      	movs	r2, #0
 80017a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80017a2:	481e      	ldr	r0, [pc, #120]	@ (800181c <MX_TIM2_Init+0xc4>)
 80017a4:	f007 fdb2 	bl	800930c <HAL_TIM_PWM_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80017ae:	f7ff fc3f 	bl	8001030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017ba:	f107 031c 	add.w	r3, r7, #28
 80017be:	4619      	mov	r1, r3
 80017c0:	4816      	ldr	r0, [pc, #88]	@ (800181c <MX_TIM2_Init+0xc4>)
 80017c2:	f008 ffd9 	bl	800a778 <HAL_TIMEx_MasterConfigSynchronization>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80017cc:	f7ff fc30 	bl	8001030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017d0:	2360      	movs	r3, #96	@ 0x60
 80017d2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017d8:	2300      	movs	r3, #0
 80017da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017dc:	2300      	movs	r3, #0
 80017de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017e0:	463b      	mov	r3, r7
 80017e2:	2200      	movs	r2, #0
 80017e4:	4619      	mov	r1, r3
 80017e6:	480d      	ldr	r0, [pc, #52]	@ (800181c <MX_TIM2_Init+0xc4>)
 80017e8:	f008 f952 	bl	8009a90 <HAL_TIM_PWM_ConfigChannel>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80017f2:	f7ff fc1d 	bl	8001030 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017f6:	463b      	mov	r3, r7
 80017f8:	2208      	movs	r2, #8
 80017fa:	4619      	mov	r1, r3
 80017fc:	4807      	ldr	r0, [pc, #28]	@ (800181c <MX_TIM2_Init+0xc4>)
 80017fe:	f008 f947 	bl	8009a90 <HAL_TIM_PWM_ConfigChannel>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001808:	f7ff fc12 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800180c:	4803      	ldr	r0, [pc, #12]	@ (800181c <MX_TIM2_Init+0xc4>)
 800180e:	f000 fbe5 	bl	8001fdc <HAL_TIM_MspPostInit>

}
 8001812:	bf00      	nop
 8001814:	3728      	adds	r7, #40	@ 0x28
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	2400054c 	.word	0x2400054c

08001820 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08c      	sub	sp, #48	@ 0x30
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001826:	f107 030c 	add.w	r3, r7, #12
 800182a:	2224      	movs	r2, #36	@ 0x24
 800182c:	2100      	movs	r1, #0
 800182e:	4618      	mov	r0, r3
 8001830:	f00e febb 	bl	80105aa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001834:	463b      	mov	r3, r7
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800183e:	4b21      	ldr	r3, [pc, #132]	@ (80018c4 <MX_TIM3_Init+0xa4>)
 8001840:	4a21      	ldr	r2, [pc, #132]	@ (80018c8 <MX_TIM3_Init+0xa8>)
 8001842:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001844:	4b1f      	ldr	r3, [pc, #124]	@ (80018c4 <MX_TIM3_Init+0xa4>)
 8001846:	2200      	movs	r2, #0
 8001848:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184a:	4b1e      	ldr	r3, [pc, #120]	@ (80018c4 <MX_TIM3_Init+0xa4>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001850:	4b1c      	ldr	r3, [pc, #112]	@ (80018c4 <MX_TIM3_Init+0xa4>)
 8001852:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001856:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001858:	4b1a      	ldr	r3, [pc, #104]	@ (80018c4 <MX_TIM3_Init+0xa4>)
 800185a:	2200      	movs	r2, #0
 800185c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800185e:	4b19      	ldr	r3, [pc, #100]	@ (80018c4 <MX_TIM3_Init+0xa4>)
 8001860:	2200      	movs	r2, #0
 8001862:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001864:	2303      	movs	r3, #3
 8001866:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001868:	2302      	movs	r3, #2
 800186a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800186c:	2301      	movs	r3, #1
 800186e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001870:	2300      	movs	r3, #0
 8001872:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001878:	2302      	movs	r3, #2
 800187a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800187c:	2301      	movs	r3, #1
 800187e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001880:	2300      	movs	r3, #0
 8001882:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001888:	f107 030c 	add.w	r3, r7, #12
 800188c:	4619      	mov	r1, r3
 800188e:	480d      	ldr	r0, [pc, #52]	@ (80018c4 <MX_TIM3_Init+0xa4>)
 8001890:	f007 fea2 	bl	80095d8 <HAL_TIM_Encoder_Init>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800189a:	f7ff fbc9 	bl	8001030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800189e:	2300      	movs	r3, #0
 80018a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018a6:	463b      	mov	r3, r7
 80018a8:	4619      	mov	r1, r3
 80018aa:	4806      	ldr	r0, [pc, #24]	@ (80018c4 <MX_TIM3_Init+0xa4>)
 80018ac:	f008 ff64 	bl	800a778 <HAL_TIMEx_MasterConfigSynchronization>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80018b6:	f7ff fbbb 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018ba:	bf00      	nop
 80018bc:	3730      	adds	r7, #48	@ 0x30
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	24000598 	.word	0x24000598
 80018c8:	40000400 	.word	0x40000400

080018cc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08c      	sub	sp, #48	@ 0x30
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018d2:	f107 030c 	add.w	r3, r7, #12
 80018d6:	2224      	movs	r2, #36	@ 0x24
 80018d8:	2100      	movs	r1, #0
 80018da:	4618      	mov	r0, r3
 80018dc:	f00e fe65 	bl	80105aa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e0:	463b      	mov	r3, r7
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]
 80018e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018ea:	4b21      	ldr	r3, [pc, #132]	@ (8001970 <MX_TIM4_Init+0xa4>)
 80018ec:	4a21      	ldr	r2, [pc, #132]	@ (8001974 <MX_TIM4_Init+0xa8>)
 80018ee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80018f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001970 <MX_TIM4_Init+0xa4>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001970 <MX_TIM4_Init+0xa4>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80018fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001970 <MX_TIM4_Init+0xa4>)
 80018fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001902:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001904:	4b1a      	ldr	r3, [pc, #104]	@ (8001970 <MX_TIM4_Init+0xa4>)
 8001906:	2200      	movs	r2, #0
 8001908:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800190a:	4b19      	ldr	r3, [pc, #100]	@ (8001970 <MX_TIM4_Init+0xa4>)
 800190c:	2200      	movs	r2, #0
 800190e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001910:	2303      	movs	r3, #3
 8001912:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001914:	2302      	movs	r3, #2
 8001916:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001918:	2301      	movs	r3, #1
 800191a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800191c:	2300      	movs	r3, #0
 800191e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001920:	2300      	movs	r3, #0
 8001922:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001924:	2302      	movs	r3, #2
 8001926:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001928:	2301      	movs	r3, #1
 800192a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800192c:	2300      	movs	r3, #0
 800192e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001934:	f107 030c 	add.w	r3, r7, #12
 8001938:	4619      	mov	r1, r3
 800193a:	480d      	ldr	r0, [pc, #52]	@ (8001970 <MX_TIM4_Init+0xa4>)
 800193c:	f007 fe4c 	bl	80095d8 <HAL_TIM_Encoder_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001946:	f7ff fb73 	bl	8001030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800194a:	2300      	movs	r3, #0
 800194c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800194e:	2300      	movs	r3, #0
 8001950:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001952:	463b      	mov	r3, r7
 8001954:	4619      	mov	r1, r3
 8001956:	4806      	ldr	r0, [pc, #24]	@ (8001970 <MX_TIM4_Init+0xa4>)
 8001958:	f008 ff0e 	bl	800a778 <HAL_TIMEx_MasterConfigSynchronization>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001962:	f7ff fb65 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001966:	bf00      	nop
 8001968:	3730      	adds	r7, #48	@ 0x30
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	240005e4 	.word	0x240005e4
 8001974:	40000800 	.word	0x40000800

08001978 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08a      	sub	sp, #40	@ 0x28
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800197e:	f107 031c 	add.w	r3, r7, #28
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]
 8001988:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800198a:	463b      	mov	r3, r7
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
 8001998:	615a      	str	r2, [r3, #20]
 800199a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800199c:	4b26      	ldr	r3, [pc, #152]	@ (8001a38 <MX_TIM5_Init+0xc0>)
 800199e:	4a27      	ldr	r2, [pc, #156]	@ (8001a3c <MX_TIM5_Init+0xc4>)
 80019a0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80019a2:	4b25      	ldr	r3, [pc, #148]	@ (8001a38 <MX_TIM5_Init+0xc0>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a8:	4b23      	ldr	r3, [pc, #140]	@ (8001a38 <MX_TIM5_Init+0xc0>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 80019ae:	4b22      	ldr	r3, [pc, #136]	@ (8001a38 <MX_TIM5_Init+0xc0>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b4:	4b20      	ldr	r3, [pc, #128]	@ (8001a38 <MX_TIM5_Init+0xc0>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001a38 <MX_TIM5_Init+0xc0>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80019c0:	481d      	ldr	r0, [pc, #116]	@ (8001a38 <MX_TIM5_Init+0xc0>)
 80019c2:	f007 fca3 	bl	800930c <HAL_TIM_PWM_Init>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80019cc:	f7ff fb30 	bl	8001030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019d0:	2300      	movs	r3, #0
 80019d2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80019d8:	f107 031c 	add.w	r3, r7, #28
 80019dc:	4619      	mov	r1, r3
 80019de:	4816      	ldr	r0, [pc, #88]	@ (8001a38 <MX_TIM5_Init+0xc0>)
 80019e0:	f008 feca 	bl	800a778 <HAL_TIMEx_MasterConfigSynchronization>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80019ea:	f7ff fb21 	bl	8001030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ee:	2360      	movs	r3, #96	@ 0x60
 80019f0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019f6:	2300      	movs	r3, #0
 80019f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019fe:	463b      	mov	r3, r7
 8001a00:	2204      	movs	r2, #4
 8001a02:	4619      	mov	r1, r3
 8001a04:	480c      	ldr	r0, [pc, #48]	@ (8001a38 <MX_TIM5_Init+0xc0>)
 8001a06:	f008 f843 	bl	8009a90 <HAL_TIM_PWM_ConfigChannel>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001a10:	f7ff fb0e 	bl	8001030 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a14:	463b      	mov	r3, r7
 8001a16:	220c      	movs	r2, #12
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4807      	ldr	r0, [pc, #28]	@ (8001a38 <MX_TIM5_Init+0xc0>)
 8001a1c:	f008 f838 	bl	8009a90 <HAL_TIM_PWM_ConfigChannel>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001a26:	f7ff fb03 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001a2a:	4803      	ldr	r0, [pc, #12]	@ (8001a38 <MX_TIM5_Init+0xc0>)
 8001a2c:	f000 fad6 	bl	8001fdc <HAL_TIM_MspPostInit>

}
 8001a30:	bf00      	nop
 8001a32:	3728      	adds	r7, #40	@ 0x28
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	24000630 	.word	0x24000630
 8001a3c:	40000c00 	.word	0x40000c00

08001a40 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08c      	sub	sp, #48	@ 0x30
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a46:	f107 030c 	add.w	r3, r7, #12
 8001a4a:	2224      	movs	r2, #36	@ 0x24
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f00e fdab 	bl	80105aa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a54:	463b      	mov	r3, r7
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001a5e:	4b23      	ldr	r3, [pc, #140]	@ (8001aec <MX_TIM8_Init+0xac>)
 8001a60:	4a23      	ldr	r2, [pc, #140]	@ (8001af0 <MX_TIM8_Init+0xb0>)
 8001a62:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001a64:	4b21      	ldr	r3, [pc, #132]	@ (8001aec <MX_TIM8_Init+0xac>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6a:	4b20      	ldr	r3, [pc, #128]	@ (8001aec <MX_TIM8_Init+0xac>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001a70:	4b1e      	ldr	r3, [pc, #120]	@ (8001aec <MX_TIM8_Init+0xac>)
 8001a72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a76:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a78:	4b1c      	ldr	r3, [pc, #112]	@ (8001aec <MX_TIM8_Init+0xac>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8001aec <MX_TIM8_Init+0xac>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a84:	4b19      	ldr	r3, [pc, #100]	@ (8001aec <MX_TIM8_Init+0xac>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a92:	2301      	movs	r3, #1
 8001a94:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001aae:	f107 030c 	add.w	r3, r7, #12
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	480d      	ldr	r0, [pc, #52]	@ (8001aec <MX_TIM8_Init+0xac>)
 8001ab6:	f007 fd8f 	bl	80095d8 <HAL_TIM_Encoder_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001ac0:	f7ff fab6 	bl	8001030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001ad0:	463b      	mov	r3, r7
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4805      	ldr	r0, [pc, #20]	@ (8001aec <MX_TIM8_Init+0xac>)
 8001ad6:	f008 fe4f 	bl	800a778 <HAL_TIMEx_MasterConfigSynchronization>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001ae0:	f7ff faa6 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001ae4:	bf00      	nop
 8001ae6:	3730      	adds	r7, #48	@ 0x30
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	2400067c 	.word	0x2400067c
 8001af0:	40010400 	.word	0x40010400

08001af4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b088      	sub	sp, #32
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001afa:	f107 0310 	add.w	r3, r7, #16
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	609a      	str	r2, [r3, #8]
 8001b06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001b12:	4b1f      	ldr	r3, [pc, #124]	@ (8001b90 <MX_TIM15_Init+0x9c>)
 8001b14:	4a1f      	ldr	r2, [pc, #124]	@ (8001b94 <MX_TIM15_Init+0xa0>)
 8001b16:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 9999;
 8001b18:	4b1d      	ldr	r3, [pc, #116]	@ (8001b90 <MX_TIM15_Init+0x9c>)
 8001b1a:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001b1e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b20:	4b1b      	ldr	r3, [pc, #108]	@ (8001b90 <MX_TIM15_Init+0x9c>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 99;
 8001b26:	4b1a      	ldr	r3, [pc, #104]	@ (8001b90 <MX_TIM15_Init+0x9c>)
 8001b28:	2263      	movs	r2, #99	@ 0x63
 8001b2a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b2c:	4b18      	ldr	r3, [pc, #96]	@ (8001b90 <MX_TIM15_Init+0x9c>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001b32:	4b17      	ldr	r3, [pc, #92]	@ (8001b90 <MX_TIM15_Init+0x9c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b38:	4b15      	ldr	r3, [pc, #84]	@ (8001b90 <MX_TIM15_Init+0x9c>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001b3e:	4814      	ldr	r0, [pc, #80]	@ (8001b90 <MX_TIM15_Init+0x9c>)
 8001b40:	f007 fb14 	bl	800916c <HAL_TIM_Base_Init>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8001b4a:	f7ff fa71 	bl	8001030 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001b54:	f107 0310 	add.w	r3, r7, #16
 8001b58:	4619      	mov	r1, r3
 8001b5a:	480d      	ldr	r0, [pc, #52]	@ (8001b90 <MX_TIM15_Init+0x9c>)
 8001b5c:	f008 f8ac 	bl	8009cb8 <HAL_TIM_ConfigClockSource>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8001b66:	f7ff fa63 	bl	8001030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001b72:	1d3b      	adds	r3, r7, #4
 8001b74:	4619      	mov	r1, r3
 8001b76:	4806      	ldr	r0, [pc, #24]	@ (8001b90 <MX_TIM15_Init+0x9c>)
 8001b78:	f008 fdfe 	bl	800a778 <HAL_TIMEx_MasterConfigSynchronization>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8001b82:	f7ff fa55 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001b86:	bf00      	nop
 8001b88:	3720      	adds	r7, #32
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	240006c8 	.word	0x240006c8
 8001b94:	40014000 	.word	0x40014000

08001b98 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b090      	sub	sp, #64	@ 0x40
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a69      	ldr	r2, [pc, #420]	@ (8001d5c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d12f      	bne.n	8001c1a <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bba:	4b69      	ldr	r3, [pc, #420]	@ (8001d60 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001bbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bc0:	4a67      	ldr	r2, [pc, #412]	@ (8001d60 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001bca:	4b65      	ldr	r3, [pc, #404]	@ (8001d60 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001bcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bd8:	4b61      	ldr	r3, [pc, #388]	@ (8001d60 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bde:	4a60      	ldr	r2, [pc, #384]	@ (8001d60 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001be0:	f043 0310 	orr.w	r3, r3, #16
 8001be4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001be8:	4b5d      	ldr	r3, [pc, #372]	@ (8001d60 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bee:	f003 0310 	and.w	r3, r3, #16
 8001bf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001bf6:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c04:	2300      	movs	r3, #0
 8001c06:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c10:	4619      	mov	r1, r3
 8001c12:	4854      	ldr	r0, [pc, #336]	@ (8001d64 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8001c14:	f002 ff7e 	bl	8004b14 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001c18:	e09b      	b.n	8001d52 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(tim_encoderHandle->Instance==TIM3)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a52      	ldr	r2, [pc, #328]	@ (8001d68 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d12e      	bne.n	8001c82 <HAL_TIM_Encoder_MspInit+0xea>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c24:	4b4e      	ldr	r3, [pc, #312]	@ (8001d60 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001c26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c2a:	4a4d      	ldr	r2, [pc, #308]	@ (8001d60 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001c2c:	f043 0302 	orr.w	r3, r3, #2
 8001c30:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c34:	4b4a      	ldr	r3, [pc, #296]	@ (8001d60 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001c36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	623b      	str	r3, [r7, #32]
 8001c40:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c42:	4b47      	ldr	r3, [pc, #284]	@ (8001d60 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c48:	4a45      	ldr	r2, [pc, #276]	@ (8001d60 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001c4a:	f043 0302 	orr.w	r3, r3, #2
 8001c4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c52:	4b43      	ldr	r3, [pc, #268]	@ (8001d60 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	61fb      	str	r3, [r7, #28]
 8001c5e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001c60:	2330      	movs	r3, #48	@ 0x30
 8001c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c64:	2302      	movs	r3, #2
 8001c66:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c70:	2302      	movs	r3, #2
 8001c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c78:	4619      	mov	r1, r3
 8001c7a:	483c      	ldr	r0, [pc, #240]	@ (8001d6c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001c7c:	f002 ff4a 	bl	8004b14 <HAL_GPIO_Init>
}
 8001c80:	e067      	b.n	8001d52 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(tim_encoderHandle->Instance==TIM4)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a3a      	ldr	r2, [pc, #232]	@ (8001d70 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d12f      	bne.n	8001cec <HAL_TIM_Encoder_MspInit+0x154>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c8c:	4b34      	ldr	r3, [pc, #208]	@ (8001d60 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001c8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c92:	4a33      	ldr	r2, [pc, #204]	@ (8001d60 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001c94:	f043 0304 	orr.w	r3, r3, #4
 8001c98:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c9c:	4b30      	ldr	r3, [pc, #192]	@ (8001d60 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001c9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	61bb      	str	r3, [r7, #24]
 8001ca8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001caa:	4b2d      	ldr	r3, [pc, #180]	@ (8001d60 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cb0:	4a2b      	ldr	r2, [pc, #172]	@ (8001d60 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001cb2:	f043 0308 	orr.w	r3, r3, #8
 8001cb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cba:	4b29      	ldr	r3, [pc, #164]	@ (8001d60 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cc0:	f003 0308 	and.w	r3, r3, #8
 8001cc4:	617b      	str	r3, [r7, #20]
 8001cc6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001cc8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cde:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4823      	ldr	r0, [pc, #140]	@ (8001d74 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8001ce6:	f002 ff15 	bl	8004b14 <HAL_GPIO_Init>
}
 8001cea:	e032      	b.n	8001d52 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(tim_encoderHandle->Instance==TIM8)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a21      	ldr	r2, [pc, #132]	@ (8001d78 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d12d      	bne.n	8001d52 <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d60 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001cf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cfc:	4a18      	ldr	r2, [pc, #96]	@ (8001d60 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001cfe:	f043 0302 	orr.w	r3, r3, #2
 8001d02:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d06:	4b16      	ldr	r3, [pc, #88]	@ (8001d60 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001d08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	613b      	str	r3, [r7, #16]
 8001d12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d14:	4b12      	ldr	r3, [pc, #72]	@ (8001d60 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d1a:	4a11      	ldr	r2, [pc, #68]	@ (8001d60 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001d1c:	f043 0304 	orr.w	r3, r3, #4
 8001d20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d24:	4b0e      	ldr	r3, [pc, #56]	@ (8001d60 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d2a:	f003 0304 	and.w	r3, r3, #4
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d32:	23c0      	movs	r3, #192	@ 0xc0
 8001d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d36:	2302      	movs	r3, #2
 8001d38:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001d42:	2303      	movs	r3, #3
 8001d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	480b      	ldr	r0, [pc, #44]	@ (8001d7c <HAL_TIM_Encoder_MspInit+0x1e4>)
 8001d4e:	f002 fee1 	bl	8004b14 <HAL_GPIO_Init>
}
 8001d52:	bf00      	nop
 8001d54:	3740      	adds	r7, #64	@ 0x40
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40010000 	.word	0x40010000
 8001d60:	58024400 	.word	0x58024400
 8001d64:	58021000 	.word	0x58021000
 8001d68:	40000400 	.word	0x40000400
 8001d6c:	58020400 	.word	0x58020400
 8001d70:	40000800 	.word	0x40000800
 8001d74:	58020c00 	.word	0x58020c00
 8001d78:	40010400 	.word	0x40010400
 8001d7c:	58020800 	.word	0x58020800

08001d80 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d90:	d16f      	bne.n	8001e72 <HAL_TIM_PWM_MspInit+0xf2>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d92:	4b74      	ldr	r3, [pc, #464]	@ (8001f64 <HAL_TIM_PWM_MspInit+0x1e4>)
 8001d94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d98:	4a72      	ldr	r2, [pc, #456]	@ (8001f64 <HAL_TIM_PWM_MspInit+0x1e4>)
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001da2:	4b70      	ldr	r3, [pc, #448]	@ (8001f64 <HAL_TIM_PWM_MspInit+0x1e4>)
 8001da4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8001db0:	4b6d      	ldr	r3, [pc, #436]	@ (8001f68 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001db2:	4a6e      	ldr	r2, [pc, #440]	@ (8001f6c <HAL_TIM_PWM_MspInit+0x1ec>)
 8001db4:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8001db6:	4b6c      	ldr	r3, [pc, #432]	@ (8001f68 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001db8:	2212      	movs	r2, #18
 8001dba:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dbc:	4b6a      	ldr	r3, [pc, #424]	@ (8001f68 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001dbe:	2240      	movs	r2, #64	@ 0x40
 8001dc0:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dc2:	4b69      	ldr	r3, [pc, #420]	@ (8001f68 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001dc8:	4b67      	ldr	r3, [pc, #412]	@ (8001f68 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001dca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dce:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001dd0:	4b65      	ldr	r3, [pc, #404]	@ (8001f68 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001dd2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001dd6:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001dd8:	4b63      	ldr	r3, [pc, #396]	@ (8001f68 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001dda:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001dde:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8001de0:	4b61      	ldr	r3, [pc, #388]	@ (8001f68 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001de6:	4b60      	ldr	r3, [pc, #384]	@ (8001f68 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001de8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001dec:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dee:	4b5e      	ldr	r3, [pc, #376]	@ (8001f68 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001df4:	485c      	ldr	r0, [pc, #368]	@ (8001f68 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001df6:	f000 fd45 	bl	8002884 <HAL_DMA_Init>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <HAL_TIM_PWM_MspInit+0x84>
    {
      Error_Handler();
 8001e00:	f7ff f916 	bl	8001030 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a58      	ldr	r2, [pc, #352]	@ (8001f68 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001e08:	625a      	str	r2, [r3, #36]	@ 0x24
 8001e0a:	4a57      	ldr	r2, [pc, #348]	@ (8001f68 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 8001e10:	4b57      	ldr	r3, [pc, #348]	@ (8001f70 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001e12:	4a58      	ldr	r2, [pc, #352]	@ (8001f74 <HAL_TIM_PWM_MspInit+0x1f4>)
 8001e14:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 8001e16:	4b56      	ldr	r3, [pc, #344]	@ (8001f70 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001e18:	2214      	movs	r2, #20
 8001e1a:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e1c:	4b54      	ldr	r3, [pc, #336]	@ (8001f70 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001e1e:	2240      	movs	r2, #64	@ 0x40
 8001e20:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e22:	4b53      	ldr	r3, [pc, #332]	@ (8001f70 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001e28:	4b51      	ldr	r3, [pc, #324]	@ (8001f70 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001e2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e2e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e30:	4b4f      	ldr	r3, [pc, #316]	@ (8001f70 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001e32:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e36:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e38:	4b4d      	ldr	r3, [pc, #308]	@ (8001f70 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001e3a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e3e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8001e40:	4b4b      	ldr	r3, [pc, #300]	@ (8001f70 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 8001e46:	4b4a      	ldr	r3, [pc, #296]	@ (8001f70 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001e48:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e4c:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e4e:	4b48      	ldr	r3, [pc, #288]	@ (8001f70 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8001e54:	4846      	ldr	r0, [pc, #280]	@ (8001f70 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001e56:	f000 fd15 	bl	8002884 <HAL_DMA_Init>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <HAL_TIM_PWM_MspInit+0xe4>
    {
      Error_Handler();
 8001e60:	f7ff f8e6 	bl	8001030 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a42      	ldr	r2, [pc, #264]	@ (8001f70 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001e68:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001e6a:	4a41      	ldr	r2, [pc, #260]	@ (8001f70 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001e70:	e073      	b.n	8001f5a <HAL_TIM_PWM_MspInit+0x1da>
  else if(tim_pwmHandle->Instance==TIM5)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a40      	ldr	r2, [pc, #256]	@ (8001f78 <HAL_TIM_PWM_MspInit+0x1f8>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d16e      	bne.n	8001f5a <HAL_TIM_PWM_MspInit+0x1da>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e7c:	4b39      	ldr	r3, [pc, #228]	@ (8001f64 <HAL_TIM_PWM_MspInit+0x1e4>)
 8001e7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e82:	4a38      	ldr	r2, [pc, #224]	@ (8001f64 <HAL_TIM_PWM_MspInit+0x1e4>)
 8001e84:	f043 0308 	orr.w	r3, r3, #8
 8001e88:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e8c:	4b35      	ldr	r3, [pc, #212]	@ (8001f64 <HAL_TIM_PWM_MspInit+0x1e4>)
 8001e8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 8001e9a:	4b38      	ldr	r3, [pc, #224]	@ (8001f7c <HAL_TIM_PWM_MspInit+0x1fc>)
 8001e9c:	4a38      	ldr	r2, [pc, #224]	@ (8001f80 <HAL_TIM_PWM_MspInit+0x200>)
 8001e9e:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Request = DMA_REQUEST_TIM5_CH2;
 8001ea0:	4b36      	ldr	r3, [pc, #216]	@ (8001f7c <HAL_TIM_PWM_MspInit+0x1fc>)
 8001ea2:	2238      	movs	r2, #56	@ 0x38
 8001ea4:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ea6:	4b35      	ldr	r3, [pc, #212]	@ (8001f7c <HAL_TIM_PWM_MspInit+0x1fc>)
 8001ea8:	2240      	movs	r2, #64	@ 0x40
 8001eaa:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eac:	4b33      	ldr	r3, [pc, #204]	@ (8001f7c <HAL_TIM_PWM_MspInit+0x1fc>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001eb2:	4b32      	ldr	r3, [pc, #200]	@ (8001f7c <HAL_TIM_PWM_MspInit+0x1fc>)
 8001eb4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001eb8:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001eba:	4b30      	ldr	r3, [pc, #192]	@ (8001f7c <HAL_TIM_PWM_MspInit+0x1fc>)
 8001ebc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ec0:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ec2:	4b2e      	ldr	r3, [pc, #184]	@ (8001f7c <HAL_TIM_PWM_MspInit+0x1fc>)
 8001ec4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ec8:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 8001eca:	4b2c      	ldr	r3, [pc, #176]	@ (8001f7c <HAL_TIM_PWM_MspInit+0x1fc>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8001ed0:	4b2a      	ldr	r3, [pc, #168]	@ (8001f7c <HAL_TIM_PWM_MspInit+0x1fc>)
 8001ed2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ed6:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ed8:	4b28      	ldr	r3, [pc, #160]	@ (8001f7c <HAL_TIM_PWM_MspInit+0x1fc>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8001ede:	4827      	ldr	r0, [pc, #156]	@ (8001f7c <HAL_TIM_PWM_MspInit+0x1fc>)
 8001ee0:	f000 fcd0 	bl	8002884 <HAL_DMA_Init>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <HAL_TIM_PWM_MspInit+0x16e>
      Error_Handler();
 8001eea:	f7ff f8a1 	bl	8001030 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a22      	ldr	r2, [pc, #136]	@ (8001f7c <HAL_TIM_PWM_MspInit+0x1fc>)
 8001ef2:	629a      	str	r2, [r3, #40]	@ 0x28
 8001ef4:	4a21      	ldr	r2, [pc, #132]	@ (8001f7c <HAL_TIM_PWM_MspInit+0x1fc>)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim5_ch4.Instance = DMA1_Stream3;
 8001efa:	4b22      	ldr	r3, [pc, #136]	@ (8001f84 <HAL_TIM_PWM_MspInit+0x204>)
 8001efc:	4a22      	ldr	r2, [pc, #136]	@ (8001f88 <HAL_TIM_PWM_MspInit+0x208>)
 8001efe:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 8001f00:	4b20      	ldr	r3, [pc, #128]	@ (8001f84 <HAL_TIM_PWM_MspInit+0x204>)
 8001f02:	223a      	movs	r2, #58	@ 0x3a
 8001f04:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f06:	4b1f      	ldr	r3, [pc, #124]	@ (8001f84 <HAL_TIM_PWM_MspInit+0x204>)
 8001f08:	2240      	movs	r2, #64	@ 0x40
 8001f0a:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001f84 <HAL_TIM_PWM_MspInit+0x204>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001f12:	4b1c      	ldr	r3, [pc, #112]	@ (8001f84 <HAL_TIM_PWM_MspInit+0x204>)
 8001f14:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f18:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001f84 <HAL_TIM_PWM_MspInit+0x204>)
 8001f1c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f20:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f22:	4b18      	ldr	r3, [pc, #96]	@ (8001f84 <HAL_TIM_PWM_MspInit+0x204>)
 8001f24:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f28:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 8001f2a:	4b16      	ldr	r3, [pc, #88]	@ (8001f84 <HAL_TIM_PWM_MspInit+0x204>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 8001f30:	4b14      	ldr	r3, [pc, #80]	@ (8001f84 <HAL_TIM_PWM_MspInit+0x204>)
 8001f32:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f36:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f38:	4b12      	ldr	r3, [pc, #72]	@ (8001f84 <HAL_TIM_PWM_MspInit+0x204>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 8001f3e:	4811      	ldr	r0, [pc, #68]	@ (8001f84 <HAL_TIM_PWM_MspInit+0x204>)
 8001f40:	f000 fca0 	bl	8002884 <HAL_DMA_Init>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_TIM_PWM_MspInit+0x1ce>
      Error_Handler();
 8001f4a:	f7ff f871 	bl	8001030 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a0c      	ldr	r2, [pc, #48]	@ (8001f84 <HAL_TIM_PWM_MspInit+0x204>)
 8001f52:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f54:	4a0b      	ldr	r2, [pc, #44]	@ (8001f84 <HAL_TIM_PWM_MspInit+0x204>)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001f5a:	bf00      	nop
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	58024400 	.word	0x58024400
 8001f68:	24000714 	.word	0x24000714
 8001f6c:	40020088 	.word	0x40020088
 8001f70:	2400078c 	.word	0x2400078c
 8001f74:	40020028 	.word	0x40020028
 8001f78:	40000c00 	.word	0x40000c00
 8001f7c:	24000804 	.word	0x24000804
 8001f80:	40020070 	.word	0x40020070
 8001f84:	2400087c 	.word	0x2400087c
 8001f88:	40020058 	.word	0x40020058

08001f8c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM15)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a0e      	ldr	r2, [pc, #56]	@ (8001fd4 <HAL_TIM_Base_MspInit+0x48>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d116      	bne.n	8001fcc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd8 <HAL_TIM_Base_MspInit+0x4c>)
 8001fa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fa4:	4a0c      	ldr	r2, [pc, #48]	@ (8001fd8 <HAL_TIM_Base_MspInit+0x4c>)
 8001fa6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001faa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001fae:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd8 <HAL_TIM_Base_MspInit+0x4c>)
 8001fb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	68fb      	ldr	r3, [r7, #12]

    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	2074      	movs	r0, #116	@ 0x74
 8001fc2:	f000 fc16 	bl	80027f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8001fc6:	2074      	movs	r0, #116	@ 0x74
 8001fc8:	f000 fc2d 	bl	8002826 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8001fcc:	bf00      	nop
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40014000 	.word	0x40014000
 8001fd8:	58024400 	.word	0x58024400

08001fdc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08a      	sub	sp, #40	@ 0x28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe4:	f107 0314 	add.w	r3, r7, #20
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ffc:	d11f      	bne.n	800203e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffe:	4b24      	ldr	r3, [pc, #144]	@ (8002090 <HAL_TIM_MspPostInit+0xb4>)
 8002000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002004:	4a22      	ldr	r2, [pc, #136]	@ (8002090 <HAL_TIM_MspPostInit+0xb4>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800200e:	4b20      	ldr	r3, [pc, #128]	@ (8002090 <HAL_TIM_MspPostInit+0xb4>)
 8002010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800201c:	2305      	movs	r3, #5
 800201e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002020:	2302      	movs	r3, #2
 8002022:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002028:	2300      	movs	r3, #0
 800202a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800202c:	2301      	movs	r3, #1
 800202e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002030:	f107 0314 	add.w	r3, r7, #20
 8002034:	4619      	mov	r1, r3
 8002036:	4817      	ldr	r0, [pc, #92]	@ (8002094 <HAL_TIM_MspPostInit+0xb8>)
 8002038:	f002 fd6c 	bl	8004b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800203c:	e023      	b.n	8002086 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM5)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a15      	ldr	r2, [pc, #84]	@ (8002098 <HAL_TIM_MspPostInit+0xbc>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d11e      	bne.n	8002086 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002048:	4b11      	ldr	r3, [pc, #68]	@ (8002090 <HAL_TIM_MspPostInit+0xb4>)
 800204a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800204e:	4a10      	ldr	r2, [pc, #64]	@ (8002090 <HAL_TIM_MspPostInit+0xb4>)
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002058:	4b0d      	ldr	r3, [pc, #52]	@ (8002090 <HAL_TIM_MspPostInit+0xb4>)
 800205a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8002066:	230a      	movs	r3, #10
 8002068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206a:	2302      	movs	r3, #2
 800206c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002072:	2300      	movs	r3, #0
 8002074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002076:	2302      	movs	r3, #2
 8002078:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207a:	f107 0314 	add.w	r3, r7, #20
 800207e:	4619      	mov	r1, r3
 8002080:	4804      	ldr	r0, [pc, #16]	@ (8002094 <HAL_TIM_MspPostInit+0xb8>)
 8002082:	f002 fd47 	bl	8004b14 <HAL_GPIO_Init>
}
 8002086:	bf00      	nop
 8002088:	3728      	adds	r7, #40	@ 0x28
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	58024400 	.word	0x58024400
 8002094:	58020000 	.word	0x58020000
 8002098:	40000c00 	.word	0x40000c00

0800209c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800209c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80020a0:	f7fe faee 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020a4:	480c      	ldr	r0, [pc, #48]	@ (80020d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020a6:	490d      	ldr	r1, [pc, #52]	@ (80020dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020a8:	4a0d      	ldr	r2, [pc, #52]	@ (80020e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020ac:	e002      	b.n	80020b4 <LoopCopyDataInit>

080020ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020b2:	3304      	adds	r3, #4

080020b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020b8:	d3f9      	bcc.n	80020ae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ba:	4a0a      	ldr	r2, [pc, #40]	@ (80020e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020bc:	4c0a      	ldr	r4, [pc, #40]	@ (80020e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020c0:	e001      	b.n	80020c6 <LoopFillZerobss>

080020c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020c4:	3204      	adds	r2, #4

080020c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020c8:	d3fb      	bcc.n	80020c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020ca:	f00e fac7 	bl	801065c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ce:	f7fe fe19 	bl	8000d04 <main>
  bx  lr
 80020d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020d4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80020d8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80020dc:	240002f4 	.word	0x240002f4
  ldr r2, =_sidata
 80020e0:	08012b18 	.word	0x08012b18
  ldr r2, =_sbss
 80020e4:	240002f4 	.word	0x240002f4
  ldr r4, =_ebss
 80020e8:	240026c8 	.word	0x240026c8

080020ec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020ec:	e7fe      	b.n	80020ec <ADC3_IRQHandler>
	...

080020f0 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08c      	sub	sp, #48	@ 0x30
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80020fe:	79fb      	ldrb	r3, [r7, #7]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d009      	beq.n	8002118 <BSP_LED_Init+0x28>
 8002104:	79fb      	ldrb	r3, [r7, #7]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d006      	beq.n	8002118 <BSP_LED_Init+0x28>
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	2b02      	cmp	r3, #2
 800210e:	d003      	beq.n	8002118 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002110:	f06f 0301 	mvn.w	r3, #1
 8002114:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002116:	e055      	b.n	80021c4 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8002118:	79fb      	ldrb	r3, [r7, #7]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10f      	bne.n	800213e <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 800211e:	4b2c      	ldr	r3, [pc, #176]	@ (80021d0 <BSP_LED_Init+0xe0>)
 8002120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002124:	4a2a      	ldr	r2, [pc, #168]	@ (80021d0 <BSP_LED_Init+0xe0>)
 8002126:	f043 0302 	orr.w	r3, r3, #2
 800212a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800212e:	4b28      	ldr	r3, [pc, #160]	@ (80021d0 <BSP_LED_Init+0xe0>)
 8002130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	617b      	str	r3, [r7, #20]
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	e021      	b.n	8002182 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d10f      	bne.n	8002164 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8002144:	4b22      	ldr	r3, [pc, #136]	@ (80021d0 <BSP_LED_Init+0xe0>)
 8002146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800214a:	4a21      	ldr	r2, [pc, #132]	@ (80021d0 <BSP_LED_Init+0xe0>)
 800214c:	f043 0310 	orr.w	r3, r3, #16
 8002150:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002154:	4b1e      	ldr	r3, [pc, #120]	@ (80021d0 <BSP_LED_Init+0xe0>)
 8002156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800215a:	f003 0310 	and.w	r3, r3, #16
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	e00e      	b.n	8002182 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8002164:	4b1a      	ldr	r3, [pc, #104]	@ (80021d0 <BSP_LED_Init+0xe0>)
 8002166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800216a:	4a19      	ldr	r2, [pc, #100]	@ (80021d0 <BSP_LED_Init+0xe0>)
 800216c:	f043 0302 	orr.w	r3, r3, #2
 8002170:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002174:	4b16      	ldr	r3, [pc, #88]	@ (80021d0 <BSP_LED_Init+0xe0>)
 8002176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	4a13      	ldr	r2, [pc, #76]	@ (80021d4 <BSP_LED_Init+0xe4>)
 8002186:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800218a:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800218c:	2301      	movs	r3, #1
 800218e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8002190:	2300      	movs	r3, #0
 8002192:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002194:	2303      	movs	r3, #3
 8002196:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	4a0f      	ldr	r2, [pc, #60]	@ (80021d8 <BSP_LED_Init+0xe8>)
 800219c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a0:	f107 0218 	add.w	r2, r7, #24
 80021a4:	4611      	mov	r1, r2
 80021a6:	4618      	mov	r0, r3
 80021a8:	f002 fcb4 	bl	8004b14 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80021ac:	79fb      	ldrb	r3, [r7, #7]
 80021ae:	4a0a      	ldr	r2, [pc, #40]	@ (80021d8 <BSP_LED_Init+0xe8>)
 80021b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	4a07      	ldr	r2, [pc, #28]	@ (80021d4 <BSP_LED_Init+0xe4>)
 80021b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021bc:	2200      	movs	r2, #0
 80021be:	4619      	mov	r1, r3
 80021c0:	f002 fe58 	bl	8004e74 <HAL_GPIO_WritePin>
  }

  return ret;
 80021c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3730      	adds	r7, #48	@ 0x30
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	58024400 	.word	0x58024400
 80021d4:	08012760 	.word	0x08012760
 80021d8:	24000018 	.word	0x24000018

080021dc <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b088      	sub	sp, #32
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	460a      	mov	r2, r1
 80021e6:	71fb      	strb	r3, [r7, #7]
 80021e8:	4613      	mov	r3, r2
 80021ea:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80021ec:	4b2e      	ldr	r3, [pc, #184]	@ (80022a8 <BSP_PB_Init+0xcc>)
 80021ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021f2:	4a2d      	ldr	r2, [pc, #180]	@ (80022a8 <BSP_PB_Init+0xcc>)
 80021f4:	f043 0304 	orr.w	r3, r3, #4
 80021f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021fc:	4b2a      	ldr	r3, [pc, #168]	@ (80022a8 <BSP_PB_Init+0xcc>)
 80021fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002202:	f003 0304 	and.w	r3, r3, #4
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800220a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800220e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002210:	2302      	movs	r3, #2
 8002212:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002214:	2302      	movs	r3, #2
 8002216:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8002218:	79bb      	ldrb	r3, [r7, #6]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10c      	bne.n	8002238 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8002222:	79fb      	ldrb	r3, [r7, #7]
 8002224:	4a21      	ldr	r2, [pc, #132]	@ (80022ac <BSP_PB_Init+0xd0>)
 8002226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800222a:	f107 020c 	add.w	r2, r7, #12
 800222e:	4611      	mov	r1, r2
 8002230:	4618      	mov	r0, r3
 8002232:	f002 fc6f 	bl	8004b14 <HAL_GPIO_Init>
 8002236:	e031      	b.n	800229c <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002238:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800223c:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	4a1a      	ldr	r2, [pc, #104]	@ (80022ac <BSP_PB_Init+0xd0>)
 8002242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002246:	f107 020c 	add.w	r2, r7, #12
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f002 fc61 	bl	8004b14 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	4a16      	ldr	r2, [pc, #88]	@ (80022b0 <BSP_PB_Init+0xd4>)
 8002258:	441a      	add	r2, r3
 800225a:	79fb      	ldrb	r3, [r7, #7]
 800225c:	4915      	ldr	r1, [pc, #84]	@ (80022b4 <BSP_PB_Init+0xd8>)
 800225e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002262:	4619      	mov	r1, r3
 8002264:	4610      	mov	r0, r2
 8002266:	f002 fc04 	bl	8004a72 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	4a10      	ldr	r2, [pc, #64]	@ (80022b0 <BSP_PB_Init+0xd4>)
 8002270:	1898      	adds	r0, r3, r2
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	4a10      	ldr	r2, [pc, #64]	@ (80022b8 <BSP_PB_Init+0xdc>)
 8002276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227a:	461a      	mov	r2, r3
 800227c:	2100      	movs	r1, #0
 800227e:	f002 fbd9 	bl	8004a34 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002282:	2028      	movs	r0, #40	@ 0x28
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	4a0d      	ldr	r2, [pc, #52]	@ (80022bc <BSP_PB_Init+0xe0>)
 8002288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800228c:	2200      	movs	r2, #0
 800228e:	4619      	mov	r1, r3
 8002290:	f000 faaf 	bl	80027f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002294:	2328      	movs	r3, #40	@ 0x28
 8002296:	4618      	mov	r0, r3
 8002298:	f000 fac5 	bl	8002826 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3720      	adds	r7, #32
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	58024400 	.word	0x58024400
 80022ac:	24000024 	.word	0x24000024
 80022b0:	240008f4 	.word	0x240008f4
 80022b4:	08012768 	.word	0x08012768
 80022b8:	24000028 	.word	0x24000028
 80022bc:	2400002c 	.word	0x2400002c

080022c0 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	4a04      	ldr	r2, [pc, #16]	@ (80022e0 <BSP_PB_IRQHandler+0x20>)
 80022d0:	4413      	add	r3, r2
 80022d2:	4618      	mov	r0, r3
 80022d4:	f002 fbe2 	bl	8004a9c <HAL_EXTI_IRQHandler>
}
 80022d8:	bf00      	nop
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	240008f4 	.word	0x240008f4

080022e4 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	6039      	str	r1, [r7, #0]
 8002306:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002308:	2300      	movs	r3, #0
 800230a:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 800230c:	79fb      	ldrb	r3, [r7, #7]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002312:	f06f 0301 	mvn.w	r3, #1
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	e018      	b.n	800234c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800231a:	79fb      	ldrb	r3, [r7, #7]
 800231c:	2294      	movs	r2, #148	@ 0x94
 800231e:	fb02 f303 	mul.w	r3, r2, r3
 8002322:	4a0d      	ldr	r2, [pc, #52]	@ (8002358 <BSP_COM_Init+0x5c>)
 8002324:	4413      	add	r3, r2
 8002326:	4618      	mov	r0, r3
 8002328:	f000 f86e 	bl	8002408 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	2294      	movs	r2, #148	@ 0x94
 8002330:	fb02 f303 	mul.w	r3, r2, r3
 8002334:	4a08      	ldr	r2, [pc, #32]	@ (8002358 <BSP_COM_Init+0x5c>)
 8002336:	4413      	add	r3, r2
 8002338:	6839      	ldr	r1, [r7, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f000 f80e 	bl	800235c <MX_USART3_Init>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d002      	beq.n	800234c <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002346:	f06f 0303 	mvn.w	r3, #3
 800234a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800234c:	68fb      	ldr	r3, [r7, #12]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	240008fc 	.word	0x240008fc

0800235c <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8002366:	4b15      	ldr	r3, [pc, #84]	@ (80023bc <MX_USART3_Init+0x60>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	220c      	movs	r2, #12
 800237a:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	895b      	ldrh	r3, [r3, #10]
 8002380:	461a      	mov	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	891b      	ldrh	r3, [r3, #8]
 8002392:	461a      	mov	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	899b      	ldrh	r3, [r3, #12]
 800239c:	461a      	mov	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80023a8:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f008 fa90 	bl	800a8d0 <HAL_UART_Init>
 80023b0:	4603      	mov	r3, r0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	24000014 	.word	0x24000014

080023c0 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 80023c8:	4b09      	ldr	r3, [pc, #36]	@ (80023f0 <__io_putchar+0x30>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	461a      	mov	r2, r3
 80023ce:	2394      	movs	r3, #148	@ 0x94
 80023d0:	fb02 f303 	mul.w	r3, r2, r3
 80023d4:	4a07      	ldr	r2, [pc, #28]	@ (80023f4 <__io_putchar+0x34>)
 80023d6:	1898      	adds	r0, r3, r2
 80023d8:	1d39      	adds	r1, r7, #4
 80023da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023de:	2201      	movs	r2, #1
 80023e0:	f008 fad0 	bl	800a984 <HAL_UART_Transmit>
  return ch;
 80023e4:	687b      	ldr	r3, [r7, #4]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	24000990 	.word	0x24000990
 80023f4:	240008fc 	.word	0x240008fc

080023f8 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80023fc:	2000      	movs	r0, #0
 80023fe:	f7ff ff71 	bl	80022e4 <BSP_PB_Callback>
}
 8002402:	bf00      	nop
 8002404:	bd80      	pop	{r7, pc}
	...

08002408 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08a      	sub	sp, #40	@ 0x28
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8002410:	4b27      	ldr	r3, [pc, #156]	@ (80024b0 <COM1_MspInit+0xa8>)
 8002412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002416:	4a26      	ldr	r2, [pc, #152]	@ (80024b0 <COM1_MspInit+0xa8>)
 8002418:	f043 0308 	orr.w	r3, r3, #8
 800241c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002420:	4b23      	ldr	r3, [pc, #140]	@ (80024b0 <COM1_MspInit+0xa8>)
 8002422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	613b      	str	r3, [r7, #16]
 800242c:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 800242e:	4b20      	ldr	r3, [pc, #128]	@ (80024b0 <COM1_MspInit+0xa8>)
 8002430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002434:	4a1e      	ldr	r2, [pc, #120]	@ (80024b0 <COM1_MspInit+0xa8>)
 8002436:	f043 0308 	orr.w	r3, r3, #8
 800243a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800243e:	4b1c      	ldr	r3, [pc, #112]	@ (80024b0 <COM1_MspInit+0xa8>)
 8002440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002444:	f003 0308 	and.w	r3, r3, #8
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 800244c:	4b18      	ldr	r3, [pc, #96]	@ (80024b0 <COM1_MspInit+0xa8>)
 800244e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002452:	4a17      	ldr	r2, [pc, #92]	@ (80024b0 <COM1_MspInit+0xa8>)
 8002454:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002458:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800245c:	4b14      	ldr	r3, [pc, #80]	@ (80024b0 <COM1_MspInit+0xa8>)
 800245e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002462:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002466:	60bb      	str	r3, [r7, #8]
 8002468:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 800246a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800246e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002470:	2302      	movs	r3, #2
 8002472:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002474:	2302      	movs	r3, #2
 8002476:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002478:	2301      	movs	r3, #1
 800247a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 800247c:	2307      	movs	r3, #7
 800247e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002480:	f107 0314 	add.w	r3, r7, #20
 8002484:	4619      	mov	r1, r3
 8002486:	480b      	ldr	r0, [pc, #44]	@ (80024b4 <COM1_MspInit+0xac>)
 8002488:	f002 fb44 	bl	8004b14 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 800248c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002490:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002492:	2302      	movs	r3, #2
 8002494:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8002496:	2307      	movs	r3, #7
 8002498:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800249a:	f107 0314 	add.w	r3, r7, #20
 800249e:	4619      	mov	r1, r3
 80024a0:	4804      	ldr	r0, [pc, #16]	@ (80024b4 <COM1_MspInit+0xac>)
 80024a2:	f002 fb37 	bl	8004b14 <HAL_GPIO_Init>
}
 80024a6:	bf00      	nop
 80024a8:	3728      	adds	r7, #40	@ 0x28
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	58024400 	.word	0x58024400
 80024b4:	58020c00 	.word	0x58020c00

080024b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024be:	2003      	movs	r0, #3
 80024c0:	f000 f98c 	bl	80027dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80024c4:	f004 fe50 	bl	8007168 <HAL_RCC_GetSysClockFreq>
 80024c8:	4602      	mov	r2, r0
 80024ca:	4b15      	ldr	r3, [pc, #84]	@ (8002520 <HAL_Init+0x68>)
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	0a1b      	lsrs	r3, r3, #8
 80024d0:	f003 030f 	and.w	r3, r3, #15
 80024d4:	4913      	ldr	r1, [pc, #76]	@ (8002524 <HAL_Init+0x6c>)
 80024d6:	5ccb      	ldrb	r3, [r1, r3]
 80024d8:	f003 031f 	and.w	r3, r3, #31
 80024dc:	fa22 f303 	lsr.w	r3, r2, r3
 80024e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002520 <HAL_Init+0x68>)
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	4a0e      	ldr	r2, [pc, #56]	@ (8002524 <HAL_Init+0x6c>)
 80024ec:	5cd3      	ldrb	r3, [r2, r3]
 80024ee:	f003 031f 	and.w	r3, r3, #31
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	fa22 f303 	lsr.w	r3, r2, r3
 80024f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002528 <HAL_Init+0x70>)
 80024fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024fc:	4a0b      	ldr	r2, [pc, #44]	@ (800252c <HAL_Init+0x74>)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002502:	2000      	movs	r0, #0
 8002504:	f000 f814 	bl	8002530 <HAL_InitTick>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e002      	b.n	8002518 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002512:	f7fe fd93 	bl	800103c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	58024400 	.word	0x58024400
 8002524:	08012750 	.word	0x08012750
 8002528:	24000004 	.word	0x24000004
 800252c:	24000000 	.word	0x24000000

08002530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002538:	4b15      	ldr	r3, [pc, #84]	@ (8002590 <HAL_InitTick+0x60>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e021      	b.n	8002588 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002544:	4b13      	ldr	r3, [pc, #76]	@ (8002594 <HAL_InitTick+0x64>)
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	4b11      	ldr	r3, [pc, #68]	@ (8002590 <HAL_InitTick+0x60>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	4619      	mov	r1, r3
 800254e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002552:	fbb3 f3f1 	udiv	r3, r3, r1
 8002556:	fbb2 f3f3 	udiv	r3, r2, r3
 800255a:	4618      	mov	r0, r3
 800255c:	f000 f971 	bl	8002842 <HAL_SYSTICK_Config>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e00e      	b.n	8002588 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b0f      	cmp	r3, #15
 800256e:	d80a      	bhi.n	8002586 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002570:	2200      	movs	r2, #0
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	f04f 30ff 	mov.w	r0, #4294967295
 8002578:	f000 f93b 	bl	80027f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800257c:	4a06      	ldr	r2, [pc, #24]	@ (8002598 <HAL_InitTick+0x68>)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002582:	2300      	movs	r3, #0
 8002584:	e000      	b.n	8002588 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
}
 8002588:	4618      	mov	r0, r3
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	24000034 	.word	0x24000034
 8002594:	24000000 	.word	0x24000000
 8002598:	24000030 	.word	0x24000030

0800259c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025a0:	4b06      	ldr	r3, [pc, #24]	@ (80025bc <HAL_IncTick+0x20>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	461a      	mov	r2, r3
 80025a6:	4b06      	ldr	r3, [pc, #24]	@ (80025c0 <HAL_IncTick+0x24>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4413      	add	r3, r2
 80025ac:	4a04      	ldr	r2, [pc, #16]	@ (80025c0 <HAL_IncTick+0x24>)
 80025ae:	6013      	str	r3, [r2, #0]
}
 80025b0:	bf00      	nop
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	24000034 	.word	0x24000034
 80025c0:	24000994 	.word	0x24000994

080025c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  return uwTick;
 80025c8:	4b03      	ldr	r3, [pc, #12]	@ (80025d8 <HAL_GetTick+0x14>)
 80025ca:	681b      	ldr	r3, [r3, #0]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	24000994 	.word	0x24000994

080025dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025e4:	f7ff ffee 	bl	80025c4 <HAL_GetTick>
 80025e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f4:	d005      	beq.n	8002602 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002620 <HAL_Delay+0x44>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	461a      	mov	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	4413      	add	r3, r2
 8002600:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002602:	bf00      	nop
 8002604:	f7ff ffde 	bl	80025c4 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	429a      	cmp	r2, r3
 8002612:	d8f7      	bhi.n	8002604 <HAL_Delay+0x28>
  {
  }
}
 8002614:	bf00      	nop
 8002616:	bf00      	nop
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	24000034 	.word	0x24000034

08002624 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002628:	4b03      	ldr	r3, [pc, #12]	@ (8002638 <HAL_GetREVID+0x14>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	0c1b      	lsrs	r3, r3, #16
}
 800262e:	4618      	mov	r0, r3
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	5c001000 	.word	0x5c001000

0800263c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800264c:	4b0b      	ldr	r3, [pc, #44]	@ (800267c <__NVIC_SetPriorityGrouping+0x40>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002658:	4013      	ands	r3, r2
 800265a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002664:	4b06      	ldr	r3, [pc, #24]	@ (8002680 <__NVIC_SetPriorityGrouping+0x44>)
 8002666:	4313      	orrs	r3, r2
 8002668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800266a:	4a04      	ldr	r2, [pc, #16]	@ (800267c <__NVIC_SetPriorityGrouping+0x40>)
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	60d3      	str	r3, [r2, #12]
}
 8002670:	bf00      	nop
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	e000ed00 	.word	0xe000ed00
 8002680:	05fa0000 	.word	0x05fa0000

08002684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002688:	4b04      	ldr	r3, [pc, #16]	@ (800269c <__NVIC_GetPriorityGrouping+0x18>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	0a1b      	lsrs	r3, r3, #8
 800268e:	f003 0307 	and.w	r3, r3, #7
}
 8002692:	4618      	mov	r0, r3
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	e000ed00 	.word	0xe000ed00

080026a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	db0b      	blt.n	80026ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026b2:	88fb      	ldrh	r3, [r7, #6]
 80026b4:	f003 021f 	and.w	r2, r3, #31
 80026b8:	4907      	ldr	r1, [pc, #28]	@ (80026d8 <__NVIC_EnableIRQ+0x38>)
 80026ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026be:	095b      	lsrs	r3, r3, #5
 80026c0:	2001      	movs	r0, #1
 80026c2:	fa00 f202 	lsl.w	r2, r0, r2
 80026c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	e000e100 	.word	0xe000e100

080026dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	6039      	str	r1, [r7, #0]
 80026e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	db0a      	blt.n	8002706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	490c      	ldr	r1, [pc, #48]	@ (8002728 <__NVIC_SetPriority+0x4c>)
 80026f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026fa:	0112      	lsls	r2, r2, #4
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	440b      	add	r3, r1
 8002700:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002704:	e00a      	b.n	800271c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	b2da      	uxtb	r2, r3
 800270a:	4908      	ldr	r1, [pc, #32]	@ (800272c <__NVIC_SetPriority+0x50>)
 800270c:	88fb      	ldrh	r3, [r7, #6]
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	3b04      	subs	r3, #4
 8002714:	0112      	lsls	r2, r2, #4
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	440b      	add	r3, r1
 800271a:	761a      	strb	r2, [r3, #24]
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	e000e100 	.word	0xe000e100
 800272c:	e000ed00 	.word	0xe000ed00

08002730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002730:	b480      	push	{r7}
 8002732:	b089      	sub	sp, #36	@ 0x24
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f1c3 0307 	rsb	r3, r3, #7
 800274a:	2b04      	cmp	r3, #4
 800274c:	bf28      	it	cs
 800274e:	2304      	movcs	r3, #4
 8002750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	3304      	adds	r3, #4
 8002756:	2b06      	cmp	r3, #6
 8002758:	d902      	bls.n	8002760 <NVIC_EncodePriority+0x30>
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	3b03      	subs	r3, #3
 800275e:	e000      	b.n	8002762 <NVIC_EncodePriority+0x32>
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002764:	f04f 32ff 	mov.w	r2, #4294967295
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43da      	mvns	r2, r3
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	401a      	ands	r2, r3
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002778:	f04f 31ff 	mov.w	r1, #4294967295
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	fa01 f303 	lsl.w	r3, r1, r3
 8002782:	43d9      	mvns	r1, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002788:	4313      	orrs	r3, r2
         );
}
 800278a:	4618      	mov	r0, r3
 800278c:	3724      	adds	r7, #36	@ 0x24
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
	...

08002798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027a8:	d301      	bcc.n	80027ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027aa:	2301      	movs	r3, #1
 80027ac:	e00f      	b.n	80027ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ae:	4a0a      	ldr	r2, [pc, #40]	@ (80027d8 <SysTick_Config+0x40>)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3b01      	subs	r3, #1
 80027b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027b6:	210f      	movs	r1, #15
 80027b8:	f04f 30ff 	mov.w	r0, #4294967295
 80027bc:	f7ff ff8e 	bl	80026dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027c0:	4b05      	ldr	r3, [pc, #20]	@ (80027d8 <SysTick_Config+0x40>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027c6:	4b04      	ldr	r3, [pc, #16]	@ (80027d8 <SysTick_Config+0x40>)
 80027c8:	2207      	movs	r2, #7
 80027ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	e000e010 	.word	0xe000e010

080027dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7ff ff29 	bl	800263c <__NVIC_SetPriorityGrouping>
}
 80027ea:	bf00      	nop
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b086      	sub	sp, #24
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	4603      	mov	r3, r0
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	607a      	str	r2, [r7, #4]
 80027fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002800:	f7ff ff40 	bl	8002684 <__NVIC_GetPriorityGrouping>
 8002804:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	68b9      	ldr	r1, [r7, #8]
 800280a:	6978      	ldr	r0, [r7, #20]
 800280c:	f7ff ff90 	bl	8002730 <NVIC_EncodePriority>
 8002810:	4602      	mov	r2, r0
 8002812:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002816:	4611      	mov	r1, r2
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff ff5f 	bl	80026dc <__NVIC_SetPriority>
}
 800281e:	bf00      	nop
 8002820:	3718      	adds	r7, #24
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b082      	sub	sp, #8
 800282a:	af00      	add	r7, sp, #0
 800282c:	4603      	mov	r3, r0
 800282e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002830:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff ff33 	bl	80026a0 <__NVIC_EnableIRQ>
}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b082      	sub	sp, #8
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7ff ffa4 	bl	8002798 <SysTick_Config>
 8002850:	4603      	mov	r3, r0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
	...

0800285c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8002860:	4b07      	ldr	r3, [pc, #28]	@ (8002880 <HAL_GetCurrentCPUID+0x24>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	091b      	lsrs	r3, r3, #4
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	2b07      	cmp	r3, #7
 800286c:	d101      	bne.n	8002872 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 800286e:	2303      	movs	r3, #3
 8002870:	e000      	b.n	8002874 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8002872:	2301      	movs	r3, #1
  }
}
 8002874:	4618      	mov	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	e000ed00 	.word	0xe000ed00

08002884 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800288c:	f7ff fe9a 	bl	80025c4 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e316      	b.n	8002eca <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a66      	ldr	r2, [pc, #408]	@ (8002a3c <HAL_DMA_Init+0x1b8>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d04a      	beq.n	800293c <HAL_DMA_Init+0xb8>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a65      	ldr	r2, [pc, #404]	@ (8002a40 <HAL_DMA_Init+0x1bc>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d045      	beq.n	800293c <HAL_DMA_Init+0xb8>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a63      	ldr	r2, [pc, #396]	@ (8002a44 <HAL_DMA_Init+0x1c0>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d040      	beq.n	800293c <HAL_DMA_Init+0xb8>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a62      	ldr	r2, [pc, #392]	@ (8002a48 <HAL_DMA_Init+0x1c4>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d03b      	beq.n	800293c <HAL_DMA_Init+0xb8>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a60      	ldr	r2, [pc, #384]	@ (8002a4c <HAL_DMA_Init+0x1c8>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d036      	beq.n	800293c <HAL_DMA_Init+0xb8>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a5f      	ldr	r2, [pc, #380]	@ (8002a50 <HAL_DMA_Init+0x1cc>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d031      	beq.n	800293c <HAL_DMA_Init+0xb8>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a5d      	ldr	r2, [pc, #372]	@ (8002a54 <HAL_DMA_Init+0x1d0>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d02c      	beq.n	800293c <HAL_DMA_Init+0xb8>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a5c      	ldr	r2, [pc, #368]	@ (8002a58 <HAL_DMA_Init+0x1d4>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d027      	beq.n	800293c <HAL_DMA_Init+0xb8>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a5a      	ldr	r2, [pc, #360]	@ (8002a5c <HAL_DMA_Init+0x1d8>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d022      	beq.n	800293c <HAL_DMA_Init+0xb8>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a59      	ldr	r2, [pc, #356]	@ (8002a60 <HAL_DMA_Init+0x1dc>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d01d      	beq.n	800293c <HAL_DMA_Init+0xb8>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a57      	ldr	r2, [pc, #348]	@ (8002a64 <HAL_DMA_Init+0x1e0>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d018      	beq.n	800293c <HAL_DMA_Init+0xb8>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a56      	ldr	r2, [pc, #344]	@ (8002a68 <HAL_DMA_Init+0x1e4>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d013      	beq.n	800293c <HAL_DMA_Init+0xb8>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a54      	ldr	r2, [pc, #336]	@ (8002a6c <HAL_DMA_Init+0x1e8>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d00e      	beq.n	800293c <HAL_DMA_Init+0xb8>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a53      	ldr	r2, [pc, #332]	@ (8002a70 <HAL_DMA_Init+0x1ec>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d009      	beq.n	800293c <HAL_DMA_Init+0xb8>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a51      	ldr	r2, [pc, #324]	@ (8002a74 <HAL_DMA_Init+0x1f0>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d004      	beq.n	800293c <HAL_DMA_Init+0xb8>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a50      	ldr	r2, [pc, #320]	@ (8002a78 <HAL_DMA_Init+0x1f4>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d101      	bne.n	8002940 <HAL_DMA_Init+0xbc>
 800293c:	2301      	movs	r3, #1
 800293e:	e000      	b.n	8002942 <HAL_DMA_Init+0xbe>
 8002940:	2300      	movs	r3, #0
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 813b 	beq.w	8002bbe <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2202      	movs	r2, #2
 800294c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a37      	ldr	r2, [pc, #220]	@ (8002a3c <HAL_DMA_Init+0x1b8>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d04a      	beq.n	80029f8 <HAL_DMA_Init+0x174>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a36      	ldr	r2, [pc, #216]	@ (8002a40 <HAL_DMA_Init+0x1bc>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d045      	beq.n	80029f8 <HAL_DMA_Init+0x174>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a34      	ldr	r2, [pc, #208]	@ (8002a44 <HAL_DMA_Init+0x1c0>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d040      	beq.n	80029f8 <HAL_DMA_Init+0x174>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a33      	ldr	r2, [pc, #204]	@ (8002a48 <HAL_DMA_Init+0x1c4>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d03b      	beq.n	80029f8 <HAL_DMA_Init+0x174>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a31      	ldr	r2, [pc, #196]	@ (8002a4c <HAL_DMA_Init+0x1c8>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d036      	beq.n	80029f8 <HAL_DMA_Init+0x174>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a30      	ldr	r2, [pc, #192]	@ (8002a50 <HAL_DMA_Init+0x1cc>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d031      	beq.n	80029f8 <HAL_DMA_Init+0x174>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a2e      	ldr	r2, [pc, #184]	@ (8002a54 <HAL_DMA_Init+0x1d0>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d02c      	beq.n	80029f8 <HAL_DMA_Init+0x174>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a2d      	ldr	r2, [pc, #180]	@ (8002a58 <HAL_DMA_Init+0x1d4>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d027      	beq.n	80029f8 <HAL_DMA_Init+0x174>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a2b      	ldr	r2, [pc, #172]	@ (8002a5c <HAL_DMA_Init+0x1d8>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d022      	beq.n	80029f8 <HAL_DMA_Init+0x174>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a2a      	ldr	r2, [pc, #168]	@ (8002a60 <HAL_DMA_Init+0x1dc>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d01d      	beq.n	80029f8 <HAL_DMA_Init+0x174>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a28      	ldr	r2, [pc, #160]	@ (8002a64 <HAL_DMA_Init+0x1e0>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d018      	beq.n	80029f8 <HAL_DMA_Init+0x174>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a27      	ldr	r2, [pc, #156]	@ (8002a68 <HAL_DMA_Init+0x1e4>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d013      	beq.n	80029f8 <HAL_DMA_Init+0x174>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a25      	ldr	r2, [pc, #148]	@ (8002a6c <HAL_DMA_Init+0x1e8>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d00e      	beq.n	80029f8 <HAL_DMA_Init+0x174>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a24      	ldr	r2, [pc, #144]	@ (8002a70 <HAL_DMA_Init+0x1ec>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d009      	beq.n	80029f8 <HAL_DMA_Init+0x174>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a22      	ldr	r2, [pc, #136]	@ (8002a74 <HAL_DMA_Init+0x1f0>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d004      	beq.n	80029f8 <HAL_DMA_Init+0x174>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a21      	ldr	r2, [pc, #132]	@ (8002a78 <HAL_DMA_Init+0x1f4>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d108      	bne.n	8002a0a <HAL_DMA_Init+0x186>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0201 	bic.w	r2, r2, #1
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	e007      	b.n	8002a1a <HAL_DMA_Init+0x196>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0201 	bic.w	r2, r2, #1
 8002a18:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002a1a:	e02f      	b.n	8002a7c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a1c:	f7ff fdd2 	bl	80025c4 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b05      	cmp	r3, #5
 8002a28:	d928      	bls.n	8002a7c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2203      	movs	r2, #3
 8002a34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e246      	b.n	8002eca <HAL_DMA_Init+0x646>
 8002a3c:	40020010 	.word	0x40020010
 8002a40:	40020028 	.word	0x40020028
 8002a44:	40020040 	.word	0x40020040
 8002a48:	40020058 	.word	0x40020058
 8002a4c:	40020070 	.word	0x40020070
 8002a50:	40020088 	.word	0x40020088
 8002a54:	400200a0 	.word	0x400200a0
 8002a58:	400200b8 	.word	0x400200b8
 8002a5c:	40020410 	.word	0x40020410
 8002a60:	40020428 	.word	0x40020428
 8002a64:	40020440 	.word	0x40020440
 8002a68:	40020458 	.word	0x40020458
 8002a6c:	40020470 	.word	0x40020470
 8002a70:	40020488 	.word	0x40020488
 8002a74:	400204a0 	.word	0x400204a0
 8002a78:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1c8      	bne.n	8002a1c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	4b83      	ldr	r3, [pc, #524]	@ (8002ca4 <HAL_DMA_Init+0x420>)
 8002a96:	4013      	ands	r3, r2
 8002a98:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002aa2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aae:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aba:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002acc:	2b04      	cmp	r3, #4
 8002ace:	d107      	bne.n	8002ae0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002ae0:	4b71      	ldr	r3, [pc, #452]	@ (8002ca8 <HAL_DMA_Init+0x424>)
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	4b71      	ldr	r3, [pc, #452]	@ (8002cac <HAL_DMA_Init+0x428>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002aec:	d328      	bcc.n	8002b40 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b28      	cmp	r3, #40	@ 0x28
 8002af4:	d903      	bls.n	8002afe <HAL_DMA_Init+0x27a>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b2e      	cmp	r3, #46	@ 0x2e
 8002afc:	d917      	bls.n	8002b2e <HAL_DMA_Init+0x2aa>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b3e      	cmp	r3, #62	@ 0x3e
 8002b04:	d903      	bls.n	8002b0e <HAL_DMA_Init+0x28a>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b42      	cmp	r3, #66	@ 0x42
 8002b0c:	d90f      	bls.n	8002b2e <HAL_DMA_Init+0x2aa>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b46      	cmp	r3, #70	@ 0x46
 8002b14:	d903      	bls.n	8002b1e <HAL_DMA_Init+0x29a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b48      	cmp	r3, #72	@ 0x48
 8002b1c:	d907      	bls.n	8002b2e <HAL_DMA_Init+0x2aa>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2b4e      	cmp	r3, #78	@ 0x4e
 8002b24:	d905      	bls.n	8002b32 <HAL_DMA_Init+0x2ae>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2b52      	cmp	r3, #82	@ 0x52
 8002b2c:	d801      	bhi.n	8002b32 <HAL_DMA_Init+0x2ae>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <HAL_DMA_Init+0x2b0>
 8002b32:	2300      	movs	r3, #0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d003      	beq.n	8002b40 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b3e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	f023 0307 	bic.w	r3, r3, #7
 8002b56:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d117      	bne.n	8002b9a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00e      	beq.n	8002b9a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f001 fdcf 	bl	8004720 <DMA_CheckFifoParam>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d008      	beq.n	8002b9a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2240      	movs	r2, #64	@ 0x40
 8002b8c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e197      	b.n	8002eca <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f001 fd0a 	bl	80045bc <DMA_CalcBaseAndBitshift>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb0:	f003 031f 	and.w	r3, r3, #31
 8002bb4:	223f      	movs	r2, #63	@ 0x3f
 8002bb6:	409a      	lsls	r2, r3
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	609a      	str	r2, [r3, #8]
 8002bbc:	e0cd      	b.n	8002d5a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a3b      	ldr	r2, [pc, #236]	@ (8002cb0 <HAL_DMA_Init+0x42c>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d022      	beq.n	8002c0e <HAL_DMA_Init+0x38a>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a39      	ldr	r2, [pc, #228]	@ (8002cb4 <HAL_DMA_Init+0x430>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d01d      	beq.n	8002c0e <HAL_DMA_Init+0x38a>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a38      	ldr	r2, [pc, #224]	@ (8002cb8 <HAL_DMA_Init+0x434>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d018      	beq.n	8002c0e <HAL_DMA_Init+0x38a>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a36      	ldr	r2, [pc, #216]	@ (8002cbc <HAL_DMA_Init+0x438>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d013      	beq.n	8002c0e <HAL_DMA_Init+0x38a>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a35      	ldr	r2, [pc, #212]	@ (8002cc0 <HAL_DMA_Init+0x43c>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d00e      	beq.n	8002c0e <HAL_DMA_Init+0x38a>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a33      	ldr	r2, [pc, #204]	@ (8002cc4 <HAL_DMA_Init+0x440>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d009      	beq.n	8002c0e <HAL_DMA_Init+0x38a>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a32      	ldr	r2, [pc, #200]	@ (8002cc8 <HAL_DMA_Init+0x444>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d004      	beq.n	8002c0e <HAL_DMA_Init+0x38a>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a30      	ldr	r2, [pc, #192]	@ (8002ccc <HAL_DMA_Init+0x448>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d101      	bne.n	8002c12 <HAL_DMA_Init+0x38e>
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e000      	b.n	8002c14 <HAL_DMA_Init+0x390>
 8002c12:	2300      	movs	r3, #0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 8097 	beq.w	8002d48 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a24      	ldr	r2, [pc, #144]	@ (8002cb0 <HAL_DMA_Init+0x42c>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d021      	beq.n	8002c68 <HAL_DMA_Init+0x3e4>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a22      	ldr	r2, [pc, #136]	@ (8002cb4 <HAL_DMA_Init+0x430>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d01c      	beq.n	8002c68 <HAL_DMA_Init+0x3e4>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a21      	ldr	r2, [pc, #132]	@ (8002cb8 <HAL_DMA_Init+0x434>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d017      	beq.n	8002c68 <HAL_DMA_Init+0x3e4>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a1f      	ldr	r2, [pc, #124]	@ (8002cbc <HAL_DMA_Init+0x438>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d012      	beq.n	8002c68 <HAL_DMA_Init+0x3e4>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a1e      	ldr	r2, [pc, #120]	@ (8002cc0 <HAL_DMA_Init+0x43c>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d00d      	beq.n	8002c68 <HAL_DMA_Init+0x3e4>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a1c      	ldr	r2, [pc, #112]	@ (8002cc4 <HAL_DMA_Init+0x440>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d008      	beq.n	8002c68 <HAL_DMA_Init+0x3e4>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a1b      	ldr	r2, [pc, #108]	@ (8002cc8 <HAL_DMA_Init+0x444>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d003      	beq.n	8002c68 <HAL_DMA_Init+0x3e4>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a19      	ldr	r2, [pc, #100]	@ (8002ccc <HAL_DMA_Init+0x448>)
 8002c66:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	4b13      	ldr	r3, [pc, #76]	@ (8002cd0 <HAL_DMA_Init+0x44c>)
 8002c84:	4013      	ands	r3, r2
 8002c86:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	2b40      	cmp	r3, #64	@ 0x40
 8002c8e:	d021      	beq.n	8002cd4 <HAL_DMA_Init+0x450>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	2b80      	cmp	r3, #128	@ 0x80
 8002c96:	d102      	bne.n	8002c9e <HAL_DMA_Init+0x41a>
 8002c98:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002c9c:	e01b      	b.n	8002cd6 <HAL_DMA_Init+0x452>
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	e019      	b.n	8002cd6 <HAL_DMA_Init+0x452>
 8002ca2:	bf00      	nop
 8002ca4:	fe10803f 	.word	0xfe10803f
 8002ca8:	5c001000 	.word	0x5c001000
 8002cac:	ffff0000 	.word	0xffff0000
 8002cb0:	58025408 	.word	0x58025408
 8002cb4:	5802541c 	.word	0x5802541c
 8002cb8:	58025430 	.word	0x58025430
 8002cbc:	58025444 	.word	0x58025444
 8002cc0:	58025458 	.word	0x58025458
 8002cc4:	5802546c 	.word	0x5802546c
 8002cc8:	58025480 	.word	0x58025480
 8002ccc:	58025494 	.word	0x58025494
 8002cd0:	fffe000f 	.word	0xfffe000f
 8002cd4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	68d2      	ldr	r2, [r2, #12]
 8002cda:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002cdc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002ce4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002cec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002cf4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002cfc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002d04:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4b6e      	ldr	r3, [pc, #440]	@ (8002ed4 <HAL_DMA_Init+0x650>)
 8002d1c:	4413      	add	r3, r2
 8002d1e:	4a6e      	ldr	r2, [pc, #440]	@ (8002ed8 <HAL_DMA_Init+0x654>)
 8002d20:	fba2 2303 	umull	r2, r3, r2, r3
 8002d24:	091b      	lsrs	r3, r3, #4
 8002d26:	009a      	lsls	r2, r3, #2
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f001 fc45 	bl	80045bc <DMA_CalcBaseAndBitshift>
 8002d32:	4603      	mov	r3, r0
 8002d34:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d3a:	f003 031f 	and.w	r3, r3, #31
 8002d3e:	2201      	movs	r2, #1
 8002d40:	409a      	lsls	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	605a      	str	r2, [r3, #4]
 8002d46:	e008      	b.n	8002d5a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2240      	movs	r2, #64	@ 0x40
 8002d4c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2203      	movs	r2, #3
 8002d52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e0b7      	b.n	8002eca <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a5f      	ldr	r2, [pc, #380]	@ (8002edc <HAL_DMA_Init+0x658>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d072      	beq.n	8002e4a <HAL_DMA_Init+0x5c6>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a5d      	ldr	r2, [pc, #372]	@ (8002ee0 <HAL_DMA_Init+0x65c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d06d      	beq.n	8002e4a <HAL_DMA_Init+0x5c6>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a5c      	ldr	r2, [pc, #368]	@ (8002ee4 <HAL_DMA_Init+0x660>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d068      	beq.n	8002e4a <HAL_DMA_Init+0x5c6>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a5a      	ldr	r2, [pc, #360]	@ (8002ee8 <HAL_DMA_Init+0x664>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d063      	beq.n	8002e4a <HAL_DMA_Init+0x5c6>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a59      	ldr	r2, [pc, #356]	@ (8002eec <HAL_DMA_Init+0x668>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d05e      	beq.n	8002e4a <HAL_DMA_Init+0x5c6>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a57      	ldr	r2, [pc, #348]	@ (8002ef0 <HAL_DMA_Init+0x66c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d059      	beq.n	8002e4a <HAL_DMA_Init+0x5c6>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a56      	ldr	r2, [pc, #344]	@ (8002ef4 <HAL_DMA_Init+0x670>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d054      	beq.n	8002e4a <HAL_DMA_Init+0x5c6>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a54      	ldr	r2, [pc, #336]	@ (8002ef8 <HAL_DMA_Init+0x674>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d04f      	beq.n	8002e4a <HAL_DMA_Init+0x5c6>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a53      	ldr	r2, [pc, #332]	@ (8002efc <HAL_DMA_Init+0x678>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d04a      	beq.n	8002e4a <HAL_DMA_Init+0x5c6>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a51      	ldr	r2, [pc, #324]	@ (8002f00 <HAL_DMA_Init+0x67c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d045      	beq.n	8002e4a <HAL_DMA_Init+0x5c6>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a50      	ldr	r2, [pc, #320]	@ (8002f04 <HAL_DMA_Init+0x680>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d040      	beq.n	8002e4a <HAL_DMA_Init+0x5c6>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a4e      	ldr	r2, [pc, #312]	@ (8002f08 <HAL_DMA_Init+0x684>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d03b      	beq.n	8002e4a <HAL_DMA_Init+0x5c6>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a4d      	ldr	r2, [pc, #308]	@ (8002f0c <HAL_DMA_Init+0x688>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d036      	beq.n	8002e4a <HAL_DMA_Init+0x5c6>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a4b      	ldr	r2, [pc, #300]	@ (8002f10 <HAL_DMA_Init+0x68c>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d031      	beq.n	8002e4a <HAL_DMA_Init+0x5c6>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a4a      	ldr	r2, [pc, #296]	@ (8002f14 <HAL_DMA_Init+0x690>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d02c      	beq.n	8002e4a <HAL_DMA_Init+0x5c6>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a48      	ldr	r2, [pc, #288]	@ (8002f18 <HAL_DMA_Init+0x694>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d027      	beq.n	8002e4a <HAL_DMA_Init+0x5c6>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a47      	ldr	r2, [pc, #284]	@ (8002f1c <HAL_DMA_Init+0x698>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d022      	beq.n	8002e4a <HAL_DMA_Init+0x5c6>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a45      	ldr	r2, [pc, #276]	@ (8002f20 <HAL_DMA_Init+0x69c>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d01d      	beq.n	8002e4a <HAL_DMA_Init+0x5c6>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a44      	ldr	r2, [pc, #272]	@ (8002f24 <HAL_DMA_Init+0x6a0>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d018      	beq.n	8002e4a <HAL_DMA_Init+0x5c6>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a42      	ldr	r2, [pc, #264]	@ (8002f28 <HAL_DMA_Init+0x6a4>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d013      	beq.n	8002e4a <HAL_DMA_Init+0x5c6>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a41      	ldr	r2, [pc, #260]	@ (8002f2c <HAL_DMA_Init+0x6a8>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d00e      	beq.n	8002e4a <HAL_DMA_Init+0x5c6>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a3f      	ldr	r2, [pc, #252]	@ (8002f30 <HAL_DMA_Init+0x6ac>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d009      	beq.n	8002e4a <HAL_DMA_Init+0x5c6>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a3e      	ldr	r2, [pc, #248]	@ (8002f34 <HAL_DMA_Init+0x6b0>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d004      	beq.n	8002e4a <HAL_DMA_Init+0x5c6>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a3c      	ldr	r2, [pc, #240]	@ (8002f38 <HAL_DMA_Init+0x6b4>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d101      	bne.n	8002e4e <HAL_DMA_Init+0x5ca>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <HAL_DMA_Init+0x5cc>
 8002e4e:	2300      	movs	r3, #0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d032      	beq.n	8002eba <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f001 fcdf 	bl	8004818 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	2b80      	cmp	r3, #128	@ 0x80
 8002e60:	d102      	bne.n	8002e68 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e70:	b2d2      	uxtb	r2, r2
 8002e72:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002e7c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d010      	beq.n	8002ea8 <HAL_DMA_Init+0x624>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	2b08      	cmp	r3, #8
 8002e8c:	d80c      	bhi.n	8002ea8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f001 fd5c 	bl	800494c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002ea4:	605a      	str	r2, [r3, #4]
 8002ea6:	e008      	b.n	8002eba <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3718      	adds	r7, #24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	a7fdabf8 	.word	0xa7fdabf8
 8002ed8:	cccccccd 	.word	0xcccccccd
 8002edc:	40020010 	.word	0x40020010
 8002ee0:	40020028 	.word	0x40020028
 8002ee4:	40020040 	.word	0x40020040
 8002ee8:	40020058 	.word	0x40020058
 8002eec:	40020070 	.word	0x40020070
 8002ef0:	40020088 	.word	0x40020088
 8002ef4:	400200a0 	.word	0x400200a0
 8002ef8:	400200b8 	.word	0x400200b8
 8002efc:	40020410 	.word	0x40020410
 8002f00:	40020428 	.word	0x40020428
 8002f04:	40020440 	.word	0x40020440
 8002f08:	40020458 	.word	0x40020458
 8002f0c:	40020470 	.word	0x40020470
 8002f10:	40020488 	.word	0x40020488
 8002f14:	400204a0 	.word	0x400204a0
 8002f18:	400204b8 	.word	0x400204b8
 8002f1c:	58025408 	.word	0x58025408
 8002f20:	5802541c 	.word	0x5802541c
 8002f24:	58025430 	.word	0x58025430
 8002f28:	58025444 	.word	0x58025444
 8002f2c:	58025458 	.word	0x58025458
 8002f30:	5802546c 	.word	0x5802546c
 8002f34:	58025480 	.word	0x58025480
 8002f38:	58025494 	.word	0x58025494

08002f3c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
 8002f48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d101      	bne.n	8002f58 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e226      	b.n	80033a6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d101      	bne.n	8002f66 <HAL_DMA_Start_IT+0x2a>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e21f      	b.n	80033a6 <HAL_DMA_Start_IT+0x46a>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	f040 820a 	bne.w	8003390 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2202      	movs	r2, #2
 8002f80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a68      	ldr	r2, [pc, #416]	@ (8003130 <HAL_DMA_Start_IT+0x1f4>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d04a      	beq.n	800302a <HAL_DMA_Start_IT+0xee>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a66      	ldr	r2, [pc, #408]	@ (8003134 <HAL_DMA_Start_IT+0x1f8>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d045      	beq.n	800302a <HAL_DMA_Start_IT+0xee>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a65      	ldr	r2, [pc, #404]	@ (8003138 <HAL_DMA_Start_IT+0x1fc>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d040      	beq.n	800302a <HAL_DMA_Start_IT+0xee>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a63      	ldr	r2, [pc, #396]	@ (800313c <HAL_DMA_Start_IT+0x200>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d03b      	beq.n	800302a <HAL_DMA_Start_IT+0xee>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a62      	ldr	r2, [pc, #392]	@ (8003140 <HAL_DMA_Start_IT+0x204>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d036      	beq.n	800302a <HAL_DMA_Start_IT+0xee>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a60      	ldr	r2, [pc, #384]	@ (8003144 <HAL_DMA_Start_IT+0x208>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d031      	beq.n	800302a <HAL_DMA_Start_IT+0xee>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a5f      	ldr	r2, [pc, #380]	@ (8003148 <HAL_DMA_Start_IT+0x20c>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d02c      	beq.n	800302a <HAL_DMA_Start_IT+0xee>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a5d      	ldr	r2, [pc, #372]	@ (800314c <HAL_DMA_Start_IT+0x210>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d027      	beq.n	800302a <HAL_DMA_Start_IT+0xee>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a5c      	ldr	r2, [pc, #368]	@ (8003150 <HAL_DMA_Start_IT+0x214>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d022      	beq.n	800302a <HAL_DMA_Start_IT+0xee>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a5a      	ldr	r2, [pc, #360]	@ (8003154 <HAL_DMA_Start_IT+0x218>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d01d      	beq.n	800302a <HAL_DMA_Start_IT+0xee>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a59      	ldr	r2, [pc, #356]	@ (8003158 <HAL_DMA_Start_IT+0x21c>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d018      	beq.n	800302a <HAL_DMA_Start_IT+0xee>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a57      	ldr	r2, [pc, #348]	@ (800315c <HAL_DMA_Start_IT+0x220>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d013      	beq.n	800302a <HAL_DMA_Start_IT+0xee>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a56      	ldr	r2, [pc, #344]	@ (8003160 <HAL_DMA_Start_IT+0x224>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d00e      	beq.n	800302a <HAL_DMA_Start_IT+0xee>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a54      	ldr	r2, [pc, #336]	@ (8003164 <HAL_DMA_Start_IT+0x228>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d009      	beq.n	800302a <HAL_DMA_Start_IT+0xee>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a53      	ldr	r2, [pc, #332]	@ (8003168 <HAL_DMA_Start_IT+0x22c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d004      	beq.n	800302a <HAL_DMA_Start_IT+0xee>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a51      	ldr	r2, [pc, #324]	@ (800316c <HAL_DMA_Start_IT+0x230>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d108      	bne.n	800303c <HAL_DMA_Start_IT+0x100>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0201 	bic.w	r2, r2, #1
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	e007      	b.n	800304c <HAL_DMA_Start_IT+0x110>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0201 	bic.w	r2, r2, #1
 800304a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	68b9      	ldr	r1, [r7, #8]
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f001 f906 	bl	8004264 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a34      	ldr	r2, [pc, #208]	@ (8003130 <HAL_DMA_Start_IT+0x1f4>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d04a      	beq.n	80030f8 <HAL_DMA_Start_IT+0x1bc>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a33      	ldr	r2, [pc, #204]	@ (8003134 <HAL_DMA_Start_IT+0x1f8>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d045      	beq.n	80030f8 <HAL_DMA_Start_IT+0x1bc>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a31      	ldr	r2, [pc, #196]	@ (8003138 <HAL_DMA_Start_IT+0x1fc>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d040      	beq.n	80030f8 <HAL_DMA_Start_IT+0x1bc>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a30      	ldr	r2, [pc, #192]	@ (800313c <HAL_DMA_Start_IT+0x200>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d03b      	beq.n	80030f8 <HAL_DMA_Start_IT+0x1bc>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a2e      	ldr	r2, [pc, #184]	@ (8003140 <HAL_DMA_Start_IT+0x204>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d036      	beq.n	80030f8 <HAL_DMA_Start_IT+0x1bc>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a2d      	ldr	r2, [pc, #180]	@ (8003144 <HAL_DMA_Start_IT+0x208>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d031      	beq.n	80030f8 <HAL_DMA_Start_IT+0x1bc>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a2b      	ldr	r2, [pc, #172]	@ (8003148 <HAL_DMA_Start_IT+0x20c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d02c      	beq.n	80030f8 <HAL_DMA_Start_IT+0x1bc>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a2a      	ldr	r2, [pc, #168]	@ (800314c <HAL_DMA_Start_IT+0x210>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d027      	beq.n	80030f8 <HAL_DMA_Start_IT+0x1bc>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a28      	ldr	r2, [pc, #160]	@ (8003150 <HAL_DMA_Start_IT+0x214>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d022      	beq.n	80030f8 <HAL_DMA_Start_IT+0x1bc>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a27      	ldr	r2, [pc, #156]	@ (8003154 <HAL_DMA_Start_IT+0x218>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d01d      	beq.n	80030f8 <HAL_DMA_Start_IT+0x1bc>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a25      	ldr	r2, [pc, #148]	@ (8003158 <HAL_DMA_Start_IT+0x21c>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d018      	beq.n	80030f8 <HAL_DMA_Start_IT+0x1bc>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a24      	ldr	r2, [pc, #144]	@ (800315c <HAL_DMA_Start_IT+0x220>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d013      	beq.n	80030f8 <HAL_DMA_Start_IT+0x1bc>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a22      	ldr	r2, [pc, #136]	@ (8003160 <HAL_DMA_Start_IT+0x224>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d00e      	beq.n	80030f8 <HAL_DMA_Start_IT+0x1bc>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a21      	ldr	r2, [pc, #132]	@ (8003164 <HAL_DMA_Start_IT+0x228>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d009      	beq.n	80030f8 <HAL_DMA_Start_IT+0x1bc>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a1f      	ldr	r2, [pc, #124]	@ (8003168 <HAL_DMA_Start_IT+0x22c>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d004      	beq.n	80030f8 <HAL_DMA_Start_IT+0x1bc>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a1e      	ldr	r2, [pc, #120]	@ (800316c <HAL_DMA_Start_IT+0x230>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d101      	bne.n	80030fc <HAL_DMA_Start_IT+0x1c0>
 80030f8:	2301      	movs	r3, #1
 80030fa:	e000      	b.n	80030fe <HAL_DMA_Start_IT+0x1c2>
 80030fc:	2300      	movs	r3, #0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d036      	beq.n	8003170 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f023 021e 	bic.w	r2, r3, #30
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f042 0216 	orr.w	r2, r2, #22
 8003114:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311a:	2b00      	cmp	r3, #0
 800311c:	d03e      	beq.n	800319c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f042 0208 	orr.w	r2, r2, #8
 800312c:	601a      	str	r2, [r3, #0]
 800312e:	e035      	b.n	800319c <HAL_DMA_Start_IT+0x260>
 8003130:	40020010 	.word	0x40020010
 8003134:	40020028 	.word	0x40020028
 8003138:	40020040 	.word	0x40020040
 800313c:	40020058 	.word	0x40020058
 8003140:	40020070 	.word	0x40020070
 8003144:	40020088 	.word	0x40020088
 8003148:	400200a0 	.word	0x400200a0
 800314c:	400200b8 	.word	0x400200b8
 8003150:	40020410 	.word	0x40020410
 8003154:	40020428 	.word	0x40020428
 8003158:	40020440 	.word	0x40020440
 800315c:	40020458 	.word	0x40020458
 8003160:	40020470 	.word	0x40020470
 8003164:	40020488 	.word	0x40020488
 8003168:	400204a0 	.word	0x400204a0
 800316c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f023 020e 	bic.w	r2, r3, #14
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f042 020a 	orr.w	r2, r2, #10
 8003182:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003188:	2b00      	cmp	r3, #0
 800318a:	d007      	beq.n	800319c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 0204 	orr.w	r2, r2, #4
 800319a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a83      	ldr	r2, [pc, #524]	@ (80033b0 <HAL_DMA_Start_IT+0x474>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d072      	beq.n	800328c <HAL_DMA_Start_IT+0x350>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a82      	ldr	r2, [pc, #520]	@ (80033b4 <HAL_DMA_Start_IT+0x478>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d06d      	beq.n	800328c <HAL_DMA_Start_IT+0x350>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a80      	ldr	r2, [pc, #512]	@ (80033b8 <HAL_DMA_Start_IT+0x47c>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d068      	beq.n	800328c <HAL_DMA_Start_IT+0x350>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a7f      	ldr	r2, [pc, #508]	@ (80033bc <HAL_DMA_Start_IT+0x480>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d063      	beq.n	800328c <HAL_DMA_Start_IT+0x350>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a7d      	ldr	r2, [pc, #500]	@ (80033c0 <HAL_DMA_Start_IT+0x484>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d05e      	beq.n	800328c <HAL_DMA_Start_IT+0x350>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a7c      	ldr	r2, [pc, #496]	@ (80033c4 <HAL_DMA_Start_IT+0x488>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d059      	beq.n	800328c <HAL_DMA_Start_IT+0x350>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a7a      	ldr	r2, [pc, #488]	@ (80033c8 <HAL_DMA_Start_IT+0x48c>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d054      	beq.n	800328c <HAL_DMA_Start_IT+0x350>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a79      	ldr	r2, [pc, #484]	@ (80033cc <HAL_DMA_Start_IT+0x490>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d04f      	beq.n	800328c <HAL_DMA_Start_IT+0x350>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a77      	ldr	r2, [pc, #476]	@ (80033d0 <HAL_DMA_Start_IT+0x494>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d04a      	beq.n	800328c <HAL_DMA_Start_IT+0x350>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a76      	ldr	r2, [pc, #472]	@ (80033d4 <HAL_DMA_Start_IT+0x498>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d045      	beq.n	800328c <HAL_DMA_Start_IT+0x350>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a74      	ldr	r2, [pc, #464]	@ (80033d8 <HAL_DMA_Start_IT+0x49c>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d040      	beq.n	800328c <HAL_DMA_Start_IT+0x350>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a73      	ldr	r2, [pc, #460]	@ (80033dc <HAL_DMA_Start_IT+0x4a0>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d03b      	beq.n	800328c <HAL_DMA_Start_IT+0x350>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a71      	ldr	r2, [pc, #452]	@ (80033e0 <HAL_DMA_Start_IT+0x4a4>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d036      	beq.n	800328c <HAL_DMA_Start_IT+0x350>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a70      	ldr	r2, [pc, #448]	@ (80033e4 <HAL_DMA_Start_IT+0x4a8>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d031      	beq.n	800328c <HAL_DMA_Start_IT+0x350>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a6e      	ldr	r2, [pc, #440]	@ (80033e8 <HAL_DMA_Start_IT+0x4ac>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d02c      	beq.n	800328c <HAL_DMA_Start_IT+0x350>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a6d      	ldr	r2, [pc, #436]	@ (80033ec <HAL_DMA_Start_IT+0x4b0>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d027      	beq.n	800328c <HAL_DMA_Start_IT+0x350>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a6b      	ldr	r2, [pc, #428]	@ (80033f0 <HAL_DMA_Start_IT+0x4b4>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d022      	beq.n	800328c <HAL_DMA_Start_IT+0x350>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a6a      	ldr	r2, [pc, #424]	@ (80033f4 <HAL_DMA_Start_IT+0x4b8>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d01d      	beq.n	800328c <HAL_DMA_Start_IT+0x350>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a68      	ldr	r2, [pc, #416]	@ (80033f8 <HAL_DMA_Start_IT+0x4bc>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d018      	beq.n	800328c <HAL_DMA_Start_IT+0x350>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a67      	ldr	r2, [pc, #412]	@ (80033fc <HAL_DMA_Start_IT+0x4c0>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d013      	beq.n	800328c <HAL_DMA_Start_IT+0x350>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a65      	ldr	r2, [pc, #404]	@ (8003400 <HAL_DMA_Start_IT+0x4c4>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d00e      	beq.n	800328c <HAL_DMA_Start_IT+0x350>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a64      	ldr	r2, [pc, #400]	@ (8003404 <HAL_DMA_Start_IT+0x4c8>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d009      	beq.n	800328c <HAL_DMA_Start_IT+0x350>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a62      	ldr	r2, [pc, #392]	@ (8003408 <HAL_DMA_Start_IT+0x4cc>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d004      	beq.n	800328c <HAL_DMA_Start_IT+0x350>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a61      	ldr	r2, [pc, #388]	@ (800340c <HAL_DMA_Start_IT+0x4d0>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d101      	bne.n	8003290 <HAL_DMA_Start_IT+0x354>
 800328c:	2301      	movs	r3, #1
 800328e:	e000      	b.n	8003292 <HAL_DMA_Start_IT+0x356>
 8003290:	2300      	movs	r3, #0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d01a      	beq.n	80032cc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d007      	beq.n	80032b4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032b2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d007      	beq.n	80032cc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032ca:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a37      	ldr	r2, [pc, #220]	@ (80033b0 <HAL_DMA_Start_IT+0x474>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d04a      	beq.n	800336c <HAL_DMA_Start_IT+0x430>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a36      	ldr	r2, [pc, #216]	@ (80033b4 <HAL_DMA_Start_IT+0x478>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d045      	beq.n	800336c <HAL_DMA_Start_IT+0x430>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a34      	ldr	r2, [pc, #208]	@ (80033b8 <HAL_DMA_Start_IT+0x47c>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d040      	beq.n	800336c <HAL_DMA_Start_IT+0x430>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a33      	ldr	r2, [pc, #204]	@ (80033bc <HAL_DMA_Start_IT+0x480>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d03b      	beq.n	800336c <HAL_DMA_Start_IT+0x430>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a31      	ldr	r2, [pc, #196]	@ (80033c0 <HAL_DMA_Start_IT+0x484>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d036      	beq.n	800336c <HAL_DMA_Start_IT+0x430>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a30      	ldr	r2, [pc, #192]	@ (80033c4 <HAL_DMA_Start_IT+0x488>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d031      	beq.n	800336c <HAL_DMA_Start_IT+0x430>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a2e      	ldr	r2, [pc, #184]	@ (80033c8 <HAL_DMA_Start_IT+0x48c>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d02c      	beq.n	800336c <HAL_DMA_Start_IT+0x430>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a2d      	ldr	r2, [pc, #180]	@ (80033cc <HAL_DMA_Start_IT+0x490>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d027      	beq.n	800336c <HAL_DMA_Start_IT+0x430>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a2b      	ldr	r2, [pc, #172]	@ (80033d0 <HAL_DMA_Start_IT+0x494>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d022      	beq.n	800336c <HAL_DMA_Start_IT+0x430>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a2a      	ldr	r2, [pc, #168]	@ (80033d4 <HAL_DMA_Start_IT+0x498>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d01d      	beq.n	800336c <HAL_DMA_Start_IT+0x430>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a28      	ldr	r2, [pc, #160]	@ (80033d8 <HAL_DMA_Start_IT+0x49c>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d018      	beq.n	800336c <HAL_DMA_Start_IT+0x430>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a27      	ldr	r2, [pc, #156]	@ (80033dc <HAL_DMA_Start_IT+0x4a0>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d013      	beq.n	800336c <HAL_DMA_Start_IT+0x430>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a25      	ldr	r2, [pc, #148]	@ (80033e0 <HAL_DMA_Start_IT+0x4a4>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d00e      	beq.n	800336c <HAL_DMA_Start_IT+0x430>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a24      	ldr	r2, [pc, #144]	@ (80033e4 <HAL_DMA_Start_IT+0x4a8>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d009      	beq.n	800336c <HAL_DMA_Start_IT+0x430>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a22      	ldr	r2, [pc, #136]	@ (80033e8 <HAL_DMA_Start_IT+0x4ac>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d004      	beq.n	800336c <HAL_DMA_Start_IT+0x430>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a21      	ldr	r2, [pc, #132]	@ (80033ec <HAL_DMA_Start_IT+0x4b0>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d108      	bne.n	800337e <HAL_DMA_Start_IT+0x442>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0201 	orr.w	r2, r2, #1
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	e012      	b.n	80033a4 <HAL_DMA_Start_IT+0x468>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f042 0201 	orr.w	r2, r2, #1
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	e009      	b.n	80033a4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003396:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80033a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3718      	adds	r7, #24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40020010 	.word	0x40020010
 80033b4:	40020028 	.word	0x40020028
 80033b8:	40020040 	.word	0x40020040
 80033bc:	40020058 	.word	0x40020058
 80033c0:	40020070 	.word	0x40020070
 80033c4:	40020088 	.word	0x40020088
 80033c8:	400200a0 	.word	0x400200a0
 80033cc:	400200b8 	.word	0x400200b8
 80033d0:	40020410 	.word	0x40020410
 80033d4:	40020428 	.word	0x40020428
 80033d8:	40020440 	.word	0x40020440
 80033dc:	40020458 	.word	0x40020458
 80033e0:	40020470 	.word	0x40020470
 80033e4:	40020488 	.word	0x40020488
 80033e8:	400204a0 	.word	0x400204a0
 80033ec:	400204b8 	.word	0x400204b8
 80033f0:	58025408 	.word	0x58025408
 80033f4:	5802541c 	.word	0x5802541c
 80033f8:	58025430 	.word	0x58025430
 80033fc:	58025444 	.word	0x58025444
 8003400:	58025458 	.word	0x58025458
 8003404:	5802546c 	.word	0x5802546c
 8003408:	58025480 	.word	0x58025480
 800340c:	58025494 	.word	0x58025494

08003410 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b08a      	sub	sp, #40	@ 0x28
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800341c:	4b67      	ldr	r3, [pc, #412]	@ (80035bc <HAL_DMA_IRQHandler+0x1ac>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a67      	ldr	r2, [pc, #412]	@ (80035c0 <HAL_DMA_IRQHandler+0x1b0>)
 8003422:	fba2 2303 	umull	r2, r3, r2, r3
 8003426:	0a9b      	lsrs	r3, r3, #10
 8003428:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800342e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003434:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a5f      	ldr	r2, [pc, #380]	@ (80035c4 <HAL_DMA_IRQHandler+0x1b4>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d04a      	beq.n	80034e2 <HAL_DMA_IRQHandler+0xd2>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a5d      	ldr	r2, [pc, #372]	@ (80035c8 <HAL_DMA_IRQHandler+0x1b8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d045      	beq.n	80034e2 <HAL_DMA_IRQHandler+0xd2>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a5c      	ldr	r2, [pc, #368]	@ (80035cc <HAL_DMA_IRQHandler+0x1bc>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d040      	beq.n	80034e2 <HAL_DMA_IRQHandler+0xd2>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a5a      	ldr	r2, [pc, #360]	@ (80035d0 <HAL_DMA_IRQHandler+0x1c0>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d03b      	beq.n	80034e2 <HAL_DMA_IRQHandler+0xd2>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a59      	ldr	r2, [pc, #356]	@ (80035d4 <HAL_DMA_IRQHandler+0x1c4>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d036      	beq.n	80034e2 <HAL_DMA_IRQHandler+0xd2>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a57      	ldr	r2, [pc, #348]	@ (80035d8 <HAL_DMA_IRQHandler+0x1c8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d031      	beq.n	80034e2 <HAL_DMA_IRQHandler+0xd2>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a56      	ldr	r2, [pc, #344]	@ (80035dc <HAL_DMA_IRQHandler+0x1cc>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d02c      	beq.n	80034e2 <HAL_DMA_IRQHandler+0xd2>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a54      	ldr	r2, [pc, #336]	@ (80035e0 <HAL_DMA_IRQHandler+0x1d0>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d027      	beq.n	80034e2 <HAL_DMA_IRQHandler+0xd2>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a53      	ldr	r2, [pc, #332]	@ (80035e4 <HAL_DMA_IRQHandler+0x1d4>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d022      	beq.n	80034e2 <HAL_DMA_IRQHandler+0xd2>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a51      	ldr	r2, [pc, #324]	@ (80035e8 <HAL_DMA_IRQHandler+0x1d8>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d01d      	beq.n	80034e2 <HAL_DMA_IRQHandler+0xd2>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a50      	ldr	r2, [pc, #320]	@ (80035ec <HAL_DMA_IRQHandler+0x1dc>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d018      	beq.n	80034e2 <HAL_DMA_IRQHandler+0xd2>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a4e      	ldr	r2, [pc, #312]	@ (80035f0 <HAL_DMA_IRQHandler+0x1e0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d013      	beq.n	80034e2 <HAL_DMA_IRQHandler+0xd2>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a4d      	ldr	r2, [pc, #308]	@ (80035f4 <HAL_DMA_IRQHandler+0x1e4>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d00e      	beq.n	80034e2 <HAL_DMA_IRQHandler+0xd2>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a4b      	ldr	r2, [pc, #300]	@ (80035f8 <HAL_DMA_IRQHandler+0x1e8>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d009      	beq.n	80034e2 <HAL_DMA_IRQHandler+0xd2>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a4a      	ldr	r2, [pc, #296]	@ (80035fc <HAL_DMA_IRQHandler+0x1ec>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d004      	beq.n	80034e2 <HAL_DMA_IRQHandler+0xd2>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a48      	ldr	r2, [pc, #288]	@ (8003600 <HAL_DMA_IRQHandler+0x1f0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d101      	bne.n	80034e6 <HAL_DMA_IRQHandler+0xd6>
 80034e2:	2301      	movs	r3, #1
 80034e4:	e000      	b.n	80034e8 <HAL_DMA_IRQHandler+0xd8>
 80034e6:	2300      	movs	r3, #0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 842b 	beq.w	8003d44 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f2:	f003 031f 	and.w	r3, r3, #31
 80034f6:	2208      	movs	r2, #8
 80034f8:	409a      	lsls	r2, r3
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	4013      	ands	r3, r2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 80a2 	beq.w	8003648 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a2e      	ldr	r2, [pc, #184]	@ (80035c4 <HAL_DMA_IRQHandler+0x1b4>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d04a      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x194>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a2d      	ldr	r2, [pc, #180]	@ (80035c8 <HAL_DMA_IRQHandler+0x1b8>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d045      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x194>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a2b      	ldr	r2, [pc, #172]	@ (80035cc <HAL_DMA_IRQHandler+0x1bc>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d040      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x194>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a2a      	ldr	r2, [pc, #168]	@ (80035d0 <HAL_DMA_IRQHandler+0x1c0>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d03b      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x194>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a28      	ldr	r2, [pc, #160]	@ (80035d4 <HAL_DMA_IRQHandler+0x1c4>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d036      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x194>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a27      	ldr	r2, [pc, #156]	@ (80035d8 <HAL_DMA_IRQHandler+0x1c8>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d031      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x194>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a25      	ldr	r2, [pc, #148]	@ (80035dc <HAL_DMA_IRQHandler+0x1cc>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d02c      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x194>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a24      	ldr	r2, [pc, #144]	@ (80035e0 <HAL_DMA_IRQHandler+0x1d0>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d027      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x194>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a22      	ldr	r2, [pc, #136]	@ (80035e4 <HAL_DMA_IRQHandler+0x1d4>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d022      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x194>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a21      	ldr	r2, [pc, #132]	@ (80035e8 <HAL_DMA_IRQHandler+0x1d8>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d01d      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x194>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a1f      	ldr	r2, [pc, #124]	@ (80035ec <HAL_DMA_IRQHandler+0x1dc>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d018      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x194>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a1e      	ldr	r2, [pc, #120]	@ (80035f0 <HAL_DMA_IRQHandler+0x1e0>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d013      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x194>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a1c      	ldr	r2, [pc, #112]	@ (80035f4 <HAL_DMA_IRQHandler+0x1e4>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d00e      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x194>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a1b      	ldr	r2, [pc, #108]	@ (80035f8 <HAL_DMA_IRQHandler+0x1e8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d009      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x194>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a19      	ldr	r2, [pc, #100]	@ (80035fc <HAL_DMA_IRQHandler+0x1ec>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d004      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x194>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a18      	ldr	r2, [pc, #96]	@ (8003600 <HAL_DMA_IRQHandler+0x1f0>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d12f      	bne.n	8003604 <HAL_DMA_IRQHandler+0x1f4>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	bf14      	ite	ne
 80035b2:	2301      	movne	r3, #1
 80035b4:	2300      	moveq	r3, #0
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	e02e      	b.n	8003618 <HAL_DMA_IRQHandler+0x208>
 80035ba:	bf00      	nop
 80035bc:	24000000 	.word	0x24000000
 80035c0:	1b4e81b5 	.word	0x1b4e81b5
 80035c4:	40020010 	.word	0x40020010
 80035c8:	40020028 	.word	0x40020028
 80035cc:	40020040 	.word	0x40020040
 80035d0:	40020058 	.word	0x40020058
 80035d4:	40020070 	.word	0x40020070
 80035d8:	40020088 	.word	0x40020088
 80035dc:	400200a0 	.word	0x400200a0
 80035e0:	400200b8 	.word	0x400200b8
 80035e4:	40020410 	.word	0x40020410
 80035e8:	40020428 	.word	0x40020428
 80035ec:	40020440 	.word	0x40020440
 80035f0:	40020458 	.word	0x40020458
 80035f4:	40020470 	.word	0x40020470
 80035f8:	40020488 	.word	0x40020488
 80035fc:	400204a0 	.word	0x400204a0
 8003600:	400204b8 	.word	0x400204b8
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	2b00      	cmp	r3, #0
 8003610:	bf14      	ite	ne
 8003612:	2301      	movne	r3, #1
 8003614:	2300      	moveq	r3, #0
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	d015      	beq.n	8003648 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 0204 	bic.w	r2, r2, #4
 800362a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003630:	f003 031f 	and.w	r3, r3, #31
 8003634:	2208      	movs	r2, #8
 8003636:	409a      	lsls	r2, r3
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003640:	f043 0201 	orr.w	r2, r3, #1
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800364c:	f003 031f 	and.w	r3, r3, #31
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	fa22 f303 	lsr.w	r3, r2, r3
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d06e      	beq.n	800373c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a69      	ldr	r2, [pc, #420]	@ (8003808 <HAL_DMA_IRQHandler+0x3f8>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d04a      	beq.n	80036fe <HAL_DMA_IRQHandler+0x2ee>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a67      	ldr	r2, [pc, #412]	@ (800380c <HAL_DMA_IRQHandler+0x3fc>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d045      	beq.n	80036fe <HAL_DMA_IRQHandler+0x2ee>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a66      	ldr	r2, [pc, #408]	@ (8003810 <HAL_DMA_IRQHandler+0x400>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d040      	beq.n	80036fe <HAL_DMA_IRQHandler+0x2ee>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a64      	ldr	r2, [pc, #400]	@ (8003814 <HAL_DMA_IRQHandler+0x404>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d03b      	beq.n	80036fe <HAL_DMA_IRQHandler+0x2ee>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a63      	ldr	r2, [pc, #396]	@ (8003818 <HAL_DMA_IRQHandler+0x408>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d036      	beq.n	80036fe <HAL_DMA_IRQHandler+0x2ee>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a61      	ldr	r2, [pc, #388]	@ (800381c <HAL_DMA_IRQHandler+0x40c>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d031      	beq.n	80036fe <HAL_DMA_IRQHandler+0x2ee>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a60      	ldr	r2, [pc, #384]	@ (8003820 <HAL_DMA_IRQHandler+0x410>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d02c      	beq.n	80036fe <HAL_DMA_IRQHandler+0x2ee>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a5e      	ldr	r2, [pc, #376]	@ (8003824 <HAL_DMA_IRQHandler+0x414>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d027      	beq.n	80036fe <HAL_DMA_IRQHandler+0x2ee>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a5d      	ldr	r2, [pc, #372]	@ (8003828 <HAL_DMA_IRQHandler+0x418>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d022      	beq.n	80036fe <HAL_DMA_IRQHandler+0x2ee>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a5b      	ldr	r2, [pc, #364]	@ (800382c <HAL_DMA_IRQHandler+0x41c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d01d      	beq.n	80036fe <HAL_DMA_IRQHandler+0x2ee>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a5a      	ldr	r2, [pc, #360]	@ (8003830 <HAL_DMA_IRQHandler+0x420>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d018      	beq.n	80036fe <HAL_DMA_IRQHandler+0x2ee>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a58      	ldr	r2, [pc, #352]	@ (8003834 <HAL_DMA_IRQHandler+0x424>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d013      	beq.n	80036fe <HAL_DMA_IRQHandler+0x2ee>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a57      	ldr	r2, [pc, #348]	@ (8003838 <HAL_DMA_IRQHandler+0x428>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d00e      	beq.n	80036fe <HAL_DMA_IRQHandler+0x2ee>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a55      	ldr	r2, [pc, #340]	@ (800383c <HAL_DMA_IRQHandler+0x42c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d009      	beq.n	80036fe <HAL_DMA_IRQHandler+0x2ee>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a54      	ldr	r2, [pc, #336]	@ (8003840 <HAL_DMA_IRQHandler+0x430>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d004      	beq.n	80036fe <HAL_DMA_IRQHandler+0x2ee>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a52      	ldr	r2, [pc, #328]	@ (8003844 <HAL_DMA_IRQHandler+0x434>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d10a      	bne.n	8003714 <HAL_DMA_IRQHandler+0x304>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003708:	2b00      	cmp	r3, #0
 800370a:	bf14      	ite	ne
 800370c:	2301      	movne	r3, #1
 800370e:	2300      	moveq	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	e003      	b.n	800371c <HAL_DMA_IRQHandler+0x30c>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2300      	movs	r3, #0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00d      	beq.n	800373c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003724:	f003 031f 	and.w	r3, r3, #31
 8003728:	2201      	movs	r2, #1
 800372a:	409a      	lsls	r2, r3
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003734:	f043 0202 	orr.w	r2, r3, #2
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003740:	f003 031f 	and.w	r3, r3, #31
 8003744:	2204      	movs	r2, #4
 8003746:	409a      	lsls	r2, r3
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	4013      	ands	r3, r2
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 808f 	beq.w	8003870 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a2c      	ldr	r2, [pc, #176]	@ (8003808 <HAL_DMA_IRQHandler+0x3f8>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d04a      	beq.n	80037f2 <HAL_DMA_IRQHandler+0x3e2>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a2a      	ldr	r2, [pc, #168]	@ (800380c <HAL_DMA_IRQHandler+0x3fc>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d045      	beq.n	80037f2 <HAL_DMA_IRQHandler+0x3e2>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a29      	ldr	r2, [pc, #164]	@ (8003810 <HAL_DMA_IRQHandler+0x400>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d040      	beq.n	80037f2 <HAL_DMA_IRQHandler+0x3e2>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a27      	ldr	r2, [pc, #156]	@ (8003814 <HAL_DMA_IRQHandler+0x404>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d03b      	beq.n	80037f2 <HAL_DMA_IRQHandler+0x3e2>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a26      	ldr	r2, [pc, #152]	@ (8003818 <HAL_DMA_IRQHandler+0x408>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d036      	beq.n	80037f2 <HAL_DMA_IRQHandler+0x3e2>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a24      	ldr	r2, [pc, #144]	@ (800381c <HAL_DMA_IRQHandler+0x40c>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d031      	beq.n	80037f2 <HAL_DMA_IRQHandler+0x3e2>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a23      	ldr	r2, [pc, #140]	@ (8003820 <HAL_DMA_IRQHandler+0x410>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d02c      	beq.n	80037f2 <HAL_DMA_IRQHandler+0x3e2>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a21      	ldr	r2, [pc, #132]	@ (8003824 <HAL_DMA_IRQHandler+0x414>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d027      	beq.n	80037f2 <HAL_DMA_IRQHandler+0x3e2>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a20      	ldr	r2, [pc, #128]	@ (8003828 <HAL_DMA_IRQHandler+0x418>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d022      	beq.n	80037f2 <HAL_DMA_IRQHandler+0x3e2>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a1e      	ldr	r2, [pc, #120]	@ (800382c <HAL_DMA_IRQHandler+0x41c>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d01d      	beq.n	80037f2 <HAL_DMA_IRQHandler+0x3e2>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a1d      	ldr	r2, [pc, #116]	@ (8003830 <HAL_DMA_IRQHandler+0x420>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d018      	beq.n	80037f2 <HAL_DMA_IRQHandler+0x3e2>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a1b      	ldr	r2, [pc, #108]	@ (8003834 <HAL_DMA_IRQHandler+0x424>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d013      	beq.n	80037f2 <HAL_DMA_IRQHandler+0x3e2>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a1a      	ldr	r2, [pc, #104]	@ (8003838 <HAL_DMA_IRQHandler+0x428>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d00e      	beq.n	80037f2 <HAL_DMA_IRQHandler+0x3e2>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a18      	ldr	r2, [pc, #96]	@ (800383c <HAL_DMA_IRQHandler+0x42c>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d009      	beq.n	80037f2 <HAL_DMA_IRQHandler+0x3e2>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a17      	ldr	r2, [pc, #92]	@ (8003840 <HAL_DMA_IRQHandler+0x430>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d004      	beq.n	80037f2 <HAL_DMA_IRQHandler+0x3e2>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a15      	ldr	r2, [pc, #84]	@ (8003844 <HAL_DMA_IRQHandler+0x434>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d12a      	bne.n	8003848 <HAL_DMA_IRQHandler+0x438>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	bf14      	ite	ne
 8003800:	2301      	movne	r3, #1
 8003802:	2300      	moveq	r3, #0
 8003804:	b2db      	uxtb	r3, r3
 8003806:	e023      	b.n	8003850 <HAL_DMA_IRQHandler+0x440>
 8003808:	40020010 	.word	0x40020010
 800380c:	40020028 	.word	0x40020028
 8003810:	40020040 	.word	0x40020040
 8003814:	40020058 	.word	0x40020058
 8003818:	40020070 	.word	0x40020070
 800381c:	40020088 	.word	0x40020088
 8003820:	400200a0 	.word	0x400200a0
 8003824:	400200b8 	.word	0x400200b8
 8003828:	40020410 	.word	0x40020410
 800382c:	40020428 	.word	0x40020428
 8003830:	40020440 	.word	0x40020440
 8003834:	40020458 	.word	0x40020458
 8003838:	40020470 	.word	0x40020470
 800383c:	40020488 	.word	0x40020488
 8003840:	400204a0 	.word	0x400204a0
 8003844:	400204b8 	.word	0x400204b8
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2300      	movs	r3, #0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00d      	beq.n	8003870 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003858:	f003 031f 	and.w	r3, r3, #31
 800385c:	2204      	movs	r2, #4
 800385e:	409a      	lsls	r2, r3
 8003860:	6a3b      	ldr	r3, [r7, #32]
 8003862:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003868:	f043 0204 	orr.w	r2, r3, #4
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003874:	f003 031f 	and.w	r3, r3, #31
 8003878:	2210      	movs	r2, #16
 800387a:	409a      	lsls	r2, r3
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	4013      	ands	r3, r2
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 80a6 	beq.w	80039d2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a85      	ldr	r2, [pc, #532]	@ (8003aa0 <HAL_DMA_IRQHandler+0x690>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d04a      	beq.n	8003926 <HAL_DMA_IRQHandler+0x516>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a83      	ldr	r2, [pc, #524]	@ (8003aa4 <HAL_DMA_IRQHandler+0x694>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d045      	beq.n	8003926 <HAL_DMA_IRQHandler+0x516>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a82      	ldr	r2, [pc, #520]	@ (8003aa8 <HAL_DMA_IRQHandler+0x698>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d040      	beq.n	8003926 <HAL_DMA_IRQHandler+0x516>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a80      	ldr	r2, [pc, #512]	@ (8003aac <HAL_DMA_IRQHandler+0x69c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d03b      	beq.n	8003926 <HAL_DMA_IRQHandler+0x516>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a7f      	ldr	r2, [pc, #508]	@ (8003ab0 <HAL_DMA_IRQHandler+0x6a0>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d036      	beq.n	8003926 <HAL_DMA_IRQHandler+0x516>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a7d      	ldr	r2, [pc, #500]	@ (8003ab4 <HAL_DMA_IRQHandler+0x6a4>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d031      	beq.n	8003926 <HAL_DMA_IRQHandler+0x516>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a7c      	ldr	r2, [pc, #496]	@ (8003ab8 <HAL_DMA_IRQHandler+0x6a8>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d02c      	beq.n	8003926 <HAL_DMA_IRQHandler+0x516>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a7a      	ldr	r2, [pc, #488]	@ (8003abc <HAL_DMA_IRQHandler+0x6ac>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d027      	beq.n	8003926 <HAL_DMA_IRQHandler+0x516>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a79      	ldr	r2, [pc, #484]	@ (8003ac0 <HAL_DMA_IRQHandler+0x6b0>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d022      	beq.n	8003926 <HAL_DMA_IRQHandler+0x516>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a77      	ldr	r2, [pc, #476]	@ (8003ac4 <HAL_DMA_IRQHandler+0x6b4>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d01d      	beq.n	8003926 <HAL_DMA_IRQHandler+0x516>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a76      	ldr	r2, [pc, #472]	@ (8003ac8 <HAL_DMA_IRQHandler+0x6b8>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d018      	beq.n	8003926 <HAL_DMA_IRQHandler+0x516>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a74      	ldr	r2, [pc, #464]	@ (8003acc <HAL_DMA_IRQHandler+0x6bc>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d013      	beq.n	8003926 <HAL_DMA_IRQHandler+0x516>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a73      	ldr	r2, [pc, #460]	@ (8003ad0 <HAL_DMA_IRQHandler+0x6c0>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d00e      	beq.n	8003926 <HAL_DMA_IRQHandler+0x516>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a71      	ldr	r2, [pc, #452]	@ (8003ad4 <HAL_DMA_IRQHandler+0x6c4>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d009      	beq.n	8003926 <HAL_DMA_IRQHandler+0x516>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a70      	ldr	r2, [pc, #448]	@ (8003ad8 <HAL_DMA_IRQHandler+0x6c8>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d004      	beq.n	8003926 <HAL_DMA_IRQHandler+0x516>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a6e      	ldr	r2, [pc, #440]	@ (8003adc <HAL_DMA_IRQHandler+0x6cc>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d10a      	bne.n	800393c <HAL_DMA_IRQHandler+0x52c>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0308 	and.w	r3, r3, #8
 8003930:	2b00      	cmp	r3, #0
 8003932:	bf14      	ite	ne
 8003934:	2301      	movne	r3, #1
 8003936:	2300      	moveq	r3, #0
 8003938:	b2db      	uxtb	r3, r3
 800393a:	e009      	b.n	8003950 <HAL_DMA_IRQHandler+0x540>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0304 	and.w	r3, r3, #4
 8003946:	2b00      	cmp	r3, #0
 8003948:	bf14      	ite	ne
 800394a:	2301      	movne	r3, #1
 800394c:	2300      	moveq	r3, #0
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d03e      	beq.n	80039d2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003958:	f003 031f 	and.w	r3, r3, #31
 800395c:	2210      	movs	r2, #16
 800395e:	409a      	lsls	r2, r3
 8003960:	6a3b      	ldr	r3, [r7, #32]
 8003962:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d018      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d108      	bne.n	8003992 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003984:	2b00      	cmp	r3, #0
 8003986:	d024      	beq.n	80039d2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	4798      	blx	r3
 8003990:	e01f      	b.n	80039d2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003996:	2b00      	cmp	r3, #0
 8003998:	d01b      	beq.n	80039d2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	4798      	blx	r3
 80039a2:	e016      	b.n	80039d2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d107      	bne.n	80039c2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 0208 	bic.w	r2, r2, #8
 80039c0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d6:	f003 031f 	and.w	r3, r3, #31
 80039da:	2220      	movs	r2, #32
 80039dc:	409a      	lsls	r2, r3
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	4013      	ands	r3, r2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 8110 	beq.w	8003c08 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a2c      	ldr	r2, [pc, #176]	@ (8003aa0 <HAL_DMA_IRQHandler+0x690>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d04a      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x678>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a2b      	ldr	r2, [pc, #172]	@ (8003aa4 <HAL_DMA_IRQHandler+0x694>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d045      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x678>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a29      	ldr	r2, [pc, #164]	@ (8003aa8 <HAL_DMA_IRQHandler+0x698>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d040      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x678>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a28      	ldr	r2, [pc, #160]	@ (8003aac <HAL_DMA_IRQHandler+0x69c>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d03b      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x678>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a26      	ldr	r2, [pc, #152]	@ (8003ab0 <HAL_DMA_IRQHandler+0x6a0>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d036      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x678>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a25      	ldr	r2, [pc, #148]	@ (8003ab4 <HAL_DMA_IRQHandler+0x6a4>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d031      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x678>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a23      	ldr	r2, [pc, #140]	@ (8003ab8 <HAL_DMA_IRQHandler+0x6a8>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d02c      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x678>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a22      	ldr	r2, [pc, #136]	@ (8003abc <HAL_DMA_IRQHandler+0x6ac>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d027      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x678>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a20      	ldr	r2, [pc, #128]	@ (8003ac0 <HAL_DMA_IRQHandler+0x6b0>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d022      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x678>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a1f      	ldr	r2, [pc, #124]	@ (8003ac4 <HAL_DMA_IRQHandler+0x6b4>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d01d      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x678>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a1d      	ldr	r2, [pc, #116]	@ (8003ac8 <HAL_DMA_IRQHandler+0x6b8>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d018      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x678>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a1c      	ldr	r2, [pc, #112]	@ (8003acc <HAL_DMA_IRQHandler+0x6bc>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d013      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x678>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a1a      	ldr	r2, [pc, #104]	@ (8003ad0 <HAL_DMA_IRQHandler+0x6c0>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d00e      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x678>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a19      	ldr	r2, [pc, #100]	@ (8003ad4 <HAL_DMA_IRQHandler+0x6c4>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d009      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x678>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a17      	ldr	r2, [pc, #92]	@ (8003ad8 <HAL_DMA_IRQHandler+0x6c8>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d004      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x678>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a16      	ldr	r2, [pc, #88]	@ (8003adc <HAL_DMA_IRQHandler+0x6cc>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d12b      	bne.n	8003ae0 <HAL_DMA_IRQHandler+0x6d0>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0310 	and.w	r3, r3, #16
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	bf14      	ite	ne
 8003a96:	2301      	movne	r3, #1
 8003a98:	2300      	moveq	r3, #0
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	e02a      	b.n	8003af4 <HAL_DMA_IRQHandler+0x6e4>
 8003a9e:	bf00      	nop
 8003aa0:	40020010 	.word	0x40020010
 8003aa4:	40020028 	.word	0x40020028
 8003aa8:	40020040 	.word	0x40020040
 8003aac:	40020058 	.word	0x40020058
 8003ab0:	40020070 	.word	0x40020070
 8003ab4:	40020088 	.word	0x40020088
 8003ab8:	400200a0 	.word	0x400200a0
 8003abc:	400200b8 	.word	0x400200b8
 8003ac0:	40020410 	.word	0x40020410
 8003ac4:	40020428 	.word	0x40020428
 8003ac8:	40020440 	.word	0x40020440
 8003acc:	40020458 	.word	0x40020458
 8003ad0:	40020470 	.word	0x40020470
 8003ad4:	40020488 	.word	0x40020488
 8003ad8:	400204a0 	.word	0x400204a0
 8003adc:	400204b8 	.word	0x400204b8
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	bf14      	ite	ne
 8003aee:	2301      	movne	r3, #1
 8003af0:	2300      	moveq	r3, #0
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 8087 	beq.w	8003c08 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003afe:	f003 031f 	and.w	r3, r3, #31
 8003b02:	2220      	movs	r2, #32
 8003b04:	409a      	lsls	r2, r3
 8003b06:	6a3b      	ldr	r3, [r7, #32]
 8003b08:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d139      	bne.n	8003b8a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 0216 	bic.w	r2, r2, #22
 8003b24:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	695a      	ldr	r2, [r3, #20]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b34:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d103      	bne.n	8003b46 <HAL_DMA_IRQHandler+0x736>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d007      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 0208 	bic.w	r2, r2, #8
 8003b54:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b5a:	f003 031f 	and.w	r3, r3, #31
 8003b5e:	223f      	movs	r2, #63	@ 0x3f
 8003b60:	409a      	lsls	r2, r3
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 834a 	beq.w	8004214 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	4798      	blx	r3
          }
          return;
 8003b88:	e344      	b.n	8004214 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d018      	beq.n	8003bca <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d108      	bne.n	8003bb8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d02c      	beq.n	8003c08 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	4798      	blx	r3
 8003bb6:	e027      	b.n	8003c08 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d023      	beq.n	8003c08 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	4798      	blx	r3
 8003bc8:	e01e      	b.n	8003c08 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10f      	bne.n	8003bf8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0210 	bic.w	r2, r2, #16
 8003be6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d003      	beq.n	8003c08 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 8306 	beq.w	800421e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 8088 	beq.w	8003d30 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2204      	movs	r2, #4
 8003c24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a7a      	ldr	r2, [pc, #488]	@ (8003e18 <HAL_DMA_IRQHandler+0xa08>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d04a      	beq.n	8003cc8 <HAL_DMA_IRQHandler+0x8b8>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a79      	ldr	r2, [pc, #484]	@ (8003e1c <HAL_DMA_IRQHandler+0xa0c>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d045      	beq.n	8003cc8 <HAL_DMA_IRQHandler+0x8b8>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a77      	ldr	r2, [pc, #476]	@ (8003e20 <HAL_DMA_IRQHandler+0xa10>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d040      	beq.n	8003cc8 <HAL_DMA_IRQHandler+0x8b8>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a76      	ldr	r2, [pc, #472]	@ (8003e24 <HAL_DMA_IRQHandler+0xa14>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d03b      	beq.n	8003cc8 <HAL_DMA_IRQHandler+0x8b8>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a74      	ldr	r2, [pc, #464]	@ (8003e28 <HAL_DMA_IRQHandler+0xa18>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d036      	beq.n	8003cc8 <HAL_DMA_IRQHandler+0x8b8>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a73      	ldr	r2, [pc, #460]	@ (8003e2c <HAL_DMA_IRQHandler+0xa1c>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d031      	beq.n	8003cc8 <HAL_DMA_IRQHandler+0x8b8>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a71      	ldr	r2, [pc, #452]	@ (8003e30 <HAL_DMA_IRQHandler+0xa20>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d02c      	beq.n	8003cc8 <HAL_DMA_IRQHandler+0x8b8>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a70      	ldr	r2, [pc, #448]	@ (8003e34 <HAL_DMA_IRQHandler+0xa24>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d027      	beq.n	8003cc8 <HAL_DMA_IRQHandler+0x8b8>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a6e      	ldr	r2, [pc, #440]	@ (8003e38 <HAL_DMA_IRQHandler+0xa28>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d022      	beq.n	8003cc8 <HAL_DMA_IRQHandler+0x8b8>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a6d      	ldr	r2, [pc, #436]	@ (8003e3c <HAL_DMA_IRQHandler+0xa2c>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d01d      	beq.n	8003cc8 <HAL_DMA_IRQHandler+0x8b8>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a6b      	ldr	r2, [pc, #428]	@ (8003e40 <HAL_DMA_IRQHandler+0xa30>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d018      	beq.n	8003cc8 <HAL_DMA_IRQHandler+0x8b8>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a6a      	ldr	r2, [pc, #424]	@ (8003e44 <HAL_DMA_IRQHandler+0xa34>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d013      	beq.n	8003cc8 <HAL_DMA_IRQHandler+0x8b8>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a68      	ldr	r2, [pc, #416]	@ (8003e48 <HAL_DMA_IRQHandler+0xa38>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d00e      	beq.n	8003cc8 <HAL_DMA_IRQHandler+0x8b8>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a67      	ldr	r2, [pc, #412]	@ (8003e4c <HAL_DMA_IRQHandler+0xa3c>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d009      	beq.n	8003cc8 <HAL_DMA_IRQHandler+0x8b8>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a65      	ldr	r2, [pc, #404]	@ (8003e50 <HAL_DMA_IRQHandler+0xa40>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d004      	beq.n	8003cc8 <HAL_DMA_IRQHandler+0x8b8>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a64      	ldr	r2, [pc, #400]	@ (8003e54 <HAL_DMA_IRQHandler+0xa44>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d108      	bne.n	8003cda <HAL_DMA_IRQHandler+0x8ca>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 0201 	bic.w	r2, r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]
 8003cd8:	e007      	b.n	8003cea <HAL_DMA_IRQHandler+0x8da>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 0201 	bic.w	r2, r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	3301      	adds	r3, #1
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d307      	bcc.n	8003d06 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1f2      	bne.n	8003cea <HAL_DMA_IRQHandler+0x8da>
 8003d04:	e000      	b.n	8003d08 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003d06:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d004      	beq.n	8003d20 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2203      	movs	r2, #3
 8003d1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003d1e:	e003      	b.n	8003d28 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 8272 	beq.w	800421e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	4798      	blx	r3
 8003d42:	e26c      	b.n	800421e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a43      	ldr	r2, [pc, #268]	@ (8003e58 <HAL_DMA_IRQHandler+0xa48>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d022      	beq.n	8003d94 <HAL_DMA_IRQHandler+0x984>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a42      	ldr	r2, [pc, #264]	@ (8003e5c <HAL_DMA_IRQHandler+0xa4c>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d01d      	beq.n	8003d94 <HAL_DMA_IRQHandler+0x984>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a40      	ldr	r2, [pc, #256]	@ (8003e60 <HAL_DMA_IRQHandler+0xa50>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d018      	beq.n	8003d94 <HAL_DMA_IRQHandler+0x984>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a3f      	ldr	r2, [pc, #252]	@ (8003e64 <HAL_DMA_IRQHandler+0xa54>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d013      	beq.n	8003d94 <HAL_DMA_IRQHandler+0x984>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a3d      	ldr	r2, [pc, #244]	@ (8003e68 <HAL_DMA_IRQHandler+0xa58>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d00e      	beq.n	8003d94 <HAL_DMA_IRQHandler+0x984>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a3c      	ldr	r2, [pc, #240]	@ (8003e6c <HAL_DMA_IRQHandler+0xa5c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d009      	beq.n	8003d94 <HAL_DMA_IRQHandler+0x984>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a3a      	ldr	r2, [pc, #232]	@ (8003e70 <HAL_DMA_IRQHandler+0xa60>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d004      	beq.n	8003d94 <HAL_DMA_IRQHandler+0x984>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a39      	ldr	r2, [pc, #228]	@ (8003e74 <HAL_DMA_IRQHandler+0xa64>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d101      	bne.n	8003d98 <HAL_DMA_IRQHandler+0x988>
 8003d94:	2301      	movs	r3, #1
 8003d96:	e000      	b.n	8003d9a <HAL_DMA_IRQHandler+0x98a>
 8003d98:	2300      	movs	r3, #0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 823f 	beq.w	800421e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dac:	f003 031f 	and.w	r3, r3, #31
 8003db0:	2204      	movs	r2, #4
 8003db2:	409a      	lsls	r2, r3
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	4013      	ands	r3, r2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 80cd 	beq.w	8003f58 <HAL_DMA_IRQHandler+0xb48>
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 80c7 	beq.w	8003f58 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dce:	f003 031f 	and.w	r3, r3, #31
 8003dd2:	2204      	movs	r2, #4
 8003dd4:	409a      	lsls	r2, r3
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d049      	beq.n	8003e78 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d109      	bne.n	8003e02 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 8210 	beq.w	8004218 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e00:	e20a      	b.n	8004218 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 8206 	beq.w	8004218 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e14:	e200      	b.n	8004218 <HAL_DMA_IRQHandler+0xe08>
 8003e16:	bf00      	nop
 8003e18:	40020010 	.word	0x40020010
 8003e1c:	40020028 	.word	0x40020028
 8003e20:	40020040 	.word	0x40020040
 8003e24:	40020058 	.word	0x40020058
 8003e28:	40020070 	.word	0x40020070
 8003e2c:	40020088 	.word	0x40020088
 8003e30:	400200a0 	.word	0x400200a0
 8003e34:	400200b8 	.word	0x400200b8
 8003e38:	40020410 	.word	0x40020410
 8003e3c:	40020428 	.word	0x40020428
 8003e40:	40020440 	.word	0x40020440
 8003e44:	40020458 	.word	0x40020458
 8003e48:	40020470 	.word	0x40020470
 8003e4c:	40020488 	.word	0x40020488
 8003e50:	400204a0 	.word	0x400204a0
 8003e54:	400204b8 	.word	0x400204b8
 8003e58:	58025408 	.word	0x58025408
 8003e5c:	5802541c 	.word	0x5802541c
 8003e60:	58025430 	.word	0x58025430
 8003e64:	58025444 	.word	0x58025444
 8003e68:	58025458 	.word	0x58025458
 8003e6c:	5802546c 	.word	0x5802546c
 8003e70:	58025480 	.word	0x58025480
 8003e74:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	f003 0320 	and.w	r3, r3, #32
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d160      	bne.n	8003f44 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a7f      	ldr	r2, [pc, #508]	@ (8004084 <HAL_DMA_IRQHandler+0xc74>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d04a      	beq.n	8003f22 <HAL_DMA_IRQHandler+0xb12>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a7d      	ldr	r2, [pc, #500]	@ (8004088 <HAL_DMA_IRQHandler+0xc78>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d045      	beq.n	8003f22 <HAL_DMA_IRQHandler+0xb12>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a7c      	ldr	r2, [pc, #496]	@ (800408c <HAL_DMA_IRQHandler+0xc7c>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d040      	beq.n	8003f22 <HAL_DMA_IRQHandler+0xb12>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a7a      	ldr	r2, [pc, #488]	@ (8004090 <HAL_DMA_IRQHandler+0xc80>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d03b      	beq.n	8003f22 <HAL_DMA_IRQHandler+0xb12>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a79      	ldr	r2, [pc, #484]	@ (8004094 <HAL_DMA_IRQHandler+0xc84>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d036      	beq.n	8003f22 <HAL_DMA_IRQHandler+0xb12>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a77      	ldr	r2, [pc, #476]	@ (8004098 <HAL_DMA_IRQHandler+0xc88>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d031      	beq.n	8003f22 <HAL_DMA_IRQHandler+0xb12>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a76      	ldr	r2, [pc, #472]	@ (800409c <HAL_DMA_IRQHandler+0xc8c>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d02c      	beq.n	8003f22 <HAL_DMA_IRQHandler+0xb12>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a74      	ldr	r2, [pc, #464]	@ (80040a0 <HAL_DMA_IRQHandler+0xc90>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d027      	beq.n	8003f22 <HAL_DMA_IRQHandler+0xb12>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a73      	ldr	r2, [pc, #460]	@ (80040a4 <HAL_DMA_IRQHandler+0xc94>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d022      	beq.n	8003f22 <HAL_DMA_IRQHandler+0xb12>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a71      	ldr	r2, [pc, #452]	@ (80040a8 <HAL_DMA_IRQHandler+0xc98>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d01d      	beq.n	8003f22 <HAL_DMA_IRQHandler+0xb12>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a70      	ldr	r2, [pc, #448]	@ (80040ac <HAL_DMA_IRQHandler+0xc9c>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d018      	beq.n	8003f22 <HAL_DMA_IRQHandler+0xb12>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a6e      	ldr	r2, [pc, #440]	@ (80040b0 <HAL_DMA_IRQHandler+0xca0>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d013      	beq.n	8003f22 <HAL_DMA_IRQHandler+0xb12>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a6d      	ldr	r2, [pc, #436]	@ (80040b4 <HAL_DMA_IRQHandler+0xca4>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d00e      	beq.n	8003f22 <HAL_DMA_IRQHandler+0xb12>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a6b      	ldr	r2, [pc, #428]	@ (80040b8 <HAL_DMA_IRQHandler+0xca8>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d009      	beq.n	8003f22 <HAL_DMA_IRQHandler+0xb12>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a6a      	ldr	r2, [pc, #424]	@ (80040bc <HAL_DMA_IRQHandler+0xcac>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d004      	beq.n	8003f22 <HAL_DMA_IRQHandler+0xb12>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a68      	ldr	r2, [pc, #416]	@ (80040c0 <HAL_DMA_IRQHandler+0xcb0>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d108      	bne.n	8003f34 <HAL_DMA_IRQHandler+0xb24>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 0208 	bic.w	r2, r2, #8
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	e007      	b.n	8003f44 <HAL_DMA_IRQHandler+0xb34>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 0204 	bic.w	r2, r2, #4
 8003f42:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 8165 	beq.w	8004218 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f56:	e15f      	b.n	8004218 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f5c:	f003 031f 	and.w	r3, r3, #31
 8003f60:	2202      	movs	r2, #2
 8003f62:	409a      	lsls	r2, r3
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	4013      	ands	r3, r2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 80c5 	beq.w	80040f8 <HAL_DMA_IRQHandler+0xce8>
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 80bf 	beq.w	80040f8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f7e:	f003 031f 	and.w	r3, r3, #31
 8003f82:	2202      	movs	r2, #2
 8003f84:	409a      	lsls	r2, r3
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d018      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d109      	bne.n	8003fb2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 813a 	beq.w	800421c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fb0:	e134      	b.n	800421c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 8130 	beq.w	800421c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fc4:	e12a      	b.n	800421c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	f003 0320 	and.w	r3, r3, #32
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f040 8089 	bne.w	80040e4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a2b      	ldr	r2, [pc, #172]	@ (8004084 <HAL_DMA_IRQHandler+0xc74>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d04a      	beq.n	8004072 <HAL_DMA_IRQHandler+0xc62>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a29      	ldr	r2, [pc, #164]	@ (8004088 <HAL_DMA_IRQHandler+0xc78>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d045      	beq.n	8004072 <HAL_DMA_IRQHandler+0xc62>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a28      	ldr	r2, [pc, #160]	@ (800408c <HAL_DMA_IRQHandler+0xc7c>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d040      	beq.n	8004072 <HAL_DMA_IRQHandler+0xc62>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a26      	ldr	r2, [pc, #152]	@ (8004090 <HAL_DMA_IRQHandler+0xc80>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d03b      	beq.n	8004072 <HAL_DMA_IRQHandler+0xc62>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a25      	ldr	r2, [pc, #148]	@ (8004094 <HAL_DMA_IRQHandler+0xc84>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d036      	beq.n	8004072 <HAL_DMA_IRQHandler+0xc62>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a23      	ldr	r2, [pc, #140]	@ (8004098 <HAL_DMA_IRQHandler+0xc88>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d031      	beq.n	8004072 <HAL_DMA_IRQHandler+0xc62>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a22      	ldr	r2, [pc, #136]	@ (800409c <HAL_DMA_IRQHandler+0xc8c>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d02c      	beq.n	8004072 <HAL_DMA_IRQHandler+0xc62>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a20      	ldr	r2, [pc, #128]	@ (80040a0 <HAL_DMA_IRQHandler+0xc90>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d027      	beq.n	8004072 <HAL_DMA_IRQHandler+0xc62>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a1f      	ldr	r2, [pc, #124]	@ (80040a4 <HAL_DMA_IRQHandler+0xc94>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d022      	beq.n	8004072 <HAL_DMA_IRQHandler+0xc62>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a1d      	ldr	r2, [pc, #116]	@ (80040a8 <HAL_DMA_IRQHandler+0xc98>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d01d      	beq.n	8004072 <HAL_DMA_IRQHandler+0xc62>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a1c      	ldr	r2, [pc, #112]	@ (80040ac <HAL_DMA_IRQHandler+0xc9c>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d018      	beq.n	8004072 <HAL_DMA_IRQHandler+0xc62>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a1a      	ldr	r2, [pc, #104]	@ (80040b0 <HAL_DMA_IRQHandler+0xca0>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d013      	beq.n	8004072 <HAL_DMA_IRQHandler+0xc62>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a19      	ldr	r2, [pc, #100]	@ (80040b4 <HAL_DMA_IRQHandler+0xca4>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d00e      	beq.n	8004072 <HAL_DMA_IRQHandler+0xc62>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a17      	ldr	r2, [pc, #92]	@ (80040b8 <HAL_DMA_IRQHandler+0xca8>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d009      	beq.n	8004072 <HAL_DMA_IRQHandler+0xc62>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a16      	ldr	r2, [pc, #88]	@ (80040bc <HAL_DMA_IRQHandler+0xcac>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d004      	beq.n	8004072 <HAL_DMA_IRQHandler+0xc62>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a14      	ldr	r2, [pc, #80]	@ (80040c0 <HAL_DMA_IRQHandler+0xcb0>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d128      	bne.n	80040c4 <HAL_DMA_IRQHandler+0xcb4>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 0214 	bic.w	r2, r2, #20
 8004080:	601a      	str	r2, [r3, #0]
 8004082:	e027      	b.n	80040d4 <HAL_DMA_IRQHandler+0xcc4>
 8004084:	40020010 	.word	0x40020010
 8004088:	40020028 	.word	0x40020028
 800408c:	40020040 	.word	0x40020040
 8004090:	40020058 	.word	0x40020058
 8004094:	40020070 	.word	0x40020070
 8004098:	40020088 	.word	0x40020088
 800409c:	400200a0 	.word	0x400200a0
 80040a0:	400200b8 	.word	0x400200b8
 80040a4:	40020410 	.word	0x40020410
 80040a8:	40020428 	.word	0x40020428
 80040ac:	40020440 	.word	0x40020440
 80040b0:	40020458 	.word	0x40020458
 80040b4:	40020470 	.word	0x40020470
 80040b8:	40020488 	.word	0x40020488
 80040bc:	400204a0 	.word	0x400204a0
 80040c0:	400204b8 	.word	0x400204b8
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f022 020a 	bic.w	r2, r2, #10
 80040d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 8097 	beq.w	800421c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040f6:	e091      	b.n	800421c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040fc:	f003 031f 	and.w	r3, r3, #31
 8004100:	2208      	movs	r2, #8
 8004102:	409a      	lsls	r2, r3
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	4013      	ands	r3, r2
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 8088 	beq.w	800421e <HAL_DMA_IRQHandler+0xe0e>
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	f003 0308 	and.w	r3, r3, #8
 8004114:	2b00      	cmp	r3, #0
 8004116:	f000 8082 	beq.w	800421e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a41      	ldr	r2, [pc, #260]	@ (8004224 <HAL_DMA_IRQHandler+0xe14>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d04a      	beq.n	80041ba <HAL_DMA_IRQHandler+0xdaa>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a3f      	ldr	r2, [pc, #252]	@ (8004228 <HAL_DMA_IRQHandler+0xe18>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d045      	beq.n	80041ba <HAL_DMA_IRQHandler+0xdaa>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a3e      	ldr	r2, [pc, #248]	@ (800422c <HAL_DMA_IRQHandler+0xe1c>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d040      	beq.n	80041ba <HAL_DMA_IRQHandler+0xdaa>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a3c      	ldr	r2, [pc, #240]	@ (8004230 <HAL_DMA_IRQHandler+0xe20>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d03b      	beq.n	80041ba <HAL_DMA_IRQHandler+0xdaa>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a3b      	ldr	r2, [pc, #236]	@ (8004234 <HAL_DMA_IRQHandler+0xe24>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d036      	beq.n	80041ba <HAL_DMA_IRQHandler+0xdaa>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a39      	ldr	r2, [pc, #228]	@ (8004238 <HAL_DMA_IRQHandler+0xe28>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d031      	beq.n	80041ba <HAL_DMA_IRQHandler+0xdaa>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a38      	ldr	r2, [pc, #224]	@ (800423c <HAL_DMA_IRQHandler+0xe2c>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d02c      	beq.n	80041ba <HAL_DMA_IRQHandler+0xdaa>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a36      	ldr	r2, [pc, #216]	@ (8004240 <HAL_DMA_IRQHandler+0xe30>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d027      	beq.n	80041ba <HAL_DMA_IRQHandler+0xdaa>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a35      	ldr	r2, [pc, #212]	@ (8004244 <HAL_DMA_IRQHandler+0xe34>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d022      	beq.n	80041ba <HAL_DMA_IRQHandler+0xdaa>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a33      	ldr	r2, [pc, #204]	@ (8004248 <HAL_DMA_IRQHandler+0xe38>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d01d      	beq.n	80041ba <HAL_DMA_IRQHandler+0xdaa>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a32      	ldr	r2, [pc, #200]	@ (800424c <HAL_DMA_IRQHandler+0xe3c>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d018      	beq.n	80041ba <HAL_DMA_IRQHandler+0xdaa>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a30      	ldr	r2, [pc, #192]	@ (8004250 <HAL_DMA_IRQHandler+0xe40>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d013      	beq.n	80041ba <HAL_DMA_IRQHandler+0xdaa>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a2f      	ldr	r2, [pc, #188]	@ (8004254 <HAL_DMA_IRQHandler+0xe44>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d00e      	beq.n	80041ba <HAL_DMA_IRQHandler+0xdaa>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a2d      	ldr	r2, [pc, #180]	@ (8004258 <HAL_DMA_IRQHandler+0xe48>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d009      	beq.n	80041ba <HAL_DMA_IRQHandler+0xdaa>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a2c      	ldr	r2, [pc, #176]	@ (800425c <HAL_DMA_IRQHandler+0xe4c>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d004      	beq.n	80041ba <HAL_DMA_IRQHandler+0xdaa>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a2a      	ldr	r2, [pc, #168]	@ (8004260 <HAL_DMA_IRQHandler+0xe50>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d108      	bne.n	80041cc <HAL_DMA_IRQHandler+0xdbc>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 021c 	bic.w	r2, r2, #28
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	e007      	b.n	80041dc <HAL_DMA_IRQHandler+0xdcc>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 020e 	bic.w	r2, r2, #14
 80041da:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041e0:	f003 031f 	and.w	r3, r3, #31
 80041e4:	2201      	movs	r2, #1
 80041e6:	409a      	lsls	r2, r3
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004206:	2b00      	cmp	r3, #0
 8004208:	d009      	beq.n	800421e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	4798      	blx	r3
 8004212:	e004      	b.n	800421e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004214:	bf00      	nop
 8004216:	e002      	b.n	800421e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004218:	bf00      	nop
 800421a:	e000      	b.n	800421e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800421c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800421e:	3728      	adds	r7, #40	@ 0x28
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	40020010 	.word	0x40020010
 8004228:	40020028 	.word	0x40020028
 800422c:	40020040 	.word	0x40020040
 8004230:	40020058 	.word	0x40020058
 8004234:	40020070 	.word	0x40020070
 8004238:	40020088 	.word	0x40020088
 800423c:	400200a0 	.word	0x400200a0
 8004240:	400200b8 	.word	0x400200b8
 8004244:	40020410 	.word	0x40020410
 8004248:	40020428 	.word	0x40020428
 800424c:	40020440 	.word	0x40020440
 8004250:	40020458 	.word	0x40020458
 8004254:	40020470 	.word	0x40020470
 8004258:	40020488 	.word	0x40020488
 800425c:	400204a0 	.word	0x400204a0
 8004260:	400204b8 	.word	0x400204b8

08004264 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004264:	b480      	push	{r7}
 8004266:	b087      	sub	sp, #28
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
 8004270:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004276:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800427c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a7f      	ldr	r2, [pc, #508]	@ (8004480 <DMA_SetConfig+0x21c>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d072      	beq.n	800436e <DMA_SetConfig+0x10a>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a7d      	ldr	r2, [pc, #500]	@ (8004484 <DMA_SetConfig+0x220>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d06d      	beq.n	800436e <DMA_SetConfig+0x10a>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a7c      	ldr	r2, [pc, #496]	@ (8004488 <DMA_SetConfig+0x224>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d068      	beq.n	800436e <DMA_SetConfig+0x10a>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a7a      	ldr	r2, [pc, #488]	@ (800448c <DMA_SetConfig+0x228>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d063      	beq.n	800436e <DMA_SetConfig+0x10a>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a79      	ldr	r2, [pc, #484]	@ (8004490 <DMA_SetConfig+0x22c>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d05e      	beq.n	800436e <DMA_SetConfig+0x10a>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a77      	ldr	r2, [pc, #476]	@ (8004494 <DMA_SetConfig+0x230>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d059      	beq.n	800436e <DMA_SetConfig+0x10a>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a76      	ldr	r2, [pc, #472]	@ (8004498 <DMA_SetConfig+0x234>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d054      	beq.n	800436e <DMA_SetConfig+0x10a>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a74      	ldr	r2, [pc, #464]	@ (800449c <DMA_SetConfig+0x238>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d04f      	beq.n	800436e <DMA_SetConfig+0x10a>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a73      	ldr	r2, [pc, #460]	@ (80044a0 <DMA_SetConfig+0x23c>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d04a      	beq.n	800436e <DMA_SetConfig+0x10a>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a71      	ldr	r2, [pc, #452]	@ (80044a4 <DMA_SetConfig+0x240>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d045      	beq.n	800436e <DMA_SetConfig+0x10a>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a70      	ldr	r2, [pc, #448]	@ (80044a8 <DMA_SetConfig+0x244>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d040      	beq.n	800436e <DMA_SetConfig+0x10a>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a6e      	ldr	r2, [pc, #440]	@ (80044ac <DMA_SetConfig+0x248>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d03b      	beq.n	800436e <DMA_SetConfig+0x10a>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a6d      	ldr	r2, [pc, #436]	@ (80044b0 <DMA_SetConfig+0x24c>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d036      	beq.n	800436e <DMA_SetConfig+0x10a>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a6b      	ldr	r2, [pc, #428]	@ (80044b4 <DMA_SetConfig+0x250>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d031      	beq.n	800436e <DMA_SetConfig+0x10a>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a6a      	ldr	r2, [pc, #424]	@ (80044b8 <DMA_SetConfig+0x254>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d02c      	beq.n	800436e <DMA_SetConfig+0x10a>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a68      	ldr	r2, [pc, #416]	@ (80044bc <DMA_SetConfig+0x258>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d027      	beq.n	800436e <DMA_SetConfig+0x10a>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a67      	ldr	r2, [pc, #412]	@ (80044c0 <DMA_SetConfig+0x25c>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d022      	beq.n	800436e <DMA_SetConfig+0x10a>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a65      	ldr	r2, [pc, #404]	@ (80044c4 <DMA_SetConfig+0x260>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d01d      	beq.n	800436e <DMA_SetConfig+0x10a>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a64      	ldr	r2, [pc, #400]	@ (80044c8 <DMA_SetConfig+0x264>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d018      	beq.n	800436e <DMA_SetConfig+0x10a>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a62      	ldr	r2, [pc, #392]	@ (80044cc <DMA_SetConfig+0x268>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d013      	beq.n	800436e <DMA_SetConfig+0x10a>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a61      	ldr	r2, [pc, #388]	@ (80044d0 <DMA_SetConfig+0x26c>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d00e      	beq.n	800436e <DMA_SetConfig+0x10a>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a5f      	ldr	r2, [pc, #380]	@ (80044d4 <DMA_SetConfig+0x270>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d009      	beq.n	800436e <DMA_SetConfig+0x10a>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a5e      	ldr	r2, [pc, #376]	@ (80044d8 <DMA_SetConfig+0x274>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d004      	beq.n	800436e <DMA_SetConfig+0x10a>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a5c      	ldr	r2, [pc, #368]	@ (80044dc <DMA_SetConfig+0x278>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d101      	bne.n	8004372 <DMA_SetConfig+0x10e>
 800436e:	2301      	movs	r3, #1
 8004370:	e000      	b.n	8004374 <DMA_SetConfig+0x110>
 8004372:	2300      	movs	r3, #0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00d      	beq.n	8004394 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004380:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004386:	2b00      	cmp	r3, #0
 8004388:	d004      	beq.n	8004394 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004392:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a39      	ldr	r2, [pc, #228]	@ (8004480 <DMA_SetConfig+0x21c>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d04a      	beq.n	8004434 <DMA_SetConfig+0x1d0>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a38      	ldr	r2, [pc, #224]	@ (8004484 <DMA_SetConfig+0x220>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d045      	beq.n	8004434 <DMA_SetConfig+0x1d0>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a36      	ldr	r2, [pc, #216]	@ (8004488 <DMA_SetConfig+0x224>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d040      	beq.n	8004434 <DMA_SetConfig+0x1d0>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a35      	ldr	r2, [pc, #212]	@ (800448c <DMA_SetConfig+0x228>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d03b      	beq.n	8004434 <DMA_SetConfig+0x1d0>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a33      	ldr	r2, [pc, #204]	@ (8004490 <DMA_SetConfig+0x22c>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d036      	beq.n	8004434 <DMA_SetConfig+0x1d0>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a32      	ldr	r2, [pc, #200]	@ (8004494 <DMA_SetConfig+0x230>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d031      	beq.n	8004434 <DMA_SetConfig+0x1d0>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a30      	ldr	r2, [pc, #192]	@ (8004498 <DMA_SetConfig+0x234>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d02c      	beq.n	8004434 <DMA_SetConfig+0x1d0>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a2f      	ldr	r2, [pc, #188]	@ (800449c <DMA_SetConfig+0x238>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d027      	beq.n	8004434 <DMA_SetConfig+0x1d0>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a2d      	ldr	r2, [pc, #180]	@ (80044a0 <DMA_SetConfig+0x23c>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d022      	beq.n	8004434 <DMA_SetConfig+0x1d0>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a2c      	ldr	r2, [pc, #176]	@ (80044a4 <DMA_SetConfig+0x240>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d01d      	beq.n	8004434 <DMA_SetConfig+0x1d0>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a2a      	ldr	r2, [pc, #168]	@ (80044a8 <DMA_SetConfig+0x244>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d018      	beq.n	8004434 <DMA_SetConfig+0x1d0>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a29      	ldr	r2, [pc, #164]	@ (80044ac <DMA_SetConfig+0x248>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d013      	beq.n	8004434 <DMA_SetConfig+0x1d0>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a27      	ldr	r2, [pc, #156]	@ (80044b0 <DMA_SetConfig+0x24c>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d00e      	beq.n	8004434 <DMA_SetConfig+0x1d0>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a26      	ldr	r2, [pc, #152]	@ (80044b4 <DMA_SetConfig+0x250>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d009      	beq.n	8004434 <DMA_SetConfig+0x1d0>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a24      	ldr	r2, [pc, #144]	@ (80044b8 <DMA_SetConfig+0x254>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d004      	beq.n	8004434 <DMA_SetConfig+0x1d0>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a23      	ldr	r2, [pc, #140]	@ (80044bc <DMA_SetConfig+0x258>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d101      	bne.n	8004438 <DMA_SetConfig+0x1d4>
 8004434:	2301      	movs	r3, #1
 8004436:	e000      	b.n	800443a <DMA_SetConfig+0x1d6>
 8004438:	2300      	movs	r3, #0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d059      	beq.n	80044f2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004442:	f003 031f 	and.w	r3, r3, #31
 8004446:	223f      	movs	r2, #63	@ 0x3f
 8004448:	409a      	lsls	r2, r3
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800445c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	2b40      	cmp	r3, #64	@ 0x40
 800446c:	d138      	bne.n	80044e0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800447e:	e086      	b.n	800458e <DMA_SetConfig+0x32a>
 8004480:	40020010 	.word	0x40020010
 8004484:	40020028 	.word	0x40020028
 8004488:	40020040 	.word	0x40020040
 800448c:	40020058 	.word	0x40020058
 8004490:	40020070 	.word	0x40020070
 8004494:	40020088 	.word	0x40020088
 8004498:	400200a0 	.word	0x400200a0
 800449c:	400200b8 	.word	0x400200b8
 80044a0:	40020410 	.word	0x40020410
 80044a4:	40020428 	.word	0x40020428
 80044a8:	40020440 	.word	0x40020440
 80044ac:	40020458 	.word	0x40020458
 80044b0:	40020470 	.word	0x40020470
 80044b4:	40020488 	.word	0x40020488
 80044b8:	400204a0 	.word	0x400204a0
 80044bc:	400204b8 	.word	0x400204b8
 80044c0:	58025408 	.word	0x58025408
 80044c4:	5802541c 	.word	0x5802541c
 80044c8:	58025430 	.word	0x58025430
 80044cc:	58025444 	.word	0x58025444
 80044d0:	58025458 	.word	0x58025458
 80044d4:	5802546c 	.word	0x5802546c
 80044d8:	58025480 	.word	0x58025480
 80044dc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	60da      	str	r2, [r3, #12]
}
 80044f0:	e04d      	b.n	800458e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a29      	ldr	r2, [pc, #164]	@ (800459c <DMA_SetConfig+0x338>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d022      	beq.n	8004542 <DMA_SetConfig+0x2de>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a27      	ldr	r2, [pc, #156]	@ (80045a0 <DMA_SetConfig+0x33c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d01d      	beq.n	8004542 <DMA_SetConfig+0x2de>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a26      	ldr	r2, [pc, #152]	@ (80045a4 <DMA_SetConfig+0x340>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d018      	beq.n	8004542 <DMA_SetConfig+0x2de>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a24      	ldr	r2, [pc, #144]	@ (80045a8 <DMA_SetConfig+0x344>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d013      	beq.n	8004542 <DMA_SetConfig+0x2de>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a23      	ldr	r2, [pc, #140]	@ (80045ac <DMA_SetConfig+0x348>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d00e      	beq.n	8004542 <DMA_SetConfig+0x2de>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a21      	ldr	r2, [pc, #132]	@ (80045b0 <DMA_SetConfig+0x34c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d009      	beq.n	8004542 <DMA_SetConfig+0x2de>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a20      	ldr	r2, [pc, #128]	@ (80045b4 <DMA_SetConfig+0x350>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d004      	beq.n	8004542 <DMA_SetConfig+0x2de>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a1e      	ldr	r2, [pc, #120]	@ (80045b8 <DMA_SetConfig+0x354>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d101      	bne.n	8004546 <DMA_SetConfig+0x2e2>
 8004542:	2301      	movs	r3, #1
 8004544:	e000      	b.n	8004548 <DMA_SetConfig+0x2e4>
 8004546:	2300      	movs	r3, #0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d020      	beq.n	800458e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004550:	f003 031f 	and.w	r3, r3, #31
 8004554:	2201      	movs	r2, #1
 8004556:	409a      	lsls	r2, r3
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	2b40      	cmp	r3, #64	@ 0x40
 800456a:	d108      	bne.n	800457e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68ba      	ldr	r2, [r7, #8]
 800457a:	60da      	str	r2, [r3, #12]
}
 800457c:	e007      	b.n	800458e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	60da      	str	r2, [r3, #12]
}
 800458e:	bf00      	nop
 8004590:	371c      	adds	r7, #28
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	58025408 	.word	0x58025408
 80045a0:	5802541c 	.word	0x5802541c
 80045a4:	58025430 	.word	0x58025430
 80045a8:	58025444 	.word	0x58025444
 80045ac:	58025458 	.word	0x58025458
 80045b0:	5802546c 	.word	0x5802546c
 80045b4:	58025480 	.word	0x58025480
 80045b8:	58025494 	.word	0x58025494

080045bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a42      	ldr	r2, [pc, #264]	@ (80046d4 <DMA_CalcBaseAndBitshift+0x118>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d04a      	beq.n	8004664 <DMA_CalcBaseAndBitshift+0xa8>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a41      	ldr	r2, [pc, #260]	@ (80046d8 <DMA_CalcBaseAndBitshift+0x11c>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d045      	beq.n	8004664 <DMA_CalcBaseAndBitshift+0xa8>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a3f      	ldr	r2, [pc, #252]	@ (80046dc <DMA_CalcBaseAndBitshift+0x120>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d040      	beq.n	8004664 <DMA_CalcBaseAndBitshift+0xa8>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a3e      	ldr	r2, [pc, #248]	@ (80046e0 <DMA_CalcBaseAndBitshift+0x124>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d03b      	beq.n	8004664 <DMA_CalcBaseAndBitshift+0xa8>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a3c      	ldr	r2, [pc, #240]	@ (80046e4 <DMA_CalcBaseAndBitshift+0x128>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d036      	beq.n	8004664 <DMA_CalcBaseAndBitshift+0xa8>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a3b      	ldr	r2, [pc, #236]	@ (80046e8 <DMA_CalcBaseAndBitshift+0x12c>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d031      	beq.n	8004664 <DMA_CalcBaseAndBitshift+0xa8>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a39      	ldr	r2, [pc, #228]	@ (80046ec <DMA_CalcBaseAndBitshift+0x130>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d02c      	beq.n	8004664 <DMA_CalcBaseAndBitshift+0xa8>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a38      	ldr	r2, [pc, #224]	@ (80046f0 <DMA_CalcBaseAndBitshift+0x134>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d027      	beq.n	8004664 <DMA_CalcBaseAndBitshift+0xa8>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a36      	ldr	r2, [pc, #216]	@ (80046f4 <DMA_CalcBaseAndBitshift+0x138>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d022      	beq.n	8004664 <DMA_CalcBaseAndBitshift+0xa8>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a35      	ldr	r2, [pc, #212]	@ (80046f8 <DMA_CalcBaseAndBitshift+0x13c>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d01d      	beq.n	8004664 <DMA_CalcBaseAndBitshift+0xa8>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a33      	ldr	r2, [pc, #204]	@ (80046fc <DMA_CalcBaseAndBitshift+0x140>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d018      	beq.n	8004664 <DMA_CalcBaseAndBitshift+0xa8>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a32      	ldr	r2, [pc, #200]	@ (8004700 <DMA_CalcBaseAndBitshift+0x144>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d013      	beq.n	8004664 <DMA_CalcBaseAndBitshift+0xa8>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a30      	ldr	r2, [pc, #192]	@ (8004704 <DMA_CalcBaseAndBitshift+0x148>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d00e      	beq.n	8004664 <DMA_CalcBaseAndBitshift+0xa8>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a2f      	ldr	r2, [pc, #188]	@ (8004708 <DMA_CalcBaseAndBitshift+0x14c>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d009      	beq.n	8004664 <DMA_CalcBaseAndBitshift+0xa8>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a2d      	ldr	r2, [pc, #180]	@ (800470c <DMA_CalcBaseAndBitshift+0x150>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d004      	beq.n	8004664 <DMA_CalcBaseAndBitshift+0xa8>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a2c      	ldr	r2, [pc, #176]	@ (8004710 <DMA_CalcBaseAndBitshift+0x154>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d101      	bne.n	8004668 <DMA_CalcBaseAndBitshift+0xac>
 8004664:	2301      	movs	r3, #1
 8004666:	e000      	b.n	800466a <DMA_CalcBaseAndBitshift+0xae>
 8004668:	2300      	movs	r3, #0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d024      	beq.n	80046b8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	b2db      	uxtb	r3, r3
 8004674:	3b10      	subs	r3, #16
 8004676:	4a27      	ldr	r2, [pc, #156]	@ (8004714 <DMA_CalcBaseAndBitshift+0x158>)
 8004678:	fba2 2303 	umull	r2, r3, r2, r3
 800467c:	091b      	lsrs	r3, r3, #4
 800467e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f003 0307 	and.w	r3, r3, #7
 8004686:	4a24      	ldr	r2, [pc, #144]	@ (8004718 <DMA_CalcBaseAndBitshift+0x15c>)
 8004688:	5cd3      	ldrb	r3, [r2, r3]
 800468a:	461a      	mov	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2b03      	cmp	r3, #3
 8004694:	d908      	bls.n	80046a8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	461a      	mov	r2, r3
 800469c:	4b1f      	ldr	r3, [pc, #124]	@ (800471c <DMA_CalcBaseAndBitshift+0x160>)
 800469e:	4013      	ands	r3, r2
 80046a0:	1d1a      	adds	r2, r3, #4
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	659a      	str	r2, [r3, #88]	@ 0x58
 80046a6:	e00d      	b.n	80046c4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	461a      	mov	r2, r3
 80046ae:	4b1b      	ldr	r3, [pc, #108]	@ (800471c <DMA_CalcBaseAndBitshift+0x160>)
 80046b0:	4013      	ands	r3, r2
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80046b6:	e005      	b.n	80046c4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3714      	adds	r7, #20
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr
 80046d4:	40020010 	.word	0x40020010
 80046d8:	40020028 	.word	0x40020028
 80046dc:	40020040 	.word	0x40020040
 80046e0:	40020058 	.word	0x40020058
 80046e4:	40020070 	.word	0x40020070
 80046e8:	40020088 	.word	0x40020088
 80046ec:	400200a0 	.word	0x400200a0
 80046f0:	400200b8 	.word	0x400200b8
 80046f4:	40020410 	.word	0x40020410
 80046f8:	40020428 	.word	0x40020428
 80046fc:	40020440 	.word	0x40020440
 8004700:	40020458 	.word	0x40020458
 8004704:	40020470 	.word	0x40020470
 8004708:	40020488 	.word	0x40020488
 800470c:	400204a0 	.word	0x400204a0
 8004710:	400204b8 	.word	0x400204b8
 8004714:	aaaaaaab 	.word	0xaaaaaaab
 8004718:	0801276c 	.word	0x0801276c
 800471c:	fffffc00 	.word	0xfffffc00

08004720 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004728:	2300      	movs	r3, #0
 800472a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d120      	bne.n	8004776 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004738:	2b03      	cmp	r3, #3
 800473a:	d858      	bhi.n	80047ee <DMA_CheckFifoParam+0xce>
 800473c:	a201      	add	r2, pc, #4	@ (adr r2, 8004744 <DMA_CheckFifoParam+0x24>)
 800473e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004742:	bf00      	nop
 8004744:	08004755 	.word	0x08004755
 8004748:	08004767 	.word	0x08004767
 800474c:	08004755 	.word	0x08004755
 8004750:	080047ef 	.word	0x080047ef
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004758:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d048      	beq.n	80047f2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004764:	e045      	b.n	80047f2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800476a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800476e:	d142      	bne.n	80047f6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004774:	e03f      	b.n	80047f6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800477e:	d123      	bne.n	80047c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004784:	2b03      	cmp	r3, #3
 8004786:	d838      	bhi.n	80047fa <DMA_CheckFifoParam+0xda>
 8004788:	a201      	add	r2, pc, #4	@ (adr r2, 8004790 <DMA_CheckFifoParam+0x70>)
 800478a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478e:	bf00      	nop
 8004790:	080047a1 	.word	0x080047a1
 8004794:	080047a7 	.word	0x080047a7
 8004798:	080047a1 	.word	0x080047a1
 800479c:	080047b9 	.word	0x080047b9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	73fb      	strb	r3, [r7, #15]
        break;
 80047a4:	e030      	b.n	8004808 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d025      	beq.n	80047fe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80047b6:	e022      	b.n	80047fe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047bc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80047c0:	d11f      	bne.n	8004802 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80047c6:	e01c      	b.n	8004802 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d902      	bls.n	80047d6 <DMA_CheckFifoParam+0xb6>
 80047d0:	2b03      	cmp	r3, #3
 80047d2:	d003      	beq.n	80047dc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80047d4:	e018      	b.n	8004808 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	73fb      	strb	r3, [r7, #15]
        break;
 80047da:	e015      	b.n	8004808 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00e      	beq.n	8004806 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	73fb      	strb	r3, [r7, #15]
    break;
 80047ec:	e00b      	b.n	8004806 <DMA_CheckFifoParam+0xe6>
        break;
 80047ee:	bf00      	nop
 80047f0:	e00a      	b.n	8004808 <DMA_CheckFifoParam+0xe8>
        break;
 80047f2:	bf00      	nop
 80047f4:	e008      	b.n	8004808 <DMA_CheckFifoParam+0xe8>
        break;
 80047f6:	bf00      	nop
 80047f8:	e006      	b.n	8004808 <DMA_CheckFifoParam+0xe8>
        break;
 80047fa:	bf00      	nop
 80047fc:	e004      	b.n	8004808 <DMA_CheckFifoParam+0xe8>
        break;
 80047fe:	bf00      	nop
 8004800:	e002      	b.n	8004808 <DMA_CheckFifoParam+0xe8>
        break;
 8004802:	bf00      	nop
 8004804:	e000      	b.n	8004808 <DMA_CheckFifoParam+0xe8>
    break;
 8004806:	bf00      	nop
    }
  }

  return status;
 8004808:	7bfb      	ldrb	r3, [r7, #15]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop

08004818 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a38      	ldr	r2, [pc, #224]	@ (800490c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d022      	beq.n	8004876 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a36      	ldr	r2, [pc, #216]	@ (8004910 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d01d      	beq.n	8004876 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a35      	ldr	r2, [pc, #212]	@ (8004914 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d018      	beq.n	8004876 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a33      	ldr	r2, [pc, #204]	@ (8004918 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d013      	beq.n	8004876 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a32      	ldr	r2, [pc, #200]	@ (800491c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d00e      	beq.n	8004876 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a30      	ldr	r2, [pc, #192]	@ (8004920 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d009      	beq.n	8004876 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a2f      	ldr	r2, [pc, #188]	@ (8004924 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d004      	beq.n	8004876 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a2d      	ldr	r2, [pc, #180]	@ (8004928 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d101      	bne.n	800487a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004876:	2301      	movs	r3, #1
 8004878:	e000      	b.n	800487c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800487a:	2300      	movs	r3, #0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d01a      	beq.n	80048b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	b2db      	uxtb	r3, r3
 8004886:	3b08      	subs	r3, #8
 8004888:	4a28      	ldr	r2, [pc, #160]	@ (800492c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800488a:	fba2 2303 	umull	r2, r3, r2, r3
 800488e:	091b      	lsrs	r3, r3, #4
 8004890:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	4b26      	ldr	r3, [pc, #152]	@ (8004930 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004896:	4413      	add	r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	461a      	mov	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a24      	ldr	r2, [pc, #144]	@ (8004934 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80048a4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f003 031f 	and.w	r3, r3, #31
 80048ac:	2201      	movs	r2, #1
 80048ae:	409a      	lsls	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80048b4:	e024      	b.n	8004900 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	3b10      	subs	r3, #16
 80048be:	4a1e      	ldr	r2, [pc, #120]	@ (8004938 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80048c0:	fba2 2303 	umull	r2, r3, r2, r3
 80048c4:	091b      	lsrs	r3, r3, #4
 80048c6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	4a1c      	ldr	r2, [pc, #112]	@ (800493c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d806      	bhi.n	80048de <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	4a1b      	ldr	r2, [pc, #108]	@ (8004940 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d902      	bls.n	80048de <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	3308      	adds	r3, #8
 80048dc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	4b18      	ldr	r3, [pc, #96]	@ (8004944 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80048e2:	4413      	add	r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	461a      	mov	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a16      	ldr	r2, [pc, #88]	@ (8004948 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80048f0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f003 031f 	and.w	r3, r3, #31
 80048f8:	2201      	movs	r2, #1
 80048fa:	409a      	lsls	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004900:	bf00      	nop
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	58025408 	.word	0x58025408
 8004910:	5802541c 	.word	0x5802541c
 8004914:	58025430 	.word	0x58025430
 8004918:	58025444 	.word	0x58025444
 800491c:	58025458 	.word	0x58025458
 8004920:	5802546c 	.word	0x5802546c
 8004924:	58025480 	.word	0x58025480
 8004928:	58025494 	.word	0x58025494
 800492c:	cccccccd 	.word	0xcccccccd
 8004930:	16009600 	.word	0x16009600
 8004934:	58025880 	.word	0x58025880
 8004938:	aaaaaaab 	.word	0xaaaaaaab
 800493c:	400204b8 	.word	0x400204b8
 8004940:	4002040f 	.word	0x4002040f
 8004944:	10008200 	.word	0x10008200
 8004948:	40020880 	.word	0x40020880

0800494c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	b2db      	uxtb	r3, r3
 800495a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d04a      	beq.n	80049f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2b08      	cmp	r3, #8
 8004966:	d847      	bhi.n	80049f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a25      	ldr	r2, [pc, #148]	@ (8004a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d022      	beq.n	80049b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a24      	ldr	r2, [pc, #144]	@ (8004a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d01d      	beq.n	80049b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a22      	ldr	r2, [pc, #136]	@ (8004a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d018      	beq.n	80049b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a21      	ldr	r2, [pc, #132]	@ (8004a10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d013      	beq.n	80049b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a1f      	ldr	r2, [pc, #124]	@ (8004a14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d00e      	beq.n	80049b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a1e      	ldr	r2, [pc, #120]	@ (8004a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d009      	beq.n	80049b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a1c      	ldr	r2, [pc, #112]	@ (8004a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d004      	beq.n	80049b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a1b      	ldr	r2, [pc, #108]	@ (8004a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d101      	bne.n	80049bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80049b8:	2301      	movs	r3, #1
 80049ba:	e000      	b.n	80049be <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80049bc:	2300      	movs	r3, #0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00a      	beq.n	80049d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	4b17      	ldr	r3, [pc, #92]	@ (8004a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80049c6:	4413      	add	r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	461a      	mov	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a15      	ldr	r2, [pc, #84]	@ (8004a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80049d4:	671a      	str	r2, [r3, #112]	@ 0x70
 80049d6:	e009      	b.n	80049ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	4b14      	ldr	r3, [pc, #80]	@ (8004a2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80049dc:	4413      	add	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	461a      	mov	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a11      	ldr	r2, [pc, #68]	@ (8004a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80049ea:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	3b01      	subs	r3, #1
 80049f0:	2201      	movs	r2, #1
 80049f2:	409a      	lsls	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80049f8:	bf00      	nop
 80049fa:	3714      	adds	r7, #20
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr
 8004a04:	58025408 	.word	0x58025408
 8004a08:	5802541c 	.word	0x5802541c
 8004a0c:	58025430 	.word	0x58025430
 8004a10:	58025444 	.word	0x58025444
 8004a14:	58025458 	.word	0x58025458
 8004a18:	5802546c 	.word	0x5802546c
 8004a1c:	58025480 	.word	0x58025480
 8004a20:	58025494 	.word	0x58025494
 8004a24:	1600963f 	.word	0x1600963f
 8004a28:	58025940 	.word	0x58025940
 8004a2c:	1000823f 	.word	0x1000823f
 8004a30:	40020940 	.word	0x40020940

08004a34 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004a34:	b480      	push	{r7}
 8004a36:	b087      	sub	sp, #28
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	607a      	str	r2, [r7, #4]
 8004a40:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004a42:	2300      	movs	r3, #0
 8004a44:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d101      	bne.n	8004a50 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e00a      	b.n	8004a66 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8004a50:	7afb      	ldrb	r3, [r7, #11]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d103      	bne.n	8004a5e <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	605a      	str	r2, [r3, #4]
      break;
 8004a5c:	e002      	b.n	8004a64 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	75fb      	strb	r3, [r7, #23]
      break;
 8004a62:	bf00      	nop
  }

  return status;
 8004a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	371c      	adds	r7, #28
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b083      	sub	sp, #12
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
 8004a7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e003      	b.n	8004a8e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	683a      	ldr	r2, [r7, #0]
 8004a8a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
  }
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
	...

08004a9c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	0c1b      	lsrs	r3, r3, #16
 8004aaa:	f003 0303 	and.w	r3, r3, #3
 8004aae:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 031f 	and.w	r3, r3, #31
 8004ab8:	2201      	movs	r2, #1
 8004aba:	fa02 f303 	lsl.w	r3, r2, r3
 8004abe:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8004ac0:	f7fd fecc 	bl	800285c <HAL_GetCurrentCPUID>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b03      	cmp	r3, #3
 8004ac8:	d105      	bne.n	8004ad6 <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	011a      	lsls	r2, r3, #4
 8004ace:	4b0f      	ldr	r3, [pc, #60]	@ (8004b0c <HAL_EXTI_IRQHandler+0x70>)
 8004ad0:	4413      	add	r3, r2
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	e004      	b.n	8004ae0 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	011a      	lsls	r2, r3, #4
 8004ada:	4b0d      	ldr	r3, [pc, #52]	@ (8004b10 <HAL_EXTI_IRQHandler+0x74>)
 8004adc:	4413      	add	r3, r2
 8004ade:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d009      	beq.n	8004b04 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d002      	beq.n	8004b04 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	4798      	blx	r3
    }
  }
}
 8004b04:	bf00      	nop
 8004b06:	3718      	adds	r7, #24
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	58000088 	.word	0x58000088
 8004b10:	580000c8 	.word	0x580000c8

08004b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b089      	sub	sp, #36	@ 0x24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004b22:	4b89      	ldr	r3, [pc, #548]	@ (8004d48 <HAL_GPIO_Init+0x234>)
 8004b24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004b26:	e194      	b.n	8004e52 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	2101      	movs	r1, #1
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	fa01 f303 	lsl.w	r3, r1, r3
 8004b34:	4013      	ands	r3, r2
 8004b36:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f000 8186 	beq.w	8004e4c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f003 0303 	and.w	r3, r3, #3
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d005      	beq.n	8004b58 <HAL_GPIO_Init+0x44>
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f003 0303 	and.w	r3, r3, #3
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d130      	bne.n	8004bba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	005b      	lsls	r3, r3, #1
 8004b62:	2203      	movs	r2, #3
 8004b64:	fa02 f303 	lsl.w	r3, r2, r3
 8004b68:	43db      	mvns	r3, r3
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	68da      	ldr	r2, [r3, #12]
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	005b      	lsls	r3, r3, #1
 8004b78:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	69ba      	ldr	r2, [r7, #24]
 8004b86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b8e:	2201      	movs	r2, #1
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	fa02 f303 	lsl.w	r3, r2, r3
 8004b96:	43db      	mvns	r3, r3
 8004b98:	69ba      	ldr	r2, [r7, #24]
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	091b      	lsrs	r3, r3, #4
 8004ba4:	f003 0201 	and.w	r2, r3, #1
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bae:	69ba      	ldr	r2, [r7, #24]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	69ba      	ldr	r2, [r7, #24]
 8004bb8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f003 0303 	and.w	r3, r3, #3
 8004bc2:	2b03      	cmp	r3, #3
 8004bc4:	d017      	beq.n	8004bf6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	2203      	movs	r2, #3
 8004bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd6:	43db      	mvns	r3, r3
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	689a      	ldr	r2, [r3, #8]
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	69ba      	ldr	r2, [r7, #24]
 8004bf4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f003 0303 	and.w	r3, r3, #3
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d123      	bne.n	8004c4a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	08da      	lsrs	r2, r3, #3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	3208      	adds	r2, #8
 8004c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	f003 0307 	and.w	r3, r3, #7
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	220f      	movs	r2, #15
 8004c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1e:	43db      	mvns	r3, r3
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	4013      	ands	r3, r2
 8004c24:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	691a      	ldr	r2, [r3, #16]
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	f003 0307 	and.w	r3, r3, #7
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	fa02 f303 	lsl.w	r3, r2, r3
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	08da      	lsrs	r2, r3, #3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	3208      	adds	r2, #8
 8004c44:	69b9      	ldr	r1, [r7, #24]
 8004c46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	005b      	lsls	r3, r3, #1
 8004c54:	2203      	movs	r2, #3
 8004c56:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5a:	43db      	mvns	r3, r3
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	4013      	ands	r3, r2
 8004c60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f003 0203 	and.w	r2, r3, #3
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	69ba      	ldr	r2, [r7, #24]
 8004c7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f000 80e0 	beq.w	8004e4c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c8c:	4b2f      	ldr	r3, [pc, #188]	@ (8004d4c <HAL_GPIO_Init+0x238>)
 8004c8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004c92:	4a2e      	ldr	r2, [pc, #184]	@ (8004d4c <HAL_GPIO_Init+0x238>)
 8004c94:	f043 0302 	orr.w	r3, r3, #2
 8004c98:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004c9c:	4b2b      	ldr	r3, [pc, #172]	@ (8004d4c <HAL_GPIO_Init+0x238>)
 8004c9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	60fb      	str	r3, [r7, #12]
 8004ca8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004caa:	4a29      	ldr	r2, [pc, #164]	@ (8004d50 <HAL_GPIO_Init+0x23c>)
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	089b      	lsrs	r3, r3, #2
 8004cb0:	3302      	adds	r3, #2
 8004cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	f003 0303 	and.w	r3, r3, #3
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	220f      	movs	r2, #15
 8004cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc6:	43db      	mvns	r3, r3
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a20      	ldr	r2, [pc, #128]	@ (8004d54 <HAL_GPIO_Init+0x240>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d052      	beq.n	8004d7c <HAL_GPIO_Init+0x268>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a1f      	ldr	r2, [pc, #124]	@ (8004d58 <HAL_GPIO_Init+0x244>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d031      	beq.n	8004d42 <HAL_GPIO_Init+0x22e>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a1e      	ldr	r2, [pc, #120]	@ (8004d5c <HAL_GPIO_Init+0x248>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d02b      	beq.n	8004d3e <HAL_GPIO_Init+0x22a>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8004d60 <HAL_GPIO_Init+0x24c>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d025      	beq.n	8004d3a <HAL_GPIO_Init+0x226>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a1c      	ldr	r2, [pc, #112]	@ (8004d64 <HAL_GPIO_Init+0x250>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d01f      	beq.n	8004d36 <HAL_GPIO_Init+0x222>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a1b      	ldr	r2, [pc, #108]	@ (8004d68 <HAL_GPIO_Init+0x254>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d019      	beq.n	8004d32 <HAL_GPIO_Init+0x21e>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a1a      	ldr	r2, [pc, #104]	@ (8004d6c <HAL_GPIO_Init+0x258>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d013      	beq.n	8004d2e <HAL_GPIO_Init+0x21a>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a19      	ldr	r2, [pc, #100]	@ (8004d70 <HAL_GPIO_Init+0x25c>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d00d      	beq.n	8004d2a <HAL_GPIO_Init+0x216>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a18      	ldr	r2, [pc, #96]	@ (8004d74 <HAL_GPIO_Init+0x260>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d007      	beq.n	8004d26 <HAL_GPIO_Init+0x212>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a17      	ldr	r2, [pc, #92]	@ (8004d78 <HAL_GPIO_Init+0x264>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d101      	bne.n	8004d22 <HAL_GPIO_Init+0x20e>
 8004d1e:	2309      	movs	r3, #9
 8004d20:	e02d      	b.n	8004d7e <HAL_GPIO_Init+0x26a>
 8004d22:	230a      	movs	r3, #10
 8004d24:	e02b      	b.n	8004d7e <HAL_GPIO_Init+0x26a>
 8004d26:	2308      	movs	r3, #8
 8004d28:	e029      	b.n	8004d7e <HAL_GPIO_Init+0x26a>
 8004d2a:	2307      	movs	r3, #7
 8004d2c:	e027      	b.n	8004d7e <HAL_GPIO_Init+0x26a>
 8004d2e:	2306      	movs	r3, #6
 8004d30:	e025      	b.n	8004d7e <HAL_GPIO_Init+0x26a>
 8004d32:	2305      	movs	r3, #5
 8004d34:	e023      	b.n	8004d7e <HAL_GPIO_Init+0x26a>
 8004d36:	2304      	movs	r3, #4
 8004d38:	e021      	b.n	8004d7e <HAL_GPIO_Init+0x26a>
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e01f      	b.n	8004d7e <HAL_GPIO_Init+0x26a>
 8004d3e:	2302      	movs	r3, #2
 8004d40:	e01d      	b.n	8004d7e <HAL_GPIO_Init+0x26a>
 8004d42:	2301      	movs	r3, #1
 8004d44:	e01b      	b.n	8004d7e <HAL_GPIO_Init+0x26a>
 8004d46:	bf00      	nop
 8004d48:	58000080 	.word	0x58000080
 8004d4c:	58024400 	.word	0x58024400
 8004d50:	58000400 	.word	0x58000400
 8004d54:	58020000 	.word	0x58020000
 8004d58:	58020400 	.word	0x58020400
 8004d5c:	58020800 	.word	0x58020800
 8004d60:	58020c00 	.word	0x58020c00
 8004d64:	58021000 	.word	0x58021000
 8004d68:	58021400 	.word	0x58021400
 8004d6c:	58021800 	.word	0x58021800
 8004d70:	58021c00 	.word	0x58021c00
 8004d74:	58022000 	.word	0x58022000
 8004d78:	58022400 	.word	0x58022400
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	69fa      	ldr	r2, [r7, #28]
 8004d80:	f002 0203 	and.w	r2, r2, #3
 8004d84:	0092      	lsls	r2, r2, #2
 8004d86:	4093      	lsls	r3, r2
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d8e:	4938      	ldr	r1, [pc, #224]	@ (8004e70 <HAL_GPIO_Init+0x35c>)
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	089b      	lsrs	r3, r3, #2
 8004d94:	3302      	adds	r3, #2
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	43db      	mvns	r3, r3
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	4013      	ands	r3, r2
 8004dac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d003      	beq.n	8004dc2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004dc2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004dca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	43db      	mvns	r3, r3
 8004dd6:	69ba      	ldr	r2, [r7, #24]
 8004dd8:	4013      	ands	r3, r2
 8004dda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d003      	beq.n	8004df0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004df0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	43db      	mvns	r3, r3
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	4013      	ands	r3, r2
 8004e06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d003      	beq.n	8004e1c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	43db      	mvns	r3, r3
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	4013      	ands	r3, r2
 8004e30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d003      	beq.n	8004e46 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004e3e:	69ba      	ldr	r2, [r7, #24]
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	fa22 f303 	lsr.w	r3, r2, r3
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f47f ae63 	bne.w	8004b28 <HAL_GPIO_Init+0x14>
  }
}
 8004e62:	bf00      	nop
 8004e64:	bf00      	nop
 8004e66:	3724      	adds	r7, #36	@ 0x24
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	58000400 	.word	0x58000400

08004e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	807b      	strh	r3, [r7, #2]
 8004e80:	4613      	mov	r3, r2
 8004e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e84:	787b      	ldrb	r3, [r7, #1]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d003      	beq.n	8004e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e8a:	887a      	ldrh	r2, [r7, #2]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004e90:	e003      	b.n	8004e9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004e92:	887b      	ldrh	r3, [r7, #2]
 8004e94:	041a      	lsls	r2, r3, #16
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	619a      	str	r2, [r3, #24]
}
 8004e9a:	bf00      	nop
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b085      	sub	sp, #20
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
 8004eae:	460b      	mov	r3, r1
 8004eb0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004eb8:	887a      	ldrh	r2, [r7, #2]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	041a      	lsls	r2, r3, #16
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	43d9      	mvns	r1, r3
 8004ec4:	887b      	ldrh	r3, [r7, #2]
 8004ec6:	400b      	ands	r3, r1
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	619a      	str	r2, [r3, #24]
}
 8004ece:	bf00      	nop
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
	...

08004edc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004ee4:	4a08      	ldr	r2, [pc, #32]	@ (8004f08 <HAL_HSEM_FastTake+0x2c>)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	3320      	adds	r3, #32
 8004eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eee:	4a07      	ldr	r2, [pc, #28]	@ (8004f0c <HAL_HSEM_FastTake+0x30>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d101      	bne.n	8004ef8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	e000      	b.n	8004efa <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	370c      	adds	r7, #12
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	58026400 	.word	0x58026400
 8004f0c:	80000300 	.word	0x80000300

08004f10 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004f1a:	4906      	ldr	r1, [pc, #24]	@ (8004f34 <HAL_HSEM_Release+0x24>)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	58026400 	.word	0x58026400

08004f38 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af02      	add	r7, sp, #8
 8004f3e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e0fe      	b.n	8005148 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d106      	bne.n	8004f64 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f00a fa7e 	bl	800f460 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2203      	movs	r2, #3
 8004f68:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f006 fe42 	bl	800bbfa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6818      	ldr	r0, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	7c1a      	ldrb	r2, [r3, #16]
 8004f7e:	f88d 2000 	strb.w	r2, [sp]
 8004f82:	3304      	adds	r3, #4
 8004f84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f86:	f006 fd13 	bl	800b9b0 <USB_CoreInit>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d005      	beq.n	8004f9c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e0d5      	b.n	8005148 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2100      	movs	r1, #0
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f006 fe3a 	bl	800bc1c <USB_SetCurrentMode>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d005      	beq.n	8004fba <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2202      	movs	r2, #2
 8004fb2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e0c6      	b.n	8005148 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fba:	2300      	movs	r3, #0
 8004fbc:	73fb      	strb	r3, [r7, #15]
 8004fbe:	e04a      	b.n	8005056 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004fc0:	7bfa      	ldrb	r2, [r7, #15]
 8004fc2:	6879      	ldr	r1, [r7, #4]
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	00db      	lsls	r3, r3, #3
 8004fc8:	4413      	add	r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	440b      	add	r3, r1
 8004fce:	3315      	adds	r3, #21
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004fd4:	7bfa      	ldrb	r2, [r7, #15]
 8004fd6:	6879      	ldr	r1, [r7, #4]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	00db      	lsls	r3, r3, #3
 8004fdc:	4413      	add	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	440b      	add	r3, r1
 8004fe2:	3314      	adds	r3, #20
 8004fe4:	7bfa      	ldrb	r2, [r7, #15]
 8004fe6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004fe8:	7bfa      	ldrb	r2, [r7, #15]
 8004fea:	7bfb      	ldrb	r3, [r7, #15]
 8004fec:	b298      	uxth	r0, r3
 8004fee:	6879      	ldr	r1, [r7, #4]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	00db      	lsls	r3, r3, #3
 8004ff4:	4413      	add	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	440b      	add	r3, r1
 8004ffa:	332e      	adds	r3, #46	@ 0x2e
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005000:	7bfa      	ldrb	r2, [r7, #15]
 8005002:	6879      	ldr	r1, [r7, #4]
 8005004:	4613      	mov	r3, r2
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	4413      	add	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	440b      	add	r3, r1
 800500e:	3318      	adds	r3, #24
 8005010:	2200      	movs	r2, #0
 8005012:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005014:	7bfa      	ldrb	r2, [r7, #15]
 8005016:	6879      	ldr	r1, [r7, #4]
 8005018:	4613      	mov	r3, r2
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	4413      	add	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	440b      	add	r3, r1
 8005022:	331c      	adds	r3, #28
 8005024:	2200      	movs	r2, #0
 8005026:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005028:	7bfa      	ldrb	r2, [r7, #15]
 800502a:	6879      	ldr	r1, [r7, #4]
 800502c:	4613      	mov	r3, r2
 800502e:	00db      	lsls	r3, r3, #3
 8005030:	4413      	add	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	440b      	add	r3, r1
 8005036:	3320      	adds	r3, #32
 8005038:	2200      	movs	r2, #0
 800503a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800503c:	7bfa      	ldrb	r2, [r7, #15]
 800503e:	6879      	ldr	r1, [r7, #4]
 8005040:	4613      	mov	r3, r2
 8005042:	00db      	lsls	r3, r3, #3
 8005044:	4413      	add	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	440b      	add	r3, r1
 800504a:	3324      	adds	r3, #36	@ 0x24
 800504c:	2200      	movs	r2, #0
 800504e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005050:	7bfb      	ldrb	r3, [r7, #15]
 8005052:	3301      	adds	r3, #1
 8005054:	73fb      	strb	r3, [r7, #15]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	791b      	ldrb	r3, [r3, #4]
 800505a:	7bfa      	ldrb	r2, [r7, #15]
 800505c:	429a      	cmp	r2, r3
 800505e:	d3af      	bcc.n	8004fc0 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005060:	2300      	movs	r3, #0
 8005062:	73fb      	strb	r3, [r7, #15]
 8005064:	e044      	b.n	80050f0 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005066:	7bfa      	ldrb	r2, [r7, #15]
 8005068:	6879      	ldr	r1, [r7, #4]
 800506a:	4613      	mov	r3, r2
 800506c:	00db      	lsls	r3, r3, #3
 800506e:	4413      	add	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	440b      	add	r3, r1
 8005074:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005078:	2200      	movs	r2, #0
 800507a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800507c:	7bfa      	ldrb	r2, [r7, #15]
 800507e:	6879      	ldr	r1, [r7, #4]
 8005080:	4613      	mov	r3, r2
 8005082:	00db      	lsls	r3, r3, #3
 8005084:	4413      	add	r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	440b      	add	r3, r1
 800508a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800508e:	7bfa      	ldrb	r2, [r7, #15]
 8005090:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005092:	7bfa      	ldrb	r2, [r7, #15]
 8005094:	6879      	ldr	r1, [r7, #4]
 8005096:	4613      	mov	r3, r2
 8005098:	00db      	lsls	r3, r3, #3
 800509a:	4413      	add	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	440b      	add	r3, r1
 80050a0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80050a4:	2200      	movs	r2, #0
 80050a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80050a8:	7bfa      	ldrb	r2, [r7, #15]
 80050aa:	6879      	ldr	r1, [r7, #4]
 80050ac:	4613      	mov	r3, r2
 80050ae:	00db      	lsls	r3, r3, #3
 80050b0:	4413      	add	r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	440b      	add	r3, r1
 80050b6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80050ba:	2200      	movs	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80050be:	7bfa      	ldrb	r2, [r7, #15]
 80050c0:	6879      	ldr	r1, [r7, #4]
 80050c2:	4613      	mov	r3, r2
 80050c4:	00db      	lsls	r3, r3, #3
 80050c6:	4413      	add	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	440b      	add	r3, r1
 80050cc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80050d0:	2200      	movs	r2, #0
 80050d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80050d4:	7bfa      	ldrb	r2, [r7, #15]
 80050d6:	6879      	ldr	r1, [r7, #4]
 80050d8:	4613      	mov	r3, r2
 80050da:	00db      	lsls	r3, r3, #3
 80050dc:	4413      	add	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	440b      	add	r3, r1
 80050e2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80050e6:	2200      	movs	r2, #0
 80050e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050ea:	7bfb      	ldrb	r3, [r7, #15]
 80050ec:	3301      	adds	r3, #1
 80050ee:	73fb      	strb	r3, [r7, #15]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	791b      	ldrb	r3, [r3, #4]
 80050f4:	7bfa      	ldrb	r2, [r7, #15]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d3b5      	bcc.n	8005066 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6818      	ldr	r0, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	7c1a      	ldrb	r2, [r3, #16]
 8005102:	f88d 2000 	strb.w	r2, [sp]
 8005106:	3304      	adds	r3, #4
 8005108:	cb0e      	ldmia	r3, {r1, r2, r3}
 800510a:	f006 fdd3 	bl	800bcb4 <USB_DevInit>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d005      	beq.n	8005120 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e013      	b.n	8005148 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	7b1b      	ldrb	r3, [r3, #12]
 8005132:	2b01      	cmp	r3, #1
 8005134:	d102      	bne.n	800513c <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f001 f96c 	bl	8006414 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4618      	mov	r0, r3
 8005142:	f007 fe12 	bl	800cd6a <USB_DevDisconnect>

  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005164:	2b01      	cmp	r3, #1
 8005166:	d101      	bne.n	800516c <HAL_PCD_Start+0x1c>
 8005168:	2302      	movs	r3, #2
 800516a:	e022      	b.n	80051b2 <HAL_PCD_Start+0x62>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800517c:	2b00      	cmp	r3, #0
 800517e:	d009      	beq.n	8005194 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005184:	2b01      	cmp	r3, #1
 8005186:	d105      	bne.n	8005194 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800518c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4618      	mov	r0, r3
 800519a:	f006 fd1d 	bl	800bbd8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f007 fdc0 	bl	800cd28 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80051ba:	b590      	push	{r4, r7, lr}
 80051bc:	b08d      	sub	sp, #52	@ 0x34
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c8:	6a3b      	ldr	r3, [r7, #32]
 80051ca:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4618      	mov	r0, r3
 80051d2:	f007 fe7e 	bl	800ced2 <USB_GetMode>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f040 84b9 	bne.w	8005b50 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f007 fde2 	bl	800cdac <USB_ReadInterrupts>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f000 84af 	beq.w	8005b4e <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	0a1b      	lsrs	r3, r3, #8
 80051fa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4618      	mov	r0, r3
 800520a:	f007 fdcf 	bl	800cdac <USB_ReadInterrupts>
 800520e:	4603      	mov	r3, r0
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b02      	cmp	r3, #2
 8005216:	d107      	bne.n	8005228 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	695a      	ldr	r2, [r3, #20]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f002 0202 	and.w	r2, r2, #2
 8005226:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4618      	mov	r0, r3
 800522e:	f007 fdbd 	bl	800cdac <USB_ReadInterrupts>
 8005232:	4603      	mov	r3, r0
 8005234:	f003 0310 	and.w	r3, r3, #16
 8005238:	2b10      	cmp	r3, #16
 800523a:	d161      	bne.n	8005300 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	699a      	ldr	r2, [r3, #24]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 0210 	bic.w	r2, r2, #16
 800524a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800524c:	6a3b      	ldr	r3, [r7, #32]
 800524e:	6a1b      	ldr	r3, [r3, #32]
 8005250:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	f003 020f 	and.w	r2, r3, #15
 8005258:	4613      	mov	r3, r2
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	4413      	add	r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	4413      	add	r3, r2
 8005268:	3304      	adds	r3, #4
 800526a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	0c5b      	lsrs	r3, r3, #17
 8005270:	f003 030f 	and.w	r3, r3, #15
 8005274:	2b02      	cmp	r3, #2
 8005276:	d124      	bne.n	80052c2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005278:	69ba      	ldr	r2, [r7, #24]
 800527a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800527e:	4013      	ands	r3, r2
 8005280:	2b00      	cmp	r3, #0
 8005282:	d035      	beq.n	80052f0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	091b      	lsrs	r3, r3, #4
 800528c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800528e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005292:	b29b      	uxth	r3, r3
 8005294:	461a      	mov	r2, r3
 8005296:	6a38      	ldr	r0, [r7, #32]
 8005298:	f007 fbf4 	bl	800ca84 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	68da      	ldr	r2, [r3, #12]
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	091b      	lsrs	r3, r3, #4
 80052a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052a8:	441a      	add	r2, r3
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	695a      	ldr	r2, [r3, #20]
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	091b      	lsrs	r3, r3, #4
 80052b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052ba:	441a      	add	r2, r3
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	615a      	str	r2, [r3, #20]
 80052c0:	e016      	b.n	80052f0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	0c5b      	lsrs	r3, r3, #17
 80052c6:	f003 030f 	and.w	r3, r3, #15
 80052ca:	2b06      	cmp	r3, #6
 80052cc:	d110      	bne.n	80052f0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80052d4:	2208      	movs	r2, #8
 80052d6:	4619      	mov	r1, r3
 80052d8:	6a38      	ldr	r0, [r7, #32]
 80052da:	f007 fbd3 	bl	800ca84 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	695a      	ldr	r2, [r3, #20]
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	091b      	lsrs	r3, r3, #4
 80052e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052ea:	441a      	add	r2, r3
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	699a      	ldr	r2, [r3, #24]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f042 0210 	orr.w	r2, r2, #16
 80052fe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4618      	mov	r0, r3
 8005306:	f007 fd51 	bl	800cdac <USB_ReadInterrupts>
 800530a:	4603      	mov	r3, r0
 800530c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005310:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005314:	f040 80a7 	bne.w	8005466 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005318:	2300      	movs	r3, #0
 800531a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4618      	mov	r0, r3
 8005322:	f007 fd56 	bl	800cdd2 <USB_ReadDevAllOutEpInterrupt>
 8005326:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005328:	e099      	b.n	800545e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800532a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b00      	cmp	r3, #0
 8005332:	f000 808e 	beq.w	8005452 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800533c:	b2d2      	uxtb	r2, r2
 800533e:	4611      	mov	r1, r2
 8005340:	4618      	mov	r0, r3
 8005342:	f007 fd7a 	bl	800ce3a <USB_ReadDevOutEPInterrupt>
 8005346:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00c      	beq.n	800536c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005354:	015a      	lsls	r2, r3, #5
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	4413      	add	r3, r2
 800535a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800535e:	461a      	mov	r2, r3
 8005360:	2301      	movs	r3, #1
 8005362:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005364:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 fece 	bl	8006108 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	f003 0308 	and.w	r3, r3, #8
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00c      	beq.n	8005390 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	4413      	add	r3, r2
 800537e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005382:	461a      	mov	r2, r3
 8005384:	2308      	movs	r3, #8
 8005386:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005388:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 ffa4 	bl	80062d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	f003 0310 	and.w	r3, r3, #16
 8005396:	2b00      	cmp	r3, #0
 8005398:	d008      	beq.n	80053ac <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800539a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539c:	015a      	lsls	r2, r3, #5
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	4413      	add	r3, r2
 80053a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053a6:	461a      	mov	r2, r3
 80053a8:	2310      	movs	r3, #16
 80053aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d030      	beq.n	8005418 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80053b6:	6a3b      	ldr	r3, [r7, #32]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053be:	2b80      	cmp	r3, #128	@ 0x80
 80053c0:	d109      	bne.n	80053d6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	69fa      	ldr	r2, [r7, #28]
 80053cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80053d4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80053d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053d8:	4613      	mov	r3, r2
 80053da:	00db      	lsls	r3, r3, #3
 80053dc:	4413      	add	r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	4413      	add	r3, r2
 80053e8:	3304      	adds	r3, #4
 80053ea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	78db      	ldrb	r3, [r3, #3]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d108      	bne.n	8005406 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	2200      	movs	r2, #0
 80053f8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80053fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	4619      	mov	r1, r3
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f00a f963 	bl	800f6cc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005408:	015a      	lsls	r2, r3, #5
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	4413      	add	r3, r2
 800540e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005412:	461a      	mov	r2, r3
 8005414:	2302      	movs	r3, #2
 8005416:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	f003 0320 	and.w	r3, r3, #32
 800541e:	2b00      	cmp	r3, #0
 8005420:	d008      	beq.n	8005434 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005424:	015a      	lsls	r2, r3, #5
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	4413      	add	r3, r2
 800542a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800542e:	461a      	mov	r2, r3
 8005430:	2320      	movs	r3, #32
 8005432:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d009      	beq.n	8005452 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800543e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005440:	015a      	lsls	r2, r3, #5
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	4413      	add	r3, r2
 8005446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800544a:	461a      	mov	r2, r3
 800544c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005450:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005454:	3301      	adds	r3, #1
 8005456:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800545a:	085b      	lsrs	r3, r3, #1
 800545c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800545e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005460:	2b00      	cmp	r3, #0
 8005462:	f47f af62 	bne.w	800532a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f007 fc9e 	bl	800cdac <USB_ReadInterrupts>
 8005470:	4603      	mov	r3, r0
 8005472:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005476:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800547a:	f040 80db 	bne.w	8005634 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4618      	mov	r0, r3
 8005484:	f007 fcbf 	bl	800ce06 <USB_ReadDevAllInEpInterrupt>
 8005488:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800548a:	2300      	movs	r3, #0
 800548c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800548e:	e0cd      	b.n	800562c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b00      	cmp	r3, #0
 8005498:	f000 80c2 	beq.w	8005620 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054a2:	b2d2      	uxtb	r2, r2
 80054a4:	4611      	mov	r1, r2
 80054a6:	4618      	mov	r0, r3
 80054a8:	f007 fce5 	bl	800ce76 <USB_ReadDevInEPInterrupt>
 80054ac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	f003 0301 	and.w	r3, r3, #1
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d057      	beq.n	8005568 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80054b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ba:	f003 030f 	and.w	r3, r3, #15
 80054be:	2201      	movs	r2, #1
 80054c0:	fa02 f303 	lsl.w	r3, r2, r3
 80054c4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	43db      	mvns	r3, r3
 80054d2:	69f9      	ldr	r1, [r7, #28]
 80054d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80054d8:	4013      	ands	r3, r2
 80054da:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80054dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054e8:	461a      	mov	r2, r3
 80054ea:	2301      	movs	r3, #1
 80054ec:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	799b      	ldrb	r3, [r3, #6]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d132      	bne.n	800555c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80054f6:	6879      	ldr	r1, [r7, #4]
 80054f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054fa:	4613      	mov	r3, r2
 80054fc:	00db      	lsls	r3, r3, #3
 80054fe:	4413      	add	r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	440b      	add	r3, r1
 8005504:	3320      	adds	r3, #32
 8005506:	6819      	ldr	r1, [r3, #0]
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800550c:	4613      	mov	r3, r2
 800550e:	00db      	lsls	r3, r3, #3
 8005510:	4413      	add	r3, r2
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4403      	add	r3, r0
 8005516:	331c      	adds	r3, #28
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4419      	add	r1, r3
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005520:	4613      	mov	r3, r2
 8005522:	00db      	lsls	r3, r3, #3
 8005524:	4413      	add	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	4403      	add	r3, r0
 800552a:	3320      	adds	r3, #32
 800552c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800552e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005530:	2b00      	cmp	r3, #0
 8005532:	d113      	bne.n	800555c <HAL_PCD_IRQHandler+0x3a2>
 8005534:	6879      	ldr	r1, [r7, #4]
 8005536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005538:	4613      	mov	r3, r2
 800553a:	00db      	lsls	r3, r3, #3
 800553c:	4413      	add	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	440b      	add	r3, r1
 8005542:	3324      	adds	r3, #36	@ 0x24
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d108      	bne.n	800555c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6818      	ldr	r0, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005554:	461a      	mov	r2, r3
 8005556:	2101      	movs	r1, #1
 8005558:	f007 fcee 	bl	800cf38 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800555c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555e:	b2db      	uxtb	r3, r3
 8005560:	4619      	mov	r1, r3
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f00a f82d 	bl	800f5c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	f003 0308 	and.w	r3, r3, #8
 800556e:	2b00      	cmp	r3, #0
 8005570:	d008      	beq.n	8005584 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	4413      	add	r3, r2
 800557a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800557e:	461a      	mov	r2, r3
 8005580:	2308      	movs	r3, #8
 8005582:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	f003 0310 	and.w	r3, r3, #16
 800558a:	2b00      	cmp	r3, #0
 800558c:	d008      	beq.n	80055a0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800558e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005590:	015a      	lsls	r2, r3, #5
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	4413      	add	r3, r2
 8005596:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800559a:	461a      	mov	r2, r3
 800559c:	2310      	movs	r3, #16
 800559e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d008      	beq.n	80055bc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80055aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ac:	015a      	lsls	r2, r3, #5
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	4413      	add	r3, r2
 80055b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055b6:	461a      	mov	r2, r3
 80055b8:	2340      	movs	r3, #64	@ 0x40
 80055ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d023      	beq.n	800560e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80055c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80055c8:	6a38      	ldr	r0, [r7, #32]
 80055ca:	f006 fcd1 	bl	800bf70 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80055ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055d0:	4613      	mov	r3, r2
 80055d2:	00db      	lsls	r3, r3, #3
 80055d4:	4413      	add	r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	3310      	adds	r3, #16
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	4413      	add	r3, r2
 80055de:	3304      	adds	r3, #4
 80055e0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	78db      	ldrb	r3, [r3, #3]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d108      	bne.n	80055fc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	2200      	movs	r2, #0
 80055ee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80055f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	4619      	mov	r1, r3
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f00a f87a 	bl	800f6f0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80055fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fe:	015a      	lsls	r2, r3, #5
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	4413      	add	r3, r2
 8005604:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005608:	461a      	mov	r2, r3
 800560a:	2302      	movs	r3, #2
 800560c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005614:	2b00      	cmp	r3, #0
 8005616:	d003      	beq.n	8005620 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005618:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 fce8 	bl	8005ff0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005622:	3301      	adds	r3, #1
 8005624:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005628:	085b      	lsrs	r3, r3, #1
 800562a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800562c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800562e:	2b00      	cmp	r3, #0
 8005630:	f47f af2e 	bne.w	8005490 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4618      	mov	r0, r3
 800563a:	f007 fbb7 	bl	800cdac <USB_ReadInterrupts>
 800563e:	4603      	mov	r3, r0
 8005640:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005644:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005648:	d122      	bne.n	8005690 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	69fa      	ldr	r2, [r7, #28]
 8005654:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005658:	f023 0301 	bic.w	r3, r3, #1
 800565c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005664:	2b01      	cmp	r3, #1
 8005666:	d108      	bne.n	800567a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005670:	2100      	movs	r1, #0
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 fef2 	bl	800645c <HAL_PCDEx_LPM_Callback>
 8005678:	e002      	b.n	8005680 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f00a f818 	bl	800f6b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	695a      	ldr	r2, [r3, #20]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800568e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4618      	mov	r0, r3
 8005696:	f007 fb89 	bl	800cdac <USB_ReadInterrupts>
 800569a:	4603      	mov	r3, r0
 800569c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056a4:	d112      	bne.n	80056cc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d102      	bne.n	80056bc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f009 ffd4 	bl	800f664 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	695a      	ldr	r2, [r3, #20]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80056ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f007 fb6b 	bl	800cdac <USB_ReadInterrupts>
 80056d6:	4603      	mov	r3, r0
 80056d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056e0:	d121      	bne.n	8005726 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	695a      	ldr	r2, [r3, #20]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80056f0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d111      	bne.n	8005720 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800570a:	089b      	lsrs	r3, r3, #2
 800570c:	f003 020f 	and.w	r2, r3, #15
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005716:	2101      	movs	r1, #1
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 fe9f 	bl	800645c <HAL_PCDEx_LPM_Callback>
 800571e:	e002      	b.n	8005726 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f009 ff9f 	bl	800f664 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4618      	mov	r0, r3
 800572c:	f007 fb3e 	bl	800cdac <USB_ReadInterrupts>
 8005730:	4603      	mov	r3, r0
 8005732:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005736:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800573a:	f040 80b7 	bne.w	80058ac <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	69fa      	ldr	r2, [r7, #28]
 8005748:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800574c:	f023 0301 	bic.w	r3, r3, #1
 8005750:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2110      	movs	r1, #16
 8005758:	4618      	mov	r0, r3
 800575a:	f006 fc09 	bl	800bf70 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800575e:	2300      	movs	r3, #0
 8005760:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005762:	e046      	b.n	80057f2 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005766:	015a      	lsls	r2, r3, #5
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	4413      	add	r3, r2
 800576c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005770:	461a      	mov	r2, r3
 8005772:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005776:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	4413      	add	r3, r2
 8005780:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005788:	0151      	lsls	r1, r2, #5
 800578a:	69fa      	ldr	r2, [r7, #28]
 800578c:	440a      	add	r2, r1
 800578e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005792:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005796:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800579a:	015a      	lsls	r2, r3, #5
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057a4:	461a      	mov	r2, r3
 80057a6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80057aa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80057ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057bc:	0151      	lsls	r1, r2, #5
 80057be:	69fa      	ldr	r2, [r7, #28]
 80057c0:	440a      	add	r2, r1
 80057c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80057ca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80057cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057dc:	0151      	lsls	r1, r2, #5
 80057de:	69fa      	ldr	r2, [r7, #28]
 80057e0:	440a      	add	r2, r1
 80057e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057e6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80057ea:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ee:	3301      	adds	r3, #1
 80057f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	791b      	ldrb	r3, [r3, #4]
 80057f6:	461a      	mov	r2, r3
 80057f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d3b2      	bcc.n	8005764 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005804:	69db      	ldr	r3, [r3, #28]
 8005806:	69fa      	ldr	r2, [r7, #28]
 8005808:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800580c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005810:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	7bdb      	ldrb	r3, [r3, #15]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d016      	beq.n	8005848 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005820:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005824:	69fa      	ldr	r2, [r7, #28]
 8005826:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800582a:	f043 030b 	orr.w	r3, r3, #11
 800582e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800583a:	69fa      	ldr	r2, [r7, #28]
 800583c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005840:	f043 030b 	orr.w	r3, r3, #11
 8005844:	6453      	str	r3, [r2, #68]	@ 0x44
 8005846:	e015      	b.n	8005874 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800584e:	695a      	ldr	r2, [r3, #20]
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005856:	4619      	mov	r1, r3
 8005858:	f242 032b 	movw	r3, #8235	@ 0x202b
 800585c:	4313      	orrs	r3, r2
 800585e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	69fa      	ldr	r2, [r7, #28]
 800586a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800586e:	f043 030b 	orr.w	r3, r3, #11
 8005872:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	69fa      	ldr	r2, [r7, #28]
 800587e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005882:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005886:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6818      	ldr	r0, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005896:	461a      	mov	r2, r3
 8005898:	f007 fb4e 	bl	800cf38 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	695a      	ldr	r2, [r3, #20]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80058aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4618      	mov	r0, r3
 80058b2:	f007 fa7b 	bl	800cdac <USB_ReadInterrupts>
 80058b6:	4603      	mov	r3, r0
 80058b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058c0:	d123      	bne.n	800590a <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4618      	mov	r0, r3
 80058c8:	f007 fb12 	bl	800cef0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4618      	mov	r0, r3
 80058d2:	f006 fbc6 	bl	800c062 <USB_GetDevSpeed>
 80058d6:	4603      	mov	r3, r0
 80058d8:	461a      	mov	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681c      	ldr	r4, [r3, #0]
 80058e2:	f001 fdbb 	bl	800745c <HAL_RCC_GetHCLKFreq>
 80058e6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80058ec:	461a      	mov	r2, r3
 80058ee:	4620      	mov	r0, r4
 80058f0:	f006 f8d0 	bl	800ba94 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f009 fe8c 	bl	800f612 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	695a      	ldr	r2, [r3, #20]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005908:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4618      	mov	r0, r3
 8005910:	f007 fa4c 	bl	800cdac <USB_ReadInterrupts>
 8005914:	4603      	mov	r3, r0
 8005916:	f003 0308 	and.w	r3, r3, #8
 800591a:	2b08      	cmp	r3, #8
 800591c:	d10a      	bne.n	8005934 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f009 fe69 	bl	800f5f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	695a      	ldr	r2, [r3, #20]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f002 0208 	and.w	r2, r2, #8
 8005932:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4618      	mov	r0, r3
 800593a:	f007 fa37 	bl	800cdac <USB_ReadInterrupts>
 800593e:	4603      	mov	r3, r0
 8005940:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005944:	2b80      	cmp	r3, #128	@ 0x80
 8005946:	d123      	bne.n	8005990 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005950:	6a3b      	ldr	r3, [r7, #32]
 8005952:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005954:	2301      	movs	r3, #1
 8005956:	627b      	str	r3, [r7, #36]	@ 0x24
 8005958:	e014      	b.n	8005984 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800595a:	6879      	ldr	r1, [r7, #4]
 800595c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800595e:	4613      	mov	r3, r2
 8005960:	00db      	lsls	r3, r3, #3
 8005962:	4413      	add	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	440b      	add	r3, r1
 8005968:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d105      	bne.n	800597e <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005974:	b2db      	uxtb	r3, r3
 8005976:	4619      	mov	r1, r3
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 fb08 	bl	8005f8e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800597e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005980:	3301      	adds	r3, #1
 8005982:	627b      	str	r3, [r7, #36]	@ 0x24
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	791b      	ldrb	r3, [r3, #4]
 8005988:	461a      	mov	r2, r3
 800598a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598c:	4293      	cmp	r3, r2
 800598e:	d3e4      	bcc.n	800595a <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4618      	mov	r0, r3
 8005996:	f007 fa09 	bl	800cdac <USB_ReadInterrupts>
 800599a:	4603      	mov	r3, r0
 800599c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059a4:	d13c      	bne.n	8005a20 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80059a6:	2301      	movs	r3, #1
 80059a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80059aa:	e02b      	b.n	8005a04 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80059ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ae:	015a      	lsls	r2, r3, #5
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	4413      	add	r3, r2
 80059b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80059bc:	6879      	ldr	r1, [r7, #4]
 80059be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059c0:	4613      	mov	r3, r2
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	4413      	add	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	440b      	add	r3, r1
 80059ca:	3318      	adds	r3, #24
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d115      	bne.n	80059fe <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80059d2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	da12      	bge.n	80059fe <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80059d8:	6879      	ldr	r1, [r7, #4]
 80059da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059dc:	4613      	mov	r3, r2
 80059de:	00db      	lsls	r3, r3, #3
 80059e0:	4413      	add	r3, r2
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	440b      	add	r3, r1
 80059e6:	3317      	adds	r3, #23
 80059e8:	2201      	movs	r2, #1
 80059ea:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80059ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	4619      	mov	r1, r3
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 fac8 	bl	8005f8e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80059fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a00:	3301      	adds	r3, #1
 8005a02:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	791b      	ldrb	r3, [r3, #4]
 8005a08:	461a      	mov	r2, r3
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d3cd      	bcc.n	80059ac <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	695a      	ldr	r2, [r3, #20]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005a1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4618      	mov	r0, r3
 8005a26:	f007 f9c1 	bl	800cdac <USB_ReadInterrupts>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a34:	d156      	bne.n	8005ae4 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a36:	2301      	movs	r3, #1
 8005a38:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a3a:	e045      	b.n	8005ac8 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3e:	015a      	lsls	r2, r3, #5
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	4413      	add	r3, r2
 8005a44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005a4c:	6879      	ldr	r1, [r7, #4]
 8005a4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a50:	4613      	mov	r3, r2
 8005a52:	00db      	lsls	r3, r3, #3
 8005a54:	4413      	add	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	440b      	add	r3, r1
 8005a5a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d12e      	bne.n	8005ac2 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005a64:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	da2b      	bge.n	8005ac2 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005a76:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d121      	bne.n	8005ac2 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005a7e:	6879      	ldr	r1, [r7, #4]
 8005a80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a82:	4613      	mov	r3, r2
 8005a84:	00db      	lsls	r3, r3, #3
 8005a86:	4413      	add	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	440b      	add	r3, r1
 8005a8c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005a90:	2201      	movs	r2, #1
 8005a92:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005aa0:	6a3b      	ldr	r3, [r7, #32]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d10a      	bne.n	8005ac2 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	69fa      	ldr	r2, [r7, #28]
 8005ab6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005aba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005abe:	6053      	str	r3, [r2, #4]
            break;
 8005ac0:	e008      	b.n	8005ad4 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	791b      	ldrb	r3, [r3, #4]
 8005acc:	461a      	mov	r2, r3
 8005ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d3b3      	bcc.n	8005a3c <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	695a      	ldr	r2, [r3, #20]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005ae2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f007 f95f 	bl	800cdac <USB_ReadInterrupts>
 8005aee:	4603      	mov	r3, r0
 8005af0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005af4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005af8:	d10a      	bne.n	8005b10 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f009 fe0a 	bl	800f714 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	695a      	ldr	r2, [r3, #20]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005b0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f007 f949 	bl	800cdac <USB_ReadInterrupts>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	f003 0304 	and.w	r3, r3, #4
 8005b20:	2b04      	cmp	r3, #4
 8005b22:	d115      	bne.n	8005b50 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	f003 0304 	and.w	r3, r3, #4
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d002      	beq.n	8005b3c <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f009 fdfa 	bl	800f730 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6859      	ldr	r1, [r3, #4]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	69ba      	ldr	r2, [r7, #24]
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	605a      	str	r2, [r3, #4]
 8005b4c:	e000      	b.n	8005b50 <HAL_PCD_IRQHandler+0x996>
      return;
 8005b4e:	bf00      	nop
    }
  }
}
 8005b50:	3734      	adds	r7, #52	@ 0x34
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd90      	pop	{r4, r7, pc}

08005b56 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b082      	sub	sp, #8
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
 8005b5e:	460b      	mov	r3, r1
 8005b60:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d101      	bne.n	8005b70 <HAL_PCD_SetAddress+0x1a>
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	e012      	b.n	8005b96 <HAL_PCD_SetAddress+0x40>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	78fa      	ldrb	r2, [r7, #3]
 8005b7c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	78fa      	ldrb	r2, [r7, #3]
 8005b84:	4611      	mov	r1, r2
 8005b86:	4618      	mov	r0, r3
 8005b88:	f007 f8a8 	bl	800ccdc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3708      	adds	r7, #8
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b084      	sub	sp, #16
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
 8005ba6:	4608      	mov	r0, r1
 8005ba8:	4611      	mov	r1, r2
 8005baa:	461a      	mov	r2, r3
 8005bac:	4603      	mov	r3, r0
 8005bae:	70fb      	strb	r3, [r7, #3]
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	803b      	strh	r3, [r7, #0]
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005bbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	da0f      	bge.n	8005be4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bc4:	78fb      	ldrb	r3, [r7, #3]
 8005bc6:	f003 020f 	and.w	r2, r3, #15
 8005bca:	4613      	mov	r3, r2
 8005bcc:	00db      	lsls	r3, r3, #3
 8005bce:	4413      	add	r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	3310      	adds	r3, #16
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	3304      	adds	r3, #4
 8005bda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2201      	movs	r2, #1
 8005be0:	705a      	strb	r2, [r3, #1]
 8005be2:	e00f      	b.n	8005c04 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005be4:	78fb      	ldrb	r3, [r7, #3]
 8005be6:	f003 020f 	and.w	r2, r3, #15
 8005bea:	4613      	mov	r3, r2
 8005bec:	00db      	lsls	r3, r3, #3
 8005bee:	4413      	add	r3, r2
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	3304      	adds	r3, #4
 8005bfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005c04:	78fb      	ldrb	r3, [r7, #3]
 8005c06:	f003 030f 	and.w	r3, r3, #15
 8005c0a:	b2da      	uxtb	r2, r3
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005c10:	883a      	ldrh	r2, [r7, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	78ba      	ldrb	r2, [r7, #2]
 8005c1a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	785b      	ldrb	r3, [r3, #1]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d004      	beq.n	8005c2e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	461a      	mov	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005c2e:	78bb      	ldrb	r3, [r7, #2]
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d102      	bne.n	8005c3a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d101      	bne.n	8005c48 <HAL_PCD_EP_Open+0xaa>
 8005c44:	2302      	movs	r3, #2
 8005c46:	e00e      	b.n	8005c66 <HAL_PCD_EP_Open+0xc8>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68f9      	ldr	r1, [r7, #12]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f006 fa28 	bl	800c0ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005c64:	7afb      	ldrb	r3, [r7, #11]
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b084      	sub	sp, #16
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
 8005c76:	460b      	mov	r3, r1
 8005c78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005c7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	da0f      	bge.n	8005ca2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c82:	78fb      	ldrb	r3, [r7, #3]
 8005c84:	f003 020f 	and.w	r2, r3, #15
 8005c88:	4613      	mov	r3, r2
 8005c8a:	00db      	lsls	r3, r3, #3
 8005c8c:	4413      	add	r3, r2
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	3310      	adds	r3, #16
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	4413      	add	r3, r2
 8005c96:	3304      	adds	r3, #4
 8005c98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	705a      	strb	r2, [r3, #1]
 8005ca0:	e00f      	b.n	8005cc2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ca2:	78fb      	ldrb	r3, [r7, #3]
 8005ca4:	f003 020f 	and.w	r2, r3, #15
 8005ca8:	4613      	mov	r3, r2
 8005caa:	00db      	lsls	r3, r3, #3
 8005cac:	4413      	add	r3, r2
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	3304      	adds	r3, #4
 8005cba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005cc2:	78fb      	ldrb	r3, [r7, #3]
 8005cc4:	f003 030f 	and.w	r3, r3, #15
 8005cc8:	b2da      	uxtb	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d101      	bne.n	8005cdc <HAL_PCD_EP_Close+0x6e>
 8005cd8:	2302      	movs	r3, #2
 8005cda:	e00e      	b.n	8005cfa <HAL_PCD_EP_Close+0x8c>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68f9      	ldr	r1, [r7, #12]
 8005cea:	4618      	mov	r0, r3
 8005cec:	f006 fa66 	bl	800c1bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b086      	sub	sp, #24
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	60f8      	str	r0, [r7, #12]
 8005d0a:	607a      	str	r2, [r7, #4]
 8005d0c:	603b      	str	r3, [r7, #0]
 8005d0e:	460b      	mov	r3, r1
 8005d10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d12:	7afb      	ldrb	r3, [r7, #11]
 8005d14:	f003 020f 	and.w	r2, r3, #15
 8005d18:	4613      	mov	r3, r2
 8005d1a:	00db      	lsls	r3, r3, #3
 8005d1c:	4413      	add	r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	4413      	add	r3, r2
 8005d28:	3304      	adds	r3, #4
 8005d2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	683a      	ldr	r2, [r7, #0]
 8005d36:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	2200      	movs	r2, #0
 8005d42:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d44:	7afb      	ldrb	r3, [r7, #11]
 8005d46:	f003 030f 	and.w	r3, r3, #15
 8005d4a:	b2da      	uxtb	r2, r3
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	799b      	ldrb	r3, [r3, #6]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d102      	bne.n	8005d5e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6818      	ldr	r0, [r3, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	799b      	ldrb	r3, [r3, #6]
 8005d66:	461a      	mov	r2, r3
 8005d68:	6979      	ldr	r1, [r7, #20]
 8005d6a:	f006 fb03 	bl	800c374 <USB_EPStartXfer>

  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3718      	adds	r7, #24
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	460b      	mov	r3, r1
 8005d82:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005d84:	78fb      	ldrb	r3, [r7, #3]
 8005d86:	f003 020f 	and.w	r2, r3, #15
 8005d8a:	6879      	ldr	r1, [r7, #4]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	00db      	lsls	r3, r3, #3
 8005d90:	4413      	add	r3, r2
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	440b      	add	r3, r1
 8005d96:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005d9a:	681b      	ldr	r3, [r3, #0]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	607a      	str	r2, [r7, #4]
 8005db2:	603b      	str	r3, [r7, #0]
 8005db4:	460b      	mov	r3, r1
 8005db6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005db8:	7afb      	ldrb	r3, [r7, #11]
 8005dba:	f003 020f 	and.w	r2, r3, #15
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	00db      	lsls	r3, r3, #3
 8005dc2:	4413      	add	r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	3310      	adds	r3, #16
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	4413      	add	r3, r2
 8005dcc:	3304      	adds	r3, #4
 8005dce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	683a      	ldr	r2, [r7, #0]
 8005dda:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	2200      	movs	r2, #0
 8005de0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	2201      	movs	r2, #1
 8005de6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005de8:	7afb      	ldrb	r3, [r7, #11]
 8005dea:	f003 030f 	and.w	r3, r3, #15
 8005dee:	b2da      	uxtb	r2, r3
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	799b      	ldrb	r3, [r3, #6]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d102      	bne.n	8005e02 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6818      	ldr	r0, [r3, #0]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	799b      	ldrb	r3, [r3, #6]
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	6979      	ldr	r1, [r7, #20]
 8005e0e:	f006 fab1 	bl	800c374 <USB_EPStartXfer>

  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3718      	adds	r7, #24
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	460b      	mov	r3, r1
 8005e26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005e28:	78fb      	ldrb	r3, [r7, #3]
 8005e2a:	f003 030f 	and.w	r3, r3, #15
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	7912      	ldrb	r2, [r2, #4]
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d901      	bls.n	8005e3a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e04f      	b.n	8005eda <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005e3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	da0f      	bge.n	8005e62 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e42:	78fb      	ldrb	r3, [r7, #3]
 8005e44:	f003 020f 	and.w	r2, r3, #15
 8005e48:	4613      	mov	r3, r2
 8005e4a:	00db      	lsls	r3, r3, #3
 8005e4c:	4413      	add	r3, r2
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	3310      	adds	r3, #16
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	4413      	add	r3, r2
 8005e56:	3304      	adds	r3, #4
 8005e58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	705a      	strb	r2, [r3, #1]
 8005e60:	e00d      	b.n	8005e7e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005e62:	78fa      	ldrb	r2, [r7, #3]
 8005e64:	4613      	mov	r3, r2
 8005e66:	00db      	lsls	r3, r3, #3
 8005e68:	4413      	add	r3, r2
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	4413      	add	r3, r2
 8005e74:	3304      	adds	r3, #4
 8005e76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2201      	movs	r2, #1
 8005e82:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e84:	78fb      	ldrb	r3, [r7, #3]
 8005e86:	f003 030f 	and.w	r3, r3, #15
 8005e8a:	b2da      	uxtb	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d101      	bne.n	8005e9e <HAL_PCD_EP_SetStall+0x82>
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	e01d      	b.n	8005eda <HAL_PCD_EP_SetStall+0xbe>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68f9      	ldr	r1, [r7, #12]
 8005eac:	4618      	mov	r0, r3
 8005eae:	f006 fe41 	bl	800cb34 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005eb2:	78fb      	ldrb	r3, [r7, #3]
 8005eb4:	f003 030f 	and.w	r3, r3, #15
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d109      	bne.n	8005ed0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6818      	ldr	r0, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	7999      	ldrb	r1, [r3, #6]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005eca:	461a      	mov	r2, r3
 8005ecc:	f007 f834 	bl	800cf38 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b084      	sub	sp, #16
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
 8005eea:	460b      	mov	r3, r1
 8005eec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005eee:	78fb      	ldrb	r3, [r7, #3]
 8005ef0:	f003 030f 	and.w	r3, r3, #15
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	7912      	ldrb	r2, [r2, #4]
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d901      	bls.n	8005f00 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e042      	b.n	8005f86 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005f00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	da0f      	bge.n	8005f28 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f08:	78fb      	ldrb	r3, [r7, #3]
 8005f0a:	f003 020f 	and.w	r2, r3, #15
 8005f0e:	4613      	mov	r3, r2
 8005f10:	00db      	lsls	r3, r3, #3
 8005f12:	4413      	add	r3, r2
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	3310      	adds	r3, #16
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	3304      	adds	r3, #4
 8005f1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2201      	movs	r2, #1
 8005f24:	705a      	strb	r2, [r3, #1]
 8005f26:	e00f      	b.n	8005f48 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f28:	78fb      	ldrb	r3, [r7, #3]
 8005f2a:	f003 020f 	and.w	r2, r3, #15
 8005f2e:	4613      	mov	r3, r2
 8005f30:	00db      	lsls	r3, r3, #3
 8005f32:	4413      	add	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	3304      	adds	r3, #4
 8005f40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f4e:	78fb      	ldrb	r3, [r7, #3]
 8005f50:	f003 030f 	and.w	r3, r3, #15
 8005f54:	b2da      	uxtb	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d101      	bne.n	8005f68 <HAL_PCD_EP_ClrStall+0x86>
 8005f64:	2302      	movs	r3, #2
 8005f66:	e00e      	b.n	8005f86 <HAL_PCD_EP_ClrStall+0xa4>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68f9      	ldr	r1, [r7, #12]
 8005f76:	4618      	mov	r0, r3
 8005f78:	f006 fe4a 	bl	800cc10 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b084      	sub	sp, #16
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
 8005f96:	460b      	mov	r3, r1
 8005f98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005f9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	da0c      	bge.n	8005fbc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fa2:	78fb      	ldrb	r3, [r7, #3]
 8005fa4:	f003 020f 	and.w	r2, r3, #15
 8005fa8:	4613      	mov	r3, r2
 8005faa:	00db      	lsls	r3, r3, #3
 8005fac:	4413      	add	r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	3310      	adds	r3, #16
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	3304      	adds	r3, #4
 8005fb8:	60fb      	str	r3, [r7, #12]
 8005fba:	e00c      	b.n	8005fd6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005fbc:	78fb      	ldrb	r3, [r7, #3]
 8005fbe:	f003 020f 	and.w	r2, r3, #15
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	00db      	lsls	r3, r3, #3
 8005fc6:	4413      	add	r3, r2
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	3304      	adds	r3, #4
 8005fd4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68f9      	ldr	r1, [r7, #12]
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f006 fc69 	bl	800c8b4 <USB_EPStopXfer>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005fe6:	7afb      	ldrb	r3, [r7, #11]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3710      	adds	r7, #16
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b08a      	sub	sp, #40	@ 0x28
 8005ff4:	af02      	add	r7, sp, #8
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006004:	683a      	ldr	r2, [r7, #0]
 8006006:	4613      	mov	r3, r2
 8006008:	00db      	lsls	r3, r3, #3
 800600a:	4413      	add	r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	3310      	adds	r3, #16
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	4413      	add	r3, r2
 8006014:	3304      	adds	r3, #4
 8006016:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	695a      	ldr	r2, [r3, #20]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	429a      	cmp	r2, r3
 8006022:	d901      	bls.n	8006028 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e06b      	b.n	8006100 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	691a      	ldr	r2, [r3, #16]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	695b      	ldr	r3, [r3, #20]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	69fa      	ldr	r2, [r7, #28]
 800603a:	429a      	cmp	r2, r3
 800603c:	d902      	bls.n	8006044 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	3303      	adds	r3, #3
 8006048:	089b      	lsrs	r3, r3, #2
 800604a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800604c:	e02a      	b.n	80060a4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	691a      	ldr	r2, [r3, #16]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	695b      	ldr	r3, [r3, #20]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	69fa      	ldr	r2, [r7, #28]
 8006060:	429a      	cmp	r2, r3
 8006062:	d902      	bls.n	800606a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	3303      	adds	r3, #3
 800606e:	089b      	lsrs	r3, r3, #2
 8006070:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	68d9      	ldr	r1, [r3, #12]
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	b2da      	uxtb	r2, r3
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006082:	9300      	str	r3, [sp, #0]
 8006084:	4603      	mov	r3, r0
 8006086:	6978      	ldr	r0, [r7, #20]
 8006088:	f006 fcbe 	bl	800ca08 <USB_WritePacket>

    ep->xfer_buff  += len;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	68da      	ldr	r2, [r3, #12]
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	441a      	add	r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	695a      	ldr	r2, [r3, #20]
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	441a      	add	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	015a      	lsls	r2, r3, #5
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	4413      	add	r3, r2
 80060ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80060b4:	69ba      	ldr	r2, [r7, #24]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d809      	bhi.n	80060ce <PCD_WriteEmptyTxFifo+0xde>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	695a      	ldr	r2, [r3, #20]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d203      	bcs.n	80060ce <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1bf      	bne.n	800604e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	691a      	ldr	r2, [r3, #16]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d811      	bhi.n	80060fe <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	f003 030f 	and.w	r3, r3, #15
 80060e0:	2201      	movs	r2, #1
 80060e2:	fa02 f303 	lsl.w	r3, r2, r3
 80060e6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	43db      	mvns	r3, r3
 80060f4:	6939      	ldr	r1, [r7, #16]
 80060f6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060fa:	4013      	ands	r3, r2
 80060fc:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3720      	adds	r7, #32
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b088      	sub	sp, #32
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	333c      	adds	r3, #60	@ 0x3c
 8006120:	3304      	adds	r3, #4
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	015a      	lsls	r2, r3, #5
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	4413      	add	r3, r2
 800612e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	799b      	ldrb	r3, [r3, #6]
 800613a:	2b01      	cmp	r3, #1
 800613c:	d17b      	bne.n	8006236 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	f003 0308 	and.w	r3, r3, #8
 8006144:	2b00      	cmp	r3, #0
 8006146:	d015      	beq.n	8006174 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	4a61      	ldr	r2, [pc, #388]	@ (80062d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800614c:	4293      	cmp	r3, r2
 800614e:	f240 80b9 	bls.w	80062c4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006158:	2b00      	cmp	r3, #0
 800615a:	f000 80b3 	beq.w	80062c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	015a      	lsls	r2, r3, #5
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	4413      	add	r3, r2
 8006166:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800616a:	461a      	mov	r2, r3
 800616c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006170:	6093      	str	r3, [r2, #8]
 8006172:	e0a7      	b.n	80062c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	f003 0320 	and.w	r3, r3, #32
 800617a:	2b00      	cmp	r3, #0
 800617c:	d009      	beq.n	8006192 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	015a      	lsls	r2, r3, #5
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	4413      	add	r3, r2
 8006186:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800618a:	461a      	mov	r2, r3
 800618c:	2320      	movs	r3, #32
 800618e:	6093      	str	r3, [r2, #8]
 8006190:	e098      	b.n	80062c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006198:	2b00      	cmp	r3, #0
 800619a:	f040 8093 	bne.w	80062c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	4a4b      	ldr	r2, [pc, #300]	@ (80062d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d90f      	bls.n	80061c6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00a      	beq.n	80061c6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061bc:	461a      	mov	r2, r3
 80061be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061c2:	6093      	str	r3, [r2, #8]
 80061c4:	e07e      	b.n	80062c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80061c6:	683a      	ldr	r2, [r7, #0]
 80061c8:	4613      	mov	r3, r2
 80061ca:	00db      	lsls	r3, r3, #3
 80061cc:	4413      	add	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	4413      	add	r3, r2
 80061d8:	3304      	adds	r3, #4
 80061da:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6a1a      	ldr	r2, [r3, #32]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	0159      	lsls	r1, r3, #5
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	440b      	add	r3, r1
 80061e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061f2:	1ad2      	subs	r2, r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d114      	bne.n	8006228 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d109      	bne.n	800621a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6818      	ldr	r0, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006210:	461a      	mov	r2, r3
 8006212:	2101      	movs	r1, #1
 8006214:	f006 fe90 	bl	800cf38 <USB_EP0_OutStart>
 8006218:	e006      	b.n	8006228 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	68da      	ldr	r2, [r3, #12]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	441a      	add	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	b2db      	uxtb	r3, r3
 800622c:	4619      	mov	r1, r3
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f009 f9ac 	bl	800f58c <HAL_PCD_DataOutStageCallback>
 8006234:	e046      	b.n	80062c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	4a26      	ldr	r2, [pc, #152]	@ (80062d4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d124      	bne.n	8006288 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d00a      	beq.n	800625e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	015a      	lsls	r2, r3, #5
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	4413      	add	r3, r2
 8006250:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006254:	461a      	mov	r2, r3
 8006256:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800625a:	6093      	str	r3, [r2, #8]
 800625c:	e032      	b.n	80062c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	f003 0320 	and.w	r3, r3, #32
 8006264:	2b00      	cmp	r3, #0
 8006266:	d008      	beq.n	800627a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	015a      	lsls	r2, r3, #5
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	4413      	add	r3, r2
 8006270:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006274:	461a      	mov	r2, r3
 8006276:	2320      	movs	r3, #32
 8006278:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	b2db      	uxtb	r3, r3
 800627e:	4619      	mov	r1, r3
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f009 f983 	bl	800f58c <HAL_PCD_DataOutStageCallback>
 8006286:	e01d      	b.n	80062c4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d114      	bne.n	80062b8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800628e:	6879      	ldr	r1, [r7, #4]
 8006290:	683a      	ldr	r2, [r7, #0]
 8006292:	4613      	mov	r3, r2
 8006294:	00db      	lsls	r3, r3, #3
 8006296:	4413      	add	r3, r2
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	440b      	add	r3, r1
 800629c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d108      	bne.n	80062b8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6818      	ldr	r0, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80062b0:	461a      	mov	r2, r3
 80062b2:	2100      	movs	r1, #0
 80062b4:	f006 fe40 	bl	800cf38 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	4619      	mov	r1, r3
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f009 f964 	bl	800f58c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3720      	adds	r7, #32
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	4f54300a 	.word	0x4f54300a
 80062d4:	4f54310a 	.word	0x4f54310a

080062d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b086      	sub	sp, #24
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	333c      	adds	r3, #60	@ 0x3c
 80062f0:	3304      	adds	r3, #4
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	015a      	lsls	r2, r3, #5
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	4413      	add	r3, r2
 80062fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	4a15      	ldr	r2, [pc, #84]	@ (8006360 <PCD_EP_OutSetupPacket_int+0x88>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d90e      	bls.n	800632c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006314:	2b00      	cmp	r3, #0
 8006316:	d009      	beq.n	800632c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	015a      	lsls	r2, r3, #5
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	4413      	add	r3, r2
 8006320:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006324:	461a      	mov	r2, r3
 8006326:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800632a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f009 f91b 	bl	800f568 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	4a0a      	ldr	r2, [pc, #40]	@ (8006360 <PCD_EP_OutSetupPacket_int+0x88>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d90c      	bls.n	8006354 <PCD_EP_OutSetupPacket_int+0x7c>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	799b      	ldrb	r3, [r3, #6]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d108      	bne.n	8006354 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6818      	ldr	r0, [r3, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800634c:	461a      	mov	r2, r3
 800634e:	2101      	movs	r1, #1
 8006350:	f006 fdf2 	bl	800cf38 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3718      	adds	r7, #24
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	4f54300a 	.word	0x4f54300a

08006364 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	460b      	mov	r3, r1
 800636e:	70fb      	strb	r3, [r7, #3]
 8006370:	4613      	mov	r3, r2
 8006372:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800637a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800637c:	78fb      	ldrb	r3, [r7, #3]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d107      	bne.n	8006392 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006382:	883b      	ldrh	r3, [r7, #0]
 8006384:	0419      	lsls	r1, r3, #16
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68ba      	ldr	r2, [r7, #8]
 800638c:	430a      	orrs	r2, r1
 800638e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006390:	e028      	b.n	80063e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006398:	0c1b      	lsrs	r3, r3, #16
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	4413      	add	r3, r2
 800639e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80063a0:	2300      	movs	r3, #0
 80063a2:	73fb      	strb	r3, [r7, #15]
 80063a4:	e00d      	b.n	80063c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	7bfb      	ldrb	r3, [r7, #15]
 80063ac:	3340      	adds	r3, #64	@ 0x40
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	4413      	add	r3, r2
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	0c1b      	lsrs	r3, r3, #16
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	4413      	add	r3, r2
 80063ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80063bc:	7bfb      	ldrb	r3, [r7, #15]
 80063be:	3301      	adds	r3, #1
 80063c0:	73fb      	strb	r3, [r7, #15]
 80063c2:	7bfa      	ldrb	r2, [r7, #15]
 80063c4:	78fb      	ldrb	r3, [r7, #3]
 80063c6:	3b01      	subs	r3, #1
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d3ec      	bcc.n	80063a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80063cc:	883b      	ldrh	r3, [r7, #0]
 80063ce:	0418      	lsls	r0, r3, #16
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6819      	ldr	r1, [r3, #0]
 80063d4:	78fb      	ldrb	r3, [r7, #3]
 80063d6:	3b01      	subs	r3, #1
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	4302      	orrs	r2, r0
 80063dc:	3340      	adds	r3, #64	@ 0x40
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	440b      	add	r3, r1
 80063e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3714      	adds	r7, #20
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr

080063f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80063f2:	b480      	push	{r7}
 80063f4:	b083      	sub	sp, #12
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
 80063fa:	460b      	mov	r3, r1
 80063fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	887a      	ldrh	r2, [r7, #2]
 8006404:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2201      	movs	r2, #1
 8006426:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	699b      	ldr	r3, [r3, #24]
 8006436:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006442:	4b05      	ldr	r3, [pc, #20]	@ (8006458 <HAL_PCDEx_ActivateLPM+0x44>)
 8006444:	4313      	orrs	r3, r2
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3714      	adds	r7, #20
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr
 8006458:	10000003 	.word	0x10000003

0800645c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	460b      	mov	r3, r1
 8006466:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800647c:	4b29      	ldr	r3, [pc, #164]	@ (8006524 <HAL_PWREx_ConfigSupply+0xb0>)
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	f003 0307 	and.w	r3, r3, #7
 8006484:	2b06      	cmp	r3, #6
 8006486:	d00a      	beq.n	800649e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006488:	4b26      	ldr	r3, [pc, #152]	@ (8006524 <HAL_PWREx_ConfigSupply+0xb0>)
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	429a      	cmp	r2, r3
 8006494:	d001      	beq.n	800649a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e040      	b.n	800651c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800649a:	2300      	movs	r3, #0
 800649c:	e03e      	b.n	800651c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800649e:	4b21      	ldr	r3, [pc, #132]	@ (8006524 <HAL_PWREx_ConfigSupply+0xb0>)
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80064a6:	491f      	ldr	r1, [pc, #124]	@ (8006524 <HAL_PWREx_ConfigSupply+0xb0>)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80064ae:	f7fc f889 	bl	80025c4 <HAL_GetTick>
 80064b2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80064b4:	e009      	b.n	80064ca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80064b6:	f7fc f885 	bl	80025c4 <HAL_GetTick>
 80064ba:	4602      	mov	r2, r0
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80064c4:	d901      	bls.n	80064ca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e028      	b.n	800651c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80064ca:	4b16      	ldr	r3, [pc, #88]	@ (8006524 <HAL_PWREx_ConfigSupply+0xb0>)
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80064d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064d6:	d1ee      	bne.n	80064b6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b1e      	cmp	r3, #30
 80064dc:	d008      	beq.n	80064f0 <HAL_PWREx_ConfigSupply+0x7c>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80064e2:	d005      	beq.n	80064f0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b1d      	cmp	r3, #29
 80064e8:	d002      	beq.n	80064f0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2b2d      	cmp	r3, #45	@ 0x2d
 80064ee:	d114      	bne.n	800651a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80064f0:	f7fc f868 	bl	80025c4 <HAL_GetTick>
 80064f4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80064f6:	e009      	b.n	800650c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80064f8:	f7fc f864 	bl	80025c4 <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006506:	d901      	bls.n	800650c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e007      	b.n	800651c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800650c:	4b05      	ldr	r3, [pc, #20]	@ (8006524 <HAL_PWREx_ConfigSupply+0xb0>)
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006518:	d1ee      	bne.n	80064f8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3710      	adds	r7, #16
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	58024800 	.word	0x58024800

08006528 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006528:	b480      	push	{r7}
 800652a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800652c:	4b05      	ldr	r3, [pc, #20]	@ (8006544 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	4a04      	ldr	r2, [pc, #16]	@ (8006544 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006532:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006536:	60d3      	str	r3, [r2, #12]
}
 8006538:	bf00      	nop
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	58024800 	.word	0x58024800

08006548 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b08c      	sub	sp, #48	@ 0x30
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d102      	bne.n	800655c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	f000 bc48 	b.w	8006dec <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0301 	and.w	r3, r3, #1
 8006564:	2b00      	cmp	r3, #0
 8006566:	f000 8088 	beq.w	800667a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800656a:	4b99      	ldr	r3, [pc, #612]	@ (80067d0 <HAL_RCC_OscConfig+0x288>)
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006572:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006574:	4b96      	ldr	r3, [pc, #600]	@ (80067d0 <HAL_RCC_OscConfig+0x288>)
 8006576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006578:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800657a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800657c:	2b10      	cmp	r3, #16
 800657e:	d007      	beq.n	8006590 <HAL_RCC_OscConfig+0x48>
 8006580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006582:	2b18      	cmp	r3, #24
 8006584:	d111      	bne.n	80065aa <HAL_RCC_OscConfig+0x62>
 8006586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006588:	f003 0303 	and.w	r3, r3, #3
 800658c:	2b02      	cmp	r3, #2
 800658e:	d10c      	bne.n	80065aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006590:	4b8f      	ldr	r3, [pc, #572]	@ (80067d0 <HAL_RCC_OscConfig+0x288>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d06d      	beq.n	8006678 <HAL_RCC_OscConfig+0x130>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d169      	bne.n	8006678 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	f000 bc21 	b.w	8006dec <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065b2:	d106      	bne.n	80065c2 <HAL_RCC_OscConfig+0x7a>
 80065b4:	4b86      	ldr	r3, [pc, #536]	@ (80067d0 <HAL_RCC_OscConfig+0x288>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a85      	ldr	r2, [pc, #532]	@ (80067d0 <HAL_RCC_OscConfig+0x288>)
 80065ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065be:	6013      	str	r3, [r2, #0]
 80065c0:	e02e      	b.n	8006620 <HAL_RCC_OscConfig+0xd8>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10c      	bne.n	80065e4 <HAL_RCC_OscConfig+0x9c>
 80065ca:	4b81      	ldr	r3, [pc, #516]	@ (80067d0 <HAL_RCC_OscConfig+0x288>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a80      	ldr	r2, [pc, #512]	@ (80067d0 <HAL_RCC_OscConfig+0x288>)
 80065d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065d4:	6013      	str	r3, [r2, #0]
 80065d6:	4b7e      	ldr	r3, [pc, #504]	@ (80067d0 <HAL_RCC_OscConfig+0x288>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a7d      	ldr	r2, [pc, #500]	@ (80067d0 <HAL_RCC_OscConfig+0x288>)
 80065dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80065e0:	6013      	str	r3, [r2, #0]
 80065e2:	e01d      	b.n	8006620 <HAL_RCC_OscConfig+0xd8>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80065ec:	d10c      	bne.n	8006608 <HAL_RCC_OscConfig+0xc0>
 80065ee:	4b78      	ldr	r3, [pc, #480]	@ (80067d0 <HAL_RCC_OscConfig+0x288>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a77      	ldr	r2, [pc, #476]	@ (80067d0 <HAL_RCC_OscConfig+0x288>)
 80065f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80065f8:	6013      	str	r3, [r2, #0]
 80065fa:	4b75      	ldr	r3, [pc, #468]	@ (80067d0 <HAL_RCC_OscConfig+0x288>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a74      	ldr	r2, [pc, #464]	@ (80067d0 <HAL_RCC_OscConfig+0x288>)
 8006600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006604:	6013      	str	r3, [r2, #0]
 8006606:	e00b      	b.n	8006620 <HAL_RCC_OscConfig+0xd8>
 8006608:	4b71      	ldr	r3, [pc, #452]	@ (80067d0 <HAL_RCC_OscConfig+0x288>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a70      	ldr	r2, [pc, #448]	@ (80067d0 <HAL_RCC_OscConfig+0x288>)
 800660e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006612:	6013      	str	r3, [r2, #0]
 8006614:	4b6e      	ldr	r3, [pc, #440]	@ (80067d0 <HAL_RCC_OscConfig+0x288>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a6d      	ldr	r2, [pc, #436]	@ (80067d0 <HAL_RCC_OscConfig+0x288>)
 800661a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800661e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d013      	beq.n	8006650 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006628:	f7fb ffcc 	bl	80025c4 <HAL_GetTick>
 800662c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800662e:	e008      	b.n	8006642 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006630:	f7fb ffc8 	bl	80025c4 <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	2b64      	cmp	r3, #100	@ 0x64
 800663c:	d901      	bls.n	8006642 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e3d4      	b.n	8006dec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006642:	4b63      	ldr	r3, [pc, #396]	@ (80067d0 <HAL_RCC_OscConfig+0x288>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d0f0      	beq.n	8006630 <HAL_RCC_OscConfig+0xe8>
 800664e:	e014      	b.n	800667a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006650:	f7fb ffb8 	bl	80025c4 <HAL_GetTick>
 8006654:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006656:	e008      	b.n	800666a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006658:	f7fb ffb4 	bl	80025c4 <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	2b64      	cmp	r3, #100	@ 0x64
 8006664:	d901      	bls.n	800666a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e3c0      	b.n	8006dec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800666a:	4b59      	ldr	r3, [pc, #356]	@ (80067d0 <HAL_RCC_OscConfig+0x288>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1f0      	bne.n	8006658 <HAL_RCC_OscConfig+0x110>
 8006676:	e000      	b.n	800667a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 0302 	and.w	r3, r3, #2
 8006682:	2b00      	cmp	r3, #0
 8006684:	f000 80ca 	beq.w	800681c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006688:	4b51      	ldr	r3, [pc, #324]	@ (80067d0 <HAL_RCC_OscConfig+0x288>)
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006690:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006692:	4b4f      	ldr	r3, [pc, #316]	@ (80067d0 <HAL_RCC_OscConfig+0x288>)
 8006694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006696:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006698:	6a3b      	ldr	r3, [r7, #32]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d007      	beq.n	80066ae <HAL_RCC_OscConfig+0x166>
 800669e:	6a3b      	ldr	r3, [r7, #32]
 80066a0:	2b18      	cmp	r3, #24
 80066a2:	d156      	bne.n	8006752 <HAL_RCC_OscConfig+0x20a>
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	f003 0303 	and.w	r3, r3, #3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d151      	bne.n	8006752 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066ae:	4b48      	ldr	r3, [pc, #288]	@ (80067d0 <HAL_RCC_OscConfig+0x288>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 0304 	and.w	r3, r3, #4
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d005      	beq.n	80066c6 <HAL_RCC_OscConfig+0x17e>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d101      	bne.n	80066c6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e392      	b.n	8006dec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80066c6:	4b42      	ldr	r3, [pc, #264]	@ (80067d0 <HAL_RCC_OscConfig+0x288>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f023 0219 	bic.w	r2, r3, #25
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	493f      	ldr	r1, [pc, #252]	@ (80067d0 <HAL_RCC_OscConfig+0x288>)
 80066d4:	4313      	orrs	r3, r2
 80066d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066d8:	f7fb ff74 	bl	80025c4 <HAL_GetTick>
 80066dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066de:	e008      	b.n	80066f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066e0:	f7fb ff70 	bl	80025c4 <HAL_GetTick>
 80066e4:	4602      	mov	r2, r0
 80066e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d901      	bls.n	80066f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80066ee:	2303      	movs	r3, #3
 80066f0:	e37c      	b.n	8006dec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066f2:	4b37      	ldr	r3, [pc, #220]	@ (80067d0 <HAL_RCC_OscConfig+0x288>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 0304 	and.w	r3, r3, #4
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d0f0      	beq.n	80066e0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066fe:	f7fb ff91 	bl	8002624 <HAL_GetREVID>
 8006702:	4603      	mov	r3, r0
 8006704:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006708:	4293      	cmp	r3, r2
 800670a:	d817      	bhi.n	800673c <HAL_RCC_OscConfig+0x1f4>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	2b40      	cmp	r3, #64	@ 0x40
 8006712:	d108      	bne.n	8006726 <HAL_RCC_OscConfig+0x1de>
 8006714:	4b2e      	ldr	r3, [pc, #184]	@ (80067d0 <HAL_RCC_OscConfig+0x288>)
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800671c:	4a2c      	ldr	r2, [pc, #176]	@ (80067d0 <HAL_RCC_OscConfig+0x288>)
 800671e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006722:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006724:	e07a      	b.n	800681c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006726:	4b2a      	ldr	r3, [pc, #168]	@ (80067d0 <HAL_RCC_OscConfig+0x288>)
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	031b      	lsls	r3, r3, #12
 8006734:	4926      	ldr	r1, [pc, #152]	@ (80067d0 <HAL_RCC_OscConfig+0x288>)
 8006736:	4313      	orrs	r3, r2
 8006738:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800673a:	e06f      	b.n	800681c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800673c:	4b24      	ldr	r3, [pc, #144]	@ (80067d0 <HAL_RCC_OscConfig+0x288>)
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	061b      	lsls	r3, r3, #24
 800674a:	4921      	ldr	r1, [pc, #132]	@ (80067d0 <HAL_RCC_OscConfig+0x288>)
 800674c:	4313      	orrs	r3, r2
 800674e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006750:	e064      	b.n	800681c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d047      	beq.n	80067ea <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800675a:	4b1d      	ldr	r3, [pc, #116]	@ (80067d0 <HAL_RCC_OscConfig+0x288>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f023 0219 	bic.w	r2, r3, #25
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	491a      	ldr	r1, [pc, #104]	@ (80067d0 <HAL_RCC_OscConfig+0x288>)
 8006768:	4313      	orrs	r3, r2
 800676a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800676c:	f7fb ff2a 	bl	80025c4 <HAL_GetTick>
 8006770:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006772:	e008      	b.n	8006786 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006774:	f7fb ff26 	bl	80025c4 <HAL_GetTick>
 8006778:	4602      	mov	r2, r0
 800677a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	2b02      	cmp	r3, #2
 8006780:	d901      	bls.n	8006786 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	e332      	b.n	8006dec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006786:	4b12      	ldr	r3, [pc, #72]	@ (80067d0 <HAL_RCC_OscConfig+0x288>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 0304 	and.w	r3, r3, #4
 800678e:	2b00      	cmp	r3, #0
 8006790:	d0f0      	beq.n	8006774 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006792:	f7fb ff47 	bl	8002624 <HAL_GetREVID>
 8006796:	4603      	mov	r3, r0
 8006798:	f241 0203 	movw	r2, #4099	@ 0x1003
 800679c:	4293      	cmp	r3, r2
 800679e:	d819      	bhi.n	80067d4 <HAL_RCC_OscConfig+0x28c>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	2b40      	cmp	r3, #64	@ 0x40
 80067a6:	d108      	bne.n	80067ba <HAL_RCC_OscConfig+0x272>
 80067a8:	4b09      	ldr	r3, [pc, #36]	@ (80067d0 <HAL_RCC_OscConfig+0x288>)
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80067b0:	4a07      	ldr	r2, [pc, #28]	@ (80067d0 <HAL_RCC_OscConfig+0x288>)
 80067b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067b6:	6053      	str	r3, [r2, #4]
 80067b8:	e030      	b.n	800681c <HAL_RCC_OscConfig+0x2d4>
 80067ba:	4b05      	ldr	r3, [pc, #20]	@ (80067d0 <HAL_RCC_OscConfig+0x288>)
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	031b      	lsls	r3, r3, #12
 80067c8:	4901      	ldr	r1, [pc, #4]	@ (80067d0 <HAL_RCC_OscConfig+0x288>)
 80067ca:	4313      	orrs	r3, r2
 80067cc:	604b      	str	r3, [r1, #4]
 80067ce:	e025      	b.n	800681c <HAL_RCC_OscConfig+0x2d4>
 80067d0:	58024400 	.word	0x58024400
 80067d4:	4b9a      	ldr	r3, [pc, #616]	@ (8006a40 <HAL_RCC_OscConfig+0x4f8>)
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	061b      	lsls	r3, r3, #24
 80067e2:	4997      	ldr	r1, [pc, #604]	@ (8006a40 <HAL_RCC_OscConfig+0x4f8>)
 80067e4:	4313      	orrs	r3, r2
 80067e6:	604b      	str	r3, [r1, #4]
 80067e8:	e018      	b.n	800681c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067ea:	4b95      	ldr	r3, [pc, #596]	@ (8006a40 <HAL_RCC_OscConfig+0x4f8>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a94      	ldr	r2, [pc, #592]	@ (8006a40 <HAL_RCC_OscConfig+0x4f8>)
 80067f0:	f023 0301 	bic.w	r3, r3, #1
 80067f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067f6:	f7fb fee5 	bl	80025c4 <HAL_GetTick>
 80067fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80067fc:	e008      	b.n	8006810 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067fe:	f7fb fee1 	bl	80025c4 <HAL_GetTick>
 8006802:	4602      	mov	r2, r0
 8006804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	2b02      	cmp	r3, #2
 800680a:	d901      	bls.n	8006810 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	e2ed      	b.n	8006dec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006810:	4b8b      	ldr	r3, [pc, #556]	@ (8006a40 <HAL_RCC_OscConfig+0x4f8>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0304 	and.w	r3, r3, #4
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1f0      	bne.n	80067fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0310 	and.w	r3, r3, #16
 8006824:	2b00      	cmp	r3, #0
 8006826:	f000 80a9 	beq.w	800697c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800682a:	4b85      	ldr	r3, [pc, #532]	@ (8006a40 <HAL_RCC_OscConfig+0x4f8>)
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006832:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006834:	4b82      	ldr	r3, [pc, #520]	@ (8006a40 <HAL_RCC_OscConfig+0x4f8>)
 8006836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006838:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	2b08      	cmp	r3, #8
 800683e:	d007      	beq.n	8006850 <HAL_RCC_OscConfig+0x308>
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	2b18      	cmp	r3, #24
 8006844:	d13a      	bne.n	80068bc <HAL_RCC_OscConfig+0x374>
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	f003 0303 	and.w	r3, r3, #3
 800684c:	2b01      	cmp	r3, #1
 800684e:	d135      	bne.n	80068bc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006850:	4b7b      	ldr	r3, [pc, #492]	@ (8006a40 <HAL_RCC_OscConfig+0x4f8>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006858:	2b00      	cmp	r3, #0
 800685a:	d005      	beq.n	8006868 <HAL_RCC_OscConfig+0x320>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	69db      	ldr	r3, [r3, #28]
 8006860:	2b80      	cmp	r3, #128	@ 0x80
 8006862:	d001      	beq.n	8006868 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e2c1      	b.n	8006dec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006868:	f7fb fedc 	bl	8002624 <HAL_GetREVID>
 800686c:	4603      	mov	r3, r0
 800686e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006872:	4293      	cmp	r3, r2
 8006874:	d817      	bhi.n	80068a6 <HAL_RCC_OscConfig+0x35e>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	2b20      	cmp	r3, #32
 800687c:	d108      	bne.n	8006890 <HAL_RCC_OscConfig+0x348>
 800687e:	4b70      	ldr	r3, [pc, #448]	@ (8006a40 <HAL_RCC_OscConfig+0x4f8>)
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006886:	4a6e      	ldr	r2, [pc, #440]	@ (8006a40 <HAL_RCC_OscConfig+0x4f8>)
 8006888:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800688c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800688e:	e075      	b.n	800697c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006890:	4b6b      	ldr	r3, [pc, #428]	@ (8006a40 <HAL_RCC_OscConfig+0x4f8>)
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a1b      	ldr	r3, [r3, #32]
 800689c:	069b      	lsls	r3, r3, #26
 800689e:	4968      	ldr	r1, [pc, #416]	@ (8006a40 <HAL_RCC_OscConfig+0x4f8>)
 80068a0:	4313      	orrs	r3, r2
 80068a2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80068a4:	e06a      	b.n	800697c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80068a6:	4b66      	ldr	r3, [pc, #408]	@ (8006a40 <HAL_RCC_OscConfig+0x4f8>)
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	061b      	lsls	r3, r3, #24
 80068b4:	4962      	ldr	r1, [pc, #392]	@ (8006a40 <HAL_RCC_OscConfig+0x4f8>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80068ba:	e05f      	b.n	800697c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	69db      	ldr	r3, [r3, #28]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d042      	beq.n	800694a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80068c4:	4b5e      	ldr	r3, [pc, #376]	@ (8006a40 <HAL_RCC_OscConfig+0x4f8>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a5d      	ldr	r2, [pc, #372]	@ (8006a40 <HAL_RCC_OscConfig+0x4f8>)
 80068ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d0:	f7fb fe78 	bl	80025c4 <HAL_GetTick>
 80068d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80068d6:	e008      	b.n	80068ea <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80068d8:	f7fb fe74 	bl	80025c4 <HAL_GetTick>
 80068dc:	4602      	mov	r2, r0
 80068de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d901      	bls.n	80068ea <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e280      	b.n	8006dec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80068ea:	4b55      	ldr	r3, [pc, #340]	@ (8006a40 <HAL_RCC_OscConfig+0x4f8>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d0f0      	beq.n	80068d8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80068f6:	f7fb fe95 	bl	8002624 <HAL_GetREVID>
 80068fa:	4603      	mov	r3, r0
 80068fc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006900:	4293      	cmp	r3, r2
 8006902:	d817      	bhi.n	8006934 <HAL_RCC_OscConfig+0x3ec>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a1b      	ldr	r3, [r3, #32]
 8006908:	2b20      	cmp	r3, #32
 800690a:	d108      	bne.n	800691e <HAL_RCC_OscConfig+0x3d6>
 800690c:	4b4c      	ldr	r3, [pc, #304]	@ (8006a40 <HAL_RCC_OscConfig+0x4f8>)
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006914:	4a4a      	ldr	r2, [pc, #296]	@ (8006a40 <HAL_RCC_OscConfig+0x4f8>)
 8006916:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800691a:	6053      	str	r3, [r2, #4]
 800691c:	e02e      	b.n	800697c <HAL_RCC_OscConfig+0x434>
 800691e:	4b48      	ldr	r3, [pc, #288]	@ (8006a40 <HAL_RCC_OscConfig+0x4f8>)
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a1b      	ldr	r3, [r3, #32]
 800692a:	069b      	lsls	r3, r3, #26
 800692c:	4944      	ldr	r1, [pc, #272]	@ (8006a40 <HAL_RCC_OscConfig+0x4f8>)
 800692e:	4313      	orrs	r3, r2
 8006930:	604b      	str	r3, [r1, #4]
 8006932:	e023      	b.n	800697c <HAL_RCC_OscConfig+0x434>
 8006934:	4b42      	ldr	r3, [pc, #264]	@ (8006a40 <HAL_RCC_OscConfig+0x4f8>)
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a1b      	ldr	r3, [r3, #32]
 8006940:	061b      	lsls	r3, r3, #24
 8006942:	493f      	ldr	r1, [pc, #252]	@ (8006a40 <HAL_RCC_OscConfig+0x4f8>)
 8006944:	4313      	orrs	r3, r2
 8006946:	60cb      	str	r3, [r1, #12]
 8006948:	e018      	b.n	800697c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800694a:	4b3d      	ldr	r3, [pc, #244]	@ (8006a40 <HAL_RCC_OscConfig+0x4f8>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a3c      	ldr	r2, [pc, #240]	@ (8006a40 <HAL_RCC_OscConfig+0x4f8>)
 8006950:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006954:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006956:	f7fb fe35 	bl	80025c4 <HAL_GetTick>
 800695a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800695c:	e008      	b.n	8006970 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800695e:	f7fb fe31 	bl	80025c4 <HAL_GetTick>
 8006962:	4602      	mov	r2, r0
 8006964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	2b02      	cmp	r3, #2
 800696a:	d901      	bls.n	8006970 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e23d      	b.n	8006dec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006970:	4b33      	ldr	r3, [pc, #204]	@ (8006a40 <HAL_RCC_OscConfig+0x4f8>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1f0      	bne.n	800695e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0308 	and.w	r3, r3, #8
 8006984:	2b00      	cmp	r3, #0
 8006986:	d036      	beq.n	80069f6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	695b      	ldr	r3, [r3, #20]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d019      	beq.n	80069c4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006990:	4b2b      	ldr	r3, [pc, #172]	@ (8006a40 <HAL_RCC_OscConfig+0x4f8>)
 8006992:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006994:	4a2a      	ldr	r2, [pc, #168]	@ (8006a40 <HAL_RCC_OscConfig+0x4f8>)
 8006996:	f043 0301 	orr.w	r3, r3, #1
 800699a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800699c:	f7fb fe12 	bl	80025c4 <HAL_GetTick>
 80069a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80069a2:	e008      	b.n	80069b6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069a4:	f7fb fe0e 	bl	80025c4 <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d901      	bls.n	80069b6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e21a      	b.n	8006dec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80069b6:	4b22      	ldr	r3, [pc, #136]	@ (8006a40 <HAL_RCC_OscConfig+0x4f8>)
 80069b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069ba:	f003 0302 	and.w	r3, r3, #2
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d0f0      	beq.n	80069a4 <HAL_RCC_OscConfig+0x45c>
 80069c2:	e018      	b.n	80069f6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069c4:	4b1e      	ldr	r3, [pc, #120]	@ (8006a40 <HAL_RCC_OscConfig+0x4f8>)
 80069c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069c8:	4a1d      	ldr	r2, [pc, #116]	@ (8006a40 <HAL_RCC_OscConfig+0x4f8>)
 80069ca:	f023 0301 	bic.w	r3, r3, #1
 80069ce:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069d0:	f7fb fdf8 	bl	80025c4 <HAL_GetTick>
 80069d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80069d6:	e008      	b.n	80069ea <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069d8:	f7fb fdf4 	bl	80025c4 <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d901      	bls.n	80069ea <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e200      	b.n	8006dec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80069ea:	4b15      	ldr	r3, [pc, #84]	@ (8006a40 <HAL_RCC_OscConfig+0x4f8>)
 80069ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069ee:	f003 0302 	and.w	r3, r3, #2
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1f0      	bne.n	80069d8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0320 	and.w	r3, r3, #32
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d039      	beq.n	8006a76 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d01c      	beq.n	8006a44 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a40 <HAL_RCC_OscConfig+0x4f8>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a0c      	ldr	r2, [pc, #48]	@ (8006a40 <HAL_RCC_OscConfig+0x4f8>)
 8006a10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006a14:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006a16:	f7fb fdd5 	bl	80025c4 <HAL_GetTick>
 8006a1a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006a1c:	e008      	b.n	8006a30 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a1e:	f7fb fdd1 	bl	80025c4 <HAL_GetTick>
 8006a22:	4602      	mov	r2, r0
 8006a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d901      	bls.n	8006a30 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e1dd      	b.n	8006dec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006a30:	4b03      	ldr	r3, [pc, #12]	@ (8006a40 <HAL_RCC_OscConfig+0x4f8>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d0f0      	beq.n	8006a1e <HAL_RCC_OscConfig+0x4d6>
 8006a3c:	e01b      	b.n	8006a76 <HAL_RCC_OscConfig+0x52e>
 8006a3e:	bf00      	nop
 8006a40:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006a44:	4b9b      	ldr	r3, [pc, #620]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a9a      	ldr	r2, [pc, #616]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006a4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a4e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006a50:	f7fb fdb8 	bl	80025c4 <HAL_GetTick>
 8006a54:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006a56:	e008      	b.n	8006a6a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a58:	f7fb fdb4 	bl	80025c4 <HAL_GetTick>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d901      	bls.n	8006a6a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e1c0      	b.n	8006dec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006a6a:	4b92      	ldr	r3, [pc, #584]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1f0      	bne.n	8006a58 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 0304 	and.w	r3, r3, #4
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	f000 8081 	beq.w	8006b86 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006a84:	4b8c      	ldr	r3, [pc, #560]	@ (8006cb8 <HAL_RCC_OscConfig+0x770>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a8b      	ldr	r2, [pc, #556]	@ (8006cb8 <HAL_RCC_OscConfig+0x770>)
 8006a8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a90:	f7fb fd98 	bl	80025c4 <HAL_GetTick>
 8006a94:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a96:	e008      	b.n	8006aaa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a98:	f7fb fd94 	bl	80025c4 <HAL_GetTick>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	2b64      	cmp	r3, #100	@ 0x64
 8006aa4:	d901      	bls.n	8006aaa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e1a0      	b.n	8006dec <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006aaa:	4b83      	ldr	r3, [pc, #524]	@ (8006cb8 <HAL_RCC_OscConfig+0x770>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d0f0      	beq.n	8006a98 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d106      	bne.n	8006acc <HAL_RCC_OscConfig+0x584>
 8006abe:	4b7d      	ldr	r3, [pc, #500]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ac2:	4a7c      	ldr	r2, [pc, #496]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006ac4:	f043 0301 	orr.w	r3, r3, #1
 8006ac8:	6713      	str	r3, [r2, #112]	@ 0x70
 8006aca:	e02d      	b.n	8006b28 <HAL_RCC_OscConfig+0x5e0>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10c      	bne.n	8006aee <HAL_RCC_OscConfig+0x5a6>
 8006ad4:	4b77      	ldr	r3, [pc, #476]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ad8:	4a76      	ldr	r2, [pc, #472]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006ada:	f023 0301 	bic.w	r3, r3, #1
 8006ade:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ae0:	4b74      	ldr	r3, [pc, #464]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ae4:	4a73      	ldr	r2, [pc, #460]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006ae6:	f023 0304 	bic.w	r3, r3, #4
 8006aea:	6713      	str	r3, [r2, #112]	@ 0x70
 8006aec:	e01c      	b.n	8006b28 <HAL_RCC_OscConfig+0x5e0>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	2b05      	cmp	r3, #5
 8006af4:	d10c      	bne.n	8006b10 <HAL_RCC_OscConfig+0x5c8>
 8006af6:	4b6f      	ldr	r3, [pc, #444]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006afa:	4a6e      	ldr	r2, [pc, #440]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006afc:	f043 0304 	orr.w	r3, r3, #4
 8006b00:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b02:	4b6c      	ldr	r3, [pc, #432]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b06:	4a6b      	ldr	r2, [pc, #428]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006b08:	f043 0301 	orr.w	r3, r3, #1
 8006b0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b0e:	e00b      	b.n	8006b28 <HAL_RCC_OscConfig+0x5e0>
 8006b10:	4b68      	ldr	r3, [pc, #416]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b14:	4a67      	ldr	r2, [pc, #412]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006b16:	f023 0301 	bic.w	r3, r3, #1
 8006b1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b1c:	4b65      	ldr	r3, [pc, #404]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b20:	4a64      	ldr	r2, [pc, #400]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006b22:	f023 0304 	bic.w	r3, r3, #4
 8006b26:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d015      	beq.n	8006b5c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b30:	f7fb fd48 	bl	80025c4 <HAL_GetTick>
 8006b34:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b36:	e00a      	b.n	8006b4e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b38:	f7fb fd44 	bl	80025c4 <HAL_GetTick>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d901      	bls.n	8006b4e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e14e      	b.n	8006dec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b4e:	4b59      	ldr	r3, [pc, #356]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b52:	f003 0302 	and.w	r3, r3, #2
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d0ee      	beq.n	8006b38 <HAL_RCC_OscConfig+0x5f0>
 8006b5a:	e014      	b.n	8006b86 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b5c:	f7fb fd32 	bl	80025c4 <HAL_GetTick>
 8006b60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006b62:	e00a      	b.n	8006b7a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b64:	f7fb fd2e 	bl	80025c4 <HAL_GetTick>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d901      	bls.n	8006b7a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e138      	b.n	8006dec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006b7a:	4b4e      	ldr	r3, [pc, #312]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b7e:	f003 0302 	and.w	r3, r3, #2
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1ee      	bne.n	8006b64 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	f000 812d 	beq.w	8006dea <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006b90:	4b48      	ldr	r3, [pc, #288]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b98:	2b18      	cmp	r3, #24
 8006b9a:	f000 80bd 	beq.w	8006d18 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	f040 809e 	bne.w	8006ce4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ba8:	4b42      	ldr	r3, [pc, #264]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a41      	ldr	r2, [pc, #260]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006bae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006bb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bb4:	f7fb fd06 	bl	80025c4 <HAL_GetTick>
 8006bb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006bba:	e008      	b.n	8006bce <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bbc:	f7fb fd02 	bl	80025c4 <HAL_GetTick>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d901      	bls.n	8006bce <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e10e      	b.n	8006dec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006bce:	4b39      	ldr	r3, [pc, #228]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1f0      	bne.n	8006bbc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006bda:	4b36      	ldr	r3, [pc, #216]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006bdc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006bde:	4b37      	ldr	r3, [pc, #220]	@ (8006cbc <HAL_RCC_OscConfig+0x774>)
 8006be0:	4013      	ands	r3, r2
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006bea:	0112      	lsls	r2, r2, #4
 8006bec:	430a      	orrs	r2, r1
 8006bee:	4931      	ldr	r1, [pc, #196]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	628b      	str	r3, [r1, #40]	@ 0x28
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c02:	3b01      	subs	r3, #1
 8006c04:	025b      	lsls	r3, r3, #9
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	431a      	orrs	r2, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c0e:	3b01      	subs	r3, #1
 8006c10:	041b      	lsls	r3, r3, #16
 8006c12:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006c16:	431a      	orrs	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	061b      	lsls	r3, r3, #24
 8006c20:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006c24:	4923      	ldr	r1, [pc, #140]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006c2a:	4b22      	ldr	r3, [pc, #136]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c2e:	4a21      	ldr	r2, [pc, #132]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006c30:	f023 0301 	bic.w	r3, r3, #1
 8006c34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006c36:	4b1f      	ldr	r3, [pc, #124]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006c38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c3a:	4b21      	ldr	r3, [pc, #132]	@ (8006cc0 <HAL_RCC_OscConfig+0x778>)
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006c42:	00d2      	lsls	r2, r2, #3
 8006c44:	491b      	ldr	r1, [pc, #108]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006c46:	4313      	orrs	r3, r2
 8006c48:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c4e:	f023 020c 	bic.w	r2, r3, #12
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c56:	4917      	ldr	r1, [pc, #92]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006c5c:	4b15      	ldr	r3, [pc, #84]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c60:	f023 0202 	bic.w	r2, r3, #2
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c68:	4912      	ldr	r1, [pc, #72]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006c6e:	4b11      	ldr	r3, [pc, #68]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c72:	4a10      	ldr	r2, [pc, #64]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006c74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c7e:	4a0d      	ldr	r2, [pc, #52]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006c80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006c86:	4b0b      	ldr	r3, [pc, #44]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006c8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006c92:	4b08      	ldr	r3, [pc, #32]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c96:	4a07      	ldr	r2, [pc, #28]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006c98:	f043 0301 	orr.w	r3, r3, #1
 8006c9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c9e:	4b05      	ldr	r3, [pc, #20]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a04      	ldr	r2, [pc, #16]	@ (8006cb4 <HAL_RCC_OscConfig+0x76c>)
 8006ca4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006ca8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006caa:	f7fb fc8b 	bl	80025c4 <HAL_GetTick>
 8006cae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006cb0:	e011      	b.n	8006cd6 <HAL_RCC_OscConfig+0x78e>
 8006cb2:	bf00      	nop
 8006cb4:	58024400 	.word	0x58024400
 8006cb8:	58024800 	.word	0x58024800
 8006cbc:	fffffc0c 	.word	0xfffffc0c
 8006cc0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cc4:	f7fb fc7e 	bl	80025c4 <HAL_GetTick>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d901      	bls.n	8006cd6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	e08a      	b.n	8006dec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006cd6:	4b47      	ldr	r3, [pc, #284]	@ (8006df4 <HAL_RCC_OscConfig+0x8ac>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d0f0      	beq.n	8006cc4 <HAL_RCC_OscConfig+0x77c>
 8006ce2:	e082      	b.n	8006dea <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ce4:	4b43      	ldr	r3, [pc, #268]	@ (8006df4 <HAL_RCC_OscConfig+0x8ac>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a42      	ldr	r2, [pc, #264]	@ (8006df4 <HAL_RCC_OscConfig+0x8ac>)
 8006cea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006cee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cf0:	f7fb fc68 	bl	80025c4 <HAL_GetTick>
 8006cf4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006cf6:	e008      	b.n	8006d0a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cf8:	f7fb fc64 	bl	80025c4 <HAL_GetTick>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d901      	bls.n	8006d0a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e070      	b.n	8006dec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d0a:	4b3a      	ldr	r3, [pc, #232]	@ (8006df4 <HAL_RCC_OscConfig+0x8ac>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1f0      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x7b0>
 8006d16:	e068      	b.n	8006dea <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006d18:	4b36      	ldr	r3, [pc, #216]	@ (8006df4 <HAL_RCC_OscConfig+0x8ac>)
 8006d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d1c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006d1e:	4b35      	ldr	r3, [pc, #212]	@ (8006df4 <HAL_RCC_OscConfig+0x8ac>)
 8006d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d22:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d031      	beq.n	8006d90 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	f003 0203 	and.w	r2, r3, #3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d12a      	bne.n	8006d90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	091b      	lsrs	r3, r3, #4
 8006d3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d122      	bne.n	8006d90 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d54:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d11a      	bne.n	8006d90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	0a5b      	lsrs	r3, r3, #9
 8006d5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d66:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d111      	bne.n	8006d90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	0c1b      	lsrs	r3, r3, #16
 8006d70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d78:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d108      	bne.n	8006d90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	0e1b      	lsrs	r3, r3, #24
 8006d82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d8a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d001      	beq.n	8006d94 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	e02b      	b.n	8006dec <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006d94:	4b17      	ldr	r3, [pc, #92]	@ (8006df4 <HAL_RCC_OscConfig+0x8ac>)
 8006d96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d98:	08db      	lsrs	r3, r3, #3
 8006d9a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d9e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006da4:	693a      	ldr	r2, [r7, #16]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d01f      	beq.n	8006dea <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006daa:	4b12      	ldr	r3, [pc, #72]	@ (8006df4 <HAL_RCC_OscConfig+0x8ac>)
 8006dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dae:	4a11      	ldr	r2, [pc, #68]	@ (8006df4 <HAL_RCC_OscConfig+0x8ac>)
 8006db0:	f023 0301 	bic.w	r3, r3, #1
 8006db4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006db6:	f7fb fc05 	bl	80025c4 <HAL_GetTick>
 8006dba:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006dbc:	bf00      	nop
 8006dbe:	f7fb fc01 	bl	80025c4 <HAL_GetTick>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d0f9      	beq.n	8006dbe <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006dca:	4b0a      	ldr	r3, [pc, #40]	@ (8006df4 <HAL_RCC_OscConfig+0x8ac>)
 8006dcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006dce:	4b0a      	ldr	r3, [pc, #40]	@ (8006df8 <HAL_RCC_OscConfig+0x8b0>)
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006dd6:	00d2      	lsls	r2, r2, #3
 8006dd8:	4906      	ldr	r1, [pc, #24]	@ (8006df4 <HAL_RCC_OscConfig+0x8ac>)
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006dde:	4b05      	ldr	r3, [pc, #20]	@ (8006df4 <HAL_RCC_OscConfig+0x8ac>)
 8006de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de2:	4a04      	ldr	r2, [pc, #16]	@ (8006df4 <HAL_RCC_OscConfig+0x8ac>)
 8006de4:	f043 0301 	orr.w	r3, r3, #1
 8006de8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3730      	adds	r7, #48	@ 0x30
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	58024400 	.word	0x58024400
 8006df8:	ffff0007 	.word	0xffff0007

08006dfc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b086      	sub	sp, #24
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d101      	bne.n	8006e10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e19c      	b.n	800714a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e10:	4b8a      	ldr	r3, [pc, #552]	@ (800703c <HAL_RCC_ClockConfig+0x240>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 030f 	and.w	r3, r3, #15
 8006e18:	683a      	ldr	r2, [r7, #0]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d910      	bls.n	8006e40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e1e:	4b87      	ldr	r3, [pc, #540]	@ (800703c <HAL_RCC_ClockConfig+0x240>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f023 020f 	bic.w	r2, r3, #15
 8006e26:	4985      	ldr	r1, [pc, #532]	@ (800703c <HAL_RCC_ClockConfig+0x240>)
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e2e:	4b83      	ldr	r3, [pc, #524]	@ (800703c <HAL_RCC_ClockConfig+0x240>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 030f 	and.w	r3, r3, #15
 8006e36:	683a      	ldr	r2, [r7, #0]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d001      	beq.n	8006e40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e184      	b.n	800714a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0304 	and.w	r3, r3, #4
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d010      	beq.n	8006e6e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	691a      	ldr	r2, [r3, #16]
 8006e50:	4b7b      	ldr	r3, [pc, #492]	@ (8007040 <HAL_RCC_ClockConfig+0x244>)
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d908      	bls.n	8006e6e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006e5c:	4b78      	ldr	r3, [pc, #480]	@ (8007040 <HAL_RCC_ClockConfig+0x244>)
 8006e5e:	699b      	ldr	r3, [r3, #24]
 8006e60:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	4975      	ldr	r1, [pc, #468]	@ (8007040 <HAL_RCC_ClockConfig+0x244>)
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 0308 	and.w	r3, r3, #8
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d010      	beq.n	8006e9c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	695a      	ldr	r2, [r3, #20]
 8006e7e:	4b70      	ldr	r3, [pc, #448]	@ (8007040 <HAL_RCC_ClockConfig+0x244>)
 8006e80:	69db      	ldr	r3, [r3, #28]
 8006e82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d908      	bls.n	8006e9c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006e8a:	4b6d      	ldr	r3, [pc, #436]	@ (8007040 <HAL_RCC_ClockConfig+0x244>)
 8006e8c:	69db      	ldr	r3, [r3, #28]
 8006e8e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	695b      	ldr	r3, [r3, #20]
 8006e96:	496a      	ldr	r1, [pc, #424]	@ (8007040 <HAL_RCC_ClockConfig+0x244>)
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 0310 	and.w	r3, r3, #16
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d010      	beq.n	8006eca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	699a      	ldr	r2, [r3, #24]
 8006eac:	4b64      	ldr	r3, [pc, #400]	@ (8007040 <HAL_RCC_ClockConfig+0x244>)
 8006eae:	69db      	ldr	r3, [r3, #28]
 8006eb0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d908      	bls.n	8006eca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006eb8:	4b61      	ldr	r3, [pc, #388]	@ (8007040 <HAL_RCC_ClockConfig+0x244>)
 8006eba:	69db      	ldr	r3, [r3, #28]
 8006ebc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	495e      	ldr	r1, [pc, #376]	@ (8007040 <HAL_RCC_ClockConfig+0x244>)
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 0320 	and.w	r3, r3, #32
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d010      	beq.n	8006ef8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	69da      	ldr	r2, [r3, #28]
 8006eda:	4b59      	ldr	r3, [pc, #356]	@ (8007040 <HAL_RCC_ClockConfig+0x244>)
 8006edc:	6a1b      	ldr	r3, [r3, #32]
 8006ede:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d908      	bls.n	8006ef8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006ee6:	4b56      	ldr	r3, [pc, #344]	@ (8007040 <HAL_RCC_ClockConfig+0x244>)
 8006ee8:	6a1b      	ldr	r3, [r3, #32]
 8006eea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	69db      	ldr	r3, [r3, #28]
 8006ef2:	4953      	ldr	r1, [pc, #332]	@ (8007040 <HAL_RCC_ClockConfig+0x244>)
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0302 	and.w	r3, r3, #2
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d010      	beq.n	8006f26 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	68da      	ldr	r2, [r3, #12]
 8006f08:	4b4d      	ldr	r3, [pc, #308]	@ (8007040 <HAL_RCC_ClockConfig+0x244>)
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	f003 030f 	and.w	r3, r3, #15
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d908      	bls.n	8006f26 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f14:	4b4a      	ldr	r3, [pc, #296]	@ (8007040 <HAL_RCC_ClockConfig+0x244>)
 8006f16:	699b      	ldr	r3, [r3, #24]
 8006f18:	f023 020f 	bic.w	r2, r3, #15
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	4947      	ldr	r1, [pc, #284]	@ (8007040 <HAL_RCC_ClockConfig+0x244>)
 8006f22:	4313      	orrs	r3, r2
 8006f24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 0301 	and.w	r3, r3, #1
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d055      	beq.n	8006fde <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006f32:	4b43      	ldr	r3, [pc, #268]	@ (8007040 <HAL_RCC_ClockConfig+0x244>)
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	4940      	ldr	r1, [pc, #256]	@ (8007040 <HAL_RCC_ClockConfig+0x244>)
 8006f40:	4313      	orrs	r3, r2
 8006f42:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d107      	bne.n	8006f5c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f4c:	4b3c      	ldr	r3, [pc, #240]	@ (8007040 <HAL_RCC_ClockConfig+0x244>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d121      	bne.n	8006f9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e0f6      	b.n	800714a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	2b03      	cmp	r3, #3
 8006f62:	d107      	bne.n	8006f74 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f64:	4b36      	ldr	r3, [pc, #216]	@ (8007040 <HAL_RCC_ClockConfig+0x244>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d115      	bne.n	8006f9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e0ea      	b.n	800714a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d107      	bne.n	8006f8c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006f7c:	4b30      	ldr	r3, [pc, #192]	@ (8007040 <HAL_RCC_ClockConfig+0x244>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d109      	bne.n	8006f9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e0de      	b.n	800714a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f8c:	4b2c      	ldr	r3, [pc, #176]	@ (8007040 <HAL_RCC_ClockConfig+0x244>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0304 	and.w	r3, r3, #4
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d101      	bne.n	8006f9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e0d6      	b.n	800714a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006f9c:	4b28      	ldr	r3, [pc, #160]	@ (8007040 <HAL_RCC_ClockConfig+0x244>)
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	f023 0207 	bic.w	r2, r3, #7
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	4925      	ldr	r1, [pc, #148]	@ (8007040 <HAL_RCC_ClockConfig+0x244>)
 8006faa:	4313      	orrs	r3, r2
 8006fac:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fae:	f7fb fb09 	bl	80025c4 <HAL_GetTick>
 8006fb2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fb4:	e00a      	b.n	8006fcc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fb6:	f7fb fb05 	bl	80025c4 <HAL_GetTick>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d901      	bls.n	8006fcc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e0be      	b.n	800714a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fcc:	4b1c      	ldr	r3, [pc, #112]	@ (8007040 <HAL_RCC_ClockConfig+0x244>)
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	00db      	lsls	r3, r3, #3
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d1eb      	bne.n	8006fb6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 0302 	and.w	r3, r3, #2
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d010      	beq.n	800700c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	68da      	ldr	r2, [r3, #12]
 8006fee:	4b14      	ldr	r3, [pc, #80]	@ (8007040 <HAL_RCC_ClockConfig+0x244>)
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	f003 030f 	and.w	r3, r3, #15
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d208      	bcs.n	800700c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ffa:	4b11      	ldr	r3, [pc, #68]	@ (8007040 <HAL_RCC_ClockConfig+0x244>)
 8006ffc:	699b      	ldr	r3, [r3, #24]
 8006ffe:	f023 020f 	bic.w	r2, r3, #15
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	490e      	ldr	r1, [pc, #56]	@ (8007040 <HAL_RCC_ClockConfig+0x244>)
 8007008:	4313      	orrs	r3, r2
 800700a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800700c:	4b0b      	ldr	r3, [pc, #44]	@ (800703c <HAL_RCC_ClockConfig+0x240>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 030f 	and.w	r3, r3, #15
 8007014:	683a      	ldr	r2, [r7, #0]
 8007016:	429a      	cmp	r2, r3
 8007018:	d214      	bcs.n	8007044 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800701a:	4b08      	ldr	r3, [pc, #32]	@ (800703c <HAL_RCC_ClockConfig+0x240>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f023 020f 	bic.w	r2, r3, #15
 8007022:	4906      	ldr	r1, [pc, #24]	@ (800703c <HAL_RCC_ClockConfig+0x240>)
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	4313      	orrs	r3, r2
 8007028:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800702a:	4b04      	ldr	r3, [pc, #16]	@ (800703c <HAL_RCC_ClockConfig+0x240>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 030f 	and.w	r3, r3, #15
 8007032:	683a      	ldr	r2, [r7, #0]
 8007034:	429a      	cmp	r2, r3
 8007036:	d005      	beq.n	8007044 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	e086      	b.n	800714a <HAL_RCC_ClockConfig+0x34e>
 800703c:	52002000 	.word	0x52002000
 8007040:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 0304 	and.w	r3, r3, #4
 800704c:	2b00      	cmp	r3, #0
 800704e:	d010      	beq.n	8007072 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	691a      	ldr	r2, [r3, #16]
 8007054:	4b3f      	ldr	r3, [pc, #252]	@ (8007154 <HAL_RCC_ClockConfig+0x358>)
 8007056:	699b      	ldr	r3, [r3, #24]
 8007058:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800705c:	429a      	cmp	r2, r3
 800705e:	d208      	bcs.n	8007072 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007060:	4b3c      	ldr	r3, [pc, #240]	@ (8007154 <HAL_RCC_ClockConfig+0x358>)
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	4939      	ldr	r1, [pc, #228]	@ (8007154 <HAL_RCC_ClockConfig+0x358>)
 800706e:	4313      	orrs	r3, r2
 8007070:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 0308 	and.w	r3, r3, #8
 800707a:	2b00      	cmp	r3, #0
 800707c:	d010      	beq.n	80070a0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	695a      	ldr	r2, [r3, #20]
 8007082:	4b34      	ldr	r3, [pc, #208]	@ (8007154 <HAL_RCC_ClockConfig+0x358>)
 8007084:	69db      	ldr	r3, [r3, #28]
 8007086:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800708a:	429a      	cmp	r2, r3
 800708c:	d208      	bcs.n	80070a0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800708e:	4b31      	ldr	r3, [pc, #196]	@ (8007154 <HAL_RCC_ClockConfig+0x358>)
 8007090:	69db      	ldr	r3, [r3, #28]
 8007092:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	695b      	ldr	r3, [r3, #20]
 800709a:	492e      	ldr	r1, [pc, #184]	@ (8007154 <HAL_RCC_ClockConfig+0x358>)
 800709c:	4313      	orrs	r3, r2
 800709e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 0310 	and.w	r3, r3, #16
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d010      	beq.n	80070ce <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	699a      	ldr	r2, [r3, #24]
 80070b0:	4b28      	ldr	r3, [pc, #160]	@ (8007154 <HAL_RCC_ClockConfig+0x358>)
 80070b2:	69db      	ldr	r3, [r3, #28]
 80070b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d208      	bcs.n	80070ce <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80070bc:	4b25      	ldr	r3, [pc, #148]	@ (8007154 <HAL_RCC_ClockConfig+0x358>)
 80070be:	69db      	ldr	r3, [r3, #28]
 80070c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	699b      	ldr	r3, [r3, #24]
 80070c8:	4922      	ldr	r1, [pc, #136]	@ (8007154 <HAL_RCC_ClockConfig+0x358>)
 80070ca:	4313      	orrs	r3, r2
 80070cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0320 	and.w	r3, r3, #32
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d010      	beq.n	80070fc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	69da      	ldr	r2, [r3, #28]
 80070de:	4b1d      	ldr	r3, [pc, #116]	@ (8007154 <HAL_RCC_ClockConfig+0x358>)
 80070e0:	6a1b      	ldr	r3, [r3, #32]
 80070e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d208      	bcs.n	80070fc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80070ea:	4b1a      	ldr	r3, [pc, #104]	@ (8007154 <HAL_RCC_ClockConfig+0x358>)
 80070ec:	6a1b      	ldr	r3, [r3, #32]
 80070ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	69db      	ldr	r3, [r3, #28]
 80070f6:	4917      	ldr	r1, [pc, #92]	@ (8007154 <HAL_RCC_ClockConfig+0x358>)
 80070f8:	4313      	orrs	r3, r2
 80070fa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80070fc:	f000 f834 	bl	8007168 <HAL_RCC_GetSysClockFreq>
 8007100:	4602      	mov	r2, r0
 8007102:	4b14      	ldr	r3, [pc, #80]	@ (8007154 <HAL_RCC_ClockConfig+0x358>)
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	0a1b      	lsrs	r3, r3, #8
 8007108:	f003 030f 	and.w	r3, r3, #15
 800710c:	4912      	ldr	r1, [pc, #72]	@ (8007158 <HAL_RCC_ClockConfig+0x35c>)
 800710e:	5ccb      	ldrb	r3, [r1, r3]
 8007110:	f003 031f 	and.w	r3, r3, #31
 8007114:	fa22 f303 	lsr.w	r3, r2, r3
 8007118:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800711a:	4b0e      	ldr	r3, [pc, #56]	@ (8007154 <HAL_RCC_ClockConfig+0x358>)
 800711c:	699b      	ldr	r3, [r3, #24]
 800711e:	f003 030f 	and.w	r3, r3, #15
 8007122:	4a0d      	ldr	r2, [pc, #52]	@ (8007158 <HAL_RCC_ClockConfig+0x35c>)
 8007124:	5cd3      	ldrb	r3, [r2, r3]
 8007126:	f003 031f 	and.w	r3, r3, #31
 800712a:	693a      	ldr	r2, [r7, #16]
 800712c:	fa22 f303 	lsr.w	r3, r2, r3
 8007130:	4a0a      	ldr	r2, [pc, #40]	@ (800715c <HAL_RCC_ClockConfig+0x360>)
 8007132:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007134:	4a0a      	ldr	r2, [pc, #40]	@ (8007160 <HAL_RCC_ClockConfig+0x364>)
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800713a:	4b0a      	ldr	r3, [pc, #40]	@ (8007164 <HAL_RCC_ClockConfig+0x368>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4618      	mov	r0, r3
 8007140:	f7fb f9f6 	bl	8002530 <HAL_InitTick>
 8007144:	4603      	mov	r3, r0
 8007146:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007148:	7bfb      	ldrb	r3, [r7, #15]
}
 800714a:	4618      	mov	r0, r3
 800714c:	3718      	adds	r7, #24
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	58024400 	.word	0x58024400
 8007158:	08012750 	.word	0x08012750
 800715c:	24000004 	.word	0x24000004
 8007160:	24000000 	.word	0x24000000
 8007164:	24000030 	.word	0x24000030

08007168 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007168:	b480      	push	{r7}
 800716a:	b089      	sub	sp, #36	@ 0x24
 800716c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800716e:	4bb3      	ldr	r3, [pc, #716]	@ (800743c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007176:	2b18      	cmp	r3, #24
 8007178:	f200 8155 	bhi.w	8007426 <HAL_RCC_GetSysClockFreq+0x2be>
 800717c:	a201      	add	r2, pc, #4	@ (adr r2, 8007184 <HAL_RCC_GetSysClockFreq+0x1c>)
 800717e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007182:	bf00      	nop
 8007184:	080071e9 	.word	0x080071e9
 8007188:	08007427 	.word	0x08007427
 800718c:	08007427 	.word	0x08007427
 8007190:	08007427 	.word	0x08007427
 8007194:	08007427 	.word	0x08007427
 8007198:	08007427 	.word	0x08007427
 800719c:	08007427 	.word	0x08007427
 80071a0:	08007427 	.word	0x08007427
 80071a4:	0800720f 	.word	0x0800720f
 80071a8:	08007427 	.word	0x08007427
 80071ac:	08007427 	.word	0x08007427
 80071b0:	08007427 	.word	0x08007427
 80071b4:	08007427 	.word	0x08007427
 80071b8:	08007427 	.word	0x08007427
 80071bc:	08007427 	.word	0x08007427
 80071c0:	08007427 	.word	0x08007427
 80071c4:	08007215 	.word	0x08007215
 80071c8:	08007427 	.word	0x08007427
 80071cc:	08007427 	.word	0x08007427
 80071d0:	08007427 	.word	0x08007427
 80071d4:	08007427 	.word	0x08007427
 80071d8:	08007427 	.word	0x08007427
 80071dc:	08007427 	.word	0x08007427
 80071e0:	08007427 	.word	0x08007427
 80071e4:	0800721b 	.word	0x0800721b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071e8:	4b94      	ldr	r3, [pc, #592]	@ (800743c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 0320 	and.w	r3, r3, #32
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d009      	beq.n	8007208 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071f4:	4b91      	ldr	r3, [pc, #580]	@ (800743c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	08db      	lsrs	r3, r3, #3
 80071fa:	f003 0303 	and.w	r3, r3, #3
 80071fe:	4a90      	ldr	r2, [pc, #576]	@ (8007440 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007200:	fa22 f303 	lsr.w	r3, r2, r3
 8007204:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007206:	e111      	b.n	800742c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007208:	4b8d      	ldr	r3, [pc, #564]	@ (8007440 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800720a:	61bb      	str	r3, [r7, #24]
      break;
 800720c:	e10e      	b.n	800742c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800720e:	4b8d      	ldr	r3, [pc, #564]	@ (8007444 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007210:	61bb      	str	r3, [r7, #24]
      break;
 8007212:	e10b      	b.n	800742c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007214:	4b8c      	ldr	r3, [pc, #560]	@ (8007448 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007216:	61bb      	str	r3, [r7, #24]
      break;
 8007218:	e108      	b.n	800742c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800721a:	4b88      	ldr	r3, [pc, #544]	@ (800743c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800721c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800721e:	f003 0303 	and.w	r3, r3, #3
 8007222:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007224:	4b85      	ldr	r3, [pc, #532]	@ (800743c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007228:	091b      	lsrs	r3, r3, #4
 800722a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800722e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007230:	4b82      	ldr	r3, [pc, #520]	@ (800743c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007234:	f003 0301 	and.w	r3, r3, #1
 8007238:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800723a:	4b80      	ldr	r3, [pc, #512]	@ (800743c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800723c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800723e:	08db      	lsrs	r3, r3, #3
 8007240:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	fb02 f303 	mul.w	r3, r2, r3
 800724a:	ee07 3a90 	vmov	s15, r3
 800724e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007252:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	2b00      	cmp	r3, #0
 800725a:	f000 80e1 	beq.w	8007420 <HAL_RCC_GetSysClockFreq+0x2b8>
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	2b02      	cmp	r3, #2
 8007262:	f000 8083 	beq.w	800736c <HAL_RCC_GetSysClockFreq+0x204>
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	2b02      	cmp	r3, #2
 800726a:	f200 80a1 	bhi.w	80073b0 <HAL_RCC_GetSysClockFreq+0x248>
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d003      	beq.n	800727c <HAL_RCC_GetSysClockFreq+0x114>
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	2b01      	cmp	r3, #1
 8007278:	d056      	beq.n	8007328 <HAL_RCC_GetSysClockFreq+0x1c0>
 800727a:	e099      	b.n	80073b0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800727c:	4b6f      	ldr	r3, [pc, #444]	@ (800743c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 0320 	and.w	r3, r3, #32
 8007284:	2b00      	cmp	r3, #0
 8007286:	d02d      	beq.n	80072e4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007288:	4b6c      	ldr	r3, [pc, #432]	@ (800743c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	08db      	lsrs	r3, r3, #3
 800728e:	f003 0303 	and.w	r3, r3, #3
 8007292:	4a6b      	ldr	r2, [pc, #428]	@ (8007440 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007294:	fa22 f303 	lsr.w	r3, r2, r3
 8007298:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	ee07 3a90 	vmov	s15, r3
 80072a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	ee07 3a90 	vmov	s15, r3
 80072aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072b2:	4b62      	ldr	r3, [pc, #392]	@ (800743c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ba:	ee07 3a90 	vmov	s15, r3
 80072be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80072c6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800744c <HAL_RCC_GetSysClockFreq+0x2e4>
 80072ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072de:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80072e2:	e087      	b.n	80073f4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	ee07 3a90 	vmov	s15, r3
 80072ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ee:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007450 <HAL_RCC_GetSysClockFreq+0x2e8>
 80072f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072f6:	4b51      	ldr	r3, [pc, #324]	@ (800743c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072fe:	ee07 3a90 	vmov	s15, r3
 8007302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007306:	ed97 6a02 	vldr	s12, [r7, #8]
 800730a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800744c <HAL_RCC_GetSysClockFreq+0x2e4>
 800730e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007316:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800731a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800731e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007322:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007326:	e065      	b.n	80073f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	ee07 3a90 	vmov	s15, r3
 800732e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007332:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007454 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800733a:	4b40      	ldr	r3, [pc, #256]	@ (800743c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800733c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800733e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007342:	ee07 3a90 	vmov	s15, r3
 8007346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800734a:	ed97 6a02 	vldr	s12, [r7, #8]
 800734e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800744c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800735a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800735e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007366:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800736a:	e043      	b.n	80073f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	ee07 3a90 	vmov	s15, r3
 8007372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007376:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007458 <HAL_RCC_GetSysClockFreq+0x2f0>
 800737a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800737e:	4b2f      	ldr	r3, [pc, #188]	@ (800743c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007386:	ee07 3a90 	vmov	s15, r3
 800738a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800738e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007392:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800744c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800739a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800739e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80073ae:	e021      	b.n	80073f4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	ee07 3a90 	vmov	s15, r3
 80073b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ba:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007454 <HAL_RCC_GetSysClockFreq+0x2ec>
 80073be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073c2:	4b1e      	ldr	r3, [pc, #120]	@ (800743c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ca:	ee07 3a90 	vmov	s15, r3
 80073ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80073d6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800744c <HAL_RCC_GetSysClockFreq+0x2e4>
 80073da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80073f2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80073f4:	4b11      	ldr	r3, [pc, #68]	@ (800743c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073f8:	0a5b      	lsrs	r3, r3, #9
 80073fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073fe:	3301      	adds	r3, #1
 8007400:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	ee07 3a90 	vmov	s15, r3
 8007408:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800740c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007410:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007414:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007418:	ee17 3a90 	vmov	r3, s15
 800741c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800741e:	e005      	b.n	800742c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007420:	2300      	movs	r3, #0
 8007422:	61bb      	str	r3, [r7, #24]
      break;
 8007424:	e002      	b.n	800742c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007426:	4b07      	ldr	r3, [pc, #28]	@ (8007444 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007428:	61bb      	str	r3, [r7, #24]
      break;
 800742a:	bf00      	nop
  }

  return sysclockfreq;
 800742c:	69bb      	ldr	r3, [r7, #24]
}
 800742e:	4618      	mov	r0, r3
 8007430:	3724      	adds	r7, #36	@ 0x24
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	58024400 	.word	0x58024400
 8007440:	03d09000 	.word	0x03d09000
 8007444:	003d0900 	.word	0x003d0900
 8007448:	017d7840 	.word	0x017d7840
 800744c:	46000000 	.word	0x46000000
 8007450:	4c742400 	.word	0x4c742400
 8007454:	4a742400 	.word	0x4a742400
 8007458:	4bbebc20 	.word	0x4bbebc20

0800745c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007462:	f7ff fe81 	bl	8007168 <HAL_RCC_GetSysClockFreq>
 8007466:	4602      	mov	r2, r0
 8007468:	4b10      	ldr	r3, [pc, #64]	@ (80074ac <HAL_RCC_GetHCLKFreq+0x50>)
 800746a:	699b      	ldr	r3, [r3, #24]
 800746c:	0a1b      	lsrs	r3, r3, #8
 800746e:	f003 030f 	and.w	r3, r3, #15
 8007472:	490f      	ldr	r1, [pc, #60]	@ (80074b0 <HAL_RCC_GetHCLKFreq+0x54>)
 8007474:	5ccb      	ldrb	r3, [r1, r3]
 8007476:	f003 031f 	and.w	r3, r3, #31
 800747a:	fa22 f303 	lsr.w	r3, r2, r3
 800747e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007480:	4b0a      	ldr	r3, [pc, #40]	@ (80074ac <HAL_RCC_GetHCLKFreq+0x50>)
 8007482:	699b      	ldr	r3, [r3, #24]
 8007484:	f003 030f 	and.w	r3, r3, #15
 8007488:	4a09      	ldr	r2, [pc, #36]	@ (80074b0 <HAL_RCC_GetHCLKFreq+0x54>)
 800748a:	5cd3      	ldrb	r3, [r2, r3]
 800748c:	f003 031f 	and.w	r3, r3, #31
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	fa22 f303 	lsr.w	r3, r2, r3
 8007496:	4a07      	ldr	r2, [pc, #28]	@ (80074b4 <HAL_RCC_GetHCLKFreq+0x58>)
 8007498:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800749a:	4a07      	ldr	r2, [pc, #28]	@ (80074b8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80074a0:	4b04      	ldr	r3, [pc, #16]	@ (80074b4 <HAL_RCC_GetHCLKFreq+0x58>)
 80074a2:	681b      	ldr	r3, [r3, #0]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3708      	adds	r7, #8
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	58024400 	.word	0x58024400
 80074b0:	08012750 	.word	0x08012750
 80074b4:	24000004 	.word	0x24000004
 80074b8:	24000000 	.word	0x24000000

080074bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80074c0:	f7ff ffcc 	bl	800745c <HAL_RCC_GetHCLKFreq>
 80074c4:	4602      	mov	r2, r0
 80074c6:	4b06      	ldr	r3, [pc, #24]	@ (80074e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80074c8:	69db      	ldr	r3, [r3, #28]
 80074ca:	091b      	lsrs	r3, r3, #4
 80074cc:	f003 0307 	and.w	r3, r3, #7
 80074d0:	4904      	ldr	r1, [pc, #16]	@ (80074e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80074d2:	5ccb      	ldrb	r3, [r1, r3]
 80074d4:	f003 031f 	and.w	r3, r3, #31
 80074d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80074dc:	4618      	mov	r0, r3
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	58024400 	.word	0x58024400
 80074e4:	08012750 	.word	0x08012750

080074e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80074ec:	f7ff ffb6 	bl	800745c <HAL_RCC_GetHCLKFreq>
 80074f0:	4602      	mov	r2, r0
 80074f2:	4b06      	ldr	r3, [pc, #24]	@ (800750c <HAL_RCC_GetPCLK2Freq+0x24>)
 80074f4:	69db      	ldr	r3, [r3, #28]
 80074f6:	0a1b      	lsrs	r3, r3, #8
 80074f8:	f003 0307 	and.w	r3, r3, #7
 80074fc:	4904      	ldr	r1, [pc, #16]	@ (8007510 <HAL_RCC_GetPCLK2Freq+0x28>)
 80074fe:	5ccb      	ldrb	r3, [r1, r3]
 8007500:	f003 031f 	and.w	r3, r3, #31
 8007504:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007508:	4618      	mov	r0, r3
 800750a:	bd80      	pop	{r7, pc}
 800750c:	58024400 	.word	0x58024400
 8007510:	08012750 	.word	0x08012750

08007514 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007518:	b0ca      	sub	sp, #296	@ 0x128
 800751a:	af00      	add	r7, sp, #0
 800751c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007520:	2300      	movs	r3, #0
 8007522:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007526:	2300      	movs	r3, #0
 8007528:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800752c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007534:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007538:	2500      	movs	r5, #0
 800753a:	ea54 0305 	orrs.w	r3, r4, r5
 800753e:	d049      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007544:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007546:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800754a:	d02f      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x98>
 800754c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007550:	d828      	bhi.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007552:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007556:	d01a      	beq.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007558:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800755c:	d822      	bhi.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800755e:	2b00      	cmp	r3, #0
 8007560:	d003      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007562:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007566:	d007      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007568:	e01c      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800756a:	4bb8      	ldr	r3, [pc, #736]	@ (800784c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800756c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800756e:	4ab7      	ldr	r2, [pc, #732]	@ (800784c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007570:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007574:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007576:	e01a      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800757c:	3308      	adds	r3, #8
 800757e:	2102      	movs	r1, #2
 8007580:	4618      	mov	r0, r3
 8007582:	f001 fc8f 	bl	8008ea4 <RCCEx_PLL2_Config>
 8007586:	4603      	mov	r3, r0
 8007588:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800758c:	e00f      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800758e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007592:	3328      	adds	r3, #40	@ 0x28
 8007594:	2102      	movs	r1, #2
 8007596:	4618      	mov	r0, r3
 8007598:	f001 fd36 	bl	8009008 <RCCEx_PLL3_Config>
 800759c:	4603      	mov	r3, r0
 800759e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80075a2:	e004      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075aa:	e000      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80075ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d10a      	bne.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80075b6:	4ba5      	ldr	r3, [pc, #660]	@ (800784c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075ba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80075be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80075c4:	4aa1      	ldr	r2, [pc, #644]	@ (800784c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075c6:	430b      	orrs	r3, r1
 80075c8:	6513      	str	r3, [r2, #80]	@ 0x50
 80075ca:	e003      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80075d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075dc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80075e0:	f04f 0900 	mov.w	r9, #0
 80075e4:	ea58 0309 	orrs.w	r3, r8, r9
 80075e8:	d047      	beq.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80075ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075f0:	2b04      	cmp	r3, #4
 80075f2:	d82a      	bhi.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80075f4:	a201      	add	r2, pc, #4	@ (adr r2, 80075fc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80075f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075fa:	bf00      	nop
 80075fc:	08007611 	.word	0x08007611
 8007600:	0800761f 	.word	0x0800761f
 8007604:	08007635 	.word	0x08007635
 8007608:	08007653 	.word	0x08007653
 800760c:	08007653 	.word	0x08007653
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007610:	4b8e      	ldr	r3, [pc, #568]	@ (800784c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007614:	4a8d      	ldr	r2, [pc, #564]	@ (800784c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007616:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800761a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800761c:	e01a      	b.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800761e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007622:	3308      	adds	r3, #8
 8007624:	2100      	movs	r1, #0
 8007626:	4618      	mov	r0, r3
 8007628:	f001 fc3c 	bl	8008ea4 <RCCEx_PLL2_Config>
 800762c:	4603      	mov	r3, r0
 800762e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007632:	e00f      	b.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007638:	3328      	adds	r3, #40	@ 0x28
 800763a:	2100      	movs	r1, #0
 800763c:	4618      	mov	r0, r3
 800763e:	f001 fce3 	bl	8009008 <RCCEx_PLL3_Config>
 8007642:	4603      	mov	r3, r0
 8007644:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007648:	e004      	b.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007650:	e000      	b.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007652:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007654:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007658:	2b00      	cmp	r3, #0
 800765a:	d10a      	bne.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800765c:	4b7b      	ldr	r3, [pc, #492]	@ (800784c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800765e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007660:	f023 0107 	bic.w	r1, r3, #7
 8007664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800766a:	4a78      	ldr	r2, [pc, #480]	@ (800784c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800766c:	430b      	orrs	r3, r1
 800766e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007670:	e003      	b.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007672:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007676:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800767a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800767e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007682:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007686:	f04f 0b00 	mov.w	fp, #0
 800768a:	ea5a 030b 	orrs.w	r3, sl, fp
 800768e:	d04c      	beq.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007696:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800769a:	d030      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800769c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076a0:	d829      	bhi.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80076a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80076a4:	d02d      	beq.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80076a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80076a8:	d825      	bhi.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80076aa:	2b80      	cmp	r3, #128	@ 0x80
 80076ac:	d018      	beq.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80076ae:	2b80      	cmp	r3, #128	@ 0x80
 80076b0:	d821      	bhi.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d002      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80076b6:	2b40      	cmp	r3, #64	@ 0x40
 80076b8:	d007      	beq.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80076ba:	e01c      	b.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076bc:	4b63      	ldr	r3, [pc, #396]	@ (800784c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80076be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c0:	4a62      	ldr	r2, [pc, #392]	@ (800784c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80076c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80076c8:	e01c      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ce:	3308      	adds	r3, #8
 80076d0:	2100      	movs	r1, #0
 80076d2:	4618      	mov	r0, r3
 80076d4:	f001 fbe6 	bl	8008ea4 <RCCEx_PLL2_Config>
 80076d8:	4603      	mov	r3, r0
 80076da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80076de:	e011      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80076e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076e4:	3328      	adds	r3, #40	@ 0x28
 80076e6:	2100      	movs	r1, #0
 80076e8:	4618      	mov	r0, r3
 80076ea:	f001 fc8d 	bl	8009008 <RCCEx_PLL3_Config>
 80076ee:	4603      	mov	r3, r0
 80076f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80076f4:	e006      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076fc:	e002      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80076fe:	bf00      	nop
 8007700:	e000      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007702:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007704:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007708:	2b00      	cmp	r3, #0
 800770a:	d10a      	bne.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800770c:	4b4f      	ldr	r3, [pc, #316]	@ (800784c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800770e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007710:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007718:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800771a:	4a4c      	ldr	r2, [pc, #304]	@ (800784c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800771c:	430b      	orrs	r3, r1
 800771e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007720:	e003      	b.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007722:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007726:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800772a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800772e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007732:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007736:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800773a:	2300      	movs	r3, #0
 800773c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007740:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007744:	460b      	mov	r3, r1
 8007746:	4313      	orrs	r3, r2
 8007748:	d053      	beq.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800774a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800774e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007752:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007756:	d035      	beq.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007758:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800775c:	d82e      	bhi.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800775e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007762:	d031      	beq.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007764:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007768:	d828      	bhi.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800776a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800776e:	d01a      	beq.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007770:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007774:	d822      	bhi.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007776:	2b00      	cmp	r3, #0
 8007778:	d003      	beq.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800777a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800777e:	d007      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007780:	e01c      	b.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007782:	4b32      	ldr	r3, [pc, #200]	@ (800784c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007786:	4a31      	ldr	r2, [pc, #196]	@ (800784c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007788:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800778c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800778e:	e01c      	b.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007794:	3308      	adds	r3, #8
 8007796:	2100      	movs	r1, #0
 8007798:	4618      	mov	r0, r3
 800779a:	f001 fb83 	bl	8008ea4 <RCCEx_PLL2_Config>
 800779e:	4603      	mov	r3, r0
 80077a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80077a4:	e011      	b.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80077a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077aa:	3328      	adds	r3, #40	@ 0x28
 80077ac:	2100      	movs	r1, #0
 80077ae:	4618      	mov	r0, r3
 80077b0:	f001 fc2a 	bl	8009008 <RCCEx_PLL3_Config>
 80077b4:	4603      	mov	r3, r0
 80077b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80077ba:	e006      	b.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077c2:	e002      	b.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80077c4:	bf00      	nop
 80077c6:	e000      	b.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80077c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10b      	bne.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80077d2:	4b1e      	ldr	r3, [pc, #120]	@ (800784c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077d6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80077da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80077e2:	4a1a      	ldr	r2, [pc, #104]	@ (800784c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077e4:	430b      	orrs	r3, r1
 80077e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80077e8:	e003      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80077f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fa:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80077fe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007802:	2300      	movs	r3, #0
 8007804:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007808:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800780c:	460b      	mov	r3, r1
 800780e:	4313      	orrs	r3, r2
 8007810:	d056      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007816:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800781a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800781e:	d038      	beq.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007820:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007824:	d831      	bhi.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007826:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800782a:	d034      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800782c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007830:	d82b      	bhi.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007832:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007836:	d01d      	beq.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007838:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800783c:	d825      	bhi.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800783e:	2b00      	cmp	r3, #0
 8007840:	d006      	beq.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007842:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007846:	d00a      	beq.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007848:	e01f      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800784a:	bf00      	nop
 800784c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007850:	4ba2      	ldr	r3, [pc, #648]	@ (8007adc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007854:	4aa1      	ldr	r2, [pc, #644]	@ (8007adc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007856:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800785a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800785c:	e01c      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800785e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007862:	3308      	adds	r3, #8
 8007864:	2100      	movs	r1, #0
 8007866:	4618      	mov	r0, r3
 8007868:	f001 fb1c 	bl	8008ea4 <RCCEx_PLL2_Config>
 800786c:	4603      	mov	r3, r0
 800786e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007872:	e011      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007878:	3328      	adds	r3, #40	@ 0x28
 800787a:	2100      	movs	r1, #0
 800787c:	4618      	mov	r0, r3
 800787e:	f001 fbc3 	bl	8009008 <RCCEx_PLL3_Config>
 8007882:	4603      	mov	r3, r0
 8007884:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007888:	e006      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007890:	e002      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007892:	bf00      	nop
 8007894:	e000      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007896:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007898:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800789c:	2b00      	cmp	r3, #0
 800789e:	d10b      	bne.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80078a0:	4b8e      	ldr	r3, [pc, #568]	@ (8007adc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078a4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80078a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80078b0:	4a8a      	ldr	r2, [pc, #552]	@ (8007adc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078b2:	430b      	orrs	r3, r1
 80078b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80078b6:	e003      	b.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80078c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80078cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80078d0:	2300      	movs	r3, #0
 80078d2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80078d6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80078da:	460b      	mov	r3, r1
 80078dc:	4313      	orrs	r3, r2
 80078de:	d03a      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80078e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078e6:	2b30      	cmp	r3, #48	@ 0x30
 80078e8:	d01f      	beq.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80078ea:	2b30      	cmp	r3, #48	@ 0x30
 80078ec:	d819      	bhi.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80078ee:	2b20      	cmp	r3, #32
 80078f0:	d00c      	beq.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80078f2:	2b20      	cmp	r3, #32
 80078f4:	d815      	bhi.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d019      	beq.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80078fa:	2b10      	cmp	r3, #16
 80078fc:	d111      	bne.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078fe:	4b77      	ldr	r3, [pc, #476]	@ (8007adc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007902:	4a76      	ldr	r2, [pc, #472]	@ (8007adc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007904:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007908:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800790a:	e011      	b.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800790c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007910:	3308      	adds	r3, #8
 8007912:	2102      	movs	r1, #2
 8007914:	4618      	mov	r0, r3
 8007916:	f001 fac5 	bl	8008ea4 <RCCEx_PLL2_Config>
 800791a:	4603      	mov	r3, r0
 800791c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007920:	e006      	b.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007928:	e002      	b.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800792a:	bf00      	nop
 800792c:	e000      	b.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800792e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007930:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007934:	2b00      	cmp	r3, #0
 8007936:	d10a      	bne.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007938:	4b68      	ldr	r3, [pc, #416]	@ (8007adc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800793a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800793c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007946:	4a65      	ldr	r2, [pc, #404]	@ (8007adc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007948:	430b      	orrs	r3, r1
 800794a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800794c:	e003      	b.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800794e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007952:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800795a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007962:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007966:	2300      	movs	r3, #0
 8007968:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800796c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007970:	460b      	mov	r3, r1
 8007972:	4313      	orrs	r3, r2
 8007974:	d051      	beq.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800797a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800797c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007980:	d035      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007982:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007986:	d82e      	bhi.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007988:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800798c:	d031      	beq.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800798e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007992:	d828      	bhi.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007994:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007998:	d01a      	beq.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800799a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800799e:	d822      	bhi.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d003      	beq.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x498>
 80079a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079a8:	d007      	beq.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80079aa:	e01c      	b.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079ac:	4b4b      	ldr	r3, [pc, #300]	@ (8007adc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80079ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b0:	4a4a      	ldr	r2, [pc, #296]	@ (8007adc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80079b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80079b8:	e01c      	b.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079be:	3308      	adds	r3, #8
 80079c0:	2100      	movs	r1, #0
 80079c2:	4618      	mov	r0, r3
 80079c4:	f001 fa6e 	bl	8008ea4 <RCCEx_PLL2_Config>
 80079c8:	4603      	mov	r3, r0
 80079ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80079ce:	e011      	b.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80079d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079d4:	3328      	adds	r3, #40	@ 0x28
 80079d6:	2100      	movs	r1, #0
 80079d8:	4618      	mov	r0, r3
 80079da:	f001 fb15 	bl	8009008 <RCCEx_PLL3_Config>
 80079de:	4603      	mov	r3, r0
 80079e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80079e4:	e006      	b.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079ec:	e002      	b.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80079ee:	bf00      	nop
 80079f0:	e000      	b.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80079f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d10a      	bne.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80079fc:	4b37      	ldr	r3, [pc, #220]	@ (8007adc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80079fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a00:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a0a:	4a34      	ldr	r2, [pc, #208]	@ (8007adc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a0c:	430b      	orrs	r3, r1
 8007a0e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a10:	e003      	b.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a22:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007a26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007a30:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007a34:	460b      	mov	r3, r1
 8007a36:	4313      	orrs	r3, r2
 8007a38:	d056      	beq.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a44:	d033      	beq.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007a46:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a4a:	d82c      	bhi.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007a4c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a50:	d02f      	beq.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007a52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a56:	d826      	bhi.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007a58:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a5c:	d02b      	beq.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007a5e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a62:	d820      	bhi.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007a64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a68:	d012      	beq.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007a6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a6e:	d81a      	bhi.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d022      	beq.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007a74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a78:	d115      	bne.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a7e:	3308      	adds	r3, #8
 8007a80:	2101      	movs	r1, #1
 8007a82:	4618      	mov	r0, r3
 8007a84:	f001 fa0e 	bl	8008ea4 <RCCEx_PLL2_Config>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007a8e:	e015      	b.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a94:	3328      	adds	r3, #40	@ 0x28
 8007a96:	2101      	movs	r1, #1
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f001 fab5 	bl	8009008 <RCCEx_PLL3_Config>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007aa4:	e00a      	b.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007aac:	e006      	b.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007aae:	bf00      	nop
 8007ab0:	e004      	b.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007ab2:	bf00      	nop
 8007ab4:	e002      	b.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007ab6:	bf00      	nop
 8007ab8:	e000      	b.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007aba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007abc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d10d      	bne.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007ac4:	4b05      	ldr	r3, [pc, #20]	@ (8007adc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ac8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ad0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ad2:	4a02      	ldr	r2, [pc, #8]	@ (8007adc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ad4:	430b      	orrs	r3, r1
 8007ad6:	6513      	str	r3, [r2, #80]	@ 0x50
 8007ad8:	e006      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007ada:	bf00      	nop
 8007adc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ae0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ae4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007af4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007af8:	2300      	movs	r3, #0
 8007afa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007afe:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007b02:	460b      	mov	r3, r1
 8007b04:	4313      	orrs	r3, r2
 8007b06:	d055      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007b10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b14:	d033      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007b16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b1a:	d82c      	bhi.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b20:	d02f      	beq.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007b22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b26:	d826      	bhi.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007b28:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007b2c:	d02b      	beq.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007b2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007b32:	d820      	bhi.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007b34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b38:	d012      	beq.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007b3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b3e:	d81a      	bhi.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d022      	beq.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007b44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b48:	d115      	bne.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b4e:	3308      	adds	r3, #8
 8007b50:	2101      	movs	r1, #1
 8007b52:	4618      	mov	r0, r3
 8007b54:	f001 f9a6 	bl	8008ea4 <RCCEx_PLL2_Config>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007b5e:	e015      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b64:	3328      	adds	r3, #40	@ 0x28
 8007b66:	2101      	movs	r1, #1
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f001 fa4d 	bl	8009008 <RCCEx_PLL3_Config>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007b74:	e00a      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b7c:	e006      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007b7e:	bf00      	nop
 8007b80:	e004      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007b82:	bf00      	nop
 8007b84:	e002      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007b86:	bf00      	nop
 8007b88:	e000      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007b8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10b      	bne.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007b94:	4ba3      	ldr	r3, [pc, #652]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b98:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ba0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007ba4:	4a9f      	ldr	r2, [pc, #636]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ba6:	430b      	orrs	r3, r1
 8007ba8:	6593      	str	r3, [r2, #88]	@ 0x58
 8007baa:	e003      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bbc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007bc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007bca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007bce:	460b      	mov	r3, r1
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	d037      	beq.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bde:	d00e      	beq.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007be0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007be4:	d816      	bhi.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d018      	beq.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007bea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007bee:	d111      	bne.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bf0:	4b8c      	ldr	r3, [pc, #560]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bf4:	4a8b      	ldr	r2, [pc, #556]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007bfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007bfc:	e00f      	b.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c02:	3308      	adds	r3, #8
 8007c04:	2101      	movs	r1, #1
 8007c06:	4618      	mov	r0, r3
 8007c08:	f001 f94c 	bl	8008ea4 <RCCEx_PLL2_Config>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007c12:	e004      	b.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c1a:	e000      	b.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007c1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d10a      	bne.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007c26:	4b7f      	ldr	r3, [pc, #508]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c2a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c34:	4a7b      	ldr	r2, [pc, #492]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c36:	430b      	orrs	r3, r1
 8007c38:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c3a:	e003      	b.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007c50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007c54:	2300      	movs	r3, #0
 8007c56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007c5a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007c5e:	460b      	mov	r3, r1
 8007c60:	4313      	orrs	r3, r2
 8007c62:	d039      	beq.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c6a:	2b03      	cmp	r3, #3
 8007c6c:	d81c      	bhi.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c74 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c74:	08007cb1 	.word	0x08007cb1
 8007c78:	08007c85 	.word	0x08007c85
 8007c7c:	08007c93 	.word	0x08007c93
 8007c80:	08007cb1 	.word	0x08007cb1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c84:	4b67      	ldr	r3, [pc, #412]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c88:	4a66      	ldr	r2, [pc, #408]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007c90:	e00f      	b.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c96:	3308      	adds	r3, #8
 8007c98:	2102      	movs	r1, #2
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f001 f902 	bl	8008ea4 <RCCEx_PLL2_Config>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007ca6:	e004      	b.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007cae:	e000      	b.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007cb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d10a      	bne.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007cba:	4b5a      	ldr	r3, [pc, #360]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cbe:	f023 0103 	bic.w	r1, r3, #3
 8007cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cc8:	4a56      	ldr	r2, [pc, #344]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cca:	430b      	orrs	r3, r1
 8007ccc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007cce:	e003      	b.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007ce4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ce8:	2300      	movs	r3, #0
 8007cea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007cee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	f000 809f 	beq.w	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007cfa:	4b4b      	ldr	r3, [pc, #300]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a4a      	ldr	r2, [pc, #296]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007d00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007d06:	f7fa fc5d 	bl	80025c4 <HAL_GetTick>
 8007d0a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d0e:	e00b      	b.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d10:	f7fa fc58 	bl	80025c4 <HAL_GetTick>
 8007d14:	4602      	mov	r2, r0
 8007d16:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007d1a:	1ad3      	subs	r3, r2, r3
 8007d1c:	2b64      	cmp	r3, #100	@ 0x64
 8007d1e:	d903      	bls.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007d20:	2303      	movs	r3, #3
 8007d22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d26:	e005      	b.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d28:	4b3f      	ldr	r3, [pc, #252]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d0ed      	beq.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007d34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d179      	bne.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007d3c:	4b39      	ldr	r3, [pc, #228]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d3e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007d48:	4053      	eors	r3, r2
 8007d4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d015      	beq.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d52:	4b34      	ldr	r3, [pc, #208]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d5a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007d5e:	4b31      	ldr	r3, [pc, #196]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d62:	4a30      	ldr	r2, [pc, #192]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d68:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d6a:	4b2e      	ldr	r3, [pc, #184]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d6e:	4a2d      	ldr	r2, [pc, #180]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d74:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007d76:	4a2b      	ldr	r2, [pc, #172]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007d7c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007d86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d8a:	d118      	bne.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d8c:	f7fa fc1a 	bl	80025c4 <HAL_GetTick>
 8007d90:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d94:	e00d      	b.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d96:	f7fa fc15 	bl	80025c4 <HAL_GetTick>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007da0:	1ad2      	subs	r2, r2, r3
 8007da2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d903      	bls.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007daa:	2303      	movs	r3, #3
 8007dac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007db0:	e005      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007db2:	4b1c      	ldr	r3, [pc, #112]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007db6:	f003 0302 	and.w	r3, r3, #2
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d0eb      	beq.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007dbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d129      	bne.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007dce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007dd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007dd6:	d10e      	bne.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007dd8:	4b12      	ldr	r3, [pc, #72]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007dda:	691b      	ldr	r3, [r3, #16]
 8007ddc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007de4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007de8:	091a      	lsrs	r2, r3, #4
 8007dea:	4b10      	ldr	r3, [pc, #64]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007dec:	4013      	ands	r3, r2
 8007dee:	4a0d      	ldr	r2, [pc, #52]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007df0:	430b      	orrs	r3, r1
 8007df2:	6113      	str	r3, [r2, #16]
 8007df4:	e005      	b.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007df6:	4b0b      	ldr	r3, [pc, #44]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007df8:	691b      	ldr	r3, [r3, #16]
 8007dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007dfc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007e00:	6113      	str	r3, [r2, #16]
 8007e02:	4b08      	ldr	r3, [pc, #32]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e04:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007e0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e12:	4a04      	ldr	r2, [pc, #16]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e14:	430b      	orrs	r3, r1
 8007e16:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e18:	e00e      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007e22:	e009      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007e24:	58024400 	.word	0x58024400
 8007e28:	58024800 	.word	0x58024800
 8007e2c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e40:	f002 0301 	and.w	r3, r2, #1
 8007e44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e48:	2300      	movs	r3, #0
 8007e4a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007e4e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007e52:	460b      	mov	r3, r1
 8007e54:	4313      	orrs	r3, r2
 8007e56:	f000 8089 	beq.w	8007f6c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e60:	2b28      	cmp	r3, #40	@ 0x28
 8007e62:	d86b      	bhi.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007e64:	a201      	add	r2, pc, #4	@ (adr r2, 8007e6c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e6a:	bf00      	nop
 8007e6c:	08007f45 	.word	0x08007f45
 8007e70:	08007f3d 	.word	0x08007f3d
 8007e74:	08007f3d 	.word	0x08007f3d
 8007e78:	08007f3d 	.word	0x08007f3d
 8007e7c:	08007f3d 	.word	0x08007f3d
 8007e80:	08007f3d 	.word	0x08007f3d
 8007e84:	08007f3d 	.word	0x08007f3d
 8007e88:	08007f3d 	.word	0x08007f3d
 8007e8c:	08007f11 	.word	0x08007f11
 8007e90:	08007f3d 	.word	0x08007f3d
 8007e94:	08007f3d 	.word	0x08007f3d
 8007e98:	08007f3d 	.word	0x08007f3d
 8007e9c:	08007f3d 	.word	0x08007f3d
 8007ea0:	08007f3d 	.word	0x08007f3d
 8007ea4:	08007f3d 	.word	0x08007f3d
 8007ea8:	08007f3d 	.word	0x08007f3d
 8007eac:	08007f27 	.word	0x08007f27
 8007eb0:	08007f3d 	.word	0x08007f3d
 8007eb4:	08007f3d 	.word	0x08007f3d
 8007eb8:	08007f3d 	.word	0x08007f3d
 8007ebc:	08007f3d 	.word	0x08007f3d
 8007ec0:	08007f3d 	.word	0x08007f3d
 8007ec4:	08007f3d 	.word	0x08007f3d
 8007ec8:	08007f3d 	.word	0x08007f3d
 8007ecc:	08007f45 	.word	0x08007f45
 8007ed0:	08007f3d 	.word	0x08007f3d
 8007ed4:	08007f3d 	.word	0x08007f3d
 8007ed8:	08007f3d 	.word	0x08007f3d
 8007edc:	08007f3d 	.word	0x08007f3d
 8007ee0:	08007f3d 	.word	0x08007f3d
 8007ee4:	08007f3d 	.word	0x08007f3d
 8007ee8:	08007f3d 	.word	0x08007f3d
 8007eec:	08007f45 	.word	0x08007f45
 8007ef0:	08007f3d 	.word	0x08007f3d
 8007ef4:	08007f3d 	.word	0x08007f3d
 8007ef8:	08007f3d 	.word	0x08007f3d
 8007efc:	08007f3d 	.word	0x08007f3d
 8007f00:	08007f3d 	.word	0x08007f3d
 8007f04:	08007f3d 	.word	0x08007f3d
 8007f08:	08007f3d 	.word	0x08007f3d
 8007f0c:	08007f45 	.word	0x08007f45
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f14:	3308      	adds	r3, #8
 8007f16:	2101      	movs	r1, #1
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f000 ffc3 	bl	8008ea4 <RCCEx_PLL2_Config>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007f24:	e00f      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f2a:	3328      	adds	r3, #40	@ 0x28
 8007f2c:	2101      	movs	r1, #1
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f001 f86a 	bl	8009008 <RCCEx_PLL3_Config>
 8007f34:	4603      	mov	r3, r0
 8007f36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007f3a:	e004      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f42:	e000      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007f44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d10a      	bne.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007f4e:	4bbf      	ldr	r3, [pc, #764]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f52:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f5c:	4abb      	ldr	r2, [pc, #748]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f5e:	430b      	orrs	r3, r1
 8007f60:	6553      	str	r3, [r2, #84]	@ 0x54
 8007f62:	e003      	b.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f74:	f002 0302 	and.w	r3, r2, #2
 8007f78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007f82:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007f86:	460b      	mov	r3, r1
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	d041      	beq.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f92:	2b05      	cmp	r3, #5
 8007f94:	d824      	bhi.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007f96:	a201      	add	r2, pc, #4	@ (adr r2, 8007f9c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f9c:	08007fe9 	.word	0x08007fe9
 8007fa0:	08007fb5 	.word	0x08007fb5
 8007fa4:	08007fcb 	.word	0x08007fcb
 8007fa8:	08007fe9 	.word	0x08007fe9
 8007fac:	08007fe9 	.word	0x08007fe9
 8007fb0:	08007fe9 	.word	0x08007fe9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fb8:	3308      	adds	r3, #8
 8007fba:	2101      	movs	r1, #1
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f000 ff71 	bl	8008ea4 <RCCEx_PLL2_Config>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007fc8:	e00f      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fce:	3328      	adds	r3, #40	@ 0x28
 8007fd0:	2101      	movs	r1, #1
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f001 f818 	bl	8009008 <RCCEx_PLL3_Config>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007fde:	e004      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007fe6:	e000      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007fe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d10a      	bne.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007ff2:	4b96      	ldr	r3, [pc, #600]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ff6:	f023 0107 	bic.w	r1, r3, #7
 8007ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ffe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008000:	4a92      	ldr	r2, [pc, #584]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008002:	430b      	orrs	r3, r1
 8008004:	6553      	str	r3, [r2, #84]	@ 0x54
 8008006:	e003      	b.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008008:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800800c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008018:	f002 0304 	and.w	r3, r2, #4
 800801c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008020:	2300      	movs	r3, #0
 8008022:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008026:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800802a:	460b      	mov	r3, r1
 800802c:	4313      	orrs	r3, r2
 800802e:	d044      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008034:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008038:	2b05      	cmp	r3, #5
 800803a:	d825      	bhi.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800803c:	a201      	add	r2, pc, #4	@ (adr r2, 8008044 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800803e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008042:	bf00      	nop
 8008044:	08008091 	.word	0x08008091
 8008048:	0800805d 	.word	0x0800805d
 800804c:	08008073 	.word	0x08008073
 8008050:	08008091 	.word	0x08008091
 8008054:	08008091 	.word	0x08008091
 8008058:	08008091 	.word	0x08008091
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800805c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008060:	3308      	adds	r3, #8
 8008062:	2101      	movs	r1, #1
 8008064:	4618      	mov	r0, r3
 8008066:	f000 ff1d 	bl	8008ea4 <RCCEx_PLL2_Config>
 800806a:	4603      	mov	r3, r0
 800806c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008070:	e00f      	b.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008076:	3328      	adds	r3, #40	@ 0x28
 8008078:	2101      	movs	r1, #1
 800807a:	4618      	mov	r0, r3
 800807c:	f000 ffc4 	bl	8009008 <RCCEx_PLL3_Config>
 8008080:	4603      	mov	r3, r0
 8008082:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008086:	e004      	b.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008088:	2301      	movs	r3, #1
 800808a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800808e:	e000      	b.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008090:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008092:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008096:	2b00      	cmp	r3, #0
 8008098:	d10b      	bne.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800809a:	4b6c      	ldr	r3, [pc, #432]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800809c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800809e:	f023 0107 	bic.w	r1, r3, #7
 80080a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080aa:	4a68      	ldr	r2, [pc, #416]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80080ac:	430b      	orrs	r3, r1
 80080ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80080b0:	e003      	b.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80080ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c2:	f002 0320 	and.w	r3, r2, #32
 80080c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80080ca:	2300      	movs	r3, #0
 80080cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80080d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80080d4:	460b      	mov	r3, r1
 80080d6:	4313      	orrs	r3, r2
 80080d8:	d055      	beq.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80080da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80080e6:	d033      	beq.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80080e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80080ec:	d82c      	bhi.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80080ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080f2:	d02f      	beq.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80080f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080f8:	d826      	bhi.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80080fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80080fe:	d02b      	beq.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008100:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008104:	d820      	bhi.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008106:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800810a:	d012      	beq.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800810c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008110:	d81a      	bhi.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008112:	2b00      	cmp	r3, #0
 8008114:	d022      	beq.n	800815c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008116:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800811a:	d115      	bne.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800811c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008120:	3308      	adds	r3, #8
 8008122:	2100      	movs	r1, #0
 8008124:	4618      	mov	r0, r3
 8008126:	f000 febd 	bl	8008ea4 <RCCEx_PLL2_Config>
 800812a:	4603      	mov	r3, r0
 800812c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008130:	e015      	b.n	800815e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008136:	3328      	adds	r3, #40	@ 0x28
 8008138:	2102      	movs	r1, #2
 800813a:	4618      	mov	r0, r3
 800813c:	f000 ff64 	bl	8009008 <RCCEx_PLL3_Config>
 8008140:	4603      	mov	r3, r0
 8008142:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008146:	e00a      	b.n	800815e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800814e:	e006      	b.n	800815e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008150:	bf00      	nop
 8008152:	e004      	b.n	800815e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008154:	bf00      	nop
 8008156:	e002      	b.n	800815e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008158:	bf00      	nop
 800815a:	e000      	b.n	800815e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800815c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800815e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008162:	2b00      	cmp	r3, #0
 8008164:	d10b      	bne.n	800817e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008166:	4b39      	ldr	r3, [pc, #228]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800816a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800816e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008176:	4a35      	ldr	r2, [pc, #212]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008178:	430b      	orrs	r3, r1
 800817a:	6553      	str	r3, [r2, #84]	@ 0x54
 800817c:	e003      	b.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800817e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008182:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800818a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008192:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008196:	2300      	movs	r3, #0
 8008198:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800819c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80081a0:	460b      	mov	r3, r1
 80081a2:	4313      	orrs	r3, r2
 80081a4:	d058      	beq.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80081a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80081ae:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80081b2:	d033      	beq.n	800821c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80081b4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80081b8:	d82c      	bhi.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80081ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081be:	d02f      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80081c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081c4:	d826      	bhi.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80081c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80081ca:	d02b      	beq.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80081cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80081d0:	d820      	bhi.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80081d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081d6:	d012      	beq.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80081d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081dc:	d81a      	bhi.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d022      	beq.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80081e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081e6:	d115      	bne.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80081e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ec:	3308      	adds	r3, #8
 80081ee:	2100      	movs	r1, #0
 80081f0:	4618      	mov	r0, r3
 80081f2:	f000 fe57 	bl	8008ea4 <RCCEx_PLL2_Config>
 80081f6:	4603      	mov	r3, r0
 80081f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80081fc:	e015      	b.n	800822a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80081fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008202:	3328      	adds	r3, #40	@ 0x28
 8008204:	2102      	movs	r1, #2
 8008206:	4618      	mov	r0, r3
 8008208:	f000 fefe 	bl	8009008 <RCCEx_PLL3_Config>
 800820c:	4603      	mov	r3, r0
 800820e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008212:	e00a      	b.n	800822a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008214:	2301      	movs	r3, #1
 8008216:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800821a:	e006      	b.n	800822a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800821c:	bf00      	nop
 800821e:	e004      	b.n	800822a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008220:	bf00      	nop
 8008222:	e002      	b.n	800822a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008224:	bf00      	nop
 8008226:	e000      	b.n	800822a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008228:	bf00      	nop
    }

    if (ret == HAL_OK)
 800822a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800822e:	2b00      	cmp	r3, #0
 8008230:	d10e      	bne.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008232:	4b06      	ldr	r3, [pc, #24]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008236:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800823a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800823e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008242:	4a02      	ldr	r2, [pc, #8]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008244:	430b      	orrs	r3, r1
 8008246:	6593      	str	r3, [r2, #88]	@ 0x58
 8008248:	e006      	b.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800824a:	bf00      	nop
 800824c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008250:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008254:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800825c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008260:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008264:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008268:	2300      	movs	r3, #0
 800826a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800826e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008272:	460b      	mov	r3, r1
 8008274:	4313      	orrs	r3, r2
 8008276:	d055      	beq.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800827c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008280:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008284:	d033      	beq.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008286:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800828a:	d82c      	bhi.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800828c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008290:	d02f      	beq.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008292:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008296:	d826      	bhi.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008298:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800829c:	d02b      	beq.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800829e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80082a2:	d820      	bhi.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80082a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082a8:	d012      	beq.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80082aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082ae:	d81a      	bhi.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d022      	beq.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80082b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082b8:	d115      	bne.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082be:	3308      	adds	r3, #8
 80082c0:	2100      	movs	r1, #0
 80082c2:	4618      	mov	r0, r3
 80082c4:	f000 fdee 	bl	8008ea4 <RCCEx_PLL2_Config>
 80082c8:	4603      	mov	r3, r0
 80082ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80082ce:	e015      	b.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80082d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082d4:	3328      	adds	r3, #40	@ 0x28
 80082d6:	2102      	movs	r1, #2
 80082d8:	4618      	mov	r0, r3
 80082da:	f000 fe95 	bl	8009008 <RCCEx_PLL3_Config>
 80082de:	4603      	mov	r3, r0
 80082e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80082e4:	e00a      	b.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082e6:	2301      	movs	r3, #1
 80082e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80082ec:	e006      	b.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80082ee:	bf00      	nop
 80082f0:	e004      	b.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80082f2:	bf00      	nop
 80082f4:	e002      	b.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80082f6:	bf00      	nop
 80082f8:	e000      	b.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80082fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008300:	2b00      	cmp	r3, #0
 8008302:	d10b      	bne.n	800831c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008304:	4ba1      	ldr	r3, [pc, #644]	@ (800858c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008308:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800830c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008310:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008314:	4a9d      	ldr	r2, [pc, #628]	@ (800858c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008316:	430b      	orrs	r3, r1
 8008318:	6593      	str	r3, [r2, #88]	@ 0x58
 800831a:	e003      	b.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800831c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008320:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832c:	f002 0308 	and.w	r3, r2, #8
 8008330:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008334:	2300      	movs	r3, #0
 8008336:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800833a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800833e:	460b      	mov	r3, r1
 8008340:	4313      	orrs	r3, r2
 8008342:	d01e      	beq.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008348:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800834c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008350:	d10c      	bne.n	800836c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008356:	3328      	adds	r3, #40	@ 0x28
 8008358:	2102      	movs	r1, #2
 800835a:	4618      	mov	r0, r3
 800835c:	f000 fe54 	bl	8009008 <RCCEx_PLL3_Config>
 8008360:	4603      	mov	r3, r0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d002      	beq.n	800836c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800836c:	4b87      	ldr	r3, [pc, #540]	@ (800858c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800836e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008370:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008374:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008378:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800837c:	4a83      	ldr	r2, [pc, #524]	@ (800858c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800837e:	430b      	orrs	r3, r1
 8008380:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838a:	f002 0310 	and.w	r3, r2, #16
 800838e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008392:	2300      	movs	r3, #0
 8008394:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008398:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800839c:	460b      	mov	r3, r1
 800839e:	4313      	orrs	r3, r2
 80083a0:	d01e      	beq.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80083a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80083aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083ae:	d10c      	bne.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80083b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083b4:	3328      	adds	r3, #40	@ 0x28
 80083b6:	2102      	movs	r1, #2
 80083b8:	4618      	mov	r0, r3
 80083ba:	f000 fe25 	bl	8009008 <RCCEx_PLL3_Config>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d002      	beq.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80083c4:	2301      	movs	r3, #1
 80083c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80083ca:	4b70      	ldr	r3, [pc, #448]	@ (800858c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083ce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80083d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80083da:	4a6c      	ldr	r2, [pc, #432]	@ (800858c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083dc:	430b      	orrs	r3, r1
 80083de:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80083e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80083ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80083f0:	2300      	movs	r3, #0
 80083f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80083f6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80083fa:	460b      	mov	r3, r1
 80083fc:	4313      	orrs	r3, r2
 80083fe:	d03e      	beq.n	800847e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008404:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008408:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800840c:	d022      	beq.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800840e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008412:	d81b      	bhi.n	800844c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008414:	2b00      	cmp	r3, #0
 8008416:	d003      	beq.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008418:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800841c:	d00b      	beq.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800841e:	e015      	b.n	800844c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008424:	3308      	adds	r3, #8
 8008426:	2100      	movs	r1, #0
 8008428:	4618      	mov	r0, r3
 800842a:	f000 fd3b 	bl	8008ea4 <RCCEx_PLL2_Config>
 800842e:	4603      	mov	r3, r0
 8008430:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008434:	e00f      	b.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800843a:	3328      	adds	r3, #40	@ 0x28
 800843c:	2102      	movs	r1, #2
 800843e:	4618      	mov	r0, r3
 8008440:	f000 fde2 	bl	8009008 <RCCEx_PLL3_Config>
 8008444:	4603      	mov	r3, r0
 8008446:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800844a:	e004      	b.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800844c:	2301      	movs	r3, #1
 800844e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008452:	e000      	b.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008454:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008456:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800845a:	2b00      	cmp	r3, #0
 800845c:	d10b      	bne.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800845e:	4b4b      	ldr	r3, [pc, #300]	@ (800858c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008462:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008466:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800846a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800846e:	4a47      	ldr	r2, [pc, #284]	@ (800858c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008470:	430b      	orrs	r3, r1
 8008472:	6593      	str	r3, [r2, #88]	@ 0x58
 8008474:	e003      	b.n	800847e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008476:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800847a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800847e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008486:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800848a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800848c:	2300      	movs	r3, #0
 800848e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008490:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008494:	460b      	mov	r3, r1
 8008496:	4313      	orrs	r3, r2
 8008498:	d03b      	beq.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800849a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800849e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80084a6:	d01f      	beq.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80084a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80084ac:	d818      	bhi.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80084ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084b2:	d003      	beq.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80084b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80084b8:	d007      	beq.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80084ba:	e011      	b.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084bc:	4b33      	ldr	r3, [pc, #204]	@ (800858c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084c0:	4a32      	ldr	r2, [pc, #200]	@ (800858c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80084c8:	e00f      	b.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80084ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ce:	3328      	adds	r3, #40	@ 0x28
 80084d0:	2101      	movs	r1, #1
 80084d2:	4618      	mov	r0, r3
 80084d4:	f000 fd98 	bl	8009008 <RCCEx_PLL3_Config>
 80084d8:	4603      	mov	r3, r0
 80084da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80084de:	e004      	b.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80084e6:	e000      	b.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80084e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d10b      	bne.n	800850a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80084f2:	4b26      	ldr	r3, [pc, #152]	@ (800858c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084f6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80084fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008502:	4a22      	ldr	r2, [pc, #136]	@ (800858c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008504:	430b      	orrs	r3, r1
 8008506:	6553      	str	r3, [r2, #84]	@ 0x54
 8008508:	e003      	b.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800850a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800850e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800851e:	673b      	str	r3, [r7, #112]	@ 0x70
 8008520:	2300      	movs	r3, #0
 8008522:	677b      	str	r3, [r7, #116]	@ 0x74
 8008524:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008528:	460b      	mov	r3, r1
 800852a:	4313      	orrs	r3, r2
 800852c:	d034      	beq.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800852e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008532:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008534:	2b00      	cmp	r3, #0
 8008536:	d003      	beq.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008538:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800853c:	d007      	beq.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800853e:	e011      	b.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008540:	4b12      	ldr	r3, [pc, #72]	@ (800858c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008544:	4a11      	ldr	r2, [pc, #68]	@ (800858c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008546:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800854a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800854c:	e00e      	b.n	800856c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800854e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008552:	3308      	adds	r3, #8
 8008554:	2102      	movs	r1, #2
 8008556:	4618      	mov	r0, r3
 8008558:	f000 fca4 	bl	8008ea4 <RCCEx_PLL2_Config>
 800855c:	4603      	mov	r3, r0
 800855e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008562:	e003      	b.n	800856c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008564:	2301      	movs	r3, #1
 8008566:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800856a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800856c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008570:	2b00      	cmp	r3, #0
 8008572:	d10d      	bne.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008574:	4b05      	ldr	r3, [pc, #20]	@ (800858c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008576:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008578:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800857c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008580:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008582:	4a02      	ldr	r2, [pc, #8]	@ (800858c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008584:	430b      	orrs	r3, r1
 8008586:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008588:	e006      	b.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800858a:	bf00      	nop
 800858c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008590:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008594:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800859c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80085a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80085a6:	2300      	movs	r3, #0
 80085a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80085aa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80085ae:	460b      	mov	r3, r1
 80085b0:	4313      	orrs	r3, r2
 80085b2:	d00c      	beq.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80085b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085b8:	3328      	adds	r3, #40	@ 0x28
 80085ba:	2102      	movs	r1, #2
 80085bc:	4618      	mov	r0, r3
 80085be:	f000 fd23 	bl	8009008 <RCCEx_PLL3_Config>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d002      	beq.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80085c8:	2301      	movs	r3, #1
 80085ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80085ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80085da:	663b      	str	r3, [r7, #96]	@ 0x60
 80085dc:	2300      	movs	r3, #0
 80085de:	667b      	str	r3, [r7, #100]	@ 0x64
 80085e0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80085e4:	460b      	mov	r3, r1
 80085e6:	4313      	orrs	r3, r2
 80085e8:	d038      	beq.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80085ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085f6:	d018      	beq.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80085f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085fc:	d811      	bhi.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80085fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008602:	d014      	beq.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008604:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008608:	d80b      	bhi.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800860a:	2b00      	cmp	r3, #0
 800860c:	d011      	beq.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800860e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008612:	d106      	bne.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008614:	4bc3      	ldr	r3, [pc, #780]	@ (8008924 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008618:	4ac2      	ldr	r2, [pc, #776]	@ (8008924 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800861a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800861e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008620:	e008      	b.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008628:	e004      	b.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800862a:	bf00      	nop
 800862c:	e002      	b.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800862e:	bf00      	nop
 8008630:	e000      	b.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008632:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008634:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008638:	2b00      	cmp	r3, #0
 800863a:	d10b      	bne.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800863c:	4bb9      	ldr	r3, [pc, #740]	@ (8008924 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800863e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008640:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008648:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800864c:	4ab5      	ldr	r2, [pc, #724]	@ (8008924 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800864e:	430b      	orrs	r3, r1
 8008650:	6553      	str	r3, [r2, #84]	@ 0x54
 8008652:	e003      	b.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008654:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008658:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800865c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008664:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008668:	65bb      	str	r3, [r7, #88]	@ 0x58
 800866a:	2300      	movs	r3, #0
 800866c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800866e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008672:	460b      	mov	r3, r1
 8008674:	4313      	orrs	r3, r2
 8008676:	d009      	beq.n	800868c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008678:	4baa      	ldr	r3, [pc, #680]	@ (8008924 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800867a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800867c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008684:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008686:	4aa7      	ldr	r2, [pc, #668]	@ (8008924 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008688:	430b      	orrs	r3, r1
 800868a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800868c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008694:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008698:	653b      	str	r3, [r7, #80]	@ 0x50
 800869a:	2300      	movs	r3, #0
 800869c:	657b      	str	r3, [r7, #84]	@ 0x54
 800869e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80086a2:	460b      	mov	r3, r1
 80086a4:	4313      	orrs	r3, r2
 80086a6:	d00a      	beq.n	80086be <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80086a8:	4b9e      	ldr	r3, [pc, #632]	@ (8008924 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086aa:	691b      	ldr	r3, [r3, #16]
 80086ac:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80086b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80086b8:	4a9a      	ldr	r2, [pc, #616]	@ (8008924 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086ba:	430b      	orrs	r3, r1
 80086bc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80086be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80086ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086cc:	2300      	movs	r3, #0
 80086ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086d0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80086d4:	460b      	mov	r3, r1
 80086d6:	4313      	orrs	r3, r2
 80086d8:	d009      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80086da:	4b92      	ldr	r3, [pc, #584]	@ (8008924 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086de:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80086e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086e8:	4a8e      	ldr	r2, [pc, #568]	@ (8008924 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086ea:	430b      	orrs	r3, r1
 80086ec:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80086ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80086fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80086fc:	2300      	movs	r3, #0
 80086fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8008700:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008704:	460b      	mov	r3, r1
 8008706:	4313      	orrs	r3, r2
 8008708:	d00e      	beq.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800870a:	4b86      	ldr	r3, [pc, #536]	@ (8008924 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800870c:	691b      	ldr	r3, [r3, #16]
 800870e:	4a85      	ldr	r2, [pc, #532]	@ (8008924 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008710:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008714:	6113      	str	r3, [r2, #16]
 8008716:	4b83      	ldr	r3, [pc, #524]	@ (8008924 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008718:	6919      	ldr	r1, [r3, #16]
 800871a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800871e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008722:	4a80      	ldr	r2, [pc, #512]	@ (8008924 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008724:	430b      	orrs	r3, r1
 8008726:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800872c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008730:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008734:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008736:	2300      	movs	r3, #0
 8008738:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800873a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800873e:	460b      	mov	r3, r1
 8008740:	4313      	orrs	r3, r2
 8008742:	d009      	beq.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008744:	4b77      	ldr	r3, [pc, #476]	@ (8008924 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008746:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008748:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800874c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008752:	4a74      	ldr	r2, [pc, #464]	@ (8008924 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008754:	430b      	orrs	r3, r1
 8008756:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800875c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008760:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008764:	633b      	str	r3, [r7, #48]	@ 0x30
 8008766:	2300      	movs	r3, #0
 8008768:	637b      	str	r3, [r7, #52]	@ 0x34
 800876a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800876e:	460b      	mov	r3, r1
 8008770:	4313      	orrs	r3, r2
 8008772:	d00a      	beq.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008774:	4b6b      	ldr	r3, [pc, #428]	@ (8008924 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008778:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800877c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008780:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008784:	4a67      	ldr	r2, [pc, #412]	@ (8008924 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008786:	430b      	orrs	r3, r1
 8008788:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800878a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800878e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008792:	2100      	movs	r1, #0
 8008794:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008796:	f003 0301 	and.w	r3, r3, #1
 800879a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800879c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80087a0:	460b      	mov	r3, r1
 80087a2:	4313      	orrs	r3, r2
 80087a4:	d011      	beq.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80087a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087aa:	3308      	adds	r3, #8
 80087ac:	2100      	movs	r1, #0
 80087ae:	4618      	mov	r0, r3
 80087b0:	f000 fb78 	bl	8008ea4 <RCCEx_PLL2_Config>
 80087b4:	4603      	mov	r3, r0
 80087b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80087ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d003      	beq.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80087ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d2:	2100      	movs	r1, #0
 80087d4:	6239      	str	r1, [r7, #32]
 80087d6:	f003 0302 	and.w	r3, r3, #2
 80087da:	627b      	str	r3, [r7, #36]	@ 0x24
 80087dc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80087e0:	460b      	mov	r3, r1
 80087e2:	4313      	orrs	r3, r2
 80087e4:	d011      	beq.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80087e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ea:	3308      	adds	r3, #8
 80087ec:	2101      	movs	r1, #1
 80087ee:	4618      	mov	r0, r3
 80087f0:	f000 fb58 	bl	8008ea4 <RCCEx_PLL2_Config>
 80087f4:	4603      	mov	r3, r0
 80087f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80087fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d003      	beq.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008802:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008806:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800880a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800880e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008812:	2100      	movs	r1, #0
 8008814:	61b9      	str	r1, [r7, #24]
 8008816:	f003 0304 	and.w	r3, r3, #4
 800881a:	61fb      	str	r3, [r7, #28]
 800881c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008820:	460b      	mov	r3, r1
 8008822:	4313      	orrs	r3, r2
 8008824:	d011      	beq.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800882a:	3308      	adds	r3, #8
 800882c:	2102      	movs	r1, #2
 800882e:	4618      	mov	r0, r3
 8008830:	f000 fb38 	bl	8008ea4 <RCCEx_PLL2_Config>
 8008834:	4603      	mov	r3, r0
 8008836:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800883a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800883e:	2b00      	cmp	r3, #0
 8008840:	d003      	beq.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008842:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008846:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800884a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800884e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008852:	2100      	movs	r1, #0
 8008854:	6139      	str	r1, [r7, #16]
 8008856:	f003 0308 	and.w	r3, r3, #8
 800885a:	617b      	str	r3, [r7, #20]
 800885c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008860:	460b      	mov	r3, r1
 8008862:	4313      	orrs	r3, r2
 8008864:	d011      	beq.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800886a:	3328      	adds	r3, #40	@ 0x28
 800886c:	2100      	movs	r1, #0
 800886e:	4618      	mov	r0, r3
 8008870:	f000 fbca 	bl	8009008 <RCCEx_PLL3_Config>
 8008874:	4603      	mov	r3, r0
 8008876:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800887a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800887e:	2b00      	cmp	r3, #0
 8008880:	d003      	beq.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008882:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008886:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800888a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800888e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008892:	2100      	movs	r1, #0
 8008894:	60b9      	str	r1, [r7, #8]
 8008896:	f003 0310 	and.w	r3, r3, #16
 800889a:	60fb      	str	r3, [r7, #12]
 800889c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80088a0:	460b      	mov	r3, r1
 80088a2:	4313      	orrs	r3, r2
 80088a4:	d011      	beq.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80088a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088aa:	3328      	adds	r3, #40	@ 0x28
 80088ac:	2101      	movs	r1, #1
 80088ae:	4618      	mov	r0, r3
 80088b0:	f000 fbaa 	bl	8009008 <RCCEx_PLL3_Config>
 80088b4:	4603      	mov	r3, r0
 80088b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80088ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d003      	beq.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80088ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d2:	2100      	movs	r1, #0
 80088d4:	6039      	str	r1, [r7, #0]
 80088d6:	f003 0320 	and.w	r3, r3, #32
 80088da:	607b      	str	r3, [r7, #4]
 80088dc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80088e0:	460b      	mov	r3, r1
 80088e2:	4313      	orrs	r3, r2
 80088e4:	d011      	beq.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80088e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088ea:	3328      	adds	r3, #40	@ 0x28
 80088ec:	2102      	movs	r1, #2
 80088ee:	4618      	mov	r0, r3
 80088f0:	f000 fb8a 	bl	8009008 <RCCEx_PLL3_Config>
 80088f4:	4603      	mov	r3, r0
 80088f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80088fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d003      	beq.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008902:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008906:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800890a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800890e:	2b00      	cmp	r3, #0
 8008910:	d101      	bne.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008912:	2300      	movs	r3, #0
 8008914:	e000      	b.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008916:	2301      	movs	r3, #1
}
 8008918:	4618      	mov	r0, r3
 800891a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800891e:	46bd      	mov	sp, r7
 8008920:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008924:	58024400 	.word	0x58024400

08008928 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800892c:	f7fe fd96 	bl	800745c <HAL_RCC_GetHCLKFreq>
 8008930:	4602      	mov	r2, r0
 8008932:	4b06      	ldr	r3, [pc, #24]	@ (800894c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008934:	6a1b      	ldr	r3, [r3, #32]
 8008936:	091b      	lsrs	r3, r3, #4
 8008938:	f003 0307 	and.w	r3, r3, #7
 800893c:	4904      	ldr	r1, [pc, #16]	@ (8008950 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800893e:	5ccb      	ldrb	r3, [r1, r3]
 8008940:	f003 031f 	and.w	r3, r3, #31
 8008944:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008948:	4618      	mov	r0, r3
 800894a:	bd80      	pop	{r7, pc}
 800894c:	58024400 	.word	0x58024400
 8008950:	08012750 	.word	0x08012750

08008954 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008954:	b480      	push	{r7}
 8008956:	b089      	sub	sp, #36	@ 0x24
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800895c:	4ba1      	ldr	r3, [pc, #644]	@ (8008be4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800895e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008960:	f003 0303 	and.w	r3, r3, #3
 8008964:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008966:	4b9f      	ldr	r3, [pc, #636]	@ (8008be4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800896a:	0b1b      	lsrs	r3, r3, #12
 800896c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008970:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008972:	4b9c      	ldr	r3, [pc, #624]	@ (8008be4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008976:	091b      	lsrs	r3, r3, #4
 8008978:	f003 0301 	and.w	r3, r3, #1
 800897c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800897e:	4b99      	ldr	r3, [pc, #612]	@ (8008be4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008980:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008982:	08db      	lsrs	r3, r3, #3
 8008984:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008988:	693a      	ldr	r2, [r7, #16]
 800898a:	fb02 f303 	mul.w	r3, r2, r3
 800898e:	ee07 3a90 	vmov	s15, r3
 8008992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008996:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	2b00      	cmp	r3, #0
 800899e:	f000 8111 	beq.w	8008bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80089a2:	69bb      	ldr	r3, [r7, #24]
 80089a4:	2b02      	cmp	r3, #2
 80089a6:	f000 8083 	beq.w	8008ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	f200 80a1 	bhi.w	8008af4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d003      	beq.n	80089c0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80089b8:	69bb      	ldr	r3, [r7, #24]
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d056      	beq.n	8008a6c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80089be:	e099      	b.n	8008af4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089c0:	4b88      	ldr	r3, [pc, #544]	@ (8008be4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f003 0320 	and.w	r3, r3, #32
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d02d      	beq.n	8008a28 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089cc:	4b85      	ldr	r3, [pc, #532]	@ (8008be4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	08db      	lsrs	r3, r3, #3
 80089d2:	f003 0303 	and.w	r3, r3, #3
 80089d6:	4a84      	ldr	r2, [pc, #528]	@ (8008be8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80089d8:	fa22 f303 	lsr.w	r3, r2, r3
 80089dc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	ee07 3a90 	vmov	s15, r3
 80089e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	ee07 3a90 	vmov	s15, r3
 80089ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089f6:	4b7b      	ldr	r3, [pc, #492]	@ (8008be4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089fe:	ee07 3a90 	vmov	s15, r3
 8008a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a06:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a0a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008bec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008a26:	e087      	b.n	8008b38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	ee07 3a90 	vmov	s15, r3
 8008a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a32:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a3a:	4b6a      	ldr	r3, [pc, #424]	@ (8008be4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a42:	ee07 3a90 	vmov	s15, r3
 8008a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a4e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008bec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a6a:	e065      	b.n	8008b38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	ee07 3a90 	vmov	s15, r3
 8008a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a76:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a7e:	4b59      	ldr	r3, [pc, #356]	@ (8008be4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a86:	ee07 3a90 	vmov	s15, r3
 8008a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a92:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008bec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008aae:	e043      	b.n	8008b38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	ee07 3a90 	vmov	s15, r3
 8008ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ac2:	4b48      	ldr	r3, [pc, #288]	@ (8008be4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aca:	ee07 3a90 	vmov	s15, r3
 8008ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ad2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ad6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008bec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ae2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008af2:	e021      	b.n	8008b38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	ee07 3a90 	vmov	s15, r3
 8008afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008afe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b06:	4b37      	ldr	r3, [pc, #220]	@ (8008be4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b0e:	ee07 3a90 	vmov	s15, r3
 8008b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b16:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b1a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008bec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b36:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008b38:	4b2a      	ldr	r3, [pc, #168]	@ (8008be4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b3c:	0a5b      	lsrs	r3, r3, #9
 8008b3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b42:	ee07 3a90 	vmov	s15, r3
 8008b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b52:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b5e:	ee17 2a90 	vmov	r2, s15
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008b66:	4b1f      	ldr	r3, [pc, #124]	@ (8008be4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b6a:	0c1b      	lsrs	r3, r3, #16
 8008b6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b70:	ee07 3a90 	vmov	s15, r3
 8008b74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b80:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b8c:	ee17 2a90 	vmov	r2, s15
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008b94:	4b13      	ldr	r3, [pc, #76]	@ (8008be4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b98:	0e1b      	lsrs	r3, r3, #24
 8008b9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b9e:	ee07 3a90 	vmov	s15, r3
 8008ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ba6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008baa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bae:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bba:	ee17 2a90 	vmov	r2, s15
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008bc2:	e008      	b.n	8008bd6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	609a      	str	r2, [r3, #8]
}
 8008bd6:	bf00      	nop
 8008bd8:	3724      	adds	r7, #36	@ 0x24
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr
 8008be2:	bf00      	nop
 8008be4:	58024400 	.word	0x58024400
 8008be8:	03d09000 	.word	0x03d09000
 8008bec:	46000000 	.word	0x46000000
 8008bf0:	4c742400 	.word	0x4c742400
 8008bf4:	4a742400 	.word	0x4a742400
 8008bf8:	4bbebc20 	.word	0x4bbebc20

08008bfc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b089      	sub	sp, #36	@ 0x24
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c04:	4ba1      	ldr	r3, [pc, #644]	@ (8008e8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c08:	f003 0303 	and.w	r3, r3, #3
 8008c0c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008c0e:	4b9f      	ldr	r3, [pc, #636]	@ (8008e8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c12:	0d1b      	lsrs	r3, r3, #20
 8008c14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c18:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008c1a:	4b9c      	ldr	r3, [pc, #624]	@ (8008e8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c1e:	0a1b      	lsrs	r3, r3, #8
 8008c20:	f003 0301 	and.w	r3, r3, #1
 8008c24:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008c26:	4b99      	ldr	r3, [pc, #612]	@ (8008e8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c2a:	08db      	lsrs	r3, r3, #3
 8008c2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c30:	693a      	ldr	r2, [r7, #16]
 8008c32:	fb02 f303 	mul.w	r3, r2, r3
 8008c36:	ee07 3a90 	vmov	s15, r3
 8008c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c3e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	f000 8111 	beq.w	8008e6c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	2b02      	cmp	r3, #2
 8008c4e:	f000 8083 	beq.w	8008d58 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008c52:	69bb      	ldr	r3, [r7, #24]
 8008c54:	2b02      	cmp	r3, #2
 8008c56:	f200 80a1 	bhi.w	8008d9c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008c5a:	69bb      	ldr	r3, [r7, #24]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d003      	beq.n	8008c68 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d056      	beq.n	8008d14 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008c66:	e099      	b.n	8008d9c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c68:	4b88      	ldr	r3, [pc, #544]	@ (8008e8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f003 0320 	and.w	r3, r3, #32
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d02d      	beq.n	8008cd0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c74:	4b85      	ldr	r3, [pc, #532]	@ (8008e8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	08db      	lsrs	r3, r3, #3
 8008c7a:	f003 0303 	and.w	r3, r3, #3
 8008c7e:	4a84      	ldr	r2, [pc, #528]	@ (8008e90 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008c80:	fa22 f303 	lsr.w	r3, r2, r3
 8008c84:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	ee07 3a90 	vmov	s15, r3
 8008c8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	ee07 3a90 	vmov	s15, r3
 8008c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c9e:	4b7b      	ldr	r3, [pc, #492]	@ (8008e8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ca6:	ee07 3a90 	vmov	s15, r3
 8008caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cae:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cb2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008e94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008cce:	e087      	b.n	8008de0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	ee07 3a90 	vmov	s15, r3
 8008cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cda:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008e98 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ce2:	4b6a      	ldr	r3, [pc, #424]	@ (8008e8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cea:	ee07 3a90 	vmov	s15, r3
 8008cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cf6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008e94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d12:	e065      	b.n	8008de0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	ee07 3a90 	vmov	s15, r3
 8008d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d1e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008e9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d26:	4b59      	ldr	r3, [pc, #356]	@ (8008e8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d2e:	ee07 3a90 	vmov	s15, r3
 8008d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d36:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d3a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008e94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d56:	e043      	b.n	8008de0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	ee07 3a90 	vmov	s15, r3
 8008d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d62:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d6a:	4b48      	ldr	r3, [pc, #288]	@ (8008e8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d72:	ee07 3a90 	vmov	s15, r3
 8008d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d7e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008e94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d9a:	e021      	b.n	8008de0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	ee07 3a90 	vmov	s15, r3
 8008da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008da6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008e9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dae:	4b37      	ldr	r3, [pc, #220]	@ (8008e8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008db6:	ee07 3a90 	vmov	s15, r3
 8008dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dc2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008e94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dde:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008de0:	4b2a      	ldr	r3, [pc, #168]	@ (8008e8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008de4:	0a5b      	lsrs	r3, r3, #9
 8008de6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dea:	ee07 3a90 	vmov	s15, r3
 8008dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008df2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008df6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008dfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e06:	ee17 2a90 	vmov	r2, s15
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008e0e:	4b1f      	ldr	r3, [pc, #124]	@ (8008e8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e12:	0c1b      	lsrs	r3, r3, #16
 8008e14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e18:	ee07 3a90 	vmov	s15, r3
 8008e1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e28:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e34:	ee17 2a90 	vmov	r2, s15
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008e3c:	4b13      	ldr	r3, [pc, #76]	@ (8008e8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e40:	0e1b      	lsrs	r3, r3, #24
 8008e42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e46:	ee07 3a90 	vmov	s15, r3
 8008e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e56:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e62:	ee17 2a90 	vmov	r2, s15
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008e6a:	e008      	b.n	8008e7e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	609a      	str	r2, [r3, #8]
}
 8008e7e:	bf00      	nop
 8008e80:	3724      	adds	r7, #36	@ 0x24
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr
 8008e8a:	bf00      	nop
 8008e8c:	58024400 	.word	0x58024400
 8008e90:	03d09000 	.word	0x03d09000
 8008e94:	46000000 	.word	0x46000000
 8008e98:	4c742400 	.word	0x4c742400
 8008e9c:	4a742400 	.word	0x4a742400
 8008ea0:	4bbebc20 	.word	0x4bbebc20

08008ea4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008eb2:	4b53      	ldr	r3, [pc, #332]	@ (8009000 <RCCEx_PLL2_Config+0x15c>)
 8008eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eb6:	f003 0303 	and.w	r3, r3, #3
 8008eba:	2b03      	cmp	r3, #3
 8008ebc:	d101      	bne.n	8008ec2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e099      	b.n	8008ff6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008ec2:	4b4f      	ldr	r3, [pc, #316]	@ (8009000 <RCCEx_PLL2_Config+0x15c>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a4e      	ldr	r2, [pc, #312]	@ (8009000 <RCCEx_PLL2_Config+0x15c>)
 8008ec8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008ecc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ece:	f7f9 fb79 	bl	80025c4 <HAL_GetTick>
 8008ed2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ed4:	e008      	b.n	8008ee8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008ed6:	f7f9 fb75 	bl	80025c4 <HAL_GetTick>
 8008eda:	4602      	mov	r2, r0
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	1ad3      	subs	r3, r2, r3
 8008ee0:	2b02      	cmp	r3, #2
 8008ee2:	d901      	bls.n	8008ee8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008ee4:	2303      	movs	r3, #3
 8008ee6:	e086      	b.n	8008ff6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ee8:	4b45      	ldr	r3, [pc, #276]	@ (8009000 <RCCEx_PLL2_Config+0x15c>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d1f0      	bne.n	8008ed6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008ef4:	4b42      	ldr	r3, [pc, #264]	@ (8009000 <RCCEx_PLL2_Config+0x15c>)
 8008ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ef8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	031b      	lsls	r3, r3, #12
 8008f02:	493f      	ldr	r1, [pc, #252]	@ (8009000 <RCCEx_PLL2_Config+0x15c>)
 8008f04:	4313      	orrs	r3, r2
 8008f06:	628b      	str	r3, [r1, #40]	@ 0x28
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	3b01      	subs	r3, #1
 8008f0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	3b01      	subs	r3, #1
 8008f18:	025b      	lsls	r3, r3, #9
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	431a      	orrs	r2, r3
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	68db      	ldr	r3, [r3, #12]
 8008f22:	3b01      	subs	r3, #1
 8008f24:	041b      	lsls	r3, r3, #16
 8008f26:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008f2a:	431a      	orrs	r2, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	691b      	ldr	r3, [r3, #16]
 8008f30:	3b01      	subs	r3, #1
 8008f32:	061b      	lsls	r3, r3, #24
 8008f34:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008f38:	4931      	ldr	r1, [pc, #196]	@ (8009000 <RCCEx_PLL2_Config+0x15c>)
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008f3e:	4b30      	ldr	r3, [pc, #192]	@ (8009000 <RCCEx_PLL2_Config+0x15c>)
 8008f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f42:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	695b      	ldr	r3, [r3, #20]
 8008f4a:	492d      	ldr	r1, [pc, #180]	@ (8009000 <RCCEx_PLL2_Config+0x15c>)
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008f50:	4b2b      	ldr	r3, [pc, #172]	@ (8009000 <RCCEx_PLL2_Config+0x15c>)
 8008f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f54:	f023 0220 	bic.w	r2, r3, #32
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	699b      	ldr	r3, [r3, #24]
 8008f5c:	4928      	ldr	r1, [pc, #160]	@ (8009000 <RCCEx_PLL2_Config+0x15c>)
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008f62:	4b27      	ldr	r3, [pc, #156]	@ (8009000 <RCCEx_PLL2_Config+0x15c>)
 8008f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f66:	4a26      	ldr	r2, [pc, #152]	@ (8009000 <RCCEx_PLL2_Config+0x15c>)
 8008f68:	f023 0310 	bic.w	r3, r3, #16
 8008f6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008f6e:	4b24      	ldr	r3, [pc, #144]	@ (8009000 <RCCEx_PLL2_Config+0x15c>)
 8008f70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f72:	4b24      	ldr	r3, [pc, #144]	@ (8009004 <RCCEx_PLL2_Config+0x160>)
 8008f74:	4013      	ands	r3, r2
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	69d2      	ldr	r2, [r2, #28]
 8008f7a:	00d2      	lsls	r2, r2, #3
 8008f7c:	4920      	ldr	r1, [pc, #128]	@ (8009000 <RCCEx_PLL2_Config+0x15c>)
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008f82:	4b1f      	ldr	r3, [pc, #124]	@ (8009000 <RCCEx_PLL2_Config+0x15c>)
 8008f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f86:	4a1e      	ldr	r2, [pc, #120]	@ (8009000 <RCCEx_PLL2_Config+0x15c>)
 8008f88:	f043 0310 	orr.w	r3, r3, #16
 8008f8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d106      	bne.n	8008fa2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008f94:	4b1a      	ldr	r3, [pc, #104]	@ (8009000 <RCCEx_PLL2_Config+0x15c>)
 8008f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f98:	4a19      	ldr	r2, [pc, #100]	@ (8009000 <RCCEx_PLL2_Config+0x15c>)
 8008f9a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008f9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008fa0:	e00f      	b.n	8008fc2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d106      	bne.n	8008fb6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008fa8:	4b15      	ldr	r3, [pc, #84]	@ (8009000 <RCCEx_PLL2_Config+0x15c>)
 8008faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fac:	4a14      	ldr	r2, [pc, #80]	@ (8009000 <RCCEx_PLL2_Config+0x15c>)
 8008fae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008fb2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008fb4:	e005      	b.n	8008fc2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008fb6:	4b12      	ldr	r3, [pc, #72]	@ (8009000 <RCCEx_PLL2_Config+0x15c>)
 8008fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fba:	4a11      	ldr	r2, [pc, #68]	@ (8009000 <RCCEx_PLL2_Config+0x15c>)
 8008fbc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008fc0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008fc2:	4b0f      	ldr	r3, [pc, #60]	@ (8009000 <RCCEx_PLL2_Config+0x15c>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a0e      	ldr	r2, [pc, #56]	@ (8009000 <RCCEx_PLL2_Config+0x15c>)
 8008fc8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008fcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fce:	f7f9 faf9 	bl	80025c4 <HAL_GetTick>
 8008fd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008fd4:	e008      	b.n	8008fe8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008fd6:	f7f9 faf5 	bl	80025c4 <HAL_GetTick>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	1ad3      	subs	r3, r2, r3
 8008fe0:	2b02      	cmp	r3, #2
 8008fe2:	d901      	bls.n	8008fe8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008fe4:	2303      	movs	r3, #3
 8008fe6:	e006      	b.n	8008ff6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008fe8:	4b05      	ldr	r3, [pc, #20]	@ (8009000 <RCCEx_PLL2_Config+0x15c>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d0f0      	beq.n	8008fd6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3710      	adds	r7, #16
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop
 8009000:	58024400 	.word	0x58024400
 8009004:	ffff0007 	.word	0xffff0007

08009008 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009012:	2300      	movs	r3, #0
 8009014:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009016:	4b53      	ldr	r3, [pc, #332]	@ (8009164 <RCCEx_PLL3_Config+0x15c>)
 8009018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800901a:	f003 0303 	and.w	r3, r3, #3
 800901e:	2b03      	cmp	r3, #3
 8009020:	d101      	bne.n	8009026 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009022:	2301      	movs	r3, #1
 8009024:	e099      	b.n	800915a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009026:	4b4f      	ldr	r3, [pc, #316]	@ (8009164 <RCCEx_PLL3_Config+0x15c>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a4e      	ldr	r2, [pc, #312]	@ (8009164 <RCCEx_PLL3_Config+0x15c>)
 800902c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009030:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009032:	f7f9 fac7 	bl	80025c4 <HAL_GetTick>
 8009036:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009038:	e008      	b.n	800904c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800903a:	f7f9 fac3 	bl	80025c4 <HAL_GetTick>
 800903e:	4602      	mov	r2, r0
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	1ad3      	subs	r3, r2, r3
 8009044:	2b02      	cmp	r3, #2
 8009046:	d901      	bls.n	800904c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009048:	2303      	movs	r3, #3
 800904a:	e086      	b.n	800915a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800904c:	4b45      	ldr	r3, [pc, #276]	@ (8009164 <RCCEx_PLL3_Config+0x15c>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009054:	2b00      	cmp	r3, #0
 8009056:	d1f0      	bne.n	800903a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009058:	4b42      	ldr	r3, [pc, #264]	@ (8009164 <RCCEx_PLL3_Config+0x15c>)
 800905a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800905c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	051b      	lsls	r3, r3, #20
 8009066:	493f      	ldr	r1, [pc, #252]	@ (8009164 <RCCEx_PLL3_Config+0x15c>)
 8009068:	4313      	orrs	r3, r2
 800906a:	628b      	str	r3, [r1, #40]	@ 0x28
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	3b01      	subs	r3, #1
 8009072:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	3b01      	subs	r3, #1
 800907c:	025b      	lsls	r3, r3, #9
 800907e:	b29b      	uxth	r3, r3
 8009080:	431a      	orrs	r2, r3
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	68db      	ldr	r3, [r3, #12]
 8009086:	3b01      	subs	r3, #1
 8009088:	041b      	lsls	r3, r3, #16
 800908a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800908e:	431a      	orrs	r2, r3
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	691b      	ldr	r3, [r3, #16]
 8009094:	3b01      	subs	r3, #1
 8009096:	061b      	lsls	r3, r3, #24
 8009098:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800909c:	4931      	ldr	r1, [pc, #196]	@ (8009164 <RCCEx_PLL3_Config+0x15c>)
 800909e:	4313      	orrs	r3, r2
 80090a0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80090a2:	4b30      	ldr	r3, [pc, #192]	@ (8009164 <RCCEx_PLL3_Config+0x15c>)
 80090a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	695b      	ldr	r3, [r3, #20]
 80090ae:	492d      	ldr	r1, [pc, #180]	@ (8009164 <RCCEx_PLL3_Config+0x15c>)
 80090b0:	4313      	orrs	r3, r2
 80090b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80090b4:	4b2b      	ldr	r3, [pc, #172]	@ (8009164 <RCCEx_PLL3_Config+0x15c>)
 80090b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090b8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	699b      	ldr	r3, [r3, #24]
 80090c0:	4928      	ldr	r1, [pc, #160]	@ (8009164 <RCCEx_PLL3_Config+0x15c>)
 80090c2:	4313      	orrs	r3, r2
 80090c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80090c6:	4b27      	ldr	r3, [pc, #156]	@ (8009164 <RCCEx_PLL3_Config+0x15c>)
 80090c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ca:	4a26      	ldr	r2, [pc, #152]	@ (8009164 <RCCEx_PLL3_Config+0x15c>)
 80090cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80090d2:	4b24      	ldr	r3, [pc, #144]	@ (8009164 <RCCEx_PLL3_Config+0x15c>)
 80090d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80090d6:	4b24      	ldr	r3, [pc, #144]	@ (8009168 <RCCEx_PLL3_Config+0x160>)
 80090d8:	4013      	ands	r3, r2
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	69d2      	ldr	r2, [r2, #28]
 80090de:	00d2      	lsls	r2, r2, #3
 80090e0:	4920      	ldr	r1, [pc, #128]	@ (8009164 <RCCEx_PLL3_Config+0x15c>)
 80090e2:	4313      	orrs	r3, r2
 80090e4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80090e6:	4b1f      	ldr	r3, [pc, #124]	@ (8009164 <RCCEx_PLL3_Config+0x15c>)
 80090e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ea:	4a1e      	ldr	r2, [pc, #120]	@ (8009164 <RCCEx_PLL3_Config+0x15c>)
 80090ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80090f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d106      	bne.n	8009106 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80090f8:	4b1a      	ldr	r3, [pc, #104]	@ (8009164 <RCCEx_PLL3_Config+0x15c>)
 80090fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090fc:	4a19      	ldr	r2, [pc, #100]	@ (8009164 <RCCEx_PLL3_Config+0x15c>)
 80090fe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009102:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009104:	e00f      	b.n	8009126 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	2b01      	cmp	r3, #1
 800910a:	d106      	bne.n	800911a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800910c:	4b15      	ldr	r3, [pc, #84]	@ (8009164 <RCCEx_PLL3_Config+0x15c>)
 800910e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009110:	4a14      	ldr	r2, [pc, #80]	@ (8009164 <RCCEx_PLL3_Config+0x15c>)
 8009112:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009116:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009118:	e005      	b.n	8009126 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800911a:	4b12      	ldr	r3, [pc, #72]	@ (8009164 <RCCEx_PLL3_Config+0x15c>)
 800911c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800911e:	4a11      	ldr	r2, [pc, #68]	@ (8009164 <RCCEx_PLL3_Config+0x15c>)
 8009120:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009124:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009126:	4b0f      	ldr	r3, [pc, #60]	@ (8009164 <RCCEx_PLL3_Config+0x15c>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a0e      	ldr	r2, [pc, #56]	@ (8009164 <RCCEx_PLL3_Config+0x15c>)
 800912c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009130:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009132:	f7f9 fa47 	bl	80025c4 <HAL_GetTick>
 8009136:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009138:	e008      	b.n	800914c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800913a:	f7f9 fa43 	bl	80025c4 <HAL_GetTick>
 800913e:	4602      	mov	r2, r0
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	1ad3      	subs	r3, r2, r3
 8009144:	2b02      	cmp	r3, #2
 8009146:	d901      	bls.n	800914c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009148:	2303      	movs	r3, #3
 800914a:	e006      	b.n	800915a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800914c:	4b05      	ldr	r3, [pc, #20]	@ (8009164 <RCCEx_PLL3_Config+0x15c>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009154:	2b00      	cmp	r3, #0
 8009156:	d0f0      	beq.n	800913a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009158:	7bfb      	ldrb	r3, [r7, #15]
}
 800915a:	4618      	mov	r0, r3
 800915c:	3710      	adds	r7, #16
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
 8009162:	bf00      	nop
 8009164:	58024400 	.word	0x58024400
 8009168:	ffff0007 	.word	0xffff0007

0800916c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b082      	sub	sp, #8
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d101      	bne.n	800917e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	e049      	b.n	8009212 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009184:	b2db      	uxtb	r3, r3
 8009186:	2b00      	cmp	r3, #0
 8009188:	d106      	bne.n	8009198 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2200      	movs	r2, #0
 800918e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f7f8 fefa 	bl	8001f8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2202      	movs	r2, #2
 800919c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	3304      	adds	r3, #4
 80091a8:	4619      	mov	r1, r3
 80091aa:	4610      	mov	r0, r2
 80091ac:	f000 fea4 	bl	8009ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2201      	movs	r2, #1
 80091b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2201      	movs	r2, #1
 80091bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2201      	movs	r2, #1
 80091c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2201      	movs	r2, #1
 80091cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2201      	movs	r2, #1
 80091d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2201      	movs	r2, #1
 80091dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2201      	movs	r2, #1
 80091e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2201      	movs	r2, #1
 80091ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2201      	movs	r2, #1
 80091fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2201      	movs	r2, #1
 8009204:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2201      	movs	r2, #1
 800920c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009210:	2300      	movs	r3, #0
}
 8009212:	4618      	mov	r0, r3
 8009214:	3708      	adds	r7, #8
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
	...

0800921c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800921c:	b480      	push	{r7}
 800921e:	b085      	sub	sp, #20
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800922a:	b2db      	uxtb	r3, r3
 800922c:	2b01      	cmp	r3, #1
 800922e:	d001      	beq.n	8009234 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009230:	2301      	movs	r3, #1
 8009232:	e054      	b.n	80092de <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2202      	movs	r2, #2
 8009238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	68da      	ldr	r2, [r3, #12]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f042 0201 	orr.w	r2, r2, #1
 800924a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a26      	ldr	r2, [pc, #152]	@ (80092ec <HAL_TIM_Base_Start_IT+0xd0>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d022      	beq.n	800929c <HAL_TIM_Base_Start_IT+0x80>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800925e:	d01d      	beq.n	800929c <HAL_TIM_Base_Start_IT+0x80>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a22      	ldr	r2, [pc, #136]	@ (80092f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d018      	beq.n	800929c <HAL_TIM_Base_Start_IT+0x80>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a21      	ldr	r2, [pc, #132]	@ (80092f4 <HAL_TIM_Base_Start_IT+0xd8>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d013      	beq.n	800929c <HAL_TIM_Base_Start_IT+0x80>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a1f      	ldr	r2, [pc, #124]	@ (80092f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d00e      	beq.n	800929c <HAL_TIM_Base_Start_IT+0x80>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a1e      	ldr	r2, [pc, #120]	@ (80092fc <HAL_TIM_Base_Start_IT+0xe0>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d009      	beq.n	800929c <HAL_TIM_Base_Start_IT+0x80>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a1c      	ldr	r2, [pc, #112]	@ (8009300 <HAL_TIM_Base_Start_IT+0xe4>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d004      	beq.n	800929c <HAL_TIM_Base_Start_IT+0x80>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a1b      	ldr	r2, [pc, #108]	@ (8009304 <HAL_TIM_Base_Start_IT+0xe8>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d115      	bne.n	80092c8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	689a      	ldr	r2, [r3, #8]
 80092a2:	4b19      	ldr	r3, [pc, #100]	@ (8009308 <HAL_TIM_Base_Start_IT+0xec>)
 80092a4:	4013      	ands	r3, r2
 80092a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2b06      	cmp	r3, #6
 80092ac:	d015      	beq.n	80092da <HAL_TIM_Base_Start_IT+0xbe>
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092b4:	d011      	beq.n	80092da <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f042 0201 	orr.w	r2, r2, #1
 80092c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092c6:	e008      	b.n	80092da <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f042 0201 	orr.w	r2, r2, #1
 80092d6:	601a      	str	r2, [r3, #0]
 80092d8:	e000      	b.n	80092dc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80092dc:	2300      	movs	r3, #0
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3714      	adds	r7, #20
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr
 80092ea:	bf00      	nop
 80092ec:	40010000 	.word	0x40010000
 80092f0:	40000400 	.word	0x40000400
 80092f4:	40000800 	.word	0x40000800
 80092f8:	40000c00 	.word	0x40000c00
 80092fc:	40010400 	.word	0x40010400
 8009300:	40001800 	.word	0x40001800
 8009304:	40014000 	.word	0x40014000
 8009308:	00010007 	.word	0x00010007

0800930c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b082      	sub	sp, #8
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d101      	bne.n	800931e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800931a:	2301      	movs	r3, #1
 800931c:	e049      	b.n	80093b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009324:	b2db      	uxtb	r3, r3
 8009326:	2b00      	cmp	r3, #0
 8009328:	d106      	bne.n	8009338 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f7f8 fd24 	bl	8001d80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2202      	movs	r2, #2
 800933c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	3304      	adds	r3, #4
 8009348:	4619      	mov	r1, r3
 800934a:	4610      	mov	r0, r2
 800934c:	f000 fdd4 	bl	8009ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2201      	movs	r2, #1
 8009354:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2201      	movs	r2, #1
 800935c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2201      	movs	r2, #1
 8009364:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2201      	movs	r2, #1
 800936c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2201      	movs	r2, #1
 8009374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2201      	movs	r2, #1
 800937c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2201      	movs	r2, #1
 8009384:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2201      	movs	r2, #1
 80093ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80093b0:	2300      	movs	r3, #0
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3708      	adds	r7, #8
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
	...

080093bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d109      	bne.n	80093e0 <HAL_TIM_PWM_Start+0x24>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	bf14      	ite	ne
 80093d8:	2301      	movne	r3, #1
 80093da:	2300      	moveq	r3, #0
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	e03c      	b.n	800945a <HAL_TIM_PWM_Start+0x9e>
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	2b04      	cmp	r3, #4
 80093e4:	d109      	bne.n	80093fa <HAL_TIM_PWM_Start+0x3e>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	bf14      	ite	ne
 80093f2:	2301      	movne	r3, #1
 80093f4:	2300      	moveq	r3, #0
 80093f6:	b2db      	uxtb	r3, r3
 80093f8:	e02f      	b.n	800945a <HAL_TIM_PWM_Start+0x9e>
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	2b08      	cmp	r3, #8
 80093fe:	d109      	bne.n	8009414 <HAL_TIM_PWM_Start+0x58>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009406:	b2db      	uxtb	r3, r3
 8009408:	2b01      	cmp	r3, #1
 800940a:	bf14      	ite	ne
 800940c:	2301      	movne	r3, #1
 800940e:	2300      	moveq	r3, #0
 8009410:	b2db      	uxtb	r3, r3
 8009412:	e022      	b.n	800945a <HAL_TIM_PWM_Start+0x9e>
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	2b0c      	cmp	r3, #12
 8009418:	d109      	bne.n	800942e <HAL_TIM_PWM_Start+0x72>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009420:	b2db      	uxtb	r3, r3
 8009422:	2b01      	cmp	r3, #1
 8009424:	bf14      	ite	ne
 8009426:	2301      	movne	r3, #1
 8009428:	2300      	moveq	r3, #0
 800942a:	b2db      	uxtb	r3, r3
 800942c:	e015      	b.n	800945a <HAL_TIM_PWM_Start+0x9e>
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	2b10      	cmp	r3, #16
 8009432:	d109      	bne.n	8009448 <HAL_TIM_PWM_Start+0x8c>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800943a:	b2db      	uxtb	r3, r3
 800943c:	2b01      	cmp	r3, #1
 800943e:	bf14      	ite	ne
 8009440:	2301      	movne	r3, #1
 8009442:	2300      	moveq	r3, #0
 8009444:	b2db      	uxtb	r3, r3
 8009446:	e008      	b.n	800945a <HAL_TIM_PWM_Start+0x9e>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800944e:	b2db      	uxtb	r3, r3
 8009450:	2b01      	cmp	r3, #1
 8009452:	bf14      	ite	ne
 8009454:	2301      	movne	r3, #1
 8009456:	2300      	moveq	r3, #0
 8009458:	b2db      	uxtb	r3, r3
 800945a:	2b00      	cmp	r3, #0
 800945c:	d001      	beq.n	8009462 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800945e:	2301      	movs	r3, #1
 8009460:	e0a1      	b.n	80095a6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d104      	bne.n	8009472 <HAL_TIM_PWM_Start+0xb6>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2202      	movs	r2, #2
 800946c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009470:	e023      	b.n	80094ba <HAL_TIM_PWM_Start+0xfe>
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	2b04      	cmp	r3, #4
 8009476:	d104      	bne.n	8009482 <HAL_TIM_PWM_Start+0xc6>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2202      	movs	r2, #2
 800947c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009480:	e01b      	b.n	80094ba <HAL_TIM_PWM_Start+0xfe>
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	2b08      	cmp	r3, #8
 8009486:	d104      	bne.n	8009492 <HAL_TIM_PWM_Start+0xd6>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2202      	movs	r2, #2
 800948c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009490:	e013      	b.n	80094ba <HAL_TIM_PWM_Start+0xfe>
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	2b0c      	cmp	r3, #12
 8009496:	d104      	bne.n	80094a2 <HAL_TIM_PWM_Start+0xe6>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2202      	movs	r2, #2
 800949c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80094a0:	e00b      	b.n	80094ba <HAL_TIM_PWM_Start+0xfe>
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	2b10      	cmp	r3, #16
 80094a6:	d104      	bne.n	80094b2 <HAL_TIM_PWM_Start+0xf6>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2202      	movs	r2, #2
 80094ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80094b0:	e003      	b.n	80094ba <HAL_TIM_PWM_Start+0xfe>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2202      	movs	r2, #2
 80094b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	2201      	movs	r2, #1
 80094c0:	6839      	ldr	r1, [r7, #0]
 80094c2:	4618      	mov	r0, r3
 80094c4:	f001 f932 	bl	800a72c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a38      	ldr	r2, [pc, #224]	@ (80095b0 <HAL_TIM_PWM_Start+0x1f4>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d013      	beq.n	80094fa <HAL_TIM_PWM_Start+0x13e>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a37      	ldr	r2, [pc, #220]	@ (80095b4 <HAL_TIM_PWM_Start+0x1f8>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d00e      	beq.n	80094fa <HAL_TIM_PWM_Start+0x13e>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a35      	ldr	r2, [pc, #212]	@ (80095b8 <HAL_TIM_PWM_Start+0x1fc>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d009      	beq.n	80094fa <HAL_TIM_PWM_Start+0x13e>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a34      	ldr	r2, [pc, #208]	@ (80095bc <HAL_TIM_PWM_Start+0x200>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d004      	beq.n	80094fa <HAL_TIM_PWM_Start+0x13e>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a32      	ldr	r2, [pc, #200]	@ (80095c0 <HAL_TIM_PWM_Start+0x204>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d101      	bne.n	80094fe <HAL_TIM_PWM_Start+0x142>
 80094fa:	2301      	movs	r3, #1
 80094fc:	e000      	b.n	8009500 <HAL_TIM_PWM_Start+0x144>
 80094fe:	2300      	movs	r3, #0
 8009500:	2b00      	cmp	r3, #0
 8009502:	d007      	beq.n	8009514 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009512:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4a25      	ldr	r2, [pc, #148]	@ (80095b0 <HAL_TIM_PWM_Start+0x1f4>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d022      	beq.n	8009564 <HAL_TIM_PWM_Start+0x1a8>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009526:	d01d      	beq.n	8009564 <HAL_TIM_PWM_Start+0x1a8>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a25      	ldr	r2, [pc, #148]	@ (80095c4 <HAL_TIM_PWM_Start+0x208>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d018      	beq.n	8009564 <HAL_TIM_PWM_Start+0x1a8>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a24      	ldr	r2, [pc, #144]	@ (80095c8 <HAL_TIM_PWM_Start+0x20c>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d013      	beq.n	8009564 <HAL_TIM_PWM_Start+0x1a8>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a22      	ldr	r2, [pc, #136]	@ (80095cc <HAL_TIM_PWM_Start+0x210>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d00e      	beq.n	8009564 <HAL_TIM_PWM_Start+0x1a8>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a1a      	ldr	r2, [pc, #104]	@ (80095b4 <HAL_TIM_PWM_Start+0x1f8>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d009      	beq.n	8009564 <HAL_TIM_PWM_Start+0x1a8>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a1e      	ldr	r2, [pc, #120]	@ (80095d0 <HAL_TIM_PWM_Start+0x214>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d004      	beq.n	8009564 <HAL_TIM_PWM_Start+0x1a8>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4a16      	ldr	r2, [pc, #88]	@ (80095b8 <HAL_TIM_PWM_Start+0x1fc>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d115      	bne.n	8009590 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	689a      	ldr	r2, [r3, #8]
 800956a:	4b1a      	ldr	r3, [pc, #104]	@ (80095d4 <HAL_TIM_PWM_Start+0x218>)
 800956c:	4013      	ands	r3, r2
 800956e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2b06      	cmp	r3, #6
 8009574:	d015      	beq.n	80095a2 <HAL_TIM_PWM_Start+0x1e6>
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800957c:	d011      	beq.n	80095a2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	681a      	ldr	r2, [r3, #0]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f042 0201 	orr.w	r2, r2, #1
 800958c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800958e:	e008      	b.n	80095a2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	681a      	ldr	r2, [r3, #0]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f042 0201 	orr.w	r2, r2, #1
 800959e:	601a      	str	r2, [r3, #0]
 80095a0:	e000      	b.n	80095a4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80095a4:	2300      	movs	r3, #0
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3710      	adds	r7, #16
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	40010000 	.word	0x40010000
 80095b4:	40010400 	.word	0x40010400
 80095b8:	40014000 	.word	0x40014000
 80095bc:	40014400 	.word	0x40014400
 80095c0:	40014800 	.word	0x40014800
 80095c4:	40000400 	.word	0x40000400
 80095c8:	40000800 	.word	0x40000800
 80095cc:	40000c00 	.word	0x40000c00
 80095d0:	40001800 	.word	0x40001800
 80095d4:	00010007 	.word	0x00010007

080095d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b086      	sub	sp, #24
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d101      	bne.n	80095ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80095e8:	2301      	movs	r3, #1
 80095ea:	e08f      	b.n	800970c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d106      	bne.n	8009606 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f7f8 fac9 	bl	8001b98 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2202      	movs	r2, #2
 800960a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	6899      	ldr	r1, [r3, #8]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681a      	ldr	r2, [r3, #0]
 8009618:	4b3e      	ldr	r3, [pc, #248]	@ (8009714 <HAL_TIM_Encoder_Init+0x13c>)
 800961a:	400b      	ands	r3, r1
 800961c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	3304      	adds	r3, #4
 8009626:	4619      	mov	r1, r3
 8009628:	4610      	mov	r0, r2
 800962a:	f000 fc65 	bl	8009ef8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	699b      	ldr	r3, [r3, #24]
 800963c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	6a1b      	ldr	r3, [r3, #32]
 8009644:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	697a      	ldr	r2, [r7, #20]
 800964c:	4313      	orrs	r3, r2
 800964e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009650:	693a      	ldr	r2, [r7, #16]
 8009652:	4b31      	ldr	r3, [pc, #196]	@ (8009718 <HAL_TIM_Encoder_Init+0x140>)
 8009654:	4013      	ands	r3, r2
 8009656:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	689a      	ldr	r2, [r3, #8]
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	699b      	ldr	r3, [r3, #24]
 8009660:	021b      	lsls	r3, r3, #8
 8009662:	4313      	orrs	r3, r2
 8009664:	693a      	ldr	r2, [r7, #16]
 8009666:	4313      	orrs	r3, r2
 8009668:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800966a:	693a      	ldr	r2, [r7, #16]
 800966c:	4b2b      	ldr	r3, [pc, #172]	@ (800971c <HAL_TIM_Encoder_Init+0x144>)
 800966e:	4013      	ands	r3, r2
 8009670:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009672:	693a      	ldr	r2, [r7, #16]
 8009674:	4b2a      	ldr	r3, [pc, #168]	@ (8009720 <HAL_TIM_Encoder_Init+0x148>)
 8009676:	4013      	ands	r3, r2
 8009678:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	68da      	ldr	r2, [r3, #12]
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	69db      	ldr	r3, [r3, #28]
 8009682:	021b      	lsls	r3, r3, #8
 8009684:	4313      	orrs	r3, r2
 8009686:	693a      	ldr	r2, [r7, #16]
 8009688:	4313      	orrs	r3, r2
 800968a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	691b      	ldr	r3, [r3, #16]
 8009690:	011a      	lsls	r2, r3, #4
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	6a1b      	ldr	r3, [r3, #32]
 8009696:	031b      	lsls	r3, r3, #12
 8009698:	4313      	orrs	r3, r2
 800969a:	693a      	ldr	r2, [r7, #16]
 800969c:	4313      	orrs	r3, r2
 800969e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80096a6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80096ae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	685a      	ldr	r2, [r3, #4]
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	695b      	ldr	r3, [r3, #20]
 80096b8:	011b      	lsls	r3, r3, #4
 80096ba:	4313      	orrs	r3, r2
 80096bc:	68fa      	ldr	r2, [r7, #12]
 80096be:	4313      	orrs	r3, r2
 80096c0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	697a      	ldr	r2, [r7, #20]
 80096c8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	693a      	ldr	r2, [r7, #16]
 80096d0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	68fa      	ldr	r2, [r7, #12]
 80096d8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2201      	movs	r2, #1
 80096de:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2201      	movs	r2, #1
 80096e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2201      	movs	r2, #1
 80096ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2201      	movs	r2, #1
 80096f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2201      	movs	r2, #1
 80096fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2201      	movs	r2, #1
 8009706:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800970a:	2300      	movs	r3, #0
}
 800970c:	4618      	mov	r0, r3
 800970e:	3718      	adds	r7, #24
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	fffebff8 	.word	0xfffebff8
 8009718:	fffffcfc 	.word	0xfffffcfc
 800971c:	fffff3f3 	.word	0xfffff3f3
 8009720:	ffff0f0f 	.word	0xffff0f0f

08009724 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b084      	sub	sp, #16
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009734:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800973c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009744:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800974c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d110      	bne.n	8009776 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009754:	7bfb      	ldrb	r3, [r7, #15]
 8009756:	2b01      	cmp	r3, #1
 8009758:	d102      	bne.n	8009760 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800975a:	7b7b      	ldrb	r3, [r7, #13]
 800975c:	2b01      	cmp	r3, #1
 800975e:	d001      	beq.n	8009764 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8009760:	2301      	movs	r3, #1
 8009762:	e089      	b.n	8009878 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2202      	movs	r2, #2
 8009768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2202      	movs	r2, #2
 8009770:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009774:	e031      	b.n	80097da <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	2b04      	cmp	r3, #4
 800977a:	d110      	bne.n	800979e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800977c:	7bbb      	ldrb	r3, [r7, #14]
 800977e:	2b01      	cmp	r3, #1
 8009780:	d102      	bne.n	8009788 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009782:	7b3b      	ldrb	r3, [r7, #12]
 8009784:	2b01      	cmp	r3, #1
 8009786:	d001      	beq.n	800978c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8009788:	2301      	movs	r3, #1
 800978a:	e075      	b.n	8009878 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2202      	movs	r2, #2
 8009790:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2202      	movs	r2, #2
 8009798:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800979c:	e01d      	b.n	80097da <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800979e:	7bfb      	ldrb	r3, [r7, #15]
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d108      	bne.n	80097b6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80097a4:	7bbb      	ldrb	r3, [r7, #14]
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d105      	bne.n	80097b6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80097aa:	7b7b      	ldrb	r3, [r7, #13]
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d102      	bne.n	80097b6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80097b0:	7b3b      	ldrb	r3, [r7, #12]
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d001      	beq.n	80097ba <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80097b6:	2301      	movs	r3, #1
 80097b8:	e05e      	b.n	8009878 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2202      	movs	r2, #2
 80097be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2202      	movs	r2, #2
 80097c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2202      	movs	r2, #2
 80097ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2202      	movs	r2, #2
 80097d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d003      	beq.n	80097e8 <HAL_TIM_Encoder_Start_IT+0xc4>
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	2b04      	cmp	r3, #4
 80097e4:	d010      	beq.n	8009808 <HAL_TIM_Encoder_Start_IT+0xe4>
 80097e6:	e01f      	b.n	8009828 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2201      	movs	r2, #1
 80097ee:	2100      	movs	r1, #0
 80097f0:	4618      	mov	r0, r3
 80097f2:	f000 ff9b 	bl	800a72c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	68da      	ldr	r2, [r3, #12]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f042 0202 	orr.w	r2, r2, #2
 8009804:	60da      	str	r2, [r3, #12]
      break;
 8009806:	e02e      	b.n	8009866 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	2201      	movs	r2, #1
 800980e:	2104      	movs	r1, #4
 8009810:	4618      	mov	r0, r3
 8009812:	f000 ff8b 	bl	800a72c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	68da      	ldr	r2, [r3, #12]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f042 0204 	orr.w	r2, r2, #4
 8009824:	60da      	str	r2, [r3, #12]
      break;
 8009826:	e01e      	b.n	8009866 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	2201      	movs	r2, #1
 800982e:	2100      	movs	r1, #0
 8009830:	4618      	mov	r0, r3
 8009832:	f000 ff7b 	bl	800a72c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2201      	movs	r2, #1
 800983c:	2104      	movs	r1, #4
 800983e:	4618      	mov	r0, r3
 8009840:	f000 ff74 	bl	800a72c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	68da      	ldr	r2, [r3, #12]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f042 0202 	orr.w	r2, r2, #2
 8009852:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	68da      	ldr	r2, [r3, #12]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f042 0204 	orr.w	r2, r2, #4
 8009862:	60da      	str	r2, [r3, #12]
      break;
 8009864:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f042 0201 	orr.w	r2, r2, #1
 8009874:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009876:	2300      	movs	r3, #0
}
 8009878:	4618      	mov	r0, r3
 800987a:	3710      	adds	r7, #16
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	68db      	ldr	r3, [r3, #12]
 800988e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	691b      	ldr	r3, [r3, #16]
 8009896:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	f003 0302 	and.w	r3, r3, #2
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d020      	beq.n	80098e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	f003 0302 	and.w	r3, r3, #2
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d01b      	beq.n	80098e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f06f 0202 	mvn.w	r2, #2
 80098b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2201      	movs	r2, #1
 80098ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	699b      	ldr	r3, [r3, #24]
 80098c2:	f003 0303 	and.w	r3, r3, #3
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d003      	beq.n	80098d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f7f7 fa06 	bl	8000cdc <HAL_TIM_IC_CaptureCallback>
 80098d0:	e005      	b.n	80098de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 faf2 	bl	8009ebc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 faf9 	bl	8009ed0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2200      	movs	r2, #0
 80098e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	f003 0304 	and.w	r3, r3, #4
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d020      	beq.n	8009930 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f003 0304 	and.w	r3, r3, #4
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d01b      	beq.n	8009930 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f06f 0204 	mvn.w	r2, #4
 8009900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2202      	movs	r2, #2
 8009906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	699b      	ldr	r3, [r3, #24]
 800990e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009912:	2b00      	cmp	r3, #0
 8009914:	d003      	beq.n	800991e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f7f7 f9e0 	bl	8000cdc <HAL_TIM_IC_CaptureCallback>
 800991c:	e005      	b.n	800992a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 facc 	bl	8009ebc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 fad3 	bl	8009ed0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2200      	movs	r2, #0
 800992e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	f003 0308 	and.w	r3, r3, #8
 8009936:	2b00      	cmp	r3, #0
 8009938:	d020      	beq.n	800997c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f003 0308 	and.w	r3, r3, #8
 8009940:	2b00      	cmp	r3, #0
 8009942:	d01b      	beq.n	800997c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f06f 0208 	mvn.w	r2, #8
 800994c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2204      	movs	r2, #4
 8009952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	69db      	ldr	r3, [r3, #28]
 800995a:	f003 0303 	and.w	r3, r3, #3
 800995e:	2b00      	cmp	r3, #0
 8009960:	d003      	beq.n	800996a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f7f7 f9ba 	bl	8000cdc <HAL_TIM_IC_CaptureCallback>
 8009968:	e005      	b.n	8009976 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 faa6 	bl	8009ebc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f000 faad 	bl	8009ed0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2200      	movs	r2, #0
 800997a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	f003 0310 	and.w	r3, r3, #16
 8009982:	2b00      	cmp	r3, #0
 8009984:	d020      	beq.n	80099c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f003 0310 	and.w	r3, r3, #16
 800998c:	2b00      	cmp	r3, #0
 800998e:	d01b      	beq.n	80099c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f06f 0210 	mvn.w	r2, #16
 8009998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2208      	movs	r2, #8
 800999e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	69db      	ldr	r3, [r3, #28]
 80099a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d003      	beq.n	80099b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f7f7 f994 	bl	8000cdc <HAL_TIM_IC_CaptureCallback>
 80099b4:	e005      	b.n	80099c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 fa80 	bl	8009ebc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 fa87 	bl	8009ed0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2200      	movs	r2, #0
 80099c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	f003 0301 	and.w	r3, r3, #1
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d00c      	beq.n	80099ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	f003 0301 	and.w	r3, r3, #1
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d007      	beq.n	80099ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f06f 0201 	mvn.w	r2, #1
 80099e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 fa5e 	bl	8009ea8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d104      	bne.n	8009a00 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d00c      	beq.n	8009a1a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d007      	beq.n	8009a1a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 ff47 	bl	800a8a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d00c      	beq.n	8009a3e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d007      	beq.n	8009a3e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 ff3f 	bl	800a8bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d00c      	beq.n	8009a62 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d007      	beq.n	8009a62 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009a5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 fa41 	bl	8009ee4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	f003 0320 	and.w	r3, r3, #32
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d00c      	beq.n	8009a86 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f003 0320 	and.w	r3, r3, #32
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d007      	beq.n	8009a86 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f06f 0220 	mvn.w	r2, #32
 8009a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 ff07 	bl	800a894 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009a86:	bf00      	nop
 8009a88:	3710      	adds	r7, #16
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
	...

08009a90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b086      	sub	sp, #24
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d101      	bne.n	8009aae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009aaa:	2302      	movs	r3, #2
 8009aac:	e0ff      	b.n	8009cae <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2b14      	cmp	r3, #20
 8009aba:	f200 80f0 	bhi.w	8009c9e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009abe:	a201      	add	r2, pc, #4	@ (adr r2, 8009ac4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac4:	08009b19 	.word	0x08009b19
 8009ac8:	08009c9f 	.word	0x08009c9f
 8009acc:	08009c9f 	.word	0x08009c9f
 8009ad0:	08009c9f 	.word	0x08009c9f
 8009ad4:	08009b59 	.word	0x08009b59
 8009ad8:	08009c9f 	.word	0x08009c9f
 8009adc:	08009c9f 	.word	0x08009c9f
 8009ae0:	08009c9f 	.word	0x08009c9f
 8009ae4:	08009b9b 	.word	0x08009b9b
 8009ae8:	08009c9f 	.word	0x08009c9f
 8009aec:	08009c9f 	.word	0x08009c9f
 8009af0:	08009c9f 	.word	0x08009c9f
 8009af4:	08009bdb 	.word	0x08009bdb
 8009af8:	08009c9f 	.word	0x08009c9f
 8009afc:	08009c9f 	.word	0x08009c9f
 8009b00:	08009c9f 	.word	0x08009c9f
 8009b04:	08009c1d 	.word	0x08009c1d
 8009b08:	08009c9f 	.word	0x08009c9f
 8009b0c:	08009c9f 	.word	0x08009c9f
 8009b10:	08009c9f 	.word	0x08009c9f
 8009b14:	08009c5d 	.word	0x08009c5d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	68b9      	ldr	r1, [r7, #8]
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f000 fa90 	bl	800a044 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	699a      	ldr	r2, [r3, #24]
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f042 0208 	orr.w	r2, r2, #8
 8009b32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	699a      	ldr	r2, [r3, #24]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f022 0204 	bic.w	r2, r2, #4
 8009b42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	6999      	ldr	r1, [r3, #24]
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	691a      	ldr	r2, [r3, #16]
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	430a      	orrs	r2, r1
 8009b54:	619a      	str	r2, [r3, #24]
      break;
 8009b56:	e0a5      	b.n	8009ca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	68b9      	ldr	r1, [r7, #8]
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f000 fb00 	bl	800a164 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	699a      	ldr	r2, [r3, #24]
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009b72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	699a      	ldr	r2, [r3, #24]
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009b82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	6999      	ldr	r1, [r3, #24]
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	691b      	ldr	r3, [r3, #16]
 8009b8e:	021a      	lsls	r2, r3, #8
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	430a      	orrs	r2, r1
 8009b96:	619a      	str	r2, [r3, #24]
      break;
 8009b98:	e084      	b.n	8009ca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	68b9      	ldr	r1, [r7, #8]
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f000 fb69 	bl	800a278 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	69da      	ldr	r2, [r3, #28]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f042 0208 	orr.w	r2, r2, #8
 8009bb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	69da      	ldr	r2, [r3, #28]
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f022 0204 	bic.w	r2, r2, #4
 8009bc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	69d9      	ldr	r1, [r3, #28]
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	691a      	ldr	r2, [r3, #16]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	430a      	orrs	r2, r1
 8009bd6:	61da      	str	r2, [r3, #28]
      break;
 8009bd8:	e064      	b.n	8009ca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	68b9      	ldr	r1, [r7, #8]
 8009be0:	4618      	mov	r0, r3
 8009be2:	f000 fbd1 	bl	800a388 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	69da      	ldr	r2, [r3, #28]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009bf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	69da      	ldr	r2, [r3, #28]
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009c04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	69d9      	ldr	r1, [r3, #28]
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	691b      	ldr	r3, [r3, #16]
 8009c10:	021a      	lsls	r2, r3, #8
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	430a      	orrs	r2, r1
 8009c18:	61da      	str	r2, [r3, #28]
      break;
 8009c1a:	e043      	b.n	8009ca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	68b9      	ldr	r1, [r7, #8]
 8009c22:	4618      	mov	r0, r3
 8009c24:	f000 fc1a 	bl	800a45c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f042 0208 	orr.w	r2, r2, #8
 8009c36:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f022 0204 	bic.w	r2, r2, #4
 8009c46:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	691a      	ldr	r2, [r3, #16]
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	430a      	orrs	r2, r1
 8009c58:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009c5a:	e023      	b.n	8009ca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	68b9      	ldr	r1, [r7, #8]
 8009c62:	4618      	mov	r0, r3
 8009c64:	f000 fc5e 	bl	800a524 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009c76:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009c86:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	691b      	ldr	r3, [r3, #16]
 8009c92:	021a      	lsls	r2, r3, #8
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	430a      	orrs	r2, r1
 8009c9a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009c9c:	e002      	b.n	8009ca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	75fb      	strb	r3, [r7, #23]
      break;
 8009ca2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3718      	adds	r7, #24
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop

08009cb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	d101      	bne.n	8009cd4 <HAL_TIM_ConfigClockSource+0x1c>
 8009cd0:	2302      	movs	r3, #2
 8009cd2:	e0dc      	b.n	8009e8e <HAL_TIM_ConfigClockSource+0x1d6>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2202      	movs	r2, #2
 8009ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	689b      	ldr	r3, [r3, #8]
 8009cea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009cec:	68ba      	ldr	r2, [r7, #8]
 8009cee:	4b6a      	ldr	r3, [pc, #424]	@ (8009e98 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009cf0:	4013      	ands	r3, r2
 8009cf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009cfa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	68ba      	ldr	r2, [r7, #8]
 8009d02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a64      	ldr	r2, [pc, #400]	@ (8009e9c <HAL_TIM_ConfigClockSource+0x1e4>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	f000 80a9 	beq.w	8009e62 <HAL_TIM_ConfigClockSource+0x1aa>
 8009d10:	4a62      	ldr	r2, [pc, #392]	@ (8009e9c <HAL_TIM_ConfigClockSource+0x1e4>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	f200 80ae 	bhi.w	8009e74 <HAL_TIM_ConfigClockSource+0x1bc>
 8009d18:	4a61      	ldr	r2, [pc, #388]	@ (8009ea0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	f000 80a1 	beq.w	8009e62 <HAL_TIM_ConfigClockSource+0x1aa>
 8009d20:	4a5f      	ldr	r2, [pc, #380]	@ (8009ea0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	f200 80a6 	bhi.w	8009e74 <HAL_TIM_ConfigClockSource+0x1bc>
 8009d28:	4a5e      	ldr	r2, [pc, #376]	@ (8009ea4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	f000 8099 	beq.w	8009e62 <HAL_TIM_ConfigClockSource+0x1aa>
 8009d30:	4a5c      	ldr	r2, [pc, #368]	@ (8009ea4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	f200 809e 	bhi.w	8009e74 <HAL_TIM_ConfigClockSource+0x1bc>
 8009d38:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009d3c:	f000 8091 	beq.w	8009e62 <HAL_TIM_ConfigClockSource+0x1aa>
 8009d40:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009d44:	f200 8096 	bhi.w	8009e74 <HAL_TIM_ConfigClockSource+0x1bc>
 8009d48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d4c:	f000 8089 	beq.w	8009e62 <HAL_TIM_ConfigClockSource+0x1aa>
 8009d50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d54:	f200 808e 	bhi.w	8009e74 <HAL_TIM_ConfigClockSource+0x1bc>
 8009d58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d5c:	d03e      	beq.n	8009ddc <HAL_TIM_ConfigClockSource+0x124>
 8009d5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d62:	f200 8087 	bhi.w	8009e74 <HAL_TIM_ConfigClockSource+0x1bc>
 8009d66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d6a:	f000 8086 	beq.w	8009e7a <HAL_TIM_ConfigClockSource+0x1c2>
 8009d6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d72:	d87f      	bhi.n	8009e74 <HAL_TIM_ConfigClockSource+0x1bc>
 8009d74:	2b70      	cmp	r3, #112	@ 0x70
 8009d76:	d01a      	beq.n	8009dae <HAL_TIM_ConfigClockSource+0xf6>
 8009d78:	2b70      	cmp	r3, #112	@ 0x70
 8009d7a:	d87b      	bhi.n	8009e74 <HAL_TIM_ConfigClockSource+0x1bc>
 8009d7c:	2b60      	cmp	r3, #96	@ 0x60
 8009d7e:	d050      	beq.n	8009e22 <HAL_TIM_ConfigClockSource+0x16a>
 8009d80:	2b60      	cmp	r3, #96	@ 0x60
 8009d82:	d877      	bhi.n	8009e74 <HAL_TIM_ConfigClockSource+0x1bc>
 8009d84:	2b50      	cmp	r3, #80	@ 0x50
 8009d86:	d03c      	beq.n	8009e02 <HAL_TIM_ConfigClockSource+0x14a>
 8009d88:	2b50      	cmp	r3, #80	@ 0x50
 8009d8a:	d873      	bhi.n	8009e74 <HAL_TIM_ConfigClockSource+0x1bc>
 8009d8c:	2b40      	cmp	r3, #64	@ 0x40
 8009d8e:	d058      	beq.n	8009e42 <HAL_TIM_ConfigClockSource+0x18a>
 8009d90:	2b40      	cmp	r3, #64	@ 0x40
 8009d92:	d86f      	bhi.n	8009e74 <HAL_TIM_ConfigClockSource+0x1bc>
 8009d94:	2b30      	cmp	r3, #48	@ 0x30
 8009d96:	d064      	beq.n	8009e62 <HAL_TIM_ConfigClockSource+0x1aa>
 8009d98:	2b30      	cmp	r3, #48	@ 0x30
 8009d9a:	d86b      	bhi.n	8009e74 <HAL_TIM_ConfigClockSource+0x1bc>
 8009d9c:	2b20      	cmp	r3, #32
 8009d9e:	d060      	beq.n	8009e62 <HAL_TIM_ConfigClockSource+0x1aa>
 8009da0:	2b20      	cmp	r3, #32
 8009da2:	d867      	bhi.n	8009e74 <HAL_TIM_ConfigClockSource+0x1bc>
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d05c      	beq.n	8009e62 <HAL_TIM_ConfigClockSource+0x1aa>
 8009da8:	2b10      	cmp	r3, #16
 8009daa:	d05a      	beq.n	8009e62 <HAL_TIM_ConfigClockSource+0x1aa>
 8009dac:	e062      	b.n	8009e74 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009dbe:	f000 fc95 	bl	800a6ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	689b      	ldr	r3, [r3, #8]
 8009dc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009dd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	68ba      	ldr	r2, [r7, #8]
 8009dd8:	609a      	str	r2, [r3, #8]
      break;
 8009dda:	e04f      	b.n	8009e7c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009dec:	f000 fc7e 	bl	800a6ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	689a      	ldr	r2, [r3, #8]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009dfe:	609a      	str	r2, [r3, #8]
      break;
 8009e00:	e03c      	b.n	8009e7c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e0e:	461a      	mov	r2, r3
 8009e10:	f000 fbee 	bl	800a5f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	2150      	movs	r1, #80	@ 0x50
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f000 fc48 	bl	800a6b0 <TIM_ITRx_SetConfig>
      break;
 8009e20:	e02c      	b.n	8009e7c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e2e:	461a      	mov	r2, r3
 8009e30:	f000 fc0d 	bl	800a64e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	2160      	movs	r1, #96	@ 0x60
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f000 fc38 	bl	800a6b0 <TIM_ITRx_SetConfig>
      break;
 8009e40:	e01c      	b.n	8009e7c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e4e:	461a      	mov	r2, r3
 8009e50:	f000 fbce 	bl	800a5f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2140      	movs	r1, #64	@ 0x40
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f000 fc28 	bl	800a6b0 <TIM_ITRx_SetConfig>
      break;
 8009e60:	e00c      	b.n	8009e7c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681a      	ldr	r2, [r3, #0]
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	4610      	mov	r0, r2
 8009e6e:	f000 fc1f 	bl	800a6b0 <TIM_ITRx_SetConfig>
      break;
 8009e72:	e003      	b.n	8009e7c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009e74:	2301      	movs	r3, #1
 8009e76:	73fb      	strb	r3, [r7, #15]
      break;
 8009e78:	e000      	b.n	8009e7c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009e7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2200      	movs	r2, #0
 8009e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3710      	adds	r7, #16
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	ffceff88 	.word	0xffceff88
 8009e9c:	00100040 	.word	0x00100040
 8009ea0:	00100030 	.word	0x00100030
 8009ea4:	00100020 	.word	0x00100020

08009ea8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b083      	sub	sp, #12
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009eb0:	bf00      	nop
 8009eb2:	370c      	adds	r7, #12
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr

08009ebc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b083      	sub	sp, #12
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009ec4:	bf00      	nop
 8009ec6:	370c      	adds	r7, #12
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr

08009ed0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009ed8:	bf00      	nop
 8009eda:	370c      	adds	r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr

08009ee4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009eec:	bf00      	nop
 8009eee:	370c      	adds	r7, #12
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr

08009ef8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b085      	sub	sp, #20
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	4a46      	ldr	r2, [pc, #280]	@ (800a024 <TIM_Base_SetConfig+0x12c>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d013      	beq.n	8009f38 <TIM_Base_SetConfig+0x40>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f16:	d00f      	beq.n	8009f38 <TIM_Base_SetConfig+0x40>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	4a43      	ldr	r2, [pc, #268]	@ (800a028 <TIM_Base_SetConfig+0x130>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d00b      	beq.n	8009f38 <TIM_Base_SetConfig+0x40>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	4a42      	ldr	r2, [pc, #264]	@ (800a02c <TIM_Base_SetConfig+0x134>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d007      	beq.n	8009f38 <TIM_Base_SetConfig+0x40>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	4a41      	ldr	r2, [pc, #260]	@ (800a030 <TIM_Base_SetConfig+0x138>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d003      	beq.n	8009f38 <TIM_Base_SetConfig+0x40>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	4a40      	ldr	r2, [pc, #256]	@ (800a034 <TIM_Base_SetConfig+0x13c>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d108      	bne.n	8009f4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	4313      	orrs	r3, r2
 8009f48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	4a35      	ldr	r2, [pc, #212]	@ (800a024 <TIM_Base_SetConfig+0x12c>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d01f      	beq.n	8009f92 <TIM_Base_SetConfig+0x9a>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f58:	d01b      	beq.n	8009f92 <TIM_Base_SetConfig+0x9a>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	4a32      	ldr	r2, [pc, #200]	@ (800a028 <TIM_Base_SetConfig+0x130>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d017      	beq.n	8009f92 <TIM_Base_SetConfig+0x9a>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	4a31      	ldr	r2, [pc, #196]	@ (800a02c <TIM_Base_SetConfig+0x134>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d013      	beq.n	8009f92 <TIM_Base_SetConfig+0x9a>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	4a30      	ldr	r2, [pc, #192]	@ (800a030 <TIM_Base_SetConfig+0x138>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d00f      	beq.n	8009f92 <TIM_Base_SetConfig+0x9a>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	4a2f      	ldr	r2, [pc, #188]	@ (800a034 <TIM_Base_SetConfig+0x13c>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d00b      	beq.n	8009f92 <TIM_Base_SetConfig+0x9a>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	4a2e      	ldr	r2, [pc, #184]	@ (800a038 <TIM_Base_SetConfig+0x140>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d007      	beq.n	8009f92 <TIM_Base_SetConfig+0x9a>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	4a2d      	ldr	r2, [pc, #180]	@ (800a03c <TIM_Base_SetConfig+0x144>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d003      	beq.n	8009f92 <TIM_Base_SetConfig+0x9a>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	4a2c      	ldr	r2, [pc, #176]	@ (800a040 <TIM_Base_SetConfig+0x148>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d108      	bne.n	8009fa4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009f98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	68db      	ldr	r3, [r3, #12]
 8009f9e:	68fa      	ldr	r2, [r7, #12]
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	695b      	ldr	r3, [r3, #20]
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	68fa      	ldr	r2, [r7, #12]
 8009fb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	689a      	ldr	r2, [r3, #8]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	681a      	ldr	r2, [r3, #0]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	4a16      	ldr	r2, [pc, #88]	@ (800a024 <TIM_Base_SetConfig+0x12c>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d00f      	beq.n	8009ff0 <TIM_Base_SetConfig+0xf8>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	4a18      	ldr	r2, [pc, #96]	@ (800a034 <TIM_Base_SetConfig+0x13c>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d00b      	beq.n	8009ff0 <TIM_Base_SetConfig+0xf8>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	4a17      	ldr	r2, [pc, #92]	@ (800a038 <TIM_Base_SetConfig+0x140>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d007      	beq.n	8009ff0 <TIM_Base_SetConfig+0xf8>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	4a16      	ldr	r2, [pc, #88]	@ (800a03c <TIM_Base_SetConfig+0x144>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d003      	beq.n	8009ff0 <TIM_Base_SetConfig+0xf8>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	4a15      	ldr	r2, [pc, #84]	@ (800a040 <TIM_Base_SetConfig+0x148>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d103      	bne.n	8009ff8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	691a      	ldr	r2, [r3, #16]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	691b      	ldr	r3, [r3, #16]
 800a002:	f003 0301 	and.w	r3, r3, #1
 800a006:	2b01      	cmp	r3, #1
 800a008:	d105      	bne.n	800a016 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	691b      	ldr	r3, [r3, #16]
 800a00e:	f023 0201 	bic.w	r2, r3, #1
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	611a      	str	r2, [r3, #16]
  }
}
 800a016:	bf00      	nop
 800a018:	3714      	adds	r7, #20
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr
 800a022:	bf00      	nop
 800a024:	40010000 	.word	0x40010000
 800a028:	40000400 	.word	0x40000400
 800a02c:	40000800 	.word	0x40000800
 800a030:	40000c00 	.word	0x40000c00
 800a034:	40010400 	.word	0x40010400
 800a038:	40014000 	.word	0x40014000
 800a03c:	40014400 	.word	0x40014400
 800a040:	40014800 	.word	0x40014800

0800a044 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a044:	b480      	push	{r7}
 800a046:	b087      	sub	sp, #28
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6a1b      	ldr	r3, [r3, #32]
 800a052:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6a1b      	ldr	r3, [r3, #32]
 800a058:	f023 0201 	bic.w	r2, r3, #1
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	699b      	ldr	r3, [r3, #24]
 800a06a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a06c:	68fa      	ldr	r2, [r7, #12]
 800a06e:	4b37      	ldr	r3, [pc, #220]	@ (800a14c <TIM_OC1_SetConfig+0x108>)
 800a070:	4013      	ands	r3, r2
 800a072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f023 0303 	bic.w	r3, r3, #3
 800a07a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	68fa      	ldr	r2, [r7, #12]
 800a082:	4313      	orrs	r3, r2
 800a084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	f023 0302 	bic.w	r3, r3, #2
 800a08c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	689b      	ldr	r3, [r3, #8]
 800a092:	697a      	ldr	r2, [r7, #20]
 800a094:	4313      	orrs	r3, r2
 800a096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	4a2d      	ldr	r2, [pc, #180]	@ (800a150 <TIM_OC1_SetConfig+0x10c>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d00f      	beq.n	800a0c0 <TIM_OC1_SetConfig+0x7c>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	4a2c      	ldr	r2, [pc, #176]	@ (800a154 <TIM_OC1_SetConfig+0x110>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d00b      	beq.n	800a0c0 <TIM_OC1_SetConfig+0x7c>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	4a2b      	ldr	r2, [pc, #172]	@ (800a158 <TIM_OC1_SetConfig+0x114>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d007      	beq.n	800a0c0 <TIM_OC1_SetConfig+0x7c>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	4a2a      	ldr	r2, [pc, #168]	@ (800a15c <TIM_OC1_SetConfig+0x118>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d003      	beq.n	800a0c0 <TIM_OC1_SetConfig+0x7c>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	4a29      	ldr	r2, [pc, #164]	@ (800a160 <TIM_OC1_SetConfig+0x11c>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d10c      	bne.n	800a0da <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	f023 0308 	bic.w	r3, r3, #8
 800a0c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	68db      	ldr	r3, [r3, #12]
 800a0cc:	697a      	ldr	r2, [r7, #20]
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	f023 0304 	bic.w	r3, r3, #4
 800a0d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	4a1c      	ldr	r2, [pc, #112]	@ (800a150 <TIM_OC1_SetConfig+0x10c>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d00f      	beq.n	800a102 <TIM_OC1_SetConfig+0xbe>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	4a1b      	ldr	r2, [pc, #108]	@ (800a154 <TIM_OC1_SetConfig+0x110>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d00b      	beq.n	800a102 <TIM_OC1_SetConfig+0xbe>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	4a1a      	ldr	r2, [pc, #104]	@ (800a158 <TIM_OC1_SetConfig+0x114>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d007      	beq.n	800a102 <TIM_OC1_SetConfig+0xbe>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	4a19      	ldr	r2, [pc, #100]	@ (800a15c <TIM_OC1_SetConfig+0x118>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d003      	beq.n	800a102 <TIM_OC1_SetConfig+0xbe>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	4a18      	ldr	r2, [pc, #96]	@ (800a160 <TIM_OC1_SetConfig+0x11c>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d111      	bne.n	800a126 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a108:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a110:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	695b      	ldr	r3, [r3, #20]
 800a116:	693a      	ldr	r2, [r7, #16]
 800a118:	4313      	orrs	r3, r2
 800a11a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	699b      	ldr	r3, [r3, #24]
 800a120:	693a      	ldr	r2, [r7, #16]
 800a122:	4313      	orrs	r3, r2
 800a124:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	693a      	ldr	r2, [r7, #16]
 800a12a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	68fa      	ldr	r2, [r7, #12]
 800a130:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	685a      	ldr	r2, [r3, #4]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	697a      	ldr	r2, [r7, #20]
 800a13e:	621a      	str	r2, [r3, #32]
}
 800a140:	bf00      	nop
 800a142:	371c      	adds	r7, #28
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr
 800a14c:	fffeff8f 	.word	0xfffeff8f
 800a150:	40010000 	.word	0x40010000
 800a154:	40010400 	.word	0x40010400
 800a158:	40014000 	.word	0x40014000
 800a15c:	40014400 	.word	0x40014400
 800a160:	40014800 	.word	0x40014800

0800a164 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a164:	b480      	push	{r7}
 800a166:	b087      	sub	sp, #28
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6a1b      	ldr	r3, [r3, #32]
 800a172:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6a1b      	ldr	r3, [r3, #32]
 800a178:	f023 0210 	bic.w	r2, r3, #16
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	699b      	ldr	r3, [r3, #24]
 800a18a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a18c:	68fa      	ldr	r2, [r7, #12]
 800a18e:	4b34      	ldr	r3, [pc, #208]	@ (800a260 <TIM_OC2_SetConfig+0xfc>)
 800a190:	4013      	ands	r3, r2
 800a192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a19a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	021b      	lsls	r3, r3, #8
 800a1a2:	68fa      	ldr	r2, [r7, #12]
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	f023 0320 	bic.w	r3, r3, #32
 800a1ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	689b      	ldr	r3, [r3, #8]
 800a1b4:	011b      	lsls	r3, r3, #4
 800a1b6:	697a      	ldr	r2, [r7, #20]
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	4a29      	ldr	r2, [pc, #164]	@ (800a264 <TIM_OC2_SetConfig+0x100>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d003      	beq.n	800a1cc <TIM_OC2_SetConfig+0x68>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	4a28      	ldr	r2, [pc, #160]	@ (800a268 <TIM_OC2_SetConfig+0x104>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d10d      	bne.n	800a1e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a1d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	68db      	ldr	r3, [r3, #12]
 800a1d8:	011b      	lsls	r3, r3, #4
 800a1da:	697a      	ldr	r2, [r7, #20]
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a1e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	4a1e      	ldr	r2, [pc, #120]	@ (800a264 <TIM_OC2_SetConfig+0x100>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d00f      	beq.n	800a210 <TIM_OC2_SetConfig+0xac>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4a1d      	ldr	r2, [pc, #116]	@ (800a268 <TIM_OC2_SetConfig+0x104>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d00b      	beq.n	800a210 <TIM_OC2_SetConfig+0xac>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	4a1c      	ldr	r2, [pc, #112]	@ (800a26c <TIM_OC2_SetConfig+0x108>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d007      	beq.n	800a210 <TIM_OC2_SetConfig+0xac>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	4a1b      	ldr	r2, [pc, #108]	@ (800a270 <TIM_OC2_SetConfig+0x10c>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d003      	beq.n	800a210 <TIM_OC2_SetConfig+0xac>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	4a1a      	ldr	r2, [pc, #104]	@ (800a274 <TIM_OC2_SetConfig+0x110>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d113      	bne.n	800a238 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a216:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a21e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	695b      	ldr	r3, [r3, #20]
 800a224:	009b      	lsls	r3, r3, #2
 800a226:	693a      	ldr	r2, [r7, #16]
 800a228:	4313      	orrs	r3, r2
 800a22a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	699b      	ldr	r3, [r3, #24]
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	693a      	ldr	r2, [r7, #16]
 800a234:	4313      	orrs	r3, r2
 800a236:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	693a      	ldr	r2, [r7, #16]
 800a23c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	68fa      	ldr	r2, [r7, #12]
 800a242:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	685a      	ldr	r2, [r3, #4]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	697a      	ldr	r2, [r7, #20]
 800a250:	621a      	str	r2, [r3, #32]
}
 800a252:	bf00      	nop
 800a254:	371c      	adds	r7, #28
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr
 800a25e:	bf00      	nop
 800a260:	feff8fff 	.word	0xfeff8fff
 800a264:	40010000 	.word	0x40010000
 800a268:	40010400 	.word	0x40010400
 800a26c:	40014000 	.word	0x40014000
 800a270:	40014400 	.word	0x40014400
 800a274:	40014800 	.word	0x40014800

0800a278 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a278:	b480      	push	{r7}
 800a27a:	b087      	sub	sp, #28
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6a1b      	ldr	r3, [r3, #32]
 800a286:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6a1b      	ldr	r3, [r3, #32]
 800a28c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	69db      	ldr	r3, [r3, #28]
 800a29e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a2a0:	68fa      	ldr	r2, [r7, #12]
 800a2a2:	4b33      	ldr	r3, [pc, #204]	@ (800a370 <TIM_OC3_SetConfig+0xf8>)
 800a2a4:	4013      	ands	r3, r2
 800a2a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f023 0303 	bic.w	r3, r3, #3
 800a2ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	68fa      	ldr	r2, [r7, #12]
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a2c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	021b      	lsls	r3, r3, #8
 800a2c8:	697a      	ldr	r2, [r7, #20]
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	4a28      	ldr	r2, [pc, #160]	@ (800a374 <TIM_OC3_SetConfig+0xfc>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d003      	beq.n	800a2de <TIM_OC3_SetConfig+0x66>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	4a27      	ldr	r2, [pc, #156]	@ (800a378 <TIM_OC3_SetConfig+0x100>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d10d      	bne.n	800a2fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a2e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	021b      	lsls	r3, r3, #8
 800a2ec:	697a      	ldr	r2, [r7, #20]
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a2f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	4a1d      	ldr	r2, [pc, #116]	@ (800a374 <TIM_OC3_SetConfig+0xfc>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d00f      	beq.n	800a322 <TIM_OC3_SetConfig+0xaa>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	4a1c      	ldr	r2, [pc, #112]	@ (800a378 <TIM_OC3_SetConfig+0x100>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d00b      	beq.n	800a322 <TIM_OC3_SetConfig+0xaa>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	4a1b      	ldr	r2, [pc, #108]	@ (800a37c <TIM_OC3_SetConfig+0x104>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d007      	beq.n	800a322 <TIM_OC3_SetConfig+0xaa>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	4a1a      	ldr	r2, [pc, #104]	@ (800a380 <TIM_OC3_SetConfig+0x108>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d003      	beq.n	800a322 <TIM_OC3_SetConfig+0xaa>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	4a19      	ldr	r2, [pc, #100]	@ (800a384 <TIM_OC3_SetConfig+0x10c>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d113      	bne.n	800a34a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a328:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a330:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	695b      	ldr	r3, [r3, #20]
 800a336:	011b      	lsls	r3, r3, #4
 800a338:	693a      	ldr	r2, [r7, #16]
 800a33a:	4313      	orrs	r3, r2
 800a33c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	699b      	ldr	r3, [r3, #24]
 800a342:	011b      	lsls	r3, r3, #4
 800a344:	693a      	ldr	r2, [r7, #16]
 800a346:	4313      	orrs	r3, r2
 800a348:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	693a      	ldr	r2, [r7, #16]
 800a34e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	68fa      	ldr	r2, [r7, #12]
 800a354:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	685a      	ldr	r2, [r3, #4]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	697a      	ldr	r2, [r7, #20]
 800a362:	621a      	str	r2, [r3, #32]
}
 800a364:	bf00      	nop
 800a366:	371c      	adds	r7, #28
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr
 800a370:	fffeff8f 	.word	0xfffeff8f
 800a374:	40010000 	.word	0x40010000
 800a378:	40010400 	.word	0x40010400
 800a37c:	40014000 	.word	0x40014000
 800a380:	40014400 	.word	0x40014400
 800a384:	40014800 	.word	0x40014800

0800a388 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a388:	b480      	push	{r7}
 800a38a:	b087      	sub	sp, #28
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6a1b      	ldr	r3, [r3, #32]
 800a396:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6a1b      	ldr	r3, [r3, #32]
 800a39c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	69db      	ldr	r3, [r3, #28]
 800a3ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a3b0:	68fa      	ldr	r2, [r7, #12]
 800a3b2:	4b24      	ldr	r3, [pc, #144]	@ (800a444 <TIM_OC4_SetConfig+0xbc>)
 800a3b4:	4013      	ands	r3, r2
 800a3b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a3be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	021b      	lsls	r3, r3, #8
 800a3c6:	68fa      	ldr	r2, [r7, #12]
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a3d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	689b      	ldr	r3, [r3, #8]
 800a3d8:	031b      	lsls	r3, r3, #12
 800a3da:	693a      	ldr	r2, [r7, #16]
 800a3dc:	4313      	orrs	r3, r2
 800a3de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	4a19      	ldr	r2, [pc, #100]	@ (800a448 <TIM_OC4_SetConfig+0xc0>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d00f      	beq.n	800a408 <TIM_OC4_SetConfig+0x80>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	4a18      	ldr	r2, [pc, #96]	@ (800a44c <TIM_OC4_SetConfig+0xc4>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d00b      	beq.n	800a408 <TIM_OC4_SetConfig+0x80>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	4a17      	ldr	r2, [pc, #92]	@ (800a450 <TIM_OC4_SetConfig+0xc8>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d007      	beq.n	800a408 <TIM_OC4_SetConfig+0x80>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	4a16      	ldr	r2, [pc, #88]	@ (800a454 <TIM_OC4_SetConfig+0xcc>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d003      	beq.n	800a408 <TIM_OC4_SetConfig+0x80>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	4a15      	ldr	r2, [pc, #84]	@ (800a458 <TIM_OC4_SetConfig+0xd0>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d109      	bne.n	800a41c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a40e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	695b      	ldr	r3, [r3, #20]
 800a414:	019b      	lsls	r3, r3, #6
 800a416:	697a      	ldr	r2, [r7, #20]
 800a418:	4313      	orrs	r3, r2
 800a41a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	697a      	ldr	r2, [r7, #20]
 800a420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	68fa      	ldr	r2, [r7, #12]
 800a426:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	685a      	ldr	r2, [r3, #4]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	693a      	ldr	r2, [r7, #16]
 800a434:	621a      	str	r2, [r3, #32]
}
 800a436:	bf00      	nop
 800a438:	371c      	adds	r7, #28
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr
 800a442:	bf00      	nop
 800a444:	feff8fff 	.word	0xfeff8fff
 800a448:	40010000 	.word	0x40010000
 800a44c:	40010400 	.word	0x40010400
 800a450:	40014000 	.word	0x40014000
 800a454:	40014400 	.word	0x40014400
 800a458:	40014800 	.word	0x40014800

0800a45c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b087      	sub	sp, #28
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6a1b      	ldr	r3, [r3, #32]
 800a46a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6a1b      	ldr	r3, [r3, #32]
 800a470:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a484:	68fa      	ldr	r2, [r7, #12]
 800a486:	4b21      	ldr	r3, [pc, #132]	@ (800a50c <TIM_OC5_SetConfig+0xb0>)
 800a488:	4013      	ands	r3, r2
 800a48a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	68fa      	ldr	r2, [r7, #12]
 800a492:	4313      	orrs	r3, r2
 800a494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a49c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	689b      	ldr	r3, [r3, #8]
 800a4a2:	041b      	lsls	r3, r3, #16
 800a4a4:	693a      	ldr	r2, [r7, #16]
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	4a18      	ldr	r2, [pc, #96]	@ (800a510 <TIM_OC5_SetConfig+0xb4>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d00f      	beq.n	800a4d2 <TIM_OC5_SetConfig+0x76>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	4a17      	ldr	r2, [pc, #92]	@ (800a514 <TIM_OC5_SetConfig+0xb8>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d00b      	beq.n	800a4d2 <TIM_OC5_SetConfig+0x76>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	4a16      	ldr	r2, [pc, #88]	@ (800a518 <TIM_OC5_SetConfig+0xbc>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d007      	beq.n	800a4d2 <TIM_OC5_SetConfig+0x76>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	4a15      	ldr	r2, [pc, #84]	@ (800a51c <TIM_OC5_SetConfig+0xc0>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d003      	beq.n	800a4d2 <TIM_OC5_SetConfig+0x76>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	4a14      	ldr	r2, [pc, #80]	@ (800a520 <TIM_OC5_SetConfig+0xc4>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d109      	bne.n	800a4e6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a4d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	695b      	ldr	r3, [r3, #20]
 800a4de:	021b      	lsls	r3, r3, #8
 800a4e0:	697a      	ldr	r2, [r7, #20]
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	697a      	ldr	r2, [r7, #20]
 800a4ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	68fa      	ldr	r2, [r7, #12]
 800a4f0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	685a      	ldr	r2, [r3, #4]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	693a      	ldr	r2, [r7, #16]
 800a4fe:	621a      	str	r2, [r3, #32]
}
 800a500:	bf00      	nop
 800a502:	371c      	adds	r7, #28
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr
 800a50c:	fffeff8f 	.word	0xfffeff8f
 800a510:	40010000 	.word	0x40010000
 800a514:	40010400 	.word	0x40010400
 800a518:	40014000 	.word	0x40014000
 800a51c:	40014400 	.word	0x40014400
 800a520:	40014800 	.word	0x40014800

0800a524 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a524:	b480      	push	{r7}
 800a526:	b087      	sub	sp, #28
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6a1b      	ldr	r3, [r3, #32]
 800a532:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6a1b      	ldr	r3, [r3, #32]
 800a538:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a54a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a54c:	68fa      	ldr	r2, [r7, #12]
 800a54e:	4b22      	ldr	r3, [pc, #136]	@ (800a5d8 <TIM_OC6_SetConfig+0xb4>)
 800a550:	4013      	ands	r3, r2
 800a552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	021b      	lsls	r3, r3, #8
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	4313      	orrs	r3, r2
 800a55e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a566:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	051b      	lsls	r3, r3, #20
 800a56e:	693a      	ldr	r2, [r7, #16]
 800a570:	4313      	orrs	r3, r2
 800a572:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	4a19      	ldr	r2, [pc, #100]	@ (800a5dc <TIM_OC6_SetConfig+0xb8>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d00f      	beq.n	800a59c <TIM_OC6_SetConfig+0x78>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	4a18      	ldr	r2, [pc, #96]	@ (800a5e0 <TIM_OC6_SetConfig+0xbc>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d00b      	beq.n	800a59c <TIM_OC6_SetConfig+0x78>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	4a17      	ldr	r2, [pc, #92]	@ (800a5e4 <TIM_OC6_SetConfig+0xc0>)
 800a588:	4293      	cmp	r3, r2
 800a58a:	d007      	beq.n	800a59c <TIM_OC6_SetConfig+0x78>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	4a16      	ldr	r2, [pc, #88]	@ (800a5e8 <TIM_OC6_SetConfig+0xc4>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d003      	beq.n	800a59c <TIM_OC6_SetConfig+0x78>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	4a15      	ldr	r2, [pc, #84]	@ (800a5ec <TIM_OC6_SetConfig+0xc8>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	d109      	bne.n	800a5b0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a5a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	695b      	ldr	r3, [r3, #20]
 800a5a8:	029b      	lsls	r3, r3, #10
 800a5aa:	697a      	ldr	r2, [r7, #20]
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	697a      	ldr	r2, [r7, #20]
 800a5b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	68fa      	ldr	r2, [r7, #12]
 800a5ba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	685a      	ldr	r2, [r3, #4]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	693a      	ldr	r2, [r7, #16]
 800a5c8:	621a      	str	r2, [r3, #32]
}
 800a5ca:	bf00      	nop
 800a5cc:	371c      	adds	r7, #28
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d4:	4770      	bx	lr
 800a5d6:	bf00      	nop
 800a5d8:	feff8fff 	.word	0xfeff8fff
 800a5dc:	40010000 	.word	0x40010000
 800a5e0:	40010400 	.word	0x40010400
 800a5e4:	40014000 	.word	0x40014000
 800a5e8:	40014400 	.word	0x40014400
 800a5ec:	40014800 	.word	0x40014800

0800a5f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b087      	sub	sp, #28
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	60f8      	str	r0, [r7, #12]
 800a5f8:	60b9      	str	r1, [r7, #8]
 800a5fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	6a1b      	ldr	r3, [r3, #32]
 800a600:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	6a1b      	ldr	r3, [r3, #32]
 800a606:	f023 0201 	bic.w	r2, r3, #1
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	699b      	ldr	r3, [r3, #24]
 800a612:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a61a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	011b      	lsls	r3, r3, #4
 800a620:	693a      	ldr	r2, [r7, #16]
 800a622:	4313      	orrs	r3, r2
 800a624:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	f023 030a 	bic.w	r3, r3, #10
 800a62c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a62e:	697a      	ldr	r2, [r7, #20]
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	4313      	orrs	r3, r2
 800a634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	693a      	ldr	r2, [r7, #16]
 800a63a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	697a      	ldr	r2, [r7, #20]
 800a640:	621a      	str	r2, [r3, #32]
}
 800a642:	bf00      	nop
 800a644:	371c      	adds	r7, #28
 800a646:	46bd      	mov	sp, r7
 800a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64c:	4770      	bx	lr

0800a64e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a64e:	b480      	push	{r7}
 800a650:	b087      	sub	sp, #28
 800a652:	af00      	add	r7, sp, #0
 800a654:	60f8      	str	r0, [r7, #12]
 800a656:	60b9      	str	r1, [r7, #8]
 800a658:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	6a1b      	ldr	r3, [r3, #32]
 800a65e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	6a1b      	ldr	r3, [r3, #32]
 800a664:	f023 0210 	bic.w	r2, r3, #16
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	699b      	ldr	r3, [r3, #24]
 800a670:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a678:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	031b      	lsls	r3, r3, #12
 800a67e:	693a      	ldr	r2, [r7, #16]
 800a680:	4313      	orrs	r3, r2
 800a682:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a68a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	011b      	lsls	r3, r3, #4
 800a690:	697a      	ldr	r2, [r7, #20]
 800a692:	4313      	orrs	r3, r2
 800a694:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	693a      	ldr	r2, [r7, #16]
 800a69a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	697a      	ldr	r2, [r7, #20]
 800a6a0:	621a      	str	r2, [r3, #32]
}
 800a6a2:	bf00      	nop
 800a6a4:	371c      	adds	r7, #28
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr
	...

0800a6b0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b085      	sub	sp, #20
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	689b      	ldr	r3, [r3, #8]
 800a6be:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a6c0:	68fa      	ldr	r2, [r7, #12]
 800a6c2:	4b09      	ldr	r3, [pc, #36]	@ (800a6e8 <TIM_ITRx_SetConfig+0x38>)
 800a6c4:	4013      	ands	r3, r2
 800a6c6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a6c8:	683a      	ldr	r2, [r7, #0]
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	4313      	orrs	r3, r2
 800a6ce:	f043 0307 	orr.w	r3, r3, #7
 800a6d2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	68fa      	ldr	r2, [r7, #12]
 800a6d8:	609a      	str	r2, [r3, #8]
}
 800a6da:	bf00      	nop
 800a6dc:	3714      	adds	r7, #20
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr
 800a6e6:	bf00      	nop
 800a6e8:	ffcfff8f 	.word	0xffcfff8f

0800a6ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b087      	sub	sp, #28
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	60f8      	str	r0, [r7, #12]
 800a6f4:	60b9      	str	r1, [r7, #8]
 800a6f6:	607a      	str	r2, [r7, #4]
 800a6f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	689b      	ldr	r3, [r3, #8]
 800a6fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a706:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	021a      	lsls	r2, r3, #8
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	431a      	orrs	r2, r3
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	4313      	orrs	r3, r2
 800a714:	697a      	ldr	r2, [r7, #20]
 800a716:	4313      	orrs	r3, r2
 800a718:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	697a      	ldr	r2, [r7, #20]
 800a71e:	609a      	str	r2, [r3, #8]
}
 800a720:	bf00      	nop
 800a722:	371c      	adds	r7, #28
 800a724:	46bd      	mov	sp, r7
 800a726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72a:	4770      	bx	lr

0800a72c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b087      	sub	sp, #28
 800a730:	af00      	add	r7, sp, #0
 800a732:	60f8      	str	r0, [r7, #12]
 800a734:	60b9      	str	r1, [r7, #8]
 800a736:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	f003 031f 	and.w	r3, r3, #31
 800a73e:	2201      	movs	r2, #1
 800a740:	fa02 f303 	lsl.w	r3, r2, r3
 800a744:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	6a1a      	ldr	r2, [r3, #32]
 800a74a:	697b      	ldr	r3, [r7, #20]
 800a74c:	43db      	mvns	r3, r3
 800a74e:	401a      	ands	r2, r3
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	6a1a      	ldr	r2, [r3, #32]
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	f003 031f 	and.w	r3, r3, #31
 800a75e:	6879      	ldr	r1, [r7, #4]
 800a760:	fa01 f303 	lsl.w	r3, r1, r3
 800a764:	431a      	orrs	r2, r3
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	621a      	str	r2, [r3, #32]
}
 800a76a:	bf00      	nop
 800a76c:	371c      	adds	r7, #28
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr
	...

0800a778 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a778:	b480      	push	{r7}
 800a77a:	b085      	sub	sp, #20
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a788:	2b01      	cmp	r3, #1
 800a78a:	d101      	bne.n	800a790 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a78c:	2302      	movs	r3, #2
 800a78e:	e06d      	b.n	800a86c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2201      	movs	r2, #1
 800a794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2202      	movs	r2, #2
 800a79c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	685b      	ldr	r3, [r3, #4]
 800a7a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	689b      	ldr	r3, [r3, #8]
 800a7ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4a30      	ldr	r2, [pc, #192]	@ (800a878 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d004      	beq.n	800a7c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4a2f      	ldr	r2, [pc, #188]	@ (800a87c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d108      	bne.n	800a7d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a7ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	68fa      	ldr	r2, [r7, #12]
 800a7d2:	4313      	orrs	r3, r2
 800a7d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	68fa      	ldr	r2, [r7, #12]
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	68fa      	ldr	r2, [r7, #12]
 800a7ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	4a20      	ldr	r2, [pc, #128]	@ (800a878 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d022      	beq.n	800a840 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a802:	d01d      	beq.n	800a840 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	4a1d      	ldr	r2, [pc, #116]	@ (800a880 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d018      	beq.n	800a840 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	4a1c      	ldr	r2, [pc, #112]	@ (800a884 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d013      	beq.n	800a840 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4a1a      	ldr	r2, [pc, #104]	@ (800a888 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d00e      	beq.n	800a840 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4a15      	ldr	r2, [pc, #84]	@ (800a87c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d009      	beq.n	800a840 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4a16      	ldr	r2, [pc, #88]	@ (800a88c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d004      	beq.n	800a840 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a15      	ldr	r2, [pc, #84]	@ (800a890 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d10c      	bne.n	800a85a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a846:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	689b      	ldr	r3, [r3, #8]
 800a84c:	68ba      	ldr	r2, [r7, #8]
 800a84e:	4313      	orrs	r3, r2
 800a850:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	68ba      	ldr	r2, [r7, #8]
 800a858:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2201      	movs	r2, #1
 800a85e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2200      	movs	r2, #0
 800a866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a86a:	2300      	movs	r3, #0
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3714      	adds	r7, #20
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr
 800a878:	40010000 	.word	0x40010000
 800a87c:	40010400 	.word	0x40010400
 800a880:	40000400 	.word	0x40000400
 800a884:	40000800 	.word	0x40000800
 800a888:	40000c00 	.word	0x40000c00
 800a88c:	40001800 	.word	0x40001800
 800a890:	40014000 	.word	0x40014000

0800a894 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a894:	b480      	push	{r7}
 800a896:	b083      	sub	sp, #12
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a89c:	bf00      	nop
 800a89e:	370c      	adds	r7, #12
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr

0800a8a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b083      	sub	sp, #12
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a8b0:	bf00      	nop
 800a8b2:	370c      	adds	r7, #12
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr

0800a8bc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a8c4:	bf00      	nop
 800a8c6:	370c      	adds	r7, #12
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr

0800a8d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b082      	sub	sp, #8
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d101      	bne.n	800a8e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a8de:	2301      	movs	r3, #1
 800a8e0:	e042      	b.n	800a968 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d106      	bne.n	800a8fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f000 f83b 	bl	800a970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2224      	movs	r2, #36	@ 0x24
 800a8fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	681a      	ldr	r2, [r3, #0]
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f022 0201 	bic.w	r2, r2, #1
 800a910:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a916:	2b00      	cmp	r3, #0
 800a918:	d002      	beq.n	800a920 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f000 fe28 	bl	800b570 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f000 f8bd 	bl	800aaa0 <UART_SetConfig>
 800a926:	4603      	mov	r3, r0
 800a928:	2b01      	cmp	r3, #1
 800a92a:	d101      	bne.n	800a930 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a92c:	2301      	movs	r3, #1
 800a92e:	e01b      	b.n	800a968 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	685a      	ldr	r2, [r3, #4]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a93e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	689a      	ldr	r2, [r3, #8]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a94e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	681a      	ldr	r2, [r3, #0]
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f042 0201 	orr.w	r2, r2, #1
 800a95e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f000 fea7 	bl	800b6b4 <UART_CheckIdleState>
 800a966:	4603      	mov	r3, r0
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3708      	adds	r7, #8
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800a970:	b480      	push	{r7}
 800a972:	b083      	sub	sp, #12
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800a978:	bf00      	nop
 800a97a:	370c      	adds	r7, #12
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr

0800a984 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b08a      	sub	sp, #40	@ 0x28
 800a988:	af02      	add	r7, sp, #8
 800a98a:	60f8      	str	r0, [r7, #12]
 800a98c:	60b9      	str	r1, [r7, #8]
 800a98e:	603b      	str	r3, [r7, #0]
 800a990:	4613      	mov	r3, r2
 800a992:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a99a:	2b20      	cmp	r3, #32
 800a99c:	d17b      	bne.n	800aa96 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d002      	beq.n	800a9aa <HAL_UART_Transmit+0x26>
 800a9a4:	88fb      	ldrh	r3, [r7, #6]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d101      	bne.n	800a9ae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	e074      	b.n	800aa98 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	2221      	movs	r2, #33	@ 0x21
 800a9ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a9be:	f7f7 fe01 	bl	80025c4 <HAL_GetTick>
 800a9c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	88fa      	ldrh	r2, [r7, #6]
 800a9c8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	88fa      	ldrh	r2, [r7, #6]
 800a9d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	689b      	ldr	r3, [r3, #8]
 800a9d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9dc:	d108      	bne.n	800a9f0 <HAL_UART_Transmit+0x6c>
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	691b      	ldr	r3, [r3, #16]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d104      	bne.n	800a9f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	61bb      	str	r3, [r7, #24]
 800a9ee:	e003      	b.n	800a9f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a9f8:	e030      	b.n	800aa5c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	9300      	str	r3, [sp, #0]
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	2200      	movs	r2, #0
 800aa02:	2180      	movs	r1, #128	@ 0x80
 800aa04:	68f8      	ldr	r0, [r7, #12]
 800aa06:	f000 feff 	bl	800b808 <UART_WaitOnFlagUntilTimeout>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d005      	beq.n	800aa1c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2220      	movs	r2, #32
 800aa14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800aa18:	2303      	movs	r3, #3
 800aa1a:	e03d      	b.n	800aa98 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800aa1c:	69fb      	ldr	r3, [r7, #28]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d10b      	bne.n	800aa3a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aa22:	69bb      	ldr	r3, [r7, #24]
 800aa24:	881b      	ldrh	r3, [r3, #0]
 800aa26:	461a      	mov	r2, r3
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aa30:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800aa32:	69bb      	ldr	r3, [r7, #24]
 800aa34:	3302      	adds	r3, #2
 800aa36:	61bb      	str	r3, [r7, #24]
 800aa38:	e007      	b.n	800aa4a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800aa3a:	69fb      	ldr	r3, [r7, #28]
 800aa3c:	781a      	ldrb	r2, [r3, #0]
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800aa44:	69fb      	ldr	r3, [r7, #28]
 800aa46:	3301      	adds	r3, #1
 800aa48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800aa50:	b29b      	uxth	r3, r3
 800aa52:	3b01      	subs	r3, #1
 800aa54:	b29a      	uxth	r2, r3
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d1c8      	bne.n	800a9fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	9300      	str	r3, [sp, #0]
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	2140      	movs	r1, #64	@ 0x40
 800aa72:	68f8      	ldr	r0, [r7, #12]
 800aa74:	f000 fec8 	bl	800b808 <UART_WaitOnFlagUntilTimeout>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d005      	beq.n	800aa8a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	2220      	movs	r2, #32
 800aa82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800aa86:	2303      	movs	r3, #3
 800aa88:	e006      	b.n	800aa98 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	2220      	movs	r2, #32
 800aa8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800aa92:	2300      	movs	r3, #0
 800aa94:	e000      	b.n	800aa98 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800aa96:	2302      	movs	r3, #2
  }
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3720      	adds	r7, #32
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}

0800aaa0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aaa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aaa4:	b092      	sub	sp, #72	@ 0x48
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	689a      	ldr	r2, [r3, #8]
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	691b      	ldr	r3, [r3, #16]
 800aab8:	431a      	orrs	r2, r3
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	695b      	ldr	r3, [r3, #20]
 800aabe:	431a      	orrs	r2, r3
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	69db      	ldr	r3, [r3, #28]
 800aac4:	4313      	orrs	r3, r2
 800aac6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	4bbe      	ldr	r3, [pc, #760]	@ (800adc8 <UART_SetConfig+0x328>)
 800aad0:	4013      	ands	r3, r2
 800aad2:	697a      	ldr	r2, [r7, #20]
 800aad4:	6812      	ldr	r2, [r2, #0]
 800aad6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800aad8:	430b      	orrs	r3, r1
 800aada:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	685b      	ldr	r3, [r3, #4]
 800aae2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	68da      	ldr	r2, [r3, #12]
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	430a      	orrs	r2, r1
 800aaf0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	699b      	ldr	r3, [r3, #24]
 800aaf6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	4ab3      	ldr	r2, [pc, #716]	@ (800adcc <UART_SetConfig+0x32c>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d004      	beq.n	800ab0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	6a1b      	ldr	r3, [r3, #32]
 800ab06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	689a      	ldr	r2, [r3, #8]
 800ab12:	4baf      	ldr	r3, [pc, #700]	@ (800add0 <UART_SetConfig+0x330>)
 800ab14:	4013      	ands	r3, r2
 800ab16:	697a      	ldr	r2, [r7, #20]
 800ab18:	6812      	ldr	r2, [r2, #0]
 800ab1a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ab1c:	430b      	orrs	r3, r1
 800ab1e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab26:	f023 010f 	bic.w	r1, r3, #15
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	430a      	orrs	r2, r1
 800ab34:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	4aa6      	ldr	r2, [pc, #664]	@ (800add4 <UART_SetConfig+0x334>)
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d177      	bne.n	800ac30 <UART_SetConfig+0x190>
 800ab40:	4ba5      	ldr	r3, [pc, #660]	@ (800add8 <UART_SetConfig+0x338>)
 800ab42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ab48:	2b28      	cmp	r3, #40	@ 0x28
 800ab4a:	d86d      	bhi.n	800ac28 <UART_SetConfig+0x188>
 800ab4c:	a201      	add	r2, pc, #4	@ (adr r2, 800ab54 <UART_SetConfig+0xb4>)
 800ab4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab52:	bf00      	nop
 800ab54:	0800abf9 	.word	0x0800abf9
 800ab58:	0800ac29 	.word	0x0800ac29
 800ab5c:	0800ac29 	.word	0x0800ac29
 800ab60:	0800ac29 	.word	0x0800ac29
 800ab64:	0800ac29 	.word	0x0800ac29
 800ab68:	0800ac29 	.word	0x0800ac29
 800ab6c:	0800ac29 	.word	0x0800ac29
 800ab70:	0800ac29 	.word	0x0800ac29
 800ab74:	0800ac01 	.word	0x0800ac01
 800ab78:	0800ac29 	.word	0x0800ac29
 800ab7c:	0800ac29 	.word	0x0800ac29
 800ab80:	0800ac29 	.word	0x0800ac29
 800ab84:	0800ac29 	.word	0x0800ac29
 800ab88:	0800ac29 	.word	0x0800ac29
 800ab8c:	0800ac29 	.word	0x0800ac29
 800ab90:	0800ac29 	.word	0x0800ac29
 800ab94:	0800ac09 	.word	0x0800ac09
 800ab98:	0800ac29 	.word	0x0800ac29
 800ab9c:	0800ac29 	.word	0x0800ac29
 800aba0:	0800ac29 	.word	0x0800ac29
 800aba4:	0800ac29 	.word	0x0800ac29
 800aba8:	0800ac29 	.word	0x0800ac29
 800abac:	0800ac29 	.word	0x0800ac29
 800abb0:	0800ac29 	.word	0x0800ac29
 800abb4:	0800ac11 	.word	0x0800ac11
 800abb8:	0800ac29 	.word	0x0800ac29
 800abbc:	0800ac29 	.word	0x0800ac29
 800abc0:	0800ac29 	.word	0x0800ac29
 800abc4:	0800ac29 	.word	0x0800ac29
 800abc8:	0800ac29 	.word	0x0800ac29
 800abcc:	0800ac29 	.word	0x0800ac29
 800abd0:	0800ac29 	.word	0x0800ac29
 800abd4:	0800ac19 	.word	0x0800ac19
 800abd8:	0800ac29 	.word	0x0800ac29
 800abdc:	0800ac29 	.word	0x0800ac29
 800abe0:	0800ac29 	.word	0x0800ac29
 800abe4:	0800ac29 	.word	0x0800ac29
 800abe8:	0800ac29 	.word	0x0800ac29
 800abec:	0800ac29 	.word	0x0800ac29
 800abf0:	0800ac29 	.word	0x0800ac29
 800abf4:	0800ac21 	.word	0x0800ac21
 800abf8:	2301      	movs	r3, #1
 800abfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abfe:	e222      	b.n	800b046 <UART_SetConfig+0x5a6>
 800ac00:	2304      	movs	r3, #4
 800ac02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac06:	e21e      	b.n	800b046 <UART_SetConfig+0x5a6>
 800ac08:	2308      	movs	r3, #8
 800ac0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac0e:	e21a      	b.n	800b046 <UART_SetConfig+0x5a6>
 800ac10:	2310      	movs	r3, #16
 800ac12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac16:	e216      	b.n	800b046 <UART_SetConfig+0x5a6>
 800ac18:	2320      	movs	r3, #32
 800ac1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac1e:	e212      	b.n	800b046 <UART_SetConfig+0x5a6>
 800ac20:	2340      	movs	r3, #64	@ 0x40
 800ac22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac26:	e20e      	b.n	800b046 <UART_SetConfig+0x5a6>
 800ac28:	2380      	movs	r3, #128	@ 0x80
 800ac2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac2e:	e20a      	b.n	800b046 <UART_SetConfig+0x5a6>
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4a69      	ldr	r2, [pc, #420]	@ (800addc <UART_SetConfig+0x33c>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d130      	bne.n	800ac9c <UART_SetConfig+0x1fc>
 800ac3a:	4b67      	ldr	r3, [pc, #412]	@ (800add8 <UART_SetConfig+0x338>)
 800ac3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac3e:	f003 0307 	and.w	r3, r3, #7
 800ac42:	2b05      	cmp	r3, #5
 800ac44:	d826      	bhi.n	800ac94 <UART_SetConfig+0x1f4>
 800ac46:	a201      	add	r2, pc, #4	@ (adr r2, 800ac4c <UART_SetConfig+0x1ac>)
 800ac48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac4c:	0800ac65 	.word	0x0800ac65
 800ac50:	0800ac6d 	.word	0x0800ac6d
 800ac54:	0800ac75 	.word	0x0800ac75
 800ac58:	0800ac7d 	.word	0x0800ac7d
 800ac5c:	0800ac85 	.word	0x0800ac85
 800ac60:	0800ac8d 	.word	0x0800ac8d
 800ac64:	2300      	movs	r3, #0
 800ac66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac6a:	e1ec      	b.n	800b046 <UART_SetConfig+0x5a6>
 800ac6c:	2304      	movs	r3, #4
 800ac6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac72:	e1e8      	b.n	800b046 <UART_SetConfig+0x5a6>
 800ac74:	2308      	movs	r3, #8
 800ac76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac7a:	e1e4      	b.n	800b046 <UART_SetConfig+0x5a6>
 800ac7c:	2310      	movs	r3, #16
 800ac7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac82:	e1e0      	b.n	800b046 <UART_SetConfig+0x5a6>
 800ac84:	2320      	movs	r3, #32
 800ac86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac8a:	e1dc      	b.n	800b046 <UART_SetConfig+0x5a6>
 800ac8c:	2340      	movs	r3, #64	@ 0x40
 800ac8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac92:	e1d8      	b.n	800b046 <UART_SetConfig+0x5a6>
 800ac94:	2380      	movs	r3, #128	@ 0x80
 800ac96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac9a:	e1d4      	b.n	800b046 <UART_SetConfig+0x5a6>
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4a4f      	ldr	r2, [pc, #316]	@ (800ade0 <UART_SetConfig+0x340>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d130      	bne.n	800ad08 <UART_SetConfig+0x268>
 800aca6:	4b4c      	ldr	r3, [pc, #304]	@ (800add8 <UART_SetConfig+0x338>)
 800aca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acaa:	f003 0307 	and.w	r3, r3, #7
 800acae:	2b05      	cmp	r3, #5
 800acb0:	d826      	bhi.n	800ad00 <UART_SetConfig+0x260>
 800acb2:	a201      	add	r2, pc, #4	@ (adr r2, 800acb8 <UART_SetConfig+0x218>)
 800acb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acb8:	0800acd1 	.word	0x0800acd1
 800acbc:	0800acd9 	.word	0x0800acd9
 800acc0:	0800ace1 	.word	0x0800ace1
 800acc4:	0800ace9 	.word	0x0800ace9
 800acc8:	0800acf1 	.word	0x0800acf1
 800accc:	0800acf9 	.word	0x0800acf9
 800acd0:	2300      	movs	r3, #0
 800acd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acd6:	e1b6      	b.n	800b046 <UART_SetConfig+0x5a6>
 800acd8:	2304      	movs	r3, #4
 800acda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acde:	e1b2      	b.n	800b046 <UART_SetConfig+0x5a6>
 800ace0:	2308      	movs	r3, #8
 800ace2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ace6:	e1ae      	b.n	800b046 <UART_SetConfig+0x5a6>
 800ace8:	2310      	movs	r3, #16
 800acea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acee:	e1aa      	b.n	800b046 <UART_SetConfig+0x5a6>
 800acf0:	2320      	movs	r3, #32
 800acf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acf6:	e1a6      	b.n	800b046 <UART_SetConfig+0x5a6>
 800acf8:	2340      	movs	r3, #64	@ 0x40
 800acfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acfe:	e1a2      	b.n	800b046 <UART_SetConfig+0x5a6>
 800ad00:	2380      	movs	r3, #128	@ 0x80
 800ad02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad06:	e19e      	b.n	800b046 <UART_SetConfig+0x5a6>
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4a35      	ldr	r2, [pc, #212]	@ (800ade4 <UART_SetConfig+0x344>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d130      	bne.n	800ad74 <UART_SetConfig+0x2d4>
 800ad12:	4b31      	ldr	r3, [pc, #196]	@ (800add8 <UART_SetConfig+0x338>)
 800ad14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad16:	f003 0307 	and.w	r3, r3, #7
 800ad1a:	2b05      	cmp	r3, #5
 800ad1c:	d826      	bhi.n	800ad6c <UART_SetConfig+0x2cc>
 800ad1e:	a201      	add	r2, pc, #4	@ (adr r2, 800ad24 <UART_SetConfig+0x284>)
 800ad20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad24:	0800ad3d 	.word	0x0800ad3d
 800ad28:	0800ad45 	.word	0x0800ad45
 800ad2c:	0800ad4d 	.word	0x0800ad4d
 800ad30:	0800ad55 	.word	0x0800ad55
 800ad34:	0800ad5d 	.word	0x0800ad5d
 800ad38:	0800ad65 	.word	0x0800ad65
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad42:	e180      	b.n	800b046 <UART_SetConfig+0x5a6>
 800ad44:	2304      	movs	r3, #4
 800ad46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad4a:	e17c      	b.n	800b046 <UART_SetConfig+0x5a6>
 800ad4c:	2308      	movs	r3, #8
 800ad4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad52:	e178      	b.n	800b046 <UART_SetConfig+0x5a6>
 800ad54:	2310      	movs	r3, #16
 800ad56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad5a:	e174      	b.n	800b046 <UART_SetConfig+0x5a6>
 800ad5c:	2320      	movs	r3, #32
 800ad5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad62:	e170      	b.n	800b046 <UART_SetConfig+0x5a6>
 800ad64:	2340      	movs	r3, #64	@ 0x40
 800ad66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad6a:	e16c      	b.n	800b046 <UART_SetConfig+0x5a6>
 800ad6c:	2380      	movs	r3, #128	@ 0x80
 800ad6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad72:	e168      	b.n	800b046 <UART_SetConfig+0x5a6>
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a1b      	ldr	r2, [pc, #108]	@ (800ade8 <UART_SetConfig+0x348>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d142      	bne.n	800ae04 <UART_SetConfig+0x364>
 800ad7e:	4b16      	ldr	r3, [pc, #88]	@ (800add8 <UART_SetConfig+0x338>)
 800ad80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad82:	f003 0307 	and.w	r3, r3, #7
 800ad86:	2b05      	cmp	r3, #5
 800ad88:	d838      	bhi.n	800adfc <UART_SetConfig+0x35c>
 800ad8a:	a201      	add	r2, pc, #4	@ (adr r2, 800ad90 <UART_SetConfig+0x2f0>)
 800ad8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad90:	0800ada9 	.word	0x0800ada9
 800ad94:	0800adb1 	.word	0x0800adb1
 800ad98:	0800adb9 	.word	0x0800adb9
 800ad9c:	0800adc1 	.word	0x0800adc1
 800ada0:	0800aded 	.word	0x0800aded
 800ada4:	0800adf5 	.word	0x0800adf5
 800ada8:	2300      	movs	r3, #0
 800adaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adae:	e14a      	b.n	800b046 <UART_SetConfig+0x5a6>
 800adb0:	2304      	movs	r3, #4
 800adb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adb6:	e146      	b.n	800b046 <UART_SetConfig+0x5a6>
 800adb8:	2308      	movs	r3, #8
 800adba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adbe:	e142      	b.n	800b046 <UART_SetConfig+0x5a6>
 800adc0:	2310      	movs	r3, #16
 800adc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adc6:	e13e      	b.n	800b046 <UART_SetConfig+0x5a6>
 800adc8:	cfff69f3 	.word	0xcfff69f3
 800adcc:	58000c00 	.word	0x58000c00
 800add0:	11fff4ff 	.word	0x11fff4ff
 800add4:	40011000 	.word	0x40011000
 800add8:	58024400 	.word	0x58024400
 800addc:	40004400 	.word	0x40004400
 800ade0:	40004800 	.word	0x40004800
 800ade4:	40004c00 	.word	0x40004c00
 800ade8:	40005000 	.word	0x40005000
 800adec:	2320      	movs	r3, #32
 800adee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adf2:	e128      	b.n	800b046 <UART_SetConfig+0x5a6>
 800adf4:	2340      	movs	r3, #64	@ 0x40
 800adf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adfa:	e124      	b.n	800b046 <UART_SetConfig+0x5a6>
 800adfc:	2380      	movs	r3, #128	@ 0x80
 800adfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae02:	e120      	b.n	800b046 <UART_SetConfig+0x5a6>
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	4acb      	ldr	r2, [pc, #812]	@ (800b138 <UART_SetConfig+0x698>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d176      	bne.n	800aefc <UART_SetConfig+0x45c>
 800ae0e:	4bcb      	ldr	r3, [pc, #812]	@ (800b13c <UART_SetConfig+0x69c>)
 800ae10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ae16:	2b28      	cmp	r3, #40	@ 0x28
 800ae18:	d86c      	bhi.n	800aef4 <UART_SetConfig+0x454>
 800ae1a:	a201      	add	r2, pc, #4	@ (adr r2, 800ae20 <UART_SetConfig+0x380>)
 800ae1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae20:	0800aec5 	.word	0x0800aec5
 800ae24:	0800aef5 	.word	0x0800aef5
 800ae28:	0800aef5 	.word	0x0800aef5
 800ae2c:	0800aef5 	.word	0x0800aef5
 800ae30:	0800aef5 	.word	0x0800aef5
 800ae34:	0800aef5 	.word	0x0800aef5
 800ae38:	0800aef5 	.word	0x0800aef5
 800ae3c:	0800aef5 	.word	0x0800aef5
 800ae40:	0800aecd 	.word	0x0800aecd
 800ae44:	0800aef5 	.word	0x0800aef5
 800ae48:	0800aef5 	.word	0x0800aef5
 800ae4c:	0800aef5 	.word	0x0800aef5
 800ae50:	0800aef5 	.word	0x0800aef5
 800ae54:	0800aef5 	.word	0x0800aef5
 800ae58:	0800aef5 	.word	0x0800aef5
 800ae5c:	0800aef5 	.word	0x0800aef5
 800ae60:	0800aed5 	.word	0x0800aed5
 800ae64:	0800aef5 	.word	0x0800aef5
 800ae68:	0800aef5 	.word	0x0800aef5
 800ae6c:	0800aef5 	.word	0x0800aef5
 800ae70:	0800aef5 	.word	0x0800aef5
 800ae74:	0800aef5 	.word	0x0800aef5
 800ae78:	0800aef5 	.word	0x0800aef5
 800ae7c:	0800aef5 	.word	0x0800aef5
 800ae80:	0800aedd 	.word	0x0800aedd
 800ae84:	0800aef5 	.word	0x0800aef5
 800ae88:	0800aef5 	.word	0x0800aef5
 800ae8c:	0800aef5 	.word	0x0800aef5
 800ae90:	0800aef5 	.word	0x0800aef5
 800ae94:	0800aef5 	.word	0x0800aef5
 800ae98:	0800aef5 	.word	0x0800aef5
 800ae9c:	0800aef5 	.word	0x0800aef5
 800aea0:	0800aee5 	.word	0x0800aee5
 800aea4:	0800aef5 	.word	0x0800aef5
 800aea8:	0800aef5 	.word	0x0800aef5
 800aeac:	0800aef5 	.word	0x0800aef5
 800aeb0:	0800aef5 	.word	0x0800aef5
 800aeb4:	0800aef5 	.word	0x0800aef5
 800aeb8:	0800aef5 	.word	0x0800aef5
 800aebc:	0800aef5 	.word	0x0800aef5
 800aec0:	0800aeed 	.word	0x0800aeed
 800aec4:	2301      	movs	r3, #1
 800aec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeca:	e0bc      	b.n	800b046 <UART_SetConfig+0x5a6>
 800aecc:	2304      	movs	r3, #4
 800aece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aed2:	e0b8      	b.n	800b046 <UART_SetConfig+0x5a6>
 800aed4:	2308      	movs	r3, #8
 800aed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeda:	e0b4      	b.n	800b046 <UART_SetConfig+0x5a6>
 800aedc:	2310      	movs	r3, #16
 800aede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aee2:	e0b0      	b.n	800b046 <UART_SetConfig+0x5a6>
 800aee4:	2320      	movs	r3, #32
 800aee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeea:	e0ac      	b.n	800b046 <UART_SetConfig+0x5a6>
 800aeec:	2340      	movs	r3, #64	@ 0x40
 800aeee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aef2:	e0a8      	b.n	800b046 <UART_SetConfig+0x5a6>
 800aef4:	2380      	movs	r3, #128	@ 0x80
 800aef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aefa:	e0a4      	b.n	800b046 <UART_SetConfig+0x5a6>
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4a8f      	ldr	r2, [pc, #572]	@ (800b140 <UART_SetConfig+0x6a0>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d130      	bne.n	800af68 <UART_SetConfig+0x4c8>
 800af06:	4b8d      	ldr	r3, [pc, #564]	@ (800b13c <UART_SetConfig+0x69c>)
 800af08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af0a:	f003 0307 	and.w	r3, r3, #7
 800af0e:	2b05      	cmp	r3, #5
 800af10:	d826      	bhi.n	800af60 <UART_SetConfig+0x4c0>
 800af12:	a201      	add	r2, pc, #4	@ (adr r2, 800af18 <UART_SetConfig+0x478>)
 800af14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af18:	0800af31 	.word	0x0800af31
 800af1c:	0800af39 	.word	0x0800af39
 800af20:	0800af41 	.word	0x0800af41
 800af24:	0800af49 	.word	0x0800af49
 800af28:	0800af51 	.word	0x0800af51
 800af2c:	0800af59 	.word	0x0800af59
 800af30:	2300      	movs	r3, #0
 800af32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af36:	e086      	b.n	800b046 <UART_SetConfig+0x5a6>
 800af38:	2304      	movs	r3, #4
 800af3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af3e:	e082      	b.n	800b046 <UART_SetConfig+0x5a6>
 800af40:	2308      	movs	r3, #8
 800af42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af46:	e07e      	b.n	800b046 <UART_SetConfig+0x5a6>
 800af48:	2310      	movs	r3, #16
 800af4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af4e:	e07a      	b.n	800b046 <UART_SetConfig+0x5a6>
 800af50:	2320      	movs	r3, #32
 800af52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af56:	e076      	b.n	800b046 <UART_SetConfig+0x5a6>
 800af58:	2340      	movs	r3, #64	@ 0x40
 800af5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af5e:	e072      	b.n	800b046 <UART_SetConfig+0x5a6>
 800af60:	2380      	movs	r3, #128	@ 0x80
 800af62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af66:	e06e      	b.n	800b046 <UART_SetConfig+0x5a6>
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	4a75      	ldr	r2, [pc, #468]	@ (800b144 <UART_SetConfig+0x6a4>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d130      	bne.n	800afd4 <UART_SetConfig+0x534>
 800af72:	4b72      	ldr	r3, [pc, #456]	@ (800b13c <UART_SetConfig+0x69c>)
 800af74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af76:	f003 0307 	and.w	r3, r3, #7
 800af7a:	2b05      	cmp	r3, #5
 800af7c:	d826      	bhi.n	800afcc <UART_SetConfig+0x52c>
 800af7e:	a201      	add	r2, pc, #4	@ (adr r2, 800af84 <UART_SetConfig+0x4e4>)
 800af80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af84:	0800af9d 	.word	0x0800af9d
 800af88:	0800afa5 	.word	0x0800afa5
 800af8c:	0800afad 	.word	0x0800afad
 800af90:	0800afb5 	.word	0x0800afb5
 800af94:	0800afbd 	.word	0x0800afbd
 800af98:	0800afc5 	.word	0x0800afc5
 800af9c:	2300      	movs	r3, #0
 800af9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afa2:	e050      	b.n	800b046 <UART_SetConfig+0x5a6>
 800afa4:	2304      	movs	r3, #4
 800afa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afaa:	e04c      	b.n	800b046 <UART_SetConfig+0x5a6>
 800afac:	2308      	movs	r3, #8
 800afae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afb2:	e048      	b.n	800b046 <UART_SetConfig+0x5a6>
 800afb4:	2310      	movs	r3, #16
 800afb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afba:	e044      	b.n	800b046 <UART_SetConfig+0x5a6>
 800afbc:	2320      	movs	r3, #32
 800afbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afc2:	e040      	b.n	800b046 <UART_SetConfig+0x5a6>
 800afc4:	2340      	movs	r3, #64	@ 0x40
 800afc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afca:	e03c      	b.n	800b046 <UART_SetConfig+0x5a6>
 800afcc:	2380      	movs	r3, #128	@ 0x80
 800afce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afd2:	e038      	b.n	800b046 <UART_SetConfig+0x5a6>
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	4a5b      	ldr	r2, [pc, #364]	@ (800b148 <UART_SetConfig+0x6a8>)
 800afda:	4293      	cmp	r3, r2
 800afdc:	d130      	bne.n	800b040 <UART_SetConfig+0x5a0>
 800afde:	4b57      	ldr	r3, [pc, #348]	@ (800b13c <UART_SetConfig+0x69c>)
 800afe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800afe2:	f003 0307 	and.w	r3, r3, #7
 800afe6:	2b05      	cmp	r3, #5
 800afe8:	d826      	bhi.n	800b038 <UART_SetConfig+0x598>
 800afea:	a201      	add	r2, pc, #4	@ (adr r2, 800aff0 <UART_SetConfig+0x550>)
 800afec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aff0:	0800b009 	.word	0x0800b009
 800aff4:	0800b011 	.word	0x0800b011
 800aff8:	0800b019 	.word	0x0800b019
 800affc:	0800b021 	.word	0x0800b021
 800b000:	0800b029 	.word	0x0800b029
 800b004:	0800b031 	.word	0x0800b031
 800b008:	2302      	movs	r3, #2
 800b00a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b00e:	e01a      	b.n	800b046 <UART_SetConfig+0x5a6>
 800b010:	2304      	movs	r3, #4
 800b012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b016:	e016      	b.n	800b046 <UART_SetConfig+0x5a6>
 800b018:	2308      	movs	r3, #8
 800b01a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b01e:	e012      	b.n	800b046 <UART_SetConfig+0x5a6>
 800b020:	2310      	movs	r3, #16
 800b022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b026:	e00e      	b.n	800b046 <UART_SetConfig+0x5a6>
 800b028:	2320      	movs	r3, #32
 800b02a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b02e:	e00a      	b.n	800b046 <UART_SetConfig+0x5a6>
 800b030:	2340      	movs	r3, #64	@ 0x40
 800b032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b036:	e006      	b.n	800b046 <UART_SetConfig+0x5a6>
 800b038:	2380      	movs	r3, #128	@ 0x80
 800b03a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b03e:	e002      	b.n	800b046 <UART_SetConfig+0x5a6>
 800b040:	2380      	movs	r3, #128	@ 0x80
 800b042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	4a3f      	ldr	r2, [pc, #252]	@ (800b148 <UART_SetConfig+0x6a8>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	f040 80f8 	bne.w	800b242 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b052:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b056:	2b20      	cmp	r3, #32
 800b058:	dc46      	bgt.n	800b0e8 <UART_SetConfig+0x648>
 800b05a:	2b02      	cmp	r3, #2
 800b05c:	f2c0 8082 	blt.w	800b164 <UART_SetConfig+0x6c4>
 800b060:	3b02      	subs	r3, #2
 800b062:	2b1e      	cmp	r3, #30
 800b064:	d87e      	bhi.n	800b164 <UART_SetConfig+0x6c4>
 800b066:	a201      	add	r2, pc, #4	@ (adr r2, 800b06c <UART_SetConfig+0x5cc>)
 800b068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b06c:	0800b0ef 	.word	0x0800b0ef
 800b070:	0800b165 	.word	0x0800b165
 800b074:	0800b0f7 	.word	0x0800b0f7
 800b078:	0800b165 	.word	0x0800b165
 800b07c:	0800b165 	.word	0x0800b165
 800b080:	0800b165 	.word	0x0800b165
 800b084:	0800b107 	.word	0x0800b107
 800b088:	0800b165 	.word	0x0800b165
 800b08c:	0800b165 	.word	0x0800b165
 800b090:	0800b165 	.word	0x0800b165
 800b094:	0800b165 	.word	0x0800b165
 800b098:	0800b165 	.word	0x0800b165
 800b09c:	0800b165 	.word	0x0800b165
 800b0a0:	0800b165 	.word	0x0800b165
 800b0a4:	0800b117 	.word	0x0800b117
 800b0a8:	0800b165 	.word	0x0800b165
 800b0ac:	0800b165 	.word	0x0800b165
 800b0b0:	0800b165 	.word	0x0800b165
 800b0b4:	0800b165 	.word	0x0800b165
 800b0b8:	0800b165 	.word	0x0800b165
 800b0bc:	0800b165 	.word	0x0800b165
 800b0c0:	0800b165 	.word	0x0800b165
 800b0c4:	0800b165 	.word	0x0800b165
 800b0c8:	0800b165 	.word	0x0800b165
 800b0cc:	0800b165 	.word	0x0800b165
 800b0d0:	0800b165 	.word	0x0800b165
 800b0d4:	0800b165 	.word	0x0800b165
 800b0d8:	0800b165 	.word	0x0800b165
 800b0dc:	0800b165 	.word	0x0800b165
 800b0e0:	0800b165 	.word	0x0800b165
 800b0e4:	0800b157 	.word	0x0800b157
 800b0e8:	2b40      	cmp	r3, #64	@ 0x40
 800b0ea:	d037      	beq.n	800b15c <UART_SetConfig+0x6bc>
 800b0ec:	e03a      	b.n	800b164 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b0ee:	f7fd fc1b 	bl	8008928 <HAL_RCCEx_GetD3PCLK1Freq>
 800b0f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b0f4:	e03c      	b.n	800b170 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f7fd fc2a 	bl	8008954 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b104:	e034      	b.n	800b170 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b106:	f107 0318 	add.w	r3, r7, #24
 800b10a:	4618      	mov	r0, r3
 800b10c:	f7fd fd76 	bl	8008bfc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b110:	69fb      	ldr	r3, [r7, #28]
 800b112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b114:	e02c      	b.n	800b170 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b116:	4b09      	ldr	r3, [pc, #36]	@ (800b13c <UART_SetConfig+0x69c>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f003 0320 	and.w	r3, r3, #32
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d016      	beq.n	800b150 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b122:	4b06      	ldr	r3, [pc, #24]	@ (800b13c <UART_SetConfig+0x69c>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	08db      	lsrs	r3, r3, #3
 800b128:	f003 0303 	and.w	r3, r3, #3
 800b12c:	4a07      	ldr	r2, [pc, #28]	@ (800b14c <UART_SetConfig+0x6ac>)
 800b12e:	fa22 f303 	lsr.w	r3, r2, r3
 800b132:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b134:	e01c      	b.n	800b170 <UART_SetConfig+0x6d0>
 800b136:	bf00      	nop
 800b138:	40011400 	.word	0x40011400
 800b13c:	58024400 	.word	0x58024400
 800b140:	40007800 	.word	0x40007800
 800b144:	40007c00 	.word	0x40007c00
 800b148:	58000c00 	.word	0x58000c00
 800b14c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b150:	4b9d      	ldr	r3, [pc, #628]	@ (800b3c8 <UART_SetConfig+0x928>)
 800b152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b154:	e00c      	b.n	800b170 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b156:	4b9d      	ldr	r3, [pc, #628]	@ (800b3cc <UART_SetConfig+0x92c>)
 800b158:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b15a:	e009      	b.n	800b170 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b15c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b160:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b162:	e005      	b.n	800b170 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b164:	2300      	movs	r3, #0
 800b166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b168:	2301      	movs	r3, #1
 800b16a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b16e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b170:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b172:	2b00      	cmp	r3, #0
 800b174:	f000 81de 	beq.w	800b534 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b17c:	4a94      	ldr	r2, [pc, #592]	@ (800b3d0 <UART_SetConfig+0x930>)
 800b17e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b182:	461a      	mov	r2, r3
 800b184:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b186:	fbb3 f3f2 	udiv	r3, r3, r2
 800b18a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	685a      	ldr	r2, [r3, #4]
 800b190:	4613      	mov	r3, r2
 800b192:	005b      	lsls	r3, r3, #1
 800b194:	4413      	add	r3, r2
 800b196:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b198:	429a      	cmp	r2, r3
 800b19a:	d305      	bcc.n	800b1a8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b19c:	697b      	ldr	r3, [r7, #20]
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b1a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d903      	bls.n	800b1b0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b1ae:	e1c1      	b.n	800b534 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	60bb      	str	r3, [r7, #8]
 800b1b6:	60fa      	str	r2, [r7, #12]
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1bc:	4a84      	ldr	r2, [pc, #528]	@ (800b3d0 <UART_SetConfig+0x930>)
 800b1be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1c2:	b29b      	uxth	r3, r3
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	603b      	str	r3, [r7, #0]
 800b1c8:	607a      	str	r2, [r7, #4]
 800b1ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b1d2:	f7f5 f8dd 	bl	8000390 <__aeabi_uldivmod>
 800b1d6:	4602      	mov	r2, r0
 800b1d8:	460b      	mov	r3, r1
 800b1da:	4610      	mov	r0, r2
 800b1dc:	4619      	mov	r1, r3
 800b1de:	f04f 0200 	mov.w	r2, #0
 800b1e2:	f04f 0300 	mov.w	r3, #0
 800b1e6:	020b      	lsls	r3, r1, #8
 800b1e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b1ec:	0202      	lsls	r2, r0, #8
 800b1ee:	6979      	ldr	r1, [r7, #20]
 800b1f0:	6849      	ldr	r1, [r1, #4]
 800b1f2:	0849      	lsrs	r1, r1, #1
 800b1f4:	2000      	movs	r0, #0
 800b1f6:	460c      	mov	r4, r1
 800b1f8:	4605      	mov	r5, r0
 800b1fa:	eb12 0804 	adds.w	r8, r2, r4
 800b1fe:	eb43 0905 	adc.w	r9, r3, r5
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	685b      	ldr	r3, [r3, #4]
 800b206:	2200      	movs	r2, #0
 800b208:	469a      	mov	sl, r3
 800b20a:	4693      	mov	fp, r2
 800b20c:	4652      	mov	r2, sl
 800b20e:	465b      	mov	r3, fp
 800b210:	4640      	mov	r0, r8
 800b212:	4649      	mov	r1, r9
 800b214:	f7f5 f8bc 	bl	8000390 <__aeabi_uldivmod>
 800b218:	4602      	mov	r2, r0
 800b21a:	460b      	mov	r3, r1
 800b21c:	4613      	mov	r3, r2
 800b21e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b222:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b226:	d308      	bcc.n	800b23a <UART_SetConfig+0x79a>
 800b228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b22a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b22e:	d204      	bcs.n	800b23a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b236:	60da      	str	r2, [r3, #12]
 800b238:	e17c      	b.n	800b534 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b23a:	2301      	movs	r3, #1
 800b23c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b240:	e178      	b.n	800b534 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	69db      	ldr	r3, [r3, #28]
 800b246:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b24a:	f040 80c5 	bne.w	800b3d8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b24e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b252:	2b20      	cmp	r3, #32
 800b254:	dc48      	bgt.n	800b2e8 <UART_SetConfig+0x848>
 800b256:	2b00      	cmp	r3, #0
 800b258:	db7b      	blt.n	800b352 <UART_SetConfig+0x8b2>
 800b25a:	2b20      	cmp	r3, #32
 800b25c:	d879      	bhi.n	800b352 <UART_SetConfig+0x8b2>
 800b25e:	a201      	add	r2, pc, #4	@ (adr r2, 800b264 <UART_SetConfig+0x7c4>)
 800b260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b264:	0800b2ef 	.word	0x0800b2ef
 800b268:	0800b2f7 	.word	0x0800b2f7
 800b26c:	0800b353 	.word	0x0800b353
 800b270:	0800b353 	.word	0x0800b353
 800b274:	0800b2ff 	.word	0x0800b2ff
 800b278:	0800b353 	.word	0x0800b353
 800b27c:	0800b353 	.word	0x0800b353
 800b280:	0800b353 	.word	0x0800b353
 800b284:	0800b30f 	.word	0x0800b30f
 800b288:	0800b353 	.word	0x0800b353
 800b28c:	0800b353 	.word	0x0800b353
 800b290:	0800b353 	.word	0x0800b353
 800b294:	0800b353 	.word	0x0800b353
 800b298:	0800b353 	.word	0x0800b353
 800b29c:	0800b353 	.word	0x0800b353
 800b2a0:	0800b353 	.word	0x0800b353
 800b2a4:	0800b31f 	.word	0x0800b31f
 800b2a8:	0800b353 	.word	0x0800b353
 800b2ac:	0800b353 	.word	0x0800b353
 800b2b0:	0800b353 	.word	0x0800b353
 800b2b4:	0800b353 	.word	0x0800b353
 800b2b8:	0800b353 	.word	0x0800b353
 800b2bc:	0800b353 	.word	0x0800b353
 800b2c0:	0800b353 	.word	0x0800b353
 800b2c4:	0800b353 	.word	0x0800b353
 800b2c8:	0800b353 	.word	0x0800b353
 800b2cc:	0800b353 	.word	0x0800b353
 800b2d0:	0800b353 	.word	0x0800b353
 800b2d4:	0800b353 	.word	0x0800b353
 800b2d8:	0800b353 	.word	0x0800b353
 800b2dc:	0800b353 	.word	0x0800b353
 800b2e0:	0800b353 	.word	0x0800b353
 800b2e4:	0800b345 	.word	0x0800b345
 800b2e8:	2b40      	cmp	r3, #64	@ 0x40
 800b2ea:	d02e      	beq.n	800b34a <UART_SetConfig+0x8aa>
 800b2ec:	e031      	b.n	800b352 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b2ee:	f7fc f8e5 	bl	80074bc <HAL_RCC_GetPCLK1Freq>
 800b2f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b2f4:	e033      	b.n	800b35e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b2f6:	f7fc f8f7 	bl	80074e8 <HAL_RCC_GetPCLK2Freq>
 800b2fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b2fc:	e02f      	b.n	800b35e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b302:	4618      	mov	r0, r3
 800b304:	f7fd fb26 	bl	8008954 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b30a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b30c:	e027      	b.n	800b35e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b30e:	f107 0318 	add.w	r3, r7, #24
 800b312:	4618      	mov	r0, r3
 800b314:	f7fd fc72 	bl	8008bfc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b318:	69fb      	ldr	r3, [r7, #28]
 800b31a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b31c:	e01f      	b.n	800b35e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b31e:	4b2d      	ldr	r3, [pc, #180]	@ (800b3d4 <UART_SetConfig+0x934>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f003 0320 	and.w	r3, r3, #32
 800b326:	2b00      	cmp	r3, #0
 800b328:	d009      	beq.n	800b33e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b32a:	4b2a      	ldr	r3, [pc, #168]	@ (800b3d4 <UART_SetConfig+0x934>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	08db      	lsrs	r3, r3, #3
 800b330:	f003 0303 	and.w	r3, r3, #3
 800b334:	4a24      	ldr	r2, [pc, #144]	@ (800b3c8 <UART_SetConfig+0x928>)
 800b336:	fa22 f303 	lsr.w	r3, r2, r3
 800b33a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b33c:	e00f      	b.n	800b35e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b33e:	4b22      	ldr	r3, [pc, #136]	@ (800b3c8 <UART_SetConfig+0x928>)
 800b340:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b342:	e00c      	b.n	800b35e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b344:	4b21      	ldr	r3, [pc, #132]	@ (800b3cc <UART_SetConfig+0x92c>)
 800b346:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b348:	e009      	b.n	800b35e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b34a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b34e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b350:	e005      	b.n	800b35e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b352:	2300      	movs	r3, #0
 800b354:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b356:	2301      	movs	r3, #1
 800b358:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b35c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b35e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b360:	2b00      	cmp	r3, #0
 800b362:	f000 80e7 	beq.w	800b534 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b36a:	4a19      	ldr	r2, [pc, #100]	@ (800b3d0 <UART_SetConfig+0x930>)
 800b36c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b370:	461a      	mov	r2, r3
 800b372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b374:	fbb3 f3f2 	udiv	r3, r3, r2
 800b378:	005a      	lsls	r2, r3, #1
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	085b      	lsrs	r3, r3, #1
 800b380:	441a      	add	r2, r3
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	685b      	ldr	r3, [r3, #4]
 800b386:	fbb2 f3f3 	udiv	r3, r2, r3
 800b38a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b38c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b38e:	2b0f      	cmp	r3, #15
 800b390:	d916      	bls.n	800b3c0 <UART_SetConfig+0x920>
 800b392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b394:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b398:	d212      	bcs.n	800b3c0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b39a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b39c:	b29b      	uxth	r3, r3
 800b39e:	f023 030f 	bic.w	r3, r3, #15
 800b3a2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b3a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3a6:	085b      	lsrs	r3, r3, #1
 800b3a8:	b29b      	uxth	r3, r3
 800b3aa:	f003 0307 	and.w	r3, r3, #7
 800b3ae:	b29a      	uxth	r2, r3
 800b3b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b3b2:	4313      	orrs	r3, r2
 800b3b4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b3bc:	60da      	str	r2, [r3, #12]
 800b3be:	e0b9      	b.n	800b534 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b3c6:	e0b5      	b.n	800b534 <UART_SetConfig+0xa94>
 800b3c8:	03d09000 	.word	0x03d09000
 800b3cc:	003d0900 	.word	0x003d0900
 800b3d0:	08012774 	.word	0x08012774
 800b3d4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b3d8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b3dc:	2b20      	cmp	r3, #32
 800b3de:	dc49      	bgt.n	800b474 <UART_SetConfig+0x9d4>
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	db7c      	blt.n	800b4de <UART_SetConfig+0xa3e>
 800b3e4:	2b20      	cmp	r3, #32
 800b3e6:	d87a      	bhi.n	800b4de <UART_SetConfig+0xa3e>
 800b3e8:	a201      	add	r2, pc, #4	@ (adr r2, 800b3f0 <UART_SetConfig+0x950>)
 800b3ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ee:	bf00      	nop
 800b3f0:	0800b47b 	.word	0x0800b47b
 800b3f4:	0800b483 	.word	0x0800b483
 800b3f8:	0800b4df 	.word	0x0800b4df
 800b3fc:	0800b4df 	.word	0x0800b4df
 800b400:	0800b48b 	.word	0x0800b48b
 800b404:	0800b4df 	.word	0x0800b4df
 800b408:	0800b4df 	.word	0x0800b4df
 800b40c:	0800b4df 	.word	0x0800b4df
 800b410:	0800b49b 	.word	0x0800b49b
 800b414:	0800b4df 	.word	0x0800b4df
 800b418:	0800b4df 	.word	0x0800b4df
 800b41c:	0800b4df 	.word	0x0800b4df
 800b420:	0800b4df 	.word	0x0800b4df
 800b424:	0800b4df 	.word	0x0800b4df
 800b428:	0800b4df 	.word	0x0800b4df
 800b42c:	0800b4df 	.word	0x0800b4df
 800b430:	0800b4ab 	.word	0x0800b4ab
 800b434:	0800b4df 	.word	0x0800b4df
 800b438:	0800b4df 	.word	0x0800b4df
 800b43c:	0800b4df 	.word	0x0800b4df
 800b440:	0800b4df 	.word	0x0800b4df
 800b444:	0800b4df 	.word	0x0800b4df
 800b448:	0800b4df 	.word	0x0800b4df
 800b44c:	0800b4df 	.word	0x0800b4df
 800b450:	0800b4df 	.word	0x0800b4df
 800b454:	0800b4df 	.word	0x0800b4df
 800b458:	0800b4df 	.word	0x0800b4df
 800b45c:	0800b4df 	.word	0x0800b4df
 800b460:	0800b4df 	.word	0x0800b4df
 800b464:	0800b4df 	.word	0x0800b4df
 800b468:	0800b4df 	.word	0x0800b4df
 800b46c:	0800b4df 	.word	0x0800b4df
 800b470:	0800b4d1 	.word	0x0800b4d1
 800b474:	2b40      	cmp	r3, #64	@ 0x40
 800b476:	d02e      	beq.n	800b4d6 <UART_SetConfig+0xa36>
 800b478:	e031      	b.n	800b4de <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b47a:	f7fc f81f 	bl	80074bc <HAL_RCC_GetPCLK1Freq>
 800b47e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b480:	e033      	b.n	800b4ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b482:	f7fc f831 	bl	80074e8 <HAL_RCC_GetPCLK2Freq>
 800b486:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b488:	e02f      	b.n	800b4ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b48a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b48e:	4618      	mov	r0, r3
 800b490:	f7fd fa60 	bl	8008954 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b496:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b498:	e027      	b.n	800b4ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b49a:	f107 0318 	add.w	r3, r7, #24
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f7fd fbac 	bl	8008bfc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b4a4:	69fb      	ldr	r3, [r7, #28]
 800b4a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4a8:	e01f      	b.n	800b4ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4aa:	4b2d      	ldr	r3, [pc, #180]	@ (800b560 <UART_SetConfig+0xac0>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f003 0320 	and.w	r3, r3, #32
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d009      	beq.n	800b4ca <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b4b6:	4b2a      	ldr	r3, [pc, #168]	@ (800b560 <UART_SetConfig+0xac0>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	08db      	lsrs	r3, r3, #3
 800b4bc:	f003 0303 	and.w	r3, r3, #3
 800b4c0:	4a28      	ldr	r2, [pc, #160]	@ (800b564 <UART_SetConfig+0xac4>)
 800b4c2:	fa22 f303 	lsr.w	r3, r2, r3
 800b4c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b4c8:	e00f      	b.n	800b4ea <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b4ca:	4b26      	ldr	r3, [pc, #152]	@ (800b564 <UART_SetConfig+0xac4>)
 800b4cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4ce:	e00c      	b.n	800b4ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b4d0:	4b25      	ldr	r3, [pc, #148]	@ (800b568 <UART_SetConfig+0xac8>)
 800b4d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4d4:	e009      	b.n	800b4ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b4d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b4da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4dc:	e005      	b.n	800b4ea <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b4e8:	bf00      	nop
    }

    if (pclk != 0U)
 800b4ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d021      	beq.n	800b534 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4f4:	4a1d      	ldr	r2, [pc, #116]	@ (800b56c <UART_SetConfig+0xacc>)
 800b4f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4fe:	fbb3 f2f2 	udiv	r2, r3, r2
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	085b      	lsrs	r3, r3, #1
 800b508:	441a      	add	r2, r3
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b512:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b516:	2b0f      	cmp	r3, #15
 800b518:	d909      	bls.n	800b52e <UART_SetConfig+0xa8e>
 800b51a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b51c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b520:	d205      	bcs.n	800b52e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b524:	b29a      	uxth	r2, r3
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	60da      	str	r2, [r3, #12]
 800b52c:	e002      	b.n	800b534 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b52e:	2301      	movs	r3, #1
 800b530:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	2201      	movs	r2, #1
 800b538:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	2201      	movs	r2, #1
 800b540:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	2200      	movs	r2, #0
 800b548:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	2200      	movs	r2, #0
 800b54e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b550:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b554:	4618      	mov	r0, r3
 800b556:	3748      	adds	r7, #72	@ 0x48
 800b558:	46bd      	mov	sp, r7
 800b55a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b55e:	bf00      	nop
 800b560:	58024400 	.word	0x58024400
 800b564:	03d09000 	.word	0x03d09000
 800b568:	003d0900 	.word	0x003d0900
 800b56c:	08012774 	.word	0x08012774

0800b570 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b570:	b480      	push	{r7}
 800b572:	b083      	sub	sp, #12
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b57c:	f003 0308 	and.w	r3, r3, #8
 800b580:	2b00      	cmp	r3, #0
 800b582:	d00a      	beq.n	800b59a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	430a      	orrs	r2, r1
 800b598:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b59e:	f003 0301 	and.w	r3, r3, #1
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d00a      	beq.n	800b5bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	685b      	ldr	r3, [r3, #4]
 800b5ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	430a      	orrs	r2, r1
 800b5ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5c0:	f003 0302 	and.w	r3, r3, #2
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d00a      	beq.n	800b5de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	685b      	ldr	r3, [r3, #4]
 800b5ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	430a      	orrs	r2, r1
 800b5dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5e2:	f003 0304 	and.w	r3, r3, #4
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d00a      	beq.n	800b600 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	685b      	ldr	r3, [r3, #4]
 800b5f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	430a      	orrs	r2, r1
 800b5fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b604:	f003 0310 	and.w	r3, r3, #16
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d00a      	beq.n	800b622 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	689b      	ldr	r3, [r3, #8]
 800b612:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	430a      	orrs	r2, r1
 800b620:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b626:	f003 0320 	and.w	r3, r3, #32
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d00a      	beq.n	800b644 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	689b      	ldr	r3, [r3, #8]
 800b634:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	430a      	orrs	r2, r1
 800b642:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d01a      	beq.n	800b686 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	430a      	orrs	r2, r1
 800b664:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b66a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b66e:	d10a      	bne.n	800b686 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	430a      	orrs	r2, r1
 800b684:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b68a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d00a      	beq.n	800b6a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	685b      	ldr	r3, [r3, #4]
 800b698:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	430a      	orrs	r2, r1
 800b6a6:	605a      	str	r2, [r3, #4]
  }
}
 800b6a8:	bf00      	nop
 800b6aa:	370c      	adds	r7, #12
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b2:	4770      	bx	lr

0800b6b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b098      	sub	sp, #96	@ 0x60
 800b6b8:	af02      	add	r7, sp, #8
 800b6ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b6c4:	f7f6 ff7e 	bl	80025c4 <HAL_GetTick>
 800b6c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f003 0308 	and.w	r3, r3, #8
 800b6d4:	2b08      	cmp	r3, #8
 800b6d6:	d12f      	bne.n	800b738 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b6d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b6dc:	9300      	str	r3, [sp, #0]
 800b6de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 f88e 	bl	800b808 <UART_WaitOnFlagUntilTimeout>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d022      	beq.n	800b738 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6fa:	e853 3f00 	ldrex	r3, [r3]
 800b6fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b702:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b706:	653b      	str	r3, [r7, #80]	@ 0x50
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	461a      	mov	r2, r3
 800b70e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b710:	647b      	str	r3, [r7, #68]	@ 0x44
 800b712:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b714:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b716:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b718:	e841 2300 	strex	r3, r2, [r1]
 800b71c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b71e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b720:	2b00      	cmp	r3, #0
 800b722:	d1e6      	bne.n	800b6f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2220      	movs	r2, #32
 800b728:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2200      	movs	r2, #0
 800b730:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b734:	2303      	movs	r3, #3
 800b736:	e063      	b.n	800b800 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f003 0304 	and.w	r3, r3, #4
 800b742:	2b04      	cmp	r3, #4
 800b744:	d149      	bne.n	800b7da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b746:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b74a:	9300      	str	r3, [sp, #0]
 800b74c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b74e:	2200      	movs	r2, #0
 800b750:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f000 f857 	bl	800b808 <UART_WaitOnFlagUntilTimeout>
 800b75a:	4603      	mov	r3, r0
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d03c      	beq.n	800b7da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b768:	e853 3f00 	ldrex	r3, [r3]
 800b76c:	623b      	str	r3, [r7, #32]
   return(result);
 800b76e:	6a3b      	ldr	r3, [r7, #32]
 800b770:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b774:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	461a      	mov	r2, r3
 800b77c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b77e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b780:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b782:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b784:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b786:	e841 2300 	strex	r3, r2, [r1]
 800b78a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b78c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d1e6      	bne.n	800b760 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	3308      	adds	r3, #8
 800b798:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	e853 3f00 	ldrex	r3, [r3]
 800b7a0:	60fb      	str	r3, [r7, #12]
   return(result);
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	f023 0301 	bic.w	r3, r3, #1
 800b7a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	3308      	adds	r3, #8
 800b7b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b7b2:	61fa      	str	r2, [r7, #28]
 800b7b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7b6:	69b9      	ldr	r1, [r7, #24]
 800b7b8:	69fa      	ldr	r2, [r7, #28]
 800b7ba:	e841 2300 	strex	r3, r2, [r1]
 800b7be:	617b      	str	r3, [r7, #20]
   return(result);
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d1e5      	bne.n	800b792 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2220      	movs	r2, #32
 800b7ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b7d6:	2303      	movs	r3, #3
 800b7d8:	e012      	b.n	800b800 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2220      	movs	r2, #32
 800b7de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2220      	movs	r2, #32
 800b7e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b7fe:	2300      	movs	r3, #0
}
 800b800:	4618      	mov	r0, r3
 800b802:	3758      	adds	r7, #88	@ 0x58
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}

0800b808 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b084      	sub	sp, #16
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	60f8      	str	r0, [r7, #12]
 800b810:	60b9      	str	r1, [r7, #8]
 800b812:	603b      	str	r3, [r7, #0]
 800b814:	4613      	mov	r3, r2
 800b816:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b818:	e04f      	b.n	800b8ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b81a:	69bb      	ldr	r3, [r7, #24]
 800b81c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b820:	d04b      	beq.n	800b8ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b822:	f7f6 fecf 	bl	80025c4 <HAL_GetTick>
 800b826:	4602      	mov	r2, r0
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	1ad3      	subs	r3, r2, r3
 800b82c:	69ba      	ldr	r2, [r7, #24]
 800b82e:	429a      	cmp	r2, r3
 800b830:	d302      	bcc.n	800b838 <UART_WaitOnFlagUntilTimeout+0x30>
 800b832:	69bb      	ldr	r3, [r7, #24]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d101      	bne.n	800b83c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b838:	2303      	movs	r3, #3
 800b83a:	e04e      	b.n	800b8da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f003 0304 	and.w	r3, r3, #4
 800b846:	2b00      	cmp	r3, #0
 800b848:	d037      	beq.n	800b8ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	2b80      	cmp	r3, #128	@ 0x80
 800b84e:	d034      	beq.n	800b8ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	2b40      	cmp	r3, #64	@ 0x40
 800b854:	d031      	beq.n	800b8ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	69db      	ldr	r3, [r3, #28]
 800b85c:	f003 0308 	and.w	r3, r3, #8
 800b860:	2b08      	cmp	r3, #8
 800b862:	d110      	bne.n	800b886 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	2208      	movs	r2, #8
 800b86a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b86c:	68f8      	ldr	r0, [r7, #12]
 800b86e:	f000 f839 	bl	800b8e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	2208      	movs	r2, #8
 800b876:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	2200      	movs	r2, #0
 800b87e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b882:	2301      	movs	r3, #1
 800b884:	e029      	b.n	800b8da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	69db      	ldr	r3, [r3, #28]
 800b88c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b890:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b894:	d111      	bne.n	800b8ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b89e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b8a0:	68f8      	ldr	r0, [r7, #12]
 800b8a2:	f000 f81f 	bl	800b8e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2220      	movs	r2, #32
 800b8aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b8b6:	2303      	movs	r3, #3
 800b8b8:	e00f      	b.n	800b8da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	69da      	ldr	r2, [r3, #28]
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	4013      	ands	r3, r2
 800b8c4:	68ba      	ldr	r2, [r7, #8]
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	bf0c      	ite	eq
 800b8ca:	2301      	moveq	r3, #1
 800b8cc:	2300      	movne	r3, #0
 800b8ce:	b2db      	uxtb	r3, r3
 800b8d0:	461a      	mov	r2, r3
 800b8d2:	79fb      	ldrb	r3, [r7, #7]
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d0a0      	beq.n	800b81a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b8d8:	2300      	movs	r3, #0
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3710      	adds	r7, #16
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}
	...

0800b8e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b095      	sub	sp, #84	@ 0x54
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8f4:	e853 3f00 	ldrex	r3, [r3]
 800b8f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b8fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b900:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	461a      	mov	r2, r3
 800b908:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b90a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b90c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b90e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b910:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b912:	e841 2300 	strex	r3, r2, [r1]
 800b916:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d1e6      	bne.n	800b8ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	3308      	adds	r3, #8
 800b924:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b926:	6a3b      	ldr	r3, [r7, #32]
 800b928:	e853 3f00 	ldrex	r3, [r3]
 800b92c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b92e:	69fa      	ldr	r2, [r7, #28]
 800b930:	4b1e      	ldr	r3, [pc, #120]	@ (800b9ac <UART_EndRxTransfer+0xc8>)
 800b932:	4013      	ands	r3, r2
 800b934:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	3308      	adds	r3, #8
 800b93c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b93e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b940:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b942:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b944:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b946:	e841 2300 	strex	r3, r2, [r1]
 800b94a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b94c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d1e5      	bne.n	800b91e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b956:	2b01      	cmp	r3, #1
 800b958:	d118      	bne.n	800b98c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	e853 3f00 	ldrex	r3, [r3]
 800b966:	60bb      	str	r3, [r7, #8]
   return(result);
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	f023 0310 	bic.w	r3, r3, #16
 800b96e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	461a      	mov	r2, r3
 800b976:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b978:	61bb      	str	r3, [r7, #24]
 800b97a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b97c:	6979      	ldr	r1, [r7, #20]
 800b97e:	69ba      	ldr	r2, [r7, #24]
 800b980:	e841 2300 	strex	r3, r2, [r1]
 800b984:	613b      	str	r3, [r7, #16]
   return(result);
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d1e6      	bne.n	800b95a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2220      	movs	r2, #32
 800b990:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2200      	movs	r2, #0
 800b998:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2200      	movs	r2, #0
 800b99e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b9a0:	bf00      	nop
 800b9a2:	3754      	adds	r7, #84	@ 0x54
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr
 800b9ac:	effffffe 	.word	0xeffffffe

0800b9b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b9b0:	b084      	sub	sp, #16
 800b9b2:	b580      	push	{r7, lr}
 800b9b4:	b084      	sub	sp, #16
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	6078      	str	r0, [r7, #4]
 800b9ba:	f107 001c 	add.w	r0, r7, #28
 800b9be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b9c2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b9c6:	2b01      	cmp	r3, #1
 800b9c8:	d121      	bne.n	800ba0e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9ce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	68da      	ldr	r2, [r3, #12]
 800b9da:	4b2c      	ldr	r3, [pc, #176]	@ (800ba8c <USB_CoreInit+0xdc>)
 800b9dc:	4013      	ands	r3, r2
 800b9de:	687a      	ldr	r2, [r7, #4]
 800b9e0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	68db      	ldr	r3, [r3, #12]
 800b9e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b9ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b9f2:	2b01      	cmp	r3, #1
 800b9f4:	d105      	bne.n	800ba02 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	68db      	ldr	r3, [r3, #12]
 800b9fa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f001 faf6 	bl	800cff4 <USB_CoreReset>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	73fb      	strb	r3, [r7, #15]
 800ba0c:	e01b      	b.n	800ba46 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	68db      	ldr	r3, [r3, #12]
 800ba12:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f001 faea 	bl	800cff4 <USB_CoreReset>
 800ba20:	4603      	mov	r3, r0
 800ba22:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ba24:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d106      	bne.n	800ba3a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba30:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	639a      	str	r2, [r3, #56]	@ 0x38
 800ba38:	e005      	b.n	800ba46 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba3e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ba46:	7fbb      	ldrb	r3, [r7, #30]
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	d116      	bne.n	800ba7a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba50:	b29a      	uxth	r2, r3
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ba5a:	4b0d      	ldr	r3, [pc, #52]	@ (800ba90 <USB_CoreInit+0xe0>)
 800ba5c:	4313      	orrs	r3, r2
 800ba5e:	687a      	ldr	r2, [r7, #4]
 800ba60:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	689b      	ldr	r3, [r3, #8]
 800ba66:	f043 0206 	orr.w	r2, r3, #6
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	689b      	ldr	r3, [r3, #8]
 800ba72:	f043 0220 	orr.w	r2, r3, #32
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ba7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3710      	adds	r7, #16
 800ba80:	46bd      	mov	sp, r7
 800ba82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ba86:	b004      	add	sp, #16
 800ba88:	4770      	bx	lr
 800ba8a:	bf00      	nop
 800ba8c:	ffbdffbf 	.word	0xffbdffbf
 800ba90:	03ee0000 	.word	0x03ee0000

0800ba94 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b087      	sub	sp, #28
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	60f8      	str	r0, [r7, #12]
 800ba9c:	60b9      	str	r1, [r7, #8]
 800ba9e:	4613      	mov	r3, r2
 800baa0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800baa2:	79fb      	ldrb	r3, [r7, #7]
 800baa4:	2b02      	cmp	r3, #2
 800baa6:	d165      	bne.n	800bb74 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	4a41      	ldr	r2, [pc, #260]	@ (800bbb0 <USB_SetTurnaroundTime+0x11c>)
 800baac:	4293      	cmp	r3, r2
 800baae:	d906      	bls.n	800babe <USB_SetTurnaroundTime+0x2a>
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	4a40      	ldr	r2, [pc, #256]	@ (800bbb4 <USB_SetTurnaroundTime+0x120>)
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d202      	bcs.n	800babe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800bab8:	230f      	movs	r3, #15
 800baba:	617b      	str	r3, [r7, #20]
 800babc:	e062      	b.n	800bb84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	4a3c      	ldr	r2, [pc, #240]	@ (800bbb4 <USB_SetTurnaroundTime+0x120>)
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d306      	bcc.n	800bad4 <USB_SetTurnaroundTime+0x40>
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	4a3b      	ldr	r2, [pc, #236]	@ (800bbb8 <USB_SetTurnaroundTime+0x124>)
 800baca:	4293      	cmp	r3, r2
 800bacc:	d202      	bcs.n	800bad4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800bace:	230e      	movs	r3, #14
 800bad0:	617b      	str	r3, [r7, #20]
 800bad2:	e057      	b.n	800bb84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	4a38      	ldr	r2, [pc, #224]	@ (800bbb8 <USB_SetTurnaroundTime+0x124>)
 800bad8:	4293      	cmp	r3, r2
 800bada:	d306      	bcc.n	800baea <USB_SetTurnaroundTime+0x56>
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	4a37      	ldr	r2, [pc, #220]	@ (800bbbc <USB_SetTurnaroundTime+0x128>)
 800bae0:	4293      	cmp	r3, r2
 800bae2:	d202      	bcs.n	800baea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800bae4:	230d      	movs	r3, #13
 800bae6:	617b      	str	r3, [r7, #20]
 800bae8:	e04c      	b.n	800bb84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	4a33      	ldr	r2, [pc, #204]	@ (800bbbc <USB_SetTurnaroundTime+0x128>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d306      	bcc.n	800bb00 <USB_SetTurnaroundTime+0x6c>
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	4a32      	ldr	r2, [pc, #200]	@ (800bbc0 <USB_SetTurnaroundTime+0x12c>)
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d802      	bhi.n	800bb00 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800bafa:	230c      	movs	r3, #12
 800bafc:	617b      	str	r3, [r7, #20]
 800bafe:	e041      	b.n	800bb84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	4a2f      	ldr	r2, [pc, #188]	@ (800bbc0 <USB_SetTurnaroundTime+0x12c>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d906      	bls.n	800bb16 <USB_SetTurnaroundTime+0x82>
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	4a2e      	ldr	r2, [pc, #184]	@ (800bbc4 <USB_SetTurnaroundTime+0x130>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d802      	bhi.n	800bb16 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800bb10:	230b      	movs	r3, #11
 800bb12:	617b      	str	r3, [r7, #20]
 800bb14:	e036      	b.n	800bb84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	4a2a      	ldr	r2, [pc, #168]	@ (800bbc4 <USB_SetTurnaroundTime+0x130>)
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d906      	bls.n	800bb2c <USB_SetTurnaroundTime+0x98>
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	4a29      	ldr	r2, [pc, #164]	@ (800bbc8 <USB_SetTurnaroundTime+0x134>)
 800bb22:	4293      	cmp	r3, r2
 800bb24:	d802      	bhi.n	800bb2c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800bb26:	230a      	movs	r3, #10
 800bb28:	617b      	str	r3, [r7, #20]
 800bb2a:	e02b      	b.n	800bb84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	4a26      	ldr	r2, [pc, #152]	@ (800bbc8 <USB_SetTurnaroundTime+0x134>)
 800bb30:	4293      	cmp	r3, r2
 800bb32:	d906      	bls.n	800bb42 <USB_SetTurnaroundTime+0xae>
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	4a25      	ldr	r2, [pc, #148]	@ (800bbcc <USB_SetTurnaroundTime+0x138>)
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	d202      	bcs.n	800bb42 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800bb3c:	2309      	movs	r3, #9
 800bb3e:	617b      	str	r3, [r7, #20]
 800bb40:	e020      	b.n	800bb84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	4a21      	ldr	r2, [pc, #132]	@ (800bbcc <USB_SetTurnaroundTime+0x138>)
 800bb46:	4293      	cmp	r3, r2
 800bb48:	d306      	bcc.n	800bb58 <USB_SetTurnaroundTime+0xc4>
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	4a20      	ldr	r2, [pc, #128]	@ (800bbd0 <USB_SetTurnaroundTime+0x13c>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d802      	bhi.n	800bb58 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800bb52:	2308      	movs	r3, #8
 800bb54:	617b      	str	r3, [r7, #20]
 800bb56:	e015      	b.n	800bb84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	4a1d      	ldr	r2, [pc, #116]	@ (800bbd0 <USB_SetTurnaroundTime+0x13c>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d906      	bls.n	800bb6e <USB_SetTurnaroundTime+0xda>
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	4a1c      	ldr	r2, [pc, #112]	@ (800bbd4 <USB_SetTurnaroundTime+0x140>)
 800bb64:	4293      	cmp	r3, r2
 800bb66:	d202      	bcs.n	800bb6e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800bb68:	2307      	movs	r3, #7
 800bb6a:	617b      	str	r3, [r7, #20]
 800bb6c:	e00a      	b.n	800bb84 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800bb6e:	2306      	movs	r3, #6
 800bb70:	617b      	str	r3, [r7, #20]
 800bb72:	e007      	b.n	800bb84 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800bb74:	79fb      	ldrb	r3, [r7, #7]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d102      	bne.n	800bb80 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800bb7a:	2309      	movs	r3, #9
 800bb7c:	617b      	str	r3, [r7, #20]
 800bb7e:	e001      	b.n	800bb84 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800bb80:	2309      	movs	r3, #9
 800bb82:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	68db      	ldr	r3, [r3, #12]
 800bb88:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	68da      	ldr	r2, [r3, #12]
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	029b      	lsls	r3, r3, #10
 800bb98:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800bb9c:	431a      	orrs	r2, r3
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bba2:	2300      	movs	r3, #0
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	371c      	adds	r7, #28
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbae:	4770      	bx	lr
 800bbb0:	00d8acbf 	.word	0x00d8acbf
 800bbb4:	00e4e1c0 	.word	0x00e4e1c0
 800bbb8:	00f42400 	.word	0x00f42400
 800bbbc:	01067380 	.word	0x01067380
 800bbc0:	011a499f 	.word	0x011a499f
 800bbc4:	01312cff 	.word	0x01312cff
 800bbc8:	014ca43f 	.word	0x014ca43f
 800bbcc:	016e3600 	.word	0x016e3600
 800bbd0:	01a6ab1f 	.word	0x01a6ab1f
 800bbd4:	01e84800 	.word	0x01e84800

0800bbd8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bbd8:	b480      	push	{r7}
 800bbda:	b083      	sub	sp, #12
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	689b      	ldr	r3, [r3, #8]
 800bbe4:	f043 0201 	orr.w	r2, r3, #1
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bbec:	2300      	movs	r3, #0
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	370c      	adds	r7, #12
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf8:	4770      	bx	lr

0800bbfa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bbfa:	b480      	push	{r7}
 800bbfc:	b083      	sub	sp, #12
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	689b      	ldr	r3, [r3, #8]
 800bc06:	f023 0201 	bic.w	r2, r3, #1
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bc0e:	2300      	movs	r3, #0
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	370c      	adds	r7, #12
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr

0800bc1c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b084      	sub	sp, #16
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	460b      	mov	r3, r1
 800bc26:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bc28:	2300      	movs	r3, #0
 800bc2a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	68db      	ldr	r3, [r3, #12]
 800bc30:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bc38:	78fb      	ldrb	r3, [r7, #3]
 800bc3a:	2b01      	cmp	r3, #1
 800bc3c:	d115      	bne.n	800bc6a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	68db      	ldr	r3, [r3, #12]
 800bc42:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800bc4a:	200a      	movs	r0, #10
 800bc4c:	f7f6 fcc6 	bl	80025dc <HAL_Delay>
      ms += 10U;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	330a      	adds	r3, #10
 800bc54:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f001 f93b 	bl	800ced2 <USB_GetMode>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	2b01      	cmp	r3, #1
 800bc60:	d01e      	beq.n	800bca0 <USB_SetCurrentMode+0x84>
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	2bc7      	cmp	r3, #199	@ 0xc7
 800bc66:	d9f0      	bls.n	800bc4a <USB_SetCurrentMode+0x2e>
 800bc68:	e01a      	b.n	800bca0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bc6a:	78fb      	ldrb	r3, [r7, #3]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d115      	bne.n	800bc9c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	68db      	ldr	r3, [r3, #12]
 800bc74:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800bc7c:	200a      	movs	r0, #10
 800bc7e:	f7f6 fcad 	bl	80025dc <HAL_Delay>
      ms += 10U;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	330a      	adds	r3, #10
 800bc86:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f001 f922 	bl	800ced2 <USB_GetMode>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d005      	beq.n	800bca0 <USB_SetCurrentMode+0x84>
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	2bc7      	cmp	r3, #199	@ 0xc7
 800bc98:	d9f0      	bls.n	800bc7c <USB_SetCurrentMode+0x60>
 800bc9a:	e001      	b.n	800bca0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	e005      	b.n	800bcac <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2bc8      	cmp	r3, #200	@ 0xc8
 800bca4:	d101      	bne.n	800bcaa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bca6:	2301      	movs	r3, #1
 800bca8:	e000      	b.n	800bcac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bcaa:	2300      	movs	r3, #0
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3710      	adds	r7, #16
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}

0800bcb4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bcb4:	b084      	sub	sp, #16
 800bcb6:	b580      	push	{r7, lr}
 800bcb8:	b086      	sub	sp, #24
 800bcba:	af00      	add	r7, sp, #0
 800bcbc:	6078      	str	r0, [r7, #4]
 800bcbe:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800bcc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bcce:	2300      	movs	r3, #0
 800bcd0:	613b      	str	r3, [r7, #16]
 800bcd2:	e009      	b.n	800bce8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bcd4:	687a      	ldr	r2, [r7, #4]
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	3340      	adds	r3, #64	@ 0x40
 800bcda:	009b      	lsls	r3, r3, #2
 800bcdc:	4413      	add	r3, r2
 800bcde:	2200      	movs	r2, #0
 800bce0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	3301      	adds	r3, #1
 800bce6:	613b      	str	r3, [r7, #16]
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	2b0e      	cmp	r3, #14
 800bcec:	d9f2      	bls.n	800bcd4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bcee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d11c      	bne.n	800bd30 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	68fa      	ldr	r2, [r7, #12]
 800bd00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bd04:	f043 0302 	orr.w	r3, r3, #2
 800bd08:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd0e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	601a      	str	r2, [r3, #0]
 800bd2e:	e005      	b.n	800bd3c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd34:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bd42:	461a      	mov	r2, r3
 800bd44:	2300      	movs	r3, #0
 800bd46:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bd48:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800bd4c:	2b01      	cmp	r3, #1
 800bd4e:	d10d      	bne.n	800bd6c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bd50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d104      	bne.n	800bd62 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bd58:	2100      	movs	r1, #0
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f000 f968 	bl	800c030 <USB_SetDevSpeed>
 800bd60:	e008      	b.n	800bd74 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bd62:	2101      	movs	r1, #1
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f000 f963 	bl	800c030 <USB_SetDevSpeed>
 800bd6a:	e003      	b.n	800bd74 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bd6c:	2103      	movs	r1, #3
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f000 f95e 	bl	800c030 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bd74:	2110      	movs	r1, #16
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f000 f8fa 	bl	800bf70 <USB_FlushTxFifo>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d001      	beq.n	800bd86 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800bd82:	2301      	movs	r3, #1
 800bd84:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f000 f924 	bl	800bfd4 <USB_FlushRxFifo>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d001      	beq.n	800bd96 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800bd92:	2301      	movs	r3, #1
 800bd94:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	2300      	movs	r3, #0
 800bda0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bda8:	461a      	mov	r2, r3
 800bdaa:	2300      	movs	r3, #0
 800bdac:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bdba:	2300      	movs	r3, #0
 800bdbc:	613b      	str	r3, [r7, #16]
 800bdbe:	e043      	b.n	800be48 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	015a      	lsls	r2, r3, #5
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	4413      	add	r3, r2
 800bdc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bdd2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bdd6:	d118      	bne.n	800be0a <USB_DevInit+0x156>
    {
      if (i == 0U)
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d10a      	bne.n	800bdf4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	015a      	lsls	r2, r3, #5
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	4413      	add	r3, r2
 800bde6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bdea:	461a      	mov	r2, r3
 800bdec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800bdf0:	6013      	str	r3, [r2, #0]
 800bdf2:	e013      	b.n	800be1c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	015a      	lsls	r2, r3, #5
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	4413      	add	r3, r2
 800bdfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be00:	461a      	mov	r2, r3
 800be02:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800be06:	6013      	str	r3, [r2, #0]
 800be08:	e008      	b.n	800be1c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	015a      	lsls	r2, r3, #5
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	4413      	add	r3, r2
 800be12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be16:	461a      	mov	r2, r3
 800be18:	2300      	movs	r3, #0
 800be1a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800be1c:	693b      	ldr	r3, [r7, #16]
 800be1e:	015a      	lsls	r2, r3, #5
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	4413      	add	r3, r2
 800be24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be28:	461a      	mov	r2, r3
 800be2a:	2300      	movs	r3, #0
 800be2c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800be2e:	693b      	ldr	r3, [r7, #16]
 800be30:	015a      	lsls	r2, r3, #5
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	4413      	add	r3, r2
 800be36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be3a:	461a      	mov	r2, r3
 800be3c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800be40:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	3301      	adds	r3, #1
 800be46:	613b      	str	r3, [r7, #16]
 800be48:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800be4c:	461a      	mov	r2, r3
 800be4e:	693b      	ldr	r3, [r7, #16]
 800be50:	4293      	cmp	r3, r2
 800be52:	d3b5      	bcc.n	800bdc0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800be54:	2300      	movs	r3, #0
 800be56:	613b      	str	r3, [r7, #16]
 800be58:	e043      	b.n	800bee2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	015a      	lsls	r2, r3, #5
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	4413      	add	r3, r2
 800be62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800be6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800be70:	d118      	bne.n	800bea4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800be72:	693b      	ldr	r3, [r7, #16]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d10a      	bne.n	800be8e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	015a      	lsls	r2, r3, #5
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	4413      	add	r3, r2
 800be80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be84:	461a      	mov	r2, r3
 800be86:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800be8a:	6013      	str	r3, [r2, #0]
 800be8c:	e013      	b.n	800beb6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	015a      	lsls	r2, r3, #5
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	4413      	add	r3, r2
 800be96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be9a:	461a      	mov	r2, r3
 800be9c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800bea0:	6013      	str	r3, [r2, #0]
 800bea2:	e008      	b.n	800beb6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bea4:	693b      	ldr	r3, [r7, #16]
 800bea6:	015a      	lsls	r2, r3, #5
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	4413      	add	r3, r2
 800beac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800beb0:	461a      	mov	r2, r3
 800beb2:	2300      	movs	r3, #0
 800beb4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	015a      	lsls	r2, r3, #5
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	4413      	add	r3, r2
 800bebe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bec2:	461a      	mov	r2, r3
 800bec4:	2300      	movs	r3, #0
 800bec6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bec8:	693b      	ldr	r3, [r7, #16]
 800beca:	015a      	lsls	r2, r3, #5
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	4413      	add	r3, r2
 800bed0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bed4:	461a      	mov	r2, r3
 800bed6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800beda:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	3301      	adds	r3, #1
 800bee0:	613b      	str	r3, [r7, #16]
 800bee2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bee6:	461a      	mov	r2, r3
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	4293      	cmp	r3, r2
 800beec:	d3b5      	bcc.n	800be5a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bef4:	691b      	ldr	r3, [r3, #16]
 800bef6:	68fa      	ldr	r2, [r7, #12]
 800bef8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800befc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bf00:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2200      	movs	r2, #0
 800bf06:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800bf0e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bf10:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d105      	bne.n	800bf24 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	699b      	ldr	r3, [r3, #24]
 800bf1c:	f043 0210 	orr.w	r2, r3, #16
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	699a      	ldr	r2, [r3, #24]
 800bf28:	4b0f      	ldr	r3, [pc, #60]	@ (800bf68 <USB_DevInit+0x2b4>)
 800bf2a:	4313      	orrs	r3, r2
 800bf2c:	687a      	ldr	r2, [r7, #4]
 800bf2e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bf30:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d005      	beq.n	800bf44 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	699b      	ldr	r3, [r3, #24]
 800bf3c:	f043 0208 	orr.w	r2, r3, #8
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bf44:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bf48:	2b01      	cmp	r3, #1
 800bf4a:	d105      	bne.n	800bf58 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	699a      	ldr	r2, [r3, #24]
 800bf50:	4b06      	ldr	r3, [pc, #24]	@ (800bf6c <USB_DevInit+0x2b8>)
 800bf52:	4313      	orrs	r3, r2
 800bf54:	687a      	ldr	r2, [r7, #4]
 800bf56:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bf58:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3718      	adds	r7, #24
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bf64:	b004      	add	sp, #16
 800bf66:	4770      	bx	lr
 800bf68:	803c3800 	.word	0x803c3800
 800bf6c:	40000004 	.word	0x40000004

0800bf70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bf70:	b480      	push	{r7}
 800bf72:	b085      	sub	sp, #20
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	3301      	adds	r3, #1
 800bf82:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bf8a:	d901      	bls.n	800bf90 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bf8c:	2303      	movs	r3, #3
 800bf8e:	e01b      	b.n	800bfc8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	691b      	ldr	r3, [r3, #16]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	daf2      	bge.n	800bf7e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	019b      	lsls	r3, r3, #6
 800bfa0:	f043 0220 	orr.w	r2, r3, #32
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	3301      	adds	r3, #1
 800bfac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bfb4:	d901      	bls.n	800bfba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bfb6:	2303      	movs	r3, #3
 800bfb8:	e006      	b.n	800bfc8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	691b      	ldr	r3, [r3, #16]
 800bfbe:	f003 0320 	and.w	r3, r3, #32
 800bfc2:	2b20      	cmp	r3, #32
 800bfc4:	d0f0      	beq.n	800bfa8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bfc6:	2300      	movs	r3, #0
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3714      	adds	r7, #20
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd2:	4770      	bx	lr

0800bfd4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b085      	sub	sp, #20
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	3301      	adds	r3, #1
 800bfe4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bfec:	d901      	bls.n	800bff2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bfee:	2303      	movs	r3, #3
 800bff0:	e018      	b.n	800c024 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	691b      	ldr	r3, [r3, #16]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	daf2      	bge.n	800bfe0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bffa:	2300      	movs	r3, #0
 800bffc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2210      	movs	r2, #16
 800c002:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	3301      	adds	r3, #1
 800c008:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c010:	d901      	bls.n	800c016 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c012:	2303      	movs	r3, #3
 800c014:	e006      	b.n	800c024 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	691b      	ldr	r3, [r3, #16]
 800c01a:	f003 0310 	and.w	r3, r3, #16
 800c01e:	2b10      	cmp	r3, #16
 800c020:	d0f0      	beq.n	800c004 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c022:	2300      	movs	r3, #0
}
 800c024:	4618      	mov	r0, r3
 800c026:	3714      	adds	r7, #20
 800c028:	46bd      	mov	sp, r7
 800c02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02e:	4770      	bx	lr

0800c030 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c030:	b480      	push	{r7}
 800c032:	b085      	sub	sp, #20
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
 800c038:	460b      	mov	r3, r1
 800c03a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c046:	681a      	ldr	r2, [r3, #0]
 800c048:	78fb      	ldrb	r3, [r7, #3]
 800c04a:	68f9      	ldr	r1, [r7, #12]
 800c04c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c050:	4313      	orrs	r3, r2
 800c052:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c054:	2300      	movs	r3, #0
}
 800c056:	4618      	mov	r0, r3
 800c058:	3714      	adds	r7, #20
 800c05a:	46bd      	mov	sp, r7
 800c05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c060:	4770      	bx	lr

0800c062 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800c062:	b480      	push	{r7}
 800c064:	b087      	sub	sp, #28
 800c066:	af00      	add	r7, sp, #0
 800c068:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c074:	689b      	ldr	r3, [r3, #8]
 800c076:	f003 0306 	and.w	r3, r3, #6
 800c07a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d102      	bne.n	800c088 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c082:	2300      	movs	r3, #0
 800c084:	75fb      	strb	r3, [r7, #23]
 800c086:	e00a      	b.n	800c09e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	2b02      	cmp	r3, #2
 800c08c:	d002      	beq.n	800c094 <USB_GetDevSpeed+0x32>
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	2b06      	cmp	r3, #6
 800c092:	d102      	bne.n	800c09a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c094:	2302      	movs	r3, #2
 800c096:	75fb      	strb	r3, [r7, #23]
 800c098:	e001      	b.n	800c09e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c09a:	230f      	movs	r3, #15
 800c09c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c09e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	371c      	adds	r7, #28
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0aa:	4770      	bx	lr

0800c0ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b085      	sub	sp, #20
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
 800c0b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	781b      	ldrb	r3, [r3, #0]
 800c0be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	785b      	ldrb	r3, [r3, #1]
 800c0c4:	2b01      	cmp	r3, #1
 800c0c6:	d139      	bne.n	800c13c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c0ce:	69da      	ldr	r2, [r3, #28]
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	781b      	ldrb	r3, [r3, #0]
 800c0d4:	f003 030f 	and.w	r3, r3, #15
 800c0d8:	2101      	movs	r1, #1
 800c0da:	fa01 f303 	lsl.w	r3, r1, r3
 800c0de:	b29b      	uxth	r3, r3
 800c0e0:	68f9      	ldr	r1, [r7, #12]
 800c0e2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c0e6:	4313      	orrs	r3, r2
 800c0e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	015a      	lsls	r2, r3, #5
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	4413      	add	r3, r2
 800c0f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d153      	bne.n	800c1a8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	015a      	lsls	r2, r3, #5
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	4413      	add	r3, r2
 800c108:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c10c:	681a      	ldr	r2, [r3, #0]
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	689b      	ldr	r3, [r3, #8]
 800c112:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	791b      	ldrb	r3, [r3, #4]
 800c11a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c11c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	059b      	lsls	r3, r3, #22
 800c122:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c124:	431a      	orrs	r2, r3
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	0159      	lsls	r1, r3, #5
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	440b      	add	r3, r1
 800c12e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c132:	4619      	mov	r1, r3
 800c134:	4b20      	ldr	r3, [pc, #128]	@ (800c1b8 <USB_ActivateEndpoint+0x10c>)
 800c136:	4313      	orrs	r3, r2
 800c138:	600b      	str	r3, [r1, #0]
 800c13a:	e035      	b.n	800c1a8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c142:	69da      	ldr	r2, [r3, #28]
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	781b      	ldrb	r3, [r3, #0]
 800c148:	f003 030f 	and.w	r3, r3, #15
 800c14c:	2101      	movs	r1, #1
 800c14e:	fa01 f303 	lsl.w	r3, r1, r3
 800c152:	041b      	lsls	r3, r3, #16
 800c154:	68f9      	ldr	r1, [r7, #12]
 800c156:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c15a:	4313      	orrs	r3, r2
 800c15c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	015a      	lsls	r2, r3, #5
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	4413      	add	r3, r2
 800c166:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c170:	2b00      	cmp	r3, #0
 800c172:	d119      	bne.n	800c1a8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	015a      	lsls	r2, r3, #5
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	4413      	add	r3, r2
 800c17c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c180:	681a      	ldr	r2, [r3, #0]
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	689b      	ldr	r3, [r3, #8]
 800c186:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	791b      	ldrb	r3, [r3, #4]
 800c18e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c190:	430b      	orrs	r3, r1
 800c192:	431a      	orrs	r2, r3
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	0159      	lsls	r1, r3, #5
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	440b      	add	r3, r1
 800c19c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c1a0:	4619      	mov	r1, r3
 800c1a2:	4b05      	ldr	r3, [pc, #20]	@ (800c1b8 <USB_ActivateEndpoint+0x10c>)
 800c1a4:	4313      	orrs	r3, r2
 800c1a6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c1a8:	2300      	movs	r3, #0
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3714      	adds	r7, #20
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b4:	4770      	bx	lr
 800c1b6:	bf00      	nop
 800c1b8:	10008000 	.word	0x10008000

0800c1bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b085      	sub	sp, #20
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
 800c1c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	781b      	ldrb	r3, [r3, #0]
 800c1ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	785b      	ldrb	r3, [r3, #1]
 800c1d4:	2b01      	cmp	r3, #1
 800c1d6:	d161      	bne.n	800c29c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	015a      	lsls	r2, r3, #5
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	4413      	add	r3, r2
 800c1e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c1ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c1ee:	d11f      	bne.n	800c230 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	015a      	lsls	r2, r3, #5
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	4413      	add	r3, r2
 800c1f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	68ba      	ldr	r2, [r7, #8]
 800c200:	0151      	lsls	r1, r2, #5
 800c202:	68fa      	ldr	r2, [r7, #12]
 800c204:	440a      	add	r2, r1
 800c206:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c20a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c20e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	015a      	lsls	r2, r3, #5
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	4413      	add	r3, r2
 800c218:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	68ba      	ldr	r2, [r7, #8]
 800c220:	0151      	lsls	r1, r2, #5
 800c222:	68fa      	ldr	r2, [r7, #12]
 800c224:	440a      	add	r2, r1
 800c226:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c22a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c22e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c236:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	f003 030f 	and.w	r3, r3, #15
 800c240:	2101      	movs	r1, #1
 800c242:	fa01 f303 	lsl.w	r3, r1, r3
 800c246:	b29b      	uxth	r3, r3
 800c248:	43db      	mvns	r3, r3
 800c24a:	68f9      	ldr	r1, [r7, #12]
 800c24c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c250:	4013      	ands	r3, r2
 800c252:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c25a:	69da      	ldr	r2, [r3, #28]
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	781b      	ldrb	r3, [r3, #0]
 800c260:	f003 030f 	and.w	r3, r3, #15
 800c264:	2101      	movs	r1, #1
 800c266:	fa01 f303 	lsl.w	r3, r1, r3
 800c26a:	b29b      	uxth	r3, r3
 800c26c:	43db      	mvns	r3, r3
 800c26e:	68f9      	ldr	r1, [r7, #12]
 800c270:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c274:	4013      	ands	r3, r2
 800c276:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	015a      	lsls	r2, r3, #5
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	4413      	add	r3, r2
 800c280:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c284:	681a      	ldr	r2, [r3, #0]
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	0159      	lsls	r1, r3, #5
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	440b      	add	r3, r1
 800c28e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c292:	4619      	mov	r1, r3
 800c294:	4b35      	ldr	r3, [pc, #212]	@ (800c36c <USB_DeactivateEndpoint+0x1b0>)
 800c296:	4013      	ands	r3, r2
 800c298:	600b      	str	r3, [r1, #0]
 800c29a:	e060      	b.n	800c35e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	015a      	lsls	r2, r3, #5
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	4413      	add	r3, r2
 800c2a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c2ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c2b2:	d11f      	bne.n	800c2f4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	015a      	lsls	r2, r3, #5
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	4413      	add	r3, r2
 800c2bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	68ba      	ldr	r2, [r7, #8]
 800c2c4:	0151      	lsls	r1, r2, #5
 800c2c6:	68fa      	ldr	r2, [r7, #12]
 800c2c8:	440a      	add	r2, r1
 800c2ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c2ce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c2d2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	015a      	lsls	r2, r3, #5
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	4413      	add	r3, r2
 800c2dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	68ba      	ldr	r2, [r7, #8]
 800c2e4:	0151      	lsls	r1, r2, #5
 800c2e6:	68fa      	ldr	r2, [r7, #12]
 800c2e8:	440a      	add	r2, r1
 800c2ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c2ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c2f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c2fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	f003 030f 	and.w	r3, r3, #15
 800c304:	2101      	movs	r1, #1
 800c306:	fa01 f303 	lsl.w	r3, r1, r3
 800c30a:	041b      	lsls	r3, r3, #16
 800c30c:	43db      	mvns	r3, r3
 800c30e:	68f9      	ldr	r1, [r7, #12]
 800c310:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c314:	4013      	ands	r3, r2
 800c316:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c31e:	69da      	ldr	r2, [r3, #28]
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	781b      	ldrb	r3, [r3, #0]
 800c324:	f003 030f 	and.w	r3, r3, #15
 800c328:	2101      	movs	r1, #1
 800c32a:	fa01 f303 	lsl.w	r3, r1, r3
 800c32e:	041b      	lsls	r3, r3, #16
 800c330:	43db      	mvns	r3, r3
 800c332:	68f9      	ldr	r1, [r7, #12]
 800c334:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c338:	4013      	ands	r3, r2
 800c33a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	015a      	lsls	r2, r3, #5
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	4413      	add	r3, r2
 800c344:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c348:	681a      	ldr	r2, [r3, #0]
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	0159      	lsls	r1, r3, #5
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	440b      	add	r3, r1
 800c352:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c356:	4619      	mov	r1, r3
 800c358:	4b05      	ldr	r3, [pc, #20]	@ (800c370 <USB_DeactivateEndpoint+0x1b4>)
 800c35a:	4013      	ands	r3, r2
 800c35c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c35e:	2300      	movs	r3, #0
}
 800c360:	4618      	mov	r0, r3
 800c362:	3714      	adds	r7, #20
 800c364:	46bd      	mov	sp, r7
 800c366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36a:	4770      	bx	lr
 800c36c:	ec337800 	.word	0xec337800
 800c370:	eff37800 	.word	0xeff37800

0800c374 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b08a      	sub	sp, #40	@ 0x28
 800c378:	af02      	add	r7, sp, #8
 800c37a:	60f8      	str	r0, [r7, #12]
 800c37c:	60b9      	str	r1, [r7, #8]
 800c37e:	4613      	mov	r3, r2
 800c380:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	781b      	ldrb	r3, [r3, #0]
 800c38a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	785b      	ldrb	r3, [r3, #1]
 800c390:	2b01      	cmp	r3, #1
 800c392:	f040 8181 	bne.w	800c698 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	691b      	ldr	r3, [r3, #16]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d132      	bne.n	800c404 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c39e:	69bb      	ldr	r3, [r7, #24]
 800c3a0:	015a      	lsls	r2, r3, #5
 800c3a2:	69fb      	ldr	r3, [r7, #28]
 800c3a4:	4413      	add	r3, r2
 800c3a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c3aa:	691a      	ldr	r2, [r3, #16]
 800c3ac:	69bb      	ldr	r3, [r7, #24]
 800c3ae:	0159      	lsls	r1, r3, #5
 800c3b0:	69fb      	ldr	r3, [r7, #28]
 800c3b2:	440b      	add	r3, r1
 800c3b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c3b8:	4619      	mov	r1, r3
 800c3ba:	4ba5      	ldr	r3, [pc, #660]	@ (800c650 <USB_EPStartXfer+0x2dc>)
 800c3bc:	4013      	ands	r3, r2
 800c3be:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c3c0:	69bb      	ldr	r3, [r7, #24]
 800c3c2:	015a      	lsls	r2, r3, #5
 800c3c4:	69fb      	ldr	r3, [r7, #28]
 800c3c6:	4413      	add	r3, r2
 800c3c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c3cc:	691b      	ldr	r3, [r3, #16]
 800c3ce:	69ba      	ldr	r2, [r7, #24]
 800c3d0:	0151      	lsls	r1, r2, #5
 800c3d2:	69fa      	ldr	r2, [r7, #28]
 800c3d4:	440a      	add	r2, r1
 800c3d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c3da:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c3de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c3e0:	69bb      	ldr	r3, [r7, #24]
 800c3e2:	015a      	lsls	r2, r3, #5
 800c3e4:	69fb      	ldr	r3, [r7, #28]
 800c3e6:	4413      	add	r3, r2
 800c3e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c3ec:	691a      	ldr	r2, [r3, #16]
 800c3ee:	69bb      	ldr	r3, [r7, #24]
 800c3f0:	0159      	lsls	r1, r3, #5
 800c3f2:	69fb      	ldr	r3, [r7, #28]
 800c3f4:	440b      	add	r3, r1
 800c3f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c3fa:	4619      	mov	r1, r3
 800c3fc:	4b95      	ldr	r3, [pc, #596]	@ (800c654 <USB_EPStartXfer+0x2e0>)
 800c3fe:	4013      	ands	r3, r2
 800c400:	610b      	str	r3, [r1, #16]
 800c402:	e092      	b.n	800c52a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c404:	69bb      	ldr	r3, [r7, #24]
 800c406:	015a      	lsls	r2, r3, #5
 800c408:	69fb      	ldr	r3, [r7, #28]
 800c40a:	4413      	add	r3, r2
 800c40c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c410:	691a      	ldr	r2, [r3, #16]
 800c412:	69bb      	ldr	r3, [r7, #24]
 800c414:	0159      	lsls	r1, r3, #5
 800c416:	69fb      	ldr	r3, [r7, #28]
 800c418:	440b      	add	r3, r1
 800c41a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c41e:	4619      	mov	r1, r3
 800c420:	4b8c      	ldr	r3, [pc, #560]	@ (800c654 <USB_EPStartXfer+0x2e0>)
 800c422:	4013      	ands	r3, r2
 800c424:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c426:	69bb      	ldr	r3, [r7, #24]
 800c428:	015a      	lsls	r2, r3, #5
 800c42a:	69fb      	ldr	r3, [r7, #28]
 800c42c:	4413      	add	r3, r2
 800c42e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c432:	691a      	ldr	r2, [r3, #16]
 800c434:	69bb      	ldr	r3, [r7, #24]
 800c436:	0159      	lsls	r1, r3, #5
 800c438:	69fb      	ldr	r3, [r7, #28]
 800c43a:	440b      	add	r3, r1
 800c43c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c440:	4619      	mov	r1, r3
 800c442:	4b83      	ldr	r3, [pc, #524]	@ (800c650 <USB_EPStartXfer+0x2dc>)
 800c444:	4013      	ands	r3, r2
 800c446:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800c448:	69bb      	ldr	r3, [r7, #24]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d11a      	bne.n	800c484 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	691a      	ldr	r2, [r3, #16]
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	689b      	ldr	r3, [r3, #8]
 800c456:	429a      	cmp	r2, r3
 800c458:	d903      	bls.n	800c462 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	689a      	ldr	r2, [r3, #8]
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c462:	69bb      	ldr	r3, [r7, #24]
 800c464:	015a      	lsls	r2, r3, #5
 800c466:	69fb      	ldr	r3, [r7, #28]
 800c468:	4413      	add	r3, r2
 800c46a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c46e:	691b      	ldr	r3, [r3, #16]
 800c470:	69ba      	ldr	r2, [r7, #24]
 800c472:	0151      	lsls	r1, r2, #5
 800c474:	69fa      	ldr	r2, [r7, #28]
 800c476:	440a      	add	r2, r1
 800c478:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c47c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c480:	6113      	str	r3, [r2, #16]
 800c482:	e01b      	b.n	800c4bc <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c484:	69bb      	ldr	r3, [r7, #24]
 800c486:	015a      	lsls	r2, r3, #5
 800c488:	69fb      	ldr	r3, [r7, #28]
 800c48a:	4413      	add	r3, r2
 800c48c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c490:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	6919      	ldr	r1, [r3, #16]
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	689b      	ldr	r3, [r3, #8]
 800c49a:	440b      	add	r3, r1
 800c49c:	1e59      	subs	r1, r3, #1
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	689b      	ldr	r3, [r3, #8]
 800c4a2:	fbb1 f3f3 	udiv	r3, r1, r3
 800c4a6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c4a8:	4b6b      	ldr	r3, [pc, #428]	@ (800c658 <USB_EPStartXfer+0x2e4>)
 800c4aa:	400b      	ands	r3, r1
 800c4ac:	69b9      	ldr	r1, [r7, #24]
 800c4ae:	0148      	lsls	r0, r1, #5
 800c4b0:	69f9      	ldr	r1, [r7, #28]
 800c4b2:	4401      	add	r1, r0
 800c4b4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c4b8:	4313      	orrs	r3, r2
 800c4ba:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c4bc:	69bb      	ldr	r3, [r7, #24]
 800c4be:	015a      	lsls	r2, r3, #5
 800c4c0:	69fb      	ldr	r3, [r7, #28]
 800c4c2:	4413      	add	r3, r2
 800c4c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4c8:	691a      	ldr	r2, [r3, #16]
 800c4ca:	68bb      	ldr	r3, [r7, #8]
 800c4cc:	691b      	ldr	r3, [r3, #16]
 800c4ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c4d2:	69b9      	ldr	r1, [r7, #24]
 800c4d4:	0148      	lsls	r0, r1, #5
 800c4d6:	69f9      	ldr	r1, [r7, #28]
 800c4d8:	4401      	add	r1, r0
 800c4da:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c4de:	4313      	orrs	r3, r2
 800c4e0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	791b      	ldrb	r3, [r3, #4]
 800c4e6:	2b01      	cmp	r3, #1
 800c4e8:	d11f      	bne.n	800c52a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c4ea:	69bb      	ldr	r3, [r7, #24]
 800c4ec:	015a      	lsls	r2, r3, #5
 800c4ee:	69fb      	ldr	r3, [r7, #28]
 800c4f0:	4413      	add	r3, r2
 800c4f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4f6:	691b      	ldr	r3, [r3, #16]
 800c4f8:	69ba      	ldr	r2, [r7, #24]
 800c4fa:	0151      	lsls	r1, r2, #5
 800c4fc:	69fa      	ldr	r2, [r7, #28]
 800c4fe:	440a      	add	r2, r1
 800c500:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c504:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800c508:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c50a:	69bb      	ldr	r3, [r7, #24]
 800c50c:	015a      	lsls	r2, r3, #5
 800c50e:	69fb      	ldr	r3, [r7, #28]
 800c510:	4413      	add	r3, r2
 800c512:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c516:	691b      	ldr	r3, [r3, #16]
 800c518:	69ba      	ldr	r2, [r7, #24]
 800c51a:	0151      	lsls	r1, r2, #5
 800c51c:	69fa      	ldr	r2, [r7, #28]
 800c51e:	440a      	add	r2, r1
 800c520:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c524:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c528:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c52a:	79fb      	ldrb	r3, [r7, #7]
 800c52c:	2b01      	cmp	r3, #1
 800c52e:	d14b      	bne.n	800c5c8 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	69db      	ldr	r3, [r3, #28]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d009      	beq.n	800c54c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c538:	69bb      	ldr	r3, [r7, #24]
 800c53a:	015a      	lsls	r2, r3, #5
 800c53c:	69fb      	ldr	r3, [r7, #28]
 800c53e:	4413      	add	r3, r2
 800c540:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c544:	461a      	mov	r2, r3
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	69db      	ldr	r3, [r3, #28]
 800c54a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	791b      	ldrb	r3, [r3, #4]
 800c550:	2b01      	cmp	r3, #1
 800c552:	d128      	bne.n	800c5a6 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c554:	69fb      	ldr	r3, [r7, #28]
 800c556:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c55a:	689b      	ldr	r3, [r3, #8]
 800c55c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c560:	2b00      	cmp	r3, #0
 800c562:	d110      	bne.n	800c586 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c564:	69bb      	ldr	r3, [r7, #24]
 800c566:	015a      	lsls	r2, r3, #5
 800c568:	69fb      	ldr	r3, [r7, #28]
 800c56a:	4413      	add	r3, r2
 800c56c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	69ba      	ldr	r2, [r7, #24]
 800c574:	0151      	lsls	r1, r2, #5
 800c576:	69fa      	ldr	r2, [r7, #28]
 800c578:	440a      	add	r2, r1
 800c57a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c57e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c582:	6013      	str	r3, [r2, #0]
 800c584:	e00f      	b.n	800c5a6 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c586:	69bb      	ldr	r3, [r7, #24]
 800c588:	015a      	lsls	r2, r3, #5
 800c58a:	69fb      	ldr	r3, [r7, #28]
 800c58c:	4413      	add	r3, r2
 800c58e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	69ba      	ldr	r2, [r7, #24]
 800c596:	0151      	lsls	r1, r2, #5
 800c598:	69fa      	ldr	r2, [r7, #28]
 800c59a:	440a      	add	r2, r1
 800c59c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c5a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c5a4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c5a6:	69bb      	ldr	r3, [r7, #24]
 800c5a8:	015a      	lsls	r2, r3, #5
 800c5aa:	69fb      	ldr	r3, [r7, #28]
 800c5ac:	4413      	add	r3, r2
 800c5ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	69ba      	ldr	r2, [r7, #24]
 800c5b6:	0151      	lsls	r1, r2, #5
 800c5b8:	69fa      	ldr	r2, [r7, #28]
 800c5ba:	440a      	add	r2, r1
 800c5bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c5c0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c5c4:	6013      	str	r3, [r2, #0]
 800c5c6:	e16a      	b.n	800c89e <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c5c8:	69bb      	ldr	r3, [r7, #24]
 800c5ca:	015a      	lsls	r2, r3, #5
 800c5cc:	69fb      	ldr	r3, [r7, #28]
 800c5ce:	4413      	add	r3, r2
 800c5d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	69ba      	ldr	r2, [r7, #24]
 800c5d8:	0151      	lsls	r1, r2, #5
 800c5da:	69fa      	ldr	r2, [r7, #28]
 800c5dc:	440a      	add	r2, r1
 800c5de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c5e2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c5e6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	791b      	ldrb	r3, [r3, #4]
 800c5ec:	2b01      	cmp	r3, #1
 800c5ee:	d015      	beq.n	800c61c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	691b      	ldr	r3, [r3, #16]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	f000 8152 	beq.w	800c89e <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c5fa:	69fb      	ldr	r3, [r7, #28]
 800c5fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c600:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c602:	68bb      	ldr	r3, [r7, #8]
 800c604:	781b      	ldrb	r3, [r3, #0]
 800c606:	f003 030f 	and.w	r3, r3, #15
 800c60a:	2101      	movs	r1, #1
 800c60c:	fa01 f303 	lsl.w	r3, r1, r3
 800c610:	69f9      	ldr	r1, [r7, #28]
 800c612:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c616:	4313      	orrs	r3, r2
 800c618:	634b      	str	r3, [r1, #52]	@ 0x34
 800c61a:	e140      	b.n	800c89e <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c61c:	69fb      	ldr	r3, [r7, #28]
 800c61e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c622:	689b      	ldr	r3, [r3, #8]
 800c624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d117      	bne.n	800c65c <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c62c:	69bb      	ldr	r3, [r7, #24]
 800c62e:	015a      	lsls	r2, r3, #5
 800c630:	69fb      	ldr	r3, [r7, #28]
 800c632:	4413      	add	r3, r2
 800c634:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	69ba      	ldr	r2, [r7, #24]
 800c63c:	0151      	lsls	r1, r2, #5
 800c63e:	69fa      	ldr	r2, [r7, #28]
 800c640:	440a      	add	r2, r1
 800c642:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c646:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c64a:	6013      	str	r3, [r2, #0]
 800c64c:	e016      	b.n	800c67c <USB_EPStartXfer+0x308>
 800c64e:	bf00      	nop
 800c650:	e007ffff 	.word	0xe007ffff
 800c654:	fff80000 	.word	0xfff80000
 800c658:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c65c:	69bb      	ldr	r3, [r7, #24]
 800c65e:	015a      	lsls	r2, r3, #5
 800c660:	69fb      	ldr	r3, [r7, #28]
 800c662:	4413      	add	r3, r2
 800c664:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	69ba      	ldr	r2, [r7, #24]
 800c66c:	0151      	lsls	r1, r2, #5
 800c66e:	69fa      	ldr	r2, [r7, #28]
 800c670:	440a      	add	r2, r1
 800c672:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c67a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	68d9      	ldr	r1, [r3, #12]
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	781a      	ldrb	r2, [r3, #0]
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	691b      	ldr	r3, [r3, #16]
 800c688:	b298      	uxth	r0, r3
 800c68a:	79fb      	ldrb	r3, [r7, #7]
 800c68c:	9300      	str	r3, [sp, #0]
 800c68e:	4603      	mov	r3, r0
 800c690:	68f8      	ldr	r0, [r7, #12]
 800c692:	f000 f9b9 	bl	800ca08 <USB_WritePacket>
 800c696:	e102      	b.n	800c89e <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c698:	69bb      	ldr	r3, [r7, #24]
 800c69a:	015a      	lsls	r2, r3, #5
 800c69c:	69fb      	ldr	r3, [r7, #28]
 800c69e:	4413      	add	r3, r2
 800c6a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c6a4:	691a      	ldr	r2, [r3, #16]
 800c6a6:	69bb      	ldr	r3, [r7, #24]
 800c6a8:	0159      	lsls	r1, r3, #5
 800c6aa:	69fb      	ldr	r3, [r7, #28]
 800c6ac:	440b      	add	r3, r1
 800c6ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c6b2:	4619      	mov	r1, r3
 800c6b4:	4b7c      	ldr	r3, [pc, #496]	@ (800c8a8 <USB_EPStartXfer+0x534>)
 800c6b6:	4013      	ands	r3, r2
 800c6b8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c6ba:	69bb      	ldr	r3, [r7, #24]
 800c6bc:	015a      	lsls	r2, r3, #5
 800c6be:	69fb      	ldr	r3, [r7, #28]
 800c6c0:	4413      	add	r3, r2
 800c6c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c6c6:	691a      	ldr	r2, [r3, #16]
 800c6c8:	69bb      	ldr	r3, [r7, #24]
 800c6ca:	0159      	lsls	r1, r3, #5
 800c6cc:	69fb      	ldr	r3, [r7, #28]
 800c6ce:	440b      	add	r3, r1
 800c6d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c6d4:	4619      	mov	r1, r3
 800c6d6:	4b75      	ldr	r3, [pc, #468]	@ (800c8ac <USB_EPStartXfer+0x538>)
 800c6d8:	4013      	ands	r3, r2
 800c6da:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800c6dc:	69bb      	ldr	r3, [r7, #24]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d12f      	bne.n	800c742 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	691b      	ldr	r3, [r3, #16]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d003      	beq.n	800c6f2 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	689a      	ldr	r2, [r3, #8]
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	689a      	ldr	r2, [r3, #8]
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c6fa:	69bb      	ldr	r3, [r7, #24]
 800c6fc:	015a      	lsls	r2, r3, #5
 800c6fe:	69fb      	ldr	r3, [r7, #28]
 800c700:	4413      	add	r3, r2
 800c702:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c706:	691a      	ldr	r2, [r3, #16]
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	6a1b      	ldr	r3, [r3, #32]
 800c70c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c710:	69b9      	ldr	r1, [r7, #24]
 800c712:	0148      	lsls	r0, r1, #5
 800c714:	69f9      	ldr	r1, [r7, #28]
 800c716:	4401      	add	r1, r0
 800c718:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c71c:	4313      	orrs	r3, r2
 800c71e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c720:	69bb      	ldr	r3, [r7, #24]
 800c722:	015a      	lsls	r2, r3, #5
 800c724:	69fb      	ldr	r3, [r7, #28]
 800c726:	4413      	add	r3, r2
 800c728:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c72c:	691b      	ldr	r3, [r3, #16]
 800c72e:	69ba      	ldr	r2, [r7, #24]
 800c730:	0151      	lsls	r1, r2, #5
 800c732:	69fa      	ldr	r2, [r7, #28]
 800c734:	440a      	add	r2, r1
 800c736:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c73a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c73e:	6113      	str	r3, [r2, #16]
 800c740:	e05f      	b.n	800c802 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	691b      	ldr	r3, [r3, #16]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d123      	bne.n	800c792 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c74a:	69bb      	ldr	r3, [r7, #24]
 800c74c:	015a      	lsls	r2, r3, #5
 800c74e:	69fb      	ldr	r3, [r7, #28]
 800c750:	4413      	add	r3, r2
 800c752:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c756:	691a      	ldr	r2, [r3, #16]
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	689b      	ldr	r3, [r3, #8]
 800c75c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c760:	69b9      	ldr	r1, [r7, #24]
 800c762:	0148      	lsls	r0, r1, #5
 800c764:	69f9      	ldr	r1, [r7, #28]
 800c766:	4401      	add	r1, r0
 800c768:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c76c:	4313      	orrs	r3, r2
 800c76e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c770:	69bb      	ldr	r3, [r7, #24]
 800c772:	015a      	lsls	r2, r3, #5
 800c774:	69fb      	ldr	r3, [r7, #28]
 800c776:	4413      	add	r3, r2
 800c778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c77c:	691b      	ldr	r3, [r3, #16]
 800c77e:	69ba      	ldr	r2, [r7, #24]
 800c780:	0151      	lsls	r1, r2, #5
 800c782:	69fa      	ldr	r2, [r7, #28]
 800c784:	440a      	add	r2, r1
 800c786:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c78a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c78e:	6113      	str	r3, [r2, #16]
 800c790:	e037      	b.n	800c802 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c792:	68bb      	ldr	r3, [r7, #8]
 800c794:	691a      	ldr	r2, [r3, #16]
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	689b      	ldr	r3, [r3, #8]
 800c79a:	4413      	add	r3, r2
 800c79c:	1e5a      	subs	r2, r3, #1
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	689b      	ldr	r3, [r3, #8]
 800c7a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7a6:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800c7a8:	68bb      	ldr	r3, [r7, #8]
 800c7aa:	689b      	ldr	r3, [r3, #8]
 800c7ac:	8afa      	ldrh	r2, [r7, #22]
 800c7ae:	fb03 f202 	mul.w	r2, r3, r2
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c7b6:	69bb      	ldr	r3, [r7, #24]
 800c7b8:	015a      	lsls	r2, r3, #5
 800c7ba:	69fb      	ldr	r3, [r7, #28]
 800c7bc:	4413      	add	r3, r2
 800c7be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7c2:	691a      	ldr	r2, [r3, #16]
 800c7c4:	8afb      	ldrh	r3, [r7, #22]
 800c7c6:	04d9      	lsls	r1, r3, #19
 800c7c8:	4b39      	ldr	r3, [pc, #228]	@ (800c8b0 <USB_EPStartXfer+0x53c>)
 800c7ca:	400b      	ands	r3, r1
 800c7cc:	69b9      	ldr	r1, [r7, #24]
 800c7ce:	0148      	lsls	r0, r1, #5
 800c7d0:	69f9      	ldr	r1, [r7, #28]
 800c7d2:	4401      	add	r1, r0
 800c7d4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c7d8:	4313      	orrs	r3, r2
 800c7da:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c7dc:	69bb      	ldr	r3, [r7, #24]
 800c7de:	015a      	lsls	r2, r3, #5
 800c7e0:	69fb      	ldr	r3, [r7, #28]
 800c7e2:	4413      	add	r3, r2
 800c7e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7e8:	691a      	ldr	r2, [r3, #16]
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	6a1b      	ldr	r3, [r3, #32]
 800c7ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c7f2:	69b9      	ldr	r1, [r7, #24]
 800c7f4:	0148      	lsls	r0, r1, #5
 800c7f6:	69f9      	ldr	r1, [r7, #28]
 800c7f8:	4401      	add	r1, r0
 800c7fa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c7fe:	4313      	orrs	r3, r2
 800c800:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800c802:	79fb      	ldrb	r3, [r7, #7]
 800c804:	2b01      	cmp	r3, #1
 800c806:	d10d      	bne.n	800c824 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	68db      	ldr	r3, [r3, #12]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d009      	beq.n	800c824 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c810:	68bb      	ldr	r3, [r7, #8]
 800c812:	68d9      	ldr	r1, [r3, #12]
 800c814:	69bb      	ldr	r3, [r7, #24]
 800c816:	015a      	lsls	r2, r3, #5
 800c818:	69fb      	ldr	r3, [r7, #28]
 800c81a:	4413      	add	r3, r2
 800c81c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c820:	460a      	mov	r2, r1
 800c822:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	791b      	ldrb	r3, [r3, #4]
 800c828:	2b01      	cmp	r3, #1
 800c82a:	d128      	bne.n	800c87e <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c82c:	69fb      	ldr	r3, [r7, #28]
 800c82e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c832:	689b      	ldr	r3, [r3, #8]
 800c834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d110      	bne.n	800c85e <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c83c:	69bb      	ldr	r3, [r7, #24]
 800c83e:	015a      	lsls	r2, r3, #5
 800c840:	69fb      	ldr	r3, [r7, #28]
 800c842:	4413      	add	r3, r2
 800c844:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	69ba      	ldr	r2, [r7, #24]
 800c84c:	0151      	lsls	r1, r2, #5
 800c84e:	69fa      	ldr	r2, [r7, #28]
 800c850:	440a      	add	r2, r1
 800c852:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c856:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c85a:	6013      	str	r3, [r2, #0]
 800c85c:	e00f      	b.n	800c87e <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c85e:	69bb      	ldr	r3, [r7, #24]
 800c860:	015a      	lsls	r2, r3, #5
 800c862:	69fb      	ldr	r3, [r7, #28]
 800c864:	4413      	add	r3, r2
 800c866:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	69ba      	ldr	r2, [r7, #24]
 800c86e:	0151      	lsls	r1, r2, #5
 800c870:	69fa      	ldr	r2, [r7, #28]
 800c872:	440a      	add	r2, r1
 800c874:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c878:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c87c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c87e:	69bb      	ldr	r3, [r7, #24]
 800c880:	015a      	lsls	r2, r3, #5
 800c882:	69fb      	ldr	r3, [r7, #28]
 800c884:	4413      	add	r3, r2
 800c886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	69ba      	ldr	r2, [r7, #24]
 800c88e:	0151      	lsls	r1, r2, #5
 800c890:	69fa      	ldr	r2, [r7, #28]
 800c892:	440a      	add	r2, r1
 800c894:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c898:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c89c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c89e:	2300      	movs	r3, #0
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3720      	adds	r7, #32
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}
 800c8a8:	fff80000 	.word	0xfff80000
 800c8ac:	e007ffff 	.word	0xe007ffff
 800c8b0:	1ff80000 	.word	0x1ff80000

0800c8b4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	b087      	sub	sp, #28
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
 800c8bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	785b      	ldrb	r3, [r3, #1]
 800c8ce:	2b01      	cmp	r3, #1
 800c8d0:	d14a      	bne.n	800c968 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	781b      	ldrb	r3, [r3, #0]
 800c8d6:	015a      	lsls	r2, r3, #5
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	4413      	add	r3, r2
 800c8dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c8e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c8ea:	f040 8086 	bne.w	800c9fa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	781b      	ldrb	r3, [r3, #0]
 800c8f2:	015a      	lsls	r2, r3, #5
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	4413      	add	r3, r2
 800c8f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	683a      	ldr	r2, [r7, #0]
 800c900:	7812      	ldrb	r2, [r2, #0]
 800c902:	0151      	lsls	r1, r2, #5
 800c904:	693a      	ldr	r2, [r7, #16]
 800c906:	440a      	add	r2, r1
 800c908:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c90c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c910:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	781b      	ldrb	r3, [r3, #0]
 800c916:	015a      	lsls	r2, r3, #5
 800c918:	693b      	ldr	r3, [r7, #16]
 800c91a:	4413      	add	r3, r2
 800c91c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	683a      	ldr	r2, [r7, #0]
 800c924:	7812      	ldrb	r2, [r2, #0]
 800c926:	0151      	lsls	r1, r2, #5
 800c928:	693a      	ldr	r2, [r7, #16]
 800c92a:	440a      	add	r2, r1
 800c92c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c930:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c934:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	3301      	adds	r3, #1
 800c93a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800c942:	4293      	cmp	r3, r2
 800c944:	d902      	bls.n	800c94c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c946:	2301      	movs	r3, #1
 800c948:	75fb      	strb	r3, [r7, #23]
          break;
 800c94a:	e056      	b.n	800c9fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	781b      	ldrb	r3, [r3, #0]
 800c950:	015a      	lsls	r2, r3, #5
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	4413      	add	r3, r2
 800c956:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c960:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c964:	d0e7      	beq.n	800c936 <USB_EPStopXfer+0x82>
 800c966:	e048      	b.n	800c9fa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	781b      	ldrb	r3, [r3, #0]
 800c96c:	015a      	lsls	r2, r3, #5
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	4413      	add	r3, r2
 800c972:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c97c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c980:	d13b      	bne.n	800c9fa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	781b      	ldrb	r3, [r3, #0]
 800c986:	015a      	lsls	r2, r3, #5
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	4413      	add	r3, r2
 800c98c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	683a      	ldr	r2, [r7, #0]
 800c994:	7812      	ldrb	r2, [r2, #0]
 800c996:	0151      	lsls	r1, r2, #5
 800c998:	693a      	ldr	r2, [r7, #16]
 800c99a:	440a      	add	r2, r1
 800c99c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c9a0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c9a4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	781b      	ldrb	r3, [r3, #0]
 800c9aa:	015a      	lsls	r2, r3, #5
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	4413      	add	r3, r2
 800c9b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	683a      	ldr	r2, [r7, #0]
 800c9b8:	7812      	ldrb	r2, [r2, #0]
 800c9ba:	0151      	lsls	r1, r2, #5
 800c9bc:	693a      	ldr	r2, [r7, #16]
 800c9be:	440a      	add	r2, r1
 800c9c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c9c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c9c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	3301      	adds	r3, #1
 800c9ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	f242 7210 	movw	r2, #10000	@ 0x2710
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d902      	bls.n	800c9e0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c9da:	2301      	movs	r3, #1
 800c9dc:	75fb      	strb	r3, [r7, #23]
          break;
 800c9de:	e00c      	b.n	800c9fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	781b      	ldrb	r3, [r3, #0]
 800c9e4:	015a      	lsls	r2, r3, #5
 800c9e6:	693b      	ldr	r3, [r7, #16]
 800c9e8:	4413      	add	r3, r2
 800c9ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c9f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c9f8:	d0e7      	beq.n	800c9ca <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c9fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	371c      	adds	r7, #28
 800ca00:	46bd      	mov	sp, r7
 800ca02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca06:	4770      	bx	lr

0800ca08 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ca08:	b480      	push	{r7}
 800ca0a:	b089      	sub	sp, #36	@ 0x24
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	60f8      	str	r0, [r7, #12]
 800ca10:	60b9      	str	r1, [r7, #8]
 800ca12:	4611      	mov	r1, r2
 800ca14:	461a      	mov	r2, r3
 800ca16:	460b      	mov	r3, r1
 800ca18:	71fb      	strb	r3, [r7, #7]
 800ca1a:	4613      	mov	r3, r2
 800ca1c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ca26:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d123      	bne.n	800ca76 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ca2e:	88bb      	ldrh	r3, [r7, #4]
 800ca30:	3303      	adds	r3, #3
 800ca32:	089b      	lsrs	r3, r3, #2
 800ca34:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ca36:	2300      	movs	r3, #0
 800ca38:	61bb      	str	r3, [r7, #24]
 800ca3a:	e018      	b.n	800ca6e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ca3c:	79fb      	ldrb	r3, [r7, #7]
 800ca3e:	031a      	lsls	r2, r3, #12
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	4413      	add	r3, r2
 800ca44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ca48:	461a      	mov	r2, r3
 800ca4a:	69fb      	ldr	r3, [r7, #28]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ca50:	69fb      	ldr	r3, [r7, #28]
 800ca52:	3301      	adds	r3, #1
 800ca54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ca56:	69fb      	ldr	r3, [r7, #28]
 800ca58:	3301      	adds	r3, #1
 800ca5a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ca5c:	69fb      	ldr	r3, [r7, #28]
 800ca5e:	3301      	adds	r3, #1
 800ca60:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ca62:	69fb      	ldr	r3, [r7, #28]
 800ca64:	3301      	adds	r3, #1
 800ca66:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ca68:	69bb      	ldr	r3, [r7, #24]
 800ca6a:	3301      	adds	r3, #1
 800ca6c:	61bb      	str	r3, [r7, #24]
 800ca6e:	69ba      	ldr	r2, [r7, #24]
 800ca70:	693b      	ldr	r3, [r7, #16]
 800ca72:	429a      	cmp	r2, r3
 800ca74:	d3e2      	bcc.n	800ca3c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ca76:	2300      	movs	r3, #0
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3724      	adds	r7, #36	@ 0x24
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca82:	4770      	bx	lr

0800ca84 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ca84:	b480      	push	{r7}
 800ca86:	b08b      	sub	sp, #44	@ 0x2c
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	60f8      	str	r0, [r7, #12]
 800ca8c:	60b9      	str	r1, [r7, #8]
 800ca8e:	4613      	mov	r3, r2
 800ca90:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ca9a:	88fb      	ldrh	r3, [r7, #6]
 800ca9c:	089b      	lsrs	r3, r3, #2
 800ca9e:	b29b      	uxth	r3, r3
 800caa0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800caa2:	88fb      	ldrh	r3, [r7, #6]
 800caa4:	f003 0303 	and.w	r3, r3, #3
 800caa8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800caaa:	2300      	movs	r3, #0
 800caac:	623b      	str	r3, [r7, #32]
 800caae:	e014      	b.n	800cada <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cab0:	69bb      	ldr	r3, [r7, #24]
 800cab2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cab6:	681a      	ldr	r2, [r3, #0]
 800cab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caba:	601a      	str	r2, [r3, #0]
    pDest++;
 800cabc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cabe:	3301      	adds	r3, #1
 800cac0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800cac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cac4:	3301      	adds	r3, #1
 800cac6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800cac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caca:	3301      	adds	r3, #1
 800cacc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800cace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cad0:	3301      	adds	r3, #1
 800cad2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800cad4:	6a3b      	ldr	r3, [r7, #32]
 800cad6:	3301      	adds	r3, #1
 800cad8:	623b      	str	r3, [r7, #32]
 800cada:	6a3a      	ldr	r2, [r7, #32]
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	429a      	cmp	r2, r3
 800cae0:	d3e6      	bcc.n	800cab0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800cae2:	8bfb      	ldrh	r3, [r7, #30]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d01e      	beq.n	800cb26 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800cae8:	2300      	movs	r3, #0
 800caea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800caec:	69bb      	ldr	r3, [r7, #24]
 800caee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800caf2:	461a      	mov	r2, r3
 800caf4:	f107 0310 	add.w	r3, r7, #16
 800caf8:	6812      	ldr	r2, [r2, #0]
 800cafa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800cafc:	693a      	ldr	r2, [r7, #16]
 800cafe:	6a3b      	ldr	r3, [r7, #32]
 800cb00:	b2db      	uxtb	r3, r3
 800cb02:	00db      	lsls	r3, r3, #3
 800cb04:	fa22 f303 	lsr.w	r3, r2, r3
 800cb08:	b2da      	uxtb	r2, r3
 800cb0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb0c:	701a      	strb	r2, [r3, #0]
      i++;
 800cb0e:	6a3b      	ldr	r3, [r7, #32]
 800cb10:	3301      	adds	r3, #1
 800cb12:	623b      	str	r3, [r7, #32]
      pDest++;
 800cb14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb16:	3301      	adds	r3, #1
 800cb18:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800cb1a:	8bfb      	ldrh	r3, [r7, #30]
 800cb1c:	3b01      	subs	r3, #1
 800cb1e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800cb20:	8bfb      	ldrh	r3, [r7, #30]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d1ea      	bne.n	800cafc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800cb26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	372c      	adds	r7, #44	@ 0x2c
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb32:	4770      	bx	lr

0800cb34 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800cb34:	b480      	push	{r7}
 800cb36:	b085      	sub	sp, #20
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
 800cb3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	781b      	ldrb	r3, [r3, #0]
 800cb46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	785b      	ldrb	r3, [r3, #1]
 800cb4c:	2b01      	cmp	r3, #1
 800cb4e:	d12c      	bne.n	800cbaa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	015a      	lsls	r2, r3, #5
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	4413      	add	r3, r2
 800cb58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	db12      	blt.n	800cb88 <USB_EPSetStall+0x54>
 800cb62:	68bb      	ldr	r3, [r7, #8]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d00f      	beq.n	800cb88 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	015a      	lsls	r2, r3, #5
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	4413      	add	r3, r2
 800cb70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	68ba      	ldr	r2, [r7, #8]
 800cb78:	0151      	lsls	r1, r2, #5
 800cb7a:	68fa      	ldr	r2, [r7, #12]
 800cb7c:	440a      	add	r2, r1
 800cb7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cb82:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800cb86:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	015a      	lsls	r2, r3, #5
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	4413      	add	r3, r2
 800cb90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	68ba      	ldr	r2, [r7, #8]
 800cb98:	0151      	lsls	r1, r2, #5
 800cb9a:	68fa      	ldr	r2, [r7, #12]
 800cb9c:	440a      	add	r2, r1
 800cb9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cba2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800cba6:	6013      	str	r3, [r2, #0]
 800cba8:	e02b      	b.n	800cc02 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	015a      	lsls	r2, r3, #5
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	4413      	add	r3, r2
 800cbb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	db12      	blt.n	800cbe2 <USB_EPSetStall+0xae>
 800cbbc:	68bb      	ldr	r3, [r7, #8]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d00f      	beq.n	800cbe2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800cbc2:	68bb      	ldr	r3, [r7, #8]
 800cbc4:	015a      	lsls	r2, r3, #5
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	4413      	add	r3, r2
 800cbca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	68ba      	ldr	r2, [r7, #8]
 800cbd2:	0151      	lsls	r1, r2, #5
 800cbd4:	68fa      	ldr	r2, [r7, #12]
 800cbd6:	440a      	add	r2, r1
 800cbd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cbdc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800cbe0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	015a      	lsls	r2, r3, #5
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	4413      	add	r3, r2
 800cbea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	68ba      	ldr	r2, [r7, #8]
 800cbf2:	0151      	lsls	r1, r2, #5
 800cbf4:	68fa      	ldr	r2, [r7, #12]
 800cbf6:	440a      	add	r2, r1
 800cbf8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cbfc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800cc00:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cc02:	2300      	movs	r3, #0
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3714      	adds	r7, #20
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0e:	4770      	bx	lr

0800cc10 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800cc10:	b480      	push	{r7}
 800cc12:	b085      	sub	sp, #20
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
 800cc18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	781b      	ldrb	r3, [r3, #0]
 800cc22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	785b      	ldrb	r3, [r3, #1]
 800cc28:	2b01      	cmp	r3, #1
 800cc2a:	d128      	bne.n	800cc7e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	015a      	lsls	r2, r3, #5
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	4413      	add	r3, r2
 800cc34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	68ba      	ldr	r2, [r7, #8]
 800cc3c:	0151      	lsls	r1, r2, #5
 800cc3e:	68fa      	ldr	r2, [r7, #12]
 800cc40:	440a      	add	r2, r1
 800cc42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cc46:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cc4a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	791b      	ldrb	r3, [r3, #4]
 800cc50:	2b03      	cmp	r3, #3
 800cc52:	d003      	beq.n	800cc5c <USB_EPClearStall+0x4c>
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	791b      	ldrb	r3, [r3, #4]
 800cc58:	2b02      	cmp	r3, #2
 800cc5a:	d138      	bne.n	800ccce <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	015a      	lsls	r2, r3, #5
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	4413      	add	r3, r2
 800cc64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	68ba      	ldr	r2, [r7, #8]
 800cc6c:	0151      	lsls	r1, r2, #5
 800cc6e:	68fa      	ldr	r2, [r7, #12]
 800cc70:	440a      	add	r2, r1
 800cc72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cc76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cc7a:	6013      	str	r3, [r2, #0]
 800cc7c:	e027      	b.n	800ccce <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cc7e:	68bb      	ldr	r3, [r7, #8]
 800cc80:	015a      	lsls	r2, r3, #5
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	4413      	add	r3, r2
 800cc86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	68ba      	ldr	r2, [r7, #8]
 800cc8e:	0151      	lsls	r1, r2, #5
 800cc90:	68fa      	ldr	r2, [r7, #12]
 800cc92:	440a      	add	r2, r1
 800cc94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cc98:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cc9c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	791b      	ldrb	r3, [r3, #4]
 800cca2:	2b03      	cmp	r3, #3
 800cca4:	d003      	beq.n	800ccae <USB_EPClearStall+0x9e>
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	791b      	ldrb	r3, [r3, #4]
 800ccaa:	2b02      	cmp	r3, #2
 800ccac:	d10f      	bne.n	800ccce <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ccae:	68bb      	ldr	r3, [r7, #8]
 800ccb0:	015a      	lsls	r2, r3, #5
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	4413      	add	r3, r2
 800ccb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	68ba      	ldr	r2, [r7, #8]
 800ccbe:	0151      	lsls	r1, r2, #5
 800ccc0:	68fa      	ldr	r2, [r7, #12]
 800ccc2:	440a      	add	r2, r1
 800ccc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ccc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cccc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ccce:	2300      	movs	r3, #0
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	3714      	adds	r7, #20
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccda:	4770      	bx	lr

0800ccdc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ccdc:	b480      	push	{r7}
 800ccde:	b085      	sub	sp, #20
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
 800cce4:	460b      	mov	r3, r1
 800cce6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	68fa      	ldr	r2, [r7, #12]
 800ccf6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ccfa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800ccfe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cd06:	681a      	ldr	r2, [r3, #0]
 800cd08:	78fb      	ldrb	r3, [r7, #3]
 800cd0a:	011b      	lsls	r3, r3, #4
 800cd0c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800cd10:	68f9      	ldr	r1, [r7, #12]
 800cd12:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cd16:	4313      	orrs	r3, r2
 800cd18:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800cd1a:	2300      	movs	r3, #0
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3714      	adds	r7, #20
 800cd20:	46bd      	mov	sp, r7
 800cd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd26:	4770      	bx	lr

0800cd28 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800cd28:	b480      	push	{r7}
 800cd2a:	b085      	sub	sp, #20
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	68fa      	ldr	r2, [r7, #12]
 800cd3e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800cd42:	f023 0303 	bic.w	r3, r3, #3
 800cd46:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cd4e:	685b      	ldr	r3, [r3, #4]
 800cd50:	68fa      	ldr	r2, [r7, #12]
 800cd52:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cd56:	f023 0302 	bic.w	r3, r3, #2
 800cd5a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cd5c:	2300      	movs	r3, #0
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3714      	adds	r7, #20
 800cd62:	46bd      	mov	sp, r7
 800cd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd68:	4770      	bx	lr

0800cd6a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800cd6a:	b480      	push	{r7}
 800cd6c:	b085      	sub	sp, #20
 800cd6e:	af00      	add	r7, sp, #0
 800cd70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	68fa      	ldr	r2, [r7, #12]
 800cd80:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800cd84:	f023 0303 	bic.w	r3, r3, #3
 800cd88:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cd90:	685b      	ldr	r3, [r3, #4]
 800cd92:	68fa      	ldr	r2, [r7, #12]
 800cd94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cd98:	f043 0302 	orr.w	r3, r3, #2
 800cd9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cd9e:	2300      	movs	r3, #0
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	3714      	adds	r7, #20
 800cda4:	46bd      	mov	sp, r7
 800cda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdaa:	4770      	bx	lr

0800cdac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800cdac:	b480      	push	{r7}
 800cdae:	b085      	sub	sp, #20
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	695b      	ldr	r3, [r3, #20]
 800cdb8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	699b      	ldr	r3, [r3, #24]
 800cdbe:	68fa      	ldr	r2, [r7, #12]
 800cdc0:	4013      	ands	r3, r2
 800cdc2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	3714      	adds	r7, #20
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd0:	4770      	bx	lr

0800cdd2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800cdd2:	b480      	push	{r7}
 800cdd4:	b085      	sub	sp, #20
 800cdd6:	af00      	add	r7, sp, #0
 800cdd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cde4:	699b      	ldr	r3, [r3, #24]
 800cde6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cdee:	69db      	ldr	r3, [r3, #28]
 800cdf0:	68ba      	ldr	r2, [r7, #8]
 800cdf2:	4013      	ands	r3, r2
 800cdf4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	0c1b      	lsrs	r3, r3, #16
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3714      	adds	r7, #20
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce04:	4770      	bx	lr

0800ce06 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ce06:	b480      	push	{r7}
 800ce08:	b085      	sub	sp, #20
 800ce0a:	af00      	add	r7, sp, #0
 800ce0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ce18:	699b      	ldr	r3, [r3, #24]
 800ce1a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ce22:	69db      	ldr	r3, [r3, #28]
 800ce24:	68ba      	ldr	r2, [r7, #8]
 800ce26:	4013      	ands	r3, r2
 800ce28:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ce2a:	68bb      	ldr	r3, [r7, #8]
 800ce2c:	b29b      	uxth	r3, r3
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3714      	adds	r7, #20
 800ce32:	46bd      	mov	sp, r7
 800ce34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce38:	4770      	bx	lr

0800ce3a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ce3a:	b480      	push	{r7}
 800ce3c:	b085      	sub	sp, #20
 800ce3e:	af00      	add	r7, sp, #0
 800ce40:	6078      	str	r0, [r7, #4]
 800ce42:	460b      	mov	r3, r1
 800ce44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ce4a:	78fb      	ldrb	r3, [r7, #3]
 800ce4c:	015a      	lsls	r2, r3, #5
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	4413      	add	r3, r2
 800ce52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce56:	689b      	ldr	r3, [r3, #8]
 800ce58:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ce60:	695b      	ldr	r3, [r3, #20]
 800ce62:	68ba      	ldr	r2, [r7, #8]
 800ce64:	4013      	ands	r3, r2
 800ce66:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ce68:	68bb      	ldr	r3, [r7, #8]
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	3714      	adds	r7, #20
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce74:	4770      	bx	lr

0800ce76 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ce76:	b480      	push	{r7}
 800ce78:	b087      	sub	sp, #28
 800ce7a:	af00      	add	r7, sp, #0
 800ce7c:	6078      	str	r0, [r7, #4]
 800ce7e:	460b      	mov	r3, r1
 800ce80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ce86:	697b      	ldr	r3, [r7, #20]
 800ce88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ce8c:	691b      	ldr	r3, [r3, #16]
 800ce8e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ce96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce98:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ce9a:	78fb      	ldrb	r3, [r7, #3]
 800ce9c:	f003 030f 	and.w	r3, r3, #15
 800cea0:	68fa      	ldr	r2, [r7, #12]
 800cea2:	fa22 f303 	lsr.w	r3, r2, r3
 800cea6:	01db      	lsls	r3, r3, #7
 800cea8:	b2db      	uxtb	r3, r3
 800ceaa:	693a      	ldr	r2, [r7, #16]
 800ceac:	4313      	orrs	r3, r2
 800ceae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ceb0:	78fb      	ldrb	r3, [r7, #3]
 800ceb2:	015a      	lsls	r2, r3, #5
 800ceb4:	697b      	ldr	r3, [r7, #20]
 800ceb6:	4413      	add	r3, r2
 800ceb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cebc:	689b      	ldr	r3, [r3, #8]
 800cebe:	693a      	ldr	r2, [r7, #16]
 800cec0:	4013      	ands	r3, r2
 800cec2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cec4:	68bb      	ldr	r3, [r7, #8]
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	371c      	adds	r7, #28
 800ceca:	46bd      	mov	sp, r7
 800cecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced0:	4770      	bx	lr

0800ced2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800ced2:	b480      	push	{r7}
 800ced4:	b083      	sub	sp, #12
 800ced6:	af00      	add	r7, sp, #0
 800ced8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	695b      	ldr	r3, [r3, #20]
 800cede:	f003 0301 	and.w	r3, r3, #1
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	370c      	adds	r7, #12
 800cee6:	46bd      	mov	sp, r7
 800cee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceec:	4770      	bx	lr
	...

0800cef0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800cef0:	b480      	push	{r7}
 800cef2:	b085      	sub	sp, #20
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cf02:	681a      	ldr	r2, [r3, #0]
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cf0a:	4619      	mov	r1, r3
 800cf0c:	4b09      	ldr	r3, [pc, #36]	@ (800cf34 <USB_ActivateSetup+0x44>)
 800cf0e:	4013      	ands	r3, r2
 800cf10:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cf18:	685b      	ldr	r3, [r3, #4]
 800cf1a:	68fa      	ldr	r2, [r7, #12]
 800cf1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cf20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cf24:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cf26:	2300      	movs	r3, #0
}
 800cf28:	4618      	mov	r0, r3
 800cf2a:	3714      	adds	r7, #20
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf32:	4770      	bx	lr
 800cf34:	fffff800 	.word	0xfffff800

0800cf38 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b087      	sub	sp, #28
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	60f8      	str	r0, [r7, #12]
 800cf40:	460b      	mov	r3, r1
 800cf42:	607a      	str	r2, [r7, #4]
 800cf44:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	333c      	adds	r3, #60	@ 0x3c
 800cf4e:	3304      	adds	r3, #4
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800cf54:	693b      	ldr	r3, [r7, #16]
 800cf56:	4a26      	ldr	r2, [pc, #152]	@ (800cff0 <USB_EP0_OutStart+0xb8>)
 800cf58:	4293      	cmp	r3, r2
 800cf5a:	d90a      	bls.n	800cf72 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cf5c:	697b      	ldr	r3, [r7, #20]
 800cf5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cf68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cf6c:	d101      	bne.n	800cf72 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	e037      	b.n	800cfe2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf78:	461a      	mov	r2, r3
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf84:	691b      	ldr	r3, [r3, #16]
 800cf86:	697a      	ldr	r2, [r7, #20]
 800cf88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cf8c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cf90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf98:	691b      	ldr	r3, [r3, #16]
 800cf9a:	697a      	ldr	r2, [r7, #20]
 800cf9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cfa0:	f043 0318 	orr.w	r3, r3, #24
 800cfa4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cfac:	691b      	ldr	r3, [r3, #16]
 800cfae:	697a      	ldr	r2, [r7, #20]
 800cfb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cfb4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800cfb8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800cfba:	7afb      	ldrb	r3, [r7, #11]
 800cfbc:	2b01      	cmp	r3, #1
 800cfbe:	d10f      	bne.n	800cfe0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cfc6:	461a      	mov	r2, r3
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800cfcc:	697b      	ldr	r3, [r7, #20]
 800cfce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	697a      	ldr	r2, [r7, #20]
 800cfd6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cfda:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800cfde:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cfe0:	2300      	movs	r3, #0
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	371c      	adds	r7, #28
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfec:	4770      	bx	lr
 800cfee:	bf00      	nop
 800cff0:	4f54300a 	.word	0x4f54300a

0800cff4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cff4:	b480      	push	{r7}
 800cff6:	b085      	sub	sp, #20
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cffc:	2300      	movs	r3, #0
 800cffe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	3301      	adds	r3, #1
 800d004:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d00c:	d901      	bls.n	800d012 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d00e:	2303      	movs	r3, #3
 800d010:	e01b      	b.n	800d04a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	691b      	ldr	r3, [r3, #16]
 800d016:	2b00      	cmp	r3, #0
 800d018:	daf2      	bge.n	800d000 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d01a:	2300      	movs	r3, #0
 800d01c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	691b      	ldr	r3, [r3, #16]
 800d022:	f043 0201 	orr.w	r2, r3, #1
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	3301      	adds	r3, #1
 800d02e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d036:	d901      	bls.n	800d03c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d038:	2303      	movs	r3, #3
 800d03a:	e006      	b.n	800d04a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	691b      	ldr	r3, [r3, #16]
 800d040:	f003 0301 	and.w	r3, r3, #1
 800d044:	2b01      	cmp	r3, #1
 800d046:	d0f0      	beq.n	800d02a <USB_CoreReset+0x36>

  return HAL_OK;
 800d048:	2300      	movs	r3, #0
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	3714      	adds	r7, #20
 800d04e:	46bd      	mov	sp, r7
 800d050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d054:	4770      	bx	lr
	...

0800d058 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b084      	sub	sp, #16
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
 800d060:	460b      	mov	r3, r1
 800d062:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d064:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800d068:	f002 fcfe 	bl	800fa68 <USBD_static_malloc>
 800d06c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d109      	bne.n	800d088 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	32b0      	adds	r2, #176	@ 0xb0
 800d07e:	2100      	movs	r1, #0
 800d080:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d084:	2302      	movs	r3, #2
 800d086:	e0d4      	b.n	800d232 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800d088:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800d08c:	2100      	movs	r1, #0
 800d08e:	68f8      	ldr	r0, [r7, #12]
 800d090:	f003 fa8b 	bl	80105aa <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	32b0      	adds	r2, #176	@ 0xb0
 800d09e:	68f9      	ldr	r1, [r7, #12]
 800d0a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	32b0      	adds	r2, #176	@ 0xb0
 800d0ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	7c1b      	ldrb	r3, [r3, #16]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d138      	bne.n	800d132 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d0c0:	4b5e      	ldr	r3, [pc, #376]	@ (800d23c <USBD_CDC_Init+0x1e4>)
 800d0c2:	7819      	ldrb	r1, [r3, #0]
 800d0c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d0c8:	2202      	movs	r2, #2
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f002 fba9 	bl	800f822 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d0d0:	4b5a      	ldr	r3, [pc, #360]	@ (800d23c <USBD_CDC_Init+0x1e4>)
 800d0d2:	781b      	ldrb	r3, [r3, #0]
 800d0d4:	f003 020f 	and.w	r2, r3, #15
 800d0d8:	6879      	ldr	r1, [r7, #4]
 800d0da:	4613      	mov	r3, r2
 800d0dc:	009b      	lsls	r3, r3, #2
 800d0de:	4413      	add	r3, r2
 800d0e0:	009b      	lsls	r3, r3, #2
 800d0e2:	440b      	add	r3, r1
 800d0e4:	3324      	adds	r3, #36	@ 0x24
 800d0e6:	2201      	movs	r2, #1
 800d0e8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d0ea:	4b55      	ldr	r3, [pc, #340]	@ (800d240 <USBD_CDC_Init+0x1e8>)
 800d0ec:	7819      	ldrb	r1, [r3, #0]
 800d0ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d0f2:	2202      	movs	r2, #2
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	f002 fb94 	bl	800f822 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d0fa:	4b51      	ldr	r3, [pc, #324]	@ (800d240 <USBD_CDC_Init+0x1e8>)
 800d0fc:	781b      	ldrb	r3, [r3, #0]
 800d0fe:	f003 020f 	and.w	r2, r3, #15
 800d102:	6879      	ldr	r1, [r7, #4]
 800d104:	4613      	mov	r3, r2
 800d106:	009b      	lsls	r3, r3, #2
 800d108:	4413      	add	r3, r2
 800d10a:	009b      	lsls	r3, r3, #2
 800d10c:	440b      	add	r3, r1
 800d10e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d112:	2201      	movs	r2, #1
 800d114:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d116:	4b4b      	ldr	r3, [pc, #300]	@ (800d244 <USBD_CDC_Init+0x1ec>)
 800d118:	781b      	ldrb	r3, [r3, #0]
 800d11a:	f003 020f 	and.w	r2, r3, #15
 800d11e:	6879      	ldr	r1, [r7, #4]
 800d120:	4613      	mov	r3, r2
 800d122:	009b      	lsls	r3, r3, #2
 800d124:	4413      	add	r3, r2
 800d126:	009b      	lsls	r3, r3, #2
 800d128:	440b      	add	r3, r1
 800d12a:	3326      	adds	r3, #38	@ 0x26
 800d12c:	2210      	movs	r2, #16
 800d12e:	801a      	strh	r2, [r3, #0]
 800d130:	e035      	b.n	800d19e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d132:	4b42      	ldr	r3, [pc, #264]	@ (800d23c <USBD_CDC_Init+0x1e4>)
 800d134:	7819      	ldrb	r1, [r3, #0]
 800d136:	2340      	movs	r3, #64	@ 0x40
 800d138:	2202      	movs	r2, #2
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	f002 fb71 	bl	800f822 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d140:	4b3e      	ldr	r3, [pc, #248]	@ (800d23c <USBD_CDC_Init+0x1e4>)
 800d142:	781b      	ldrb	r3, [r3, #0]
 800d144:	f003 020f 	and.w	r2, r3, #15
 800d148:	6879      	ldr	r1, [r7, #4]
 800d14a:	4613      	mov	r3, r2
 800d14c:	009b      	lsls	r3, r3, #2
 800d14e:	4413      	add	r3, r2
 800d150:	009b      	lsls	r3, r3, #2
 800d152:	440b      	add	r3, r1
 800d154:	3324      	adds	r3, #36	@ 0x24
 800d156:	2201      	movs	r2, #1
 800d158:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d15a:	4b39      	ldr	r3, [pc, #228]	@ (800d240 <USBD_CDC_Init+0x1e8>)
 800d15c:	7819      	ldrb	r1, [r3, #0]
 800d15e:	2340      	movs	r3, #64	@ 0x40
 800d160:	2202      	movs	r2, #2
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f002 fb5d 	bl	800f822 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d168:	4b35      	ldr	r3, [pc, #212]	@ (800d240 <USBD_CDC_Init+0x1e8>)
 800d16a:	781b      	ldrb	r3, [r3, #0]
 800d16c:	f003 020f 	and.w	r2, r3, #15
 800d170:	6879      	ldr	r1, [r7, #4]
 800d172:	4613      	mov	r3, r2
 800d174:	009b      	lsls	r3, r3, #2
 800d176:	4413      	add	r3, r2
 800d178:	009b      	lsls	r3, r3, #2
 800d17a:	440b      	add	r3, r1
 800d17c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d180:	2201      	movs	r2, #1
 800d182:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d184:	4b2f      	ldr	r3, [pc, #188]	@ (800d244 <USBD_CDC_Init+0x1ec>)
 800d186:	781b      	ldrb	r3, [r3, #0]
 800d188:	f003 020f 	and.w	r2, r3, #15
 800d18c:	6879      	ldr	r1, [r7, #4]
 800d18e:	4613      	mov	r3, r2
 800d190:	009b      	lsls	r3, r3, #2
 800d192:	4413      	add	r3, r2
 800d194:	009b      	lsls	r3, r3, #2
 800d196:	440b      	add	r3, r1
 800d198:	3326      	adds	r3, #38	@ 0x26
 800d19a:	2210      	movs	r2, #16
 800d19c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d19e:	4b29      	ldr	r3, [pc, #164]	@ (800d244 <USBD_CDC_Init+0x1ec>)
 800d1a0:	7819      	ldrb	r1, [r3, #0]
 800d1a2:	2308      	movs	r3, #8
 800d1a4:	2203      	movs	r2, #3
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f002 fb3b 	bl	800f822 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d1ac:	4b25      	ldr	r3, [pc, #148]	@ (800d244 <USBD_CDC_Init+0x1ec>)
 800d1ae:	781b      	ldrb	r3, [r3, #0]
 800d1b0:	f003 020f 	and.w	r2, r3, #15
 800d1b4:	6879      	ldr	r1, [r7, #4]
 800d1b6:	4613      	mov	r3, r2
 800d1b8:	009b      	lsls	r3, r3, #2
 800d1ba:	4413      	add	r3, r2
 800d1bc:	009b      	lsls	r3, r3, #2
 800d1be:	440b      	add	r3, r1
 800d1c0:	3324      	adds	r3, #36	@ 0x24
 800d1c2:	2201      	movs	r2, #1
 800d1c4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d1d4:	687a      	ldr	r2, [r7, #4]
 800d1d6:	33b0      	adds	r3, #176	@ 0xb0
 800d1d8:	009b      	lsls	r3, r3, #2
 800d1da:	4413      	add	r3, r2
 800d1dc:	685b      	ldr	r3, [r3, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d101      	bne.n	800d200 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800d1fc:	2302      	movs	r3, #2
 800d1fe:	e018      	b.n	800d232 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	7c1b      	ldrb	r3, [r3, #16]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d10a      	bne.n	800d21e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d208:	4b0d      	ldr	r3, [pc, #52]	@ (800d240 <USBD_CDC_Init+0x1e8>)
 800d20a:	7819      	ldrb	r1, [r3, #0]
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d212:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f002 fbf2 	bl	800fa00 <USBD_LL_PrepareReceive>
 800d21c:	e008      	b.n	800d230 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d21e:	4b08      	ldr	r3, [pc, #32]	@ (800d240 <USBD_CDC_Init+0x1e8>)
 800d220:	7819      	ldrb	r1, [r3, #0]
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d228:	2340      	movs	r3, #64	@ 0x40
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f002 fbe8 	bl	800fa00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d230:	2300      	movs	r3, #0
}
 800d232:	4618      	mov	r0, r3
 800d234:	3710      	adds	r7, #16
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
 800d23a:	bf00      	nop
 800d23c:	240000bf 	.word	0x240000bf
 800d240:	240000c0 	.word	0x240000c0
 800d244:	240000c1 	.word	0x240000c1

0800d248 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b082      	sub	sp, #8
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	460b      	mov	r3, r1
 800d252:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d254:	4b3a      	ldr	r3, [pc, #232]	@ (800d340 <USBD_CDC_DeInit+0xf8>)
 800d256:	781b      	ldrb	r3, [r3, #0]
 800d258:	4619      	mov	r1, r3
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f002 fb07 	bl	800f86e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d260:	4b37      	ldr	r3, [pc, #220]	@ (800d340 <USBD_CDC_DeInit+0xf8>)
 800d262:	781b      	ldrb	r3, [r3, #0]
 800d264:	f003 020f 	and.w	r2, r3, #15
 800d268:	6879      	ldr	r1, [r7, #4]
 800d26a:	4613      	mov	r3, r2
 800d26c:	009b      	lsls	r3, r3, #2
 800d26e:	4413      	add	r3, r2
 800d270:	009b      	lsls	r3, r3, #2
 800d272:	440b      	add	r3, r1
 800d274:	3324      	adds	r3, #36	@ 0x24
 800d276:	2200      	movs	r2, #0
 800d278:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d27a:	4b32      	ldr	r3, [pc, #200]	@ (800d344 <USBD_CDC_DeInit+0xfc>)
 800d27c:	781b      	ldrb	r3, [r3, #0]
 800d27e:	4619      	mov	r1, r3
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f002 faf4 	bl	800f86e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d286:	4b2f      	ldr	r3, [pc, #188]	@ (800d344 <USBD_CDC_DeInit+0xfc>)
 800d288:	781b      	ldrb	r3, [r3, #0]
 800d28a:	f003 020f 	and.w	r2, r3, #15
 800d28e:	6879      	ldr	r1, [r7, #4]
 800d290:	4613      	mov	r3, r2
 800d292:	009b      	lsls	r3, r3, #2
 800d294:	4413      	add	r3, r2
 800d296:	009b      	lsls	r3, r3, #2
 800d298:	440b      	add	r3, r1
 800d29a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d29e:	2200      	movs	r2, #0
 800d2a0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d2a2:	4b29      	ldr	r3, [pc, #164]	@ (800d348 <USBD_CDC_DeInit+0x100>)
 800d2a4:	781b      	ldrb	r3, [r3, #0]
 800d2a6:	4619      	mov	r1, r3
 800d2a8:	6878      	ldr	r0, [r7, #4]
 800d2aa:	f002 fae0 	bl	800f86e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d2ae:	4b26      	ldr	r3, [pc, #152]	@ (800d348 <USBD_CDC_DeInit+0x100>)
 800d2b0:	781b      	ldrb	r3, [r3, #0]
 800d2b2:	f003 020f 	and.w	r2, r3, #15
 800d2b6:	6879      	ldr	r1, [r7, #4]
 800d2b8:	4613      	mov	r3, r2
 800d2ba:	009b      	lsls	r3, r3, #2
 800d2bc:	4413      	add	r3, r2
 800d2be:	009b      	lsls	r3, r3, #2
 800d2c0:	440b      	add	r3, r1
 800d2c2:	3324      	adds	r3, #36	@ 0x24
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d2c8:	4b1f      	ldr	r3, [pc, #124]	@ (800d348 <USBD_CDC_DeInit+0x100>)
 800d2ca:	781b      	ldrb	r3, [r3, #0]
 800d2cc:	f003 020f 	and.w	r2, r3, #15
 800d2d0:	6879      	ldr	r1, [r7, #4]
 800d2d2:	4613      	mov	r3, r2
 800d2d4:	009b      	lsls	r3, r3, #2
 800d2d6:	4413      	add	r3, r2
 800d2d8:	009b      	lsls	r3, r3, #2
 800d2da:	440b      	add	r3, r1
 800d2dc:	3326      	adds	r3, #38	@ 0x26
 800d2de:	2200      	movs	r2, #0
 800d2e0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	32b0      	adds	r2, #176	@ 0xb0
 800d2ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d01f      	beq.n	800d334 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d2fa:	687a      	ldr	r2, [r7, #4]
 800d2fc:	33b0      	adds	r3, #176	@ 0xb0
 800d2fe:	009b      	lsls	r3, r3, #2
 800d300:	4413      	add	r3, r2
 800d302:	685b      	ldr	r3, [r3, #4]
 800d304:	685b      	ldr	r3, [r3, #4]
 800d306:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	32b0      	adds	r2, #176	@ 0xb0
 800d312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d316:	4618      	mov	r0, r3
 800d318:	f002 fbb4 	bl	800fa84 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	32b0      	adds	r2, #176	@ 0xb0
 800d326:	2100      	movs	r1, #0
 800d328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2200      	movs	r2, #0
 800d330:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d334:	2300      	movs	r3, #0
}
 800d336:	4618      	mov	r0, r3
 800d338:	3708      	adds	r7, #8
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}
 800d33e:	bf00      	nop
 800d340:	240000bf 	.word	0x240000bf
 800d344:	240000c0 	.word	0x240000c0
 800d348:	240000c1 	.word	0x240000c1

0800d34c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b086      	sub	sp, #24
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
 800d354:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	32b0      	adds	r2, #176	@ 0xb0
 800d360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d364:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d366:	2300      	movs	r3, #0
 800d368:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d36a:	2300      	movs	r3, #0
 800d36c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d36e:	2300      	movs	r3, #0
 800d370:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d372:	693b      	ldr	r3, [r7, #16]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d101      	bne.n	800d37c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d378:	2303      	movs	r3, #3
 800d37a:	e0bf      	b.n	800d4fc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	781b      	ldrb	r3, [r3, #0]
 800d380:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d384:	2b00      	cmp	r3, #0
 800d386:	d050      	beq.n	800d42a <USBD_CDC_Setup+0xde>
 800d388:	2b20      	cmp	r3, #32
 800d38a:	f040 80af 	bne.w	800d4ec <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	88db      	ldrh	r3, [r3, #6]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d03a      	beq.n	800d40c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	781b      	ldrb	r3, [r3, #0]
 800d39a:	b25b      	sxtb	r3, r3
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	da1b      	bge.n	800d3d8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d3a6:	687a      	ldr	r2, [r7, #4]
 800d3a8:	33b0      	adds	r3, #176	@ 0xb0
 800d3aa:	009b      	lsls	r3, r3, #2
 800d3ac:	4413      	add	r3, r2
 800d3ae:	685b      	ldr	r3, [r3, #4]
 800d3b0:	689b      	ldr	r3, [r3, #8]
 800d3b2:	683a      	ldr	r2, [r7, #0]
 800d3b4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d3b6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d3b8:	683a      	ldr	r2, [r7, #0]
 800d3ba:	88d2      	ldrh	r2, [r2, #6]
 800d3bc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	88db      	ldrh	r3, [r3, #6]
 800d3c2:	2b07      	cmp	r3, #7
 800d3c4:	bf28      	it	cs
 800d3c6:	2307      	movcs	r3, #7
 800d3c8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d3ca:	693b      	ldr	r3, [r7, #16]
 800d3cc:	89fa      	ldrh	r2, [r7, #14]
 800d3ce:	4619      	mov	r1, r3
 800d3d0:	6878      	ldr	r0, [r7, #4]
 800d3d2:	f001 fdbd 	bl	800ef50 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d3d6:	e090      	b.n	800d4fa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	785a      	ldrb	r2, [r3, #1]
 800d3dc:	693b      	ldr	r3, [r7, #16]
 800d3de:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	88db      	ldrh	r3, [r3, #6]
 800d3e6:	2b3f      	cmp	r3, #63	@ 0x3f
 800d3e8:	d803      	bhi.n	800d3f2 <USBD_CDC_Setup+0xa6>
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	88db      	ldrh	r3, [r3, #6]
 800d3ee:	b2da      	uxtb	r2, r3
 800d3f0:	e000      	b.n	800d3f4 <USBD_CDC_Setup+0xa8>
 800d3f2:	2240      	movs	r2, #64	@ 0x40
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d3fa:	6939      	ldr	r1, [r7, #16]
 800d3fc:	693b      	ldr	r3, [r7, #16]
 800d3fe:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800d402:	461a      	mov	r2, r3
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f001 fdcf 	bl	800efa8 <USBD_CtlPrepareRx>
      break;
 800d40a:	e076      	b.n	800d4fa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d412:	687a      	ldr	r2, [r7, #4]
 800d414:	33b0      	adds	r3, #176	@ 0xb0
 800d416:	009b      	lsls	r3, r3, #2
 800d418:	4413      	add	r3, r2
 800d41a:	685b      	ldr	r3, [r3, #4]
 800d41c:	689b      	ldr	r3, [r3, #8]
 800d41e:	683a      	ldr	r2, [r7, #0]
 800d420:	7850      	ldrb	r0, [r2, #1]
 800d422:	2200      	movs	r2, #0
 800d424:	6839      	ldr	r1, [r7, #0]
 800d426:	4798      	blx	r3
      break;
 800d428:	e067      	b.n	800d4fa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	785b      	ldrb	r3, [r3, #1]
 800d42e:	2b0b      	cmp	r3, #11
 800d430:	d851      	bhi.n	800d4d6 <USBD_CDC_Setup+0x18a>
 800d432:	a201      	add	r2, pc, #4	@ (adr r2, 800d438 <USBD_CDC_Setup+0xec>)
 800d434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d438:	0800d469 	.word	0x0800d469
 800d43c:	0800d4e5 	.word	0x0800d4e5
 800d440:	0800d4d7 	.word	0x0800d4d7
 800d444:	0800d4d7 	.word	0x0800d4d7
 800d448:	0800d4d7 	.word	0x0800d4d7
 800d44c:	0800d4d7 	.word	0x0800d4d7
 800d450:	0800d4d7 	.word	0x0800d4d7
 800d454:	0800d4d7 	.word	0x0800d4d7
 800d458:	0800d4d7 	.word	0x0800d4d7
 800d45c:	0800d4d7 	.word	0x0800d4d7
 800d460:	0800d493 	.word	0x0800d493
 800d464:	0800d4bd 	.word	0x0800d4bd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d46e:	b2db      	uxtb	r3, r3
 800d470:	2b03      	cmp	r3, #3
 800d472:	d107      	bne.n	800d484 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d474:	f107 030a 	add.w	r3, r7, #10
 800d478:	2202      	movs	r2, #2
 800d47a:	4619      	mov	r1, r3
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f001 fd67 	bl	800ef50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d482:	e032      	b.n	800d4ea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d484:	6839      	ldr	r1, [r7, #0]
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f001 fce5 	bl	800ee56 <USBD_CtlError>
            ret = USBD_FAIL;
 800d48c:	2303      	movs	r3, #3
 800d48e:	75fb      	strb	r3, [r7, #23]
          break;
 800d490:	e02b      	b.n	800d4ea <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d498:	b2db      	uxtb	r3, r3
 800d49a:	2b03      	cmp	r3, #3
 800d49c:	d107      	bne.n	800d4ae <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d49e:	f107 030d 	add.w	r3, r7, #13
 800d4a2:	2201      	movs	r2, #1
 800d4a4:	4619      	mov	r1, r3
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f001 fd52 	bl	800ef50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d4ac:	e01d      	b.n	800d4ea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d4ae:	6839      	ldr	r1, [r7, #0]
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f001 fcd0 	bl	800ee56 <USBD_CtlError>
            ret = USBD_FAIL;
 800d4b6:	2303      	movs	r3, #3
 800d4b8:	75fb      	strb	r3, [r7, #23]
          break;
 800d4ba:	e016      	b.n	800d4ea <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d4c2:	b2db      	uxtb	r3, r3
 800d4c4:	2b03      	cmp	r3, #3
 800d4c6:	d00f      	beq.n	800d4e8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d4c8:	6839      	ldr	r1, [r7, #0]
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	f001 fcc3 	bl	800ee56 <USBD_CtlError>
            ret = USBD_FAIL;
 800d4d0:	2303      	movs	r3, #3
 800d4d2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d4d4:	e008      	b.n	800d4e8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d4d6:	6839      	ldr	r1, [r7, #0]
 800d4d8:	6878      	ldr	r0, [r7, #4]
 800d4da:	f001 fcbc 	bl	800ee56 <USBD_CtlError>
          ret = USBD_FAIL;
 800d4de:	2303      	movs	r3, #3
 800d4e0:	75fb      	strb	r3, [r7, #23]
          break;
 800d4e2:	e002      	b.n	800d4ea <USBD_CDC_Setup+0x19e>
          break;
 800d4e4:	bf00      	nop
 800d4e6:	e008      	b.n	800d4fa <USBD_CDC_Setup+0x1ae>
          break;
 800d4e8:	bf00      	nop
      }
      break;
 800d4ea:	e006      	b.n	800d4fa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d4ec:	6839      	ldr	r1, [r7, #0]
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f001 fcb1 	bl	800ee56 <USBD_CtlError>
      ret = USBD_FAIL;
 800d4f4:	2303      	movs	r3, #3
 800d4f6:	75fb      	strb	r3, [r7, #23]
      break;
 800d4f8:	bf00      	nop
  }

  return (uint8_t)ret;
 800d4fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	3718      	adds	r7, #24
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}

0800d504 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b084      	sub	sp, #16
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
 800d50c:	460b      	mov	r3, r1
 800d50e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d516:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	32b0      	adds	r2, #176	@ 0xb0
 800d522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d101      	bne.n	800d52e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d52a:	2303      	movs	r3, #3
 800d52c:	e065      	b.n	800d5fa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	32b0      	adds	r2, #176	@ 0xb0
 800d538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d53c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d53e:	78fb      	ldrb	r3, [r7, #3]
 800d540:	f003 020f 	and.w	r2, r3, #15
 800d544:	6879      	ldr	r1, [r7, #4]
 800d546:	4613      	mov	r3, r2
 800d548:	009b      	lsls	r3, r3, #2
 800d54a:	4413      	add	r3, r2
 800d54c:	009b      	lsls	r3, r3, #2
 800d54e:	440b      	add	r3, r1
 800d550:	3318      	adds	r3, #24
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d02f      	beq.n	800d5b8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d558:	78fb      	ldrb	r3, [r7, #3]
 800d55a:	f003 020f 	and.w	r2, r3, #15
 800d55e:	6879      	ldr	r1, [r7, #4]
 800d560:	4613      	mov	r3, r2
 800d562:	009b      	lsls	r3, r3, #2
 800d564:	4413      	add	r3, r2
 800d566:	009b      	lsls	r3, r3, #2
 800d568:	440b      	add	r3, r1
 800d56a:	3318      	adds	r3, #24
 800d56c:	681a      	ldr	r2, [r3, #0]
 800d56e:	78fb      	ldrb	r3, [r7, #3]
 800d570:	f003 010f 	and.w	r1, r3, #15
 800d574:	68f8      	ldr	r0, [r7, #12]
 800d576:	460b      	mov	r3, r1
 800d578:	00db      	lsls	r3, r3, #3
 800d57a:	440b      	add	r3, r1
 800d57c:	009b      	lsls	r3, r3, #2
 800d57e:	4403      	add	r3, r0
 800d580:	331c      	adds	r3, #28
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	fbb2 f1f3 	udiv	r1, r2, r3
 800d588:	fb01 f303 	mul.w	r3, r1, r3
 800d58c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d112      	bne.n	800d5b8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d592:	78fb      	ldrb	r3, [r7, #3]
 800d594:	f003 020f 	and.w	r2, r3, #15
 800d598:	6879      	ldr	r1, [r7, #4]
 800d59a:	4613      	mov	r3, r2
 800d59c:	009b      	lsls	r3, r3, #2
 800d59e:	4413      	add	r3, r2
 800d5a0:	009b      	lsls	r3, r3, #2
 800d5a2:	440b      	add	r3, r1
 800d5a4:	3318      	adds	r3, #24
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d5aa:	78f9      	ldrb	r1, [r7, #3]
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f002 fa04 	bl	800f9be <USBD_LL_Transmit>
 800d5b6:	e01f      	b.n	800d5f8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d5b8:	68bb      	ldr	r3, [r7, #8]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d5c6:	687a      	ldr	r2, [r7, #4]
 800d5c8:	33b0      	adds	r3, #176	@ 0xb0
 800d5ca:	009b      	lsls	r3, r3, #2
 800d5cc:	4413      	add	r3, r2
 800d5ce:	685b      	ldr	r3, [r3, #4]
 800d5d0:	691b      	ldr	r3, [r3, #16]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d010      	beq.n	800d5f8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d5dc:	687a      	ldr	r2, [r7, #4]
 800d5de:	33b0      	adds	r3, #176	@ 0xb0
 800d5e0:	009b      	lsls	r3, r3, #2
 800d5e2:	4413      	add	r3, r2
 800d5e4:	685b      	ldr	r3, [r3, #4]
 800d5e6:	691b      	ldr	r3, [r3, #16]
 800d5e8:	68ba      	ldr	r2, [r7, #8]
 800d5ea:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800d5ee:	68ba      	ldr	r2, [r7, #8]
 800d5f0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800d5f4:	78fa      	ldrb	r2, [r7, #3]
 800d5f6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d5f8:	2300      	movs	r3, #0
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3710      	adds	r7, #16
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}

0800d602 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d602:	b580      	push	{r7, lr}
 800d604:	b084      	sub	sp, #16
 800d606:	af00      	add	r7, sp, #0
 800d608:	6078      	str	r0, [r7, #4]
 800d60a:	460b      	mov	r3, r1
 800d60c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	32b0      	adds	r2, #176	@ 0xb0
 800d618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d61c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	32b0      	adds	r2, #176	@ 0xb0
 800d628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d101      	bne.n	800d634 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d630:	2303      	movs	r3, #3
 800d632:	e01a      	b.n	800d66a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d634:	78fb      	ldrb	r3, [r7, #3]
 800d636:	4619      	mov	r1, r3
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f002 fa02 	bl	800fa42 <USBD_LL_GetRxDataSize>
 800d63e:	4602      	mov	r2, r0
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d64c:	687a      	ldr	r2, [r7, #4]
 800d64e:	33b0      	adds	r3, #176	@ 0xb0
 800d650:	009b      	lsls	r3, r3, #2
 800d652:	4413      	add	r3, r2
 800d654:	685b      	ldr	r3, [r3, #4]
 800d656:	68db      	ldr	r3, [r3, #12]
 800d658:	68fa      	ldr	r2, [r7, #12]
 800d65a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800d65e:	68fa      	ldr	r2, [r7, #12]
 800d660:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800d664:	4611      	mov	r1, r2
 800d666:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d668:	2300      	movs	r3, #0
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	3710      	adds	r7, #16
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}

0800d672 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d672:	b580      	push	{r7, lr}
 800d674:	b084      	sub	sp, #16
 800d676:	af00      	add	r7, sp, #0
 800d678:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	32b0      	adds	r2, #176	@ 0xb0
 800d684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d688:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d101      	bne.n	800d694 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d690:	2303      	movs	r3, #3
 800d692:	e024      	b.n	800d6de <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d69a:	687a      	ldr	r2, [r7, #4]
 800d69c:	33b0      	adds	r3, #176	@ 0xb0
 800d69e:	009b      	lsls	r3, r3, #2
 800d6a0:	4413      	add	r3, r2
 800d6a2:	685b      	ldr	r3, [r3, #4]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d019      	beq.n	800d6dc <USBD_CDC_EP0_RxReady+0x6a>
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d6ae:	2bff      	cmp	r3, #255	@ 0xff
 800d6b0:	d014      	beq.n	800d6dc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d6b8:	687a      	ldr	r2, [r7, #4]
 800d6ba:	33b0      	adds	r3, #176	@ 0xb0
 800d6bc:	009b      	lsls	r3, r3, #2
 800d6be:	4413      	add	r3, r2
 800d6c0:	685b      	ldr	r3, [r3, #4]
 800d6c2:	689b      	ldr	r3, [r3, #8]
 800d6c4:	68fa      	ldr	r2, [r7, #12]
 800d6c6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800d6ca:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d6cc:	68fa      	ldr	r2, [r7, #12]
 800d6ce:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d6d2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	22ff      	movs	r2, #255	@ 0xff
 800d6d8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800d6dc:	2300      	movs	r3, #0
}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	3710      	adds	r7, #16
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}
	...

0800d6e8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b086      	sub	sp, #24
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d6f0:	2182      	movs	r1, #130	@ 0x82
 800d6f2:	4818      	ldr	r0, [pc, #96]	@ (800d754 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d6f4:	f000 fd4f 	bl	800e196 <USBD_GetEpDesc>
 800d6f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d6fa:	2101      	movs	r1, #1
 800d6fc:	4815      	ldr	r0, [pc, #84]	@ (800d754 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d6fe:	f000 fd4a 	bl	800e196 <USBD_GetEpDesc>
 800d702:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d704:	2181      	movs	r1, #129	@ 0x81
 800d706:	4813      	ldr	r0, [pc, #76]	@ (800d754 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d708:	f000 fd45 	bl	800e196 <USBD_GetEpDesc>
 800d70c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d70e:	697b      	ldr	r3, [r7, #20]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d002      	beq.n	800d71a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	2210      	movs	r2, #16
 800d718:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d71a:	693b      	ldr	r3, [r7, #16]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d006      	beq.n	800d72e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d720:	693b      	ldr	r3, [r7, #16]
 800d722:	2200      	movs	r2, #0
 800d724:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d728:	711a      	strb	r2, [r3, #4]
 800d72a:	2200      	movs	r2, #0
 800d72c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d006      	beq.n	800d742 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	2200      	movs	r2, #0
 800d738:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d73c:	711a      	strb	r2, [r3, #4]
 800d73e:	2200      	movs	r2, #0
 800d740:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2243      	movs	r2, #67	@ 0x43
 800d746:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d748:	4b02      	ldr	r3, [pc, #8]	@ (800d754 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	3718      	adds	r7, #24
 800d74e:	46bd      	mov	sp, r7
 800d750:	bd80      	pop	{r7, pc}
 800d752:	bf00      	nop
 800d754:	2400007c 	.word	0x2400007c

0800d758 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b086      	sub	sp, #24
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d760:	2182      	movs	r1, #130	@ 0x82
 800d762:	4818      	ldr	r0, [pc, #96]	@ (800d7c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d764:	f000 fd17 	bl	800e196 <USBD_GetEpDesc>
 800d768:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d76a:	2101      	movs	r1, #1
 800d76c:	4815      	ldr	r0, [pc, #84]	@ (800d7c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d76e:	f000 fd12 	bl	800e196 <USBD_GetEpDesc>
 800d772:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d774:	2181      	movs	r1, #129	@ 0x81
 800d776:	4813      	ldr	r0, [pc, #76]	@ (800d7c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d778:	f000 fd0d 	bl	800e196 <USBD_GetEpDesc>
 800d77c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d77e:	697b      	ldr	r3, [r7, #20]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d002      	beq.n	800d78a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	2210      	movs	r2, #16
 800d788:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d78a:	693b      	ldr	r3, [r7, #16]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d006      	beq.n	800d79e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d790:	693b      	ldr	r3, [r7, #16]
 800d792:	2200      	movs	r2, #0
 800d794:	711a      	strb	r2, [r3, #4]
 800d796:	2200      	movs	r2, #0
 800d798:	f042 0202 	orr.w	r2, r2, #2
 800d79c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d006      	beq.n	800d7b2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	711a      	strb	r2, [r3, #4]
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	f042 0202 	orr.w	r2, r2, #2
 800d7b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	2243      	movs	r2, #67	@ 0x43
 800d7b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d7b8:	4b02      	ldr	r3, [pc, #8]	@ (800d7c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	3718      	adds	r7, #24
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}
 800d7c2:	bf00      	nop
 800d7c4:	2400007c 	.word	0x2400007c

0800d7c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b086      	sub	sp, #24
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d7d0:	2182      	movs	r1, #130	@ 0x82
 800d7d2:	4818      	ldr	r0, [pc, #96]	@ (800d834 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d7d4:	f000 fcdf 	bl	800e196 <USBD_GetEpDesc>
 800d7d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d7da:	2101      	movs	r1, #1
 800d7dc:	4815      	ldr	r0, [pc, #84]	@ (800d834 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d7de:	f000 fcda 	bl	800e196 <USBD_GetEpDesc>
 800d7e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d7e4:	2181      	movs	r1, #129	@ 0x81
 800d7e6:	4813      	ldr	r0, [pc, #76]	@ (800d834 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d7e8:	f000 fcd5 	bl	800e196 <USBD_GetEpDesc>
 800d7ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d7ee:	697b      	ldr	r3, [r7, #20]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d002      	beq.n	800d7fa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d7f4:	697b      	ldr	r3, [r7, #20]
 800d7f6:	2210      	movs	r2, #16
 800d7f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d7fa:	693b      	ldr	r3, [r7, #16]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d006      	beq.n	800d80e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d800:	693b      	ldr	r3, [r7, #16]
 800d802:	2200      	movs	r2, #0
 800d804:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d808:	711a      	strb	r2, [r3, #4]
 800d80a:	2200      	movs	r2, #0
 800d80c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d006      	beq.n	800d822 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	2200      	movs	r2, #0
 800d818:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d81c:	711a      	strb	r2, [r3, #4]
 800d81e:	2200      	movs	r2, #0
 800d820:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2243      	movs	r2, #67	@ 0x43
 800d826:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d828:	4b02      	ldr	r3, [pc, #8]	@ (800d834 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	3718      	adds	r7, #24
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}
 800d832:	bf00      	nop
 800d834:	2400007c 	.word	0x2400007c

0800d838 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d838:	b480      	push	{r7}
 800d83a:	b083      	sub	sp, #12
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	220a      	movs	r2, #10
 800d844:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d846:	4b03      	ldr	r3, [pc, #12]	@ (800d854 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d848:	4618      	mov	r0, r3
 800d84a:	370c      	adds	r7, #12
 800d84c:	46bd      	mov	sp, r7
 800d84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d852:	4770      	bx	lr
 800d854:	24000038 	.word	0x24000038

0800d858 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d858:	b480      	push	{r7}
 800d85a:	b083      	sub	sp, #12
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
 800d860:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d101      	bne.n	800d86c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d868:	2303      	movs	r3, #3
 800d86a:	e009      	b.n	800d880 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d872:	687a      	ldr	r2, [r7, #4]
 800d874:	33b0      	adds	r3, #176	@ 0xb0
 800d876:	009b      	lsls	r3, r3, #2
 800d878:	4413      	add	r3, r2
 800d87a:	683a      	ldr	r2, [r7, #0]
 800d87c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d87e:	2300      	movs	r3, #0
}
 800d880:	4618      	mov	r0, r3
 800d882:	370c      	adds	r7, #12
 800d884:	46bd      	mov	sp, r7
 800d886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88a:	4770      	bx	lr

0800d88c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d88c:	b480      	push	{r7}
 800d88e:	b087      	sub	sp, #28
 800d890:	af00      	add	r7, sp, #0
 800d892:	60f8      	str	r0, [r7, #12]
 800d894:	60b9      	str	r1, [r7, #8]
 800d896:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	32b0      	adds	r2, #176	@ 0xb0
 800d8a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8a6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d8a8:	697b      	ldr	r3, [r7, #20]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d101      	bne.n	800d8b2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d8ae:	2303      	movs	r3, #3
 800d8b0:	e008      	b.n	800d8c4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d8b2:	697b      	ldr	r3, [r7, #20]
 800d8b4:	68ba      	ldr	r2, [r7, #8]
 800d8b6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800d8ba:	697b      	ldr	r3, [r7, #20]
 800d8bc:	687a      	ldr	r2, [r7, #4]
 800d8be:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800d8c2:	2300      	movs	r3, #0
}
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	371c      	adds	r7, #28
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ce:	4770      	bx	lr

0800d8d0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b085      	sub	sp, #20
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
 800d8d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	32b0      	adds	r2, #176	@ 0xb0
 800d8e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8e8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d101      	bne.n	800d8f4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d8f0:	2303      	movs	r3, #3
 800d8f2:	e004      	b.n	800d8fe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	683a      	ldr	r2, [r7, #0]
 800d8f8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800d8fc:	2300      	movs	r3, #0
}
 800d8fe:	4618      	mov	r0, r3
 800d900:	3714      	adds	r7, #20
 800d902:	46bd      	mov	sp, r7
 800d904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d908:	4770      	bx	lr
	...

0800d90c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b084      	sub	sp, #16
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	32b0      	adds	r2, #176	@ 0xb0
 800d91e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d922:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800d924:	2301      	movs	r3, #1
 800d926:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d101      	bne.n	800d932 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d92e:	2303      	movs	r3, #3
 800d930:	e025      	b.n	800d97e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d11f      	bne.n	800d97c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d93c:	68bb      	ldr	r3, [r7, #8]
 800d93e:	2201      	movs	r2, #1
 800d940:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d944:	4b10      	ldr	r3, [pc, #64]	@ (800d988 <USBD_CDC_TransmitPacket+0x7c>)
 800d946:	781b      	ldrb	r3, [r3, #0]
 800d948:	f003 020f 	and.w	r2, r3, #15
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800d952:	6878      	ldr	r0, [r7, #4]
 800d954:	4613      	mov	r3, r2
 800d956:	009b      	lsls	r3, r3, #2
 800d958:	4413      	add	r3, r2
 800d95a:	009b      	lsls	r3, r3, #2
 800d95c:	4403      	add	r3, r0
 800d95e:	3318      	adds	r3, #24
 800d960:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d962:	4b09      	ldr	r3, [pc, #36]	@ (800d988 <USBD_CDC_TransmitPacket+0x7c>)
 800d964:	7819      	ldrb	r1, [r3, #0]
 800d966:	68bb      	ldr	r3, [r7, #8]
 800d968:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800d972:	6878      	ldr	r0, [r7, #4]
 800d974:	f002 f823 	bl	800f9be <USBD_LL_Transmit>

    ret = USBD_OK;
 800d978:	2300      	movs	r3, #0
 800d97a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d97c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d97e:	4618      	mov	r0, r3
 800d980:	3710      	adds	r7, #16
 800d982:	46bd      	mov	sp, r7
 800d984:	bd80      	pop	{r7, pc}
 800d986:	bf00      	nop
 800d988:	240000bf 	.word	0x240000bf

0800d98c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b084      	sub	sp, #16
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	32b0      	adds	r2, #176	@ 0xb0
 800d99e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9a2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	32b0      	adds	r2, #176	@ 0xb0
 800d9ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d101      	bne.n	800d9ba <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d9b6:	2303      	movs	r3, #3
 800d9b8:	e018      	b.n	800d9ec <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	7c1b      	ldrb	r3, [r3, #16]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d10a      	bne.n	800d9d8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d9c2:	4b0c      	ldr	r3, [pc, #48]	@ (800d9f4 <USBD_CDC_ReceivePacket+0x68>)
 800d9c4:	7819      	ldrb	r1, [r3, #0]
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d9cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d9d0:	6878      	ldr	r0, [r7, #4]
 800d9d2:	f002 f815 	bl	800fa00 <USBD_LL_PrepareReceive>
 800d9d6:	e008      	b.n	800d9ea <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d9d8:	4b06      	ldr	r3, [pc, #24]	@ (800d9f4 <USBD_CDC_ReceivePacket+0x68>)
 800d9da:	7819      	ldrb	r1, [r3, #0]
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d9e2:	2340      	movs	r3, #64	@ 0x40
 800d9e4:	6878      	ldr	r0, [r7, #4]
 800d9e6:	f002 f80b 	bl	800fa00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d9ea:	2300      	movs	r3, #0
}
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	3710      	adds	r7, #16
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd80      	pop	{r7, pc}
 800d9f4:	240000c0 	.word	0x240000c0

0800d9f8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b086      	sub	sp, #24
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	60f8      	str	r0, [r7, #12]
 800da00:	60b9      	str	r1, [r7, #8]
 800da02:	4613      	mov	r3, r2
 800da04:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d101      	bne.n	800da10 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800da0c:	2303      	movs	r3, #3
 800da0e:	e01f      	b.n	800da50 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	2200      	movs	r2, #0
 800da14:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	2200      	movs	r2, #0
 800da1c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	2200      	movs	r2, #0
 800da24:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800da28:	68bb      	ldr	r3, [r7, #8]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d003      	beq.n	800da36 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	68ba      	ldr	r2, [r7, #8]
 800da32:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	2201      	movs	r2, #1
 800da3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	79fa      	ldrb	r2, [r7, #7]
 800da42:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800da44:	68f8      	ldr	r0, [r7, #12]
 800da46:	f001 fe81 	bl	800f74c <USBD_LL_Init>
 800da4a:	4603      	mov	r3, r0
 800da4c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800da4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800da50:	4618      	mov	r0, r3
 800da52:	3718      	adds	r7, #24
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}

0800da58 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b084      	sub	sp, #16
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
 800da60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800da62:	2300      	movs	r3, #0
 800da64:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d101      	bne.n	800da70 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800da6c:	2303      	movs	r3, #3
 800da6e:	e025      	b.n	800dabc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	683a      	ldr	r2, [r7, #0]
 800da74:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	32ae      	adds	r2, #174	@ 0xae
 800da82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d00f      	beq.n	800daac <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	32ae      	adds	r2, #174	@ 0xae
 800da96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da9c:	f107 020e 	add.w	r2, r7, #14
 800daa0:	4610      	mov	r0, r2
 800daa2:	4798      	blx	r3
 800daa4:	4602      	mov	r2, r0
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800dab2:	1c5a      	adds	r2, r3, #1
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800daba:	2300      	movs	r3, #0
}
 800dabc:	4618      	mov	r0, r3
 800dabe:	3710      	adds	r7, #16
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd80      	pop	{r7, pc}

0800dac4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b082      	sub	sp, #8
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800dacc:	6878      	ldr	r0, [r7, #4]
 800dace:	f001 fe8d 	bl	800f7ec <USBD_LL_Start>
 800dad2:	4603      	mov	r3, r0
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	3708      	adds	r7, #8
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}

0800dadc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800dadc:	b480      	push	{r7}
 800dade:	b083      	sub	sp, #12
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dae4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800dae6:	4618      	mov	r0, r3
 800dae8:	370c      	adds	r7, #12
 800daea:	46bd      	mov	sp, r7
 800daec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf0:	4770      	bx	lr

0800daf2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800daf2:	b580      	push	{r7, lr}
 800daf4:	b084      	sub	sp, #16
 800daf6:	af00      	add	r7, sp, #0
 800daf8:	6078      	str	r0, [r7, #4]
 800dafa:	460b      	mov	r3, r1
 800dafc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800dafe:	2300      	movs	r3, #0
 800db00:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d009      	beq.n	800db20 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	78fa      	ldrb	r2, [r7, #3]
 800db16:	4611      	mov	r1, r2
 800db18:	6878      	ldr	r0, [r7, #4]
 800db1a:	4798      	blx	r3
 800db1c:	4603      	mov	r3, r0
 800db1e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800db20:	7bfb      	ldrb	r3, [r7, #15]
}
 800db22:	4618      	mov	r0, r3
 800db24:	3710      	adds	r7, #16
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}

0800db2a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800db2a:	b580      	push	{r7, lr}
 800db2c:	b084      	sub	sp, #16
 800db2e:	af00      	add	r7, sp, #0
 800db30:	6078      	str	r0, [r7, #4]
 800db32:	460b      	mov	r3, r1
 800db34:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800db36:	2300      	movs	r3, #0
 800db38:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db40:	685b      	ldr	r3, [r3, #4]
 800db42:	78fa      	ldrb	r2, [r7, #3]
 800db44:	4611      	mov	r1, r2
 800db46:	6878      	ldr	r0, [r7, #4]
 800db48:	4798      	blx	r3
 800db4a:	4603      	mov	r3, r0
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d001      	beq.n	800db54 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800db50:	2303      	movs	r3, #3
 800db52:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800db54:	7bfb      	ldrb	r3, [r7, #15]
}
 800db56:	4618      	mov	r0, r3
 800db58:	3710      	adds	r7, #16
 800db5a:	46bd      	mov	sp, r7
 800db5c:	bd80      	pop	{r7, pc}

0800db5e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800db5e:	b580      	push	{r7, lr}
 800db60:	b084      	sub	sp, #16
 800db62:	af00      	add	r7, sp, #0
 800db64:	6078      	str	r0, [r7, #4]
 800db66:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800db6e:	6839      	ldr	r1, [r7, #0]
 800db70:	4618      	mov	r0, r3
 800db72:	f001 f936 	bl	800ede2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	2201      	movs	r2, #1
 800db7a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800db84:	461a      	mov	r2, r3
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800db92:	f003 031f 	and.w	r3, r3, #31
 800db96:	2b02      	cmp	r3, #2
 800db98:	d01a      	beq.n	800dbd0 <USBD_LL_SetupStage+0x72>
 800db9a:	2b02      	cmp	r3, #2
 800db9c:	d822      	bhi.n	800dbe4 <USBD_LL_SetupStage+0x86>
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d002      	beq.n	800dba8 <USBD_LL_SetupStage+0x4a>
 800dba2:	2b01      	cmp	r3, #1
 800dba4:	d00a      	beq.n	800dbbc <USBD_LL_SetupStage+0x5e>
 800dba6:	e01d      	b.n	800dbe4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800dbae:	4619      	mov	r1, r3
 800dbb0:	6878      	ldr	r0, [r7, #4]
 800dbb2:	f000 fb63 	bl	800e27c <USBD_StdDevReq>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	73fb      	strb	r3, [r7, #15]
      break;
 800dbba:	e020      	b.n	800dbfe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800dbc2:	4619      	mov	r1, r3
 800dbc4:	6878      	ldr	r0, [r7, #4]
 800dbc6:	f000 fbcb 	bl	800e360 <USBD_StdItfReq>
 800dbca:	4603      	mov	r3, r0
 800dbcc:	73fb      	strb	r3, [r7, #15]
      break;
 800dbce:	e016      	b.n	800dbfe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800dbd6:	4619      	mov	r1, r3
 800dbd8:	6878      	ldr	r0, [r7, #4]
 800dbda:	f000 fc2d 	bl	800e438 <USBD_StdEPReq>
 800dbde:	4603      	mov	r3, r0
 800dbe0:	73fb      	strb	r3, [r7, #15]
      break;
 800dbe2:	e00c      	b.n	800dbfe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800dbea:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800dbee:	b2db      	uxtb	r3, r3
 800dbf0:	4619      	mov	r1, r3
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f001 fe5a 	bl	800f8ac <USBD_LL_StallEP>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	73fb      	strb	r3, [r7, #15]
      break;
 800dbfc:	bf00      	nop
  }

  return ret;
 800dbfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	3710      	adds	r7, #16
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}

0800dc08 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b086      	sub	sp, #24
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	60f8      	str	r0, [r7, #12]
 800dc10:	460b      	mov	r3, r1
 800dc12:	607a      	str	r2, [r7, #4]
 800dc14:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800dc16:	2300      	movs	r3, #0
 800dc18:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800dc1a:	7afb      	ldrb	r3, [r7, #11]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d16e      	bne.n	800dcfe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800dc26:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800dc2e:	2b03      	cmp	r3, #3
 800dc30:	f040 8098 	bne.w	800dd64 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800dc34:	693b      	ldr	r3, [r7, #16]
 800dc36:	689a      	ldr	r2, [r3, #8]
 800dc38:	693b      	ldr	r3, [r7, #16]
 800dc3a:	68db      	ldr	r3, [r3, #12]
 800dc3c:	429a      	cmp	r2, r3
 800dc3e:	d913      	bls.n	800dc68 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800dc40:	693b      	ldr	r3, [r7, #16]
 800dc42:	689a      	ldr	r2, [r3, #8]
 800dc44:	693b      	ldr	r3, [r7, #16]
 800dc46:	68db      	ldr	r3, [r3, #12]
 800dc48:	1ad2      	subs	r2, r2, r3
 800dc4a:	693b      	ldr	r3, [r7, #16]
 800dc4c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800dc4e:	693b      	ldr	r3, [r7, #16]
 800dc50:	68da      	ldr	r2, [r3, #12]
 800dc52:	693b      	ldr	r3, [r7, #16]
 800dc54:	689b      	ldr	r3, [r3, #8]
 800dc56:	4293      	cmp	r3, r2
 800dc58:	bf28      	it	cs
 800dc5a:	4613      	movcs	r3, r2
 800dc5c:	461a      	mov	r2, r3
 800dc5e:	6879      	ldr	r1, [r7, #4]
 800dc60:	68f8      	ldr	r0, [r7, #12]
 800dc62:	f001 f9be 	bl	800efe2 <USBD_CtlContinueRx>
 800dc66:	e07d      	b.n	800dd64 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800dc6e:	f003 031f 	and.w	r3, r3, #31
 800dc72:	2b02      	cmp	r3, #2
 800dc74:	d014      	beq.n	800dca0 <USBD_LL_DataOutStage+0x98>
 800dc76:	2b02      	cmp	r3, #2
 800dc78:	d81d      	bhi.n	800dcb6 <USBD_LL_DataOutStage+0xae>
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d002      	beq.n	800dc84 <USBD_LL_DataOutStage+0x7c>
 800dc7e:	2b01      	cmp	r3, #1
 800dc80:	d003      	beq.n	800dc8a <USBD_LL_DataOutStage+0x82>
 800dc82:	e018      	b.n	800dcb6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800dc84:	2300      	movs	r3, #0
 800dc86:	75bb      	strb	r3, [r7, #22]
            break;
 800dc88:	e018      	b.n	800dcbc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800dc90:	b2db      	uxtb	r3, r3
 800dc92:	4619      	mov	r1, r3
 800dc94:	68f8      	ldr	r0, [r7, #12]
 800dc96:	f000 fa64 	bl	800e162 <USBD_CoreFindIF>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	75bb      	strb	r3, [r7, #22]
            break;
 800dc9e:	e00d      	b.n	800dcbc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800dca6:	b2db      	uxtb	r3, r3
 800dca8:	4619      	mov	r1, r3
 800dcaa:	68f8      	ldr	r0, [r7, #12]
 800dcac:	f000 fa66 	bl	800e17c <USBD_CoreFindEP>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	75bb      	strb	r3, [r7, #22]
            break;
 800dcb4:	e002      	b.n	800dcbc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	75bb      	strb	r3, [r7, #22]
            break;
 800dcba:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800dcbc:	7dbb      	ldrb	r3, [r7, #22]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d119      	bne.n	800dcf6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dcc8:	b2db      	uxtb	r3, r3
 800dcca:	2b03      	cmp	r3, #3
 800dccc:	d113      	bne.n	800dcf6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800dcce:	7dba      	ldrb	r2, [r7, #22]
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	32ae      	adds	r2, #174	@ 0xae
 800dcd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcd8:	691b      	ldr	r3, [r3, #16]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d00b      	beq.n	800dcf6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800dcde:	7dba      	ldrb	r2, [r7, #22]
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800dce6:	7dba      	ldrb	r2, [r7, #22]
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	32ae      	adds	r2, #174	@ 0xae
 800dcec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcf0:	691b      	ldr	r3, [r3, #16]
 800dcf2:	68f8      	ldr	r0, [r7, #12]
 800dcf4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800dcf6:	68f8      	ldr	r0, [r7, #12]
 800dcf8:	f001 f984 	bl	800f004 <USBD_CtlSendStatus>
 800dcfc:	e032      	b.n	800dd64 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800dcfe:	7afb      	ldrb	r3, [r7, #11]
 800dd00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dd04:	b2db      	uxtb	r3, r3
 800dd06:	4619      	mov	r1, r3
 800dd08:	68f8      	ldr	r0, [r7, #12]
 800dd0a:	f000 fa37 	bl	800e17c <USBD_CoreFindEP>
 800dd0e:	4603      	mov	r3, r0
 800dd10:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dd12:	7dbb      	ldrb	r3, [r7, #22]
 800dd14:	2bff      	cmp	r3, #255	@ 0xff
 800dd16:	d025      	beq.n	800dd64 <USBD_LL_DataOutStage+0x15c>
 800dd18:	7dbb      	ldrb	r3, [r7, #22]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d122      	bne.n	800dd64 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd24:	b2db      	uxtb	r3, r3
 800dd26:	2b03      	cmp	r3, #3
 800dd28:	d117      	bne.n	800dd5a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800dd2a:	7dba      	ldrb	r2, [r7, #22]
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	32ae      	adds	r2, #174	@ 0xae
 800dd30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd34:	699b      	ldr	r3, [r3, #24]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d00f      	beq.n	800dd5a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800dd3a:	7dba      	ldrb	r2, [r7, #22]
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800dd42:	7dba      	ldrb	r2, [r7, #22]
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	32ae      	adds	r2, #174	@ 0xae
 800dd48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd4c:	699b      	ldr	r3, [r3, #24]
 800dd4e:	7afa      	ldrb	r2, [r7, #11]
 800dd50:	4611      	mov	r1, r2
 800dd52:	68f8      	ldr	r0, [r7, #12]
 800dd54:	4798      	blx	r3
 800dd56:	4603      	mov	r3, r0
 800dd58:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800dd5a:	7dfb      	ldrb	r3, [r7, #23]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d001      	beq.n	800dd64 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800dd60:	7dfb      	ldrb	r3, [r7, #23]
 800dd62:	e000      	b.n	800dd66 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800dd64:	2300      	movs	r3, #0
}
 800dd66:	4618      	mov	r0, r3
 800dd68:	3718      	adds	r7, #24
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}

0800dd6e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800dd6e:	b580      	push	{r7, lr}
 800dd70:	b086      	sub	sp, #24
 800dd72:	af00      	add	r7, sp, #0
 800dd74:	60f8      	str	r0, [r7, #12]
 800dd76:	460b      	mov	r3, r1
 800dd78:	607a      	str	r2, [r7, #4]
 800dd7a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800dd7c:	7afb      	ldrb	r3, [r7, #11]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d16f      	bne.n	800de62 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	3314      	adds	r3, #20
 800dd86:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800dd8e:	2b02      	cmp	r3, #2
 800dd90:	d15a      	bne.n	800de48 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800dd92:	693b      	ldr	r3, [r7, #16]
 800dd94:	689a      	ldr	r2, [r3, #8]
 800dd96:	693b      	ldr	r3, [r7, #16]
 800dd98:	68db      	ldr	r3, [r3, #12]
 800dd9a:	429a      	cmp	r2, r3
 800dd9c:	d914      	bls.n	800ddc8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dd9e:	693b      	ldr	r3, [r7, #16]
 800dda0:	689a      	ldr	r2, [r3, #8]
 800dda2:	693b      	ldr	r3, [r7, #16]
 800dda4:	68db      	ldr	r3, [r3, #12]
 800dda6:	1ad2      	subs	r2, r2, r3
 800dda8:	693b      	ldr	r3, [r7, #16]
 800ddaa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ddac:	693b      	ldr	r3, [r7, #16]
 800ddae:	689b      	ldr	r3, [r3, #8]
 800ddb0:	461a      	mov	r2, r3
 800ddb2:	6879      	ldr	r1, [r7, #4]
 800ddb4:	68f8      	ldr	r0, [r7, #12]
 800ddb6:	f001 f8e6 	bl	800ef86 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ddba:	2300      	movs	r3, #0
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	2100      	movs	r1, #0
 800ddc0:	68f8      	ldr	r0, [r7, #12]
 800ddc2:	f001 fe1d 	bl	800fa00 <USBD_LL_PrepareReceive>
 800ddc6:	e03f      	b.n	800de48 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ddc8:	693b      	ldr	r3, [r7, #16]
 800ddca:	68da      	ldr	r2, [r3, #12]
 800ddcc:	693b      	ldr	r3, [r7, #16]
 800ddce:	689b      	ldr	r3, [r3, #8]
 800ddd0:	429a      	cmp	r2, r3
 800ddd2:	d11c      	bne.n	800de0e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ddd4:	693b      	ldr	r3, [r7, #16]
 800ddd6:	685a      	ldr	r2, [r3, #4]
 800ddd8:	693b      	ldr	r3, [r7, #16]
 800ddda:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800dddc:	429a      	cmp	r2, r3
 800ddde:	d316      	bcc.n	800de0e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800dde0:	693b      	ldr	r3, [r7, #16]
 800dde2:	685a      	ldr	r2, [r3, #4]
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ddea:	429a      	cmp	r2, r3
 800ddec:	d20f      	bcs.n	800de0e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ddee:	2200      	movs	r2, #0
 800ddf0:	2100      	movs	r1, #0
 800ddf2:	68f8      	ldr	r0, [r7, #12]
 800ddf4:	f001 f8c7 	bl	800ef86 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800de00:	2300      	movs	r3, #0
 800de02:	2200      	movs	r2, #0
 800de04:	2100      	movs	r1, #0
 800de06:	68f8      	ldr	r0, [r7, #12]
 800de08:	f001 fdfa 	bl	800fa00 <USBD_LL_PrepareReceive>
 800de0c:	e01c      	b.n	800de48 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800de14:	b2db      	uxtb	r3, r3
 800de16:	2b03      	cmp	r3, #3
 800de18:	d10f      	bne.n	800de3a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800de20:	68db      	ldr	r3, [r3, #12]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d009      	beq.n	800de3a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	2200      	movs	r2, #0
 800de2a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800de34:	68db      	ldr	r3, [r3, #12]
 800de36:	68f8      	ldr	r0, [r7, #12]
 800de38:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800de3a:	2180      	movs	r1, #128	@ 0x80
 800de3c:	68f8      	ldr	r0, [r7, #12]
 800de3e:	f001 fd35 	bl	800f8ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800de42:	68f8      	ldr	r0, [r7, #12]
 800de44:	f001 f8f1 	bl	800f02a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d03a      	beq.n	800dec8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800de52:	68f8      	ldr	r0, [r7, #12]
 800de54:	f7ff fe42 	bl	800dadc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	2200      	movs	r2, #0
 800de5c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800de60:	e032      	b.n	800dec8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800de62:	7afb      	ldrb	r3, [r7, #11]
 800de64:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800de68:	b2db      	uxtb	r3, r3
 800de6a:	4619      	mov	r1, r3
 800de6c:	68f8      	ldr	r0, [r7, #12]
 800de6e:	f000 f985 	bl	800e17c <USBD_CoreFindEP>
 800de72:	4603      	mov	r3, r0
 800de74:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800de76:	7dfb      	ldrb	r3, [r7, #23]
 800de78:	2bff      	cmp	r3, #255	@ 0xff
 800de7a:	d025      	beq.n	800dec8 <USBD_LL_DataInStage+0x15a>
 800de7c:	7dfb      	ldrb	r3, [r7, #23]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d122      	bne.n	800dec8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800de88:	b2db      	uxtb	r3, r3
 800de8a:	2b03      	cmp	r3, #3
 800de8c:	d11c      	bne.n	800dec8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800de8e:	7dfa      	ldrb	r2, [r7, #23]
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	32ae      	adds	r2, #174	@ 0xae
 800de94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de98:	695b      	ldr	r3, [r3, #20]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d014      	beq.n	800dec8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800de9e:	7dfa      	ldrb	r2, [r7, #23]
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800dea6:	7dfa      	ldrb	r2, [r7, #23]
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	32ae      	adds	r2, #174	@ 0xae
 800deac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800deb0:	695b      	ldr	r3, [r3, #20]
 800deb2:	7afa      	ldrb	r2, [r7, #11]
 800deb4:	4611      	mov	r1, r2
 800deb6:	68f8      	ldr	r0, [r7, #12]
 800deb8:	4798      	blx	r3
 800deba:	4603      	mov	r3, r0
 800debc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800debe:	7dbb      	ldrb	r3, [r7, #22]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d001      	beq.n	800dec8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800dec4:	7dbb      	ldrb	r3, [r7, #22]
 800dec6:	e000      	b.n	800deca <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800dec8:	2300      	movs	r3, #0
}
 800deca:	4618      	mov	r0, r3
 800decc:	3718      	adds	r7, #24
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}

0800ded2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ded2:	b580      	push	{r7, lr}
 800ded4:	b084      	sub	sp, #16
 800ded6:	af00      	add	r7, sp, #0
 800ded8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800deda:	2300      	movs	r3, #0
 800dedc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	2201      	movs	r2, #1
 800dee2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	2200      	movs	r2, #0
 800deea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	2200      	movs	r2, #0
 800def2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	2200      	movs	r2, #0
 800def8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	2200      	movs	r2, #0
 800df00:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d014      	beq.n	800df38 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800df14:	685b      	ldr	r3, [r3, #4]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d00e      	beq.n	800df38 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800df20:	685b      	ldr	r3, [r3, #4]
 800df22:	687a      	ldr	r2, [r7, #4]
 800df24:	6852      	ldr	r2, [r2, #4]
 800df26:	b2d2      	uxtb	r2, r2
 800df28:	4611      	mov	r1, r2
 800df2a:	6878      	ldr	r0, [r7, #4]
 800df2c:	4798      	blx	r3
 800df2e:	4603      	mov	r3, r0
 800df30:	2b00      	cmp	r3, #0
 800df32:	d001      	beq.n	800df38 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800df34:	2303      	movs	r3, #3
 800df36:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800df38:	2340      	movs	r3, #64	@ 0x40
 800df3a:	2200      	movs	r2, #0
 800df3c:	2100      	movs	r1, #0
 800df3e:	6878      	ldr	r0, [r7, #4]
 800df40:	f001 fc6f 	bl	800f822 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	2201      	movs	r2, #1
 800df48:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2240      	movs	r2, #64	@ 0x40
 800df50:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800df54:	2340      	movs	r3, #64	@ 0x40
 800df56:	2200      	movs	r2, #0
 800df58:	2180      	movs	r1, #128	@ 0x80
 800df5a:	6878      	ldr	r0, [r7, #4]
 800df5c:	f001 fc61 	bl	800f822 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2201      	movs	r2, #1
 800df64:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	2240      	movs	r2, #64	@ 0x40
 800df6a:	621a      	str	r2, [r3, #32]

  return ret;
 800df6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800df6e:	4618      	mov	r0, r3
 800df70:	3710      	adds	r7, #16
 800df72:	46bd      	mov	sp, r7
 800df74:	bd80      	pop	{r7, pc}

0800df76 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800df76:	b480      	push	{r7}
 800df78:	b083      	sub	sp, #12
 800df7a:	af00      	add	r7, sp, #0
 800df7c:	6078      	str	r0, [r7, #4]
 800df7e:	460b      	mov	r3, r1
 800df80:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	78fa      	ldrb	r2, [r7, #3]
 800df86:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800df88:	2300      	movs	r3, #0
}
 800df8a:	4618      	mov	r0, r3
 800df8c:	370c      	adds	r7, #12
 800df8e:	46bd      	mov	sp, r7
 800df90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df94:	4770      	bx	lr

0800df96 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800df96:	b480      	push	{r7}
 800df98:	b083      	sub	sp, #12
 800df9a:	af00      	add	r7, sp, #0
 800df9c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dfa4:	b2db      	uxtb	r3, r3
 800dfa6:	2b04      	cmp	r3, #4
 800dfa8:	d006      	beq.n	800dfb8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dfb0:	b2da      	uxtb	r2, r3
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2204      	movs	r2, #4
 800dfbc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800dfc0:	2300      	movs	r3, #0
}
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	370c      	adds	r7, #12
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfcc:	4770      	bx	lr

0800dfce <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800dfce:	b480      	push	{r7}
 800dfd0:	b083      	sub	sp, #12
 800dfd2:	af00      	add	r7, sp, #0
 800dfd4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dfdc:	b2db      	uxtb	r3, r3
 800dfde:	2b04      	cmp	r3, #4
 800dfe0:	d106      	bne.n	800dff0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800dfe8:	b2da      	uxtb	r2, r3
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800dff0:	2300      	movs	r3, #0
}
 800dff2:	4618      	mov	r0, r3
 800dff4:	370c      	adds	r7, #12
 800dff6:	46bd      	mov	sp, r7
 800dff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffc:	4770      	bx	lr

0800dffe <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800dffe:	b580      	push	{r7, lr}
 800e000:	b082      	sub	sp, #8
 800e002:	af00      	add	r7, sp, #0
 800e004:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e00c:	b2db      	uxtb	r3, r3
 800e00e:	2b03      	cmp	r3, #3
 800e010:	d110      	bne.n	800e034 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d00b      	beq.n	800e034 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e022:	69db      	ldr	r3, [r3, #28]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d005      	beq.n	800e034 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e02e:	69db      	ldr	r3, [r3, #28]
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800e034:	2300      	movs	r3, #0
}
 800e036:	4618      	mov	r0, r3
 800e038:	3708      	adds	r7, #8
 800e03a:	46bd      	mov	sp, r7
 800e03c:	bd80      	pop	{r7, pc}

0800e03e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e03e:	b580      	push	{r7, lr}
 800e040:	b082      	sub	sp, #8
 800e042:	af00      	add	r7, sp, #0
 800e044:	6078      	str	r0, [r7, #4]
 800e046:	460b      	mov	r3, r1
 800e048:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	32ae      	adds	r2, #174	@ 0xae
 800e054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d101      	bne.n	800e060 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800e05c:	2303      	movs	r3, #3
 800e05e:	e01c      	b.n	800e09a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e066:	b2db      	uxtb	r3, r3
 800e068:	2b03      	cmp	r3, #3
 800e06a:	d115      	bne.n	800e098 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	32ae      	adds	r2, #174	@ 0xae
 800e076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e07a:	6a1b      	ldr	r3, [r3, #32]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d00b      	beq.n	800e098 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	32ae      	adds	r2, #174	@ 0xae
 800e08a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e08e:	6a1b      	ldr	r3, [r3, #32]
 800e090:	78fa      	ldrb	r2, [r7, #3]
 800e092:	4611      	mov	r1, r2
 800e094:	6878      	ldr	r0, [r7, #4]
 800e096:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e098:	2300      	movs	r3, #0
}
 800e09a:	4618      	mov	r0, r3
 800e09c:	3708      	adds	r7, #8
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	bd80      	pop	{r7, pc}

0800e0a2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e0a2:	b580      	push	{r7, lr}
 800e0a4:	b082      	sub	sp, #8
 800e0a6:	af00      	add	r7, sp, #0
 800e0a8:	6078      	str	r0, [r7, #4]
 800e0aa:	460b      	mov	r3, r1
 800e0ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	32ae      	adds	r2, #174	@ 0xae
 800e0b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d101      	bne.n	800e0c4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800e0c0:	2303      	movs	r3, #3
 800e0c2:	e01c      	b.n	800e0fe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e0ca:	b2db      	uxtb	r3, r3
 800e0cc:	2b03      	cmp	r3, #3
 800e0ce:	d115      	bne.n	800e0fc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	32ae      	adds	r2, #174	@ 0xae
 800e0da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d00b      	beq.n	800e0fc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	32ae      	adds	r2, #174	@ 0xae
 800e0ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0f4:	78fa      	ldrb	r2, [r7, #3]
 800e0f6:	4611      	mov	r1, r2
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e0fc:	2300      	movs	r3, #0
}
 800e0fe:	4618      	mov	r0, r3
 800e100:	3708      	adds	r7, #8
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}

0800e106 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e106:	b480      	push	{r7}
 800e108:	b083      	sub	sp, #12
 800e10a:	af00      	add	r7, sp, #0
 800e10c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e10e:	2300      	movs	r3, #0
}
 800e110:	4618      	mov	r0, r3
 800e112:	370c      	adds	r7, #12
 800e114:	46bd      	mov	sp, r7
 800e116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11a:	4770      	bx	lr

0800e11c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b084      	sub	sp, #16
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800e124:	2300      	movs	r3, #0
 800e126:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2201      	movs	r2, #1
 800e12c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e136:	2b00      	cmp	r3, #0
 800e138:	d00e      	beq.n	800e158 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e140:	685b      	ldr	r3, [r3, #4]
 800e142:	687a      	ldr	r2, [r7, #4]
 800e144:	6852      	ldr	r2, [r2, #4]
 800e146:	b2d2      	uxtb	r2, r2
 800e148:	4611      	mov	r1, r2
 800e14a:	6878      	ldr	r0, [r7, #4]
 800e14c:	4798      	blx	r3
 800e14e:	4603      	mov	r3, r0
 800e150:	2b00      	cmp	r3, #0
 800e152:	d001      	beq.n	800e158 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800e154:	2303      	movs	r3, #3
 800e156:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e158:	7bfb      	ldrb	r3, [r7, #15]
}
 800e15a:	4618      	mov	r0, r3
 800e15c:	3710      	adds	r7, #16
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}

0800e162 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e162:	b480      	push	{r7}
 800e164:	b083      	sub	sp, #12
 800e166:	af00      	add	r7, sp, #0
 800e168:	6078      	str	r0, [r7, #4]
 800e16a:	460b      	mov	r3, r1
 800e16c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e16e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e170:	4618      	mov	r0, r3
 800e172:	370c      	adds	r7, #12
 800e174:	46bd      	mov	sp, r7
 800e176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17a:	4770      	bx	lr

0800e17c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e17c:	b480      	push	{r7}
 800e17e:	b083      	sub	sp, #12
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
 800e184:	460b      	mov	r3, r1
 800e186:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e188:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e18a:	4618      	mov	r0, r3
 800e18c:	370c      	adds	r7, #12
 800e18e:	46bd      	mov	sp, r7
 800e190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e194:	4770      	bx	lr

0800e196 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e196:	b580      	push	{r7, lr}
 800e198:	b086      	sub	sp, #24
 800e19a:	af00      	add	r7, sp, #0
 800e19c:	6078      	str	r0, [r7, #4]
 800e19e:	460b      	mov	r3, r1
 800e1a0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	885b      	ldrh	r3, [r3, #2]
 800e1b2:	b29b      	uxth	r3, r3
 800e1b4:	68fa      	ldr	r2, [r7, #12]
 800e1b6:	7812      	ldrb	r2, [r2, #0]
 800e1b8:	4293      	cmp	r3, r2
 800e1ba:	d91f      	bls.n	800e1fc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	781b      	ldrb	r3, [r3, #0]
 800e1c0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e1c2:	e013      	b.n	800e1ec <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e1c4:	f107 030a 	add.w	r3, r7, #10
 800e1c8:	4619      	mov	r1, r3
 800e1ca:	6978      	ldr	r0, [r7, #20]
 800e1cc:	f000 f81b 	bl	800e206 <USBD_GetNextDesc>
 800e1d0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e1d2:	697b      	ldr	r3, [r7, #20]
 800e1d4:	785b      	ldrb	r3, [r3, #1]
 800e1d6:	2b05      	cmp	r3, #5
 800e1d8:	d108      	bne.n	800e1ec <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e1de:	693b      	ldr	r3, [r7, #16]
 800e1e0:	789b      	ldrb	r3, [r3, #2]
 800e1e2:	78fa      	ldrb	r2, [r7, #3]
 800e1e4:	429a      	cmp	r2, r3
 800e1e6:	d008      	beq.n	800e1fa <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	885b      	ldrh	r3, [r3, #2]
 800e1f0:	b29a      	uxth	r2, r3
 800e1f2:	897b      	ldrh	r3, [r7, #10]
 800e1f4:	429a      	cmp	r2, r3
 800e1f6:	d8e5      	bhi.n	800e1c4 <USBD_GetEpDesc+0x2e>
 800e1f8:	e000      	b.n	800e1fc <USBD_GetEpDesc+0x66>
          break;
 800e1fa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e1fc:	693b      	ldr	r3, [r7, #16]
}
 800e1fe:	4618      	mov	r0, r3
 800e200:	3718      	adds	r7, #24
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}

0800e206 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e206:	b480      	push	{r7}
 800e208:	b085      	sub	sp, #20
 800e20a:	af00      	add	r7, sp, #0
 800e20c:	6078      	str	r0, [r7, #4]
 800e20e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	881b      	ldrh	r3, [r3, #0]
 800e218:	68fa      	ldr	r2, [r7, #12]
 800e21a:	7812      	ldrb	r2, [r2, #0]
 800e21c:	4413      	add	r3, r2
 800e21e:	b29a      	uxth	r2, r3
 800e220:	683b      	ldr	r3, [r7, #0]
 800e222:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	781b      	ldrb	r3, [r3, #0]
 800e228:	461a      	mov	r2, r3
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	4413      	add	r3, r2
 800e22e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e230:	68fb      	ldr	r3, [r7, #12]
}
 800e232:	4618      	mov	r0, r3
 800e234:	3714      	adds	r7, #20
 800e236:	46bd      	mov	sp, r7
 800e238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23c:	4770      	bx	lr

0800e23e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e23e:	b480      	push	{r7}
 800e240:	b087      	sub	sp, #28
 800e242:	af00      	add	r7, sp, #0
 800e244:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e24a:	697b      	ldr	r3, [r7, #20]
 800e24c:	781b      	ldrb	r3, [r3, #0]
 800e24e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e250:	697b      	ldr	r3, [r7, #20]
 800e252:	3301      	adds	r3, #1
 800e254:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e256:	697b      	ldr	r3, [r7, #20]
 800e258:	781b      	ldrb	r3, [r3, #0]
 800e25a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e25c:	8a3b      	ldrh	r3, [r7, #16]
 800e25e:	021b      	lsls	r3, r3, #8
 800e260:	b21a      	sxth	r2, r3
 800e262:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e266:	4313      	orrs	r3, r2
 800e268:	b21b      	sxth	r3, r3
 800e26a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e26c:	89fb      	ldrh	r3, [r7, #14]
}
 800e26e:	4618      	mov	r0, r3
 800e270:	371c      	adds	r7, #28
 800e272:	46bd      	mov	sp, r7
 800e274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e278:	4770      	bx	lr
	...

0800e27c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b084      	sub	sp, #16
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
 800e284:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e286:	2300      	movs	r3, #0
 800e288:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	781b      	ldrb	r3, [r3, #0]
 800e28e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e292:	2b40      	cmp	r3, #64	@ 0x40
 800e294:	d005      	beq.n	800e2a2 <USBD_StdDevReq+0x26>
 800e296:	2b40      	cmp	r3, #64	@ 0x40
 800e298:	d857      	bhi.n	800e34a <USBD_StdDevReq+0xce>
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d00f      	beq.n	800e2be <USBD_StdDevReq+0x42>
 800e29e:	2b20      	cmp	r3, #32
 800e2a0:	d153      	bne.n	800e34a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	32ae      	adds	r2, #174	@ 0xae
 800e2ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2b0:	689b      	ldr	r3, [r3, #8]
 800e2b2:	6839      	ldr	r1, [r7, #0]
 800e2b4:	6878      	ldr	r0, [r7, #4]
 800e2b6:	4798      	blx	r3
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	73fb      	strb	r3, [r7, #15]
      break;
 800e2bc:	e04a      	b.n	800e354 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e2be:	683b      	ldr	r3, [r7, #0]
 800e2c0:	785b      	ldrb	r3, [r3, #1]
 800e2c2:	2b09      	cmp	r3, #9
 800e2c4:	d83b      	bhi.n	800e33e <USBD_StdDevReq+0xc2>
 800e2c6:	a201      	add	r2, pc, #4	@ (adr r2, 800e2cc <USBD_StdDevReq+0x50>)
 800e2c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2cc:	0800e321 	.word	0x0800e321
 800e2d0:	0800e335 	.word	0x0800e335
 800e2d4:	0800e33f 	.word	0x0800e33f
 800e2d8:	0800e32b 	.word	0x0800e32b
 800e2dc:	0800e33f 	.word	0x0800e33f
 800e2e0:	0800e2ff 	.word	0x0800e2ff
 800e2e4:	0800e2f5 	.word	0x0800e2f5
 800e2e8:	0800e33f 	.word	0x0800e33f
 800e2ec:	0800e317 	.word	0x0800e317
 800e2f0:	0800e309 	.word	0x0800e309
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e2f4:	6839      	ldr	r1, [r7, #0]
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	f000 fa3c 	bl	800e774 <USBD_GetDescriptor>
          break;
 800e2fc:	e024      	b.n	800e348 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e2fe:	6839      	ldr	r1, [r7, #0]
 800e300:	6878      	ldr	r0, [r7, #4]
 800e302:	f000 fbcb 	bl	800ea9c <USBD_SetAddress>
          break;
 800e306:	e01f      	b.n	800e348 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e308:	6839      	ldr	r1, [r7, #0]
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f000 fc0a 	bl	800eb24 <USBD_SetConfig>
 800e310:	4603      	mov	r3, r0
 800e312:	73fb      	strb	r3, [r7, #15]
          break;
 800e314:	e018      	b.n	800e348 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e316:	6839      	ldr	r1, [r7, #0]
 800e318:	6878      	ldr	r0, [r7, #4]
 800e31a:	f000 fcad 	bl	800ec78 <USBD_GetConfig>
          break;
 800e31e:	e013      	b.n	800e348 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e320:	6839      	ldr	r1, [r7, #0]
 800e322:	6878      	ldr	r0, [r7, #4]
 800e324:	f000 fcde 	bl	800ece4 <USBD_GetStatus>
          break;
 800e328:	e00e      	b.n	800e348 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e32a:	6839      	ldr	r1, [r7, #0]
 800e32c:	6878      	ldr	r0, [r7, #4]
 800e32e:	f000 fd0d 	bl	800ed4c <USBD_SetFeature>
          break;
 800e332:	e009      	b.n	800e348 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e334:	6839      	ldr	r1, [r7, #0]
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f000 fd31 	bl	800ed9e <USBD_ClrFeature>
          break;
 800e33c:	e004      	b.n	800e348 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e33e:	6839      	ldr	r1, [r7, #0]
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f000 fd88 	bl	800ee56 <USBD_CtlError>
          break;
 800e346:	bf00      	nop
      }
      break;
 800e348:	e004      	b.n	800e354 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e34a:	6839      	ldr	r1, [r7, #0]
 800e34c:	6878      	ldr	r0, [r7, #4]
 800e34e:	f000 fd82 	bl	800ee56 <USBD_CtlError>
      break;
 800e352:	bf00      	nop
  }

  return ret;
 800e354:	7bfb      	ldrb	r3, [r7, #15]
}
 800e356:	4618      	mov	r0, r3
 800e358:	3710      	adds	r7, #16
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bd80      	pop	{r7, pc}
 800e35e:	bf00      	nop

0800e360 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b084      	sub	sp, #16
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
 800e368:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e36a:	2300      	movs	r3, #0
 800e36c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	781b      	ldrb	r3, [r3, #0]
 800e372:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e376:	2b40      	cmp	r3, #64	@ 0x40
 800e378:	d005      	beq.n	800e386 <USBD_StdItfReq+0x26>
 800e37a:	2b40      	cmp	r3, #64	@ 0x40
 800e37c:	d852      	bhi.n	800e424 <USBD_StdItfReq+0xc4>
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d001      	beq.n	800e386 <USBD_StdItfReq+0x26>
 800e382:	2b20      	cmp	r3, #32
 800e384:	d14e      	bne.n	800e424 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e38c:	b2db      	uxtb	r3, r3
 800e38e:	3b01      	subs	r3, #1
 800e390:	2b02      	cmp	r3, #2
 800e392:	d840      	bhi.n	800e416 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	889b      	ldrh	r3, [r3, #4]
 800e398:	b2db      	uxtb	r3, r3
 800e39a:	2b01      	cmp	r3, #1
 800e39c:	d836      	bhi.n	800e40c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	889b      	ldrh	r3, [r3, #4]
 800e3a2:	b2db      	uxtb	r3, r3
 800e3a4:	4619      	mov	r1, r3
 800e3a6:	6878      	ldr	r0, [r7, #4]
 800e3a8:	f7ff fedb 	bl	800e162 <USBD_CoreFindIF>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e3b0:	7bbb      	ldrb	r3, [r7, #14]
 800e3b2:	2bff      	cmp	r3, #255	@ 0xff
 800e3b4:	d01d      	beq.n	800e3f2 <USBD_StdItfReq+0x92>
 800e3b6:	7bbb      	ldrb	r3, [r7, #14]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d11a      	bne.n	800e3f2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e3bc:	7bba      	ldrb	r2, [r7, #14]
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	32ae      	adds	r2, #174	@ 0xae
 800e3c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3c6:	689b      	ldr	r3, [r3, #8]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d00f      	beq.n	800e3ec <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e3cc:	7bba      	ldrb	r2, [r7, #14]
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e3d4:	7bba      	ldrb	r2, [r7, #14]
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	32ae      	adds	r2, #174	@ 0xae
 800e3da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3de:	689b      	ldr	r3, [r3, #8]
 800e3e0:	6839      	ldr	r1, [r7, #0]
 800e3e2:	6878      	ldr	r0, [r7, #4]
 800e3e4:	4798      	blx	r3
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e3ea:	e004      	b.n	800e3f6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e3ec:	2303      	movs	r3, #3
 800e3ee:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e3f0:	e001      	b.n	800e3f6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e3f2:	2303      	movs	r3, #3
 800e3f4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	88db      	ldrh	r3, [r3, #6]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d110      	bne.n	800e420 <USBD_StdItfReq+0xc0>
 800e3fe:	7bfb      	ldrb	r3, [r7, #15]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d10d      	bne.n	800e420 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	f000 fdfd 	bl	800f004 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e40a:	e009      	b.n	800e420 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e40c:	6839      	ldr	r1, [r7, #0]
 800e40e:	6878      	ldr	r0, [r7, #4]
 800e410:	f000 fd21 	bl	800ee56 <USBD_CtlError>
          break;
 800e414:	e004      	b.n	800e420 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e416:	6839      	ldr	r1, [r7, #0]
 800e418:	6878      	ldr	r0, [r7, #4]
 800e41a:	f000 fd1c 	bl	800ee56 <USBD_CtlError>
          break;
 800e41e:	e000      	b.n	800e422 <USBD_StdItfReq+0xc2>
          break;
 800e420:	bf00      	nop
      }
      break;
 800e422:	e004      	b.n	800e42e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e424:	6839      	ldr	r1, [r7, #0]
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	f000 fd15 	bl	800ee56 <USBD_CtlError>
      break;
 800e42c:	bf00      	nop
  }

  return ret;
 800e42e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e430:	4618      	mov	r0, r3
 800e432:	3710      	adds	r7, #16
 800e434:	46bd      	mov	sp, r7
 800e436:	bd80      	pop	{r7, pc}

0800e438 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b084      	sub	sp, #16
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
 800e440:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e442:	2300      	movs	r3, #0
 800e444:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e446:	683b      	ldr	r3, [r7, #0]
 800e448:	889b      	ldrh	r3, [r3, #4]
 800e44a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	781b      	ldrb	r3, [r3, #0]
 800e450:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e454:	2b40      	cmp	r3, #64	@ 0x40
 800e456:	d007      	beq.n	800e468 <USBD_StdEPReq+0x30>
 800e458:	2b40      	cmp	r3, #64	@ 0x40
 800e45a:	f200 817f 	bhi.w	800e75c <USBD_StdEPReq+0x324>
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d02a      	beq.n	800e4b8 <USBD_StdEPReq+0x80>
 800e462:	2b20      	cmp	r3, #32
 800e464:	f040 817a 	bne.w	800e75c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e468:	7bbb      	ldrb	r3, [r7, #14]
 800e46a:	4619      	mov	r1, r3
 800e46c:	6878      	ldr	r0, [r7, #4]
 800e46e:	f7ff fe85 	bl	800e17c <USBD_CoreFindEP>
 800e472:	4603      	mov	r3, r0
 800e474:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e476:	7b7b      	ldrb	r3, [r7, #13]
 800e478:	2bff      	cmp	r3, #255	@ 0xff
 800e47a:	f000 8174 	beq.w	800e766 <USBD_StdEPReq+0x32e>
 800e47e:	7b7b      	ldrb	r3, [r7, #13]
 800e480:	2b00      	cmp	r3, #0
 800e482:	f040 8170 	bne.w	800e766 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e486:	7b7a      	ldrb	r2, [r7, #13]
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e48e:	7b7a      	ldrb	r2, [r7, #13]
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	32ae      	adds	r2, #174	@ 0xae
 800e494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e498:	689b      	ldr	r3, [r3, #8]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	f000 8163 	beq.w	800e766 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e4a0:	7b7a      	ldrb	r2, [r7, #13]
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	32ae      	adds	r2, #174	@ 0xae
 800e4a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4aa:	689b      	ldr	r3, [r3, #8]
 800e4ac:	6839      	ldr	r1, [r7, #0]
 800e4ae:	6878      	ldr	r0, [r7, #4]
 800e4b0:	4798      	blx	r3
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e4b6:	e156      	b.n	800e766 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	785b      	ldrb	r3, [r3, #1]
 800e4bc:	2b03      	cmp	r3, #3
 800e4be:	d008      	beq.n	800e4d2 <USBD_StdEPReq+0x9a>
 800e4c0:	2b03      	cmp	r3, #3
 800e4c2:	f300 8145 	bgt.w	800e750 <USBD_StdEPReq+0x318>
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	f000 809b 	beq.w	800e602 <USBD_StdEPReq+0x1ca>
 800e4cc:	2b01      	cmp	r3, #1
 800e4ce:	d03c      	beq.n	800e54a <USBD_StdEPReq+0x112>
 800e4d0:	e13e      	b.n	800e750 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e4d8:	b2db      	uxtb	r3, r3
 800e4da:	2b02      	cmp	r3, #2
 800e4dc:	d002      	beq.n	800e4e4 <USBD_StdEPReq+0xac>
 800e4de:	2b03      	cmp	r3, #3
 800e4e0:	d016      	beq.n	800e510 <USBD_StdEPReq+0xd8>
 800e4e2:	e02c      	b.n	800e53e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e4e4:	7bbb      	ldrb	r3, [r7, #14]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d00d      	beq.n	800e506 <USBD_StdEPReq+0xce>
 800e4ea:	7bbb      	ldrb	r3, [r7, #14]
 800e4ec:	2b80      	cmp	r3, #128	@ 0x80
 800e4ee:	d00a      	beq.n	800e506 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e4f0:	7bbb      	ldrb	r3, [r7, #14]
 800e4f2:	4619      	mov	r1, r3
 800e4f4:	6878      	ldr	r0, [r7, #4]
 800e4f6:	f001 f9d9 	bl	800f8ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e4fa:	2180      	movs	r1, #128	@ 0x80
 800e4fc:	6878      	ldr	r0, [r7, #4]
 800e4fe:	f001 f9d5 	bl	800f8ac <USBD_LL_StallEP>
 800e502:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e504:	e020      	b.n	800e548 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e506:	6839      	ldr	r1, [r7, #0]
 800e508:	6878      	ldr	r0, [r7, #4]
 800e50a:	f000 fca4 	bl	800ee56 <USBD_CtlError>
              break;
 800e50e:	e01b      	b.n	800e548 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	885b      	ldrh	r3, [r3, #2]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d10e      	bne.n	800e536 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e518:	7bbb      	ldrb	r3, [r7, #14]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d00b      	beq.n	800e536 <USBD_StdEPReq+0xfe>
 800e51e:	7bbb      	ldrb	r3, [r7, #14]
 800e520:	2b80      	cmp	r3, #128	@ 0x80
 800e522:	d008      	beq.n	800e536 <USBD_StdEPReq+0xfe>
 800e524:	683b      	ldr	r3, [r7, #0]
 800e526:	88db      	ldrh	r3, [r3, #6]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d104      	bne.n	800e536 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e52c:	7bbb      	ldrb	r3, [r7, #14]
 800e52e:	4619      	mov	r1, r3
 800e530:	6878      	ldr	r0, [r7, #4]
 800e532:	f001 f9bb 	bl	800f8ac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e536:	6878      	ldr	r0, [r7, #4]
 800e538:	f000 fd64 	bl	800f004 <USBD_CtlSendStatus>

              break;
 800e53c:	e004      	b.n	800e548 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e53e:	6839      	ldr	r1, [r7, #0]
 800e540:	6878      	ldr	r0, [r7, #4]
 800e542:	f000 fc88 	bl	800ee56 <USBD_CtlError>
              break;
 800e546:	bf00      	nop
          }
          break;
 800e548:	e107      	b.n	800e75a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e550:	b2db      	uxtb	r3, r3
 800e552:	2b02      	cmp	r3, #2
 800e554:	d002      	beq.n	800e55c <USBD_StdEPReq+0x124>
 800e556:	2b03      	cmp	r3, #3
 800e558:	d016      	beq.n	800e588 <USBD_StdEPReq+0x150>
 800e55a:	e04b      	b.n	800e5f4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e55c:	7bbb      	ldrb	r3, [r7, #14]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d00d      	beq.n	800e57e <USBD_StdEPReq+0x146>
 800e562:	7bbb      	ldrb	r3, [r7, #14]
 800e564:	2b80      	cmp	r3, #128	@ 0x80
 800e566:	d00a      	beq.n	800e57e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e568:	7bbb      	ldrb	r3, [r7, #14]
 800e56a:	4619      	mov	r1, r3
 800e56c:	6878      	ldr	r0, [r7, #4]
 800e56e:	f001 f99d 	bl	800f8ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e572:	2180      	movs	r1, #128	@ 0x80
 800e574:	6878      	ldr	r0, [r7, #4]
 800e576:	f001 f999 	bl	800f8ac <USBD_LL_StallEP>
 800e57a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e57c:	e040      	b.n	800e600 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e57e:	6839      	ldr	r1, [r7, #0]
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f000 fc68 	bl	800ee56 <USBD_CtlError>
              break;
 800e586:	e03b      	b.n	800e600 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e588:	683b      	ldr	r3, [r7, #0]
 800e58a:	885b      	ldrh	r3, [r3, #2]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d136      	bne.n	800e5fe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e590:	7bbb      	ldrb	r3, [r7, #14]
 800e592:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e596:	2b00      	cmp	r3, #0
 800e598:	d004      	beq.n	800e5a4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e59a:	7bbb      	ldrb	r3, [r7, #14]
 800e59c:	4619      	mov	r1, r3
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f001 f9a3 	bl	800f8ea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e5a4:	6878      	ldr	r0, [r7, #4]
 800e5a6:	f000 fd2d 	bl	800f004 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e5aa:	7bbb      	ldrb	r3, [r7, #14]
 800e5ac:	4619      	mov	r1, r3
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	f7ff fde4 	bl	800e17c <USBD_CoreFindEP>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e5b8:	7b7b      	ldrb	r3, [r7, #13]
 800e5ba:	2bff      	cmp	r3, #255	@ 0xff
 800e5bc:	d01f      	beq.n	800e5fe <USBD_StdEPReq+0x1c6>
 800e5be:	7b7b      	ldrb	r3, [r7, #13]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d11c      	bne.n	800e5fe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e5c4:	7b7a      	ldrb	r2, [r7, #13]
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e5cc:	7b7a      	ldrb	r2, [r7, #13]
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	32ae      	adds	r2, #174	@ 0xae
 800e5d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5d6:	689b      	ldr	r3, [r3, #8]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d010      	beq.n	800e5fe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e5dc:	7b7a      	ldrb	r2, [r7, #13]
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	32ae      	adds	r2, #174	@ 0xae
 800e5e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5e6:	689b      	ldr	r3, [r3, #8]
 800e5e8:	6839      	ldr	r1, [r7, #0]
 800e5ea:	6878      	ldr	r0, [r7, #4]
 800e5ec:	4798      	blx	r3
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e5f2:	e004      	b.n	800e5fe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e5f4:	6839      	ldr	r1, [r7, #0]
 800e5f6:	6878      	ldr	r0, [r7, #4]
 800e5f8:	f000 fc2d 	bl	800ee56 <USBD_CtlError>
              break;
 800e5fc:	e000      	b.n	800e600 <USBD_StdEPReq+0x1c8>
              break;
 800e5fe:	bf00      	nop
          }
          break;
 800e600:	e0ab      	b.n	800e75a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e608:	b2db      	uxtb	r3, r3
 800e60a:	2b02      	cmp	r3, #2
 800e60c:	d002      	beq.n	800e614 <USBD_StdEPReq+0x1dc>
 800e60e:	2b03      	cmp	r3, #3
 800e610:	d032      	beq.n	800e678 <USBD_StdEPReq+0x240>
 800e612:	e097      	b.n	800e744 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e614:	7bbb      	ldrb	r3, [r7, #14]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d007      	beq.n	800e62a <USBD_StdEPReq+0x1f2>
 800e61a:	7bbb      	ldrb	r3, [r7, #14]
 800e61c:	2b80      	cmp	r3, #128	@ 0x80
 800e61e:	d004      	beq.n	800e62a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e620:	6839      	ldr	r1, [r7, #0]
 800e622:	6878      	ldr	r0, [r7, #4]
 800e624:	f000 fc17 	bl	800ee56 <USBD_CtlError>
                break;
 800e628:	e091      	b.n	800e74e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e62a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	da0b      	bge.n	800e64a <USBD_StdEPReq+0x212>
 800e632:	7bbb      	ldrb	r3, [r7, #14]
 800e634:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e638:	4613      	mov	r3, r2
 800e63a:	009b      	lsls	r3, r3, #2
 800e63c:	4413      	add	r3, r2
 800e63e:	009b      	lsls	r3, r3, #2
 800e640:	3310      	adds	r3, #16
 800e642:	687a      	ldr	r2, [r7, #4]
 800e644:	4413      	add	r3, r2
 800e646:	3304      	adds	r3, #4
 800e648:	e00b      	b.n	800e662 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e64a:	7bbb      	ldrb	r3, [r7, #14]
 800e64c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e650:	4613      	mov	r3, r2
 800e652:	009b      	lsls	r3, r3, #2
 800e654:	4413      	add	r3, r2
 800e656:	009b      	lsls	r3, r3, #2
 800e658:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e65c:	687a      	ldr	r2, [r7, #4]
 800e65e:	4413      	add	r3, r2
 800e660:	3304      	adds	r3, #4
 800e662:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e664:	68bb      	ldr	r3, [r7, #8]
 800e666:	2200      	movs	r2, #0
 800e668:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e66a:	68bb      	ldr	r3, [r7, #8]
 800e66c:	2202      	movs	r2, #2
 800e66e:	4619      	mov	r1, r3
 800e670:	6878      	ldr	r0, [r7, #4]
 800e672:	f000 fc6d 	bl	800ef50 <USBD_CtlSendData>
              break;
 800e676:	e06a      	b.n	800e74e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e678:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	da11      	bge.n	800e6a4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e680:	7bbb      	ldrb	r3, [r7, #14]
 800e682:	f003 020f 	and.w	r2, r3, #15
 800e686:	6879      	ldr	r1, [r7, #4]
 800e688:	4613      	mov	r3, r2
 800e68a:	009b      	lsls	r3, r3, #2
 800e68c:	4413      	add	r3, r2
 800e68e:	009b      	lsls	r3, r3, #2
 800e690:	440b      	add	r3, r1
 800e692:	3324      	adds	r3, #36	@ 0x24
 800e694:	881b      	ldrh	r3, [r3, #0]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d117      	bne.n	800e6ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e69a:	6839      	ldr	r1, [r7, #0]
 800e69c:	6878      	ldr	r0, [r7, #4]
 800e69e:	f000 fbda 	bl	800ee56 <USBD_CtlError>
                  break;
 800e6a2:	e054      	b.n	800e74e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e6a4:	7bbb      	ldrb	r3, [r7, #14]
 800e6a6:	f003 020f 	and.w	r2, r3, #15
 800e6aa:	6879      	ldr	r1, [r7, #4]
 800e6ac:	4613      	mov	r3, r2
 800e6ae:	009b      	lsls	r3, r3, #2
 800e6b0:	4413      	add	r3, r2
 800e6b2:	009b      	lsls	r3, r3, #2
 800e6b4:	440b      	add	r3, r1
 800e6b6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e6ba:	881b      	ldrh	r3, [r3, #0]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d104      	bne.n	800e6ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e6c0:	6839      	ldr	r1, [r7, #0]
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	f000 fbc7 	bl	800ee56 <USBD_CtlError>
                  break;
 800e6c8:	e041      	b.n	800e74e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e6ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	da0b      	bge.n	800e6ea <USBD_StdEPReq+0x2b2>
 800e6d2:	7bbb      	ldrb	r3, [r7, #14]
 800e6d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e6d8:	4613      	mov	r3, r2
 800e6da:	009b      	lsls	r3, r3, #2
 800e6dc:	4413      	add	r3, r2
 800e6de:	009b      	lsls	r3, r3, #2
 800e6e0:	3310      	adds	r3, #16
 800e6e2:	687a      	ldr	r2, [r7, #4]
 800e6e4:	4413      	add	r3, r2
 800e6e6:	3304      	adds	r3, #4
 800e6e8:	e00b      	b.n	800e702 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e6ea:	7bbb      	ldrb	r3, [r7, #14]
 800e6ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e6f0:	4613      	mov	r3, r2
 800e6f2:	009b      	lsls	r3, r3, #2
 800e6f4:	4413      	add	r3, r2
 800e6f6:	009b      	lsls	r3, r3, #2
 800e6f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e6fc:	687a      	ldr	r2, [r7, #4]
 800e6fe:	4413      	add	r3, r2
 800e700:	3304      	adds	r3, #4
 800e702:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e704:	7bbb      	ldrb	r3, [r7, #14]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d002      	beq.n	800e710 <USBD_StdEPReq+0x2d8>
 800e70a:	7bbb      	ldrb	r3, [r7, #14]
 800e70c:	2b80      	cmp	r3, #128	@ 0x80
 800e70e:	d103      	bne.n	800e718 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e710:	68bb      	ldr	r3, [r7, #8]
 800e712:	2200      	movs	r2, #0
 800e714:	601a      	str	r2, [r3, #0]
 800e716:	e00e      	b.n	800e736 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e718:	7bbb      	ldrb	r3, [r7, #14]
 800e71a:	4619      	mov	r1, r3
 800e71c:	6878      	ldr	r0, [r7, #4]
 800e71e:	f001 f903 	bl	800f928 <USBD_LL_IsStallEP>
 800e722:	4603      	mov	r3, r0
 800e724:	2b00      	cmp	r3, #0
 800e726:	d003      	beq.n	800e730 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e728:	68bb      	ldr	r3, [r7, #8]
 800e72a:	2201      	movs	r2, #1
 800e72c:	601a      	str	r2, [r3, #0]
 800e72e:	e002      	b.n	800e736 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e730:	68bb      	ldr	r3, [r7, #8]
 800e732:	2200      	movs	r2, #0
 800e734:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e736:	68bb      	ldr	r3, [r7, #8]
 800e738:	2202      	movs	r2, #2
 800e73a:	4619      	mov	r1, r3
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f000 fc07 	bl	800ef50 <USBD_CtlSendData>
              break;
 800e742:	e004      	b.n	800e74e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e744:	6839      	ldr	r1, [r7, #0]
 800e746:	6878      	ldr	r0, [r7, #4]
 800e748:	f000 fb85 	bl	800ee56 <USBD_CtlError>
              break;
 800e74c:	bf00      	nop
          }
          break;
 800e74e:	e004      	b.n	800e75a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e750:	6839      	ldr	r1, [r7, #0]
 800e752:	6878      	ldr	r0, [r7, #4]
 800e754:	f000 fb7f 	bl	800ee56 <USBD_CtlError>
          break;
 800e758:	bf00      	nop
      }
      break;
 800e75a:	e005      	b.n	800e768 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e75c:	6839      	ldr	r1, [r7, #0]
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	f000 fb79 	bl	800ee56 <USBD_CtlError>
      break;
 800e764:	e000      	b.n	800e768 <USBD_StdEPReq+0x330>
      break;
 800e766:	bf00      	nop
  }

  return ret;
 800e768:	7bfb      	ldrb	r3, [r7, #15]
}
 800e76a:	4618      	mov	r0, r3
 800e76c:	3710      	adds	r7, #16
 800e76e:	46bd      	mov	sp, r7
 800e770:	bd80      	pop	{r7, pc}
	...

0800e774 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b084      	sub	sp, #16
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
 800e77c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e77e:	2300      	movs	r3, #0
 800e780:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e782:	2300      	movs	r3, #0
 800e784:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e786:	2300      	movs	r3, #0
 800e788:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e78a:	683b      	ldr	r3, [r7, #0]
 800e78c:	885b      	ldrh	r3, [r3, #2]
 800e78e:	0a1b      	lsrs	r3, r3, #8
 800e790:	b29b      	uxth	r3, r3
 800e792:	3b01      	subs	r3, #1
 800e794:	2b0e      	cmp	r3, #14
 800e796:	f200 8152 	bhi.w	800ea3e <USBD_GetDescriptor+0x2ca>
 800e79a:	a201      	add	r2, pc, #4	@ (adr r2, 800e7a0 <USBD_GetDescriptor+0x2c>)
 800e79c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7a0:	0800e811 	.word	0x0800e811
 800e7a4:	0800e829 	.word	0x0800e829
 800e7a8:	0800e869 	.word	0x0800e869
 800e7ac:	0800ea3f 	.word	0x0800ea3f
 800e7b0:	0800ea3f 	.word	0x0800ea3f
 800e7b4:	0800e9df 	.word	0x0800e9df
 800e7b8:	0800ea0b 	.word	0x0800ea0b
 800e7bc:	0800ea3f 	.word	0x0800ea3f
 800e7c0:	0800ea3f 	.word	0x0800ea3f
 800e7c4:	0800ea3f 	.word	0x0800ea3f
 800e7c8:	0800ea3f 	.word	0x0800ea3f
 800e7cc:	0800ea3f 	.word	0x0800ea3f
 800e7d0:	0800ea3f 	.word	0x0800ea3f
 800e7d4:	0800ea3f 	.word	0x0800ea3f
 800e7d8:	0800e7dd 	.word	0x0800e7dd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e7e2:	69db      	ldr	r3, [r3, #28]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d00b      	beq.n	800e800 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e7ee:	69db      	ldr	r3, [r3, #28]
 800e7f0:	687a      	ldr	r2, [r7, #4]
 800e7f2:	7c12      	ldrb	r2, [r2, #16]
 800e7f4:	f107 0108 	add.w	r1, r7, #8
 800e7f8:	4610      	mov	r0, r2
 800e7fa:	4798      	blx	r3
 800e7fc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e7fe:	e126      	b.n	800ea4e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e800:	6839      	ldr	r1, [r7, #0]
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f000 fb27 	bl	800ee56 <USBD_CtlError>
        err++;
 800e808:	7afb      	ldrb	r3, [r7, #11]
 800e80a:	3301      	adds	r3, #1
 800e80c:	72fb      	strb	r3, [r7, #11]
      break;
 800e80e:	e11e      	b.n	800ea4e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	687a      	ldr	r2, [r7, #4]
 800e81a:	7c12      	ldrb	r2, [r2, #16]
 800e81c:	f107 0108 	add.w	r1, r7, #8
 800e820:	4610      	mov	r0, r2
 800e822:	4798      	blx	r3
 800e824:	60f8      	str	r0, [r7, #12]
      break;
 800e826:	e112      	b.n	800ea4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	7c1b      	ldrb	r3, [r3, #16]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d10d      	bne.n	800e84c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e838:	f107 0208 	add.w	r2, r7, #8
 800e83c:	4610      	mov	r0, r2
 800e83e:	4798      	blx	r3
 800e840:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	3301      	adds	r3, #1
 800e846:	2202      	movs	r2, #2
 800e848:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e84a:	e100      	b.n	800ea4e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e854:	f107 0208 	add.w	r2, r7, #8
 800e858:	4610      	mov	r0, r2
 800e85a:	4798      	blx	r3
 800e85c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	3301      	adds	r3, #1
 800e862:	2202      	movs	r2, #2
 800e864:	701a      	strb	r2, [r3, #0]
      break;
 800e866:	e0f2      	b.n	800ea4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e868:	683b      	ldr	r3, [r7, #0]
 800e86a:	885b      	ldrh	r3, [r3, #2]
 800e86c:	b2db      	uxtb	r3, r3
 800e86e:	2b05      	cmp	r3, #5
 800e870:	f200 80ac 	bhi.w	800e9cc <USBD_GetDescriptor+0x258>
 800e874:	a201      	add	r2, pc, #4	@ (adr r2, 800e87c <USBD_GetDescriptor+0x108>)
 800e876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e87a:	bf00      	nop
 800e87c:	0800e895 	.word	0x0800e895
 800e880:	0800e8c9 	.word	0x0800e8c9
 800e884:	0800e8fd 	.word	0x0800e8fd
 800e888:	0800e931 	.word	0x0800e931
 800e88c:	0800e965 	.word	0x0800e965
 800e890:	0800e999 	.word	0x0800e999
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e89a:	685b      	ldr	r3, [r3, #4]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d00b      	beq.n	800e8b8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e8a6:	685b      	ldr	r3, [r3, #4]
 800e8a8:	687a      	ldr	r2, [r7, #4]
 800e8aa:	7c12      	ldrb	r2, [r2, #16]
 800e8ac:	f107 0108 	add.w	r1, r7, #8
 800e8b0:	4610      	mov	r0, r2
 800e8b2:	4798      	blx	r3
 800e8b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e8b6:	e091      	b.n	800e9dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e8b8:	6839      	ldr	r1, [r7, #0]
 800e8ba:	6878      	ldr	r0, [r7, #4]
 800e8bc:	f000 facb 	bl	800ee56 <USBD_CtlError>
            err++;
 800e8c0:	7afb      	ldrb	r3, [r7, #11]
 800e8c2:	3301      	adds	r3, #1
 800e8c4:	72fb      	strb	r3, [r7, #11]
          break;
 800e8c6:	e089      	b.n	800e9dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e8ce:	689b      	ldr	r3, [r3, #8]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d00b      	beq.n	800e8ec <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e8da:	689b      	ldr	r3, [r3, #8]
 800e8dc:	687a      	ldr	r2, [r7, #4]
 800e8de:	7c12      	ldrb	r2, [r2, #16]
 800e8e0:	f107 0108 	add.w	r1, r7, #8
 800e8e4:	4610      	mov	r0, r2
 800e8e6:	4798      	blx	r3
 800e8e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e8ea:	e077      	b.n	800e9dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e8ec:	6839      	ldr	r1, [r7, #0]
 800e8ee:	6878      	ldr	r0, [r7, #4]
 800e8f0:	f000 fab1 	bl	800ee56 <USBD_CtlError>
            err++;
 800e8f4:	7afb      	ldrb	r3, [r7, #11]
 800e8f6:	3301      	adds	r3, #1
 800e8f8:	72fb      	strb	r3, [r7, #11]
          break;
 800e8fa:	e06f      	b.n	800e9dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e902:	68db      	ldr	r3, [r3, #12]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d00b      	beq.n	800e920 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e90e:	68db      	ldr	r3, [r3, #12]
 800e910:	687a      	ldr	r2, [r7, #4]
 800e912:	7c12      	ldrb	r2, [r2, #16]
 800e914:	f107 0108 	add.w	r1, r7, #8
 800e918:	4610      	mov	r0, r2
 800e91a:	4798      	blx	r3
 800e91c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e91e:	e05d      	b.n	800e9dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e920:	6839      	ldr	r1, [r7, #0]
 800e922:	6878      	ldr	r0, [r7, #4]
 800e924:	f000 fa97 	bl	800ee56 <USBD_CtlError>
            err++;
 800e928:	7afb      	ldrb	r3, [r7, #11]
 800e92a:	3301      	adds	r3, #1
 800e92c:	72fb      	strb	r3, [r7, #11]
          break;
 800e92e:	e055      	b.n	800e9dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e936:	691b      	ldr	r3, [r3, #16]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d00b      	beq.n	800e954 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e942:	691b      	ldr	r3, [r3, #16]
 800e944:	687a      	ldr	r2, [r7, #4]
 800e946:	7c12      	ldrb	r2, [r2, #16]
 800e948:	f107 0108 	add.w	r1, r7, #8
 800e94c:	4610      	mov	r0, r2
 800e94e:	4798      	blx	r3
 800e950:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e952:	e043      	b.n	800e9dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e954:	6839      	ldr	r1, [r7, #0]
 800e956:	6878      	ldr	r0, [r7, #4]
 800e958:	f000 fa7d 	bl	800ee56 <USBD_CtlError>
            err++;
 800e95c:	7afb      	ldrb	r3, [r7, #11]
 800e95e:	3301      	adds	r3, #1
 800e960:	72fb      	strb	r3, [r7, #11]
          break;
 800e962:	e03b      	b.n	800e9dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e96a:	695b      	ldr	r3, [r3, #20]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d00b      	beq.n	800e988 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e976:	695b      	ldr	r3, [r3, #20]
 800e978:	687a      	ldr	r2, [r7, #4]
 800e97a:	7c12      	ldrb	r2, [r2, #16]
 800e97c:	f107 0108 	add.w	r1, r7, #8
 800e980:	4610      	mov	r0, r2
 800e982:	4798      	blx	r3
 800e984:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e986:	e029      	b.n	800e9dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e988:	6839      	ldr	r1, [r7, #0]
 800e98a:	6878      	ldr	r0, [r7, #4]
 800e98c:	f000 fa63 	bl	800ee56 <USBD_CtlError>
            err++;
 800e990:	7afb      	ldrb	r3, [r7, #11]
 800e992:	3301      	adds	r3, #1
 800e994:	72fb      	strb	r3, [r7, #11]
          break;
 800e996:	e021      	b.n	800e9dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e99e:	699b      	ldr	r3, [r3, #24]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d00b      	beq.n	800e9bc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e9aa:	699b      	ldr	r3, [r3, #24]
 800e9ac:	687a      	ldr	r2, [r7, #4]
 800e9ae:	7c12      	ldrb	r2, [r2, #16]
 800e9b0:	f107 0108 	add.w	r1, r7, #8
 800e9b4:	4610      	mov	r0, r2
 800e9b6:	4798      	blx	r3
 800e9b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e9ba:	e00f      	b.n	800e9dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e9bc:	6839      	ldr	r1, [r7, #0]
 800e9be:	6878      	ldr	r0, [r7, #4]
 800e9c0:	f000 fa49 	bl	800ee56 <USBD_CtlError>
            err++;
 800e9c4:	7afb      	ldrb	r3, [r7, #11]
 800e9c6:	3301      	adds	r3, #1
 800e9c8:	72fb      	strb	r3, [r7, #11]
          break;
 800e9ca:	e007      	b.n	800e9dc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e9cc:	6839      	ldr	r1, [r7, #0]
 800e9ce:	6878      	ldr	r0, [r7, #4]
 800e9d0:	f000 fa41 	bl	800ee56 <USBD_CtlError>
          err++;
 800e9d4:	7afb      	ldrb	r3, [r7, #11]
 800e9d6:	3301      	adds	r3, #1
 800e9d8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e9da:	bf00      	nop
      }
      break;
 800e9dc:	e037      	b.n	800ea4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	7c1b      	ldrb	r3, [r3, #16]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d109      	bne.n	800e9fa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e9ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e9ee:	f107 0208 	add.w	r2, r7, #8
 800e9f2:	4610      	mov	r0, r2
 800e9f4:	4798      	blx	r3
 800e9f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e9f8:	e029      	b.n	800ea4e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e9fa:	6839      	ldr	r1, [r7, #0]
 800e9fc:	6878      	ldr	r0, [r7, #4]
 800e9fe:	f000 fa2a 	bl	800ee56 <USBD_CtlError>
        err++;
 800ea02:	7afb      	ldrb	r3, [r7, #11]
 800ea04:	3301      	adds	r3, #1
 800ea06:	72fb      	strb	r3, [r7, #11]
      break;
 800ea08:	e021      	b.n	800ea4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	7c1b      	ldrb	r3, [r3, #16]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d10d      	bne.n	800ea2e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea1a:	f107 0208 	add.w	r2, r7, #8
 800ea1e:	4610      	mov	r0, r2
 800ea20:	4798      	blx	r3
 800ea22:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	3301      	adds	r3, #1
 800ea28:	2207      	movs	r2, #7
 800ea2a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ea2c:	e00f      	b.n	800ea4e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ea2e:	6839      	ldr	r1, [r7, #0]
 800ea30:	6878      	ldr	r0, [r7, #4]
 800ea32:	f000 fa10 	bl	800ee56 <USBD_CtlError>
        err++;
 800ea36:	7afb      	ldrb	r3, [r7, #11]
 800ea38:	3301      	adds	r3, #1
 800ea3a:	72fb      	strb	r3, [r7, #11]
      break;
 800ea3c:	e007      	b.n	800ea4e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ea3e:	6839      	ldr	r1, [r7, #0]
 800ea40:	6878      	ldr	r0, [r7, #4]
 800ea42:	f000 fa08 	bl	800ee56 <USBD_CtlError>
      err++;
 800ea46:	7afb      	ldrb	r3, [r7, #11]
 800ea48:	3301      	adds	r3, #1
 800ea4a:	72fb      	strb	r3, [r7, #11]
      break;
 800ea4c:	bf00      	nop
  }

  if (err != 0U)
 800ea4e:	7afb      	ldrb	r3, [r7, #11]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d11e      	bne.n	800ea92 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	88db      	ldrh	r3, [r3, #6]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d016      	beq.n	800ea8a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ea5c:	893b      	ldrh	r3, [r7, #8]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d00e      	beq.n	800ea80 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ea62:	683b      	ldr	r3, [r7, #0]
 800ea64:	88da      	ldrh	r2, [r3, #6]
 800ea66:	893b      	ldrh	r3, [r7, #8]
 800ea68:	4293      	cmp	r3, r2
 800ea6a:	bf28      	it	cs
 800ea6c:	4613      	movcs	r3, r2
 800ea6e:	b29b      	uxth	r3, r3
 800ea70:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ea72:	893b      	ldrh	r3, [r7, #8]
 800ea74:	461a      	mov	r2, r3
 800ea76:	68f9      	ldr	r1, [r7, #12]
 800ea78:	6878      	ldr	r0, [r7, #4]
 800ea7a:	f000 fa69 	bl	800ef50 <USBD_CtlSendData>
 800ea7e:	e009      	b.n	800ea94 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ea80:	6839      	ldr	r1, [r7, #0]
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f000 f9e7 	bl	800ee56 <USBD_CtlError>
 800ea88:	e004      	b.n	800ea94 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ea8a:	6878      	ldr	r0, [r7, #4]
 800ea8c:	f000 faba 	bl	800f004 <USBD_CtlSendStatus>
 800ea90:	e000      	b.n	800ea94 <USBD_GetDescriptor+0x320>
    return;
 800ea92:	bf00      	nop
  }
}
 800ea94:	3710      	adds	r7, #16
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bd80      	pop	{r7, pc}
 800ea9a:	bf00      	nop

0800ea9c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b084      	sub	sp, #16
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
 800eaa4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800eaa6:	683b      	ldr	r3, [r7, #0]
 800eaa8:	889b      	ldrh	r3, [r3, #4]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d131      	bne.n	800eb12 <USBD_SetAddress+0x76>
 800eaae:	683b      	ldr	r3, [r7, #0]
 800eab0:	88db      	ldrh	r3, [r3, #6]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d12d      	bne.n	800eb12 <USBD_SetAddress+0x76>
 800eab6:	683b      	ldr	r3, [r7, #0]
 800eab8:	885b      	ldrh	r3, [r3, #2]
 800eaba:	2b7f      	cmp	r3, #127	@ 0x7f
 800eabc:	d829      	bhi.n	800eb12 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800eabe:	683b      	ldr	r3, [r7, #0]
 800eac0:	885b      	ldrh	r3, [r3, #2]
 800eac2:	b2db      	uxtb	r3, r3
 800eac4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eac8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ead0:	b2db      	uxtb	r3, r3
 800ead2:	2b03      	cmp	r3, #3
 800ead4:	d104      	bne.n	800eae0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ead6:	6839      	ldr	r1, [r7, #0]
 800ead8:	6878      	ldr	r0, [r7, #4]
 800eada:	f000 f9bc 	bl	800ee56 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eade:	e01d      	b.n	800eb1c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	7bfa      	ldrb	r2, [r7, #15]
 800eae4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800eae8:	7bfb      	ldrb	r3, [r7, #15]
 800eaea:	4619      	mov	r1, r3
 800eaec:	6878      	ldr	r0, [r7, #4]
 800eaee:	f000 ff47 	bl	800f980 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800eaf2:	6878      	ldr	r0, [r7, #4]
 800eaf4:	f000 fa86 	bl	800f004 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800eaf8:	7bfb      	ldrb	r3, [r7, #15]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d004      	beq.n	800eb08 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	2202      	movs	r2, #2
 800eb02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb06:	e009      	b.n	800eb1c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2201      	movs	r2, #1
 800eb0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb10:	e004      	b.n	800eb1c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800eb12:	6839      	ldr	r1, [r7, #0]
 800eb14:	6878      	ldr	r0, [r7, #4]
 800eb16:	f000 f99e 	bl	800ee56 <USBD_CtlError>
  }
}
 800eb1a:	bf00      	nop
 800eb1c:	bf00      	nop
 800eb1e:	3710      	adds	r7, #16
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}

0800eb24 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b084      	sub	sp, #16
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
 800eb2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eb2e:	2300      	movs	r3, #0
 800eb30:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	885b      	ldrh	r3, [r3, #2]
 800eb36:	b2da      	uxtb	r2, r3
 800eb38:	4b4e      	ldr	r3, [pc, #312]	@ (800ec74 <USBD_SetConfig+0x150>)
 800eb3a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800eb3c:	4b4d      	ldr	r3, [pc, #308]	@ (800ec74 <USBD_SetConfig+0x150>)
 800eb3e:	781b      	ldrb	r3, [r3, #0]
 800eb40:	2b01      	cmp	r3, #1
 800eb42:	d905      	bls.n	800eb50 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800eb44:	6839      	ldr	r1, [r7, #0]
 800eb46:	6878      	ldr	r0, [r7, #4]
 800eb48:	f000 f985 	bl	800ee56 <USBD_CtlError>
    return USBD_FAIL;
 800eb4c:	2303      	movs	r3, #3
 800eb4e:	e08c      	b.n	800ec6a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eb56:	b2db      	uxtb	r3, r3
 800eb58:	2b02      	cmp	r3, #2
 800eb5a:	d002      	beq.n	800eb62 <USBD_SetConfig+0x3e>
 800eb5c:	2b03      	cmp	r3, #3
 800eb5e:	d029      	beq.n	800ebb4 <USBD_SetConfig+0x90>
 800eb60:	e075      	b.n	800ec4e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800eb62:	4b44      	ldr	r3, [pc, #272]	@ (800ec74 <USBD_SetConfig+0x150>)
 800eb64:	781b      	ldrb	r3, [r3, #0]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d020      	beq.n	800ebac <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800eb6a:	4b42      	ldr	r3, [pc, #264]	@ (800ec74 <USBD_SetConfig+0x150>)
 800eb6c:	781b      	ldrb	r3, [r3, #0]
 800eb6e:	461a      	mov	r2, r3
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800eb74:	4b3f      	ldr	r3, [pc, #252]	@ (800ec74 <USBD_SetConfig+0x150>)
 800eb76:	781b      	ldrb	r3, [r3, #0]
 800eb78:	4619      	mov	r1, r3
 800eb7a:	6878      	ldr	r0, [r7, #4]
 800eb7c:	f7fe ffb9 	bl	800daf2 <USBD_SetClassConfig>
 800eb80:	4603      	mov	r3, r0
 800eb82:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800eb84:	7bfb      	ldrb	r3, [r7, #15]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d008      	beq.n	800eb9c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800eb8a:	6839      	ldr	r1, [r7, #0]
 800eb8c:	6878      	ldr	r0, [r7, #4]
 800eb8e:	f000 f962 	bl	800ee56 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	2202      	movs	r2, #2
 800eb96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800eb9a:	e065      	b.n	800ec68 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800eb9c:	6878      	ldr	r0, [r7, #4]
 800eb9e:	f000 fa31 	bl	800f004 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	2203      	movs	r2, #3
 800eba6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ebaa:	e05d      	b.n	800ec68 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ebac:	6878      	ldr	r0, [r7, #4]
 800ebae:	f000 fa29 	bl	800f004 <USBD_CtlSendStatus>
      break;
 800ebb2:	e059      	b.n	800ec68 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ebb4:	4b2f      	ldr	r3, [pc, #188]	@ (800ec74 <USBD_SetConfig+0x150>)
 800ebb6:	781b      	ldrb	r3, [r3, #0]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d112      	bne.n	800ebe2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2202      	movs	r2, #2
 800ebc0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800ebc4:	4b2b      	ldr	r3, [pc, #172]	@ (800ec74 <USBD_SetConfig+0x150>)
 800ebc6:	781b      	ldrb	r3, [r3, #0]
 800ebc8:	461a      	mov	r2, r3
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ebce:	4b29      	ldr	r3, [pc, #164]	@ (800ec74 <USBD_SetConfig+0x150>)
 800ebd0:	781b      	ldrb	r3, [r3, #0]
 800ebd2:	4619      	mov	r1, r3
 800ebd4:	6878      	ldr	r0, [r7, #4]
 800ebd6:	f7fe ffa8 	bl	800db2a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ebda:	6878      	ldr	r0, [r7, #4]
 800ebdc:	f000 fa12 	bl	800f004 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ebe0:	e042      	b.n	800ec68 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ebe2:	4b24      	ldr	r3, [pc, #144]	@ (800ec74 <USBD_SetConfig+0x150>)
 800ebe4:	781b      	ldrb	r3, [r3, #0]
 800ebe6:	461a      	mov	r2, r3
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	685b      	ldr	r3, [r3, #4]
 800ebec:	429a      	cmp	r2, r3
 800ebee:	d02a      	beq.n	800ec46 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	685b      	ldr	r3, [r3, #4]
 800ebf4:	b2db      	uxtb	r3, r3
 800ebf6:	4619      	mov	r1, r3
 800ebf8:	6878      	ldr	r0, [r7, #4]
 800ebfa:	f7fe ff96 	bl	800db2a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ebfe:	4b1d      	ldr	r3, [pc, #116]	@ (800ec74 <USBD_SetConfig+0x150>)
 800ec00:	781b      	ldrb	r3, [r3, #0]
 800ec02:	461a      	mov	r2, r3
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ec08:	4b1a      	ldr	r3, [pc, #104]	@ (800ec74 <USBD_SetConfig+0x150>)
 800ec0a:	781b      	ldrb	r3, [r3, #0]
 800ec0c:	4619      	mov	r1, r3
 800ec0e:	6878      	ldr	r0, [r7, #4]
 800ec10:	f7fe ff6f 	bl	800daf2 <USBD_SetClassConfig>
 800ec14:	4603      	mov	r3, r0
 800ec16:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ec18:	7bfb      	ldrb	r3, [r7, #15]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d00f      	beq.n	800ec3e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ec1e:	6839      	ldr	r1, [r7, #0]
 800ec20:	6878      	ldr	r0, [r7, #4]
 800ec22:	f000 f918 	bl	800ee56 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	685b      	ldr	r3, [r3, #4]
 800ec2a:	b2db      	uxtb	r3, r3
 800ec2c:	4619      	mov	r1, r3
 800ec2e:	6878      	ldr	r0, [r7, #4]
 800ec30:	f7fe ff7b 	bl	800db2a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2202      	movs	r2, #2
 800ec38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ec3c:	e014      	b.n	800ec68 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ec3e:	6878      	ldr	r0, [r7, #4]
 800ec40:	f000 f9e0 	bl	800f004 <USBD_CtlSendStatus>
      break;
 800ec44:	e010      	b.n	800ec68 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ec46:	6878      	ldr	r0, [r7, #4]
 800ec48:	f000 f9dc 	bl	800f004 <USBD_CtlSendStatus>
      break;
 800ec4c:	e00c      	b.n	800ec68 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ec4e:	6839      	ldr	r1, [r7, #0]
 800ec50:	6878      	ldr	r0, [r7, #4]
 800ec52:	f000 f900 	bl	800ee56 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ec56:	4b07      	ldr	r3, [pc, #28]	@ (800ec74 <USBD_SetConfig+0x150>)
 800ec58:	781b      	ldrb	r3, [r3, #0]
 800ec5a:	4619      	mov	r1, r3
 800ec5c:	6878      	ldr	r0, [r7, #4]
 800ec5e:	f7fe ff64 	bl	800db2a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ec62:	2303      	movs	r3, #3
 800ec64:	73fb      	strb	r3, [r7, #15]
      break;
 800ec66:	bf00      	nop
  }

  return ret;
 800ec68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	3710      	adds	r7, #16
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}
 800ec72:	bf00      	nop
 800ec74:	24000998 	.word	0x24000998

0800ec78 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b082      	sub	sp, #8
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
 800ec80:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ec82:	683b      	ldr	r3, [r7, #0]
 800ec84:	88db      	ldrh	r3, [r3, #6]
 800ec86:	2b01      	cmp	r3, #1
 800ec88:	d004      	beq.n	800ec94 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ec8a:	6839      	ldr	r1, [r7, #0]
 800ec8c:	6878      	ldr	r0, [r7, #4]
 800ec8e:	f000 f8e2 	bl	800ee56 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ec92:	e023      	b.n	800ecdc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ec9a:	b2db      	uxtb	r3, r3
 800ec9c:	2b02      	cmp	r3, #2
 800ec9e:	dc02      	bgt.n	800eca6 <USBD_GetConfig+0x2e>
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	dc03      	bgt.n	800ecac <USBD_GetConfig+0x34>
 800eca4:	e015      	b.n	800ecd2 <USBD_GetConfig+0x5a>
 800eca6:	2b03      	cmp	r3, #3
 800eca8:	d00b      	beq.n	800ecc2 <USBD_GetConfig+0x4a>
 800ecaa:	e012      	b.n	800ecd2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2200      	movs	r2, #0
 800ecb0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	3308      	adds	r3, #8
 800ecb6:	2201      	movs	r2, #1
 800ecb8:	4619      	mov	r1, r3
 800ecba:	6878      	ldr	r0, [r7, #4]
 800ecbc:	f000 f948 	bl	800ef50 <USBD_CtlSendData>
        break;
 800ecc0:	e00c      	b.n	800ecdc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	3304      	adds	r3, #4
 800ecc6:	2201      	movs	r2, #1
 800ecc8:	4619      	mov	r1, r3
 800ecca:	6878      	ldr	r0, [r7, #4]
 800eccc:	f000 f940 	bl	800ef50 <USBD_CtlSendData>
        break;
 800ecd0:	e004      	b.n	800ecdc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ecd2:	6839      	ldr	r1, [r7, #0]
 800ecd4:	6878      	ldr	r0, [r7, #4]
 800ecd6:	f000 f8be 	bl	800ee56 <USBD_CtlError>
        break;
 800ecda:	bf00      	nop
}
 800ecdc:	bf00      	nop
 800ecde:	3708      	adds	r7, #8
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd80      	pop	{r7, pc}

0800ece4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b082      	sub	sp, #8
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
 800ecec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ecf4:	b2db      	uxtb	r3, r3
 800ecf6:	3b01      	subs	r3, #1
 800ecf8:	2b02      	cmp	r3, #2
 800ecfa:	d81e      	bhi.n	800ed3a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ecfc:	683b      	ldr	r3, [r7, #0]
 800ecfe:	88db      	ldrh	r3, [r3, #6]
 800ed00:	2b02      	cmp	r3, #2
 800ed02:	d004      	beq.n	800ed0e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ed04:	6839      	ldr	r1, [r7, #0]
 800ed06:	6878      	ldr	r0, [r7, #4]
 800ed08:	f000 f8a5 	bl	800ee56 <USBD_CtlError>
        break;
 800ed0c:	e01a      	b.n	800ed44 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	2201      	movs	r2, #1
 800ed12:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d005      	beq.n	800ed2a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	68db      	ldr	r3, [r3, #12]
 800ed22:	f043 0202 	orr.w	r2, r3, #2
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	330c      	adds	r3, #12
 800ed2e:	2202      	movs	r2, #2
 800ed30:	4619      	mov	r1, r3
 800ed32:	6878      	ldr	r0, [r7, #4]
 800ed34:	f000 f90c 	bl	800ef50 <USBD_CtlSendData>
      break;
 800ed38:	e004      	b.n	800ed44 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ed3a:	6839      	ldr	r1, [r7, #0]
 800ed3c:	6878      	ldr	r0, [r7, #4]
 800ed3e:	f000 f88a 	bl	800ee56 <USBD_CtlError>
      break;
 800ed42:	bf00      	nop
  }
}
 800ed44:	bf00      	nop
 800ed46:	3708      	adds	r7, #8
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	bd80      	pop	{r7, pc}

0800ed4c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b082      	sub	sp, #8
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
 800ed54:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ed56:	683b      	ldr	r3, [r7, #0]
 800ed58:	885b      	ldrh	r3, [r3, #2]
 800ed5a:	2b01      	cmp	r3, #1
 800ed5c:	d107      	bne.n	800ed6e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	2201      	movs	r2, #1
 800ed62:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ed66:	6878      	ldr	r0, [r7, #4]
 800ed68:	f000 f94c 	bl	800f004 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ed6c:	e013      	b.n	800ed96 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ed6e:	683b      	ldr	r3, [r7, #0]
 800ed70:	885b      	ldrh	r3, [r3, #2]
 800ed72:	2b02      	cmp	r3, #2
 800ed74:	d10b      	bne.n	800ed8e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ed76:	683b      	ldr	r3, [r7, #0]
 800ed78:	889b      	ldrh	r3, [r3, #4]
 800ed7a:	0a1b      	lsrs	r3, r3, #8
 800ed7c:	b29b      	uxth	r3, r3
 800ed7e:	b2da      	uxtb	r2, r3
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ed86:	6878      	ldr	r0, [r7, #4]
 800ed88:	f000 f93c 	bl	800f004 <USBD_CtlSendStatus>
}
 800ed8c:	e003      	b.n	800ed96 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ed8e:	6839      	ldr	r1, [r7, #0]
 800ed90:	6878      	ldr	r0, [r7, #4]
 800ed92:	f000 f860 	bl	800ee56 <USBD_CtlError>
}
 800ed96:	bf00      	nop
 800ed98:	3708      	adds	r7, #8
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bd80      	pop	{r7, pc}

0800ed9e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed9e:	b580      	push	{r7, lr}
 800eda0:	b082      	sub	sp, #8
 800eda2:	af00      	add	r7, sp, #0
 800eda4:	6078      	str	r0, [r7, #4]
 800eda6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800edae:	b2db      	uxtb	r3, r3
 800edb0:	3b01      	subs	r3, #1
 800edb2:	2b02      	cmp	r3, #2
 800edb4:	d80b      	bhi.n	800edce <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800edb6:	683b      	ldr	r3, [r7, #0]
 800edb8:	885b      	ldrh	r3, [r3, #2]
 800edba:	2b01      	cmp	r3, #1
 800edbc:	d10c      	bne.n	800edd8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	2200      	movs	r2, #0
 800edc2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800edc6:	6878      	ldr	r0, [r7, #4]
 800edc8:	f000 f91c 	bl	800f004 <USBD_CtlSendStatus>
      }
      break;
 800edcc:	e004      	b.n	800edd8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800edce:	6839      	ldr	r1, [r7, #0]
 800edd0:	6878      	ldr	r0, [r7, #4]
 800edd2:	f000 f840 	bl	800ee56 <USBD_CtlError>
      break;
 800edd6:	e000      	b.n	800edda <USBD_ClrFeature+0x3c>
      break;
 800edd8:	bf00      	nop
  }
}
 800edda:	bf00      	nop
 800eddc:	3708      	adds	r7, #8
 800edde:	46bd      	mov	sp, r7
 800ede0:	bd80      	pop	{r7, pc}

0800ede2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ede2:	b580      	push	{r7, lr}
 800ede4:	b084      	sub	sp, #16
 800ede6:	af00      	add	r7, sp, #0
 800ede8:	6078      	str	r0, [r7, #4]
 800edea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	781a      	ldrb	r2, [r3, #0]
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	3301      	adds	r3, #1
 800edfc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	781a      	ldrb	r2, [r3, #0]
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	3301      	adds	r3, #1
 800ee0a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ee0c:	68f8      	ldr	r0, [r7, #12]
 800ee0e:	f7ff fa16 	bl	800e23e <SWAPBYTE>
 800ee12:	4603      	mov	r3, r0
 800ee14:	461a      	mov	r2, r3
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	3301      	adds	r3, #1
 800ee1e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	3301      	adds	r3, #1
 800ee24:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ee26:	68f8      	ldr	r0, [r7, #12]
 800ee28:	f7ff fa09 	bl	800e23e <SWAPBYTE>
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	461a      	mov	r2, r3
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	3301      	adds	r3, #1
 800ee38:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	3301      	adds	r3, #1
 800ee3e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ee40:	68f8      	ldr	r0, [r7, #12]
 800ee42:	f7ff f9fc 	bl	800e23e <SWAPBYTE>
 800ee46:	4603      	mov	r3, r0
 800ee48:	461a      	mov	r2, r3
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	80da      	strh	r2, [r3, #6]
}
 800ee4e:	bf00      	nop
 800ee50:	3710      	adds	r7, #16
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}

0800ee56 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee56:	b580      	push	{r7, lr}
 800ee58:	b082      	sub	sp, #8
 800ee5a:	af00      	add	r7, sp, #0
 800ee5c:	6078      	str	r0, [r7, #4]
 800ee5e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ee60:	2180      	movs	r1, #128	@ 0x80
 800ee62:	6878      	ldr	r0, [r7, #4]
 800ee64:	f000 fd22 	bl	800f8ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ee68:	2100      	movs	r1, #0
 800ee6a:	6878      	ldr	r0, [r7, #4]
 800ee6c:	f000 fd1e 	bl	800f8ac <USBD_LL_StallEP>
}
 800ee70:	bf00      	nop
 800ee72:	3708      	adds	r7, #8
 800ee74:	46bd      	mov	sp, r7
 800ee76:	bd80      	pop	{r7, pc}

0800ee78 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b086      	sub	sp, #24
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	60f8      	str	r0, [r7, #12]
 800ee80:	60b9      	str	r1, [r7, #8]
 800ee82:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ee84:	2300      	movs	r3, #0
 800ee86:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d042      	beq.n	800ef14 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800ee92:	6938      	ldr	r0, [r7, #16]
 800ee94:	f000 f842 	bl	800ef1c <USBD_GetLen>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	3301      	adds	r3, #1
 800ee9c:	005b      	lsls	r3, r3, #1
 800ee9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eea2:	d808      	bhi.n	800eeb6 <USBD_GetString+0x3e>
 800eea4:	6938      	ldr	r0, [r7, #16]
 800eea6:	f000 f839 	bl	800ef1c <USBD_GetLen>
 800eeaa:	4603      	mov	r3, r0
 800eeac:	3301      	adds	r3, #1
 800eeae:	b29b      	uxth	r3, r3
 800eeb0:	005b      	lsls	r3, r3, #1
 800eeb2:	b29a      	uxth	r2, r3
 800eeb4:	e001      	b.n	800eeba <USBD_GetString+0x42>
 800eeb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800eebe:	7dfb      	ldrb	r3, [r7, #23]
 800eec0:	68ba      	ldr	r2, [r7, #8]
 800eec2:	4413      	add	r3, r2
 800eec4:	687a      	ldr	r2, [r7, #4]
 800eec6:	7812      	ldrb	r2, [r2, #0]
 800eec8:	701a      	strb	r2, [r3, #0]
  idx++;
 800eeca:	7dfb      	ldrb	r3, [r7, #23]
 800eecc:	3301      	adds	r3, #1
 800eece:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800eed0:	7dfb      	ldrb	r3, [r7, #23]
 800eed2:	68ba      	ldr	r2, [r7, #8]
 800eed4:	4413      	add	r3, r2
 800eed6:	2203      	movs	r2, #3
 800eed8:	701a      	strb	r2, [r3, #0]
  idx++;
 800eeda:	7dfb      	ldrb	r3, [r7, #23]
 800eedc:	3301      	adds	r3, #1
 800eede:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800eee0:	e013      	b.n	800ef0a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800eee2:	7dfb      	ldrb	r3, [r7, #23]
 800eee4:	68ba      	ldr	r2, [r7, #8]
 800eee6:	4413      	add	r3, r2
 800eee8:	693a      	ldr	r2, [r7, #16]
 800eeea:	7812      	ldrb	r2, [r2, #0]
 800eeec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800eeee:	693b      	ldr	r3, [r7, #16]
 800eef0:	3301      	adds	r3, #1
 800eef2:	613b      	str	r3, [r7, #16]
    idx++;
 800eef4:	7dfb      	ldrb	r3, [r7, #23]
 800eef6:	3301      	adds	r3, #1
 800eef8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800eefa:	7dfb      	ldrb	r3, [r7, #23]
 800eefc:	68ba      	ldr	r2, [r7, #8]
 800eefe:	4413      	add	r3, r2
 800ef00:	2200      	movs	r2, #0
 800ef02:	701a      	strb	r2, [r3, #0]
    idx++;
 800ef04:	7dfb      	ldrb	r3, [r7, #23]
 800ef06:	3301      	adds	r3, #1
 800ef08:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ef0a:	693b      	ldr	r3, [r7, #16]
 800ef0c:	781b      	ldrb	r3, [r3, #0]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d1e7      	bne.n	800eee2 <USBD_GetString+0x6a>
 800ef12:	e000      	b.n	800ef16 <USBD_GetString+0x9e>
    return;
 800ef14:	bf00      	nop
  }
}
 800ef16:	3718      	adds	r7, #24
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	bd80      	pop	{r7, pc}

0800ef1c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ef1c:	b480      	push	{r7}
 800ef1e:	b085      	sub	sp, #20
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ef24:	2300      	movs	r3, #0
 800ef26:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ef2c:	e005      	b.n	800ef3a <USBD_GetLen+0x1e>
  {
    len++;
 800ef2e:	7bfb      	ldrb	r3, [r7, #15]
 800ef30:	3301      	adds	r3, #1
 800ef32:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ef34:	68bb      	ldr	r3, [r7, #8]
 800ef36:	3301      	adds	r3, #1
 800ef38:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ef3a:	68bb      	ldr	r3, [r7, #8]
 800ef3c:	781b      	ldrb	r3, [r3, #0]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d1f5      	bne.n	800ef2e <USBD_GetLen+0x12>
  }

  return len;
 800ef42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef44:	4618      	mov	r0, r3
 800ef46:	3714      	adds	r7, #20
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4e:	4770      	bx	lr

0800ef50 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b084      	sub	sp, #16
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	60f8      	str	r0, [r7, #12]
 800ef58:	60b9      	str	r1, [r7, #8]
 800ef5a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	2202      	movs	r2, #2
 800ef60:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	687a      	ldr	r2, [r7, #4]
 800ef68:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	687a      	ldr	r2, [r7, #4]
 800ef6e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	68ba      	ldr	r2, [r7, #8]
 800ef74:	2100      	movs	r1, #0
 800ef76:	68f8      	ldr	r0, [r7, #12]
 800ef78:	f000 fd21 	bl	800f9be <USBD_LL_Transmit>

  return USBD_OK;
 800ef7c:	2300      	movs	r3, #0
}
 800ef7e:	4618      	mov	r0, r3
 800ef80:	3710      	adds	r7, #16
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd80      	pop	{r7, pc}

0800ef86 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ef86:	b580      	push	{r7, lr}
 800ef88:	b084      	sub	sp, #16
 800ef8a:	af00      	add	r7, sp, #0
 800ef8c:	60f8      	str	r0, [r7, #12]
 800ef8e:	60b9      	str	r1, [r7, #8]
 800ef90:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	68ba      	ldr	r2, [r7, #8]
 800ef96:	2100      	movs	r1, #0
 800ef98:	68f8      	ldr	r0, [r7, #12]
 800ef9a:	f000 fd10 	bl	800f9be <USBD_LL_Transmit>

  return USBD_OK;
 800ef9e:	2300      	movs	r3, #0
}
 800efa0:	4618      	mov	r0, r3
 800efa2:	3710      	adds	r7, #16
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bd80      	pop	{r7, pc}

0800efa8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b084      	sub	sp, #16
 800efac:	af00      	add	r7, sp, #0
 800efae:	60f8      	str	r0, [r7, #12]
 800efb0:	60b9      	str	r1, [r7, #8]
 800efb2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	2203      	movs	r2, #3
 800efb8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	687a      	ldr	r2, [r7, #4]
 800efc0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	687a      	ldr	r2, [r7, #4]
 800efc8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	68ba      	ldr	r2, [r7, #8]
 800efd0:	2100      	movs	r1, #0
 800efd2:	68f8      	ldr	r0, [r7, #12]
 800efd4:	f000 fd14 	bl	800fa00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800efd8:	2300      	movs	r3, #0
}
 800efda:	4618      	mov	r0, r3
 800efdc:	3710      	adds	r7, #16
 800efde:	46bd      	mov	sp, r7
 800efe0:	bd80      	pop	{r7, pc}

0800efe2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800efe2:	b580      	push	{r7, lr}
 800efe4:	b084      	sub	sp, #16
 800efe6:	af00      	add	r7, sp, #0
 800efe8:	60f8      	str	r0, [r7, #12]
 800efea:	60b9      	str	r1, [r7, #8]
 800efec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	68ba      	ldr	r2, [r7, #8]
 800eff2:	2100      	movs	r1, #0
 800eff4:	68f8      	ldr	r0, [r7, #12]
 800eff6:	f000 fd03 	bl	800fa00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800effa:	2300      	movs	r3, #0
}
 800effc:	4618      	mov	r0, r3
 800effe:	3710      	adds	r7, #16
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}

0800f004 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b082      	sub	sp, #8
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2204      	movs	r2, #4
 800f010:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f014:	2300      	movs	r3, #0
 800f016:	2200      	movs	r2, #0
 800f018:	2100      	movs	r1, #0
 800f01a:	6878      	ldr	r0, [r7, #4]
 800f01c:	f000 fccf 	bl	800f9be <USBD_LL_Transmit>

  return USBD_OK;
 800f020:	2300      	movs	r3, #0
}
 800f022:	4618      	mov	r0, r3
 800f024:	3708      	adds	r7, #8
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}

0800f02a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f02a:	b580      	push	{r7, lr}
 800f02c:	b082      	sub	sp, #8
 800f02e:	af00      	add	r7, sp, #0
 800f030:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	2205      	movs	r2, #5
 800f036:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f03a:	2300      	movs	r3, #0
 800f03c:	2200      	movs	r2, #0
 800f03e:	2100      	movs	r1, #0
 800f040:	6878      	ldr	r0, [r7, #4]
 800f042:	f000 fcdd 	bl	800fa00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f046:	2300      	movs	r3, #0
}
 800f048:	4618      	mov	r0, r3
 800f04a:	3708      	adds	r7, #8
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd80      	pop	{r7, pc}

0800f050 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f050:	b580      	push	{r7, lr}
 800f052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f054:	2200      	movs	r2, #0
 800f056:	4913      	ldr	r1, [pc, #76]	@ (800f0a4 <MX_USB_DEVICE_Init+0x54>)
 800f058:	4813      	ldr	r0, [pc, #76]	@ (800f0a8 <MX_USB_DEVICE_Init+0x58>)
 800f05a:	f7fe fccd 	bl	800d9f8 <USBD_Init>
 800f05e:	4603      	mov	r3, r0
 800f060:	2b00      	cmp	r3, #0
 800f062:	d001      	beq.n	800f068 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f064:	f7f1 ffe4 	bl	8001030 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f068:	4910      	ldr	r1, [pc, #64]	@ (800f0ac <MX_USB_DEVICE_Init+0x5c>)
 800f06a:	480f      	ldr	r0, [pc, #60]	@ (800f0a8 <MX_USB_DEVICE_Init+0x58>)
 800f06c:	f7fe fcf4 	bl	800da58 <USBD_RegisterClass>
 800f070:	4603      	mov	r3, r0
 800f072:	2b00      	cmp	r3, #0
 800f074:	d001      	beq.n	800f07a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f076:	f7f1 ffdb 	bl	8001030 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f07a:	490d      	ldr	r1, [pc, #52]	@ (800f0b0 <MX_USB_DEVICE_Init+0x60>)
 800f07c:	480a      	ldr	r0, [pc, #40]	@ (800f0a8 <MX_USB_DEVICE_Init+0x58>)
 800f07e:	f7fe fbeb 	bl	800d858 <USBD_CDC_RegisterInterface>
 800f082:	4603      	mov	r3, r0
 800f084:	2b00      	cmp	r3, #0
 800f086:	d001      	beq.n	800f08c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f088:	f7f1 ffd2 	bl	8001030 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f08c:	4806      	ldr	r0, [pc, #24]	@ (800f0a8 <MX_USB_DEVICE_Init+0x58>)
 800f08e:	f7fe fd19 	bl	800dac4 <USBD_Start>
 800f092:	4603      	mov	r3, r0
 800f094:	2b00      	cmp	r3, #0
 800f096:	d001      	beq.n	800f09c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f098:	f7f1 ffca 	bl	8001030 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800f09c:	f7f7 fa44 	bl	8006528 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f0a0:	bf00      	nop
 800f0a2:	bd80      	pop	{r7, pc}
 800f0a4:	240000d8 	.word	0x240000d8
 800f0a8:	2400099c 	.word	0x2400099c
 800f0ac:	24000044 	.word	0x24000044
 800f0b0:	240000c4 	.word	0x240000c4

0800f0b4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	4905      	ldr	r1, [pc, #20]	@ (800f0d0 <CDC_Init_FS+0x1c>)
 800f0bc:	4805      	ldr	r0, [pc, #20]	@ (800f0d4 <CDC_Init_FS+0x20>)
 800f0be:	f7fe fbe5 	bl	800d88c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f0c2:	4905      	ldr	r1, [pc, #20]	@ (800f0d8 <CDC_Init_FS+0x24>)
 800f0c4:	4803      	ldr	r0, [pc, #12]	@ (800f0d4 <CDC_Init_FS+0x20>)
 800f0c6:	f7fe fc03 	bl	800d8d0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f0ca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	bd80      	pop	{r7, pc}
 800f0d0:	24001478 	.word	0x24001478
 800f0d4:	2400099c 	.word	0x2400099c
 800f0d8:	24000c78 	.word	0x24000c78

0800f0dc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f0dc:	b480      	push	{r7}
 800f0de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f0e0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ea:	4770      	bx	lr

0800f0ec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f0ec:	b480      	push	{r7}
 800f0ee:	b083      	sub	sp, #12
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	6039      	str	r1, [r7, #0]
 800f0f6:	71fb      	strb	r3, [r7, #7]
 800f0f8:	4613      	mov	r3, r2
 800f0fa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f0fc:	79fb      	ldrb	r3, [r7, #7]
 800f0fe:	2b23      	cmp	r3, #35	@ 0x23
 800f100:	d84a      	bhi.n	800f198 <CDC_Control_FS+0xac>
 800f102:	a201      	add	r2, pc, #4	@ (adr r2, 800f108 <CDC_Control_FS+0x1c>)
 800f104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f108:	0800f199 	.word	0x0800f199
 800f10c:	0800f199 	.word	0x0800f199
 800f110:	0800f199 	.word	0x0800f199
 800f114:	0800f199 	.word	0x0800f199
 800f118:	0800f199 	.word	0x0800f199
 800f11c:	0800f199 	.word	0x0800f199
 800f120:	0800f199 	.word	0x0800f199
 800f124:	0800f199 	.word	0x0800f199
 800f128:	0800f199 	.word	0x0800f199
 800f12c:	0800f199 	.word	0x0800f199
 800f130:	0800f199 	.word	0x0800f199
 800f134:	0800f199 	.word	0x0800f199
 800f138:	0800f199 	.word	0x0800f199
 800f13c:	0800f199 	.word	0x0800f199
 800f140:	0800f199 	.word	0x0800f199
 800f144:	0800f199 	.word	0x0800f199
 800f148:	0800f199 	.word	0x0800f199
 800f14c:	0800f199 	.word	0x0800f199
 800f150:	0800f199 	.word	0x0800f199
 800f154:	0800f199 	.word	0x0800f199
 800f158:	0800f199 	.word	0x0800f199
 800f15c:	0800f199 	.word	0x0800f199
 800f160:	0800f199 	.word	0x0800f199
 800f164:	0800f199 	.word	0x0800f199
 800f168:	0800f199 	.word	0x0800f199
 800f16c:	0800f199 	.word	0x0800f199
 800f170:	0800f199 	.word	0x0800f199
 800f174:	0800f199 	.word	0x0800f199
 800f178:	0800f199 	.word	0x0800f199
 800f17c:	0800f199 	.word	0x0800f199
 800f180:	0800f199 	.word	0x0800f199
 800f184:	0800f199 	.word	0x0800f199
 800f188:	0800f199 	.word	0x0800f199
 800f18c:	0800f199 	.word	0x0800f199
 800f190:	0800f199 	.word	0x0800f199
 800f194:	0800f199 	.word	0x0800f199
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f198:	bf00      	nop
  }

  return (USBD_OK);
 800f19a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f19c:	4618      	mov	r0, r3
 800f19e:	370c      	adds	r7, #12
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a6:	4770      	bx	lr

0800f1a8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b082      	sub	sp, #8
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
 800f1b0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f1b2:	6879      	ldr	r1, [r7, #4]
 800f1b4:	4805      	ldr	r0, [pc, #20]	@ (800f1cc <CDC_Receive_FS+0x24>)
 800f1b6:	f7fe fb8b 	bl	800d8d0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f1ba:	4804      	ldr	r0, [pc, #16]	@ (800f1cc <CDC_Receive_FS+0x24>)
 800f1bc:	f7fe fbe6 	bl	800d98c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f1c0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	3708      	adds	r7, #8
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bd80      	pop	{r7, pc}
 800f1ca:	bf00      	nop
 800f1cc:	2400099c 	.word	0x2400099c

0800f1d0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	b084      	sub	sp, #16
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	6078      	str	r0, [r7, #4]
 800f1d8:	460b      	mov	r3, r1
 800f1da:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f1dc:	2300      	movs	r3, #0
 800f1de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f1e0:	4b0d      	ldr	r3, [pc, #52]	@ (800f218 <CDC_Transmit_FS+0x48>)
 800f1e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f1e6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f1e8:	68bb      	ldr	r3, [r7, #8]
 800f1ea:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d001      	beq.n	800f1f6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f1f2:	2301      	movs	r3, #1
 800f1f4:	e00b      	b.n	800f20e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f1f6:	887b      	ldrh	r3, [r7, #2]
 800f1f8:	461a      	mov	r2, r3
 800f1fa:	6879      	ldr	r1, [r7, #4]
 800f1fc:	4806      	ldr	r0, [pc, #24]	@ (800f218 <CDC_Transmit_FS+0x48>)
 800f1fe:	f7fe fb45 	bl	800d88c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f202:	4805      	ldr	r0, [pc, #20]	@ (800f218 <CDC_Transmit_FS+0x48>)
 800f204:	f7fe fb82 	bl	800d90c <USBD_CDC_TransmitPacket>
 800f208:	4603      	mov	r3, r0
 800f20a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f20c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f20e:	4618      	mov	r0, r3
 800f210:	3710      	adds	r7, #16
 800f212:	46bd      	mov	sp, r7
 800f214:	bd80      	pop	{r7, pc}
 800f216:	bf00      	nop
 800f218:	2400099c 	.word	0x2400099c

0800f21c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f21c:	b480      	push	{r7}
 800f21e:	b087      	sub	sp, #28
 800f220:	af00      	add	r7, sp, #0
 800f222:	60f8      	str	r0, [r7, #12]
 800f224:	60b9      	str	r1, [r7, #8]
 800f226:	4613      	mov	r3, r2
 800f228:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f22a:	2300      	movs	r3, #0
 800f22c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f22e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f232:	4618      	mov	r0, r3
 800f234:	371c      	adds	r7, #28
 800f236:	46bd      	mov	sp, r7
 800f238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23c:	4770      	bx	lr
	...

0800f240 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f240:	b480      	push	{r7}
 800f242:	b083      	sub	sp, #12
 800f244:	af00      	add	r7, sp, #0
 800f246:	4603      	mov	r3, r0
 800f248:	6039      	str	r1, [r7, #0]
 800f24a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f24c:	683b      	ldr	r3, [r7, #0]
 800f24e:	2212      	movs	r2, #18
 800f250:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f252:	4b03      	ldr	r3, [pc, #12]	@ (800f260 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f254:	4618      	mov	r0, r3
 800f256:	370c      	adds	r7, #12
 800f258:	46bd      	mov	sp, r7
 800f25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f25e:	4770      	bx	lr
 800f260:	240000f8 	.word	0x240000f8

0800f264 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f264:	b480      	push	{r7}
 800f266:	b083      	sub	sp, #12
 800f268:	af00      	add	r7, sp, #0
 800f26a:	4603      	mov	r3, r0
 800f26c:	6039      	str	r1, [r7, #0]
 800f26e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f270:	683b      	ldr	r3, [r7, #0]
 800f272:	2204      	movs	r2, #4
 800f274:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f276:	4b03      	ldr	r3, [pc, #12]	@ (800f284 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f278:	4618      	mov	r0, r3
 800f27a:	370c      	adds	r7, #12
 800f27c:	46bd      	mov	sp, r7
 800f27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f282:	4770      	bx	lr
 800f284:	2400010c 	.word	0x2400010c

0800f288 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b082      	sub	sp, #8
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	4603      	mov	r3, r0
 800f290:	6039      	str	r1, [r7, #0]
 800f292:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f294:	79fb      	ldrb	r3, [r7, #7]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d105      	bne.n	800f2a6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f29a:	683a      	ldr	r2, [r7, #0]
 800f29c:	4907      	ldr	r1, [pc, #28]	@ (800f2bc <USBD_FS_ProductStrDescriptor+0x34>)
 800f29e:	4808      	ldr	r0, [pc, #32]	@ (800f2c0 <USBD_FS_ProductStrDescriptor+0x38>)
 800f2a0:	f7ff fdea 	bl	800ee78 <USBD_GetString>
 800f2a4:	e004      	b.n	800f2b0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f2a6:	683a      	ldr	r2, [r7, #0]
 800f2a8:	4904      	ldr	r1, [pc, #16]	@ (800f2bc <USBD_FS_ProductStrDescriptor+0x34>)
 800f2aa:	4805      	ldr	r0, [pc, #20]	@ (800f2c0 <USBD_FS_ProductStrDescriptor+0x38>)
 800f2ac:	f7ff fde4 	bl	800ee78 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f2b0:	4b02      	ldr	r3, [pc, #8]	@ (800f2bc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	3708      	adds	r7, #8
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}
 800f2ba:	bf00      	nop
 800f2bc:	24001c78 	.word	0x24001c78
 800f2c0:	08012708 	.word	0x08012708

0800f2c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b082      	sub	sp, #8
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	6039      	str	r1, [r7, #0]
 800f2ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f2d0:	683a      	ldr	r2, [r7, #0]
 800f2d2:	4904      	ldr	r1, [pc, #16]	@ (800f2e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f2d4:	4804      	ldr	r0, [pc, #16]	@ (800f2e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f2d6:	f7ff fdcf 	bl	800ee78 <USBD_GetString>
  return USBD_StrDesc;
 800f2da:	4b02      	ldr	r3, [pc, #8]	@ (800f2e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f2dc:	4618      	mov	r0, r3
 800f2de:	3708      	adds	r7, #8
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	bd80      	pop	{r7, pc}
 800f2e4:	24001c78 	.word	0x24001c78
 800f2e8:	08012720 	.word	0x08012720

0800f2ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b082      	sub	sp, #8
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	6039      	str	r1, [r7, #0]
 800f2f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f2f8:	683b      	ldr	r3, [r7, #0]
 800f2fa:	221a      	movs	r2, #26
 800f2fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f2fe:	f000 f843 	bl	800f388 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f302:	4b02      	ldr	r3, [pc, #8]	@ (800f30c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f304:	4618      	mov	r0, r3
 800f306:	3708      	adds	r7, #8
 800f308:	46bd      	mov	sp, r7
 800f30a:	bd80      	pop	{r7, pc}
 800f30c:	24000110 	.word	0x24000110

0800f310 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b082      	sub	sp, #8
 800f314:	af00      	add	r7, sp, #0
 800f316:	4603      	mov	r3, r0
 800f318:	6039      	str	r1, [r7, #0]
 800f31a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f31c:	79fb      	ldrb	r3, [r7, #7]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d105      	bne.n	800f32e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f322:	683a      	ldr	r2, [r7, #0]
 800f324:	4907      	ldr	r1, [pc, #28]	@ (800f344 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f326:	4808      	ldr	r0, [pc, #32]	@ (800f348 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f328:	f7ff fda6 	bl	800ee78 <USBD_GetString>
 800f32c:	e004      	b.n	800f338 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f32e:	683a      	ldr	r2, [r7, #0]
 800f330:	4904      	ldr	r1, [pc, #16]	@ (800f344 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f332:	4805      	ldr	r0, [pc, #20]	@ (800f348 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f334:	f7ff fda0 	bl	800ee78 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f338:	4b02      	ldr	r3, [pc, #8]	@ (800f344 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f33a:	4618      	mov	r0, r3
 800f33c:	3708      	adds	r7, #8
 800f33e:	46bd      	mov	sp, r7
 800f340:	bd80      	pop	{r7, pc}
 800f342:	bf00      	nop
 800f344:	24001c78 	.word	0x24001c78
 800f348:	08012734 	.word	0x08012734

0800f34c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b082      	sub	sp, #8
 800f350:	af00      	add	r7, sp, #0
 800f352:	4603      	mov	r3, r0
 800f354:	6039      	str	r1, [r7, #0]
 800f356:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f358:	79fb      	ldrb	r3, [r7, #7]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d105      	bne.n	800f36a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f35e:	683a      	ldr	r2, [r7, #0]
 800f360:	4907      	ldr	r1, [pc, #28]	@ (800f380 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f362:	4808      	ldr	r0, [pc, #32]	@ (800f384 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f364:	f7ff fd88 	bl	800ee78 <USBD_GetString>
 800f368:	e004      	b.n	800f374 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f36a:	683a      	ldr	r2, [r7, #0]
 800f36c:	4904      	ldr	r1, [pc, #16]	@ (800f380 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f36e:	4805      	ldr	r0, [pc, #20]	@ (800f384 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f370:	f7ff fd82 	bl	800ee78 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f374:	4b02      	ldr	r3, [pc, #8]	@ (800f380 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f376:	4618      	mov	r0, r3
 800f378:	3708      	adds	r7, #8
 800f37a:	46bd      	mov	sp, r7
 800f37c:	bd80      	pop	{r7, pc}
 800f37e:	bf00      	nop
 800f380:	24001c78 	.word	0x24001c78
 800f384:	08012740 	.word	0x08012740

0800f388 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b084      	sub	sp, #16
 800f38c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f38e:	4b0f      	ldr	r3, [pc, #60]	@ (800f3cc <Get_SerialNum+0x44>)
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f394:	4b0e      	ldr	r3, [pc, #56]	@ (800f3d0 <Get_SerialNum+0x48>)
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f39a:	4b0e      	ldr	r3, [pc, #56]	@ (800f3d4 <Get_SerialNum+0x4c>)
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f3a0:	68fa      	ldr	r2, [r7, #12]
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	4413      	add	r3, r2
 800f3a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d009      	beq.n	800f3c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f3ae:	2208      	movs	r2, #8
 800f3b0:	4909      	ldr	r1, [pc, #36]	@ (800f3d8 <Get_SerialNum+0x50>)
 800f3b2:	68f8      	ldr	r0, [r7, #12]
 800f3b4:	f000 f814 	bl	800f3e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f3b8:	2204      	movs	r2, #4
 800f3ba:	4908      	ldr	r1, [pc, #32]	@ (800f3dc <Get_SerialNum+0x54>)
 800f3bc:	68b8      	ldr	r0, [r7, #8]
 800f3be:	f000 f80f 	bl	800f3e0 <IntToUnicode>
  }
}
 800f3c2:	bf00      	nop
 800f3c4:	3710      	adds	r7, #16
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	bd80      	pop	{r7, pc}
 800f3ca:	bf00      	nop
 800f3cc:	1ff1e800 	.word	0x1ff1e800
 800f3d0:	1ff1e804 	.word	0x1ff1e804
 800f3d4:	1ff1e808 	.word	0x1ff1e808
 800f3d8:	24000112 	.word	0x24000112
 800f3dc:	24000122 	.word	0x24000122

0800f3e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f3e0:	b480      	push	{r7}
 800f3e2:	b087      	sub	sp, #28
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	60f8      	str	r0, [r7, #12]
 800f3e8:	60b9      	str	r1, [r7, #8]
 800f3ea:	4613      	mov	r3, r2
 800f3ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	75fb      	strb	r3, [r7, #23]
 800f3f6:	e027      	b.n	800f448 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	0f1b      	lsrs	r3, r3, #28
 800f3fc:	2b09      	cmp	r3, #9
 800f3fe:	d80b      	bhi.n	800f418 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	0f1b      	lsrs	r3, r3, #28
 800f404:	b2da      	uxtb	r2, r3
 800f406:	7dfb      	ldrb	r3, [r7, #23]
 800f408:	005b      	lsls	r3, r3, #1
 800f40a:	4619      	mov	r1, r3
 800f40c:	68bb      	ldr	r3, [r7, #8]
 800f40e:	440b      	add	r3, r1
 800f410:	3230      	adds	r2, #48	@ 0x30
 800f412:	b2d2      	uxtb	r2, r2
 800f414:	701a      	strb	r2, [r3, #0]
 800f416:	e00a      	b.n	800f42e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	0f1b      	lsrs	r3, r3, #28
 800f41c:	b2da      	uxtb	r2, r3
 800f41e:	7dfb      	ldrb	r3, [r7, #23]
 800f420:	005b      	lsls	r3, r3, #1
 800f422:	4619      	mov	r1, r3
 800f424:	68bb      	ldr	r3, [r7, #8]
 800f426:	440b      	add	r3, r1
 800f428:	3237      	adds	r2, #55	@ 0x37
 800f42a:	b2d2      	uxtb	r2, r2
 800f42c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	011b      	lsls	r3, r3, #4
 800f432:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f434:	7dfb      	ldrb	r3, [r7, #23]
 800f436:	005b      	lsls	r3, r3, #1
 800f438:	3301      	adds	r3, #1
 800f43a:	68ba      	ldr	r2, [r7, #8]
 800f43c:	4413      	add	r3, r2
 800f43e:	2200      	movs	r2, #0
 800f440:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f442:	7dfb      	ldrb	r3, [r7, #23]
 800f444:	3301      	adds	r3, #1
 800f446:	75fb      	strb	r3, [r7, #23]
 800f448:	7dfa      	ldrb	r2, [r7, #23]
 800f44a:	79fb      	ldrb	r3, [r7, #7]
 800f44c:	429a      	cmp	r2, r3
 800f44e:	d3d3      	bcc.n	800f3f8 <IntToUnicode+0x18>
  }
}
 800f450:	bf00      	nop
 800f452:	bf00      	nop
 800f454:	371c      	adds	r7, #28
 800f456:	46bd      	mov	sp, r7
 800f458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45c:	4770      	bx	lr
	...

0800f460 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b0ba      	sub	sp, #232	@ 0xe8
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f468:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800f46c:	2200      	movs	r2, #0
 800f46e:	601a      	str	r2, [r3, #0]
 800f470:	605a      	str	r2, [r3, #4]
 800f472:	609a      	str	r2, [r3, #8]
 800f474:	60da      	str	r2, [r3, #12]
 800f476:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f478:	f107 0310 	add.w	r3, r7, #16
 800f47c:	22c0      	movs	r2, #192	@ 0xc0
 800f47e:	2100      	movs	r1, #0
 800f480:	4618      	mov	r0, r3
 800f482:	f001 f892 	bl	80105aa <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	4a34      	ldr	r2, [pc, #208]	@ (800f55c <HAL_PCD_MspInit+0xfc>)
 800f48c:	4293      	cmp	r3, r2
 800f48e:	d161      	bne.n	800f554 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f490:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800f494:	f04f 0300 	mov.w	r3, #0
 800f498:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800f49c:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800f4a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f4a4:	f107 0310 	add.w	r3, r7, #16
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	f7f8 f833 	bl	8007514 <HAL_RCCEx_PeriphCLKConfig>
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d001      	beq.n	800f4b8 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800f4b4:	f7f1 fdbc 	bl	8001030 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800f4b8:	f7f7 f836 	bl	8006528 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f4bc:	4b28      	ldr	r3, [pc, #160]	@ (800f560 <HAL_PCD_MspInit+0x100>)
 800f4be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f4c2:	4a27      	ldr	r2, [pc, #156]	@ (800f560 <HAL_PCD_MspInit+0x100>)
 800f4c4:	f043 0301 	orr.w	r3, r3, #1
 800f4c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800f4cc:	4b24      	ldr	r3, [pc, #144]	@ (800f560 <HAL_PCD_MspInit+0x100>)
 800f4ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f4d2:	f003 0301 	and.w	r3, r3, #1
 800f4d6:	60fb      	str	r3, [r7, #12]
 800f4d8:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800f4da:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800f4de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f4e2:	2302      	movs	r3, #2
 800f4e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800f4f4:	230a      	movs	r3, #10
 800f4f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f4fa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800f4fe:	4619      	mov	r1, r3
 800f500:	4818      	ldr	r0, [pc, #96]	@ (800f564 <HAL_PCD_MspInit+0x104>)
 800f502:	f7f5 fb07 	bl	8004b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800f506:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f50a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f50e:	2300      	movs	r3, #0
 800f510:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f514:	2300      	movs	r3, #0
 800f516:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f51a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800f51e:	4619      	mov	r1, r3
 800f520:	4810      	ldr	r0, [pc, #64]	@ (800f564 <HAL_PCD_MspInit+0x104>)
 800f522:	f7f5 faf7 	bl	8004b14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f526:	4b0e      	ldr	r3, [pc, #56]	@ (800f560 <HAL_PCD_MspInit+0x100>)
 800f528:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800f52c:	4a0c      	ldr	r2, [pc, #48]	@ (800f560 <HAL_PCD_MspInit+0x100>)
 800f52e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f532:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800f536:	4b0a      	ldr	r3, [pc, #40]	@ (800f560 <HAL_PCD_MspInit+0x100>)
 800f538:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800f53c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f540:	60bb      	str	r3, [r7, #8]
 800f542:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f544:	2200      	movs	r2, #0
 800f546:	2100      	movs	r1, #0
 800f548:	2065      	movs	r0, #101	@ 0x65
 800f54a:	f7f3 f952 	bl	80027f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f54e:	2065      	movs	r0, #101	@ 0x65
 800f550:	f7f3 f969 	bl	8002826 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f554:	bf00      	nop
 800f556:	37e8      	adds	r7, #232	@ 0xe8
 800f558:	46bd      	mov	sp, r7
 800f55a:	bd80      	pop	{r7, pc}
 800f55c:	40080000 	.word	0x40080000
 800f560:	58024400 	.word	0x58024400
 800f564:	58020000 	.word	0x58020000

0800f568 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b082      	sub	sp, #8
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800f57c:	4619      	mov	r1, r3
 800f57e:	4610      	mov	r0, r2
 800f580:	f7fe faed 	bl	800db5e <USBD_LL_SetupStage>
}
 800f584:	bf00      	nop
 800f586:	3708      	adds	r7, #8
 800f588:	46bd      	mov	sp, r7
 800f58a:	bd80      	pop	{r7, pc}

0800f58c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b082      	sub	sp, #8
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
 800f594:	460b      	mov	r3, r1
 800f596:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800f59e:	78fa      	ldrb	r2, [r7, #3]
 800f5a0:	6879      	ldr	r1, [r7, #4]
 800f5a2:	4613      	mov	r3, r2
 800f5a4:	00db      	lsls	r3, r3, #3
 800f5a6:	4413      	add	r3, r2
 800f5a8:	009b      	lsls	r3, r3, #2
 800f5aa:	440b      	add	r3, r1
 800f5ac:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f5b0:	681a      	ldr	r2, [r3, #0]
 800f5b2:	78fb      	ldrb	r3, [r7, #3]
 800f5b4:	4619      	mov	r1, r3
 800f5b6:	f7fe fb27 	bl	800dc08 <USBD_LL_DataOutStage>
}
 800f5ba:	bf00      	nop
 800f5bc:	3708      	adds	r7, #8
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	bd80      	pop	{r7, pc}

0800f5c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f5c2:	b580      	push	{r7, lr}
 800f5c4:	b082      	sub	sp, #8
 800f5c6:	af00      	add	r7, sp, #0
 800f5c8:	6078      	str	r0, [r7, #4]
 800f5ca:	460b      	mov	r3, r1
 800f5cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800f5d4:	78fa      	ldrb	r2, [r7, #3]
 800f5d6:	6879      	ldr	r1, [r7, #4]
 800f5d8:	4613      	mov	r3, r2
 800f5da:	00db      	lsls	r3, r3, #3
 800f5dc:	4413      	add	r3, r2
 800f5de:	009b      	lsls	r3, r3, #2
 800f5e0:	440b      	add	r3, r1
 800f5e2:	3320      	adds	r3, #32
 800f5e4:	681a      	ldr	r2, [r3, #0]
 800f5e6:	78fb      	ldrb	r3, [r7, #3]
 800f5e8:	4619      	mov	r1, r3
 800f5ea:	f7fe fbc0 	bl	800dd6e <USBD_LL_DataInStage>
}
 800f5ee:	bf00      	nop
 800f5f0:	3708      	adds	r7, #8
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	bd80      	pop	{r7, pc}

0800f5f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f5f6:	b580      	push	{r7, lr}
 800f5f8:	b082      	sub	sp, #8
 800f5fa:	af00      	add	r7, sp, #0
 800f5fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f604:	4618      	mov	r0, r3
 800f606:	f7fe fcfa 	bl	800dffe <USBD_LL_SOF>
}
 800f60a:	bf00      	nop
 800f60c:	3708      	adds	r7, #8
 800f60e:	46bd      	mov	sp, r7
 800f610:	bd80      	pop	{r7, pc}

0800f612 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f612:	b580      	push	{r7, lr}
 800f614:	b084      	sub	sp, #16
 800f616:	af00      	add	r7, sp, #0
 800f618:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f61a:	2301      	movs	r3, #1
 800f61c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	79db      	ldrb	r3, [r3, #7]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d102      	bne.n	800f62c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f626:	2300      	movs	r3, #0
 800f628:	73fb      	strb	r3, [r7, #15]
 800f62a:	e008      	b.n	800f63e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	79db      	ldrb	r3, [r3, #7]
 800f630:	2b02      	cmp	r3, #2
 800f632:	d102      	bne.n	800f63a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f634:	2301      	movs	r3, #1
 800f636:	73fb      	strb	r3, [r7, #15]
 800f638:	e001      	b.n	800f63e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f63a:	f7f1 fcf9 	bl	8001030 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f644:	7bfa      	ldrb	r2, [r7, #15]
 800f646:	4611      	mov	r1, r2
 800f648:	4618      	mov	r0, r3
 800f64a:	f7fe fc94 	bl	800df76 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f654:	4618      	mov	r0, r3
 800f656:	f7fe fc3c 	bl	800ded2 <USBD_LL_Reset>
}
 800f65a:	bf00      	nop
 800f65c:	3710      	adds	r7, #16
 800f65e:	46bd      	mov	sp, r7
 800f660:	bd80      	pop	{r7, pc}
	...

0800f664 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b082      	sub	sp, #8
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f672:	4618      	mov	r0, r3
 800f674:	f7fe fc8f 	bl	800df96 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	687a      	ldr	r2, [r7, #4]
 800f684:	6812      	ldr	r2, [r2, #0]
 800f686:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f68a:	f043 0301 	orr.w	r3, r3, #1
 800f68e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	7adb      	ldrb	r3, [r3, #11]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d005      	beq.n	800f6a4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f698:	4b04      	ldr	r3, [pc, #16]	@ (800f6ac <HAL_PCD_SuspendCallback+0x48>)
 800f69a:	691b      	ldr	r3, [r3, #16]
 800f69c:	4a03      	ldr	r2, [pc, #12]	@ (800f6ac <HAL_PCD_SuspendCallback+0x48>)
 800f69e:	f043 0306 	orr.w	r3, r3, #6
 800f6a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f6a4:	bf00      	nop
 800f6a6:	3708      	adds	r7, #8
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}
 800f6ac:	e000ed00 	.word	0xe000ed00

0800f6b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b082      	sub	sp, #8
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f6be:	4618      	mov	r0, r3
 800f6c0:	f7fe fc85 	bl	800dfce <USBD_LL_Resume>
}
 800f6c4:	bf00      	nop
 800f6c6:	3708      	adds	r7, #8
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	bd80      	pop	{r7, pc}

0800f6cc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b082      	sub	sp, #8
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
 800f6d4:	460b      	mov	r3, r1
 800f6d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f6de:	78fa      	ldrb	r2, [r7, #3]
 800f6e0:	4611      	mov	r1, r2
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	f7fe fcdd 	bl	800e0a2 <USBD_LL_IsoOUTIncomplete>
}
 800f6e8:	bf00      	nop
 800f6ea:	3708      	adds	r7, #8
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	bd80      	pop	{r7, pc}

0800f6f0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b082      	sub	sp, #8
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
 800f6f8:	460b      	mov	r3, r1
 800f6fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f702:	78fa      	ldrb	r2, [r7, #3]
 800f704:	4611      	mov	r1, r2
 800f706:	4618      	mov	r0, r3
 800f708:	f7fe fc99 	bl	800e03e <USBD_LL_IsoINIncomplete>
}
 800f70c:	bf00      	nop
 800f70e:	3708      	adds	r7, #8
 800f710:	46bd      	mov	sp, r7
 800f712:	bd80      	pop	{r7, pc}

0800f714 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f714:	b580      	push	{r7, lr}
 800f716:	b082      	sub	sp, #8
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f722:	4618      	mov	r0, r3
 800f724:	f7fe fcef 	bl	800e106 <USBD_LL_DevConnected>
}
 800f728:	bf00      	nop
 800f72a:	3708      	adds	r7, #8
 800f72c:	46bd      	mov	sp, r7
 800f72e:	bd80      	pop	{r7, pc}

0800f730 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f730:	b580      	push	{r7, lr}
 800f732:	b082      	sub	sp, #8
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f73e:	4618      	mov	r0, r3
 800f740:	f7fe fcec 	bl	800e11c <USBD_LL_DevDisconnected>
}
 800f744:	bf00      	nop
 800f746:	3708      	adds	r7, #8
 800f748:	46bd      	mov	sp, r7
 800f74a:	bd80      	pop	{r7, pc}

0800f74c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b082      	sub	sp, #8
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	781b      	ldrb	r3, [r3, #0]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d13e      	bne.n	800f7da <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f75c:	4a21      	ldr	r2, [pc, #132]	@ (800f7e4 <USBD_LL_Init+0x98>)
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	4a1f      	ldr	r2, [pc, #124]	@ (800f7e4 <USBD_LL_Init+0x98>)
 800f768:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f76c:	4b1d      	ldr	r3, [pc, #116]	@ (800f7e4 <USBD_LL_Init+0x98>)
 800f76e:	4a1e      	ldr	r2, [pc, #120]	@ (800f7e8 <USBD_LL_Init+0x9c>)
 800f770:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800f772:	4b1c      	ldr	r3, [pc, #112]	@ (800f7e4 <USBD_LL_Init+0x98>)
 800f774:	2209      	movs	r2, #9
 800f776:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f778:	4b1a      	ldr	r3, [pc, #104]	@ (800f7e4 <USBD_LL_Init+0x98>)
 800f77a:	2202      	movs	r2, #2
 800f77c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f77e:	4b19      	ldr	r3, [pc, #100]	@ (800f7e4 <USBD_LL_Init+0x98>)
 800f780:	2200      	movs	r2, #0
 800f782:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f784:	4b17      	ldr	r3, [pc, #92]	@ (800f7e4 <USBD_LL_Init+0x98>)
 800f786:	2202      	movs	r2, #2
 800f788:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800f78a:	4b16      	ldr	r3, [pc, #88]	@ (800f7e4 <USBD_LL_Init+0x98>)
 800f78c:	2201      	movs	r2, #1
 800f78e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f790:	4b14      	ldr	r3, [pc, #80]	@ (800f7e4 <USBD_LL_Init+0x98>)
 800f792:	2200      	movs	r2, #0
 800f794:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f796:	4b13      	ldr	r3, [pc, #76]	@ (800f7e4 <USBD_LL_Init+0x98>)
 800f798:	2200      	movs	r2, #0
 800f79a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800f79c:	4b11      	ldr	r3, [pc, #68]	@ (800f7e4 <USBD_LL_Init+0x98>)
 800f79e:	2201      	movs	r2, #1
 800f7a0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800f7a2:	4b10      	ldr	r3, [pc, #64]	@ (800f7e4 <USBD_LL_Init+0x98>)
 800f7a4:	2201      	movs	r2, #1
 800f7a6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f7a8:	4b0e      	ldr	r3, [pc, #56]	@ (800f7e4 <USBD_LL_Init+0x98>)
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f7ae:	480d      	ldr	r0, [pc, #52]	@ (800f7e4 <USBD_LL_Init+0x98>)
 800f7b0:	f7f5 fbc2 	bl	8004f38 <HAL_PCD_Init>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d001      	beq.n	800f7be <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800f7ba:	f7f1 fc39 	bl	8001030 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f7be:	2180      	movs	r1, #128	@ 0x80
 800f7c0:	4808      	ldr	r0, [pc, #32]	@ (800f7e4 <USBD_LL_Init+0x98>)
 800f7c2:	f7f6 fe16 	bl	80063f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f7c6:	2240      	movs	r2, #64	@ 0x40
 800f7c8:	2100      	movs	r1, #0
 800f7ca:	4806      	ldr	r0, [pc, #24]	@ (800f7e4 <USBD_LL_Init+0x98>)
 800f7cc:	f7f6 fdca 	bl	8006364 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f7d0:	2280      	movs	r2, #128	@ 0x80
 800f7d2:	2101      	movs	r1, #1
 800f7d4:	4803      	ldr	r0, [pc, #12]	@ (800f7e4 <USBD_LL_Init+0x98>)
 800f7d6:	f7f6 fdc5 	bl	8006364 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800f7da:	2300      	movs	r3, #0
}
 800f7dc:	4618      	mov	r0, r3
 800f7de:	3708      	adds	r7, #8
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	bd80      	pop	{r7, pc}
 800f7e4:	24001e78 	.word	0x24001e78
 800f7e8:	40080000 	.word	0x40080000

0800f7ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b084      	sub	sp, #16
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f802:	4618      	mov	r0, r3
 800f804:	f7f5 fca4 	bl	8005150 <HAL_PCD_Start>
 800f808:	4603      	mov	r3, r0
 800f80a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f80c:	7bfb      	ldrb	r3, [r7, #15]
 800f80e:	4618      	mov	r0, r3
 800f810:	f000 f942 	bl	800fa98 <USBD_Get_USB_Status>
 800f814:	4603      	mov	r3, r0
 800f816:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f818:	7bbb      	ldrb	r3, [r7, #14]
}
 800f81a:	4618      	mov	r0, r3
 800f81c:	3710      	adds	r7, #16
 800f81e:	46bd      	mov	sp, r7
 800f820:	bd80      	pop	{r7, pc}

0800f822 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f822:	b580      	push	{r7, lr}
 800f824:	b084      	sub	sp, #16
 800f826:	af00      	add	r7, sp, #0
 800f828:	6078      	str	r0, [r7, #4]
 800f82a:	4608      	mov	r0, r1
 800f82c:	4611      	mov	r1, r2
 800f82e:	461a      	mov	r2, r3
 800f830:	4603      	mov	r3, r0
 800f832:	70fb      	strb	r3, [r7, #3]
 800f834:	460b      	mov	r3, r1
 800f836:	70bb      	strb	r3, [r7, #2]
 800f838:	4613      	mov	r3, r2
 800f83a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f83c:	2300      	movs	r3, #0
 800f83e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f840:	2300      	movs	r3, #0
 800f842:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f84a:	78bb      	ldrb	r3, [r7, #2]
 800f84c:	883a      	ldrh	r2, [r7, #0]
 800f84e:	78f9      	ldrb	r1, [r7, #3]
 800f850:	f7f6 f9a5 	bl	8005b9e <HAL_PCD_EP_Open>
 800f854:	4603      	mov	r3, r0
 800f856:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f858:	7bfb      	ldrb	r3, [r7, #15]
 800f85a:	4618      	mov	r0, r3
 800f85c:	f000 f91c 	bl	800fa98 <USBD_Get_USB_Status>
 800f860:	4603      	mov	r3, r0
 800f862:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f864:	7bbb      	ldrb	r3, [r7, #14]
}
 800f866:	4618      	mov	r0, r3
 800f868:	3710      	adds	r7, #16
 800f86a:	46bd      	mov	sp, r7
 800f86c:	bd80      	pop	{r7, pc}

0800f86e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f86e:	b580      	push	{r7, lr}
 800f870:	b084      	sub	sp, #16
 800f872:	af00      	add	r7, sp, #0
 800f874:	6078      	str	r0, [r7, #4]
 800f876:	460b      	mov	r3, r1
 800f878:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f87a:	2300      	movs	r3, #0
 800f87c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f87e:	2300      	movs	r3, #0
 800f880:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f888:	78fa      	ldrb	r2, [r7, #3]
 800f88a:	4611      	mov	r1, r2
 800f88c:	4618      	mov	r0, r3
 800f88e:	f7f6 f9ee 	bl	8005c6e <HAL_PCD_EP_Close>
 800f892:	4603      	mov	r3, r0
 800f894:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f896:	7bfb      	ldrb	r3, [r7, #15]
 800f898:	4618      	mov	r0, r3
 800f89a:	f000 f8fd 	bl	800fa98 <USBD_Get_USB_Status>
 800f89e:	4603      	mov	r3, r0
 800f8a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f8a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	3710      	adds	r7, #16
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	bd80      	pop	{r7, pc}

0800f8ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b084      	sub	sp, #16
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
 800f8b4:	460b      	mov	r3, r1
 800f8b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f8bc:	2300      	movs	r3, #0
 800f8be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f8c6:	78fa      	ldrb	r2, [r7, #3]
 800f8c8:	4611      	mov	r1, r2
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	f7f6 faa6 	bl	8005e1c <HAL_PCD_EP_SetStall>
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f8d4:	7bfb      	ldrb	r3, [r7, #15]
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	f000 f8de 	bl	800fa98 <USBD_Get_USB_Status>
 800f8dc:	4603      	mov	r3, r0
 800f8de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f8e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	3710      	adds	r7, #16
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	bd80      	pop	{r7, pc}

0800f8ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f8ea:	b580      	push	{r7, lr}
 800f8ec:	b084      	sub	sp, #16
 800f8ee:	af00      	add	r7, sp, #0
 800f8f0:	6078      	str	r0, [r7, #4]
 800f8f2:	460b      	mov	r3, r1
 800f8f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f904:	78fa      	ldrb	r2, [r7, #3]
 800f906:	4611      	mov	r1, r2
 800f908:	4618      	mov	r0, r3
 800f90a:	f7f6 faea 	bl	8005ee2 <HAL_PCD_EP_ClrStall>
 800f90e:	4603      	mov	r3, r0
 800f910:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f912:	7bfb      	ldrb	r3, [r7, #15]
 800f914:	4618      	mov	r0, r3
 800f916:	f000 f8bf 	bl	800fa98 <USBD_Get_USB_Status>
 800f91a:	4603      	mov	r3, r0
 800f91c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f91e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f920:	4618      	mov	r0, r3
 800f922:	3710      	adds	r7, #16
 800f924:	46bd      	mov	sp, r7
 800f926:	bd80      	pop	{r7, pc}

0800f928 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f928:	b480      	push	{r7}
 800f92a:	b085      	sub	sp, #20
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
 800f930:	460b      	mov	r3, r1
 800f932:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f93a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f93c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f940:	2b00      	cmp	r3, #0
 800f942:	da0b      	bge.n	800f95c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f944:	78fb      	ldrb	r3, [r7, #3]
 800f946:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f94a:	68f9      	ldr	r1, [r7, #12]
 800f94c:	4613      	mov	r3, r2
 800f94e:	00db      	lsls	r3, r3, #3
 800f950:	4413      	add	r3, r2
 800f952:	009b      	lsls	r3, r3, #2
 800f954:	440b      	add	r3, r1
 800f956:	3316      	adds	r3, #22
 800f958:	781b      	ldrb	r3, [r3, #0]
 800f95a:	e00b      	b.n	800f974 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f95c:	78fb      	ldrb	r3, [r7, #3]
 800f95e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f962:	68f9      	ldr	r1, [r7, #12]
 800f964:	4613      	mov	r3, r2
 800f966:	00db      	lsls	r3, r3, #3
 800f968:	4413      	add	r3, r2
 800f96a:	009b      	lsls	r3, r3, #2
 800f96c:	440b      	add	r3, r1
 800f96e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800f972:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f974:	4618      	mov	r0, r3
 800f976:	3714      	adds	r7, #20
 800f978:	46bd      	mov	sp, r7
 800f97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97e:	4770      	bx	lr

0800f980 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b084      	sub	sp, #16
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
 800f988:	460b      	mov	r3, r1
 800f98a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f98c:	2300      	movs	r3, #0
 800f98e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f990:	2300      	movs	r3, #0
 800f992:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f99a:	78fa      	ldrb	r2, [r7, #3]
 800f99c:	4611      	mov	r1, r2
 800f99e:	4618      	mov	r0, r3
 800f9a0:	f7f6 f8d9 	bl	8005b56 <HAL_PCD_SetAddress>
 800f9a4:	4603      	mov	r3, r0
 800f9a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f9a8:	7bfb      	ldrb	r3, [r7, #15]
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	f000 f874 	bl	800fa98 <USBD_Get_USB_Status>
 800f9b0:	4603      	mov	r3, r0
 800f9b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f9b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	3710      	adds	r7, #16
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	bd80      	pop	{r7, pc}

0800f9be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f9be:	b580      	push	{r7, lr}
 800f9c0:	b086      	sub	sp, #24
 800f9c2:	af00      	add	r7, sp, #0
 800f9c4:	60f8      	str	r0, [r7, #12]
 800f9c6:	607a      	str	r2, [r7, #4]
 800f9c8:	603b      	str	r3, [r7, #0]
 800f9ca:	460b      	mov	r3, r1
 800f9cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f9dc:	7af9      	ldrb	r1, [r7, #11]
 800f9de:	683b      	ldr	r3, [r7, #0]
 800f9e0:	687a      	ldr	r2, [r7, #4]
 800f9e2:	f7f6 f9e1 	bl	8005da8 <HAL_PCD_EP_Transmit>
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f9ea:	7dfb      	ldrb	r3, [r7, #23]
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	f000 f853 	bl	800fa98 <USBD_Get_USB_Status>
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f9f6:	7dbb      	ldrb	r3, [r7, #22]
}
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	3718      	adds	r7, #24
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	bd80      	pop	{r7, pc}

0800fa00 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b086      	sub	sp, #24
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	60f8      	str	r0, [r7, #12]
 800fa08:	607a      	str	r2, [r7, #4]
 800fa0a:	603b      	str	r3, [r7, #0]
 800fa0c:	460b      	mov	r3, r1
 800fa0e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa10:	2300      	movs	r3, #0
 800fa12:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa14:	2300      	movs	r3, #0
 800fa16:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800fa1e:	7af9      	ldrb	r1, [r7, #11]
 800fa20:	683b      	ldr	r3, [r7, #0]
 800fa22:	687a      	ldr	r2, [r7, #4]
 800fa24:	f7f6 f96d 	bl	8005d02 <HAL_PCD_EP_Receive>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa2c:	7dfb      	ldrb	r3, [r7, #23]
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f000 f832 	bl	800fa98 <USBD_Get_USB_Status>
 800fa34:	4603      	mov	r3, r0
 800fa36:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fa38:	7dbb      	ldrb	r3, [r7, #22]
}
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	3718      	adds	r7, #24
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	bd80      	pop	{r7, pc}

0800fa42 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fa42:	b580      	push	{r7, lr}
 800fa44:	b082      	sub	sp, #8
 800fa46:	af00      	add	r7, sp, #0
 800fa48:	6078      	str	r0, [r7, #4]
 800fa4a:	460b      	mov	r3, r1
 800fa4c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fa54:	78fa      	ldrb	r2, [r7, #3]
 800fa56:	4611      	mov	r1, r2
 800fa58:	4618      	mov	r0, r3
 800fa5a:	f7f6 f98d 	bl	8005d78 <HAL_PCD_EP_GetRxCount>
 800fa5e:	4603      	mov	r3, r0
}
 800fa60:	4618      	mov	r0, r3
 800fa62:	3708      	adds	r7, #8
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}

0800fa68 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fa68:	b480      	push	{r7}
 800fa6a:	b083      	sub	sp, #12
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fa70:	4b03      	ldr	r3, [pc, #12]	@ (800fa80 <USBD_static_malloc+0x18>)
}
 800fa72:	4618      	mov	r0, r3
 800fa74:	370c      	adds	r7, #12
 800fa76:	46bd      	mov	sp, r7
 800fa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7c:	4770      	bx	lr
 800fa7e:	bf00      	nop
 800fa80:	2400235c 	.word	0x2400235c

0800fa84 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fa84:	b480      	push	{r7}
 800fa86:	b083      	sub	sp, #12
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800fa8c:	bf00      	nop
 800fa8e:	370c      	adds	r7, #12
 800fa90:	46bd      	mov	sp, r7
 800fa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa96:	4770      	bx	lr

0800fa98 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fa98:	b480      	push	{r7}
 800fa9a:	b085      	sub	sp, #20
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	4603      	mov	r3, r0
 800faa0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800faa2:	2300      	movs	r3, #0
 800faa4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800faa6:	79fb      	ldrb	r3, [r7, #7]
 800faa8:	2b03      	cmp	r3, #3
 800faaa:	d817      	bhi.n	800fadc <USBD_Get_USB_Status+0x44>
 800faac:	a201      	add	r2, pc, #4	@ (adr r2, 800fab4 <USBD_Get_USB_Status+0x1c>)
 800faae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fab2:	bf00      	nop
 800fab4:	0800fac5 	.word	0x0800fac5
 800fab8:	0800facb 	.word	0x0800facb
 800fabc:	0800fad1 	.word	0x0800fad1
 800fac0:	0800fad7 	.word	0x0800fad7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fac4:	2300      	movs	r3, #0
 800fac6:	73fb      	strb	r3, [r7, #15]
    break;
 800fac8:	e00b      	b.n	800fae2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800faca:	2303      	movs	r3, #3
 800facc:	73fb      	strb	r3, [r7, #15]
    break;
 800face:	e008      	b.n	800fae2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fad0:	2301      	movs	r3, #1
 800fad2:	73fb      	strb	r3, [r7, #15]
    break;
 800fad4:	e005      	b.n	800fae2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fad6:	2303      	movs	r3, #3
 800fad8:	73fb      	strb	r3, [r7, #15]
    break;
 800fada:	e002      	b.n	800fae2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fadc:	2303      	movs	r3, #3
 800fade:	73fb      	strb	r3, [r7, #15]
    break;
 800fae0:	bf00      	nop
  }
  return usb_status;
 800fae2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fae4:	4618      	mov	r0, r3
 800fae6:	3714      	adds	r7, #20
 800fae8:	46bd      	mov	sp, r7
 800faea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faee:	4770      	bx	lr

0800faf0 <__cvt>:
 800faf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800faf2:	ed2d 8b02 	vpush	{d8}
 800faf6:	eeb0 8b40 	vmov.f64	d8, d0
 800fafa:	b085      	sub	sp, #20
 800fafc:	4617      	mov	r7, r2
 800fafe:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800fb00:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fb02:	ee18 2a90 	vmov	r2, s17
 800fb06:	f025 0520 	bic.w	r5, r5, #32
 800fb0a:	2a00      	cmp	r2, #0
 800fb0c:	bfb6      	itet	lt
 800fb0e:	222d      	movlt	r2, #45	@ 0x2d
 800fb10:	2200      	movge	r2, #0
 800fb12:	eeb1 8b40 	vneglt.f64	d8, d0
 800fb16:	2d46      	cmp	r5, #70	@ 0x46
 800fb18:	460c      	mov	r4, r1
 800fb1a:	701a      	strb	r2, [r3, #0]
 800fb1c:	d004      	beq.n	800fb28 <__cvt+0x38>
 800fb1e:	2d45      	cmp	r5, #69	@ 0x45
 800fb20:	d100      	bne.n	800fb24 <__cvt+0x34>
 800fb22:	3401      	adds	r4, #1
 800fb24:	2102      	movs	r1, #2
 800fb26:	e000      	b.n	800fb2a <__cvt+0x3a>
 800fb28:	2103      	movs	r1, #3
 800fb2a:	ab03      	add	r3, sp, #12
 800fb2c:	9301      	str	r3, [sp, #4]
 800fb2e:	ab02      	add	r3, sp, #8
 800fb30:	9300      	str	r3, [sp, #0]
 800fb32:	4622      	mov	r2, r4
 800fb34:	4633      	mov	r3, r6
 800fb36:	eeb0 0b48 	vmov.f64	d0, d8
 800fb3a:	f000 fe41 	bl	80107c0 <_dtoa_r>
 800fb3e:	2d47      	cmp	r5, #71	@ 0x47
 800fb40:	d114      	bne.n	800fb6c <__cvt+0x7c>
 800fb42:	07fb      	lsls	r3, r7, #31
 800fb44:	d50a      	bpl.n	800fb5c <__cvt+0x6c>
 800fb46:	1902      	adds	r2, r0, r4
 800fb48:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fb4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb50:	bf08      	it	eq
 800fb52:	9203      	streq	r2, [sp, #12]
 800fb54:	2130      	movs	r1, #48	@ 0x30
 800fb56:	9b03      	ldr	r3, [sp, #12]
 800fb58:	4293      	cmp	r3, r2
 800fb5a:	d319      	bcc.n	800fb90 <__cvt+0xa0>
 800fb5c:	9b03      	ldr	r3, [sp, #12]
 800fb5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fb60:	1a1b      	subs	r3, r3, r0
 800fb62:	6013      	str	r3, [r2, #0]
 800fb64:	b005      	add	sp, #20
 800fb66:	ecbd 8b02 	vpop	{d8}
 800fb6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb6c:	2d46      	cmp	r5, #70	@ 0x46
 800fb6e:	eb00 0204 	add.w	r2, r0, r4
 800fb72:	d1e9      	bne.n	800fb48 <__cvt+0x58>
 800fb74:	7803      	ldrb	r3, [r0, #0]
 800fb76:	2b30      	cmp	r3, #48	@ 0x30
 800fb78:	d107      	bne.n	800fb8a <__cvt+0x9a>
 800fb7a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fb7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb82:	bf1c      	itt	ne
 800fb84:	f1c4 0401 	rsbne	r4, r4, #1
 800fb88:	6034      	strne	r4, [r6, #0]
 800fb8a:	6833      	ldr	r3, [r6, #0]
 800fb8c:	441a      	add	r2, r3
 800fb8e:	e7db      	b.n	800fb48 <__cvt+0x58>
 800fb90:	1c5c      	adds	r4, r3, #1
 800fb92:	9403      	str	r4, [sp, #12]
 800fb94:	7019      	strb	r1, [r3, #0]
 800fb96:	e7de      	b.n	800fb56 <__cvt+0x66>

0800fb98 <__exponent>:
 800fb98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb9a:	2900      	cmp	r1, #0
 800fb9c:	bfba      	itte	lt
 800fb9e:	4249      	neglt	r1, r1
 800fba0:	232d      	movlt	r3, #45	@ 0x2d
 800fba2:	232b      	movge	r3, #43	@ 0x2b
 800fba4:	2909      	cmp	r1, #9
 800fba6:	7002      	strb	r2, [r0, #0]
 800fba8:	7043      	strb	r3, [r0, #1]
 800fbaa:	dd29      	ble.n	800fc00 <__exponent+0x68>
 800fbac:	f10d 0307 	add.w	r3, sp, #7
 800fbb0:	461d      	mov	r5, r3
 800fbb2:	270a      	movs	r7, #10
 800fbb4:	461a      	mov	r2, r3
 800fbb6:	fbb1 f6f7 	udiv	r6, r1, r7
 800fbba:	fb07 1416 	mls	r4, r7, r6, r1
 800fbbe:	3430      	adds	r4, #48	@ 0x30
 800fbc0:	f802 4c01 	strb.w	r4, [r2, #-1]
 800fbc4:	460c      	mov	r4, r1
 800fbc6:	2c63      	cmp	r4, #99	@ 0x63
 800fbc8:	f103 33ff 	add.w	r3, r3, #4294967295
 800fbcc:	4631      	mov	r1, r6
 800fbce:	dcf1      	bgt.n	800fbb4 <__exponent+0x1c>
 800fbd0:	3130      	adds	r1, #48	@ 0x30
 800fbd2:	1e94      	subs	r4, r2, #2
 800fbd4:	f803 1c01 	strb.w	r1, [r3, #-1]
 800fbd8:	1c41      	adds	r1, r0, #1
 800fbda:	4623      	mov	r3, r4
 800fbdc:	42ab      	cmp	r3, r5
 800fbde:	d30a      	bcc.n	800fbf6 <__exponent+0x5e>
 800fbe0:	f10d 0309 	add.w	r3, sp, #9
 800fbe4:	1a9b      	subs	r3, r3, r2
 800fbe6:	42ac      	cmp	r4, r5
 800fbe8:	bf88      	it	hi
 800fbea:	2300      	movhi	r3, #0
 800fbec:	3302      	adds	r3, #2
 800fbee:	4403      	add	r3, r0
 800fbf0:	1a18      	subs	r0, r3, r0
 800fbf2:	b003      	add	sp, #12
 800fbf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbf6:	f813 6b01 	ldrb.w	r6, [r3], #1
 800fbfa:	f801 6f01 	strb.w	r6, [r1, #1]!
 800fbfe:	e7ed      	b.n	800fbdc <__exponent+0x44>
 800fc00:	2330      	movs	r3, #48	@ 0x30
 800fc02:	3130      	adds	r1, #48	@ 0x30
 800fc04:	7083      	strb	r3, [r0, #2]
 800fc06:	70c1      	strb	r1, [r0, #3]
 800fc08:	1d03      	adds	r3, r0, #4
 800fc0a:	e7f1      	b.n	800fbf0 <__exponent+0x58>
 800fc0c:	0000      	movs	r0, r0
	...

0800fc10 <_printf_float>:
 800fc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc14:	b08d      	sub	sp, #52	@ 0x34
 800fc16:	460c      	mov	r4, r1
 800fc18:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800fc1c:	4616      	mov	r6, r2
 800fc1e:	461f      	mov	r7, r3
 800fc20:	4605      	mov	r5, r0
 800fc22:	f000 fccb 	bl	80105bc <_localeconv_r>
 800fc26:	f8d0 b000 	ldr.w	fp, [r0]
 800fc2a:	4658      	mov	r0, fp
 800fc2c:	f7f0 fba8 	bl	8000380 <strlen>
 800fc30:	2300      	movs	r3, #0
 800fc32:	930a      	str	r3, [sp, #40]	@ 0x28
 800fc34:	f8d8 3000 	ldr.w	r3, [r8]
 800fc38:	f894 9018 	ldrb.w	r9, [r4, #24]
 800fc3c:	6822      	ldr	r2, [r4, #0]
 800fc3e:	9005      	str	r0, [sp, #20]
 800fc40:	3307      	adds	r3, #7
 800fc42:	f023 0307 	bic.w	r3, r3, #7
 800fc46:	f103 0108 	add.w	r1, r3, #8
 800fc4a:	f8c8 1000 	str.w	r1, [r8]
 800fc4e:	ed93 0b00 	vldr	d0, [r3]
 800fc52:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800feb0 <_printf_float+0x2a0>
 800fc56:	eeb0 7bc0 	vabs.f64	d7, d0
 800fc5a:	eeb4 7b46 	vcmp.f64	d7, d6
 800fc5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc62:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800fc66:	dd24      	ble.n	800fcb2 <_printf_float+0xa2>
 800fc68:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800fc6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc70:	d502      	bpl.n	800fc78 <_printf_float+0x68>
 800fc72:	232d      	movs	r3, #45	@ 0x2d
 800fc74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fc78:	498f      	ldr	r1, [pc, #572]	@ (800feb8 <_printf_float+0x2a8>)
 800fc7a:	4b90      	ldr	r3, [pc, #576]	@ (800febc <_printf_float+0x2ac>)
 800fc7c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800fc80:	bf94      	ite	ls
 800fc82:	4688      	movls	r8, r1
 800fc84:	4698      	movhi	r8, r3
 800fc86:	f022 0204 	bic.w	r2, r2, #4
 800fc8a:	2303      	movs	r3, #3
 800fc8c:	6123      	str	r3, [r4, #16]
 800fc8e:	6022      	str	r2, [r4, #0]
 800fc90:	f04f 0a00 	mov.w	sl, #0
 800fc94:	9700      	str	r7, [sp, #0]
 800fc96:	4633      	mov	r3, r6
 800fc98:	aa0b      	add	r2, sp, #44	@ 0x2c
 800fc9a:	4621      	mov	r1, r4
 800fc9c:	4628      	mov	r0, r5
 800fc9e:	f000 f9d1 	bl	8010044 <_printf_common>
 800fca2:	3001      	adds	r0, #1
 800fca4:	f040 8089 	bne.w	800fdba <_printf_float+0x1aa>
 800fca8:	f04f 30ff 	mov.w	r0, #4294967295
 800fcac:	b00d      	add	sp, #52	@ 0x34
 800fcae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcb2:	eeb4 0b40 	vcmp.f64	d0, d0
 800fcb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcba:	d709      	bvc.n	800fcd0 <_printf_float+0xc0>
 800fcbc:	ee10 3a90 	vmov	r3, s1
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	bfbc      	itt	lt
 800fcc4:	232d      	movlt	r3, #45	@ 0x2d
 800fcc6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800fcca:	497d      	ldr	r1, [pc, #500]	@ (800fec0 <_printf_float+0x2b0>)
 800fccc:	4b7d      	ldr	r3, [pc, #500]	@ (800fec4 <_printf_float+0x2b4>)
 800fcce:	e7d5      	b.n	800fc7c <_printf_float+0x6c>
 800fcd0:	6863      	ldr	r3, [r4, #4]
 800fcd2:	1c59      	adds	r1, r3, #1
 800fcd4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800fcd8:	d139      	bne.n	800fd4e <_printf_float+0x13e>
 800fcda:	2306      	movs	r3, #6
 800fcdc:	6063      	str	r3, [r4, #4]
 800fcde:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800fce2:	2300      	movs	r3, #0
 800fce4:	6022      	str	r2, [r4, #0]
 800fce6:	9303      	str	r3, [sp, #12]
 800fce8:	ab0a      	add	r3, sp, #40	@ 0x28
 800fcea:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800fcee:	ab09      	add	r3, sp, #36	@ 0x24
 800fcf0:	9300      	str	r3, [sp, #0]
 800fcf2:	6861      	ldr	r1, [r4, #4]
 800fcf4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800fcf8:	4628      	mov	r0, r5
 800fcfa:	f7ff fef9 	bl	800faf0 <__cvt>
 800fcfe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fd02:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fd04:	4680      	mov	r8, r0
 800fd06:	d129      	bne.n	800fd5c <_printf_float+0x14c>
 800fd08:	1cc8      	adds	r0, r1, #3
 800fd0a:	db02      	blt.n	800fd12 <_printf_float+0x102>
 800fd0c:	6863      	ldr	r3, [r4, #4]
 800fd0e:	4299      	cmp	r1, r3
 800fd10:	dd41      	ble.n	800fd96 <_printf_float+0x186>
 800fd12:	f1a9 0902 	sub.w	r9, r9, #2
 800fd16:	fa5f f989 	uxtb.w	r9, r9
 800fd1a:	3901      	subs	r1, #1
 800fd1c:	464a      	mov	r2, r9
 800fd1e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800fd22:	9109      	str	r1, [sp, #36]	@ 0x24
 800fd24:	f7ff ff38 	bl	800fb98 <__exponent>
 800fd28:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fd2a:	1813      	adds	r3, r2, r0
 800fd2c:	2a01      	cmp	r2, #1
 800fd2e:	4682      	mov	sl, r0
 800fd30:	6123      	str	r3, [r4, #16]
 800fd32:	dc02      	bgt.n	800fd3a <_printf_float+0x12a>
 800fd34:	6822      	ldr	r2, [r4, #0]
 800fd36:	07d2      	lsls	r2, r2, #31
 800fd38:	d501      	bpl.n	800fd3e <_printf_float+0x12e>
 800fd3a:	3301      	adds	r3, #1
 800fd3c:	6123      	str	r3, [r4, #16]
 800fd3e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d0a6      	beq.n	800fc94 <_printf_float+0x84>
 800fd46:	232d      	movs	r3, #45	@ 0x2d
 800fd48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fd4c:	e7a2      	b.n	800fc94 <_printf_float+0x84>
 800fd4e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fd52:	d1c4      	bne.n	800fcde <_printf_float+0xce>
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d1c2      	bne.n	800fcde <_printf_float+0xce>
 800fd58:	2301      	movs	r3, #1
 800fd5a:	e7bf      	b.n	800fcdc <_printf_float+0xcc>
 800fd5c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800fd60:	d9db      	bls.n	800fd1a <_printf_float+0x10a>
 800fd62:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800fd66:	d118      	bne.n	800fd9a <_printf_float+0x18a>
 800fd68:	2900      	cmp	r1, #0
 800fd6a:	6863      	ldr	r3, [r4, #4]
 800fd6c:	dd0b      	ble.n	800fd86 <_printf_float+0x176>
 800fd6e:	6121      	str	r1, [r4, #16]
 800fd70:	b913      	cbnz	r3, 800fd78 <_printf_float+0x168>
 800fd72:	6822      	ldr	r2, [r4, #0]
 800fd74:	07d0      	lsls	r0, r2, #31
 800fd76:	d502      	bpl.n	800fd7e <_printf_float+0x16e>
 800fd78:	3301      	adds	r3, #1
 800fd7a:	440b      	add	r3, r1
 800fd7c:	6123      	str	r3, [r4, #16]
 800fd7e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800fd80:	f04f 0a00 	mov.w	sl, #0
 800fd84:	e7db      	b.n	800fd3e <_printf_float+0x12e>
 800fd86:	b913      	cbnz	r3, 800fd8e <_printf_float+0x17e>
 800fd88:	6822      	ldr	r2, [r4, #0]
 800fd8a:	07d2      	lsls	r2, r2, #31
 800fd8c:	d501      	bpl.n	800fd92 <_printf_float+0x182>
 800fd8e:	3302      	adds	r3, #2
 800fd90:	e7f4      	b.n	800fd7c <_printf_float+0x16c>
 800fd92:	2301      	movs	r3, #1
 800fd94:	e7f2      	b.n	800fd7c <_printf_float+0x16c>
 800fd96:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800fd9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd9c:	4299      	cmp	r1, r3
 800fd9e:	db05      	blt.n	800fdac <_printf_float+0x19c>
 800fda0:	6823      	ldr	r3, [r4, #0]
 800fda2:	6121      	str	r1, [r4, #16]
 800fda4:	07d8      	lsls	r0, r3, #31
 800fda6:	d5ea      	bpl.n	800fd7e <_printf_float+0x16e>
 800fda8:	1c4b      	adds	r3, r1, #1
 800fdaa:	e7e7      	b.n	800fd7c <_printf_float+0x16c>
 800fdac:	2900      	cmp	r1, #0
 800fdae:	bfd4      	ite	le
 800fdb0:	f1c1 0202 	rsble	r2, r1, #2
 800fdb4:	2201      	movgt	r2, #1
 800fdb6:	4413      	add	r3, r2
 800fdb8:	e7e0      	b.n	800fd7c <_printf_float+0x16c>
 800fdba:	6823      	ldr	r3, [r4, #0]
 800fdbc:	055a      	lsls	r2, r3, #21
 800fdbe:	d407      	bmi.n	800fdd0 <_printf_float+0x1c0>
 800fdc0:	6923      	ldr	r3, [r4, #16]
 800fdc2:	4642      	mov	r2, r8
 800fdc4:	4631      	mov	r1, r6
 800fdc6:	4628      	mov	r0, r5
 800fdc8:	47b8      	blx	r7
 800fdca:	3001      	adds	r0, #1
 800fdcc:	d12a      	bne.n	800fe24 <_printf_float+0x214>
 800fdce:	e76b      	b.n	800fca8 <_printf_float+0x98>
 800fdd0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800fdd4:	f240 80e0 	bls.w	800ff98 <_printf_float+0x388>
 800fdd8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800fddc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fde0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fde4:	d133      	bne.n	800fe4e <_printf_float+0x23e>
 800fde6:	4a38      	ldr	r2, [pc, #224]	@ (800fec8 <_printf_float+0x2b8>)
 800fde8:	2301      	movs	r3, #1
 800fdea:	4631      	mov	r1, r6
 800fdec:	4628      	mov	r0, r5
 800fdee:	47b8      	blx	r7
 800fdf0:	3001      	adds	r0, #1
 800fdf2:	f43f af59 	beq.w	800fca8 <_printf_float+0x98>
 800fdf6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800fdfa:	4543      	cmp	r3, r8
 800fdfc:	db02      	blt.n	800fe04 <_printf_float+0x1f4>
 800fdfe:	6823      	ldr	r3, [r4, #0]
 800fe00:	07d8      	lsls	r0, r3, #31
 800fe02:	d50f      	bpl.n	800fe24 <_printf_float+0x214>
 800fe04:	9b05      	ldr	r3, [sp, #20]
 800fe06:	465a      	mov	r2, fp
 800fe08:	4631      	mov	r1, r6
 800fe0a:	4628      	mov	r0, r5
 800fe0c:	47b8      	blx	r7
 800fe0e:	3001      	adds	r0, #1
 800fe10:	f43f af4a 	beq.w	800fca8 <_printf_float+0x98>
 800fe14:	f04f 0900 	mov.w	r9, #0
 800fe18:	f108 38ff 	add.w	r8, r8, #4294967295
 800fe1c:	f104 0a1a 	add.w	sl, r4, #26
 800fe20:	45c8      	cmp	r8, r9
 800fe22:	dc09      	bgt.n	800fe38 <_printf_float+0x228>
 800fe24:	6823      	ldr	r3, [r4, #0]
 800fe26:	079b      	lsls	r3, r3, #30
 800fe28:	f100 8107 	bmi.w	801003a <_printf_float+0x42a>
 800fe2c:	68e0      	ldr	r0, [r4, #12]
 800fe2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fe30:	4298      	cmp	r0, r3
 800fe32:	bfb8      	it	lt
 800fe34:	4618      	movlt	r0, r3
 800fe36:	e739      	b.n	800fcac <_printf_float+0x9c>
 800fe38:	2301      	movs	r3, #1
 800fe3a:	4652      	mov	r2, sl
 800fe3c:	4631      	mov	r1, r6
 800fe3e:	4628      	mov	r0, r5
 800fe40:	47b8      	blx	r7
 800fe42:	3001      	adds	r0, #1
 800fe44:	f43f af30 	beq.w	800fca8 <_printf_float+0x98>
 800fe48:	f109 0901 	add.w	r9, r9, #1
 800fe4c:	e7e8      	b.n	800fe20 <_printf_float+0x210>
 800fe4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	dc3b      	bgt.n	800fecc <_printf_float+0x2bc>
 800fe54:	4a1c      	ldr	r2, [pc, #112]	@ (800fec8 <_printf_float+0x2b8>)
 800fe56:	2301      	movs	r3, #1
 800fe58:	4631      	mov	r1, r6
 800fe5a:	4628      	mov	r0, r5
 800fe5c:	47b8      	blx	r7
 800fe5e:	3001      	adds	r0, #1
 800fe60:	f43f af22 	beq.w	800fca8 <_printf_float+0x98>
 800fe64:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800fe68:	ea59 0303 	orrs.w	r3, r9, r3
 800fe6c:	d102      	bne.n	800fe74 <_printf_float+0x264>
 800fe6e:	6823      	ldr	r3, [r4, #0]
 800fe70:	07d9      	lsls	r1, r3, #31
 800fe72:	d5d7      	bpl.n	800fe24 <_printf_float+0x214>
 800fe74:	9b05      	ldr	r3, [sp, #20]
 800fe76:	465a      	mov	r2, fp
 800fe78:	4631      	mov	r1, r6
 800fe7a:	4628      	mov	r0, r5
 800fe7c:	47b8      	blx	r7
 800fe7e:	3001      	adds	r0, #1
 800fe80:	f43f af12 	beq.w	800fca8 <_printf_float+0x98>
 800fe84:	f04f 0a00 	mov.w	sl, #0
 800fe88:	f104 0b1a 	add.w	fp, r4, #26
 800fe8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe8e:	425b      	negs	r3, r3
 800fe90:	4553      	cmp	r3, sl
 800fe92:	dc01      	bgt.n	800fe98 <_printf_float+0x288>
 800fe94:	464b      	mov	r3, r9
 800fe96:	e794      	b.n	800fdc2 <_printf_float+0x1b2>
 800fe98:	2301      	movs	r3, #1
 800fe9a:	465a      	mov	r2, fp
 800fe9c:	4631      	mov	r1, r6
 800fe9e:	4628      	mov	r0, r5
 800fea0:	47b8      	blx	r7
 800fea2:	3001      	adds	r0, #1
 800fea4:	f43f af00 	beq.w	800fca8 <_printf_float+0x98>
 800fea8:	f10a 0a01 	add.w	sl, sl, #1
 800feac:	e7ee      	b.n	800fe8c <_printf_float+0x27c>
 800feae:	bf00      	nop
 800feb0:	ffffffff 	.word	0xffffffff
 800feb4:	7fefffff 	.word	0x7fefffff
 800feb8:	0801278c 	.word	0x0801278c
 800febc:	08012790 	.word	0x08012790
 800fec0:	08012794 	.word	0x08012794
 800fec4:	08012798 	.word	0x08012798
 800fec8:	0801279c 	.word	0x0801279c
 800fecc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fece:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fed2:	4553      	cmp	r3, sl
 800fed4:	bfa8      	it	ge
 800fed6:	4653      	movge	r3, sl
 800fed8:	2b00      	cmp	r3, #0
 800feda:	4699      	mov	r9, r3
 800fedc:	dc37      	bgt.n	800ff4e <_printf_float+0x33e>
 800fede:	2300      	movs	r3, #0
 800fee0:	9307      	str	r3, [sp, #28]
 800fee2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fee6:	f104 021a 	add.w	r2, r4, #26
 800feea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800feec:	9907      	ldr	r1, [sp, #28]
 800feee:	9306      	str	r3, [sp, #24]
 800fef0:	eba3 0309 	sub.w	r3, r3, r9
 800fef4:	428b      	cmp	r3, r1
 800fef6:	dc31      	bgt.n	800ff5c <_printf_float+0x34c>
 800fef8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fefa:	459a      	cmp	sl, r3
 800fefc:	dc3b      	bgt.n	800ff76 <_printf_float+0x366>
 800fefe:	6823      	ldr	r3, [r4, #0]
 800ff00:	07da      	lsls	r2, r3, #31
 800ff02:	d438      	bmi.n	800ff76 <_printf_float+0x366>
 800ff04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff06:	ebaa 0903 	sub.w	r9, sl, r3
 800ff0a:	9b06      	ldr	r3, [sp, #24]
 800ff0c:	ebaa 0303 	sub.w	r3, sl, r3
 800ff10:	4599      	cmp	r9, r3
 800ff12:	bfa8      	it	ge
 800ff14:	4699      	movge	r9, r3
 800ff16:	f1b9 0f00 	cmp.w	r9, #0
 800ff1a:	dc34      	bgt.n	800ff86 <_printf_float+0x376>
 800ff1c:	f04f 0800 	mov.w	r8, #0
 800ff20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ff24:	f104 0b1a 	add.w	fp, r4, #26
 800ff28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff2a:	ebaa 0303 	sub.w	r3, sl, r3
 800ff2e:	eba3 0309 	sub.w	r3, r3, r9
 800ff32:	4543      	cmp	r3, r8
 800ff34:	f77f af76 	ble.w	800fe24 <_printf_float+0x214>
 800ff38:	2301      	movs	r3, #1
 800ff3a:	465a      	mov	r2, fp
 800ff3c:	4631      	mov	r1, r6
 800ff3e:	4628      	mov	r0, r5
 800ff40:	47b8      	blx	r7
 800ff42:	3001      	adds	r0, #1
 800ff44:	f43f aeb0 	beq.w	800fca8 <_printf_float+0x98>
 800ff48:	f108 0801 	add.w	r8, r8, #1
 800ff4c:	e7ec      	b.n	800ff28 <_printf_float+0x318>
 800ff4e:	4642      	mov	r2, r8
 800ff50:	4631      	mov	r1, r6
 800ff52:	4628      	mov	r0, r5
 800ff54:	47b8      	blx	r7
 800ff56:	3001      	adds	r0, #1
 800ff58:	d1c1      	bne.n	800fede <_printf_float+0x2ce>
 800ff5a:	e6a5      	b.n	800fca8 <_printf_float+0x98>
 800ff5c:	2301      	movs	r3, #1
 800ff5e:	4631      	mov	r1, r6
 800ff60:	4628      	mov	r0, r5
 800ff62:	9206      	str	r2, [sp, #24]
 800ff64:	47b8      	blx	r7
 800ff66:	3001      	adds	r0, #1
 800ff68:	f43f ae9e 	beq.w	800fca8 <_printf_float+0x98>
 800ff6c:	9b07      	ldr	r3, [sp, #28]
 800ff6e:	9a06      	ldr	r2, [sp, #24]
 800ff70:	3301      	adds	r3, #1
 800ff72:	9307      	str	r3, [sp, #28]
 800ff74:	e7b9      	b.n	800feea <_printf_float+0x2da>
 800ff76:	9b05      	ldr	r3, [sp, #20]
 800ff78:	465a      	mov	r2, fp
 800ff7a:	4631      	mov	r1, r6
 800ff7c:	4628      	mov	r0, r5
 800ff7e:	47b8      	blx	r7
 800ff80:	3001      	adds	r0, #1
 800ff82:	d1bf      	bne.n	800ff04 <_printf_float+0x2f4>
 800ff84:	e690      	b.n	800fca8 <_printf_float+0x98>
 800ff86:	9a06      	ldr	r2, [sp, #24]
 800ff88:	464b      	mov	r3, r9
 800ff8a:	4442      	add	r2, r8
 800ff8c:	4631      	mov	r1, r6
 800ff8e:	4628      	mov	r0, r5
 800ff90:	47b8      	blx	r7
 800ff92:	3001      	adds	r0, #1
 800ff94:	d1c2      	bne.n	800ff1c <_printf_float+0x30c>
 800ff96:	e687      	b.n	800fca8 <_printf_float+0x98>
 800ff98:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800ff9c:	f1b9 0f01 	cmp.w	r9, #1
 800ffa0:	dc01      	bgt.n	800ffa6 <_printf_float+0x396>
 800ffa2:	07db      	lsls	r3, r3, #31
 800ffa4:	d536      	bpl.n	8010014 <_printf_float+0x404>
 800ffa6:	2301      	movs	r3, #1
 800ffa8:	4642      	mov	r2, r8
 800ffaa:	4631      	mov	r1, r6
 800ffac:	4628      	mov	r0, r5
 800ffae:	47b8      	blx	r7
 800ffb0:	3001      	adds	r0, #1
 800ffb2:	f43f ae79 	beq.w	800fca8 <_printf_float+0x98>
 800ffb6:	9b05      	ldr	r3, [sp, #20]
 800ffb8:	465a      	mov	r2, fp
 800ffba:	4631      	mov	r1, r6
 800ffbc:	4628      	mov	r0, r5
 800ffbe:	47b8      	blx	r7
 800ffc0:	3001      	adds	r0, #1
 800ffc2:	f43f ae71 	beq.w	800fca8 <_printf_float+0x98>
 800ffc6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800ffca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ffce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffd2:	f109 39ff 	add.w	r9, r9, #4294967295
 800ffd6:	d018      	beq.n	801000a <_printf_float+0x3fa>
 800ffd8:	464b      	mov	r3, r9
 800ffda:	f108 0201 	add.w	r2, r8, #1
 800ffde:	4631      	mov	r1, r6
 800ffe0:	4628      	mov	r0, r5
 800ffe2:	47b8      	blx	r7
 800ffe4:	3001      	adds	r0, #1
 800ffe6:	d10c      	bne.n	8010002 <_printf_float+0x3f2>
 800ffe8:	e65e      	b.n	800fca8 <_printf_float+0x98>
 800ffea:	2301      	movs	r3, #1
 800ffec:	465a      	mov	r2, fp
 800ffee:	4631      	mov	r1, r6
 800fff0:	4628      	mov	r0, r5
 800fff2:	47b8      	blx	r7
 800fff4:	3001      	adds	r0, #1
 800fff6:	f43f ae57 	beq.w	800fca8 <_printf_float+0x98>
 800fffa:	f108 0801 	add.w	r8, r8, #1
 800fffe:	45c8      	cmp	r8, r9
 8010000:	dbf3      	blt.n	800ffea <_printf_float+0x3da>
 8010002:	4653      	mov	r3, sl
 8010004:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010008:	e6dc      	b.n	800fdc4 <_printf_float+0x1b4>
 801000a:	f04f 0800 	mov.w	r8, #0
 801000e:	f104 0b1a 	add.w	fp, r4, #26
 8010012:	e7f4      	b.n	800fffe <_printf_float+0x3ee>
 8010014:	2301      	movs	r3, #1
 8010016:	4642      	mov	r2, r8
 8010018:	e7e1      	b.n	800ffde <_printf_float+0x3ce>
 801001a:	2301      	movs	r3, #1
 801001c:	464a      	mov	r2, r9
 801001e:	4631      	mov	r1, r6
 8010020:	4628      	mov	r0, r5
 8010022:	47b8      	blx	r7
 8010024:	3001      	adds	r0, #1
 8010026:	f43f ae3f 	beq.w	800fca8 <_printf_float+0x98>
 801002a:	f108 0801 	add.w	r8, r8, #1
 801002e:	68e3      	ldr	r3, [r4, #12]
 8010030:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010032:	1a5b      	subs	r3, r3, r1
 8010034:	4543      	cmp	r3, r8
 8010036:	dcf0      	bgt.n	801001a <_printf_float+0x40a>
 8010038:	e6f8      	b.n	800fe2c <_printf_float+0x21c>
 801003a:	f04f 0800 	mov.w	r8, #0
 801003e:	f104 0919 	add.w	r9, r4, #25
 8010042:	e7f4      	b.n	801002e <_printf_float+0x41e>

08010044 <_printf_common>:
 8010044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010048:	4616      	mov	r6, r2
 801004a:	4698      	mov	r8, r3
 801004c:	688a      	ldr	r2, [r1, #8]
 801004e:	690b      	ldr	r3, [r1, #16]
 8010050:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010054:	4293      	cmp	r3, r2
 8010056:	bfb8      	it	lt
 8010058:	4613      	movlt	r3, r2
 801005a:	6033      	str	r3, [r6, #0]
 801005c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010060:	4607      	mov	r7, r0
 8010062:	460c      	mov	r4, r1
 8010064:	b10a      	cbz	r2, 801006a <_printf_common+0x26>
 8010066:	3301      	adds	r3, #1
 8010068:	6033      	str	r3, [r6, #0]
 801006a:	6823      	ldr	r3, [r4, #0]
 801006c:	0699      	lsls	r1, r3, #26
 801006e:	bf42      	ittt	mi
 8010070:	6833      	ldrmi	r3, [r6, #0]
 8010072:	3302      	addmi	r3, #2
 8010074:	6033      	strmi	r3, [r6, #0]
 8010076:	6825      	ldr	r5, [r4, #0]
 8010078:	f015 0506 	ands.w	r5, r5, #6
 801007c:	d106      	bne.n	801008c <_printf_common+0x48>
 801007e:	f104 0a19 	add.w	sl, r4, #25
 8010082:	68e3      	ldr	r3, [r4, #12]
 8010084:	6832      	ldr	r2, [r6, #0]
 8010086:	1a9b      	subs	r3, r3, r2
 8010088:	42ab      	cmp	r3, r5
 801008a:	dc26      	bgt.n	80100da <_printf_common+0x96>
 801008c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010090:	6822      	ldr	r2, [r4, #0]
 8010092:	3b00      	subs	r3, #0
 8010094:	bf18      	it	ne
 8010096:	2301      	movne	r3, #1
 8010098:	0692      	lsls	r2, r2, #26
 801009a:	d42b      	bmi.n	80100f4 <_printf_common+0xb0>
 801009c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80100a0:	4641      	mov	r1, r8
 80100a2:	4638      	mov	r0, r7
 80100a4:	47c8      	blx	r9
 80100a6:	3001      	adds	r0, #1
 80100a8:	d01e      	beq.n	80100e8 <_printf_common+0xa4>
 80100aa:	6823      	ldr	r3, [r4, #0]
 80100ac:	6922      	ldr	r2, [r4, #16]
 80100ae:	f003 0306 	and.w	r3, r3, #6
 80100b2:	2b04      	cmp	r3, #4
 80100b4:	bf02      	ittt	eq
 80100b6:	68e5      	ldreq	r5, [r4, #12]
 80100b8:	6833      	ldreq	r3, [r6, #0]
 80100ba:	1aed      	subeq	r5, r5, r3
 80100bc:	68a3      	ldr	r3, [r4, #8]
 80100be:	bf0c      	ite	eq
 80100c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80100c4:	2500      	movne	r5, #0
 80100c6:	4293      	cmp	r3, r2
 80100c8:	bfc4      	itt	gt
 80100ca:	1a9b      	subgt	r3, r3, r2
 80100cc:	18ed      	addgt	r5, r5, r3
 80100ce:	2600      	movs	r6, #0
 80100d0:	341a      	adds	r4, #26
 80100d2:	42b5      	cmp	r5, r6
 80100d4:	d11a      	bne.n	801010c <_printf_common+0xc8>
 80100d6:	2000      	movs	r0, #0
 80100d8:	e008      	b.n	80100ec <_printf_common+0xa8>
 80100da:	2301      	movs	r3, #1
 80100dc:	4652      	mov	r2, sl
 80100de:	4641      	mov	r1, r8
 80100e0:	4638      	mov	r0, r7
 80100e2:	47c8      	blx	r9
 80100e4:	3001      	adds	r0, #1
 80100e6:	d103      	bne.n	80100f0 <_printf_common+0xac>
 80100e8:	f04f 30ff 	mov.w	r0, #4294967295
 80100ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100f0:	3501      	adds	r5, #1
 80100f2:	e7c6      	b.n	8010082 <_printf_common+0x3e>
 80100f4:	18e1      	adds	r1, r4, r3
 80100f6:	1c5a      	adds	r2, r3, #1
 80100f8:	2030      	movs	r0, #48	@ 0x30
 80100fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80100fe:	4422      	add	r2, r4
 8010100:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010104:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010108:	3302      	adds	r3, #2
 801010a:	e7c7      	b.n	801009c <_printf_common+0x58>
 801010c:	2301      	movs	r3, #1
 801010e:	4622      	mov	r2, r4
 8010110:	4641      	mov	r1, r8
 8010112:	4638      	mov	r0, r7
 8010114:	47c8      	blx	r9
 8010116:	3001      	adds	r0, #1
 8010118:	d0e6      	beq.n	80100e8 <_printf_common+0xa4>
 801011a:	3601      	adds	r6, #1
 801011c:	e7d9      	b.n	80100d2 <_printf_common+0x8e>
	...

08010120 <_printf_i>:
 8010120:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010124:	7e0f      	ldrb	r7, [r1, #24]
 8010126:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010128:	2f78      	cmp	r7, #120	@ 0x78
 801012a:	4691      	mov	r9, r2
 801012c:	4680      	mov	r8, r0
 801012e:	460c      	mov	r4, r1
 8010130:	469a      	mov	sl, r3
 8010132:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010136:	d807      	bhi.n	8010148 <_printf_i+0x28>
 8010138:	2f62      	cmp	r7, #98	@ 0x62
 801013a:	d80a      	bhi.n	8010152 <_printf_i+0x32>
 801013c:	2f00      	cmp	r7, #0
 801013e:	f000 80d2 	beq.w	80102e6 <_printf_i+0x1c6>
 8010142:	2f58      	cmp	r7, #88	@ 0x58
 8010144:	f000 80b9 	beq.w	80102ba <_printf_i+0x19a>
 8010148:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801014c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010150:	e03a      	b.n	80101c8 <_printf_i+0xa8>
 8010152:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010156:	2b15      	cmp	r3, #21
 8010158:	d8f6      	bhi.n	8010148 <_printf_i+0x28>
 801015a:	a101      	add	r1, pc, #4	@ (adr r1, 8010160 <_printf_i+0x40>)
 801015c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010160:	080101b9 	.word	0x080101b9
 8010164:	080101cd 	.word	0x080101cd
 8010168:	08010149 	.word	0x08010149
 801016c:	08010149 	.word	0x08010149
 8010170:	08010149 	.word	0x08010149
 8010174:	08010149 	.word	0x08010149
 8010178:	080101cd 	.word	0x080101cd
 801017c:	08010149 	.word	0x08010149
 8010180:	08010149 	.word	0x08010149
 8010184:	08010149 	.word	0x08010149
 8010188:	08010149 	.word	0x08010149
 801018c:	080102cd 	.word	0x080102cd
 8010190:	080101f7 	.word	0x080101f7
 8010194:	08010287 	.word	0x08010287
 8010198:	08010149 	.word	0x08010149
 801019c:	08010149 	.word	0x08010149
 80101a0:	080102ef 	.word	0x080102ef
 80101a4:	08010149 	.word	0x08010149
 80101a8:	080101f7 	.word	0x080101f7
 80101ac:	08010149 	.word	0x08010149
 80101b0:	08010149 	.word	0x08010149
 80101b4:	0801028f 	.word	0x0801028f
 80101b8:	6833      	ldr	r3, [r6, #0]
 80101ba:	1d1a      	adds	r2, r3, #4
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	6032      	str	r2, [r6, #0]
 80101c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80101c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80101c8:	2301      	movs	r3, #1
 80101ca:	e09d      	b.n	8010308 <_printf_i+0x1e8>
 80101cc:	6833      	ldr	r3, [r6, #0]
 80101ce:	6820      	ldr	r0, [r4, #0]
 80101d0:	1d19      	adds	r1, r3, #4
 80101d2:	6031      	str	r1, [r6, #0]
 80101d4:	0606      	lsls	r6, r0, #24
 80101d6:	d501      	bpl.n	80101dc <_printf_i+0xbc>
 80101d8:	681d      	ldr	r5, [r3, #0]
 80101da:	e003      	b.n	80101e4 <_printf_i+0xc4>
 80101dc:	0645      	lsls	r5, r0, #25
 80101de:	d5fb      	bpl.n	80101d8 <_printf_i+0xb8>
 80101e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80101e4:	2d00      	cmp	r5, #0
 80101e6:	da03      	bge.n	80101f0 <_printf_i+0xd0>
 80101e8:	232d      	movs	r3, #45	@ 0x2d
 80101ea:	426d      	negs	r5, r5
 80101ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80101f0:	4859      	ldr	r0, [pc, #356]	@ (8010358 <_printf_i+0x238>)
 80101f2:	230a      	movs	r3, #10
 80101f4:	e011      	b.n	801021a <_printf_i+0xfa>
 80101f6:	6821      	ldr	r1, [r4, #0]
 80101f8:	6833      	ldr	r3, [r6, #0]
 80101fa:	0608      	lsls	r0, r1, #24
 80101fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8010200:	d402      	bmi.n	8010208 <_printf_i+0xe8>
 8010202:	0649      	lsls	r1, r1, #25
 8010204:	bf48      	it	mi
 8010206:	b2ad      	uxthmi	r5, r5
 8010208:	2f6f      	cmp	r7, #111	@ 0x6f
 801020a:	4853      	ldr	r0, [pc, #332]	@ (8010358 <_printf_i+0x238>)
 801020c:	6033      	str	r3, [r6, #0]
 801020e:	bf14      	ite	ne
 8010210:	230a      	movne	r3, #10
 8010212:	2308      	moveq	r3, #8
 8010214:	2100      	movs	r1, #0
 8010216:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801021a:	6866      	ldr	r6, [r4, #4]
 801021c:	60a6      	str	r6, [r4, #8]
 801021e:	2e00      	cmp	r6, #0
 8010220:	bfa2      	ittt	ge
 8010222:	6821      	ldrge	r1, [r4, #0]
 8010224:	f021 0104 	bicge.w	r1, r1, #4
 8010228:	6021      	strge	r1, [r4, #0]
 801022a:	b90d      	cbnz	r5, 8010230 <_printf_i+0x110>
 801022c:	2e00      	cmp	r6, #0
 801022e:	d04b      	beq.n	80102c8 <_printf_i+0x1a8>
 8010230:	4616      	mov	r6, r2
 8010232:	fbb5 f1f3 	udiv	r1, r5, r3
 8010236:	fb03 5711 	mls	r7, r3, r1, r5
 801023a:	5dc7      	ldrb	r7, [r0, r7]
 801023c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010240:	462f      	mov	r7, r5
 8010242:	42bb      	cmp	r3, r7
 8010244:	460d      	mov	r5, r1
 8010246:	d9f4      	bls.n	8010232 <_printf_i+0x112>
 8010248:	2b08      	cmp	r3, #8
 801024a:	d10b      	bne.n	8010264 <_printf_i+0x144>
 801024c:	6823      	ldr	r3, [r4, #0]
 801024e:	07df      	lsls	r7, r3, #31
 8010250:	d508      	bpl.n	8010264 <_printf_i+0x144>
 8010252:	6923      	ldr	r3, [r4, #16]
 8010254:	6861      	ldr	r1, [r4, #4]
 8010256:	4299      	cmp	r1, r3
 8010258:	bfde      	ittt	le
 801025a:	2330      	movle	r3, #48	@ 0x30
 801025c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010260:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010264:	1b92      	subs	r2, r2, r6
 8010266:	6122      	str	r2, [r4, #16]
 8010268:	f8cd a000 	str.w	sl, [sp]
 801026c:	464b      	mov	r3, r9
 801026e:	aa03      	add	r2, sp, #12
 8010270:	4621      	mov	r1, r4
 8010272:	4640      	mov	r0, r8
 8010274:	f7ff fee6 	bl	8010044 <_printf_common>
 8010278:	3001      	adds	r0, #1
 801027a:	d14a      	bne.n	8010312 <_printf_i+0x1f2>
 801027c:	f04f 30ff 	mov.w	r0, #4294967295
 8010280:	b004      	add	sp, #16
 8010282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010286:	6823      	ldr	r3, [r4, #0]
 8010288:	f043 0320 	orr.w	r3, r3, #32
 801028c:	6023      	str	r3, [r4, #0]
 801028e:	4833      	ldr	r0, [pc, #204]	@ (801035c <_printf_i+0x23c>)
 8010290:	2778      	movs	r7, #120	@ 0x78
 8010292:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010296:	6823      	ldr	r3, [r4, #0]
 8010298:	6831      	ldr	r1, [r6, #0]
 801029a:	061f      	lsls	r7, r3, #24
 801029c:	f851 5b04 	ldr.w	r5, [r1], #4
 80102a0:	d402      	bmi.n	80102a8 <_printf_i+0x188>
 80102a2:	065f      	lsls	r7, r3, #25
 80102a4:	bf48      	it	mi
 80102a6:	b2ad      	uxthmi	r5, r5
 80102a8:	6031      	str	r1, [r6, #0]
 80102aa:	07d9      	lsls	r1, r3, #31
 80102ac:	bf44      	itt	mi
 80102ae:	f043 0320 	orrmi.w	r3, r3, #32
 80102b2:	6023      	strmi	r3, [r4, #0]
 80102b4:	b11d      	cbz	r5, 80102be <_printf_i+0x19e>
 80102b6:	2310      	movs	r3, #16
 80102b8:	e7ac      	b.n	8010214 <_printf_i+0xf4>
 80102ba:	4827      	ldr	r0, [pc, #156]	@ (8010358 <_printf_i+0x238>)
 80102bc:	e7e9      	b.n	8010292 <_printf_i+0x172>
 80102be:	6823      	ldr	r3, [r4, #0]
 80102c0:	f023 0320 	bic.w	r3, r3, #32
 80102c4:	6023      	str	r3, [r4, #0]
 80102c6:	e7f6      	b.n	80102b6 <_printf_i+0x196>
 80102c8:	4616      	mov	r6, r2
 80102ca:	e7bd      	b.n	8010248 <_printf_i+0x128>
 80102cc:	6833      	ldr	r3, [r6, #0]
 80102ce:	6825      	ldr	r5, [r4, #0]
 80102d0:	6961      	ldr	r1, [r4, #20]
 80102d2:	1d18      	adds	r0, r3, #4
 80102d4:	6030      	str	r0, [r6, #0]
 80102d6:	062e      	lsls	r6, r5, #24
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	d501      	bpl.n	80102e0 <_printf_i+0x1c0>
 80102dc:	6019      	str	r1, [r3, #0]
 80102de:	e002      	b.n	80102e6 <_printf_i+0x1c6>
 80102e0:	0668      	lsls	r0, r5, #25
 80102e2:	d5fb      	bpl.n	80102dc <_printf_i+0x1bc>
 80102e4:	8019      	strh	r1, [r3, #0]
 80102e6:	2300      	movs	r3, #0
 80102e8:	6123      	str	r3, [r4, #16]
 80102ea:	4616      	mov	r6, r2
 80102ec:	e7bc      	b.n	8010268 <_printf_i+0x148>
 80102ee:	6833      	ldr	r3, [r6, #0]
 80102f0:	1d1a      	adds	r2, r3, #4
 80102f2:	6032      	str	r2, [r6, #0]
 80102f4:	681e      	ldr	r6, [r3, #0]
 80102f6:	6862      	ldr	r2, [r4, #4]
 80102f8:	2100      	movs	r1, #0
 80102fa:	4630      	mov	r0, r6
 80102fc:	f7ef fff0 	bl	80002e0 <memchr>
 8010300:	b108      	cbz	r0, 8010306 <_printf_i+0x1e6>
 8010302:	1b80      	subs	r0, r0, r6
 8010304:	6060      	str	r0, [r4, #4]
 8010306:	6863      	ldr	r3, [r4, #4]
 8010308:	6123      	str	r3, [r4, #16]
 801030a:	2300      	movs	r3, #0
 801030c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010310:	e7aa      	b.n	8010268 <_printf_i+0x148>
 8010312:	6923      	ldr	r3, [r4, #16]
 8010314:	4632      	mov	r2, r6
 8010316:	4649      	mov	r1, r9
 8010318:	4640      	mov	r0, r8
 801031a:	47d0      	blx	sl
 801031c:	3001      	adds	r0, #1
 801031e:	d0ad      	beq.n	801027c <_printf_i+0x15c>
 8010320:	6823      	ldr	r3, [r4, #0]
 8010322:	079b      	lsls	r3, r3, #30
 8010324:	d413      	bmi.n	801034e <_printf_i+0x22e>
 8010326:	68e0      	ldr	r0, [r4, #12]
 8010328:	9b03      	ldr	r3, [sp, #12]
 801032a:	4298      	cmp	r0, r3
 801032c:	bfb8      	it	lt
 801032e:	4618      	movlt	r0, r3
 8010330:	e7a6      	b.n	8010280 <_printf_i+0x160>
 8010332:	2301      	movs	r3, #1
 8010334:	4632      	mov	r2, r6
 8010336:	4649      	mov	r1, r9
 8010338:	4640      	mov	r0, r8
 801033a:	47d0      	blx	sl
 801033c:	3001      	adds	r0, #1
 801033e:	d09d      	beq.n	801027c <_printf_i+0x15c>
 8010340:	3501      	adds	r5, #1
 8010342:	68e3      	ldr	r3, [r4, #12]
 8010344:	9903      	ldr	r1, [sp, #12]
 8010346:	1a5b      	subs	r3, r3, r1
 8010348:	42ab      	cmp	r3, r5
 801034a:	dcf2      	bgt.n	8010332 <_printf_i+0x212>
 801034c:	e7eb      	b.n	8010326 <_printf_i+0x206>
 801034e:	2500      	movs	r5, #0
 8010350:	f104 0619 	add.w	r6, r4, #25
 8010354:	e7f5      	b.n	8010342 <_printf_i+0x222>
 8010356:	bf00      	nop
 8010358:	0801279e 	.word	0x0801279e
 801035c:	080127af 	.word	0x080127af

08010360 <std>:
 8010360:	2300      	movs	r3, #0
 8010362:	b510      	push	{r4, lr}
 8010364:	4604      	mov	r4, r0
 8010366:	e9c0 3300 	strd	r3, r3, [r0]
 801036a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801036e:	6083      	str	r3, [r0, #8]
 8010370:	8181      	strh	r1, [r0, #12]
 8010372:	6643      	str	r3, [r0, #100]	@ 0x64
 8010374:	81c2      	strh	r2, [r0, #14]
 8010376:	6183      	str	r3, [r0, #24]
 8010378:	4619      	mov	r1, r3
 801037a:	2208      	movs	r2, #8
 801037c:	305c      	adds	r0, #92	@ 0x5c
 801037e:	f000 f914 	bl	80105aa <memset>
 8010382:	4b0d      	ldr	r3, [pc, #52]	@ (80103b8 <std+0x58>)
 8010384:	6263      	str	r3, [r4, #36]	@ 0x24
 8010386:	4b0d      	ldr	r3, [pc, #52]	@ (80103bc <std+0x5c>)
 8010388:	62a3      	str	r3, [r4, #40]	@ 0x28
 801038a:	4b0d      	ldr	r3, [pc, #52]	@ (80103c0 <std+0x60>)
 801038c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801038e:	4b0d      	ldr	r3, [pc, #52]	@ (80103c4 <std+0x64>)
 8010390:	6323      	str	r3, [r4, #48]	@ 0x30
 8010392:	4b0d      	ldr	r3, [pc, #52]	@ (80103c8 <std+0x68>)
 8010394:	6224      	str	r4, [r4, #32]
 8010396:	429c      	cmp	r4, r3
 8010398:	d006      	beq.n	80103a8 <std+0x48>
 801039a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801039e:	4294      	cmp	r4, r2
 80103a0:	d002      	beq.n	80103a8 <std+0x48>
 80103a2:	33d0      	adds	r3, #208	@ 0xd0
 80103a4:	429c      	cmp	r4, r3
 80103a6:	d105      	bne.n	80103b4 <std+0x54>
 80103a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80103ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103b0:	f000 b978 	b.w	80106a4 <__retarget_lock_init_recursive>
 80103b4:	bd10      	pop	{r4, pc}
 80103b6:	bf00      	nop
 80103b8:	08010525 	.word	0x08010525
 80103bc:	08010547 	.word	0x08010547
 80103c0:	0801057f 	.word	0x0801057f
 80103c4:	080105a3 	.word	0x080105a3
 80103c8:	2400257c 	.word	0x2400257c

080103cc <stdio_exit_handler>:
 80103cc:	4a02      	ldr	r2, [pc, #8]	@ (80103d8 <stdio_exit_handler+0xc>)
 80103ce:	4903      	ldr	r1, [pc, #12]	@ (80103dc <stdio_exit_handler+0x10>)
 80103d0:	4803      	ldr	r0, [pc, #12]	@ (80103e0 <stdio_exit_handler+0x14>)
 80103d2:	f000 b869 	b.w	80104a8 <_fwalk_sglue>
 80103d6:	bf00      	nop
 80103d8:	2400012c 	.word	0x2400012c
 80103dc:	08011f29 	.word	0x08011f29
 80103e0:	2400013c 	.word	0x2400013c

080103e4 <cleanup_stdio>:
 80103e4:	6841      	ldr	r1, [r0, #4]
 80103e6:	4b0c      	ldr	r3, [pc, #48]	@ (8010418 <cleanup_stdio+0x34>)
 80103e8:	4299      	cmp	r1, r3
 80103ea:	b510      	push	{r4, lr}
 80103ec:	4604      	mov	r4, r0
 80103ee:	d001      	beq.n	80103f4 <cleanup_stdio+0x10>
 80103f0:	f001 fd9a 	bl	8011f28 <_fflush_r>
 80103f4:	68a1      	ldr	r1, [r4, #8]
 80103f6:	4b09      	ldr	r3, [pc, #36]	@ (801041c <cleanup_stdio+0x38>)
 80103f8:	4299      	cmp	r1, r3
 80103fa:	d002      	beq.n	8010402 <cleanup_stdio+0x1e>
 80103fc:	4620      	mov	r0, r4
 80103fe:	f001 fd93 	bl	8011f28 <_fflush_r>
 8010402:	68e1      	ldr	r1, [r4, #12]
 8010404:	4b06      	ldr	r3, [pc, #24]	@ (8010420 <cleanup_stdio+0x3c>)
 8010406:	4299      	cmp	r1, r3
 8010408:	d004      	beq.n	8010414 <cleanup_stdio+0x30>
 801040a:	4620      	mov	r0, r4
 801040c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010410:	f001 bd8a 	b.w	8011f28 <_fflush_r>
 8010414:	bd10      	pop	{r4, pc}
 8010416:	bf00      	nop
 8010418:	2400257c 	.word	0x2400257c
 801041c:	240025e4 	.word	0x240025e4
 8010420:	2400264c 	.word	0x2400264c

08010424 <global_stdio_init.part.0>:
 8010424:	b510      	push	{r4, lr}
 8010426:	4b0b      	ldr	r3, [pc, #44]	@ (8010454 <global_stdio_init.part.0+0x30>)
 8010428:	4c0b      	ldr	r4, [pc, #44]	@ (8010458 <global_stdio_init.part.0+0x34>)
 801042a:	4a0c      	ldr	r2, [pc, #48]	@ (801045c <global_stdio_init.part.0+0x38>)
 801042c:	601a      	str	r2, [r3, #0]
 801042e:	4620      	mov	r0, r4
 8010430:	2200      	movs	r2, #0
 8010432:	2104      	movs	r1, #4
 8010434:	f7ff ff94 	bl	8010360 <std>
 8010438:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801043c:	2201      	movs	r2, #1
 801043e:	2109      	movs	r1, #9
 8010440:	f7ff ff8e 	bl	8010360 <std>
 8010444:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010448:	2202      	movs	r2, #2
 801044a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801044e:	2112      	movs	r1, #18
 8010450:	f7ff bf86 	b.w	8010360 <std>
 8010454:	240026b4 	.word	0x240026b4
 8010458:	2400257c 	.word	0x2400257c
 801045c:	080103cd 	.word	0x080103cd

08010460 <__sfp_lock_acquire>:
 8010460:	4801      	ldr	r0, [pc, #4]	@ (8010468 <__sfp_lock_acquire+0x8>)
 8010462:	f000 b920 	b.w	80106a6 <__retarget_lock_acquire_recursive>
 8010466:	bf00      	nop
 8010468:	240026bd 	.word	0x240026bd

0801046c <__sfp_lock_release>:
 801046c:	4801      	ldr	r0, [pc, #4]	@ (8010474 <__sfp_lock_release+0x8>)
 801046e:	f000 b91b 	b.w	80106a8 <__retarget_lock_release_recursive>
 8010472:	bf00      	nop
 8010474:	240026bd 	.word	0x240026bd

08010478 <__sinit>:
 8010478:	b510      	push	{r4, lr}
 801047a:	4604      	mov	r4, r0
 801047c:	f7ff fff0 	bl	8010460 <__sfp_lock_acquire>
 8010480:	6a23      	ldr	r3, [r4, #32]
 8010482:	b11b      	cbz	r3, 801048c <__sinit+0x14>
 8010484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010488:	f7ff bff0 	b.w	801046c <__sfp_lock_release>
 801048c:	4b04      	ldr	r3, [pc, #16]	@ (80104a0 <__sinit+0x28>)
 801048e:	6223      	str	r3, [r4, #32]
 8010490:	4b04      	ldr	r3, [pc, #16]	@ (80104a4 <__sinit+0x2c>)
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d1f5      	bne.n	8010484 <__sinit+0xc>
 8010498:	f7ff ffc4 	bl	8010424 <global_stdio_init.part.0>
 801049c:	e7f2      	b.n	8010484 <__sinit+0xc>
 801049e:	bf00      	nop
 80104a0:	080103e5 	.word	0x080103e5
 80104a4:	240026b4 	.word	0x240026b4

080104a8 <_fwalk_sglue>:
 80104a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104ac:	4607      	mov	r7, r0
 80104ae:	4688      	mov	r8, r1
 80104b0:	4614      	mov	r4, r2
 80104b2:	2600      	movs	r6, #0
 80104b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80104b8:	f1b9 0901 	subs.w	r9, r9, #1
 80104bc:	d505      	bpl.n	80104ca <_fwalk_sglue+0x22>
 80104be:	6824      	ldr	r4, [r4, #0]
 80104c0:	2c00      	cmp	r4, #0
 80104c2:	d1f7      	bne.n	80104b4 <_fwalk_sglue+0xc>
 80104c4:	4630      	mov	r0, r6
 80104c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104ca:	89ab      	ldrh	r3, [r5, #12]
 80104cc:	2b01      	cmp	r3, #1
 80104ce:	d907      	bls.n	80104e0 <_fwalk_sglue+0x38>
 80104d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80104d4:	3301      	adds	r3, #1
 80104d6:	d003      	beq.n	80104e0 <_fwalk_sglue+0x38>
 80104d8:	4629      	mov	r1, r5
 80104da:	4638      	mov	r0, r7
 80104dc:	47c0      	blx	r8
 80104de:	4306      	orrs	r6, r0
 80104e0:	3568      	adds	r5, #104	@ 0x68
 80104e2:	e7e9      	b.n	80104b8 <_fwalk_sglue+0x10>

080104e4 <siprintf>:
 80104e4:	b40e      	push	{r1, r2, r3}
 80104e6:	b500      	push	{lr}
 80104e8:	b09c      	sub	sp, #112	@ 0x70
 80104ea:	ab1d      	add	r3, sp, #116	@ 0x74
 80104ec:	9002      	str	r0, [sp, #8]
 80104ee:	9006      	str	r0, [sp, #24]
 80104f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80104f4:	4809      	ldr	r0, [pc, #36]	@ (801051c <siprintf+0x38>)
 80104f6:	9107      	str	r1, [sp, #28]
 80104f8:	9104      	str	r1, [sp, #16]
 80104fa:	4909      	ldr	r1, [pc, #36]	@ (8010520 <siprintf+0x3c>)
 80104fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8010500:	9105      	str	r1, [sp, #20]
 8010502:	6800      	ldr	r0, [r0, #0]
 8010504:	9301      	str	r3, [sp, #4]
 8010506:	a902      	add	r1, sp, #8
 8010508:	f001 fb8e 	bl	8011c28 <_svfiprintf_r>
 801050c:	9b02      	ldr	r3, [sp, #8]
 801050e:	2200      	movs	r2, #0
 8010510:	701a      	strb	r2, [r3, #0]
 8010512:	b01c      	add	sp, #112	@ 0x70
 8010514:	f85d eb04 	ldr.w	lr, [sp], #4
 8010518:	b003      	add	sp, #12
 801051a:	4770      	bx	lr
 801051c:	24000138 	.word	0x24000138
 8010520:	ffff0208 	.word	0xffff0208

08010524 <__sread>:
 8010524:	b510      	push	{r4, lr}
 8010526:	460c      	mov	r4, r1
 8010528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801052c:	f000 f86c 	bl	8010608 <_read_r>
 8010530:	2800      	cmp	r0, #0
 8010532:	bfab      	itete	ge
 8010534:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010536:	89a3      	ldrhlt	r3, [r4, #12]
 8010538:	181b      	addge	r3, r3, r0
 801053a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801053e:	bfac      	ite	ge
 8010540:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010542:	81a3      	strhlt	r3, [r4, #12]
 8010544:	bd10      	pop	{r4, pc}

08010546 <__swrite>:
 8010546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801054a:	461f      	mov	r7, r3
 801054c:	898b      	ldrh	r3, [r1, #12]
 801054e:	05db      	lsls	r3, r3, #23
 8010550:	4605      	mov	r5, r0
 8010552:	460c      	mov	r4, r1
 8010554:	4616      	mov	r6, r2
 8010556:	d505      	bpl.n	8010564 <__swrite+0x1e>
 8010558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801055c:	2302      	movs	r3, #2
 801055e:	2200      	movs	r2, #0
 8010560:	f000 f840 	bl	80105e4 <_lseek_r>
 8010564:	89a3      	ldrh	r3, [r4, #12]
 8010566:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801056a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801056e:	81a3      	strh	r3, [r4, #12]
 8010570:	4632      	mov	r2, r6
 8010572:	463b      	mov	r3, r7
 8010574:	4628      	mov	r0, r5
 8010576:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801057a:	f000 b857 	b.w	801062c <_write_r>

0801057e <__sseek>:
 801057e:	b510      	push	{r4, lr}
 8010580:	460c      	mov	r4, r1
 8010582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010586:	f000 f82d 	bl	80105e4 <_lseek_r>
 801058a:	1c43      	adds	r3, r0, #1
 801058c:	89a3      	ldrh	r3, [r4, #12]
 801058e:	bf15      	itete	ne
 8010590:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010592:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010596:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801059a:	81a3      	strheq	r3, [r4, #12]
 801059c:	bf18      	it	ne
 801059e:	81a3      	strhne	r3, [r4, #12]
 80105a0:	bd10      	pop	{r4, pc}

080105a2 <__sclose>:
 80105a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105a6:	f000 b80d 	b.w	80105c4 <_close_r>

080105aa <memset>:
 80105aa:	4402      	add	r2, r0
 80105ac:	4603      	mov	r3, r0
 80105ae:	4293      	cmp	r3, r2
 80105b0:	d100      	bne.n	80105b4 <memset+0xa>
 80105b2:	4770      	bx	lr
 80105b4:	f803 1b01 	strb.w	r1, [r3], #1
 80105b8:	e7f9      	b.n	80105ae <memset+0x4>
	...

080105bc <_localeconv_r>:
 80105bc:	4800      	ldr	r0, [pc, #0]	@ (80105c0 <_localeconv_r+0x4>)
 80105be:	4770      	bx	lr
 80105c0:	24000278 	.word	0x24000278

080105c4 <_close_r>:
 80105c4:	b538      	push	{r3, r4, r5, lr}
 80105c6:	4d06      	ldr	r5, [pc, #24]	@ (80105e0 <_close_r+0x1c>)
 80105c8:	2300      	movs	r3, #0
 80105ca:	4604      	mov	r4, r0
 80105cc:	4608      	mov	r0, r1
 80105ce:	602b      	str	r3, [r5, #0]
 80105d0:	f7f0 fffe 	bl	80015d0 <_close>
 80105d4:	1c43      	adds	r3, r0, #1
 80105d6:	d102      	bne.n	80105de <_close_r+0x1a>
 80105d8:	682b      	ldr	r3, [r5, #0]
 80105da:	b103      	cbz	r3, 80105de <_close_r+0x1a>
 80105dc:	6023      	str	r3, [r4, #0]
 80105de:	bd38      	pop	{r3, r4, r5, pc}
 80105e0:	240026b8 	.word	0x240026b8

080105e4 <_lseek_r>:
 80105e4:	b538      	push	{r3, r4, r5, lr}
 80105e6:	4d07      	ldr	r5, [pc, #28]	@ (8010604 <_lseek_r+0x20>)
 80105e8:	4604      	mov	r4, r0
 80105ea:	4608      	mov	r0, r1
 80105ec:	4611      	mov	r1, r2
 80105ee:	2200      	movs	r2, #0
 80105f0:	602a      	str	r2, [r5, #0]
 80105f2:	461a      	mov	r2, r3
 80105f4:	f7f1 f813 	bl	800161e <_lseek>
 80105f8:	1c43      	adds	r3, r0, #1
 80105fa:	d102      	bne.n	8010602 <_lseek_r+0x1e>
 80105fc:	682b      	ldr	r3, [r5, #0]
 80105fe:	b103      	cbz	r3, 8010602 <_lseek_r+0x1e>
 8010600:	6023      	str	r3, [r4, #0]
 8010602:	bd38      	pop	{r3, r4, r5, pc}
 8010604:	240026b8 	.word	0x240026b8

08010608 <_read_r>:
 8010608:	b538      	push	{r3, r4, r5, lr}
 801060a:	4d07      	ldr	r5, [pc, #28]	@ (8010628 <_read_r+0x20>)
 801060c:	4604      	mov	r4, r0
 801060e:	4608      	mov	r0, r1
 8010610:	4611      	mov	r1, r2
 8010612:	2200      	movs	r2, #0
 8010614:	602a      	str	r2, [r5, #0]
 8010616:	461a      	mov	r2, r3
 8010618:	f7f0 ffa1 	bl	800155e <_read>
 801061c:	1c43      	adds	r3, r0, #1
 801061e:	d102      	bne.n	8010626 <_read_r+0x1e>
 8010620:	682b      	ldr	r3, [r5, #0]
 8010622:	b103      	cbz	r3, 8010626 <_read_r+0x1e>
 8010624:	6023      	str	r3, [r4, #0]
 8010626:	bd38      	pop	{r3, r4, r5, pc}
 8010628:	240026b8 	.word	0x240026b8

0801062c <_write_r>:
 801062c:	b538      	push	{r3, r4, r5, lr}
 801062e:	4d07      	ldr	r5, [pc, #28]	@ (801064c <_write_r+0x20>)
 8010630:	4604      	mov	r4, r0
 8010632:	4608      	mov	r0, r1
 8010634:	4611      	mov	r1, r2
 8010636:	2200      	movs	r2, #0
 8010638:	602a      	str	r2, [r5, #0]
 801063a:	461a      	mov	r2, r3
 801063c:	f7f0 ffac 	bl	8001598 <_write>
 8010640:	1c43      	adds	r3, r0, #1
 8010642:	d102      	bne.n	801064a <_write_r+0x1e>
 8010644:	682b      	ldr	r3, [r5, #0]
 8010646:	b103      	cbz	r3, 801064a <_write_r+0x1e>
 8010648:	6023      	str	r3, [r4, #0]
 801064a:	bd38      	pop	{r3, r4, r5, pc}
 801064c:	240026b8 	.word	0x240026b8

08010650 <__errno>:
 8010650:	4b01      	ldr	r3, [pc, #4]	@ (8010658 <__errno+0x8>)
 8010652:	6818      	ldr	r0, [r3, #0]
 8010654:	4770      	bx	lr
 8010656:	bf00      	nop
 8010658:	24000138 	.word	0x24000138

0801065c <__libc_init_array>:
 801065c:	b570      	push	{r4, r5, r6, lr}
 801065e:	4d0d      	ldr	r5, [pc, #52]	@ (8010694 <__libc_init_array+0x38>)
 8010660:	4c0d      	ldr	r4, [pc, #52]	@ (8010698 <__libc_init_array+0x3c>)
 8010662:	1b64      	subs	r4, r4, r5
 8010664:	10a4      	asrs	r4, r4, #2
 8010666:	2600      	movs	r6, #0
 8010668:	42a6      	cmp	r6, r4
 801066a:	d109      	bne.n	8010680 <__libc_init_array+0x24>
 801066c:	4d0b      	ldr	r5, [pc, #44]	@ (801069c <__libc_init_array+0x40>)
 801066e:	4c0c      	ldr	r4, [pc, #48]	@ (80106a0 <__libc_init_array+0x44>)
 8010670:	f002 f838 	bl	80126e4 <_init>
 8010674:	1b64      	subs	r4, r4, r5
 8010676:	10a4      	asrs	r4, r4, #2
 8010678:	2600      	movs	r6, #0
 801067a:	42a6      	cmp	r6, r4
 801067c:	d105      	bne.n	801068a <__libc_init_array+0x2e>
 801067e:	bd70      	pop	{r4, r5, r6, pc}
 8010680:	f855 3b04 	ldr.w	r3, [r5], #4
 8010684:	4798      	blx	r3
 8010686:	3601      	adds	r6, #1
 8010688:	e7ee      	b.n	8010668 <__libc_init_array+0xc>
 801068a:	f855 3b04 	ldr.w	r3, [r5], #4
 801068e:	4798      	blx	r3
 8010690:	3601      	adds	r6, #1
 8010692:	e7f2      	b.n	801067a <__libc_init_array+0x1e>
 8010694:	08012b10 	.word	0x08012b10
 8010698:	08012b10 	.word	0x08012b10
 801069c:	08012b10 	.word	0x08012b10
 80106a0:	08012b14 	.word	0x08012b14

080106a4 <__retarget_lock_init_recursive>:
 80106a4:	4770      	bx	lr

080106a6 <__retarget_lock_acquire_recursive>:
 80106a6:	4770      	bx	lr

080106a8 <__retarget_lock_release_recursive>:
 80106a8:	4770      	bx	lr

080106aa <quorem>:
 80106aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106ae:	6903      	ldr	r3, [r0, #16]
 80106b0:	690c      	ldr	r4, [r1, #16]
 80106b2:	42a3      	cmp	r3, r4
 80106b4:	4607      	mov	r7, r0
 80106b6:	db7e      	blt.n	80107b6 <quorem+0x10c>
 80106b8:	3c01      	subs	r4, #1
 80106ba:	f101 0814 	add.w	r8, r1, #20
 80106be:	00a3      	lsls	r3, r4, #2
 80106c0:	f100 0514 	add.w	r5, r0, #20
 80106c4:	9300      	str	r3, [sp, #0]
 80106c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80106ca:	9301      	str	r3, [sp, #4]
 80106cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80106d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80106d4:	3301      	adds	r3, #1
 80106d6:	429a      	cmp	r2, r3
 80106d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80106dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80106e0:	d32e      	bcc.n	8010740 <quorem+0x96>
 80106e2:	f04f 0a00 	mov.w	sl, #0
 80106e6:	46c4      	mov	ip, r8
 80106e8:	46ae      	mov	lr, r5
 80106ea:	46d3      	mov	fp, sl
 80106ec:	f85c 3b04 	ldr.w	r3, [ip], #4
 80106f0:	b298      	uxth	r0, r3
 80106f2:	fb06 a000 	mla	r0, r6, r0, sl
 80106f6:	0c02      	lsrs	r2, r0, #16
 80106f8:	0c1b      	lsrs	r3, r3, #16
 80106fa:	fb06 2303 	mla	r3, r6, r3, r2
 80106fe:	f8de 2000 	ldr.w	r2, [lr]
 8010702:	b280      	uxth	r0, r0
 8010704:	b292      	uxth	r2, r2
 8010706:	1a12      	subs	r2, r2, r0
 8010708:	445a      	add	r2, fp
 801070a:	f8de 0000 	ldr.w	r0, [lr]
 801070e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010712:	b29b      	uxth	r3, r3
 8010714:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010718:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801071c:	b292      	uxth	r2, r2
 801071e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010722:	45e1      	cmp	r9, ip
 8010724:	f84e 2b04 	str.w	r2, [lr], #4
 8010728:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801072c:	d2de      	bcs.n	80106ec <quorem+0x42>
 801072e:	9b00      	ldr	r3, [sp, #0]
 8010730:	58eb      	ldr	r3, [r5, r3]
 8010732:	b92b      	cbnz	r3, 8010740 <quorem+0x96>
 8010734:	9b01      	ldr	r3, [sp, #4]
 8010736:	3b04      	subs	r3, #4
 8010738:	429d      	cmp	r5, r3
 801073a:	461a      	mov	r2, r3
 801073c:	d32f      	bcc.n	801079e <quorem+0xf4>
 801073e:	613c      	str	r4, [r7, #16]
 8010740:	4638      	mov	r0, r7
 8010742:	f001 f90d 	bl	8011960 <__mcmp>
 8010746:	2800      	cmp	r0, #0
 8010748:	db25      	blt.n	8010796 <quorem+0xec>
 801074a:	4629      	mov	r1, r5
 801074c:	2000      	movs	r0, #0
 801074e:	f858 2b04 	ldr.w	r2, [r8], #4
 8010752:	f8d1 c000 	ldr.w	ip, [r1]
 8010756:	fa1f fe82 	uxth.w	lr, r2
 801075a:	fa1f f38c 	uxth.w	r3, ip
 801075e:	eba3 030e 	sub.w	r3, r3, lr
 8010762:	4403      	add	r3, r0
 8010764:	0c12      	lsrs	r2, r2, #16
 8010766:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801076a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801076e:	b29b      	uxth	r3, r3
 8010770:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010774:	45c1      	cmp	r9, r8
 8010776:	f841 3b04 	str.w	r3, [r1], #4
 801077a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801077e:	d2e6      	bcs.n	801074e <quorem+0xa4>
 8010780:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010784:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010788:	b922      	cbnz	r2, 8010794 <quorem+0xea>
 801078a:	3b04      	subs	r3, #4
 801078c:	429d      	cmp	r5, r3
 801078e:	461a      	mov	r2, r3
 8010790:	d30b      	bcc.n	80107aa <quorem+0x100>
 8010792:	613c      	str	r4, [r7, #16]
 8010794:	3601      	adds	r6, #1
 8010796:	4630      	mov	r0, r6
 8010798:	b003      	add	sp, #12
 801079a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801079e:	6812      	ldr	r2, [r2, #0]
 80107a0:	3b04      	subs	r3, #4
 80107a2:	2a00      	cmp	r2, #0
 80107a4:	d1cb      	bne.n	801073e <quorem+0x94>
 80107a6:	3c01      	subs	r4, #1
 80107a8:	e7c6      	b.n	8010738 <quorem+0x8e>
 80107aa:	6812      	ldr	r2, [r2, #0]
 80107ac:	3b04      	subs	r3, #4
 80107ae:	2a00      	cmp	r2, #0
 80107b0:	d1ef      	bne.n	8010792 <quorem+0xe8>
 80107b2:	3c01      	subs	r4, #1
 80107b4:	e7ea      	b.n	801078c <quorem+0xe2>
 80107b6:	2000      	movs	r0, #0
 80107b8:	e7ee      	b.n	8010798 <quorem+0xee>
 80107ba:	0000      	movs	r0, r0
 80107bc:	0000      	movs	r0, r0
	...

080107c0 <_dtoa_r>:
 80107c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107c4:	ed2d 8b02 	vpush	{d8}
 80107c8:	69c7      	ldr	r7, [r0, #28]
 80107ca:	b091      	sub	sp, #68	@ 0x44
 80107cc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80107d0:	ec55 4b10 	vmov	r4, r5, d0
 80107d4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80107d6:	9107      	str	r1, [sp, #28]
 80107d8:	4681      	mov	r9, r0
 80107da:	9209      	str	r2, [sp, #36]	@ 0x24
 80107dc:	930d      	str	r3, [sp, #52]	@ 0x34
 80107de:	b97f      	cbnz	r7, 8010800 <_dtoa_r+0x40>
 80107e0:	2010      	movs	r0, #16
 80107e2:	f000 fd8d 	bl	8011300 <malloc>
 80107e6:	4602      	mov	r2, r0
 80107e8:	f8c9 001c 	str.w	r0, [r9, #28]
 80107ec:	b920      	cbnz	r0, 80107f8 <_dtoa_r+0x38>
 80107ee:	4ba0      	ldr	r3, [pc, #640]	@ (8010a70 <_dtoa_r+0x2b0>)
 80107f0:	21ef      	movs	r1, #239	@ 0xef
 80107f2:	48a0      	ldr	r0, [pc, #640]	@ (8010a74 <_dtoa_r+0x2b4>)
 80107f4:	f001 fbf8 	bl	8011fe8 <__assert_func>
 80107f8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80107fc:	6007      	str	r7, [r0, #0]
 80107fe:	60c7      	str	r7, [r0, #12]
 8010800:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010804:	6819      	ldr	r1, [r3, #0]
 8010806:	b159      	cbz	r1, 8010820 <_dtoa_r+0x60>
 8010808:	685a      	ldr	r2, [r3, #4]
 801080a:	604a      	str	r2, [r1, #4]
 801080c:	2301      	movs	r3, #1
 801080e:	4093      	lsls	r3, r2
 8010810:	608b      	str	r3, [r1, #8]
 8010812:	4648      	mov	r0, r9
 8010814:	f000 fe6a 	bl	80114ec <_Bfree>
 8010818:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801081c:	2200      	movs	r2, #0
 801081e:	601a      	str	r2, [r3, #0]
 8010820:	1e2b      	subs	r3, r5, #0
 8010822:	bfbb      	ittet	lt
 8010824:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010828:	9303      	strlt	r3, [sp, #12]
 801082a:	2300      	movge	r3, #0
 801082c:	2201      	movlt	r2, #1
 801082e:	bfac      	ite	ge
 8010830:	6033      	strge	r3, [r6, #0]
 8010832:	6032      	strlt	r2, [r6, #0]
 8010834:	4b90      	ldr	r3, [pc, #576]	@ (8010a78 <_dtoa_r+0x2b8>)
 8010836:	9e03      	ldr	r6, [sp, #12]
 8010838:	43b3      	bics	r3, r6
 801083a:	d110      	bne.n	801085e <_dtoa_r+0x9e>
 801083c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801083e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010842:	6013      	str	r3, [r2, #0]
 8010844:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8010848:	4323      	orrs	r3, r4
 801084a:	f000 84de 	beq.w	801120a <_dtoa_r+0xa4a>
 801084e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010850:	4f8a      	ldr	r7, [pc, #552]	@ (8010a7c <_dtoa_r+0x2bc>)
 8010852:	2b00      	cmp	r3, #0
 8010854:	f000 84e0 	beq.w	8011218 <_dtoa_r+0xa58>
 8010858:	1cfb      	adds	r3, r7, #3
 801085a:	f000 bcdb 	b.w	8011214 <_dtoa_r+0xa54>
 801085e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8010862:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801086a:	d10a      	bne.n	8010882 <_dtoa_r+0xc2>
 801086c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801086e:	2301      	movs	r3, #1
 8010870:	6013      	str	r3, [r2, #0]
 8010872:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010874:	b113      	cbz	r3, 801087c <_dtoa_r+0xbc>
 8010876:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8010878:	4b81      	ldr	r3, [pc, #516]	@ (8010a80 <_dtoa_r+0x2c0>)
 801087a:	6013      	str	r3, [r2, #0]
 801087c:	4f81      	ldr	r7, [pc, #516]	@ (8010a84 <_dtoa_r+0x2c4>)
 801087e:	f000 bccb 	b.w	8011218 <_dtoa_r+0xa58>
 8010882:	aa0e      	add	r2, sp, #56	@ 0x38
 8010884:	a90f      	add	r1, sp, #60	@ 0x3c
 8010886:	4648      	mov	r0, r9
 8010888:	eeb0 0b48 	vmov.f64	d0, d8
 801088c:	f001 f918 	bl	8011ac0 <__d2b>
 8010890:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8010894:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010896:	9001      	str	r0, [sp, #4]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d045      	beq.n	8010928 <_dtoa_r+0x168>
 801089c:	eeb0 7b48 	vmov.f64	d7, d8
 80108a0:	ee18 1a90 	vmov	r1, s17
 80108a4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80108a8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80108ac:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80108b0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80108b4:	2500      	movs	r5, #0
 80108b6:	ee07 1a90 	vmov	s15, r1
 80108ba:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80108be:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8010a58 <_dtoa_r+0x298>
 80108c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80108c6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8010a60 <_dtoa_r+0x2a0>
 80108ca:	eea7 6b05 	vfma.f64	d6, d7, d5
 80108ce:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8010a68 <_dtoa_r+0x2a8>
 80108d2:	ee07 3a90 	vmov	s15, r3
 80108d6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80108da:	eeb0 7b46 	vmov.f64	d7, d6
 80108de:	eea4 7b05 	vfma.f64	d7, d4, d5
 80108e2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80108e6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80108ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108ee:	ee16 8a90 	vmov	r8, s13
 80108f2:	d508      	bpl.n	8010906 <_dtoa_r+0x146>
 80108f4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80108f8:	eeb4 6b47 	vcmp.f64	d6, d7
 80108fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010900:	bf18      	it	ne
 8010902:	f108 38ff 	addne.w	r8, r8, #4294967295
 8010906:	f1b8 0f16 	cmp.w	r8, #22
 801090a:	d82b      	bhi.n	8010964 <_dtoa_r+0x1a4>
 801090c:	495e      	ldr	r1, [pc, #376]	@ (8010a88 <_dtoa_r+0x2c8>)
 801090e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8010912:	ed91 7b00 	vldr	d7, [r1]
 8010916:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801091a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801091e:	d501      	bpl.n	8010924 <_dtoa_r+0x164>
 8010920:	f108 38ff 	add.w	r8, r8, #4294967295
 8010924:	2100      	movs	r1, #0
 8010926:	e01e      	b.n	8010966 <_dtoa_r+0x1a6>
 8010928:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801092a:	4413      	add	r3, r2
 801092c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8010930:	2920      	cmp	r1, #32
 8010932:	bfc1      	itttt	gt
 8010934:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8010938:	408e      	lslgt	r6, r1
 801093a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801093e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8010942:	bfd6      	itet	le
 8010944:	f1c1 0120 	rsble	r1, r1, #32
 8010948:	4331      	orrgt	r1, r6
 801094a:	fa04 f101 	lslle.w	r1, r4, r1
 801094e:	ee07 1a90 	vmov	s15, r1
 8010952:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010956:	3b01      	subs	r3, #1
 8010958:	ee17 1a90 	vmov	r1, s15
 801095c:	2501      	movs	r5, #1
 801095e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8010962:	e7a8      	b.n	80108b6 <_dtoa_r+0xf6>
 8010964:	2101      	movs	r1, #1
 8010966:	1ad2      	subs	r2, r2, r3
 8010968:	1e53      	subs	r3, r2, #1
 801096a:	9306      	str	r3, [sp, #24]
 801096c:	bf45      	ittet	mi
 801096e:	f1c2 0301 	rsbmi	r3, r2, #1
 8010972:	9305      	strmi	r3, [sp, #20]
 8010974:	2300      	movpl	r3, #0
 8010976:	2300      	movmi	r3, #0
 8010978:	bf4c      	ite	mi
 801097a:	9306      	strmi	r3, [sp, #24]
 801097c:	9305      	strpl	r3, [sp, #20]
 801097e:	f1b8 0f00 	cmp.w	r8, #0
 8010982:	910c      	str	r1, [sp, #48]	@ 0x30
 8010984:	db18      	blt.n	80109b8 <_dtoa_r+0x1f8>
 8010986:	9b06      	ldr	r3, [sp, #24]
 8010988:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801098c:	4443      	add	r3, r8
 801098e:	9306      	str	r3, [sp, #24]
 8010990:	2300      	movs	r3, #0
 8010992:	9a07      	ldr	r2, [sp, #28]
 8010994:	2a09      	cmp	r2, #9
 8010996:	d849      	bhi.n	8010a2c <_dtoa_r+0x26c>
 8010998:	2a05      	cmp	r2, #5
 801099a:	bfc4      	itt	gt
 801099c:	3a04      	subgt	r2, #4
 801099e:	9207      	strgt	r2, [sp, #28]
 80109a0:	9a07      	ldr	r2, [sp, #28]
 80109a2:	f1a2 0202 	sub.w	r2, r2, #2
 80109a6:	bfcc      	ite	gt
 80109a8:	2400      	movgt	r4, #0
 80109aa:	2401      	movle	r4, #1
 80109ac:	2a03      	cmp	r2, #3
 80109ae:	d848      	bhi.n	8010a42 <_dtoa_r+0x282>
 80109b0:	e8df f002 	tbb	[pc, r2]
 80109b4:	3a2c2e0b 	.word	0x3a2c2e0b
 80109b8:	9b05      	ldr	r3, [sp, #20]
 80109ba:	2200      	movs	r2, #0
 80109bc:	eba3 0308 	sub.w	r3, r3, r8
 80109c0:	9305      	str	r3, [sp, #20]
 80109c2:	920a      	str	r2, [sp, #40]	@ 0x28
 80109c4:	f1c8 0300 	rsb	r3, r8, #0
 80109c8:	e7e3      	b.n	8010992 <_dtoa_r+0x1d2>
 80109ca:	2200      	movs	r2, #0
 80109cc:	9208      	str	r2, [sp, #32]
 80109ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80109d0:	2a00      	cmp	r2, #0
 80109d2:	dc39      	bgt.n	8010a48 <_dtoa_r+0x288>
 80109d4:	f04f 0b01 	mov.w	fp, #1
 80109d8:	46da      	mov	sl, fp
 80109da:	465a      	mov	r2, fp
 80109dc:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80109e0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80109e4:	2100      	movs	r1, #0
 80109e6:	2004      	movs	r0, #4
 80109e8:	f100 0614 	add.w	r6, r0, #20
 80109ec:	4296      	cmp	r6, r2
 80109ee:	d930      	bls.n	8010a52 <_dtoa_r+0x292>
 80109f0:	6079      	str	r1, [r7, #4]
 80109f2:	4648      	mov	r0, r9
 80109f4:	9304      	str	r3, [sp, #16]
 80109f6:	f000 fd39 	bl	801146c <_Balloc>
 80109fa:	9b04      	ldr	r3, [sp, #16]
 80109fc:	4607      	mov	r7, r0
 80109fe:	2800      	cmp	r0, #0
 8010a00:	d146      	bne.n	8010a90 <_dtoa_r+0x2d0>
 8010a02:	4b22      	ldr	r3, [pc, #136]	@ (8010a8c <_dtoa_r+0x2cc>)
 8010a04:	4602      	mov	r2, r0
 8010a06:	f240 11af 	movw	r1, #431	@ 0x1af
 8010a0a:	e6f2      	b.n	80107f2 <_dtoa_r+0x32>
 8010a0c:	2201      	movs	r2, #1
 8010a0e:	e7dd      	b.n	80109cc <_dtoa_r+0x20c>
 8010a10:	2200      	movs	r2, #0
 8010a12:	9208      	str	r2, [sp, #32]
 8010a14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010a16:	eb08 0b02 	add.w	fp, r8, r2
 8010a1a:	f10b 0a01 	add.w	sl, fp, #1
 8010a1e:	4652      	mov	r2, sl
 8010a20:	2a01      	cmp	r2, #1
 8010a22:	bfb8      	it	lt
 8010a24:	2201      	movlt	r2, #1
 8010a26:	e7db      	b.n	80109e0 <_dtoa_r+0x220>
 8010a28:	2201      	movs	r2, #1
 8010a2a:	e7f2      	b.n	8010a12 <_dtoa_r+0x252>
 8010a2c:	2401      	movs	r4, #1
 8010a2e:	2200      	movs	r2, #0
 8010a30:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8010a34:	f04f 3bff 	mov.w	fp, #4294967295
 8010a38:	2100      	movs	r1, #0
 8010a3a:	46da      	mov	sl, fp
 8010a3c:	2212      	movs	r2, #18
 8010a3e:	9109      	str	r1, [sp, #36]	@ 0x24
 8010a40:	e7ce      	b.n	80109e0 <_dtoa_r+0x220>
 8010a42:	2201      	movs	r2, #1
 8010a44:	9208      	str	r2, [sp, #32]
 8010a46:	e7f5      	b.n	8010a34 <_dtoa_r+0x274>
 8010a48:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8010a4c:	46da      	mov	sl, fp
 8010a4e:	465a      	mov	r2, fp
 8010a50:	e7c6      	b.n	80109e0 <_dtoa_r+0x220>
 8010a52:	3101      	adds	r1, #1
 8010a54:	0040      	lsls	r0, r0, #1
 8010a56:	e7c7      	b.n	80109e8 <_dtoa_r+0x228>
 8010a58:	636f4361 	.word	0x636f4361
 8010a5c:	3fd287a7 	.word	0x3fd287a7
 8010a60:	8b60c8b3 	.word	0x8b60c8b3
 8010a64:	3fc68a28 	.word	0x3fc68a28
 8010a68:	509f79fb 	.word	0x509f79fb
 8010a6c:	3fd34413 	.word	0x3fd34413
 8010a70:	080127cd 	.word	0x080127cd
 8010a74:	080127e4 	.word	0x080127e4
 8010a78:	7ff00000 	.word	0x7ff00000
 8010a7c:	080127c9 	.word	0x080127c9
 8010a80:	0801279d 	.word	0x0801279d
 8010a84:	0801279c 	.word	0x0801279c
 8010a88:	080128e0 	.word	0x080128e0
 8010a8c:	0801283c 	.word	0x0801283c
 8010a90:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8010a94:	f1ba 0f0e 	cmp.w	sl, #14
 8010a98:	6010      	str	r0, [r2, #0]
 8010a9a:	d86f      	bhi.n	8010b7c <_dtoa_r+0x3bc>
 8010a9c:	2c00      	cmp	r4, #0
 8010a9e:	d06d      	beq.n	8010b7c <_dtoa_r+0x3bc>
 8010aa0:	f1b8 0f00 	cmp.w	r8, #0
 8010aa4:	f340 80c2 	ble.w	8010c2c <_dtoa_r+0x46c>
 8010aa8:	4aca      	ldr	r2, [pc, #808]	@ (8010dd4 <_dtoa_r+0x614>)
 8010aaa:	f008 010f 	and.w	r1, r8, #15
 8010aae:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8010ab2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8010ab6:	ed92 7b00 	vldr	d7, [r2]
 8010aba:	ea4f 1128 	mov.w	r1, r8, asr #4
 8010abe:	f000 80a9 	beq.w	8010c14 <_dtoa_r+0x454>
 8010ac2:	4ac5      	ldr	r2, [pc, #788]	@ (8010dd8 <_dtoa_r+0x618>)
 8010ac4:	ed92 6b08 	vldr	d6, [r2, #32]
 8010ac8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8010acc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010ad0:	f001 010f 	and.w	r1, r1, #15
 8010ad4:	2203      	movs	r2, #3
 8010ad6:	48c0      	ldr	r0, [pc, #768]	@ (8010dd8 <_dtoa_r+0x618>)
 8010ad8:	2900      	cmp	r1, #0
 8010ada:	f040 809d 	bne.w	8010c18 <_dtoa_r+0x458>
 8010ade:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010ae2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010ae6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010aea:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010aec:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010af0:	2900      	cmp	r1, #0
 8010af2:	f000 80c1 	beq.w	8010c78 <_dtoa_r+0x4b8>
 8010af6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8010afa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b02:	f140 80b9 	bpl.w	8010c78 <_dtoa_r+0x4b8>
 8010b06:	f1ba 0f00 	cmp.w	sl, #0
 8010b0a:	f000 80b5 	beq.w	8010c78 <_dtoa_r+0x4b8>
 8010b0e:	f1bb 0f00 	cmp.w	fp, #0
 8010b12:	dd31      	ble.n	8010b78 <_dtoa_r+0x3b8>
 8010b14:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8010b18:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010b1c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010b20:	f108 31ff 	add.w	r1, r8, #4294967295
 8010b24:	9104      	str	r1, [sp, #16]
 8010b26:	3201      	adds	r2, #1
 8010b28:	465c      	mov	r4, fp
 8010b2a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010b2e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8010b32:	ee07 2a90 	vmov	s15, r2
 8010b36:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010b3a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8010b3e:	ee15 2a90 	vmov	r2, s11
 8010b42:	ec51 0b15 	vmov	r0, r1, d5
 8010b46:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8010b4a:	2c00      	cmp	r4, #0
 8010b4c:	f040 8098 	bne.w	8010c80 <_dtoa_r+0x4c0>
 8010b50:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8010b54:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010b58:	ec41 0b17 	vmov	d7, r0, r1
 8010b5c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b64:	f300 8261 	bgt.w	801102a <_dtoa_r+0x86a>
 8010b68:	eeb1 7b47 	vneg.f64	d7, d7
 8010b6c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b74:	f100 80f5 	bmi.w	8010d62 <_dtoa_r+0x5a2>
 8010b78:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010b7c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010b7e:	2a00      	cmp	r2, #0
 8010b80:	f2c0 812c 	blt.w	8010ddc <_dtoa_r+0x61c>
 8010b84:	f1b8 0f0e 	cmp.w	r8, #14
 8010b88:	f300 8128 	bgt.w	8010ddc <_dtoa_r+0x61c>
 8010b8c:	4b91      	ldr	r3, [pc, #580]	@ (8010dd4 <_dtoa_r+0x614>)
 8010b8e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010b92:	ed93 6b00 	vldr	d6, [r3]
 8010b96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	da03      	bge.n	8010ba4 <_dtoa_r+0x3e4>
 8010b9c:	f1ba 0f00 	cmp.w	sl, #0
 8010ba0:	f340 80d2 	ble.w	8010d48 <_dtoa_r+0x588>
 8010ba4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8010ba8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010bac:	463e      	mov	r6, r7
 8010bae:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8010bb2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8010bb6:	ee15 3a10 	vmov	r3, s10
 8010bba:	3330      	adds	r3, #48	@ 0x30
 8010bbc:	f806 3b01 	strb.w	r3, [r6], #1
 8010bc0:	1bf3      	subs	r3, r6, r7
 8010bc2:	459a      	cmp	sl, r3
 8010bc4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010bc8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8010bcc:	f040 80f8 	bne.w	8010dc0 <_dtoa_r+0x600>
 8010bd0:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010bd4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bdc:	f300 80dd 	bgt.w	8010d9a <_dtoa_r+0x5da>
 8010be0:	eeb4 7b46 	vcmp.f64	d7, d6
 8010be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010be8:	d104      	bne.n	8010bf4 <_dtoa_r+0x434>
 8010bea:	ee15 3a10 	vmov	r3, s10
 8010bee:	07db      	lsls	r3, r3, #31
 8010bf0:	f100 80d3 	bmi.w	8010d9a <_dtoa_r+0x5da>
 8010bf4:	9901      	ldr	r1, [sp, #4]
 8010bf6:	4648      	mov	r0, r9
 8010bf8:	f000 fc78 	bl	80114ec <_Bfree>
 8010bfc:	2300      	movs	r3, #0
 8010bfe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010c00:	7033      	strb	r3, [r6, #0]
 8010c02:	f108 0301 	add.w	r3, r8, #1
 8010c06:	6013      	str	r3, [r2, #0]
 8010c08:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	f000 8304 	beq.w	8011218 <_dtoa_r+0xa58>
 8010c10:	601e      	str	r6, [r3, #0]
 8010c12:	e301      	b.n	8011218 <_dtoa_r+0xa58>
 8010c14:	2202      	movs	r2, #2
 8010c16:	e75e      	b.n	8010ad6 <_dtoa_r+0x316>
 8010c18:	07cc      	lsls	r4, r1, #31
 8010c1a:	d504      	bpl.n	8010c26 <_dtoa_r+0x466>
 8010c1c:	ed90 6b00 	vldr	d6, [r0]
 8010c20:	3201      	adds	r2, #1
 8010c22:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010c26:	1049      	asrs	r1, r1, #1
 8010c28:	3008      	adds	r0, #8
 8010c2a:	e755      	b.n	8010ad8 <_dtoa_r+0x318>
 8010c2c:	d022      	beq.n	8010c74 <_dtoa_r+0x4b4>
 8010c2e:	f1c8 0100 	rsb	r1, r8, #0
 8010c32:	4a68      	ldr	r2, [pc, #416]	@ (8010dd4 <_dtoa_r+0x614>)
 8010c34:	f001 000f 	and.w	r0, r1, #15
 8010c38:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010c3c:	ed92 7b00 	vldr	d7, [r2]
 8010c40:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010c44:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010c48:	4863      	ldr	r0, [pc, #396]	@ (8010dd8 <_dtoa_r+0x618>)
 8010c4a:	1109      	asrs	r1, r1, #4
 8010c4c:	2400      	movs	r4, #0
 8010c4e:	2202      	movs	r2, #2
 8010c50:	b929      	cbnz	r1, 8010c5e <_dtoa_r+0x49e>
 8010c52:	2c00      	cmp	r4, #0
 8010c54:	f43f af49 	beq.w	8010aea <_dtoa_r+0x32a>
 8010c58:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010c5c:	e745      	b.n	8010aea <_dtoa_r+0x32a>
 8010c5e:	07ce      	lsls	r6, r1, #31
 8010c60:	d505      	bpl.n	8010c6e <_dtoa_r+0x4ae>
 8010c62:	ed90 6b00 	vldr	d6, [r0]
 8010c66:	3201      	adds	r2, #1
 8010c68:	2401      	movs	r4, #1
 8010c6a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010c6e:	1049      	asrs	r1, r1, #1
 8010c70:	3008      	adds	r0, #8
 8010c72:	e7ed      	b.n	8010c50 <_dtoa_r+0x490>
 8010c74:	2202      	movs	r2, #2
 8010c76:	e738      	b.n	8010aea <_dtoa_r+0x32a>
 8010c78:	f8cd 8010 	str.w	r8, [sp, #16]
 8010c7c:	4654      	mov	r4, sl
 8010c7e:	e754      	b.n	8010b2a <_dtoa_r+0x36a>
 8010c80:	4a54      	ldr	r2, [pc, #336]	@ (8010dd4 <_dtoa_r+0x614>)
 8010c82:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8010c86:	ed12 4b02 	vldr	d4, [r2, #-8]
 8010c8a:	9a08      	ldr	r2, [sp, #32]
 8010c8c:	ec41 0b17 	vmov	d7, r0, r1
 8010c90:	443c      	add	r4, r7
 8010c92:	b34a      	cbz	r2, 8010ce8 <_dtoa_r+0x528>
 8010c94:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8010c98:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8010c9c:	463e      	mov	r6, r7
 8010c9e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8010ca2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8010ca6:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010caa:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010cae:	ee14 2a90 	vmov	r2, s9
 8010cb2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010cb6:	3230      	adds	r2, #48	@ 0x30
 8010cb8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010cbc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cc4:	f806 2b01 	strb.w	r2, [r6], #1
 8010cc8:	d438      	bmi.n	8010d3c <_dtoa_r+0x57c>
 8010cca:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010cce:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8010cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cd6:	d462      	bmi.n	8010d9e <_dtoa_r+0x5de>
 8010cd8:	42a6      	cmp	r6, r4
 8010cda:	f43f af4d 	beq.w	8010b78 <_dtoa_r+0x3b8>
 8010cde:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010ce2:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010ce6:	e7e0      	b.n	8010caa <_dtoa_r+0x4ea>
 8010ce8:	4621      	mov	r1, r4
 8010cea:	463e      	mov	r6, r7
 8010cec:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010cf0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8010cf4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010cf8:	ee14 2a90 	vmov	r2, s9
 8010cfc:	3230      	adds	r2, #48	@ 0x30
 8010cfe:	f806 2b01 	strb.w	r2, [r6], #1
 8010d02:	42a6      	cmp	r6, r4
 8010d04:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010d08:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010d0c:	d119      	bne.n	8010d42 <_dtoa_r+0x582>
 8010d0e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8010d12:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010d16:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d1e:	dc3e      	bgt.n	8010d9e <_dtoa_r+0x5de>
 8010d20:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010d24:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d2c:	f57f af24 	bpl.w	8010b78 <_dtoa_r+0x3b8>
 8010d30:	460e      	mov	r6, r1
 8010d32:	3901      	subs	r1, #1
 8010d34:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010d38:	2b30      	cmp	r3, #48	@ 0x30
 8010d3a:	d0f9      	beq.n	8010d30 <_dtoa_r+0x570>
 8010d3c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010d40:	e758      	b.n	8010bf4 <_dtoa_r+0x434>
 8010d42:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010d46:	e7d5      	b.n	8010cf4 <_dtoa_r+0x534>
 8010d48:	d10b      	bne.n	8010d62 <_dtoa_r+0x5a2>
 8010d4a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8010d4e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010d52:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010d56:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d5e:	f2c0 8161 	blt.w	8011024 <_dtoa_r+0x864>
 8010d62:	2400      	movs	r4, #0
 8010d64:	4625      	mov	r5, r4
 8010d66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d68:	43db      	mvns	r3, r3
 8010d6a:	9304      	str	r3, [sp, #16]
 8010d6c:	463e      	mov	r6, r7
 8010d6e:	f04f 0800 	mov.w	r8, #0
 8010d72:	4621      	mov	r1, r4
 8010d74:	4648      	mov	r0, r9
 8010d76:	f000 fbb9 	bl	80114ec <_Bfree>
 8010d7a:	2d00      	cmp	r5, #0
 8010d7c:	d0de      	beq.n	8010d3c <_dtoa_r+0x57c>
 8010d7e:	f1b8 0f00 	cmp.w	r8, #0
 8010d82:	d005      	beq.n	8010d90 <_dtoa_r+0x5d0>
 8010d84:	45a8      	cmp	r8, r5
 8010d86:	d003      	beq.n	8010d90 <_dtoa_r+0x5d0>
 8010d88:	4641      	mov	r1, r8
 8010d8a:	4648      	mov	r0, r9
 8010d8c:	f000 fbae 	bl	80114ec <_Bfree>
 8010d90:	4629      	mov	r1, r5
 8010d92:	4648      	mov	r0, r9
 8010d94:	f000 fbaa 	bl	80114ec <_Bfree>
 8010d98:	e7d0      	b.n	8010d3c <_dtoa_r+0x57c>
 8010d9a:	f8cd 8010 	str.w	r8, [sp, #16]
 8010d9e:	4633      	mov	r3, r6
 8010da0:	461e      	mov	r6, r3
 8010da2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010da6:	2a39      	cmp	r2, #57	@ 0x39
 8010da8:	d106      	bne.n	8010db8 <_dtoa_r+0x5f8>
 8010daa:	429f      	cmp	r7, r3
 8010dac:	d1f8      	bne.n	8010da0 <_dtoa_r+0x5e0>
 8010dae:	9a04      	ldr	r2, [sp, #16]
 8010db0:	3201      	adds	r2, #1
 8010db2:	9204      	str	r2, [sp, #16]
 8010db4:	2230      	movs	r2, #48	@ 0x30
 8010db6:	703a      	strb	r2, [r7, #0]
 8010db8:	781a      	ldrb	r2, [r3, #0]
 8010dba:	3201      	adds	r2, #1
 8010dbc:	701a      	strb	r2, [r3, #0]
 8010dbe:	e7bd      	b.n	8010d3c <_dtoa_r+0x57c>
 8010dc0:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010dc4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dcc:	f47f aeef 	bne.w	8010bae <_dtoa_r+0x3ee>
 8010dd0:	e710      	b.n	8010bf4 <_dtoa_r+0x434>
 8010dd2:	bf00      	nop
 8010dd4:	080128e0 	.word	0x080128e0
 8010dd8:	080128b8 	.word	0x080128b8
 8010ddc:	9908      	ldr	r1, [sp, #32]
 8010dde:	2900      	cmp	r1, #0
 8010de0:	f000 80e3 	beq.w	8010faa <_dtoa_r+0x7ea>
 8010de4:	9907      	ldr	r1, [sp, #28]
 8010de6:	2901      	cmp	r1, #1
 8010de8:	f300 80c8 	bgt.w	8010f7c <_dtoa_r+0x7bc>
 8010dec:	2d00      	cmp	r5, #0
 8010dee:	f000 80c1 	beq.w	8010f74 <_dtoa_r+0x7b4>
 8010df2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010df6:	9e05      	ldr	r6, [sp, #20]
 8010df8:	461c      	mov	r4, r3
 8010dfa:	9304      	str	r3, [sp, #16]
 8010dfc:	9b05      	ldr	r3, [sp, #20]
 8010dfe:	4413      	add	r3, r2
 8010e00:	9305      	str	r3, [sp, #20]
 8010e02:	9b06      	ldr	r3, [sp, #24]
 8010e04:	2101      	movs	r1, #1
 8010e06:	4413      	add	r3, r2
 8010e08:	4648      	mov	r0, r9
 8010e0a:	9306      	str	r3, [sp, #24]
 8010e0c:	f000 fc22 	bl	8011654 <__i2b>
 8010e10:	9b04      	ldr	r3, [sp, #16]
 8010e12:	4605      	mov	r5, r0
 8010e14:	b166      	cbz	r6, 8010e30 <_dtoa_r+0x670>
 8010e16:	9a06      	ldr	r2, [sp, #24]
 8010e18:	2a00      	cmp	r2, #0
 8010e1a:	dd09      	ble.n	8010e30 <_dtoa_r+0x670>
 8010e1c:	42b2      	cmp	r2, r6
 8010e1e:	9905      	ldr	r1, [sp, #20]
 8010e20:	bfa8      	it	ge
 8010e22:	4632      	movge	r2, r6
 8010e24:	1a89      	subs	r1, r1, r2
 8010e26:	9105      	str	r1, [sp, #20]
 8010e28:	9906      	ldr	r1, [sp, #24]
 8010e2a:	1ab6      	subs	r6, r6, r2
 8010e2c:	1a8a      	subs	r2, r1, r2
 8010e2e:	9206      	str	r2, [sp, #24]
 8010e30:	b1fb      	cbz	r3, 8010e72 <_dtoa_r+0x6b2>
 8010e32:	9a08      	ldr	r2, [sp, #32]
 8010e34:	2a00      	cmp	r2, #0
 8010e36:	f000 80bc 	beq.w	8010fb2 <_dtoa_r+0x7f2>
 8010e3a:	b19c      	cbz	r4, 8010e64 <_dtoa_r+0x6a4>
 8010e3c:	4629      	mov	r1, r5
 8010e3e:	4622      	mov	r2, r4
 8010e40:	4648      	mov	r0, r9
 8010e42:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010e44:	f000 fcc6 	bl	80117d4 <__pow5mult>
 8010e48:	9a01      	ldr	r2, [sp, #4]
 8010e4a:	4601      	mov	r1, r0
 8010e4c:	4605      	mov	r5, r0
 8010e4e:	4648      	mov	r0, r9
 8010e50:	f000 fc16 	bl	8011680 <__multiply>
 8010e54:	9901      	ldr	r1, [sp, #4]
 8010e56:	9004      	str	r0, [sp, #16]
 8010e58:	4648      	mov	r0, r9
 8010e5a:	f000 fb47 	bl	80114ec <_Bfree>
 8010e5e:	9a04      	ldr	r2, [sp, #16]
 8010e60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010e62:	9201      	str	r2, [sp, #4]
 8010e64:	1b1a      	subs	r2, r3, r4
 8010e66:	d004      	beq.n	8010e72 <_dtoa_r+0x6b2>
 8010e68:	9901      	ldr	r1, [sp, #4]
 8010e6a:	4648      	mov	r0, r9
 8010e6c:	f000 fcb2 	bl	80117d4 <__pow5mult>
 8010e70:	9001      	str	r0, [sp, #4]
 8010e72:	2101      	movs	r1, #1
 8010e74:	4648      	mov	r0, r9
 8010e76:	f000 fbed 	bl	8011654 <__i2b>
 8010e7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010e7c:	4604      	mov	r4, r0
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	f000 81d0 	beq.w	8011224 <_dtoa_r+0xa64>
 8010e84:	461a      	mov	r2, r3
 8010e86:	4601      	mov	r1, r0
 8010e88:	4648      	mov	r0, r9
 8010e8a:	f000 fca3 	bl	80117d4 <__pow5mult>
 8010e8e:	9b07      	ldr	r3, [sp, #28]
 8010e90:	2b01      	cmp	r3, #1
 8010e92:	4604      	mov	r4, r0
 8010e94:	f300 8095 	bgt.w	8010fc2 <_dtoa_r+0x802>
 8010e98:	9b02      	ldr	r3, [sp, #8]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	f040 808b 	bne.w	8010fb6 <_dtoa_r+0x7f6>
 8010ea0:	9b03      	ldr	r3, [sp, #12]
 8010ea2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8010ea6:	2a00      	cmp	r2, #0
 8010ea8:	f040 8087 	bne.w	8010fba <_dtoa_r+0x7fa>
 8010eac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8010eb0:	0d12      	lsrs	r2, r2, #20
 8010eb2:	0512      	lsls	r2, r2, #20
 8010eb4:	2a00      	cmp	r2, #0
 8010eb6:	f000 8082 	beq.w	8010fbe <_dtoa_r+0x7fe>
 8010eba:	9b05      	ldr	r3, [sp, #20]
 8010ebc:	3301      	adds	r3, #1
 8010ebe:	9305      	str	r3, [sp, #20]
 8010ec0:	9b06      	ldr	r3, [sp, #24]
 8010ec2:	3301      	adds	r3, #1
 8010ec4:	9306      	str	r3, [sp, #24]
 8010ec6:	2301      	movs	r3, #1
 8010ec8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010eca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	f000 81af 	beq.w	8011230 <_dtoa_r+0xa70>
 8010ed2:	6922      	ldr	r2, [r4, #16]
 8010ed4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010ed8:	6910      	ldr	r0, [r2, #16]
 8010eda:	f000 fb6f 	bl	80115bc <__hi0bits>
 8010ede:	f1c0 0020 	rsb	r0, r0, #32
 8010ee2:	9b06      	ldr	r3, [sp, #24]
 8010ee4:	4418      	add	r0, r3
 8010ee6:	f010 001f 	ands.w	r0, r0, #31
 8010eea:	d076      	beq.n	8010fda <_dtoa_r+0x81a>
 8010eec:	f1c0 0220 	rsb	r2, r0, #32
 8010ef0:	2a04      	cmp	r2, #4
 8010ef2:	dd69      	ble.n	8010fc8 <_dtoa_r+0x808>
 8010ef4:	9b05      	ldr	r3, [sp, #20]
 8010ef6:	f1c0 001c 	rsb	r0, r0, #28
 8010efa:	4403      	add	r3, r0
 8010efc:	9305      	str	r3, [sp, #20]
 8010efe:	9b06      	ldr	r3, [sp, #24]
 8010f00:	4406      	add	r6, r0
 8010f02:	4403      	add	r3, r0
 8010f04:	9306      	str	r3, [sp, #24]
 8010f06:	9b05      	ldr	r3, [sp, #20]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	dd05      	ble.n	8010f18 <_dtoa_r+0x758>
 8010f0c:	9901      	ldr	r1, [sp, #4]
 8010f0e:	461a      	mov	r2, r3
 8010f10:	4648      	mov	r0, r9
 8010f12:	f000 fcb9 	bl	8011888 <__lshift>
 8010f16:	9001      	str	r0, [sp, #4]
 8010f18:	9b06      	ldr	r3, [sp, #24]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	dd05      	ble.n	8010f2a <_dtoa_r+0x76a>
 8010f1e:	4621      	mov	r1, r4
 8010f20:	461a      	mov	r2, r3
 8010f22:	4648      	mov	r0, r9
 8010f24:	f000 fcb0 	bl	8011888 <__lshift>
 8010f28:	4604      	mov	r4, r0
 8010f2a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d056      	beq.n	8010fde <_dtoa_r+0x81e>
 8010f30:	9801      	ldr	r0, [sp, #4]
 8010f32:	4621      	mov	r1, r4
 8010f34:	f000 fd14 	bl	8011960 <__mcmp>
 8010f38:	2800      	cmp	r0, #0
 8010f3a:	da50      	bge.n	8010fde <_dtoa_r+0x81e>
 8010f3c:	f108 33ff 	add.w	r3, r8, #4294967295
 8010f40:	9304      	str	r3, [sp, #16]
 8010f42:	9901      	ldr	r1, [sp, #4]
 8010f44:	2300      	movs	r3, #0
 8010f46:	220a      	movs	r2, #10
 8010f48:	4648      	mov	r0, r9
 8010f4a:	f000 faf1 	bl	8011530 <__multadd>
 8010f4e:	9b08      	ldr	r3, [sp, #32]
 8010f50:	9001      	str	r0, [sp, #4]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	f000 816e 	beq.w	8011234 <_dtoa_r+0xa74>
 8010f58:	4629      	mov	r1, r5
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	220a      	movs	r2, #10
 8010f5e:	4648      	mov	r0, r9
 8010f60:	f000 fae6 	bl	8011530 <__multadd>
 8010f64:	f1bb 0f00 	cmp.w	fp, #0
 8010f68:	4605      	mov	r5, r0
 8010f6a:	dc64      	bgt.n	8011036 <_dtoa_r+0x876>
 8010f6c:	9b07      	ldr	r3, [sp, #28]
 8010f6e:	2b02      	cmp	r3, #2
 8010f70:	dc3e      	bgt.n	8010ff0 <_dtoa_r+0x830>
 8010f72:	e060      	b.n	8011036 <_dtoa_r+0x876>
 8010f74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010f76:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010f7a:	e73c      	b.n	8010df6 <_dtoa_r+0x636>
 8010f7c:	f10a 34ff 	add.w	r4, sl, #4294967295
 8010f80:	42a3      	cmp	r3, r4
 8010f82:	bfbf      	itttt	lt
 8010f84:	1ae2      	sublt	r2, r4, r3
 8010f86:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010f88:	189b      	addlt	r3, r3, r2
 8010f8a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8010f8c:	bfae      	itee	ge
 8010f8e:	1b1c      	subge	r4, r3, r4
 8010f90:	4623      	movlt	r3, r4
 8010f92:	2400      	movlt	r4, #0
 8010f94:	f1ba 0f00 	cmp.w	sl, #0
 8010f98:	bfb5      	itete	lt
 8010f9a:	9a05      	ldrlt	r2, [sp, #20]
 8010f9c:	9e05      	ldrge	r6, [sp, #20]
 8010f9e:	eba2 060a 	sublt.w	r6, r2, sl
 8010fa2:	4652      	movge	r2, sl
 8010fa4:	bfb8      	it	lt
 8010fa6:	2200      	movlt	r2, #0
 8010fa8:	e727      	b.n	8010dfa <_dtoa_r+0x63a>
 8010faa:	9e05      	ldr	r6, [sp, #20]
 8010fac:	9d08      	ldr	r5, [sp, #32]
 8010fae:	461c      	mov	r4, r3
 8010fb0:	e730      	b.n	8010e14 <_dtoa_r+0x654>
 8010fb2:	461a      	mov	r2, r3
 8010fb4:	e758      	b.n	8010e68 <_dtoa_r+0x6a8>
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	e786      	b.n	8010ec8 <_dtoa_r+0x708>
 8010fba:	9b02      	ldr	r3, [sp, #8]
 8010fbc:	e784      	b.n	8010ec8 <_dtoa_r+0x708>
 8010fbe:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010fc0:	e783      	b.n	8010eca <_dtoa_r+0x70a>
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010fc6:	e784      	b.n	8010ed2 <_dtoa_r+0x712>
 8010fc8:	d09d      	beq.n	8010f06 <_dtoa_r+0x746>
 8010fca:	9b05      	ldr	r3, [sp, #20]
 8010fcc:	321c      	adds	r2, #28
 8010fce:	4413      	add	r3, r2
 8010fd0:	9305      	str	r3, [sp, #20]
 8010fd2:	9b06      	ldr	r3, [sp, #24]
 8010fd4:	4416      	add	r6, r2
 8010fd6:	4413      	add	r3, r2
 8010fd8:	e794      	b.n	8010f04 <_dtoa_r+0x744>
 8010fda:	4602      	mov	r2, r0
 8010fdc:	e7f5      	b.n	8010fca <_dtoa_r+0x80a>
 8010fde:	f1ba 0f00 	cmp.w	sl, #0
 8010fe2:	f8cd 8010 	str.w	r8, [sp, #16]
 8010fe6:	46d3      	mov	fp, sl
 8010fe8:	dc21      	bgt.n	801102e <_dtoa_r+0x86e>
 8010fea:	9b07      	ldr	r3, [sp, #28]
 8010fec:	2b02      	cmp	r3, #2
 8010fee:	dd1e      	ble.n	801102e <_dtoa_r+0x86e>
 8010ff0:	f1bb 0f00 	cmp.w	fp, #0
 8010ff4:	f47f aeb7 	bne.w	8010d66 <_dtoa_r+0x5a6>
 8010ff8:	4621      	mov	r1, r4
 8010ffa:	465b      	mov	r3, fp
 8010ffc:	2205      	movs	r2, #5
 8010ffe:	4648      	mov	r0, r9
 8011000:	f000 fa96 	bl	8011530 <__multadd>
 8011004:	4601      	mov	r1, r0
 8011006:	4604      	mov	r4, r0
 8011008:	9801      	ldr	r0, [sp, #4]
 801100a:	f000 fca9 	bl	8011960 <__mcmp>
 801100e:	2800      	cmp	r0, #0
 8011010:	f77f aea9 	ble.w	8010d66 <_dtoa_r+0x5a6>
 8011014:	463e      	mov	r6, r7
 8011016:	2331      	movs	r3, #49	@ 0x31
 8011018:	f806 3b01 	strb.w	r3, [r6], #1
 801101c:	9b04      	ldr	r3, [sp, #16]
 801101e:	3301      	adds	r3, #1
 8011020:	9304      	str	r3, [sp, #16]
 8011022:	e6a4      	b.n	8010d6e <_dtoa_r+0x5ae>
 8011024:	f8cd 8010 	str.w	r8, [sp, #16]
 8011028:	4654      	mov	r4, sl
 801102a:	4625      	mov	r5, r4
 801102c:	e7f2      	b.n	8011014 <_dtoa_r+0x854>
 801102e:	9b08      	ldr	r3, [sp, #32]
 8011030:	2b00      	cmp	r3, #0
 8011032:	f000 8103 	beq.w	801123c <_dtoa_r+0xa7c>
 8011036:	2e00      	cmp	r6, #0
 8011038:	dd05      	ble.n	8011046 <_dtoa_r+0x886>
 801103a:	4629      	mov	r1, r5
 801103c:	4632      	mov	r2, r6
 801103e:	4648      	mov	r0, r9
 8011040:	f000 fc22 	bl	8011888 <__lshift>
 8011044:	4605      	mov	r5, r0
 8011046:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011048:	2b00      	cmp	r3, #0
 801104a:	d058      	beq.n	80110fe <_dtoa_r+0x93e>
 801104c:	6869      	ldr	r1, [r5, #4]
 801104e:	4648      	mov	r0, r9
 8011050:	f000 fa0c 	bl	801146c <_Balloc>
 8011054:	4606      	mov	r6, r0
 8011056:	b928      	cbnz	r0, 8011064 <_dtoa_r+0x8a4>
 8011058:	4b82      	ldr	r3, [pc, #520]	@ (8011264 <_dtoa_r+0xaa4>)
 801105a:	4602      	mov	r2, r0
 801105c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011060:	f7ff bbc7 	b.w	80107f2 <_dtoa_r+0x32>
 8011064:	692a      	ldr	r2, [r5, #16]
 8011066:	3202      	adds	r2, #2
 8011068:	0092      	lsls	r2, r2, #2
 801106a:	f105 010c 	add.w	r1, r5, #12
 801106e:	300c      	adds	r0, #12
 8011070:	f000 ffac 	bl	8011fcc <memcpy>
 8011074:	2201      	movs	r2, #1
 8011076:	4631      	mov	r1, r6
 8011078:	4648      	mov	r0, r9
 801107a:	f000 fc05 	bl	8011888 <__lshift>
 801107e:	1c7b      	adds	r3, r7, #1
 8011080:	9305      	str	r3, [sp, #20]
 8011082:	eb07 030b 	add.w	r3, r7, fp
 8011086:	9309      	str	r3, [sp, #36]	@ 0x24
 8011088:	9b02      	ldr	r3, [sp, #8]
 801108a:	f003 0301 	and.w	r3, r3, #1
 801108e:	46a8      	mov	r8, r5
 8011090:	9308      	str	r3, [sp, #32]
 8011092:	4605      	mov	r5, r0
 8011094:	9b05      	ldr	r3, [sp, #20]
 8011096:	9801      	ldr	r0, [sp, #4]
 8011098:	4621      	mov	r1, r4
 801109a:	f103 3bff 	add.w	fp, r3, #4294967295
 801109e:	f7ff fb04 	bl	80106aa <quorem>
 80110a2:	4641      	mov	r1, r8
 80110a4:	9002      	str	r0, [sp, #8]
 80110a6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80110aa:	9801      	ldr	r0, [sp, #4]
 80110ac:	f000 fc58 	bl	8011960 <__mcmp>
 80110b0:	462a      	mov	r2, r5
 80110b2:	9006      	str	r0, [sp, #24]
 80110b4:	4621      	mov	r1, r4
 80110b6:	4648      	mov	r0, r9
 80110b8:	f000 fc6e 	bl	8011998 <__mdiff>
 80110bc:	68c2      	ldr	r2, [r0, #12]
 80110be:	4606      	mov	r6, r0
 80110c0:	b9fa      	cbnz	r2, 8011102 <_dtoa_r+0x942>
 80110c2:	4601      	mov	r1, r0
 80110c4:	9801      	ldr	r0, [sp, #4]
 80110c6:	f000 fc4b 	bl	8011960 <__mcmp>
 80110ca:	4602      	mov	r2, r0
 80110cc:	4631      	mov	r1, r6
 80110ce:	4648      	mov	r0, r9
 80110d0:	920a      	str	r2, [sp, #40]	@ 0x28
 80110d2:	f000 fa0b 	bl	80114ec <_Bfree>
 80110d6:	9b07      	ldr	r3, [sp, #28]
 80110d8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80110da:	9e05      	ldr	r6, [sp, #20]
 80110dc:	ea43 0102 	orr.w	r1, r3, r2
 80110e0:	9b08      	ldr	r3, [sp, #32]
 80110e2:	4319      	orrs	r1, r3
 80110e4:	d10f      	bne.n	8011106 <_dtoa_r+0x946>
 80110e6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80110ea:	d028      	beq.n	801113e <_dtoa_r+0x97e>
 80110ec:	9b06      	ldr	r3, [sp, #24]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	dd02      	ble.n	80110f8 <_dtoa_r+0x938>
 80110f2:	9b02      	ldr	r3, [sp, #8]
 80110f4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80110f8:	f88b a000 	strb.w	sl, [fp]
 80110fc:	e639      	b.n	8010d72 <_dtoa_r+0x5b2>
 80110fe:	4628      	mov	r0, r5
 8011100:	e7bd      	b.n	801107e <_dtoa_r+0x8be>
 8011102:	2201      	movs	r2, #1
 8011104:	e7e2      	b.n	80110cc <_dtoa_r+0x90c>
 8011106:	9b06      	ldr	r3, [sp, #24]
 8011108:	2b00      	cmp	r3, #0
 801110a:	db04      	blt.n	8011116 <_dtoa_r+0x956>
 801110c:	9907      	ldr	r1, [sp, #28]
 801110e:	430b      	orrs	r3, r1
 8011110:	9908      	ldr	r1, [sp, #32]
 8011112:	430b      	orrs	r3, r1
 8011114:	d120      	bne.n	8011158 <_dtoa_r+0x998>
 8011116:	2a00      	cmp	r2, #0
 8011118:	ddee      	ble.n	80110f8 <_dtoa_r+0x938>
 801111a:	9901      	ldr	r1, [sp, #4]
 801111c:	2201      	movs	r2, #1
 801111e:	4648      	mov	r0, r9
 8011120:	f000 fbb2 	bl	8011888 <__lshift>
 8011124:	4621      	mov	r1, r4
 8011126:	9001      	str	r0, [sp, #4]
 8011128:	f000 fc1a 	bl	8011960 <__mcmp>
 801112c:	2800      	cmp	r0, #0
 801112e:	dc03      	bgt.n	8011138 <_dtoa_r+0x978>
 8011130:	d1e2      	bne.n	80110f8 <_dtoa_r+0x938>
 8011132:	f01a 0f01 	tst.w	sl, #1
 8011136:	d0df      	beq.n	80110f8 <_dtoa_r+0x938>
 8011138:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801113c:	d1d9      	bne.n	80110f2 <_dtoa_r+0x932>
 801113e:	2339      	movs	r3, #57	@ 0x39
 8011140:	f88b 3000 	strb.w	r3, [fp]
 8011144:	4633      	mov	r3, r6
 8011146:	461e      	mov	r6, r3
 8011148:	3b01      	subs	r3, #1
 801114a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801114e:	2a39      	cmp	r2, #57	@ 0x39
 8011150:	d053      	beq.n	80111fa <_dtoa_r+0xa3a>
 8011152:	3201      	adds	r2, #1
 8011154:	701a      	strb	r2, [r3, #0]
 8011156:	e60c      	b.n	8010d72 <_dtoa_r+0x5b2>
 8011158:	2a00      	cmp	r2, #0
 801115a:	dd07      	ble.n	801116c <_dtoa_r+0x9ac>
 801115c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8011160:	d0ed      	beq.n	801113e <_dtoa_r+0x97e>
 8011162:	f10a 0301 	add.w	r3, sl, #1
 8011166:	f88b 3000 	strb.w	r3, [fp]
 801116a:	e602      	b.n	8010d72 <_dtoa_r+0x5b2>
 801116c:	9b05      	ldr	r3, [sp, #20]
 801116e:	9a05      	ldr	r2, [sp, #20]
 8011170:	f803 ac01 	strb.w	sl, [r3, #-1]
 8011174:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011176:	4293      	cmp	r3, r2
 8011178:	d029      	beq.n	80111ce <_dtoa_r+0xa0e>
 801117a:	9901      	ldr	r1, [sp, #4]
 801117c:	2300      	movs	r3, #0
 801117e:	220a      	movs	r2, #10
 8011180:	4648      	mov	r0, r9
 8011182:	f000 f9d5 	bl	8011530 <__multadd>
 8011186:	45a8      	cmp	r8, r5
 8011188:	9001      	str	r0, [sp, #4]
 801118a:	f04f 0300 	mov.w	r3, #0
 801118e:	f04f 020a 	mov.w	r2, #10
 8011192:	4641      	mov	r1, r8
 8011194:	4648      	mov	r0, r9
 8011196:	d107      	bne.n	80111a8 <_dtoa_r+0x9e8>
 8011198:	f000 f9ca 	bl	8011530 <__multadd>
 801119c:	4680      	mov	r8, r0
 801119e:	4605      	mov	r5, r0
 80111a0:	9b05      	ldr	r3, [sp, #20]
 80111a2:	3301      	adds	r3, #1
 80111a4:	9305      	str	r3, [sp, #20]
 80111a6:	e775      	b.n	8011094 <_dtoa_r+0x8d4>
 80111a8:	f000 f9c2 	bl	8011530 <__multadd>
 80111ac:	4629      	mov	r1, r5
 80111ae:	4680      	mov	r8, r0
 80111b0:	2300      	movs	r3, #0
 80111b2:	220a      	movs	r2, #10
 80111b4:	4648      	mov	r0, r9
 80111b6:	f000 f9bb 	bl	8011530 <__multadd>
 80111ba:	4605      	mov	r5, r0
 80111bc:	e7f0      	b.n	80111a0 <_dtoa_r+0x9e0>
 80111be:	f1bb 0f00 	cmp.w	fp, #0
 80111c2:	bfcc      	ite	gt
 80111c4:	465e      	movgt	r6, fp
 80111c6:	2601      	movle	r6, #1
 80111c8:	443e      	add	r6, r7
 80111ca:	f04f 0800 	mov.w	r8, #0
 80111ce:	9901      	ldr	r1, [sp, #4]
 80111d0:	2201      	movs	r2, #1
 80111d2:	4648      	mov	r0, r9
 80111d4:	f000 fb58 	bl	8011888 <__lshift>
 80111d8:	4621      	mov	r1, r4
 80111da:	9001      	str	r0, [sp, #4]
 80111dc:	f000 fbc0 	bl	8011960 <__mcmp>
 80111e0:	2800      	cmp	r0, #0
 80111e2:	dcaf      	bgt.n	8011144 <_dtoa_r+0x984>
 80111e4:	d102      	bne.n	80111ec <_dtoa_r+0xa2c>
 80111e6:	f01a 0f01 	tst.w	sl, #1
 80111ea:	d1ab      	bne.n	8011144 <_dtoa_r+0x984>
 80111ec:	4633      	mov	r3, r6
 80111ee:	461e      	mov	r6, r3
 80111f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80111f4:	2a30      	cmp	r2, #48	@ 0x30
 80111f6:	d0fa      	beq.n	80111ee <_dtoa_r+0xa2e>
 80111f8:	e5bb      	b.n	8010d72 <_dtoa_r+0x5b2>
 80111fa:	429f      	cmp	r7, r3
 80111fc:	d1a3      	bne.n	8011146 <_dtoa_r+0x986>
 80111fe:	9b04      	ldr	r3, [sp, #16]
 8011200:	3301      	adds	r3, #1
 8011202:	9304      	str	r3, [sp, #16]
 8011204:	2331      	movs	r3, #49	@ 0x31
 8011206:	703b      	strb	r3, [r7, #0]
 8011208:	e5b3      	b.n	8010d72 <_dtoa_r+0x5b2>
 801120a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801120c:	4f16      	ldr	r7, [pc, #88]	@ (8011268 <_dtoa_r+0xaa8>)
 801120e:	b11b      	cbz	r3, 8011218 <_dtoa_r+0xa58>
 8011210:	f107 0308 	add.w	r3, r7, #8
 8011214:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8011216:	6013      	str	r3, [r2, #0]
 8011218:	4638      	mov	r0, r7
 801121a:	b011      	add	sp, #68	@ 0x44
 801121c:	ecbd 8b02 	vpop	{d8}
 8011220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011224:	9b07      	ldr	r3, [sp, #28]
 8011226:	2b01      	cmp	r3, #1
 8011228:	f77f ae36 	ble.w	8010e98 <_dtoa_r+0x6d8>
 801122c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801122e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011230:	2001      	movs	r0, #1
 8011232:	e656      	b.n	8010ee2 <_dtoa_r+0x722>
 8011234:	f1bb 0f00 	cmp.w	fp, #0
 8011238:	f77f aed7 	ble.w	8010fea <_dtoa_r+0x82a>
 801123c:	463e      	mov	r6, r7
 801123e:	9801      	ldr	r0, [sp, #4]
 8011240:	4621      	mov	r1, r4
 8011242:	f7ff fa32 	bl	80106aa <quorem>
 8011246:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801124a:	f806 ab01 	strb.w	sl, [r6], #1
 801124e:	1bf2      	subs	r2, r6, r7
 8011250:	4593      	cmp	fp, r2
 8011252:	ddb4      	ble.n	80111be <_dtoa_r+0x9fe>
 8011254:	9901      	ldr	r1, [sp, #4]
 8011256:	2300      	movs	r3, #0
 8011258:	220a      	movs	r2, #10
 801125a:	4648      	mov	r0, r9
 801125c:	f000 f968 	bl	8011530 <__multadd>
 8011260:	9001      	str	r0, [sp, #4]
 8011262:	e7ec      	b.n	801123e <_dtoa_r+0xa7e>
 8011264:	0801283c 	.word	0x0801283c
 8011268:	080127c0 	.word	0x080127c0

0801126c <_free_r>:
 801126c:	b538      	push	{r3, r4, r5, lr}
 801126e:	4605      	mov	r5, r0
 8011270:	2900      	cmp	r1, #0
 8011272:	d041      	beq.n	80112f8 <_free_r+0x8c>
 8011274:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011278:	1f0c      	subs	r4, r1, #4
 801127a:	2b00      	cmp	r3, #0
 801127c:	bfb8      	it	lt
 801127e:	18e4      	addlt	r4, r4, r3
 8011280:	f000 f8e8 	bl	8011454 <__malloc_lock>
 8011284:	4a1d      	ldr	r2, [pc, #116]	@ (80112fc <_free_r+0x90>)
 8011286:	6813      	ldr	r3, [r2, #0]
 8011288:	b933      	cbnz	r3, 8011298 <_free_r+0x2c>
 801128a:	6063      	str	r3, [r4, #4]
 801128c:	6014      	str	r4, [r2, #0]
 801128e:	4628      	mov	r0, r5
 8011290:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011294:	f000 b8e4 	b.w	8011460 <__malloc_unlock>
 8011298:	42a3      	cmp	r3, r4
 801129a:	d908      	bls.n	80112ae <_free_r+0x42>
 801129c:	6820      	ldr	r0, [r4, #0]
 801129e:	1821      	adds	r1, r4, r0
 80112a0:	428b      	cmp	r3, r1
 80112a2:	bf01      	itttt	eq
 80112a4:	6819      	ldreq	r1, [r3, #0]
 80112a6:	685b      	ldreq	r3, [r3, #4]
 80112a8:	1809      	addeq	r1, r1, r0
 80112aa:	6021      	streq	r1, [r4, #0]
 80112ac:	e7ed      	b.n	801128a <_free_r+0x1e>
 80112ae:	461a      	mov	r2, r3
 80112b0:	685b      	ldr	r3, [r3, #4]
 80112b2:	b10b      	cbz	r3, 80112b8 <_free_r+0x4c>
 80112b4:	42a3      	cmp	r3, r4
 80112b6:	d9fa      	bls.n	80112ae <_free_r+0x42>
 80112b8:	6811      	ldr	r1, [r2, #0]
 80112ba:	1850      	adds	r0, r2, r1
 80112bc:	42a0      	cmp	r0, r4
 80112be:	d10b      	bne.n	80112d8 <_free_r+0x6c>
 80112c0:	6820      	ldr	r0, [r4, #0]
 80112c2:	4401      	add	r1, r0
 80112c4:	1850      	adds	r0, r2, r1
 80112c6:	4283      	cmp	r3, r0
 80112c8:	6011      	str	r1, [r2, #0]
 80112ca:	d1e0      	bne.n	801128e <_free_r+0x22>
 80112cc:	6818      	ldr	r0, [r3, #0]
 80112ce:	685b      	ldr	r3, [r3, #4]
 80112d0:	6053      	str	r3, [r2, #4]
 80112d2:	4408      	add	r0, r1
 80112d4:	6010      	str	r0, [r2, #0]
 80112d6:	e7da      	b.n	801128e <_free_r+0x22>
 80112d8:	d902      	bls.n	80112e0 <_free_r+0x74>
 80112da:	230c      	movs	r3, #12
 80112dc:	602b      	str	r3, [r5, #0]
 80112de:	e7d6      	b.n	801128e <_free_r+0x22>
 80112e0:	6820      	ldr	r0, [r4, #0]
 80112e2:	1821      	adds	r1, r4, r0
 80112e4:	428b      	cmp	r3, r1
 80112e6:	bf04      	itt	eq
 80112e8:	6819      	ldreq	r1, [r3, #0]
 80112ea:	685b      	ldreq	r3, [r3, #4]
 80112ec:	6063      	str	r3, [r4, #4]
 80112ee:	bf04      	itt	eq
 80112f0:	1809      	addeq	r1, r1, r0
 80112f2:	6021      	streq	r1, [r4, #0]
 80112f4:	6054      	str	r4, [r2, #4]
 80112f6:	e7ca      	b.n	801128e <_free_r+0x22>
 80112f8:	bd38      	pop	{r3, r4, r5, pc}
 80112fa:	bf00      	nop
 80112fc:	240026c4 	.word	0x240026c4

08011300 <malloc>:
 8011300:	4b02      	ldr	r3, [pc, #8]	@ (801130c <malloc+0xc>)
 8011302:	4601      	mov	r1, r0
 8011304:	6818      	ldr	r0, [r3, #0]
 8011306:	f000 b825 	b.w	8011354 <_malloc_r>
 801130a:	bf00      	nop
 801130c:	24000138 	.word	0x24000138

08011310 <sbrk_aligned>:
 8011310:	b570      	push	{r4, r5, r6, lr}
 8011312:	4e0f      	ldr	r6, [pc, #60]	@ (8011350 <sbrk_aligned+0x40>)
 8011314:	460c      	mov	r4, r1
 8011316:	6831      	ldr	r1, [r6, #0]
 8011318:	4605      	mov	r5, r0
 801131a:	b911      	cbnz	r1, 8011322 <sbrk_aligned+0x12>
 801131c:	f000 fe46 	bl	8011fac <_sbrk_r>
 8011320:	6030      	str	r0, [r6, #0]
 8011322:	4621      	mov	r1, r4
 8011324:	4628      	mov	r0, r5
 8011326:	f000 fe41 	bl	8011fac <_sbrk_r>
 801132a:	1c43      	adds	r3, r0, #1
 801132c:	d103      	bne.n	8011336 <sbrk_aligned+0x26>
 801132e:	f04f 34ff 	mov.w	r4, #4294967295
 8011332:	4620      	mov	r0, r4
 8011334:	bd70      	pop	{r4, r5, r6, pc}
 8011336:	1cc4      	adds	r4, r0, #3
 8011338:	f024 0403 	bic.w	r4, r4, #3
 801133c:	42a0      	cmp	r0, r4
 801133e:	d0f8      	beq.n	8011332 <sbrk_aligned+0x22>
 8011340:	1a21      	subs	r1, r4, r0
 8011342:	4628      	mov	r0, r5
 8011344:	f000 fe32 	bl	8011fac <_sbrk_r>
 8011348:	3001      	adds	r0, #1
 801134a:	d1f2      	bne.n	8011332 <sbrk_aligned+0x22>
 801134c:	e7ef      	b.n	801132e <sbrk_aligned+0x1e>
 801134e:	bf00      	nop
 8011350:	240026c0 	.word	0x240026c0

08011354 <_malloc_r>:
 8011354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011358:	1ccd      	adds	r5, r1, #3
 801135a:	f025 0503 	bic.w	r5, r5, #3
 801135e:	3508      	adds	r5, #8
 8011360:	2d0c      	cmp	r5, #12
 8011362:	bf38      	it	cc
 8011364:	250c      	movcc	r5, #12
 8011366:	2d00      	cmp	r5, #0
 8011368:	4606      	mov	r6, r0
 801136a:	db01      	blt.n	8011370 <_malloc_r+0x1c>
 801136c:	42a9      	cmp	r1, r5
 801136e:	d904      	bls.n	801137a <_malloc_r+0x26>
 8011370:	230c      	movs	r3, #12
 8011372:	6033      	str	r3, [r6, #0]
 8011374:	2000      	movs	r0, #0
 8011376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801137a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011450 <_malloc_r+0xfc>
 801137e:	f000 f869 	bl	8011454 <__malloc_lock>
 8011382:	f8d8 3000 	ldr.w	r3, [r8]
 8011386:	461c      	mov	r4, r3
 8011388:	bb44      	cbnz	r4, 80113dc <_malloc_r+0x88>
 801138a:	4629      	mov	r1, r5
 801138c:	4630      	mov	r0, r6
 801138e:	f7ff ffbf 	bl	8011310 <sbrk_aligned>
 8011392:	1c43      	adds	r3, r0, #1
 8011394:	4604      	mov	r4, r0
 8011396:	d158      	bne.n	801144a <_malloc_r+0xf6>
 8011398:	f8d8 4000 	ldr.w	r4, [r8]
 801139c:	4627      	mov	r7, r4
 801139e:	2f00      	cmp	r7, #0
 80113a0:	d143      	bne.n	801142a <_malloc_r+0xd6>
 80113a2:	2c00      	cmp	r4, #0
 80113a4:	d04b      	beq.n	801143e <_malloc_r+0xea>
 80113a6:	6823      	ldr	r3, [r4, #0]
 80113a8:	4639      	mov	r1, r7
 80113aa:	4630      	mov	r0, r6
 80113ac:	eb04 0903 	add.w	r9, r4, r3
 80113b0:	f000 fdfc 	bl	8011fac <_sbrk_r>
 80113b4:	4581      	cmp	r9, r0
 80113b6:	d142      	bne.n	801143e <_malloc_r+0xea>
 80113b8:	6821      	ldr	r1, [r4, #0]
 80113ba:	1a6d      	subs	r5, r5, r1
 80113bc:	4629      	mov	r1, r5
 80113be:	4630      	mov	r0, r6
 80113c0:	f7ff ffa6 	bl	8011310 <sbrk_aligned>
 80113c4:	3001      	adds	r0, #1
 80113c6:	d03a      	beq.n	801143e <_malloc_r+0xea>
 80113c8:	6823      	ldr	r3, [r4, #0]
 80113ca:	442b      	add	r3, r5
 80113cc:	6023      	str	r3, [r4, #0]
 80113ce:	f8d8 3000 	ldr.w	r3, [r8]
 80113d2:	685a      	ldr	r2, [r3, #4]
 80113d4:	bb62      	cbnz	r2, 8011430 <_malloc_r+0xdc>
 80113d6:	f8c8 7000 	str.w	r7, [r8]
 80113da:	e00f      	b.n	80113fc <_malloc_r+0xa8>
 80113dc:	6822      	ldr	r2, [r4, #0]
 80113de:	1b52      	subs	r2, r2, r5
 80113e0:	d420      	bmi.n	8011424 <_malloc_r+0xd0>
 80113e2:	2a0b      	cmp	r2, #11
 80113e4:	d917      	bls.n	8011416 <_malloc_r+0xc2>
 80113e6:	1961      	adds	r1, r4, r5
 80113e8:	42a3      	cmp	r3, r4
 80113ea:	6025      	str	r5, [r4, #0]
 80113ec:	bf18      	it	ne
 80113ee:	6059      	strne	r1, [r3, #4]
 80113f0:	6863      	ldr	r3, [r4, #4]
 80113f2:	bf08      	it	eq
 80113f4:	f8c8 1000 	streq.w	r1, [r8]
 80113f8:	5162      	str	r2, [r4, r5]
 80113fa:	604b      	str	r3, [r1, #4]
 80113fc:	4630      	mov	r0, r6
 80113fe:	f000 f82f 	bl	8011460 <__malloc_unlock>
 8011402:	f104 000b 	add.w	r0, r4, #11
 8011406:	1d23      	adds	r3, r4, #4
 8011408:	f020 0007 	bic.w	r0, r0, #7
 801140c:	1ac2      	subs	r2, r0, r3
 801140e:	bf1c      	itt	ne
 8011410:	1a1b      	subne	r3, r3, r0
 8011412:	50a3      	strne	r3, [r4, r2]
 8011414:	e7af      	b.n	8011376 <_malloc_r+0x22>
 8011416:	6862      	ldr	r2, [r4, #4]
 8011418:	42a3      	cmp	r3, r4
 801141a:	bf0c      	ite	eq
 801141c:	f8c8 2000 	streq.w	r2, [r8]
 8011420:	605a      	strne	r2, [r3, #4]
 8011422:	e7eb      	b.n	80113fc <_malloc_r+0xa8>
 8011424:	4623      	mov	r3, r4
 8011426:	6864      	ldr	r4, [r4, #4]
 8011428:	e7ae      	b.n	8011388 <_malloc_r+0x34>
 801142a:	463c      	mov	r4, r7
 801142c:	687f      	ldr	r7, [r7, #4]
 801142e:	e7b6      	b.n	801139e <_malloc_r+0x4a>
 8011430:	461a      	mov	r2, r3
 8011432:	685b      	ldr	r3, [r3, #4]
 8011434:	42a3      	cmp	r3, r4
 8011436:	d1fb      	bne.n	8011430 <_malloc_r+0xdc>
 8011438:	2300      	movs	r3, #0
 801143a:	6053      	str	r3, [r2, #4]
 801143c:	e7de      	b.n	80113fc <_malloc_r+0xa8>
 801143e:	230c      	movs	r3, #12
 8011440:	6033      	str	r3, [r6, #0]
 8011442:	4630      	mov	r0, r6
 8011444:	f000 f80c 	bl	8011460 <__malloc_unlock>
 8011448:	e794      	b.n	8011374 <_malloc_r+0x20>
 801144a:	6005      	str	r5, [r0, #0]
 801144c:	e7d6      	b.n	80113fc <_malloc_r+0xa8>
 801144e:	bf00      	nop
 8011450:	240026c4 	.word	0x240026c4

08011454 <__malloc_lock>:
 8011454:	4801      	ldr	r0, [pc, #4]	@ (801145c <__malloc_lock+0x8>)
 8011456:	f7ff b926 	b.w	80106a6 <__retarget_lock_acquire_recursive>
 801145a:	bf00      	nop
 801145c:	240026bc 	.word	0x240026bc

08011460 <__malloc_unlock>:
 8011460:	4801      	ldr	r0, [pc, #4]	@ (8011468 <__malloc_unlock+0x8>)
 8011462:	f7ff b921 	b.w	80106a8 <__retarget_lock_release_recursive>
 8011466:	bf00      	nop
 8011468:	240026bc 	.word	0x240026bc

0801146c <_Balloc>:
 801146c:	b570      	push	{r4, r5, r6, lr}
 801146e:	69c6      	ldr	r6, [r0, #28]
 8011470:	4604      	mov	r4, r0
 8011472:	460d      	mov	r5, r1
 8011474:	b976      	cbnz	r6, 8011494 <_Balloc+0x28>
 8011476:	2010      	movs	r0, #16
 8011478:	f7ff ff42 	bl	8011300 <malloc>
 801147c:	4602      	mov	r2, r0
 801147e:	61e0      	str	r0, [r4, #28]
 8011480:	b920      	cbnz	r0, 801148c <_Balloc+0x20>
 8011482:	4b18      	ldr	r3, [pc, #96]	@ (80114e4 <_Balloc+0x78>)
 8011484:	4818      	ldr	r0, [pc, #96]	@ (80114e8 <_Balloc+0x7c>)
 8011486:	216b      	movs	r1, #107	@ 0x6b
 8011488:	f000 fdae 	bl	8011fe8 <__assert_func>
 801148c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011490:	6006      	str	r6, [r0, #0]
 8011492:	60c6      	str	r6, [r0, #12]
 8011494:	69e6      	ldr	r6, [r4, #28]
 8011496:	68f3      	ldr	r3, [r6, #12]
 8011498:	b183      	cbz	r3, 80114bc <_Balloc+0x50>
 801149a:	69e3      	ldr	r3, [r4, #28]
 801149c:	68db      	ldr	r3, [r3, #12]
 801149e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80114a2:	b9b8      	cbnz	r0, 80114d4 <_Balloc+0x68>
 80114a4:	2101      	movs	r1, #1
 80114a6:	fa01 f605 	lsl.w	r6, r1, r5
 80114aa:	1d72      	adds	r2, r6, #5
 80114ac:	0092      	lsls	r2, r2, #2
 80114ae:	4620      	mov	r0, r4
 80114b0:	f000 fdb8 	bl	8012024 <_calloc_r>
 80114b4:	b160      	cbz	r0, 80114d0 <_Balloc+0x64>
 80114b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80114ba:	e00e      	b.n	80114da <_Balloc+0x6e>
 80114bc:	2221      	movs	r2, #33	@ 0x21
 80114be:	2104      	movs	r1, #4
 80114c0:	4620      	mov	r0, r4
 80114c2:	f000 fdaf 	bl	8012024 <_calloc_r>
 80114c6:	69e3      	ldr	r3, [r4, #28]
 80114c8:	60f0      	str	r0, [r6, #12]
 80114ca:	68db      	ldr	r3, [r3, #12]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d1e4      	bne.n	801149a <_Balloc+0x2e>
 80114d0:	2000      	movs	r0, #0
 80114d2:	bd70      	pop	{r4, r5, r6, pc}
 80114d4:	6802      	ldr	r2, [r0, #0]
 80114d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80114da:	2300      	movs	r3, #0
 80114dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80114e0:	e7f7      	b.n	80114d2 <_Balloc+0x66>
 80114e2:	bf00      	nop
 80114e4:	080127cd 	.word	0x080127cd
 80114e8:	0801284d 	.word	0x0801284d

080114ec <_Bfree>:
 80114ec:	b570      	push	{r4, r5, r6, lr}
 80114ee:	69c6      	ldr	r6, [r0, #28]
 80114f0:	4605      	mov	r5, r0
 80114f2:	460c      	mov	r4, r1
 80114f4:	b976      	cbnz	r6, 8011514 <_Bfree+0x28>
 80114f6:	2010      	movs	r0, #16
 80114f8:	f7ff ff02 	bl	8011300 <malloc>
 80114fc:	4602      	mov	r2, r0
 80114fe:	61e8      	str	r0, [r5, #28]
 8011500:	b920      	cbnz	r0, 801150c <_Bfree+0x20>
 8011502:	4b09      	ldr	r3, [pc, #36]	@ (8011528 <_Bfree+0x3c>)
 8011504:	4809      	ldr	r0, [pc, #36]	@ (801152c <_Bfree+0x40>)
 8011506:	218f      	movs	r1, #143	@ 0x8f
 8011508:	f000 fd6e 	bl	8011fe8 <__assert_func>
 801150c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011510:	6006      	str	r6, [r0, #0]
 8011512:	60c6      	str	r6, [r0, #12]
 8011514:	b13c      	cbz	r4, 8011526 <_Bfree+0x3a>
 8011516:	69eb      	ldr	r3, [r5, #28]
 8011518:	6862      	ldr	r2, [r4, #4]
 801151a:	68db      	ldr	r3, [r3, #12]
 801151c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011520:	6021      	str	r1, [r4, #0]
 8011522:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011526:	bd70      	pop	{r4, r5, r6, pc}
 8011528:	080127cd 	.word	0x080127cd
 801152c:	0801284d 	.word	0x0801284d

08011530 <__multadd>:
 8011530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011534:	690d      	ldr	r5, [r1, #16]
 8011536:	4607      	mov	r7, r0
 8011538:	460c      	mov	r4, r1
 801153a:	461e      	mov	r6, r3
 801153c:	f101 0c14 	add.w	ip, r1, #20
 8011540:	2000      	movs	r0, #0
 8011542:	f8dc 3000 	ldr.w	r3, [ip]
 8011546:	b299      	uxth	r1, r3
 8011548:	fb02 6101 	mla	r1, r2, r1, r6
 801154c:	0c1e      	lsrs	r6, r3, #16
 801154e:	0c0b      	lsrs	r3, r1, #16
 8011550:	fb02 3306 	mla	r3, r2, r6, r3
 8011554:	b289      	uxth	r1, r1
 8011556:	3001      	adds	r0, #1
 8011558:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801155c:	4285      	cmp	r5, r0
 801155e:	f84c 1b04 	str.w	r1, [ip], #4
 8011562:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011566:	dcec      	bgt.n	8011542 <__multadd+0x12>
 8011568:	b30e      	cbz	r6, 80115ae <__multadd+0x7e>
 801156a:	68a3      	ldr	r3, [r4, #8]
 801156c:	42ab      	cmp	r3, r5
 801156e:	dc19      	bgt.n	80115a4 <__multadd+0x74>
 8011570:	6861      	ldr	r1, [r4, #4]
 8011572:	4638      	mov	r0, r7
 8011574:	3101      	adds	r1, #1
 8011576:	f7ff ff79 	bl	801146c <_Balloc>
 801157a:	4680      	mov	r8, r0
 801157c:	b928      	cbnz	r0, 801158a <__multadd+0x5a>
 801157e:	4602      	mov	r2, r0
 8011580:	4b0c      	ldr	r3, [pc, #48]	@ (80115b4 <__multadd+0x84>)
 8011582:	480d      	ldr	r0, [pc, #52]	@ (80115b8 <__multadd+0x88>)
 8011584:	21ba      	movs	r1, #186	@ 0xba
 8011586:	f000 fd2f 	bl	8011fe8 <__assert_func>
 801158a:	6922      	ldr	r2, [r4, #16]
 801158c:	3202      	adds	r2, #2
 801158e:	f104 010c 	add.w	r1, r4, #12
 8011592:	0092      	lsls	r2, r2, #2
 8011594:	300c      	adds	r0, #12
 8011596:	f000 fd19 	bl	8011fcc <memcpy>
 801159a:	4621      	mov	r1, r4
 801159c:	4638      	mov	r0, r7
 801159e:	f7ff ffa5 	bl	80114ec <_Bfree>
 80115a2:	4644      	mov	r4, r8
 80115a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80115a8:	3501      	adds	r5, #1
 80115aa:	615e      	str	r6, [r3, #20]
 80115ac:	6125      	str	r5, [r4, #16]
 80115ae:	4620      	mov	r0, r4
 80115b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115b4:	0801283c 	.word	0x0801283c
 80115b8:	0801284d 	.word	0x0801284d

080115bc <__hi0bits>:
 80115bc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80115c0:	4603      	mov	r3, r0
 80115c2:	bf36      	itet	cc
 80115c4:	0403      	lslcc	r3, r0, #16
 80115c6:	2000      	movcs	r0, #0
 80115c8:	2010      	movcc	r0, #16
 80115ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80115ce:	bf3c      	itt	cc
 80115d0:	021b      	lslcc	r3, r3, #8
 80115d2:	3008      	addcc	r0, #8
 80115d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80115d8:	bf3c      	itt	cc
 80115da:	011b      	lslcc	r3, r3, #4
 80115dc:	3004      	addcc	r0, #4
 80115de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80115e2:	bf3c      	itt	cc
 80115e4:	009b      	lslcc	r3, r3, #2
 80115e6:	3002      	addcc	r0, #2
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	db05      	blt.n	80115f8 <__hi0bits+0x3c>
 80115ec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80115f0:	f100 0001 	add.w	r0, r0, #1
 80115f4:	bf08      	it	eq
 80115f6:	2020      	moveq	r0, #32
 80115f8:	4770      	bx	lr

080115fa <__lo0bits>:
 80115fa:	6803      	ldr	r3, [r0, #0]
 80115fc:	4602      	mov	r2, r0
 80115fe:	f013 0007 	ands.w	r0, r3, #7
 8011602:	d00b      	beq.n	801161c <__lo0bits+0x22>
 8011604:	07d9      	lsls	r1, r3, #31
 8011606:	d421      	bmi.n	801164c <__lo0bits+0x52>
 8011608:	0798      	lsls	r0, r3, #30
 801160a:	bf49      	itett	mi
 801160c:	085b      	lsrmi	r3, r3, #1
 801160e:	089b      	lsrpl	r3, r3, #2
 8011610:	2001      	movmi	r0, #1
 8011612:	6013      	strmi	r3, [r2, #0]
 8011614:	bf5c      	itt	pl
 8011616:	6013      	strpl	r3, [r2, #0]
 8011618:	2002      	movpl	r0, #2
 801161a:	4770      	bx	lr
 801161c:	b299      	uxth	r1, r3
 801161e:	b909      	cbnz	r1, 8011624 <__lo0bits+0x2a>
 8011620:	0c1b      	lsrs	r3, r3, #16
 8011622:	2010      	movs	r0, #16
 8011624:	b2d9      	uxtb	r1, r3
 8011626:	b909      	cbnz	r1, 801162c <__lo0bits+0x32>
 8011628:	3008      	adds	r0, #8
 801162a:	0a1b      	lsrs	r3, r3, #8
 801162c:	0719      	lsls	r1, r3, #28
 801162e:	bf04      	itt	eq
 8011630:	091b      	lsreq	r3, r3, #4
 8011632:	3004      	addeq	r0, #4
 8011634:	0799      	lsls	r1, r3, #30
 8011636:	bf04      	itt	eq
 8011638:	089b      	lsreq	r3, r3, #2
 801163a:	3002      	addeq	r0, #2
 801163c:	07d9      	lsls	r1, r3, #31
 801163e:	d403      	bmi.n	8011648 <__lo0bits+0x4e>
 8011640:	085b      	lsrs	r3, r3, #1
 8011642:	f100 0001 	add.w	r0, r0, #1
 8011646:	d003      	beq.n	8011650 <__lo0bits+0x56>
 8011648:	6013      	str	r3, [r2, #0]
 801164a:	4770      	bx	lr
 801164c:	2000      	movs	r0, #0
 801164e:	4770      	bx	lr
 8011650:	2020      	movs	r0, #32
 8011652:	4770      	bx	lr

08011654 <__i2b>:
 8011654:	b510      	push	{r4, lr}
 8011656:	460c      	mov	r4, r1
 8011658:	2101      	movs	r1, #1
 801165a:	f7ff ff07 	bl	801146c <_Balloc>
 801165e:	4602      	mov	r2, r0
 8011660:	b928      	cbnz	r0, 801166e <__i2b+0x1a>
 8011662:	4b05      	ldr	r3, [pc, #20]	@ (8011678 <__i2b+0x24>)
 8011664:	4805      	ldr	r0, [pc, #20]	@ (801167c <__i2b+0x28>)
 8011666:	f240 1145 	movw	r1, #325	@ 0x145
 801166a:	f000 fcbd 	bl	8011fe8 <__assert_func>
 801166e:	2301      	movs	r3, #1
 8011670:	6144      	str	r4, [r0, #20]
 8011672:	6103      	str	r3, [r0, #16]
 8011674:	bd10      	pop	{r4, pc}
 8011676:	bf00      	nop
 8011678:	0801283c 	.word	0x0801283c
 801167c:	0801284d 	.word	0x0801284d

08011680 <__multiply>:
 8011680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011684:	4614      	mov	r4, r2
 8011686:	690a      	ldr	r2, [r1, #16]
 8011688:	6923      	ldr	r3, [r4, #16]
 801168a:	429a      	cmp	r2, r3
 801168c:	bfa8      	it	ge
 801168e:	4623      	movge	r3, r4
 8011690:	460f      	mov	r7, r1
 8011692:	bfa4      	itt	ge
 8011694:	460c      	movge	r4, r1
 8011696:	461f      	movge	r7, r3
 8011698:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801169c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80116a0:	68a3      	ldr	r3, [r4, #8]
 80116a2:	6861      	ldr	r1, [r4, #4]
 80116a4:	eb0a 0609 	add.w	r6, sl, r9
 80116a8:	42b3      	cmp	r3, r6
 80116aa:	b085      	sub	sp, #20
 80116ac:	bfb8      	it	lt
 80116ae:	3101      	addlt	r1, #1
 80116b0:	f7ff fedc 	bl	801146c <_Balloc>
 80116b4:	b930      	cbnz	r0, 80116c4 <__multiply+0x44>
 80116b6:	4602      	mov	r2, r0
 80116b8:	4b44      	ldr	r3, [pc, #272]	@ (80117cc <__multiply+0x14c>)
 80116ba:	4845      	ldr	r0, [pc, #276]	@ (80117d0 <__multiply+0x150>)
 80116bc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80116c0:	f000 fc92 	bl	8011fe8 <__assert_func>
 80116c4:	f100 0514 	add.w	r5, r0, #20
 80116c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80116cc:	462b      	mov	r3, r5
 80116ce:	2200      	movs	r2, #0
 80116d0:	4543      	cmp	r3, r8
 80116d2:	d321      	bcc.n	8011718 <__multiply+0x98>
 80116d4:	f107 0114 	add.w	r1, r7, #20
 80116d8:	f104 0214 	add.w	r2, r4, #20
 80116dc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80116e0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80116e4:	9302      	str	r3, [sp, #8]
 80116e6:	1b13      	subs	r3, r2, r4
 80116e8:	3b15      	subs	r3, #21
 80116ea:	f023 0303 	bic.w	r3, r3, #3
 80116ee:	3304      	adds	r3, #4
 80116f0:	f104 0715 	add.w	r7, r4, #21
 80116f4:	42ba      	cmp	r2, r7
 80116f6:	bf38      	it	cc
 80116f8:	2304      	movcc	r3, #4
 80116fa:	9301      	str	r3, [sp, #4]
 80116fc:	9b02      	ldr	r3, [sp, #8]
 80116fe:	9103      	str	r1, [sp, #12]
 8011700:	428b      	cmp	r3, r1
 8011702:	d80c      	bhi.n	801171e <__multiply+0x9e>
 8011704:	2e00      	cmp	r6, #0
 8011706:	dd03      	ble.n	8011710 <__multiply+0x90>
 8011708:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801170c:	2b00      	cmp	r3, #0
 801170e:	d05b      	beq.n	80117c8 <__multiply+0x148>
 8011710:	6106      	str	r6, [r0, #16]
 8011712:	b005      	add	sp, #20
 8011714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011718:	f843 2b04 	str.w	r2, [r3], #4
 801171c:	e7d8      	b.n	80116d0 <__multiply+0x50>
 801171e:	f8b1 a000 	ldrh.w	sl, [r1]
 8011722:	f1ba 0f00 	cmp.w	sl, #0
 8011726:	d024      	beq.n	8011772 <__multiply+0xf2>
 8011728:	f104 0e14 	add.w	lr, r4, #20
 801172c:	46a9      	mov	r9, r5
 801172e:	f04f 0c00 	mov.w	ip, #0
 8011732:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011736:	f8d9 3000 	ldr.w	r3, [r9]
 801173a:	fa1f fb87 	uxth.w	fp, r7
 801173e:	b29b      	uxth	r3, r3
 8011740:	fb0a 330b 	mla	r3, sl, fp, r3
 8011744:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011748:	f8d9 7000 	ldr.w	r7, [r9]
 801174c:	4463      	add	r3, ip
 801174e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011752:	fb0a c70b 	mla	r7, sl, fp, ip
 8011756:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801175a:	b29b      	uxth	r3, r3
 801175c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011760:	4572      	cmp	r2, lr
 8011762:	f849 3b04 	str.w	r3, [r9], #4
 8011766:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801176a:	d8e2      	bhi.n	8011732 <__multiply+0xb2>
 801176c:	9b01      	ldr	r3, [sp, #4]
 801176e:	f845 c003 	str.w	ip, [r5, r3]
 8011772:	9b03      	ldr	r3, [sp, #12]
 8011774:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011778:	3104      	adds	r1, #4
 801177a:	f1b9 0f00 	cmp.w	r9, #0
 801177e:	d021      	beq.n	80117c4 <__multiply+0x144>
 8011780:	682b      	ldr	r3, [r5, #0]
 8011782:	f104 0c14 	add.w	ip, r4, #20
 8011786:	46ae      	mov	lr, r5
 8011788:	f04f 0a00 	mov.w	sl, #0
 801178c:	f8bc b000 	ldrh.w	fp, [ip]
 8011790:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011794:	fb09 770b 	mla	r7, r9, fp, r7
 8011798:	4457      	add	r7, sl
 801179a:	b29b      	uxth	r3, r3
 801179c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80117a0:	f84e 3b04 	str.w	r3, [lr], #4
 80117a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80117a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80117ac:	f8be 3000 	ldrh.w	r3, [lr]
 80117b0:	fb09 330a 	mla	r3, r9, sl, r3
 80117b4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80117b8:	4562      	cmp	r2, ip
 80117ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80117be:	d8e5      	bhi.n	801178c <__multiply+0x10c>
 80117c0:	9f01      	ldr	r7, [sp, #4]
 80117c2:	51eb      	str	r3, [r5, r7]
 80117c4:	3504      	adds	r5, #4
 80117c6:	e799      	b.n	80116fc <__multiply+0x7c>
 80117c8:	3e01      	subs	r6, #1
 80117ca:	e79b      	b.n	8011704 <__multiply+0x84>
 80117cc:	0801283c 	.word	0x0801283c
 80117d0:	0801284d 	.word	0x0801284d

080117d4 <__pow5mult>:
 80117d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80117d8:	4615      	mov	r5, r2
 80117da:	f012 0203 	ands.w	r2, r2, #3
 80117de:	4607      	mov	r7, r0
 80117e0:	460e      	mov	r6, r1
 80117e2:	d007      	beq.n	80117f4 <__pow5mult+0x20>
 80117e4:	4c25      	ldr	r4, [pc, #148]	@ (801187c <__pow5mult+0xa8>)
 80117e6:	3a01      	subs	r2, #1
 80117e8:	2300      	movs	r3, #0
 80117ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80117ee:	f7ff fe9f 	bl	8011530 <__multadd>
 80117f2:	4606      	mov	r6, r0
 80117f4:	10ad      	asrs	r5, r5, #2
 80117f6:	d03d      	beq.n	8011874 <__pow5mult+0xa0>
 80117f8:	69fc      	ldr	r4, [r7, #28]
 80117fa:	b97c      	cbnz	r4, 801181c <__pow5mult+0x48>
 80117fc:	2010      	movs	r0, #16
 80117fe:	f7ff fd7f 	bl	8011300 <malloc>
 8011802:	4602      	mov	r2, r0
 8011804:	61f8      	str	r0, [r7, #28]
 8011806:	b928      	cbnz	r0, 8011814 <__pow5mult+0x40>
 8011808:	4b1d      	ldr	r3, [pc, #116]	@ (8011880 <__pow5mult+0xac>)
 801180a:	481e      	ldr	r0, [pc, #120]	@ (8011884 <__pow5mult+0xb0>)
 801180c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011810:	f000 fbea 	bl	8011fe8 <__assert_func>
 8011814:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011818:	6004      	str	r4, [r0, #0]
 801181a:	60c4      	str	r4, [r0, #12]
 801181c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011820:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011824:	b94c      	cbnz	r4, 801183a <__pow5mult+0x66>
 8011826:	f240 2171 	movw	r1, #625	@ 0x271
 801182a:	4638      	mov	r0, r7
 801182c:	f7ff ff12 	bl	8011654 <__i2b>
 8011830:	2300      	movs	r3, #0
 8011832:	f8c8 0008 	str.w	r0, [r8, #8]
 8011836:	4604      	mov	r4, r0
 8011838:	6003      	str	r3, [r0, #0]
 801183a:	f04f 0900 	mov.w	r9, #0
 801183e:	07eb      	lsls	r3, r5, #31
 8011840:	d50a      	bpl.n	8011858 <__pow5mult+0x84>
 8011842:	4631      	mov	r1, r6
 8011844:	4622      	mov	r2, r4
 8011846:	4638      	mov	r0, r7
 8011848:	f7ff ff1a 	bl	8011680 <__multiply>
 801184c:	4631      	mov	r1, r6
 801184e:	4680      	mov	r8, r0
 8011850:	4638      	mov	r0, r7
 8011852:	f7ff fe4b 	bl	80114ec <_Bfree>
 8011856:	4646      	mov	r6, r8
 8011858:	106d      	asrs	r5, r5, #1
 801185a:	d00b      	beq.n	8011874 <__pow5mult+0xa0>
 801185c:	6820      	ldr	r0, [r4, #0]
 801185e:	b938      	cbnz	r0, 8011870 <__pow5mult+0x9c>
 8011860:	4622      	mov	r2, r4
 8011862:	4621      	mov	r1, r4
 8011864:	4638      	mov	r0, r7
 8011866:	f7ff ff0b 	bl	8011680 <__multiply>
 801186a:	6020      	str	r0, [r4, #0]
 801186c:	f8c0 9000 	str.w	r9, [r0]
 8011870:	4604      	mov	r4, r0
 8011872:	e7e4      	b.n	801183e <__pow5mult+0x6a>
 8011874:	4630      	mov	r0, r6
 8011876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801187a:	bf00      	nop
 801187c:	080128a8 	.word	0x080128a8
 8011880:	080127cd 	.word	0x080127cd
 8011884:	0801284d 	.word	0x0801284d

08011888 <__lshift>:
 8011888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801188c:	460c      	mov	r4, r1
 801188e:	6849      	ldr	r1, [r1, #4]
 8011890:	6923      	ldr	r3, [r4, #16]
 8011892:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011896:	68a3      	ldr	r3, [r4, #8]
 8011898:	4607      	mov	r7, r0
 801189a:	4691      	mov	r9, r2
 801189c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80118a0:	f108 0601 	add.w	r6, r8, #1
 80118a4:	42b3      	cmp	r3, r6
 80118a6:	db0b      	blt.n	80118c0 <__lshift+0x38>
 80118a8:	4638      	mov	r0, r7
 80118aa:	f7ff fddf 	bl	801146c <_Balloc>
 80118ae:	4605      	mov	r5, r0
 80118b0:	b948      	cbnz	r0, 80118c6 <__lshift+0x3e>
 80118b2:	4602      	mov	r2, r0
 80118b4:	4b28      	ldr	r3, [pc, #160]	@ (8011958 <__lshift+0xd0>)
 80118b6:	4829      	ldr	r0, [pc, #164]	@ (801195c <__lshift+0xd4>)
 80118b8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80118bc:	f000 fb94 	bl	8011fe8 <__assert_func>
 80118c0:	3101      	adds	r1, #1
 80118c2:	005b      	lsls	r3, r3, #1
 80118c4:	e7ee      	b.n	80118a4 <__lshift+0x1c>
 80118c6:	2300      	movs	r3, #0
 80118c8:	f100 0114 	add.w	r1, r0, #20
 80118cc:	f100 0210 	add.w	r2, r0, #16
 80118d0:	4618      	mov	r0, r3
 80118d2:	4553      	cmp	r3, sl
 80118d4:	db33      	blt.n	801193e <__lshift+0xb6>
 80118d6:	6920      	ldr	r0, [r4, #16]
 80118d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80118dc:	f104 0314 	add.w	r3, r4, #20
 80118e0:	f019 091f 	ands.w	r9, r9, #31
 80118e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80118e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80118ec:	d02b      	beq.n	8011946 <__lshift+0xbe>
 80118ee:	f1c9 0e20 	rsb	lr, r9, #32
 80118f2:	468a      	mov	sl, r1
 80118f4:	2200      	movs	r2, #0
 80118f6:	6818      	ldr	r0, [r3, #0]
 80118f8:	fa00 f009 	lsl.w	r0, r0, r9
 80118fc:	4310      	orrs	r0, r2
 80118fe:	f84a 0b04 	str.w	r0, [sl], #4
 8011902:	f853 2b04 	ldr.w	r2, [r3], #4
 8011906:	459c      	cmp	ip, r3
 8011908:	fa22 f20e 	lsr.w	r2, r2, lr
 801190c:	d8f3      	bhi.n	80118f6 <__lshift+0x6e>
 801190e:	ebac 0304 	sub.w	r3, ip, r4
 8011912:	3b15      	subs	r3, #21
 8011914:	f023 0303 	bic.w	r3, r3, #3
 8011918:	3304      	adds	r3, #4
 801191a:	f104 0015 	add.w	r0, r4, #21
 801191e:	4584      	cmp	ip, r0
 8011920:	bf38      	it	cc
 8011922:	2304      	movcc	r3, #4
 8011924:	50ca      	str	r2, [r1, r3]
 8011926:	b10a      	cbz	r2, 801192c <__lshift+0xa4>
 8011928:	f108 0602 	add.w	r6, r8, #2
 801192c:	3e01      	subs	r6, #1
 801192e:	4638      	mov	r0, r7
 8011930:	612e      	str	r6, [r5, #16]
 8011932:	4621      	mov	r1, r4
 8011934:	f7ff fdda 	bl	80114ec <_Bfree>
 8011938:	4628      	mov	r0, r5
 801193a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801193e:	f842 0f04 	str.w	r0, [r2, #4]!
 8011942:	3301      	adds	r3, #1
 8011944:	e7c5      	b.n	80118d2 <__lshift+0x4a>
 8011946:	3904      	subs	r1, #4
 8011948:	f853 2b04 	ldr.w	r2, [r3], #4
 801194c:	f841 2f04 	str.w	r2, [r1, #4]!
 8011950:	459c      	cmp	ip, r3
 8011952:	d8f9      	bhi.n	8011948 <__lshift+0xc0>
 8011954:	e7ea      	b.n	801192c <__lshift+0xa4>
 8011956:	bf00      	nop
 8011958:	0801283c 	.word	0x0801283c
 801195c:	0801284d 	.word	0x0801284d

08011960 <__mcmp>:
 8011960:	690a      	ldr	r2, [r1, #16]
 8011962:	4603      	mov	r3, r0
 8011964:	6900      	ldr	r0, [r0, #16]
 8011966:	1a80      	subs	r0, r0, r2
 8011968:	b530      	push	{r4, r5, lr}
 801196a:	d10e      	bne.n	801198a <__mcmp+0x2a>
 801196c:	3314      	adds	r3, #20
 801196e:	3114      	adds	r1, #20
 8011970:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011974:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011978:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801197c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011980:	4295      	cmp	r5, r2
 8011982:	d003      	beq.n	801198c <__mcmp+0x2c>
 8011984:	d205      	bcs.n	8011992 <__mcmp+0x32>
 8011986:	f04f 30ff 	mov.w	r0, #4294967295
 801198a:	bd30      	pop	{r4, r5, pc}
 801198c:	42a3      	cmp	r3, r4
 801198e:	d3f3      	bcc.n	8011978 <__mcmp+0x18>
 8011990:	e7fb      	b.n	801198a <__mcmp+0x2a>
 8011992:	2001      	movs	r0, #1
 8011994:	e7f9      	b.n	801198a <__mcmp+0x2a>
	...

08011998 <__mdiff>:
 8011998:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801199c:	4689      	mov	r9, r1
 801199e:	4606      	mov	r6, r0
 80119a0:	4611      	mov	r1, r2
 80119a2:	4648      	mov	r0, r9
 80119a4:	4614      	mov	r4, r2
 80119a6:	f7ff ffdb 	bl	8011960 <__mcmp>
 80119aa:	1e05      	subs	r5, r0, #0
 80119ac:	d112      	bne.n	80119d4 <__mdiff+0x3c>
 80119ae:	4629      	mov	r1, r5
 80119b0:	4630      	mov	r0, r6
 80119b2:	f7ff fd5b 	bl	801146c <_Balloc>
 80119b6:	4602      	mov	r2, r0
 80119b8:	b928      	cbnz	r0, 80119c6 <__mdiff+0x2e>
 80119ba:	4b3f      	ldr	r3, [pc, #252]	@ (8011ab8 <__mdiff+0x120>)
 80119bc:	f240 2137 	movw	r1, #567	@ 0x237
 80119c0:	483e      	ldr	r0, [pc, #248]	@ (8011abc <__mdiff+0x124>)
 80119c2:	f000 fb11 	bl	8011fe8 <__assert_func>
 80119c6:	2301      	movs	r3, #1
 80119c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80119cc:	4610      	mov	r0, r2
 80119ce:	b003      	add	sp, #12
 80119d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119d4:	bfbc      	itt	lt
 80119d6:	464b      	movlt	r3, r9
 80119d8:	46a1      	movlt	r9, r4
 80119da:	4630      	mov	r0, r6
 80119dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80119e0:	bfba      	itte	lt
 80119e2:	461c      	movlt	r4, r3
 80119e4:	2501      	movlt	r5, #1
 80119e6:	2500      	movge	r5, #0
 80119e8:	f7ff fd40 	bl	801146c <_Balloc>
 80119ec:	4602      	mov	r2, r0
 80119ee:	b918      	cbnz	r0, 80119f8 <__mdiff+0x60>
 80119f0:	4b31      	ldr	r3, [pc, #196]	@ (8011ab8 <__mdiff+0x120>)
 80119f2:	f240 2145 	movw	r1, #581	@ 0x245
 80119f6:	e7e3      	b.n	80119c0 <__mdiff+0x28>
 80119f8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80119fc:	6926      	ldr	r6, [r4, #16]
 80119fe:	60c5      	str	r5, [r0, #12]
 8011a00:	f109 0310 	add.w	r3, r9, #16
 8011a04:	f109 0514 	add.w	r5, r9, #20
 8011a08:	f104 0e14 	add.w	lr, r4, #20
 8011a0c:	f100 0b14 	add.w	fp, r0, #20
 8011a10:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011a14:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011a18:	9301      	str	r3, [sp, #4]
 8011a1a:	46d9      	mov	r9, fp
 8011a1c:	f04f 0c00 	mov.w	ip, #0
 8011a20:	9b01      	ldr	r3, [sp, #4]
 8011a22:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011a26:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011a2a:	9301      	str	r3, [sp, #4]
 8011a2c:	fa1f f38a 	uxth.w	r3, sl
 8011a30:	4619      	mov	r1, r3
 8011a32:	b283      	uxth	r3, r0
 8011a34:	1acb      	subs	r3, r1, r3
 8011a36:	0c00      	lsrs	r0, r0, #16
 8011a38:	4463      	add	r3, ip
 8011a3a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011a3e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011a42:	b29b      	uxth	r3, r3
 8011a44:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011a48:	4576      	cmp	r6, lr
 8011a4a:	f849 3b04 	str.w	r3, [r9], #4
 8011a4e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011a52:	d8e5      	bhi.n	8011a20 <__mdiff+0x88>
 8011a54:	1b33      	subs	r3, r6, r4
 8011a56:	3b15      	subs	r3, #21
 8011a58:	f023 0303 	bic.w	r3, r3, #3
 8011a5c:	3415      	adds	r4, #21
 8011a5e:	3304      	adds	r3, #4
 8011a60:	42a6      	cmp	r6, r4
 8011a62:	bf38      	it	cc
 8011a64:	2304      	movcc	r3, #4
 8011a66:	441d      	add	r5, r3
 8011a68:	445b      	add	r3, fp
 8011a6a:	461e      	mov	r6, r3
 8011a6c:	462c      	mov	r4, r5
 8011a6e:	4544      	cmp	r4, r8
 8011a70:	d30e      	bcc.n	8011a90 <__mdiff+0xf8>
 8011a72:	f108 0103 	add.w	r1, r8, #3
 8011a76:	1b49      	subs	r1, r1, r5
 8011a78:	f021 0103 	bic.w	r1, r1, #3
 8011a7c:	3d03      	subs	r5, #3
 8011a7e:	45a8      	cmp	r8, r5
 8011a80:	bf38      	it	cc
 8011a82:	2100      	movcc	r1, #0
 8011a84:	440b      	add	r3, r1
 8011a86:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011a8a:	b191      	cbz	r1, 8011ab2 <__mdiff+0x11a>
 8011a8c:	6117      	str	r7, [r2, #16]
 8011a8e:	e79d      	b.n	80119cc <__mdiff+0x34>
 8011a90:	f854 1b04 	ldr.w	r1, [r4], #4
 8011a94:	46e6      	mov	lr, ip
 8011a96:	0c08      	lsrs	r0, r1, #16
 8011a98:	fa1c fc81 	uxtah	ip, ip, r1
 8011a9c:	4471      	add	r1, lr
 8011a9e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011aa2:	b289      	uxth	r1, r1
 8011aa4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011aa8:	f846 1b04 	str.w	r1, [r6], #4
 8011aac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011ab0:	e7dd      	b.n	8011a6e <__mdiff+0xd6>
 8011ab2:	3f01      	subs	r7, #1
 8011ab4:	e7e7      	b.n	8011a86 <__mdiff+0xee>
 8011ab6:	bf00      	nop
 8011ab8:	0801283c 	.word	0x0801283c
 8011abc:	0801284d 	.word	0x0801284d

08011ac0 <__d2b>:
 8011ac0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011ac4:	460f      	mov	r7, r1
 8011ac6:	2101      	movs	r1, #1
 8011ac8:	ec59 8b10 	vmov	r8, r9, d0
 8011acc:	4616      	mov	r6, r2
 8011ace:	f7ff fccd 	bl	801146c <_Balloc>
 8011ad2:	4604      	mov	r4, r0
 8011ad4:	b930      	cbnz	r0, 8011ae4 <__d2b+0x24>
 8011ad6:	4602      	mov	r2, r0
 8011ad8:	4b23      	ldr	r3, [pc, #140]	@ (8011b68 <__d2b+0xa8>)
 8011ada:	4824      	ldr	r0, [pc, #144]	@ (8011b6c <__d2b+0xac>)
 8011adc:	f240 310f 	movw	r1, #783	@ 0x30f
 8011ae0:	f000 fa82 	bl	8011fe8 <__assert_func>
 8011ae4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011ae8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011aec:	b10d      	cbz	r5, 8011af2 <__d2b+0x32>
 8011aee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011af2:	9301      	str	r3, [sp, #4]
 8011af4:	f1b8 0300 	subs.w	r3, r8, #0
 8011af8:	d023      	beq.n	8011b42 <__d2b+0x82>
 8011afa:	4668      	mov	r0, sp
 8011afc:	9300      	str	r3, [sp, #0]
 8011afe:	f7ff fd7c 	bl	80115fa <__lo0bits>
 8011b02:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011b06:	b1d0      	cbz	r0, 8011b3e <__d2b+0x7e>
 8011b08:	f1c0 0320 	rsb	r3, r0, #32
 8011b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8011b10:	430b      	orrs	r3, r1
 8011b12:	40c2      	lsrs	r2, r0
 8011b14:	6163      	str	r3, [r4, #20]
 8011b16:	9201      	str	r2, [sp, #4]
 8011b18:	9b01      	ldr	r3, [sp, #4]
 8011b1a:	61a3      	str	r3, [r4, #24]
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	bf0c      	ite	eq
 8011b20:	2201      	moveq	r2, #1
 8011b22:	2202      	movne	r2, #2
 8011b24:	6122      	str	r2, [r4, #16]
 8011b26:	b1a5      	cbz	r5, 8011b52 <__d2b+0x92>
 8011b28:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011b2c:	4405      	add	r5, r0
 8011b2e:	603d      	str	r5, [r7, #0]
 8011b30:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011b34:	6030      	str	r0, [r6, #0]
 8011b36:	4620      	mov	r0, r4
 8011b38:	b003      	add	sp, #12
 8011b3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011b3e:	6161      	str	r1, [r4, #20]
 8011b40:	e7ea      	b.n	8011b18 <__d2b+0x58>
 8011b42:	a801      	add	r0, sp, #4
 8011b44:	f7ff fd59 	bl	80115fa <__lo0bits>
 8011b48:	9b01      	ldr	r3, [sp, #4]
 8011b4a:	6163      	str	r3, [r4, #20]
 8011b4c:	3020      	adds	r0, #32
 8011b4e:	2201      	movs	r2, #1
 8011b50:	e7e8      	b.n	8011b24 <__d2b+0x64>
 8011b52:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011b56:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011b5a:	6038      	str	r0, [r7, #0]
 8011b5c:	6918      	ldr	r0, [r3, #16]
 8011b5e:	f7ff fd2d 	bl	80115bc <__hi0bits>
 8011b62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011b66:	e7e5      	b.n	8011b34 <__d2b+0x74>
 8011b68:	0801283c 	.word	0x0801283c
 8011b6c:	0801284d 	.word	0x0801284d

08011b70 <__ssputs_r>:
 8011b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b74:	688e      	ldr	r6, [r1, #8]
 8011b76:	461f      	mov	r7, r3
 8011b78:	42be      	cmp	r6, r7
 8011b7a:	680b      	ldr	r3, [r1, #0]
 8011b7c:	4682      	mov	sl, r0
 8011b7e:	460c      	mov	r4, r1
 8011b80:	4690      	mov	r8, r2
 8011b82:	d82d      	bhi.n	8011be0 <__ssputs_r+0x70>
 8011b84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011b88:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011b8c:	d026      	beq.n	8011bdc <__ssputs_r+0x6c>
 8011b8e:	6965      	ldr	r5, [r4, #20]
 8011b90:	6909      	ldr	r1, [r1, #16]
 8011b92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011b96:	eba3 0901 	sub.w	r9, r3, r1
 8011b9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011b9e:	1c7b      	adds	r3, r7, #1
 8011ba0:	444b      	add	r3, r9
 8011ba2:	106d      	asrs	r5, r5, #1
 8011ba4:	429d      	cmp	r5, r3
 8011ba6:	bf38      	it	cc
 8011ba8:	461d      	movcc	r5, r3
 8011baa:	0553      	lsls	r3, r2, #21
 8011bac:	d527      	bpl.n	8011bfe <__ssputs_r+0x8e>
 8011bae:	4629      	mov	r1, r5
 8011bb0:	f7ff fbd0 	bl	8011354 <_malloc_r>
 8011bb4:	4606      	mov	r6, r0
 8011bb6:	b360      	cbz	r0, 8011c12 <__ssputs_r+0xa2>
 8011bb8:	6921      	ldr	r1, [r4, #16]
 8011bba:	464a      	mov	r2, r9
 8011bbc:	f000 fa06 	bl	8011fcc <memcpy>
 8011bc0:	89a3      	ldrh	r3, [r4, #12]
 8011bc2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011bc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011bca:	81a3      	strh	r3, [r4, #12]
 8011bcc:	6126      	str	r6, [r4, #16]
 8011bce:	6165      	str	r5, [r4, #20]
 8011bd0:	444e      	add	r6, r9
 8011bd2:	eba5 0509 	sub.w	r5, r5, r9
 8011bd6:	6026      	str	r6, [r4, #0]
 8011bd8:	60a5      	str	r5, [r4, #8]
 8011bda:	463e      	mov	r6, r7
 8011bdc:	42be      	cmp	r6, r7
 8011bde:	d900      	bls.n	8011be2 <__ssputs_r+0x72>
 8011be0:	463e      	mov	r6, r7
 8011be2:	6820      	ldr	r0, [r4, #0]
 8011be4:	4632      	mov	r2, r6
 8011be6:	4641      	mov	r1, r8
 8011be8:	f000 f9c6 	bl	8011f78 <memmove>
 8011bec:	68a3      	ldr	r3, [r4, #8]
 8011bee:	1b9b      	subs	r3, r3, r6
 8011bf0:	60a3      	str	r3, [r4, #8]
 8011bf2:	6823      	ldr	r3, [r4, #0]
 8011bf4:	4433      	add	r3, r6
 8011bf6:	6023      	str	r3, [r4, #0]
 8011bf8:	2000      	movs	r0, #0
 8011bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bfe:	462a      	mov	r2, r5
 8011c00:	f000 fa36 	bl	8012070 <_realloc_r>
 8011c04:	4606      	mov	r6, r0
 8011c06:	2800      	cmp	r0, #0
 8011c08:	d1e0      	bne.n	8011bcc <__ssputs_r+0x5c>
 8011c0a:	6921      	ldr	r1, [r4, #16]
 8011c0c:	4650      	mov	r0, sl
 8011c0e:	f7ff fb2d 	bl	801126c <_free_r>
 8011c12:	230c      	movs	r3, #12
 8011c14:	f8ca 3000 	str.w	r3, [sl]
 8011c18:	89a3      	ldrh	r3, [r4, #12]
 8011c1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011c1e:	81a3      	strh	r3, [r4, #12]
 8011c20:	f04f 30ff 	mov.w	r0, #4294967295
 8011c24:	e7e9      	b.n	8011bfa <__ssputs_r+0x8a>
	...

08011c28 <_svfiprintf_r>:
 8011c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c2c:	4698      	mov	r8, r3
 8011c2e:	898b      	ldrh	r3, [r1, #12]
 8011c30:	061b      	lsls	r3, r3, #24
 8011c32:	b09d      	sub	sp, #116	@ 0x74
 8011c34:	4607      	mov	r7, r0
 8011c36:	460d      	mov	r5, r1
 8011c38:	4614      	mov	r4, r2
 8011c3a:	d510      	bpl.n	8011c5e <_svfiprintf_r+0x36>
 8011c3c:	690b      	ldr	r3, [r1, #16]
 8011c3e:	b973      	cbnz	r3, 8011c5e <_svfiprintf_r+0x36>
 8011c40:	2140      	movs	r1, #64	@ 0x40
 8011c42:	f7ff fb87 	bl	8011354 <_malloc_r>
 8011c46:	6028      	str	r0, [r5, #0]
 8011c48:	6128      	str	r0, [r5, #16]
 8011c4a:	b930      	cbnz	r0, 8011c5a <_svfiprintf_r+0x32>
 8011c4c:	230c      	movs	r3, #12
 8011c4e:	603b      	str	r3, [r7, #0]
 8011c50:	f04f 30ff 	mov.w	r0, #4294967295
 8011c54:	b01d      	add	sp, #116	@ 0x74
 8011c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c5a:	2340      	movs	r3, #64	@ 0x40
 8011c5c:	616b      	str	r3, [r5, #20]
 8011c5e:	2300      	movs	r3, #0
 8011c60:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c62:	2320      	movs	r3, #32
 8011c64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011c68:	f8cd 800c 	str.w	r8, [sp, #12]
 8011c6c:	2330      	movs	r3, #48	@ 0x30
 8011c6e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011e0c <_svfiprintf_r+0x1e4>
 8011c72:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011c76:	f04f 0901 	mov.w	r9, #1
 8011c7a:	4623      	mov	r3, r4
 8011c7c:	469a      	mov	sl, r3
 8011c7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c82:	b10a      	cbz	r2, 8011c88 <_svfiprintf_r+0x60>
 8011c84:	2a25      	cmp	r2, #37	@ 0x25
 8011c86:	d1f9      	bne.n	8011c7c <_svfiprintf_r+0x54>
 8011c88:	ebba 0b04 	subs.w	fp, sl, r4
 8011c8c:	d00b      	beq.n	8011ca6 <_svfiprintf_r+0x7e>
 8011c8e:	465b      	mov	r3, fp
 8011c90:	4622      	mov	r2, r4
 8011c92:	4629      	mov	r1, r5
 8011c94:	4638      	mov	r0, r7
 8011c96:	f7ff ff6b 	bl	8011b70 <__ssputs_r>
 8011c9a:	3001      	adds	r0, #1
 8011c9c:	f000 80a7 	beq.w	8011dee <_svfiprintf_r+0x1c6>
 8011ca0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011ca2:	445a      	add	r2, fp
 8011ca4:	9209      	str	r2, [sp, #36]	@ 0x24
 8011ca6:	f89a 3000 	ldrb.w	r3, [sl]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	f000 809f 	beq.w	8011dee <_svfiprintf_r+0x1c6>
 8011cb0:	2300      	movs	r3, #0
 8011cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8011cb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011cba:	f10a 0a01 	add.w	sl, sl, #1
 8011cbe:	9304      	str	r3, [sp, #16]
 8011cc0:	9307      	str	r3, [sp, #28]
 8011cc2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011cc6:	931a      	str	r3, [sp, #104]	@ 0x68
 8011cc8:	4654      	mov	r4, sl
 8011cca:	2205      	movs	r2, #5
 8011ccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cd0:	484e      	ldr	r0, [pc, #312]	@ (8011e0c <_svfiprintf_r+0x1e4>)
 8011cd2:	f7ee fb05 	bl	80002e0 <memchr>
 8011cd6:	9a04      	ldr	r2, [sp, #16]
 8011cd8:	b9d8      	cbnz	r0, 8011d12 <_svfiprintf_r+0xea>
 8011cda:	06d0      	lsls	r0, r2, #27
 8011cdc:	bf44      	itt	mi
 8011cde:	2320      	movmi	r3, #32
 8011ce0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011ce4:	0711      	lsls	r1, r2, #28
 8011ce6:	bf44      	itt	mi
 8011ce8:	232b      	movmi	r3, #43	@ 0x2b
 8011cea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011cee:	f89a 3000 	ldrb.w	r3, [sl]
 8011cf2:	2b2a      	cmp	r3, #42	@ 0x2a
 8011cf4:	d015      	beq.n	8011d22 <_svfiprintf_r+0xfa>
 8011cf6:	9a07      	ldr	r2, [sp, #28]
 8011cf8:	4654      	mov	r4, sl
 8011cfa:	2000      	movs	r0, #0
 8011cfc:	f04f 0c0a 	mov.w	ip, #10
 8011d00:	4621      	mov	r1, r4
 8011d02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d06:	3b30      	subs	r3, #48	@ 0x30
 8011d08:	2b09      	cmp	r3, #9
 8011d0a:	d94b      	bls.n	8011da4 <_svfiprintf_r+0x17c>
 8011d0c:	b1b0      	cbz	r0, 8011d3c <_svfiprintf_r+0x114>
 8011d0e:	9207      	str	r2, [sp, #28]
 8011d10:	e014      	b.n	8011d3c <_svfiprintf_r+0x114>
 8011d12:	eba0 0308 	sub.w	r3, r0, r8
 8011d16:	fa09 f303 	lsl.w	r3, r9, r3
 8011d1a:	4313      	orrs	r3, r2
 8011d1c:	9304      	str	r3, [sp, #16]
 8011d1e:	46a2      	mov	sl, r4
 8011d20:	e7d2      	b.n	8011cc8 <_svfiprintf_r+0xa0>
 8011d22:	9b03      	ldr	r3, [sp, #12]
 8011d24:	1d19      	adds	r1, r3, #4
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	9103      	str	r1, [sp, #12]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	bfbb      	ittet	lt
 8011d2e:	425b      	neglt	r3, r3
 8011d30:	f042 0202 	orrlt.w	r2, r2, #2
 8011d34:	9307      	strge	r3, [sp, #28]
 8011d36:	9307      	strlt	r3, [sp, #28]
 8011d38:	bfb8      	it	lt
 8011d3a:	9204      	strlt	r2, [sp, #16]
 8011d3c:	7823      	ldrb	r3, [r4, #0]
 8011d3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8011d40:	d10a      	bne.n	8011d58 <_svfiprintf_r+0x130>
 8011d42:	7863      	ldrb	r3, [r4, #1]
 8011d44:	2b2a      	cmp	r3, #42	@ 0x2a
 8011d46:	d132      	bne.n	8011dae <_svfiprintf_r+0x186>
 8011d48:	9b03      	ldr	r3, [sp, #12]
 8011d4a:	1d1a      	adds	r2, r3, #4
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	9203      	str	r2, [sp, #12]
 8011d50:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011d54:	3402      	adds	r4, #2
 8011d56:	9305      	str	r3, [sp, #20]
 8011d58:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011e1c <_svfiprintf_r+0x1f4>
 8011d5c:	7821      	ldrb	r1, [r4, #0]
 8011d5e:	2203      	movs	r2, #3
 8011d60:	4650      	mov	r0, sl
 8011d62:	f7ee fabd 	bl	80002e0 <memchr>
 8011d66:	b138      	cbz	r0, 8011d78 <_svfiprintf_r+0x150>
 8011d68:	9b04      	ldr	r3, [sp, #16]
 8011d6a:	eba0 000a 	sub.w	r0, r0, sl
 8011d6e:	2240      	movs	r2, #64	@ 0x40
 8011d70:	4082      	lsls	r2, r0
 8011d72:	4313      	orrs	r3, r2
 8011d74:	3401      	adds	r4, #1
 8011d76:	9304      	str	r3, [sp, #16]
 8011d78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d7c:	4824      	ldr	r0, [pc, #144]	@ (8011e10 <_svfiprintf_r+0x1e8>)
 8011d7e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011d82:	2206      	movs	r2, #6
 8011d84:	f7ee faac 	bl	80002e0 <memchr>
 8011d88:	2800      	cmp	r0, #0
 8011d8a:	d036      	beq.n	8011dfa <_svfiprintf_r+0x1d2>
 8011d8c:	4b21      	ldr	r3, [pc, #132]	@ (8011e14 <_svfiprintf_r+0x1ec>)
 8011d8e:	bb1b      	cbnz	r3, 8011dd8 <_svfiprintf_r+0x1b0>
 8011d90:	9b03      	ldr	r3, [sp, #12]
 8011d92:	3307      	adds	r3, #7
 8011d94:	f023 0307 	bic.w	r3, r3, #7
 8011d98:	3308      	adds	r3, #8
 8011d9a:	9303      	str	r3, [sp, #12]
 8011d9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d9e:	4433      	add	r3, r6
 8011da0:	9309      	str	r3, [sp, #36]	@ 0x24
 8011da2:	e76a      	b.n	8011c7a <_svfiprintf_r+0x52>
 8011da4:	fb0c 3202 	mla	r2, ip, r2, r3
 8011da8:	460c      	mov	r4, r1
 8011daa:	2001      	movs	r0, #1
 8011dac:	e7a8      	b.n	8011d00 <_svfiprintf_r+0xd8>
 8011dae:	2300      	movs	r3, #0
 8011db0:	3401      	adds	r4, #1
 8011db2:	9305      	str	r3, [sp, #20]
 8011db4:	4619      	mov	r1, r3
 8011db6:	f04f 0c0a 	mov.w	ip, #10
 8011dba:	4620      	mov	r0, r4
 8011dbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011dc0:	3a30      	subs	r2, #48	@ 0x30
 8011dc2:	2a09      	cmp	r2, #9
 8011dc4:	d903      	bls.n	8011dce <_svfiprintf_r+0x1a6>
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d0c6      	beq.n	8011d58 <_svfiprintf_r+0x130>
 8011dca:	9105      	str	r1, [sp, #20]
 8011dcc:	e7c4      	b.n	8011d58 <_svfiprintf_r+0x130>
 8011dce:	fb0c 2101 	mla	r1, ip, r1, r2
 8011dd2:	4604      	mov	r4, r0
 8011dd4:	2301      	movs	r3, #1
 8011dd6:	e7f0      	b.n	8011dba <_svfiprintf_r+0x192>
 8011dd8:	ab03      	add	r3, sp, #12
 8011dda:	9300      	str	r3, [sp, #0]
 8011ddc:	462a      	mov	r2, r5
 8011dde:	4b0e      	ldr	r3, [pc, #56]	@ (8011e18 <_svfiprintf_r+0x1f0>)
 8011de0:	a904      	add	r1, sp, #16
 8011de2:	4638      	mov	r0, r7
 8011de4:	f7fd ff14 	bl	800fc10 <_printf_float>
 8011de8:	1c42      	adds	r2, r0, #1
 8011dea:	4606      	mov	r6, r0
 8011dec:	d1d6      	bne.n	8011d9c <_svfiprintf_r+0x174>
 8011dee:	89ab      	ldrh	r3, [r5, #12]
 8011df0:	065b      	lsls	r3, r3, #25
 8011df2:	f53f af2d 	bmi.w	8011c50 <_svfiprintf_r+0x28>
 8011df6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011df8:	e72c      	b.n	8011c54 <_svfiprintf_r+0x2c>
 8011dfa:	ab03      	add	r3, sp, #12
 8011dfc:	9300      	str	r3, [sp, #0]
 8011dfe:	462a      	mov	r2, r5
 8011e00:	4b05      	ldr	r3, [pc, #20]	@ (8011e18 <_svfiprintf_r+0x1f0>)
 8011e02:	a904      	add	r1, sp, #16
 8011e04:	4638      	mov	r0, r7
 8011e06:	f7fe f98b 	bl	8010120 <_printf_i>
 8011e0a:	e7ed      	b.n	8011de8 <_svfiprintf_r+0x1c0>
 8011e0c:	080129a8 	.word	0x080129a8
 8011e10:	080129b2 	.word	0x080129b2
 8011e14:	0800fc11 	.word	0x0800fc11
 8011e18:	08011b71 	.word	0x08011b71
 8011e1c:	080129ae 	.word	0x080129ae

08011e20 <__sflush_r>:
 8011e20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e28:	0716      	lsls	r6, r2, #28
 8011e2a:	4605      	mov	r5, r0
 8011e2c:	460c      	mov	r4, r1
 8011e2e:	d454      	bmi.n	8011eda <__sflush_r+0xba>
 8011e30:	684b      	ldr	r3, [r1, #4]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	dc02      	bgt.n	8011e3c <__sflush_r+0x1c>
 8011e36:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	dd48      	ble.n	8011ece <__sflush_r+0xae>
 8011e3c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011e3e:	2e00      	cmp	r6, #0
 8011e40:	d045      	beq.n	8011ece <__sflush_r+0xae>
 8011e42:	2300      	movs	r3, #0
 8011e44:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011e48:	682f      	ldr	r7, [r5, #0]
 8011e4a:	6a21      	ldr	r1, [r4, #32]
 8011e4c:	602b      	str	r3, [r5, #0]
 8011e4e:	d030      	beq.n	8011eb2 <__sflush_r+0x92>
 8011e50:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011e52:	89a3      	ldrh	r3, [r4, #12]
 8011e54:	0759      	lsls	r1, r3, #29
 8011e56:	d505      	bpl.n	8011e64 <__sflush_r+0x44>
 8011e58:	6863      	ldr	r3, [r4, #4]
 8011e5a:	1ad2      	subs	r2, r2, r3
 8011e5c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011e5e:	b10b      	cbz	r3, 8011e64 <__sflush_r+0x44>
 8011e60:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011e62:	1ad2      	subs	r2, r2, r3
 8011e64:	2300      	movs	r3, #0
 8011e66:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011e68:	6a21      	ldr	r1, [r4, #32]
 8011e6a:	4628      	mov	r0, r5
 8011e6c:	47b0      	blx	r6
 8011e6e:	1c43      	adds	r3, r0, #1
 8011e70:	89a3      	ldrh	r3, [r4, #12]
 8011e72:	d106      	bne.n	8011e82 <__sflush_r+0x62>
 8011e74:	6829      	ldr	r1, [r5, #0]
 8011e76:	291d      	cmp	r1, #29
 8011e78:	d82b      	bhi.n	8011ed2 <__sflush_r+0xb2>
 8011e7a:	4a2a      	ldr	r2, [pc, #168]	@ (8011f24 <__sflush_r+0x104>)
 8011e7c:	410a      	asrs	r2, r1
 8011e7e:	07d6      	lsls	r6, r2, #31
 8011e80:	d427      	bmi.n	8011ed2 <__sflush_r+0xb2>
 8011e82:	2200      	movs	r2, #0
 8011e84:	6062      	str	r2, [r4, #4]
 8011e86:	04d9      	lsls	r1, r3, #19
 8011e88:	6922      	ldr	r2, [r4, #16]
 8011e8a:	6022      	str	r2, [r4, #0]
 8011e8c:	d504      	bpl.n	8011e98 <__sflush_r+0x78>
 8011e8e:	1c42      	adds	r2, r0, #1
 8011e90:	d101      	bne.n	8011e96 <__sflush_r+0x76>
 8011e92:	682b      	ldr	r3, [r5, #0]
 8011e94:	b903      	cbnz	r3, 8011e98 <__sflush_r+0x78>
 8011e96:	6560      	str	r0, [r4, #84]	@ 0x54
 8011e98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011e9a:	602f      	str	r7, [r5, #0]
 8011e9c:	b1b9      	cbz	r1, 8011ece <__sflush_r+0xae>
 8011e9e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011ea2:	4299      	cmp	r1, r3
 8011ea4:	d002      	beq.n	8011eac <__sflush_r+0x8c>
 8011ea6:	4628      	mov	r0, r5
 8011ea8:	f7ff f9e0 	bl	801126c <_free_r>
 8011eac:	2300      	movs	r3, #0
 8011eae:	6363      	str	r3, [r4, #52]	@ 0x34
 8011eb0:	e00d      	b.n	8011ece <__sflush_r+0xae>
 8011eb2:	2301      	movs	r3, #1
 8011eb4:	4628      	mov	r0, r5
 8011eb6:	47b0      	blx	r6
 8011eb8:	4602      	mov	r2, r0
 8011eba:	1c50      	adds	r0, r2, #1
 8011ebc:	d1c9      	bne.n	8011e52 <__sflush_r+0x32>
 8011ebe:	682b      	ldr	r3, [r5, #0]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d0c6      	beq.n	8011e52 <__sflush_r+0x32>
 8011ec4:	2b1d      	cmp	r3, #29
 8011ec6:	d001      	beq.n	8011ecc <__sflush_r+0xac>
 8011ec8:	2b16      	cmp	r3, #22
 8011eca:	d11e      	bne.n	8011f0a <__sflush_r+0xea>
 8011ecc:	602f      	str	r7, [r5, #0]
 8011ece:	2000      	movs	r0, #0
 8011ed0:	e022      	b.n	8011f18 <__sflush_r+0xf8>
 8011ed2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ed6:	b21b      	sxth	r3, r3
 8011ed8:	e01b      	b.n	8011f12 <__sflush_r+0xf2>
 8011eda:	690f      	ldr	r7, [r1, #16]
 8011edc:	2f00      	cmp	r7, #0
 8011ede:	d0f6      	beq.n	8011ece <__sflush_r+0xae>
 8011ee0:	0793      	lsls	r3, r2, #30
 8011ee2:	680e      	ldr	r6, [r1, #0]
 8011ee4:	bf08      	it	eq
 8011ee6:	694b      	ldreq	r3, [r1, #20]
 8011ee8:	600f      	str	r7, [r1, #0]
 8011eea:	bf18      	it	ne
 8011eec:	2300      	movne	r3, #0
 8011eee:	eba6 0807 	sub.w	r8, r6, r7
 8011ef2:	608b      	str	r3, [r1, #8]
 8011ef4:	f1b8 0f00 	cmp.w	r8, #0
 8011ef8:	dde9      	ble.n	8011ece <__sflush_r+0xae>
 8011efa:	6a21      	ldr	r1, [r4, #32]
 8011efc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011efe:	4643      	mov	r3, r8
 8011f00:	463a      	mov	r2, r7
 8011f02:	4628      	mov	r0, r5
 8011f04:	47b0      	blx	r6
 8011f06:	2800      	cmp	r0, #0
 8011f08:	dc08      	bgt.n	8011f1c <__sflush_r+0xfc>
 8011f0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011f12:	81a3      	strh	r3, [r4, #12]
 8011f14:	f04f 30ff 	mov.w	r0, #4294967295
 8011f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f1c:	4407      	add	r7, r0
 8011f1e:	eba8 0800 	sub.w	r8, r8, r0
 8011f22:	e7e7      	b.n	8011ef4 <__sflush_r+0xd4>
 8011f24:	dfbffffe 	.word	0xdfbffffe

08011f28 <_fflush_r>:
 8011f28:	b538      	push	{r3, r4, r5, lr}
 8011f2a:	690b      	ldr	r3, [r1, #16]
 8011f2c:	4605      	mov	r5, r0
 8011f2e:	460c      	mov	r4, r1
 8011f30:	b913      	cbnz	r3, 8011f38 <_fflush_r+0x10>
 8011f32:	2500      	movs	r5, #0
 8011f34:	4628      	mov	r0, r5
 8011f36:	bd38      	pop	{r3, r4, r5, pc}
 8011f38:	b118      	cbz	r0, 8011f42 <_fflush_r+0x1a>
 8011f3a:	6a03      	ldr	r3, [r0, #32]
 8011f3c:	b90b      	cbnz	r3, 8011f42 <_fflush_r+0x1a>
 8011f3e:	f7fe fa9b 	bl	8010478 <__sinit>
 8011f42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d0f3      	beq.n	8011f32 <_fflush_r+0xa>
 8011f4a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011f4c:	07d0      	lsls	r0, r2, #31
 8011f4e:	d404      	bmi.n	8011f5a <_fflush_r+0x32>
 8011f50:	0599      	lsls	r1, r3, #22
 8011f52:	d402      	bmi.n	8011f5a <_fflush_r+0x32>
 8011f54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011f56:	f7fe fba6 	bl	80106a6 <__retarget_lock_acquire_recursive>
 8011f5a:	4628      	mov	r0, r5
 8011f5c:	4621      	mov	r1, r4
 8011f5e:	f7ff ff5f 	bl	8011e20 <__sflush_r>
 8011f62:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011f64:	07da      	lsls	r2, r3, #31
 8011f66:	4605      	mov	r5, r0
 8011f68:	d4e4      	bmi.n	8011f34 <_fflush_r+0xc>
 8011f6a:	89a3      	ldrh	r3, [r4, #12]
 8011f6c:	059b      	lsls	r3, r3, #22
 8011f6e:	d4e1      	bmi.n	8011f34 <_fflush_r+0xc>
 8011f70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011f72:	f7fe fb99 	bl	80106a8 <__retarget_lock_release_recursive>
 8011f76:	e7dd      	b.n	8011f34 <_fflush_r+0xc>

08011f78 <memmove>:
 8011f78:	4288      	cmp	r0, r1
 8011f7a:	b510      	push	{r4, lr}
 8011f7c:	eb01 0402 	add.w	r4, r1, r2
 8011f80:	d902      	bls.n	8011f88 <memmove+0x10>
 8011f82:	4284      	cmp	r4, r0
 8011f84:	4623      	mov	r3, r4
 8011f86:	d807      	bhi.n	8011f98 <memmove+0x20>
 8011f88:	1e43      	subs	r3, r0, #1
 8011f8a:	42a1      	cmp	r1, r4
 8011f8c:	d008      	beq.n	8011fa0 <memmove+0x28>
 8011f8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011f92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011f96:	e7f8      	b.n	8011f8a <memmove+0x12>
 8011f98:	4402      	add	r2, r0
 8011f9a:	4601      	mov	r1, r0
 8011f9c:	428a      	cmp	r2, r1
 8011f9e:	d100      	bne.n	8011fa2 <memmove+0x2a>
 8011fa0:	bd10      	pop	{r4, pc}
 8011fa2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011fa6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011faa:	e7f7      	b.n	8011f9c <memmove+0x24>

08011fac <_sbrk_r>:
 8011fac:	b538      	push	{r3, r4, r5, lr}
 8011fae:	4d06      	ldr	r5, [pc, #24]	@ (8011fc8 <_sbrk_r+0x1c>)
 8011fb0:	2300      	movs	r3, #0
 8011fb2:	4604      	mov	r4, r0
 8011fb4:	4608      	mov	r0, r1
 8011fb6:	602b      	str	r3, [r5, #0]
 8011fb8:	f7ef fb3e 	bl	8001638 <_sbrk>
 8011fbc:	1c43      	adds	r3, r0, #1
 8011fbe:	d102      	bne.n	8011fc6 <_sbrk_r+0x1a>
 8011fc0:	682b      	ldr	r3, [r5, #0]
 8011fc2:	b103      	cbz	r3, 8011fc6 <_sbrk_r+0x1a>
 8011fc4:	6023      	str	r3, [r4, #0]
 8011fc6:	bd38      	pop	{r3, r4, r5, pc}
 8011fc8:	240026b8 	.word	0x240026b8

08011fcc <memcpy>:
 8011fcc:	440a      	add	r2, r1
 8011fce:	4291      	cmp	r1, r2
 8011fd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8011fd4:	d100      	bne.n	8011fd8 <memcpy+0xc>
 8011fd6:	4770      	bx	lr
 8011fd8:	b510      	push	{r4, lr}
 8011fda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011fde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011fe2:	4291      	cmp	r1, r2
 8011fe4:	d1f9      	bne.n	8011fda <memcpy+0xe>
 8011fe6:	bd10      	pop	{r4, pc}

08011fe8 <__assert_func>:
 8011fe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011fea:	4614      	mov	r4, r2
 8011fec:	461a      	mov	r2, r3
 8011fee:	4b09      	ldr	r3, [pc, #36]	@ (8012014 <__assert_func+0x2c>)
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	4605      	mov	r5, r0
 8011ff4:	68d8      	ldr	r0, [r3, #12]
 8011ff6:	b954      	cbnz	r4, 801200e <__assert_func+0x26>
 8011ff8:	4b07      	ldr	r3, [pc, #28]	@ (8012018 <__assert_func+0x30>)
 8011ffa:	461c      	mov	r4, r3
 8011ffc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012000:	9100      	str	r1, [sp, #0]
 8012002:	462b      	mov	r3, r5
 8012004:	4905      	ldr	r1, [pc, #20]	@ (801201c <__assert_func+0x34>)
 8012006:	f000 f86f 	bl	80120e8 <fiprintf>
 801200a:	f000 f87f 	bl	801210c <abort>
 801200e:	4b04      	ldr	r3, [pc, #16]	@ (8012020 <__assert_func+0x38>)
 8012010:	e7f4      	b.n	8011ffc <__assert_func+0x14>
 8012012:	bf00      	nop
 8012014:	24000138 	.word	0x24000138
 8012018:	080129fe 	.word	0x080129fe
 801201c:	080129d0 	.word	0x080129d0
 8012020:	080129c3 	.word	0x080129c3

08012024 <_calloc_r>:
 8012024:	b570      	push	{r4, r5, r6, lr}
 8012026:	fba1 5402 	umull	r5, r4, r1, r2
 801202a:	b93c      	cbnz	r4, 801203c <_calloc_r+0x18>
 801202c:	4629      	mov	r1, r5
 801202e:	f7ff f991 	bl	8011354 <_malloc_r>
 8012032:	4606      	mov	r6, r0
 8012034:	b928      	cbnz	r0, 8012042 <_calloc_r+0x1e>
 8012036:	2600      	movs	r6, #0
 8012038:	4630      	mov	r0, r6
 801203a:	bd70      	pop	{r4, r5, r6, pc}
 801203c:	220c      	movs	r2, #12
 801203e:	6002      	str	r2, [r0, #0]
 8012040:	e7f9      	b.n	8012036 <_calloc_r+0x12>
 8012042:	462a      	mov	r2, r5
 8012044:	4621      	mov	r1, r4
 8012046:	f7fe fab0 	bl	80105aa <memset>
 801204a:	e7f5      	b.n	8012038 <_calloc_r+0x14>

0801204c <__ascii_mbtowc>:
 801204c:	b082      	sub	sp, #8
 801204e:	b901      	cbnz	r1, 8012052 <__ascii_mbtowc+0x6>
 8012050:	a901      	add	r1, sp, #4
 8012052:	b142      	cbz	r2, 8012066 <__ascii_mbtowc+0x1a>
 8012054:	b14b      	cbz	r3, 801206a <__ascii_mbtowc+0x1e>
 8012056:	7813      	ldrb	r3, [r2, #0]
 8012058:	600b      	str	r3, [r1, #0]
 801205a:	7812      	ldrb	r2, [r2, #0]
 801205c:	1e10      	subs	r0, r2, #0
 801205e:	bf18      	it	ne
 8012060:	2001      	movne	r0, #1
 8012062:	b002      	add	sp, #8
 8012064:	4770      	bx	lr
 8012066:	4610      	mov	r0, r2
 8012068:	e7fb      	b.n	8012062 <__ascii_mbtowc+0x16>
 801206a:	f06f 0001 	mvn.w	r0, #1
 801206e:	e7f8      	b.n	8012062 <__ascii_mbtowc+0x16>

08012070 <_realloc_r>:
 8012070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012074:	4680      	mov	r8, r0
 8012076:	4615      	mov	r5, r2
 8012078:	460c      	mov	r4, r1
 801207a:	b921      	cbnz	r1, 8012086 <_realloc_r+0x16>
 801207c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012080:	4611      	mov	r1, r2
 8012082:	f7ff b967 	b.w	8011354 <_malloc_r>
 8012086:	b92a      	cbnz	r2, 8012094 <_realloc_r+0x24>
 8012088:	f7ff f8f0 	bl	801126c <_free_r>
 801208c:	2400      	movs	r4, #0
 801208e:	4620      	mov	r0, r4
 8012090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012094:	f000 f841 	bl	801211a <_malloc_usable_size_r>
 8012098:	4285      	cmp	r5, r0
 801209a:	4606      	mov	r6, r0
 801209c:	d802      	bhi.n	80120a4 <_realloc_r+0x34>
 801209e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80120a2:	d8f4      	bhi.n	801208e <_realloc_r+0x1e>
 80120a4:	4629      	mov	r1, r5
 80120a6:	4640      	mov	r0, r8
 80120a8:	f7ff f954 	bl	8011354 <_malloc_r>
 80120ac:	4607      	mov	r7, r0
 80120ae:	2800      	cmp	r0, #0
 80120b0:	d0ec      	beq.n	801208c <_realloc_r+0x1c>
 80120b2:	42b5      	cmp	r5, r6
 80120b4:	462a      	mov	r2, r5
 80120b6:	4621      	mov	r1, r4
 80120b8:	bf28      	it	cs
 80120ba:	4632      	movcs	r2, r6
 80120bc:	f7ff ff86 	bl	8011fcc <memcpy>
 80120c0:	4621      	mov	r1, r4
 80120c2:	4640      	mov	r0, r8
 80120c4:	f7ff f8d2 	bl	801126c <_free_r>
 80120c8:	463c      	mov	r4, r7
 80120ca:	e7e0      	b.n	801208e <_realloc_r+0x1e>

080120cc <__ascii_wctomb>:
 80120cc:	4603      	mov	r3, r0
 80120ce:	4608      	mov	r0, r1
 80120d0:	b141      	cbz	r1, 80120e4 <__ascii_wctomb+0x18>
 80120d2:	2aff      	cmp	r2, #255	@ 0xff
 80120d4:	d904      	bls.n	80120e0 <__ascii_wctomb+0x14>
 80120d6:	228a      	movs	r2, #138	@ 0x8a
 80120d8:	601a      	str	r2, [r3, #0]
 80120da:	f04f 30ff 	mov.w	r0, #4294967295
 80120de:	4770      	bx	lr
 80120e0:	700a      	strb	r2, [r1, #0]
 80120e2:	2001      	movs	r0, #1
 80120e4:	4770      	bx	lr
	...

080120e8 <fiprintf>:
 80120e8:	b40e      	push	{r1, r2, r3}
 80120ea:	b503      	push	{r0, r1, lr}
 80120ec:	4601      	mov	r1, r0
 80120ee:	ab03      	add	r3, sp, #12
 80120f0:	4805      	ldr	r0, [pc, #20]	@ (8012108 <fiprintf+0x20>)
 80120f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80120f6:	6800      	ldr	r0, [r0, #0]
 80120f8:	9301      	str	r3, [sp, #4]
 80120fa:	f000 f83f 	bl	801217c <_vfiprintf_r>
 80120fe:	b002      	add	sp, #8
 8012100:	f85d eb04 	ldr.w	lr, [sp], #4
 8012104:	b003      	add	sp, #12
 8012106:	4770      	bx	lr
 8012108:	24000138 	.word	0x24000138

0801210c <abort>:
 801210c:	b508      	push	{r3, lr}
 801210e:	2006      	movs	r0, #6
 8012110:	f000 fa08 	bl	8012524 <raise>
 8012114:	2001      	movs	r0, #1
 8012116:	f7ef fa17 	bl	8001548 <_exit>

0801211a <_malloc_usable_size_r>:
 801211a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801211e:	1f18      	subs	r0, r3, #4
 8012120:	2b00      	cmp	r3, #0
 8012122:	bfbc      	itt	lt
 8012124:	580b      	ldrlt	r3, [r1, r0]
 8012126:	18c0      	addlt	r0, r0, r3
 8012128:	4770      	bx	lr

0801212a <__sfputc_r>:
 801212a:	6893      	ldr	r3, [r2, #8]
 801212c:	3b01      	subs	r3, #1
 801212e:	2b00      	cmp	r3, #0
 8012130:	b410      	push	{r4}
 8012132:	6093      	str	r3, [r2, #8]
 8012134:	da08      	bge.n	8012148 <__sfputc_r+0x1e>
 8012136:	6994      	ldr	r4, [r2, #24]
 8012138:	42a3      	cmp	r3, r4
 801213a:	db01      	blt.n	8012140 <__sfputc_r+0x16>
 801213c:	290a      	cmp	r1, #10
 801213e:	d103      	bne.n	8012148 <__sfputc_r+0x1e>
 8012140:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012144:	f000 b932 	b.w	80123ac <__swbuf_r>
 8012148:	6813      	ldr	r3, [r2, #0]
 801214a:	1c58      	adds	r0, r3, #1
 801214c:	6010      	str	r0, [r2, #0]
 801214e:	7019      	strb	r1, [r3, #0]
 8012150:	4608      	mov	r0, r1
 8012152:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012156:	4770      	bx	lr

08012158 <__sfputs_r>:
 8012158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801215a:	4606      	mov	r6, r0
 801215c:	460f      	mov	r7, r1
 801215e:	4614      	mov	r4, r2
 8012160:	18d5      	adds	r5, r2, r3
 8012162:	42ac      	cmp	r4, r5
 8012164:	d101      	bne.n	801216a <__sfputs_r+0x12>
 8012166:	2000      	movs	r0, #0
 8012168:	e007      	b.n	801217a <__sfputs_r+0x22>
 801216a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801216e:	463a      	mov	r2, r7
 8012170:	4630      	mov	r0, r6
 8012172:	f7ff ffda 	bl	801212a <__sfputc_r>
 8012176:	1c43      	adds	r3, r0, #1
 8012178:	d1f3      	bne.n	8012162 <__sfputs_r+0xa>
 801217a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801217c <_vfiprintf_r>:
 801217c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012180:	460d      	mov	r5, r1
 8012182:	b09d      	sub	sp, #116	@ 0x74
 8012184:	4614      	mov	r4, r2
 8012186:	4698      	mov	r8, r3
 8012188:	4606      	mov	r6, r0
 801218a:	b118      	cbz	r0, 8012194 <_vfiprintf_r+0x18>
 801218c:	6a03      	ldr	r3, [r0, #32]
 801218e:	b90b      	cbnz	r3, 8012194 <_vfiprintf_r+0x18>
 8012190:	f7fe f972 	bl	8010478 <__sinit>
 8012194:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012196:	07d9      	lsls	r1, r3, #31
 8012198:	d405      	bmi.n	80121a6 <_vfiprintf_r+0x2a>
 801219a:	89ab      	ldrh	r3, [r5, #12]
 801219c:	059a      	lsls	r2, r3, #22
 801219e:	d402      	bmi.n	80121a6 <_vfiprintf_r+0x2a>
 80121a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80121a2:	f7fe fa80 	bl	80106a6 <__retarget_lock_acquire_recursive>
 80121a6:	89ab      	ldrh	r3, [r5, #12]
 80121a8:	071b      	lsls	r3, r3, #28
 80121aa:	d501      	bpl.n	80121b0 <_vfiprintf_r+0x34>
 80121ac:	692b      	ldr	r3, [r5, #16]
 80121ae:	b99b      	cbnz	r3, 80121d8 <_vfiprintf_r+0x5c>
 80121b0:	4629      	mov	r1, r5
 80121b2:	4630      	mov	r0, r6
 80121b4:	f000 f938 	bl	8012428 <__swsetup_r>
 80121b8:	b170      	cbz	r0, 80121d8 <_vfiprintf_r+0x5c>
 80121ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80121bc:	07dc      	lsls	r4, r3, #31
 80121be:	d504      	bpl.n	80121ca <_vfiprintf_r+0x4e>
 80121c0:	f04f 30ff 	mov.w	r0, #4294967295
 80121c4:	b01d      	add	sp, #116	@ 0x74
 80121c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121ca:	89ab      	ldrh	r3, [r5, #12]
 80121cc:	0598      	lsls	r0, r3, #22
 80121ce:	d4f7      	bmi.n	80121c0 <_vfiprintf_r+0x44>
 80121d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80121d2:	f7fe fa69 	bl	80106a8 <__retarget_lock_release_recursive>
 80121d6:	e7f3      	b.n	80121c0 <_vfiprintf_r+0x44>
 80121d8:	2300      	movs	r3, #0
 80121da:	9309      	str	r3, [sp, #36]	@ 0x24
 80121dc:	2320      	movs	r3, #32
 80121de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80121e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80121e6:	2330      	movs	r3, #48	@ 0x30
 80121e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012398 <_vfiprintf_r+0x21c>
 80121ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80121f0:	f04f 0901 	mov.w	r9, #1
 80121f4:	4623      	mov	r3, r4
 80121f6:	469a      	mov	sl, r3
 80121f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80121fc:	b10a      	cbz	r2, 8012202 <_vfiprintf_r+0x86>
 80121fe:	2a25      	cmp	r2, #37	@ 0x25
 8012200:	d1f9      	bne.n	80121f6 <_vfiprintf_r+0x7a>
 8012202:	ebba 0b04 	subs.w	fp, sl, r4
 8012206:	d00b      	beq.n	8012220 <_vfiprintf_r+0xa4>
 8012208:	465b      	mov	r3, fp
 801220a:	4622      	mov	r2, r4
 801220c:	4629      	mov	r1, r5
 801220e:	4630      	mov	r0, r6
 8012210:	f7ff ffa2 	bl	8012158 <__sfputs_r>
 8012214:	3001      	adds	r0, #1
 8012216:	f000 80a7 	beq.w	8012368 <_vfiprintf_r+0x1ec>
 801221a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801221c:	445a      	add	r2, fp
 801221e:	9209      	str	r2, [sp, #36]	@ 0x24
 8012220:	f89a 3000 	ldrb.w	r3, [sl]
 8012224:	2b00      	cmp	r3, #0
 8012226:	f000 809f 	beq.w	8012368 <_vfiprintf_r+0x1ec>
 801222a:	2300      	movs	r3, #0
 801222c:	f04f 32ff 	mov.w	r2, #4294967295
 8012230:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012234:	f10a 0a01 	add.w	sl, sl, #1
 8012238:	9304      	str	r3, [sp, #16]
 801223a:	9307      	str	r3, [sp, #28]
 801223c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012240:	931a      	str	r3, [sp, #104]	@ 0x68
 8012242:	4654      	mov	r4, sl
 8012244:	2205      	movs	r2, #5
 8012246:	f814 1b01 	ldrb.w	r1, [r4], #1
 801224a:	4853      	ldr	r0, [pc, #332]	@ (8012398 <_vfiprintf_r+0x21c>)
 801224c:	f7ee f848 	bl	80002e0 <memchr>
 8012250:	9a04      	ldr	r2, [sp, #16]
 8012252:	b9d8      	cbnz	r0, 801228c <_vfiprintf_r+0x110>
 8012254:	06d1      	lsls	r1, r2, #27
 8012256:	bf44      	itt	mi
 8012258:	2320      	movmi	r3, #32
 801225a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801225e:	0713      	lsls	r3, r2, #28
 8012260:	bf44      	itt	mi
 8012262:	232b      	movmi	r3, #43	@ 0x2b
 8012264:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012268:	f89a 3000 	ldrb.w	r3, [sl]
 801226c:	2b2a      	cmp	r3, #42	@ 0x2a
 801226e:	d015      	beq.n	801229c <_vfiprintf_r+0x120>
 8012270:	9a07      	ldr	r2, [sp, #28]
 8012272:	4654      	mov	r4, sl
 8012274:	2000      	movs	r0, #0
 8012276:	f04f 0c0a 	mov.w	ip, #10
 801227a:	4621      	mov	r1, r4
 801227c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012280:	3b30      	subs	r3, #48	@ 0x30
 8012282:	2b09      	cmp	r3, #9
 8012284:	d94b      	bls.n	801231e <_vfiprintf_r+0x1a2>
 8012286:	b1b0      	cbz	r0, 80122b6 <_vfiprintf_r+0x13a>
 8012288:	9207      	str	r2, [sp, #28]
 801228a:	e014      	b.n	80122b6 <_vfiprintf_r+0x13a>
 801228c:	eba0 0308 	sub.w	r3, r0, r8
 8012290:	fa09 f303 	lsl.w	r3, r9, r3
 8012294:	4313      	orrs	r3, r2
 8012296:	9304      	str	r3, [sp, #16]
 8012298:	46a2      	mov	sl, r4
 801229a:	e7d2      	b.n	8012242 <_vfiprintf_r+0xc6>
 801229c:	9b03      	ldr	r3, [sp, #12]
 801229e:	1d19      	adds	r1, r3, #4
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	9103      	str	r1, [sp, #12]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	bfbb      	ittet	lt
 80122a8:	425b      	neglt	r3, r3
 80122aa:	f042 0202 	orrlt.w	r2, r2, #2
 80122ae:	9307      	strge	r3, [sp, #28]
 80122b0:	9307      	strlt	r3, [sp, #28]
 80122b2:	bfb8      	it	lt
 80122b4:	9204      	strlt	r2, [sp, #16]
 80122b6:	7823      	ldrb	r3, [r4, #0]
 80122b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80122ba:	d10a      	bne.n	80122d2 <_vfiprintf_r+0x156>
 80122bc:	7863      	ldrb	r3, [r4, #1]
 80122be:	2b2a      	cmp	r3, #42	@ 0x2a
 80122c0:	d132      	bne.n	8012328 <_vfiprintf_r+0x1ac>
 80122c2:	9b03      	ldr	r3, [sp, #12]
 80122c4:	1d1a      	adds	r2, r3, #4
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	9203      	str	r2, [sp, #12]
 80122ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80122ce:	3402      	adds	r4, #2
 80122d0:	9305      	str	r3, [sp, #20]
 80122d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80123a8 <_vfiprintf_r+0x22c>
 80122d6:	7821      	ldrb	r1, [r4, #0]
 80122d8:	2203      	movs	r2, #3
 80122da:	4650      	mov	r0, sl
 80122dc:	f7ee f800 	bl	80002e0 <memchr>
 80122e0:	b138      	cbz	r0, 80122f2 <_vfiprintf_r+0x176>
 80122e2:	9b04      	ldr	r3, [sp, #16]
 80122e4:	eba0 000a 	sub.w	r0, r0, sl
 80122e8:	2240      	movs	r2, #64	@ 0x40
 80122ea:	4082      	lsls	r2, r0
 80122ec:	4313      	orrs	r3, r2
 80122ee:	3401      	adds	r4, #1
 80122f0:	9304      	str	r3, [sp, #16]
 80122f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122f6:	4829      	ldr	r0, [pc, #164]	@ (801239c <_vfiprintf_r+0x220>)
 80122f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80122fc:	2206      	movs	r2, #6
 80122fe:	f7ed ffef 	bl	80002e0 <memchr>
 8012302:	2800      	cmp	r0, #0
 8012304:	d03f      	beq.n	8012386 <_vfiprintf_r+0x20a>
 8012306:	4b26      	ldr	r3, [pc, #152]	@ (80123a0 <_vfiprintf_r+0x224>)
 8012308:	bb1b      	cbnz	r3, 8012352 <_vfiprintf_r+0x1d6>
 801230a:	9b03      	ldr	r3, [sp, #12]
 801230c:	3307      	adds	r3, #7
 801230e:	f023 0307 	bic.w	r3, r3, #7
 8012312:	3308      	adds	r3, #8
 8012314:	9303      	str	r3, [sp, #12]
 8012316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012318:	443b      	add	r3, r7
 801231a:	9309      	str	r3, [sp, #36]	@ 0x24
 801231c:	e76a      	b.n	80121f4 <_vfiprintf_r+0x78>
 801231e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012322:	460c      	mov	r4, r1
 8012324:	2001      	movs	r0, #1
 8012326:	e7a8      	b.n	801227a <_vfiprintf_r+0xfe>
 8012328:	2300      	movs	r3, #0
 801232a:	3401      	adds	r4, #1
 801232c:	9305      	str	r3, [sp, #20]
 801232e:	4619      	mov	r1, r3
 8012330:	f04f 0c0a 	mov.w	ip, #10
 8012334:	4620      	mov	r0, r4
 8012336:	f810 2b01 	ldrb.w	r2, [r0], #1
 801233a:	3a30      	subs	r2, #48	@ 0x30
 801233c:	2a09      	cmp	r2, #9
 801233e:	d903      	bls.n	8012348 <_vfiprintf_r+0x1cc>
 8012340:	2b00      	cmp	r3, #0
 8012342:	d0c6      	beq.n	80122d2 <_vfiprintf_r+0x156>
 8012344:	9105      	str	r1, [sp, #20]
 8012346:	e7c4      	b.n	80122d2 <_vfiprintf_r+0x156>
 8012348:	fb0c 2101 	mla	r1, ip, r1, r2
 801234c:	4604      	mov	r4, r0
 801234e:	2301      	movs	r3, #1
 8012350:	e7f0      	b.n	8012334 <_vfiprintf_r+0x1b8>
 8012352:	ab03      	add	r3, sp, #12
 8012354:	9300      	str	r3, [sp, #0]
 8012356:	462a      	mov	r2, r5
 8012358:	4b12      	ldr	r3, [pc, #72]	@ (80123a4 <_vfiprintf_r+0x228>)
 801235a:	a904      	add	r1, sp, #16
 801235c:	4630      	mov	r0, r6
 801235e:	f7fd fc57 	bl	800fc10 <_printf_float>
 8012362:	4607      	mov	r7, r0
 8012364:	1c78      	adds	r0, r7, #1
 8012366:	d1d6      	bne.n	8012316 <_vfiprintf_r+0x19a>
 8012368:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801236a:	07d9      	lsls	r1, r3, #31
 801236c:	d405      	bmi.n	801237a <_vfiprintf_r+0x1fe>
 801236e:	89ab      	ldrh	r3, [r5, #12]
 8012370:	059a      	lsls	r2, r3, #22
 8012372:	d402      	bmi.n	801237a <_vfiprintf_r+0x1fe>
 8012374:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012376:	f7fe f997 	bl	80106a8 <__retarget_lock_release_recursive>
 801237a:	89ab      	ldrh	r3, [r5, #12]
 801237c:	065b      	lsls	r3, r3, #25
 801237e:	f53f af1f 	bmi.w	80121c0 <_vfiprintf_r+0x44>
 8012382:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012384:	e71e      	b.n	80121c4 <_vfiprintf_r+0x48>
 8012386:	ab03      	add	r3, sp, #12
 8012388:	9300      	str	r3, [sp, #0]
 801238a:	462a      	mov	r2, r5
 801238c:	4b05      	ldr	r3, [pc, #20]	@ (80123a4 <_vfiprintf_r+0x228>)
 801238e:	a904      	add	r1, sp, #16
 8012390:	4630      	mov	r0, r6
 8012392:	f7fd fec5 	bl	8010120 <_printf_i>
 8012396:	e7e4      	b.n	8012362 <_vfiprintf_r+0x1e6>
 8012398:	080129a8 	.word	0x080129a8
 801239c:	080129b2 	.word	0x080129b2
 80123a0:	0800fc11 	.word	0x0800fc11
 80123a4:	08012159 	.word	0x08012159
 80123a8:	080129ae 	.word	0x080129ae

080123ac <__swbuf_r>:
 80123ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123ae:	460e      	mov	r6, r1
 80123b0:	4614      	mov	r4, r2
 80123b2:	4605      	mov	r5, r0
 80123b4:	b118      	cbz	r0, 80123be <__swbuf_r+0x12>
 80123b6:	6a03      	ldr	r3, [r0, #32]
 80123b8:	b90b      	cbnz	r3, 80123be <__swbuf_r+0x12>
 80123ba:	f7fe f85d 	bl	8010478 <__sinit>
 80123be:	69a3      	ldr	r3, [r4, #24]
 80123c0:	60a3      	str	r3, [r4, #8]
 80123c2:	89a3      	ldrh	r3, [r4, #12]
 80123c4:	071a      	lsls	r2, r3, #28
 80123c6:	d501      	bpl.n	80123cc <__swbuf_r+0x20>
 80123c8:	6923      	ldr	r3, [r4, #16]
 80123ca:	b943      	cbnz	r3, 80123de <__swbuf_r+0x32>
 80123cc:	4621      	mov	r1, r4
 80123ce:	4628      	mov	r0, r5
 80123d0:	f000 f82a 	bl	8012428 <__swsetup_r>
 80123d4:	b118      	cbz	r0, 80123de <__swbuf_r+0x32>
 80123d6:	f04f 37ff 	mov.w	r7, #4294967295
 80123da:	4638      	mov	r0, r7
 80123dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80123de:	6823      	ldr	r3, [r4, #0]
 80123e0:	6922      	ldr	r2, [r4, #16]
 80123e2:	1a98      	subs	r0, r3, r2
 80123e4:	6963      	ldr	r3, [r4, #20]
 80123e6:	b2f6      	uxtb	r6, r6
 80123e8:	4283      	cmp	r3, r0
 80123ea:	4637      	mov	r7, r6
 80123ec:	dc05      	bgt.n	80123fa <__swbuf_r+0x4e>
 80123ee:	4621      	mov	r1, r4
 80123f0:	4628      	mov	r0, r5
 80123f2:	f7ff fd99 	bl	8011f28 <_fflush_r>
 80123f6:	2800      	cmp	r0, #0
 80123f8:	d1ed      	bne.n	80123d6 <__swbuf_r+0x2a>
 80123fa:	68a3      	ldr	r3, [r4, #8]
 80123fc:	3b01      	subs	r3, #1
 80123fe:	60a3      	str	r3, [r4, #8]
 8012400:	6823      	ldr	r3, [r4, #0]
 8012402:	1c5a      	adds	r2, r3, #1
 8012404:	6022      	str	r2, [r4, #0]
 8012406:	701e      	strb	r6, [r3, #0]
 8012408:	6962      	ldr	r2, [r4, #20]
 801240a:	1c43      	adds	r3, r0, #1
 801240c:	429a      	cmp	r2, r3
 801240e:	d004      	beq.n	801241a <__swbuf_r+0x6e>
 8012410:	89a3      	ldrh	r3, [r4, #12]
 8012412:	07db      	lsls	r3, r3, #31
 8012414:	d5e1      	bpl.n	80123da <__swbuf_r+0x2e>
 8012416:	2e0a      	cmp	r6, #10
 8012418:	d1df      	bne.n	80123da <__swbuf_r+0x2e>
 801241a:	4621      	mov	r1, r4
 801241c:	4628      	mov	r0, r5
 801241e:	f7ff fd83 	bl	8011f28 <_fflush_r>
 8012422:	2800      	cmp	r0, #0
 8012424:	d0d9      	beq.n	80123da <__swbuf_r+0x2e>
 8012426:	e7d6      	b.n	80123d6 <__swbuf_r+0x2a>

08012428 <__swsetup_r>:
 8012428:	b538      	push	{r3, r4, r5, lr}
 801242a:	4b29      	ldr	r3, [pc, #164]	@ (80124d0 <__swsetup_r+0xa8>)
 801242c:	4605      	mov	r5, r0
 801242e:	6818      	ldr	r0, [r3, #0]
 8012430:	460c      	mov	r4, r1
 8012432:	b118      	cbz	r0, 801243c <__swsetup_r+0x14>
 8012434:	6a03      	ldr	r3, [r0, #32]
 8012436:	b90b      	cbnz	r3, 801243c <__swsetup_r+0x14>
 8012438:	f7fe f81e 	bl	8010478 <__sinit>
 801243c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012440:	0719      	lsls	r1, r3, #28
 8012442:	d422      	bmi.n	801248a <__swsetup_r+0x62>
 8012444:	06da      	lsls	r2, r3, #27
 8012446:	d407      	bmi.n	8012458 <__swsetup_r+0x30>
 8012448:	2209      	movs	r2, #9
 801244a:	602a      	str	r2, [r5, #0]
 801244c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012450:	81a3      	strh	r3, [r4, #12]
 8012452:	f04f 30ff 	mov.w	r0, #4294967295
 8012456:	e033      	b.n	80124c0 <__swsetup_r+0x98>
 8012458:	0758      	lsls	r0, r3, #29
 801245a:	d512      	bpl.n	8012482 <__swsetup_r+0x5a>
 801245c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801245e:	b141      	cbz	r1, 8012472 <__swsetup_r+0x4a>
 8012460:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012464:	4299      	cmp	r1, r3
 8012466:	d002      	beq.n	801246e <__swsetup_r+0x46>
 8012468:	4628      	mov	r0, r5
 801246a:	f7fe feff 	bl	801126c <_free_r>
 801246e:	2300      	movs	r3, #0
 8012470:	6363      	str	r3, [r4, #52]	@ 0x34
 8012472:	89a3      	ldrh	r3, [r4, #12]
 8012474:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012478:	81a3      	strh	r3, [r4, #12]
 801247a:	2300      	movs	r3, #0
 801247c:	6063      	str	r3, [r4, #4]
 801247e:	6923      	ldr	r3, [r4, #16]
 8012480:	6023      	str	r3, [r4, #0]
 8012482:	89a3      	ldrh	r3, [r4, #12]
 8012484:	f043 0308 	orr.w	r3, r3, #8
 8012488:	81a3      	strh	r3, [r4, #12]
 801248a:	6923      	ldr	r3, [r4, #16]
 801248c:	b94b      	cbnz	r3, 80124a2 <__swsetup_r+0x7a>
 801248e:	89a3      	ldrh	r3, [r4, #12]
 8012490:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012494:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012498:	d003      	beq.n	80124a2 <__swsetup_r+0x7a>
 801249a:	4621      	mov	r1, r4
 801249c:	4628      	mov	r0, r5
 801249e:	f000 f883 	bl	80125a8 <__smakebuf_r>
 80124a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80124a6:	f013 0201 	ands.w	r2, r3, #1
 80124aa:	d00a      	beq.n	80124c2 <__swsetup_r+0x9a>
 80124ac:	2200      	movs	r2, #0
 80124ae:	60a2      	str	r2, [r4, #8]
 80124b0:	6962      	ldr	r2, [r4, #20]
 80124b2:	4252      	negs	r2, r2
 80124b4:	61a2      	str	r2, [r4, #24]
 80124b6:	6922      	ldr	r2, [r4, #16]
 80124b8:	b942      	cbnz	r2, 80124cc <__swsetup_r+0xa4>
 80124ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80124be:	d1c5      	bne.n	801244c <__swsetup_r+0x24>
 80124c0:	bd38      	pop	{r3, r4, r5, pc}
 80124c2:	0799      	lsls	r1, r3, #30
 80124c4:	bf58      	it	pl
 80124c6:	6962      	ldrpl	r2, [r4, #20]
 80124c8:	60a2      	str	r2, [r4, #8]
 80124ca:	e7f4      	b.n	80124b6 <__swsetup_r+0x8e>
 80124cc:	2000      	movs	r0, #0
 80124ce:	e7f7      	b.n	80124c0 <__swsetup_r+0x98>
 80124d0:	24000138 	.word	0x24000138

080124d4 <_raise_r>:
 80124d4:	291f      	cmp	r1, #31
 80124d6:	b538      	push	{r3, r4, r5, lr}
 80124d8:	4605      	mov	r5, r0
 80124da:	460c      	mov	r4, r1
 80124dc:	d904      	bls.n	80124e8 <_raise_r+0x14>
 80124de:	2316      	movs	r3, #22
 80124e0:	6003      	str	r3, [r0, #0]
 80124e2:	f04f 30ff 	mov.w	r0, #4294967295
 80124e6:	bd38      	pop	{r3, r4, r5, pc}
 80124e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80124ea:	b112      	cbz	r2, 80124f2 <_raise_r+0x1e>
 80124ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80124f0:	b94b      	cbnz	r3, 8012506 <_raise_r+0x32>
 80124f2:	4628      	mov	r0, r5
 80124f4:	f000 f830 	bl	8012558 <_getpid_r>
 80124f8:	4622      	mov	r2, r4
 80124fa:	4601      	mov	r1, r0
 80124fc:	4628      	mov	r0, r5
 80124fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012502:	f000 b817 	b.w	8012534 <_kill_r>
 8012506:	2b01      	cmp	r3, #1
 8012508:	d00a      	beq.n	8012520 <_raise_r+0x4c>
 801250a:	1c59      	adds	r1, r3, #1
 801250c:	d103      	bne.n	8012516 <_raise_r+0x42>
 801250e:	2316      	movs	r3, #22
 8012510:	6003      	str	r3, [r0, #0]
 8012512:	2001      	movs	r0, #1
 8012514:	e7e7      	b.n	80124e6 <_raise_r+0x12>
 8012516:	2100      	movs	r1, #0
 8012518:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801251c:	4620      	mov	r0, r4
 801251e:	4798      	blx	r3
 8012520:	2000      	movs	r0, #0
 8012522:	e7e0      	b.n	80124e6 <_raise_r+0x12>

08012524 <raise>:
 8012524:	4b02      	ldr	r3, [pc, #8]	@ (8012530 <raise+0xc>)
 8012526:	4601      	mov	r1, r0
 8012528:	6818      	ldr	r0, [r3, #0]
 801252a:	f7ff bfd3 	b.w	80124d4 <_raise_r>
 801252e:	bf00      	nop
 8012530:	24000138 	.word	0x24000138

08012534 <_kill_r>:
 8012534:	b538      	push	{r3, r4, r5, lr}
 8012536:	4d07      	ldr	r5, [pc, #28]	@ (8012554 <_kill_r+0x20>)
 8012538:	2300      	movs	r3, #0
 801253a:	4604      	mov	r4, r0
 801253c:	4608      	mov	r0, r1
 801253e:	4611      	mov	r1, r2
 8012540:	602b      	str	r3, [r5, #0]
 8012542:	f7ee fff1 	bl	8001528 <_kill>
 8012546:	1c43      	adds	r3, r0, #1
 8012548:	d102      	bne.n	8012550 <_kill_r+0x1c>
 801254a:	682b      	ldr	r3, [r5, #0]
 801254c:	b103      	cbz	r3, 8012550 <_kill_r+0x1c>
 801254e:	6023      	str	r3, [r4, #0]
 8012550:	bd38      	pop	{r3, r4, r5, pc}
 8012552:	bf00      	nop
 8012554:	240026b8 	.word	0x240026b8

08012558 <_getpid_r>:
 8012558:	f7ee bfde 	b.w	8001518 <_getpid>

0801255c <__swhatbuf_r>:
 801255c:	b570      	push	{r4, r5, r6, lr}
 801255e:	460c      	mov	r4, r1
 8012560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012564:	2900      	cmp	r1, #0
 8012566:	b096      	sub	sp, #88	@ 0x58
 8012568:	4615      	mov	r5, r2
 801256a:	461e      	mov	r6, r3
 801256c:	da0d      	bge.n	801258a <__swhatbuf_r+0x2e>
 801256e:	89a3      	ldrh	r3, [r4, #12]
 8012570:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012574:	f04f 0100 	mov.w	r1, #0
 8012578:	bf14      	ite	ne
 801257a:	2340      	movne	r3, #64	@ 0x40
 801257c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012580:	2000      	movs	r0, #0
 8012582:	6031      	str	r1, [r6, #0]
 8012584:	602b      	str	r3, [r5, #0]
 8012586:	b016      	add	sp, #88	@ 0x58
 8012588:	bd70      	pop	{r4, r5, r6, pc}
 801258a:	466a      	mov	r2, sp
 801258c:	f000 f848 	bl	8012620 <_fstat_r>
 8012590:	2800      	cmp	r0, #0
 8012592:	dbec      	blt.n	801256e <__swhatbuf_r+0x12>
 8012594:	9901      	ldr	r1, [sp, #4]
 8012596:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801259a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801259e:	4259      	negs	r1, r3
 80125a0:	4159      	adcs	r1, r3
 80125a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80125a6:	e7eb      	b.n	8012580 <__swhatbuf_r+0x24>

080125a8 <__smakebuf_r>:
 80125a8:	898b      	ldrh	r3, [r1, #12]
 80125aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80125ac:	079d      	lsls	r5, r3, #30
 80125ae:	4606      	mov	r6, r0
 80125b0:	460c      	mov	r4, r1
 80125b2:	d507      	bpl.n	80125c4 <__smakebuf_r+0x1c>
 80125b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80125b8:	6023      	str	r3, [r4, #0]
 80125ba:	6123      	str	r3, [r4, #16]
 80125bc:	2301      	movs	r3, #1
 80125be:	6163      	str	r3, [r4, #20]
 80125c0:	b003      	add	sp, #12
 80125c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80125c4:	ab01      	add	r3, sp, #4
 80125c6:	466a      	mov	r2, sp
 80125c8:	f7ff ffc8 	bl	801255c <__swhatbuf_r>
 80125cc:	9f00      	ldr	r7, [sp, #0]
 80125ce:	4605      	mov	r5, r0
 80125d0:	4639      	mov	r1, r7
 80125d2:	4630      	mov	r0, r6
 80125d4:	f7fe febe 	bl	8011354 <_malloc_r>
 80125d8:	b948      	cbnz	r0, 80125ee <__smakebuf_r+0x46>
 80125da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80125de:	059a      	lsls	r2, r3, #22
 80125e0:	d4ee      	bmi.n	80125c0 <__smakebuf_r+0x18>
 80125e2:	f023 0303 	bic.w	r3, r3, #3
 80125e6:	f043 0302 	orr.w	r3, r3, #2
 80125ea:	81a3      	strh	r3, [r4, #12]
 80125ec:	e7e2      	b.n	80125b4 <__smakebuf_r+0xc>
 80125ee:	89a3      	ldrh	r3, [r4, #12]
 80125f0:	6020      	str	r0, [r4, #0]
 80125f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80125f6:	81a3      	strh	r3, [r4, #12]
 80125f8:	9b01      	ldr	r3, [sp, #4]
 80125fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80125fe:	b15b      	cbz	r3, 8012618 <__smakebuf_r+0x70>
 8012600:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012604:	4630      	mov	r0, r6
 8012606:	f000 f81d 	bl	8012644 <_isatty_r>
 801260a:	b128      	cbz	r0, 8012618 <__smakebuf_r+0x70>
 801260c:	89a3      	ldrh	r3, [r4, #12]
 801260e:	f023 0303 	bic.w	r3, r3, #3
 8012612:	f043 0301 	orr.w	r3, r3, #1
 8012616:	81a3      	strh	r3, [r4, #12]
 8012618:	89a3      	ldrh	r3, [r4, #12]
 801261a:	431d      	orrs	r5, r3
 801261c:	81a5      	strh	r5, [r4, #12]
 801261e:	e7cf      	b.n	80125c0 <__smakebuf_r+0x18>

08012620 <_fstat_r>:
 8012620:	b538      	push	{r3, r4, r5, lr}
 8012622:	4d07      	ldr	r5, [pc, #28]	@ (8012640 <_fstat_r+0x20>)
 8012624:	2300      	movs	r3, #0
 8012626:	4604      	mov	r4, r0
 8012628:	4608      	mov	r0, r1
 801262a:	4611      	mov	r1, r2
 801262c:	602b      	str	r3, [r5, #0]
 801262e:	f7ee ffdb 	bl	80015e8 <_fstat>
 8012632:	1c43      	adds	r3, r0, #1
 8012634:	d102      	bne.n	801263c <_fstat_r+0x1c>
 8012636:	682b      	ldr	r3, [r5, #0]
 8012638:	b103      	cbz	r3, 801263c <_fstat_r+0x1c>
 801263a:	6023      	str	r3, [r4, #0]
 801263c:	bd38      	pop	{r3, r4, r5, pc}
 801263e:	bf00      	nop
 8012640:	240026b8 	.word	0x240026b8

08012644 <_isatty_r>:
 8012644:	b538      	push	{r3, r4, r5, lr}
 8012646:	4d06      	ldr	r5, [pc, #24]	@ (8012660 <_isatty_r+0x1c>)
 8012648:	2300      	movs	r3, #0
 801264a:	4604      	mov	r4, r0
 801264c:	4608      	mov	r0, r1
 801264e:	602b      	str	r3, [r5, #0]
 8012650:	f7ee ffda 	bl	8001608 <_isatty>
 8012654:	1c43      	adds	r3, r0, #1
 8012656:	d102      	bne.n	801265e <_isatty_r+0x1a>
 8012658:	682b      	ldr	r3, [r5, #0]
 801265a:	b103      	cbz	r3, 801265e <_isatty_r+0x1a>
 801265c:	6023      	str	r3, [r4, #0]
 801265e:	bd38      	pop	{r3, r4, r5, pc}
 8012660:	240026b8 	.word	0x240026b8

08012664 <lrintf>:
 8012664:	ee10 3a10 	vmov	r3, s0
 8012668:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801266c:	f1a2 007f 	sub.w	r0, r2, #127	@ 0x7f
 8012670:	281e      	cmp	r0, #30
 8012672:	b082      	sub	sp, #8
 8012674:	dc2f      	bgt.n	80126d6 <lrintf+0x72>
 8012676:	1c41      	adds	r1, r0, #1
 8012678:	da02      	bge.n	8012680 <lrintf+0x1c>
 801267a:	2000      	movs	r0, #0
 801267c:	b002      	add	sp, #8
 801267e:	4770      	bx	lr
 8012680:	2816      	cmp	r0, #22
 8012682:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 8012686:	dd0a      	ble.n	801269e <lrintf+0x3a>
 8012688:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801268c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8012690:	3a96      	subs	r2, #150	@ 0x96
 8012692:	fa03 f002 	lsl.w	r0, r3, r2
 8012696:	2900      	cmp	r1, #0
 8012698:	d0f0      	beq.n	801267c <lrintf+0x18>
 801269a:	4240      	negs	r0, r0
 801269c:	e7ee      	b.n	801267c <lrintf+0x18>
 801269e:	4b10      	ldr	r3, [pc, #64]	@ (80126e0 <lrintf+0x7c>)
 80126a0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80126a4:	ed93 7a00 	vldr	s14, [r3]
 80126a8:	ee37 0a00 	vadd.f32	s0, s14, s0
 80126ac:	ed8d 0a01 	vstr	s0, [sp, #4]
 80126b0:	eddd 7a01 	vldr	s15, [sp, #4]
 80126b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80126b8:	ee17 3a90 	vmov	r3, s15
 80126bc:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80126c0:	d0db      	beq.n	801267a <lrintf+0x16>
 80126c2:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80126c6:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 80126ca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80126ce:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80126d2:	40d8      	lsrs	r0, r3
 80126d4:	e7df      	b.n	8012696 <lrintf+0x32>
 80126d6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80126da:	ee17 0a90 	vmov	r0, s15
 80126de:	e7cd      	b.n	801267c <lrintf+0x18>
 80126e0:	08012b00 	.word	0x08012b00

080126e4 <_init>:
 80126e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126e6:	bf00      	nop
 80126e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80126ea:	bc08      	pop	{r3}
 80126ec:	469e      	mov	lr, r3
 80126ee:	4770      	bx	lr

080126f0 <_fini>:
 80126f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126f2:	bf00      	nop
 80126f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80126f6:	bc08      	pop	{r3}
 80126f8:	469e      	mov	lr, r3
 80126fa:	4770      	bx	lr
