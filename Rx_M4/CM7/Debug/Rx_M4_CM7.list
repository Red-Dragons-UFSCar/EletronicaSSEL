
Rx_M4_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012064  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  08012308  08012308  00013308  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012710  08012710  000142f4  2**0
                  CONTENTS
  4 .ARM          00000008  08012710  08012710  00013710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012718  08012718  000142f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012718  08012718  00013718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801271c  0801271c  0001371c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002f4  24000000  08012720  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022f0  240002f4  08012a14  000142f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240025e4  08012a14  000145e4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000142f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000241fb  00000000  00000000  00014322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e07  00000000  00000000  0003851d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b00  00000000  00000000  0003d328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014b5  00000000  00000000  0003ee28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ffdb  00000000  00000000  000402dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027d2c  00000000  00000000  000802b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018e174  00000000  00000000  000a7fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00236158  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008014  00000000  00000000  0023619c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  0023e1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002f4 	.word	0x240002f4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080122ec 	.word	0x080122ec

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002f8 	.word	0x240002f8
 80002dc:	080122ec 	.word	0x080122ec

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3d      	ldr	r3, [pc, #244]	@ (800077c <SystemInit+0xfc>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800068a:	4a3c      	ldr	r2, [pc, #240]	@ (800077c <SystemInit+0xfc>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b39      	ldr	r3, [pc, #228]	@ (800077c <SystemInit+0xfc>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a38      	ldr	r2, [pc, #224]	@ (800077c <SystemInit+0xfc>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b37      	ldr	r3, [pc, #220]	@ (8000780 <SystemInit+0x100>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b34      	ldr	r3, [pc, #208]	@ (8000780 <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a32      	ldr	r2, [pc, #200]	@ (8000780 <SystemInit+0x100>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b31      	ldr	r3, [pc, #196]	@ (8000784 <SystemInit+0x104>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a30      	ldr	r2, [pc, #192]	@ (8000784 <SystemInit+0x104>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000784 <SystemInit+0x104>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000784 <SystemInit+0x104>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492c      	ldr	r1, [pc, #176]	@ (8000784 <SystemInit+0x104>)
 80006d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000788 <SystemInit+0x108>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <SystemInit+0x100>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 0308 	and.w	r3, r3, #8
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d007      	beq.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a24      	ldr	r2, [pc, #144]	@ (8000780 <SystemInit+0x100>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <SystemInit+0x104>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <SystemInit+0x104>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <SystemInit+0x104>)
 800070a:	4a20      	ldr	r2, [pc, #128]	@ (800078c <SystemInit+0x10c>)
 800070c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <SystemInit+0x104>)
 8000710:	4a1f      	ldr	r2, [pc, #124]	@ (8000790 <SystemInit+0x110>)
 8000712:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <SystemInit+0x104>)
 8000716:	4a1f      	ldr	r2, [pc, #124]	@ (8000794 <SystemInit+0x114>)
 8000718:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <SystemInit+0x104>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <SystemInit+0x104>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	@ (8000794 <SystemInit+0x114>)
 8000724:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <SystemInit+0x104>)
 800072e:	4a19      	ldr	r2, [pc, #100]	@ (8000794 <SystemInit+0x114>)
 8000730:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <SystemInit+0x104>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	@ (8000784 <SystemInit+0x104>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <SystemInit+0x104>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <SystemInit+0x118>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800074e:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <SystemInit+0x118>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000754:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <SystemInit+0x11c>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <SystemInit+0x120>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <SystemInit+0x124>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <SystemInit+0x128>)
 800076c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000770:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	52002000 	.word	0x52002000
 8000784:	58024400 	.word	0x58024400
 8000788:	eaf6ed7f 	.word	0xeaf6ed7f
 800078c:	02020200 	.word	0x02020200
 8000790:	01ff0000 	.word	0x01ff0000
 8000794:	01010280 	.word	0x01010280
 8000798:	580000c0 	.word	0x580000c0
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007b2:	4b19      	ldr	r3, [pc, #100]	@ (8000818 <MX_DMA_Init+0x6c>)
 80007b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80007b8:	4a17      	ldr	r2, [pc, #92]	@ (8000818 <MX_DMA_Init+0x6c>)
 80007ba:	f043 0301 	orr.w	r3, r3, #1
 80007be:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80007c2:	4b15      	ldr	r3, [pc, #84]	@ (8000818 <MX_DMA_Init+0x6c>)
 80007c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80007c8:	f003 0301 	and.w	r3, r3, #1
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2100      	movs	r1, #0
 80007d4:	200c      	movs	r0, #12
 80007d6:	f001 fe12 	bl	80023fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80007da:	200c      	movs	r0, #12
 80007dc:	f001 fe29 	bl	8002432 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2100      	movs	r1, #0
 80007e4:	200e      	movs	r0, #14
 80007e6:	f001 fe0a 	bl	80023fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80007ea:	200e      	movs	r0, #14
 80007ec:	f001 fe21 	bl	8002432 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2100      	movs	r1, #0
 80007f4:	200f      	movs	r0, #15
 80007f6:	f001 fe02 	bl	80023fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80007fa:	200f      	movs	r0, #15
 80007fc:	f001 fe19 	bl	8002432 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000800:	2200      	movs	r2, #0
 8000802:	2100      	movs	r1, #0
 8000804:	2010      	movs	r0, #16
 8000806:	f001 fdfa 	bl	80023fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800080a:	2010      	movs	r0, #16
 800080c:	f001 fe11 	bl	8002432 <HAL_NVIC_EnableIRQ>

}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	58024400 	.word	0x58024400

0800081c <dshot_init>:
static void dshot_enable_dma_request();


/* Functions */
void dshot_init(dshot_type_e dshot_type)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
	dshot_set_timer(dshot_type);
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	4618      	mov	r0, r3
 800082a:	f000 f833 	bl	8000894 <dshot_set_timer>
	dshot_put_tc_callback_function();
 800082e:	f000 f8d3 	bl	80009d8 <dshot_put_tc_callback_function>
	dshot_start_pwm();
 8000832:	f000 f8ef 	bl	8000a14 <dshot_start_pwm>
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <dshot_write>:

void dshot_write(uint16_t* motor_value)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b082      	sub	sp, #8
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer_all(motor_value);
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f000 f962 	bl	8000b10 <dshot_prepare_dmabuffer_all>
	dshot_dma_start();
 800084c:	f000 f98c 	bl	8000b68 <dshot_dma_start>
	dshot_enable_dma_request();
 8000850:	f000 f9c2 	bl	8000bd8 <dshot_enable_dma_request>
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <dshot_choose_type>:


/* Static functions */
static uint32_t dshot_choose_type(dshot_type_e dshot_type)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
	switch (dshot_type)
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d003      	beq.n	8000874 <dshot_choose_type+0x18>
 800086c:	2b02      	cmp	r3, #2
 800086e:	d103      	bne.n	8000878 <dshot_choose_type+0x1c>
	{
		case(DSHOT600):
				return DSHOT600_HZ;
 8000870:	4b05      	ldr	r3, [pc, #20]	@ (8000888 <dshot_choose_type+0x2c>)
 8000872:	e002      	b.n	800087a <dshot_choose_type+0x1e>

		case(DSHOT300):
				return DSHOT300_HZ;
 8000874:	4b05      	ldr	r3, [pc, #20]	@ (800088c <dshot_choose_type+0x30>)
 8000876:	e000      	b.n	800087a <dshot_choose_type+0x1e>

		default:
		case(DSHOT150):
				return DSHOT150_HZ;
 8000878:	4b05      	ldr	r3, [pc, #20]	@ (8000890 <dshot_choose_type+0x34>)
	}
}
 800087a:	4618      	mov	r0, r3
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	00b71b00 	.word	0x00b71b00
 800088c:	005b8d80 	.word	0x005b8d80
 8000890:	002dc6c0 	.word	0x002dc6c0

08000894 <dshot_set_timer>:

static void dshot_set_timer(dshot_type_e dshot_type)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	ed2d 8b02 	vpush	{d8}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
	uint16_t dshot_prescaler;
	uint32_t timer_clock = TIMER_CLOCK; // all timer clock is same as SystemCoreClock in stm32f411
 80008a2:	4b27      	ldr	r3, [pc, #156]	@ (8000940 <dshot_set_timer+0xac>)
 80008a4:	60fb      	str	r3, [r7, #12]

	// Calculate prescaler by dshot type
	dshot_prescaler = lrintf((float) timer_clock / dshot_choose_type(dshot_type) + 0.01f) - 1;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	ee07 3a90 	vmov	s15, r3
 80008ac:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff ffd2 	bl	800085c <dshot_choose_type>
 80008b8:	ee07 0a90 	vmov	s15, r0
 80008bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80008c0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80008c4:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000944 <dshot_set_timer+0xb0>
 80008c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80008cc:	eeb0 0a67 	vmov.f32	s0, s15
 80008d0:	f011 fccc 	bl	801226c <lrintf>
 80008d4:	4603      	mov	r3, r0
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	3b01      	subs	r3, #1
 80008da:	817b      	strh	r3, [r7, #10]

	// motor1
	__HAL_TIM_SET_PRESCALER(MOTOR_1_TIM, dshot_prescaler);
 80008dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000948 <dshot_set_timer+0xb4>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	897a      	ldrh	r2, [r7, #10]
 80008e2:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_1_TIM, MOTOR_BITLENGTH);
 80008e4:	4b18      	ldr	r3, [pc, #96]	@ (8000948 <dshot_set_timer+0xb4>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2214      	movs	r2, #20
 80008ea:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008ec:	4b16      	ldr	r3, [pc, #88]	@ (8000948 <dshot_set_timer+0xb4>)
 80008ee:	2214      	movs	r2, #20
 80008f0:	60da      	str	r2, [r3, #12]

	// motor2
	__HAL_TIM_SET_PRESCALER(MOTOR_2_TIM, dshot_prescaler);
 80008f2:	4b16      	ldr	r3, [pc, #88]	@ (800094c <dshot_set_timer+0xb8>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	897a      	ldrh	r2, [r7, #10]
 80008f8:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_2_TIM, MOTOR_BITLENGTH);
 80008fa:	4b14      	ldr	r3, [pc, #80]	@ (800094c <dshot_set_timer+0xb8>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2214      	movs	r2, #20
 8000900:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000902:	4b12      	ldr	r3, [pc, #72]	@ (800094c <dshot_set_timer+0xb8>)
 8000904:	2214      	movs	r2, #20
 8000906:	60da      	str	r2, [r3, #12]

	// motor3
	__HAL_TIM_SET_PRESCALER(MOTOR_3_TIM, dshot_prescaler);
 8000908:	4b10      	ldr	r3, [pc, #64]	@ (800094c <dshot_set_timer+0xb8>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	897a      	ldrh	r2, [r7, #10]
 800090e:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_3_TIM, MOTOR_BITLENGTH);
 8000910:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <dshot_set_timer+0xb8>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2214      	movs	r2, #20
 8000916:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000918:	4b0c      	ldr	r3, [pc, #48]	@ (800094c <dshot_set_timer+0xb8>)
 800091a:	2214      	movs	r2, #20
 800091c:	60da      	str	r2, [r3, #12]

	// motor4
	__HAL_TIM_SET_PRESCALER(MOTOR_4_TIM, dshot_prescaler);
 800091e:	4b0a      	ldr	r3, [pc, #40]	@ (8000948 <dshot_set_timer+0xb4>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	897a      	ldrh	r2, [r7, #10]
 8000924:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_4_TIM, MOTOR_BITLENGTH);
 8000926:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <dshot_set_timer+0xb4>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2214      	movs	r2, #20
 800092c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800092e:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <dshot_set_timer+0xb4>)
 8000930:	2214      	movs	r2, #20
 8000932:	60da      	str	r2, [r3, #12]
}
 8000934:	bf00      	nop
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	ecbd 8b02 	vpop	{d8}
 800093e:	bd80      	pop	{r7, pc}
 8000940:	05f5e100 	.word	0x05f5e100
 8000944:	3c23d70a 	.word	0x3c23d70a
 8000948:	240005e4 	.word	0x240005e4
 800094c:	24000500 	.word	0x24000500

08000950 <dshot_dma_tc_callback>:

// __HAL_TIM_DISABLE_DMA is needed to eliminate the delay between different dshot signals
// I don't know why :(
static void dshot_dma_tc_callback(DMA_HandleTypeDef *hdma)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800095c:	60fb      	str	r3, [r7, #12]

	if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	429a      	cmp	r2, r3
 8000966:	d108      	bne.n	800097a <dshot_dma_tc_callback+0x2a>
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	68da      	ldr	r2, [r3, #12]
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000976:	60da      	str	r2, [r3, #12]
	}
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
	}
}
 8000978:	e028      	b.n	80009cc <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC2])
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	429a      	cmp	r2, r3
 8000982:	d108      	bne.n	8000996 <dshot_dma_tc_callback+0x46>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	68da      	ldr	r2, [r3, #12]
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000992:	60da      	str	r2, [r3, #12]
}
 8000994:	e01a      	b.n	80009cc <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC3])
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	429a      	cmp	r2, r3
 800099e:	d108      	bne.n	80009b2 <dshot_dma_tc_callback+0x62>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	68da      	ldr	r2, [r3, #12]
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80009ae:	60da      	str	r2, [r3, #12]
}
 80009b0:	e00c      	b.n	80009cc <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d107      	bne.n	80009cc <dshot_dma_tc_callback+0x7c>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	68da      	ldr	r2, [r3, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80009ca:	60da      	str	r2, [r3, #12]
}
 80009cc:	bf00      	nop
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <dshot_put_tc_callback_function>:

static void dshot_put_tc_callback_function()
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
	// TIM_DMA_ID_CCx depends on timer channel
	MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = dshot_dma_tc_callback;
 80009dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000a08 <dshot_put_tc_callback_function+0x30>)
 80009de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e0:	4a0a      	ldr	r2, [pc, #40]	@ (8000a0c <dshot_put_tc_callback_function+0x34>)
 80009e2:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = dshot_dma_tc_callback;
 80009e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000a10 <dshot_put_tc_callback_function+0x38>)
 80009e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009e8:	4a08      	ldr	r2, [pc, #32]	@ (8000a0c <dshot_put_tc_callback_function+0x34>)
 80009ea:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dshot_dma_tc_callback;
 80009ec:	4b08      	ldr	r3, [pc, #32]	@ (8000a10 <dshot_put_tc_callback_function+0x38>)
 80009ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009f0:	4a06      	ldr	r2, [pc, #24]	@ (8000a0c <dshot_put_tc_callback_function+0x34>)
 80009f2:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = dshot_dma_tc_callback;
 80009f4:	4b04      	ldr	r3, [pc, #16]	@ (8000a08 <dshot_put_tc_callback_function+0x30>)
 80009f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009f8:	4a04      	ldr	r2, [pc, #16]	@ (8000a0c <dshot_put_tc_callback_function+0x34>)
 80009fa:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	240005e4 	.word	0x240005e4
 8000a0c:	08000951 	.word	0x08000951
 8000a10:	24000500 	.word	0x24000500

08000a14 <dshot_start_pwm>:

static void dshot_start_pwm()
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	// Start the timer channel now.
    // Enabling/disabling DMA request can restart a new cycle without PWM start/stop.
  	HAL_TIM_PWM_Start(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL);
 8000a18:	210c      	movs	r1, #12
 8000a1a:	4808      	ldr	r0, [pc, #32]	@ (8000a3c <dshot_start_pwm+0x28>)
 8000a1c:	f008 fad4 	bl	8008fc8 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL);
 8000a20:	2108      	movs	r1, #8
 8000a22:	4807      	ldr	r0, [pc, #28]	@ (8000a40 <dshot_start_pwm+0x2c>)
 8000a24:	f008 fad0 	bl	8008fc8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL);
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4805      	ldr	r0, [pc, #20]	@ (8000a40 <dshot_start_pwm+0x2c>)
 8000a2c:	f008 facc 	bl	8008fc8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL);
 8000a30:	2104      	movs	r1, #4
 8000a32:	4802      	ldr	r0, [pc, #8]	@ (8000a3c <dshot_start_pwm+0x28>)
 8000a34:	f008 fac8 	bl	8008fc8 <HAL_TIM_PWM_Start>
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	240005e4 	.word	0x240005e4
 8000a40:	24000500 	.word	0x24000500

08000a44 <dshot_prepare_packet>:

static uint16_t dshot_prepare_packet(uint16_t value)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b087      	sub	sp, #28
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	80fb      	strh	r3, [r7, #6]
	uint16_t packet;
	bool dshot_telemetry = false;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	72fb      	strb	r3, [r7, #11]

	packet = (value << 1) | (dshot_telemetry ? 1 : 0);
 8000a52:	88fb      	ldrh	r3, [r7, #6]
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	b21a      	sxth	r2, r3
 8000a58:	7afb      	ldrb	r3, [r7, #11]
 8000a5a:	b21b      	sxth	r3, r3
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	b21b      	sxth	r3, r3
 8000a60:	813b      	strh	r3, [r7, #8]

	// compute checksum
	unsigned csum = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
	unsigned csum_data = packet;
 8000a66:	893b      	ldrh	r3, [r7, #8]
 8000a68:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < 3; i++)
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	e009      	b.n	8000a84 <dshot_prepare_packet+0x40>
	{
        csum ^=  csum_data; // xor data by nibbles
 8000a70:	697a      	ldr	r2, [r7, #20]
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	4053      	eors	r3, r2
 8000a76:	617b      	str	r3, [r7, #20]
        csum_data >>= 4;
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	091b      	lsrs	r3, r3, #4
 8000a7c:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 3; i++)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	3301      	adds	r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	2b02      	cmp	r3, #2
 8000a88:	ddf2      	ble.n	8000a70 <dshot_prepare_packet+0x2c>
	}

	csum &= 0xf;
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	f003 030f 	and.w	r3, r3, #15
 8000a90:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 8000a92:	893b      	ldrh	r3, [r7, #8]
 8000a94:	011b      	lsls	r3, r3, #4
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	813b      	strh	r3, [r7, #8]

	return packet;
 8000aa0:	893b      	ldrh	r3, [r7, #8]
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	371c      	adds	r7, #28
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <dshot_prepare_dmabuffer>:

// Convert 16 bits packet to 16 pwm signal
static void dshot_prepare_dmabuffer(uint32_t* motor_dmabuffer, uint16_t value)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b084      	sub	sp, #16
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	807b      	strh	r3, [r7, #2]
	uint16_t packet;
	packet = dshot_prepare_packet(value);
 8000aba:	887b      	ldrh	r3, [r7, #2]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff ffc1 	bl	8000a44 <dshot_prepare_packet>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	81fb      	strh	r3, [r7, #14]

	for(int i = 0; i < 16; i++)
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	e011      	b.n	8000af0 <dshot_prepare_dmabuffer+0x42>
	{
		motor_dmabuffer[i] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;
 8000acc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	da01      	bge.n	8000ad8 <dshot_prepare_dmabuffer+0x2a>
 8000ad4:	220e      	movs	r2, #14
 8000ad6:	e000      	b.n	8000ada <dshot_prepare_dmabuffer+0x2c>
 8000ad8:	2207      	movs	r2, #7
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	6879      	ldr	r1, [r7, #4]
 8000ae0:	440b      	add	r3, r1
 8000ae2:	601a      	str	r2, [r3, #0]
		packet <<= 1;
 8000ae4:	89fb      	ldrh	r3, [r7, #14]
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < 16; i++)
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	3301      	adds	r3, #1
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	2b0f      	cmp	r3, #15
 8000af4:	ddea      	ble.n	8000acc <dshot_prepare_dmabuffer+0x1e>
	}

	motor_dmabuffer[16] = 0;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	3340      	adds	r3, #64	@ 0x40
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
	motor_dmabuffer[17] = 0;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	3344      	adds	r3, #68	@ 0x44
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
}
 8000b06:	bf00      	nop
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <dshot_prepare_dmabuffer_all>:

static void dshot_prepare_dmabuffer_all(uint16_t* motor_value)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer(motor1_dmabuffer, motor_value[0]);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	881b      	ldrh	r3, [r3, #0]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	480e      	ldr	r0, [pc, #56]	@ (8000b58 <dshot_prepare_dmabuffer_all+0x48>)
 8000b20:	f7ff ffc5 	bl	8000aae <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor2_dmabuffer, motor_value[1]);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3302      	adds	r3, #2
 8000b28:	881b      	ldrh	r3, [r3, #0]
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	480b      	ldr	r0, [pc, #44]	@ (8000b5c <dshot_prepare_dmabuffer_all+0x4c>)
 8000b2e:	f7ff ffbe 	bl	8000aae <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor3_dmabuffer, motor_value[2]);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	3304      	adds	r3, #4
 8000b36:	881b      	ldrh	r3, [r3, #0]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4809      	ldr	r0, [pc, #36]	@ (8000b60 <dshot_prepare_dmabuffer_all+0x50>)
 8000b3c:	f7ff ffb7 	bl	8000aae <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor4_dmabuffer, motor_value[3]);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3306      	adds	r3, #6
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	4619      	mov	r1, r3
 8000b48:	4806      	ldr	r0, [pc, #24]	@ (8000b64 <dshot_prepare_dmabuffer_all+0x54>)
 8000b4a:	f7ff ffb0 	bl	8000aae <dshot_prepare_dmabuffer>
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	24000310 	.word	0x24000310
 8000b5c:	24000358 	.word	0x24000358
 8000b60:	240003a0 	.word	0x240003a0
 8000b64:	240003e8 	.word	0x240003e8

08000b68 <dshot_dma_start>:

static void dshot_dma_start()
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
	HAL_DMA_Start_IT(MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4], (uint32_t)motor1_dmabuffer, (uint32_t)&MOTOR_1_TIM->Instance->CCR4, DSHOT_DMA_BUFFER_SIZE);
 8000b6c:	4b14      	ldr	r3, [pc, #80]	@ (8000bc0 <dshot_dma_start+0x58>)
 8000b6e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000b70:	4914      	ldr	r1, [pc, #80]	@ (8000bc4 <dshot_dma_start+0x5c>)
 8000b72:	4b13      	ldr	r3, [pc, #76]	@ (8000bc0 <dshot_dma_start+0x58>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	3340      	adds	r3, #64	@ 0x40
 8000b78:	461a      	mov	r2, r3
 8000b7a:	2312      	movs	r3, #18
 8000b7c:	f001 ffe4 	bl	8002b48 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3], (uint32_t)motor2_dmabuffer, (uint32_t)&MOTOR_2_TIM->Instance->CCR3, DSHOT_DMA_BUFFER_SIZE);
 8000b80:	4b11      	ldr	r3, [pc, #68]	@ (8000bc8 <dshot_dma_start+0x60>)
 8000b82:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8000b84:	4911      	ldr	r1, [pc, #68]	@ (8000bcc <dshot_dma_start+0x64>)
 8000b86:	4b10      	ldr	r3, [pc, #64]	@ (8000bc8 <dshot_dma_start+0x60>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	333c      	adds	r3, #60	@ 0x3c
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	2312      	movs	r3, #18
 8000b90:	f001 ffda 	bl	8002b48 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1], (uint32_t)motor3_dmabuffer, (uint32_t)&MOTOR_3_TIM->Instance->CCR1, DSHOT_DMA_BUFFER_SIZE);
 8000b94:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc8 <dshot_dma_start+0x60>)
 8000b96:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8000b98:	490d      	ldr	r1, [pc, #52]	@ (8000bd0 <dshot_dma_start+0x68>)
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc8 <dshot_dma_start+0x60>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	3334      	adds	r3, #52	@ 0x34
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	2312      	movs	r3, #18
 8000ba4:	f001 ffd0 	bl	8002b48 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2], (uint32_t)motor4_dmabuffer, (uint32_t)&MOTOR_4_TIM->Instance->CCR2, DSHOT_DMA_BUFFER_SIZE);
 8000ba8:	4b05      	ldr	r3, [pc, #20]	@ (8000bc0 <dshot_dma_start+0x58>)
 8000baa:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000bac:	4909      	ldr	r1, [pc, #36]	@ (8000bd4 <dshot_dma_start+0x6c>)
 8000bae:	4b04      	ldr	r3, [pc, #16]	@ (8000bc0 <dshot_dma_start+0x58>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	3338      	adds	r3, #56	@ 0x38
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	2312      	movs	r3, #18
 8000bb8:	f001 ffc6 	bl	8002b48 <HAL_DMA_Start_IT>
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	240005e4 	.word	0x240005e4
 8000bc4:	24000310 	.word	0x24000310
 8000bc8:	24000500 	.word	0x24000500
 8000bcc:	24000358 	.word	0x24000358
 8000bd0:	240003a0 	.word	0x240003a0
 8000bd4:	240003e8 	.word	0x240003e8

08000bd8 <dshot_enable_dma_request>:

static void dshot_enable_dma_request()
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE_DMA(MOTOR_1_TIM, TIM_DMA_CC4);
 8000bdc:	4b12      	ldr	r3, [pc, #72]	@ (8000c28 <dshot_enable_dma_request+0x50>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	68da      	ldr	r2, [r3, #12]
 8000be2:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <dshot_enable_dma_request+0x50>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000bea:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_2_TIM, TIM_DMA_CC3);
 8000bec:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <dshot_enable_dma_request+0x54>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	68da      	ldr	r2, [r3, #12]
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c2c <dshot_enable_dma_request+0x54>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000bfa:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_3_TIM, TIM_DMA_CC1);
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000c2c <dshot_enable_dma_request+0x54>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	68da      	ldr	r2, [r3, #12]
 8000c02:	4b0a      	ldr	r3, [pc, #40]	@ (8000c2c <dshot_enable_dma_request+0x54>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000c0a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_4_TIM, TIM_DMA_CC2);
 8000c0c:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <dshot_enable_dma_request+0x50>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	68da      	ldr	r2, [r3, #12]
 8000c12:	4b05      	ldr	r3, [pc, #20]	@ (8000c28 <dshot_enable_dma_request+0x50>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000c1a:	60da      	str	r2, [r3, #12]
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	240005e4 	.word	0x240005e4
 8000c2c:	24000500 	.word	0x24000500

08000c30 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	4b12      	ldr	r3, [pc, #72]	@ (8000c80 <MX_GPIO_Init+0x50>)
 8000c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c3c:	4a10      	ldr	r2, [pc, #64]	@ (8000c80 <MX_GPIO_Init+0x50>)
 8000c3e:	f043 0301 	orr.w	r3, r3, #1
 8000c42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c46:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <MX_GPIO_Init+0x50>)
 8000c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c54:	4b0a      	ldr	r3, [pc, #40]	@ (8000c80 <MX_GPIO_Init+0x50>)
 8000c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c5a:	4a09      	ldr	r2, [pc, #36]	@ (8000c80 <MX_GPIO_Init+0x50>)
 8000c5c:	f043 0308 	orr.w	r3, r3, #8
 8000c60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c64:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <MX_GPIO_Init+0x50>)
 8000c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c6a:	f003 0308 	and.w	r3, r3, #8
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	683b      	ldr	r3, [r7, #0]

}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	58024400 	.word	0x58024400

08000c84 <HAL_TIM_IC_CaptureCallback>:
		}
		xfr_ptr->sts_4to7 = 0; // M4 to M7 buffer is empty
	}
	return buffer; // return the buffer (pointer)
}
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	contador = __HAL_TIM_GET_COUNTER(&htim4);
 8000c8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ca4 <HAL_TIM_IC_CaptureCallback+0x20>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c92:	4a05      	ldr	r2, [pc, #20]	@ (8000ca8 <HAL_TIM_IC_CaptureCallback+0x24>)
 8000c94:	6013      	str	r3, [r2, #0]
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	24000598 	.word	0x24000598
 8000ca8:	24000440 	.word	0x24000440

08000cac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b092      	sub	sp, #72	@ 0x48
 8000cb0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000cb2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cb6:	647b      	str	r3, [r7, #68]	@ 0x44
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000cb8:	bf00      	nop
 8000cba:	4b71      	ldr	r3, [pc, #452]	@ (8000e80 <main+0x1d4>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d004      	beq.n	8000cd0 <main+0x24>
 8000cc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000cc8:	1e5a      	subs	r2, r3, #1
 8000cca:	647a      	str	r2, [r7, #68]	@ 0x44
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	dcf4      	bgt.n	8000cba <main+0xe>
  if ( timeout < 0 )
 8000cd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	da01      	bge.n	8000cda <main+0x2e>
  {
  Error_Handler();
 8000cd6:	f000 f969 	bl	8000fac <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cda:	f001 f9f3 	bl	80020c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cde:	f000 f8e5 	bl	8000eac <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000ce2:	4b67      	ldr	r3, [pc, #412]	@ (8000e80 <main+0x1d4>)
 8000ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce8:	4a65      	ldr	r2, [pc, #404]	@ (8000e80 <main+0x1d4>)
 8000cea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cf2:	4b63      	ldr	r3, [pc, #396]	@ (8000e80 <main+0x1d4>)
 8000cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000d00:	2000      	movs	r0, #0
 8000d02:	f003 fef1 	bl	8004ae8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000d06:	2100      	movs	r1, #0
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f003 ff07 	bl	8004b1c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000d0e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d12:	647b      	str	r3, [r7, #68]	@ 0x44
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000d14:	bf00      	nop
 8000d16:	4b5a      	ldr	r3, [pc, #360]	@ (8000e80 <main+0x1d4>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d104      	bne.n	8000d2c <main+0x80>
 8000d22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000d24:	1e5a      	subs	r2, r3, #1
 8000d26:	647a      	str	r2, [r7, #68]	@ 0x44
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	dcf4      	bgt.n	8000d16 <main+0x6a>
if ( timeout < 0 )
 8000d2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	da01      	bge.n	8000d36 <main+0x8a>
{
Error_Handler();
 8000d32:	f000 f93b 	bl	8000fac <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d36:	f7ff ff7b 	bl	8000c30 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d3a:	f7ff fd37 	bl	80007ac <MX_DMA_Init>
  MX_TIM2_Init();
 8000d3e:	f000 fc6f 	bl	8001620 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000d42:	f000 fd75 	bl	8001830 <MX_TIM5_Init>
  MX_TIM3_Init();
 8000d46:	f000 fccf 	bl	80016e8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d4a:	f000 fd1b 	bl	8001784 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8000d4e:	f00d ff85 	bl	800ec5c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  int count = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	643b      	str	r3, [r7, #64]	@ 0x40
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000d56:	213c      	movs	r1, #60	@ 0x3c
 8000d58:	484a      	ldr	r0, [pc, #296]	@ (8000e84 <main+0x1d8>)
 8000d5a:	f008 fae9 	bl	8009330 <HAL_TIM_Encoder_Start_IT>
	uint8_t * xfr_data; // pointer to transfer data


	//initialize inter-core status pointers
	xfr_ptr->sts_4to7 = 0;
 8000d5e:	4b4a      	ldr	r3, [pc, #296]	@ (8000e88 <main+0x1dc>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	701a      	strb	r2, [r3, #0]
	xfr_ptr->sts_7to4 = 0;
 8000d64:	4b48      	ldr	r3, [pc, #288]	@ (8000e88 <main+0x1dc>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	705a      	strb	r2, [r3, #1]
	extern uint16_t D[4];

	dshot_init(DSHOT300);
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	f7ff fd56 	bl	800081c <dshot_init>
	  if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8000d70:	4846      	ldr	r0, [pc, #280]	@ (8000e8c <main+0x1e0>)
 8000d72:	f008 f859 	bl	8008e28 <HAL_TIM_Base_Start_IT>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <main+0xd4>
	    {
	      /* Starting Error */
	      Error_Handler();
 8000d7c:	f000 f916 	bl	8000fac <Error_Handler>
	    }
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000d80:	2000      	movs	r0, #0
 8000d82:	f000 ffbb 	bl	8001cfc <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000d86:	2001      	movs	r0, #1
 8000d88:	f000 ffb8 	bl	8001cfc <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000d8c:	2002      	movs	r0, #2
 8000d8e:	f000 ffb5 	bl	8001cfc <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000d92:	2101      	movs	r1, #1
 8000d94:	2000      	movs	r0, #0
 8000d96:	f001 f827 	bl	8001de8 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000d9a:	4b3d      	ldr	r3, [pc, #244]	@ (8000e90 <main+0x1e4>)
 8000d9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000da0:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000da2:	4b3b      	ldr	r3, [pc, #236]	@ (8000e90 <main+0x1e4>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000da8:	4b39      	ldr	r3, [pc, #228]	@ (8000e90 <main+0x1e4>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000dae:	4b38      	ldr	r3, [pc, #224]	@ (8000e90 <main+0x1e4>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000db4:	4b36      	ldr	r3, [pc, #216]	@ (8000e90 <main+0x1e4>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000dba:	4935      	ldr	r1, [pc, #212]	@ (8000e90 <main+0x1e4>)
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	f001 f8a3 	bl	8001f08 <BSP_COM_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <main+0x120>
  {
    Error_Handler();
 8000dc8:	f000 f8f0 	bl	8000fac <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char message[40]={'\0'};
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61bb      	str	r3, [r7, #24]
 8000dd0:	f107 031c 	add.w	r3, r7, #28
 8000dd4:	2224      	movs	r2, #36	@ 0x24
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f00f f9ea 	bl	80101b2 <memset>
  uint16_t zero[4] = {0,0,0,0};
 8000dde:	f107 0310 	add.w	r3, r7, #16
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
  uint16_t bi[4] = {2045,0,0,0};
 8000de8:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 8000dec:	813b      	strh	r3, [r7, #8]
 8000dee:	2300      	movs	r3, #0
 8000df0:	817b      	strh	r3, [r7, #10]
 8000df2:	2300      	movs	r3, #0
 8000df4:	81bb      	strh	r3, [r7, #12]
 8000df6:	2300      	movs	r3, #0
 8000df8:	81fb      	strh	r3, [r7, #14]
	  	  for(int n=0;n<4;n++){
	  		  motores[n] = (Mensagem[n]*2048)/255;

	  	  }
	  	  */
	  	  motores[0]=0;
 8000dfa:	4b26      	ldr	r3, [pc, #152]	@ (8000e94 <main+0x1e8>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	801a      	strh	r2, [r3, #0]
	  	  if(count<5000){
 8000e00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e02:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000e06:	4293      	cmp	r3, r2
 8000e08:	dc09      	bgt.n	8000e1e <main+0x172>
	  		  ref[0] = 0;
 8000e0a:	4b23      	ldr	r3, [pc, #140]	@ (8000e98 <main+0x1ec>)
 8000e0c:	f04f 0200 	mov.w	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
	  		dshot_write(zero);
 8000e12:	f107 0310 	add.w	r3, r7, #16
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fd11 	bl	800083e <dshot_write>
 8000e1c:	e016      	b.n	8000e4c <main+0x1a0>
	  	  } else if(count>=5000){
 8000e1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e20:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000e24:	4293      	cmp	r3, r2
 8000e26:	dd06      	ble.n	8000e36 <main+0x18a>
	  		  ref[0] = -6;
 8000e28:	4b1b      	ldr	r3, [pc, #108]	@ (8000e98 <main+0x1ec>)
 8000e2a:	4a1c      	ldr	r2, [pc, #112]	@ (8000e9c <main+0x1f0>)
 8000e2c:	601a      	str	r2, [r3, #0]
	  		  dshot_write(D);
 8000e2e:	481c      	ldr	r0, [pc, #112]	@ (8000ea0 <main+0x1f4>)
 8000e30:	f7ff fd05 	bl	800083e <dshot_write>
 8000e34:	e00a      	b.n	8000e4c <main+0x1a0>

	  	  } else if(count >= 15000){
 8000e36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e38:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	dd05      	ble.n	8000e4c <main+0x1a0>
	  		  ref[0] = -6;
 8000e40:	4b15      	ldr	r3, [pc, #84]	@ (8000e98 <main+0x1ec>)
 8000e42:	4a16      	ldr	r2, [pc, #88]	@ (8000e9c <main+0x1f0>)
 8000e44:	601a      	str	r2, [r3, #0]
	  		  dshot_write(D);
 8000e46:	4816      	ldr	r0, [pc, #88]	@ (8000ea0 <main+0x1f4>)
 8000e48:	f7ff fcf9 	bl	800083e <dshot_write>
	  	  }

	  	  count++;
 8000e4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e4e:	3301      	adds	r3, #1
 8000e50:	643b      	str	r3, [r7, #64]	@ 0x40

	  	  sprintf(message, "%f \n \r", velocidade);
 8000e52:	4b14      	ldr	r3, [pc, #80]	@ (8000ea4 <main+0x1f8>)
 8000e54:	edd3 7a00 	vldr	s15, [r3]
 8000e58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e5c:	f107 0018 	add.w	r0, r7, #24
 8000e60:	ec53 2b17 	vmov	r2, r3, d7
 8000e64:	4910      	ldr	r1, [pc, #64]	@ (8000ea8 <main+0x1fc>)
 8000e66:	f00f f941 	bl	80100ec <siprintf>
	  	  CDC_Transmit_FS(message,sizeof(message));
 8000e6a:	f107 0318 	add.w	r3, r7, #24
 8000e6e:	2128      	movs	r1, #40	@ 0x28
 8000e70:	4618      	mov	r0, r3
 8000e72:	f00d ffb3 	bl	800eddc <CDC_Transmit_FS>
	  	  HAL_Delay(1);
 8000e76:	2001      	movs	r0, #1
 8000e78:	f001 f9b6 	bl	80021e8 <HAL_Delay>
  {
 8000e7c:	e7bd      	b.n	8000dfa <main+0x14e>
 8000e7e:	bf00      	nop
 8000e80:	58024400 	.word	0x58024400
 8000e84:	24000598 	.word	0x24000598
 8000e88:	38001000 	.word	0x38001000
 8000e8c:	2400054c 	.word	0x2400054c
 8000e90:	24000430 	.word	0x24000430
 8000e94:	24000458 	.word	0x24000458
 8000e98:	24000448 	.word	0x24000448
 8000e9c:	c0c00000 	.word	0xc0c00000
 8000ea0:	240004c4 	.word	0x240004c4
 8000ea4:	24000444 	.word	0x24000444
 8000ea8:	08012308 	.word	0x08012308

08000eac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b09c      	sub	sp, #112	@ 0x70
 8000eb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eb6:	224c      	movs	r2, #76	@ 0x4c
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f00f f979 	bl	80101b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	2220      	movs	r2, #32
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f00f f973 	bl	80101b2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000ecc:	2004      	movs	r0, #4
 8000ece:	f005 f8d7 	bl	8006080 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	603b      	str	r3, [r7, #0]
 8000ed6:	4b33      	ldr	r3, [pc, #204]	@ (8000fa4 <SystemClock_Config+0xf8>)
 8000ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eda:	4a32      	ldr	r2, [pc, #200]	@ (8000fa4 <SystemClock_Config+0xf8>)
 8000edc:	f023 0301 	bic.w	r3, r3, #1
 8000ee0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000ee2:	4b30      	ldr	r3, [pc, #192]	@ (8000fa4 <SystemClock_Config+0xf8>)
 8000ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	603b      	str	r3, [r7, #0]
 8000eec:	4b2e      	ldr	r3, [pc, #184]	@ (8000fa8 <SystemClock_Config+0xfc>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ef4:	4a2c      	ldr	r2, [pc, #176]	@ (8000fa8 <SystemClock_Config+0xfc>)
 8000ef6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000efa:	6193      	str	r3, [r2, #24]
 8000efc:	4b2a      	ldr	r3, [pc, #168]	@ (8000fa8 <SystemClock_Config+0xfc>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f04:	603b      	str	r3, [r7, #0]
 8000f06:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f08:	bf00      	nop
 8000f0a:	4b27      	ldr	r3, [pc, #156]	@ (8000fa8 <SystemClock_Config+0xfc>)
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f16:	d1f8      	bne.n	8000f0a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000f18:	2322      	movs	r3, #34	@ 0x22
 8000f1a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f20:	2340      	movs	r3, #64	@ 0x40
 8000f22:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000f24:	2301      	movs	r3, #1
 8000f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f30:	2304      	movs	r3, #4
 8000f32:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8000f34:	2319      	movs	r3, #25
 8000f36:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000f3c:	2305      	movs	r3, #5
 8000f3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f40:	2302      	movs	r3, #2
 8000f42:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f44:	230c      	movs	r3, #12
 8000f46:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f54:	4618      	mov	r0, r3
 8000f56:	f005 f8fd 	bl	8006154 <HAL_RCC_OscConfig>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000f60:	f000 f824 	bl	8000fac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f64:	233f      	movs	r3, #63	@ 0x3f
 8000f66:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f70:	2300      	movs	r3, #0
 8000f72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f74:	2340      	movs	r3, #64	@ 0x40
 8000f76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f78:	2340      	movs	r3, #64	@ 0x40
 8000f7a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f80:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f82:	2340      	movs	r3, #64	@ 0x40
 8000f84:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	2104      	movs	r1, #4
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f005 fd3c 	bl	8006a08 <HAL_RCC_ClockConfig>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000f96:	f000 f809 	bl	8000fac <Error_Handler>
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	3770      	adds	r7, #112	@ 0x70
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	58000400 	.word	0x58000400
 8000fa8:	58024800 	.word	0x58024800

08000fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb0:	b672      	cpsid	i
}
 8000fb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <Error_Handler+0x8>

08000fb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe8 <HAL_MspInit+0x30>)
 8000fc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fc4:	4a08      	ldr	r2, [pc, #32]	@ (8000fe8 <HAL_MspInit+0x30>)
 8000fc6:	f043 0302 	orr.w	r3, r3, #2
 8000fca:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000fce:	4b06      	ldr	r3, [pc, #24]	@ (8000fe8 <HAL_MspInit+0x30>)
 8000fd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	58024400 	.word	0x58024400

08000fec <map>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//Função de mapeamento
uint16_t map(float x, int in_min, int in_max, int out_min, int out_max) {
 8000fec:	b480      	push	{r7}
 8000fee:	b087      	sub	sp, #28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	ed87 0a05 	vstr	s0, [r7, #20]
 8000ff6:	6138      	str	r0, [r7, #16]
 8000ff8:	60f9      	str	r1, [r7, #12]
 8000ffa:	60ba      	str	r2, [r7, #8]
 8000ffc:	607b      	str	r3, [r7, #4]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	ee07 3a90 	vmov	s15, r3
 8001004:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001008:	ed97 7a05 	vldr	s14, [r7, #20]
 800100c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	ee07 3a90 	vmov	s15, r3
 800101a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800101e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	ee07 3a90 	vmov	s15, r3
 800102c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001030:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	ee07 3a90 	vmov	s15, r3
 800103a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800103e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001042:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001046:	ee17 3a90 	vmov	r3, s15
 800104a:	b29b      	uxth	r3, r3
}
 800104c:	4618      	mov	r0, r3
 800104e:	371c      	adds	r7, #28
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <Controle>:

void Controle(){
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0

	for(uint8_t n=0;n<4;n++){
 800105e:	2300      	movs	r3, #0
 8001060:	71fb      	strb	r3, [r7, #7]
 8001062:	e0d8      	b.n	8001216 <Controle+0x1be>
		//Calculo de erro
		error[n] =ref[n] -  speed[n];
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	4a9b      	ldr	r2, [pc, #620]	@ (80012d4 <Controle+0x27c>)
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	4413      	add	r3, r2
 800106c:	ed93 7a00 	vldr	s14, [r3]
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	4a99      	ldr	r2, [pc, #612]	@ (80012d8 <Controle+0x280>)
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	edd3 7a00 	vldr	s15, [r3]
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001082:	4a96      	ldr	r2, [pc, #600]	@ (80012dc <Controle+0x284>)
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	4413      	add	r3, r2
 8001088:	edc3 7a00 	vstr	s15, [r3]
		//Variação da ação de controle para esta iteração
		deltaU[n] = Kc*(error[n]- preverror[n]) + error[n]*Ki -Kd*(speed[n]-2*prevspeed[n] + prevspeed2[n]);
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	4a93      	ldr	r2, [pc, #588]	@ (80012dc <Controle+0x284>)
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4413      	add	r3, r2
 8001094:	ed93 7a00 	vldr	s14, [r3]
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	4a91      	ldr	r2, [pc, #580]	@ (80012e0 <Controle+0x288>)
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4413      	add	r3, r2
 80010a0:	edd3 7a00 	vldr	s15, [r3]
 80010a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010a8:	4b8e      	ldr	r3, [pc, #568]	@ (80012e4 <Controle+0x28c>)
 80010aa:	edd3 7a00 	vldr	s15, [r3]
 80010ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	4a89      	ldr	r2, [pc, #548]	@ (80012dc <Controle+0x284>)
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4413      	add	r3, r2
 80010ba:	edd3 6a00 	vldr	s13, [r3]
 80010be:	4b8a      	ldr	r3, [pc, #552]	@ (80012e8 <Controle+0x290>)
 80010c0:	edd3 7a00 	vldr	s15, [r3]
 80010c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	4a82      	ldr	r2, [pc, #520]	@ (80012d8 <Controle+0x280>)
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	edd3 6a00 	vldr	s13, [r3]
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	4a84      	ldr	r2, [pc, #528]	@ (80012ec <Controle+0x294>)
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	edd3 7a00 	vldr	s15, [r3]
 80010e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010e8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	4a80      	ldr	r2, [pc, #512]	@ (80012f0 <Controle+0x298>)
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4413      	add	r3, r2
 80010f4:	edd3 7a00 	vldr	s15, [r3]
 80010f8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80010fc:	4b7d      	ldr	r3, [pc, #500]	@ (80012f4 <Controle+0x29c>)
 80010fe:	edd3 7a00 	vldr	s15, [r3]
 8001102:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	ee77 7a67 	vsub.f32	s15, s14, s15
 800110c:	4a7a      	ldr	r2, [pc, #488]	@ (80012f8 <Controle+0x2a0>)
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	4413      	add	r3, r2
 8001112:	edc3 7a00 	vstr	s15, [r3]
		//Ação de controle
		uM[n] = uM[n] + deltaU[n];
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	4a78      	ldr	r2, [pc, #480]	@ (80012fc <Controle+0x2a4>)
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	4413      	add	r3, r2
 800111e:	ed93 7a00 	vldr	s14, [r3]
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	4a74      	ldr	r2, [pc, #464]	@ (80012f8 <Controle+0x2a0>)
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4413      	add	r3, r2
 800112a:	edd3 7a00 	vldr	s15, [r3]
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001134:	4a71      	ldr	r2, [pc, #452]	@ (80012fc <Controle+0x2a4>)
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4413      	add	r3, r2
 800113a:	edc3 7a00 	vstr	s15, [r3]
		//Saturado para evitar que a ação de controle ultrapasse o limite
		if( uM[n] < -1023){
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	4a6e      	ldr	r2, [pc, #440]	@ (80012fc <Controle+0x2a4>)
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	edd3 7a00 	vldr	s15, [r3]
 800114a:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8001300 <Controle+0x2a8>
 800114e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001156:	d505      	bpl.n	8001164 <Controle+0x10c>
			uM[n]= -1023;
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	4a68      	ldr	r2, [pc, #416]	@ (80012fc <Controle+0x2a4>)
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	4413      	add	r3, r2
 8001160:	4a68      	ldr	r2, [pc, #416]	@ (8001304 <Controle+0x2ac>)
 8001162:	601a      	str	r2, [r3, #0]
		}
		if(uM[n]>1023){
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	4a65      	ldr	r2, [pc, #404]	@ (80012fc <Controle+0x2a4>)
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	edd3 7a00 	vldr	s15, [r3]
 8001170:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8001308 <Controle+0x2b0>
 8001174:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800117c:	dd05      	ble.n	800118a <Controle+0x132>
			uM[n]= 1023;
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	4a5e      	ldr	r2, [pc, #376]	@ (80012fc <Controle+0x2a4>)
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4413      	add	r3, r2
 8001186:	4a61      	ldr	r2, [pc, #388]	@ (800130c <Controle+0x2b4>)
 8001188:	601a      	str	r2, [r3, #0]
		}
		//Mapeamento da variavel de ação de controle no alcançe dado
		if(uM[n]>=0){
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	4a5b      	ldr	r2, [pc, #364]	@ (80012fc <Controle+0x2a4>)
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	4413      	add	r3, r2
 8001192:	edd3 7a00 	vldr	s15, [r3]
 8001196:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800119a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800119e:	db16      	blt.n	80011ce <Controle+0x176>
			D[n] = map(uM[n],0,1023,200,1023);
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	4a56      	ldr	r2, [pc, #344]	@ (80012fc <Controle+0x2a4>)
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4413      	add	r3, r2
 80011a8:	edd3 7a00 	vldr	s15, [r3]
 80011ac:	79fc      	ldrb	r4, [r7, #7]
 80011ae:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80011b2:	22c8      	movs	r2, #200	@ 0xc8
 80011b4:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80011b8:	2000      	movs	r0, #0
 80011ba:	eeb0 0a67 	vmov.f32	s0, s15
 80011be:	f7ff ff15 	bl	8000fec <map>
 80011c2:	4603      	mov	r3, r0
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b52      	ldr	r3, [pc, #328]	@ (8001310 <Controle+0x2b8>)
 80011c8:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 80011cc:	e020      	b.n	8001210 <Controle+0x1b8>
		}else if(uM[n]<0){
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	4a4a      	ldr	r2, [pc, #296]	@ (80012fc <Controle+0x2a4>)
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4413      	add	r3, r2
 80011d6:	edd3 7a00 	vldr	s15, [r3]
 80011da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e2:	d515      	bpl.n	8001210 <Controle+0x1b8>
			D[n]= map(uM[n],-1023,0,2047,1224);
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	4a45      	ldr	r2, [pc, #276]	@ (80012fc <Controle+0x2a4>)
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	4413      	add	r3, r2
 80011ec:	edd3 7a00 	vldr	s15, [r3]
 80011f0:	79fc      	ldrb	r4, [r7, #7]
 80011f2:	f44f 6399 	mov.w	r3, #1224	@ 0x4c8
 80011f6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80011fa:	2100      	movs	r1, #0
 80011fc:	4845      	ldr	r0, [pc, #276]	@ (8001314 <Controle+0x2bc>)
 80011fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001202:	f7ff fef3 	bl	8000fec <map>
 8001206:	4603      	mov	r3, r0
 8001208:	461a      	mov	r2, r3
 800120a:	4b41      	ldr	r3, [pc, #260]	@ (8001310 <Controle+0x2b8>)
 800120c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	for(uint8_t n=0;n<4;n++){
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	3301      	adds	r3, #1
 8001214:	71fb      	strb	r3, [r7, #7]
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	2b03      	cmp	r3, #3
 800121a:	f67f af23 	bls.w	8001064 <Controle+0xc>
		}
	}

	//Logica para salvar o erro e a velocidade anterior
	cont = cont +1;
 800121e:	4b3e      	ldr	r3, [pc, #248]	@ (8001318 <Controle+0x2c0>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	3301      	adds	r3, #1
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4b3c      	ldr	r3, [pc, #240]	@ (8001318 <Controle+0x2c0>)
 8001228:	701a      	strb	r2, [r3, #0]
	if(cont == 1){
 800122a:	4b3b      	ldr	r3, [pc, #236]	@ (8001318 <Controle+0x2c0>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d11d      	bne.n	800126e <Controle+0x216>
		for(uint8_t n=0;n<4;n++){
 8001232:	2300      	movs	r3, #0
 8001234:	71bb      	strb	r3, [r7, #6]
 8001236:	e016      	b.n	8001266 <Controle+0x20e>
			prevspeed[n] = speed[n];
 8001238:	79ba      	ldrb	r2, [r7, #6]
 800123a:	79bb      	ldrb	r3, [r7, #6]
 800123c:	4926      	ldr	r1, [pc, #152]	@ (80012d8 <Controle+0x280>)
 800123e:	0092      	lsls	r2, r2, #2
 8001240:	440a      	add	r2, r1
 8001242:	6812      	ldr	r2, [r2, #0]
 8001244:	4929      	ldr	r1, [pc, #164]	@ (80012ec <Controle+0x294>)
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	440b      	add	r3, r1
 800124a:	601a      	str	r2, [r3, #0]
			preverror[n] = error[n];
 800124c:	79ba      	ldrb	r2, [r7, #6]
 800124e:	79bb      	ldrb	r3, [r7, #6]
 8001250:	4922      	ldr	r1, [pc, #136]	@ (80012dc <Controle+0x284>)
 8001252:	0092      	lsls	r2, r2, #2
 8001254:	440a      	add	r2, r1
 8001256:	6812      	ldr	r2, [r2, #0]
 8001258:	4921      	ldr	r1, [pc, #132]	@ (80012e0 <Controle+0x288>)
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	440b      	add	r3, r1
 800125e:	601a      	str	r2, [r3, #0]
		for(uint8_t n=0;n<4;n++){
 8001260:	79bb      	ldrb	r3, [r7, #6]
 8001262:	3301      	adds	r3, #1
 8001264:	71bb      	strb	r3, [r7, #6]
 8001266:	79bb      	ldrb	r3, [r7, #6]
 8001268:	2b03      	cmp	r3, #3
 800126a:	d9e5      	bls.n	8001238 <Controle+0x1e0>
			prevspeed[n] = speed[n];
			preverror[n] = error[n];
		}
		cont = 1;
	}
}
 800126c:	e02d      	b.n	80012ca <Controle+0x272>
	} else if(cont ==2){
 800126e:	4b2a      	ldr	r3, [pc, #168]	@ (8001318 <Controle+0x2c0>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b02      	cmp	r3, #2
 8001274:	d129      	bne.n	80012ca <Controle+0x272>
		for(uint8_t n=0;n<4;n++){
 8001276:	2300      	movs	r3, #0
 8001278:	717b      	strb	r3, [r7, #5]
 800127a:	e020      	b.n	80012be <Controle+0x266>
			prevspeed2[n] = prevspeed[n];
 800127c:	797a      	ldrb	r2, [r7, #5]
 800127e:	797b      	ldrb	r3, [r7, #5]
 8001280:	491a      	ldr	r1, [pc, #104]	@ (80012ec <Controle+0x294>)
 8001282:	0092      	lsls	r2, r2, #2
 8001284:	440a      	add	r2, r1
 8001286:	6812      	ldr	r2, [r2, #0]
 8001288:	4919      	ldr	r1, [pc, #100]	@ (80012f0 <Controle+0x298>)
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	440b      	add	r3, r1
 800128e:	601a      	str	r2, [r3, #0]
			prevspeed[n] = speed[n];
 8001290:	797a      	ldrb	r2, [r7, #5]
 8001292:	797b      	ldrb	r3, [r7, #5]
 8001294:	4910      	ldr	r1, [pc, #64]	@ (80012d8 <Controle+0x280>)
 8001296:	0092      	lsls	r2, r2, #2
 8001298:	440a      	add	r2, r1
 800129a:	6812      	ldr	r2, [r2, #0]
 800129c:	4913      	ldr	r1, [pc, #76]	@ (80012ec <Controle+0x294>)
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	440b      	add	r3, r1
 80012a2:	601a      	str	r2, [r3, #0]
			preverror[n] = error[n];
 80012a4:	797a      	ldrb	r2, [r7, #5]
 80012a6:	797b      	ldrb	r3, [r7, #5]
 80012a8:	490c      	ldr	r1, [pc, #48]	@ (80012dc <Controle+0x284>)
 80012aa:	0092      	lsls	r2, r2, #2
 80012ac:	440a      	add	r2, r1
 80012ae:	6812      	ldr	r2, [r2, #0]
 80012b0:	490b      	ldr	r1, [pc, #44]	@ (80012e0 <Controle+0x288>)
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	440b      	add	r3, r1
 80012b6:	601a      	str	r2, [r3, #0]
		for(uint8_t n=0;n<4;n++){
 80012b8:	797b      	ldrb	r3, [r7, #5]
 80012ba:	3301      	adds	r3, #1
 80012bc:	717b      	strb	r3, [r7, #5]
 80012be:	797b      	ldrb	r3, [r7, #5]
 80012c0:	2b03      	cmp	r3, #3
 80012c2:	d9db      	bls.n	800127c <Controle+0x224>
		cont = 1;
 80012c4:	4b14      	ldr	r3, [pc, #80]	@ (8001318 <Controle+0x2c0>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd90      	pop	{r4, r7, pc}
 80012d2:	bf00      	nop
 80012d4:	24000448 	.word	0x24000448
 80012d8:	240004ec 	.word	0x240004ec
 80012dc:	24000460 	.word	0x24000460
 80012e0:	240004b0 	.word	0x240004b0
 80012e4:	24000008 	.word	0x24000008
 80012e8:	2400000c 	.word	0x2400000c
 80012ec:	24000490 	.word	0x24000490
 80012f0:	240004a0 	.word	0x240004a0
 80012f4:	24000010 	.word	0x24000010
 80012f8:	24000470 	.word	0x24000470
 80012fc:	24000480 	.word	0x24000480
 8001300:	c47fc000 	.word	0xc47fc000
 8001304:	c47fc000 	.word	0xc47fc000
 8001308:	447fc000 	.word	0x447fc000
 800130c:	447fc000 	.word	0x447fc000
 8001310:	240004c4 	.word	0x240004c4
 8001314:	fffffc01 	.word	0xfffffc01
 8001318:	240004c0 	.word	0x240004c0

0800131c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001320:	bf00      	nop
 8001322:	e7fd      	b.n	8001320 <NMI_Handler+0x4>

08001324 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <HardFault_Handler+0x4>

0800132c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001330:	bf00      	nop
 8001332:	e7fd      	b.n	8001330 <MemManage_Handler+0x4>

08001334 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <BusFault_Handler+0x4>

0800133c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <UsageFault_Handler+0x4>

08001344 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001372:	f000 ff19 	bl	80021a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8001380:	4802      	ldr	r0, [pc, #8]	@ (800138c <DMA1_Stream1_IRQHandler+0x10>)
 8001382:	f001 fe4b 	bl	800301c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	240006a8 	.word	0x240006a8

08001390 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8001394:	4802      	ldr	r0, [pc, #8]	@ (80013a0 <DMA1_Stream3_IRQHandler+0x10>)
 8001396:	f001 fe41 	bl	800301c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	24000798 	.word	0x24000798

080013a4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 80013a8:	4802      	ldr	r0, [pc, #8]	@ (80013b4 <DMA1_Stream4_IRQHandler+0x10>)
 80013aa:	f001 fe37 	bl	800301c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	24000720 	.word	0x24000720

080013b8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80013bc:	4802      	ldr	r0, [pc, #8]	@ (80013c8 <DMA1_Stream5_IRQHandler+0x10>)
 80013be:	f001 fe2d 	bl	800301c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	24000630 	.word	0x24000630
 80013cc:	00000000 	.word	0x00000000

080013d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80013d4:	481e      	ldr	r0, [pc, #120]	@ (8001450 <TIM3_IRQHandler+0x80>)
 80013d6:	f008 f859 	bl	800948c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  Enc[0] = TIM4->CNT;
 80013da:	4b1e      	ldr	r3, [pc, #120]	@ (8001454 <TIM3_IRQHandler+0x84>)
 80013dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013de:	4a1e      	ldr	r2, [pc, #120]	@ (8001458 <TIM3_IRQHandler+0x88>)
 80013e0:	6013      	str	r3, [r2, #0]
  TIM4->CNT = 0;
 80013e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001454 <TIM3_IRQHandler+0x84>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	625a      	str	r2, [r3, #36]	@ 0x24
  vel[0] = Enc[0];
 80013e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001458 <TIM3_IRQHandler+0x88>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b1b      	ldr	r3, [pc, #108]	@ (800145c <TIM3_IRQHandler+0x8c>)
 80013f0:	601a      	str	r2, [r3, #0]
  if(vel[0]>60000){
 80013f2:	4b1a      	ldr	r3, [pc, #104]	@ (800145c <TIM3_IRQHandler+0x8c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80013fa:	4293      	cmp	r3, r2
 80013fc:	dd05      	ble.n	800140a <TIM3_IRQHandler+0x3a>
		  vel[0] = vel[0] - 65356;
 80013fe:	4b17      	ldr	r3, [pc, #92]	@ (800145c <TIM3_IRQHandler+0x8c>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	4b17      	ldr	r3, [pc, #92]	@ (8001460 <TIM3_IRQHandler+0x90>)
 8001404:	4413      	add	r3, r2
 8001406:	4a15      	ldr	r2, [pc, #84]	@ (800145c <TIM3_IRQHandler+0x8c>)
 8001408:	6013      	str	r3, [r2, #0]
  }
  speed[0] = vel[0]/(81.92);
 800140a:	4b14      	ldr	r3, [pc, #80]	@ (800145c <TIM3_IRQHandler+0x8c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	ee07 3a90 	vmov	s15, r3
 8001412:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001416:	ed9f 5b0c 	vldr	d5, [pc, #48]	@ 8001448 <TIM3_IRQHandler+0x78>
 800141a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800141e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001422:	4b10      	ldr	r3, [pc, #64]	@ (8001464 <TIM3_IRQHandler+0x94>)
 8001424:	edc3 7a00 	vstr	s15, [r3]
  velocidade = speed[0];
 8001428:	4b0e      	ldr	r3, [pc, #56]	@ (8001464 <TIM3_IRQHandler+0x94>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a0e      	ldr	r2, [pc, #56]	@ (8001468 <TIM3_IRQHandler+0x98>)
 800142e:	6013      	str	r3, [r2, #0]
  Controle();
 8001430:	f7ff fe12 	bl	8001058 <Controle>

  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8001434:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001438:	480c      	ldr	r0, [pc, #48]	@ (800146c <TIM3_IRQHandler+0x9c>)
 800143a:	f003 fb3a 	bl	8004ab2 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM3_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	f3af 8000 	nop.w
 8001448:	47ae147b 	.word	0x47ae147b
 800144c:	40547ae1 	.word	0x40547ae1
 8001450:	2400054c 	.word	0x2400054c
 8001454:	40000800 	.word	0x40000800
 8001458:	240004cc 	.word	0x240004cc
 800145c:	240004dc 	.word	0x240004dc
 8001460:	ffff00b4 	.word	0xffff00b4
 8001464:	240004ec 	.word	0x240004ec
 8001468:	24000444 	.word	0x24000444
 800146c:	58020400 	.word	0x58020400

08001470 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001474:	2000      	movs	r0, #0
 8001476:	f000 fd29 	bl	8001ecc <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
	...

08001480 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001484:	4802      	ldr	r0, [pc, #8]	@ (8001490 <OTG_FS_IRQHandler+0x10>)
 8001486:	f003 fc9e 	bl	8004dc6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	24001d94 	.word	0x24001d94

08001494 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return 1;
 8001498:	2301      	movs	r3, #1
}
 800149a:	4618      	mov	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <_kill>:

int _kill(int pid, int sig)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014ae:	f00e fed3 	bl	8010258 <__errno>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2216      	movs	r2, #22
 80014b6:	601a      	str	r2, [r3, #0]
  return -1;
 80014b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <_exit>:

void _exit (int status)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014cc:	f04f 31ff 	mov.w	r1, #4294967295
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff ffe7 	bl	80014a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014d6:	bf00      	nop
 80014d8:	e7fd      	b.n	80014d6 <_exit+0x12>

080014da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b086      	sub	sp, #24
 80014de:	af00      	add	r7, sp, #0
 80014e0:	60f8      	str	r0, [r7, #12]
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	e00a      	b.n	8001502 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014ec:	f3af 8000 	nop.w
 80014f0:	4601      	mov	r1, r0
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	1c5a      	adds	r2, r3, #1
 80014f6:	60ba      	str	r2, [r7, #8]
 80014f8:	b2ca      	uxtb	r2, r1
 80014fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	3301      	adds	r3, #1
 8001500:	617b      	str	r3, [r7, #20]
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	429a      	cmp	r2, r3
 8001508:	dbf0      	blt.n	80014ec <_read+0x12>
  }

  return len;
 800150a:	687b      	ldr	r3, [r7, #4]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	e009      	b.n	800153a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	1c5a      	adds	r2, r3, #1
 800152a:	60ba      	str	r2, [r7, #8]
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f000 fd4c 	bl	8001fcc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	3301      	adds	r3, #1
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	429a      	cmp	r2, r3
 8001540:	dbf1      	blt.n	8001526 <_write+0x12>
  }
  return len;
 8001542:	687b      	ldr	r3, [r7, #4]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <_close>:

int _close(int file)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001554:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001558:	4618      	mov	r0, r3
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001574:	605a      	str	r2, [r3, #4]
  return 0;
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <_isatty>:

int _isatty(int file)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800158c:	2301      	movs	r3, #1
}
 800158e:	4618      	mov	r0, r3
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800159a:	b480      	push	{r7}
 800159c:	b085      	sub	sp, #20
 800159e:	af00      	add	r7, sp, #0
 80015a0:	60f8      	str	r0, [r7, #12]
 80015a2:	60b9      	str	r1, [r7, #8]
 80015a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015bc:	4a14      	ldr	r2, [pc, #80]	@ (8001610 <_sbrk+0x5c>)
 80015be:	4b15      	ldr	r3, [pc, #84]	@ (8001614 <_sbrk+0x60>)
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015c8:	4b13      	ldr	r3, [pc, #76]	@ (8001618 <_sbrk+0x64>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d102      	bne.n	80015d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015d0:	4b11      	ldr	r3, [pc, #68]	@ (8001618 <_sbrk+0x64>)
 80015d2:	4a12      	ldr	r2, [pc, #72]	@ (800161c <_sbrk+0x68>)
 80015d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015d6:	4b10      	ldr	r3, [pc, #64]	@ (8001618 <_sbrk+0x64>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d207      	bcs.n	80015f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015e4:	f00e fe38 	bl	8010258 <__errno>
 80015e8:	4603      	mov	r3, r0
 80015ea:	220c      	movs	r2, #12
 80015ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ee:	f04f 33ff 	mov.w	r3, #4294967295
 80015f2:	e009      	b.n	8001608 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015f4:	4b08      	ldr	r3, [pc, #32]	@ (8001618 <_sbrk+0x64>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015fa:	4b07      	ldr	r3, [pc, #28]	@ (8001618 <_sbrk+0x64>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4413      	add	r3, r2
 8001602:	4a05      	ldr	r2, [pc, #20]	@ (8001618 <_sbrk+0x64>)
 8001604:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001606:	68fb      	ldr	r3, [r7, #12]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	24080000 	.word	0x24080000
 8001614:	00000400 	.word	0x00000400
 8001618:	240004fc 	.word	0x240004fc
 800161c:	240025e8 	.word	0x240025e8

08001620 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim5_ch2;
DMA_HandleTypeDef hdma_tim5_ch4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08a      	sub	sp, #40	@ 0x28
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001626:	f107 031c 	add.w	r3, r7, #28
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001632:	463b      	mov	r3, r7
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
 8001640:	615a      	str	r2, [r3, #20]
 8001642:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001644:	4b27      	ldr	r3, [pc, #156]	@ (80016e4 <MX_TIM2_Init+0xc4>)
 8001646:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800164a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800164c:	4b25      	ldr	r3, [pc, #148]	@ (80016e4 <MX_TIM2_Init+0xc4>)
 800164e:	2200      	movs	r2, #0
 8001650:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001652:	4b24      	ldr	r3, [pc, #144]	@ (80016e4 <MX_TIM2_Init+0xc4>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001658:	4b22      	ldr	r3, [pc, #136]	@ (80016e4 <MX_TIM2_Init+0xc4>)
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800165e:	4b21      	ldr	r3, [pc, #132]	@ (80016e4 <MX_TIM2_Init+0xc4>)
 8001660:	2200      	movs	r2, #0
 8001662:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001664:	4b1f      	ldr	r3, [pc, #124]	@ (80016e4 <MX_TIM2_Init+0xc4>)
 8001666:	2200      	movs	r2, #0
 8001668:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800166a:	481e      	ldr	r0, [pc, #120]	@ (80016e4 <MX_TIM2_Init+0xc4>)
 800166c:	f007 fc54 	bl	8008f18 <HAL_TIM_PWM_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001676:	f7ff fc99 	bl	8000fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167e:	2300      	movs	r3, #0
 8001680:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001682:	f107 031c 	add.w	r3, r7, #28
 8001686:	4619      	mov	r1, r3
 8001688:	4816      	ldr	r0, [pc, #88]	@ (80016e4 <MX_TIM2_Init+0xc4>)
 800168a:	f008 fe7b 	bl	800a384 <HAL_TIMEx_MasterConfigSynchronization>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001694:	f7ff fc8a 	bl	8000fac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001698:	2360      	movs	r3, #96	@ 0x60
 800169a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016a0:	2300      	movs	r3, #0
 80016a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016a4:	2300      	movs	r3, #0
 80016a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016a8:	463b      	mov	r3, r7
 80016aa:	2200      	movs	r2, #0
 80016ac:	4619      	mov	r1, r3
 80016ae:	480d      	ldr	r0, [pc, #52]	@ (80016e4 <MX_TIM2_Init+0xc4>)
 80016b0:	f007 fff4 	bl	800969c <HAL_TIM_PWM_ConfigChannel>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80016ba:	f7ff fc77 	bl	8000fac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016be:	463b      	mov	r3, r7
 80016c0:	2208      	movs	r2, #8
 80016c2:	4619      	mov	r1, r3
 80016c4:	4807      	ldr	r0, [pc, #28]	@ (80016e4 <MX_TIM2_Init+0xc4>)
 80016c6:	f007 ffe9 	bl	800969c <HAL_TIM_PWM_ConfigChannel>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80016d0:	f7ff fc6c 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80016d4:	4803      	ldr	r0, [pc, #12]	@ (80016e4 <MX_TIM2_Init+0xc4>)
 80016d6:	f000 fa87 	bl	8001be8 <HAL_TIM_MspPostInit>

}
 80016da:	bf00      	nop
 80016dc:	3728      	adds	r7, #40	@ 0x28
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	24000500 	.word	0x24000500

080016e8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ee:	f107 0310 	add.w	r3, r7, #16
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001706:	4b1d      	ldr	r3, [pc, #116]	@ (800177c <MX_TIM3_Init+0x94>)
 8001708:	4a1d      	ldr	r2, [pc, #116]	@ (8001780 <MX_TIM3_Init+0x98>)
 800170a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 800170c:	4b1b      	ldr	r3, [pc, #108]	@ (800177c <MX_TIM3_Init+0x94>)
 800170e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001712:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001714:	4b19      	ldr	r3, [pc, #100]	@ (800177c <MX_TIM3_Init+0x94>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800171a:	4b18      	ldr	r3, [pc, #96]	@ (800177c <MX_TIM3_Init+0x94>)
 800171c:	2263      	movs	r2, #99	@ 0x63
 800171e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001720:	4b16      	ldr	r3, [pc, #88]	@ (800177c <MX_TIM3_Init+0x94>)
 8001722:	2200      	movs	r2, #0
 8001724:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001726:	4b15      	ldr	r3, [pc, #84]	@ (800177c <MX_TIM3_Init+0x94>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800172c:	4813      	ldr	r0, [pc, #76]	@ (800177c <MX_TIM3_Init+0x94>)
 800172e:	f007 fb23 	bl	8008d78 <HAL_TIM_Base_Init>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001738:	f7ff fc38 	bl	8000fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800173c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001740:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001742:	f107 0310 	add.w	r3, r7, #16
 8001746:	4619      	mov	r1, r3
 8001748:	480c      	ldr	r0, [pc, #48]	@ (800177c <MX_TIM3_Init+0x94>)
 800174a:	f008 f8bb 	bl	80098c4 <HAL_TIM_ConfigClockSource>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001754:	f7ff fc2a 	bl	8000fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001758:	2300      	movs	r3, #0
 800175a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800175c:	2300      	movs	r3, #0
 800175e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	4619      	mov	r1, r3
 8001764:	4805      	ldr	r0, [pc, #20]	@ (800177c <MX_TIM3_Init+0x94>)
 8001766:	f008 fe0d 	bl	800a384 <HAL_TIMEx_MasterConfigSynchronization>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001770:	f7ff fc1c 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001774:	bf00      	nop
 8001776:	3720      	adds	r7, #32
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	2400054c 	.word	0x2400054c
 8001780:	40000400 	.word	0x40000400

08001784 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08c      	sub	sp, #48	@ 0x30
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800178a:	f107 030c 	add.w	r3, r7, #12
 800178e:	2224      	movs	r2, #36	@ 0x24
 8001790:	2100      	movs	r1, #0
 8001792:	4618      	mov	r0, r3
 8001794:	f00e fd0d 	bl	80101b2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001798:	463b      	mov	r3, r7
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017a2:	4b21      	ldr	r3, [pc, #132]	@ (8001828 <MX_TIM4_Init+0xa4>)
 80017a4:	4a21      	ldr	r2, [pc, #132]	@ (800182c <MX_TIM4_Init+0xa8>)
 80017a6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80017a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001828 <MX_TIM4_Init+0xa4>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001828 <MX_TIM4_Init+0xa4>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80017b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001828 <MX_TIM4_Init+0xa4>)
 80017b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017ba:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001828 <MX_TIM4_Init+0xa4>)
 80017be:	2200      	movs	r2, #0
 80017c0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c2:	4b19      	ldr	r3, [pc, #100]	@ (8001828 <MX_TIM4_Init+0xa4>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80017c8:	2303      	movs	r3, #3
 80017ca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80017cc:	2302      	movs	r3, #2
 80017ce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017d0:	2301      	movs	r3, #1
 80017d2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80017dc:	2302      	movs	r3, #2
 80017de:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017e0:	2301      	movs	r3, #1
 80017e2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017e4:	2300      	movs	r3, #0
 80017e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80017ec:	f107 030c 	add.w	r3, r7, #12
 80017f0:	4619      	mov	r1, r3
 80017f2:	480d      	ldr	r0, [pc, #52]	@ (8001828 <MX_TIM4_Init+0xa4>)
 80017f4:	f007 fcf6 	bl	80091e4 <HAL_TIM_Encoder_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80017fe:	f7ff fbd5 	bl	8000fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001802:	2300      	movs	r3, #0
 8001804:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800180a:	463b      	mov	r3, r7
 800180c:	4619      	mov	r1, r3
 800180e:	4806      	ldr	r0, [pc, #24]	@ (8001828 <MX_TIM4_Init+0xa4>)
 8001810:	f008 fdb8 	bl	800a384 <HAL_TIMEx_MasterConfigSynchronization>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800181a:	f7ff fbc7 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800181e:	bf00      	nop
 8001820:	3730      	adds	r7, #48	@ 0x30
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	24000598 	.word	0x24000598
 800182c:	40000800 	.word	0x40000800

08001830 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	@ 0x28
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001836:	f107 031c 	add.w	r3, r7, #28
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001842:	463b      	mov	r3, r7
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	611a      	str	r2, [r3, #16]
 8001850:	615a      	str	r2, [r3, #20]
 8001852:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001854:	4b26      	ldr	r3, [pc, #152]	@ (80018f0 <MX_TIM5_Init+0xc0>)
 8001856:	4a27      	ldr	r2, [pc, #156]	@ (80018f4 <MX_TIM5_Init+0xc4>)
 8001858:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800185a:	4b25      	ldr	r3, [pc, #148]	@ (80018f0 <MX_TIM5_Init+0xc0>)
 800185c:	2200      	movs	r2, #0
 800185e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001860:	4b23      	ldr	r3, [pc, #140]	@ (80018f0 <MX_TIM5_Init+0xc0>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8001866:	4b22      	ldr	r3, [pc, #136]	@ (80018f0 <MX_TIM5_Init+0xc0>)
 8001868:	2200      	movs	r2, #0
 800186a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800186c:	4b20      	ldr	r3, [pc, #128]	@ (80018f0 <MX_TIM5_Init+0xc0>)
 800186e:	2200      	movs	r2, #0
 8001870:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001872:	4b1f      	ldr	r3, [pc, #124]	@ (80018f0 <MX_TIM5_Init+0xc0>)
 8001874:	2200      	movs	r2, #0
 8001876:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001878:	481d      	ldr	r0, [pc, #116]	@ (80018f0 <MX_TIM5_Init+0xc0>)
 800187a:	f007 fb4d 	bl	8008f18 <HAL_TIM_PWM_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001884:	f7ff fb92 	bl	8000fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001888:	2300      	movs	r3, #0
 800188a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001890:	f107 031c 	add.w	r3, r7, #28
 8001894:	4619      	mov	r1, r3
 8001896:	4816      	ldr	r0, [pc, #88]	@ (80018f0 <MX_TIM5_Init+0xc0>)
 8001898:	f008 fd74 	bl	800a384 <HAL_TIMEx_MasterConfigSynchronization>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80018a2:	f7ff fb83 	bl	8000fac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018a6:	2360      	movs	r3, #96	@ 0x60
 80018a8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018b6:	463b      	mov	r3, r7
 80018b8:	2204      	movs	r2, #4
 80018ba:	4619      	mov	r1, r3
 80018bc:	480c      	ldr	r0, [pc, #48]	@ (80018f0 <MX_TIM5_Init+0xc0>)
 80018be:	f007 feed 	bl	800969c <HAL_TIM_PWM_ConfigChannel>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80018c8:	f7ff fb70 	bl	8000fac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018cc:	463b      	mov	r3, r7
 80018ce:	220c      	movs	r2, #12
 80018d0:	4619      	mov	r1, r3
 80018d2:	4807      	ldr	r0, [pc, #28]	@ (80018f0 <MX_TIM5_Init+0xc0>)
 80018d4:	f007 fee2 	bl	800969c <HAL_TIM_PWM_ConfigChannel>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80018de:	f7ff fb65 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80018e2:	4803      	ldr	r0, [pc, #12]	@ (80018f0 <MX_TIM5_Init+0xc0>)
 80018e4:	f000 f980 	bl	8001be8 <HAL_TIM_MspPostInit>

}
 80018e8:	bf00      	nop
 80018ea:	3728      	adds	r7, #40	@ 0x28
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	240005e4 	.word	0x240005e4
 80018f4:	40000c00 	.word	0x40000c00

080018f8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001908:	d16f      	bne.n	80019ea <HAL_TIM_PWM_MspInit+0xf2>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800190a:	4b74      	ldr	r3, [pc, #464]	@ (8001adc <HAL_TIM_PWM_MspInit+0x1e4>)
 800190c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001910:	4a72      	ldr	r2, [pc, #456]	@ (8001adc <HAL_TIM_PWM_MspInit+0x1e4>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800191a:	4b70      	ldr	r3, [pc, #448]	@ (8001adc <HAL_TIM_PWM_MspInit+0x1e4>)
 800191c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8001928:	4b6d      	ldr	r3, [pc, #436]	@ (8001ae0 <HAL_TIM_PWM_MspInit+0x1e8>)
 800192a:	4a6e      	ldr	r2, [pc, #440]	@ (8001ae4 <HAL_TIM_PWM_MspInit+0x1ec>)
 800192c:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 800192e:	4b6c      	ldr	r3, [pc, #432]	@ (8001ae0 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001930:	2212      	movs	r2, #18
 8001932:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001934:	4b6a      	ldr	r3, [pc, #424]	@ (8001ae0 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001936:	2240      	movs	r2, #64	@ 0x40
 8001938:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800193a:	4b69      	ldr	r3, [pc, #420]	@ (8001ae0 <HAL_TIM_PWM_MspInit+0x1e8>)
 800193c:	2200      	movs	r2, #0
 800193e:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001940:	4b67      	ldr	r3, [pc, #412]	@ (8001ae0 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001942:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001946:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001948:	4b65      	ldr	r3, [pc, #404]	@ (8001ae0 <HAL_TIM_PWM_MspInit+0x1e8>)
 800194a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800194e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001950:	4b63      	ldr	r3, [pc, #396]	@ (8001ae0 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001952:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001956:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8001958:	4b61      	ldr	r3, [pc, #388]	@ (8001ae0 <HAL_TIM_PWM_MspInit+0x1e8>)
 800195a:	2200      	movs	r2, #0
 800195c:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800195e:	4b60      	ldr	r3, [pc, #384]	@ (8001ae0 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001960:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001964:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001966:	4b5e      	ldr	r3, [pc, #376]	@ (8001ae0 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001968:	2200      	movs	r2, #0
 800196a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800196c:	485c      	ldr	r0, [pc, #368]	@ (8001ae0 <HAL_TIM_PWM_MspInit+0x1e8>)
 800196e:	f000 fd8f 	bl	8002490 <HAL_DMA_Init>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <HAL_TIM_PWM_MspInit+0x84>
    {
      Error_Handler();
 8001978:	f7ff fb18 	bl	8000fac <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a58      	ldr	r2, [pc, #352]	@ (8001ae0 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001980:	625a      	str	r2, [r3, #36]	@ 0x24
 8001982:	4a57      	ldr	r2, [pc, #348]	@ (8001ae0 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 8001988:	4b57      	ldr	r3, [pc, #348]	@ (8001ae8 <HAL_TIM_PWM_MspInit+0x1f0>)
 800198a:	4a58      	ldr	r2, [pc, #352]	@ (8001aec <HAL_TIM_PWM_MspInit+0x1f4>)
 800198c:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 800198e:	4b56      	ldr	r3, [pc, #344]	@ (8001ae8 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001990:	2214      	movs	r2, #20
 8001992:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001994:	4b54      	ldr	r3, [pc, #336]	@ (8001ae8 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001996:	2240      	movs	r2, #64	@ 0x40
 8001998:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800199a:	4b53      	ldr	r3, [pc, #332]	@ (8001ae8 <HAL_TIM_PWM_MspInit+0x1f0>)
 800199c:	2200      	movs	r2, #0
 800199e:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80019a0:	4b51      	ldr	r3, [pc, #324]	@ (8001ae8 <HAL_TIM_PWM_MspInit+0x1f0>)
 80019a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019a6:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019a8:	4b4f      	ldr	r3, [pc, #316]	@ (8001ae8 <HAL_TIM_PWM_MspInit+0x1f0>)
 80019aa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80019ae:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019b0:	4b4d      	ldr	r3, [pc, #308]	@ (8001ae8 <HAL_TIM_PWM_MspInit+0x1f0>)
 80019b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019b6:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 80019b8:	4b4b      	ldr	r3, [pc, #300]	@ (8001ae8 <HAL_TIM_PWM_MspInit+0x1f0>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 80019be:	4b4a      	ldr	r3, [pc, #296]	@ (8001ae8 <HAL_TIM_PWM_MspInit+0x1f0>)
 80019c0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80019c4:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019c6:	4b48      	ldr	r3, [pc, #288]	@ (8001ae8 <HAL_TIM_PWM_MspInit+0x1f0>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 80019cc:	4846      	ldr	r0, [pc, #280]	@ (8001ae8 <HAL_TIM_PWM_MspInit+0x1f0>)
 80019ce:	f000 fd5f 	bl	8002490 <HAL_DMA_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <HAL_TIM_PWM_MspInit+0xe4>
    {
      Error_Handler();
 80019d8:	f7ff fae8 	bl	8000fac <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a42      	ldr	r2, [pc, #264]	@ (8001ae8 <HAL_TIM_PWM_MspInit+0x1f0>)
 80019e0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80019e2:	4a41      	ldr	r2, [pc, #260]	@ (8001ae8 <HAL_TIM_PWM_MspInit+0x1f0>)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80019e8:	e073      	b.n	8001ad2 <HAL_TIM_PWM_MspInit+0x1da>
  else if(tim_pwmHandle->Instance==TIM5)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a40      	ldr	r2, [pc, #256]	@ (8001af0 <HAL_TIM_PWM_MspInit+0x1f8>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d16e      	bne.n	8001ad2 <HAL_TIM_PWM_MspInit+0x1da>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80019f4:	4b39      	ldr	r3, [pc, #228]	@ (8001adc <HAL_TIM_PWM_MspInit+0x1e4>)
 80019f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019fa:	4a38      	ldr	r2, [pc, #224]	@ (8001adc <HAL_TIM_PWM_MspInit+0x1e4>)
 80019fc:	f043 0308 	orr.w	r3, r3, #8
 8001a00:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a04:	4b35      	ldr	r3, [pc, #212]	@ (8001adc <HAL_TIM_PWM_MspInit+0x1e4>)
 8001a06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 8001a12:	4b38      	ldr	r3, [pc, #224]	@ (8001af4 <HAL_TIM_PWM_MspInit+0x1fc>)
 8001a14:	4a38      	ldr	r2, [pc, #224]	@ (8001af8 <HAL_TIM_PWM_MspInit+0x200>)
 8001a16:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Request = DMA_REQUEST_TIM5_CH2;
 8001a18:	4b36      	ldr	r3, [pc, #216]	@ (8001af4 <HAL_TIM_PWM_MspInit+0x1fc>)
 8001a1a:	2238      	movs	r2, #56	@ 0x38
 8001a1c:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a1e:	4b35      	ldr	r3, [pc, #212]	@ (8001af4 <HAL_TIM_PWM_MspInit+0x1fc>)
 8001a20:	2240      	movs	r2, #64	@ 0x40
 8001a22:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a24:	4b33      	ldr	r3, [pc, #204]	@ (8001af4 <HAL_TIM_PWM_MspInit+0x1fc>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001a2a:	4b32      	ldr	r3, [pc, #200]	@ (8001af4 <HAL_TIM_PWM_MspInit+0x1fc>)
 8001a2c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a30:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a32:	4b30      	ldr	r3, [pc, #192]	@ (8001af4 <HAL_TIM_PWM_MspInit+0x1fc>)
 8001a34:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a38:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a3a:	4b2e      	ldr	r3, [pc, #184]	@ (8001af4 <HAL_TIM_PWM_MspInit+0x1fc>)
 8001a3c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a40:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 8001a42:	4b2c      	ldr	r3, [pc, #176]	@ (8001af4 <HAL_TIM_PWM_MspInit+0x1fc>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8001a48:	4b2a      	ldr	r3, [pc, #168]	@ (8001af4 <HAL_TIM_PWM_MspInit+0x1fc>)
 8001a4a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a4e:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a50:	4b28      	ldr	r3, [pc, #160]	@ (8001af4 <HAL_TIM_PWM_MspInit+0x1fc>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8001a56:	4827      	ldr	r0, [pc, #156]	@ (8001af4 <HAL_TIM_PWM_MspInit+0x1fc>)
 8001a58:	f000 fd1a 	bl	8002490 <HAL_DMA_Init>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <HAL_TIM_PWM_MspInit+0x16e>
      Error_Handler();
 8001a62:	f7ff faa3 	bl	8000fac <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a22      	ldr	r2, [pc, #136]	@ (8001af4 <HAL_TIM_PWM_MspInit+0x1fc>)
 8001a6a:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a6c:	4a21      	ldr	r2, [pc, #132]	@ (8001af4 <HAL_TIM_PWM_MspInit+0x1fc>)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim5_ch4.Instance = DMA1_Stream3;
 8001a72:	4b22      	ldr	r3, [pc, #136]	@ (8001afc <HAL_TIM_PWM_MspInit+0x204>)
 8001a74:	4a22      	ldr	r2, [pc, #136]	@ (8001b00 <HAL_TIM_PWM_MspInit+0x208>)
 8001a76:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 8001a78:	4b20      	ldr	r3, [pc, #128]	@ (8001afc <HAL_TIM_PWM_MspInit+0x204>)
 8001a7a:	223a      	movs	r2, #58	@ 0x3a
 8001a7c:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a7e:	4b1f      	ldr	r3, [pc, #124]	@ (8001afc <HAL_TIM_PWM_MspInit+0x204>)
 8001a80:	2240      	movs	r2, #64	@ 0x40
 8001a82:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a84:	4b1d      	ldr	r3, [pc, #116]	@ (8001afc <HAL_TIM_PWM_MspInit+0x204>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001a8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001afc <HAL_TIM_PWM_MspInit+0x204>)
 8001a8c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a90:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a92:	4b1a      	ldr	r3, [pc, #104]	@ (8001afc <HAL_TIM_PWM_MspInit+0x204>)
 8001a94:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a98:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a9a:	4b18      	ldr	r3, [pc, #96]	@ (8001afc <HAL_TIM_PWM_MspInit+0x204>)
 8001a9c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001aa0:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 8001aa2:	4b16      	ldr	r3, [pc, #88]	@ (8001afc <HAL_TIM_PWM_MspInit+0x204>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 8001aa8:	4b14      	ldr	r3, [pc, #80]	@ (8001afc <HAL_TIM_PWM_MspInit+0x204>)
 8001aaa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001aae:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ab0:	4b12      	ldr	r3, [pc, #72]	@ (8001afc <HAL_TIM_PWM_MspInit+0x204>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 8001ab6:	4811      	ldr	r0, [pc, #68]	@ (8001afc <HAL_TIM_PWM_MspInit+0x204>)
 8001ab8:	f000 fcea 	bl	8002490 <HAL_DMA_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_TIM_PWM_MspInit+0x1ce>
      Error_Handler();
 8001ac2:	f7ff fa73 	bl	8000fac <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a0c      	ldr	r2, [pc, #48]	@ (8001afc <HAL_TIM_PWM_MspInit+0x204>)
 8001aca:	631a      	str	r2, [r3, #48]	@ 0x30
 8001acc:	4a0b      	ldr	r2, [pc, #44]	@ (8001afc <HAL_TIM_PWM_MspInit+0x204>)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001ad2:	bf00      	nop
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	58024400 	.word	0x58024400
 8001ae0:	24000630 	.word	0x24000630
 8001ae4:	40020088 	.word	0x40020088
 8001ae8:	240006a8 	.word	0x240006a8
 8001aec:	40020028 	.word	0x40020028
 8001af0:	40000c00 	.word	0x40000c00
 8001af4:	24000720 	.word	0x24000720
 8001af8:	40020070 	.word	0x40020070
 8001afc:	24000798 	.word	0x24000798
 8001b00:	40020058 	.word	0x40020058

08001b04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a0e      	ldr	r2, [pc, #56]	@ (8001b4c <HAL_TIM_Base_MspInit+0x48>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d116      	bne.n	8001b44 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b16:	4b0e      	ldr	r3, [pc, #56]	@ (8001b50 <HAL_TIM_Base_MspInit+0x4c>)
 8001b18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b1c:	4a0c      	ldr	r2, [pc, #48]	@ (8001b50 <HAL_TIM_Base_MspInit+0x4c>)
 8001b1e:	f043 0302 	orr.w	r3, r3, #2
 8001b22:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b26:	4b0a      	ldr	r3, [pc, #40]	@ (8001b50 <HAL_TIM_Base_MspInit+0x4c>)
 8001b28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b34:	2200      	movs	r2, #0
 8001b36:	2100      	movs	r1, #0
 8001b38:	201d      	movs	r0, #29
 8001b3a:	f000 fc60 	bl	80023fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b3e:	201d      	movs	r0, #29
 8001b40:	f000 fc77 	bl	8002432 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001b44:	bf00      	nop
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40000400 	.word	0x40000400
 8001b50:	58024400 	.word	0x58024400

08001b54 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08a      	sub	sp, #40	@ 0x28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a1a      	ldr	r2, [pc, #104]	@ (8001bdc <HAL_TIM_Encoder_MspInit+0x88>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d12e      	bne.n	8001bd4 <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b76:	4b1a      	ldr	r3, [pc, #104]	@ (8001be0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001b78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b7c:	4a18      	ldr	r2, [pc, #96]	@ (8001be0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001b7e:	f043 0304 	orr.w	r3, r3, #4
 8001b82:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b86:	4b16      	ldr	r3, [pc, #88]	@ (8001be0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001b88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	613b      	str	r3, [r7, #16]
 8001b92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b94:	4b12      	ldr	r3, [pc, #72]	@ (8001be0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b9a:	4a11      	ldr	r2, [pc, #68]	@ (8001be0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001b9c:	f043 0308 	orr.w	r3, r3, #8
 8001ba0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ba4:	4b0e      	ldr	r3, [pc, #56]	@ (8001be0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001bb2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4805      	ldr	r0, [pc, #20]	@ (8001be4 <HAL_TIM_Encoder_MspInit+0x90>)
 8001bd0:	f002 fda6 	bl	8004720 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001bd4:	bf00      	nop
 8001bd6:	3728      	adds	r7, #40	@ 0x28
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40000800 	.word	0x40000800
 8001be0:	58024400 	.word	0x58024400
 8001be4:	58020c00 	.word	0x58020c00

08001be8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08a      	sub	sp, #40	@ 0x28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c08:	d11f      	bne.n	8001c4a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0a:	4b24      	ldr	r3, [pc, #144]	@ (8001c9c <HAL_TIM_MspPostInit+0xb4>)
 8001c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c10:	4a22      	ldr	r2, [pc, #136]	@ (8001c9c <HAL_TIM_MspPostInit+0xb4>)
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c1a:	4b20      	ldr	r3, [pc, #128]	@ (8001c9c <HAL_TIM_MspPostInit+0xb4>)
 8001c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8001c28:	2305      	movs	r3, #5
 8001c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c34:	2300      	movs	r3, #0
 8001c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	4619      	mov	r1, r3
 8001c42:	4817      	ldr	r0, [pc, #92]	@ (8001ca0 <HAL_TIM_MspPostInit+0xb8>)
 8001c44:	f002 fd6c 	bl	8004720 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001c48:	e023      	b.n	8001c92 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM5)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a15      	ldr	r2, [pc, #84]	@ (8001ca4 <HAL_TIM_MspPostInit+0xbc>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d11e      	bne.n	8001c92 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c54:	4b11      	ldr	r3, [pc, #68]	@ (8001c9c <HAL_TIM_MspPostInit+0xb4>)
 8001c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c5a:	4a10      	ldr	r2, [pc, #64]	@ (8001c9c <HAL_TIM_MspPostInit+0xb4>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c64:	4b0d      	ldr	r3, [pc, #52]	@ (8001c9c <HAL_TIM_MspPostInit+0xb4>)
 8001c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001c72:	230a      	movs	r3, #10
 8001c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001c82:	2302      	movs	r3, #2
 8001c84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c86:	f107 0314 	add.w	r3, r7, #20
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4804      	ldr	r0, [pc, #16]	@ (8001ca0 <HAL_TIM_MspPostInit+0xb8>)
 8001c8e:	f002 fd47 	bl	8004720 <HAL_GPIO_Init>
}
 8001c92:	bf00      	nop
 8001c94:	3728      	adds	r7, #40	@ 0x28
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	58024400 	.word	0x58024400
 8001ca0:	58020000 	.word	0x58020000
 8001ca4:	40000c00 	.word	0x40000c00

08001ca8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001ca8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ce0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cac:	f7fe fce8 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cb0:	480c      	ldr	r0, [pc, #48]	@ (8001ce4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cb2:	490d      	ldr	r1, [pc, #52]	@ (8001ce8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8001cec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cb8:	e002      	b.n	8001cc0 <LoopCopyDataInit>

08001cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cbe:	3304      	adds	r3, #4

08001cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc4:	d3f9      	bcc.n	8001cba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cc8:	4c0a      	ldr	r4, [pc, #40]	@ (8001cf4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ccc:	e001      	b.n	8001cd2 <LoopFillZerobss>

08001cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd0:	3204      	adds	r2, #4

08001cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd4:	d3fb      	bcc.n	8001cce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cd6:	f00e fac5 	bl	8010264 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cda:	f7fe ffe7 	bl	8000cac <main>
  bx  lr
 8001cde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ce0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001ce4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ce8:	240002f4 	.word	0x240002f4
  ldr r2, =_sidata
 8001cec:	08012720 	.word	0x08012720
  ldr r2, =_sbss
 8001cf0:	240002f4 	.word	0x240002f4
  ldr r4, =_ebss
 8001cf4:	240025e4 	.word	0x240025e4

08001cf8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cf8:	e7fe      	b.n	8001cf8 <ADC3_IRQHandler>
	...

08001cfc <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08c      	sub	sp, #48	@ 0x30
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001d06:	2300      	movs	r3, #0
 8001d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d009      	beq.n	8001d24 <BSP_LED_Init+0x28>
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d006      	beq.n	8001d24 <BSP_LED_Init+0x28>
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d003      	beq.n	8001d24 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001d1c:	f06f 0301 	mvn.w	r3, #1
 8001d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d22:	e055      	b.n	8001dd0 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d10f      	bne.n	8001d4a <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8001d2a:	4b2c      	ldr	r3, [pc, #176]	@ (8001ddc <BSP_LED_Init+0xe0>)
 8001d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d30:	4a2a      	ldr	r2, [pc, #168]	@ (8001ddc <BSP_LED_Init+0xe0>)
 8001d32:	f043 0302 	orr.w	r3, r3, #2
 8001d36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d3a:	4b28      	ldr	r3, [pc, #160]	@ (8001ddc <BSP_LED_Init+0xe0>)
 8001d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	e021      	b.n	8001d8e <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d10f      	bne.n	8001d70 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001d50:	4b22      	ldr	r3, [pc, #136]	@ (8001ddc <BSP_LED_Init+0xe0>)
 8001d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d56:	4a21      	ldr	r2, [pc, #132]	@ (8001ddc <BSP_LED_Init+0xe0>)
 8001d58:	f043 0310 	orr.w	r3, r3, #16
 8001d5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d60:	4b1e      	ldr	r3, [pc, #120]	@ (8001ddc <BSP_LED_Init+0xe0>)
 8001d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d66:	f003 0310 	and.w	r3, r3, #16
 8001d6a:	613b      	str	r3, [r7, #16]
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	e00e      	b.n	8001d8e <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001d70:	4b1a      	ldr	r3, [pc, #104]	@ (8001ddc <BSP_LED_Init+0xe0>)
 8001d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d76:	4a19      	ldr	r2, [pc, #100]	@ (8001ddc <BSP_LED_Init+0xe0>)
 8001d78:	f043 0302 	orr.w	r3, r3, #2
 8001d7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d80:	4b16      	ldr	r3, [pc, #88]	@ (8001ddc <BSP_LED_Init+0xe0>)
 8001d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	4a13      	ldr	r2, [pc, #76]	@ (8001de0 <BSP_LED_Init+0xe4>)
 8001d92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d96:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da0:	2303      	movs	r3, #3
 8001da2:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	4a0f      	ldr	r2, [pc, #60]	@ (8001de4 <BSP_LED_Init+0xe8>)
 8001da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dac:	f107 0218 	add.w	r2, r7, #24
 8001db0:	4611      	mov	r1, r2
 8001db2:	4618      	mov	r0, r3
 8001db4:	f002 fcb4 	bl	8004720 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	4a0a      	ldr	r2, [pc, #40]	@ (8001de4 <BSP_LED_Init+0xe8>)
 8001dbc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	4a07      	ldr	r2, [pc, #28]	@ (8001de0 <BSP_LED_Init+0xe4>)
 8001dc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f002 fe58 	bl	8004a80 <HAL_GPIO_WritePin>
  }

  return ret;
 8001dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3730      	adds	r7, #48	@ 0x30
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	58024400 	.word	0x58024400
 8001de0:	08012368 	.word	0x08012368
 8001de4:	24000018 	.word	0x24000018

08001de8 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b088      	sub	sp, #32
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	460a      	mov	r2, r1
 8001df2:	71fb      	strb	r3, [r7, #7]
 8001df4:	4613      	mov	r3, r2
 8001df6:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001df8:	4b2e      	ldr	r3, [pc, #184]	@ (8001eb4 <BSP_PB_Init+0xcc>)
 8001dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dfe:	4a2d      	ldr	r2, [pc, #180]	@ (8001eb4 <BSP_PB_Init+0xcc>)
 8001e00:	f043 0304 	orr.w	r3, r3, #4
 8001e04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e08:	4b2a      	ldr	r3, [pc, #168]	@ (8001eb4 <BSP_PB_Init+0xcc>)
 8001e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001e16:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e1a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e20:	2302      	movs	r3, #2
 8001e22:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001e24:	79bb      	ldrb	r3, [r7, #6]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10c      	bne.n	8001e44 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001e2e:	79fb      	ldrb	r3, [r7, #7]
 8001e30:	4a21      	ldr	r2, [pc, #132]	@ (8001eb8 <BSP_PB_Init+0xd0>)
 8001e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e36:	f107 020c 	add.w	r2, r7, #12
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f002 fc6f 	bl	8004720 <HAL_GPIO_Init>
 8001e42:	e031      	b.n	8001ea8 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001e44:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001e48:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	4a1a      	ldr	r2, [pc, #104]	@ (8001eb8 <BSP_PB_Init+0xd0>)
 8001e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e52:	f107 020c 	add.w	r2, r7, #12
 8001e56:	4611      	mov	r1, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f002 fc61 	bl	8004720 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001e5e:	79fb      	ldrb	r3, [r7, #7]
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	4a16      	ldr	r2, [pc, #88]	@ (8001ebc <BSP_PB_Init+0xd4>)
 8001e64:	441a      	add	r2, r3
 8001e66:	79fb      	ldrb	r3, [r7, #7]
 8001e68:	4915      	ldr	r1, [pc, #84]	@ (8001ec0 <BSP_PB_Init+0xd8>)
 8001e6a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4610      	mov	r0, r2
 8001e72:	f002 fc04 	bl	800467e <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	4a10      	ldr	r2, [pc, #64]	@ (8001ebc <BSP_PB_Init+0xd4>)
 8001e7c:	1898      	adds	r0, r3, r2
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	4a10      	ldr	r2, [pc, #64]	@ (8001ec4 <BSP_PB_Init+0xdc>)
 8001e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e86:	461a      	mov	r2, r3
 8001e88:	2100      	movs	r1, #0
 8001e8a:	f002 fbd9 	bl	8004640 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001e8e:	2028      	movs	r0, #40	@ 0x28
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	4a0d      	ldr	r2, [pc, #52]	@ (8001ec8 <BSP_PB_Init+0xe0>)
 8001e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	f000 faaf 	bl	80023fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001ea0:	2328      	movs	r3, #40	@ 0x28
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f000 fac5 	bl	8002432 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3720      	adds	r7, #32
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	58024400 	.word	0x58024400
 8001eb8:	24000024 	.word	0x24000024
 8001ebc:	24000810 	.word	0x24000810
 8001ec0:	08012370 	.word	0x08012370
 8001ec4:	24000028 	.word	0x24000028
 8001ec8:	2400002c 	.word	0x2400002c

08001ecc <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	4a04      	ldr	r2, [pc, #16]	@ (8001eec <BSP_PB_IRQHandler+0x20>)
 8001edc:	4413      	add	r3, r2
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f002 fbe2 	bl	80046a8 <HAL_EXTI_IRQHandler>
}
 8001ee4:	bf00      	nop
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	24000810 	.word	0x24000810

08001ef0 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
	...

08001f08 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	6039      	str	r1, [r7, #0]
 8001f12:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001f14:	2300      	movs	r3, #0
 8001f16:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001f1e:	f06f 0301 	mvn.w	r3, #1
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	e018      	b.n	8001f58 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	2294      	movs	r2, #148	@ 0x94
 8001f2a:	fb02 f303 	mul.w	r3, r2, r3
 8001f2e:	4a0d      	ldr	r2, [pc, #52]	@ (8001f64 <BSP_COM_Init+0x5c>)
 8001f30:	4413      	add	r3, r2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f000 f86e 	bl	8002014 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001f38:	79fb      	ldrb	r3, [r7, #7]
 8001f3a:	2294      	movs	r2, #148	@ 0x94
 8001f3c:	fb02 f303 	mul.w	r3, r2, r3
 8001f40:	4a08      	ldr	r2, [pc, #32]	@ (8001f64 <BSP_COM_Init+0x5c>)
 8001f42:	4413      	add	r3, r2
 8001f44:	6839      	ldr	r1, [r7, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 f80e 	bl	8001f68 <MX_USART3_Init>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d002      	beq.n	8001f58 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001f52:	f06f 0303 	mvn.w	r3, #3
 8001f56:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001f58:	68fb      	ldr	r3, [r7, #12]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	24000818 	.word	0x24000818

08001f68 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001f72:	4b15      	ldr	r3, [pc, #84]	@ (8001fc8 <MX_USART3_Init+0x60>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	220c      	movs	r2, #12
 8001f86:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	895b      	ldrh	r3, [r3, #10]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	891b      	ldrh	r3, [r3, #8]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	899b      	ldrh	r3, [r3, #12]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001fb4:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f008 fa90 	bl	800a4dc <HAL_UART_Init>
 8001fbc:	4603      	mov	r3, r0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	24000014 	.word	0x24000014

08001fcc <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001fd4:	4b09      	ldr	r3, [pc, #36]	@ (8001ffc <__io_putchar+0x30>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	461a      	mov	r2, r3
 8001fda:	2394      	movs	r3, #148	@ 0x94
 8001fdc:	fb02 f303 	mul.w	r3, r2, r3
 8001fe0:	4a07      	ldr	r2, [pc, #28]	@ (8002000 <__io_putchar+0x34>)
 8001fe2:	1898      	adds	r0, r3, r2
 8001fe4:	1d39      	adds	r1, r7, #4
 8001fe6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fea:	2201      	movs	r2, #1
 8001fec:	f008 fad0 	bl	800a590 <HAL_UART_Transmit>
  return ch;
 8001ff0:	687b      	ldr	r3, [r7, #4]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	240008ac 	.word	0x240008ac
 8002000:	24000818 	.word	0x24000818

08002004 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002008:	2000      	movs	r0, #0
 800200a:	f7ff ff71 	bl	8001ef0 <BSP_PB_Callback>
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08a      	sub	sp, #40	@ 0x28
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 800201c:	4b27      	ldr	r3, [pc, #156]	@ (80020bc <COM1_MspInit+0xa8>)
 800201e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002022:	4a26      	ldr	r2, [pc, #152]	@ (80020bc <COM1_MspInit+0xa8>)
 8002024:	f043 0308 	orr.w	r3, r3, #8
 8002028:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800202c:	4b23      	ldr	r3, [pc, #140]	@ (80020bc <COM1_MspInit+0xa8>)
 800202e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 800203a:	4b20      	ldr	r3, [pc, #128]	@ (80020bc <COM1_MspInit+0xa8>)
 800203c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002040:	4a1e      	ldr	r2, [pc, #120]	@ (80020bc <COM1_MspInit+0xa8>)
 8002042:	f043 0308 	orr.w	r3, r3, #8
 8002046:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800204a:	4b1c      	ldr	r3, [pc, #112]	@ (80020bc <COM1_MspInit+0xa8>)
 800204c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002050:	f003 0308 	and.w	r3, r3, #8
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8002058:	4b18      	ldr	r3, [pc, #96]	@ (80020bc <COM1_MspInit+0xa8>)
 800205a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800205e:	4a17      	ldr	r2, [pc, #92]	@ (80020bc <COM1_MspInit+0xa8>)
 8002060:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002064:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002068:	4b14      	ldr	r3, [pc, #80]	@ (80020bc <COM1_MspInit+0xa8>)
 800206a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800206e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002072:	60bb      	str	r3, [r7, #8]
 8002074:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8002076:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800207a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800207c:	2302      	movs	r3, #2
 800207e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002080:	2302      	movs	r3, #2
 8002082:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002084:	2301      	movs	r3, #1
 8002086:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8002088:	2307      	movs	r3, #7
 800208a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 800208c:	f107 0314 	add.w	r3, r7, #20
 8002090:	4619      	mov	r1, r3
 8002092:	480b      	ldr	r0, [pc, #44]	@ (80020c0 <COM1_MspInit+0xac>)
 8002094:	f002 fb44 	bl	8004720 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8002098:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800209c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800209e:	2302      	movs	r3, #2
 80020a0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80020a2:	2307      	movs	r3, #7
 80020a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80020a6:	f107 0314 	add.w	r3, r7, #20
 80020aa:	4619      	mov	r1, r3
 80020ac:	4804      	ldr	r0, [pc, #16]	@ (80020c0 <COM1_MspInit+0xac>)
 80020ae:	f002 fb37 	bl	8004720 <HAL_GPIO_Init>
}
 80020b2:	bf00      	nop
 80020b4:	3728      	adds	r7, #40	@ 0x28
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	58024400 	.word	0x58024400
 80020c0:	58020c00 	.word	0x58020c00

080020c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020ca:	2003      	movs	r0, #3
 80020cc:	f000 f98c 	bl	80023e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80020d0:	f004 fe50 	bl	8006d74 <HAL_RCC_GetSysClockFreq>
 80020d4:	4602      	mov	r2, r0
 80020d6:	4b15      	ldr	r3, [pc, #84]	@ (800212c <HAL_Init+0x68>)
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	0a1b      	lsrs	r3, r3, #8
 80020dc:	f003 030f 	and.w	r3, r3, #15
 80020e0:	4913      	ldr	r1, [pc, #76]	@ (8002130 <HAL_Init+0x6c>)
 80020e2:	5ccb      	ldrb	r3, [r1, r3]
 80020e4:	f003 031f 	and.w	r3, r3, #31
 80020e8:	fa22 f303 	lsr.w	r3, r2, r3
 80020ec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80020ee:	4b0f      	ldr	r3, [pc, #60]	@ (800212c <HAL_Init+0x68>)
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	4a0e      	ldr	r2, [pc, #56]	@ (8002130 <HAL_Init+0x6c>)
 80020f8:	5cd3      	ldrb	r3, [r2, r3]
 80020fa:	f003 031f 	and.w	r3, r3, #31
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	fa22 f303 	lsr.w	r3, r2, r3
 8002104:	4a0b      	ldr	r2, [pc, #44]	@ (8002134 <HAL_Init+0x70>)
 8002106:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002108:	4a0b      	ldr	r2, [pc, #44]	@ (8002138 <HAL_Init+0x74>)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800210e:	2000      	movs	r0, #0
 8002110:	f000 f814 	bl	800213c <HAL_InitTick>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e002      	b.n	8002124 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800211e:	f7fe ff4b 	bl	8000fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	58024400 	.word	0x58024400
 8002130:	08012358 	.word	0x08012358
 8002134:	24000004 	.word	0x24000004
 8002138:	24000000 	.word	0x24000000

0800213c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002144:	4b15      	ldr	r3, [pc, #84]	@ (800219c <HAL_InitTick+0x60>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e021      	b.n	8002194 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002150:	4b13      	ldr	r3, [pc, #76]	@ (80021a0 <HAL_InitTick+0x64>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4b11      	ldr	r3, [pc, #68]	@ (800219c <HAL_InitTick+0x60>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	4619      	mov	r1, r3
 800215a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800215e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002162:	fbb2 f3f3 	udiv	r3, r2, r3
 8002166:	4618      	mov	r0, r3
 8002168:	f000 f971 	bl	800244e <HAL_SYSTICK_Config>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e00e      	b.n	8002194 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b0f      	cmp	r3, #15
 800217a:	d80a      	bhi.n	8002192 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800217c:	2200      	movs	r2, #0
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	f04f 30ff 	mov.w	r0, #4294967295
 8002184:	f000 f93b 	bl	80023fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002188:	4a06      	ldr	r2, [pc, #24]	@ (80021a4 <HAL_InitTick+0x68>)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800218e:	2300      	movs	r3, #0
 8002190:	e000      	b.n	8002194 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
}
 8002194:	4618      	mov	r0, r3
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	24000034 	.word	0x24000034
 80021a0:	24000000 	.word	0x24000000
 80021a4:	24000030 	.word	0x24000030

080021a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021ac:	4b06      	ldr	r3, [pc, #24]	@ (80021c8 <HAL_IncTick+0x20>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	461a      	mov	r2, r3
 80021b2:	4b06      	ldr	r3, [pc, #24]	@ (80021cc <HAL_IncTick+0x24>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4413      	add	r3, r2
 80021b8:	4a04      	ldr	r2, [pc, #16]	@ (80021cc <HAL_IncTick+0x24>)
 80021ba:	6013      	str	r3, [r2, #0]
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	24000034 	.word	0x24000034
 80021cc:	240008b0 	.word	0x240008b0

080021d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  return uwTick;
 80021d4:	4b03      	ldr	r3, [pc, #12]	@ (80021e4 <HAL_GetTick+0x14>)
 80021d6:	681b      	ldr	r3, [r3, #0]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	240008b0 	.word	0x240008b0

080021e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021f0:	f7ff ffee 	bl	80021d0 <HAL_GetTick>
 80021f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002200:	d005      	beq.n	800220e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002202:	4b0a      	ldr	r3, [pc, #40]	@ (800222c <HAL_Delay+0x44>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	461a      	mov	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4413      	add	r3, r2
 800220c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800220e:	bf00      	nop
 8002210:	f7ff ffde 	bl	80021d0 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	429a      	cmp	r2, r3
 800221e:	d8f7      	bhi.n	8002210 <HAL_Delay+0x28>
  {
  }
}
 8002220:	bf00      	nop
 8002222:	bf00      	nop
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	24000034 	.word	0x24000034

08002230 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002234:	4b03      	ldr	r3, [pc, #12]	@ (8002244 <HAL_GetREVID+0x14>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	0c1b      	lsrs	r3, r3, #16
}
 800223a:	4618      	mov	r0, r3
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	5c001000 	.word	0x5c001000

08002248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002258:	4b0b      	ldr	r3, [pc, #44]	@ (8002288 <__NVIC_SetPriorityGrouping+0x40>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002264:	4013      	ands	r3, r2
 8002266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002270:	4b06      	ldr	r3, [pc, #24]	@ (800228c <__NVIC_SetPriorityGrouping+0x44>)
 8002272:	4313      	orrs	r3, r2
 8002274:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002276:	4a04      	ldr	r2, [pc, #16]	@ (8002288 <__NVIC_SetPriorityGrouping+0x40>)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	60d3      	str	r3, [r2, #12]
}
 800227c:	bf00      	nop
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	e000ed00 	.word	0xe000ed00
 800228c:	05fa0000 	.word	0x05fa0000

08002290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002294:	4b04      	ldr	r3, [pc, #16]	@ (80022a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	0a1b      	lsrs	r3, r3, #8
 800229a:	f003 0307 	and.w	r3, r3, #7
}
 800229e:	4618      	mov	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80022b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	db0b      	blt.n	80022d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022be:	88fb      	ldrh	r3, [r7, #6]
 80022c0:	f003 021f 	and.w	r2, r3, #31
 80022c4:	4907      	ldr	r1, [pc, #28]	@ (80022e4 <__NVIC_EnableIRQ+0x38>)
 80022c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022ca:	095b      	lsrs	r3, r3, #5
 80022cc:	2001      	movs	r0, #1
 80022ce:	fa00 f202 	lsl.w	r2, r0, r2
 80022d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	e000e100 	.word	0xe000e100

080022e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	6039      	str	r1, [r7, #0]
 80022f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80022f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	db0a      	blt.n	8002312 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	490c      	ldr	r1, [pc, #48]	@ (8002334 <__NVIC_SetPriority+0x4c>)
 8002302:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002306:	0112      	lsls	r2, r2, #4
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	440b      	add	r3, r1
 800230c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002310:	e00a      	b.n	8002328 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	b2da      	uxtb	r2, r3
 8002316:	4908      	ldr	r1, [pc, #32]	@ (8002338 <__NVIC_SetPriority+0x50>)
 8002318:	88fb      	ldrh	r3, [r7, #6]
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	3b04      	subs	r3, #4
 8002320:	0112      	lsls	r2, r2, #4
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	440b      	add	r3, r1
 8002326:	761a      	strb	r2, [r3, #24]
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	e000e100 	.word	0xe000e100
 8002338:	e000ed00 	.word	0xe000ed00

0800233c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800233c:	b480      	push	{r7}
 800233e:	b089      	sub	sp, #36	@ 0x24
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f1c3 0307 	rsb	r3, r3, #7
 8002356:	2b04      	cmp	r3, #4
 8002358:	bf28      	it	cs
 800235a:	2304      	movcs	r3, #4
 800235c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	3304      	adds	r3, #4
 8002362:	2b06      	cmp	r3, #6
 8002364:	d902      	bls.n	800236c <NVIC_EncodePriority+0x30>
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	3b03      	subs	r3, #3
 800236a:	e000      	b.n	800236e <NVIC_EncodePriority+0x32>
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002370:	f04f 32ff 	mov.w	r2, #4294967295
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43da      	mvns	r2, r3
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	401a      	ands	r2, r3
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002384:	f04f 31ff 	mov.w	r1, #4294967295
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	fa01 f303 	lsl.w	r3, r1, r3
 800238e:	43d9      	mvns	r1, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002394:	4313      	orrs	r3, r2
         );
}
 8002396:	4618      	mov	r0, r3
 8002398:	3724      	adds	r7, #36	@ 0x24
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
	...

080023a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3b01      	subs	r3, #1
 80023b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023b4:	d301      	bcc.n	80023ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023b6:	2301      	movs	r3, #1
 80023b8:	e00f      	b.n	80023da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ba:	4a0a      	ldr	r2, [pc, #40]	@ (80023e4 <SysTick_Config+0x40>)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3b01      	subs	r3, #1
 80023c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023c2:	210f      	movs	r1, #15
 80023c4:	f04f 30ff 	mov.w	r0, #4294967295
 80023c8:	f7ff ff8e 	bl	80022e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023cc:	4b05      	ldr	r3, [pc, #20]	@ (80023e4 <SysTick_Config+0x40>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023d2:	4b04      	ldr	r3, [pc, #16]	@ (80023e4 <SysTick_Config+0x40>)
 80023d4:	2207      	movs	r2, #7
 80023d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	e000e010 	.word	0xe000e010

080023e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f7ff ff29 	bl	8002248 <__NVIC_SetPriorityGrouping>
}
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b086      	sub	sp, #24
 8002402:	af00      	add	r7, sp, #0
 8002404:	4603      	mov	r3, r0
 8002406:	60b9      	str	r1, [r7, #8]
 8002408:	607a      	str	r2, [r7, #4]
 800240a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800240c:	f7ff ff40 	bl	8002290 <__NVIC_GetPriorityGrouping>
 8002410:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	68b9      	ldr	r1, [r7, #8]
 8002416:	6978      	ldr	r0, [r7, #20]
 8002418:	f7ff ff90 	bl	800233c <NVIC_EncodePriority>
 800241c:	4602      	mov	r2, r0
 800241e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002422:	4611      	mov	r1, r2
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff ff5f 	bl	80022e8 <__NVIC_SetPriority>
}
 800242a:	bf00      	nop
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b082      	sub	sp, #8
 8002436:	af00      	add	r7, sp, #0
 8002438:	4603      	mov	r3, r0
 800243a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800243c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff ff33 	bl	80022ac <__NVIC_EnableIRQ>
}
 8002446:	bf00      	nop
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff ffa4 	bl	80023a4 <SysTick_Config>
 800245c:	4603      	mov	r3, r0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 800246c:	4b07      	ldr	r3, [pc, #28]	@ (800248c <HAL_GetCurrentCPUID+0x24>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	091b      	lsrs	r3, r3, #4
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	2b07      	cmp	r3, #7
 8002478:	d101      	bne.n	800247e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 800247a:	2303      	movs	r3, #3
 800247c:	e000      	b.n	8002480 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 800247e:	2301      	movs	r3, #1
  }
}
 8002480:	4618      	mov	r0, r3
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002498:	f7ff fe9a 	bl	80021d0 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e316      	b.n	8002ad6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a66      	ldr	r2, [pc, #408]	@ (8002648 <HAL_DMA_Init+0x1b8>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d04a      	beq.n	8002548 <HAL_DMA_Init+0xb8>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a65      	ldr	r2, [pc, #404]	@ (800264c <HAL_DMA_Init+0x1bc>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d045      	beq.n	8002548 <HAL_DMA_Init+0xb8>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a63      	ldr	r2, [pc, #396]	@ (8002650 <HAL_DMA_Init+0x1c0>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d040      	beq.n	8002548 <HAL_DMA_Init+0xb8>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a62      	ldr	r2, [pc, #392]	@ (8002654 <HAL_DMA_Init+0x1c4>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d03b      	beq.n	8002548 <HAL_DMA_Init+0xb8>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a60      	ldr	r2, [pc, #384]	@ (8002658 <HAL_DMA_Init+0x1c8>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d036      	beq.n	8002548 <HAL_DMA_Init+0xb8>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a5f      	ldr	r2, [pc, #380]	@ (800265c <HAL_DMA_Init+0x1cc>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d031      	beq.n	8002548 <HAL_DMA_Init+0xb8>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a5d      	ldr	r2, [pc, #372]	@ (8002660 <HAL_DMA_Init+0x1d0>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d02c      	beq.n	8002548 <HAL_DMA_Init+0xb8>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a5c      	ldr	r2, [pc, #368]	@ (8002664 <HAL_DMA_Init+0x1d4>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d027      	beq.n	8002548 <HAL_DMA_Init+0xb8>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a5a      	ldr	r2, [pc, #360]	@ (8002668 <HAL_DMA_Init+0x1d8>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d022      	beq.n	8002548 <HAL_DMA_Init+0xb8>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a59      	ldr	r2, [pc, #356]	@ (800266c <HAL_DMA_Init+0x1dc>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d01d      	beq.n	8002548 <HAL_DMA_Init+0xb8>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a57      	ldr	r2, [pc, #348]	@ (8002670 <HAL_DMA_Init+0x1e0>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d018      	beq.n	8002548 <HAL_DMA_Init+0xb8>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a56      	ldr	r2, [pc, #344]	@ (8002674 <HAL_DMA_Init+0x1e4>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d013      	beq.n	8002548 <HAL_DMA_Init+0xb8>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a54      	ldr	r2, [pc, #336]	@ (8002678 <HAL_DMA_Init+0x1e8>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d00e      	beq.n	8002548 <HAL_DMA_Init+0xb8>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a53      	ldr	r2, [pc, #332]	@ (800267c <HAL_DMA_Init+0x1ec>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d009      	beq.n	8002548 <HAL_DMA_Init+0xb8>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a51      	ldr	r2, [pc, #324]	@ (8002680 <HAL_DMA_Init+0x1f0>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d004      	beq.n	8002548 <HAL_DMA_Init+0xb8>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a50      	ldr	r2, [pc, #320]	@ (8002684 <HAL_DMA_Init+0x1f4>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d101      	bne.n	800254c <HAL_DMA_Init+0xbc>
 8002548:	2301      	movs	r3, #1
 800254a:	e000      	b.n	800254e <HAL_DMA_Init+0xbe>
 800254c:	2300      	movs	r3, #0
 800254e:	2b00      	cmp	r3, #0
 8002550:	f000 813b 	beq.w	80027ca <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2202      	movs	r2, #2
 8002558:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a37      	ldr	r2, [pc, #220]	@ (8002648 <HAL_DMA_Init+0x1b8>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d04a      	beq.n	8002604 <HAL_DMA_Init+0x174>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a36      	ldr	r2, [pc, #216]	@ (800264c <HAL_DMA_Init+0x1bc>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d045      	beq.n	8002604 <HAL_DMA_Init+0x174>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a34      	ldr	r2, [pc, #208]	@ (8002650 <HAL_DMA_Init+0x1c0>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d040      	beq.n	8002604 <HAL_DMA_Init+0x174>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a33      	ldr	r2, [pc, #204]	@ (8002654 <HAL_DMA_Init+0x1c4>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d03b      	beq.n	8002604 <HAL_DMA_Init+0x174>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a31      	ldr	r2, [pc, #196]	@ (8002658 <HAL_DMA_Init+0x1c8>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d036      	beq.n	8002604 <HAL_DMA_Init+0x174>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a30      	ldr	r2, [pc, #192]	@ (800265c <HAL_DMA_Init+0x1cc>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d031      	beq.n	8002604 <HAL_DMA_Init+0x174>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a2e      	ldr	r2, [pc, #184]	@ (8002660 <HAL_DMA_Init+0x1d0>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d02c      	beq.n	8002604 <HAL_DMA_Init+0x174>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a2d      	ldr	r2, [pc, #180]	@ (8002664 <HAL_DMA_Init+0x1d4>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d027      	beq.n	8002604 <HAL_DMA_Init+0x174>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a2b      	ldr	r2, [pc, #172]	@ (8002668 <HAL_DMA_Init+0x1d8>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d022      	beq.n	8002604 <HAL_DMA_Init+0x174>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a2a      	ldr	r2, [pc, #168]	@ (800266c <HAL_DMA_Init+0x1dc>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d01d      	beq.n	8002604 <HAL_DMA_Init+0x174>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a28      	ldr	r2, [pc, #160]	@ (8002670 <HAL_DMA_Init+0x1e0>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d018      	beq.n	8002604 <HAL_DMA_Init+0x174>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a27      	ldr	r2, [pc, #156]	@ (8002674 <HAL_DMA_Init+0x1e4>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d013      	beq.n	8002604 <HAL_DMA_Init+0x174>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a25      	ldr	r2, [pc, #148]	@ (8002678 <HAL_DMA_Init+0x1e8>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d00e      	beq.n	8002604 <HAL_DMA_Init+0x174>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a24      	ldr	r2, [pc, #144]	@ (800267c <HAL_DMA_Init+0x1ec>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d009      	beq.n	8002604 <HAL_DMA_Init+0x174>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a22      	ldr	r2, [pc, #136]	@ (8002680 <HAL_DMA_Init+0x1f0>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d004      	beq.n	8002604 <HAL_DMA_Init+0x174>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a21      	ldr	r2, [pc, #132]	@ (8002684 <HAL_DMA_Init+0x1f4>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d108      	bne.n	8002616 <HAL_DMA_Init+0x186>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 0201 	bic.w	r2, r2, #1
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	e007      	b.n	8002626 <HAL_DMA_Init+0x196>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0201 	bic.w	r2, r2, #1
 8002624:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002626:	e02f      	b.n	8002688 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002628:	f7ff fdd2 	bl	80021d0 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b05      	cmp	r3, #5
 8002634:	d928      	bls.n	8002688 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2220      	movs	r2, #32
 800263a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2203      	movs	r2, #3
 8002640:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e246      	b.n	8002ad6 <HAL_DMA_Init+0x646>
 8002648:	40020010 	.word	0x40020010
 800264c:	40020028 	.word	0x40020028
 8002650:	40020040 	.word	0x40020040
 8002654:	40020058 	.word	0x40020058
 8002658:	40020070 	.word	0x40020070
 800265c:	40020088 	.word	0x40020088
 8002660:	400200a0 	.word	0x400200a0
 8002664:	400200b8 	.word	0x400200b8
 8002668:	40020410 	.word	0x40020410
 800266c:	40020428 	.word	0x40020428
 8002670:	40020440 	.word	0x40020440
 8002674:	40020458 	.word	0x40020458
 8002678:	40020470 	.word	0x40020470
 800267c:	40020488 	.word	0x40020488
 8002680:	400204a0 	.word	0x400204a0
 8002684:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1c8      	bne.n	8002628 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	4b83      	ldr	r3, [pc, #524]	@ (80028b0 <HAL_DMA_Init+0x420>)
 80026a2:	4013      	ands	r3, r2
 80026a4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80026ae:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ba:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026c6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d8:	2b04      	cmp	r3, #4
 80026da:	d107      	bne.n	80026ec <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e4:	4313      	orrs	r3, r2
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80026ec:	4b71      	ldr	r3, [pc, #452]	@ (80028b4 <HAL_DMA_Init+0x424>)
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	4b71      	ldr	r3, [pc, #452]	@ (80028b8 <HAL_DMA_Init+0x428>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80026f8:	d328      	bcc.n	800274c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b28      	cmp	r3, #40	@ 0x28
 8002700:	d903      	bls.n	800270a <HAL_DMA_Init+0x27a>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b2e      	cmp	r3, #46	@ 0x2e
 8002708:	d917      	bls.n	800273a <HAL_DMA_Init+0x2aa>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002710:	d903      	bls.n	800271a <HAL_DMA_Init+0x28a>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b42      	cmp	r3, #66	@ 0x42
 8002718:	d90f      	bls.n	800273a <HAL_DMA_Init+0x2aa>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b46      	cmp	r3, #70	@ 0x46
 8002720:	d903      	bls.n	800272a <HAL_DMA_Init+0x29a>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b48      	cmp	r3, #72	@ 0x48
 8002728:	d907      	bls.n	800273a <HAL_DMA_Init+0x2aa>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b4e      	cmp	r3, #78	@ 0x4e
 8002730:	d905      	bls.n	800273e <HAL_DMA_Init+0x2ae>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b52      	cmp	r3, #82	@ 0x52
 8002738:	d801      	bhi.n	800273e <HAL_DMA_Init+0x2ae>
 800273a:	2301      	movs	r3, #1
 800273c:	e000      	b.n	8002740 <HAL_DMA_Init+0x2b0>
 800273e:	2300      	movs	r3, #0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800274a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	f023 0307 	bic.w	r3, r3, #7
 8002762:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	4313      	orrs	r3, r2
 800276c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002772:	2b04      	cmp	r3, #4
 8002774:	d117      	bne.n	80027a6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	4313      	orrs	r3, r2
 800277e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00e      	beq.n	80027a6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f001 fdcf 	bl	800432c <DMA_CheckFifoParam>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d008      	beq.n	80027a6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2240      	movs	r2, #64	@ 0x40
 8002798:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e197      	b.n	8002ad6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f001 fd0a 	bl	80041c8 <DMA_CalcBaseAndBitshift>
 80027b4:	4603      	mov	r3, r0
 80027b6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027bc:	f003 031f 	and.w	r3, r3, #31
 80027c0:	223f      	movs	r2, #63	@ 0x3f
 80027c2:	409a      	lsls	r2, r3
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	609a      	str	r2, [r3, #8]
 80027c8:	e0cd      	b.n	8002966 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a3b      	ldr	r2, [pc, #236]	@ (80028bc <HAL_DMA_Init+0x42c>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d022      	beq.n	800281a <HAL_DMA_Init+0x38a>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a39      	ldr	r2, [pc, #228]	@ (80028c0 <HAL_DMA_Init+0x430>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d01d      	beq.n	800281a <HAL_DMA_Init+0x38a>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a38      	ldr	r2, [pc, #224]	@ (80028c4 <HAL_DMA_Init+0x434>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d018      	beq.n	800281a <HAL_DMA_Init+0x38a>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a36      	ldr	r2, [pc, #216]	@ (80028c8 <HAL_DMA_Init+0x438>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d013      	beq.n	800281a <HAL_DMA_Init+0x38a>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a35      	ldr	r2, [pc, #212]	@ (80028cc <HAL_DMA_Init+0x43c>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d00e      	beq.n	800281a <HAL_DMA_Init+0x38a>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a33      	ldr	r2, [pc, #204]	@ (80028d0 <HAL_DMA_Init+0x440>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d009      	beq.n	800281a <HAL_DMA_Init+0x38a>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a32      	ldr	r2, [pc, #200]	@ (80028d4 <HAL_DMA_Init+0x444>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d004      	beq.n	800281a <HAL_DMA_Init+0x38a>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a30      	ldr	r2, [pc, #192]	@ (80028d8 <HAL_DMA_Init+0x448>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d101      	bne.n	800281e <HAL_DMA_Init+0x38e>
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <HAL_DMA_Init+0x390>
 800281e:	2300      	movs	r3, #0
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 8097 	beq.w	8002954 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a24      	ldr	r2, [pc, #144]	@ (80028bc <HAL_DMA_Init+0x42c>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d021      	beq.n	8002874 <HAL_DMA_Init+0x3e4>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a22      	ldr	r2, [pc, #136]	@ (80028c0 <HAL_DMA_Init+0x430>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d01c      	beq.n	8002874 <HAL_DMA_Init+0x3e4>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a21      	ldr	r2, [pc, #132]	@ (80028c4 <HAL_DMA_Init+0x434>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d017      	beq.n	8002874 <HAL_DMA_Init+0x3e4>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a1f      	ldr	r2, [pc, #124]	@ (80028c8 <HAL_DMA_Init+0x438>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d012      	beq.n	8002874 <HAL_DMA_Init+0x3e4>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a1e      	ldr	r2, [pc, #120]	@ (80028cc <HAL_DMA_Init+0x43c>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d00d      	beq.n	8002874 <HAL_DMA_Init+0x3e4>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a1c      	ldr	r2, [pc, #112]	@ (80028d0 <HAL_DMA_Init+0x440>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d008      	beq.n	8002874 <HAL_DMA_Init+0x3e4>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a1b      	ldr	r2, [pc, #108]	@ (80028d4 <HAL_DMA_Init+0x444>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d003      	beq.n	8002874 <HAL_DMA_Init+0x3e4>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a19      	ldr	r2, [pc, #100]	@ (80028d8 <HAL_DMA_Init+0x448>)
 8002872:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2202      	movs	r2, #2
 8002878:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	4b13      	ldr	r3, [pc, #76]	@ (80028dc <HAL_DMA_Init+0x44c>)
 8002890:	4013      	ands	r3, r2
 8002892:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	2b40      	cmp	r3, #64	@ 0x40
 800289a:	d021      	beq.n	80028e0 <HAL_DMA_Init+0x450>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	2b80      	cmp	r3, #128	@ 0x80
 80028a2:	d102      	bne.n	80028aa <HAL_DMA_Init+0x41a>
 80028a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80028a8:	e01b      	b.n	80028e2 <HAL_DMA_Init+0x452>
 80028aa:	2300      	movs	r3, #0
 80028ac:	e019      	b.n	80028e2 <HAL_DMA_Init+0x452>
 80028ae:	bf00      	nop
 80028b0:	fe10803f 	.word	0xfe10803f
 80028b4:	5c001000 	.word	0x5c001000
 80028b8:	ffff0000 	.word	0xffff0000
 80028bc:	58025408 	.word	0x58025408
 80028c0:	5802541c 	.word	0x5802541c
 80028c4:	58025430 	.word	0x58025430
 80028c8:	58025444 	.word	0x58025444
 80028cc:	58025458 	.word	0x58025458
 80028d0:	5802546c 	.word	0x5802546c
 80028d4:	58025480 	.word	0x58025480
 80028d8:	58025494 	.word	0x58025494
 80028dc:	fffe000f 	.word	0xfffe000f
 80028e0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	68d2      	ldr	r2, [r2, #12]
 80028e6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80028e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80028f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80028f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002900:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002908:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002910:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	4313      	orrs	r3, r2
 8002916:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	461a      	mov	r2, r3
 8002926:	4b6e      	ldr	r3, [pc, #440]	@ (8002ae0 <HAL_DMA_Init+0x650>)
 8002928:	4413      	add	r3, r2
 800292a:	4a6e      	ldr	r2, [pc, #440]	@ (8002ae4 <HAL_DMA_Init+0x654>)
 800292c:	fba2 2303 	umull	r2, r3, r2, r3
 8002930:	091b      	lsrs	r3, r3, #4
 8002932:	009a      	lsls	r2, r3, #2
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f001 fc45 	bl	80041c8 <DMA_CalcBaseAndBitshift>
 800293e:	4603      	mov	r3, r0
 8002940:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002946:	f003 031f 	and.w	r3, r3, #31
 800294a:	2201      	movs	r2, #1
 800294c:	409a      	lsls	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	e008      	b.n	8002966 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2240      	movs	r2, #64	@ 0x40
 8002958:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2203      	movs	r2, #3
 800295e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e0b7      	b.n	8002ad6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a5f      	ldr	r2, [pc, #380]	@ (8002ae8 <HAL_DMA_Init+0x658>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d072      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a5d      	ldr	r2, [pc, #372]	@ (8002aec <HAL_DMA_Init+0x65c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d06d      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a5c      	ldr	r2, [pc, #368]	@ (8002af0 <HAL_DMA_Init+0x660>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d068      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a5a      	ldr	r2, [pc, #360]	@ (8002af4 <HAL_DMA_Init+0x664>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d063      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a59      	ldr	r2, [pc, #356]	@ (8002af8 <HAL_DMA_Init+0x668>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d05e      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a57      	ldr	r2, [pc, #348]	@ (8002afc <HAL_DMA_Init+0x66c>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d059      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a56      	ldr	r2, [pc, #344]	@ (8002b00 <HAL_DMA_Init+0x670>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d054      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a54      	ldr	r2, [pc, #336]	@ (8002b04 <HAL_DMA_Init+0x674>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d04f      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a53      	ldr	r2, [pc, #332]	@ (8002b08 <HAL_DMA_Init+0x678>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d04a      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a51      	ldr	r2, [pc, #324]	@ (8002b0c <HAL_DMA_Init+0x67c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d045      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a50      	ldr	r2, [pc, #320]	@ (8002b10 <HAL_DMA_Init+0x680>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d040      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a4e      	ldr	r2, [pc, #312]	@ (8002b14 <HAL_DMA_Init+0x684>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d03b      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a4d      	ldr	r2, [pc, #308]	@ (8002b18 <HAL_DMA_Init+0x688>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d036      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a4b      	ldr	r2, [pc, #300]	@ (8002b1c <HAL_DMA_Init+0x68c>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d031      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a4a      	ldr	r2, [pc, #296]	@ (8002b20 <HAL_DMA_Init+0x690>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d02c      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a48      	ldr	r2, [pc, #288]	@ (8002b24 <HAL_DMA_Init+0x694>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d027      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a47      	ldr	r2, [pc, #284]	@ (8002b28 <HAL_DMA_Init+0x698>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d022      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a45      	ldr	r2, [pc, #276]	@ (8002b2c <HAL_DMA_Init+0x69c>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d01d      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a44      	ldr	r2, [pc, #272]	@ (8002b30 <HAL_DMA_Init+0x6a0>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d018      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a42      	ldr	r2, [pc, #264]	@ (8002b34 <HAL_DMA_Init+0x6a4>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d013      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a41      	ldr	r2, [pc, #260]	@ (8002b38 <HAL_DMA_Init+0x6a8>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d00e      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a3f      	ldr	r2, [pc, #252]	@ (8002b3c <HAL_DMA_Init+0x6ac>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d009      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a3e      	ldr	r2, [pc, #248]	@ (8002b40 <HAL_DMA_Init+0x6b0>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d004      	beq.n	8002a56 <HAL_DMA_Init+0x5c6>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a3c      	ldr	r2, [pc, #240]	@ (8002b44 <HAL_DMA_Init+0x6b4>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d101      	bne.n	8002a5a <HAL_DMA_Init+0x5ca>
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <HAL_DMA_Init+0x5cc>
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d032      	beq.n	8002ac6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f001 fcdf 	bl	8004424 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	2b80      	cmp	r3, #128	@ 0x80
 8002a6c:	d102      	bne.n	8002a74 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002a88:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d010      	beq.n	8002ab4 <HAL_DMA_Init+0x624>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b08      	cmp	r3, #8
 8002a98:	d80c      	bhi.n	8002ab4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f001 fd5c 	bl	8004558 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	e008      	b.n	8002ac6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3718      	adds	r7, #24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	a7fdabf8 	.word	0xa7fdabf8
 8002ae4:	cccccccd 	.word	0xcccccccd
 8002ae8:	40020010 	.word	0x40020010
 8002aec:	40020028 	.word	0x40020028
 8002af0:	40020040 	.word	0x40020040
 8002af4:	40020058 	.word	0x40020058
 8002af8:	40020070 	.word	0x40020070
 8002afc:	40020088 	.word	0x40020088
 8002b00:	400200a0 	.word	0x400200a0
 8002b04:	400200b8 	.word	0x400200b8
 8002b08:	40020410 	.word	0x40020410
 8002b0c:	40020428 	.word	0x40020428
 8002b10:	40020440 	.word	0x40020440
 8002b14:	40020458 	.word	0x40020458
 8002b18:	40020470 	.word	0x40020470
 8002b1c:	40020488 	.word	0x40020488
 8002b20:	400204a0 	.word	0x400204a0
 8002b24:	400204b8 	.word	0x400204b8
 8002b28:	58025408 	.word	0x58025408
 8002b2c:	5802541c 	.word	0x5802541c
 8002b30:	58025430 	.word	0x58025430
 8002b34:	58025444 	.word	0x58025444
 8002b38:	58025458 	.word	0x58025458
 8002b3c:	5802546c 	.word	0x5802546c
 8002b40:	58025480 	.word	0x58025480
 8002b44:	58025494 	.word	0x58025494

08002b48 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
 8002b54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b56:	2300      	movs	r3, #0
 8002b58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e226      	b.n	8002fb2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d101      	bne.n	8002b72 <HAL_DMA_Start_IT+0x2a>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	e21f      	b.n	8002fb2 <HAL_DMA_Start_IT+0x46a>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	f040 820a 	bne.w	8002f9c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a68      	ldr	r2, [pc, #416]	@ (8002d3c <HAL_DMA_Start_IT+0x1f4>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d04a      	beq.n	8002c36 <HAL_DMA_Start_IT+0xee>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a66      	ldr	r2, [pc, #408]	@ (8002d40 <HAL_DMA_Start_IT+0x1f8>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d045      	beq.n	8002c36 <HAL_DMA_Start_IT+0xee>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a65      	ldr	r2, [pc, #404]	@ (8002d44 <HAL_DMA_Start_IT+0x1fc>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d040      	beq.n	8002c36 <HAL_DMA_Start_IT+0xee>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a63      	ldr	r2, [pc, #396]	@ (8002d48 <HAL_DMA_Start_IT+0x200>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d03b      	beq.n	8002c36 <HAL_DMA_Start_IT+0xee>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a62      	ldr	r2, [pc, #392]	@ (8002d4c <HAL_DMA_Start_IT+0x204>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d036      	beq.n	8002c36 <HAL_DMA_Start_IT+0xee>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a60      	ldr	r2, [pc, #384]	@ (8002d50 <HAL_DMA_Start_IT+0x208>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d031      	beq.n	8002c36 <HAL_DMA_Start_IT+0xee>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a5f      	ldr	r2, [pc, #380]	@ (8002d54 <HAL_DMA_Start_IT+0x20c>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d02c      	beq.n	8002c36 <HAL_DMA_Start_IT+0xee>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a5d      	ldr	r2, [pc, #372]	@ (8002d58 <HAL_DMA_Start_IT+0x210>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d027      	beq.n	8002c36 <HAL_DMA_Start_IT+0xee>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a5c      	ldr	r2, [pc, #368]	@ (8002d5c <HAL_DMA_Start_IT+0x214>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d022      	beq.n	8002c36 <HAL_DMA_Start_IT+0xee>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a5a      	ldr	r2, [pc, #360]	@ (8002d60 <HAL_DMA_Start_IT+0x218>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d01d      	beq.n	8002c36 <HAL_DMA_Start_IT+0xee>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a59      	ldr	r2, [pc, #356]	@ (8002d64 <HAL_DMA_Start_IT+0x21c>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d018      	beq.n	8002c36 <HAL_DMA_Start_IT+0xee>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a57      	ldr	r2, [pc, #348]	@ (8002d68 <HAL_DMA_Start_IT+0x220>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d013      	beq.n	8002c36 <HAL_DMA_Start_IT+0xee>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a56      	ldr	r2, [pc, #344]	@ (8002d6c <HAL_DMA_Start_IT+0x224>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d00e      	beq.n	8002c36 <HAL_DMA_Start_IT+0xee>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a54      	ldr	r2, [pc, #336]	@ (8002d70 <HAL_DMA_Start_IT+0x228>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d009      	beq.n	8002c36 <HAL_DMA_Start_IT+0xee>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a53      	ldr	r2, [pc, #332]	@ (8002d74 <HAL_DMA_Start_IT+0x22c>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d004      	beq.n	8002c36 <HAL_DMA_Start_IT+0xee>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a51      	ldr	r2, [pc, #324]	@ (8002d78 <HAL_DMA_Start_IT+0x230>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d108      	bne.n	8002c48 <HAL_DMA_Start_IT+0x100>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 0201 	bic.w	r2, r2, #1
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	e007      	b.n	8002c58 <HAL_DMA_Start_IT+0x110>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0201 	bic.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	68b9      	ldr	r1, [r7, #8]
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f001 f906 	bl	8003e70 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a34      	ldr	r2, [pc, #208]	@ (8002d3c <HAL_DMA_Start_IT+0x1f4>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d04a      	beq.n	8002d04 <HAL_DMA_Start_IT+0x1bc>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a33      	ldr	r2, [pc, #204]	@ (8002d40 <HAL_DMA_Start_IT+0x1f8>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d045      	beq.n	8002d04 <HAL_DMA_Start_IT+0x1bc>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a31      	ldr	r2, [pc, #196]	@ (8002d44 <HAL_DMA_Start_IT+0x1fc>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d040      	beq.n	8002d04 <HAL_DMA_Start_IT+0x1bc>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a30      	ldr	r2, [pc, #192]	@ (8002d48 <HAL_DMA_Start_IT+0x200>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d03b      	beq.n	8002d04 <HAL_DMA_Start_IT+0x1bc>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a2e      	ldr	r2, [pc, #184]	@ (8002d4c <HAL_DMA_Start_IT+0x204>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d036      	beq.n	8002d04 <HAL_DMA_Start_IT+0x1bc>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a2d      	ldr	r2, [pc, #180]	@ (8002d50 <HAL_DMA_Start_IT+0x208>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d031      	beq.n	8002d04 <HAL_DMA_Start_IT+0x1bc>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a2b      	ldr	r2, [pc, #172]	@ (8002d54 <HAL_DMA_Start_IT+0x20c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d02c      	beq.n	8002d04 <HAL_DMA_Start_IT+0x1bc>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a2a      	ldr	r2, [pc, #168]	@ (8002d58 <HAL_DMA_Start_IT+0x210>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d027      	beq.n	8002d04 <HAL_DMA_Start_IT+0x1bc>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a28      	ldr	r2, [pc, #160]	@ (8002d5c <HAL_DMA_Start_IT+0x214>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d022      	beq.n	8002d04 <HAL_DMA_Start_IT+0x1bc>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a27      	ldr	r2, [pc, #156]	@ (8002d60 <HAL_DMA_Start_IT+0x218>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d01d      	beq.n	8002d04 <HAL_DMA_Start_IT+0x1bc>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a25      	ldr	r2, [pc, #148]	@ (8002d64 <HAL_DMA_Start_IT+0x21c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d018      	beq.n	8002d04 <HAL_DMA_Start_IT+0x1bc>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a24      	ldr	r2, [pc, #144]	@ (8002d68 <HAL_DMA_Start_IT+0x220>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d013      	beq.n	8002d04 <HAL_DMA_Start_IT+0x1bc>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a22      	ldr	r2, [pc, #136]	@ (8002d6c <HAL_DMA_Start_IT+0x224>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d00e      	beq.n	8002d04 <HAL_DMA_Start_IT+0x1bc>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a21      	ldr	r2, [pc, #132]	@ (8002d70 <HAL_DMA_Start_IT+0x228>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d009      	beq.n	8002d04 <HAL_DMA_Start_IT+0x1bc>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a1f      	ldr	r2, [pc, #124]	@ (8002d74 <HAL_DMA_Start_IT+0x22c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d004      	beq.n	8002d04 <HAL_DMA_Start_IT+0x1bc>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a1e      	ldr	r2, [pc, #120]	@ (8002d78 <HAL_DMA_Start_IT+0x230>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d101      	bne.n	8002d08 <HAL_DMA_Start_IT+0x1c0>
 8002d04:	2301      	movs	r3, #1
 8002d06:	e000      	b.n	8002d0a <HAL_DMA_Start_IT+0x1c2>
 8002d08:	2300      	movs	r3, #0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d036      	beq.n	8002d7c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f023 021e 	bic.w	r2, r3, #30
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f042 0216 	orr.w	r2, r2, #22
 8002d20:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d03e      	beq.n	8002da8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f042 0208 	orr.w	r2, r2, #8
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	e035      	b.n	8002da8 <HAL_DMA_Start_IT+0x260>
 8002d3c:	40020010 	.word	0x40020010
 8002d40:	40020028 	.word	0x40020028
 8002d44:	40020040 	.word	0x40020040
 8002d48:	40020058 	.word	0x40020058
 8002d4c:	40020070 	.word	0x40020070
 8002d50:	40020088 	.word	0x40020088
 8002d54:	400200a0 	.word	0x400200a0
 8002d58:	400200b8 	.word	0x400200b8
 8002d5c:	40020410 	.word	0x40020410
 8002d60:	40020428 	.word	0x40020428
 8002d64:	40020440 	.word	0x40020440
 8002d68:	40020458 	.word	0x40020458
 8002d6c:	40020470 	.word	0x40020470
 8002d70:	40020488 	.word	0x40020488
 8002d74:	400204a0 	.word	0x400204a0
 8002d78:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f023 020e 	bic.w	r2, r3, #14
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 020a 	orr.w	r2, r2, #10
 8002d8e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d007      	beq.n	8002da8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f042 0204 	orr.w	r2, r2, #4
 8002da6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a83      	ldr	r2, [pc, #524]	@ (8002fbc <HAL_DMA_Start_IT+0x474>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d072      	beq.n	8002e98 <HAL_DMA_Start_IT+0x350>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a82      	ldr	r2, [pc, #520]	@ (8002fc0 <HAL_DMA_Start_IT+0x478>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d06d      	beq.n	8002e98 <HAL_DMA_Start_IT+0x350>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a80      	ldr	r2, [pc, #512]	@ (8002fc4 <HAL_DMA_Start_IT+0x47c>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d068      	beq.n	8002e98 <HAL_DMA_Start_IT+0x350>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a7f      	ldr	r2, [pc, #508]	@ (8002fc8 <HAL_DMA_Start_IT+0x480>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d063      	beq.n	8002e98 <HAL_DMA_Start_IT+0x350>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a7d      	ldr	r2, [pc, #500]	@ (8002fcc <HAL_DMA_Start_IT+0x484>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d05e      	beq.n	8002e98 <HAL_DMA_Start_IT+0x350>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a7c      	ldr	r2, [pc, #496]	@ (8002fd0 <HAL_DMA_Start_IT+0x488>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d059      	beq.n	8002e98 <HAL_DMA_Start_IT+0x350>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a7a      	ldr	r2, [pc, #488]	@ (8002fd4 <HAL_DMA_Start_IT+0x48c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d054      	beq.n	8002e98 <HAL_DMA_Start_IT+0x350>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a79      	ldr	r2, [pc, #484]	@ (8002fd8 <HAL_DMA_Start_IT+0x490>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d04f      	beq.n	8002e98 <HAL_DMA_Start_IT+0x350>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a77      	ldr	r2, [pc, #476]	@ (8002fdc <HAL_DMA_Start_IT+0x494>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d04a      	beq.n	8002e98 <HAL_DMA_Start_IT+0x350>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a76      	ldr	r2, [pc, #472]	@ (8002fe0 <HAL_DMA_Start_IT+0x498>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d045      	beq.n	8002e98 <HAL_DMA_Start_IT+0x350>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a74      	ldr	r2, [pc, #464]	@ (8002fe4 <HAL_DMA_Start_IT+0x49c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d040      	beq.n	8002e98 <HAL_DMA_Start_IT+0x350>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a73      	ldr	r2, [pc, #460]	@ (8002fe8 <HAL_DMA_Start_IT+0x4a0>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d03b      	beq.n	8002e98 <HAL_DMA_Start_IT+0x350>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a71      	ldr	r2, [pc, #452]	@ (8002fec <HAL_DMA_Start_IT+0x4a4>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d036      	beq.n	8002e98 <HAL_DMA_Start_IT+0x350>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a70      	ldr	r2, [pc, #448]	@ (8002ff0 <HAL_DMA_Start_IT+0x4a8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d031      	beq.n	8002e98 <HAL_DMA_Start_IT+0x350>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a6e      	ldr	r2, [pc, #440]	@ (8002ff4 <HAL_DMA_Start_IT+0x4ac>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d02c      	beq.n	8002e98 <HAL_DMA_Start_IT+0x350>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a6d      	ldr	r2, [pc, #436]	@ (8002ff8 <HAL_DMA_Start_IT+0x4b0>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d027      	beq.n	8002e98 <HAL_DMA_Start_IT+0x350>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a6b      	ldr	r2, [pc, #428]	@ (8002ffc <HAL_DMA_Start_IT+0x4b4>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d022      	beq.n	8002e98 <HAL_DMA_Start_IT+0x350>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a6a      	ldr	r2, [pc, #424]	@ (8003000 <HAL_DMA_Start_IT+0x4b8>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d01d      	beq.n	8002e98 <HAL_DMA_Start_IT+0x350>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a68      	ldr	r2, [pc, #416]	@ (8003004 <HAL_DMA_Start_IT+0x4bc>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d018      	beq.n	8002e98 <HAL_DMA_Start_IT+0x350>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a67      	ldr	r2, [pc, #412]	@ (8003008 <HAL_DMA_Start_IT+0x4c0>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d013      	beq.n	8002e98 <HAL_DMA_Start_IT+0x350>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a65      	ldr	r2, [pc, #404]	@ (800300c <HAL_DMA_Start_IT+0x4c4>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d00e      	beq.n	8002e98 <HAL_DMA_Start_IT+0x350>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a64      	ldr	r2, [pc, #400]	@ (8003010 <HAL_DMA_Start_IT+0x4c8>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d009      	beq.n	8002e98 <HAL_DMA_Start_IT+0x350>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a62      	ldr	r2, [pc, #392]	@ (8003014 <HAL_DMA_Start_IT+0x4cc>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d004      	beq.n	8002e98 <HAL_DMA_Start_IT+0x350>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a61      	ldr	r2, [pc, #388]	@ (8003018 <HAL_DMA_Start_IT+0x4d0>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d101      	bne.n	8002e9c <HAL_DMA_Start_IT+0x354>
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e000      	b.n	8002e9e <HAL_DMA_Start_IT+0x356>
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d01a      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d007      	beq.n	8002ec0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ebe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d007      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ed2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ed6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a37      	ldr	r2, [pc, #220]	@ (8002fbc <HAL_DMA_Start_IT+0x474>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d04a      	beq.n	8002f78 <HAL_DMA_Start_IT+0x430>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a36      	ldr	r2, [pc, #216]	@ (8002fc0 <HAL_DMA_Start_IT+0x478>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d045      	beq.n	8002f78 <HAL_DMA_Start_IT+0x430>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a34      	ldr	r2, [pc, #208]	@ (8002fc4 <HAL_DMA_Start_IT+0x47c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d040      	beq.n	8002f78 <HAL_DMA_Start_IT+0x430>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a33      	ldr	r2, [pc, #204]	@ (8002fc8 <HAL_DMA_Start_IT+0x480>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d03b      	beq.n	8002f78 <HAL_DMA_Start_IT+0x430>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a31      	ldr	r2, [pc, #196]	@ (8002fcc <HAL_DMA_Start_IT+0x484>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d036      	beq.n	8002f78 <HAL_DMA_Start_IT+0x430>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a30      	ldr	r2, [pc, #192]	@ (8002fd0 <HAL_DMA_Start_IT+0x488>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d031      	beq.n	8002f78 <HAL_DMA_Start_IT+0x430>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a2e      	ldr	r2, [pc, #184]	@ (8002fd4 <HAL_DMA_Start_IT+0x48c>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d02c      	beq.n	8002f78 <HAL_DMA_Start_IT+0x430>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a2d      	ldr	r2, [pc, #180]	@ (8002fd8 <HAL_DMA_Start_IT+0x490>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d027      	beq.n	8002f78 <HAL_DMA_Start_IT+0x430>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a2b      	ldr	r2, [pc, #172]	@ (8002fdc <HAL_DMA_Start_IT+0x494>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d022      	beq.n	8002f78 <HAL_DMA_Start_IT+0x430>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a2a      	ldr	r2, [pc, #168]	@ (8002fe0 <HAL_DMA_Start_IT+0x498>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d01d      	beq.n	8002f78 <HAL_DMA_Start_IT+0x430>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a28      	ldr	r2, [pc, #160]	@ (8002fe4 <HAL_DMA_Start_IT+0x49c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d018      	beq.n	8002f78 <HAL_DMA_Start_IT+0x430>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a27      	ldr	r2, [pc, #156]	@ (8002fe8 <HAL_DMA_Start_IT+0x4a0>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d013      	beq.n	8002f78 <HAL_DMA_Start_IT+0x430>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a25      	ldr	r2, [pc, #148]	@ (8002fec <HAL_DMA_Start_IT+0x4a4>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d00e      	beq.n	8002f78 <HAL_DMA_Start_IT+0x430>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a24      	ldr	r2, [pc, #144]	@ (8002ff0 <HAL_DMA_Start_IT+0x4a8>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d009      	beq.n	8002f78 <HAL_DMA_Start_IT+0x430>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a22      	ldr	r2, [pc, #136]	@ (8002ff4 <HAL_DMA_Start_IT+0x4ac>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d004      	beq.n	8002f78 <HAL_DMA_Start_IT+0x430>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a21      	ldr	r2, [pc, #132]	@ (8002ff8 <HAL_DMA_Start_IT+0x4b0>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d108      	bne.n	8002f8a <HAL_DMA_Start_IT+0x442>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0201 	orr.w	r2, r2, #1
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	e012      	b.n	8002fb0 <HAL_DMA_Start_IT+0x468>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f042 0201 	orr.w	r2, r2, #1
 8002f98:	601a      	str	r2, [r3, #0]
 8002f9a:	e009      	b.n	8002fb0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002fa2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3718      	adds	r7, #24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40020010 	.word	0x40020010
 8002fc0:	40020028 	.word	0x40020028
 8002fc4:	40020040 	.word	0x40020040
 8002fc8:	40020058 	.word	0x40020058
 8002fcc:	40020070 	.word	0x40020070
 8002fd0:	40020088 	.word	0x40020088
 8002fd4:	400200a0 	.word	0x400200a0
 8002fd8:	400200b8 	.word	0x400200b8
 8002fdc:	40020410 	.word	0x40020410
 8002fe0:	40020428 	.word	0x40020428
 8002fe4:	40020440 	.word	0x40020440
 8002fe8:	40020458 	.word	0x40020458
 8002fec:	40020470 	.word	0x40020470
 8002ff0:	40020488 	.word	0x40020488
 8002ff4:	400204a0 	.word	0x400204a0
 8002ff8:	400204b8 	.word	0x400204b8
 8002ffc:	58025408 	.word	0x58025408
 8003000:	5802541c 	.word	0x5802541c
 8003004:	58025430 	.word	0x58025430
 8003008:	58025444 	.word	0x58025444
 800300c:	58025458 	.word	0x58025458
 8003010:	5802546c 	.word	0x5802546c
 8003014:	58025480 	.word	0x58025480
 8003018:	58025494 	.word	0x58025494

0800301c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b08a      	sub	sp, #40	@ 0x28
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003024:	2300      	movs	r3, #0
 8003026:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003028:	4b67      	ldr	r3, [pc, #412]	@ (80031c8 <HAL_DMA_IRQHandler+0x1ac>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a67      	ldr	r2, [pc, #412]	@ (80031cc <HAL_DMA_IRQHandler+0x1b0>)
 800302e:	fba2 2303 	umull	r2, r3, r2, r3
 8003032:	0a9b      	lsrs	r3, r3, #10
 8003034:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800303a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003040:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a5f      	ldr	r2, [pc, #380]	@ (80031d0 <HAL_DMA_IRQHandler+0x1b4>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d04a      	beq.n	80030ee <HAL_DMA_IRQHandler+0xd2>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a5d      	ldr	r2, [pc, #372]	@ (80031d4 <HAL_DMA_IRQHandler+0x1b8>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d045      	beq.n	80030ee <HAL_DMA_IRQHandler+0xd2>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a5c      	ldr	r2, [pc, #368]	@ (80031d8 <HAL_DMA_IRQHandler+0x1bc>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d040      	beq.n	80030ee <HAL_DMA_IRQHandler+0xd2>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a5a      	ldr	r2, [pc, #360]	@ (80031dc <HAL_DMA_IRQHandler+0x1c0>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d03b      	beq.n	80030ee <HAL_DMA_IRQHandler+0xd2>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a59      	ldr	r2, [pc, #356]	@ (80031e0 <HAL_DMA_IRQHandler+0x1c4>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d036      	beq.n	80030ee <HAL_DMA_IRQHandler+0xd2>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a57      	ldr	r2, [pc, #348]	@ (80031e4 <HAL_DMA_IRQHandler+0x1c8>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d031      	beq.n	80030ee <HAL_DMA_IRQHandler+0xd2>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a56      	ldr	r2, [pc, #344]	@ (80031e8 <HAL_DMA_IRQHandler+0x1cc>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d02c      	beq.n	80030ee <HAL_DMA_IRQHandler+0xd2>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a54      	ldr	r2, [pc, #336]	@ (80031ec <HAL_DMA_IRQHandler+0x1d0>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d027      	beq.n	80030ee <HAL_DMA_IRQHandler+0xd2>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a53      	ldr	r2, [pc, #332]	@ (80031f0 <HAL_DMA_IRQHandler+0x1d4>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d022      	beq.n	80030ee <HAL_DMA_IRQHandler+0xd2>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a51      	ldr	r2, [pc, #324]	@ (80031f4 <HAL_DMA_IRQHandler+0x1d8>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d01d      	beq.n	80030ee <HAL_DMA_IRQHandler+0xd2>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a50      	ldr	r2, [pc, #320]	@ (80031f8 <HAL_DMA_IRQHandler+0x1dc>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d018      	beq.n	80030ee <HAL_DMA_IRQHandler+0xd2>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a4e      	ldr	r2, [pc, #312]	@ (80031fc <HAL_DMA_IRQHandler+0x1e0>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d013      	beq.n	80030ee <HAL_DMA_IRQHandler+0xd2>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a4d      	ldr	r2, [pc, #308]	@ (8003200 <HAL_DMA_IRQHandler+0x1e4>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d00e      	beq.n	80030ee <HAL_DMA_IRQHandler+0xd2>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a4b      	ldr	r2, [pc, #300]	@ (8003204 <HAL_DMA_IRQHandler+0x1e8>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d009      	beq.n	80030ee <HAL_DMA_IRQHandler+0xd2>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a4a      	ldr	r2, [pc, #296]	@ (8003208 <HAL_DMA_IRQHandler+0x1ec>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d004      	beq.n	80030ee <HAL_DMA_IRQHandler+0xd2>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a48      	ldr	r2, [pc, #288]	@ (800320c <HAL_DMA_IRQHandler+0x1f0>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d101      	bne.n	80030f2 <HAL_DMA_IRQHandler+0xd6>
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <HAL_DMA_IRQHandler+0xd8>
 80030f2:	2300      	movs	r3, #0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 842b 	beq.w	8003950 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030fe:	f003 031f 	and.w	r3, r3, #31
 8003102:	2208      	movs	r2, #8
 8003104:	409a      	lsls	r2, r3
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	4013      	ands	r3, r2
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 80a2 	beq.w	8003254 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a2e      	ldr	r2, [pc, #184]	@ (80031d0 <HAL_DMA_IRQHandler+0x1b4>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d04a      	beq.n	80031b0 <HAL_DMA_IRQHandler+0x194>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a2d      	ldr	r2, [pc, #180]	@ (80031d4 <HAL_DMA_IRQHandler+0x1b8>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d045      	beq.n	80031b0 <HAL_DMA_IRQHandler+0x194>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a2b      	ldr	r2, [pc, #172]	@ (80031d8 <HAL_DMA_IRQHandler+0x1bc>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d040      	beq.n	80031b0 <HAL_DMA_IRQHandler+0x194>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a2a      	ldr	r2, [pc, #168]	@ (80031dc <HAL_DMA_IRQHandler+0x1c0>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d03b      	beq.n	80031b0 <HAL_DMA_IRQHandler+0x194>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a28      	ldr	r2, [pc, #160]	@ (80031e0 <HAL_DMA_IRQHandler+0x1c4>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d036      	beq.n	80031b0 <HAL_DMA_IRQHandler+0x194>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a27      	ldr	r2, [pc, #156]	@ (80031e4 <HAL_DMA_IRQHandler+0x1c8>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d031      	beq.n	80031b0 <HAL_DMA_IRQHandler+0x194>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a25      	ldr	r2, [pc, #148]	@ (80031e8 <HAL_DMA_IRQHandler+0x1cc>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d02c      	beq.n	80031b0 <HAL_DMA_IRQHandler+0x194>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a24      	ldr	r2, [pc, #144]	@ (80031ec <HAL_DMA_IRQHandler+0x1d0>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d027      	beq.n	80031b0 <HAL_DMA_IRQHandler+0x194>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a22      	ldr	r2, [pc, #136]	@ (80031f0 <HAL_DMA_IRQHandler+0x1d4>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d022      	beq.n	80031b0 <HAL_DMA_IRQHandler+0x194>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a21      	ldr	r2, [pc, #132]	@ (80031f4 <HAL_DMA_IRQHandler+0x1d8>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d01d      	beq.n	80031b0 <HAL_DMA_IRQHandler+0x194>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a1f      	ldr	r2, [pc, #124]	@ (80031f8 <HAL_DMA_IRQHandler+0x1dc>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d018      	beq.n	80031b0 <HAL_DMA_IRQHandler+0x194>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a1e      	ldr	r2, [pc, #120]	@ (80031fc <HAL_DMA_IRQHandler+0x1e0>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d013      	beq.n	80031b0 <HAL_DMA_IRQHandler+0x194>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a1c      	ldr	r2, [pc, #112]	@ (8003200 <HAL_DMA_IRQHandler+0x1e4>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d00e      	beq.n	80031b0 <HAL_DMA_IRQHandler+0x194>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a1b      	ldr	r2, [pc, #108]	@ (8003204 <HAL_DMA_IRQHandler+0x1e8>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d009      	beq.n	80031b0 <HAL_DMA_IRQHandler+0x194>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a19      	ldr	r2, [pc, #100]	@ (8003208 <HAL_DMA_IRQHandler+0x1ec>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d004      	beq.n	80031b0 <HAL_DMA_IRQHandler+0x194>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a18      	ldr	r2, [pc, #96]	@ (800320c <HAL_DMA_IRQHandler+0x1f0>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d12f      	bne.n	8003210 <HAL_DMA_IRQHandler+0x1f4>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0304 	and.w	r3, r3, #4
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	bf14      	ite	ne
 80031be:	2301      	movne	r3, #1
 80031c0:	2300      	moveq	r3, #0
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	e02e      	b.n	8003224 <HAL_DMA_IRQHandler+0x208>
 80031c6:	bf00      	nop
 80031c8:	24000000 	.word	0x24000000
 80031cc:	1b4e81b5 	.word	0x1b4e81b5
 80031d0:	40020010 	.word	0x40020010
 80031d4:	40020028 	.word	0x40020028
 80031d8:	40020040 	.word	0x40020040
 80031dc:	40020058 	.word	0x40020058
 80031e0:	40020070 	.word	0x40020070
 80031e4:	40020088 	.word	0x40020088
 80031e8:	400200a0 	.word	0x400200a0
 80031ec:	400200b8 	.word	0x400200b8
 80031f0:	40020410 	.word	0x40020410
 80031f4:	40020428 	.word	0x40020428
 80031f8:	40020440 	.word	0x40020440
 80031fc:	40020458 	.word	0x40020458
 8003200:	40020470 	.word	0x40020470
 8003204:	40020488 	.word	0x40020488
 8003208:	400204a0 	.word	0x400204a0
 800320c:	400204b8 	.word	0x400204b8
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	2b00      	cmp	r3, #0
 800321c:	bf14      	ite	ne
 800321e:	2301      	movne	r3, #1
 8003220:	2300      	moveq	r3, #0
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	d015      	beq.n	8003254 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 0204 	bic.w	r2, r2, #4
 8003236:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800323c:	f003 031f 	and.w	r3, r3, #31
 8003240:	2208      	movs	r2, #8
 8003242:	409a      	lsls	r2, r3
 8003244:	6a3b      	ldr	r3, [r7, #32]
 8003246:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800324c:	f043 0201 	orr.w	r2, r3, #1
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003258:	f003 031f 	and.w	r3, r3, #31
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	fa22 f303 	lsr.w	r3, r2, r3
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	d06e      	beq.n	8003348 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a69      	ldr	r2, [pc, #420]	@ (8003414 <HAL_DMA_IRQHandler+0x3f8>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d04a      	beq.n	800330a <HAL_DMA_IRQHandler+0x2ee>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a67      	ldr	r2, [pc, #412]	@ (8003418 <HAL_DMA_IRQHandler+0x3fc>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d045      	beq.n	800330a <HAL_DMA_IRQHandler+0x2ee>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a66      	ldr	r2, [pc, #408]	@ (800341c <HAL_DMA_IRQHandler+0x400>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d040      	beq.n	800330a <HAL_DMA_IRQHandler+0x2ee>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a64      	ldr	r2, [pc, #400]	@ (8003420 <HAL_DMA_IRQHandler+0x404>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d03b      	beq.n	800330a <HAL_DMA_IRQHandler+0x2ee>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a63      	ldr	r2, [pc, #396]	@ (8003424 <HAL_DMA_IRQHandler+0x408>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d036      	beq.n	800330a <HAL_DMA_IRQHandler+0x2ee>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a61      	ldr	r2, [pc, #388]	@ (8003428 <HAL_DMA_IRQHandler+0x40c>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d031      	beq.n	800330a <HAL_DMA_IRQHandler+0x2ee>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a60      	ldr	r2, [pc, #384]	@ (800342c <HAL_DMA_IRQHandler+0x410>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d02c      	beq.n	800330a <HAL_DMA_IRQHandler+0x2ee>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a5e      	ldr	r2, [pc, #376]	@ (8003430 <HAL_DMA_IRQHandler+0x414>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d027      	beq.n	800330a <HAL_DMA_IRQHandler+0x2ee>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a5d      	ldr	r2, [pc, #372]	@ (8003434 <HAL_DMA_IRQHandler+0x418>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d022      	beq.n	800330a <HAL_DMA_IRQHandler+0x2ee>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a5b      	ldr	r2, [pc, #364]	@ (8003438 <HAL_DMA_IRQHandler+0x41c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d01d      	beq.n	800330a <HAL_DMA_IRQHandler+0x2ee>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a5a      	ldr	r2, [pc, #360]	@ (800343c <HAL_DMA_IRQHandler+0x420>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d018      	beq.n	800330a <HAL_DMA_IRQHandler+0x2ee>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a58      	ldr	r2, [pc, #352]	@ (8003440 <HAL_DMA_IRQHandler+0x424>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d013      	beq.n	800330a <HAL_DMA_IRQHandler+0x2ee>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a57      	ldr	r2, [pc, #348]	@ (8003444 <HAL_DMA_IRQHandler+0x428>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d00e      	beq.n	800330a <HAL_DMA_IRQHandler+0x2ee>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a55      	ldr	r2, [pc, #340]	@ (8003448 <HAL_DMA_IRQHandler+0x42c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d009      	beq.n	800330a <HAL_DMA_IRQHandler+0x2ee>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a54      	ldr	r2, [pc, #336]	@ (800344c <HAL_DMA_IRQHandler+0x430>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d004      	beq.n	800330a <HAL_DMA_IRQHandler+0x2ee>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a52      	ldr	r2, [pc, #328]	@ (8003450 <HAL_DMA_IRQHandler+0x434>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d10a      	bne.n	8003320 <HAL_DMA_IRQHandler+0x304>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003314:	2b00      	cmp	r3, #0
 8003316:	bf14      	ite	ne
 8003318:	2301      	movne	r3, #1
 800331a:	2300      	moveq	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	e003      	b.n	8003328 <HAL_DMA_IRQHandler+0x30c>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2300      	movs	r3, #0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00d      	beq.n	8003348 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003330:	f003 031f 	and.w	r3, r3, #31
 8003334:	2201      	movs	r2, #1
 8003336:	409a      	lsls	r2, r3
 8003338:	6a3b      	ldr	r3, [r7, #32]
 800333a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003340:	f043 0202 	orr.w	r2, r3, #2
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800334c:	f003 031f 	and.w	r3, r3, #31
 8003350:	2204      	movs	r2, #4
 8003352:	409a      	lsls	r2, r3
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	4013      	ands	r3, r2
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 808f 	beq.w	800347c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a2c      	ldr	r2, [pc, #176]	@ (8003414 <HAL_DMA_IRQHandler+0x3f8>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d04a      	beq.n	80033fe <HAL_DMA_IRQHandler+0x3e2>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a2a      	ldr	r2, [pc, #168]	@ (8003418 <HAL_DMA_IRQHandler+0x3fc>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d045      	beq.n	80033fe <HAL_DMA_IRQHandler+0x3e2>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a29      	ldr	r2, [pc, #164]	@ (800341c <HAL_DMA_IRQHandler+0x400>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d040      	beq.n	80033fe <HAL_DMA_IRQHandler+0x3e2>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a27      	ldr	r2, [pc, #156]	@ (8003420 <HAL_DMA_IRQHandler+0x404>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d03b      	beq.n	80033fe <HAL_DMA_IRQHandler+0x3e2>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a26      	ldr	r2, [pc, #152]	@ (8003424 <HAL_DMA_IRQHandler+0x408>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d036      	beq.n	80033fe <HAL_DMA_IRQHandler+0x3e2>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a24      	ldr	r2, [pc, #144]	@ (8003428 <HAL_DMA_IRQHandler+0x40c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d031      	beq.n	80033fe <HAL_DMA_IRQHandler+0x3e2>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a23      	ldr	r2, [pc, #140]	@ (800342c <HAL_DMA_IRQHandler+0x410>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d02c      	beq.n	80033fe <HAL_DMA_IRQHandler+0x3e2>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a21      	ldr	r2, [pc, #132]	@ (8003430 <HAL_DMA_IRQHandler+0x414>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d027      	beq.n	80033fe <HAL_DMA_IRQHandler+0x3e2>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a20      	ldr	r2, [pc, #128]	@ (8003434 <HAL_DMA_IRQHandler+0x418>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d022      	beq.n	80033fe <HAL_DMA_IRQHandler+0x3e2>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a1e      	ldr	r2, [pc, #120]	@ (8003438 <HAL_DMA_IRQHandler+0x41c>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d01d      	beq.n	80033fe <HAL_DMA_IRQHandler+0x3e2>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a1d      	ldr	r2, [pc, #116]	@ (800343c <HAL_DMA_IRQHandler+0x420>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d018      	beq.n	80033fe <HAL_DMA_IRQHandler+0x3e2>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003440 <HAL_DMA_IRQHandler+0x424>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d013      	beq.n	80033fe <HAL_DMA_IRQHandler+0x3e2>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a1a      	ldr	r2, [pc, #104]	@ (8003444 <HAL_DMA_IRQHandler+0x428>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d00e      	beq.n	80033fe <HAL_DMA_IRQHandler+0x3e2>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a18      	ldr	r2, [pc, #96]	@ (8003448 <HAL_DMA_IRQHandler+0x42c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d009      	beq.n	80033fe <HAL_DMA_IRQHandler+0x3e2>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a17      	ldr	r2, [pc, #92]	@ (800344c <HAL_DMA_IRQHandler+0x430>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d004      	beq.n	80033fe <HAL_DMA_IRQHandler+0x3e2>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a15      	ldr	r2, [pc, #84]	@ (8003450 <HAL_DMA_IRQHandler+0x434>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d12a      	bne.n	8003454 <HAL_DMA_IRQHandler+0x438>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	bf14      	ite	ne
 800340c:	2301      	movne	r3, #1
 800340e:	2300      	moveq	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	e023      	b.n	800345c <HAL_DMA_IRQHandler+0x440>
 8003414:	40020010 	.word	0x40020010
 8003418:	40020028 	.word	0x40020028
 800341c:	40020040 	.word	0x40020040
 8003420:	40020058 	.word	0x40020058
 8003424:	40020070 	.word	0x40020070
 8003428:	40020088 	.word	0x40020088
 800342c:	400200a0 	.word	0x400200a0
 8003430:	400200b8 	.word	0x400200b8
 8003434:	40020410 	.word	0x40020410
 8003438:	40020428 	.word	0x40020428
 800343c:	40020440 	.word	0x40020440
 8003440:	40020458 	.word	0x40020458
 8003444:	40020470 	.word	0x40020470
 8003448:	40020488 	.word	0x40020488
 800344c:	400204a0 	.word	0x400204a0
 8003450:	400204b8 	.word	0x400204b8
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2300      	movs	r3, #0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00d      	beq.n	800347c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003464:	f003 031f 	and.w	r3, r3, #31
 8003468:	2204      	movs	r2, #4
 800346a:	409a      	lsls	r2, r3
 800346c:	6a3b      	ldr	r3, [r7, #32]
 800346e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003474:	f043 0204 	orr.w	r2, r3, #4
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003480:	f003 031f 	and.w	r3, r3, #31
 8003484:	2210      	movs	r2, #16
 8003486:	409a      	lsls	r2, r3
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	4013      	ands	r3, r2
 800348c:	2b00      	cmp	r3, #0
 800348e:	f000 80a6 	beq.w	80035de <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a85      	ldr	r2, [pc, #532]	@ (80036ac <HAL_DMA_IRQHandler+0x690>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d04a      	beq.n	8003532 <HAL_DMA_IRQHandler+0x516>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a83      	ldr	r2, [pc, #524]	@ (80036b0 <HAL_DMA_IRQHandler+0x694>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d045      	beq.n	8003532 <HAL_DMA_IRQHandler+0x516>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a82      	ldr	r2, [pc, #520]	@ (80036b4 <HAL_DMA_IRQHandler+0x698>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d040      	beq.n	8003532 <HAL_DMA_IRQHandler+0x516>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a80      	ldr	r2, [pc, #512]	@ (80036b8 <HAL_DMA_IRQHandler+0x69c>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d03b      	beq.n	8003532 <HAL_DMA_IRQHandler+0x516>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a7f      	ldr	r2, [pc, #508]	@ (80036bc <HAL_DMA_IRQHandler+0x6a0>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d036      	beq.n	8003532 <HAL_DMA_IRQHandler+0x516>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a7d      	ldr	r2, [pc, #500]	@ (80036c0 <HAL_DMA_IRQHandler+0x6a4>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d031      	beq.n	8003532 <HAL_DMA_IRQHandler+0x516>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a7c      	ldr	r2, [pc, #496]	@ (80036c4 <HAL_DMA_IRQHandler+0x6a8>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d02c      	beq.n	8003532 <HAL_DMA_IRQHandler+0x516>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a7a      	ldr	r2, [pc, #488]	@ (80036c8 <HAL_DMA_IRQHandler+0x6ac>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d027      	beq.n	8003532 <HAL_DMA_IRQHandler+0x516>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a79      	ldr	r2, [pc, #484]	@ (80036cc <HAL_DMA_IRQHandler+0x6b0>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d022      	beq.n	8003532 <HAL_DMA_IRQHandler+0x516>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a77      	ldr	r2, [pc, #476]	@ (80036d0 <HAL_DMA_IRQHandler+0x6b4>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d01d      	beq.n	8003532 <HAL_DMA_IRQHandler+0x516>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a76      	ldr	r2, [pc, #472]	@ (80036d4 <HAL_DMA_IRQHandler+0x6b8>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d018      	beq.n	8003532 <HAL_DMA_IRQHandler+0x516>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a74      	ldr	r2, [pc, #464]	@ (80036d8 <HAL_DMA_IRQHandler+0x6bc>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d013      	beq.n	8003532 <HAL_DMA_IRQHandler+0x516>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a73      	ldr	r2, [pc, #460]	@ (80036dc <HAL_DMA_IRQHandler+0x6c0>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d00e      	beq.n	8003532 <HAL_DMA_IRQHandler+0x516>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a71      	ldr	r2, [pc, #452]	@ (80036e0 <HAL_DMA_IRQHandler+0x6c4>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d009      	beq.n	8003532 <HAL_DMA_IRQHandler+0x516>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a70      	ldr	r2, [pc, #448]	@ (80036e4 <HAL_DMA_IRQHandler+0x6c8>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d004      	beq.n	8003532 <HAL_DMA_IRQHandler+0x516>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a6e      	ldr	r2, [pc, #440]	@ (80036e8 <HAL_DMA_IRQHandler+0x6cc>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d10a      	bne.n	8003548 <HAL_DMA_IRQHandler+0x52c>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0308 	and.w	r3, r3, #8
 800353c:	2b00      	cmp	r3, #0
 800353e:	bf14      	ite	ne
 8003540:	2301      	movne	r3, #1
 8003542:	2300      	moveq	r3, #0
 8003544:	b2db      	uxtb	r3, r3
 8003546:	e009      	b.n	800355c <HAL_DMA_IRQHandler+0x540>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0304 	and.w	r3, r3, #4
 8003552:	2b00      	cmp	r3, #0
 8003554:	bf14      	ite	ne
 8003556:	2301      	movne	r3, #1
 8003558:	2300      	moveq	r3, #0
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	d03e      	beq.n	80035de <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003564:	f003 031f 	and.w	r3, r3, #31
 8003568:	2210      	movs	r2, #16
 800356a:	409a      	lsls	r2, r3
 800356c:	6a3b      	ldr	r3, [r7, #32]
 800356e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d018      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d108      	bne.n	800359e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003590:	2b00      	cmp	r3, #0
 8003592:	d024      	beq.n	80035de <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	4798      	blx	r3
 800359c:	e01f      	b.n	80035de <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d01b      	beq.n	80035de <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	4798      	blx	r3
 80035ae:	e016      	b.n	80035de <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d107      	bne.n	80035ce <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0208 	bic.w	r2, r2, #8
 80035cc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035e2:	f003 031f 	and.w	r3, r3, #31
 80035e6:	2220      	movs	r2, #32
 80035e8:	409a      	lsls	r2, r3
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	4013      	ands	r3, r2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 8110 	beq.w	8003814 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a2c      	ldr	r2, [pc, #176]	@ (80036ac <HAL_DMA_IRQHandler+0x690>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d04a      	beq.n	8003694 <HAL_DMA_IRQHandler+0x678>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a2b      	ldr	r2, [pc, #172]	@ (80036b0 <HAL_DMA_IRQHandler+0x694>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d045      	beq.n	8003694 <HAL_DMA_IRQHandler+0x678>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a29      	ldr	r2, [pc, #164]	@ (80036b4 <HAL_DMA_IRQHandler+0x698>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d040      	beq.n	8003694 <HAL_DMA_IRQHandler+0x678>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a28      	ldr	r2, [pc, #160]	@ (80036b8 <HAL_DMA_IRQHandler+0x69c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d03b      	beq.n	8003694 <HAL_DMA_IRQHandler+0x678>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a26      	ldr	r2, [pc, #152]	@ (80036bc <HAL_DMA_IRQHandler+0x6a0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d036      	beq.n	8003694 <HAL_DMA_IRQHandler+0x678>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a25      	ldr	r2, [pc, #148]	@ (80036c0 <HAL_DMA_IRQHandler+0x6a4>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d031      	beq.n	8003694 <HAL_DMA_IRQHandler+0x678>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a23      	ldr	r2, [pc, #140]	@ (80036c4 <HAL_DMA_IRQHandler+0x6a8>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d02c      	beq.n	8003694 <HAL_DMA_IRQHandler+0x678>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a22      	ldr	r2, [pc, #136]	@ (80036c8 <HAL_DMA_IRQHandler+0x6ac>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d027      	beq.n	8003694 <HAL_DMA_IRQHandler+0x678>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a20      	ldr	r2, [pc, #128]	@ (80036cc <HAL_DMA_IRQHandler+0x6b0>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d022      	beq.n	8003694 <HAL_DMA_IRQHandler+0x678>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a1f      	ldr	r2, [pc, #124]	@ (80036d0 <HAL_DMA_IRQHandler+0x6b4>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d01d      	beq.n	8003694 <HAL_DMA_IRQHandler+0x678>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a1d      	ldr	r2, [pc, #116]	@ (80036d4 <HAL_DMA_IRQHandler+0x6b8>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d018      	beq.n	8003694 <HAL_DMA_IRQHandler+0x678>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a1c      	ldr	r2, [pc, #112]	@ (80036d8 <HAL_DMA_IRQHandler+0x6bc>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d013      	beq.n	8003694 <HAL_DMA_IRQHandler+0x678>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a1a      	ldr	r2, [pc, #104]	@ (80036dc <HAL_DMA_IRQHandler+0x6c0>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d00e      	beq.n	8003694 <HAL_DMA_IRQHandler+0x678>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a19      	ldr	r2, [pc, #100]	@ (80036e0 <HAL_DMA_IRQHandler+0x6c4>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d009      	beq.n	8003694 <HAL_DMA_IRQHandler+0x678>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a17      	ldr	r2, [pc, #92]	@ (80036e4 <HAL_DMA_IRQHandler+0x6c8>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d004      	beq.n	8003694 <HAL_DMA_IRQHandler+0x678>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a16      	ldr	r2, [pc, #88]	@ (80036e8 <HAL_DMA_IRQHandler+0x6cc>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d12b      	bne.n	80036ec <HAL_DMA_IRQHandler+0x6d0>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0310 	and.w	r3, r3, #16
 800369e:	2b00      	cmp	r3, #0
 80036a0:	bf14      	ite	ne
 80036a2:	2301      	movne	r3, #1
 80036a4:	2300      	moveq	r3, #0
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	e02a      	b.n	8003700 <HAL_DMA_IRQHandler+0x6e4>
 80036aa:	bf00      	nop
 80036ac:	40020010 	.word	0x40020010
 80036b0:	40020028 	.word	0x40020028
 80036b4:	40020040 	.word	0x40020040
 80036b8:	40020058 	.word	0x40020058
 80036bc:	40020070 	.word	0x40020070
 80036c0:	40020088 	.word	0x40020088
 80036c4:	400200a0 	.word	0x400200a0
 80036c8:	400200b8 	.word	0x400200b8
 80036cc:	40020410 	.word	0x40020410
 80036d0:	40020428 	.word	0x40020428
 80036d4:	40020440 	.word	0x40020440
 80036d8:	40020458 	.word	0x40020458
 80036dc:	40020470 	.word	0x40020470
 80036e0:	40020488 	.word	0x40020488
 80036e4:	400204a0 	.word	0x400204a0
 80036e8:	400204b8 	.word	0x400204b8
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	bf14      	ite	ne
 80036fa:	2301      	movne	r3, #1
 80036fc:	2300      	moveq	r3, #0
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 8087 	beq.w	8003814 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800370a:	f003 031f 	and.w	r3, r3, #31
 800370e:	2220      	movs	r2, #32
 8003710:	409a      	lsls	r2, r3
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b04      	cmp	r3, #4
 8003720:	d139      	bne.n	8003796 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0216 	bic.w	r2, r2, #22
 8003730:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	695a      	ldr	r2, [r3, #20]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003740:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003746:	2b00      	cmp	r3, #0
 8003748:	d103      	bne.n	8003752 <HAL_DMA_IRQHandler+0x736>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800374e:	2b00      	cmp	r3, #0
 8003750:	d007      	beq.n	8003762 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0208 	bic.w	r2, r2, #8
 8003760:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003766:	f003 031f 	and.w	r3, r3, #31
 800376a:	223f      	movs	r2, #63	@ 0x3f
 800376c:	409a      	lsls	r2, r3
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 834a 	beq.w	8003e20 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	4798      	blx	r3
          }
          return;
 8003794:	e344      	b.n	8003e20 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d018      	beq.n	80037d6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d108      	bne.n	80037c4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d02c      	beq.n	8003814 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	4798      	blx	r3
 80037c2:	e027      	b.n	8003814 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d023      	beq.n	8003814 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	4798      	blx	r3
 80037d4:	e01e      	b.n	8003814 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10f      	bne.n	8003804 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0210 	bic.w	r2, r2, #16
 80037f2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 8306 	beq.w	8003e2a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 8088 	beq.w	800393c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2204      	movs	r2, #4
 8003830:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a7a      	ldr	r2, [pc, #488]	@ (8003a24 <HAL_DMA_IRQHandler+0xa08>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d04a      	beq.n	80038d4 <HAL_DMA_IRQHandler+0x8b8>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a79      	ldr	r2, [pc, #484]	@ (8003a28 <HAL_DMA_IRQHandler+0xa0c>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d045      	beq.n	80038d4 <HAL_DMA_IRQHandler+0x8b8>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a77      	ldr	r2, [pc, #476]	@ (8003a2c <HAL_DMA_IRQHandler+0xa10>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d040      	beq.n	80038d4 <HAL_DMA_IRQHandler+0x8b8>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a76      	ldr	r2, [pc, #472]	@ (8003a30 <HAL_DMA_IRQHandler+0xa14>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d03b      	beq.n	80038d4 <HAL_DMA_IRQHandler+0x8b8>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a74      	ldr	r2, [pc, #464]	@ (8003a34 <HAL_DMA_IRQHandler+0xa18>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d036      	beq.n	80038d4 <HAL_DMA_IRQHandler+0x8b8>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a73      	ldr	r2, [pc, #460]	@ (8003a38 <HAL_DMA_IRQHandler+0xa1c>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d031      	beq.n	80038d4 <HAL_DMA_IRQHandler+0x8b8>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a71      	ldr	r2, [pc, #452]	@ (8003a3c <HAL_DMA_IRQHandler+0xa20>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d02c      	beq.n	80038d4 <HAL_DMA_IRQHandler+0x8b8>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a70      	ldr	r2, [pc, #448]	@ (8003a40 <HAL_DMA_IRQHandler+0xa24>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d027      	beq.n	80038d4 <HAL_DMA_IRQHandler+0x8b8>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a6e      	ldr	r2, [pc, #440]	@ (8003a44 <HAL_DMA_IRQHandler+0xa28>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d022      	beq.n	80038d4 <HAL_DMA_IRQHandler+0x8b8>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a6d      	ldr	r2, [pc, #436]	@ (8003a48 <HAL_DMA_IRQHandler+0xa2c>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d01d      	beq.n	80038d4 <HAL_DMA_IRQHandler+0x8b8>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a6b      	ldr	r2, [pc, #428]	@ (8003a4c <HAL_DMA_IRQHandler+0xa30>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d018      	beq.n	80038d4 <HAL_DMA_IRQHandler+0x8b8>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a6a      	ldr	r2, [pc, #424]	@ (8003a50 <HAL_DMA_IRQHandler+0xa34>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d013      	beq.n	80038d4 <HAL_DMA_IRQHandler+0x8b8>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a68      	ldr	r2, [pc, #416]	@ (8003a54 <HAL_DMA_IRQHandler+0xa38>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d00e      	beq.n	80038d4 <HAL_DMA_IRQHandler+0x8b8>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a67      	ldr	r2, [pc, #412]	@ (8003a58 <HAL_DMA_IRQHandler+0xa3c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d009      	beq.n	80038d4 <HAL_DMA_IRQHandler+0x8b8>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a65      	ldr	r2, [pc, #404]	@ (8003a5c <HAL_DMA_IRQHandler+0xa40>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d004      	beq.n	80038d4 <HAL_DMA_IRQHandler+0x8b8>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a64      	ldr	r2, [pc, #400]	@ (8003a60 <HAL_DMA_IRQHandler+0xa44>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d108      	bne.n	80038e6 <HAL_DMA_IRQHandler+0x8ca>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 0201 	bic.w	r2, r2, #1
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	e007      	b.n	80038f6 <HAL_DMA_IRQHandler+0x8da>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0201 	bic.w	r2, r2, #1
 80038f4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	3301      	adds	r3, #1
 80038fa:	60fb      	str	r3, [r7, #12]
 80038fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038fe:	429a      	cmp	r2, r3
 8003900:	d307      	bcc.n	8003912 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1f2      	bne.n	80038f6 <HAL_DMA_IRQHandler+0x8da>
 8003910:	e000      	b.n	8003914 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003912:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d004      	beq.n	800392c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2203      	movs	r2, #3
 8003926:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800392a:	e003      	b.n	8003934 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 8272 	beq.w	8003e2a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	4798      	blx	r3
 800394e:	e26c      	b.n	8003e2a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a43      	ldr	r2, [pc, #268]	@ (8003a64 <HAL_DMA_IRQHandler+0xa48>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d022      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x984>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a42      	ldr	r2, [pc, #264]	@ (8003a68 <HAL_DMA_IRQHandler+0xa4c>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d01d      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x984>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a40      	ldr	r2, [pc, #256]	@ (8003a6c <HAL_DMA_IRQHandler+0xa50>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d018      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x984>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a3f      	ldr	r2, [pc, #252]	@ (8003a70 <HAL_DMA_IRQHandler+0xa54>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d013      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x984>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a3d      	ldr	r2, [pc, #244]	@ (8003a74 <HAL_DMA_IRQHandler+0xa58>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d00e      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x984>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a3c      	ldr	r2, [pc, #240]	@ (8003a78 <HAL_DMA_IRQHandler+0xa5c>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d009      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x984>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a3a      	ldr	r2, [pc, #232]	@ (8003a7c <HAL_DMA_IRQHandler+0xa60>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d004      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x984>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a39      	ldr	r2, [pc, #228]	@ (8003a80 <HAL_DMA_IRQHandler+0xa64>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d101      	bne.n	80039a4 <HAL_DMA_IRQHandler+0x988>
 80039a0:	2301      	movs	r3, #1
 80039a2:	e000      	b.n	80039a6 <HAL_DMA_IRQHandler+0x98a>
 80039a4:	2300      	movs	r3, #0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f000 823f 	beq.w	8003e2a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039b8:	f003 031f 	and.w	r3, r3, #31
 80039bc:	2204      	movs	r2, #4
 80039be:	409a      	lsls	r2, r3
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	4013      	ands	r3, r2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 80cd 	beq.w	8003b64 <HAL_DMA_IRQHandler+0xb48>
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 80c7 	beq.w	8003b64 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039da:	f003 031f 	and.w	r3, r3, #31
 80039de:	2204      	movs	r2, #4
 80039e0:	409a      	lsls	r2, r3
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d049      	beq.n	8003a84 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d109      	bne.n	8003a0e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f000 8210 	beq.w	8003e24 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a0c:	e20a      	b.n	8003e24 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 8206 	beq.w	8003e24 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a20:	e200      	b.n	8003e24 <HAL_DMA_IRQHandler+0xe08>
 8003a22:	bf00      	nop
 8003a24:	40020010 	.word	0x40020010
 8003a28:	40020028 	.word	0x40020028
 8003a2c:	40020040 	.word	0x40020040
 8003a30:	40020058 	.word	0x40020058
 8003a34:	40020070 	.word	0x40020070
 8003a38:	40020088 	.word	0x40020088
 8003a3c:	400200a0 	.word	0x400200a0
 8003a40:	400200b8 	.word	0x400200b8
 8003a44:	40020410 	.word	0x40020410
 8003a48:	40020428 	.word	0x40020428
 8003a4c:	40020440 	.word	0x40020440
 8003a50:	40020458 	.word	0x40020458
 8003a54:	40020470 	.word	0x40020470
 8003a58:	40020488 	.word	0x40020488
 8003a5c:	400204a0 	.word	0x400204a0
 8003a60:	400204b8 	.word	0x400204b8
 8003a64:	58025408 	.word	0x58025408
 8003a68:	5802541c 	.word	0x5802541c
 8003a6c:	58025430 	.word	0x58025430
 8003a70:	58025444 	.word	0x58025444
 8003a74:	58025458 	.word	0x58025458
 8003a78:	5802546c 	.word	0x5802546c
 8003a7c:	58025480 	.word	0x58025480
 8003a80:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	f003 0320 	and.w	r3, r3, #32
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d160      	bne.n	8003b50 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a7f      	ldr	r2, [pc, #508]	@ (8003c90 <HAL_DMA_IRQHandler+0xc74>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d04a      	beq.n	8003b2e <HAL_DMA_IRQHandler+0xb12>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a7d      	ldr	r2, [pc, #500]	@ (8003c94 <HAL_DMA_IRQHandler+0xc78>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d045      	beq.n	8003b2e <HAL_DMA_IRQHandler+0xb12>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a7c      	ldr	r2, [pc, #496]	@ (8003c98 <HAL_DMA_IRQHandler+0xc7c>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d040      	beq.n	8003b2e <HAL_DMA_IRQHandler+0xb12>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a7a      	ldr	r2, [pc, #488]	@ (8003c9c <HAL_DMA_IRQHandler+0xc80>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d03b      	beq.n	8003b2e <HAL_DMA_IRQHandler+0xb12>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a79      	ldr	r2, [pc, #484]	@ (8003ca0 <HAL_DMA_IRQHandler+0xc84>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d036      	beq.n	8003b2e <HAL_DMA_IRQHandler+0xb12>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a77      	ldr	r2, [pc, #476]	@ (8003ca4 <HAL_DMA_IRQHandler+0xc88>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d031      	beq.n	8003b2e <HAL_DMA_IRQHandler+0xb12>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a76      	ldr	r2, [pc, #472]	@ (8003ca8 <HAL_DMA_IRQHandler+0xc8c>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d02c      	beq.n	8003b2e <HAL_DMA_IRQHandler+0xb12>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a74      	ldr	r2, [pc, #464]	@ (8003cac <HAL_DMA_IRQHandler+0xc90>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d027      	beq.n	8003b2e <HAL_DMA_IRQHandler+0xb12>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a73      	ldr	r2, [pc, #460]	@ (8003cb0 <HAL_DMA_IRQHandler+0xc94>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d022      	beq.n	8003b2e <HAL_DMA_IRQHandler+0xb12>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a71      	ldr	r2, [pc, #452]	@ (8003cb4 <HAL_DMA_IRQHandler+0xc98>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d01d      	beq.n	8003b2e <HAL_DMA_IRQHandler+0xb12>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a70      	ldr	r2, [pc, #448]	@ (8003cb8 <HAL_DMA_IRQHandler+0xc9c>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d018      	beq.n	8003b2e <HAL_DMA_IRQHandler+0xb12>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a6e      	ldr	r2, [pc, #440]	@ (8003cbc <HAL_DMA_IRQHandler+0xca0>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d013      	beq.n	8003b2e <HAL_DMA_IRQHandler+0xb12>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a6d      	ldr	r2, [pc, #436]	@ (8003cc0 <HAL_DMA_IRQHandler+0xca4>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d00e      	beq.n	8003b2e <HAL_DMA_IRQHandler+0xb12>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a6b      	ldr	r2, [pc, #428]	@ (8003cc4 <HAL_DMA_IRQHandler+0xca8>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d009      	beq.n	8003b2e <HAL_DMA_IRQHandler+0xb12>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a6a      	ldr	r2, [pc, #424]	@ (8003cc8 <HAL_DMA_IRQHandler+0xcac>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d004      	beq.n	8003b2e <HAL_DMA_IRQHandler+0xb12>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a68      	ldr	r2, [pc, #416]	@ (8003ccc <HAL_DMA_IRQHandler+0xcb0>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d108      	bne.n	8003b40 <HAL_DMA_IRQHandler+0xb24>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 0208 	bic.w	r2, r2, #8
 8003b3c:	601a      	str	r2, [r3, #0]
 8003b3e:	e007      	b.n	8003b50 <HAL_DMA_IRQHandler+0xb34>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0204 	bic.w	r2, r2, #4
 8003b4e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 8165 	beq.w	8003e24 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b62:	e15f      	b.n	8003e24 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b68:	f003 031f 	and.w	r3, r3, #31
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	409a      	lsls	r2, r3
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	4013      	ands	r3, r2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 80c5 	beq.w	8003d04 <HAL_DMA_IRQHandler+0xce8>
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 80bf 	beq.w	8003d04 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b8a:	f003 031f 	and.w	r3, r3, #31
 8003b8e:	2202      	movs	r2, #2
 8003b90:	409a      	lsls	r2, r3
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d018      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d109      	bne.n	8003bbe <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 813a 	beq.w	8003e28 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bbc:	e134      	b.n	8003e28 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f000 8130 	beq.w	8003e28 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bd0:	e12a      	b.n	8003e28 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	f003 0320 	and.w	r3, r3, #32
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f040 8089 	bne.w	8003cf0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a2b      	ldr	r2, [pc, #172]	@ (8003c90 <HAL_DMA_IRQHandler+0xc74>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d04a      	beq.n	8003c7e <HAL_DMA_IRQHandler+0xc62>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a29      	ldr	r2, [pc, #164]	@ (8003c94 <HAL_DMA_IRQHandler+0xc78>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d045      	beq.n	8003c7e <HAL_DMA_IRQHandler+0xc62>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a28      	ldr	r2, [pc, #160]	@ (8003c98 <HAL_DMA_IRQHandler+0xc7c>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d040      	beq.n	8003c7e <HAL_DMA_IRQHandler+0xc62>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a26      	ldr	r2, [pc, #152]	@ (8003c9c <HAL_DMA_IRQHandler+0xc80>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d03b      	beq.n	8003c7e <HAL_DMA_IRQHandler+0xc62>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a25      	ldr	r2, [pc, #148]	@ (8003ca0 <HAL_DMA_IRQHandler+0xc84>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d036      	beq.n	8003c7e <HAL_DMA_IRQHandler+0xc62>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a23      	ldr	r2, [pc, #140]	@ (8003ca4 <HAL_DMA_IRQHandler+0xc88>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d031      	beq.n	8003c7e <HAL_DMA_IRQHandler+0xc62>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a22      	ldr	r2, [pc, #136]	@ (8003ca8 <HAL_DMA_IRQHandler+0xc8c>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d02c      	beq.n	8003c7e <HAL_DMA_IRQHandler+0xc62>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a20      	ldr	r2, [pc, #128]	@ (8003cac <HAL_DMA_IRQHandler+0xc90>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d027      	beq.n	8003c7e <HAL_DMA_IRQHandler+0xc62>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a1f      	ldr	r2, [pc, #124]	@ (8003cb0 <HAL_DMA_IRQHandler+0xc94>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d022      	beq.n	8003c7e <HAL_DMA_IRQHandler+0xc62>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8003cb4 <HAL_DMA_IRQHandler+0xc98>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d01d      	beq.n	8003c7e <HAL_DMA_IRQHandler+0xc62>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a1c      	ldr	r2, [pc, #112]	@ (8003cb8 <HAL_DMA_IRQHandler+0xc9c>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d018      	beq.n	8003c7e <HAL_DMA_IRQHandler+0xc62>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a1a      	ldr	r2, [pc, #104]	@ (8003cbc <HAL_DMA_IRQHandler+0xca0>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d013      	beq.n	8003c7e <HAL_DMA_IRQHandler+0xc62>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a19      	ldr	r2, [pc, #100]	@ (8003cc0 <HAL_DMA_IRQHandler+0xca4>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d00e      	beq.n	8003c7e <HAL_DMA_IRQHandler+0xc62>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a17      	ldr	r2, [pc, #92]	@ (8003cc4 <HAL_DMA_IRQHandler+0xca8>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d009      	beq.n	8003c7e <HAL_DMA_IRQHandler+0xc62>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a16      	ldr	r2, [pc, #88]	@ (8003cc8 <HAL_DMA_IRQHandler+0xcac>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d004      	beq.n	8003c7e <HAL_DMA_IRQHandler+0xc62>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a14      	ldr	r2, [pc, #80]	@ (8003ccc <HAL_DMA_IRQHandler+0xcb0>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d128      	bne.n	8003cd0 <HAL_DMA_IRQHandler+0xcb4>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0214 	bic.w	r2, r2, #20
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	e027      	b.n	8003ce0 <HAL_DMA_IRQHandler+0xcc4>
 8003c90:	40020010 	.word	0x40020010
 8003c94:	40020028 	.word	0x40020028
 8003c98:	40020040 	.word	0x40020040
 8003c9c:	40020058 	.word	0x40020058
 8003ca0:	40020070 	.word	0x40020070
 8003ca4:	40020088 	.word	0x40020088
 8003ca8:	400200a0 	.word	0x400200a0
 8003cac:	400200b8 	.word	0x400200b8
 8003cb0:	40020410 	.word	0x40020410
 8003cb4:	40020428 	.word	0x40020428
 8003cb8:	40020440 	.word	0x40020440
 8003cbc:	40020458 	.word	0x40020458
 8003cc0:	40020470 	.word	0x40020470
 8003cc4:	40020488 	.word	0x40020488
 8003cc8:	400204a0 	.word	0x400204a0
 8003ccc:	400204b8 	.word	0x400204b8
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 020a 	bic.w	r2, r2, #10
 8003cde:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f000 8097 	beq.w	8003e28 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d02:	e091      	b.n	8003e28 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d08:	f003 031f 	and.w	r3, r3, #31
 8003d0c:	2208      	movs	r2, #8
 8003d0e:	409a      	lsls	r2, r3
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	4013      	ands	r3, r2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f000 8088 	beq.w	8003e2a <HAL_DMA_IRQHandler+0xe0e>
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	f003 0308 	and.w	r3, r3, #8
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 8082 	beq.w	8003e2a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a41      	ldr	r2, [pc, #260]	@ (8003e30 <HAL_DMA_IRQHandler+0xe14>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d04a      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xdaa>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a3f      	ldr	r2, [pc, #252]	@ (8003e34 <HAL_DMA_IRQHandler+0xe18>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d045      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xdaa>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a3e      	ldr	r2, [pc, #248]	@ (8003e38 <HAL_DMA_IRQHandler+0xe1c>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d040      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xdaa>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a3c      	ldr	r2, [pc, #240]	@ (8003e3c <HAL_DMA_IRQHandler+0xe20>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d03b      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xdaa>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a3b      	ldr	r2, [pc, #236]	@ (8003e40 <HAL_DMA_IRQHandler+0xe24>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d036      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xdaa>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a39      	ldr	r2, [pc, #228]	@ (8003e44 <HAL_DMA_IRQHandler+0xe28>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d031      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xdaa>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a38      	ldr	r2, [pc, #224]	@ (8003e48 <HAL_DMA_IRQHandler+0xe2c>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d02c      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xdaa>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a36      	ldr	r2, [pc, #216]	@ (8003e4c <HAL_DMA_IRQHandler+0xe30>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d027      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xdaa>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a35      	ldr	r2, [pc, #212]	@ (8003e50 <HAL_DMA_IRQHandler+0xe34>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d022      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xdaa>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a33      	ldr	r2, [pc, #204]	@ (8003e54 <HAL_DMA_IRQHandler+0xe38>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d01d      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xdaa>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a32      	ldr	r2, [pc, #200]	@ (8003e58 <HAL_DMA_IRQHandler+0xe3c>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d018      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xdaa>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a30      	ldr	r2, [pc, #192]	@ (8003e5c <HAL_DMA_IRQHandler+0xe40>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d013      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xdaa>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a2f      	ldr	r2, [pc, #188]	@ (8003e60 <HAL_DMA_IRQHandler+0xe44>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d00e      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xdaa>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a2d      	ldr	r2, [pc, #180]	@ (8003e64 <HAL_DMA_IRQHandler+0xe48>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d009      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xdaa>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a2c      	ldr	r2, [pc, #176]	@ (8003e68 <HAL_DMA_IRQHandler+0xe4c>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d004      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xdaa>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a2a      	ldr	r2, [pc, #168]	@ (8003e6c <HAL_DMA_IRQHandler+0xe50>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d108      	bne.n	8003dd8 <HAL_DMA_IRQHandler+0xdbc>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 021c 	bic.w	r2, r2, #28
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	e007      	b.n	8003de8 <HAL_DMA_IRQHandler+0xdcc>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 020e 	bic.w	r2, r2, #14
 8003de6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dec:	f003 031f 	and.w	r3, r3, #31
 8003df0:	2201      	movs	r2, #1
 8003df2:	409a      	lsls	r2, r3
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d009      	beq.n	8003e2a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	4798      	blx	r3
 8003e1e:	e004      	b.n	8003e2a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003e20:	bf00      	nop
 8003e22:	e002      	b.n	8003e2a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e24:	bf00      	nop
 8003e26:	e000      	b.n	8003e2a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e28:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003e2a:	3728      	adds	r7, #40	@ 0x28
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	40020010 	.word	0x40020010
 8003e34:	40020028 	.word	0x40020028
 8003e38:	40020040 	.word	0x40020040
 8003e3c:	40020058 	.word	0x40020058
 8003e40:	40020070 	.word	0x40020070
 8003e44:	40020088 	.word	0x40020088
 8003e48:	400200a0 	.word	0x400200a0
 8003e4c:	400200b8 	.word	0x400200b8
 8003e50:	40020410 	.word	0x40020410
 8003e54:	40020428 	.word	0x40020428
 8003e58:	40020440 	.word	0x40020440
 8003e5c:	40020458 	.word	0x40020458
 8003e60:	40020470 	.word	0x40020470
 8003e64:	40020488 	.word	0x40020488
 8003e68:	400204a0 	.word	0x400204a0
 8003e6c:	400204b8 	.word	0x400204b8

08003e70 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b087      	sub	sp, #28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
 8003e7c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e82:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e88:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a7f      	ldr	r2, [pc, #508]	@ (800408c <DMA_SetConfig+0x21c>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d072      	beq.n	8003f7a <DMA_SetConfig+0x10a>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a7d      	ldr	r2, [pc, #500]	@ (8004090 <DMA_SetConfig+0x220>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d06d      	beq.n	8003f7a <DMA_SetConfig+0x10a>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a7c      	ldr	r2, [pc, #496]	@ (8004094 <DMA_SetConfig+0x224>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d068      	beq.n	8003f7a <DMA_SetConfig+0x10a>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a7a      	ldr	r2, [pc, #488]	@ (8004098 <DMA_SetConfig+0x228>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d063      	beq.n	8003f7a <DMA_SetConfig+0x10a>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a79      	ldr	r2, [pc, #484]	@ (800409c <DMA_SetConfig+0x22c>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d05e      	beq.n	8003f7a <DMA_SetConfig+0x10a>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a77      	ldr	r2, [pc, #476]	@ (80040a0 <DMA_SetConfig+0x230>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d059      	beq.n	8003f7a <DMA_SetConfig+0x10a>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a76      	ldr	r2, [pc, #472]	@ (80040a4 <DMA_SetConfig+0x234>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d054      	beq.n	8003f7a <DMA_SetConfig+0x10a>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a74      	ldr	r2, [pc, #464]	@ (80040a8 <DMA_SetConfig+0x238>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d04f      	beq.n	8003f7a <DMA_SetConfig+0x10a>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a73      	ldr	r2, [pc, #460]	@ (80040ac <DMA_SetConfig+0x23c>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d04a      	beq.n	8003f7a <DMA_SetConfig+0x10a>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a71      	ldr	r2, [pc, #452]	@ (80040b0 <DMA_SetConfig+0x240>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d045      	beq.n	8003f7a <DMA_SetConfig+0x10a>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a70      	ldr	r2, [pc, #448]	@ (80040b4 <DMA_SetConfig+0x244>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d040      	beq.n	8003f7a <DMA_SetConfig+0x10a>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a6e      	ldr	r2, [pc, #440]	@ (80040b8 <DMA_SetConfig+0x248>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d03b      	beq.n	8003f7a <DMA_SetConfig+0x10a>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a6d      	ldr	r2, [pc, #436]	@ (80040bc <DMA_SetConfig+0x24c>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d036      	beq.n	8003f7a <DMA_SetConfig+0x10a>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a6b      	ldr	r2, [pc, #428]	@ (80040c0 <DMA_SetConfig+0x250>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d031      	beq.n	8003f7a <DMA_SetConfig+0x10a>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a6a      	ldr	r2, [pc, #424]	@ (80040c4 <DMA_SetConfig+0x254>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d02c      	beq.n	8003f7a <DMA_SetConfig+0x10a>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a68      	ldr	r2, [pc, #416]	@ (80040c8 <DMA_SetConfig+0x258>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d027      	beq.n	8003f7a <DMA_SetConfig+0x10a>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a67      	ldr	r2, [pc, #412]	@ (80040cc <DMA_SetConfig+0x25c>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d022      	beq.n	8003f7a <DMA_SetConfig+0x10a>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a65      	ldr	r2, [pc, #404]	@ (80040d0 <DMA_SetConfig+0x260>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d01d      	beq.n	8003f7a <DMA_SetConfig+0x10a>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a64      	ldr	r2, [pc, #400]	@ (80040d4 <DMA_SetConfig+0x264>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d018      	beq.n	8003f7a <DMA_SetConfig+0x10a>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a62      	ldr	r2, [pc, #392]	@ (80040d8 <DMA_SetConfig+0x268>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d013      	beq.n	8003f7a <DMA_SetConfig+0x10a>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a61      	ldr	r2, [pc, #388]	@ (80040dc <DMA_SetConfig+0x26c>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d00e      	beq.n	8003f7a <DMA_SetConfig+0x10a>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a5f      	ldr	r2, [pc, #380]	@ (80040e0 <DMA_SetConfig+0x270>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d009      	beq.n	8003f7a <DMA_SetConfig+0x10a>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a5e      	ldr	r2, [pc, #376]	@ (80040e4 <DMA_SetConfig+0x274>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d004      	beq.n	8003f7a <DMA_SetConfig+0x10a>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a5c      	ldr	r2, [pc, #368]	@ (80040e8 <DMA_SetConfig+0x278>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d101      	bne.n	8003f7e <DMA_SetConfig+0x10e>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e000      	b.n	8003f80 <DMA_SetConfig+0x110>
 8003f7e:	2300      	movs	r3, #0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00d      	beq.n	8003fa0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003f8c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d004      	beq.n	8003fa0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003f9e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a39      	ldr	r2, [pc, #228]	@ (800408c <DMA_SetConfig+0x21c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d04a      	beq.n	8004040 <DMA_SetConfig+0x1d0>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a38      	ldr	r2, [pc, #224]	@ (8004090 <DMA_SetConfig+0x220>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d045      	beq.n	8004040 <DMA_SetConfig+0x1d0>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a36      	ldr	r2, [pc, #216]	@ (8004094 <DMA_SetConfig+0x224>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d040      	beq.n	8004040 <DMA_SetConfig+0x1d0>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a35      	ldr	r2, [pc, #212]	@ (8004098 <DMA_SetConfig+0x228>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d03b      	beq.n	8004040 <DMA_SetConfig+0x1d0>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a33      	ldr	r2, [pc, #204]	@ (800409c <DMA_SetConfig+0x22c>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d036      	beq.n	8004040 <DMA_SetConfig+0x1d0>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a32      	ldr	r2, [pc, #200]	@ (80040a0 <DMA_SetConfig+0x230>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d031      	beq.n	8004040 <DMA_SetConfig+0x1d0>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a30      	ldr	r2, [pc, #192]	@ (80040a4 <DMA_SetConfig+0x234>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d02c      	beq.n	8004040 <DMA_SetConfig+0x1d0>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a2f      	ldr	r2, [pc, #188]	@ (80040a8 <DMA_SetConfig+0x238>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d027      	beq.n	8004040 <DMA_SetConfig+0x1d0>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a2d      	ldr	r2, [pc, #180]	@ (80040ac <DMA_SetConfig+0x23c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d022      	beq.n	8004040 <DMA_SetConfig+0x1d0>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a2c      	ldr	r2, [pc, #176]	@ (80040b0 <DMA_SetConfig+0x240>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d01d      	beq.n	8004040 <DMA_SetConfig+0x1d0>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a2a      	ldr	r2, [pc, #168]	@ (80040b4 <DMA_SetConfig+0x244>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d018      	beq.n	8004040 <DMA_SetConfig+0x1d0>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a29      	ldr	r2, [pc, #164]	@ (80040b8 <DMA_SetConfig+0x248>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d013      	beq.n	8004040 <DMA_SetConfig+0x1d0>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a27      	ldr	r2, [pc, #156]	@ (80040bc <DMA_SetConfig+0x24c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d00e      	beq.n	8004040 <DMA_SetConfig+0x1d0>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a26      	ldr	r2, [pc, #152]	@ (80040c0 <DMA_SetConfig+0x250>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d009      	beq.n	8004040 <DMA_SetConfig+0x1d0>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a24      	ldr	r2, [pc, #144]	@ (80040c4 <DMA_SetConfig+0x254>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d004      	beq.n	8004040 <DMA_SetConfig+0x1d0>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a23      	ldr	r2, [pc, #140]	@ (80040c8 <DMA_SetConfig+0x258>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d101      	bne.n	8004044 <DMA_SetConfig+0x1d4>
 8004040:	2301      	movs	r3, #1
 8004042:	e000      	b.n	8004046 <DMA_SetConfig+0x1d6>
 8004044:	2300      	movs	r3, #0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d059      	beq.n	80040fe <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800404e:	f003 031f 	and.w	r3, r3, #31
 8004052:	223f      	movs	r2, #63	@ 0x3f
 8004054:	409a      	lsls	r2, r3
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004068:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	2b40      	cmp	r3, #64	@ 0x40
 8004078:	d138      	bne.n	80040ec <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800408a:	e086      	b.n	800419a <DMA_SetConfig+0x32a>
 800408c:	40020010 	.word	0x40020010
 8004090:	40020028 	.word	0x40020028
 8004094:	40020040 	.word	0x40020040
 8004098:	40020058 	.word	0x40020058
 800409c:	40020070 	.word	0x40020070
 80040a0:	40020088 	.word	0x40020088
 80040a4:	400200a0 	.word	0x400200a0
 80040a8:	400200b8 	.word	0x400200b8
 80040ac:	40020410 	.word	0x40020410
 80040b0:	40020428 	.word	0x40020428
 80040b4:	40020440 	.word	0x40020440
 80040b8:	40020458 	.word	0x40020458
 80040bc:	40020470 	.word	0x40020470
 80040c0:	40020488 	.word	0x40020488
 80040c4:	400204a0 	.word	0x400204a0
 80040c8:	400204b8 	.word	0x400204b8
 80040cc:	58025408 	.word	0x58025408
 80040d0:	5802541c 	.word	0x5802541c
 80040d4:	58025430 	.word	0x58025430
 80040d8:	58025444 	.word	0x58025444
 80040dc:	58025458 	.word	0x58025458
 80040e0:	5802546c 	.word	0x5802546c
 80040e4:	58025480 	.word	0x58025480
 80040e8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	60da      	str	r2, [r3, #12]
}
 80040fc:	e04d      	b.n	800419a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a29      	ldr	r2, [pc, #164]	@ (80041a8 <DMA_SetConfig+0x338>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d022      	beq.n	800414e <DMA_SetConfig+0x2de>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a27      	ldr	r2, [pc, #156]	@ (80041ac <DMA_SetConfig+0x33c>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d01d      	beq.n	800414e <DMA_SetConfig+0x2de>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a26      	ldr	r2, [pc, #152]	@ (80041b0 <DMA_SetConfig+0x340>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d018      	beq.n	800414e <DMA_SetConfig+0x2de>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a24      	ldr	r2, [pc, #144]	@ (80041b4 <DMA_SetConfig+0x344>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d013      	beq.n	800414e <DMA_SetConfig+0x2de>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a23      	ldr	r2, [pc, #140]	@ (80041b8 <DMA_SetConfig+0x348>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d00e      	beq.n	800414e <DMA_SetConfig+0x2de>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a21      	ldr	r2, [pc, #132]	@ (80041bc <DMA_SetConfig+0x34c>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d009      	beq.n	800414e <DMA_SetConfig+0x2de>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a20      	ldr	r2, [pc, #128]	@ (80041c0 <DMA_SetConfig+0x350>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d004      	beq.n	800414e <DMA_SetConfig+0x2de>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a1e      	ldr	r2, [pc, #120]	@ (80041c4 <DMA_SetConfig+0x354>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d101      	bne.n	8004152 <DMA_SetConfig+0x2e2>
 800414e:	2301      	movs	r3, #1
 8004150:	e000      	b.n	8004154 <DMA_SetConfig+0x2e4>
 8004152:	2300      	movs	r3, #0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d020      	beq.n	800419a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800415c:	f003 031f 	and.w	r3, r3, #31
 8004160:	2201      	movs	r2, #1
 8004162:	409a      	lsls	r2, r3
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	2b40      	cmp	r3, #64	@ 0x40
 8004176:	d108      	bne.n	800418a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	60da      	str	r2, [r3, #12]
}
 8004188:	e007      	b.n	800419a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	60da      	str	r2, [r3, #12]
}
 800419a:	bf00      	nop
 800419c:	371c      	adds	r7, #28
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	58025408 	.word	0x58025408
 80041ac:	5802541c 	.word	0x5802541c
 80041b0:	58025430 	.word	0x58025430
 80041b4:	58025444 	.word	0x58025444
 80041b8:	58025458 	.word	0x58025458
 80041bc:	5802546c 	.word	0x5802546c
 80041c0:	58025480 	.word	0x58025480
 80041c4:	58025494 	.word	0x58025494

080041c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a42      	ldr	r2, [pc, #264]	@ (80042e0 <DMA_CalcBaseAndBitshift+0x118>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d04a      	beq.n	8004270 <DMA_CalcBaseAndBitshift+0xa8>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a41      	ldr	r2, [pc, #260]	@ (80042e4 <DMA_CalcBaseAndBitshift+0x11c>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d045      	beq.n	8004270 <DMA_CalcBaseAndBitshift+0xa8>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a3f      	ldr	r2, [pc, #252]	@ (80042e8 <DMA_CalcBaseAndBitshift+0x120>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d040      	beq.n	8004270 <DMA_CalcBaseAndBitshift+0xa8>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a3e      	ldr	r2, [pc, #248]	@ (80042ec <DMA_CalcBaseAndBitshift+0x124>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d03b      	beq.n	8004270 <DMA_CalcBaseAndBitshift+0xa8>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a3c      	ldr	r2, [pc, #240]	@ (80042f0 <DMA_CalcBaseAndBitshift+0x128>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d036      	beq.n	8004270 <DMA_CalcBaseAndBitshift+0xa8>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a3b      	ldr	r2, [pc, #236]	@ (80042f4 <DMA_CalcBaseAndBitshift+0x12c>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d031      	beq.n	8004270 <DMA_CalcBaseAndBitshift+0xa8>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a39      	ldr	r2, [pc, #228]	@ (80042f8 <DMA_CalcBaseAndBitshift+0x130>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d02c      	beq.n	8004270 <DMA_CalcBaseAndBitshift+0xa8>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a38      	ldr	r2, [pc, #224]	@ (80042fc <DMA_CalcBaseAndBitshift+0x134>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d027      	beq.n	8004270 <DMA_CalcBaseAndBitshift+0xa8>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a36      	ldr	r2, [pc, #216]	@ (8004300 <DMA_CalcBaseAndBitshift+0x138>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d022      	beq.n	8004270 <DMA_CalcBaseAndBitshift+0xa8>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a35      	ldr	r2, [pc, #212]	@ (8004304 <DMA_CalcBaseAndBitshift+0x13c>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d01d      	beq.n	8004270 <DMA_CalcBaseAndBitshift+0xa8>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a33      	ldr	r2, [pc, #204]	@ (8004308 <DMA_CalcBaseAndBitshift+0x140>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d018      	beq.n	8004270 <DMA_CalcBaseAndBitshift+0xa8>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a32      	ldr	r2, [pc, #200]	@ (800430c <DMA_CalcBaseAndBitshift+0x144>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d013      	beq.n	8004270 <DMA_CalcBaseAndBitshift+0xa8>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a30      	ldr	r2, [pc, #192]	@ (8004310 <DMA_CalcBaseAndBitshift+0x148>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d00e      	beq.n	8004270 <DMA_CalcBaseAndBitshift+0xa8>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a2f      	ldr	r2, [pc, #188]	@ (8004314 <DMA_CalcBaseAndBitshift+0x14c>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d009      	beq.n	8004270 <DMA_CalcBaseAndBitshift+0xa8>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a2d      	ldr	r2, [pc, #180]	@ (8004318 <DMA_CalcBaseAndBitshift+0x150>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d004      	beq.n	8004270 <DMA_CalcBaseAndBitshift+0xa8>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a2c      	ldr	r2, [pc, #176]	@ (800431c <DMA_CalcBaseAndBitshift+0x154>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d101      	bne.n	8004274 <DMA_CalcBaseAndBitshift+0xac>
 8004270:	2301      	movs	r3, #1
 8004272:	e000      	b.n	8004276 <DMA_CalcBaseAndBitshift+0xae>
 8004274:	2300      	movs	r3, #0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d024      	beq.n	80042c4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	b2db      	uxtb	r3, r3
 8004280:	3b10      	subs	r3, #16
 8004282:	4a27      	ldr	r2, [pc, #156]	@ (8004320 <DMA_CalcBaseAndBitshift+0x158>)
 8004284:	fba2 2303 	umull	r2, r3, r2, r3
 8004288:	091b      	lsrs	r3, r3, #4
 800428a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f003 0307 	and.w	r3, r3, #7
 8004292:	4a24      	ldr	r2, [pc, #144]	@ (8004324 <DMA_CalcBaseAndBitshift+0x15c>)
 8004294:	5cd3      	ldrb	r3, [r2, r3]
 8004296:	461a      	mov	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2b03      	cmp	r3, #3
 80042a0:	d908      	bls.n	80042b4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	461a      	mov	r2, r3
 80042a8:	4b1f      	ldr	r3, [pc, #124]	@ (8004328 <DMA_CalcBaseAndBitshift+0x160>)
 80042aa:	4013      	ands	r3, r2
 80042ac:	1d1a      	adds	r2, r3, #4
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	659a      	str	r2, [r3, #88]	@ 0x58
 80042b2:	e00d      	b.n	80042d0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	461a      	mov	r2, r3
 80042ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004328 <DMA_CalcBaseAndBitshift+0x160>)
 80042bc:	4013      	ands	r3, r2
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80042c2:	e005      	b.n	80042d0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	40020010 	.word	0x40020010
 80042e4:	40020028 	.word	0x40020028
 80042e8:	40020040 	.word	0x40020040
 80042ec:	40020058 	.word	0x40020058
 80042f0:	40020070 	.word	0x40020070
 80042f4:	40020088 	.word	0x40020088
 80042f8:	400200a0 	.word	0x400200a0
 80042fc:	400200b8 	.word	0x400200b8
 8004300:	40020410 	.word	0x40020410
 8004304:	40020428 	.word	0x40020428
 8004308:	40020440 	.word	0x40020440
 800430c:	40020458 	.word	0x40020458
 8004310:	40020470 	.word	0x40020470
 8004314:	40020488 	.word	0x40020488
 8004318:	400204a0 	.word	0x400204a0
 800431c:	400204b8 	.word	0x400204b8
 8004320:	aaaaaaab 	.word	0xaaaaaaab
 8004324:	08012374 	.word	0x08012374
 8004328:	fffffc00 	.word	0xfffffc00

0800432c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004334:	2300      	movs	r3, #0
 8004336:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d120      	bne.n	8004382 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004344:	2b03      	cmp	r3, #3
 8004346:	d858      	bhi.n	80043fa <DMA_CheckFifoParam+0xce>
 8004348:	a201      	add	r2, pc, #4	@ (adr r2, 8004350 <DMA_CheckFifoParam+0x24>)
 800434a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434e:	bf00      	nop
 8004350:	08004361 	.word	0x08004361
 8004354:	08004373 	.word	0x08004373
 8004358:	08004361 	.word	0x08004361
 800435c:	080043fb 	.word	0x080043fb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004364:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d048      	beq.n	80043fe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004370:	e045      	b.n	80043fe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004376:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800437a:	d142      	bne.n	8004402 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004380:	e03f      	b.n	8004402 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800438a:	d123      	bne.n	80043d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004390:	2b03      	cmp	r3, #3
 8004392:	d838      	bhi.n	8004406 <DMA_CheckFifoParam+0xda>
 8004394:	a201      	add	r2, pc, #4	@ (adr r2, 800439c <DMA_CheckFifoParam+0x70>)
 8004396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800439a:	bf00      	nop
 800439c:	080043ad 	.word	0x080043ad
 80043a0:	080043b3 	.word	0x080043b3
 80043a4:	080043ad 	.word	0x080043ad
 80043a8:	080043c5 	.word	0x080043c5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	73fb      	strb	r3, [r7, #15]
        break;
 80043b0:	e030      	b.n	8004414 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d025      	beq.n	800440a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043c2:	e022      	b.n	800440a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80043cc:	d11f      	bne.n	800440e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043d2:	e01c      	b.n	800440e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d902      	bls.n	80043e2 <DMA_CheckFifoParam+0xb6>
 80043dc:	2b03      	cmp	r3, #3
 80043de:	d003      	beq.n	80043e8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80043e0:	e018      	b.n	8004414 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	73fb      	strb	r3, [r7, #15]
        break;
 80043e6:	e015      	b.n	8004414 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00e      	beq.n	8004412 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	73fb      	strb	r3, [r7, #15]
    break;
 80043f8:	e00b      	b.n	8004412 <DMA_CheckFifoParam+0xe6>
        break;
 80043fa:	bf00      	nop
 80043fc:	e00a      	b.n	8004414 <DMA_CheckFifoParam+0xe8>
        break;
 80043fe:	bf00      	nop
 8004400:	e008      	b.n	8004414 <DMA_CheckFifoParam+0xe8>
        break;
 8004402:	bf00      	nop
 8004404:	e006      	b.n	8004414 <DMA_CheckFifoParam+0xe8>
        break;
 8004406:	bf00      	nop
 8004408:	e004      	b.n	8004414 <DMA_CheckFifoParam+0xe8>
        break;
 800440a:	bf00      	nop
 800440c:	e002      	b.n	8004414 <DMA_CheckFifoParam+0xe8>
        break;
 800440e:	bf00      	nop
 8004410:	e000      	b.n	8004414 <DMA_CheckFifoParam+0xe8>
    break;
 8004412:	bf00      	nop
    }
  }

  return status;
 8004414:	7bfb      	ldrb	r3, [r7, #15]
}
 8004416:	4618      	mov	r0, r3
 8004418:	3714      	adds	r7, #20
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop

08004424 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a38      	ldr	r2, [pc, #224]	@ (8004518 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d022      	beq.n	8004482 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a36      	ldr	r2, [pc, #216]	@ (800451c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d01d      	beq.n	8004482 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a35      	ldr	r2, [pc, #212]	@ (8004520 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d018      	beq.n	8004482 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a33      	ldr	r2, [pc, #204]	@ (8004524 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d013      	beq.n	8004482 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a32      	ldr	r2, [pc, #200]	@ (8004528 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d00e      	beq.n	8004482 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a30      	ldr	r2, [pc, #192]	@ (800452c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d009      	beq.n	8004482 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a2f      	ldr	r2, [pc, #188]	@ (8004530 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d004      	beq.n	8004482 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a2d      	ldr	r2, [pc, #180]	@ (8004534 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d101      	bne.n	8004486 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004482:	2301      	movs	r3, #1
 8004484:	e000      	b.n	8004488 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004486:	2300      	movs	r3, #0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d01a      	beq.n	80044c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	b2db      	uxtb	r3, r3
 8004492:	3b08      	subs	r3, #8
 8004494:	4a28      	ldr	r2, [pc, #160]	@ (8004538 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004496:	fba2 2303 	umull	r2, r3, r2, r3
 800449a:	091b      	lsrs	r3, r3, #4
 800449c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	4b26      	ldr	r3, [pc, #152]	@ (800453c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80044a2:	4413      	add	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	461a      	mov	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a24      	ldr	r2, [pc, #144]	@ (8004540 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80044b0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f003 031f 	and.w	r3, r3, #31
 80044b8:	2201      	movs	r2, #1
 80044ba:	409a      	lsls	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80044c0:	e024      	b.n	800450c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	3b10      	subs	r3, #16
 80044ca:	4a1e      	ldr	r2, [pc, #120]	@ (8004544 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80044cc:	fba2 2303 	umull	r2, r3, r2, r3
 80044d0:	091b      	lsrs	r3, r3, #4
 80044d2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	4a1c      	ldr	r2, [pc, #112]	@ (8004548 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d806      	bhi.n	80044ea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	4a1b      	ldr	r2, [pc, #108]	@ (800454c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d902      	bls.n	80044ea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	3308      	adds	r3, #8
 80044e8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	4b18      	ldr	r3, [pc, #96]	@ (8004550 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80044ee:	4413      	add	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	461a      	mov	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a16      	ldr	r2, [pc, #88]	@ (8004554 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80044fc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f003 031f 	and.w	r3, r3, #31
 8004504:	2201      	movs	r2, #1
 8004506:	409a      	lsls	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800450c:	bf00      	nop
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr
 8004518:	58025408 	.word	0x58025408
 800451c:	5802541c 	.word	0x5802541c
 8004520:	58025430 	.word	0x58025430
 8004524:	58025444 	.word	0x58025444
 8004528:	58025458 	.word	0x58025458
 800452c:	5802546c 	.word	0x5802546c
 8004530:	58025480 	.word	0x58025480
 8004534:	58025494 	.word	0x58025494
 8004538:	cccccccd 	.word	0xcccccccd
 800453c:	16009600 	.word	0x16009600
 8004540:	58025880 	.word	0x58025880
 8004544:	aaaaaaab 	.word	0xaaaaaaab
 8004548:	400204b8 	.word	0x400204b8
 800454c:	4002040f 	.word	0x4002040f
 8004550:	10008200 	.word	0x10008200
 8004554:	40020880 	.word	0x40020880

08004558 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	b2db      	uxtb	r3, r3
 8004566:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d04a      	beq.n	8004604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2b08      	cmp	r3, #8
 8004572:	d847      	bhi.n	8004604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a25      	ldr	r2, [pc, #148]	@ (8004610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d022      	beq.n	80045c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a24      	ldr	r2, [pc, #144]	@ (8004614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d01d      	beq.n	80045c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a22      	ldr	r2, [pc, #136]	@ (8004618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d018      	beq.n	80045c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a21      	ldr	r2, [pc, #132]	@ (800461c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d013      	beq.n	80045c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a1f      	ldr	r2, [pc, #124]	@ (8004620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d00e      	beq.n	80045c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a1e      	ldr	r2, [pc, #120]	@ (8004624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d009      	beq.n	80045c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a1c      	ldr	r2, [pc, #112]	@ (8004628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d004      	beq.n	80045c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a1b      	ldr	r2, [pc, #108]	@ (800462c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d101      	bne.n	80045c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80045c4:	2301      	movs	r3, #1
 80045c6:	e000      	b.n	80045ca <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80045c8:	2300      	movs	r3, #0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00a      	beq.n	80045e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	4b17      	ldr	r3, [pc, #92]	@ (8004630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80045d2:	4413      	add	r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	461a      	mov	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a15      	ldr	r2, [pc, #84]	@ (8004634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80045e0:	671a      	str	r2, [r3, #112]	@ 0x70
 80045e2:	e009      	b.n	80045f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	4b14      	ldr	r3, [pc, #80]	@ (8004638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80045e8:	4413      	add	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	461a      	mov	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a11      	ldr	r2, [pc, #68]	@ (800463c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80045f6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	3b01      	subs	r3, #1
 80045fc:	2201      	movs	r2, #1
 80045fe:	409a      	lsls	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004604:	bf00      	nop
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	58025408 	.word	0x58025408
 8004614:	5802541c 	.word	0x5802541c
 8004618:	58025430 	.word	0x58025430
 800461c:	58025444 	.word	0x58025444
 8004620:	58025458 	.word	0x58025458
 8004624:	5802546c 	.word	0x5802546c
 8004628:	58025480 	.word	0x58025480
 800462c:	58025494 	.word	0x58025494
 8004630:	1600963f 	.word	0x1600963f
 8004634:	58025940 	.word	0x58025940
 8004638:	1000823f 	.word	0x1000823f
 800463c:	40020940 	.word	0x40020940

08004640 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004640:	b480      	push	{r7}
 8004642:	b087      	sub	sp, #28
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	460b      	mov	r3, r1
 800464a:	607a      	str	r2, [r7, #4]
 800464c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800464e:	2300      	movs	r3, #0
 8004650:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e00a      	b.n	8004672 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 800465c:	7afb      	ldrb	r3, [r7, #11]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d103      	bne.n	800466a <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	605a      	str	r2, [r3, #4]
      break;
 8004668:	e002      	b.n	8004670 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	75fb      	strb	r3, [r7, #23]
      break;
 800466e:	bf00      	nop
  }

  return status;
 8004670:	7dfb      	ldrb	r3, [r7, #23]
}
 8004672:	4618      	mov	r0, r3
 8004674:	371c      	adds	r7, #28
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr

0800467e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800467e:	b480      	push	{r7}
 8004680:	b083      	sub	sp, #12
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
 8004686:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e003      	b.n	800469a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	683a      	ldr	r2, [r7, #0]
 8004696:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004698:	2300      	movs	r3, #0
  }
}
 800469a:	4618      	mov	r0, r3
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
	...

080046a8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	0c1b      	lsrs	r3, r3, #16
 80046b6:	f003 0303 	and.w	r3, r3, #3
 80046ba:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 031f 	and.w	r3, r3, #31
 80046c4:	2201      	movs	r2, #1
 80046c6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ca:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 80046cc:	f7fd fecc 	bl	8002468 <HAL_GetCurrentCPUID>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b03      	cmp	r3, #3
 80046d4:	d105      	bne.n	80046e2 <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	011a      	lsls	r2, r3, #4
 80046da:	4b0f      	ldr	r3, [pc, #60]	@ (8004718 <HAL_EXTI_IRQHandler+0x70>)
 80046dc:	4413      	add	r3, r2
 80046de:	617b      	str	r3, [r7, #20]
 80046e0:	e004      	b.n	80046ec <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	011a      	lsls	r2, r3, #4
 80046e6:	4b0d      	ldr	r3, [pc, #52]	@ (800471c <HAL_EXTI_IRQHandler+0x74>)
 80046e8:	4413      	add	r3, r2
 80046ea:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	4013      	ands	r3, r2
 80046f4:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d009      	beq.n	8004710 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d002      	beq.n	8004710 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	4798      	blx	r3
    }
  }
}
 8004710:	bf00      	nop
 8004712:	3718      	adds	r7, #24
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	58000088 	.word	0x58000088
 800471c:	580000c8 	.word	0x580000c8

08004720 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004720:	b480      	push	{r7}
 8004722:	b089      	sub	sp, #36	@ 0x24
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800472a:	2300      	movs	r3, #0
 800472c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800472e:	4b89      	ldr	r3, [pc, #548]	@ (8004954 <HAL_GPIO_Init+0x234>)
 8004730:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004732:	e194      	b.n	8004a5e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	2101      	movs	r1, #1
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	fa01 f303 	lsl.w	r3, r1, r3
 8004740:	4013      	ands	r3, r2
 8004742:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	2b00      	cmp	r3, #0
 8004748:	f000 8186 	beq.w	8004a58 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f003 0303 	and.w	r3, r3, #3
 8004754:	2b01      	cmp	r3, #1
 8004756:	d005      	beq.n	8004764 <HAL_GPIO_Init+0x44>
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f003 0303 	and.w	r3, r3, #3
 8004760:	2b02      	cmp	r3, #2
 8004762:	d130      	bne.n	80047c6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	2203      	movs	r2, #3
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	43db      	mvns	r3, r3
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	4013      	ands	r3, r2
 800477a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	68da      	ldr	r2, [r3, #12]
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	005b      	lsls	r3, r3, #1
 8004784:	fa02 f303 	lsl.w	r3, r2, r3
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	4313      	orrs	r3, r2
 800478c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800479a:	2201      	movs	r2, #1
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	fa02 f303 	lsl.w	r3, r2, r3
 80047a2:	43db      	mvns	r3, r3
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	4013      	ands	r3, r2
 80047a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	091b      	lsrs	r3, r3, #4
 80047b0:	f003 0201 	and.w	r2, r3, #1
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ba:	69ba      	ldr	r2, [r7, #24]
 80047bc:	4313      	orrs	r3, r2
 80047be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	2b03      	cmp	r3, #3
 80047d0:	d017      	beq.n	8004802 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	2203      	movs	r2, #3
 80047de:	fa02 f303 	lsl.w	r3, r2, r3
 80047e2:	43db      	mvns	r3, r3
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	4013      	ands	r3, r2
 80047e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	689a      	ldr	r2, [r3, #8]
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	fa02 f303 	lsl.w	r3, r2, r3
 80047f6:	69ba      	ldr	r2, [r7, #24]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f003 0303 	and.w	r3, r3, #3
 800480a:	2b02      	cmp	r3, #2
 800480c:	d123      	bne.n	8004856 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	08da      	lsrs	r2, r3, #3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	3208      	adds	r2, #8
 8004816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800481a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	220f      	movs	r2, #15
 8004826:	fa02 f303 	lsl.w	r3, r2, r3
 800482a:	43db      	mvns	r3, r3
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	4013      	ands	r3, r2
 8004830:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	691a      	ldr	r2, [r3, #16]
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	f003 0307 	and.w	r3, r3, #7
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	fa02 f303 	lsl.w	r3, r2, r3
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	4313      	orrs	r3, r2
 8004846:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	08da      	lsrs	r2, r3, #3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3208      	adds	r2, #8
 8004850:	69b9      	ldr	r1, [r7, #24]
 8004852:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	2203      	movs	r2, #3
 8004862:	fa02 f303 	lsl.w	r3, r2, r3
 8004866:	43db      	mvns	r3, r3
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	4013      	ands	r3, r2
 800486c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f003 0203 	and.w	r2, r3, #3
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	4313      	orrs	r3, r2
 8004882:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004892:	2b00      	cmp	r3, #0
 8004894:	f000 80e0 	beq.w	8004a58 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004898:	4b2f      	ldr	r3, [pc, #188]	@ (8004958 <HAL_GPIO_Init+0x238>)
 800489a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800489e:	4a2e      	ldr	r2, [pc, #184]	@ (8004958 <HAL_GPIO_Init+0x238>)
 80048a0:	f043 0302 	orr.w	r3, r3, #2
 80048a4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80048a8:	4b2b      	ldr	r3, [pc, #172]	@ (8004958 <HAL_GPIO_Init+0x238>)
 80048aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048b6:	4a29      	ldr	r2, [pc, #164]	@ (800495c <HAL_GPIO_Init+0x23c>)
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	089b      	lsrs	r3, r3, #2
 80048bc:	3302      	adds	r3, #2
 80048be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	f003 0303 	and.w	r3, r3, #3
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	220f      	movs	r2, #15
 80048ce:	fa02 f303 	lsl.w	r3, r2, r3
 80048d2:	43db      	mvns	r3, r3
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	4013      	ands	r3, r2
 80048d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a20      	ldr	r2, [pc, #128]	@ (8004960 <HAL_GPIO_Init+0x240>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d052      	beq.n	8004988 <HAL_GPIO_Init+0x268>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a1f      	ldr	r2, [pc, #124]	@ (8004964 <HAL_GPIO_Init+0x244>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d031      	beq.n	800494e <HAL_GPIO_Init+0x22e>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a1e      	ldr	r2, [pc, #120]	@ (8004968 <HAL_GPIO_Init+0x248>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d02b      	beq.n	800494a <HAL_GPIO_Init+0x22a>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a1d      	ldr	r2, [pc, #116]	@ (800496c <HAL_GPIO_Init+0x24c>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d025      	beq.n	8004946 <HAL_GPIO_Init+0x226>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a1c      	ldr	r2, [pc, #112]	@ (8004970 <HAL_GPIO_Init+0x250>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d01f      	beq.n	8004942 <HAL_GPIO_Init+0x222>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a1b      	ldr	r2, [pc, #108]	@ (8004974 <HAL_GPIO_Init+0x254>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d019      	beq.n	800493e <HAL_GPIO_Init+0x21e>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a1a      	ldr	r2, [pc, #104]	@ (8004978 <HAL_GPIO_Init+0x258>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d013      	beq.n	800493a <HAL_GPIO_Init+0x21a>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a19      	ldr	r2, [pc, #100]	@ (800497c <HAL_GPIO_Init+0x25c>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d00d      	beq.n	8004936 <HAL_GPIO_Init+0x216>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a18      	ldr	r2, [pc, #96]	@ (8004980 <HAL_GPIO_Init+0x260>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d007      	beq.n	8004932 <HAL_GPIO_Init+0x212>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a17      	ldr	r2, [pc, #92]	@ (8004984 <HAL_GPIO_Init+0x264>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d101      	bne.n	800492e <HAL_GPIO_Init+0x20e>
 800492a:	2309      	movs	r3, #9
 800492c:	e02d      	b.n	800498a <HAL_GPIO_Init+0x26a>
 800492e:	230a      	movs	r3, #10
 8004930:	e02b      	b.n	800498a <HAL_GPIO_Init+0x26a>
 8004932:	2308      	movs	r3, #8
 8004934:	e029      	b.n	800498a <HAL_GPIO_Init+0x26a>
 8004936:	2307      	movs	r3, #7
 8004938:	e027      	b.n	800498a <HAL_GPIO_Init+0x26a>
 800493a:	2306      	movs	r3, #6
 800493c:	e025      	b.n	800498a <HAL_GPIO_Init+0x26a>
 800493e:	2305      	movs	r3, #5
 8004940:	e023      	b.n	800498a <HAL_GPIO_Init+0x26a>
 8004942:	2304      	movs	r3, #4
 8004944:	e021      	b.n	800498a <HAL_GPIO_Init+0x26a>
 8004946:	2303      	movs	r3, #3
 8004948:	e01f      	b.n	800498a <HAL_GPIO_Init+0x26a>
 800494a:	2302      	movs	r3, #2
 800494c:	e01d      	b.n	800498a <HAL_GPIO_Init+0x26a>
 800494e:	2301      	movs	r3, #1
 8004950:	e01b      	b.n	800498a <HAL_GPIO_Init+0x26a>
 8004952:	bf00      	nop
 8004954:	58000080 	.word	0x58000080
 8004958:	58024400 	.word	0x58024400
 800495c:	58000400 	.word	0x58000400
 8004960:	58020000 	.word	0x58020000
 8004964:	58020400 	.word	0x58020400
 8004968:	58020800 	.word	0x58020800
 800496c:	58020c00 	.word	0x58020c00
 8004970:	58021000 	.word	0x58021000
 8004974:	58021400 	.word	0x58021400
 8004978:	58021800 	.word	0x58021800
 800497c:	58021c00 	.word	0x58021c00
 8004980:	58022000 	.word	0x58022000
 8004984:	58022400 	.word	0x58022400
 8004988:	2300      	movs	r3, #0
 800498a:	69fa      	ldr	r2, [r7, #28]
 800498c:	f002 0203 	and.w	r2, r2, #3
 8004990:	0092      	lsls	r2, r2, #2
 8004992:	4093      	lsls	r3, r2
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	4313      	orrs	r3, r2
 8004998:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800499a:	4938      	ldr	r1, [pc, #224]	@ (8004a7c <HAL_GPIO_Init+0x35c>)
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	089b      	lsrs	r3, r3, #2
 80049a0:	3302      	adds	r3, #2
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	43db      	mvns	r3, r3
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	4013      	ands	r3, r2
 80049b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80049ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80049d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	43db      	mvns	r3, r3
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	4013      	ands	r3, r2
 80049e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d003      	beq.n	80049fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80049fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	43db      	mvns	r3, r3
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	4013      	ands	r3, r2
 8004a12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	43db      	mvns	r3, r3
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	fa22 f303 	lsr.w	r3, r2, r3
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f47f ae63 	bne.w	8004734 <HAL_GPIO_Init+0x14>
  }
}
 8004a6e:	bf00      	nop
 8004a70:	bf00      	nop
 8004a72:	3724      	adds	r7, #36	@ 0x24
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr
 8004a7c:	58000400 	.word	0x58000400

08004a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	460b      	mov	r3, r1
 8004a8a:	807b      	strh	r3, [r7, #2]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a90:	787b      	ldrb	r3, [r7, #1]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a96:	887a      	ldrh	r2, [r7, #2]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004a9c:	e003      	b.n	8004aa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004a9e:	887b      	ldrh	r3, [r7, #2]
 8004aa0:	041a      	lsls	r2, r3, #16
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	619a      	str	r2, [r3, #24]
}
 8004aa6:	bf00      	nop
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b085      	sub	sp, #20
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
 8004aba:	460b      	mov	r3, r1
 8004abc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ac4:	887a      	ldrh	r2, [r7, #2]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	041a      	lsls	r2, r3, #16
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	43d9      	mvns	r1, r3
 8004ad0:	887b      	ldrh	r3, [r7, #2]
 8004ad2:	400b      	ands	r3, r1
 8004ad4:	431a      	orrs	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	619a      	str	r2, [r3, #24]
}
 8004ada:	bf00      	nop
 8004adc:	3714      	adds	r7, #20
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
	...

08004ae8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004af0:	4a08      	ldr	r2, [pc, #32]	@ (8004b14 <HAL_HSEM_FastTake+0x2c>)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	3320      	adds	r3, #32
 8004af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004afa:	4a07      	ldr	r2, [pc, #28]	@ (8004b18 <HAL_HSEM_FastTake+0x30>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d101      	bne.n	8004b04 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004b00:	2300      	movs	r3, #0
 8004b02:	e000      	b.n	8004b06 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	58026400 	.word	0x58026400
 8004b18:	80000300 	.word	0x80000300

08004b1c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004b26:	4906      	ldr	r1, [pc, #24]	@ (8004b40 <HAL_HSEM_Release+0x24>)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004b34:	bf00      	nop
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr
 8004b40:	58026400 	.word	0x58026400

08004b44 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af02      	add	r7, sp, #8
 8004b4a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e0fe      	b.n	8004d54 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d106      	bne.n	8004b70 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f00a fa7e 	bl	800f06c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2203      	movs	r2, #3
 8004b74:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f006 fe42 	bl	800b806 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6818      	ldr	r0, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	7c1a      	ldrb	r2, [r3, #16]
 8004b8a:	f88d 2000 	strb.w	r2, [sp]
 8004b8e:	3304      	adds	r3, #4
 8004b90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b92:	f006 fd13 	bl	800b5bc <USB_CoreInit>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d005      	beq.n	8004ba8 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2202      	movs	r2, #2
 8004ba0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e0d5      	b.n	8004d54 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2100      	movs	r1, #0
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f006 fe3a 	bl	800b828 <USB_SetCurrentMode>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d005      	beq.n	8004bc6 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2202      	movs	r2, #2
 8004bbe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e0c6      	b.n	8004d54 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	73fb      	strb	r3, [r7, #15]
 8004bca:	e04a      	b.n	8004c62 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004bcc:	7bfa      	ldrb	r2, [r7, #15]
 8004bce:	6879      	ldr	r1, [r7, #4]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	4413      	add	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	440b      	add	r3, r1
 8004bda:	3315      	adds	r3, #21
 8004bdc:	2201      	movs	r2, #1
 8004bde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004be0:	7bfa      	ldrb	r2, [r7, #15]
 8004be2:	6879      	ldr	r1, [r7, #4]
 8004be4:	4613      	mov	r3, r2
 8004be6:	00db      	lsls	r3, r3, #3
 8004be8:	4413      	add	r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	440b      	add	r3, r1
 8004bee:	3314      	adds	r3, #20
 8004bf0:	7bfa      	ldrb	r2, [r7, #15]
 8004bf2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004bf4:	7bfa      	ldrb	r2, [r7, #15]
 8004bf6:	7bfb      	ldrb	r3, [r7, #15]
 8004bf8:	b298      	uxth	r0, r3
 8004bfa:	6879      	ldr	r1, [r7, #4]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	00db      	lsls	r3, r3, #3
 8004c00:	4413      	add	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	440b      	add	r3, r1
 8004c06:	332e      	adds	r3, #46	@ 0x2e
 8004c08:	4602      	mov	r2, r0
 8004c0a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004c0c:	7bfa      	ldrb	r2, [r7, #15]
 8004c0e:	6879      	ldr	r1, [r7, #4]
 8004c10:	4613      	mov	r3, r2
 8004c12:	00db      	lsls	r3, r3, #3
 8004c14:	4413      	add	r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	440b      	add	r3, r1
 8004c1a:	3318      	adds	r3, #24
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004c20:	7bfa      	ldrb	r2, [r7, #15]
 8004c22:	6879      	ldr	r1, [r7, #4]
 8004c24:	4613      	mov	r3, r2
 8004c26:	00db      	lsls	r3, r3, #3
 8004c28:	4413      	add	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	440b      	add	r3, r1
 8004c2e:	331c      	adds	r3, #28
 8004c30:	2200      	movs	r2, #0
 8004c32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004c34:	7bfa      	ldrb	r2, [r7, #15]
 8004c36:	6879      	ldr	r1, [r7, #4]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	00db      	lsls	r3, r3, #3
 8004c3c:	4413      	add	r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	440b      	add	r3, r1
 8004c42:	3320      	adds	r3, #32
 8004c44:	2200      	movs	r2, #0
 8004c46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004c48:	7bfa      	ldrb	r2, [r7, #15]
 8004c4a:	6879      	ldr	r1, [r7, #4]
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	00db      	lsls	r3, r3, #3
 8004c50:	4413      	add	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	440b      	add	r3, r1
 8004c56:	3324      	adds	r3, #36	@ 0x24
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c5c:	7bfb      	ldrb	r3, [r7, #15]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	73fb      	strb	r3, [r7, #15]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	791b      	ldrb	r3, [r3, #4]
 8004c66:	7bfa      	ldrb	r2, [r7, #15]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d3af      	bcc.n	8004bcc <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	73fb      	strb	r3, [r7, #15]
 8004c70:	e044      	b.n	8004cfc <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004c72:	7bfa      	ldrb	r2, [r7, #15]
 8004c74:	6879      	ldr	r1, [r7, #4]
 8004c76:	4613      	mov	r3, r2
 8004c78:	00db      	lsls	r3, r3, #3
 8004c7a:	4413      	add	r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	440b      	add	r3, r1
 8004c80:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004c84:	2200      	movs	r2, #0
 8004c86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004c88:	7bfa      	ldrb	r2, [r7, #15]
 8004c8a:	6879      	ldr	r1, [r7, #4]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	00db      	lsls	r3, r3, #3
 8004c90:	4413      	add	r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	440b      	add	r3, r1
 8004c96:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004c9a:	7bfa      	ldrb	r2, [r7, #15]
 8004c9c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004c9e:	7bfa      	ldrb	r2, [r7, #15]
 8004ca0:	6879      	ldr	r1, [r7, #4]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	00db      	lsls	r3, r3, #3
 8004ca6:	4413      	add	r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	440b      	add	r3, r1
 8004cac:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004cb4:	7bfa      	ldrb	r2, [r7, #15]
 8004cb6:	6879      	ldr	r1, [r7, #4]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	4413      	add	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	440b      	add	r3, r1
 8004cc2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004cca:	7bfa      	ldrb	r2, [r7, #15]
 8004ccc:	6879      	ldr	r1, [r7, #4]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	4413      	add	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	440b      	add	r3, r1
 8004cd8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004cdc:	2200      	movs	r2, #0
 8004cde:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004ce0:	7bfa      	ldrb	r2, [r7, #15]
 8004ce2:	6879      	ldr	r1, [r7, #4]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	00db      	lsls	r3, r3, #3
 8004ce8:	4413      	add	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	440b      	add	r3, r1
 8004cee:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cf6:	7bfb      	ldrb	r3, [r7, #15]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	73fb      	strb	r3, [r7, #15]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	791b      	ldrb	r3, [r3, #4]
 8004d00:	7bfa      	ldrb	r2, [r7, #15]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d3b5      	bcc.n	8004c72 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6818      	ldr	r0, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	7c1a      	ldrb	r2, [r3, #16]
 8004d0e:	f88d 2000 	strb.w	r2, [sp]
 8004d12:	3304      	adds	r3, #4
 8004d14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d16:	f006 fdd3 	bl	800b8c0 <USB_DevInit>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d005      	beq.n	8004d2c <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2202      	movs	r2, #2
 8004d24:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e013      	b.n	8004d54 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	7b1b      	ldrb	r3, [r3, #12]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d102      	bne.n	8004d48 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f001 f96c 	bl	8006020 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f007 fe12 	bl	800c976 <USB_DevDisconnect>

  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3710      	adds	r7, #16
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d101      	bne.n	8004d78 <HAL_PCD_Start+0x1c>
 8004d74:	2302      	movs	r3, #2
 8004d76:	e022      	b.n	8004dbe <HAL_PCD_Start+0x62>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d009      	beq.n	8004da0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d105      	bne.n	8004da0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d98:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f006 fd1d 	bl	800b7e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f007 fdc0 	bl	800c934 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004dc6:	b590      	push	{r4, r7, lr}
 8004dc8:	b08d      	sub	sp, #52	@ 0x34
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dd4:	6a3b      	ldr	r3, [r7, #32]
 8004dd6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f007 fe7e 	bl	800cade <USB_GetMode>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f040 84b9 	bne.w	800575c <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f007 fde2 	bl	800c9b8 <USB_ReadInterrupts>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f000 84af 	beq.w	800575a <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	0a1b      	lsrs	r3, r3, #8
 8004e06:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f007 fdcf 	bl	800c9b8 <USB_ReadInterrupts>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d107      	bne.n	8004e34 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	695a      	ldr	r2, [r3, #20]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f002 0202 	and.w	r2, r2, #2
 8004e32:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f007 fdbd 	bl	800c9b8 <USB_ReadInterrupts>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	f003 0310 	and.w	r3, r3, #16
 8004e44:	2b10      	cmp	r3, #16
 8004e46:	d161      	bne.n	8004f0c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	699a      	ldr	r2, [r3, #24]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0210 	bic.w	r2, r2, #16
 8004e56:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004e58:	6a3b      	ldr	r3, [r7, #32]
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	f003 020f 	and.w	r2, r3, #15
 8004e64:	4613      	mov	r3, r2
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	4413      	add	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	4413      	add	r3, r2
 8004e74:	3304      	adds	r3, #4
 8004e76:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	0c5b      	lsrs	r3, r3, #17
 8004e7c:	f003 030f 	and.w	r3, r3, #15
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d124      	bne.n	8004ece <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d035      	beq.n	8004efc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	091b      	lsrs	r3, r3, #4
 8004e98:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004e9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	6a38      	ldr	r0, [r7, #32]
 8004ea4:	f007 fbf4 	bl	800c690 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	68da      	ldr	r2, [r3, #12]
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	091b      	lsrs	r3, r3, #4
 8004eb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004eb4:	441a      	add	r2, r3
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	695a      	ldr	r2, [r3, #20]
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	091b      	lsrs	r3, r3, #4
 8004ec2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ec6:	441a      	add	r2, r3
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	615a      	str	r2, [r3, #20]
 8004ecc:	e016      	b.n	8004efc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	0c5b      	lsrs	r3, r3, #17
 8004ed2:	f003 030f 	and.w	r3, r3, #15
 8004ed6:	2b06      	cmp	r3, #6
 8004ed8:	d110      	bne.n	8004efc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004ee0:	2208      	movs	r2, #8
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	6a38      	ldr	r0, [r7, #32]
 8004ee6:	f007 fbd3 	bl	800c690 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	695a      	ldr	r2, [r3, #20]
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	091b      	lsrs	r3, r3, #4
 8004ef2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ef6:	441a      	add	r2, r3
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	699a      	ldr	r2, [r3, #24]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f042 0210 	orr.w	r2, r2, #16
 8004f0a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4618      	mov	r0, r3
 8004f12:	f007 fd51 	bl	800c9b8 <USB_ReadInterrupts>
 8004f16:	4603      	mov	r3, r0
 8004f18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f1c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004f20:	f040 80a7 	bne.w	8005072 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004f24:	2300      	movs	r3, #0
 8004f26:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f007 fd56 	bl	800c9de <USB_ReadDevAllOutEpInterrupt>
 8004f32:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004f34:	e099      	b.n	800506a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f38:	f003 0301 	and.w	r3, r3, #1
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 808e 	beq.w	800505e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f48:	b2d2      	uxtb	r2, r2
 8004f4a:	4611      	mov	r1, r2
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f007 fd7a 	bl	800ca46 <USB_ReadDevOutEPInterrupt>
 8004f52:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00c      	beq.n	8004f78 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f60:	015a      	lsls	r2, r3, #5
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	4413      	add	r3, r2
 8004f66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004f70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 fece 	bl	8005d14 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	f003 0308 	and.w	r3, r3, #8
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00c      	beq.n	8004f9c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f84:	015a      	lsls	r2, r3, #5
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	4413      	add	r3, r2
 8004f8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f8e:	461a      	mov	r2, r3
 8004f90:	2308      	movs	r3, #8
 8004f92:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004f94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 ffa4 	bl	8005ee4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	f003 0310 	and.w	r3, r3, #16
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d008      	beq.n	8004fb8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa8:	015a      	lsls	r2, r3, #5
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	4413      	add	r3, r2
 8004fae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	2310      	movs	r3, #16
 8004fb6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d030      	beq.n	8005024 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004fc2:	6a3b      	ldr	r3, [r7, #32]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fca:	2b80      	cmp	r3, #128	@ 0x80
 8004fcc:	d109      	bne.n	8004fe2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	69fa      	ldr	r2, [r7, #28]
 8004fd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fdc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004fe0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004fe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	4413      	add	r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	78db      	ldrb	r3, [r3, #3]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d108      	bne.n	8005012 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	2200      	movs	r2, #0
 8005004:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005008:	b2db      	uxtb	r3, r3
 800500a:	4619      	mov	r1, r3
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f00a f963 	bl	800f2d8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005014:	015a      	lsls	r2, r3, #5
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	4413      	add	r3, r2
 800501a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800501e:	461a      	mov	r2, r3
 8005020:	2302      	movs	r3, #2
 8005022:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	f003 0320 	and.w	r3, r3, #32
 800502a:	2b00      	cmp	r3, #0
 800502c:	d008      	beq.n	8005040 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800502e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005030:	015a      	lsls	r2, r3, #5
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	4413      	add	r3, r2
 8005036:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800503a:	461a      	mov	r2, r3
 800503c:	2320      	movs	r3, #32
 800503e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d009      	beq.n	800505e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800504a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504c:	015a      	lsls	r2, r3, #5
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	4413      	add	r3, r2
 8005052:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005056:	461a      	mov	r2, r3
 8005058:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800505c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800505e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005060:	3301      	adds	r3, #1
 8005062:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005066:	085b      	lsrs	r3, r3, #1
 8005068:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800506a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800506c:	2b00      	cmp	r3, #0
 800506e:	f47f af62 	bne.w	8004f36 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4618      	mov	r0, r3
 8005078:	f007 fc9e 	bl	800c9b8 <USB_ReadInterrupts>
 800507c:	4603      	mov	r3, r0
 800507e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005082:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005086:	f040 80db 	bne.w	8005240 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4618      	mov	r0, r3
 8005090:	f007 fcbf 	bl	800ca12 <USB_ReadDevAllInEpInterrupt>
 8005094:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005096:	2300      	movs	r3, #0
 8005098:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800509a:	e0cd      	b.n	8005238 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800509c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f000 80c2 	beq.w	800522c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050ae:	b2d2      	uxtb	r2, r2
 80050b0:	4611      	mov	r1, r2
 80050b2:	4618      	mov	r0, r3
 80050b4:	f007 fce5 	bl	800ca82 <USB_ReadDevInEPInterrupt>
 80050b8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d057      	beq.n	8005174 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80050c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c6:	f003 030f 	and.w	r3, r3, #15
 80050ca:	2201      	movs	r2, #1
 80050cc:	fa02 f303 	lsl.w	r3, r2, r3
 80050d0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	43db      	mvns	r3, r3
 80050de:	69f9      	ldr	r1, [r7, #28]
 80050e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80050e4:	4013      	ands	r3, r2
 80050e6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80050e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050f4:	461a      	mov	r2, r3
 80050f6:	2301      	movs	r3, #1
 80050f8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	799b      	ldrb	r3, [r3, #6]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d132      	bne.n	8005168 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005102:	6879      	ldr	r1, [r7, #4]
 8005104:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005106:	4613      	mov	r3, r2
 8005108:	00db      	lsls	r3, r3, #3
 800510a:	4413      	add	r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	440b      	add	r3, r1
 8005110:	3320      	adds	r3, #32
 8005112:	6819      	ldr	r1, [r3, #0]
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005118:	4613      	mov	r3, r2
 800511a:	00db      	lsls	r3, r3, #3
 800511c:	4413      	add	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4403      	add	r3, r0
 8005122:	331c      	adds	r3, #28
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4419      	add	r1, r3
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800512c:	4613      	mov	r3, r2
 800512e:	00db      	lsls	r3, r3, #3
 8005130:	4413      	add	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	4403      	add	r3, r0
 8005136:	3320      	adds	r3, #32
 8005138:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800513a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513c:	2b00      	cmp	r3, #0
 800513e:	d113      	bne.n	8005168 <HAL_PCD_IRQHandler+0x3a2>
 8005140:	6879      	ldr	r1, [r7, #4]
 8005142:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005144:	4613      	mov	r3, r2
 8005146:	00db      	lsls	r3, r3, #3
 8005148:	4413      	add	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	440b      	add	r3, r1
 800514e:	3324      	adds	r3, #36	@ 0x24
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d108      	bne.n	8005168 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6818      	ldr	r0, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005160:	461a      	mov	r2, r3
 8005162:	2101      	movs	r1, #1
 8005164:	f007 fcee 	bl	800cb44 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516a:	b2db      	uxtb	r3, r3
 800516c:	4619      	mov	r1, r3
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f00a f82d 	bl	800f1ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	f003 0308 	and.w	r3, r3, #8
 800517a:	2b00      	cmp	r3, #0
 800517c:	d008      	beq.n	8005190 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800517e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005180:	015a      	lsls	r2, r3, #5
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	4413      	add	r3, r2
 8005186:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800518a:	461a      	mov	r2, r3
 800518c:	2308      	movs	r3, #8
 800518e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	f003 0310 	and.w	r3, r3, #16
 8005196:	2b00      	cmp	r3, #0
 8005198:	d008      	beq.n	80051ac <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800519a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051a6:	461a      	mov	r2, r3
 80051a8:	2310      	movs	r3, #16
 80051aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d008      	beq.n	80051c8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80051b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b8:	015a      	lsls	r2, r3, #5
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	4413      	add	r3, r2
 80051be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051c2:	461a      	mov	r2, r3
 80051c4:	2340      	movs	r3, #64	@ 0x40
 80051c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d023      	beq.n	800521a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80051d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80051d4:	6a38      	ldr	r0, [r7, #32]
 80051d6:	f006 fcd1 	bl	800bb7c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80051da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051dc:	4613      	mov	r3, r2
 80051de:	00db      	lsls	r3, r3, #3
 80051e0:	4413      	add	r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	3310      	adds	r3, #16
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	4413      	add	r3, r2
 80051ea:	3304      	adds	r3, #4
 80051ec:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	78db      	ldrb	r3, [r3, #3]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d108      	bne.n	8005208 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	2200      	movs	r2, #0
 80051fa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80051fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	4619      	mov	r1, r3
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f00a f87a 	bl	800f2fc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	4413      	add	r3, r2
 8005210:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005214:	461a      	mov	r2, r3
 8005216:	2302      	movs	r3, #2
 8005218:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005220:	2b00      	cmp	r3, #0
 8005222:	d003      	beq.n	800522c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005224:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 fce8 	bl	8005bfc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800522c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522e:	3301      	adds	r3, #1
 8005230:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005234:	085b      	lsrs	r3, r3, #1
 8005236:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800523a:	2b00      	cmp	r3, #0
 800523c:	f47f af2e 	bne.w	800509c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4618      	mov	r0, r3
 8005246:	f007 fbb7 	bl	800c9b8 <USB_ReadInterrupts>
 800524a:	4603      	mov	r3, r0
 800524c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005250:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005254:	d122      	bne.n	800529c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	69fa      	ldr	r2, [r7, #28]
 8005260:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005264:	f023 0301 	bic.w	r3, r3, #1
 8005268:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005270:	2b01      	cmp	r3, #1
 8005272:	d108      	bne.n	8005286 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800527c:	2100      	movs	r1, #0
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 fef2 	bl	8006068 <HAL_PCDEx_LPM_Callback>
 8005284:	e002      	b.n	800528c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f00a f818 	bl	800f2bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	695a      	ldr	r2, [r3, #20]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800529a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4618      	mov	r0, r3
 80052a2:	f007 fb89 	bl	800c9b8 <USB_ReadInterrupts>
 80052a6:	4603      	mov	r3, r0
 80052a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052b0:	d112      	bne.n	80052d8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d102      	bne.n	80052c8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f009 ffd4 	bl	800f270 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	695a      	ldr	r2, [r3, #20]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80052d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4618      	mov	r0, r3
 80052de:	f007 fb6b 	bl	800c9b8 <USB_ReadInterrupts>
 80052e2:	4603      	mov	r3, r0
 80052e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052ec:	d121      	bne.n	8005332 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	695a      	ldr	r2, [r3, #20]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80052fc:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005304:	2b00      	cmp	r3, #0
 8005306:	d111      	bne.n	800532c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005316:	089b      	lsrs	r3, r3, #2
 8005318:	f003 020f 	and.w	r2, r3, #15
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005322:	2101      	movs	r1, #1
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 fe9f 	bl	8006068 <HAL_PCDEx_LPM_Callback>
 800532a:	e002      	b.n	8005332 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f009 ff9f 	bl	800f270 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4618      	mov	r0, r3
 8005338:	f007 fb3e 	bl	800c9b8 <USB_ReadInterrupts>
 800533c:	4603      	mov	r3, r0
 800533e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005342:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005346:	f040 80b7 	bne.w	80054b8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	69fa      	ldr	r2, [r7, #28]
 8005354:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005358:	f023 0301 	bic.w	r3, r3, #1
 800535c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2110      	movs	r1, #16
 8005364:	4618      	mov	r0, r3
 8005366:	f006 fc09 	bl	800bb7c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800536a:	2300      	movs	r3, #0
 800536c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800536e:	e046      	b.n	80053fe <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005372:	015a      	lsls	r2, r3, #5
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	4413      	add	r3, r2
 8005378:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800537c:	461a      	mov	r2, r3
 800537e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005382:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	4413      	add	r3, r2
 800538c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005394:	0151      	lsls	r1, r2, #5
 8005396:	69fa      	ldr	r2, [r7, #28]
 8005398:	440a      	add	r2, r1
 800539a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800539e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80053a2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80053a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053a6:	015a      	lsls	r2, r3, #5
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	4413      	add	r3, r2
 80053ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053b0:	461a      	mov	r2, r3
 80053b2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80053b6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80053b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ba:	015a      	lsls	r2, r3, #5
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	4413      	add	r3, r2
 80053c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053c8:	0151      	lsls	r1, r2, #5
 80053ca:	69fa      	ldr	r2, [r7, #28]
 80053cc:	440a      	add	r2, r1
 80053ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80053d6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80053d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053da:	015a      	lsls	r2, r3, #5
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	4413      	add	r3, r2
 80053e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053e8:	0151      	lsls	r1, r2, #5
 80053ea:	69fa      	ldr	r2, [r7, #28]
 80053ec:	440a      	add	r2, r1
 80053ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053f2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80053f6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053fa:	3301      	adds	r3, #1
 80053fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	791b      	ldrb	r3, [r3, #4]
 8005402:	461a      	mov	r2, r3
 8005404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005406:	4293      	cmp	r3, r2
 8005408:	d3b2      	bcc.n	8005370 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005410:	69db      	ldr	r3, [r3, #28]
 8005412:	69fa      	ldr	r2, [r7, #28]
 8005414:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005418:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800541c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	7bdb      	ldrb	r3, [r3, #15]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d016      	beq.n	8005454 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800542c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005430:	69fa      	ldr	r2, [r7, #28]
 8005432:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005436:	f043 030b 	orr.w	r3, r3, #11
 800543a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005446:	69fa      	ldr	r2, [r7, #28]
 8005448:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800544c:	f043 030b 	orr.w	r3, r3, #11
 8005450:	6453      	str	r3, [r2, #68]	@ 0x44
 8005452:	e015      	b.n	8005480 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800545a:	695a      	ldr	r2, [r3, #20]
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005462:	4619      	mov	r1, r3
 8005464:	f242 032b 	movw	r3, #8235	@ 0x202b
 8005468:	4313      	orrs	r3, r2
 800546a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	69fa      	ldr	r2, [r7, #28]
 8005476:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800547a:	f043 030b 	orr.w	r3, r3, #11
 800547e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	69fa      	ldr	r2, [r7, #28]
 800548a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800548e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005492:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6818      	ldr	r0, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80054a2:	461a      	mov	r2, r3
 80054a4:	f007 fb4e 	bl	800cb44 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	695a      	ldr	r2, [r3, #20]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80054b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4618      	mov	r0, r3
 80054be:	f007 fa7b 	bl	800c9b8 <USB_ReadInterrupts>
 80054c2:	4603      	mov	r3, r0
 80054c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054cc:	d123      	bne.n	8005516 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f007 fb12 	bl	800cafc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4618      	mov	r0, r3
 80054de:	f006 fbc6 	bl	800bc6e <USB_GetDevSpeed>
 80054e2:	4603      	mov	r3, r0
 80054e4:	461a      	mov	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681c      	ldr	r4, [r3, #0]
 80054ee:	f001 fdbb 	bl	8007068 <HAL_RCC_GetHCLKFreq>
 80054f2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80054f8:	461a      	mov	r2, r3
 80054fa:	4620      	mov	r0, r4
 80054fc:	f006 f8d0 	bl	800b6a0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f009 fe8c 	bl	800f21e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	695a      	ldr	r2, [r3, #20]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005514:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4618      	mov	r0, r3
 800551c:	f007 fa4c 	bl	800c9b8 <USB_ReadInterrupts>
 8005520:	4603      	mov	r3, r0
 8005522:	f003 0308 	and.w	r3, r3, #8
 8005526:	2b08      	cmp	r3, #8
 8005528:	d10a      	bne.n	8005540 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f009 fe69 	bl	800f202 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	695a      	ldr	r2, [r3, #20]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f002 0208 	and.w	r2, r2, #8
 800553e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4618      	mov	r0, r3
 8005546:	f007 fa37 	bl	800c9b8 <USB_ReadInterrupts>
 800554a:	4603      	mov	r3, r0
 800554c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005550:	2b80      	cmp	r3, #128	@ 0x80
 8005552:	d123      	bne.n	800559c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005554:	6a3b      	ldr	r3, [r7, #32]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005560:	2301      	movs	r3, #1
 8005562:	627b      	str	r3, [r7, #36]	@ 0x24
 8005564:	e014      	b.n	8005590 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005566:	6879      	ldr	r1, [r7, #4]
 8005568:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800556a:	4613      	mov	r3, r2
 800556c:	00db      	lsls	r3, r3, #3
 800556e:	4413      	add	r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	440b      	add	r3, r1
 8005574:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d105      	bne.n	800558a <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800557e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005580:	b2db      	uxtb	r3, r3
 8005582:	4619      	mov	r1, r3
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 fb08 	bl	8005b9a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800558a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558c:	3301      	adds	r3, #1
 800558e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	791b      	ldrb	r3, [r3, #4]
 8005594:	461a      	mov	r2, r3
 8005596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005598:	4293      	cmp	r3, r2
 800559a:	d3e4      	bcc.n	8005566 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4618      	mov	r0, r3
 80055a2:	f007 fa09 	bl	800c9b8 <USB_ReadInterrupts>
 80055a6:	4603      	mov	r3, r0
 80055a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80055ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055b0:	d13c      	bne.n	800562c <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80055b2:	2301      	movs	r3, #1
 80055b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80055b6:	e02b      	b.n	8005610 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80055b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80055c8:	6879      	ldr	r1, [r7, #4]
 80055ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055cc:	4613      	mov	r3, r2
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	4413      	add	r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	440b      	add	r3, r1
 80055d6:	3318      	adds	r3, #24
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d115      	bne.n	800560a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80055de:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	da12      	bge.n	800560a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80055e4:	6879      	ldr	r1, [r7, #4]
 80055e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055e8:	4613      	mov	r3, r2
 80055ea:	00db      	lsls	r3, r3, #3
 80055ec:	4413      	add	r3, r2
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	440b      	add	r3, r1
 80055f2:	3317      	adds	r3, #23
 80055f4:	2201      	movs	r2, #1
 80055f6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80055f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005600:	b2db      	uxtb	r3, r3
 8005602:	4619      	mov	r1, r3
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 fac8 	bl	8005b9a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800560a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560c:	3301      	adds	r3, #1
 800560e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	791b      	ldrb	r3, [r3, #4]
 8005614:	461a      	mov	r2, r3
 8005616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005618:	4293      	cmp	r3, r2
 800561a:	d3cd      	bcc.n	80055b8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	695a      	ldr	r2, [r3, #20]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800562a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4618      	mov	r0, r3
 8005632:	f007 f9c1 	bl	800c9b8 <USB_ReadInterrupts>
 8005636:	4603      	mov	r3, r0
 8005638:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800563c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005640:	d156      	bne.n	80056f0 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005642:	2301      	movs	r3, #1
 8005644:	627b      	str	r3, [r7, #36]	@ 0x24
 8005646:	e045      	b.n	80056d4 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800564a:	015a      	lsls	r2, r3, #5
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	4413      	add	r3, r2
 8005650:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005658:	6879      	ldr	r1, [r7, #4]
 800565a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800565c:	4613      	mov	r3, r2
 800565e:	00db      	lsls	r3, r3, #3
 8005660:	4413      	add	r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	440b      	add	r3, r1
 8005666:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d12e      	bne.n	80056ce <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005670:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005672:	2b00      	cmp	r3, #0
 8005674:	da2b      	bge.n	80056ce <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005682:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005686:	429a      	cmp	r2, r3
 8005688:	d121      	bne.n	80056ce <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800568a:	6879      	ldr	r1, [r7, #4]
 800568c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800568e:	4613      	mov	r3, r2
 8005690:	00db      	lsls	r3, r3, #3
 8005692:	4413      	add	r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	440b      	add	r3, r1
 8005698:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800569c:	2201      	movs	r2, #1
 800569e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80056a0:	6a3b      	ldr	r3, [r7, #32]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80056a8:	6a3b      	ldr	r3, [r7, #32]
 80056aa:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80056ac:	6a3b      	ldr	r3, [r7, #32]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10a      	bne.n	80056ce <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	69fa      	ldr	r2, [r7, #28]
 80056c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80056ca:	6053      	str	r3, [r2, #4]
            break;
 80056cc:	e008      	b.n	80056e0 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d0:	3301      	adds	r3, #1
 80056d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	791b      	ldrb	r3, [r3, #4]
 80056d8:	461a      	mov	r2, r3
 80056da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056dc:	4293      	cmp	r3, r2
 80056de:	d3b3      	bcc.n	8005648 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	695a      	ldr	r2, [r3, #20]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80056ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4618      	mov	r0, r3
 80056f6:	f007 f95f 	bl	800c9b8 <USB_ReadInterrupts>
 80056fa:	4603      	mov	r3, r0
 80056fc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005700:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005704:	d10a      	bne.n	800571c <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f009 fe0a 	bl	800f320 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	695a      	ldr	r2, [r3, #20]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800571a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4618      	mov	r0, r3
 8005722:	f007 f949 	bl	800c9b8 <USB_ReadInterrupts>
 8005726:	4603      	mov	r3, r0
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b04      	cmp	r3, #4
 800572e:	d115      	bne.n	800575c <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	f003 0304 	and.w	r3, r3, #4
 800573e:	2b00      	cmp	r3, #0
 8005740:	d002      	beq.n	8005748 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f009 fdfa 	bl	800f33c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6859      	ldr	r1, [r3, #4]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	430a      	orrs	r2, r1
 8005756:	605a      	str	r2, [r3, #4]
 8005758:	e000      	b.n	800575c <HAL_PCD_IRQHandler+0x996>
      return;
 800575a:	bf00      	nop
    }
  }
}
 800575c:	3734      	adds	r7, #52	@ 0x34
 800575e:	46bd      	mov	sp, r7
 8005760:	bd90      	pop	{r4, r7, pc}

08005762 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b082      	sub	sp, #8
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
 800576a:	460b      	mov	r3, r1
 800576c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005774:	2b01      	cmp	r3, #1
 8005776:	d101      	bne.n	800577c <HAL_PCD_SetAddress+0x1a>
 8005778:	2302      	movs	r3, #2
 800577a:	e012      	b.n	80057a2 <HAL_PCD_SetAddress+0x40>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	78fa      	ldrb	r2, [r7, #3]
 8005788:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	78fa      	ldrb	r2, [r7, #3]
 8005790:	4611      	mov	r1, r2
 8005792:	4618      	mov	r0, r3
 8005794:	f007 f8a8 	bl	800c8e8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3708      	adds	r7, #8
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b084      	sub	sp, #16
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
 80057b2:	4608      	mov	r0, r1
 80057b4:	4611      	mov	r1, r2
 80057b6:	461a      	mov	r2, r3
 80057b8:	4603      	mov	r3, r0
 80057ba:	70fb      	strb	r3, [r7, #3]
 80057bc:	460b      	mov	r3, r1
 80057be:	803b      	strh	r3, [r7, #0]
 80057c0:	4613      	mov	r3, r2
 80057c2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80057c4:	2300      	movs	r3, #0
 80057c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80057c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	da0f      	bge.n	80057f0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057d0:	78fb      	ldrb	r3, [r7, #3]
 80057d2:	f003 020f 	and.w	r2, r3, #15
 80057d6:	4613      	mov	r3, r2
 80057d8:	00db      	lsls	r3, r3, #3
 80057da:	4413      	add	r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	3310      	adds	r3, #16
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	4413      	add	r3, r2
 80057e4:	3304      	adds	r3, #4
 80057e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2201      	movs	r2, #1
 80057ec:	705a      	strb	r2, [r3, #1]
 80057ee:	e00f      	b.n	8005810 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057f0:	78fb      	ldrb	r3, [r7, #3]
 80057f2:	f003 020f 	and.w	r2, r3, #15
 80057f6:	4613      	mov	r3, r2
 80057f8:	00db      	lsls	r3, r3, #3
 80057fa:	4413      	add	r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	4413      	add	r3, r2
 8005806:	3304      	adds	r3, #4
 8005808:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005810:	78fb      	ldrb	r3, [r7, #3]
 8005812:	f003 030f 	and.w	r3, r3, #15
 8005816:	b2da      	uxtb	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800581c:	883a      	ldrh	r2, [r7, #0]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	78ba      	ldrb	r2, [r7, #2]
 8005826:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	785b      	ldrb	r3, [r3, #1]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d004      	beq.n	800583a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	461a      	mov	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800583a:	78bb      	ldrb	r3, [r7, #2]
 800583c:	2b02      	cmp	r3, #2
 800583e:	d102      	bne.n	8005846 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800584c:	2b01      	cmp	r3, #1
 800584e:	d101      	bne.n	8005854 <HAL_PCD_EP_Open+0xaa>
 8005850:	2302      	movs	r3, #2
 8005852:	e00e      	b.n	8005872 <HAL_PCD_EP_Open+0xc8>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68f9      	ldr	r1, [r7, #12]
 8005862:	4618      	mov	r0, r3
 8005864:	f006 fa28 	bl	800bcb8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005870:	7afb      	ldrb	r3, [r7, #11]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b084      	sub	sp, #16
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	460b      	mov	r3, r1
 8005884:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005886:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800588a:	2b00      	cmp	r3, #0
 800588c:	da0f      	bge.n	80058ae <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800588e:	78fb      	ldrb	r3, [r7, #3]
 8005890:	f003 020f 	and.w	r2, r3, #15
 8005894:	4613      	mov	r3, r2
 8005896:	00db      	lsls	r3, r3, #3
 8005898:	4413      	add	r3, r2
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	3310      	adds	r3, #16
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	4413      	add	r3, r2
 80058a2:	3304      	adds	r3, #4
 80058a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2201      	movs	r2, #1
 80058aa:	705a      	strb	r2, [r3, #1]
 80058ac:	e00f      	b.n	80058ce <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058ae:	78fb      	ldrb	r3, [r7, #3]
 80058b0:	f003 020f 	and.w	r2, r3, #15
 80058b4:	4613      	mov	r3, r2
 80058b6:	00db      	lsls	r3, r3, #3
 80058b8:	4413      	add	r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	4413      	add	r3, r2
 80058c4:	3304      	adds	r3, #4
 80058c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80058ce:	78fb      	ldrb	r3, [r7, #3]
 80058d0:	f003 030f 	and.w	r3, r3, #15
 80058d4:	b2da      	uxtb	r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d101      	bne.n	80058e8 <HAL_PCD_EP_Close+0x6e>
 80058e4:	2302      	movs	r3, #2
 80058e6:	e00e      	b.n	8005906 <HAL_PCD_EP_Close+0x8c>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68f9      	ldr	r1, [r7, #12]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f006 fa66 	bl	800bdc8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b086      	sub	sp, #24
 8005912:	af00      	add	r7, sp, #0
 8005914:	60f8      	str	r0, [r7, #12]
 8005916:	607a      	str	r2, [r7, #4]
 8005918:	603b      	str	r3, [r7, #0]
 800591a:	460b      	mov	r3, r1
 800591c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800591e:	7afb      	ldrb	r3, [r7, #11]
 8005920:	f003 020f 	and.w	r2, r3, #15
 8005924:	4613      	mov	r3, r2
 8005926:	00db      	lsls	r3, r3, #3
 8005928:	4413      	add	r3, r2
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	4413      	add	r3, r2
 8005934:	3304      	adds	r3, #4
 8005936:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	683a      	ldr	r2, [r7, #0]
 8005942:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	2200      	movs	r2, #0
 8005948:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	2200      	movs	r2, #0
 800594e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005950:	7afb      	ldrb	r3, [r7, #11]
 8005952:	f003 030f 	and.w	r3, r3, #15
 8005956:	b2da      	uxtb	r2, r3
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	799b      	ldrb	r3, [r3, #6]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d102      	bne.n	800596a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6818      	ldr	r0, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	799b      	ldrb	r3, [r3, #6]
 8005972:	461a      	mov	r2, r3
 8005974:	6979      	ldr	r1, [r7, #20]
 8005976:	f006 fb03 	bl	800bf80 <USB_EPStartXfer>

  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3718      	adds	r7, #24
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	460b      	mov	r3, r1
 800598e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005990:	78fb      	ldrb	r3, [r7, #3]
 8005992:	f003 020f 	and.w	r2, r3, #15
 8005996:	6879      	ldr	r1, [r7, #4]
 8005998:	4613      	mov	r3, r2
 800599a:	00db      	lsls	r3, r3, #3
 800599c:	4413      	add	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	440b      	add	r3, r1
 80059a2:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80059a6:	681b      	ldr	r3, [r3, #0]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	607a      	str	r2, [r7, #4]
 80059be:	603b      	str	r3, [r7, #0]
 80059c0:	460b      	mov	r3, r1
 80059c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059c4:	7afb      	ldrb	r3, [r7, #11]
 80059c6:	f003 020f 	and.w	r2, r3, #15
 80059ca:	4613      	mov	r3, r2
 80059cc:	00db      	lsls	r3, r3, #3
 80059ce:	4413      	add	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	3310      	adds	r3, #16
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	4413      	add	r3, r2
 80059d8:	3304      	adds	r3, #4
 80059da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	2200      	movs	r2, #0
 80059ec:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	2201      	movs	r2, #1
 80059f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059f4:	7afb      	ldrb	r3, [r7, #11]
 80059f6:	f003 030f 	and.w	r3, r3, #15
 80059fa:	b2da      	uxtb	r2, r3
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	799b      	ldrb	r3, [r3, #6]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d102      	bne.n	8005a0e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6818      	ldr	r0, [r3, #0]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	799b      	ldrb	r3, [r3, #6]
 8005a16:	461a      	mov	r2, r3
 8005a18:	6979      	ldr	r1, [r7, #20]
 8005a1a:	f006 fab1 	bl	800bf80 <USB_EPStartXfer>

  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3718      	adds	r7, #24
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	460b      	mov	r3, r1
 8005a32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005a34:	78fb      	ldrb	r3, [r7, #3]
 8005a36:	f003 030f 	and.w	r3, r3, #15
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	7912      	ldrb	r2, [r2, #4]
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d901      	bls.n	8005a46 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e04f      	b.n	8005ae6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005a46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	da0f      	bge.n	8005a6e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a4e:	78fb      	ldrb	r3, [r7, #3]
 8005a50:	f003 020f 	and.w	r2, r3, #15
 8005a54:	4613      	mov	r3, r2
 8005a56:	00db      	lsls	r3, r3, #3
 8005a58:	4413      	add	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	3310      	adds	r3, #16
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	4413      	add	r3, r2
 8005a62:	3304      	adds	r3, #4
 8005a64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	705a      	strb	r2, [r3, #1]
 8005a6c:	e00d      	b.n	8005a8a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005a6e:	78fa      	ldrb	r2, [r7, #3]
 8005a70:	4613      	mov	r3, r2
 8005a72:	00db      	lsls	r3, r3, #3
 8005a74:	4413      	add	r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	4413      	add	r3, r2
 8005a80:	3304      	adds	r3, #4
 8005a82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a90:	78fb      	ldrb	r3, [r7, #3]
 8005a92:	f003 030f 	and.w	r3, r3, #15
 8005a96:	b2da      	uxtb	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d101      	bne.n	8005aaa <HAL_PCD_EP_SetStall+0x82>
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	e01d      	b.n	8005ae6 <HAL_PCD_EP_SetStall+0xbe>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68f9      	ldr	r1, [r7, #12]
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f006 fe41 	bl	800c740 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005abe:	78fb      	ldrb	r3, [r7, #3]
 8005ac0:	f003 030f 	and.w	r3, r3, #15
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d109      	bne.n	8005adc <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6818      	ldr	r0, [r3, #0]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	7999      	ldrb	r1, [r3, #6]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	f007 f834 	bl	800cb44 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b084      	sub	sp, #16
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
 8005af6:	460b      	mov	r3, r1
 8005af8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005afa:	78fb      	ldrb	r3, [r7, #3]
 8005afc:	f003 030f 	and.w	r3, r3, #15
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	7912      	ldrb	r2, [r2, #4]
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d901      	bls.n	8005b0c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e042      	b.n	8005b92 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005b0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	da0f      	bge.n	8005b34 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b14:	78fb      	ldrb	r3, [r7, #3]
 8005b16:	f003 020f 	and.w	r2, r3, #15
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	00db      	lsls	r3, r3, #3
 8005b1e:	4413      	add	r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	3310      	adds	r3, #16
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	4413      	add	r3, r2
 8005b28:	3304      	adds	r3, #4
 8005b2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	705a      	strb	r2, [r3, #1]
 8005b32:	e00f      	b.n	8005b54 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b34:	78fb      	ldrb	r3, [r7, #3]
 8005b36:	f003 020f 	and.w	r2, r3, #15
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	00db      	lsls	r3, r3, #3
 8005b3e:	4413      	add	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	4413      	add	r3, r2
 8005b4a:	3304      	adds	r3, #4
 8005b4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b5a:	78fb      	ldrb	r3, [r7, #3]
 8005b5c:	f003 030f 	and.w	r3, r3, #15
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d101      	bne.n	8005b74 <HAL_PCD_EP_ClrStall+0x86>
 8005b70:	2302      	movs	r3, #2
 8005b72:	e00e      	b.n	8005b92 <HAL_PCD_EP_ClrStall+0xa4>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68f9      	ldr	r1, [r7, #12]
 8005b82:	4618      	mov	r0, r3
 8005b84:	f006 fe4a 	bl	800c81c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}

08005b9a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b084      	sub	sp, #16
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005ba6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	da0c      	bge.n	8005bc8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bae:	78fb      	ldrb	r3, [r7, #3]
 8005bb0:	f003 020f 	and.w	r2, r3, #15
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	00db      	lsls	r3, r3, #3
 8005bb8:	4413      	add	r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	3310      	adds	r3, #16
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	3304      	adds	r3, #4
 8005bc4:	60fb      	str	r3, [r7, #12]
 8005bc6:	e00c      	b.n	8005be2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005bc8:	78fb      	ldrb	r3, [r7, #3]
 8005bca:	f003 020f 	and.w	r2, r3, #15
 8005bce:	4613      	mov	r3, r2
 8005bd0:	00db      	lsls	r3, r3, #3
 8005bd2:	4413      	add	r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	4413      	add	r3, r2
 8005bde:	3304      	adds	r3, #4
 8005be0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68f9      	ldr	r1, [r7, #12]
 8005be8:	4618      	mov	r0, r3
 8005bea:	f006 fc69 	bl	800c4c0 <USB_EPStopXfer>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005bf2:	7afb      	ldrb	r3, [r7, #11]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b08a      	sub	sp, #40	@ 0x28
 8005c00:	af02      	add	r7, sp, #8
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005c10:	683a      	ldr	r2, [r7, #0]
 8005c12:	4613      	mov	r3, r2
 8005c14:	00db      	lsls	r3, r3, #3
 8005c16:	4413      	add	r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	3310      	adds	r3, #16
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	4413      	add	r3, r2
 8005c20:	3304      	adds	r3, #4
 8005c22:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	695a      	ldr	r2, [r3, #20]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d901      	bls.n	8005c34 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e06b      	b.n	8005d0c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	691a      	ldr	r2, [r3, #16]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	695b      	ldr	r3, [r3, #20]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	69fa      	ldr	r2, [r7, #28]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d902      	bls.n	8005c50 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	3303      	adds	r3, #3
 8005c54:	089b      	lsrs	r3, r3, #2
 8005c56:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c58:	e02a      	b.n	8005cb0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	691a      	ldr	r2, [r3, #16]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	69fa      	ldr	r2, [r7, #28]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d902      	bls.n	8005c76 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	3303      	adds	r3, #3
 8005c7a:	089b      	lsrs	r3, r3, #2
 8005c7c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	68d9      	ldr	r1, [r3, #12]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	b2da      	uxtb	r2, r3
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	4603      	mov	r3, r0
 8005c92:	6978      	ldr	r0, [r7, #20]
 8005c94:	f006 fcbe 	bl	800c614 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	68da      	ldr	r2, [r3, #12]
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	441a      	add	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	695a      	ldr	r2, [r3, #20]
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	441a      	add	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	015a      	lsls	r2, r3, #5
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005cc0:	69ba      	ldr	r2, [r7, #24]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d809      	bhi.n	8005cda <PCD_WriteEmptyTxFifo+0xde>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	695a      	ldr	r2, [r3, #20]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d203      	bcs.n	8005cda <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1bf      	bne.n	8005c5a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	691a      	ldr	r2, [r3, #16]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d811      	bhi.n	8005d0a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	f003 030f 	and.w	r3, r3, #15
 8005cec:	2201      	movs	r2, #1
 8005cee:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	43db      	mvns	r3, r3
 8005d00:	6939      	ldr	r1, [r7, #16]
 8005d02:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d06:	4013      	ands	r3, r2
 8005d08:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3720      	adds	r7, #32
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b088      	sub	sp, #32
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	333c      	adds	r3, #60	@ 0x3c
 8005d2c:	3304      	adds	r3, #4
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	015a      	lsls	r2, r3, #5
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	4413      	add	r3, r2
 8005d3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	799b      	ldrb	r3, [r3, #6]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d17b      	bne.n	8005e42 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f003 0308 	and.w	r3, r3, #8
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d015      	beq.n	8005d80 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	4a61      	ldr	r2, [pc, #388]	@ (8005edc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	f240 80b9 	bls.w	8005ed0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	f000 80b3 	beq.w	8005ed0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	015a      	lsls	r2, r3, #5
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	4413      	add	r3, r2
 8005d72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d76:	461a      	mov	r2, r3
 8005d78:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d7c:	6093      	str	r3, [r2, #8]
 8005d7e:	e0a7      	b.n	8005ed0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	f003 0320 	and.w	r3, r3, #32
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d009      	beq.n	8005d9e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	015a      	lsls	r2, r3, #5
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	4413      	add	r3, r2
 8005d92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d96:	461a      	mov	r2, r3
 8005d98:	2320      	movs	r3, #32
 8005d9a:	6093      	str	r3, [r2, #8]
 8005d9c:	e098      	b.n	8005ed0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f040 8093 	bne.w	8005ed0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	4a4b      	ldr	r2, [pc, #300]	@ (8005edc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d90f      	bls.n	8005dd2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00a      	beq.n	8005dd2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	015a      	lsls	r2, r3, #5
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dc8:	461a      	mov	r2, r3
 8005dca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dce:	6093      	str	r3, [r2, #8]
 8005dd0:	e07e      	b.n	8005ed0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	00db      	lsls	r3, r3, #3
 8005dd8:	4413      	add	r3, r2
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	4413      	add	r3, r2
 8005de4:	3304      	adds	r3, #4
 8005de6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6a1a      	ldr	r2, [r3, #32]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	0159      	lsls	r1, r3, #5
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	440b      	add	r3, r1
 8005df4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dfe:	1ad2      	subs	r2, r2, r3
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d114      	bne.n	8005e34 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d109      	bne.n	8005e26 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6818      	ldr	r0, [r3, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	2101      	movs	r1, #1
 8005e20:	f006 fe90 	bl	800cb44 <USB_EP0_OutStart>
 8005e24:	e006      	b.n	8005e34 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	68da      	ldr	r2, [r3, #12]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	441a      	add	r2, r3
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	4619      	mov	r1, r3
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f009 f9ac 	bl	800f198 <HAL_PCD_DataOutStageCallback>
 8005e40:	e046      	b.n	8005ed0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	4a26      	ldr	r2, [pc, #152]	@ (8005ee0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d124      	bne.n	8005e94 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00a      	beq.n	8005e6a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e60:	461a      	mov	r2, r3
 8005e62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e66:	6093      	str	r3, [r2, #8]
 8005e68:	e032      	b.n	8005ed0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	f003 0320 	and.w	r3, r3, #32
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d008      	beq.n	8005e86 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	015a      	lsls	r2, r3, #5
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e80:	461a      	mov	r2, r3
 8005e82:	2320      	movs	r3, #32
 8005e84:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f009 f983 	bl	800f198 <HAL_PCD_DataOutStageCallback>
 8005e92:	e01d      	b.n	8005ed0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d114      	bne.n	8005ec4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005e9a:	6879      	ldr	r1, [r7, #4]
 8005e9c:	683a      	ldr	r2, [r7, #0]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	00db      	lsls	r3, r3, #3
 8005ea2:	4413      	add	r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	440b      	add	r3, r1
 8005ea8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d108      	bne.n	8005ec4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6818      	ldr	r0, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	2100      	movs	r1, #0
 8005ec0:	f006 fe40 	bl	800cb44 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	4619      	mov	r1, r3
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f009 f964 	bl	800f198 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3720      	adds	r7, #32
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	4f54300a 	.word	0x4f54300a
 8005ee0:	4f54310a 	.word	0x4f54310a

08005ee4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	333c      	adds	r3, #60	@ 0x3c
 8005efc:	3304      	adds	r3, #4
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	015a      	lsls	r2, r3, #5
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	4413      	add	r3, r2
 8005f0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	4a15      	ldr	r2, [pc, #84]	@ (8005f6c <PCD_EP_OutSetupPacket_int+0x88>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d90e      	bls.n	8005f38 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d009      	beq.n	8005f38 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f30:	461a      	mov	r2, r3
 8005f32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f36:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f009 f91b 	bl	800f174 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	4a0a      	ldr	r2, [pc, #40]	@ (8005f6c <PCD_EP_OutSetupPacket_int+0x88>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d90c      	bls.n	8005f60 <PCD_EP_OutSetupPacket_int+0x7c>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	799b      	ldrb	r3, [r3, #6]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d108      	bne.n	8005f60 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6818      	ldr	r0, [r3, #0]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005f58:	461a      	mov	r2, r3
 8005f5a:	2101      	movs	r1, #1
 8005f5c:	f006 fdf2 	bl	800cb44 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3718      	adds	r7, #24
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	4f54300a 	.word	0x4f54300a

08005f70 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	460b      	mov	r3, r1
 8005f7a:	70fb      	strb	r3, [r7, #3]
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f86:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005f88:	78fb      	ldrb	r3, [r7, #3]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d107      	bne.n	8005f9e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005f8e:	883b      	ldrh	r3, [r7, #0]
 8005f90:	0419      	lsls	r1, r3, #16
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68ba      	ldr	r2, [r7, #8]
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f9c:	e028      	b.n	8005ff0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fa4:	0c1b      	lsrs	r3, r3, #16
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	4413      	add	r3, r2
 8005faa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005fac:	2300      	movs	r3, #0
 8005fae:	73fb      	strb	r3, [r7, #15]
 8005fb0:	e00d      	b.n	8005fce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	7bfb      	ldrb	r3, [r7, #15]
 8005fb8:	3340      	adds	r3, #64	@ 0x40
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	4413      	add	r3, r2
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	0c1b      	lsrs	r3, r3, #16
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005fc8:	7bfb      	ldrb	r3, [r7, #15]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	73fb      	strb	r3, [r7, #15]
 8005fce:	7bfa      	ldrb	r2, [r7, #15]
 8005fd0:	78fb      	ldrb	r3, [r7, #3]
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d3ec      	bcc.n	8005fb2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005fd8:	883b      	ldrh	r3, [r7, #0]
 8005fda:	0418      	lsls	r0, r3, #16
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6819      	ldr	r1, [r3, #0]
 8005fe0:	78fb      	ldrb	r3, [r7, #3]
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	4302      	orrs	r2, r0
 8005fe8:	3340      	adds	r3, #64	@ 0x40
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	440b      	add	r3, r1
 8005fee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3714      	adds	r7, #20
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005ffe:	b480      	push	{r7}
 8006000:	b083      	sub	sp, #12
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
 8006006:	460b      	mov	r3, r1
 8006008:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	887a      	ldrh	r2, [r7, #2]
 8006010:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800604e:	4b05      	ldr	r3, [pc, #20]	@ (8006064 <HAL_PCDEx_ActivateLPM+0x44>)
 8006050:	4313      	orrs	r3, r2
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	3714      	adds	r7, #20
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr
 8006064:	10000003 	.word	0x10000003

08006068 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	460b      	mov	r3, r1
 8006072:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006074:	bf00      	nop
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006088:	4b29      	ldr	r3, [pc, #164]	@ (8006130 <HAL_PWREx_ConfigSupply+0xb0>)
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	f003 0307 	and.w	r3, r3, #7
 8006090:	2b06      	cmp	r3, #6
 8006092:	d00a      	beq.n	80060aa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006094:	4b26      	ldr	r3, [pc, #152]	@ (8006130 <HAL_PWREx_ConfigSupply+0xb0>)
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d001      	beq.n	80060a6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e040      	b.n	8006128 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80060a6:	2300      	movs	r3, #0
 80060a8:	e03e      	b.n	8006128 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80060aa:	4b21      	ldr	r3, [pc, #132]	@ (8006130 <HAL_PWREx_ConfigSupply+0xb0>)
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80060b2:	491f      	ldr	r1, [pc, #124]	@ (8006130 <HAL_PWREx_ConfigSupply+0xb0>)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80060ba:	f7fc f889 	bl	80021d0 <HAL_GetTick>
 80060be:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80060c0:	e009      	b.n	80060d6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80060c2:	f7fc f885 	bl	80021d0 <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80060d0:	d901      	bls.n	80060d6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e028      	b.n	8006128 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80060d6:	4b16      	ldr	r3, [pc, #88]	@ (8006130 <HAL_PWREx_ConfigSupply+0xb0>)
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80060de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060e2:	d1ee      	bne.n	80060c2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2b1e      	cmp	r3, #30
 80060e8:	d008      	beq.n	80060fc <HAL_PWREx_ConfigSupply+0x7c>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80060ee:	d005      	beq.n	80060fc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2b1d      	cmp	r3, #29
 80060f4:	d002      	beq.n	80060fc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2b2d      	cmp	r3, #45	@ 0x2d
 80060fa:	d114      	bne.n	8006126 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80060fc:	f7fc f868 	bl	80021d0 <HAL_GetTick>
 8006100:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006102:	e009      	b.n	8006118 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006104:	f7fc f864 	bl	80021d0 <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006112:	d901      	bls.n	8006118 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e007      	b.n	8006128 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006118:	4b05      	ldr	r3, [pc, #20]	@ (8006130 <HAL_PWREx_ConfigSupply+0xb0>)
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006120:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006124:	d1ee      	bne.n	8006104 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	3710      	adds	r7, #16
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	58024800 	.word	0x58024800

08006134 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006134:	b480      	push	{r7}
 8006136:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006138:	4b05      	ldr	r3, [pc, #20]	@ (8006150 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	4a04      	ldr	r2, [pc, #16]	@ (8006150 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800613e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006142:	60d3      	str	r3, [r2, #12]
}
 8006144:	bf00      	nop
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	58024800 	.word	0x58024800

08006154 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b08c      	sub	sp, #48	@ 0x30
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d102      	bne.n	8006168 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	f000 bc48 	b.w	80069f8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0301 	and.w	r3, r3, #1
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 8088 	beq.w	8006286 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006176:	4b99      	ldr	r3, [pc, #612]	@ (80063dc <HAL_RCC_OscConfig+0x288>)
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800617e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006180:	4b96      	ldr	r3, [pc, #600]	@ (80063dc <HAL_RCC_OscConfig+0x288>)
 8006182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006184:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006188:	2b10      	cmp	r3, #16
 800618a:	d007      	beq.n	800619c <HAL_RCC_OscConfig+0x48>
 800618c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800618e:	2b18      	cmp	r3, #24
 8006190:	d111      	bne.n	80061b6 <HAL_RCC_OscConfig+0x62>
 8006192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006194:	f003 0303 	and.w	r3, r3, #3
 8006198:	2b02      	cmp	r3, #2
 800619a:	d10c      	bne.n	80061b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800619c:	4b8f      	ldr	r3, [pc, #572]	@ (80063dc <HAL_RCC_OscConfig+0x288>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d06d      	beq.n	8006284 <HAL_RCC_OscConfig+0x130>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d169      	bne.n	8006284 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	f000 bc21 	b.w	80069f8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061be:	d106      	bne.n	80061ce <HAL_RCC_OscConfig+0x7a>
 80061c0:	4b86      	ldr	r3, [pc, #536]	@ (80063dc <HAL_RCC_OscConfig+0x288>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a85      	ldr	r2, [pc, #532]	@ (80063dc <HAL_RCC_OscConfig+0x288>)
 80061c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061ca:	6013      	str	r3, [r2, #0]
 80061cc:	e02e      	b.n	800622c <HAL_RCC_OscConfig+0xd8>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d10c      	bne.n	80061f0 <HAL_RCC_OscConfig+0x9c>
 80061d6:	4b81      	ldr	r3, [pc, #516]	@ (80063dc <HAL_RCC_OscConfig+0x288>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a80      	ldr	r2, [pc, #512]	@ (80063dc <HAL_RCC_OscConfig+0x288>)
 80061dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061e0:	6013      	str	r3, [r2, #0]
 80061e2:	4b7e      	ldr	r3, [pc, #504]	@ (80063dc <HAL_RCC_OscConfig+0x288>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a7d      	ldr	r2, [pc, #500]	@ (80063dc <HAL_RCC_OscConfig+0x288>)
 80061e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061ec:	6013      	str	r3, [r2, #0]
 80061ee:	e01d      	b.n	800622c <HAL_RCC_OscConfig+0xd8>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80061f8:	d10c      	bne.n	8006214 <HAL_RCC_OscConfig+0xc0>
 80061fa:	4b78      	ldr	r3, [pc, #480]	@ (80063dc <HAL_RCC_OscConfig+0x288>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a77      	ldr	r2, [pc, #476]	@ (80063dc <HAL_RCC_OscConfig+0x288>)
 8006200:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006204:	6013      	str	r3, [r2, #0]
 8006206:	4b75      	ldr	r3, [pc, #468]	@ (80063dc <HAL_RCC_OscConfig+0x288>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a74      	ldr	r2, [pc, #464]	@ (80063dc <HAL_RCC_OscConfig+0x288>)
 800620c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006210:	6013      	str	r3, [r2, #0]
 8006212:	e00b      	b.n	800622c <HAL_RCC_OscConfig+0xd8>
 8006214:	4b71      	ldr	r3, [pc, #452]	@ (80063dc <HAL_RCC_OscConfig+0x288>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a70      	ldr	r2, [pc, #448]	@ (80063dc <HAL_RCC_OscConfig+0x288>)
 800621a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800621e:	6013      	str	r3, [r2, #0]
 8006220:	4b6e      	ldr	r3, [pc, #440]	@ (80063dc <HAL_RCC_OscConfig+0x288>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a6d      	ldr	r2, [pc, #436]	@ (80063dc <HAL_RCC_OscConfig+0x288>)
 8006226:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800622a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d013      	beq.n	800625c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006234:	f7fb ffcc 	bl	80021d0 <HAL_GetTick>
 8006238:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800623a:	e008      	b.n	800624e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800623c:	f7fb ffc8 	bl	80021d0 <HAL_GetTick>
 8006240:	4602      	mov	r2, r0
 8006242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	2b64      	cmp	r3, #100	@ 0x64
 8006248:	d901      	bls.n	800624e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	e3d4      	b.n	80069f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800624e:	4b63      	ldr	r3, [pc, #396]	@ (80063dc <HAL_RCC_OscConfig+0x288>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d0f0      	beq.n	800623c <HAL_RCC_OscConfig+0xe8>
 800625a:	e014      	b.n	8006286 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800625c:	f7fb ffb8 	bl	80021d0 <HAL_GetTick>
 8006260:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006262:	e008      	b.n	8006276 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006264:	f7fb ffb4 	bl	80021d0 <HAL_GetTick>
 8006268:	4602      	mov	r2, r0
 800626a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	2b64      	cmp	r3, #100	@ 0x64
 8006270:	d901      	bls.n	8006276 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e3c0      	b.n	80069f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006276:	4b59      	ldr	r3, [pc, #356]	@ (80063dc <HAL_RCC_OscConfig+0x288>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1f0      	bne.n	8006264 <HAL_RCC_OscConfig+0x110>
 8006282:	e000      	b.n	8006286 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0302 	and.w	r3, r3, #2
 800628e:	2b00      	cmp	r3, #0
 8006290:	f000 80ca 	beq.w	8006428 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006294:	4b51      	ldr	r3, [pc, #324]	@ (80063dc <HAL_RCC_OscConfig+0x288>)
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800629c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800629e:	4b4f      	ldr	r3, [pc, #316]	@ (80063dc <HAL_RCC_OscConfig+0x288>)
 80062a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80062a4:	6a3b      	ldr	r3, [r7, #32]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d007      	beq.n	80062ba <HAL_RCC_OscConfig+0x166>
 80062aa:	6a3b      	ldr	r3, [r7, #32]
 80062ac:	2b18      	cmp	r3, #24
 80062ae:	d156      	bne.n	800635e <HAL_RCC_OscConfig+0x20a>
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	f003 0303 	and.w	r3, r3, #3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d151      	bne.n	800635e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062ba:	4b48      	ldr	r3, [pc, #288]	@ (80063dc <HAL_RCC_OscConfig+0x288>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0304 	and.w	r3, r3, #4
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d005      	beq.n	80062d2 <HAL_RCC_OscConfig+0x17e>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e392      	b.n	80069f8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80062d2:	4b42      	ldr	r3, [pc, #264]	@ (80063dc <HAL_RCC_OscConfig+0x288>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f023 0219 	bic.w	r2, r3, #25
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	493f      	ldr	r1, [pc, #252]	@ (80063dc <HAL_RCC_OscConfig+0x288>)
 80062e0:	4313      	orrs	r3, r2
 80062e2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062e4:	f7fb ff74 	bl	80021d0 <HAL_GetTick>
 80062e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80062ea:	e008      	b.n	80062fe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062ec:	f7fb ff70 	bl	80021d0 <HAL_GetTick>
 80062f0:	4602      	mov	r2, r0
 80062f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d901      	bls.n	80062fe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e37c      	b.n	80069f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80062fe:	4b37      	ldr	r3, [pc, #220]	@ (80063dc <HAL_RCC_OscConfig+0x288>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0304 	and.w	r3, r3, #4
 8006306:	2b00      	cmp	r3, #0
 8006308:	d0f0      	beq.n	80062ec <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800630a:	f7fb ff91 	bl	8002230 <HAL_GetREVID>
 800630e:	4603      	mov	r3, r0
 8006310:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006314:	4293      	cmp	r3, r2
 8006316:	d817      	bhi.n	8006348 <HAL_RCC_OscConfig+0x1f4>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	2b40      	cmp	r3, #64	@ 0x40
 800631e:	d108      	bne.n	8006332 <HAL_RCC_OscConfig+0x1de>
 8006320:	4b2e      	ldr	r3, [pc, #184]	@ (80063dc <HAL_RCC_OscConfig+0x288>)
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006328:	4a2c      	ldr	r2, [pc, #176]	@ (80063dc <HAL_RCC_OscConfig+0x288>)
 800632a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800632e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006330:	e07a      	b.n	8006428 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006332:	4b2a      	ldr	r3, [pc, #168]	@ (80063dc <HAL_RCC_OscConfig+0x288>)
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	031b      	lsls	r3, r3, #12
 8006340:	4926      	ldr	r1, [pc, #152]	@ (80063dc <HAL_RCC_OscConfig+0x288>)
 8006342:	4313      	orrs	r3, r2
 8006344:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006346:	e06f      	b.n	8006428 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006348:	4b24      	ldr	r3, [pc, #144]	@ (80063dc <HAL_RCC_OscConfig+0x288>)
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	061b      	lsls	r3, r3, #24
 8006356:	4921      	ldr	r1, [pc, #132]	@ (80063dc <HAL_RCC_OscConfig+0x288>)
 8006358:	4313      	orrs	r3, r2
 800635a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800635c:	e064      	b.n	8006428 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d047      	beq.n	80063f6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006366:	4b1d      	ldr	r3, [pc, #116]	@ (80063dc <HAL_RCC_OscConfig+0x288>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f023 0219 	bic.w	r2, r3, #25
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	491a      	ldr	r1, [pc, #104]	@ (80063dc <HAL_RCC_OscConfig+0x288>)
 8006374:	4313      	orrs	r3, r2
 8006376:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006378:	f7fb ff2a 	bl	80021d0 <HAL_GetTick>
 800637c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800637e:	e008      	b.n	8006392 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006380:	f7fb ff26 	bl	80021d0 <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	2b02      	cmp	r3, #2
 800638c:	d901      	bls.n	8006392 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e332      	b.n	80069f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006392:	4b12      	ldr	r3, [pc, #72]	@ (80063dc <HAL_RCC_OscConfig+0x288>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0304 	and.w	r3, r3, #4
 800639a:	2b00      	cmp	r3, #0
 800639c:	d0f0      	beq.n	8006380 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800639e:	f7fb ff47 	bl	8002230 <HAL_GetREVID>
 80063a2:	4603      	mov	r3, r0
 80063a4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d819      	bhi.n	80063e0 <HAL_RCC_OscConfig+0x28c>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	2b40      	cmp	r3, #64	@ 0x40
 80063b2:	d108      	bne.n	80063c6 <HAL_RCC_OscConfig+0x272>
 80063b4:	4b09      	ldr	r3, [pc, #36]	@ (80063dc <HAL_RCC_OscConfig+0x288>)
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80063bc:	4a07      	ldr	r2, [pc, #28]	@ (80063dc <HAL_RCC_OscConfig+0x288>)
 80063be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063c2:	6053      	str	r3, [r2, #4]
 80063c4:	e030      	b.n	8006428 <HAL_RCC_OscConfig+0x2d4>
 80063c6:	4b05      	ldr	r3, [pc, #20]	@ (80063dc <HAL_RCC_OscConfig+0x288>)
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	031b      	lsls	r3, r3, #12
 80063d4:	4901      	ldr	r1, [pc, #4]	@ (80063dc <HAL_RCC_OscConfig+0x288>)
 80063d6:	4313      	orrs	r3, r2
 80063d8:	604b      	str	r3, [r1, #4]
 80063da:	e025      	b.n	8006428 <HAL_RCC_OscConfig+0x2d4>
 80063dc:	58024400 	.word	0x58024400
 80063e0:	4b9a      	ldr	r3, [pc, #616]	@ (800664c <HAL_RCC_OscConfig+0x4f8>)
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	061b      	lsls	r3, r3, #24
 80063ee:	4997      	ldr	r1, [pc, #604]	@ (800664c <HAL_RCC_OscConfig+0x4f8>)
 80063f0:	4313      	orrs	r3, r2
 80063f2:	604b      	str	r3, [r1, #4]
 80063f4:	e018      	b.n	8006428 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063f6:	4b95      	ldr	r3, [pc, #596]	@ (800664c <HAL_RCC_OscConfig+0x4f8>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a94      	ldr	r2, [pc, #592]	@ (800664c <HAL_RCC_OscConfig+0x4f8>)
 80063fc:	f023 0301 	bic.w	r3, r3, #1
 8006400:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006402:	f7fb fee5 	bl	80021d0 <HAL_GetTick>
 8006406:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006408:	e008      	b.n	800641c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800640a:	f7fb fee1 	bl	80021d0 <HAL_GetTick>
 800640e:	4602      	mov	r2, r0
 8006410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	2b02      	cmp	r3, #2
 8006416:	d901      	bls.n	800641c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e2ed      	b.n	80069f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800641c:	4b8b      	ldr	r3, [pc, #556]	@ (800664c <HAL_RCC_OscConfig+0x4f8>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0304 	and.w	r3, r3, #4
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1f0      	bne.n	800640a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0310 	and.w	r3, r3, #16
 8006430:	2b00      	cmp	r3, #0
 8006432:	f000 80a9 	beq.w	8006588 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006436:	4b85      	ldr	r3, [pc, #532]	@ (800664c <HAL_RCC_OscConfig+0x4f8>)
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800643e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006440:	4b82      	ldr	r3, [pc, #520]	@ (800664c <HAL_RCC_OscConfig+0x4f8>)
 8006442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006444:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	2b08      	cmp	r3, #8
 800644a:	d007      	beq.n	800645c <HAL_RCC_OscConfig+0x308>
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	2b18      	cmp	r3, #24
 8006450:	d13a      	bne.n	80064c8 <HAL_RCC_OscConfig+0x374>
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	f003 0303 	and.w	r3, r3, #3
 8006458:	2b01      	cmp	r3, #1
 800645a:	d135      	bne.n	80064c8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800645c:	4b7b      	ldr	r3, [pc, #492]	@ (800664c <HAL_RCC_OscConfig+0x4f8>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006464:	2b00      	cmp	r3, #0
 8006466:	d005      	beq.n	8006474 <HAL_RCC_OscConfig+0x320>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	69db      	ldr	r3, [r3, #28]
 800646c:	2b80      	cmp	r3, #128	@ 0x80
 800646e:	d001      	beq.n	8006474 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e2c1      	b.n	80069f8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006474:	f7fb fedc 	bl	8002230 <HAL_GetREVID>
 8006478:	4603      	mov	r3, r0
 800647a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800647e:	4293      	cmp	r3, r2
 8006480:	d817      	bhi.n	80064b2 <HAL_RCC_OscConfig+0x35e>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	2b20      	cmp	r3, #32
 8006488:	d108      	bne.n	800649c <HAL_RCC_OscConfig+0x348>
 800648a:	4b70      	ldr	r3, [pc, #448]	@ (800664c <HAL_RCC_OscConfig+0x4f8>)
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006492:	4a6e      	ldr	r2, [pc, #440]	@ (800664c <HAL_RCC_OscConfig+0x4f8>)
 8006494:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006498:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800649a:	e075      	b.n	8006588 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800649c:	4b6b      	ldr	r3, [pc, #428]	@ (800664c <HAL_RCC_OscConfig+0x4f8>)
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a1b      	ldr	r3, [r3, #32]
 80064a8:	069b      	lsls	r3, r3, #26
 80064aa:	4968      	ldr	r1, [pc, #416]	@ (800664c <HAL_RCC_OscConfig+0x4f8>)
 80064ac:	4313      	orrs	r3, r2
 80064ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80064b0:	e06a      	b.n	8006588 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80064b2:	4b66      	ldr	r3, [pc, #408]	@ (800664c <HAL_RCC_OscConfig+0x4f8>)
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	061b      	lsls	r3, r3, #24
 80064c0:	4962      	ldr	r1, [pc, #392]	@ (800664c <HAL_RCC_OscConfig+0x4f8>)
 80064c2:	4313      	orrs	r3, r2
 80064c4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80064c6:	e05f      	b.n	8006588 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	69db      	ldr	r3, [r3, #28]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d042      	beq.n	8006556 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80064d0:	4b5e      	ldr	r3, [pc, #376]	@ (800664c <HAL_RCC_OscConfig+0x4f8>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a5d      	ldr	r2, [pc, #372]	@ (800664c <HAL_RCC_OscConfig+0x4f8>)
 80064d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064dc:	f7fb fe78 	bl	80021d0 <HAL_GetTick>
 80064e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80064e2:	e008      	b.n	80064f6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80064e4:	f7fb fe74 	bl	80021d0 <HAL_GetTick>
 80064e8:	4602      	mov	r2, r0
 80064ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d901      	bls.n	80064f6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e280      	b.n	80069f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80064f6:	4b55      	ldr	r3, [pc, #340]	@ (800664c <HAL_RCC_OscConfig+0x4f8>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d0f0      	beq.n	80064e4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006502:	f7fb fe95 	bl	8002230 <HAL_GetREVID>
 8006506:	4603      	mov	r3, r0
 8006508:	f241 0203 	movw	r2, #4099	@ 0x1003
 800650c:	4293      	cmp	r3, r2
 800650e:	d817      	bhi.n	8006540 <HAL_RCC_OscConfig+0x3ec>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a1b      	ldr	r3, [r3, #32]
 8006514:	2b20      	cmp	r3, #32
 8006516:	d108      	bne.n	800652a <HAL_RCC_OscConfig+0x3d6>
 8006518:	4b4c      	ldr	r3, [pc, #304]	@ (800664c <HAL_RCC_OscConfig+0x4f8>)
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006520:	4a4a      	ldr	r2, [pc, #296]	@ (800664c <HAL_RCC_OscConfig+0x4f8>)
 8006522:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006526:	6053      	str	r3, [r2, #4]
 8006528:	e02e      	b.n	8006588 <HAL_RCC_OscConfig+0x434>
 800652a:	4b48      	ldr	r3, [pc, #288]	@ (800664c <HAL_RCC_OscConfig+0x4f8>)
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a1b      	ldr	r3, [r3, #32]
 8006536:	069b      	lsls	r3, r3, #26
 8006538:	4944      	ldr	r1, [pc, #272]	@ (800664c <HAL_RCC_OscConfig+0x4f8>)
 800653a:	4313      	orrs	r3, r2
 800653c:	604b      	str	r3, [r1, #4]
 800653e:	e023      	b.n	8006588 <HAL_RCC_OscConfig+0x434>
 8006540:	4b42      	ldr	r3, [pc, #264]	@ (800664c <HAL_RCC_OscConfig+0x4f8>)
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a1b      	ldr	r3, [r3, #32]
 800654c:	061b      	lsls	r3, r3, #24
 800654e:	493f      	ldr	r1, [pc, #252]	@ (800664c <HAL_RCC_OscConfig+0x4f8>)
 8006550:	4313      	orrs	r3, r2
 8006552:	60cb      	str	r3, [r1, #12]
 8006554:	e018      	b.n	8006588 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006556:	4b3d      	ldr	r3, [pc, #244]	@ (800664c <HAL_RCC_OscConfig+0x4f8>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a3c      	ldr	r2, [pc, #240]	@ (800664c <HAL_RCC_OscConfig+0x4f8>)
 800655c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006560:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006562:	f7fb fe35 	bl	80021d0 <HAL_GetTick>
 8006566:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006568:	e008      	b.n	800657c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800656a:	f7fb fe31 	bl	80021d0 <HAL_GetTick>
 800656e:	4602      	mov	r2, r0
 8006570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	2b02      	cmp	r3, #2
 8006576:	d901      	bls.n	800657c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	e23d      	b.n	80069f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800657c:	4b33      	ldr	r3, [pc, #204]	@ (800664c <HAL_RCC_OscConfig+0x4f8>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006584:	2b00      	cmp	r3, #0
 8006586:	d1f0      	bne.n	800656a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0308 	and.w	r3, r3, #8
 8006590:	2b00      	cmp	r3, #0
 8006592:	d036      	beq.n	8006602 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	695b      	ldr	r3, [r3, #20]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d019      	beq.n	80065d0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800659c:	4b2b      	ldr	r3, [pc, #172]	@ (800664c <HAL_RCC_OscConfig+0x4f8>)
 800659e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065a0:	4a2a      	ldr	r2, [pc, #168]	@ (800664c <HAL_RCC_OscConfig+0x4f8>)
 80065a2:	f043 0301 	orr.w	r3, r3, #1
 80065a6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065a8:	f7fb fe12 	bl	80021d0 <HAL_GetTick>
 80065ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80065ae:	e008      	b.n	80065c2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065b0:	f7fb fe0e 	bl	80021d0 <HAL_GetTick>
 80065b4:	4602      	mov	r2, r0
 80065b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d901      	bls.n	80065c2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e21a      	b.n	80069f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80065c2:	4b22      	ldr	r3, [pc, #136]	@ (800664c <HAL_RCC_OscConfig+0x4f8>)
 80065c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065c6:	f003 0302 	and.w	r3, r3, #2
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d0f0      	beq.n	80065b0 <HAL_RCC_OscConfig+0x45c>
 80065ce:	e018      	b.n	8006602 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065d0:	4b1e      	ldr	r3, [pc, #120]	@ (800664c <HAL_RCC_OscConfig+0x4f8>)
 80065d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065d4:	4a1d      	ldr	r2, [pc, #116]	@ (800664c <HAL_RCC_OscConfig+0x4f8>)
 80065d6:	f023 0301 	bic.w	r3, r3, #1
 80065da:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065dc:	f7fb fdf8 	bl	80021d0 <HAL_GetTick>
 80065e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80065e2:	e008      	b.n	80065f6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065e4:	f7fb fdf4 	bl	80021d0 <HAL_GetTick>
 80065e8:	4602      	mov	r2, r0
 80065ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d901      	bls.n	80065f6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e200      	b.n	80069f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80065f6:	4b15      	ldr	r3, [pc, #84]	@ (800664c <HAL_RCC_OscConfig+0x4f8>)
 80065f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065fa:	f003 0302 	and.w	r3, r3, #2
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1f0      	bne.n	80065e4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0320 	and.w	r3, r3, #32
 800660a:	2b00      	cmp	r3, #0
 800660c:	d039      	beq.n	8006682 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d01c      	beq.n	8006650 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006616:	4b0d      	ldr	r3, [pc, #52]	@ (800664c <HAL_RCC_OscConfig+0x4f8>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a0c      	ldr	r2, [pc, #48]	@ (800664c <HAL_RCC_OscConfig+0x4f8>)
 800661c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006620:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006622:	f7fb fdd5 	bl	80021d0 <HAL_GetTick>
 8006626:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006628:	e008      	b.n	800663c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800662a:	f7fb fdd1 	bl	80021d0 <HAL_GetTick>
 800662e:	4602      	mov	r2, r0
 8006630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	2b02      	cmp	r3, #2
 8006636:	d901      	bls.n	800663c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e1dd      	b.n	80069f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800663c:	4b03      	ldr	r3, [pc, #12]	@ (800664c <HAL_RCC_OscConfig+0x4f8>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d0f0      	beq.n	800662a <HAL_RCC_OscConfig+0x4d6>
 8006648:	e01b      	b.n	8006682 <HAL_RCC_OscConfig+0x52e>
 800664a:	bf00      	nop
 800664c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006650:	4b9b      	ldr	r3, [pc, #620]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a9a      	ldr	r2, [pc, #616]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 8006656:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800665a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800665c:	f7fb fdb8 	bl	80021d0 <HAL_GetTick>
 8006660:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006662:	e008      	b.n	8006676 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006664:	f7fb fdb4 	bl	80021d0 <HAL_GetTick>
 8006668:	4602      	mov	r2, r0
 800666a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	2b02      	cmp	r3, #2
 8006670:	d901      	bls.n	8006676 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e1c0      	b.n	80069f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006676:	4b92      	ldr	r3, [pc, #584]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1f0      	bne.n	8006664 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 0304 	and.w	r3, r3, #4
 800668a:	2b00      	cmp	r3, #0
 800668c:	f000 8081 	beq.w	8006792 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006690:	4b8c      	ldr	r3, [pc, #560]	@ (80068c4 <HAL_RCC_OscConfig+0x770>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a8b      	ldr	r2, [pc, #556]	@ (80068c4 <HAL_RCC_OscConfig+0x770>)
 8006696:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800669a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800669c:	f7fb fd98 	bl	80021d0 <HAL_GetTick>
 80066a0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066a2:	e008      	b.n	80066b6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066a4:	f7fb fd94 	bl	80021d0 <HAL_GetTick>
 80066a8:	4602      	mov	r2, r0
 80066aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	2b64      	cmp	r3, #100	@ 0x64
 80066b0:	d901      	bls.n	80066b6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80066b2:	2303      	movs	r3, #3
 80066b4:	e1a0      	b.n	80069f8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066b6:	4b83      	ldr	r3, [pc, #524]	@ (80068c4 <HAL_RCC_OscConfig+0x770>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d0f0      	beq.n	80066a4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d106      	bne.n	80066d8 <HAL_RCC_OscConfig+0x584>
 80066ca:	4b7d      	ldr	r3, [pc, #500]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 80066cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066ce:	4a7c      	ldr	r2, [pc, #496]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 80066d0:	f043 0301 	orr.w	r3, r3, #1
 80066d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80066d6:	e02d      	b.n	8006734 <HAL_RCC_OscConfig+0x5e0>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d10c      	bne.n	80066fa <HAL_RCC_OscConfig+0x5a6>
 80066e0:	4b77      	ldr	r3, [pc, #476]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 80066e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066e4:	4a76      	ldr	r2, [pc, #472]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 80066e6:	f023 0301 	bic.w	r3, r3, #1
 80066ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80066ec:	4b74      	ldr	r3, [pc, #464]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 80066ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066f0:	4a73      	ldr	r2, [pc, #460]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 80066f2:	f023 0304 	bic.w	r3, r3, #4
 80066f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80066f8:	e01c      	b.n	8006734 <HAL_RCC_OscConfig+0x5e0>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	2b05      	cmp	r3, #5
 8006700:	d10c      	bne.n	800671c <HAL_RCC_OscConfig+0x5c8>
 8006702:	4b6f      	ldr	r3, [pc, #444]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 8006704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006706:	4a6e      	ldr	r2, [pc, #440]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 8006708:	f043 0304 	orr.w	r3, r3, #4
 800670c:	6713      	str	r3, [r2, #112]	@ 0x70
 800670e:	4b6c      	ldr	r3, [pc, #432]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 8006710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006712:	4a6b      	ldr	r2, [pc, #428]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 8006714:	f043 0301 	orr.w	r3, r3, #1
 8006718:	6713      	str	r3, [r2, #112]	@ 0x70
 800671a:	e00b      	b.n	8006734 <HAL_RCC_OscConfig+0x5e0>
 800671c:	4b68      	ldr	r3, [pc, #416]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 800671e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006720:	4a67      	ldr	r2, [pc, #412]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 8006722:	f023 0301 	bic.w	r3, r3, #1
 8006726:	6713      	str	r3, [r2, #112]	@ 0x70
 8006728:	4b65      	ldr	r3, [pc, #404]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 800672a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800672c:	4a64      	ldr	r2, [pc, #400]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 800672e:	f023 0304 	bic.w	r3, r3, #4
 8006732:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d015      	beq.n	8006768 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800673c:	f7fb fd48 	bl	80021d0 <HAL_GetTick>
 8006740:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006742:	e00a      	b.n	800675a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006744:	f7fb fd44 	bl	80021d0 <HAL_GetTick>
 8006748:	4602      	mov	r2, r0
 800674a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006752:	4293      	cmp	r3, r2
 8006754:	d901      	bls.n	800675a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e14e      	b.n	80069f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800675a:	4b59      	ldr	r3, [pc, #356]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 800675c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b00      	cmp	r3, #0
 8006764:	d0ee      	beq.n	8006744 <HAL_RCC_OscConfig+0x5f0>
 8006766:	e014      	b.n	8006792 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006768:	f7fb fd32 	bl	80021d0 <HAL_GetTick>
 800676c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800676e:	e00a      	b.n	8006786 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006770:	f7fb fd2e 	bl	80021d0 <HAL_GetTick>
 8006774:	4602      	mov	r2, r0
 8006776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800677e:	4293      	cmp	r3, r2
 8006780:	d901      	bls.n	8006786 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	e138      	b.n	80069f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006786:	4b4e      	ldr	r3, [pc, #312]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 8006788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800678a:	f003 0302 	and.w	r3, r3, #2
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1ee      	bne.n	8006770 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006796:	2b00      	cmp	r3, #0
 8006798:	f000 812d 	beq.w	80069f6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800679c:	4b48      	ldr	r3, [pc, #288]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80067a4:	2b18      	cmp	r3, #24
 80067a6:	f000 80bd 	beq.w	8006924 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	f040 809e 	bne.w	80068f0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067b4:	4b42      	ldr	r3, [pc, #264]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a41      	ldr	r2, [pc, #260]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 80067ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067c0:	f7fb fd06 	bl	80021d0 <HAL_GetTick>
 80067c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067c6:	e008      	b.n	80067da <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067c8:	f7fb fd02 	bl	80021d0 <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d901      	bls.n	80067da <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e10e      	b.n	80069f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067da:	4b39      	ldr	r3, [pc, #228]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1f0      	bne.n	80067c8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067e6:	4b36      	ldr	r3, [pc, #216]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 80067e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80067ea:	4b37      	ldr	r3, [pc, #220]	@ (80068c8 <HAL_RCC_OscConfig+0x774>)
 80067ec:	4013      	ands	r3, r2
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80067f6:	0112      	lsls	r2, r2, #4
 80067f8:	430a      	orrs	r2, r1
 80067fa:	4931      	ldr	r1, [pc, #196]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 80067fc:	4313      	orrs	r3, r2
 80067fe:	628b      	str	r3, [r1, #40]	@ 0x28
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006804:	3b01      	subs	r3, #1
 8006806:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800680e:	3b01      	subs	r3, #1
 8006810:	025b      	lsls	r3, r3, #9
 8006812:	b29b      	uxth	r3, r3
 8006814:	431a      	orrs	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800681a:	3b01      	subs	r3, #1
 800681c:	041b      	lsls	r3, r3, #16
 800681e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006822:	431a      	orrs	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006828:	3b01      	subs	r3, #1
 800682a:	061b      	lsls	r3, r3, #24
 800682c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006830:	4923      	ldr	r1, [pc, #140]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 8006832:	4313      	orrs	r3, r2
 8006834:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006836:	4b22      	ldr	r3, [pc, #136]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 8006838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800683a:	4a21      	ldr	r2, [pc, #132]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 800683c:	f023 0301 	bic.w	r3, r3, #1
 8006840:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006842:	4b1f      	ldr	r3, [pc, #124]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 8006844:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006846:	4b21      	ldr	r3, [pc, #132]	@ (80068cc <HAL_RCC_OscConfig+0x778>)
 8006848:	4013      	ands	r3, r2
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800684e:	00d2      	lsls	r2, r2, #3
 8006850:	491b      	ldr	r1, [pc, #108]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 8006852:	4313      	orrs	r3, r2
 8006854:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006856:	4b1a      	ldr	r3, [pc, #104]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 8006858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800685a:	f023 020c 	bic.w	r2, r3, #12
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006862:	4917      	ldr	r1, [pc, #92]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 8006864:	4313      	orrs	r3, r2
 8006866:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006868:	4b15      	ldr	r3, [pc, #84]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 800686a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800686c:	f023 0202 	bic.w	r2, r3, #2
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006874:	4912      	ldr	r1, [pc, #72]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 8006876:	4313      	orrs	r3, r2
 8006878:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800687a:	4b11      	ldr	r3, [pc, #68]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 800687c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800687e:	4a10      	ldr	r2, [pc, #64]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 8006880:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006884:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006886:	4b0e      	ldr	r3, [pc, #56]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 8006888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800688a:	4a0d      	ldr	r2, [pc, #52]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 800688c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006890:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006892:	4b0b      	ldr	r3, [pc, #44]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 8006894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006896:	4a0a      	ldr	r2, [pc, #40]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 8006898:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800689c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800689e:	4b08      	ldr	r3, [pc, #32]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 80068a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068a2:	4a07      	ldr	r2, [pc, #28]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 80068a4:	f043 0301 	orr.w	r3, r3, #1
 80068a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068aa:	4b05      	ldr	r3, [pc, #20]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a04      	ldr	r2, [pc, #16]	@ (80068c0 <HAL_RCC_OscConfig+0x76c>)
 80068b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80068b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068b6:	f7fb fc8b 	bl	80021d0 <HAL_GetTick>
 80068ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80068bc:	e011      	b.n	80068e2 <HAL_RCC_OscConfig+0x78e>
 80068be:	bf00      	nop
 80068c0:	58024400 	.word	0x58024400
 80068c4:	58024800 	.word	0x58024800
 80068c8:	fffffc0c 	.word	0xfffffc0c
 80068cc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068d0:	f7fb fc7e 	bl	80021d0 <HAL_GetTick>
 80068d4:	4602      	mov	r2, r0
 80068d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d901      	bls.n	80068e2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e08a      	b.n	80069f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80068e2:	4b47      	ldr	r3, [pc, #284]	@ (8006a00 <HAL_RCC_OscConfig+0x8ac>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d0f0      	beq.n	80068d0 <HAL_RCC_OscConfig+0x77c>
 80068ee:	e082      	b.n	80069f6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068f0:	4b43      	ldr	r3, [pc, #268]	@ (8006a00 <HAL_RCC_OscConfig+0x8ac>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a42      	ldr	r2, [pc, #264]	@ (8006a00 <HAL_RCC_OscConfig+0x8ac>)
 80068f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80068fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068fc:	f7fb fc68 	bl	80021d0 <HAL_GetTick>
 8006900:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006902:	e008      	b.n	8006916 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006904:	f7fb fc64 	bl	80021d0 <HAL_GetTick>
 8006908:	4602      	mov	r2, r0
 800690a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	2b02      	cmp	r3, #2
 8006910:	d901      	bls.n	8006916 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	e070      	b.n	80069f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006916:	4b3a      	ldr	r3, [pc, #232]	@ (8006a00 <HAL_RCC_OscConfig+0x8ac>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1f0      	bne.n	8006904 <HAL_RCC_OscConfig+0x7b0>
 8006922:	e068      	b.n	80069f6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006924:	4b36      	ldr	r3, [pc, #216]	@ (8006a00 <HAL_RCC_OscConfig+0x8ac>)
 8006926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006928:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800692a:	4b35      	ldr	r3, [pc, #212]	@ (8006a00 <HAL_RCC_OscConfig+0x8ac>)
 800692c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800692e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006934:	2b01      	cmp	r3, #1
 8006936:	d031      	beq.n	800699c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	f003 0203 	and.w	r2, r3, #3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006942:	429a      	cmp	r2, r3
 8006944:	d12a      	bne.n	800699c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	091b      	lsrs	r3, r3, #4
 800694a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006952:	429a      	cmp	r2, r3
 8006954:	d122      	bne.n	800699c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006960:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006962:	429a      	cmp	r2, r3
 8006964:	d11a      	bne.n	800699c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	0a5b      	lsrs	r3, r3, #9
 800696a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006972:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006974:	429a      	cmp	r2, r3
 8006976:	d111      	bne.n	800699c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	0c1b      	lsrs	r3, r3, #16
 800697c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006984:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006986:	429a      	cmp	r2, r3
 8006988:	d108      	bne.n	800699c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	0e1b      	lsrs	r3, r3, #24
 800698e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006996:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006998:	429a      	cmp	r2, r3
 800699a:	d001      	beq.n	80069a0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	e02b      	b.n	80069f8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80069a0:	4b17      	ldr	r3, [pc, #92]	@ (8006a00 <HAL_RCC_OscConfig+0x8ac>)
 80069a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069a4:	08db      	lsrs	r3, r3, #3
 80069a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80069aa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d01f      	beq.n	80069f6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80069b6:	4b12      	ldr	r3, [pc, #72]	@ (8006a00 <HAL_RCC_OscConfig+0x8ac>)
 80069b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ba:	4a11      	ldr	r2, [pc, #68]	@ (8006a00 <HAL_RCC_OscConfig+0x8ac>)
 80069bc:	f023 0301 	bic.w	r3, r3, #1
 80069c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80069c2:	f7fb fc05 	bl	80021d0 <HAL_GetTick>
 80069c6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80069c8:	bf00      	nop
 80069ca:	f7fb fc01 	bl	80021d0 <HAL_GetTick>
 80069ce:	4602      	mov	r2, r0
 80069d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d0f9      	beq.n	80069ca <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80069d6:	4b0a      	ldr	r3, [pc, #40]	@ (8006a00 <HAL_RCC_OscConfig+0x8ac>)
 80069d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069da:	4b0a      	ldr	r3, [pc, #40]	@ (8006a04 <HAL_RCC_OscConfig+0x8b0>)
 80069dc:	4013      	ands	r3, r2
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80069e2:	00d2      	lsls	r2, r2, #3
 80069e4:	4906      	ldr	r1, [pc, #24]	@ (8006a00 <HAL_RCC_OscConfig+0x8ac>)
 80069e6:	4313      	orrs	r3, r2
 80069e8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80069ea:	4b05      	ldr	r3, [pc, #20]	@ (8006a00 <HAL_RCC_OscConfig+0x8ac>)
 80069ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ee:	4a04      	ldr	r2, [pc, #16]	@ (8006a00 <HAL_RCC_OscConfig+0x8ac>)
 80069f0:	f043 0301 	orr.w	r3, r3, #1
 80069f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3730      	adds	r7, #48	@ 0x30
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	58024400 	.word	0x58024400
 8006a04:	ffff0007 	.word	0xffff0007

08006a08 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d101      	bne.n	8006a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e19c      	b.n	8006d56 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a1c:	4b8a      	ldr	r3, [pc, #552]	@ (8006c48 <HAL_RCC_ClockConfig+0x240>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 030f 	and.w	r3, r3, #15
 8006a24:	683a      	ldr	r2, [r7, #0]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d910      	bls.n	8006a4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a2a:	4b87      	ldr	r3, [pc, #540]	@ (8006c48 <HAL_RCC_ClockConfig+0x240>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f023 020f 	bic.w	r2, r3, #15
 8006a32:	4985      	ldr	r1, [pc, #532]	@ (8006c48 <HAL_RCC_ClockConfig+0x240>)
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a3a:	4b83      	ldr	r3, [pc, #524]	@ (8006c48 <HAL_RCC_ClockConfig+0x240>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 030f 	and.w	r3, r3, #15
 8006a42:	683a      	ldr	r2, [r7, #0]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d001      	beq.n	8006a4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e184      	b.n	8006d56 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 0304 	and.w	r3, r3, #4
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d010      	beq.n	8006a7a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	691a      	ldr	r2, [r3, #16]
 8006a5c:	4b7b      	ldr	r3, [pc, #492]	@ (8006c4c <HAL_RCC_ClockConfig+0x244>)
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d908      	bls.n	8006a7a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006a68:	4b78      	ldr	r3, [pc, #480]	@ (8006c4c <HAL_RCC_ClockConfig+0x244>)
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	4975      	ldr	r1, [pc, #468]	@ (8006c4c <HAL_RCC_ClockConfig+0x244>)
 8006a76:	4313      	orrs	r3, r2
 8006a78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0308 	and.w	r3, r3, #8
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d010      	beq.n	8006aa8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	695a      	ldr	r2, [r3, #20]
 8006a8a:	4b70      	ldr	r3, [pc, #448]	@ (8006c4c <HAL_RCC_ClockConfig+0x244>)
 8006a8c:	69db      	ldr	r3, [r3, #28]
 8006a8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d908      	bls.n	8006aa8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006a96:	4b6d      	ldr	r3, [pc, #436]	@ (8006c4c <HAL_RCC_ClockConfig+0x244>)
 8006a98:	69db      	ldr	r3, [r3, #28]
 8006a9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	695b      	ldr	r3, [r3, #20]
 8006aa2:	496a      	ldr	r1, [pc, #424]	@ (8006c4c <HAL_RCC_ClockConfig+0x244>)
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0310 	and.w	r3, r3, #16
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d010      	beq.n	8006ad6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	699a      	ldr	r2, [r3, #24]
 8006ab8:	4b64      	ldr	r3, [pc, #400]	@ (8006c4c <HAL_RCC_ClockConfig+0x244>)
 8006aba:	69db      	ldr	r3, [r3, #28]
 8006abc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d908      	bls.n	8006ad6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ac4:	4b61      	ldr	r3, [pc, #388]	@ (8006c4c <HAL_RCC_ClockConfig+0x244>)
 8006ac6:	69db      	ldr	r3, [r3, #28]
 8006ac8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	699b      	ldr	r3, [r3, #24]
 8006ad0:	495e      	ldr	r1, [pc, #376]	@ (8006c4c <HAL_RCC_ClockConfig+0x244>)
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0320 	and.w	r3, r3, #32
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d010      	beq.n	8006b04 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	69da      	ldr	r2, [r3, #28]
 8006ae6:	4b59      	ldr	r3, [pc, #356]	@ (8006c4c <HAL_RCC_ClockConfig+0x244>)
 8006ae8:	6a1b      	ldr	r3, [r3, #32]
 8006aea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d908      	bls.n	8006b04 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006af2:	4b56      	ldr	r3, [pc, #344]	@ (8006c4c <HAL_RCC_ClockConfig+0x244>)
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	69db      	ldr	r3, [r3, #28]
 8006afe:	4953      	ldr	r1, [pc, #332]	@ (8006c4c <HAL_RCC_ClockConfig+0x244>)
 8006b00:	4313      	orrs	r3, r2
 8006b02:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0302 	and.w	r3, r3, #2
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d010      	beq.n	8006b32 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	68da      	ldr	r2, [r3, #12]
 8006b14:	4b4d      	ldr	r3, [pc, #308]	@ (8006c4c <HAL_RCC_ClockConfig+0x244>)
 8006b16:	699b      	ldr	r3, [r3, #24]
 8006b18:	f003 030f 	and.w	r3, r3, #15
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d908      	bls.n	8006b32 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b20:	4b4a      	ldr	r3, [pc, #296]	@ (8006c4c <HAL_RCC_ClockConfig+0x244>)
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	f023 020f 	bic.w	r2, r3, #15
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	4947      	ldr	r1, [pc, #284]	@ (8006c4c <HAL_RCC_ClockConfig+0x244>)
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d055      	beq.n	8006bea <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006b3e:	4b43      	ldr	r3, [pc, #268]	@ (8006c4c <HAL_RCC_ClockConfig+0x244>)
 8006b40:	699b      	ldr	r3, [r3, #24]
 8006b42:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	4940      	ldr	r1, [pc, #256]	@ (8006c4c <HAL_RCC_ClockConfig+0x244>)
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	d107      	bne.n	8006b68 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b58:	4b3c      	ldr	r3, [pc, #240]	@ (8006c4c <HAL_RCC_ClockConfig+0x244>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d121      	bne.n	8006ba8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	e0f6      	b.n	8006d56 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	2b03      	cmp	r3, #3
 8006b6e:	d107      	bne.n	8006b80 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b70:	4b36      	ldr	r3, [pc, #216]	@ (8006c4c <HAL_RCC_ClockConfig+0x244>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d115      	bne.n	8006ba8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e0ea      	b.n	8006d56 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d107      	bne.n	8006b98 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b88:	4b30      	ldr	r3, [pc, #192]	@ (8006c4c <HAL_RCC_ClockConfig+0x244>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d109      	bne.n	8006ba8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e0de      	b.n	8006d56 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b98:	4b2c      	ldr	r3, [pc, #176]	@ (8006c4c <HAL_RCC_ClockConfig+0x244>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0304 	and.w	r3, r3, #4
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d101      	bne.n	8006ba8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e0d6      	b.n	8006d56 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ba8:	4b28      	ldr	r3, [pc, #160]	@ (8006c4c <HAL_RCC_ClockConfig+0x244>)
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	f023 0207 	bic.w	r2, r3, #7
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	4925      	ldr	r1, [pc, #148]	@ (8006c4c <HAL_RCC_ClockConfig+0x244>)
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bba:	f7fb fb09 	bl	80021d0 <HAL_GetTick>
 8006bbe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bc0:	e00a      	b.n	8006bd8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bc2:	f7fb fb05 	bl	80021d0 <HAL_GetTick>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d901      	bls.n	8006bd8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e0be      	b.n	8006d56 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bd8:	4b1c      	ldr	r3, [pc, #112]	@ (8006c4c <HAL_RCC_ClockConfig+0x244>)
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	00db      	lsls	r3, r3, #3
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d1eb      	bne.n	8006bc2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 0302 	and.w	r3, r3, #2
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d010      	beq.n	8006c18 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	68da      	ldr	r2, [r3, #12]
 8006bfa:	4b14      	ldr	r3, [pc, #80]	@ (8006c4c <HAL_RCC_ClockConfig+0x244>)
 8006bfc:	699b      	ldr	r3, [r3, #24]
 8006bfe:	f003 030f 	and.w	r3, r3, #15
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d208      	bcs.n	8006c18 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c06:	4b11      	ldr	r3, [pc, #68]	@ (8006c4c <HAL_RCC_ClockConfig+0x244>)
 8006c08:	699b      	ldr	r3, [r3, #24]
 8006c0a:	f023 020f 	bic.w	r2, r3, #15
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	490e      	ldr	r1, [pc, #56]	@ (8006c4c <HAL_RCC_ClockConfig+0x244>)
 8006c14:	4313      	orrs	r3, r2
 8006c16:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c18:	4b0b      	ldr	r3, [pc, #44]	@ (8006c48 <HAL_RCC_ClockConfig+0x240>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 030f 	and.w	r3, r3, #15
 8006c20:	683a      	ldr	r2, [r7, #0]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d214      	bcs.n	8006c50 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c26:	4b08      	ldr	r3, [pc, #32]	@ (8006c48 <HAL_RCC_ClockConfig+0x240>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f023 020f 	bic.w	r2, r3, #15
 8006c2e:	4906      	ldr	r1, [pc, #24]	@ (8006c48 <HAL_RCC_ClockConfig+0x240>)
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c36:	4b04      	ldr	r3, [pc, #16]	@ (8006c48 <HAL_RCC_ClockConfig+0x240>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 030f 	and.w	r3, r3, #15
 8006c3e:	683a      	ldr	r2, [r7, #0]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d005      	beq.n	8006c50 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e086      	b.n	8006d56 <HAL_RCC_ClockConfig+0x34e>
 8006c48:	52002000 	.word	0x52002000
 8006c4c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0304 	and.w	r3, r3, #4
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d010      	beq.n	8006c7e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	691a      	ldr	r2, [r3, #16]
 8006c60:	4b3f      	ldr	r3, [pc, #252]	@ (8006d60 <HAL_RCC_ClockConfig+0x358>)
 8006c62:	699b      	ldr	r3, [r3, #24]
 8006c64:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d208      	bcs.n	8006c7e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c6c:	4b3c      	ldr	r3, [pc, #240]	@ (8006d60 <HAL_RCC_ClockConfig+0x358>)
 8006c6e:	699b      	ldr	r3, [r3, #24]
 8006c70:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	4939      	ldr	r1, [pc, #228]	@ (8006d60 <HAL_RCC_ClockConfig+0x358>)
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 0308 	and.w	r3, r3, #8
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d010      	beq.n	8006cac <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	695a      	ldr	r2, [r3, #20]
 8006c8e:	4b34      	ldr	r3, [pc, #208]	@ (8006d60 <HAL_RCC_ClockConfig+0x358>)
 8006c90:	69db      	ldr	r3, [r3, #28]
 8006c92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d208      	bcs.n	8006cac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006c9a:	4b31      	ldr	r3, [pc, #196]	@ (8006d60 <HAL_RCC_ClockConfig+0x358>)
 8006c9c:	69db      	ldr	r3, [r3, #28]
 8006c9e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	695b      	ldr	r3, [r3, #20]
 8006ca6:	492e      	ldr	r1, [pc, #184]	@ (8006d60 <HAL_RCC_ClockConfig+0x358>)
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0310 	and.w	r3, r3, #16
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d010      	beq.n	8006cda <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	699a      	ldr	r2, [r3, #24]
 8006cbc:	4b28      	ldr	r3, [pc, #160]	@ (8006d60 <HAL_RCC_ClockConfig+0x358>)
 8006cbe:	69db      	ldr	r3, [r3, #28]
 8006cc0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d208      	bcs.n	8006cda <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006cc8:	4b25      	ldr	r3, [pc, #148]	@ (8006d60 <HAL_RCC_ClockConfig+0x358>)
 8006cca:	69db      	ldr	r3, [r3, #28]
 8006ccc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	4922      	ldr	r1, [pc, #136]	@ (8006d60 <HAL_RCC_ClockConfig+0x358>)
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 0320 	and.w	r3, r3, #32
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d010      	beq.n	8006d08 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	69da      	ldr	r2, [r3, #28]
 8006cea:	4b1d      	ldr	r3, [pc, #116]	@ (8006d60 <HAL_RCC_ClockConfig+0x358>)
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d208      	bcs.n	8006d08 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8006d60 <HAL_RCC_ClockConfig+0x358>)
 8006cf8:	6a1b      	ldr	r3, [r3, #32]
 8006cfa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	69db      	ldr	r3, [r3, #28]
 8006d02:	4917      	ldr	r1, [pc, #92]	@ (8006d60 <HAL_RCC_ClockConfig+0x358>)
 8006d04:	4313      	orrs	r3, r2
 8006d06:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006d08:	f000 f834 	bl	8006d74 <HAL_RCC_GetSysClockFreq>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	4b14      	ldr	r3, [pc, #80]	@ (8006d60 <HAL_RCC_ClockConfig+0x358>)
 8006d10:	699b      	ldr	r3, [r3, #24]
 8006d12:	0a1b      	lsrs	r3, r3, #8
 8006d14:	f003 030f 	and.w	r3, r3, #15
 8006d18:	4912      	ldr	r1, [pc, #72]	@ (8006d64 <HAL_RCC_ClockConfig+0x35c>)
 8006d1a:	5ccb      	ldrb	r3, [r1, r3]
 8006d1c:	f003 031f 	and.w	r3, r3, #31
 8006d20:	fa22 f303 	lsr.w	r3, r2, r3
 8006d24:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d26:	4b0e      	ldr	r3, [pc, #56]	@ (8006d60 <HAL_RCC_ClockConfig+0x358>)
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	f003 030f 	and.w	r3, r3, #15
 8006d2e:	4a0d      	ldr	r2, [pc, #52]	@ (8006d64 <HAL_RCC_ClockConfig+0x35c>)
 8006d30:	5cd3      	ldrb	r3, [r2, r3]
 8006d32:	f003 031f 	and.w	r3, r3, #31
 8006d36:	693a      	ldr	r2, [r7, #16]
 8006d38:	fa22 f303 	lsr.w	r3, r2, r3
 8006d3c:	4a0a      	ldr	r2, [pc, #40]	@ (8006d68 <HAL_RCC_ClockConfig+0x360>)
 8006d3e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006d40:	4a0a      	ldr	r2, [pc, #40]	@ (8006d6c <HAL_RCC_ClockConfig+0x364>)
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006d46:	4b0a      	ldr	r3, [pc, #40]	@ (8006d70 <HAL_RCC_ClockConfig+0x368>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7fb f9f6 	bl	800213c <HAL_InitTick>
 8006d50:	4603      	mov	r3, r0
 8006d52:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3718      	adds	r7, #24
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	58024400 	.word	0x58024400
 8006d64:	08012358 	.word	0x08012358
 8006d68:	24000004 	.word	0x24000004
 8006d6c:	24000000 	.word	0x24000000
 8006d70:	24000030 	.word	0x24000030

08006d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b089      	sub	sp, #36	@ 0x24
 8006d78:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d7a:	4bb3      	ldr	r3, [pc, #716]	@ (8007048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d82:	2b18      	cmp	r3, #24
 8006d84:	f200 8155 	bhi.w	8007032 <HAL_RCC_GetSysClockFreq+0x2be>
 8006d88:	a201      	add	r2, pc, #4	@ (adr r2, 8006d90 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d8e:	bf00      	nop
 8006d90:	08006df5 	.word	0x08006df5
 8006d94:	08007033 	.word	0x08007033
 8006d98:	08007033 	.word	0x08007033
 8006d9c:	08007033 	.word	0x08007033
 8006da0:	08007033 	.word	0x08007033
 8006da4:	08007033 	.word	0x08007033
 8006da8:	08007033 	.word	0x08007033
 8006dac:	08007033 	.word	0x08007033
 8006db0:	08006e1b 	.word	0x08006e1b
 8006db4:	08007033 	.word	0x08007033
 8006db8:	08007033 	.word	0x08007033
 8006dbc:	08007033 	.word	0x08007033
 8006dc0:	08007033 	.word	0x08007033
 8006dc4:	08007033 	.word	0x08007033
 8006dc8:	08007033 	.word	0x08007033
 8006dcc:	08007033 	.word	0x08007033
 8006dd0:	08006e21 	.word	0x08006e21
 8006dd4:	08007033 	.word	0x08007033
 8006dd8:	08007033 	.word	0x08007033
 8006ddc:	08007033 	.word	0x08007033
 8006de0:	08007033 	.word	0x08007033
 8006de4:	08007033 	.word	0x08007033
 8006de8:	08007033 	.word	0x08007033
 8006dec:	08007033 	.word	0x08007033
 8006df0:	08006e27 	.word	0x08006e27
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006df4:	4b94      	ldr	r3, [pc, #592]	@ (8007048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 0320 	and.w	r3, r3, #32
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d009      	beq.n	8006e14 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e00:	4b91      	ldr	r3, [pc, #580]	@ (8007048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	08db      	lsrs	r3, r3, #3
 8006e06:	f003 0303 	and.w	r3, r3, #3
 8006e0a:	4a90      	ldr	r2, [pc, #576]	@ (800704c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e10:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006e12:	e111      	b.n	8007038 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006e14:	4b8d      	ldr	r3, [pc, #564]	@ (800704c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006e16:	61bb      	str	r3, [r7, #24]
      break;
 8006e18:	e10e      	b.n	8007038 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006e1a:	4b8d      	ldr	r3, [pc, #564]	@ (8007050 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006e1c:	61bb      	str	r3, [r7, #24]
      break;
 8006e1e:	e10b      	b.n	8007038 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006e20:	4b8c      	ldr	r3, [pc, #560]	@ (8007054 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006e22:	61bb      	str	r3, [r7, #24]
      break;
 8006e24:	e108      	b.n	8007038 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e26:	4b88      	ldr	r3, [pc, #544]	@ (8007048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e2a:	f003 0303 	and.w	r3, r3, #3
 8006e2e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006e30:	4b85      	ldr	r3, [pc, #532]	@ (8007048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e34:	091b      	lsrs	r3, r3, #4
 8006e36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e3a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006e3c:	4b82      	ldr	r3, [pc, #520]	@ (8007048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e40:	f003 0301 	and.w	r3, r3, #1
 8006e44:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006e46:	4b80      	ldr	r3, [pc, #512]	@ (8007048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e4a:	08db      	lsrs	r3, r3, #3
 8006e4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	fb02 f303 	mul.w	r3, r2, r3
 8006e56:	ee07 3a90 	vmov	s15, r3
 8006e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e5e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	f000 80e1 	beq.w	800702c <HAL_RCC_GetSysClockFreq+0x2b8>
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	2b02      	cmp	r3, #2
 8006e6e:	f000 8083 	beq.w	8006f78 <HAL_RCC_GetSysClockFreq+0x204>
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	2b02      	cmp	r3, #2
 8006e76:	f200 80a1 	bhi.w	8006fbc <HAL_RCC_GetSysClockFreq+0x248>
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d003      	beq.n	8006e88 <HAL_RCC_GetSysClockFreq+0x114>
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d056      	beq.n	8006f34 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006e86:	e099      	b.n	8006fbc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e88:	4b6f      	ldr	r3, [pc, #444]	@ (8007048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 0320 	and.w	r3, r3, #32
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d02d      	beq.n	8006ef0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e94:	4b6c      	ldr	r3, [pc, #432]	@ (8007048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	08db      	lsrs	r3, r3, #3
 8006e9a:	f003 0303 	and.w	r3, r3, #3
 8006e9e:	4a6b      	ldr	r2, [pc, #428]	@ (800704c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ea4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	ee07 3a90 	vmov	s15, r3
 8006eac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	ee07 3a90 	vmov	s15, r3
 8006eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ebe:	4b62      	ldr	r3, [pc, #392]	@ (8007048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ec6:	ee07 3a90 	vmov	s15, r3
 8006eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ece:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ed2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007058 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ede:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006eee:	e087      	b.n	8007000 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	ee07 3a90 	vmov	s15, r3
 8006ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006efa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800705c <HAL_RCC_GetSysClockFreq+0x2e8>
 8006efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f02:	4b51      	ldr	r3, [pc, #324]	@ (8007048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f0a:	ee07 3a90 	vmov	s15, r3
 8006f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f12:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f16:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007058 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006f32:	e065      	b.n	8007000 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	ee07 3a90 	vmov	s15, r3
 8006f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f3e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007060 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f46:	4b40      	ldr	r3, [pc, #256]	@ (8007048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f4e:	ee07 3a90 	vmov	s15, r3
 8006f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f56:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f5a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007058 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006f76:	e043      	b.n	8007000 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	ee07 3a90 	vmov	s15, r3
 8006f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f82:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007064 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006f86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f8a:	4b2f      	ldr	r3, [pc, #188]	@ (8007048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f92:	ee07 3a90 	vmov	s15, r3
 8006f96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f9e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007058 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006fa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006faa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006fba:	e021      	b.n	8007000 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	ee07 3a90 	vmov	s15, r3
 8006fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fc6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007060 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fce:	4b1e      	ldr	r3, [pc, #120]	@ (8007048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fd6:	ee07 3a90 	vmov	s15, r3
 8006fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fde:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fe2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007058 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ffa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006ffe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007000:	4b11      	ldr	r3, [pc, #68]	@ (8007048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007004:	0a5b      	lsrs	r3, r3, #9
 8007006:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800700a:	3301      	adds	r3, #1
 800700c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	ee07 3a90 	vmov	s15, r3
 8007014:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007018:	edd7 6a07 	vldr	s13, [r7, #28]
 800701c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007020:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007024:	ee17 3a90 	vmov	r3, s15
 8007028:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800702a:	e005      	b.n	8007038 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800702c:	2300      	movs	r3, #0
 800702e:	61bb      	str	r3, [r7, #24]
      break;
 8007030:	e002      	b.n	8007038 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007032:	4b07      	ldr	r3, [pc, #28]	@ (8007050 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007034:	61bb      	str	r3, [r7, #24]
      break;
 8007036:	bf00      	nop
  }

  return sysclockfreq;
 8007038:	69bb      	ldr	r3, [r7, #24]
}
 800703a:	4618      	mov	r0, r3
 800703c:	3724      	adds	r7, #36	@ 0x24
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	58024400 	.word	0x58024400
 800704c:	03d09000 	.word	0x03d09000
 8007050:	003d0900 	.word	0x003d0900
 8007054:	017d7840 	.word	0x017d7840
 8007058:	46000000 	.word	0x46000000
 800705c:	4c742400 	.word	0x4c742400
 8007060:	4a742400 	.word	0x4a742400
 8007064:	4bbebc20 	.word	0x4bbebc20

08007068 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800706e:	f7ff fe81 	bl	8006d74 <HAL_RCC_GetSysClockFreq>
 8007072:	4602      	mov	r2, r0
 8007074:	4b10      	ldr	r3, [pc, #64]	@ (80070b8 <HAL_RCC_GetHCLKFreq+0x50>)
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	0a1b      	lsrs	r3, r3, #8
 800707a:	f003 030f 	and.w	r3, r3, #15
 800707e:	490f      	ldr	r1, [pc, #60]	@ (80070bc <HAL_RCC_GetHCLKFreq+0x54>)
 8007080:	5ccb      	ldrb	r3, [r1, r3]
 8007082:	f003 031f 	and.w	r3, r3, #31
 8007086:	fa22 f303 	lsr.w	r3, r2, r3
 800708a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800708c:	4b0a      	ldr	r3, [pc, #40]	@ (80070b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	f003 030f 	and.w	r3, r3, #15
 8007094:	4a09      	ldr	r2, [pc, #36]	@ (80070bc <HAL_RCC_GetHCLKFreq+0x54>)
 8007096:	5cd3      	ldrb	r3, [r2, r3]
 8007098:	f003 031f 	and.w	r3, r3, #31
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	fa22 f303 	lsr.w	r3, r2, r3
 80070a2:	4a07      	ldr	r2, [pc, #28]	@ (80070c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80070a4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80070a6:	4a07      	ldr	r2, [pc, #28]	@ (80070c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80070ac:	4b04      	ldr	r3, [pc, #16]	@ (80070c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80070ae:	681b      	ldr	r3, [r3, #0]
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3708      	adds	r7, #8
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	58024400 	.word	0x58024400
 80070bc:	08012358 	.word	0x08012358
 80070c0:	24000004 	.word	0x24000004
 80070c4:	24000000 	.word	0x24000000

080070c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80070cc:	f7ff ffcc 	bl	8007068 <HAL_RCC_GetHCLKFreq>
 80070d0:	4602      	mov	r2, r0
 80070d2:	4b06      	ldr	r3, [pc, #24]	@ (80070ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80070d4:	69db      	ldr	r3, [r3, #28]
 80070d6:	091b      	lsrs	r3, r3, #4
 80070d8:	f003 0307 	and.w	r3, r3, #7
 80070dc:	4904      	ldr	r1, [pc, #16]	@ (80070f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80070de:	5ccb      	ldrb	r3, [r1, r3]
 80070e0:	f003 031f 	and.w	r3, r3, #31
 80070e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	58024400 	.word	0x58024400
 80070f0:	08012358 	.word	0x08012358

080070f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80070f8:	f7ff ffb6 	bl	8007068 <HAL_RCC_GetHCLKFreq>
 80070fc:	4602      	mov	r2, r0
 80070fe:	4b06      	ldr	r3, [pc, #24]	@ (8007118 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007100:	69db      	ldr	r3, [r3, #28]
 8007102:	0a1b      	lsrs	r3, r3, #8
 8007104:	f003 0307 	and.w	r3, r3, #7
 8007108:	4904      	ldr	r1, [pc, #16]	@ (800711c <HAL_RCC_GetPCLK2Freq+0x28>)
 800710a:	5ccb      	ldrb	r3, [r1, r3]
 800710c:	f003 031f 	and.w	r3, r3, #31
 8007110:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007114:	4618      	mov	r0, r3
 8007116:	bd80      	pop	{r7, pc}
 8007118:	58024400 	.word	0x58024400
 800711c:	08012358 	.word	0x08012358

08007120 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007120:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007124:	b0ca      	sub	sp, #296	@ 0x128
 8007126:	af00      	add	r7, sp, #0
 8007128:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800712c:	2300      	movs	r3, #0
 800712e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007132:	2300      	movs	r3, #0
 8007134:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800713c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007140:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007144:	2500      	movs	r5, #0
 8007146:	ea54 0305 	orrs.w	r3, r4, r5
 800714a:	d049      	beq.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800714c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007150:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007152:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007156:	d02f      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007158:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800715c:	d828      	bhi.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800715e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007162:	d01a      	beq.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007164:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007168:	d822      	bhi.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800716a:	2b00      	cmp	r3, #0
 800716c:	d003      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800716e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007172:	d007      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007174:	e01c      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007176:	4bb8      	ldr	r3, [pc, #736]	@ (8007458 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800717a:	4ab7      	ldr	r2, [pc, #732]	@ (8007458 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800717c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007180:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007182:	e01a      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007188:	3308      	adds	r3, #8
 800718a:	2102      	movs	r1, #2
 800718c:	4618      	mov	r0, r3
 800718e:	f001 fc8f 	bl	8008ab0 <RCCEx_PLL2_Config>
 8007192:	4603      	mov	r3, r0
 8007194:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007198:	e00f      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800719a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800719e:	3328      	adds	r3, #40	@ 0x28
 80071a0:	2102      	movs	r1, #2
 80071a2:	4618      	mov	r0, r3
 80071a4:	f001 fd36 	bl	8008c14 <RCCEx_PLL3_Config>
 80071a8:	4603      	mov	r3, r0
 80071aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80071ae:	e004      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071b6:	e000      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80071b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d10a      	bne.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80071c2:	4ba5      	ldr	r3, [pc, #660]	@ (8007458 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071c6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80071ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80071d0:	4aa1      	ldr	r2, [pc, #644]	@ (8007458 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071d2:	430b      	orrs	r3, r1
 80071d4:	6513      	str	r3, [r2, #80]	@ 0x50
 80071d6:	e003      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80071e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80071ec:	f04f 0900 	mov.w	r9, #0
 80071f0:	ea58 0309 	orrs.w	r3, r8, r9
 80071f4:	d047      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80071f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071fc:	2b04      	cmp	r3, #4
 80071fe:	d82a      	bhi.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007200:	a201      	add	r2, pc, #4	@ (adr r2, 8007208 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007206:	bf00      	nop
 8007208:	0800721d 	.word	0x0800721d
 800720c:	0800722b 	.word	0x0800722b
 8007210:	08007241 	.word	0x08007241
 8007214:	0800725f 	.word	0x0800725f
 8007218:	0800725f 	.word	0x0800725f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800721c:	4b8e      	ldr	r3, [pc, #568]	@ (8007458 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800721e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007220:	4a8d      	ldr	r2, [pc, #564]	@ (8007458 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007222:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007226:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007228:	e01a      	b.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800722a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800722e:	3308      	adds	r3, #8
 8007230:	2100      	movs	r1, #0
 8007232:	4618      	mov	r0, r3
 8007234:	f001 fc3c 	bl	8008ab0 <RCCEx_PLL2_Config>
 8007238:	4603      	mov	r3, r0
 800723a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800723e:	e00f      	b.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007244:	3328      	adds	r3, #40	@ 0x28
 8007246:	2100      	movs	r1, #0
 8007248:	4618      	mov	r0, r3
 800724a:	f001 fce3 	bl	8008c14 <RCCEx_PLL3_Config>
 800724e:	4603      	mov	r3, r0
 8007250:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007254:	e004      	b.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800725c:	e000      	b.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800725e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007260:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007264:	2b00      	cmp	r3, #0
 8007266:	d10a      	bne.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007268:	4b7b      	ldr	r3, [pc, #492]	@ (8007458 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800726a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800726c:	f023 0107 	bic.w	r1, r3, #7
 8007270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007276:	4a78      	ldr	r2, [pc, #480]	@ (8007458 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007278:	430b      	orrs	r3, r1
 800727a:	6513      	str	r3, [r2, #80]	@ 0x50
 800727c:	e003      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800727e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007282:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800728a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007292:	f04f 0b00 	mov.w	fp, #0
 8007296:	ea5a 030b 	orrs.w	r3, sl, fp
 800729a:	d04c      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800729c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072a6:	d030      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80072a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072ac:	d829      	bhi.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80072ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80072b0:	d02d      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80072b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80072b4:	d825      	bhi.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80072b6:	2b80      	cmp	r3, #128	@ 0x80
 80072b8:	d018      	beq.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80072ba:	2b80      	cmp	r3, #128	@ 0x80
 80072bc:	d821      	bhi.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d002      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80072c2:	2b40      	cmp	r3, #64	@ 0x40
 80072c4:	d007      	beq.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80072c6:	e01c      	b.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072c8:	4b63      	ldr	r3, [pc, #396]	@ (8007458 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072cc:	4a62      	ldr	r2, [pc, #392]	@ (8007458 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80072d4:	e01c      	b.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072da:	3308      	adds	r3, #8
 80072dc:	2100      	movs	r1, #0
 80072de:	4618      	mov	r0, r3
 80072e0:	f001 fbe6 	bl	8008ab0 <RCCEx_PLL2_Config>
 80072e4:	4603      	mov	r3, r0
 80072e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80072ea:	e011      	b.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80072ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072f0:	3328      	adds	r3, #40	@ 0x28
 80072f2:	2100      	movs	r1, #0
 80072f4:	4618      	mov	r0, r3
 80072f6:	f001 fc8d 	bl	8008c14 <RCCEx_PLL3_Config>
 80072fa:	4603      	mov	r3, r0
 80072fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007300:	e006      	b.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007308:	e002      	b.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800730a:	bf00      	nop
 800730c:	e000      	b.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800730e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007310:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007314:	2b00      	cmp	r3, #0
 8007316:	d10a      	bne.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007318:	4b4f      	ldr	r3, [pc, #316]	@ (8007458 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800731a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800731c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007324:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007326:	4a4c      	ldr	r2, [pc, #304]	@ (8007458 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007328:	430b      	orrs	r3, r1
 800732a:	6513      	str	r3, [r2, #80]	@ 0x50
 800732c:	e003      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800732e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007332:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800733a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007342:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007346:	2300      	movs	r3, #0
 8007348:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800734c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007350:	460b      	mov	r3, r1
 8007352:	4313      	orrs	r3, r2
 8007354:	d053      	beq.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800735a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800735e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007362:	d035      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007364:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007368:	d82e      	bhi.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800736a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800736e:	d031      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007370:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007374:	d828      	bhi.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007376:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800737a:	d01a      	beq.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800737c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007380:	d822      	bhi.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007382:	2b00      	cmp	r3, #0
 8007384:	d003      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007386:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800738a:	d007      	beq.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800738c:	e01c      	b.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800738e:	4b32      	ldr	r3, [pc, #200]	@ (8007458 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007392:	4a31      	ldr	r2, [pc, #196]	@ (8007458 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007394:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007398:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800739a:	e01c      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800739c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073a0:	3308      	adds	r3, #8
 80073a2:	2100      	movs	r1, #0
 80073a4:	4618      	mov	r0, r3
 80073a6:	f001 fb83 	bl	8008ab0 <RCCEx_PLL2_Config>
 80073aa:	4603      	mov	r3, r0
 80073ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80073b0:	e011      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80073b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073b6:	3328      	adds	r3, #40	@ 0x28
 80073b8:	2100      	movs	r1, #0
 80073ba:	4618      	mov	r0, r3
 80073bc:	f001 fc2a 	bl	8008c14 <RCCEx_PLL3_Config>
 80073c0:	4603      	mov	r3, r0
 80073c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80073c6:	e006      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073ce:	e002      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80073d0:	bf00      	nop
 80073d2:	e000      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80073d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d10b      	bne.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80073de:	4b1e      	ldr	r3, [pc, #120]	@ (8007458 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073e2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80073e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80073ee:	4a1a      	ldr	r2, [pc, #104]	@ (8007458 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073f0:	430b      	orrs	r3, r1
 80073f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80073f4:	e003      	b.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80073fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007406:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800740a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800740e:	2300      	movs	r3, #0
 8007410:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007414:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007418:	460b      	mov	r3, r1
 800741a:	4313      	orrs	r3, r2
 800741c:	d056      	beq.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800741e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007422:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007426:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800742a:	d038      	beq.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800742c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007430:	d831      	bhi.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007432:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007436:	d034      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007438:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800743c:	d82b      	bhi.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800743e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007442:	d01d      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007444:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007448:	d825      	bhi.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800744a:	2b00      	cmp	r3, #0
 800744c:	d006      	beq.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800744e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007452:	d00a      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007454:	e01f      	b.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007456:	bf00      	nop
 8007458:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800745c:	4ba2      	ldr	r3, [pc, #648]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800745e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007460:	4aa1      	ldr	r2, [pc, #644]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007462:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007466:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007468:	e01c      	b.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800746a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800746e:	3308      	adds	r3, #8
 8007470:	2100      	movs	r1, #0
 8007472:	4618      	mov	r0, r3
 8007474:	f001 fb1c 	bl	8008ab0 <RCCEx_PLL2_Config>
 8007478:	4603      	mov	r3, r0
 800747a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800747e:	e011      	b.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007484:	3328      	adds	r3, #40	@ 0x28
 8007486:	2100      	movs	r1, #0
 8007488:	4618      	mov	r0, r3
 800748a:	f001 fbc3 	bl	8008c14 <RCCEx_PLL3_Config>
 800748e:	4603      	mov	r3, r0
 8007490:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007494:	e006      	b.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800749c:	e002      	b.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800749e:	bf00      	nop
 80074a0:	e000      	b.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80074a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d10b      	bne.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80074ac:	4b8e      	ldr	r3, [pc, #568]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80074ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074b0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80074b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80074bc:	4a8a      	ldr	r2, [pc, #552]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80074be:	430b      	orrs	r3, r1
 80074c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80074c2:	e003      	b.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80074cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80074d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80074dc:	2300      	movs	r3, #0
 80074de:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80074e2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80074e6:	460b      	mov	r3, r1
 80074e8:	4313      	orrs	r3, r2
 80074ea:	d03a      	beq.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80074ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074f2:	2b30      	cmp	r3, #48	@ 0x30
 80074f4:	d01f      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80074f6:	2b30      	cmp	r3, #48	@ 0x30
 80074f8:	d819      	bhi.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80074fa:	2b20      	cmp	r3, #32
 80074fc:	d00c      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80074fe:	2b20      	cmp	r3, #32
 8007500:	d815      	bhi.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007502:	2b00      	cmp	r3, #0
 8007504:	d019      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007506:	2b10      	cmp	r3, #16
 8007508:	d111      	bne.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800750a:	4b77      	ldr	r3, [pc, #476]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800750c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800750e:	4a76      	ldr	r2, [pc, #472]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007510:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007514:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007516:	e011      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800751c:	3308      	adds	r3, #8
 800751e:	2102      	movs	r1, #2
 8007520:	4618      	mov	r0, r3
 8007522:	f001 fac5 	bl	8008ab0 <RCCEx_PLL2_Config>
 8007526:	4603      	mov	r3, r0
 8007528:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800752c:	e006      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007534:	e002      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007536:	bf00      	nop
 8007538:	e000      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800753a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800753c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007540:	2b00      	cmp	r3, #0
 8007542:	d10a      	bne.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007544:	4b68      	ldr	r3, [pc, #416]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007548:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800754c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007552:	4a65      	ldr	r2, [pc, #404]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007554:	430b      	orrs	r3, r1
 8007556:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007558:	e003      	b.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800755a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800755e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800756e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007572:	2300      	movs	r3, #0
 8007574:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007578:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800757c:	460b      	mov	r3, r1
 800757e:	4313      	orrs	r3, r2
 8007580:	d051      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007586:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007588:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800758c:	d035      	beq.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800758e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007592:	d82e      	bhi.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007594:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007598:	d031      	beq.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800759a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800759e:	d828      	bhi.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80075a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075a4:	d01a      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80075a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075aa:	d822      	bhi.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d003      	beq.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80075b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075b4:	d007      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80075b6:	e01c      	b.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075b8:	4b4b      	ldr	r3, [pc, #300]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80075ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075bc:	4a4a      	ldr	r2, [pc, #296]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80075be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80075c4:	e01c      	b.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075ca:	3308      	adds	r3, #8
 80075cc:	2100      	movs	r1, #0
 80075ce:	4618      	mov	r0, r3
 80075d0:	f001 fa6e 	bl	8008ab0 <RCCEx_PLL2_Config>
 80075d4:	4603      	mov	r3, r0
 80075d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80075da:	e011      	b.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80075dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075e0:	3328      	adds	r3, #40	@ 0x28
 80075e2:	2100      	movs	r1, #0
 80075e4:	4618      	mov	r0, r3
 80075e6:	f001 fb15 	bl	8008c14 <RCCEx_PLL3_Config>
 80075ea:	4603      	mov	r3, r0
 80075ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80075f0:	e006      	b.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075f8:	e002      	b.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80075fa:	bf00      	nop
 80075fc:	e000      	b.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80075fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007600:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007604:	2b00      	cmp	r3, #0
 8007606:	d10a      	bne.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007608:	4b37      	ldr	r3, [pc, #220]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800760a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800760c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007614:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007616:	4a34      	ldr	r2, [pc, #208]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007618:	430b      	orrs	r3, r1
 800761a:	6513      	str	r3, [r2, #80]	@ 0x50
 800761c:	e003      	b.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800761e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007622:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800762a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007632:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007636:	2300      	movs	r3, #0
 8007638:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800763c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007640:	460b      	mov	r3, r1
 8007642:	4313      	orrs	r3, r2
 8007644:	d056      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800764a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800764c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007650:	d033      	beq.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007652:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007656:	d82c      	bhi.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007658:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800765c:	d02f      	beq.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800765e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007662:	d826      	bhi.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007664:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007668:	d02b      	beq.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800766a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800766e:	d820      	bhi.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007670:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007674:	d012      	beq.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007676:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800767a:	d81a      	bhi.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800767c:	2b00      	cmp	r3, #0
 800767e:	d022      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007680:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007684:	d115      	bne.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800768a:	3308      	adds	r3, #8
 800768c:	2101      	movs	r1, #1
 800768e:	4618      	mov	r0, r3
 8007690:	f001 fa0e 	bl	8008ab0 <RCCEx_PLL2_Config>
 8007694:	4603      	mov	r3, r0
 8007696:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800769a:	e015      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800769c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076a0:	3328      	adds	r3, #40	@ 0x28
 80076a2:	2101      	movs	r1, #1
 80076a4:	4618      	mov	r0, r3
 80076a6:	f001 fab5 	bl	8008c14 <RCCEx_PLL3_Config>
 80076aa:	4603      	mov	r3, r0
 80076ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80076b0:	e00a      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076b8:	e006      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80076ba:	bf00      	nop
 80076bc:	e004      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80076be:	bf00      	nop
 80076c0:	e002      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80076c2:	bf00      	nop
 80076c4:	e000      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80076c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10d      	bne.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80076d0:	4b05      	ldr	r3, [pc, #20]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076d4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80076d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076de:	4a02      	ldr	r2, [pc, #8]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076e0:	430b      	orrs	r3, r1
 80076e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80076e4:	e006      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80076e6:	bf00      	nop
 80076e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80076f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007700:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007704:	2300      	movs	r3, #0
 8007706:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800770a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800770e:	460b      	mov	r3, r1
 8007710:	4313      	orrs	r3, r2
 8007712:	d055      	beq.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007718:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800771c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007720:	d033      	beq.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007722:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007726:	d82c      	bhi.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007728:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800772c:	d02f      	beq.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800772e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007732:	d826      	bhi.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007734:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007738:	d02b      	beq.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800773a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800773e:	d820      	bhi.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007740:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007744:	d012      	beq.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007746:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800774a:	d81a      	bhi.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800774c:	2b00      	cmp	r3, #0
 800774e:	d022      	beq.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007750:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007754:	d115      	bne.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800775a:	3308      	adds	r3, #8
 800775c:	2101      	movs	r1, #1
 800775e:	4618      	mov	r0, r3
 8007760:	f001 f9a6 	bl	8008ab0 <RCCEx_PLL2_Config>
 8007764:	4603      	mov	r3, r0
 8007766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800776a:	e015      	b.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800776c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007770:	3328      	adds	r3, #40	@ 0x28
 8007772:	2101      	movs	r1, #1
 8007774:	4618      	mov	r0, r3
 8007776:	f001 fa4d 	bl	8008c14 <RCCEx_PLL3_Config>
 800777a:	4603      	mov	r3, r0
 800777c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007780:	e00a      	b.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007788:	e006      	b.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800778a:	bf00      	nop
 800778c:	e004      	b.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800778e:	bf00      	nop
 8007790:	e002      	b.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007792:	bf00      	nop
 8007794:	e000      	b.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007796:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007798:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800779c:	2b00      	cmp	r3, #0
 800779e:	d10b      	bne.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80077a0:	4ba3      	ldr	r3, [pc, #652]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077a4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80077a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80077b0:	4a9f      	ldr	r2, [pc, #636]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077b2:	430b      	orrs	r3, r1
 80077b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80077b6:	e003      	b.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80077c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80077cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80077d0:	2300      	movs	r3, #0
 80077d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80077d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80077da:	460b      	mov	r3, r1
 80077dc:	4313      	orrs	r3, r2
 80077de:	d037      	beq.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80077e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077ea:	d00e      	beq.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80077ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077f0:	d816      	bhi.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d018      	beq.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80077f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077fa:	d111      	bne.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077fc:	4b8c      	ldr	r3, [pc, #560]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007800:	4a8b      	ldr	r2, [pc, #556]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007802:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007806:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007808:	e00f      	b.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800780a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800780e:	3308      	adds	r3, #8
 8007810:	2101      	movs	r1, #1
 8007812:	4618      	mov	r0, r3
 8007814:	f001 f94c 	bl	8008ab0 <RCCEx_PLL2_Config>
 8007818:	4603      	mov	r3, r0
 800781a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800781e:	e004      	b.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007826:	e000      	b.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007828:	bf00      	nop
    }

    if (ret == HAL_OK)
 800782a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10a      	bne.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007832:	4b7f      	ldr	r3, [pc, #508]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007834:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007836:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800783a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800783e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007840:	4a7b      	ldr	r2, [pc, #492]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007842:	430b      	orrs	r3, r1
 8007844:	6513      	str	r3, [r2, #80]	@ 0x50
 8007846:	e003      	b.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007848:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800784c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007858:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800785c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007860:	2300      	movs	r3, #0
 8007862:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007866:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800786a:	460b      	mov	r3, r1
 800786c:	4313      	orrs	r3, r2
 800786e:	d039      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007874:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007876:	2b03      	cmp	r3, #3
 8007878:	d81c      	bhi.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800787a:	a201      	add	r2, pc, #4	@ (adr r2, 8007880 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800787c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007880:	080078bd 	.word	0x080078bd
 8007884:	08007891 	.word	0x08007891
 8007888:	0800789f 	.word	0x0800789f
 800788c:	080078bd 	.word	0x080078bd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007890:	4b67      	ldr	r3, [pc, #412]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007894:	4a66      	ldr	r2, [pc, #408]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007896:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800789a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800789c:	e00f      	b.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800789e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078a2:	3308      	adds	r3, #8
 80078a4:	2102      	movs	r1, #2
 80078a6:	4618      	mov	r0, r3
 80078a8:	f001 f902 	bl	8008ab0 <RCCEx_PLL2_Config>
 80078ac:	4603      	mov	r3, r0
 80078ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80078b2:	e004      	b.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078ba:	e000      	b.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80078bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d10a      	bne.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80078c6:	4b5a      	ldr	r3, [pc, #360]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078ca:	f023 0103 	bic.w	r1, r3, #3
 80078ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078d4:	4a56      	ldr	r2, [pc, #344]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078d6:	430b      	orrs	r3, r1
 80078d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80078da:	e003      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80078e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ec:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80078f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80078f4:	2300      	movs	r3, #0
 80078f6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80078fa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80078fe:	460b      	mov	r3, r1
 8007900:	4313      	orrs	r3, r2
 8007902:	f000 809f 	beq.w	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007906:	4b4b      	ldr	r3, [pc, #300]	@ (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a4a      	ldr	r2, [pc, #296]	@ (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800790c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007910:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007912:	f7fa fc5d 	bl	80021d0 <HAL_GetTick>
 8007916:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800791a:	e00b      	b.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800791c:	f7fa fc58 	bl	80021d0 <HAL_GetTick>
 8007920:	4602      	mov	r2, r0
 8007922:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007926:	1ad3      	subs	r3, r2, r3
 8007928:	2b64      	cmp	r3, #100	@ 0x64
 800792a:	d903      	bls.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800792c:	2303      	movs	r3, #3
 800792e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007932:	e005      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007934:	4b3f      	ldr	r3, [pc, #252]	@ (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800793c:	2b00      	cmp	r3, #0
 800793e:	d0ed      	beq.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007940:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007944:	2b00      	cmp	r3, #0
 8007946:	d179      	bne.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007948:	4b39      	ldr	r3, [pc, #228]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800794a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800794c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007950:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007954:	4053      	eors	r3, r2
 8007956:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800795a:	2b00      	cmp	r3, #0
 800795c:	d015      	beq.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800795e:	4b34      	ldr	r3, [pc, #208]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007962:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007966:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800796a:	4b31      	ldr	r3, [pc, #196]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800796c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800796e:	4a30      	ldr	r2, [pc, #192]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007970:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007974:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007976:	4b2e      	ldr	r3, [pc, #184]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800797a:	4a2d      	ldr	r2, [pc, #180]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800797c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007980:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007982:	4a2b      	ldr	r2, [pc, #172]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007984:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007988:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800798a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800798e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007992:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007996:	d118      	bne.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007998:	f7fa fc1a 	bl	80021d0 <HAL_GetTick>
 800799c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079a0:	e00d      	b.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079a2:	f7fa fc15 	bl	80021d0 <HAL_GetTick>
 80079a6:	4602      	mov	r2, r0
 80079a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80079ac:	1ad2      	subs	r2, r2, r3
 80079ae:	f241 3388 	movw	r3, #5000	@ 0x1388
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d903      	bls.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80079b6:	2303      	movs	r3, #3
 80079b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80079bc:	e005      	b.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079be:	4b1c      	ldr	r3, [pc, #112]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079c2:	f003 0302 	and.w	r3, r3, #2
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d0eb      	beq.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80079ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d129      	bne.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80079d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80079da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079e2:	d10e      	bne.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80079e4:	4b12      	ldr	r3, [pc, #72]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80079ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80079f4:	091a      	lsrs	r2, r3, #4
 80079f6:	4b10      	ldr	r3, [pc, #64]	@ (8007a38 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80079f8:	4013      	ands	r3, r2
 80079fa:	4a0d      	ldr	r2, [pc, #52]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079fc:	430b      	orrs	r3, r1
 80079fe:	6113      	str	r3, [r2, #16]
 8007a00:	e005      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007a02:	4b0b      	ldr	r3, [pc, #44]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	4a0a      	ldr	r2, [pc, #40]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a08:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007a0c:	6113      	str	r3, [r2, #16]
 8007a0e:	4b08      	ldr	r3, [pc, #32]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a10:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a1e:	4a04      	ldr	r2, [pc, #16]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a20:	430b      	orrs	r3, r1
 8007a22:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a24:	e00e      	b.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007a26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007a2e:	e009      	b.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007a30:	58024400 	.word	0x58024400
 8007a34:	58024800 	.word	0x58024800
 8007a38:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4c:	f002 0301 	and.w	r3, r2, #1
 8007a50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a54:	2300      	movs	r3, #0
 8007a56:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007a5a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007a5e:	460b      	mov	r3, r1
 8007a60:	4313      	orrs	r3, r2
 8007a62:	f000 8089 	beq.w	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a6c:	2b28      	cmp	r3, #40	@ 0x28
 8007a6e:	d86b      	bhi.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007a70:	a201      	add	r2, pc, #4	@ (adr r2, 8007a78 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a76:	bf00      	nop
 8007a78:	08007b51 	.word	0x08007b51
 8007a7c:	08007b49 	.word	0x08007b49
 8007a80:	08007b49 	.word	0x08007b49
 8007a84:	08007b49 	.word	0x08007b49
 8007a88:	08007b49 	.word	0x08007b49
 8007a8c:	08007b49 	.word	0x08007b49
 8007a90:	08007b49 	.word	0x08007b49
 8007a94:	08007b49 	.word	0x08007b49
 8007a98:	08007b1d 	.word	0x08007b1d
 8007a9c:	08007b49 	.word	0x08007b49
 8007aa0:	08007b49 	.word	0x08007b49
 8007aa4:	08007b49 	.word	0x08007b49
 8007aa8:	08007b49 	.word	0x08007b49
 8007aac:	08007b49 	.word	0x08007b49
 8007ab0:	08007b49 	.word	0x08007b49
 8007ab4:	08007b49 	.word	0x08007b49
 8007ab8:	08007b33 	.word	0x08007b33
 8007abc:	08007b49 	.word	0x08007b49
 8007ac0:	08007b49 	.word	0x08007b49
 8007ac4:	08007b49 	.word	0x08007b49
 8007ac8:	08007b49 	.word	0x08007b49
 8007acc:	08007b49 	.word	0x08007b49
 8007ad0:	08007b49 	.word	0x08007b49
 8007ad4:	08007b49 	.word	0x08007b49
 8007ad8:	08007b51 	.word	0x08007b51
 8007adc:	08007b49 	.word	0x08007b49
 8007ae0:	08007b49 	.word	0x08007b49
 8007ae4:	08007b49 	.word	0x08007b49
 8007ae8:	08007b49 	.word	0x08007b49
 8007aec:	08007b49 	.word	0x08007b49
 8007af0:	08007b49 	.word	0x08007b49
 8007af4:	08007b49 	.word	0x08007b49
 8007af8:	08007b51 	.word	0x08007b51
 8007afc:	08007b49 	.word	0x08007b49
 8007b00:	08007b49 	.word	0x08007b49
 8007b04:	08007b49 	.word	0x08007b49
 8007b08:	08007b49 	.word	0x08007b49
 8007b0c:	08007b49 	.word	0x08007b49
 8007b10:	08007b49 	.word	0x08007b49
 8007b14:	08007b49 	.word	0x08007b49
 8007b18:	08007b51 	.word	0x08007b51
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b20:	3308      	adds	r3, #8
 8007b22:	2101      	movs	r1, #1
 8007b24:	4618      	mov	r0, r3
 8007b26:	f000 ffc3 	bl	8008ab0 <RCCEx_PLL2_Config>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007b30:	e00f      	b.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b36:	3328      	adds	r3, #40	@ 0x28
 8007b38:	2101      	movs	r1, #1
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f001 f86a 	bl	8008c14 <RCCEx_PLL3_Config>
 8007b40:	4603      	mov	r3, r0
 8007b42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007b46:	e004      	b.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b4e:	e000      	b.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007b50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d10a      	bne.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007b5a:	4bbf      	ldr	r3, [pc, #764]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b5e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b68:	4abb      	ldr	r2, [pc, #748]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b6a:	430b      	orrs	r3, r1
 8007b6c:	6553      	str	r3, [r2, #84]	@ 0x54
 8007b6e:	e003      	b.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b80:	f002 0302 	and.w	r3, r2, #2
 8007b84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b88:	2300      	movs	r3, #0
 8007b8a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007b8e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007b92:	460b      	mov	r3, r1
 8007b94:	4313      	orrs	r3, r2
 8007b96:	d041      	beq.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007b9e:	2b05      	cmp	r3, #5
 8007ba0:	d824      	bhi.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007ba2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ba8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba8:	08007bf5 	.word	0x08007bf5
 8007bac:	08007bc1 	.word	0x08007bc1
 8007bb0:	08007bd7 	.word	0x08007bd7
 8007bb4:	08007bf5 	.word	0x08007bf5
 8007bb8:	08007bf5 	.word	0x08007bf5
 8007bbc:	08007bf5 	.word	0x08007bf5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bc4:	3308      	adds	r3, #8
 8007bc6:	2101      	movs	r1, #1
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f000 ff71 	bl	8008ab0 <RCCEx_PLL2_Config>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007bd4:	e00f      	b.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bda:	3328      	adds	r3, #40	@ 0x28
 8007bdc:	2101      	movs	r1, #1
 8007bde:	4618      	mov	r0, r3
 8007be0:	f001 f818 	bl	8008c14 <RCCEx_PLL3_Config>
 8007be4:	4603      	mov	r3, r0
 8007be6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007bea:	e004      	b.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bf2:	e000      	b.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007bf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d10a      	bne.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007bfe:	4b96      	ldr	r3, [pc, #600]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c02:	f023 0107 	bic.w	r1, r3, #7
 8007c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c0c:	4a92      	ldr	r2, [pc, #584]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c0e:	430b      	orrs	r3, r1
 8007c10:	6553      	str	r3, [r2, #84]	@ 0x54
 8007c12:	e003      	b.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c24:	f002 0304 	and.w	r3, r2, #4
 8007c28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c32:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007c36:	460b      	mov	r3, r1
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	d044      	beq.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c44:	2b05      	cmp	r3, #5
 8007c46:	d825      	bhi.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007c48:	a201      	add	r2, pc, #4	@ (adr r2, 8007c50 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c4e:	bf00      	nop
 8007c50:	08007c9d 	.word	0x08007c9d
 8007c54:	08007c69 	.word	0x08007c69
 8007c58:	08007c7f 	.word	0x08007c7f
 8007c5c:	08007c9d 	.word	0x08007c9d
 8007c60:	08007c9d 	.word	0x08007c9d
 8007c64:	08007c9d 	.word	0x08007c9d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c6c:	3308      	adds	r3, #8
 8007c6e:	2101      	movs	r1, #1
 8007c70:	4618      	mov	r0, r3
 8007c72:	f000 ff1d 	bl	8008ab0 <RCCEx_PLL2_Config>
 8007c76:	4603      	mov	r3, r0
 8007c78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007c7c:	e00f      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c82:	3328      	adds	r3, #40	@ 0x28
 8007c84:	2101      	movs	r1, #1
 8007c86:	4618      	mov	r0, r3
 8007c88:	f000 ffc4 	bl	8008c14 <RCCEx_PLL3_Config>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007c92:	e004      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c9a:	e000      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007c9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d10b      	bne.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007ca6:	4b6c      	ldr	r3, [pc, #432]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007caa:	f023 0107 	bic.w	r1, r3, #7
 8007cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007cb6:	4a68      	ldr	r2, [pc, #416]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007cb8:	430b      	orrs	r3, r1
 8007cba:	6593      	str	r3, [r2, #88]	@ 0x58
 8007cbc:	e003      	b.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cce:	f002 0320 	and.w	r3, r2, #32
 8007cd2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007cdc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	d055      	beq.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007cf2:	d033      	beq.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007cf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007cf8:	d82c      	bhi.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cfe:	d02f      	beq.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007d00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d04:	d826      	bhi.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007d06:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d0a:	d02b      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007d0c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d10:	d820      	bhi.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007d12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d16:	d012      	beq.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007d18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d1c:	d81a      	bhi.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d022      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007d22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d26:	d115      	bne.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d2c:	3308      	adds	r3, #8
 8007d2e:	2100      	movs	r1, #0
 8007d30:	4618      	mov	r0, r3
 8007d32:	f000 febd 	bl	8008ab0 <RCCEx_PLL2_Config>
 8007d36:	4603      	mov	r3, r0
 8007d38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007d3c:	e015      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d42:	3328      	adds	r3, #40	@ 0x28
 8007d44:	2102      	movs	r1, #2
 8007d46:	4618      	mov	r0, r3
 8007d48:	f000 ff64 	bl	8008c14 <RCCEx_PLL3_Config>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007d52:	e00a      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d5a:	e006      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007d5c:	bf00      	nop
 8007d5e:	e004      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007d60:	bf00      	nop
 8007d62:	e002      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007d64:	bf00      	nop
 8007d66:	e000      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007d68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d10b      	bne.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d72:	4b39      	ldr	r3, [pc, #228]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d76:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d82:	4a35      	ldr	r2, [pc, #212]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d84:	430b      	orrs	r3, r1
 8007d86:	6553      	str	r3, [r2, #84]	@ 0x54
 8007d88:	e003      	b.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007d9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007da2:	2300      	movs	r3, #0
 8007da4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007da8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007dac:	460b      	mov	r3, r1
 8007dae:	4313      	orrs	r3, r2
 8007db0:	d058      	beq.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007db6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007dba:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007dbe:	d033      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007dc0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007dc4:	d82c      	bhi.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007dc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dca:	d02f      	beq.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007dcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dd0:	d826      	bhi.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007dd2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007dd6:	d02b      	beq.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007dd8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007ddc:	d820      	bhi.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007dde:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007de2:	d012      	beq.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007de4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007de8:	d81a      	bhi.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d022      	beq.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007dee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007df2:	d115      	bne.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007df8:	3308      	adds	r3, #8
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f000 fe57 	bl	8008ab0 <RCCEx_PLL2_Config>
 8007e02:	4603      	mov	r3, r0
 8007e04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007e08:	e015      	b.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e0e:	3328      	adds	r3, #40	@ 0x28
 8007e10:	2102      	movs	r1, #2
 8007e12:	4618      	mov	r0, r3
 8007e14:	f000 fefe 	bl	8008c14 <RCCEx_PLL3_Config>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007e1e:	e00a      	b.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e26:	e006      	b.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007e28:	bf00      	nop
 8007e2a:	e004      	b.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007e2c:	bf00      	nop
 8007e2e:	e002      	b.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007e30:	bf00      	nop
 8007e32:	e000      	b.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007e34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d10e      	bne.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007e3e:	4b06      	ldr	r3, [pc, #24]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e42:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007e4e:	4a02      	ldr	r2, [pc, #8]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e50:	430b      	orrs	r3, r1
 8007e52:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e54:	e006      	b.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007e56:	bf00      	nop
 8007e58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007e70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007e74:	2300      	movs	r3, #0
 8007e76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e7a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007e7e:	460b      	mov	r3, r1
 8007e80:	4313      	orrs	r3, r2
 8007e82:	d055      	beq.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007e8c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007e90:	d033      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007e92:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007e96:	d82c      	bhi.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007e98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e9c:	d02f      	beq.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007e9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ea2:	d826      	bhi.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007ea4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007ea8:	d02b      	beq.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007eaa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007eae:	d820      	bhi.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007eb0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007eb4:	d012      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007eb6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007eba:	d81a      	bhi.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d022      	beq.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007ec0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ec4:	d115      	bne.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eca:	3308      	adds	r3, #8
 8007ecc:	2100      	movs	r1, #0
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f000 fdee 	bl	8008ab0 <RCCEx_PLL2_Config>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007eda:	e015      	b.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ee0:	3328      	adds	r3, #40	@ 0x28
 8007ee2:	2102      	movs	r1, #2
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f000 fe95 	bl	8008c14 <RCCEx_PLL3_Config>
 8007eea:	4603      	mov	r3, r0
 8007eec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007ef0:	e00a      	b.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ef8:	e006      	b.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007efa:	bf00      	nop
 8007efc:	e004      	b.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007efe:	bf00      	nop
 8007f00:	e002      	b.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007f02:	bf00      	nop
 8007f04:	e000      	b.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007f06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d10b      	bne.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007f10:	4ba1      	ldr	r3, [pc, #644]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f14:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007f20:	4a9d      	ldr	r2, [pc, #628]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f22:	430b      	orrs	r3, r1
 8007f24:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f26:	e003      	b.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f38:	f002 0308 	and.w	r3, r2, #8
 8007f3c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f40:	2300      	movs	r3, #0
 8007f42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007f46:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	d01e      	beq.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f5c:	d10c      	bne.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f62:	3328      	adds	r3, #40	@ 0x28
 8007f64:	2102      	movs	r1, #2
 8007f66:	4618      	mov	r0, r3
 8007f68:	f000 fe54 	bl	8008c14 <RCCEx_PLL3_Config>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d002      	beq.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007f78:	4b87      	ldr	r3, [pc, #540]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f7c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f88:	4a83      	ldr	r2, [pc, #524]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f8a:	430b      	orrs	r3, r1
 8007f8c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f96:	f002 0310 	and.w	r3, r2, #16
 8007f9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007fa4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007fa8:	460b      	mov	r3, r1
 8007faa:	4313      	orrs	r3, r2
 8007fac:	d01e      	beq.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007fb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fba:	d10c      	bne.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fc0:	3328      	adds	r3, #40	@ 0x28
 8007fc2:	2102      	movs	r1, #2
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f000 fe25 	bl	8008c14 <RCCEx_PLL3_Config>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d002      	beq.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007fd6:	4b70      	ldr	r3, [pc, #448]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fda:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fe2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007fe6:	4a6c      	ldr	r2, [pc, #432]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007fe8:	430b      	orrs	r3, r1
 8007fea:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007ff8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008002:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008006:	460b      	mov	r3, r1
 8008008:	4313      	orrs	r3, r2
 800800a:	d03e      	beq.n	800808a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800800c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008010:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008014:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008018:	d022      	beq.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800801a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800801e:	d81b      	bhi.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008020:	2b00      	cmp	r3, #0
 8008022:	d003      	beq.n	800802c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008028:	d00b      	beq.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800802a:	e015      	b.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800802c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008030:	3308      	adds	r3, #8
 8008032:	2100      	movs	r1, #0
 8008034:	4618      	mov	r0, r3
 8008036:	f000 fd3b 	bl	8008ab0 <RCCEx_PLL2_Config>
 800803a:	4603      	mov	r3, r0
 800803c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008040:	e00f      	b.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008046:	3328      	adds	r3, #40	@ 0x28
 8008048:	2102      	movs	r1, #2
 800804a:	4618      	mov	r0, r3
 800804c:	f000 fde2 	bl	8008c14 <RCCEx_PLL3_Config>
 8008050:	4603      	mov	r3, r0
 8008052:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008056:	e004      	b.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800805e:	e000      	b.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008060:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008062:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008066:	2b00      	cmp	r3, #0
 8008068:	d10b      	bne.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800806a:	4b4b      	ldr	r3, [pc, #300]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800806c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800806e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008076:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800807a:	4a47      	ldr	r2, [pc, #284]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800807c:	430b      	orrs	r3, r1
 800807e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008080:	e003      	b.n	800808a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008082:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008086:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800808a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800808e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008092:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008096:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008098:	2300      	movs	r3, #0
 800809a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800809c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80080a0:	460b      	mov	r3, r1
 80080a2:	4313      	orrs	r3, r2
 80080a4:	d03b      	beq.n	800811e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80080a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80080b2:	d01f      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80080b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80080b8:	d818      	bhi.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80080ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080be:	d003      	beq.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80080c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80080c4:	d007      	beq.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80080c6:	e011      	b.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080c8:	4b33      	ldr	r3, [pc, #204]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080cc:	4a32      	ldr	r2, [pc, #200]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80080d4:	e00f      	b.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80080d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080da:	3328      	adds	r3, #40	@ 0x28
 80080dc:	2101      	movs	r1, #1
 80080de:	4618      	mov	r0, r3
 80080e0:	f000 fd98 	bl	8008c14 <RCCEx_PLL3_Config>
 80080e4:	4603      	mov	r3, r0
 80080e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80080ea:	e004      	b.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080f2:	e000      	b.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80080f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d10b      	bne.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80080fe:	4b26      	ldr	r3, [pc, #152]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008102:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800810a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800810e:	4a22      	ldr	r2, [pc, #136]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008110:	430b      	orrs	r3, r1
 8008112:	6553      	str	r3, [r2, #84]	@ 0x54
 8008114:	e003      	b.n	800811e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008116:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800811a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800811e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008126:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800812a:	673b      	str	r3, [r7, #112]	@ 0x70
 800812c:	2300      	movs	r3, #0
 800812e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008130:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008134:	460b      	mov	r3, r1
 8008136:	4313      	orrs	r3, r2
 8008138:	d034      	beq.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800813a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800813e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008140:	2b00      	cmp	r3, #0
 8008142:	d003      	beq.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008144:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008148:	d007      	beq.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800814a:	e011      	b.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800814c:	4b12      	ldr	r3, [pc, #72]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800814e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008150:	4a11      	ldr	r2, [pc, #68]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008152:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008156:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008158:	e00e      	b.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800815a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800815e:	3308      	adds	r3, #8
 8008160:	2102      	movs	r1, #2
 8008162:	4618      	mov	r0, r3
 8008164:	f000 fca4 	bl	8008ab0 <RCCEx_PLL2_Config>
 8008168:	4603      	mov	r3, r0
 800816a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800816e:	e003      	b.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008170:	2301      	movs	r3, #1
 8008172:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008176:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008178:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800817c:	2b00      	cmp	r3, #0
 800817e:	d10d      	bne.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008180:	4b05      	ldr	r3, [pc, #20]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008184:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800818c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800818e:	4a02      	ldr	r2, [pc, #8]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008190:	430b      	orrs	r3, r1
 8008192:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008194:	e006      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008196:	bf00      	nop
 8008198:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800819c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80081a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ac:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80081b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80081b2:	2300      	movs	r3, #0
 80081b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80081b6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80081ba:	460b      	mov	r3, r1
 80081bc:	4313      	orrs	r3, r2
 80081be:	d00c      	beq.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80081c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081c4:	3328      	adds	r3, #40	@ 0x28
 80081c6:	2102      	movs	r1, #2
 80081c8:	4618      	mov	r0, r3
 80081ca:	f000 fd23 	bl	8008c14 <RCCEx_PLL3_Config>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d002      	beq.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80081d4:	2301      	movs	r3, #1
 80081d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80081da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80081e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80081e8:	2300      	movs	r3, #0
 80081ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80081ec:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80081f0:	460b      	mov	r3, r1
 80081f2:	4313      	orrs	r3, r2
 80081f4:	d038      	beq.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80081f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008202:	d018      	beq.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008204:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008208:	d811      	bhi.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800820a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800820e:	d014      	beq.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008210:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008214:	d80b      	bhi.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008216:	2b00      	cmp	r3, #0
 8008218:	d011      	beq.n	800823e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800821a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800821e:	d106      	bne.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008220:	4bc3      	ldr	r3, [pc, #780]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008224:	4ac2      	ldr	r2, [pc, #776]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008226:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800822a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800822c:	e008      	b.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008234:	e004      	b.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008236:	bf00      	nop
 8008238:	e002      	b.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800823a:	bf00      	nop
 800823c:	e000      	b.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800823e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008240:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008244:	2b00      	cmp	r3, #0
 8008246:	d10b      	bne.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008248:	4bb9      	ldr	r3, [pc, #740]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800824a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800824c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008254:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008258:	4ab5      	ldr	r2, [pc, #724]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800825a:	430b      	orrs	r3, r1
 800825c:	6553      	str	r3, [r2, #84]	@ 0x54
 800825e:	e003      	b.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008260:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008264:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800826c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008270:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008274:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008276:	2300      	movs	r3, #0
 8008278:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800827a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800827e:	460b      	mov	r3, r1
 8008280:	4313      	orrs	r3, r2
 8008282:	d009      	beq.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008284:	4baa      	ldr	r3, [pc, #680]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008286:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008288:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800828c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008290:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008292:	4aa7      	ldr	r2, [pc, #668]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008294:	430b      	orrs	r3, r1
 8008296:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800829c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80082a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80082a6:	2300      	movs	r3, #0
 80082a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80082aa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80082ae:	460b      	mov	r3, r1
 80082b0:	4313      	orrs	r3, r2
 80082b2:	d00a      	beq.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80082b4:	4b9e      	ldr	r3, [pc, #632]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082b6:	691b      	ldr	r3, [r3, #16]
 80082b8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80082bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80082c4:	4a9a      	ldr	r2, [pc, #616]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082c6:	430b      	orrs	r3, r1
 80082c8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80082ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80082d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082d8:	2300      	movs	r3, #0
 80082da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082dc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80082e0:	460b      	mov	r3, r1
 80082e2:	4313      	orrs	r3, r2
 80082e4:	d009      	beq.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80082e6:	4b92      	ldr	r3, [pc, #584]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082ea:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80082ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082f4:	4a8e      	ldr	r2, [pc, #568]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082f6:	430b      	orrs	r3, r1
 80082f8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80082fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008302:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008306:	643b      	str	r3, [r7, #64]	@ 0x40
 8008308:	2300      	movs	r3, #0
 800830a:	647b      	str	r3, [r7, #68]	@ 0x44
 800830c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008310:	460b      	mov	r3, r1
 8008312:	4313      	orrs	r3, r2
 8008314:	d00e      	beq.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008316:	4b86      	ldr	r3, [pc, #536]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008318:	691b      	ldr	r3, [r3, #16]
 800831a:	4a85      	ldr	r2, [pc, #532]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800831c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008320:	6113      	str	r3, [r2, #16]
 8008322:	4b83      	ldr	r3, [pc, #524]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008324:	6919      	ldr	r1, [r3, #16]
 8008326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800832a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800832e:	4a80      	ldr	r2, [pc, #512]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008330:	430b      	orrs	r3, r1
 8008332:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008340:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008342:	2300      	movs	r3, #0
 8008344:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008346:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800834a:	460b      	mov	r3, r1
 800834c:	4313      	orrs	r3, r2
 800834e:	d009      	beq.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008350:	4b77      	ldr	r3, [pc, #476]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008352:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008354:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800835c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800835e:	4a74      	ldr	r2, [pc, #464]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008360:	430b      	orrs	r3, r1
 8008362:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800836c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008370:	633b      	str	r3, [r7, #48]	@ 0x30
 8008372:	2300      	movs	r3, #0
 8008374:	637b      	str	r3, [r7, #52]	@ 0x34
 8008376:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800837a:	460b      	mov	r3, r1
 800837c:	4313      	orrs	r3, r2
 800837e:	d00a      	beq.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008380:	4b6b      	ldr	r3, [pc, #428]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008384:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800838c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008390:	4a67      	ldr	r2, [pc, #412]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008392:	430b      	orrs	r3, r1
 8008394:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800839a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839e:	2100      	movs	r1, #0
 80083a0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80083a2:	f003 0301 	and.w	r3, r3, #1
 80083a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80083a8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80083ac:	460b      	mov	r3, r1
 80083ae:	4313      	orrs	r3, r2
 80083b0:	d011      	beq.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80083b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083b6:	3308      	adds	r3, #8
 80083b8:	2100      	movs	r1, #0
 80083ba:	4618      	mov	r0, r3
 80083bc:	f000 fb78 	bl	8008ab0 <RCCEx_PLL2_Config>
 80083c0:	4603      	mov	r3, r0
 80083c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80083c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d003      	beq.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80083d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083de:	2100      	movs	r1, #0
 80083e0:	6239      	str	r1, [r7, #32]
 80083e2:	f003 0302 	and.w	r3, r3, #2
 80083e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80083e8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80083ec:	460b      	mov	r3, r1
 80083ee:	4313      	orrs	r3, r2
 80083f0:	d011      	beq.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80083f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083f6:	3308      	adds	r3, #8
 80083f8:	2101      	movs	r1, #1
 80083fa:	4618      	mov	r0, r3
 80083fc:	f000 fb58 	bl	8008ab0 <RCCEx_PLL2_Config>
 8008400:	4603      	mov	r3, r0
 8008402:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008406:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800840a:	2b00      	cmp	r3, #0
 800840c:	d003      	beq.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800840e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008412:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800841a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841e:	2100      	movs	r1, #0
 8008420:	61b9      	str	r1, [r7, #24]
 8008422:	f003 0304 	and.w	r3, r3, #4
 8008426:	61fb      	str	r3, [r7, #28]
 8008428:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800842c:	460b      	mov	r3, r1
 800842e:	4313      	orrs	r3, r2
 8008430:	d011      	beq.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008436:	3308      	adds	r3, #8
 8008438:	2102      	movs	r1, #2
 800843a:	4618      	mov	r0, r3
 800843c:	f000 fb38 	bl	8008ab0 <RCCEx_PLL2_Config>
 8008440:	4603      	mov	r3, r0
 8008442:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008446:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800844a:	2b00      	cmp	r3, #0
 800844c:	d003      	beq.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800844e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008452:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800845a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845e:	2100      	movs	r1, #0
 8008460:	6139      	str	r1, [r7, #16]
 8008462:	f003 0308 	and.w	r3, r3, #8
 8008466:	617b      	str	r3, [r7, #20]
 8008468:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800846c:	460b      	mov	r3, r1
 800846e:	4313      	orrs	r3, r2
 8008470:	d011      	beq.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008476:	3328      	adds	r3, #40	@ 0x28
 8008478:	2100      	movs	r1, #0
 800847a:	4618      	mov	r0, r3
 800847c:	f000 fbca 	bl	8008c14 <RCCEx_PLL3_Config>
 8008480:	4603      	mov	r3, r0
 8008482:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008486:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800848a:	2b00      	cmp	r3, #0
 800848c:	d003      	beq.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800848e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008492:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800849a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849e:	2100      	movs	r1, #0
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	f003 0310 	and.w	r3, r3, #16
 80084a6:	60fb      	str	r3, [r7, #12]
 80084a8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80084ac:	460b      	mov	r3, r1
 80084ae:	4313      	orrs	r3, r2
 80084b0:	d011      	beq.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80084b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084b6:	3328      	adds	r3, #40	@ 0x28
 80084b8:	2101      	movs	r1, #1
 80084ba:	4618      	mov	r0, r3
 80084bc:	f000 fbaa 	bl	8008c14 <RCCEx_PLL3_Config>
 80084c0:	4603      	mov	r3, r0
 80084c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80084c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d003      	beq.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80084d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084de:	2100      	movs	r1, #0
 80084e0:	6039      	str	r1, [r7, #0]
 80084e2:	f003 0320 	and.w	r3, r3, #32
 80084e6:	607b      	str	r3, [r7, #4]
 80084e8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80084ec:	460b      	mov	r3, r1
 80084ee:	4313      	orrs	r3, r2
 80084f0:	d011      	beq.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80084f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084f6:	3328      	adds	r3, #40	@ 0x28
 80084f8:	2102      	movs	r1, #2
 80084fa:	4618      	mov	r0, r3
 80084fc:	f000 fb8a 	bl	8008c14 <RCCEx_PLL3_Config>
 8008500:	4603      	mov	r3, r0
 8008502:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008506:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800850a:	2b00      	cmp	r3, #0
 800850c:	d003      	beq.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800850e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008512:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008516:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800851a:	2b00      	cmp	r3, #0
 800851c:	d101      	bne.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800851e:	2300      	movs	r3, #0
 8008520:	e000      	b.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
}
 8008524:	4618      	mov	r0, r3
 8008526:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800852a:	46bd      	mov	sp, r7
 800852c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008530:	58024400 	.word	0x58024400

08008534 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008538:	f7fe fd96 	bl	8007068 <HAL_RCC_GetHCLKFreq>
 800853c:	4602      	mov	r2, r0
 800853e:	4b06      	ldr	r3, [pc, #24]	@ (8008558 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008540:	6a1b      	ldr	r3, [r3, #32]
 8008542:	091b      	lsrs	r3, r3, #4
 8008544:	f003 0307 	and.w	r3, r3, #7
 8008548:	4904      	ldr	r1, [pc, #16]	@ (800855c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800854a:	5ccb      	ldrb	r3, [r1, r3]
 800854c:	f003 031f 	and.w	r3, r3, #31
 8008550:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008554:	4618      	mov	r0, r3
 8008556:	bd80      	pop	{r7, pc}
 8008558:	58024400 	.word	0x58024400
 800855c:	08012358 	.word	0x08012358

08008560 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008560:	b480      	push	{r7}
 8008562:	b089      	sub	sp, #36	@ 0x24
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008568:	4ba1      	ldr	r3, [pc, #644]	@ (80087f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800856a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800856c:	f003 0303 	and.w	r3, r3, #3
 8008570:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008572:	4b9f      	ldr	r3, [pc, #636]	@ (80087f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008576:	0b1b      	lsrs	r3, r3, #12
 8008578:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800857c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800857e:	4b9c      	ldr	r3, [pc, #624]	@ (80087f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008582:	091b      	lsrs	r3, r3, #4
 8008584:	f003 0301 	and.w	r3, r3, #1
 8008588:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800858a:	4b99      	ldr	r3, [pc, #612]	@ (80087f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800858c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800858e:	08db      	lsrs	r3, r3, #3
 8008590:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008594:	693a      	ldr	r2, [r7, #16]
 8008596:	fb02 f303 	mul.w	r3, r2, r3
 800859a:	ee07 3a90 	vmov	s15, r3
 800859e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	f000 8111 	beq.w	80087d0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80085ae:	69bb      	ldr	r3, [r7, #24]
 80085b0:	2b02      	cmp	r3, #2
 80085b2:	f000 8083 	beq.w	80086bc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	f200 80a1 	bhi.w	8008700 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80085be:	69bb      	ldr	r3, [r7, #24]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d003      	beq.n	80085cc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d056      	beq.n	8008678 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80085ca:	e099      	b.n	8008700 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085cc:	4b88      	ldr	r3, [pc, #544]	@ (80087f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f003 0320 	and.w	r3, r3, #32
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d02d      	beq.n	8008634 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085d8:	4b85      	ldr	r3, [pc, #532]	@ (80087f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	08db      	lsrs	r3, r3, #3
 80085de:	f003 0303 	and.w	r3, r3, #3
 80085e2:	4a84      	ldr	r2, [pc, #528]	@ (80087f4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80085e4:	fa22 f303 	lsr.w	r3, r2, r3
 80085e8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	ee07 3a90 	vmov	s15, r3
 80085f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	ee07 3a90 	vmov	s15, r3
 80085fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008602:	4b7b      	ldr	r3, [pc, #492]	@ (80087f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800860a:	ee07 3a90 	vmov	s15, r3
 800860e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008612:	ed97 6a03 	vldr	s12, [r7, #12]
 8008616:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80087f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800861a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800861e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008622:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800862a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800862e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008632:	e087      	b.n	8008744 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	ee07 3a90 	vmov	s15, r3
 800863a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800863e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80087fc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008646:	4b6a      	ldr	r3, [pc, #424]	@ (80087f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800864a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800864e:	ee07 3a90 	vmov	s15, r3
 8008652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008656:	ed97 6a03 	vldr	s12, [r7, #12]
 800865a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80087f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800865e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008666:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800866a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800866e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008672:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008676:	e065      	b.n	8008744 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	ee07 3a90 	vmov	s15, r3
 800867e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008682:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008800 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800868a:	4b59      	ldr	r3, [pc, #356]	@ (80087f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800868c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800868e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008692:	ee07 3a90 	vmov	s15, r3
 8008696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800869a:	ed97 6a03 	vldr	s12, [r7, #12]
 800869e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80087f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80086a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086ba:	e043      	b.n	8008744 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	ee07 3a90 	vmov	s15, r3
 80086c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086c6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008804 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80086ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086ce:	4b48      	ldr	r3, [pc, #288]	@ (80087f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086d6:	ee07 3a90 	vmov	s15, r3
 80086da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086de:	ed97 6a03 	vldr	s12, [r7, #12]
 80086e2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80087f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80086e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086fe:	e021      	b.n	8008744 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	ee07 3a90 	vmov	s15, r3
 8008706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800870a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008800 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800870e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008712:	4b37      	ldr	r3, [pc, #220]	@ (80087f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800871a:	ee07 3a90 	vmov	s15, r3
 800871e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008722:	ed97 6a03 	vldr	s12, [r7, #12]
 8008726:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80087f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800872a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800872e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008732:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800873a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800873e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008742:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008744:	4b2a      	ldr	r3, [pc, #168]	@ (80087f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008748:	0a5b      	lsrs	r3, r3, #9
 800874a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800874e:	ee07 3a90 	vmov	s15, r3
 8008752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008756:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800875a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800875e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008762:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008766:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800876a:	ee17 2a90 	vmov	r2, s15
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008772:	4b1f      	ldr	r3, [pc, #124]	@ (80087f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008776:	0c1b      	lsrs	r3, r3, #16
 8008778:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800877c:	ee07 3a90 	vmov	s15, r3
 8008780:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008784:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008788:	ee37 7a87 	vadd.f32	s14, s15, s14
 800878c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008790:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008794:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008798:	ee17 2a90 	vmov	r2, s15
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80087a0:	4b13      	ldr	r3, [pc, #76]	@ (80087f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087a4:	0e1b      	lsrs	r3, r3, #24
 80087a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087aa:	ee07 3a90 	vmov	s15, r3
 80087ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80087b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80087be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087c6:	ee17 2a90 	vmov	r2, s15
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80087ce:	e008      	b.n	80087e2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	609a      	str	r2, [r3, #8]
}
 80087e2:	bf00      	nop
 80087e4:	3724      	adds	r7, #36	@ 0x24
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr
 80087ee:	bf00      	nop
 80087f0:	58024400 	.word	0x58024400
 80087f4:	03d09000 	.word	0x03d09000
 80087f8:	46000000 	.word	0x46000000
 80087fc:	4c742400 	.word	0x4c742400
 8008800:	4a742400 	.word	0x4a742400
 8008804:	4bbebc20 	.word	0x4bbebc20

08008808 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008808:	b480      	push	{r7}
 800880a:	b089      	sub	sp, #36	@ 0x24
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008810:	4ba1      	ldr	r3, [pc, #644]	@ (8008a98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008814:	f003 0303 	and.w	r3, r3, #3
 8008818:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800881a:	4b9f      	ldr	r3, [pc, #636]	@ (8008a98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800881c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800881e:	0d1b      	lsrs	r3, r3, #20
 8008820:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008824:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008826:	4b9c      	ldr	r3, [pc, #624]	@ (8008a98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800882a:	0a1b      	lsrs	r3, r3, #8
 800882c:	f003 0301 	and.w	r3, r3, #1
 8008830:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008832:	4b99      	ldr	r3, [pc, #612]	@ (8008a98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008836:	08db      	lsrs	r3, r3, #3
 8008838:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800883c:	693a      	ldr	r2, [r7, #16]
 800883e:	fb02 f303 	mul.w	r3, r2, r3
 8008842:	ee07 3a90 	vmov	s15, r3
 8008846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800884a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	2b00      	cmp	r3, #0
 8008852:	f000 8111 	beq.w	8008a78 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008856:	69bb      	ldr	r3, [r7, #24]
 8008858:	2b02      	cmp	r3, #2
 800885a:	f000 8083 	beq.w	8008964 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800885e:	69bb      	ldr	r3, [r7, #24]
 8008860:	2b02      	cmp	r3, #2
 8008862:	f200 80a1 	bhi.w	80089a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008866:	69bb      	ldr	r3, [r7, #24]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d003      	beq.n	8008874 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800886c:	69bb      	ldr	r3, [r7, #24]
 800886e:	2b01      	cmp	r3, #1
 8008870:	d056      	beq.n	8008920 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008872:	e099      	b.n	80089a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008874:	4b88      	ldr	r3, [pc, #544]	@ (8008a98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f003 0320 	and.w	r3, r3, #32
 800887c:	2b00      	cmp	r3, #0
 800887e:	d02d      	beq.n	80088dc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008880:	4b85      	ldr	r3, [pc, #532]	@ (8008a98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	08db      	lsrs	r3, r3, #3
 8008886:	f003 0303 	and.w	r3, r3, #3
 800888a:	4a84      	ldr	r2, [pc, #528]	@ (8008a9c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800888c:	fa22 f303 	lsr.w	r3, r2, r3
 8008890:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	ee07 3a90 	vmov	s15, r3
 8008898:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	ee07 3a90 	vmov	s15, r3
 80088a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088aa:	4b7b      	ldr	r3, [pc, #492]	@ (8008a98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088b2:	ee07 3a90 	vmov	s15, r3
 80088b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80088be:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80088c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80088da:	e087      	b.n	80089ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	ee07 3a90 	vmov	s15, r3
 80088e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088e6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80088ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088ee:	4b6a      	ldr	r3, [pc, #424]	@ (8008a98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088f6:	ee07 3a90 	vmov	s15, r3
 80088fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008902:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800890a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800890e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800891a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800891e:	e065      	b.n	80089ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	ee07 3a90 	vmov	s15, r3
 8008926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800892a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800892e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008932:	4b59      	ldr	r3, [pc, #356]	@ (8008a98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800893a:	ee07 3a90 	vmov	s15, r3
 800893e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008942:	ed97 6a03 	vldr	s12, [r7, #12]
 8008946:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800894a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800894e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008952:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800895a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800895e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008962:	e043      	b.n	80089ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	ee07 3a90 	vmov	s15, r3
 800896a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800896e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008aac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008976:	4b48      	ldr	r3, [pc, #288]	@ (8008a98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800897a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800897e:	ee07 3a90 	vmov	s15, r3
 8008982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008986:	ed97 6a03 	vldr	s12, [r7, #12]
 800898a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800898e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008996:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800899a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800899e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089a6:	e021      	b.n	80089ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	ee07 3a90 	vmov	s15, r3
 80089ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089b2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80089b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ba:	4b37      	ldr	r3, [pc, #220]	@ (8008a98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089c2:	ee07 3a90 	vmov	s15, r3
 80089c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80089ce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80089d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089ea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80089ec:	4b2a      	ldr	r3, [pc, #168]	@ (8008a98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089f0:	0a5b      	lsrs	r3, r3, #9
 80089f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089f6:	ee07 3a90 	vmov	s15, r3
 80089fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a06:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a12:	ee17 2a90 	vmov	r2, s15
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008a1a:	4b1f      	ldr	r3, [pc, #124]	@ (8008a98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a1e:	0c1b      	lsrs	r3, r3, #16
 8008a20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a24:	ee07 3a90 	vmov	s15, r3
 8008a28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a34:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a40:	ee17 2a90 	vmov	r2, s15
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008a48:	4b13      	ldr	r3, [pc, #76]	@ (8008a98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a4c:	0e1b      	lsrs	r3, r3, #24
 8008a4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a52:	ee07 3a90 	vmov	s15, r3
 8008a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a62:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a6e:	ee17 2a90 	vmov	r2, s15
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008a76:	e008      	b.n	8008a8a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2200      	movs	r2, #0
 8008a82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	609a      	str	r2, [r3, #8]
}
 8008a8a:	bf00      	nop
 8008a8c:	3724      	adds	r7, #36	@ 0x24
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	58024400 	.word	0x58024400
 8008a9c:	03d09000 	.word	0x03d09000
 8008aa0:	46000000 	.word	0x46000000
 8008aa4:	4c742400 	.word	0x4c742400
 8008aa8:	4a742400 	.word	0x4a742400
 8008aac:	4bbebc20 	.word	0x4bbebc20

08008ab0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008aba:	2300      	movs	r3, #0
 8008abc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008abe:	4b53      	ldr	r3, [pc, #332]	@ (8008c0c <RCCEx_PLL2_Config+0x15c>)
 8008ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ac2:	f003 0303 	and.w	r3, r3, #3
 8008ac6:	2b03      	cmp	r3, #3
 8008ac8:	d101      	bne.n	8008ace <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008aca:	2301      	movs	r3, #1
 8008acc:	e099      	b.n	8008c02 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008ace:	4b4f      	ldr	r3, [pc, #316]	@ (8008c0c <RCCEx_PLL2_Config+0x15c>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a4e      	ldr	r2, [pc, #312]	@ (8008c0c <RCCEx_PLL2_Config+0x15c>)
 8008ad4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008ad8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ada:	f7f9 fb79 	bl	80021d0 <HAL_GetTick>
 8008ade:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ae0:	e008      	b.n	8008af4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008ae2:	f7f9 fb75 	bl	80021d0 <HAL_GetTick>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	1ad3      	subs	r3, r2, r3
 8008aec:	2b02      	cmp	r3, #2
 8008aee:	d901      	bls.n	8008af4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008af0:	2303      	movs	r3, #3
 8008af2:	e086      	b.n	8008c02 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008af4:	4b45      	ldr	r3, [pc, #276]	@ (8008c0c <RCCEx_PLL2_Config+0x15c>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d1f0      	bne.n	8008ae2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008b00:	4b42      	ldr	r3, [pc, #264]	@ (8008c0c <RCCEx_PLL2_Config+0x15c>)
 8008b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b04:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	031b      	lsls	r3, r3, #12
 8008b0e:	493f      	ldr	r1, [pc, #252]	@ (8008c0c <RCCEx_PLL2_Config+0x15c>)
 8008b10:	4313      	orrs	r3, r2
 8008b12:	628b      	str	r3, [r1, #40]	@ 0x28
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	3b01      	subs	r3, #1
 8008b24:	025b      	lsls	r3, r3, #9
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	431a      	orrs	r2, r3
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	3b01      	subs	r3, #1
 8008b30:	041b      	lsls	r3, r3, #16
 8008b32:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008b36:	431a      	orrs	r2, r3
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	691b      	ldr	r3, [r3, #16]
 8008b3c:	3b01      	subs	r3, #1
 8008b3e:	061b      	lsls	r3, r3, #24
 8008b40:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008b44:	4931      	ldr	r1, [pc, #196]	@ (8008c0c <RCCEx_PLL2_Config+0x15c>)
 8008b46:	4313      	orrs	r3, r2
 8008b48:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008b4a:	4b30      	ldr	r3, [pc, #192]	@ (8008c0c <RCCEx_PLL2_Config+0x15c>)
 8008b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b4e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	695b      	ldr	r3, [r3, #20]
 8008b56:	492d      	ldr	r1, [pc, #180]	@ (8008c0c <RCCEx_PLL2_Config+0x15c>)
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8008c0c <RCCEx_PLL2_Config+0x15c>)
 8008b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b60:	f023 0220 	bic.w	r2, r3, #32
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	699b      	ldr	r3, [r3, #24]
 8008b68:	4928      	ldr	r1, [pc, #160]	@ (8008c0c <RCCEx_PLL2_Config+0x15c>)
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008b6e:	4b27      	ldr	r3, [pc, #156]	@ (8008c0c <RCCEx_PLL2_Config+0x15c>)
 8008b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b72:	4a26      	ldr	r2, [pc, #152]	@ (8008c0c <RCCEx_PLL2_Config+0x15c>)
 8008b74:	f023 0310 	bic.w	r3, r3, #16
 8008b78:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008b7a:	4b24      	ldr	r3, [pc, #144]	@ (8008c0c <RCCEx_PLL2_Config+0x15c>)
 8008b7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b7e:	4b24      	ldr	r3, [pc, #144]	@ (8008c10 <RCCEx_PLL2_Config+0x160>)
 8008b80:	4013      	ands	r3, r2
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	69d2      	ldr	r2, [r2, #28]
 8008b86:	00d2      	lsls	r2, r2, #3
 8008b88:	4920      	ldr	r1, [pc, #128]	@ (8008c0c <RCCEx_PLL2_Config+0x15c>)
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008b8e:	4b1f      	ldr	r3, [pc, #124]	@ (8008c0c <RCCEx_PLL2_Config+0x15c>)
 8008b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b92:	4a1e      	ldr	r2, [pc, #120]	@ (8008c0c <RCCEx_PLL2_Config+0x15c>)
 8008b94:	f043 0310 	orr.w	r3, r3, #16
 8008b98:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d106      	bne.n	8008bae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8008c0c <RCCEx_PLL2_Config+0x15c>)
 8008ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ba4:	4a19      	ldr	r2, [pc, #100]	@ (8008c0c <RCCEx_PLL2_Config+0x15c>)
 8008ba6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008baa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008bac:	e00f      	b.n	8008bce <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d106      	bne.n	8008bc2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008bb4:	4b15      	ldr	r3, [pc, #84]	@ (8008c0c <RCCEx_PLL2_Config+0x15c>)
 8008bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bb8:	4a14      	ldr	r2, [pc, #80]	@ (8008c0c <RCCEx_PLL2_Config+0x15c>)
 8008bba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008bbe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008bc0:	e005      	b.n	8008bce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008bc2:	4b12      	ldr	r3, [pc, #72]	@ (8008c0c <RCCEx_PLL2_Config+0x15c>)
 8008bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bc6:	4a11      	ldr	r2, [pc, #68]	@ (8008c0c <RCCEx_PLL2_Config+0x15c>)
 8008bc8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008bcc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008bce:	4b0f      	ldr	r3, [pc, #60]	@ (8008c0c <RCCEx_PLL2_Config+0x15c>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a0e      	ldr	r2, [pc, #56]	@ (8008c0c <RCCEx_PLL2_Config+0x15c>)
 8008bd4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008bd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bda:	f7f9 faf9 	bl	80021d0 <HAL_GetTick>
 8008bde:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008be0:	e008      	b.n	8008bf4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008be2:	f7f9 faf5 	bl	80021d0 <HAL_GetTick>
 8008be6:	4602      	mov	r2, r0
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	1ad3      	subs	r3, r2, r3
 8008bec:	2b02      	cmp	r3, #2
 8008bee:	d901      	bls.n	8008bf4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008bf0:	2303      	movs	r3, #3
 8008bf2:	e006      	b.n	8008c02 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008bf4:	4b05      	ldr	r3, [pc, #20]	@ (8008c0c <RCCEx_PLL2_Config+0x15c>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d0f0      	beq.n	8008be2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	58024400 	.word	0x58024400
 8008c10:	ffff0007 	.word	0xffff0007

08008c14 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008c22:	4b53      	ldr	r3, [pc, #332]	@ (8008d70 <RCCEx_PLL3_Config+0x15c>)
 8008c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c26:	f003 0303 	and.w	r3, r3, #3
 8008c2a:	2b03      	cmp	r3, #3
 8008c2c:	d101      	bne.n	8008c32 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	e099      	b.n	8008d66 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008c32:	4b4f      	ldr	r3, [pc, #316]	@ (8008d70 <RCCEx_PLL3_Config+0x15c>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a4e      	ldr	r2, [pc, #312]	@ (8008d70 <RCCEx_PLL3_Config+0x15c>)
 8008c38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c3e:	f7f9 fac7 	bl	80021d0 <HAL_GetTick>
 8008c42:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c44:	e008      	b.n	8008c58 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008c46:	f7f9 fac3 	bl	80021d0 <HAL_GetTick>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	1ad3      	subs	r3, r2, r3
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	d901      	bls.n	8008c58 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008c54:	2303      	movs	r3, #3
 8008c56:	e086      	b.n	8008d66 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c58:	4b45      	ldr	r3, [pc, #276]	@ (8008d70 <RCCEx_PLL3_Config+0x15c>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d1f0      	bne.n	8008c46 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008c64:	4b42      	ldr	r3, [pc, #264]	@ (8008d70 <RCCEx_PLL3_Config+0x15c>)
 8008c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c68:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	051b      	lsls	r3, r3, #20
 8008c72:	493f      	ldr	r1, [pc, #252]	@ (8008d70 <RCCEx_PLL3_Config+0x15c>)
 8008c74:	4313      	orrs	r3, r2
 8008c76:	628b      	str	r3, [r1, #40]	@ 0x28
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	3b01      	subs	r3, #1
 8008c7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	3b01      	subs	r3, #1
 8008c88:	025b      	lsls	r3, r3, #9
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	431a      	orrs	r2, r3
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	3b01      	subs	r3, #1
 8008c94:	041b      	lsls	r3, r3, #16
 8008c96:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008c9a:	431a      	orrs	r2, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	691b      	ldr	r3, [r3, #16]
 8008ca0:	3b01      	subs	r3, #1
 8008ca2:	061b      	lsls	r3, r3, #24
 8008ca4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008ca8:	4931      	ldr	r1, [pc, #196]	@ (8008d70 <RCCEx_PLL3_Config+0x15c>)
 8008caa:	4313      	orrs	r3, r2
 8008cac:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008cae:	4b30      	ldr	r3, [pc, #192]	@ (8008d70 <RCCEx_PLL3_Config+0x15c>)
 8008cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cb2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	695b      	ldr	r3, [r3, #20]
 8008cba:	492d      	ldr	r1, [pc, #180]	@ (8008d70 <RCCEx_PLL3_Config+0x15c>)
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008cc0:	4b2b      	ldr	r3, [pc, #172]	@ (8008d70 <RCCEx_PLL3_Config+0x15c>)
 8008cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cc4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	699b      	ldr	r3, [r3, #24]
 8008ccc:	4928      	ldr	r1, [pc, #160]	@ (8008d70 <RCCEx_PLL3_Config+0x15c>)
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008cd2:	4b27      	ldr	r3, [pc, #156]	@ (8008d70 <RCCEx_PLL3_Config+0x15c>)
 8008cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cd6:	4a26      	ldr	r2, [pc, #152]	@ (8008d70 <RCCEx_PLL3_Config+0x15c>)
 8008cd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008cdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008cde:	4b24      	ldr	r3, [pc, #144]	@ (8008d70 <RCCEx_PLL3_Config+0x15c>)
 8008ce0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ce2:	4b24      	ldr	r3, [pc, #144]	@ (8008d74 <RCCEx_PLL3_Config+0x160>)
 8008ce4:	4013      	ands	r3, r2
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	69d2      	ldr	r2, [r2, #28]
 8008cea:	00d2      	lsls	r2, r2, #3
 8008cec:	4920      	ldr	r1, [pc, #128]	@ (8008d70 <RCCEx_PLL3_Config+0x15c>)
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008cf2:	4b1f      	ldr	r3, [pc, #124]	@ (8008d70 <RCCEx_PLL3_Config+0x15c>)
 8008cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cf6:	4a1e      	ldr	r2, [pc, #120]	@ (8008d70 <RCCEx_PLL3_Config+0x15c>)
 8008cf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008cfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d106      	bne.n	8008d12 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008d04:	4b1a      	ldr	r3, [pc, #104]	@ (8008d70 <RCCEx_PLL3_Config+0x15c>)
 8008d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d08:	4a19      	ldr	r2, [pc, #100]	@ (8008d70 <RCCEx_PLL3_Config+0x15c>)
 8008d0a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008d0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008d10:	e00f      	b.n	8008d32 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d106      	bne.n	8008d26 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008d18:	4b15      	ldr	r3, [pc, #84]	@ (8008d70 <RCCEx_PLL3_Config+0x15c>)
 8008d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d1c:	4a14      	ldr	r2, [pc, #80]	@ (8008d70 <RCCEx_PLL3_Config+0x15c>)
 8008d1e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008d22:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008d24:	e005      	b.n	8008d32 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008d26:	4b12      	ldr	r3, [pc, #72]	@ (8008d70 <RCCEx_PLL3_Config+0x15c>)
 8008d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d2a:	4a11      	ldr	r2, [pc, #68]	@ (8008d70 <RCCEx_PLL3_Config+0x15c>)
 8008d2c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008d30:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008d32:	4b0f      	ldr	r3, [pc, #60]	@ (8008d70 <RCCEx_PLL3_Config+0x15c>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a0e      	ldr	r2, [pc, #56]	@ (8008d70 <RCCEx_PLL3_Config+0x15c>)
 8008d38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d3e:	f7f9 fa47 	bl	80021d0 <HAL_GetTick>
 8008d42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d44:	e008      	b.n	8008d58 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008d46:	f7f9 fa43 	bl	80021d0 <HAL_GetTick>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	1ad3      	subs	r3, r2, r3
 8008d50:	2b02      	cmp	r3, #2
 8008d52:	d901      	bls.n	8008d58 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008d54:	2303      	movs	r3, #3
 8008d56:	e006      	b.n	8008d66 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d58:	4b05      	ldr	r3, [pc, #20]	@ (8008d70 <RCCEx_PLL3_Config+0x15c>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d0f0      	beq.n	8008d46 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	58024400 	.word	0x58024400
 8008d74:	ffff0007 	.word	0xffff0007

08008d78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d101      	bne.n	8008d8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	e049      	b.n	8008e1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d106      	bne.n	8008da4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f7f8 feb0 	bl	8001b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2202      	movs	r2, #2
 8008da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	3304      	adds	r3, #4
 8008db4:	4619      	mov	r1, r3
 8008db6:	4610      	mov	r0, r2
 8008db8:	f000 fea4 	bl	8009b04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2201      	movs	r2, #1
 8008de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2201      	movs	r2, #1
 8008de8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2201      	movs	r2, #1
 8008df0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2201      	movs	r2, #1
 8008df8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2201      	movs	r2, #1
 8008e08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2201      	movs	r2, #1
 8008e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3708      	adds	r7, #8
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
	...

08008e28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b085      	sub	sp, #20
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d001      	beq.n	8008e40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	e054      	b.n	8008eea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2202      	movs	r2, #2
 8008e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	68da      	ldr	r2, [r3, #12]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f042 0201 	orr.w	r2, r2, #1
 8008e56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a26      	ldr	r2, [pc, #152]	@ (8008ef8 <HAL_TIM_Base_Start_IT+0xd0>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d022      	beq.n	8008ea8 <HAL_TIM_Base_Start_IT+0x80>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e6a:	d01d      	beq.n	8008ea8 <HAL_TIM_Base_Start_IT+0x80>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a22      	ldr	r2, [pc, #136]	@ (8008efc <HAL_TIM_Base_Start_IT+0xd4>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d018      	beq.n	8008ea8 <HAL_TIM_Base_Start_IT+0x80>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a21      	ldr	r2, [pc, #132]	@ (8008f00 <HAL_TIM_Base_Start_IT+0xd8>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d013      	beq.n	8008ea8 <HAL_TIM_Base_Start_IT+0x80>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a1f      	ldr	r2, [pc, #124]	@ (8008f04 <HAL_TIM_Base_Start_IT+0xdc>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d00e      	beq.n	8008ea8 <HAL_TIM_Base_Start_IT+0x80>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a1e      	ldr	r2, [pc, #120]	@ (8008f08 <HAL_TIM_Base_Start_IT+0xe0>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d009      	beq.n	8008ea8 <HAL_TIM_Base_Start_IT+0x80>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a1c      	ldr	r2, [pc, #112]	@ (8008f0c <HAL_TIM_Base_Start_IT+0xe4>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d004      	beq.n	8008ea8 <HAL_TIM_Base_Start_IT+0x80>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a1b      	ldr	r2, [pc, #108]	@ (8008f10 <HAL_TIM_Base_Start_IT+0xe8>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d115      	bne.n	8008ed4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	689a      	ldr	r2, [r3, #8]
 8008eae:	4b19      	ldr	r3, [pc, #100]	@ (8008f14 <HAL_TIM_Base_Start_IT+0xec>)
 8008eb0:	4013      	ands	r3, r2
 8008eb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2b06      	cmp	r3, #6
 8008eb8:	d015      	beq.n	8008ee6 <HAL_TIM_Base_Start_IT+0xbe>
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ec0:	d011      	beq.n	8008ee6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f042 0201 	orr.w	r2, r2, #1
 8008ed0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ed2:	e008      	b.n	8008ee6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f042 0201 	orr.w	r2, r2, #1
 8008ee2:	601a      	str	r2, [r3, #0]
 8008ee4:	e000      	b.n	8008ee8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ee6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008ee8:	2300      	movs	r3, #0
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3714      	adds	r7, #20
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr
 8008ef6:	bf00      	nop
 8008ef8:	40010000 	.word	0x40010000
 8008efc:	40000400 	.word	0x40000400
 8008f00:	40000800 	.word	0x40000800
 8008f04:	40000c00 	.word	0x40000c00
 8008f08:	40010400 	.word	0x40010400
 8008f0c:	40001800 	.word	0x40001800
 8008f10:	40014000 	.word	0x40014000
 8008f14:	00010007 	.word	0x00010007

08008f18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d101      	bne.n	8008f2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	e049      	b.n	8008fbe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d106      	bne.n	8008f44 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f7f8 fcda 	bl	80018f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2202      	movs	r2, #2
 8008f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	3304      	adds	r3, #4
 8008f54:	4619      	mov	r1, r3
 8008f56:	4610      	mov	r0, r2
 8008f58:	f000 fdd4 	bl	8009b04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2201      	movs	r2, #1
 8008f98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008fbc:	2300      	movs	r3, #0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3708      	adds	r7, #8
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
	...

08008fc8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d109      	bne.n	8008fec <HAL_TIM_PWM_Start+0x24>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	bf14      	ite	ne
 8008fe4:	2301      	movne	r3, #1
 8008fe6:	2300      	moveq	r3, #0
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	e03c      	b.n	8009066 <HAL_TIM_PWM_Start+0x9e>
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	2b04      	cmp	r3, #4
 8008ff0:	d109      	bne.n	8009006 <HAL_TIM_PWM_Start+0x3e>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	bf14      	ite	ne
 8008ffe:	2301      	movne	r3, #1
 8009000:	2300      	moveq	r3, #0
 8009002:	b2db      	uxtb	r3, r3
 8009004:	e02f      	b.n	8009066 <HAL_TIM_PWM_Start+0x9e>
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	2b08      	cmp	r3, #8
 800900a:	d109      	bne.n	8009020 <HAL_TIM_PWM_Start+0x58>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009012:	b2db      	uxtb	r3, r3
 8009014:	2b01      	cmp	r3, #1
 8009016:	bf14      	ite	ne
 8009018:	2301      	movne	r3, #1
 800901a:	2300      	moveq	r3, #0
 800901c:	b2db      	uxtb	r3, r3
 800901e:	e022      	b.n	8009066 <HAL_TIM_PWM_Start+0x9e>
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	2b0c      	cmp	r3, #12
 8009024:	d109      	bne.n	800903a <HAL_TIM_PWM_Start+0x72>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800902c:	b2db      	uxtb	r3, r3
 800902e:	2b01      	cmp	r3, #1
 8009030:	bf14      	ite	ne
 8009032:	2301      	movne	r3, #1
 8009034:	2300      	moveq	r3, #0
 8009036:	b2db      	uxtb	r3, r3
 8009038:	e015      	b.n	8009066 <HAL_TIM_PWM_Start+0x9e>
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	2b10      	cmp	r3, #16
 800903e:	d109      	bne.n	8009054 <HAL_TIM_PWM_Start+0x8c>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009046:	b2db      	uxtb	r3, r3
 8009048:	2b01      	cmp	r3, #1
 800904a:	bf14      	ite	ne
 800904c:	2301      	movne	r3, #1
 800904e:	2300      	moveq	r3, #0
 8009050:	b2db      	uxtb	r3, r3
 8009052:	e008      	b.n	8009066 <HAL_TIM_PWM_Start+0x9e>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800905a:	b2db      	uxtb	r3, r3
 800905c:	2b01      	cmp	r3, #1
 800905e:	bf14      	ite	ne
 8009060:	2301      	movne	r3, #1
 8009062:	2300      	moveq	r3, #0
 8009064:	b2db      	uxtb	r3, r3
 8009066:	2b00      	cmp	r3, #0
 8009068:	d001      	beq.n	800906e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800906a:	2301      	movs	r3, #1
 800906c:	e0a1      	b.n	80091b2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d104      	bne.n	800907e <HAL_TIM_PWM_Start+0xb6>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2202      	movs	r2, #2
 8009078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800907c:	e023      	b.n	80090c6 <HAL_TIM_PWM_Start+0xfe>
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	2b04      	cmp	r3, #4
 8009082:	d104      	bne.n	800908e <HAL_TIM_PWM_Start+0xc6>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2202      	movs	r2, #2
 8009088:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800908c:	e01b      	b.n	80090c6 <HAL_TIM_PWM_Start+0xfe>
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	2b08      	cmp	r3, #8
 8009092:	d104      	bne.n	800909e <HAL_TIM_PWM_Start+0xd6>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2202      	movs	r2, #2
 8009098:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800909c:	e013      	b.n	80090c6 <HAL_TIM_PWM_Start+0xfe>
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	2b0c      	cmp	r3, #12
 80090a2:	d104      	bne.n	80090ae <HAL_TIM_PWM_Start+0xe6>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2202      	movs	r2, #2
 80090a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80090ac:	e00b      	b.n	80090c6 <HAL_TIM_PWM_Start+0xfe>
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	2b10      	cmp	r3, #16
 80090b2:	d104      	bne.n	80090be <HAL_TIM_PWM_Start+0xf6>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2202      	movs	r2, #2
 80090b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80090bc:	e003      	b.n	80090c6 <HAL_TIM_PWM_Start+0xfe>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2202      	movs	r2, #2
 80090c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2201      	movs	r2, #1
 80090cc:	6839      	ldr	r1, [r7, #0]
 80090ce:	4618      	mov	r0, r3
 80090d0:	f001 f932 	bl	800a338 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a38      	ldr	r2, [pc, #224]	@ (80091bc <HAL_TIM_PWM_Start+0x1f4>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d013      	beq.n	8009106 <HAL_TIM_PWM_Start+0x13e>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4a37      	ldr	r2, [pc, #220]	@ (80091c0 <HAL_TIM_PWM_Start+0x1f8>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d00e      	beq.n	8009106 <HAL_TIM_PWM_Start+0x13e>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4a35      	ldr	r2, [pc, #212]	@ (80091c4 <HAL_TIM_PWM_Start+0x1fc>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d009      	beq.n	8009106 <HAL_TIM_PWM_Start+0x13e>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a34      	ldr	r2, [pc, #208]	@ (80091c8 <HAL_TIM_PWM_Start+0x200>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d004      	beq.n	8009106 <HAL_TIM_PWM_Start+0x13e>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a32      	ldr	r2, [pc, #200]	@ (80091cc <HAL_TIM_PWM_Start+0x204>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d101      	bne.n	800910a <HAL_TIM_PWM_Start+0x142>
 8009106:	2301      	movs	r3, #1
 8009108:	e000      	b.n	800910c <HAL_TIM_PWM_Start+0x144>
 800910a:	2300      	movs	r3, #0
 800910c:	2b00      	cmp	r3, #0
 800910e:	d007      	beq.n	8009120 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800911e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a25      	ldr	r2, [pc, #148]	@ (80091bc <HAL_TIM_PWM_Start+0x1f4>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d022      	beq.n	8009170 <HAL_TIM_PWM_Start+0x1a8>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009132:	d01d      	beq.n	8009170 <HAL_TIM_PWM_Start+0x1a8>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a25      	ldr	r2, [pc, #148]	@ (80091d0 <HAL_TIM_PWM_Start+0x208>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d018      	beq.n	8009170 <HAL_TIM_PWM_Start+0x1a8>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4a24      	ldr	r2, [pc, #144]	@ (80091d4 <HAL_TIM_PWM_Start+0x20c>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d013      	beq.n	8009170 <HAL_TIM_PWM_Start+0x1a8>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a22      	ldr	r2, [pc, #136]	@ (80091d8 <HAL_TIM_PWM_Start+0x210>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d00e      	beq.n	8009170 <HAL_TIM_PWM_Start+0x1a8>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4a1a      	ldr	r2, [pc, #104]	@ (80091c0 <HAL_TIM_PWM_Start+0x1f8>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d009      	beq.n	8009170 <HAL_TIM_PWM_Start+0x1a8>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a1e      	ldr	r2, [pc, #120]	@ (80091dc <HAL_TIM_PWM_Start+0x214>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d004      	beq.n	8009170 <HAL_TIM_PWM_Start+0x1a8>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a16      	ldr	r2, [pc, #88]	@ (80091c4 <HAL_TIM_PWM_Start+0x1fc>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d115      	bne.n	800919c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	689a      	ldr	r2, [r3, #8]
 8009176:	4b1a      	ldr	r3, [pc, #104]	@ (80091e0 <HAL_TIM_PWM_Start+0x218>)
 8009178:	4013      	ands	r3, r2
 800917a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2b06      	cmp	r3, #6
 8009180:	d015      	beq.n	80091ae <HAL_TIM_PWM_Start+0x1e6>
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009188:	d011      	beq.n	80091ae <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f042 0201 	orr.w	r2, r2, #1
 8009198:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800919a:	e008      	b.n	80091ae <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f042 0201 	orr.w	r2, r2, #1
 80091aa:	601a      	str	r2, [r3, #0]
 80091ac:	e000      	b.n	80091b0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80091b0:	2300      	movs	r3, #0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3710      	adds	r7, #16
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	40010000 	.word	0x40010000
 80091c0:	40010400 	.word	0x40010400
 80091c4:	40014000 	.word	0x40014000
 80091c8:	40014400 	.word	0x40014400
 80091cc:	40014800 	.word	0x40014800
 80091d0:	40000400 	.word	0x40000400
 80091d4:	40000800 	.word	0x40000800
 80091d8:	40000c00 	.word	0x40000c00
 80091dc:	40001800 	.word	0x40001800
 80091e0:	00010007 	.word	0x00010007

080091e4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b086      	sub	sp, #24
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d101      	bne.n	80091f8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80091f4:	2301      	movs	r3, #1
 80091f6:	e08f      	b.n	8009318 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	2b00      	cmp	r3, #0
 8009202:	d106      	bne.n	8009212 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f7f8 fca1 	bl	8001b54 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2202      	movs	r2, #2
 8009216:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	6899      	ldr	r1, [r3, #8]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	4b3e      	ldr	r3, [pc, #248]	@ (8009320 <HAL_TIM_Encoder_Init+0x13c>)
 8009226:	400b      	ands	r3, r1
 8009228:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	3304      	adds	r3, #4
 8009232:	4619      	mov	r1, r3
 8009234:	4610      	mov	r0, r2
 8009236:	f000 fc65 	bl	8009b04 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	699b      	ldr	r3, [r3, #24]
 8009248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	6a1b      	ldr	r3, [r3, #32]
 8009250:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	697a      	ldr	r2, [r7, #20]
 8009258:	4313      	orrs	r3, r2
 800925a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800925c:	693a      	ldr	r2, [r7, #16]
 800925e:	4b31      	ldr	r3, [pc, #196]	@ (8009324 <HAL_TIM_Encoder_Init+0x140>)
 8009260:	4013      	ands	r3, r2
 8009262:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	689a      	ldr	r2, [r3, #8]
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	699b      	ldr	r3, [r3, #24]
 800926c:	021b      	lsls	r3, r3, #8
 800926e:	4313      	orrs	r3, r2
 8009270:	693a      	ldr	r2, [r7, #16]
 8009272:	4313      	orrs	r3, r2
 8009274:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009276:	693a      	ldr	r2, [r7, #16]
 8009278:	4b2b      	ldr	r3, [pc, #172]	@ (8009328 <HAL_TIM_Encoder_Init+0x144>)
 800927a:	4013      	ands	r3, r2
 800927c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800927e:	693a      	ldr	r2, [r7, #16]
 8009280:	4b2a      	ldr	r3, [pc, #168]	@ (800932c <HAL_TIM_Encoder_Init+0x148>)
 8009282:	4013      	ands	r3, r2
 8009284:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	68da      	ldr	r2, [r3, #12]
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	69db      	ldr	r3, [r3, #28]
 800928e:	021b      	lsls	r3, r3, #8
 8009290:	4313      	orrs	r3, r2
 8009292:	693a      	ldr	r2, [r7, #16]
 8009294:	4313      	orrs	r3, r2
 8009296:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	691b      	ldr	r3, [r3, #16]
 800929c:	011a      	lsls	r2, r3, #4
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	6a1b      	ldr	r3, [r3, #32]
 80092a2:	031b      	lsls	r3, r3, #12
 80092a4:	4313      	orrs	r3, r2
 80092a6:	693a      	ldr	r2, [r7, #16]
 80092a8:	4313      	orrs	r3, r2
 80092aa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80092b2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80092ba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	685a      	ldr	r2, [r3, #4]
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	695b      	ldr	r3, [r3, #20]
 80092c4:	011b      	lsls	r3, r3, #4
 80092c6:	4313      	orrs	r3, r2
 80092c8:	68fa      	ldr	r2, [r7, #12]
 80092ca:	4313      	orrs	r3, r2
 80092cc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	697a      	ldr	r2, [r7, #20]
 80092d4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	693a      	ldr	r2, [r7, #16]
 80092dc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	68fa      	ldr	r2, [r7, #12]
 80092e4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2201      	movs	r2, #1
 80092ea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2201      	movs	r2, #1
 80092f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2201      	movs	r2, #1
 80092fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2201      	movs	r2, #1
 8009302:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2201      	movs	r2, #1
 800930a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2201      	movs	r2, #1
 8009312:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009316:	2300      	movs	r3, #0
}
 8009318:	4618      	mov	r0, r3
 800931a:	3718      	adds	r7, #24
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}
 8009320:	fffebff8 	.word	0xfffebff8
 8009324:	fffffcfc 	.word	0xfffffcfc
 8009328:	fffff3f3 	.word	0xfffff3f3
 800932c:	ffff0f0f 	.word	0xffff0f0f

08009330 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009340:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009348:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009350:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009358:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d110      	bne.n	8009382 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009360:	7bfb      	ldrb	r3, [r7, #15]
 8009362:	2b01      	cmp	r3, #1
 8009364:	d102      	bne.n	800936c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009366:	7b7b      	ldrb	r3, [r7, #13]
 8009368:	2b01      	cmp	r3, #1
 800936a:	d001      	beq.n	8009370 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800936c:	2301      	movs	r3, #1
 800936e:	e089      	b.n	8009484 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2202      	movs	r2, #2
 8009374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2202      	movs	r2, #2
 800937c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009380:	e031      	b.n	80093e6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	2b04      	cmp	r3, #4
 8009386:	d110      	bne.n	80093aa <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009388:	7bbb      	ldrb	r3, [r7, #14]
 800938a:	2b01      	cmp	r3, #1
 800938c:	d102      	bne.n	8009394 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800938e:	7b3b      	ldrb	r3, [r7, #12]
 8009390:	2b01      	cmp	r3, #1
 8009392:	d001      	beq.n	8009398 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8009394:	2301      	movs	r3, #1
 8009396:	e075      	b.n	8009484 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2202      	movs	r2, #2
 800939c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2202      	movs	r2, #2
 80093a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80093a8:	e01d      	b.n	80093e6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80093aa:	7bfb      	ldrb	r3, [r7, #15]
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d108      	bne.n	80093c2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80093b0:	7bbb      	ldrb	r3, [r7, #14]
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d105      	bne.n	80093c2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80093b6:	7b7b      	ldrb	r3, [r7, #13]
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d102      	bne.n	80093c2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80093bc:	7b3b      	ldrb	r3, [r7, #12]
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d001      	beq.n	80093c6 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	e05e      	b.n	8009484 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2202      	movs	r2, #2
 80093ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2202      	movs	r2, #2
 80093d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2202      	movs	r2, #2
 80093da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2202      	movs	r2, #2
 80093e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d003      	beq.n	80093f4 <HAL_TIM_Encoder_Start_IT+0xc4>
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	2b04      	cmp	r3, #4
 80093f0:	d010      	beq.n	8009414 <HAL_TIM_Encoder_Start_IT+0xe4>
 80093f2:	e01f      	b.n	8009434 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2201      	movs	r2, #1
 80093fa:	2100      	movs	r1, #0
 80093fc:	4618      	mov	r0, r3
 80093fe:	f000 ff9b 	bl	800a338 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	68da      	ldr	r2, [r3, #12]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f042 0202 	orr.w	r2, r2, #2
 8009410:	60da      	str	r2, [r3, #12]
      break;
 8009412:	e02e      	b.n	8009472 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2201      	movs	r2, #1
 800941a:	2104      	movs	r1, #4
 800941c:	4618      	mov	r0, r3
 800941e:	f000 ff8b 	bl	800a338 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	68da      	ldr	r2, [r3, #12]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f042 0204 	orr.w	r2, r2, #4
 8009430:	60da      	str	r2, [r3, #12]
      break;
 8009432:	e01e      	b.n	8009472 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2201      	movs	r2, #1
 800943a:	2100      	movs	r1, #0
 800943c:	4618      	mov	r0, r3
 800943e:	f000 ff7b 	bl	800a338 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	2201      	movs	r2, #1
 8009448:	2104      	movs	r1, #4
 800944a:	4618      	mov	r0, r3
 800944c:	f000 ff74 	bl	800a338 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	68da      	ldr	r2, [r3, #12]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f042 0202 	orr.w	r2, r2, #2
 800945e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	68da      	ldr	r2, [r3, #12]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f042 0204 	orr.w	r2, r2, #4
 800946e:	60da      	str	r2, [r3, #12]
      break;
 8009470:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f042 0201 	orr.w	r2, r2, #1
 8009480:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009482:	2300      	movs	r3, #0
}
 8009484:	4618      	mov	r0, r3
 8009486:	3710      	adds	r7, #16
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	691b      	ldr	r3, [r3, #16]
 80094a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	f003 0302 	and.w	r3, r3, #2
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d020      	beq.n	80094f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f003 0302 	and.w	r3, r3, #2
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d01b      	beq.n	80094f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f06f 0202 	mvn.w	r2, #2
 80094c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2201      	movs	r2, #1
 80094c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	699b      	ldr	r3, [r3, #24]
 80094ce:	f003 0303 	and.w	r3, r3, #3
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d003      	beq.n	80094de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f7f7 fbd4 	bl	8000c84 <HAL_TIM_IC_CaptureCallback>
 80094dc:	e005      	b.n	80094ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 faf2 	bl	8009ac8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 faf9 	bl	8009adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	f003 0304 	and.w	r3, r3, #4
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d020      	beq.n	800953c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f003 0304 	and.w	r3, r3, #4
 8009500:	2b00      	cmp	r3, #0
 8009502:	d01b      	beq.n	800953c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f06f 0204 	mvn.w	r2, #4
 800950c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2202      	movs	r2, #2
 8009512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	699b      	ldr	r3, [r3, #24]
 800951a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800951e:	2b00      	cmp	r3, #0
 8009520:	d003      	beq.n	800952a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f7f7 fbae 	bl	8000c84 <HAL_TIM_IC_CaptureCallback>
 8009528:	e005      	b.n	8009536 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 facc 	bl	8009ac8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 fad3 	bl	8009adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2200      	movs	r2, #0
 800953a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	f003 0308 	and.w	r3, r3, #8
 8009542:	2b00      	cmp	r3, #0
 8009544:	d020      	beq.n	8009588 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f003 0308 	and.w	r3, r3, #8
 800954c:	2b00      	cmp	r3, #0
 800954e:	d01b      	beq.n	8009588 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f06f 0208 	mvn.w	r2, #8
 8009558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2204      	movs	r2, #4
 800955e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	69db      	ldr	r3, [r3, #28]
 8009566:	f003 0303 	and.w	r3, r3, #3
 800956a:	2b00      	cmp	r3, #0
 800956c:	d003      	beq.n	8009576 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f7f7 fb88 	bl	8000c84 <HAL_TIM_IC_CaptureCallback>
 8009574:	e005      	b.n	8009582 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 faa6 	bl	8009ac8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 faad 	bl	8009adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	f003 0310 	and.w	r3, r3, #16
 800958e:	2b00      	cmp	r3, #0
 8009590:	d020      	beq.n	80095d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f003 0310 	and.w	r3, r3, #16
 8009598:	2b00      	cmp	r3, #0
 800959a:	d01b      	beq.n	80095d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f06f 0210 	mvn.w	r2, #16
 80095a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2208      	movs	r2, #8
 80095aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	69db      	ldr	r3, [r3, #28]
 80095b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d003      	beq.n	80095c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f7f7 fb62 	bl	8000c84 <HAL_TIM_IC_CaptureCallback>
 80095c0:	e005      	b.n	80095ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 fa80 	bl	8009ac8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 fa87 	bl	8009adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2200      	movs	r2, #0
 80095d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	f003 0301 	and.w	r3, r3, #1
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d00c      	beq.n	80095f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f003 0301 	and.w	r3, r3, #1
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d007      	beq.n	80095f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f06f 0201 	mvn.w	r2, #1
 80095f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 fa5e 	bl	8009ab4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d104      	bne.n	800960c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009608:	2b00      	cmp	r3, #0
 800960a:	d00c      	beq.n	8009626 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009612:	2b00      	cmp	r3, #0
 8009614:	d007      	beq.n	8009626 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800961e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 ff47 	bl	800a4b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800962c:	2b00      	cmp	r3, #0
 800962e:	d00c      	beq.n	800964a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009636:	2b00      	cmp	r3, #0
 8009638:	d007      	beq.n	800964a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 ff3f 	bl	800a4c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009650:	2b00      	cmp	r3, #0
 8009652:	d00c      	beq.n	800966e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800965a:	2b00      	cmp	r3, #0
 800965c:	d007      	beq.n	800966e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f000 fa41 	bl	8009af0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	f003 0320 	and.w	r3, r3, #32
 8009674:	2b00      	cmp	r3, #0
 8009676:	d00c      	beq.n	8009692 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f003 0320 	and.w	r3, r3, #32
 800967e:	2b00      	cmp	r3, #0
 8009680:	d007      	beq.n	8009692 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f06f 0220 	mvn.w	r2, #32
 800968a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f000 ff07 	bl	800a4a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009692:	bf00      	nop
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
	...

0800969c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b086      	sub	sp, #24
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80096a8:	2300      	movs	r3, #0
 80096aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d101      	bne.n	80096ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80096b6:	2302      	movs	r3, #2
 80096b8:	e0ff      	b.n	80098ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2201      	movs	r2, #1
 80096be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2b14      	cmp	r3, #20
 80096c6:	f200 80f0 	bhi.w	80098aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80096ca:	a201      	add	r2, pc, #4	@ (adr r2, 80096d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80096cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096d0:	08009725 	.word	0x08009725
 80096d4:	080098ab 	.word	0x080098ab
 80096d8:	080098ab 	.word	0x080098ab
 80096dc:	080098ab 	.word	0x080098ab
 80096e0:	08009765 	.word	0x08009765
 80096e4:	080098ab 	.word	0x080098ab
 80096e8:	080098ab 	.word	0x080098ab
 80096ec:	080098ab 	.word	0x080098ab
 80096f0:	080097a7 	.word	0x080097a7
 80096f4:	080098ab 	.word	0x080098ab
 80096f8:	080098ab 	.word	0x080098ab
 80096fc:	080098ab 	.word	0x080098ab
 8009700:	080097e7 	.word	0x080097e7
 8009704:	080098ab 	.word	0x080098ab
 8009708:	080098ab 	.word	0x080098ab
 800970c:	080098ab 	.word	0x080098ab
 8009710:	08009829 	.word	0x08009829
 8009714:	080098ab 	.word	0x080098ab
 8009718:	080098ab 	.word	0x080098ab
 800971c:	080098ab 	.word	0x080098ab
 8009720:	08009869 	.word	0x08009869
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	68b9      	ldr	r1, [r7, #8]
 800972a:	4618      	mov	r0, r3
 800972c:	f000 fa90 	bl	8009c50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	699a      	ldr	r2, [r3, #24]
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f042 0208 	orr.w	r2, r2, #8
 800973e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	699a      	ldr	r2, [r3, #24]
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f022 0204 	bic.w	r2, r2, #4
 800974e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	6999      	ldr	r1, [r3, #24]
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	691a      	ldr	r2, [r3, #16]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	430a      	orrs	r2, r1
 8009760:	619a      	str	r2, [r3, #24]
      break;
 8009762:	e0a5      	b.n	80098b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	68b9      	ldr	r1, [r7, #8]
 800976a:	4618      	mov	r0, r3
 800976c:	f000 fb00 	bl	8009d70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	699a      	ldr	r2, [r3, #24]
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800977e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	699a      	ldr	r2, [r3, #24]
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800978e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	6999      	ldr	r1, [r3, #24]
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	021a      	lsls	r2, r3, #8
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	430a      	orrs	r2, r1
 80097a2:	619a      	str	r2, [r3, #24]
      break;
 80097a4:	e084      	b.n	80098b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	68b9      	ldr	r1, [r7, #8]
 80097ac:	4618      	mov	r0, r3
 80097ae:	f000 fb69 	bl	8009e84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	69da      	ldr	r2, [r3, #28]
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f042 0208 	orr.w	r2, r2, #8
 80097c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	69da      	ldr	r2, [r3, #28]
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f022 0204 	bic.w	r2, r2, #4
 80097d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	69d9      	ldr	r1, [r3, #28]
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	691a      	ldr	r2, [r3, #16]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	430a      	orrs	r2, r1
 80097e2:	61da      	str	r2, [r3, #28]
      break;
 80097e4:	e064      	b.n	80098b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	68b9      	ldr	r1, [r7, #8]
 80097ec:	4618      	mov	r0, r3
 80097ee:	f000 fbd1 	bl	8009f94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	69da      	ldr	r2, [r3, #28]
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009800:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	69da      	ldr	r2, [r3, #28]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009810:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	69d9      	ldr	r1, [r3, #28]
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	691b      	ldr	r3, [r3, #16]
 800981c:	021a      	lsls	r2, r3, #8
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	430a      	orrs	r2, r1
 8009824:	61da      	str	r2, [r3, #28]
      break;
 8009826:	e043      	b.n	80098b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	68b9      	ldr	r1, [r7, #8]
 800982e:	4618      	mov	r0, r3
 8009830:	f000 fc1a 	bl	800a068 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f042 0208 	orr.w	r2, r2, #8
 8009842:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f022 0204 	bic.w	r2, r2, #4
 8009852:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	691a      	ldr	r2, [r3, #16]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	430a      	orrs	r2, r1
 8009864:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009866:	e023      	b.n	80098b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	68b9      	ldr	r1, [r7, #8]
 800986e:	4618      	mov	r0, r3
 8009870:	f000 fc5e 	bl	800a130 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009882:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009892:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	691b      	ldr	r3, [r3, #16]
 800989e:	021a      	lsls	r2, r3, #8
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	430a      	orrs	r2, r1
 80098a6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80098a8:	e002      	b.n	80098b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80098aa:	2301      	movs	r3, #1
 80098ac:	75fb      	strb	r3, [r7, #23]
      break;
 80098ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2200      	movs	r2, #0
 80098b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80098b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3718      	adds	r7, #24
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop

080098c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80098ce:	2300      	movs	r3, #0
 80098d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d101      	bne.n	80098e0 <HAL_TIM_ConfigClockSource+0x1c>
 80098dc:	2302      	movs	r3, #2
 80098de:	e0dc      	b.n	8009a9a <HAL_TIM_ConfigClockSource+0x1d6>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2201      	movs	r2, #1
 80098e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2202      	movs	r2, #2
 80098ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	689b      	ldr	r3, [r3, #8]
 80098f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80098f8:	68ba      	ldr	r2, [r7, #8]
 80098fa:	4b6a      	ldr	r3, [pc, #424]	@ (8009aa4 <HAL_TIM_ConfigClockSource+0x1e0>)
 80098fc:	4013      	ands	r3, r2
 80098fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009906:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	68ba      	ldr	r2, [r7, #8]
 800990e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a64      	ldr	r2, [pc, #400]	@ (8009aa8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009916:	4293      	cmp	r3, r2
 8009918:	f000 80a9 	beq.w	8009a6e <HAL_TIM_ConfigClockSource+0x1aa>
 800991c:	4a62      	ldr	r2, [pc, #392]	@ (8009aa8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800991e:	4293      	cmp	r3, r2
 8009920:	f200 80ae 	bhi.w	8009a80 <HAL_TIM_ConfigClockSource+0x1bc>
 8009924:	4a61      	ldr	r2, [pc, #388]	@ (8009aac <HAL_TIM_ConfigClockSource+0x1e8>)
 8009926:	4293      	cmp	r3, r2
 8009928:	f000 80a1 	beq.w	8009a6e <HAL_TIM_ConfigClockSource+0x1aa>
 800992c:	4a5f      	ldr	r2, [pc, #380]	@ (8009aac <HAL_TIM_ConfigClockSource+0x1e8>)
 800992e:	4293      	cmp	r3, r2
 8009930:	f200 80a6 	bhi.w	8009a80 <HAL_TIM_ConfigClockSource+0x1bc>
 8009934:	4a5e      	ldr	r2, [pc, #376]	@ (8009ab0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009936:	4293      	cmp	r3, r2
 8009938:	f000 8099 	beq.w	8009a6e <HAL_TIM_ConfigClockSource+0x1aa>
 800993c:	4a5c      	ldr	r2, [pc, #368]	@ (8009ab0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800993e:	4293      	cmp	r3, r2
 8009940:	f200 809e 	bhi.w	8009a80 <HAL_TIM_ConfigClockSource+0x1bc>
 8009944:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009948:	f000 8091 	beq.w	8009a6e <HAL_TIM_ConfigClockSource+0x1aa>
 800994c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009950:	f200 8096 	bhi.w	8009a80 <HAL_TIM_ConfigClockSource+0x1bc>
 8009954:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009958:	f000 8089 	beq.w	8009a6e <HAL_TIM_ConfigClockSource+0x1aa>
 800995c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009960:	f200 808e 	bhi.w	8009a80 <HAL_TIM_ConfigClockSource+0x1bc>
 8009964:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009968:	d03e      	beq.n	80099e8 <HAL_TIM_ConfigClockSource+0x124>
 800996a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800996e:	f200 8087 	bhi.w	8009a80 <HAL_TIM_ConfigClockSource+0x1bc>
 8009972:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009976:	f000 8086 	beq.w	8009a86 <HAL_TIM_ConfigClockSource+0x1c2>
 800997a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800997e:	d87f      	bhi.n	8009a80 <HAL_TIM_ConfigClockSource+0x1bc>
 8009980:	2b70      	cmp	r3, #112	@ 0x70
 8009982:	d01a      	beq.n	80099ba <HAL_TIM_ConfigClockSource+0xf6>
 8009984:	2b70      	cmp	r3, #112	@ 0x70
 8009986:	d87b      	bhi.n	8009a80 <HAL_TIM_ConfigClockSource+0x1bc>
 8009988:	2b60      	cmp	r3, #96	@ 0x60
 800998a:	d050      	beq.n	8009a2e <HAL_TIM_ConfigClockSource+0x16a>
 800998c:	2b60      	cmp	r3, #96	@ 0x60
 800998e:	d877      	bhi.n	8009a80 <HAL_TIM_ConfigClockSource+0x1bc>
 8009990:	2b50      	cmp	r3, #80	@ 0x50
 8009992:	d03c      	beq.n	8009a0e <HAL_TIM_ConfigClockSource+0x14a>
 8009994:	2b50      	cmp	r3, #80	@ 0x50
 8009996:	d873      	bhi.n	8009a80 <HAL_TIM_ConfigClockSource+0x1bc>
 8009998:	2b40      	cmp	r3, #64	@ 0x40
 800999a:	d058      	beq.n	8009a4e <HAL_TIM_ConfigClockSource+0x18a>
 800999c:	2b40      	cmp	r3, #64	@ 0x40
 800999e:	d86f      	bhi.n	8009a80 <HAL_TIM_ConfigClockSource+0x1bc>
 80099a0:	2b30      	cmp	r3, #48	@ 0x30
 80099a2:	d064      	beq.n	8009a6e <HAL_TIM_ConfigClockSource+0x1aa>
 80099a4:	2b30      	cmp	r3, #48	@ 0x30
 80099a6:	d86b      	bhi.n	8009a80 <HAL_TIM_ConfigClockSource+0x1bc>
 80099a8:	2b20      	cmp	r3, #32
 80099aa:	d060      	beq.n	8009a6e <HAL_TIM_ConfigClockSource+0x1aa>
 80099ac:	2b20      	cmp	r3, #32
 80099ae:	d867      	bhi.n	8009a80 <HAL_TIM_ConfigClockSource+0x1bc>
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d05c      	beq.n	8009a6e <HAL_TIM_ConfigClockSource+0x1aa>
 80099b4:	2b10      	cmp	r3, #16
 80099b6:	d05a      	beq.n	8009a6e <HAL_TIM_ConfigClockSource+0x1aa>
 80099b8:	e062      	b.n	8009a80 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80099ca:	f000 fc95 	bl	800a2f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80099dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	68ba      	ldr	r2, [r7, #8]
 80099e4:	609a      	str	r2, [r3, #8]
      break;
 80099e6:	e04f      	b.n	8009a88 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80099f8:	f000 fc7e 	bl	800a2f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	689a      	ldr	r2, [r3, #8]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009a0a:	609a      	str	r2, [r3, #8]
      break;
 8009a0c:	e03c      	b.n	8009a88 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	f000 fbee 	bl	800a1fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	2150      	movs	r1, #80	@ 0x50
 8009a26:	4618      	mov	r0, r3
 8009a28:	f000 fc48 	bl	800a2bc <TIM_ITRx_SetConfig>
      break;
 8009a2c:	e02c      	b.n	8009a88 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	f000 fc0d 	bl	800a25a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	2160      	movs	r1, #96	@ 0x60
 8009a46:	4618      	mov	r0, r3
 8009a48:	f000 fc38 	bl	800a2bc <TIM_ITRx_SetConfig>
      break;
 8009a4c:	e01c      	b.n	8009a88 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	f000 fbce 	bl	800a1fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2140      	movs	r1, #64	@ 0x40
 8009a66:	4618      	mov	r0, r3
 8009a68:	f000 fc28 	bl	800a2bc <TIM_ITRx_SetConfig>
      break;
 8009a6c:	e00c      	b.n	8009a88 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4619      	mov	r1, r3
 8009a78:	4610      	mov	r0, r2
 8009a7a:	f000 fc1f 	bl	800a2bc <TIM_ITRx_SetConfig>
      break;
 8009a7e:	e003      	b.n	8009a88 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009a80:	2301      	movs	r3, #1
 8009a82:	73fb      	strb	r3, [r7, #15]
      break;
 8009a84:	e000      	b.n	8009a88 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009a86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2200      	movs	r2, #0
 8009a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3710      	adds	r7, #16
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	ffceff88 	.word	0xffceff88
 8009aa8:	00100040 	.word	0x00100040
 8009aac:	00100030 	.word	0x00100030
 8009ab0:	00100020 	.word	0x00100020

08009ab4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b083      	sub	sp, #12
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009abc:	bf00      	nop
 8009abe:	370c      	adds	r7, #12
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr

08009ac8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b083      	sub	sp, #12
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009ad0:	bf00      	nop
 8009ad2:	370c      	adds	r7, #12
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr

08009adc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b083      	sub	sp, #12
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009ae4:	bf00      	nop
 8009ae6:	370c      	adds	r7, #12
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr

08009af0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b083      	sub	sp, #12
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009af8:	bf00      	nop
 8009afa:	370c      	adds	r7, #12
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr

08009b04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b085      	sub	sp, #20
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	4a46      	ldr	r2, [pc, #280]	@ (8009c30 <TIM_Base_SetConfig+0x12c>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d013      	beq.n	8009b44 <TIM_Base_SetConfig+0x40>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b22:	d00f      	beq.n	8009b44 <TIM_Base_SetConfig+0x40>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	4a43      	ldr	r2, [pc, #268]	@ (8009c34 <TIM_Base_SetConfig+0x130>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d00b      	beq.n	8009b44 <TIM_Base_SetConfig+0x40>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	4a42      	ldr	r2, [pc, #264]	@ (8009c38 <TIM_Base_SetConfig+0x134>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d007      	beq.n	8009b44 <TIM_Base_SetConfig+0x40>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	4a41      	ldr	r2, [pc, #260]	@ (8009c3c <TIM_Base_SetConfig+0x138>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d003      	beq.n	8009b44 <TIM_Base_SetConfig+0x40>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	4a40      	ldr	r2, [pc, #256]	@ (8009c40 <TIM_Base_SetConfig+0x13c>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d108      	bne.n	8009b56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	68fa      	ldr	r2, [r7, #12]
 8009b52:	4313      	orrs	r3, r2
 8009b54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	4a35      	ldr	r2, [pc, #212]	@ (8009c30 <TIM_Base_SetConfig+0x12c>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d01f      	beq.n	8009b9e <TIM_Base_SetConfig+0x9a>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b64:	d01b      	beq.n	8009b9e <TIM_Base_SetConfig+0x9a>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	4a32      	ldr	r2, [pc, #200]	@ (8009c34 <TIM_Base_SetConfig+0x130>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d017      	beq.n	8009b9e <TIM_Base_SetConfig+0x9a>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	4a31      	ldr	r2, [pc, #196]	@ (8009c38 <TIM_Base_SetConfig+0x134>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d013      	beq.n	8009b9e <TIM_Base_SetConfig+0x9a>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	4a30      	ldr	r2, [pc, #192]	@ (8009c3c <TIM_Base_SetConfig+0x138>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d00f      	beq.n	8009b9e <TIM_Base_SetConfig+0x9a>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	4a2f      	ldr	r2, [pc, #188]	@ (8009c40 <TIM_Base_SetConfig+0x13c>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d00b      	beq.n	8009b9e <TIM_Base_SetConfig+0x9a>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	4a2e      	ldr	r2, [pc, #184]	@ (8009c44 <TIM_Base_SetConfig+0x140>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d007      	beq.n	8009b9e <TIM_Base_SetConfig+0x9a>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	4a2d      	ldr	r2, [pc, #180]	@ (8009c48 <TIM_Base_SetConfig+0x144>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d003      	beq.n	8009b9e <TIM_Base_SetConfig+0x9a>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	4a2c      	ldr	r2, [pc, #176]	@ (8009c4c <TIM_Base_SetConfig+0x148>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d108      	bne.n	8009bb0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009ba4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	68db      	ldr	r3, [r3, #12]
 8009baa:	68fa      	ldr	r2, [r7, #12]
 8009bac:	4313      	orrs	r3, r2
 8009bae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	695b      	ldr	r3, [r3, #20]
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	68fa      	ldr	r2, [r7, #12]
 8009bc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	689a      	ldr	r2, [r3, #8]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	681a      	ldr	r2, [r3, #0]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	4a16      	ldr	r2, [pc, #88]	@ (8009c30 <TIM_Base_SetConfig+0x12c>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d00f      	beq.n	8009bfc <TIM_Base_SetConfig+0xf8>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	4a18      	ldr	r2, [pc, #96]	@ (8009c40 <TIM_Base_SetConfig+0x13c>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d00b      	beq.n	8009bfc <TIM_Base_SetConfig+0xf8>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	4a17      	ldr	r2, [pc, #92]	@ (8009c44 <TIM_Base_SetConfig+0x140>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d007      	beq.n	8009bfc <TIM_Base_SetConfig+0xf8>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	4a16      	ldr	r2, [pc, #88]	@ (8009c48 <TIM_Base_SetConfig+0x144>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d003      	beq.n	8009bfc <TIM_Base_SetConfig+0xf8>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	4a15      	ldr	r2, [pc, #84]	@ (8009c4c <TIM_Base_SetConfig+0x148>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d103      	bne.n	8009c04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	691a      	ldr	r2, [r3, #16]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2201      	movs	r2, #1
 8009c08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	691b      	ldr	r3, [r3, #16]
 8009c0e:	f003 0301 	and.w	r3, r3, #1
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	d105      	bne.n	8009c22 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	691b      	ldr	r3, [r3, #16]
 8009c1a:	f023 0201 	bic.w	r2, r3, #1
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	611a      	str	r2, [r3, #16]
  }
}
 8009c22:	bf00      	nop
 8009c24:	3714      	adds	r7, #20
 8009c26:	46bd      	mov	sp, r7
 8009c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2c:	4770      	bx	lr
 8009c2e:	bf00      	nop
 8009c30:	40010000 	.word	0x40010000
 8009c34:	40000400 	.word	0x40000400
 8009c38:	40000800 	.word	0x40000800
 8009c3c:	40000c00 	.word	0x40000c00
 8009c40:	40010400 	.word	0x40010400
 8009c44:	40014000 	.word	0x40014000
 8009c48:	40014400 	.word	0x40014400
 8009c4c:	40014800 	.word	0x40014800

08009c50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b087      	sub	sp, #28
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6a1b      	ldr	r3, [r3, #32]
 8009c5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6a1b      	ldr	r3, [r3, #32]
 8009c64:	f023 0201 	bic.w	r2, r3, #1
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	699b      	ldr	r3, [r3, #24]
 8009c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009c78:	68fa      	ldr	r2, [r7, #12]
 8009c7a:	4b37      	ldr	r3, [pc, #220]	@ (8009d58 <TIM_OC1_SetConfig+0x108>)
 8009c7c:	4013      	ands	r3, r2
 8009c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f023 0303 	bic.w	r3, r3, #3
 8009c86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	68fa      	ldr	r2, [r7, #12]
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	f023 0302 	bic.w	r3, r3, #2
 8009c98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	689b      	ldr	r3, [r3, #8]
 8009c9e:	697a      	ldr	r2, [r7, #20]
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	4a2d      	ldr	r2, [pc, #180]	@ (8009d5c <TIM_OC1_SetConfig+0x10c>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d00f      	beq.n	8009ccc <TIM_OC1_SetConfig+0x7c>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	4a2c      	ldr	r2, [pc, #176]	@ (8009d60 <TIM_OC1_SetConfig+0x110>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d00b      	beq.n	8009ccc <TIM_OC1_SetConfig+0x7c>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	4a2b      	ldr	r2, [pc, #172]	@ (8009d64 <TIM_OC1_SetConfig+0x114>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d007      	beq.n	8009ccc <TIM_OC1_SetConfig+0x7c>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	4a2a      	ldr	r2, [pc, #168]	@ (8009d68 <TIM_OC1_SetConfig+0x118>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d003      	beq.n	8009ccc <TIM_OC1_SetConfig+0x7c>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	4a29      	ldr	r2, [pc, #164]	@ (8009d6c <TIM_OC1_SetConfig+0x11c>)
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d10c      	bne.n	8009ce6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	f023 0308 	bic.w	r3, r3, #8
 8009cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	68db      	ldr	r3, [r3, #12]
 8009cd8:	697a      	ldr	r2, [r7, #20]
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	f023 0304 	bic.w	r3, r3, #4
 8009ce4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	4a1c      	ldr	r2, [pc, #112]	@ (8009d5c <TIM_OC1_SetConfig+0x10c>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d00f      	beq.n	8009d0e <TIM_OC1_SetConfig+0xbe>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	4a1b      	ldr	r2, [pc, #108]	@ (8009d60 <TIM_OC1_SetConfig+0x110>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d00b      	beq.n	8009d0e <TIM_OC1_SetConfig+0xbe>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	4a1a      	ldr	r2, [pc, #104]	@ (8009d64 <TIM_OC1_SetConfig+0x114>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d007      	beq.n	8009d0e <TIM_OC1_SetConfig+0xbe>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	4a19      	ldr	r2, [pc, #100]	@ (8009d68 <TIM_OC1_SetConfig+0x118>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d003      	beq.n	8009d0e <TIM_OC1_SetConfig+0xbe>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	4a18      	ldr	r2, [pc, #96]	@ (8009d6c <TIM_OC1_SetConfig+0x11c>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d111      	bne.n	8009d32 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	695b      	ldr	r3, [r3, #20]
 8009d22:	693a      	ldr	r2, [r7, #16]
 8009d24:	4313      	orrs	r3, r2
 8009d26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	699b      	ldr	r3, [r3, #24]
 8009d2c:	693a      	ldr	r2, [r7, #16]
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	693a      	ldr	r2, [r7, #16]
 8009d36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	68fa      	ldr	r2, [r7, #12]
 8009d3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	685a      	ldr	r2, [r3, #4]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	697a      	ldr	r2, [r7, #20]
 8009d4a:	621a      	str	r2, [r3, #32]
}
 8009d4c:	bf00      	nop
 8009d4e:	371c      	adds	r7, #28
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr
 8009d58:	fffeff8f 	.word	0xfffeff8f
 8009d5c:	40010000 	.word	0x40010000
 8009d60:	40010400 	.word	0x40010400
 8009d64:	40014000 	.word	0x40014000
 8009d68:	40014400 	.word	0x40014400
 8009d6c:	40014800 	.word	0x40014800

08009d70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b087      	sub	sp, #28
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6a1b      	ldr	r3, [r3, #32]
 8009d7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6a1b      	ldr	r3, [r3, #32]
 8009d84:	f023 0210 	bic.w	r2, r3, #16
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	699b      	ldr	r3, [r3, #24]
 8009d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	4b34      	ldr	r3, [pc, #208]	@ (8009e6c <TIM_OC2_SetConfig+0xfc>)
 8009d9c:	4013      	ands	r3, r2
 8009d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009da6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	021b      	lsls	r3, r3, #8
 8009dae:	68fa      	ldr	r2, [r7, #12]
 8009db0:	4313      	orrs	r3, r2
 8009db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	f023 0320 	bic.w	r3, r3, #32
 8009dba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	689b      	ldr	r3, [r3, #8]
 8009dc0:	011b      	lsls	r3, r3, #4
 8009dc2:	697a      	ldr	r2, [r7, #20]
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	4a29      	ldr	r2, [pc, #164]	@ (8009e70 <TIM_OC2_SetConfig+0x100>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d003      	beq.n	8009dd8 <TIM_OC2_SetConfig+0x68>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	4a28      	ldr	r2, [pc, #160]	@ (8009e74 <TIM_OC2_SetConfig+0x104>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d10d      	bne.n	8009df4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009dde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	68db      	ldr	r3, [r3, #12]
 8009de4:	011b      	lsls	r3, r3, #4
 8009de6:	697a      	ldr	r2, [r7, #20]
 8009de8:	4313      	orrs	r3, r2
 8009dea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009df2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	4a1e      	ldr	r2, [pc, #120]	@ (8009e70 <TIM_OC2_SetConfig+0x100>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d00f      	beq.n	8009e1c <TIM_OC2_SetConfig+0xac>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	4a1d      	ldr	r2, [pc, #116]	@ (8009e74 <TIM_OC2_SetConfig+0x104>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d00b      	beq.n	8009e1c <TIM_OC2_SetConfig+0xac>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	4a1c      	ldr	r2, [pc, #112]	@ (8009e78 <TIM_OC2_SetConfig+0x108>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d007      	beq.n	8009e1c <TIM_OC2_SetConfig+0xac>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	4a1b      	ldr	r2, [pc, #108]	@ (8009e7c <TIM_OC2_SetConfig+0x10c>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d003      	beq.n	8009e1c <TIM_OC2_SetConfig+0xac>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	4a1a      	ldr	r2, [pc, #104]	@ (8009e80 <TIM_OC2_SetConfig+0x110>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d113      	bne.n	8009e44 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009e22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	695b      	ldr	r3, [r3, #20]
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	693a      	ldr	r2, [r7, #16]
 8009e34:	4313      	orrs	r3, r2
 8009e36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	699b      	ldr	r3, [r3, #24]
 8009e3c:	009b      	lsls	r3, r3, #2
 8009e3e:	693a      	ldr	r2, [r7, #16]
 8009e40:	4313      	orrs	r3, r2
 8009e42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	693a      	ldr	r2, [r7, #16]
 8009e48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	68fa      	ldr	r2, [r7, #12]
 8009e4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	685a      	ldr	r2, [r3, #4]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	697a      	ldr	r2, [r7, #20]
 8009e5c:	621a      	str	r2, [r3, #32]
}
 8009e5e:	bf00      	nop
 8009e60:	371c      	adds	r7, #28
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr
 8009e6a:	bf00      	nop
 8009e6c:	feff8fff 	.word	0xfeff8fff
 8009e70:	40010000 	.word	0x40010000
 8009e74:	40010400 	.word	0x40010400
 8009e78:	40014000 	.word	0x40014000
 8009e7c:	40014400 	.word	0x40014400
 8009e80:	40014800 	.word	0x40014800

08009e84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b087      	sub	sp, #28
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6a1b      	ldr	r3, [r3, #32]
 8009e92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6a1b      	ldr	r3, [r3, #32]
 8009e98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	69db      	ldr	r3, [r3, #28]
 8009eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009eac:	68fa      	ldr	r2, [r7, #12]
 8009eae:	4b33      	ldr	r3, [pc, #204]	@ (8009f7c <TIM_OC3_SetConfig+0xf8>)
 8009eb0:	4013      	ands	r3, r2
 8009eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f023 0303 	bic.w	r3, r3, #3
 8009eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	68fa      	ldr	r2, [r7, #12]
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009ecc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	689b      	ldr	r3, [r3, #8]
 8009ed2:	021b      	lsls	r3, r3, #8
 8009ed4:	697a      	ldr	r2, [r7, #20]
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	4a28      	ldr	r2, [pc, #160]	@ (8009f80 <TIM_OC3_SetConfig+0xfc>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d003      	beq.n	8009eea <TIM_OC3_SetConfig+0x66>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	4a27      	ldr	r2, [pc, #156]	@ (8009f84 <TIM_OC3_SetConfig+0x100>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d10d      	bne.n	8009f06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009ef0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	68db      	ldr	r3, [r3, #12]
 8009ef6:	021b      	lsls	r3, r3, #8
 8009ef8:	697a      	ldr	r2, [r7, #20]
 8009efa:	4313      	orrs	r3, r2
 8009efc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009f04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	4a1d      	ldr	r2, [pc, #116]	@ (8009f80 <TIM_OC3_SetConfig+0xfc>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d00f      	beq.n	8009f2e <TIM_OC3_SetConfig+0xaa>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	4a1c      	ldr	r2, [pc, #112]	@ (8009f84 <TIM_OC3_SetConfig+0x100>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d00b      	beq.n	8009f2e <TIM_OC3_SetConfig+0xaa>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	4a1b      	ldr	r2, [pc, #108]	@ (8009f88 <TIM_OC3_SetConfig+0x104>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d007      	beq.n	8009f2e <TIM_OC3_SetConfig+0xaa>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	4a1a      	ldr	r2, [pc, #104]	@ (8009f8c <TIM_OC3_SetConfig+0x108>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d003      	beq.n	8009f2e <TIM_OC3_SetConfig+0xaa>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	4a19      	ldr	r2, [pc, #100]	@ (8009f90 <TIM_OC3_SetConfig+0x10c>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d113      	bne.n	8009f56 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009f34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	695b      	ldr	r3, [r3, #20]
 8009f42:	011b      	lsls	r3, r3, #4
 8009f44:	693a      	ldr	r2, [r7, #16]
 8009f46:	4313      	orrs	r3, r2
 8009f48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	699b      	ldr	r3, [r3, #24]
 8009f4e:	011b      	lsls	r3, r3, #4
 8009f50:	693a      	ldr	r2, [r7, #16]
 8009f52:	4313      	orrs	r3, r2
 8009f54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	693a      	ldr	r2, [r7, #16]
 8009f5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	68fa      	ldr	r2, [r7, #12]
 8009f60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	685a      	ldr	r2, [r3, #4]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	697a      	ldr	r2, [r7, #20]
 8009f6e:	621a      	str	r2, [r3, #32]
}
 8009f70:	bf00      	nop
 8009f72:	371c      	adds	r7, #28
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr
 8009f7c:	fffeff8f 	.word	0xfffeff8f
 8009f80:	40010000 	.word	0x40010000
 8009f84:	40010400 	.word	0x40010400
 8009f88:	40014000 	.word	0x40014000
 8009f8c:	40014400 	.word	0x40014400
 8009f90:	40014800 	.word	0x40014800

08009f94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b087      	sub	sp, #28
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6a1b      	ldr	r3, [r3, #32]
 8009fa2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6a1b      	ldr	r3, [r3, #32]
 8009fa8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	69db      	ldr	r3, [r3, #28]
 8009fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009fbc:	68fa      	ldr	r2, [r7, #12]
 8009fbe:	4b24      	ldr	r3, [pc, #144]	@ (800a050 <TIM_OC4_SetConfig+0xbc>)
 8009fc0:	4013      	ands	r3, r2
 8009fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009fca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	021b      	lsls	r3, r3, #8
 8009fd2:	68fa      	ldr	r2, [r7, #12]
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009fde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	689b      	ldr	r3, [r3, #8]
 8009fe4:	031b      	lsls	r3, r3, #12
 8009fe6:	693a      	ldr	r2, [r7, #16]
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	4a19      	ldr	r2, [pc, #100]	@ (800a054 <TIM_OC4_SetConfig+0xc0>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d00f      	beq.n	800a014 <TIM_OC4_SetConfig+0x80>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	4a18      	ldr	r2, [pc, #96]	@ (800a058 <TIM_OC4_SetConfig+0xc4>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d00b      	beq.n	800a014 <TIM_OC4_SetConfig+0x80>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	4a17      	ldr	r2, [pc, #92]	@ (800a05c <TIM_OC4_SetConfig+0xc8>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d007      	beq.n	800a014 <TIM_OC4_SetConfig+0x80>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	4a16      	ldr	r2, [pc, #88]	@ (800a060 <TIM_OC4_SetConfig+0xcc>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	d003      	beq.n	800a014 <TIM_OC4_SetConfig+0x80>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	4a15      	ldr	r2, [pc, #84]	@ (800a064 <TIM_OC4_SetConfig+0xd0>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d109      	bne.n	800a028 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a01a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	695b      	ldr	r3, [r3, #20]
 800a020:	019b      	lsls	r3, r3, #6
 800a022:	697a      	ldr	r2, [r7, #20]
 800a024:	4313      	orrs	r3, r2
 800a026:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	697a      	ldr	r2, [r7, #20]
 800a02c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	68fa      	ldr	r2, [r7, #12]
 800a032:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	685a      	ldr	r2, [r3, #4]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	693a      	ldr	r2, [r7, #16]
 800a040:	621a      	str	r2, [r3, #32]
}
 800a042:	bf00      	nop
 800a044:	371c      	adds	r7, #28
 800a046:	46bd      	mov	sp, r7
 800a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04c:	4770      	bx	lr
 800a04e:	bf00      	nop
 800a050:	feff8fff 	.word	0xfeff8fff
 800a054:	40010000 	.word	0x40010000
 800a058:	40010400 	.word	0x40010400
 800a05c:	40014000 	.word	0x40014000
 800a060:	40014400 	.word	0x40014400
 800a064:	40014800 	.word	0x40014800

0800a068 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a068:	b480      	push	{r7}
 800a06a:	b087      	sub	sp, #28
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6a1b      	ldr	r3, [r3, #32]
 800a076:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6a1b      	ldr	r3, [r3, #32]
 800a07c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a08e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a090:	68fa      	ldr	r2, [r7, #12]
 800a092:	4b21      	ldr	r3, [pc, #132]	@ (800a118 <TIM_OC5_SetConfig+0xb0>)
 800a094:	4013      	ands	r3, r2
 800a096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	68fa      	ldr	r2, [r7, #12]
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a0a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	041b      	lsls	r3, r3, #16
 800a0b0:	693a      	ldr	r2, [r7, #16]
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	4a18      	ldr	r2, [pc, #96]	@ (800a11c <TIM_OC5_SetConfig+0xb4>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d00f      	beq.n	800a0de <TIM_OC5_SetConfig+0x76>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	4a17      	ldr	r2, [pc, #92]	@ (800a120 <TIM_OC5_SetConfig+0xb8>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d00b      	beq.n	800a0de <TIM_OC5_SetConfig+0x76>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	4a16      	ldr	r2, [pc, #88]	@ (800a124 <TIM_OC5_SetConfig+0xbc>)
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d007      	beq.n	800a0de <TIM_OC5_SetConfig+0x76>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	4a15      	ldr	r2, [pc, #84]	@ (800a128 <TIM_OC5_SetConfig+0xc0>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d003      	beq.n	800a0de <TIM_OC5_SetConfig+0x76>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	4a14      	ldr	r2, [pc, #80]	@ (800a12c <TIM_OC5_SetConfig+0xc4>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d109      	bne.n	800a0f2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a0e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	695b      	ldr	r3, [r3, #20]
 800a0ea:	021b      	lsls	r3, r3, #8
 800a0ec:	697a      	ldr	r2, [r7, #20]
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	697a      	ldr	r2, [r7, #20]
 800a0f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	68fa      	ldr	r2, [r7, #12]
 800a0fc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	685a      	ldr	r2, [r3, #4]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	693a      	ldr	r2, [r7, #16]
 800a10a:	621a      	str	r2, [r3, #32]
}
 800a10c:	bf00      	nop
 800a10e:	371c      	adds	r7, #28
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr
 800a118:	fffeff8f 	.word	0xfffeff8f
 800a11c:	40010000 	.word	0x40010000
 800a120:	40010400 	.word	0x40010400
 800a124:	40014000 	.word	0x40014000
 800a128:	40014400 	.word	0x40014400
 800a12c:	40014800 	.word	0x40014800

0800a130 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a130:	b480      	push	{r7}
 800a132:	b087      	sub	sp, #28
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6a1b      	ldr	r3, [r3, #32]
 800a13e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6a1b      	ldr	r3, [r3, #32]
 800a144:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a158:	68fa      	ldr	r2, [r7, #12]
 800a15a:	4b22      	ldr	r3, [pc, #136]	@ (800a1e4 <TIM_OC6_SetConfig+0xb4>)
 800a15c:	4013      	ands	r3, r2
 800a15e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	021b      	lsls	r3, r3, #8
 800a166:	68fa      	ldr	r2, [r7, #12]
 800a168:	4313      	orrs	r3, r2
 800a16a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a172:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	051b      	lsls	r3, r3, #20
 800a17a:	693a      	ldr	r2, [r7, #16]
 800a17c:	4313      	orrs	r3, r2
 800a17e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	4a19      	ldr	r2, [pc, #100]	@ (800a1e8 <TIM_OC6_SetConfig+0xb8>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d00f      	beq.n	800a1a8 <TIM_OC6_SetConfig+0x78>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	4a18      	ldr	r2, [pc, #96]	@ (800a1ec <TIM_OC6_SetConfig+0xbc>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d00b      	beq.n	800a1a8 <TIM_OC6_SetConfig+0x78>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	4a17      	ldr	r2, [pc, #92]	@ (800a1f0 <TIM_OC6_SetConfig+0xc0>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d007      	beq.n	800a1a8 <TIM_OC6_SetConfig+0x78>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	4a16      	ldr	r2, [pc, #88]	@ (800a1f4 <TIM_OC6_SetConfig+0xc4>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d003      	beq.n	800a1a8 <TIM_OC6_SetConfig+0x78>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	4a15      	ldr	r2, [pc, #84]	@ (800a1f8 <TIM_OC6_SetConfig+0xc8>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d109      	bne.n	800a1bc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a1ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	695b      	ldr	r3, [r3, #20]
 800a1b4:	029b      	lsls	r3, r3, #10
 800a1b6:	697a      	ldr	r2, [r7, #20]
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	697a      	ldr	r2, [r7, #20]
 800a1c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	68fa      	ldr	r2, [r7, #12]
 800a1c6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	685a      	ldr	r2, [r3, #4]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	693a      	ldr	r2, [r7, #16]
 800a1d4:	621a      	str	r2, [r3, #32]
}
 800a1d6:	bf00      	nop
 800a1d8:	371c      	adds	r7, #28
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr
 800a1e2:	bf00      	nop
 800a1e4:	feff8fff 	.word	0xfeff8fff
 800a1e8:	40010000 	.word	0x40010000
 800a1ec:	40010400 	.word	0x40010400
 800a1f0:	40014000 	.word	0x40014000
 800a1f4:	40014400 	.word	0x40014400
 800a1f8:	40014800 	.word	0x40014800

0800a1fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b087      	sub	sp, #28
 800a200:	af00      	add	r7, sp, #0
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	60b9      	str	r1, [r7, #8]
 800a206:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	6a1b      	ldr	r3, [r3, #32]
 800a20c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	6a1b      	ldr	r3, [r3, #32]
 800a212:	f023 0201 	bic.w	r2, r3, #1
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	699b      	ldr	r3, [r3, #24]
 800a21e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a226:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	011b      	lsls	r3, r3, #4
 800a22c:	693a      	ldr	r2, [r7, #16]
 800a22e:	4313      	orrs	r3, r2
 800a230:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	f023 030a 	bic.w	r3, r3, #10
 800a238:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a23a:	697a      	ldr	r2, [r7, #20]
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	4313      	orrs	r3, r2
 800a240:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	693a      	ldr	r2, [r7, #16]
 800a246:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	697a      	ldr	r2, [r7, #20]
 800a24c:	621a      	str	r2, [r3, #32]
}
 800a24e:	bf00      	nop
 800a250:	371c      	adds	r7, #28
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr

0800a25a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a25a:	b480      	push	{r7}
 800a25c:	b087      	sub	sp, #28
 800a25e:	af00      	add	r7, sp, #0
 800a260:	60f8      	str	r0, [r7, #12]
 800a262:	60b9      	str	r1, [r7, #8]
 800a264:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	6a1b      	ldr	r3, [r3, #32]
 800a26a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	6a1b      	ldr	r3, [r3, #32]
 800a270:	f023 0210 	bic.w	r2, r3, #16
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	699b      	ldr	r3, [r3, #24]
 800a27c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a284:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	031b      	lsls	r3, r3, #12
 800a28a:	693a      	ldr	r2, [r7, #16]
 800a28c:	4313      	orrs	r3, r2
 800a28e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a296:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	011b      	lsls	r3, r3, #4
 800a29c:	697a      	ldr	r2, [r7, #20]
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	693a      	ldr	r2, [r7, #16]
 800a2a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	697a      	ldr	r2, [r7, #20]
 800a2ac:	621a      	str	r2, [r3, #32]
}
 800a2ae:	bf00      	nop
 800a2b0:	371c      	adds	r7, #28
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr
	...

0800a2bc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b085      	sub	sp, #20
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	689b      	ldr	r3, [r3, #8]
 800a2ca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a2cc:	68fa      	ldr	r2, [r7, #12]
 800a2ce:	4b09      	ldr	r3, [pc, #36]	@ (800a2f4 <TIM_ITRx_SetConfig+0x38>)
 800a2d0:	4013      	ands	r3, r2
 800a2d2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a2d4:	683a      	ldr	r2, [r7, #0]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	f043 0307 	orr.w	r3, r3, #7
 800a2de:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	68fa      	ldr	r2, [r7, #12]
 800a2e4:	609a      	str	r2, [r3, #8]
}
 800a2e6:	bf00      	nop
 800a2e8:	3714      	adds	r7, #20
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr
 800a2f2:	bf00      	nop
 800a2f4:	ffcfff8f 	.word	0xffcfff8f

0800a2f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b087      	sub	sp, #28
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	60f8      	str	r0, [r7, #12]
 800a300:	60b9      	str	r1, [r7, #8]
 800a302:	607a      	str	r2, [r7, #4]
 800a304:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	689b      	ldr	r3, [r3, #8]
 800a30a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a312:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	021a      	lsls	r2, r3, #8
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	431a      	orrs	r2, r3
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	4313      	orrs	r3, r2
 800a320:	697a      	ldr	r2, [r7, #20]
 800a322:	4313      	orrs	r3, r2
 800a324:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	697a      	ldr	r2, [r7, #20]
 800a32a:	609a      	str	r2, [r3, #8]
}
 800a32c:	bf00      	nop
 800a32e:	371c      	adds	r7, #28
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr

0800a338 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a338:	b480      	push	{r7}
 800a33a:	b087      	sub	sp, #28
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	60f8      	str	r0, [r7, #12]
 800a340:	60b9      	str	r1, [r7, #8]
 800a342:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	f003 031f 	and.w	r3, r3, #31
 800a34a:	2201      	movs	r2, #1
 800a34c:	fa02 f303 	lsl.w	r3, r2, r3
 800a350:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	6a1a      	ldr	r2, [r3, #32]
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	43db      	mvns	r3, r3
 800a35a:	401a      	ands	r2, r3
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	6a1a      	ldr	r2, [r3, #32]
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	f003 031f 	and.w	r3, r3, #31
 800a36a:	6879      	ldr	r1, [r7, #4]
 800a36c:	fa01 f303 	lsl.w	r3, r1, r3
 800a370:	431a      	orrs	r2, r3
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	621a      	str	r2, [r3, #32]
}
 800a376:	bf00      	nop
 800a378:	371c      	adds	r7, #28
 800a37a:	46bd      	mov	sp, r7
 800a37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a380:	4770      	bx	lr
	...

0800a384 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a384:	b480      	push	{r7}
 800a386:	b085      	sub	sp, #20
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a394:	2b01      	cmp	r3, #1
 800a396:	d101      	bne.n	800a39c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a398:	2302      	movs	r3, #2
 800a39a:	e06d      	b.n	800a478 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2201      	movs	r2, #1
 800a3a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2202      	movs	r2, #2
 800a3a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	685b      	ldr	r3, [r3, #4]
 800a3b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	689b      	ldr	r3, [r3, #8]
 800a3ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a30      	ldr	r2, [pc, #192]	@ (800a484 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d004      	beq.n	800a3d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a2f      	ldr	r2, [pc, #188]	@ (800a488 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d108      	bne.n	800a3e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a3d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	68fa      	ldr	r2, [r7, #12]
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	68fa      	ldr	r2, [r7, #12]
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	68fa      	ldr	r2, [r7, #12]
 800a3fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4a20      	ldr	r2, [pc, #128]	@ (800a484 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d022      	beq.n	800a44c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a40e:	d01d      	beq.n	800a44c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4a1d      	ldr	r2, [pc, #116]	@ (800a48c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d018      	beq.n	800a44c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4a1c      	ldr	r2, [pc, #112]	@ (800a490 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d013      	beq.n	800a44c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4a1a      	ldr	r2, [pc, #104]	@ (800a494 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d00e      	beq.n	800a44c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4a15      	ldr	r2, [pc, #84]	@ (800a488 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d009      	beq.n	800a44c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a16      	ldr	r2, [pc, #88]	@ (800a498 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d004      	beq.n	800a44c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4a15      	ldr	r2, [pc, #84]	@ (800a49c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d10c      	bne.n	800a466 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a452:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	689b      	ldr	r3, [r3, #8]
 800a458:	68ba      	ldr	r2, [r7, #8]
 800a45a:	4313      	orrs	r3, r2
 800a45c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	68ba      	ldr	r2, [r7, #8]
 800a464:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2201      	movs	r2, #1
 800a46a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2200      	movs	r2, #0
 800a472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a476:	2300      	movs	r3, #0
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3714      	adds	r7, #20
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr
 800a484:	40010000 	.word	0x40010000
 800a488:	40010400 	.word	0x40010400
 800a48c:	40000400 	.word	0x40000400
 800a490:	40000800 	.word	0x40000800
 800a494:	40000c00 	.word	0x40000c00
 800a498:	40001800 	.word	0x40001800
 800a49c:	40014000 	.word	0x40014000

0800a4a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b083      	sub	sp, #12
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a4a8:	bf00      	nop
 800a4aa:	370c      	adds	r7, #12
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b083      	sub	sp, #12
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a4bc:	bf00      	nop
 800a4be:	370c      	adds	r7, #12
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr

0800a4c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b083      	sub	sp, #12
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a4d0:	bf00      	nop
 800a4d2:	370c      	adds	r7, #12
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr

0800a4dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d101      	bne.n	800a4ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	e042      	b.n	800a574 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d106      	bne.n	800a506 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f000 f83b 	bl	800a57c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2224      	movs	r2, #36	@ 0x24
 800a50a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f022 0201 	bic.w	r2, r2, #1
 800a51c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a522:	2b00      	cmp	r3, #0
 800a524:	d002      	beq.n	800a52c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 fe28 	bl	800b17c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f000 f8bd 	bl	800a6ac <UART_SetConfig>
 800a532:	4603      	mov	r3, r0
 800a534:	2b01      	cmp	r3, #1
 800a536:	d101      	bne.n	800a53c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a538:	2301      	movs	r3, #1
 800a53a:	e01b      	b.n	800a574 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	685a      	ldr	r2, [r3, #4]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a54a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	689a      	ldr	r2, [r3, #8]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a55a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	681a      	ldr	r2, [r3, #0]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f042 0201 	orr.w	r2, r2, #1
 800a56a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 fea7 	bl	800b2c0 <UART_CheckIdleState>
 800a572:	4603      	mov	r3, r0
}
 800a574:	4618      	mov	r0, r3
 800a576:	3708      	adds	r7, #8
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b083      	sub	sp, #12
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800a584:	bf00      	nop
 800a586:	370c      	adds	r7, #12
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b08a      	sub	sp, #40	@ 0x28
 800a594:	af02      	add	r7, sp, #8
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	60b9      	str	r1, [r7, #8]
 800a59a:	603b      	str	r3, [r7, #0]
 800a59c:	4613      	mov	r3, r2
 800a59e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5a6:	2b20      	cmp	r3, #32
 800a5a8:	d17b      	bne.n	800a6a2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d002      	beq.n	800a5b6 <HAL_UART_Transmit+0x26>
 800a5b0:	88fb      	ldrh	r3, [r7, #6]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d101      	bne.n	800a5ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	e074      	b.n	800a6a4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2221      	movs	r2, #33	@ 0x21
 800a5c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a5ca:	f7f7 fe01 	bl	80021d0 <HAL_GetTick>
 800a5ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	88fa      	ldrh	r2, [r7, #6]
 800a5d4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	88fa      	ldrh	r2, [r7, #6]
 800a5dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	689b      	ldr	r3, [r3, #8]
 800a5e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a5e8:	d108      	bne.n	800a5fc <HAL_UART_Transmit+0x6c>
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	691b      	ldr	r3, [r3, #16]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d104      	bne.n	800a5fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	61bb      	str	r3, [r7, #24]
 800a5fa:	e003      	b.n	800a604 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a600:	2300      	movs	r3, #0
 800a602:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a604:	e030      	b.n	800a668 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	9300      	str	r3, [sp, #0]
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	2200      	movs	r2, #0
 800a60e:	2180      	movs	r1, #128	@ 0x80
 800a610:	68f8      	ldr	r0, [r7, #12]
 800a612:	f000 feff 	bl	800b414 <UART_WaitOnFlagUntilTimeout>
 800a616:	4603      	mov	r3, r0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d005      	beq.n	800a628 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2220      	movs	r2, #32
 800a620:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a624:	2303      	movs	r3, #3
 800a626:	e03d      	b.n	800a6a4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a628:	69fb      	ldr	r3, [r7, #28]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d10b      	bne.n	800a646 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a62e:	69bb      	ldr	r3, [r7, #24]
 800a630:	881b      	ldrh	r3, [r3, #0]
 800a632:	461a      	mov	r2, r3
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a63c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a63e:	69bb      	ldr	r3, [r7, #24]
 800a640:	3302      	adds	r3, #2
 800a642:	61bb      	str	r3, [r7, #24]
 800a644:	e007      	b.n	800a656 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a646:	69fb      	ldr	r3, [r7, #28]
 800a648:	781a      	ldrb	r2, [r3, #0]
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a650:	69fb      	ldr	r3, [r7, #28]
 800a652:	3301      	adds	r3, #1
 800a654:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a65c:	b29b      	uxth	r3, r3
 800a65e:	3b01      	subs	r3, #1
 800a660:	b29a      	uxth	r2, r3
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a66e:	b29b      	uxth	r3, r3
 800a670:	2b00      	cmp	r3, #0
 800a672:	d1c8      	bne.n	800a606 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	9300      	str	r3, [sp, #0]
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	2200      	movs	r2, #0
 800a67c:	2140      	movs	r1, #64	@ 0x40
 800a67e:	68f8      	ldr	r0, [r7, #12]
 800a680:	f000 fec8 	bl	800b414 <UART_WaitOnFlagUntilTimeout>
 800a684:	4603      	mov	r3, r0
 800a686:	2b00      	cmp	r3, #0
 800a688:	d005      	beq.n	800a696 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2220      	movs	r2, #32
 800a68e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a692:	2303      	movs	r3, #3
 800a694:	e006      	b.n	800a6a4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2220      	movs	r2, #32
 800a69a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	e000      	b.n	800a6a4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a6a2:	2302      	movs	r3, #2
  }
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3720      	adds	r7, #32
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}

0800a6ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a6ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a6b0:	b092      	sub	sp, #72	@ 0x48
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	689a      	ldr	r2, [r3, #8]
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	691b      	ldr	r3, [r3, #16]
 800a6c4:	431a      	orrs	r2, r3
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	695b      	ldr	r3, [r3, #20]
 800a6ca:	431a      	orrs	r2, r3
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	69db      	ldr	r3, [r3, #28]
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	681a      	ldr	r2, [r3, #0]
 800a6da:	4bbe      	ldr	r3, [pc, #760]	@ (800a9d4 <UART_SetConfig+0x328>)
 800a6dc:	4013      	ands	r3, r2
 800a6de:	697a      	ldr	r2, [r7, #20]
 800a6e0:	6812      	ldr	r2, [r2, #0]
 800a6e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a6e4:	430b      	orrs	r3, r1
 800a6e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	68da      	ldr	r2, [r3, #12]
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	430a      	orrs	r2, r1
 800a6fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	699b      	ldr	r3, [r3, #24]
 800a702:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	4ab3      	ldr	r2, [pc, #716]	@ (800a9d8 <UART_SetConfig+0x32c>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d004      	beq.n	800a718 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	6a1b      	ldr	r3, [r3, #32]
 800a712:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a714:	4313      	orrs	r3, r2
 800a716:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	689a      	ldr	r2, [r3, #8]
 800a71e:	4baf      	ldr	r3, [pc, #700]	@ (800a9dc <UART_SetConfig+0x330>)
 800a720:	4013      	ands	r3, r2
 800a722:	697a      	ldr	r2, [r7, #20]
 800a724:	6812      	ldr	r2, [r2, #0]
 800a726:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a728:	430b      	orrs	r3, r1
 800a72a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a732:	f023 010f 	bic.w	r1, r3, #15
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	430a      	orrs	r2, r1
 800a740:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	4aa6      	ldr	r2, [pc, #664]	@ (800a9e0 <UART_SetConfig+0x334>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	d177      	bne.n	800a83c <UART_SetConfig+0x190>
 800a74c:	4ba5      	ldr	r3, [pc, #660]	@ (800a9e4 <UART_SetConfig+0x338>)
 800a74e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a750:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a754:	2b28      	cmp	r3, #40	@ 0x28
 800a756:	d86d      	bhi.n	800a834 <UART_SetConfig+0x188>
 800a758:	a201      	add	r2, pc, #4	@ (adr r2, 800a760 <UART_SetConfig+0xb4>)
 800a75a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a75e:	bf00      	nop
 800a760:	0800a805 	.word	0x0800a805
 800a764:	0800a835 	.word	0x0800a835
 800a768:	0800a835 	.word	0x0800a835
 800a76c:	0800a835 	.word	0x0800a835
 800a770:	0800a835 	.word	0x0800a835
 800a774:	0800a835 	.word	0x0800a835
 800a778:	0800a835 	.word	0x0800a835
 800a77c:	0800a835 	.word	0x0800a835
 800a780:	0800a80d 	.word	0x0800a80d
 800a784:	0800a835 	.word	0x0800a835
 800a788:	0800a835 	.word	0x0800a835
 800a78c:	0800a835 	.word	0x0800a835
 800a790:	0800a835 	.word	0x0800a835
 800a794:	0800a835 	.word	0x0800a835
 800a798:	0800a835 	.word	0x0800a835
 800a79c:	0800a835 	.word	0x0800a835
 800a7a0:	0800a815 	.word	0x0800a815
 800a7a4:	0800a835 	.word	0x0800a835
 800a7a8:	0800a835 	.word	0x0800a835
 800a7ac:	0800a835 	.word	0x0800a835
 800a7b0:	0800a835 	.word	0x0800a835
 800a7b4:	0800a835 	.word	0x0800a835
 800a7b8:	0800a835 	.word	0x0800a835
 800a7bc:	0800a835 	.word	0x0800a835
 800a7c0:	0800a81d 	.word	0x0800a81d
 800a7c4:	0800a835 	.word	0x0800a835
 800a7c8:	0800a835 	.word	0x0800a835
 800a7cc:	0800a835 	.word	0x0800a835
 800a7d0:	0800a835 	.word	0x0800a835
 800a7d4:	0800a835 	.word	0x0800a835
 800a7d8:	0800a835 	.word	0x0800a835
 800a7dc:	0800a835 	.word	0x0800a835
 800a7e0:	0800a825 	.word	0x0800a825
 800a7e4:	0800a835 	.word	0x0800a835
 800a7e8:	0800a835 	.word	0x0800a835
 800a7ec:	0800a835 	.word	0x0800a835
 800a7f0:	0800a835 	.word	0x0800a835
 800a7f4:	0800a835 	.word	0x0800a835
 800a7f8:	0800a835 	.word	0x0800a835
 800a7fc:	0800a835 	.word	0x0800a835
 800a800:	0800a82d 	.word	0x0800a82d
 800a804:	2301      	movs	r3, #1
 800a806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a80a:	e222      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800a80c:	2304      	movs	r3, #4
 800a80e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a812:	e21e      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800a814:	2308      	movs	r3, #8
 800a816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a81a:	e21a      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800a81c:	2310      	movs	r3, #16
 800a81e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a822:	e216      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800a824:	2320      	movs	r3, #32
 800a826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a82a:	e212      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800a82c:	2340      	movs	r3, #64	@ 0x40
 800a82e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a832:	e20e      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800a834:	2380      	movs	r3, #128	@ 0x80
 800a836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a83a:	e20a      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4a69      	ldr	r2, [pc, #420]	@ (800a9e8 <UART_SetConfig+0x33c>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d130      	bne.n	800a8a8 <UART_SetConfig+0x1fc>
 800a846:	4b67      	ldr	r3, [pc, #412]	@ (800a9e4 <UART_SetConfig+0x338>)
 800a848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a84a:	f003 0307 	and.w	r3, r3, #7
 800a84e:	2b05      	cmp	r3, #5
 800a850:	d826      	bhi.n	800a8a0 <UART_SetConfig+0x1f4>
 800a852:	a201      	add	r2, pc, #4	@ (adr r2, 800a858 <UART_SetConfig+0x1ac>)
 800a854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a858:	0800a871 	.word	0x0800a871
 800a85c:	0800a879 	.word	0x0800a879
 800a860:	0800a881 	.word	0x0800a881
 800a864:	0800a889 	.word	0x0800a889
 800a868:	0800a891 	.word	0x0800a891
 800a86c:	0800a899 	.word	0x0800a899
 800a870:	2300      	movs	r3, #0
 800a872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a876:	e1ec      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800a878:	2304      	movs	r3, #4
 800a87a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a87e:	e1e8      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800a880:	2308      	movs	r3, #8
 800a882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a886:	e1e4      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800a888:	2310      	movs	r3, #16
 800a88a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a88e:	e1e0      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800a890:	2320      	movs	r3, #32
 800a892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a896:	e1dc      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800a898:	2340      	movs	r3, #64	@ 0x40
 800a89a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a89e:	e1d8      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800a8a0:	2380      	movs	r3, #128	@ 0x80
 800a8a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8a6:	e1d4      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4a4f      	ldr	r2, [pc, #316]	@ (800a9ec <UART_SetConfig+0x340>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d130      	bne.n	800a914 <UART_SetConfig+0x268>
 800a8b2:	4b4c      	ldr	r3, [pc, #304]	@ (800a9e4 <UART_SetConfig+0x338>)
 800a8b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8b6:	f003 0307 	and.w	r3, r3, #7
 800a8ba:	2b05      	cmp	r3, #5
 800a8bc:	d826      	bhi.n	800a90c <UART_SetConfig+0x260>
 800a8be:	a201      	add	r2, pc, #4	@ (adr r2, 800a8c4 <UART_SetConfig+0x218>)
 800a8c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8c4:	0800a8dd 	.word	0x0800a8dd
 800a8c8:	0800a8e5 	.word	0x0800a8e5
 800a8cc:	0800a8ed 	.word	0x0800a8ed
 800a8d0:	0800a8f5 	.word	0x0800a8f5
 800a8d4:	0800a8fd 	.word	0x0800a8fd
 800a8d8:	0800a905 	.word	0x0800a905
 800a8dc:	2300      	movs	r3, #0
 800a8de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8e2:	e1b6      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800a8e4:	2304      	movs	r3, #4
 800a8e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8ea:	e1b2      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800a8ec:	2308      	movs	r3, #8
 800a8ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8f2:	e1ae      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800a8f4:	2310      	movs	r3, #16
 800a8f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8fa:	e1aa      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800a8fc:	2320      	movs	r3, #32
 800a8fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a902:	e1a6      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800a904:	2340      	movs	r3, #64	@ 0x40
 800a906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a90a:	e1a2      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800a90c:	2380      	movs	r3, #128	@ 0x80
 800a90e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a912:	e19e      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4a35      	ldr	r2, [pc, #212]	@ (800a9f0 <UART_SetConfig+0x344>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d130      	bne.n	800a980 <UART_SetConfig+0x2d4>
 800a91e:	4b31      	ldr	r3, [pc, #196]	@ (800a9e4 <UART_SetConfig+0x338>)
 800a920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a922:	f003 0307 	and.w	r3, r3, #7
 800a926:	2b05      	cmp	r3, #5
 800a928:	d826      	bhi.n	800a978 <UART_SetConfig+0x2cc>
 800a92a:	a201      	add	r2, pc, #4	@ (adr r2, 800a930 <UART_SetConfig+0x284>)
 800a92c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a930:	0800a949 	.word	0x0800a949
 800a934:	0800a951 	.word	0x0800a951
 800a938:	0800a959 	.word	0x0800a959
 800a93c:	0800a961 	.word	0x0800a961
 800a940:	0800a969 	.word	0x0800a969
 800a944:	0800a971 	.word	0x0800a971
 800a948:	2300      	movs	r3, #0
 800a94a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a94e:	e180      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800a950:	2304      	movs	r3, #4
 800a952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a956:	e17c      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800a958:	2308      	movs	r3, #8
 800a95a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a95e:	e178      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800a960:	2310      	movs	r3, #16
 800a962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a966:	e174      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800a968:	2320      	movs	r3, #32
 800a96a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a96e:	e170      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800a970:	2340      	movs	r3, #64	@ 0x40
 800a972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a976:	e16c      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800a978:	2380      	movs	r3, #128	@ 0x80
 800a97a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a97e:	e168      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	4a1b      	ldr	r2, [pc, #108]	@ (800a9f4 <UART_SetConfig+0x348>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d142      	bne.n	800aa10 <UART_SetConfig+0x364>
 800a98a:	4b16      	ldr	r3, [pc, #88]	@ (800a9e4 <UART_SetConfig+0x338>)
 800a98c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a98e:	f003 0307 	and.w	r3, r3, #7
 800a992:	2b05      	cmp	r3, #5
 800a994:	d838      	bhi.n	800aa08 <UART_SetConfig+0x35c>
 800a996:	a201      	add	r2, pc, #4	@ (adr r2, 800a99c <UART_SetConfig+0x2f0>)
 800a998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a99c:	0800a9b5 	.word	0x0800a9b5
 800a9a0:	0800a9bd 	.word	0x0800a9bd
 800a9a4:	0800a9c5 	.word	0x0800a9c5
 800a9a8:	0800a9cd 	.word	0x0800a9cd
 800a9ac:	0800a9f9 	.word	0x0800a9f9
 800a9b0:	0800aa01 	.word	0x0800aa01
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9ba:	e14a      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800a9bc:	2304      	movs	r3, #4
 800a9be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9c2:	e146      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800a9c4:	2308      	movs	r3, #8
 800a9c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9ca:	e142      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800a9cc:	2310      	movs	r3, #16
 800a9ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9d2:	e13e      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800a9d4:	cfff69f3 	.word	0xcfff69f3
 800a9d8:	58000c00 	.word	0x58000c00
 800a9dc:	11fff4ff 	.word	0x11fff4ff
 800a9e0:	40011000 	.word	0x40011000
 800a9e4:	58024400 	.word	0x58024400
 800a9e8:	40004400 	.word	0x40004400
 800a9ec:	40004800 	.word	0x40004800
 800a9f0:	40004c00 	.word	0x40004c00
 800a9f4:	40005000 	.word	0x40005000
 800a9f8:	2320      	movs	r3, #32
 800a9fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9fe:	e128      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800aa00:	2340      	movs	r3, #64	@ 0x40
 800aa02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa06:	e124      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800aa08:	2380      	movs	r3, #128	@ 0x80
 800aa0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa0e:	e120      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4acb      	ldr	r2, [pc, #812]	@ (800ad44 <UART_SetConfig+0x698>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d176      	bne.n	800ab08 <UART_SetConfig+0x45c>
 800aa1a:	4bcb      	ldr	r3, [pc, #812]	@ (800ad48 <UART_SetConfig+0x69c>)
 800aa1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aa22:	2b28      	cmp	r3, #40	@ 0x28
 800aa24:	d86c      	bhi.n	800ab00 <UART_SetConfig+0x454>
 800aa26:	a201      	add	r2, pc, #4	@ (adr r2, 800aa2c <UART_SetConfig+0x380>)
 800aa28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa2c:	0800aad1 	.word	0x0800aad1
 800aa30:	0800ab01 	.word	0x0800ab01
 800aa34:	0800ab01 	.word	0x0800ab01
 800aa38:	0800ab01 	.word	0x0800ab01
 800aa3c:	0800ab01 	.word	0x0800ab01
 800aa40:	0800ab01 	.word	0x0800ab01
 800aa44:	0800ab01 	.word	0x0800ab01
 800aa48:	0800ab01 	.word	0x0800ab01
 800aa4c:	0800aad9 	.word	0x0800aad9
 800aa50:	0800ab01 	.word	0x0800ab01
 800aa54:	0800ab01 	.word	0x0800ab01
 800aa58:	0800ab01 	.word	0x0800ab01
 800aa5c:	0800ab01 	.word	0x0800ab01
 800aa60:	0800ab01 	.word	0x0800ab01
 800aa64:	0800ab01 	.word	0x0800ab01
 800aa68:	0800ab01 	.word	0x0800ab01
 800aa6c:	0800aae1 	.word	0x0800aae1
 800aa70:	0800ab01 	.word	0x0800ab01
 800aa74:	0800ab01 	.word	0x0800ab01
 800aa78:	0800ab01 	.word	0x0800ab01
 800aa7c:	0800ab01 	.word	0x0800ab01
 800aa80:	0800ab01 	.word	0x0800ab01
 800aa84:	0800ab01 	.word	0x0800ab01
 800aa88:	0800ab01 	.word	0x0800ab01
 800aa8c:	0800aae9 	.word	0x0800aae9
 800aa90:	0800ab01 	.word	0x0800ab01
 800aa94:	0800ab01 	.word	0x0800ab01
 800aa98:	0800ab01 	.word	0x0800ab01
 800aa9c:	0800ab01 	.word	0x0800ab01
 800aaa0:	0800ab01 	.word	0x0800ab01
 800aaa4:	0800ab01 	.word	0x0800ab01
 800aaa8:	0800ab01 	.word	0x0800ab01
 800aaac:	0800aaf1 	.word	0x0800aaf1
 800aab0:	0800ab01 	.word	0x0800ab01
 800aab4:	0800ab01 	.word	0x0800ab01
 800aab8:	0800ab01 	.word	0x0800ab01
 800aabc:	0800ab01 	.word	0x0800ab01
 800aac0:	0800ab01 	.word	0x0800ab01
 800aac4:	0800ab01 	.word	0x0800ab01
 800aac8:	0800ab01 	.word	0x0800ab01
 800aacc:	0800aaf9 	.word	0x0800aaf9
 800aad0:	2301      	movs	r3, #1
 800aad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aad6:	e0bc      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800aad8:	2304      	movs	r3, #4
 800aada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aade:	e0b8      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800aae0:	2308      	movs	r3, #8
 800aae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aae6:	e0b4      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800aae8:	2310      	movs	r3, #16
 800aaea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaee:	e0b0      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800aaf0:	2320      	movs	r3, #32
 800aaf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaf6:	e0ac      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800aaf8:	2340      	movs	r3, #64	@ 0x40
 800aafa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aafe:	e0a8      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800ab00:	2380      	movs	r3, #128	@ 0x80
 800ab02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab06:	e0a4      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4a8f      	ldr	r2, [pc, #572]	@ (800ad4c <UART_SetConfig+0x6a0>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d130      	bne.n	800ab74 <UART_SetConfig+0x4c8>
 800ab12:	4b8d      	ldr	r3, [pc, #564]	@ (800ad48 <UART_SetConfig+0x69c>)
 800ab14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab16:	f003 0307 	and.w	r3, r3, #7
 800ab1a:	2b05      	cmp	r3, #5
 800ab1c:	d826      	bhi.n	800ab6c <UART_SetConfig+0x4c0>
 800ab1e:	a201      	add	r2, pc, #4	@ (adr r2, 800ab24 <UART_SetConfig+0x478>)
 800ab20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab24:	0800ab3d 	.word	0x0800ab3d
 800ab28:	0800ab45 	.word	0x0800ab45
 800ab2c:	0800ab4d 	.word	0x0800ab4d
 800ab30:	0800ab55 	.word	0x0800ab55
 800ab34:	0800ab5d 	.word	0x0800ab5d
 800ab38:	0800ab65 	.word	0x0800ab65
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab42:	e086      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800ab44:	2304      	movs	r3, #4
 800ab46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab4a:	e082      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800ab4c:	2308      	movs	r3, #8
 800ab4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab52:	e07e      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800ab54:	2310      	movs	r3, #16
 800ab56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab5a:	e07a      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800ab5c:	2320      	movs	r3, #32
 800ab5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab62:	e076      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800ab64:	2340      	movs	r3, #64	@ 0x40
 800ab66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab6a:	e072      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800ab6c:	2380      	movs	r3, #128	@ 0x80
 800ab6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab72:	e06e      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4a75      	ldr	r2, [pc, #468]	@ (800ad50 <UART_SetConfig+0x6a4>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d130      	bne.n	800abe0 <UART_SetConfig+0x534>
 800ab7e:	4b72      	ldr	r3, [pc, #456]	@ (800ad48 <UART_SetConfig+0x69c>)
 800ab80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab82:	f003 0307 	and.w	r3, r3, #7
 800ab86:	2b05      	cmp	r3, #5
 800ab88:	d826      	bhi.n	800abd8 <UART_SetConfig+0x52c>
 800ab8a:	a201      	add	r2, pc, #4	@ (adr r2, 800ab90 <UART_SetConfig+0x4e4>)
 800ab8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab90:	0800aba9 	.word	0x0800aba9
 800ab94:	0800abb1 	.word	0x0800abb1
 800ab98:	0800abb9 	.word	0x0800abb9
 800ab9c:	0800abc1 	.word	0x0800abc1
 800aba0:	0800abc9 	.word	0x0800abc9
 800aba4:	0800abd1 	.word	0x0800abd1
 800aba8:	2300      	movs	r3, #0
 800abaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abae:	e050      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800abb0:	2304      	movs	r3, #4
 800abb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abb6:	e04c      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800abb8:	2308      	movs	r3, #8
 800abba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abbe:	e048      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800abc0:	2310      	movs	r3, #16
 800abc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abc6:	e044      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800abc8:	2320      	movs	r3, #32
 800abca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abce:	e040      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800abd0:	2340      	movs	r3, #64	@ 0x40
 800abd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abd6:	e03c      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800abd8:	2380      	movs	r3, #128	@ 0x80
 800abda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abde:	e038      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4a5b      	ldr	r2, [pc, #364]	@ (800ad54 <UART_SetConfig+0x6a8>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d130      	bne.n	800ac4c <UART_SetConfig+0x5a0>
 800abea:	4b57      	ldr	r3, [pc, #348]	@ (800ad48 <UART_SetConfig+0x69c>)
 800abec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abee:	f003 0307 	and.w	r3, r3, #7
 800abf2:	2b05      	cmp	r3, #5
 800abf4:	d826      	bhi.n	800ac44 <UART_SetConfig+0x598>
 800abf6:	a201      	add	r2, pc, #4	@ (adr r2, 800abfc <UART_SetConfig+0x550>)
 800abf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abfc:	0800ac15 	.word	0x0800ac15
 800ac00:	0800ac1d 	.word	0x0800ac1d
 800ac04:	0800ac25 	.word	0x0800ac25
 800ac08:	0800ac2d 	.word	0x0800ac2d
 800ac0c:	0800ac35 	.word	0x0800ac35
 800ac10:	0800ac3d 	.word	0x0800ac3d
 800ac14:	2302      	movs	r3, #2
 800ac16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac1a:	e01a      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800ac1c:	2304      	movs	r3, #4
 800ac1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac22:	e016      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800ac24:	2308      	movs	r3, #8
 800ac26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac2a:	e012      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800ac2c:	2310      	movs	r3, #16
 800ac2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac32:	e00e      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800ac34:	2320      	movs	r3, #32
 800ac36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac3a:	e00a      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800ac3c:	2340      	movs	r3, #64	@ 0x40
 800ac3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac42:	e006      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800ac44:	2380      	movs	r3, #128	@ 0x80
 800ac46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac4a:	e002      	b.n	800ac52 <UART_SetConfig+0x5a6>
 800ac4c:	2380      	movs	r3, #128	@ 0x80
 800ac4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	4a3f      	ldr	r2, [pc, #252]	@ (800ad54 <UART_SetConfig+0x6a8>)
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	f040 80f8 	bne.w	800ae4e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ac5e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ac62:	2b20      	cmp	r3, #32
 800ac64:	dc46      	bgt.n	800acf4 <UART_SetConfig+0x648>
 800ac66:	2b02      	cmp	r3, #2
 800ac68:	f2c0 8082 	blt.w	800ad70 <UART_SetConfig+0x6c4>
 800ac6c:	3b02      	subs	r3, #2
 800ac6e:	2b1e      	cmp	r3, #30
 800ac70:	d87e      	bhi.n	800ad70 <UART_SetConfig+0x6c4>
 800ac72:	a201      	add	r2, pc, #4	@ (adr r2, 800ac78 <UART_SetConfig+0x5cc>)
 800ac74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac78:	0800acfb 	.word	0x0800acfb
 800ac7c:	0800ad71 	.word	0x0800ad71
 800ac80:	0800ad03 	.word	0x0800ad03
 800ac84:	0800ad71 	.word	0x0800ad71
 800ac88:	0800ad71 	.word	0x0800ad71
 800ac8c:	0800ad71 	.word	0x0800ad71
 800ac90:	0800ad13 	.word	0x0800ad13
 800ac94:	0800ad71 	.word	0x0800ad71
 800ac98:	0800ad71 	.word	0x0800ad71
 800ac9c:	0800ad71 	.word	0x0800ad71
 800aca0:	0800ad71 	.word	0x0800ad71
 800aca4:	0800ad71 	.word	0x0800ad71
 800aca8:	0800ad71 	.word	0x0800ad71
 800acac:	0800ad71 	.word	0x0800ad71
 800acb0:	0800ad23 	.word	0x0800ad23
 800acb4:	0800ad71 	.word	0x0800ad71
 800acb8:	0800ad71 	.word	0x0800ad71
 800acbc:	0800ad71 	.word	0x0800ad71
 800acc0:	0800ad71 	.word	0x0800ad71
 800acc4:	0800ad71 	.word	0x0800ad71
 800acc8:	0800ad71 	.word	0x0800ad71
 800accc:	0800ad71 	.word	0x0800ad71
 800acd0:	0800ad71 	.word	0x0800ad71
 800acd4:	0800ad71 	.word	0x0800ad71
 800acd8:	0800ad71 	.word	0x0800ad71
 800acdc:	0800ad71 	.word	0x0800ad71
 800ace0:	0800ad71 	.word	0x0800ad71
 800ace4:	0800ad71 	.word	0x0800ad71
 800ace8:	0800ad71 	.word	0x0800ad71
 800acec:	0800ad71 	.word	0x0800ad71
 800acf0:	0800ad63 	.word	0x0800ad63
 800acf4:	2b40      	cmp	r3, #64	@ 0x40
 800acf6:	d037      	beq.n	800ad68 <UART_SetConfig+0x6bc>
 800acf8:	e03a      	b.n	800ad70 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800acfa:	f7fd fc1b 	bl	8008534 <HAL_RCCEx_GetD3PCLK1Freq>
 800acfe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ad00:	e03c      	b.n	800ad7c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7fd fc2a 	bl	8008560 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ad0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad10:	e034      	b.n	800ad7c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad12:	f107 0318 	add.w	r3, r7, #24
 800ad16:	4618      	mov	r0, r3
 800ad18:	f7fd fd76 	bl	8008808 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ad1c:	69fb      	ldr	r3, [r7, #28]
 800ad1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad20:	e02c      	b.n	800ad7c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad22:	4b09      	ldr	r3, [pc, #36]	@ (800ad48 <UART_SetConfig+0x69c>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f003 0320 	and.w	r3, r3, #32
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d016      	beq.n	800ad5c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ad2e:	4b06      	ldr	r3, [pc, #24]	@ (800ad48 <UART_SetConfig+0x69c>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	08db      	lsrs	r3, r3, #3
 800ad34:	f003 0303 	and.w	r3, r3, #3
 800ad38:	4a07      	ldr	r2, [pc, #28]	@ (800ad58 <UART_SetConfig+0x6ac>)
 800ad3a:	fa22 f303 	lsr.w	r3, r2, r3
 800ad3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ad40:	e01c      	b.n	800ad7c <UART_SetConfig+0x6d0>
 800ad42:	bf00      	nop
 800ad44:	40011400 	.word	0x40011400
 800ad48:	58024400 	.word	0x58024400
 800ad4c:	40007800 	.word	0x40007800
 800ad50:	40007c00 	.word	0x40007c00
 800ad54:	58000c00 	.word	0x58000c00
 800ad58:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ad5c:	4b9d      	ldr	r3, [pc, #628]	@ (800afd4 <UART_SetConfig+0x928>)
 800ad5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad60:	e00c      	b.n	800ad7c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ad62:	4b9d      	ldr	r3, [pc, #628]	@ (800afd8 <UART_SetConfig+0x92c>)
 800ad64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad66:	e009      	b.n	800ad7c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad6e:	e005      	b.n	800ad7c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ad70:	2300      	movs	r3, #0
 800ad72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ad74:	2301      	movs	r3, #1
 800ad76:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ad7a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ad7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	f000 81de 	beq.w	800b140 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad88:	4a94      	ldr	r2, [pc, #592]	@ (800afdc <UART_SetConfig+0x930>)
 800ad8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad8e:	461a      	mov	r2, r3
 800ad90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad92:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad96:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	685a      	ldr	r2, [r3, #4]
 800ad9c:	4613      	mov	r3, r2
 800ad9e:	005b      	lsls	r3, r3, #1
 800ada0:	4413      	add	r3, r2
 800ada2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ada4:	429a      	cmp	r2, r3
 800ada6:	d305      	bcc.n	800adb4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800adae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d903      	bls.n	800adbc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800adb4:	2301      	movs	r3, #1
 800adb6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800adba:	e1c1      	b.n	800b140 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800adbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adbe:	2200      	movs	r2, #0
 800adc0:	60bb      	str	r3, [r7, #8]
 800adc2:	60fa      	str	r2, [r7, #12]
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adc8:	4a84      	ldr	r2, [pc, #528]	@ (800afdc <UART_SetConfig+0x930>)
 800adca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800adce:	b29b      	uxth	r3, r3
 800add0:	2200      	movs	r2, #0
 800add2:	603b      	str	r3, [r7, #0]
 800add4:	607a      	str	r2, [r7, #4]
 800add6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800adda:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800adde:	f7f5 fad7 	bl	8000390 <__aeabi_uldivmod>
 800ade2:	4602      	mov	r2, r0
 800ade4:	460b      	mov	r3, r1
 800ade6:	4610      	mov	r0, r2
 800ade8:	4619      	mov	r1, r3
 800adea:	f04f 0200 	mov.w	r2, #0
 800adee:	f04f 0300 	mov.w	r3, #0
 800adf2:	020b      	lsls	r3, r1, #8
 800adf4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800adf8:	0202      	lsls	r2, r0, #8
 800adfa:	6979      	ldr	r1, [r7, #20]
 800adfc:	6849      	ldr	r1, [r1, #4]
 800adfe:	0849      	lsrs	r1, r1, #1
 800ae00:	2000      	movs	r0, #0
 800ae02:	460c      	mov	r4, r1
 800ae04:	4605      	mov	r5, r0
 800ae06:	eb12 0804 	adds.w	r8, r2, r4
 800ae0a:	eb43 0905 	adc.w	r9, r3, r5
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	685b      	ldr	r3, [r3, #4]
 800ae12:	2200      	movs	r2, #0
 800ae14:	469a      	mov	sl, r3
 800ae16:	4693      	mov	fp, r2
 800ae18:	4652      	mov	r2, sl
 800ae1a:	465b      	mov	r3, fp
 800ae1c:	4640      	mov	r0, r8
 800ae1e:	4649      	mov	r1, r9
 800ae20:	f7f5 fab6 	bl	8000390 <__aeabi_uldivmod>
 800ae24:	4602      	mov	r2, r0
 800ae26:	460b      	mov	r3, r1
 800ae28:	4613      	mov	r3, r2
 800ae2a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ae2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae32:	d308      	bcc.n	800ae46 <UART_SetConfig+0x79a>
 800ae34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ae3a:	d204      	bcs.n	800ae46 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ae42:	60da      	str	r2, [r3, #12]
 800ae44:	e17c      	b.n	800b140 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ae46:	2301      	movs	r3, #1
 800ae48:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ae4c:	e178      	b.n	800b140 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	69db      	ldr	r3, [r3, #28]
 800ae52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ae56:	f040 80c5 	bne.w	800afe4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ae5a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ae5e:	2b20      	cmp	r3, #32
 800ae60:	dc48      	bgt.n	800aef4 <UART_SetConfig+0x848>
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	db7b      	blt.n	800af5e <UART_SetConfig+0x8b2>
 800ae66:	2b20      	cmp	r3, #32
 800ae68:	d879      	bhi.n	800af5e <UART_SetConfig+0x8b2>
 800ae6a:	a201      	add	r2, pc, #4	@ (adr r2, 800ae70 <UART_SetConfig+0x7c4>)
 800ae6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae70:	0800aefb 	.word	0x0800aefb
 800ae74:	0800af03 	.word	0x0800af03
 800ae78:	0800af5f 	.word	0x0800af5f
 800ae7c:	0800af5f 	.word	0x0800af5f
 800ae80:	0800af0b 	.word	0x0800af0b
 800ae84:	0800af5f 	.word	0x0800af5f
 800ae88:	0800af5f 	.word	0x0800af5f
 800ae8c:	0800af5f 	.word	0x0800af5f
 800ae90:	0800af1b 	.word	0x0800af1b
 800ae94:	0800af5f 	.word	0x0800af5f
 800ae98:	0800af5f 	.word	0x0800af5f
 800ae9c:	0800af5f 	.word	0x0800af5f
 800aea0:	0800af5f 	.word	0x0800af5f
 800aea4:	0800af5f 	.word	0x0800af5f
 800aea8:	0800af5f 	.word	0x0800af5f
 800aeac:	0800af5f 	.word	0x0800af5f
 800aeb0:	0800af2b 	.word	0x0800af2b
 800aeb4:	0800af5f 	.word	0x0800af5f
 800aeb8:	0800af5f 	.word	0x0800af5f
 800aebc:	0800af5f 	.word	0x0800af5f
 800aec0:	0800af5f 	.word	0x0800af5f
 800aec4:	0800af5f 	.word	0x0800af5f
 800aec8:	0800af5f 	.word	0x0800af5f
 800aecc:	0800af5f 	.word	0x0800af5f
 800aed0:	0800af5f 	.word	0x0800af5f
 800aed4:	0800af5f 	.word	0x0800af5f
 800aed8:	0800af5f 	.word	0x0800af5f
 800aedc:	0800af5f 	.word	0x0800af5f
 800aee0:	0800af5f 	.word	0x0800af5f
 800aee4:	0800af5f 	.word	0x0800af5f
 800aee8:	0800af5f 	.word	0x0800af5f
 800aeec:	0800af5f 	.word	0x0800af5f
 800aef0:	0800af51 	.word	0x0800af51
 800aef4:	2b40      	cmp	r3, #64	@ 0x40
 800aef6:	d02e      	beq.n	800af56 <UART_SetConfig+0x8aa>
 800aef8:	e031      	b.n	800af5e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aefa:	f7fc f8e5 	bl	80070c8 <HAL_RCC_GetPCLK1Freq>
 800aefe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800af00:	e033      	b.n	800af6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af02:	f7fc f8f7 	bl	80070f4 <HAL_RCC_GetPCLK2Freq>
 800af06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800af08:	e02f      	b.n	800af6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800af0e:	4618      	mov	r0, r3
 800af10:	f7fd fb26 	bl	8008560 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800af14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af18:	e027      	b.n	800af6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af1a:	f107 0318 	add.w	r3, r7, #24
 800af1e:	4618      	mov	r0, r3
 800af20:	f7fd fc72 	bl	8008808 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800af24:	69fb      	ldr	r3, [r7, #28]
 800af26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af28:	e01f      	b.n	800af6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af2a:	4b2d      	ldr	r3, [pc, #180]	@ (800afe0 <UART_SetConfig+0x934>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f003 0320 	and.w	r3, r3, #32
 800af32:	2b00      	cmp	r3, #0
 800af34:	d009      	beq.n	800af4a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800af36:	4b2a      	ldr	r3, [pc, #168]	@ (800afe0 <UART_SetConfig+0x934>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	08db      	lsrs	r3, r3, #3
 800af3c:	f003 0303 	and.w	r3, r3, #3
 800af40:	4a24      	ldr	r2, [pc, #144]	@ (800afd4 <UART_SetConfig+0x928>)
 800af42:	fa22 f303 	lsr.w	r3, r2, r3
 800af46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800af48:	e00f      	b.n	800af6a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800af4a:	4b22      	ldr	r3, [pc, #136]	@ (800afd4 <UART_SetConfig+0x928>)
 800af4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af4e:	e00c      	b.n	800af6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800af50:	4b21      	ldr	r3, [pc, #132]	@ (800afd8 <UART_SetConfig+0x92c>)
 800af52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af54:	e009      	b.n	800af6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af5c:	e005      	b.n	800af6a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800af5e:	2300      	movs	r3, #0
 800af60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800af62:	2301      	movs	r3, #1
 800af64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800af68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800af6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	f000 80e7 	beq.w	800b140 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af76:	4a19      	ldr	r2, [pc, #100]	@ (800afdc <UART_SetConfig+0x930>)
 800af78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af7c:	461a      	mov	r2, r3
 800af7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af80:	fbb3 f3f2 	udiv	r3, r3, r2
 800af84:	005a      	lsls	r2, r3, #1
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	085b      	lsrs	r3, r3, #1
 800af8c:	441a      	add	r2, r3
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	fbb2 f3f3 	udiv	r3, r2, r3
 800af96:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af9a:	2b0f      	cmp	r3, #15
 800af9c:	d916      	bls.n	800afcc <UART_SetConfig+0x920>
 800af9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800afa4:	d212      	bcs.n	800afcc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800afa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afa8:	b29b      	uxth	r3, r3
 800afaa:	f023 030f 	bic.w	r3, r3, #15
 800afae:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800afb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afb2:	085b      	lsrs	r3, r3, #1
 800afb4:	b29b      	uxth	r3, r3
 800afb6:	f003 0307 	and.w	r3, r3, #7
 800afba:	b29a      	uxth	r2, r3
 800afbc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800afbe:	4313      	orrs	r3, r2
 800afc0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800afc8:	60da      	str	r2, [r3, #12]
 800afca:	e0b9      	b.n	800b140 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800afcc:	2301      	movs	r3, #1
 800afce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800afd2:	e0b5      	b.n	800b140 <UART_SetConfig+0xa94>
 800afd4:	03d09000 	.word	0x03d09000
 800afd8:	003d0900 	.word	0x003d0900
 800afdc:	0801237c 	.word	0x0801237c
 800afe0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800afe4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800afe8:	2b20      	cmp	r3, #32
 800afea:	dc49      	bgt.n	800b080 <UART_SetConfig+0x9d4>
 800afec:	2b00      	cmp	r3, #0
 800afee:	db7c      	blt.n	800b0ea <UART_SetConfig+0xa3e>
 800aff0:	2b20      	cmp	r3, #32
 800aff2:	d87a      	bhi.n	800b0ea <UART_SetConfig+0xa3e>
 800aff4:	a201      	add	r2, pc, #4	@ (adr r2, 800affc <UART_SetConfig+0x950>)
 800aff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800affa:	bf00      	nop
 800affc:	0800b087 	.word	0x0800b087
 800b000:	0800b08f 	.word	0x0800b08f
 800b004:	0800b0eb 	.word	0x0800b0eb
 800b008:	0800b0eb 	.word	0x0800b0eb
 800b00c:	0800b097 	.word	0x0800b097
 800b010:	0800b0eb 	.word	0x0800b0eb
 800b014:	0800b0eb 	.word	0x0800b0eb
 800b018:	0800b0eb 	.word	0x0800b0eb
 800b01c:	0800b0a7 	.word	0x0800b0a7
 800b020:	0800b0eb 	.word	0x0800b0eb
 800b024:	0800b0eb 	.word	0x0800b0eb
 800b028:	0800b0eb 	.word	0x0800b0eb
 800b02c:	0800b0eb 	.word	0x0800b0eb
 800b030:	0800b0eb 	.word	0x0800b0eb
 800b034:	0800b0eb 	.word	0x0800b0eb
 800b038:	0800b0eb 	.word	0x0800b0eb
 800b03c:	0800b0b7 	.word	0x0800b0b7
 800b040:	0800b0eb 	.word	0x0800b0eb
 800b044:	0800b0eb 	.word	0x0800b0eb
 800b048:	0800b0eb 	.word	0x0800b0eb
 800b04c:	0800b0eb 	.word	0x0800b0eb
 800b050:	0800b0eb 	.word	0x0800b0eb
 800b054:	0800b0eb 	.word	0x0800b0eb
 800b058:	0800b0eb 	.word	0x0800b0eb
 800b05c:	0800b0eb 	.word	0x0800b0eb
 800b060:	0800b0eb 	.word	0x0800b0eb
 800b064:	0800b0eb 	.word	0x0800b0eb
 800b068:	0800b0eb 	.word	0x0800b0eb
 800b06c:	0800b0eb 	.word	0x0800b0eb
 800b070:	0800b0eb 	.word	0x0800b0eb
 800b074:	0800b0eb 	.word	0x0800b0eb
 800b078:	0800b0eb 	.word	0x0800b0eb
 800b07c:	0800b0dd 	.word	0x0800b0dd
 800b080:	2b40      	cmp	r3, #64	@ 0x40
 800b082:	d02e      	beq.n	800b0e2 <UART_SetConfig+0xa36>
 800b084:	e031      	b.n	800b0ea <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b086:	f7fc f81f 	bl	80070c8 <HAL_RCC_GetPCLK1Freq>
 800b08a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b08c:	e033      	b.n	800b0f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b08e:	f7fc f831 	bl	80070f4 <HAL_RCC_GetPCLK2Freq>
 800b092:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b094:	e02f      	b.n	800b0f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b096:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b09a:	4618      	mov	r0, r3
 800b09c:	f7fd fa60 	bl	8008560 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b0a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0a4:	e027      	b.n	800b0f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0a6:	f107 0318 	add.w	r3, r7, #24
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f7fd fbac 	bl	8008808 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b0b0:	69fb      	ldr	r3, [r7, #28]
 800b0b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0b4:	e01f      	b.n	800b0f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0b6:	4b2d      	ldr	r3, [pc, #180]	@ (800b16c <UART_SetConfig+0xac0>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f003 0320 	and.w	r3, r3, #32
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d009      	beq.n	800b0d6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b0c2:	4b2a      	ldr	r3, [pc, #168]	@ (800b16c <UART_SetConfig+0xac0>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	08db      	lsrs	r3, r3, #3
 800b0c8:	f003 0303 	and.w	r3, r3, #3
 800b0cc:	4a28      	ldr	r2, [pc, #160]	@ (800b170 <UART_SetConfig+0xac4>)
 800b0ce:	fa22 f303 	lsr.w	r3, r2, r3
 800b0d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b0d4:	e00f      	b.n	800b0f6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b0d6:	4b26      	ldr	r3, [pc, #152]	@ (800b170 <UART_SetConfig+0xac4>)
 800b0d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0da:	e00c      	b.n	800b0f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b0dc:	4b25      	ldr	r3, [pc, #148]	@ (800b174 <UART_SetConfig+0xac8>)
 800b0de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0e0:	e009      	b.n	800b0f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b0e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b0e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0e8:	e005      	b.n	800b0f6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b0f4:	bf00      	nop
    }

    if (pclk != 0U)
 800b0f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d021      	beq.n	800b140 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b100:	4a1d      	ldr	r2, [pc, #116]	@ (800b178 <UART_SetConfig+0xacc>)
 800b102:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b106:	461a      	mov	r2, r3
 800b108:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b10a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	085b      	lsrs	r3, r3, #1
 800b114:	441a      	add	r2, r3
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b11e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b122:	2b0f      	cmp	r3, #15
 800b124:	d909      	bls.n	800b13a <UART_SetConfig+0xa8e>
 800b126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b128:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b12c:	d205      	bcs.n	800b13a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b12e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b130:	b29a      	uxth	r2, r3
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	60da      	str	r2, [r3, #12]
 800b138:	e002      	b.n	800b140 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b13a:	2301      	movs	r3, #1
 800b13c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	2201      	movs	r2, #1
 800b144:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	2201      	movs	r2, #1
 800b14c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	2200      	movs	r2, #0
 800b154:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	2200      	movs	r2, #0
 800b15a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b15c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b160:	4618      	mov	r0, r3
 800b162:	3748      	adds	r7, #72	@ 0x48
 800b164:	46bd      	mov	sp, r7
 800b166:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b16a:	bf00      	nop
 800b16c:	58024400 	.word	0x58024400
 800b170:	03d09000 	.word	0x03d09000
 800b174:	003d0900 	.word	0x003d0900
 800b178:	0801237c 	.word	0x0801237c

0800b17c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b083      	sub	sp, #12
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b188:	f003 0308 	and.w	r3, r3, #8
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d00a      	beq.n	800b1a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	685b      	ldr	r3, [r3, #4]
 800b196:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	430a      	orrs	r2, r1
 800b1a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1aa:	f003 0301 	and.w	r3, r3, #1
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d00a      	beq.n	800b1c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	685b      	ldr	r3, [r3, #4]
 800b1b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	430a      	orrs	r2, r1
 800b1c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1cc:	f003 0302 	and.w	r3, r3, #2
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d00a      	beq.n	800b1ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	685b      	ldr	r3, [r3, #4]
 800b1da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	430a      	orrs	r2, r1
 800b1e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1ee:	f003 0304 	and.w	r3, r3, #4
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d00a      	beq.n	800b20c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	430a      	orrs	r2, r1
 800b20a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b210:	f003 0310 	and.w	r3, r3, #16
 800b214:	2b00      	cmp	r3, #0
 800b216:	d00a      	beq.n	800b22e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	689b      	ldr	r3, [r3, #8]
 800b21e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	430a      	orrs	r2, r1
 800b22c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b232:	f003 0320 	and.w	r3, r3, #32
 800b236:	2b00      	cmp	r3, #0
 800b238:	d00a      	beq.n	800b250 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	689b      	ldr	r3, [r3, #8]
 800b240:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	430a      	orrs	r2, r1
 800b24e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d01a      	beq.n	800b292 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	685b      	ldr	r3, [r3, #4]
 800b262:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	430a      	orrs	r2, r1
 800b270:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b276:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b27a:	d10a      	bne.n	800b292 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	430a      	orrs	r2, r1
 800b290:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b296:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d00a      	beq.n	800b2b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	430a      	orrs	r2, r1
 800b2b2:	605a      	str	r2, [r3, #4]
  }
}
 800b2b4:	bf00      	nop
 800b2b6:	370c      	adds	r7, #12
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr

0800b2c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b098      	sub	sp, #96	@ 0x60
 800b2c4:	af02      	add	r7, sp, #8
 800b2c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b2d0:	f7f6 ff7e 	bl	80021d0 <HAL_GetTick>
 800b2d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f003 0308 	and.w	r3, r3, #8
 800b2e0:	2b08      	cmp	r3, #8
 800b2e2:	d12f      	bne.n	800b344 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b2e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b2e8:	9300      	str	r3, [sp, #0]
 800b2ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f000 f88e 	bl	800b414 <UART_WaitOnFlagUntilTimeout>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d022      	beq.n	800b344 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b306:	e853 3f00 	ldrex	r3, [r3]
 800b30a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b30c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b30e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b312:	653b      	str	r3, [r7, #80]	@ 0x50
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	461a      	mov	r2, r3
 800b31a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b31c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b31e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b320:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b322:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b324:	e841 2300 	strex	r3, r2, [r1]
 800b328:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b32a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d1e6      	bne.n	800b2fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2220      	movs	r2, #32
 800b334:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2200      	movs	r2, #0
 800b33c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b340:	2303      	movs	r3, #3
 800b342:	e063      	b.n	800b40c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f003 0304 	and.w	r3, r3, #4
 800b34e:	2b04      	cmp	r3, #4
 800b350:	d149      	bne.n	800b3e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b352:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b356:	9300      	str	r3, [sp, #0]
 800b358:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b35a:	2200      	movs	r2, #0
 800b35c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f000 f857 	bl	800b414 <UART_WaitOnFlagUntilTimeout>
 800b366:	4603      	mov	r3, r0
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d03c      	beq.n	800b3e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b374:	e853 3f00 	ldrex	r3, [r3]
 800b378:	623b      	str	r3, [r7, #32]
   return(result);
 800b37a:	6a3b      	ldr	r3, [r7, #32]
 800b37c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b380:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	461a      	mov	r2, r3
 800b388:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b38a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b38c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b38e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b390:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b392:	e841 2300 	strex	r3, r2, [r1]
 800b396:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d1e6      	bne.n	800b36c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	3308      	adds	r3, #8
 800b3a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	e853 3f00 	ldrex	r3, [r3]
 800b3ac:	60fb      	str	r3, [r7, #12]
   return(result);
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	f023 0301 	bic.w	r3, r3, #1
 800b3b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	3308      	adds	r3, #8
 800b3bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b3be:	61fa      	str	r2, [r7, #28]
 800b3c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3c2:	69b9      	ldr	r1, [r7, #24]
 800b3c4:	69fa      	ldr	r2, [r7, #28]
 800b3c6:	e841 2300 	strex	r3, r2, [r1]
 800b3ca:	617b      	str	r3, [r7, #20]
   return(result);
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d1e5      	bne.n	800b39e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2220      	movs	r2, #32
 800b3d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b3e2:	2303      	movs	r3, #3
 800b3e4:	e012      	b.n	800b40c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2220      	movs	r2, #32
 800b3ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2220      	movs	r2, #32
 800b3f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2200      	movs	r2, #0
 800b400:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2200      	movs	r2, #0
 800b406:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b40a:	2300      	movs	r3, #0
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3758      	adds	r7, #88	@ 0x58
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}

0800b414 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b084      	sub	sp, #16
 800b418:	af00      	add	r7, sp, #0
 800b41a:	60f8      	str	r0, [r7, #12]
 800b41c:	60b9      	str	r1, [r7, #8]
 800b41e:	603b      	str	r3, [r7, #0]
 800b420:	4613      	mov	r3, r2
 800b422:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b424:	e04f      	b.n	800b4c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b426:	69bb      	ldr	r3, [r7, #24]
 800b428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b42c:	d04b      	beq.n	800b4c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b42e:	f7f6 fecf 	bl	80021d0 <HAL_GetTick>
 800b432:	4602      	mov	r2, r0
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	1ad3      	subs	r3, r2, r3
 800b438:	69ba      	ldr	r2, [r7, #24]
 800b43a:	429a      	cmp	r2, r3
 800b43c:	d302      	bcc.n	800b444 <UART_WaitOnFlagUntilTimeout+0x30>
 800b43e:	69bb      	ldr	r3, [r7, #24]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d101      	bne.n	800b448 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b444:	2303      	movs	r3, #3
 800b446:	e04e      	b.n	800b4e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f003 0304 	and.w	r3, r3, #4
 800b452:	2b00      	cmp	r3, #0
 800b454:	d037      	beq.n	800b4c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	2b80      	cmp	r3, #128	@ 0x80
 800b45a:	d034      	beq.n	800b4c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	2b40      	cmp	r3, #64	@ 0x40
 800b460:	d031      	beq.n	800b4c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	69db      	ldr	r3, [r3, #28]
 800b468:	f003 0308 	and.w	r3, r3, #8
 800b46c:	2b08      	cmp	r3, #8
 800b46e:	d110      	bne.n	800b492 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	2208      	movs	r2, #8
 800b476:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b478:	68f8      	ldr	r0, [r7, #12]
 800b47a:	f000 f839 	bl	800b4f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	2208      	movs	r2, #8
 800b482:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	2200      	movs	r2, #0
 800b48a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b48e:	2301      	movs	r3, #1
 800b490:	e029      	b.n	800b4e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	69db      	ldr	r3, [r3, #28]
 800b498:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b49c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b4a0:	d111      	bne.n	800b4c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b4aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b4ac:	68f8      	ldr	r0, [r7, #12]
 800b4ae:	f000 f81f 	bl	800b4f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	2220      	movs	r2, #32
 800b4b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b4c2:	2303      	movs	r3, #3
 800b4c4:	e00f      	b.n	800b4e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	69da      	ldr	r2, [r3, #28]
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	4013      	ands	r3, r2
 800b4d0:	68ba      	ldr	r2, [r7, #8]
 800b4d2:	429a      	cmp	r2, r3
 800b4d4:	bf0c      	ite	eq
 800b4d6:	2301      	moveq	r3, #1
 800b4d8:	2300      	movne	r3, #0
 800b4da:	b2db      	uxtb	r3, r3
 800b4dc:	461a      	mov	r2, r3
 800b4de:	79fb      	ldrb	r3, [r7, #7]
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	d0a0      	beq.n	800b426 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b4e4:	2300      	movs	r3, #0
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3710      	adds	r7, #16
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}
	...

0800b4f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b095      	sub	sp, #84	@ 0x54
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b500:	e853 3f00 	ldrex	r3, [r3]
 800b504:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b508:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b50c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	461a      	mov	r2, r3
 800b514:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b516:	643b      	str	r3, [r7, #64]	@ 0x40
 800b518:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b51a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b51c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b51e:	e841 2300 	strex	r3, r2, [r1]
 800b522:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b526:	2b00      	cmp	r3, #0
 800b528:	d1e6      	bne.n	800b4f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	3308      	adds	r3, #8
 800b530:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b532:	6a3b      	ldr	r3, [r7, #32]
 800b534:	e853 3f00 	ldrex	r3, [r3]
 800b538:	61fb      	str	r3, [r7, #28]
   return(result);
 800b53a:	69fa      	ldr	r2, [r7, #28]
 800b53c:	4b1e      	ldr	r3, [pc, #120]	@ (800b5b8 <UART_EndRxTransfer+0xc8>)
 800b53e:	4013      	ands	r3, r2
 800b540:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	3308      	adds	r3, #8
 800b548:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b54a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b54c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b54e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b550:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b552:	e841 2300 	strex	r3, r2, [r1]
 800b556:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d1e5      	bne.n	800b52a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b562:	2b01      	cmp	r3, #1
 800b564:	d118      	bne.n	800b598 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	e853 3f00 	ldrex	r3, [r3]
 800b572:	60bb      	str	r3, [r7, #8]
   return(result);
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	f023 0310 	bic.w	r3, r3, #16
 800b57a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	461a      	mov	r2, r3
 800b582:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b584:	61bb      	str	r3, [r7, #24]
 800b586:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b588:	6979      	ldr	r1, [r7, #20]
 800b58a:	69ba      	ldr	r2, [r7, #24]
 800b58c:	e841 2300 	strex	r3, r2, [r1]
 800b590:	613b      	str	r3, [r7, #16]
   return(result);
 800b592:	693b      	ldr	r3, [r7, #16]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d1e6      	bne.n	800b566 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2220      	movs	r2, #32
 800b59c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b5ac:	bf00      	nop
 800b5ae:	3754      	adds	r7, #84	@ 0x54
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b6:	4770      	bx	lr
 800b5b8:	effffffe 	.word	0xeffffffe

0800b5bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b5bc:	b084      	sub	sp, #16
 800b5be:	b580      	push	{r7, lr}
 800b5c0:	b084      	sub	sp, #16
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
 800b5c6:	f107 001c 	add.w	r0, r7, #28
 800b5ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b5ce:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b5d2:	2b01      	cmp	r3, #1
 800b5d4:	d121      	bne.n	800b61a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5da:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	68da      	ldr	r2, [r3, #12]
 800b5e6:	4b2c      	ldr	r3, [pc, #176]	@ (800b698 <USB_CoreInit+0xdc>)
 800b5e8:	4013      	ands	r3, r2
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	68db      	ldr	r3, [r3, #12]
 800b5f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b5fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b5fe:	2b01      	cmp	r3, #1
 800b600:	d105      	bne.n	800b60e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	68db      	ldr	r3, [r3, #12]
 800b606:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f001 faf6 	bl	800cc00 <USB_CoreReset>
 800b614:	4603      	mov	r3, r0
 800b616:	73fb      	strb	r3, [r7, #15]
 800b618:	e01b      	b.n	800b652 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	68db      	ldr	r3, [r3, #12]
 800b61e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f001 faea 	bl	800cc00 <USB_CoreReset>
 800b62c:	4603      	mov	r3, r0
 800b62e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b630:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b634:	2b00      	cmp	r3, #0
 800b636:	d106      	bne.n	800b646 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b63c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	639a      	str	r2, [r3, #56]	@ 0x38
 800b644:	e005      	b.n	800b652 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b64a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b652:	7fbb      	ldrb	r3, [r7, #30]
 800b654:	2b01      	cmp	r3, #1
 800b656:	d116      	bne.n	800b686 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b65c:	b29a      	uxth	r2, r3
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b666:	4b0d      	ldr	r3, [pc, #52]	@ (800b69c <USB_CoreInit+0xe0>)
 800b668:	4313      	orrs	r3, r2
 800b66a:	687a      	ldr	r2, [r7, #4]
 800b66c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	689b      	ldr	r3, [r3, #8]
 800b672:	f043 0206 	orr.w	r2, r3, #6
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	689b      	ldr	r3, [r3, #8]
 800b67e:	f043 0220 	orr.w	r2, r3, #32
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b686:	7bfb      	ldrb	r3, [r7, #15]
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3710      	adds	r7, #16
 800b68c:	46bd      	mov	sp, r7
 800b68e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b692:	b004      	add	sp, #16
 800b694:	4770      	bx	lr
 800b696:	bf00      	nop
 800b698:	ffbdffbf 	.word	0xffbdffbf
 800b69c:	03ee0000 	.word	0x03ee0000

0800b6a0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b087      	sub	sp, #28
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	60f8      	str	r0, [r7, #12]
 800b6a8:	60b9      	str	r1, [r7, #8]
 800b6aa:	4613      	mov	r3, r2
 800b6ac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b6ae:	79fb      	ldrb	r3, [r7, #7]
 800b6b0:	2b02      	cmp	r3, #2
 800b6b2:	d165      	bne.n	800b780 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	4a41      	ldr	r2, [pc, #260]	@ (800b7bc <USB_SetTurnaroundTime+0x11c>)
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d906      	bls.n	800b6ca <USB_SetTurnaroundTime+0x2a>
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	4a40      	ldr	r2, [pc, #256]	@ (800b7c0 <USB_SetTurnaroundTime+0x120>)
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	d202      	bcs.n	800b6ca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b6c4:	230f      	movs	r3, #15
 800b6c6:	617b      	str	r3, [r7, #20]
 800b6c8:	e062      	b.n	800b790 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	4a3c      	ldr	r2, [pc, #240]	@ (800b7c0 <USB_SetTurnaroundTime+0x120>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d306      	bcc.n	800b6e0 <USB_SetTurnaroundTime+0x40>
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	4a3b      	ldr	r2, [pc, #236]	@ (800b7c4 <USB_SetTurnaroundTime+0x124>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d202      	bcs.n	800b6e0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b6da:	230e      	movs	r3, #14
 800b6dc:	617b      	str	r3, [r7, #20]
 800b6de:	e057      	b.n	800b790 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	4a38      	ldr	r2, [pc, #224]	@ (800b7c4 <USB_SetTurnaroundTime+0x124>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d306      	bcc.n	800b6f6 <USB_SetTurnaroundTime+0x56>
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	4a37      	ldr	r2, [pc, #220]	@ (800b7c8 <USB_SetTurnaroundTime+0x128>)
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	d202      	bcs.n	800b6f6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b6f0:	230d      	movs	r3, #13
 800b6f2:	617b      	str	r3, [r7, #20]
 800b6f4:	e04c      	b.n	800b790 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	4a33      	ldr	r2, [pc, #204]	@ (800b7c8 <USB_SetTurnaroundTime+0x128>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d306      	bcc.n	800b70c <USB_SetTurnaroundTime+0x6c>
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	4a32      	ldr	r2, [pc, #200]	@ (800b7cc <USB_SetTurnaroundTime+0x12c>)
 800b702:	4293      	cmp	r3, r2
 800b704:	d802      	bhi.n	800b70c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b706:	230c      	movs	r3, #12
 800b708:	617b      	str	r3, [r7, #20]
 800b70a:	e041      	b.n	800b790 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	4a2f      	ldr	r2, [pc, #188]	@ (800b7cc <USB_SetTurnaroundTime+0x12c>)
 800b710:	4293      	cmp	r3, r2
 800b712:	d906      	bls.n	800b722 <USB_SetTurnaroundTime+0x82>
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	4a2e      	ldr	r2, [pc, #184]	@ (800b7d0 <USB_SetTurnaroundTime+0x130>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	d802      	bhi.n	800b722 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b71c:	230b      	movs	r3, #11
 800b71e:	617b      	str	r3, [r7, #20]
 800b720:	e036      	b.n	800b790 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	4a2a      	ldr	r2, [pc, #168]	@ (800b7d0 <USB_SetTurnaroundTime+0x130>)
 800b726:	4293      	cmp	r3, r2
 800b728:	d906      	bls.n	800b738 <USB_SetTurnaroundTime+0x98>
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	4a29      	ldr	r2, [pc, #164]	@ (800b7d4 <USB_SetTurnaroundTime+0x134>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	d802      	bhi.n	800b738 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b732:	230a      	movs	r3, #10
 800b734:	617b      	str	r3, [r7, #20]
 800b736:	e02b      	b.n	800b790 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	4a26      	ldr	r2, [pc, #152]	@ (800b7d4 <USB_SetTurnaroundTime+0x134>)
 800b73c:	4293      	cmp	r3, r2
 800b73e:	d906      	bls.n	800b74e <USB_SetTurnaroundTime+0xae>
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	4a25      	ldr	r2, [pc, #148]	@ (800b7d8 <USB_SetTurnaroundTime+0x138>)
 800b744:	4293      	cmp	r3, r2
 800b746:	d202      	bcs.n	800b74e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b748:	2309      	movs	r3, #9
 800b74a:	617b      	str	r3, [r7, #20]
 800b74c:	e020      	b.n	800b790 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	4a21      	ldr	r2, [pc, #132]	@ (800b7d8 <USB_SetTurnaroundTime+0x138>)
 800b752:	4293      	cmp	r3, r2
 800b754:	d306      	bcc.n	800b764 <USB_SetTurnaroundTime+0xc4>
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	4a20      	ldr	r2, [pc, #128]	@ (800b7dc <USB_SetTurnaroundTime+0x13c>)
 800b75a:	4293      	cmp	r3, r2
 800b75c:	d802      	bhi.n	800b764 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b75e:	2308      	movs	r3, #8
 800b760:	617b      	str	r3, [r7, #20]
 800b762:	e015      	b.n	800b790 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	4a1d      	ldr	r2, [pc, #116]	@ (800b7dc <USB_SetTurnaroundTime+0x13c>)
 800b768:	4293      	cmp	r3, r2
 800b76a:	d906      	bls.n	800b77a <USB_SetTurnaroundTime+0xda>
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	4a1c      	ldr	r2, [pc, #112]	@ (800b7e0 <USB_SetTurnaroundTime+0x140>)
 800b770:	4293      	cmp	r3, r2
 800b772:	d202      	bcs.n	800b77a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b774:	2307      	movs	r3, #7
 800b776:	617b      	str	r3, [r7, #20]
 800b778:	e00a      	b.n	800b790 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b77a:	2306      	movs	r3, #6
 800b77c:	617b      	str	r3, [r7, #20]
 800b77e:	e007      	b.n	800b790 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b780:	79fb      	ldrb	r3, [r7, #7]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d102      	bne.n	800b78c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b786:	2309      	movs	r3, #9
 800b788:	617b      	str	r3, [r7, #20]
 800b78a:	e001      	b.n	800b790 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b78c:	2309      	movs	r3, #9
 800b78e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	68db      	ldr	r3, [r3, #12]
 800b794:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	68da      	ldr	r2, [r3, #12]
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	029b      	lsls	r3, r3, #10
 800b7a4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800b7a8:	431a      	orrs	r2, r3
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b7ae:	2300      	movs	r3, #0
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	371c      	adds	r7, #28
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr
 800b7bc:	00d8acbf 	.word	0x00d8acbf
 800b7c0:	00e4e1c0 	.word	0x00e4e1c0
 800b7c4:	00f42400 	.word	0x00f42400
 800b7c8:	01067380 	.word	0x01067380
 800b7cc:	011a499f 	.word	0x011a499f
 800b7d0:	01312cff 	.word	0x01312cff
 800b7d4:	014ca43f 	.word	0x014ca43f
 800b7d8:	016e3600 	.word	0x016e3600
 800b7dc:	01a6ab1f 	.word	0x01a6ab1f
 800b7e0:	01e84800 	.word	0x01e84800

0800b7e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b083      	sub	sp, #12
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	689b      	ldr	r3, [r3, #8]
 800b7f0:	f043 0201 	orr.w	r2, r3, #1
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b7f8:	2300      	movs	r3, #0
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	370c      	adds	r7, #12
 800b7fe:	46bd      	mov	sp, r7
 800b800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b804:	4770      	bx	lr

0800b806 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b806:	b480      	push	{r7}
 800b808:	b083      	sub	sp, #12
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	689b      	ldr	r3, [r3, #8]
 800b812:	f023 0201 	bic.w	r2, r3, #1
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b81a:	2300      	movs	r3, #0
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	370c      	adds	r7, #12
 800b820:	46bd      	mov	sp, r7
 800b822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b826:	4770      	bx	lr

0800b828 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b084      	sub	sp, #16
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	460b      	mov	r3, r1
 800b832:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b834:	2300      	movs	r3, #0
 800b836:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	68db      	ldr	r3, [r3, #12]
 800b83c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b844:	78fb      	ldrb	r3, [r7, #3]
 800b846:	2b01      	cmp	r3, #1
 800b848:	d115      	bne.n	800b876 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	68db      	ldr	r3, [r3, #12]
 800b84e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b856:	200a      	movs	r0, #10
 800b858:	f7f6 fcc6 	bl	80021e8 <HAL_Delay>
      ms += 10U;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	330a      	adds	r3, #10
 800b860:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f001 f93b 	bl	800cade <USB_GetMode>
 800b868:	4603      	mov	r3, r0
 800b86a:	2b01      	cmp	r3, #1
 800b86c:	d01e      	beq.n	800b8ac <USB_SetCurrentMode+0x84>
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2bc7      	cmp	r3, #199	@ 0xc7
 800b872:	d9f0      	bls.n	800b856 <USB_SetCurrentMode+0x2e>
 800b874:	e01a      	b.n	800b8ac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b876:	78fb      	ldrb	r3, [r7, #3]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d115      	bne.n	800b8a8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	68db      	ldr	r3, [r3, #12]
 800b880:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b888:	200a      	movs	r0, #10
 800b88a:	f7f6 fcad 	bl	80021e8 <HAL_Delay>
      ms += 10U;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	330a      	adds	r3, #10
 800b892:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f001 f922 	bl	800cade <USB_GetMode>
 800b89a:	4603      	mov	r3, r0
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d005      	beq.n	800b8ac <USB_SetCurrentMode+0x84>
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2bc7      	cmp	r3, #199	@ 0xc7
 800b8a4:	d9f0      	bls.n	800b888 <USB_SetCurrentMode+0x60>
 800b8a6:	e001      	b.n	800b8ac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	e005      	b.n	800b8b8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2bc8      	cmp	r3, #200	@ 0xc8
 800b8b0:	d101      	bne.n	800b8b6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	e000      	b.n	800b8b8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b8b6:	2300      	movs	r3, #0
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3710      	adds	r7, #16
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b8c0:	b084      	sub	sp, #16
 800b8c2:	b580      	push	{r7, lr}
 800b8c4:	b086      	sub	sp, #24
 800b8c6:	af00      	add	r7, sp, #0
 800b8c8:	6078      	str	r0, [r7, #4]
 800b8ca:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b8ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b8da:	2300      	movs	r3, #0
 800b8dc:	613b      	str	r3, [r7, #16]
 800b8de:	e009      	b.n	800b8f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b8e0:	687a      	ldr	r2, [r7, #4]
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	3340      	adds	r3, #64	@ 0x40
 800b8e6:	009b      	lsls	r3, r3, #2
 800b8e8:	4413      	add	r3, r2
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	613b      	str	r3, [r7, #16]
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	2b0e      	cmp	r3, #14
 800b8f8:	d9f2      	bls.n	800b8e0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b8fa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d11c      	bne.n	800b93c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b908:	685b      	ldr	r3, [r3, #4]
 800b90a:	68fa      	ldr	r2, [r7, #12]
 800b90c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b910:	f043 0302 	orr.w	r3, r3, #2
 800b914:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b91a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	601a      	str	r2, [r3, #0]
 800b93a:	e005      	b.n	800b948 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b940:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b94e:	461a      	mov	r2, r3
 800b950:	2300      	movs	r3, #0
 800b952:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b954:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800b958:	2b01      	cmp	r3, #1
 800b95a:	d10d      	bne.n	800b978 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b95c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b960:	2b00      	cmp	r3, #0
 800b962:	d104      	bne.n	800b96e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b964:	2100      	movs	r1, #0
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f000 f968 	bl	800bc3c <USB_SetDevSpeed>
 800b96c:	e008      	b.n	800b980 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b96e:	2101      	movs	r1, #1
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f000 f963 	bl	800bc3c <USB_SetDevSpeed>
 800b976:	e003      	b.n	800b980 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b978:	2103      	movs	r1, #3
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f000 f95e 	bl	800bc3c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b980:	2110      	movs	r1, #16
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 f8fa 	bl	800bb7c <USB_FlushTxFifo>
 800b988:	4603      	mov	r3, r0
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d001      	beq.n	800b992 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800b98e:	2301      	movs	r3, #1
 800b990:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f000 f924 	bl	800bbe0 <USB_FlushRxFifo>
 800b998:	4603      	mov	r3, r0
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d001      	beq.n	800b9a2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800b99e:	2301      	movs	r3, #1
 800b9a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9a8:	461a      	mov	r2, r3
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9b4:	461a      	mov	r2, r3
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9c0:	461a      	mov	r2, r3
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	613b      	str	r3, [r7, #16]
 800b9ca:	e043      	b.n	800ba54 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	015a      	lsls	r2, r3, #5
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	4413      	add	r3, r2
 800b9d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b9de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b9e2:	d118      	bne.n	800ba16 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d10a      	bne.n	800ba00 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	015a      	lsls	r2, r3, #5
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	4413      	add	r3, r2
 800b9f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9f6:	461a      	mov	r2, r3
 800b9f8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b9fc:	6013      	str	r3, [r2, #0]
 800b9fe:	e013      	b.n	800ba28 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	015a      	lsls	r2, r3, #5
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	4413      	add	r3, r2
 800ba08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba0c:	461a      	mov	r2, r3
 800ba0e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ba12:	6013      	str	r3, [r2, #0]
 800ba14:	e008      	b.n	800ba28 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	015a      	lsls	r2, r3, #5
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	4413      	add	r3, r2
 800ba1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba22:	461a      	mov	r2, r3
 800ba24:	2300      	movs	r3, #0
 800ba26:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	015a      	lsls	r2, r3, #5
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	4413      	add	r3, r2
 800ba30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba34:	461a      	mov	r2, r3
 800ba36:	2300      	movs	r3, #0
 800ba38:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	015a      	lsls	r2, r3, #5
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	4413      	add	r3, r2
 800ba42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba46:	461a      	mov	r2, r3
 800ba48:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ba4c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ba4e:	693b      	ldr	r3, [r7, #16]
 800ba50:	3301      	adds	r3, #1
 800ba52:	613b      	str	r3, [r7, #16]
 800ba54:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ba58:	461a      	mov	r2, r3
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d3b5      	bcc.n	800b9cc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ba60:	2300      	movs	r3, #0
 800ba62:	613b      	str	r3, [r7, #16]
 800ba64:	e043      	b.n	800baee <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	015a      	lsls	r2, r3, #5
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	4413      	add	r3, r2
 800ba6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ba78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ba7c:	d118      	bne.n	800bab0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800ba7e:	693b      	ldr	r3, [r7, #16]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d10a      	bne.n	800ba9a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ba84:	693b      	ldr	r3, [r7, #16]
 800ba86:	015a      	lsls	r2, r3, #5
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	4413      	add	r3, r2
 800ba8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba90:	461a      	mov	r2, r3
 800ba92:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ba96:	6013      	str	r3, [r2, #0]
 800ba98:	e013      	b.n	800bac2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	015a      	lsls	r2, r3, #5
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	4413      	add	r3, r2
 800baa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800baa6:	461a      	mov	r2, r3
 800baa8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800baac:	6013      	str	r3, [r2, #0]
 800baae:	e008      	b.n	800bac2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	015a      	lsls	r2, r3, #5
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	4413      	add	r3, r2
 800bab8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800babc:	461a      	mov	r2, r3
 800babe:	2300      	movs	r3, #0
 800bac0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	015a      	lsls	r2, r3, #5
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	4413      	add	r3, r2
 800baca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bace:	461a      	mov	r2, r3
 800bad0:	2300      	movs	r3, #0
 800bad2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	015a      	lsls	r2, r3, #5
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	4413      	add	r3, r2
 800badc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bae0:	461a      	mov	r2, r3
 800bae2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bae6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bae8:	693b      	ldr	r3, [r7, #16]
 800baea:	3301      	adds	r3, #1
 800baec:	613b      	str	r3, [r7, #16]
 800baee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800baf2:	461a      	mov	r2, r3
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d3b5      	bcc.n	800ba66 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb00:	691b      	ldr	r3, [r3, #16]
 800bb02:	68fa      	ldr	r2, [r7, #12]
 800bb04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bb08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bb0c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2200      	movs	r2, #0
 800bb12:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800bb1a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bb1c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d105      	bne.n	800bb30 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	699b      	ldr	r3, [r3, #24]
 800bb28:	f043 0210 	orr.w	r2, r3, #16
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	699a      	ldr	r2, [r3, #24]
 800bb34:	4b0f      	ldr	r3, [pc, #60]	@ (800bb74 <USB_DevInit+0x2b4>)
 800bb36:	4313      	orrs	r3, r2
 800bb38:	687a      	ldr	r2, [r7, #4]
 800bb3a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bb3c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d005      	beq.n	800bb50 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	699b      	ldr	r3, [r3, #24]
 800bb48:	f043 0208 	orr.w	r2, r3, #8
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bb50:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bb54:	2b01      	cmp	r3, #1
 800bb56:	d105      	bne.n	800bb64 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	699a      	ldr	r2, [r3, #24]
 800bb5c:	4b06      	ldr	r3, [pc, #24]	@ (800bb78 <USB_DevInit+0x2b8>)
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	687a      	ldr	r2, [r7, #4]
 800bb62:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bb64:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3718      	adds	r7, #24
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bb70:	b004      	add	sp, #16
 800bb72:	4770      	bx	lr
 800bb74:	803c3800 	.word	0x803c3800
 800bb78:	40000004 	.word	0x40000004

0800bb7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b085      	sub	sp, #20
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bb86:	2300      	movs	r3, #0
 800bb88:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	3301      	adds	r3, #1
 800bb8e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bb96:	d901      	bls.n	800bb9c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bb98:	2303      	movs	r3, #3
 800bb9a:	e01b      	b.n	800bbd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	691b      	ldr	r3, [r3, #16]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	daf2      	bge.n	800bb8a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bba4:	2300      	movs	r3, #0
 800bba6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	019b      	lsls	r3, r3, #6
 800bbac:	f043 0220 	orr.w	r2, r3, #32
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	3301      	adds	r3, #1
 800bbb8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bbc0:	d901      	bls.n	800bbc6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bbc2:	2303      	movs	r3, #3
 800bbc4:	e006      	b.n	800bbd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	691b      	ldr	r3, [r3, #16]
 800bbca:	f003 0320 	and.w	r3, r3, #32
 800bbce:	2b20      	cmp	r3, #32
 800bbd0:	d0f0      	beq.n	800bbb4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bbd2:	2300      	movs	r3, #0
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3714      	adds	r7, #20
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	4770      	bx	lr

0800bbe0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b085      	sub	sp, #20
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	3301      	adds	r3, #1
 800bbf0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bbf8:	d901      	bls.n	800bbfe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bbfa:	2303      	movs	r3, #3
 800bbfc:	e018      	b.n	800bc30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	691b      	ldr	r3, [r3, #16]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	daf2      	bge.n	800bbec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bc06:	2300      	movs	r3, #0
 800bc08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2210      	movs	r2, #16
 800bc0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	3301      	adds	r3, #1
 800bc14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bc1c:	d901      	bls.n	800bc22 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bc1e:	2303      	movs	r3, #3
 800bc20:	e006      	b.n	800bc30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	691b      	ldr	r3, [r3, #16]
 800bc26:	f003 0310 	and.w	r3, r3, #16
 800bc2a:	2b10      	cmp	r3, #16
 800bc2c:	d0f0      	beq.n	800bc10 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bc2e:	2300      	movs	r3, #0
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3714      	adds	r7, #20
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr

0800bc3c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b085      	sub	sp, #20
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	460b      	mov	r3, r1
 800bc46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc52:	681a      	ldr	r2, [r3, #0]
 800bc54:	78fb      	ldrb	r3, [r7, #3]
 800bc56:	68f9      	ldr	r1, [r7, #12]
 800bc58:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bc5c:	4313      	orrs	r3, r2
 800bc5e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bc60:	2300      	movs	r3, #0
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3714      	adds	r7, #20
 800bc66:	46bd      	mov	sp, r7
 800bc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6c:	4770      	bx	lr

0800bc6e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800bc6e:	b480      	push	{r7}
 800bc70:	b087      	sub	sp, #28
 800bc72:	af00      	add	r7, sp, #0
 800bc74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc80:	689b      	ldr	r3, [r3, #8]
 800bc82:	f003 0306 	and.w	r3, r3, #6
 800bc86:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d102      	bne.n	800bc94 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	75fb      	strb	r3, [r7, #23]
 800bc92:	e00a      	b.n	800bcaa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	2b02      	cmp	r3, #2
 800bc98:	d002      	beq.n	800bca0 <USB_GetDevSpeed+0x32>
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	2b06      	cmp	r3, #6
 800bc9e:	d102      	bne.n	800bca6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bca0:	2302      	movs	r3, #2
 800bca2:	75fb      	strb	r3, [r7, #23]
 800bca4:	e001      	b.n	800bcaa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800bca6:	230f      	movs	r3, #15
 800bca8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bcaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	371c      	adds	r7, #28
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr

0800bcb8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b085      	sub	sp, #20
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	781b      	ldrb	r3, [r3, #0]
 800bcca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	785b      	ldrb	r3, [r3, #1]
 800bcd0:	2b01      	cmp	r3, #1
 800bcd2:	d139      	bne.n	800bd48 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bcda:	69da      	ldr	r2, [r3, #28]
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	781b      	ldrb	r3, [r3, #0]
 800bce0:	f003 030f 	and.w	r3, r3, #15
 800bce4:	2101      	movs	r1, #1
 800bce6:	fa01 f303 	lsl.w	r3, r1, r3
 800bcea:	b29b      	uxth	r3, r3
 800bcec:	68f9      	ldr	r1, [r7, #12]
 800bcee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bcf2:	4313      	orrs	r3, r2
 800bcf4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	015a      	lsls	r2, r3, #5
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	4413      	add	r3, r2
 800bcfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d153      	bne.n	800bdb4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	015a      	lsls	r2, r3, #5
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	4413      	add	r3, r2
 800bd14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd18:	681a      	ldr	r2, [r3, #0]
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	689b      	ldr	r3, [r3, #8]
 800bd1e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	791b      	ldrb	r3, [r3, #4]
 800bd26:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bd28:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	059b      	lsls	r3, r3, #22
 800bd2e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bd30:	431a      	orrs	r2, r3
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	0159      	lsls	r1, r3, #5
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	440b      	add	r3, r1
 800bd3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd3e:	4619      	mov	r1, r3
 800bd40:	4b20      	ldr	r3, [pc, #128]	@ (800bdc4 <USB_ActivateEndpoint+0x10c>)
 800bd42:	4313      	orrs	r3, r2
 800bd44:	600b      	str	r3, [r1, #0]
 800bd46:	e035      	b.n	800bdb4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd4e:	69da      	ldr	r2, [r3, #28]
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	781b      	ldrb	r3, [r3, #0]
 800bd54:	f003 030f 	and.w	r3, r3, #15
 800bd58:	2101      	movs	r1, #1
 800bd5a:	fa01 f303 	lsl.w	r3, r1, r3
 800bd5e:	041b      	lsls	r3, r3, #16
 800bd60:	68f9      	ldr	r1, [r7, #12]
 800bd62:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bd66:	4313      	orrs	r3, r2
 800bd68:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	015a      	lsls	r2, r3, #5
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	4413      	add	r3, r2
 800bd72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d119      	bne.n	800bdb4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	015a      	lsls	r2, r3, #5
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	4413      	add	r3, r2
 800bd88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd8c:	681a      	ldr	r2, [r3, #0]
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	689b      	ldr	r3, [r3, #8]
 800bd92:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	791b      	ldrb	r3, [r3, #4]
 800bd9a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bd9c:	430b      	orrs	r3, r1
 800bd9e:	431a      	orrs	r2, r3
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	0159      	lsls	r1, r3, #5
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	440b      	add	r3, r1
 800bda8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bdac:	4619      	mov	r1, r3
 800bdae:	4b05      	ldr	r3, [pc, #20]	@ (800bdc4 <USB_ActivateEndpoint+0x10c>)
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800bdb4:	2300      	movs	r3, #0
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	3714      	adds	r7, #20
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc0:	4770      	bx	lr
 800bdc2:	bf00      	nop
 800bdc4:	10008000 	.word	0x10008000

0800bdc8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b085      	sub	sp, #20
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	781b      	ldrb	r3, [r3, #0]
 800bdda:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	785b      	ldrb	r3, [r3, #1]
 800bde0:	2b01      	cmp	r3, #1
 800bde2:	d161      	bne.n	800bea8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	015a      	lsls	r2, r3, #5
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	4413      	add	r3, r2
 800bdec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bdf6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bdfa:	d11f      	bne.n	800be3c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	015a      	lsls	r2, r3, #5
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	4413      	add	r3, r2
 800be04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	68ba      	ldr	r2, [r7, #8]
 800be0c:	0151      	lsls	r1, r2, #5
 800be0e:	68fa      	ldr	r2, [r7, #12]
 800be10:	440a      	add	r2, r1
 800be12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800be16:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800be1a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	015a      	lsls	r2, r3, #5
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	4413      	add	r3, r2
 800be24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	68ba      	ldr	r2, [r7, #8]
 800be2c:	0151      	lsls	r1, r2, #5
 800be2e:	68fa      	ldr	r2, [r7, #12]
 800be30:	440a      	add	r2, r1
 800be32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800be36:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800be3a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	781b      	ldrb	r3, [r3, #0]
 800be48:	f003 030f 	and.w	r3, r3, #15
 800be4c:	2101      	movs	r1, #1
 800be4e:	fa01 f303 	lsl.w	r3, r1, r3
 800be52:	b29b      	uxth	r3, r3
 800be54:	43db      	mvns	r3, r3
 800be56:	68f9      	ldr	r1, [r7, #12]
 800be58:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800be5c:	4013      	ands	r3, r2
 800be5e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be66:	69da      	ldr	r2, [r3, #28]
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	f003 030f 	and.w	r3, r3, #15
 800be70:	2101      	movs	r1, #1
 800be72:	fa01 f303 	lsl.w	r3, r1, r3
 800be76:	b29b      	uxth	r3, r3
 800be78:	43db      	mvns	r3, r3
 800be7a:	68f9      	ldr	r1, [r7, #12]
 800be7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800be80:	4013      	ands	r3, r2
 800be82:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	015a      	lsls	r2, r3, #5
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	4413      	add	r3, r2
 800be8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be90:	681a      	ldr	r2, [r3, #0]
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	0159      	lsls	r1, r3, #5
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	440b      	add	r3, r1
 800be9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be9e:	4619      	mov	r1, r3
 800bea0:	4b35      	ldr	r3, [pc, #212]	@ (800bf78 <USB_DeactivateEndpoint+0x1b0>)
 800bea2:	4013      	ands	r3, r2
 800bea4:	600b      	str	r3, [r1, #0]
 800bea6:	e060      	b.n	800bf6a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	015a      	lsls	r2, r3, #5
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	4413      	add	r3, r2
 800beb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800beba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bebe:	d11f      	bne.n	800bf00 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	015a      	lsls	r2, r3, #5
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	4413      	add	r3, r2
 800bec8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	68ba      	ldr	r2, [r7, #8]
 800bed0:	0151      	lsls	r1, r2, #5
 800bed2:	68fa      	ldr	r2, [r7, #12]
 800bed4:	440a      	add	r2, r1
 800bed6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800beda:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bede:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	015a      	lsls	r2, r3, #5
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	4413      	add	r3, r2
 800bee8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	68ba      	ldr	r2, [r7, #8]
 800bef0:	0151      	lsls	r1, r2, #5
 800bef2:	68fa      	ldr	r2, [r7, #12]
 800bef4:	440a      	add	r2, r1
 800bef6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800befa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800befe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	781b      	ldrb	r3, [r3, #0]
 800bf0c:	f003 030f 	and.w	r3, r3, #15
 800bf10:	2101      	movs	r1, #1
 800bf12:	fa01 f303 	lsl.w	r3, r1, r3
 800bf16:	041b      	lsls	r3, r3, #16
 800bf18:	43db      	mvns	r3, r3
 800bf1a:	68f9      	ldr	r1, [r7, #12]
 800bf1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bf20:	4013      	ands	r3, r2
 800bf22:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf2a:	69da      	ldr	r2, [r3, #28]
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	781b      	ldrb	r3, [r3, #0]
 800bf30:	f003 030f 	and.w	r3, r3, #15
 800bf34:	2101      	movs	r1, #1
 800bf36:	fa01 f303 	lsl.w	r3, r1, r3
 800bf3a:	041b      	lsls	r3, r3, #16
 800bf3c:	43db      	mvns	r3, r3
 800bf3e:	68f9      	ldr	r1, [r7, #12]
 800bf40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bf44:	4013      	ands	r3, r2
 800bf46:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	015a      	lsls	r2, r3, #5
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	4413      	add	r3, r2
 800bf50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf54:	681a      	ldr	r2, [r3, #0]
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	0159      	lsls	r1, r3, #5
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	440b      	add	r3, r1
 800bf5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf62:	4619      	mov	r1, r3
 800bf64:	4b05      	ldr	r3, [pc, #20]	@ (800bf7c <USB_DeactivateEndpoint+0x1b4>)
 800bf66:	4013      	ands	r3, r2
 800bf68:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800bf6a:	2300      	movs	r3, #0
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3714      	adds	r7, #20
 800bf70:	46bd      	mov	sp, r7
 800bf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf76:	4770      	bx	lr
 800bf78:	ec337800 	.word	0xec337800
 800bf7c:	eff37800 	.word	0xeff37800

0800bf80 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b08a      	sub	sp, #40	@ 0x28
 800bf84:	af02      	add	r7, sp, #8
 800bf86:	60f8      	str	r0, [r7, #12]
 800bf88:	60b9      	str	r1, [r7, #8]
 800bf8a:	4613      	mov	r3, r2
 800bf8c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	781b      	ldrb	r3, [r3, #0]
 800bf96:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	785b      	ldrb	r3, [r3, #1]
 800bf9c:	2b01      	cmp	r3, #1
 800bf9e:	f040 8181 	bne.w	800c2a4 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	691b      	ldr	r3, [r3, #16]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d132      	bne.n	800c010 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bfaa:	69bb      	ldr	r3, [r7, #24]
 800bfac:	015a      	lsls	r2, r3, #5
 800bfae:	69fb      	ldr	r3, [r7, #28]
 800bfb0:	4413      	add	r3, r2
 800bfb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bfb6:	691a      	ldr	r2, [r3, #16]
 800bfb8:	69bb      	ldr	r3, [r7, #24]
 800bfba:	0159      	lsls	r1, r3, #5
 800bfbc:	69fb      	ldr	r3, [r7, #28]
 800bfbe:	440b      	add	r3, r1
 800bfc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bfc4:	4619      	mov	r1, r3
 800bfc6:	4ba5      	ldr	r3, [pc, #660]	@ (800c25c <USB_EPStartXfer+0x2dc>)
 800bfc8:	4013      	ands	r3, r2
 800bfca:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bfcc:	69bb      	ldr	r3, [r7, #24]
 800bfce:	015a      	lsls	r2, r3, #5
 800bfd0:	69fb      	ldr	r3, [r7, #28]
 800bfd2:	4413      	add	r3, r2
 800bfd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bfd8:	691b      	ldr	r3, [r3, #16]
 800bfda:	69ba      	ldr	r2, [r7, #24]
 800bfdc:	0151      	lsls	r1, r2, #5
 800bfde:	69fa      	ldr	r2, [r7, #28]
 800bfe0:	440a      	add	r2, r1
 800bfe2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bfe6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bfea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bfec:	69bb      	ldr	r3, [r7, #24]
 800bfee:	015a      	lsls	r2, r3, #5
 800bff0:	69fb      	ldr	r3, [r7, #28]
 800bff2:	4413      	add	r3, r2
 800bff4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bff8:	691a      	ldr	r2, [r3, #16]
 800bffa:	69bb      	ldr	r3, [r7, #24]
 800bffc:	0159      	lsls	r1, r3, #5
 800bffe:	69fb      	ldr	r3, [r7, #28]
 800c000:	440b      	add	r3, r1
 800c002:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c006:	4619      	mov	r1, r3
 800c008:	4b95      	ldr	r3, [pc, #596]	@ (800c260 <USB_EPStartXfer+0x2e0>)
 800c00a:	4013      	ands	r3, r2
 800c00c:	610b      	str	r3, [r1, #16]
 800c00e:	e092      	b.n	800c136 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c010:	69bb      	ldr	r3, [r7, #24]
 800c012:	015a      	lsls	r2, r3, #5
 800c014:	69fb      	ldr	r3, [r7, #28]
 800c016:	4413      	add	r3, r2
 800c018:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c01c:	691a      	ldr	r2, [r3, #16]
 800c01e:	69bb      	ldr	r3, [r7, #24]
 800c020:	0159      	lsls	r1, r3, #5
 800c022:	69fb      	ldr	r3, [r7, #28]
 800c024:	440b      	add	r3, r1
 800c026:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c02a:	4619      	mov	r1, r3
 800c02c:	4b8c      	ldr	r3, [pc, #560]	@ (800c260 <USB_EPStartXfer+0x2e0>)
 800c02e:	4013      	ands	r3, r2
 800c030:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c032:	69bb      	ldr	r3, [r7, #24]
 800c034:	015a      	lsls	r2, r3, #5
 800c036:	69fb      	ldr	r3, [r7, #28]
 800c038:	4413      	add	r3, r2
 800c03a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c03e:	691a      	ldr	r2, [r3, #16]
 800c040:	69bb      	ldr	r3, [r7, #24]
 800c042:	0159      	lsls	r1, r3, #5
 800c044:	69fb      	ldr	r3, [r7, #28]
 800c046:	440b      	add	r3, r1
 800c048:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c04c:	4619      	mov	r1, r3
 800c04e:	4b83      	ldr	r3, [pc, #524]	@ (800c25c <USB_EPStartXfer+0x2dc>)
 800c050:	4013      	ands	r3, r2
 800c052:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800c054:	69bb      	ldr	r3, [r7, #24]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d11a      	bne.n	800c090 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800c05a:	68bb      	ldr	r3, [r7, #8]
 800c05c:	691a      	ldr	r2, [r3, #16]
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	689b      	ldr	r3, [r3, #8]
 800c062:	429a      	cmp	r2, r3
 800c064:	d903      	bls.n	800c06e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	689a      	ldr	r2, [r3, #8]
 800c06a:	68bb      	ldr	r3, [r7, #8]
 800c06c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c06e:	69bb      	ldr	r3, [r7, #24]
 800c070:	015a      	lsls	r2, r3, #5
 800c072:	69fb      	ldr	r3, [r7, #28]
 800c074:	4413      	add	r3, r2
 800c076:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c07a:	691b      	ldr	r3, [r3, #16]
 800c07c:	69ba      	ldr	r2, [r7, #24]
 800c07e:	0151      	lsls	r1, r2, #5
 800c080:	69fa      	ldr	r2, [r7, #28]
 800c082:	440a      	add	r2, r1
 800c084:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c088:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c08c:	6113      	str	r3, [r2, #16]
 800c08e:	e01b      	b.n	800c0c8 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c090:	69bb      	ldr	r3, [r7, #24]
 800c092:	015a      	lsls	r2, r3, #5
 800c094:	69fb      	ldr	r3, [r7, #28]
 800c096:	4413      	add	r3, r2
 800c098:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c09c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	6919      	ldr	r1, [r3, #16]
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	689b      	ldr	r3, [r3, #8]
 800c0a6:	440b      	add	r3, r1
 800c0a8:	1e59      	subs	r1, r3, #1
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	689b      	ldr	r3, [r3, #8]
 800c0ae:	fbb1 f3f3 	udiv	r3, r1, r3
 800c0b2:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c0b4:	4b6b      	ldr	r3, [pc, #428]	@ (800c264 <USB_EPStartXfer+0x2e4>)
 800c0b6:	400b      	ands	r3, r1
 800c0b8:	69b9      	ldr	r1, [r7, #24]
 800c0ba:	0148      	lsls	r0, r1, #5
 800c0bc:	69f9      	ldr	r1, [r7, #28]
 800c0be:	4401      	add	r1, r0
 800c0c0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c0c4:	4313      	orrs	r3, r2
 800c0c6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c0c8:	69bb      	ldr	r3, [r7, #24]
 800c0ca:	015a      	lsls	r2, r3, #5
 800c0cc:	69fb      	ldr	r3, [r7, #28]
 800c0ce:	4413      	add	r3, r2
 800c0d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0d4:	691a      	ldr	r2, [r3, #16]
 800c0d6:	68bb      	ldr	r3, [r7, #8]
 800c0d8:	691b      	ldr	r3, [r3, #16]
 800c0da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c0de:	69b9      	ldr	r1, [r7, #24]
 800c0e0:	0148      	lsls	r0, r1, #5
 800c0e2:	69f9      	ldr	r1, [r7, #28]
 800c0e4:	4401      	add	r1, r0
 800c0e6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c0ea:	4313      	orrs	r3, r2
 800c0ec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	791b      	ldrb	r3, [r3, #4]
 800c0f2:	2b01      	cmp	r3, #1
 800c0f4:	d11f      	bne.n	800c136 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c0f6:	69bb      	ldr	r3, [r7, #24]
 800c0f8:	015a      	lsls	r2, r3, #5
 800c0fa:	69fb      	ldr	r3, [r7, #28]
 800c0fc:	4413      	add	r3, r2
 800c0fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c102:	691b      	ldr	r3, [r3, #16]
 800c104:	69ba      	ldr	r2, [r7, #24]
 800c106:	0151      	lsls	r1, r2, #5
 800c108:	69fa      	ldr	r2, [r7, #28]
 800c10a:	440a      	add	r2, r1
 800c10c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c110:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800c114:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c116:	69bb      	ldr	r3, [r7, #24]
 800c118:	015a      	lsls	r2, r3, #5
 800c11a:	69fb      	ldr	r3, [r7, #28]
 800c11c:	4413      	add	r3, r2
 800c11e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c122:	691b      	ldr	r3, [r3, #16]
 800c124:	69ba      	ldr	r2, [r7, #24]
 800c126:	0151      	lsls	r1, r2, #5
 800c128:	69fa      	ldr	r2, [r7, #28]
 800c12a:	440a      	add	r2, r1
 800c12c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c130:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c134:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c136:	79fb      	ldrb	r3, [r7, #7]
 800c138:	2b01      	cmp	r3, #1
 800c13a:	d14b      	bne.n	800c1d4 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	69db      	ldr	r3, [r3, #28]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d009      	beq.n	800c158 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c144:	69bb      	ldr	r3, [r7, #24]
 800c146:	015a      	lsls	r2, r3, #5
 800c148:	69fb      	ldr	r3, [r7, #28]
 800c14a:	4413      	add	r3, r2
 800c14c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c150:	461a      	mov	r2, r3
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	69db      	ldr	r3, [r3, #28]
 800c156:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	791b      	ldrb	r3, [r3, #4]
 800c15c:	2b01      	cmp	r3, #1
 800c15e:	d128      	bne.n	800c1b2 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c160:	69fb      	ldr	r3, [r7, #28]
 800c162:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c166:	689b      	ldr	r3, [r3, #8]
 800c168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d110      	bne.n	800c192 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c170:	69bb      	ldr	r3, [r7, #24]
 800c172:	015a      	lsls	r2, r3, #5
 800c174:	69fb      	ldr	r3, [r7, #28]
 800c176:	4413      	add	r3, r2
 800c178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	69ba      	ldr	r2, [r7, #24]
 800c180:	0151      	lsls	r1, r2, #5
 800c182:	69fa      	ldr	r2, [r7, #28]
 800c184:	440a      	add	r2, r1
 800c186:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c18a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c18e:	6013      	str	r3, [r2, #0]
 800c190:	e00f      	b.n	800c1b2 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c192:	69bb      	ldr	r3, [r7, #24]
 800c194:	015a      	lsls	r2, r3, #5
 800c196:	69fb      	ldr	r3, [r7, #28]
 800c198:	4413      	add	r3, r2
 800c19a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	69ba      	ldr	r2, [r7, #24]
 800c1a2:	0151      	lsls	r1, r2, #5
 800c1a4:	69fa      	ldr	r2, [r7, #28]
 800c1a6:	440a      	add	r2, r1
 800c1a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c1ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c1b0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c1b2:	69bb      	ldr	r3, [r7, #24]
 800c1b4:	015a      	lsls	r2, r3, #5
 800c1b6:	69fb      	ldr	r3, [r7, #28]
 800c1b8:	4413      	add	r3, r2
 800c1ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	69ba      	ldr	r2, [r7, #24]
 800c1c2:	0151      	lsls	r1, r2, #5
 800c1c4:	69fa      	ldr	r2, [r7, #28]
 800c1c6:	440a      	add	r2, r1
 800c1c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c1cc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c1d0:	6013      	str	r3, [r2, #0]
 800c1d2:	e16a      	b.n	800c4aa <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c1d4:	69bb      	ldr	r3, [r7, #24]
 800c1d6:	015a      	lsls	r2, r3, #5
 800c1d8:	69fb      	ldr	r3, [r7, #28]
 800c1da:	4413      	add	r3, r2
 800c1dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	69ba      	ldr	r2, [r7, #24]
 800c1e4:	0151      	lsls	r1, r2, #5
 800c1e6:	69fa      	ldr	r2, [r7, #28]
 800c1e8:	440a      	add	r2, r1
 800c1ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c1ee:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c1f2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	791b      	ldrb	r3, [r3, #4]
 800c1f8:	2b01      	cmp	r3, #1
 800c1fa:	d015      	beq.n	800c228 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	691b      	ldr	r3, [r3, #16]
 800c200:	2b00      	cmp	r3, #0
 800c202:	f000 8152 	beq.w	800c4aa <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c206:	69fb      	ldr	r3, [r7, #28]
 800c208:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c20c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	781b      	ldrb	r3, [r3, #0]
 800c212:	f003 030f 	and.w	r3, r3, #15
 800c216:	2101      	movs	r1, #1
 800c218:	fa01 f303 	lsl.w	r3, r1, r3
 800c21c:	69f9      	ldr	r1, [r7, #28]
 800c21e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c222:	4313      	orrs	r3, r2
 800c224:	634b      	str	r3, [r1, #52]	@ 0x34
 800c226:	e140      	b.n	800c4aa <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c228:	69fb      	ldr	r3, [r7, #28]
 800c22a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c22e:	689b      	ldr	r3, [r3, #8]
 800c230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c234:	2b00      	cmp	r3, #0
 800c236:	d117      	bne.n	800c268 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c238:	69bb      	ldr	r3, [r7, #24]
 800c23a:	015a      	lsls	r2, r3, #5
 800c23c:	69fb      	ldr	r3, [r7, #28]
 800c23e:	4413      	add	r3, r2
 800c240:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	69ba      	ldr	r2, [r7, #24]
 800c248:	0151      	lsls	r1, r2, #5
 800c24a:	69fa      	ldr	r2, [r7, #28]
 800c24c:	440a      	add	r2, r1
 800c24e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c252:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c256:	6013      	str	r3, [r2, #0]
 800c258:	e016      	b.n	800c288 <USB_EPStartXfer+0x308>
 800c25a:	bf00      	nop
 800c25c:	e007ffff 	.word	0xe007ffff
 800c260:	fff80000 	.word	0xfff80000
 800c264:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c268:	69bb      	ldr	r3, [r7, #24]
 800c26a:	015a      	lsls	r2, r3, #5
 800c26c:	69fb      	ldr	r3, [r7, #28]
 800c26e:	4413      	add	r3, r2
 800c270:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	69ba      	ldr	r2, [r7, #24]
 800c278:	0151      	lsls	r1, r2, #5
 800c27a:	69fa      	ldr	r2, [r7, #28]
 800c27c:	440a      	add	r2, r1
 800c27e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c282:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c286:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	68d9      	ldr	r1, [r3, #12]
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	781a      	ldrb	r2, [r3, #0]
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	691b      	ldr	r3, [r3, #16]
 800c294:	b298      	uxth	r0, r3
 800c296:	79fb      	ldrb	r3, [r7, #7]
 800c298:	9300      	str	r3, [sp, #0]
 800c29a:	4603      	mov	r3, r0
 800c29c:	68f8      	ldr	r0, [r7, #12]
 800c29e:	f000 f9b9 	bl	800c614 <USB_WritePacket>
 800c2a2:	e102      	b.n	800c4aa <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c2a4:	69bb      	ldr	r3, [r7, #24]
 800c2a6:	015a      	lsls	r2, r3, #5
 800c2a8:	69fb      	ldr	r3, [r7, #28]
 800c2aa:	4413      	add	r3, r2
 800c2ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c2b0:	691a      	ldr	r2, [r3, #16]
 800c2b2:	69bb      	ldr	r3, [r7, #24]
 800c2b4:	0159      	lsls	r1, r3, #5
 800c2b6:	69fb      	ldr	r3, [r7, #28]
 800c2b8:	440b      	add	r3, r1
 800c2ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c2be:	4619      	mov	r1, r3
 800c2c0:	4b7c      	ldr	r3, [pc, #496]	@ (800c4b4 <USB_EPStartXfer+0x534>)
 800c2c2:	4013      	ands	r3, r2
 800c2c4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c2c6:	69bb      	ldr	r3, [r7, #24]
 800c2c8:	015a      	lsls	r2, r3, #5
 800c2ca:	69fb      	ldr	r3, [r7, #28]
 800c2cc:	4413      	add	r3, r2
 800c2ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c2d2:	691a      	ldr	r2, [r3, #16]
 800c2d4:	69bb      	ldr	r3, [r7, #24]
 800c2d6:	0159      	lsls	r1, r3, #5
 800c2d8:	69fb      	ldr	r3, [r7, #28]
 800c2da:	440b      	add	r3, r1
 800c2dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c2e0:	4619      	mov	r1, r3
 800c2e2:	4b75      	ldr	r3, [pc, #468]	@ (800c4b8 <USB_EPStartXfer+0x538>)
 800c2e4:	4013      	ands	r3, r2
 800c2e6:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800c2e8:	69bb      	ldr	r3, [r7, #24]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d12f      	bne.n	800c34e <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800c2ee:	68bb      	ldr	r3, [r7, #8]
 800c2f0:	691b      	ldr	r3, [r3, #16]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d003      	beq.n	800c2fe <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	689a      	ldr	r2, [r3, #8]
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	689a      	ldr	r2, [r3, #8]
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c306:	69bb      	ldr	r3, [r7, #24]
 800c308:	015a      	lsls	r2, r3, #5
 800c30a:	69fb      	ldr	r3, [r7, #28]
 800c30c:	4413      	add	r3, r2
 800c30e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c312:	691a      	ldr	r2, [r3, #16]
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	6a1b      	ldr	r3, [r3, #32]
 800c318:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c31c:	69b9      	ldr	r1, [r7, #24]
 800c31e:	0148      	lsls	r0, r1, #5
 800c320:	69f9      	ldr	r1, [r7, #28]
 800c322:	4401      	add	r1, r0
 800c324:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c328:	4313      	orrs	r3, r2
 800c32a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c32c:	69bb      	ldr	r3, [r7, #24]
 800c32e:	015a      	lsls	r2, r3, #5
 800c330:	69fb      	ldr	r3, [r7, #28]
 800c332:	4413      	add	r3, r2
 800c334:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c338:	691b      	ldr	r3, [r3, #16]
 800c33a:	69ba      	ldr	r2, [r7, #24]
 800c33c:	0151      	lsls	r1, r2, #5
 800c33e:	69fa      	ldr	r2, [r7, #28]
 800c340:	440a      	add	r2, r1
 800c342:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c346:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c34a:	6113      	str	r3, [r2, #16]
 800c34c:	e05f      	b.n	800c40e <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	691b      	ldr	r3, [r3, #16]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d123      	bne.n	800c39e <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c356:	69bb      	ldr	r3, [r7, #24]
 800c358:	015a      	lsls	r2, r3, #5
 800c35a:	69fb      	ldr	r3, [r7, #28]
 800c35c:	4413      	add	r3, r2
 800c35e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c362:	691a      	ldr	r2, [r3, #16]
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	689b      	ldr	r3, [r3, #8]
 800c368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c36c:	69b9      	ldr	r1, [r7, #24]
 800c36e:	0148      	lsls	r0, r1, #5
 800c370:	69f9      	ldr	r1, [r7, #28]
 800c372:	4401      	add	r1, r0
 800c374:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c378:	4313      	orrs	r3, r2
 800c37a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c37c:	69bb      	ldr	r3, [r7, #24]
 800c37e:	015a      	lsls	r2, r3, #5
 800c380:	69fb      	ldr	r3, [r7, #28]
 800c382:	4413      	add	r3, r2
 800c384:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c388:	691b      	ldr	r3, [r3, #16]
 800c38a:	69ba      	ldr	r2, [r7, #24]
 800c38c:	0151      	lsls	r1, r2, #5
 800c38e:	69fa      	ldr	r2, [r7, #28]
 800c390:	440a      	add	r2, r1
 800c392:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c396:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c39a:	6113      	str	r3, [r2, #16]
 800c39c:	e037      	b.n	800c40e <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	691a      	ldr	r2, [r3, #16]
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	689b      	ldr	r3, [r3, #8]
 800c3a6:	4413      	add	r3, r2
 800c3a8:	1e5a      	subs	r2, r3, #1
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	689b      	ldr	r3, [r3, #8]
 800c3ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3b2:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	689b      	ldr	r3, [r3, #8]
 800c3b8:	8afa      	ldrh	r2, [r7, #22]
 800c3ba:	fb03 f202 	mul.w	r2, r3, r2
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c3c2:	69bb      	ldr	r3, [r7, #24]
 800c3c4:	015a      	lsls	r2, r3, #5
 800c3c6:	69fb      	ldr	r3, [r7, #28]
 800c3c8:	4413      	add	r3, r2
 800c3ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3ce:	691a      	ldr	r2, [r3, #16]
 800c3d0:	8afb      	ldrh	r3, [r7, #22]
 800c3d2:	04d9      	lsls	r1, r3, #19
 800c3d4:	4b39      	ldr	r3, [pc, #228]	@ (800c4bc <USB_EPStartXfer+0x53c>)
 800c3d6:	400b      	ands	r3, r1
 800c3d8:	69b9      	ldr	r1, [r7, #24]
 800c3da:	0148      	lsls	r0, r1, #5
 800c3dc:	69f9      	ldr	r1, [r7, #28]
 800c3de:	4401      	add	r1, r0
 800c3e0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c3e4:	4313      	orrs	r3, r2
 800c3e6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c3e8:	69bb      	ldr	r3, [r7, #24]
 800c3ea:	015a      	lsls	r2, r3, #5
 800c3ec:	69fb      	ldr	r3, [r7, #28]
 800c3ee:	4413      	add	r3, r2
 800c3f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3f4:	691a      	ldr	r2, [r3, #16]
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	6a1b      	ldr	r3, [r3, #32]
 800c3fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c3fe:	69b9      	ldr	r1, [r7, #24]
 800c400:	0148      	lsls	r0, r1, #5
 800c402:	69f9      	ldr	r1, [r7, #28]
 800c404:	4401      	add	r1, r0
 800c406:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c40a:	4313      	orrs	r3, r2
 800c40c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800c40e:	79fb      	ldrb	r3, [r7, #7]
 800c410:	2b01      	cmp	r3, #1
 800c412:	d10d      	bne.n	800c430 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	68db      	ldr	r3, [r3, #12]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d009      	beq.n	800c430 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	68d9      	ldr	r1, [r3, #12]
 800c420:	69bb      	ldr	r3, [r7, #24]
 800c422:	015a      	lsls	r2, r3, #5
 800c424:	69fb      	ldr	r3, [r7, #28]
 800c426:	4413      	add	r3, r2
 800c428:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c42c:	460a      	mov	r2, r1
 800c42e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	791b      	ldrb	r3, [r3, #4]
 800c434:	2b01      	cmp	r3, #1
 800c436:	d128      	bne.n	800c48a <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c438:	69fb      	ldr	r3, [r7, #28]
 800c43a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c43e:	689b      	ldr	r3, [r3, #8]
 800c440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c444:	2b00      	cmp	r3, #0
 800c446:	d110      	bne.n	800c46a <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c448:	69bb      	ldr	r3, [r7, #24]
 800c44a:	015a      	lsls	r2, r3, #5
 800c44c:	69fb      	ldr	r3, [r7, #28]
 800c44e:	4413      	add	r3, r2
 800c450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	69ba      	ldr	r2, [r7, #24]
 800c458:	0151      	lsls	r1, r2, #5
 800c45a:	69fa      	ldr	r2, [r7, #28]
 800c45c:	440a      	add	r2, r1
 800c45e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c462:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c466:	6013      	str	r3, [r2, #0]
 800c468:	e00f      	b.n	800c48a <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c46a:	69bb      	ldr	r3, [r7, #24]
 800c46c:	015a      	lsls	r2, r3, #5
 800c46e:	69fb      	ldr	r3, [r7, #28]
 800c470:	4413      	add	r3, r2
 800c472:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	69ba      	ldr	r2, [r7, #24]
 800c47a:	0151      	lsls	r1, r2, #5
 800c47c:	69fa      	ldr	r2, [r7, #28]
 800c47e:	440a      	add	r2, r1
 800c480:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c484:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c488:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c48a:	69bb      	ldr	r3, [r7, #24]
 800c48c:	015a      	lsls	r2, r3, #5
 800c48e:	69fb      	ldr	r3, [r7, #28]
 800c490:	4413      	add	r3, r2
 800c492:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	69ba      	ldr	r2, [r7, #24]
 800c49a:	0151      	lsls	r1, r2, #5
 800c49c:	69fa      	ldr	r2, [r7, #28]
 800c49e:	440a      	add	r2, r1
 800c4a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c4a4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c4a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c4aa:	2300      	movs	r3, #0
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	3720      	adds	r7, #32
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}
 800c4b4:	fff80000 	.word	0xfff80000
 800c4b8:	e007ffff 	.word	0xe007ffff
 800c4bc:	1ff80000 	.word	0x1ff80000

0800c4c0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b087      	sub	sp, #28
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
 800c4c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	785b      	ldrb	r3, [r3, #1]
 800c4da:	2b01      	cmp	r3, #1
 800c4dc:	d14a      	bne.n	800c574 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	781b      	ldrb	r3, [r3, #0]
 800c4e2:	015a      	lsls	r2, r3, #5
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	4413      	add	r3, r2
 800c4e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c4f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c4f6:	f040 8086 	bne.w	800c606 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	781b      	ldrb	r3, [r3, #0]
 800c4fe:	015a      	lsls	r2, r3, #5
 800c500:	693b      	ldr	r3, [r7, #16]
 800c502:	4413      	add	r3, r2
 800c504:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	683a      	ldr	r2, [r7, #0]
 800c50c:	7812      	ldrb	r2, [r2, #0]
 800c50e:	0151      	lsls	r1, r2, #5
 800c510:	693a      	ldr	r2, [r7, #16]
 800c512:	440a      	add	r2, r1
 800c514:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c518:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c51c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	781b      	ldrb	r3, [r3, #0]
 800c522:	015a      	lsls	r2, r3, #5
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	4413      	add	r3, r2
 800c528:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	683a      	ldr	r2, [r7, #0]
 800c530:	7812      	ldrb	r2, [r2, #0]
 800c532:	0151      	lsls	r1, r2, #5
 800c534:	693a      	ldr	r2, [r7, #16]
 800c536:	440a      	add	r2, r1
 800c538:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c53c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c540:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	3301      	adds	r3, #1
 800c546:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800c54e:	4293      	cmp	r3, r2
 800c550:	d902      	bls.n	800c558 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c552:	2301      	movs	r3, #1
 800c554:	75fb      	strb	r3, [r7, #23]
          break;
 800c556:	e056      	b.n	800c606 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	015a      	lsls	r2, r3, #5
 800c55e:	693b      	ldr	r3, [r7, #16]
 800c560:	4413      	add	r3, r2
 800c562:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c56c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c570:	d0e7      	beq.n	800c542 <USB_EPStopXfer+0x82>
 800c572:	e048      	b.n	800c606 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	781b      	ldrb	r3, [r3, #0]
 800c578:	015a      	lsls	r2, r3, #5
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	4413      	add	r3, r2
 800c57e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c588:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c58c:	d13b      	bne.n	800c606 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	781b      	ldrb	r3, [r3, #0]
 800c592:	015a      	lsls	r2, r3, #5
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	4413      	add	r3, r2
 800c598:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	683a      	ldr	r2, [r7, #0]
 800c5a0:	7812      	ldrb	r2, [r2, #0]
 800c5a2:	0151      	lsls	r1, r2, #5
 800c5a4:	693a      	ldr	r2, [r7, #16]
 800c5a6:	440a      	add	r2, r1
 800c5a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c5ac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c5b0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	781b      	ldrb	r3, [r3, #0]
 800c5b6:	015a      	lsls	r2, r3, #5
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	4413      	add	r3, r2
 800c5bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	683a      	ldr	r2, [r7, #0]
 800c5c4:	7812      	ldrb	r2, [r2, #0]
 800c5c6:	0151      	lsls	r1, r2, #5
 800c5c8:	693a      	ldr	r2, [r7, #16]
 800c5ca:	440a      	add	r2, r1
 800c5cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c5d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c5d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	3301      	adds	r3, #1
 800c5da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	f242 7210 	movw	r2, #10000	@ 0x2710
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	d902      	bls.n	800c5ec <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	75fb      	strb	r3, [r7, #23]
          break;
 800c5ea:	e00c      	b.n	800c606 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	781b      	ldrb	r3, [r3, #0]
 800c5f0:	015a      	lsls	r2, r3, #5
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	4413      	add	r3, r2
 800c5f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c600:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c604:	d0e7      	beq.n	800c5d6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c606:	7dfb      	ldrb	r3, [r7, #23]
}
 800c608:	4618      	mov	r0, r3
 800c60a:	371c      	adds	r7, #28
 800c60c:	46bd      	mov	sp, r7
 800c60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c612:	4770      	bx	lr

0800c614 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c614:	b480      	push	{r7}
 800c616:	b089      	sub	sp, #36	@ 0x24
 800c618:	af00      	add	r7, sp, #0
 800c61a:	60f8      	str	r0, [r7, #12]
 800c61c:	60b9      	str	r1, [r7, #8]
 800c61e:	4611      	mov	r1, r2
 800c620:	461a      	mov	r2, r3
 800c622:	460b      	mov	r3, r1
 800c624:	71fb      	strb	r3, [r7, #7]
 800c626:	4613      	mov	r3, r2
 800c628:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c632:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c636:	2b00      	cmp	r3, #0
 800c638:	d123      	bne.n	800c682 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c63a:	88bb      	ldrh	r3, [r7, #4]
 800c63c:	3303      	adds	r3, #3
 800c63e:	089b      	lsrs	r3, r3, #2
 800c640:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c642:	2300      	movs	r3, #0
 800c644:	61bb      	str	r3, [r7, #24]
 800c646:	e018      	b.n	800c67a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c648:	79fb      	ldrb	r3, [r7, #7]
 800c64a:	031a      	lsls	r2, r3, #12
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	4413      	add	r3, r2
 800c650:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c654:	461a      	mov	r2, r3
 800c656:	69fb      	ldr	r3, [r7, #28]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c65c:	69fb      	ldr	r3, [r7, #28]
 800c65e:	3301      	adds	r3, #1
 800c660:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c662:	69fb      	ldr	r3, [r7, #28]
 800c664:	3301      	adds	r3, #1
 800c666:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c668:	69fb      	ldr	r3, [r7, #28]
 800c66a:	3301      	adds	r3, #1
 800c66c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c66e:	69fb      	ldr	r3, [r7, #28]
 800c670:	3301      	adds	r3, #1
 800c672:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c674:	69bb      	ldr	r3, [r7, #24]
 800c676:	3301      	adds	r3, #1
 800c678:	61bb      	str	r3, [r7, #24]
 800c67a:	69ba      	ldr	r2, [r7, #24]
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	429a      	cmp	r2, r3
 800c680:	d3e2      	bcc.n	800c648 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c682:	2300      	movs	r3, #0
}
 800c684:	4618      	mov	r0, r3
 800c686:	3724      	adds	r7, #36	@ 0x24
 800c688:	46bd      	mov	sp, r7
 800c68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68e:	4770      	bx	lr

0800c690 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c690:	b480      	push	{r7}
 800c692:	b08b      	sub	sp, #44	@ 0x2c
 800c694:	af00      	add	r7, sp, #0
 800c696:	60f8      	str	r0, [r7, #12]
 800c698:	60b9      	str	r1, [r7, #8]
 800c69a:	4613      	mov	r3, r2
 800c69c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c6a6:	88fb      	ldrh	r3, [r7, #6]
 800c6a8:	089b      	lsrs	r3, r3, #2
 800c6aa:	b29b      	uxth	r3, r3
 800c6ac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c6ae:	88fb      	ldrh	r3, [r7, #6]
 800c6b0:	f003 0303 	and.w	r3, r3, #3
 800c6b4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	623b      	str	r3, [r7, #32]
 800c6ba:	e014      	b.n	800c6e6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c6bc:	69bb      	ldr	r3, [r7, #24]
 800c6be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c6c2:	681a      	ldr	r2, [r3, #0]
 800c6c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6c6:	601a      	str	r2, [r3, #0]
    pDest++;
 800c6c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ca:	3301      	adds	r3, #1
 800c6cc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c6ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6d0:	3301      	adds	r3, #1
 800c6d2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c6d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6d6:	3301      	adds	r3, #1
 800c6d8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c6da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6dc:	3301      	adds	r3, #1
 800c6de:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800c6e0:	6a3b      	ldr	r3, [r7, #32]
 800c6e2:	3301      	adds	r3, #1
 800c6e4:	623b      	str	r3, [r7, #32]
 800c6e6:	6a3a      	ldr	r2, [r7, #32]
 800c6e8:	697b      	ldr	r3, [r7, #20]
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	d3e6      	bcc.n	800c6bc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c6ee:	8bfb      	ldrh	r3, [r7, #30]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d01e      	beq.n	800c732 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c6f8:	69bb      	ldr	r3, [r7, #24]
 800c6fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c6fe:	461a      	mov	r2, r3
 800c700:	f107 0310 	add.w	r3, r7, #16
 800c704:	6812      	ldr	r2, [r2, #0]
 800c706:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c708:	693a      	ldr	r2, [r7, #16]
 800c70a:	6a3b      	ldr	r3, [r7, #32]
 800c70c:	b2db      	uxtb	r3, r3
 800c70e:	00db      	lsls	r3, r3, #3
 800c710:	fa22 f303 	lsr.w	r3, r2, r3
 800c714:	b2da      	uxtb	r2, r3
 800c716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c718:	701a      	strb	r2, [r3, #0]
      i++;
 800c71a:	6a3b      	ldr	r3, [r7, #32]
 800c71c:	3301      	adds	r3, #1
 800c71e:	623b      	str	r3, [r7, #32]
      pDest++;
 800c720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c722:	3301      	adds	r3, #1
 800c724:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800c726:	8bfb      	ldrh	r3, [r7, #30]
 800c728:	3b01      	subs	r3, #1
 800c72a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c72c:	8bfb      	ldrh	r3, [r7, #30]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d1ea      	bne.n	800c708 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c734:	4618      	mov	r0, r3
 800c736:	372c      	adds	r7, #44	@ 0x2c
 800c738:	46bd      	mov	sp, r7
 800c73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73e:	4770      	bx	lr

0800c740 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c740:	b480      	push	{r7}
 800c742:	b085      	sub	sp, #20
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
 800c748:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	785b      	ldrb	r3, [r3, #1]
 800c758:	2b01      	cmp	r3, #1
 800c75a:	d12c      	bne.n	800c7b6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	015a      	lsls	r2, r3, #5
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	4413      	add	r3, r2
 800c764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	db12      	blt.n	800c794 <USB_EPSetStall+0x54>
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d00f      	beq.n	800c794 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	015a      	lsls	r2, r3, #5
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	4413      	add	r3, r2
 800c77c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	68ba      	ldr	r2, [r7, #8]
 800c784:	0151      	lsls	r1, r2, #5
 800c786:	68fa      	ldr	r2, [r7, #12]
 800c788:	440a      	add	r2, r1
 800c78a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c78e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c792:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	015a      	lsls	r2, r3, #5
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	4413      	add	r3, r2
 800c79c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	68ba      	ldr	r2, [r7, #8]
 800c7a4:	0151      	lsls	r1, r2, #5
 800c7a6:	68fa      	ldr	r2, [r7, #12]
 800c7a8:	440a      	add	r2, r1
 800c7aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c7ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c7b2:	6013      	str	r3, [r2, #0]
 800c7b4:	e02b      	b.n	800c80e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	015a      	lsls	r2, r3, #5
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	4413      	add	r3, r2
 800c7be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	db12      	blt.n	800c7ee <USB_EPSetStall+0xae>
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d00f      	beq.n	800c7ee <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	015a      	lsls	r2, r3, #5
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	4413      	add	r3, r2
 800c7d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	68ba      	ldr	r2, [r7, #8]
 800c7de:	0151      	lsls	r1, r2, #5
 800c7e0:	68fa      	ldr	r2, [r7, #12]
 800c7e2:	440a      	add	r2, r1
 800c7e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c7e8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c7ec:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	015a      	lsls	r2, r3, #5
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	4413      	add	r3, r2
 800c7f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	68ba      	ldr	r2, [r7, #8]
 800c7fe:	0151      	lsls	r1, r2, #5
 800c800:	68fa      	ldr	r2, [r7, #12]
 800c802:	440a      	add	r2, r1
 800c804:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c808:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c80c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c80e:	2300      	movs	r3, #0
}
 800c810:	4618      	mov	r0, r3
 800c812:	3714      	adds	r7, #20
 800c814:	46bd      	mov	sp, r7
 800c816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81a:	4770      	bx	lr

0800c81c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c81c:	b480      	push	{r7}
 800c81e:	b085      	sub	sp, #20
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
 800c824:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	781b      	ldrb	r3, [r3, #0]
 800c82e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	785b      	ldrb	r3, [r3, #1]
 800c834:	2b01      	cmp	r3, #1
 800c836:	d128      	bne.n	800c88a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	015a      	lsls	r2, r3, #5
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	4413      	add	r3, r2
 800c840:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	68ba      	ldr	r2, [r7, #8]
 800c848:	0151      	lsls	r1, r2, #5
 800c84a:	68fa      	ldr	r2, [r7, #12]
 800c84c:	440a      	add	r2, r1
 800c84e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c852:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c856:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	791b      	ldrb	r3, [r3, #4]
 800c85c:	2b03      	cmp	r3, #3
 800c85e:	d003      	beq.n	800c868 <USB_EPClearStall+0x4c>
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	791b      	ldrb	r3, [r3, #4]
 800c864:	2b02      	cmp	r3, #2
 800c866:	d138      	bne.n	800c8da <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	015a      	lsls	r2, r3, #5
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	4413      	add	r3, r2
 800c870:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	68ba      	ldr	r2, [r7, #8]
 800c878:	0151      	lsls	r1, r2, #5
 800c87a:	68fa      	ldr	r2, [r7, #12]
 800c87c:	440a      	add	r2, r1
 800c87e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c882:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c886:	6013      	str	r3, [r2, #0]
 800c888:	e027      	b.n	800c8da <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	015a      	lsls	r2, r3, #5
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	4413      	add	r3, r2
 800c892:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	68ba      	ldr	r2, [r7, #8]
 800c89a:	0151      	lsls	r1, r2, #5
 800c89c:	68fa      	ldr	r2, [r7, #12]
 800c89e:	440a      	add	r2, r1
 800c8a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c8a4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c8a8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	791b      	ldrb	r3, [r3, #4]
 800c8ae:	2b03      	cmp	r3, #3
 800c8b0:	d003      	beq.n	800c8ba <USB_EPClearStall+0x9e>
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	791b      	ldrb	r3, [r3, #4]
 800c8b6:	2b02      	cmp	r3, #2
 800c8b8:	d10f      	bne.n	800c8da <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	015a      	lsls	r2, r3, #5
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	4413      	add	r3, r2
 800c8c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	68ba      	ldr	r2, [r7, #8]
 800c8ca:	0151      	lsls	r1, r2, #5
 800c8cc:	68fa      	ldr	r2, [r7, #12]
 800c8ce:	440a      	add	r2, r1
 800c8d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c8d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c8d8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c8da:	2300      	movs	r3, #0
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	3714      	adds	r7, #20
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e6:	4770      	bx	lr

0800c8e8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b085      	sub	sp, #20
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
 800c8f0:	460b      	mov	r3, r1
 800c8f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	68fa      	ldr	r2, [r7, #12]
 800c902:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c906:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800c90a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c912:	681a      	ldr	r2, [r3, #0]
 800c914:	78fb      	ldrb	r3, [r7, #3]
 800c916:	011b      	lsls	r3, r3, #4
 800c918:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800c91c:	68f9      	ldr	r1, [r7, #12]
 800c91e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c922:	4313      	orrs	r3, r2
 800c924:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c926:	2300      	movs	r3, #0
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3714      	adds	r7, #20
 800c92c:	46bd      	mov	sp, r7
 800c92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c932:	4770      	bx	lr

0800c934 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c934:	b480      	push	{r7}
 800c936:	b085      	sub	sp, #20
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	68fa      	ldr	r2, [r7, #12]
 800c94a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c94e:	f023 0303 	bic.w	r3, r3, #3
 800c952:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c95a:	685b      	ldr	r3, [r3, #4]
 800c95c:	68fa      	ldr	r2, [r7, #12]
 800c95e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c962:	f023 0302 	bic.w	r3, r3, #2
 800c966:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c968:	2300      	movs	r3, #0
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3714      	adds	r7, #20
 800c96e:	46bd      	mov	sp, r7
 800c970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c974:	4770      	bx	lr

0800c976 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c976:	b480      	push	{r7}
 800c978:	b085      	sub	sp, #20
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	68fa      	ldr	r2, [r7, #12]
 800c98c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c990:	f023 0303 	bic.w	r3, r3, #3
 800c994:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c99c:	685b      	ldr	r3, [r3, #4]
 800c99e:	68fa      	ldr	r2, [r7, #12]
 800c9a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c9a4:	f043 0302 	orr.w	r3, r3, #2
 800c9a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c9aa:	2300      	movs	r3, #0
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3714      	adds	r7, #20
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b6:	4770      	bx	lr

0800c9b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800c9b8:	b480      	push	{r7}
 800c9ba:	b085      	sub	sp, #20
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	695b      	ldr	r3, [r3, #20]
 800c9c4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	699b      	ldr	r3, [r3, #24]
 800c9ca:	68fa      	ldr	r2, [r7, #12]
 800c9cc:	4013      	ands	r3, r2
 800c9ce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	3714      	adds	r7, #20
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9dc:	4770      	bx	lr

0800c9de <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800c9de:	b480      	push	{r7}
 800c9e0:	b085      	sub	sp, #20
 800c9e2:	af00      	add	r7, sp, #0
 800c9e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c9f0:	699b      	ldr	r3, [r3, #24]
 800c9f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c9fa:	69db      	ldr	r3, [r3, #28]
 800c9fc:	68ba      	ldr	r2, [r7, #8]
 800c9fe:	4013      	ands	r3, r2
 800ca00:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	0c1b      	lsrs	r3, r3, #16
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	3714      	adds	r7, #20
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca10:	4770      	bx	lr

0800ca12 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ca12:	b480      	push	{r7}
 800ca14:	b085      	sub	sp, #20
 800ca16:	af00      	add	r7, sp, #0
 800ca18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ca24:	699b      	ldr	r3, [r3, #24]
 800ca26:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ca2e:	69db      	ldr	r3, [r3, #28]
 800ca30:	68ba      	ldr	r2, [r7, #8]
 800ca32:	4013      	ands	r3, r2
 800ca34:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	b29b      	uxth	r3, r3
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3714      	adds	r7, #20
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca44:	4770      	bx	lr

0800ca46 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ca46:	b480      	push	{r7}
 800ca48:	b085      	sub	sp, #20
 800ca4a:	af00      	add	r7, sp, #0
 800ca4c:	6078      	str	r0, [r7, #4]
 800ca4e:	460b      	mov	r3, r1
 800ca50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ca56:	78fb      	ldrb	r3, [r7, #3]
 800ca58:	015a      	lsls	r2, r3, #5
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	4413      	add	r3, r2
 800ca5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca62:	689b      	ldr	r3, [r3, #8]
 800ca64:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ca6c:	695b      	ldr	r3, [r3, #20]
 800ca6e:	68ba      	ldr	r2, [r7, #8]
 800ca70:	4013      	ands	r3, r2
 800ca72:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ca74:	68bb      	ldr	r3, [r7, #8]
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	3714      	adds	r7, #20
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca80:	4770      	bx	lr

0800ca82 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ca82:	b480      	push	{r7}
 800ca84:	b087      	sub	sp, #28
 800ca86:	af00      	add	r7, sp, #0
 800ca88:	6078      	str	r0, [r7, #4]
 800ca8a:	460b      	mov	r3, r1
 800ca8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ca98:	691b      	ldr	r3, [r3, #16]
 800ca9a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800caa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800caa4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800caa6:	78fb      	ldrb	r3, [r7, #3]
 800caa8:	f003 030f 	and.w	r3, r3, #15
 800caac:	68fa      	ldr	r2, [r7, #12]
 800caae:	fa22 f303 	lsr.w	r3, r2, r3
 800cab2:	01db      	lsls	r3, r3, #7
 800cab4:	b2db      	uxtb	r3, r3
 800cab6:	693a      	ldr	r2, [r7, #16]
 800cab8:	4313      	orrs	r3, r2
 800caba:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800cabc:	78fb      	ldrb	r3, [r7, #3]
 800cabe:	015a      	lsls	r2, r3, #5
 800cac0:	697b      	ldr	r3, [r7, #20]
 800cac2:	4413      	add	r3, r2
 800cac4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cac8:	689b      	ldr	r3, [r3, #8]
 800caca:	693a      	ldr	r2, [r7, #16]
 800cacc:	4013      	ands	r3, r2
 800cace:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cad0:	68bb      	ldr	r3, [r7, #8]
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	371c      	adds	r7, #28
 800cad6:	46bd      	mov	sp, r7
 800cad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cadc:	4770      	bx	lr

0800cade <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800cade:	b480      	push	{r7}
 800cae0:	b083      	sub	sp, #12
 800cae2:	af00      	add	r7, sp, #0
 800cae4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	695b      	ldr	r3, [r3, #20]
 800caea:	f003 0301 	and.w	r3, r3, #1
}
 800caee:	4618      	mov	r0, r3
 800caf0:	370c      	adds	r7, #12
 800caf2:	46bd      	mov	sp, r7
 800caf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf8:	4770      	bx	lr
	...

0800cafc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800cafc:	b480      	push	{r7}
 800cafe:	b085      	sub	sp, #20
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb0e:	681a      	ldr	r2, [r3, #0]
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb16:	4619      	mov	r1, r3
 800cb18:	4b09      	ldr	r3, [pc, #36]	@ (800cb40 <USB_ActivateSetup+0x44>)
 800cb1a:	4013      	ands	r3, r2
 800cb1c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb24:	685b      	ldr	r3, [r3, #4]
 800cb26:	68fa      	ldr	r2, [r7, #12]
 800cb28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cb2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cb30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cb32:	2300      	movs	r3, #0
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	3714      	adds	r7, #20
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3e:	4770      	bx	lr
 800cb40:	fffff800 	.word	0xfffff800

0800cb44 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800cb44:	b480      	push	{r7}
 800cb46:	b087      	sub	sp, #28
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	60f8      	str	r0, [r7, #12]
 800cb4c:	460b      	mov	r3, r1
 800cb4e:	607a      	str	r2, [r7, #4]
 800cb50:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	333c      	adds	r3, #60	@ 0x3c
 800cb5a:	3304      	adds	r3, #4
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800cb60:	693b      	ldr	r3, [r7, #16]
 800cb62:	4a26      	ldr	r2, [pc, #152]	@ (800cbfc <USB_EP0_OutStart+0xb8>)
 800cb64:	4293      	cmp	r3, r2
 800cb66:	d90a      	bls.n	800cb7e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cb68:	697b      	ldr	r3, [r7, #20]
 800cb6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cb74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cb78:	d101      	bne.n	800cb7e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	e037      	b.n	800cbee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cb84:	461a      	mov	r2, r3
 800cb86:	2300      	movs	r3, #0
 800cb88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cb8a:	697b      	ldr	r3, [r7, #20]
 800cb8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cb90:	691b      	ldr	r3, [r3, #16]
 800cb92:	697a      	ldr	r2, [r7, #20]
 800cb94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cb98:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cb9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800cb9e:	697b      	ldr	r3, [r7, #20]
 800cba0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cba4:	691b      	ldr	r3, [r3, #16]
 800cba6:	697a      	ldr	r2, [r7, #20]
 800cba8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cbac:	f043 0318 	orr.w	r3, r3, #24
 800cbb0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800cbb2:	697b      	ldr	r3, [r7, #20]
 800cbb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cbb8:	691b      	ldr	r3, [r3, #16]
 800cbba:	697a      	ldr	r2, [r7, #20]
 800cbbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cbc0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800cbc4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800cbc6:	7afb      	ldrb	r3, [r7, #11]
 800cbc8:	2b01      	cmp	r3, #1
 800cbca:	d10f      	bne.n	800cbec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800cbcc:	697b      	ldr	r3, [r7, #20]
 800cbce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cbd2:	461a      	mov	r2, r3
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	697a      	ldr	r2, [r7, #20]
 800cbe2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cbe6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800cbea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cbec:	2300      	movs	r3, #0
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	371c      	adds	r7, #28
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf8:	4770      	bx	lr
 800cbfa:	bf00      	nop
 800cbfc:	4f54300a 	.word	0x4f54300a

0800cc00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cc00:	b480      	push	{r7}
 800cc02:	b085      	sub	sp, #20
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cc08:	2300      	movs	r3, #0
 800cc0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	3301      	adds	r3, #1
 800cc10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cc18:	d901      	bls.n	800cc1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cc1a:	2303      	movs	r3, #3
 800cc1c:	e01b      	b.n	800cc56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	691b      	ldr	r3, [r3, #16]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	daf2      	bge.n	800cc0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cc26:	2300      	movs	r3, #0
 800cc28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	691b      	ldr	r3, [r3, #16]
 800cc2e:	f043 0201 	orr.w	r2, r3, #1
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	3301      	adds	r3, #1
 800cc3a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cc42:	d901      	bls.n	800cc48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cc44:	2303      	movs	r3, #3
 800cc46:	e006      	b.n	800cc56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	691b      	ldr	r3, [r3, #16]
 800cc4c:	f003 0301 	and.w	r3, r3, #1
 800cc50:	2b01      	cmp	r3, #1
 800cc52:	d0f0      	beq.n	800cc36 <USB_CoreReset+0x36>

  return HAL_OK;
 800cc54:	2300      	movs	r3, #0
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	3714      	adds	r7, #20
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc60:	4770      	bx	lr
	...

0800cc64 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b084      	sub	sp, #16
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
 800cc6c:	460b      	mov	r3, r1
 800cc6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cc70:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800cc74:	f002 fcfe 	bl	800f674 <USBD_static_malloc>
 800cc78:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d109      	bne.n	800cc94 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	32b0      	adds	r2, #176	@ 0xb0
 800cc8a:	2100      	movs	r1, #0
 800cc8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800cc90:	2302      	movs	r3, #2
 800cc92:	e0d4      	b.n	800ce3e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800cc94:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800cc98:	2100      	movs	r1, #0
 800cc9a:	68f8      	ldr	r0, [r7, #12]
 800cc9c:	f003 fa89 	bl	80101b2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	32b0      	adds	r2, #176	@ 0xb0
 800ccaa:	68f9      	ldr	r1, [r7, #12]
 800ccac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	32b0      	adds	r2, #176	@ 0xb0
 800ccba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	7c1b      	ldrb	r3, [r3, #16]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d138      	bne.n	800cd3e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cccc:	4b5e      	ldr	r3, [pc, #376]	@ (800ce48 <USBD_CDC_Init+0x1e4>)
 800ccce:	7819      	ldrb	r1, [r3, #0]
 800ccd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ccd4:	2202      	movs	r2, #2
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f002 fba9 	bl	800f42e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ccdc:	4b5a      	ldr	r3, [pc, #360]	@ (800ce48 <USBD_CDC_Init+0x1e4>)
 800ccde:	781b      	ldrb	r3, [r3, #0]
 800cce0:	f003 020f 	and.w	r2, r3, #15
 800cce4:	6879      	ldr	r1, [r7, #4]
 800cce6:	4613      	mov	r3, r2
 800cce8:	009b      	lsls	r3, r3, #2
 800ccea:	4413      	add	r3, r2
 800ccec:	009b      	lsls	r3, r3, #2
 800ccee:	440b      	add	r3, r1
 800ccf0:	3324      	adds	r3, #36	@ 0x24
 800ccf2:	2201      	movs	r2, #1
 800ccf4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ccf6:	4b55      	ldr	r3, [pc, #340]	@ (800ce4c <USBD_CDC_Init+0x1e8>)
 800ccf8:	7819      	ldrb	r1, [r3, #0]
 800ccfa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ccfe:	2202      	movs	r2, #2
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f002 fb94 	bl	800f42e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cd06:	4b51      	ldr	r3, [pc, #324]	@ (800ce4c <USBD_CDC_Init+0x1e8>)
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	f003 020f 	and.w	r2, r3, #15
 800cd0e:	6879      	ldr	r1, [r7, #4]
 800cd10:	4613      	mov	r3, r2
 800cd12:	009b      	lsls	r3, r3, #2
 800cd14:	4413      	add	r3, r2
 800cd16:	009b      	lsls	r3, r3, #2
 800cd18:	440b      	add	r3, r1
 800cd1a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cd1e:	2201      	movs	r2, #1
 800cd20:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cd22:	4b4b      	ldr	r3, [pc, #300]	@ (800ce50 <USBD_CDC_Init+0x1ec>)
 800cd24:	781b      	ldrb	r3, [r3, #0]
 800cd26:	f003 020f 	and.w	r2, r3, #15
 800cd2a:	6879      	ldr	r1, [r7, #4]
 800cd2c:	4613      	mov	r3, r2
 800cd2e:	009b      	lsls	r3, r3, #2
 800cd30:	4413      	add	r3, r2
 800cd32:	009b      	lsls	r3, r3, #2
 800cd34:	440b      	add	r3, r1
 800cd36:	3326      	adds	r3, #38	@ 0x26
 800cd38:	2210      	movs	r2, #16
 800cd3a:	801a      	strh	r2, [r3, #0]
 800cd3c:	e035      	b.n	800cdaa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cd3e:	4b42      	ldr	r3, [pc, #264]	@ (800ce48 <USBD_CDC_Init+0x1e4>)
 800cd40:	7819      	ldrb	r1, [r3, #0]
 800cd42:	2340      	movs	r3, #64	@ 0x40
 800cd44:	2202      	movs	r2, #2
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	f002 fb71 	bl	800f42e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cd4c:	4b3e      	ldr	r3, [pc, #248]	@ (800ce48 <USBD_CDC_Init+0x1e4>)
 800cd4e:	781b      	ldrb	r3, [r3, #0]
 800cd50:	f003 020f 	and.w	r2, r3, #15
 800cd54:	6879      	ldr	r1, [r7, #4]
 800cd56:	4613      	mov	r3, r2
 800cd58:	009b      	lsls	r3, r3, #2
 800cd5a:	4413      	add	r3, r2
 800cd5c:	009b      	lsls	r3, r3, #2
 800cd5e:	440b      	add	r3, r1
 800cd60:	3324      	adds	r3, #36	@ 0x24
 800cd62:	2201      	movs	r2, #1
 800cd64:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cd66:	4b39      	ldr	r3, [pc, #228]	@ (800ce4c <USBD_CDC_Init+0x1e8>)
 800cd68:	7819      	ldrb	r1, [r3, #0]
 800cd6a:	2340      	movs	r3, #64	@ 0x40
 800cd6c:	2202      	movs	r2, #2
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f002 fb5d 	bl	800f42e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cd74:	4b35      	ldr	r3, [pc, #212]	@ (800ce4c <USBD_CDC_Init+0x1e8>)
 800cd76:	781b      	ldrb	r3, [r3, #0]
 800cd78:	f003 020f 	and.w	r2, r3, #15
 800cd7c:	6879      	ldr	r1, [r7, #4]
 800cd7e:	4613      	mov	r3, r2
 800cd80:	009b      	lsls	r3, r3, #2
 800cd82:	4413      	add	r3, r2
 800cd84:	009b      	lsls	r3, r3, #2
 800cd86:	440b      	add	r3, r1
 800cd88:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cd8c:	2201      	movs	r2, #1
 800cd8e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cd90:	4b2f      	ldr	r3, [pc, #188]	@ (800ce50 <USBD_CDC_Init+0x1ec>)
 800cd92:	781b      	ldrb	r3, [r3, #0]
 800cd94:	f003 020f 	and.w	r2, r3, #15
 800cd98:	6879      	ldr	r1, [r7, #4]
 800cd9a:	4613      	mov	r3, r2
 800cd9c:	009b      	lsls	r3, r3, #2
 800cd9e:	4413      	add	r3, r2
 800cda0:	009b      	lsls	r3, r3, #2
 800cda2:	440b      	add	r3, r1
 800cda4:	3326      	adds	r3, #38	@ 0x26
 800cda6:	2210      	movs	r2, #16
 800cda8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cdaa:	4b29      	ldr	r3, [pc, #164]	@ (800ce50 <USBD_CDC_Init+0x1ec>)
 800cdac:	7819      	ldrb	r1, [r3, #0]
 800cdae:	2308      	movs	r3, #8
 800cdb0:	2203      	movs	r2, #3
 800cdb2:	6878      	ldr	r0, [r7, #4]
 800cdb4:	f002 fb3b 	bl	800f42e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800cdb8:	4b25      	ldr	r3, [pc, #148]	@ (800ce50 <USBD_CDC_Init+0x1ec>)
 800cdba:	781b      	ldrb	r3, [r3, #0]
 800cdbc:	f003 020f 	and.w	r2, r3, #15
 800cdc0:	6879      	ldr	r1, [r7, #4]
 800cdc2:	4613      	mov	r3, r2
 800cdc4:	009b      	lsls	r3, r3, #2
 800cdc6:	4413      	add	r3, r2
 800cdc8:	009b      	lsls	r3, r3, #2
 800cdca:	440b      	add	r3, r1
 800cdcc:	3324      	adds	r3, #36	@ 0x24
 800cdce:	2201      	movs	r2, #1
 800cdd0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cde0:	687a      	ldr	r2, [r7, #4]
 800cde2:	33b0      	adds	r3, #176	@ 0xb0
 800cde4:	009b      	lsls	r3, r3, #2
 800cde6:	4413      	add	r3, r2
 800cde8:	685b      	ldr	r3, [r3, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d101      	bne.n	800ce0c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ce08:	2302      	movs	r3, #2
 800ce0a:	e018      	b.n	800ce3e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	7c1b      	ldrb	r3, [r3, #16]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d10a      	bne.n	800ce2a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ce14:	4b0d      	ldr	r3, [pc, #52]	@ (800ce4c <USBD_CDC_Init+0x1e8>)
 800ce16:	7819      	ldrb	r1, [r3, #0]
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ce1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f002 fbf2 	bl	800f60c <USBD_LL_PrepareReceive>
 800ce28:	e008      	b.n	800ce3c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ce2a:	4b08      	ldr	r3, [pc, #32]	@ (800ce4c <USBD_CDC_Init+0x1e8>)
 800ce2c:	7819      	ldrb	r1, [r3, #0]
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ce34:	2340      	movs	r3, #64	@ 0x40
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	f002 fbe8 	bl	800f60c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ce3c:	2300      	movs	r3, #0
}
 800ce3e:	4618      	mov	r0, r3
 800ce40:	3710      	adds	r7, #16
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bd80      	pop	{r7, pc}
 800ce46:	bf00      	nop
 800ce48:	240000bf 	.word	0x240000bf
 800ce4c:	240000c0 	.word	0x240000c0
 800ce50:	240000c1 	.word	0x240000c1

0800ce54 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b082      	sub	sp, #8
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
 800ce5c:	460b      	mov	r3, r1
 800ce5e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ce60:	4b3a      	ldr	r3, [pc, #232]	@ (800cf4c <USBD_CDC_DeInit+0xf8>)
 800ce62:	781b      	ldrb	r3, [r3, #0]
 800ce64:	4619      	mov	r1, r3
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	f002 fb07 	bl	800f47a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ce6c:	4b37      	ldr	r3, [pc, #220]	@ (800cf4c <USBD_CDC_DeInit+0xf8>)
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	f003 020f 	and.w	r2, r3, #15
 800ce74:	6879      	ldr	r1, [r7, #4]
 800ce76:	4613      	mov	r3, r2
 800ce78:	009b      	lsls	r3, r3, #2
 800ce7a:	4413      	add	r3, r2
 800ce7c:	009b      	lsls	r3, r3, #2
 800ce7e:	440b      	add	r3, r1
 800ce80:	3324      	adds	r3, #36	@ 0x24
 800ce82:	2200      	movs	r2, #0
 800ce84:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ce86:	4b32      	ldr	r3, [pc, #200]	@ (800cf50 <USBD_CDC_DeInit+0xfc>)
 800ce88:	781b      	ldrb	r3, [r3, #0]
 800ce8a:	4619      	mov	r1, r3
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f002 faf4 	bl	800f47a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ce92:	4b2f      	ldr	r3, [pc, #188]	@ (800cf50 <USBD_CDC_DeInit+0xfc>)
 800ce94:	781b      	ldrb	r3, [r3, #0]
 800ce96:	f003 020f 	and.w	r2, r3, #15
 800ce9a:	6879      	ldr	r1, [r7, #4]
 800ce9c:	4613      	mov	r3, r2
 800ce9e:	009b      	lsls	r3, r3, #2
 800cea0:	4413      	add	r3, r2
 800cea2:	009b      	lsls	r3, r3, #2
 800cea4:	440b      	add	r3, r1
 800cea6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ceaa:	2200      	movs	r2, #0
 800ceac:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ceae:	4b29      	ldr	r3, [pc, #164]	@ (800cf54 <USBD_CDC_DeInit+0x100>)
 800ceb0:	781b      	ldrb	r3, [r3, #0]
 800ceb2:	4619      	mov	r1, r3
 800ceb4:	6878      	ldr	r0, [r7, #4]
 800ceb6:	f002 fae0 	bl	800f47a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ceba:	4b26      	ldr	r3, [pc, #152]	@ (800cf54 <USBD_CDC_DeInit+0x100>)
 800cebc:	781b      	ldrb	r3, [r3, #0]
 800cebe:	f003 020f 	and.w	r2, r3, #15
 800cec2:	6879      	ldr	r1, [r7, #4]
 800cec4:	4613      	mov	r3, r2
 800cec6:	009b      	lsls	r3, r3, #2
 800cec8:	4413      	add	r3, r2
 800ceca:	009b      	lsls	r3, r3, #2
 800cecc:	440b      	add	r3, r1
 800cece:	3324      	adds	r3, #36	@ 0x24
 800ced0:	2200      	movs	r2, #0
 800ced2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ced4:	4b1f      	ldr	r3, [pc, #124]	@ (800cf54 <USBD_CDC_DeInit+0x100>)
 800ced6:	781b      	ldrb	r3, [r3, #0]
 800ced8:	f003 020f 	and.w	r2, r3, #15
 800cedc:	6879      	ldr	r1, [r7, #4]
 800cede:	4613      	mov	r3, r2
 800cee0:	009b      	lsls	r3, r3, #2
 800cee2:	4413      	add	r3, r2
 800cee4:	009b      	lsls	r3, r3, #2
 800cee6:	440b      	add	r3, r1
 800cee8:	3326      	adds	r3, #38	@ 0x26
 800ceea:	2200      	movs	r2, #0
 800ceec:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	32b0      	adds	r2, #176	@ 0xb0
 800cef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d01f      	beq.n	800cf40 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cf06:	687a      	ldr	r2, [r7, #4]
 800cf08:	33b0      	adds	r3, #176	@ 0xb0
 800cf0a:	009b      	lsls	r3, r3, #2
 800cf0c:	4413      	add	r3, r2
 800cf0e:	685b      	ldr	r3, [r3, #4]
 800cf10:	685b      	ldr	r3, [r3, #4]
 800cf12:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	32b0      	adds	r2, #176	@ 0xb0
 800cf1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf22:	4618      	mov	r0, r3
 800cf24:	f002 fbb4 	bl	800f690 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	32b0      	adds	r2, #176	@ 0xb0
 800cf32:	2100      	movs	r1, #0
 800cf34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cf40:	2300      	movs	r3, #0
}
 800cf42:	4618      	mov	r0, r3
 800cf44:	3708      	adds	r7, #8
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}
 800cf4a:	bf00      	nop
 800cf4c:	240000bf 	.word	0x240000bf
 800cf50:	240000c0 	.word	0x240000c0
 800cf54:	240000c1 	.word	0x240000c1

0800cf58 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b086      	sub	sp, #24
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
 800cf60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	32b0      	adds	r2, #176	@ 0xb0
 800cf6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf70:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800cf72:	2300      	movs	r3, #0
 800cf74:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800cf76:	2300      	movs	r3, #0
 800cf78:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800cf7e:	693b      	ldr	r3, [r7, #16]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d101      	bne.n	800cf88 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800cf84:	2303      	movs	r3, #3
 800cf86:	e0bf      	b.n	800d108 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	781b      	ldrb	r3, [r3, #0]
 800cf8c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d050      	beq.n	800d036 <USBD_CDC_Setup+0xde>
 800cf94:	2b20      	cmp	r3, #32
 800cf96:	f040 80af 	bne.w	800d0f8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	88db      	ldrh	r3, [r3, #6]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d03a      	beq.n	800d018 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	781b      	ldrb	r3, [r3, #0]
 800cfa6:	b25b      	sxtb	r3, r3
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	da1b      	bge.n	800cfe4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cfb2:	687a      	ldr	r2, [r7, #4]
 800cfb4:	33b0      	adds	r3, #176	@ 0xb0
 800cfb6:	009b      	lsls	r3, r3, #2
 800cfb8:	4413      	add	r3, r2
 800cfba:	685b      	ldr	r3, [r3, #4]
 800cfbc:	689b      	ldr	r3, [r3, #8]
 800cfbe:	683a      	ldr	r2, [r7, #0]
 800cfc0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800cfc2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cfc4:	683a      	ldr	r2, [r7, #0]
 800cfc6:	88d2      	ldrh	r2, [r2, #6]
 800cfc8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800cfca:	683b      	ldr	r3, [r7, #0]
 800cfcc:	88db      	ldrh	r3, [r3, #6]
 800cfce:	2b07      	cmp	r3, #7
 800cfd0:	bf28      	it	cs
 800cfd2:	2307      	movcs	r3, #7
 800cfd4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800cfd6:	693b      	ldr	r3, [r7, #16]
 800cfd8:	89fa      	ldrh	r2, [r7, #14]
 800cfda:	4619      	mov	r1, r3
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	f001 fdbd 	bl	800eb5c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800cfe2:	e090      	b.n	800d106 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	785a      	ldrb	r2, [r3, #1]
 800cfe8:	693b      	ldr	r3, [r7, #16]
 800cfea:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	88db      	ldrh	r3, [r3, #6]
 800cff2:	2b3f      	cmp	r3, #63	@ 0x3f
 800cff4:	d803      	bhi.n	800cffe <USBD_CDC_Setup+0xa6>
 800cff6:	683b      	ldr	r3, [r7, #0]
 800cff8:	88db      	ldrh	r3, [r3, #6]
 800cffa:	b2da      	uxtb	r2, r3
 800cffc:	e000      	b.n	800d000 <USBD_CDC_Setup+0xa8>
 800cffe:	2240      	movs	r2, #64	@ 0x40
 800d000:	693b      	ldr	r3, [r7, #16]
 800d002:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d006:	6939      	ldr	r1, [r7, #16]
 800d008:	693b      	ldr	r3, [r7, #16]
 800d00a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800d00e:	461a      	mov	r2, r3
 800d010:	6878      	ldr	r0, [r7, #4]
 800d012:	f001 fdcf 	bl	800ebb4 <USBD_CtlPrepareRx>
      break;
 800d016:	e076      	b.n	800d106 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d01e:	687a      	ldr	r2, [r7, #4]
 800d020:	33b0      	adds	r3, #176	@ 0xb0
 800d022:	009b      	lsls	r3, r3, #2
 800d024:	4413      	add	r3, r2
 800d026:	685b      	ldr	r3, [r3, #4]
 800d028:	689b      	ldr	r3, [r3, #8]
 800d02a:	683a      	ldr	r2, [r7, #0]
 800d02c:	7850      	ldrb	r0, [r2, #1]
 800d02e:	2200      	movs	r2, #0
 800d030:	6839      	ldr	r1, [r7, #0]
 800d032:	4798      	blx	r3
      break;
 800d034:	e067      	b.n	800d106 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	785b      	ldrb	r3, [r3, #1]
 800d03a:	2b0b      	cmp	r3, #11
 800d03c:	d851      	bhi.n	800d0e2 <USBD_CDC_Setup+0x18a>
 800d03e:	a201      	add	r2, pc, #4	@ (adr r2, 800d044 <USBD_CDC_Setup+0xec>)
 800d040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d044:	0800d075 	.word	0x0800d075
 800d048:	0800d0f1 	.word	0x0800d0f1
 800d04c:	0800d0e3 	.word	0x0800d0e3
 800d050:	0800d0e3 	.word	0x0800d0e3
 800d054:	0800d0e3 	.word	0x0800d0e3
 800d058:	0800d0e3 	.word	0x0800d0e3
 800d05c:	0800d0e3 	.word	0x0800d0e3
 800d060:	0800d0e3 	.word	0x0800d0e3
 800d064:	0800d0e3 	.word	0x0800d0e3
 800d068:	0800d0e3 	.word	0x0800d0e3
 800d06c:	0800d09f 	.word	0x0800d09f
 800d070:	0800d0c9 	.word	0x0800d0c9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d07a:	b2db      	uxtb	r3, r3
 800d07c:	2b03      	cmp	r3, #3
 800d07e:	d107      	bne.n	800d090 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d080:	f107 030a 	add.w	r3, r7, #10
 800d084:	2202      	movs	r2, #2
 800d086:	4619      	mov	r1, r3
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	f001 fd67 	bl	800eb5c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d08e:	e032      	b.n	800d0f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d090:	6839      	ldr	r1, [r7, #0]
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f001 fce5 	bl	800ea62 <USBD_CtlError>
            ret = USBD_FAIL;
 800d098:	2303      	movs	r3, #3
 800d09a:	75fb      	strb	r3, [r7, #23]
          break;
 800d09c:	e02b      	b.n	800d0f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d0a4:	b2db      	uxtb	r3, r3
 800d0a6:	2b03      	cmp	r3, #3
 800d0a8:	d107      	bne.n	800d0ba <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d0aa:	f107 030d 	add.w	r3, r7, #13
 800d0ae:	2201      	movs	r2, #1
 800d0b0:	4619      	mov	r1, r3
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f001 fd52 	bl	800eb5c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d0b8:	e01d      	b.n	800d0f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d0ba:	6839      	ldr	r1, [r7, #0]
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f001 fcd0 	bl	800ea62 <USBD_CtlError>
            ret = USBD_FAIL;
 800d0c2:	2303      	movs	r3, #3
 800d0c4:	75fb      	strb	r3, [r7, #23]
          break;
 800d0c6:	e016      	b.n	800d0f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d0ce:	b2db      	uxtb	r3, r3
 800d0d0:	2b03      	cmp	r3, #3
 800d0d2:	d00f      	beq.n	800d0f4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d0d4:	6839      	ldr	r1, [r7, #0]
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f001 fcc3 	bl	800ea62 <USBD_CtlError>
            ret = USBD_FAIL;
 800d0dc:	2303      	movs	r3, #3
 800d0de:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d0e0:	e008      	b.n	800d0f4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d0e2:	6839      	ldr	r1, [r7, #0]
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f001 fcbc 	bl	800ea62 <USBD_CtlError>
          ret = USBD_FAIL;
 800d0ea:	2303      	movs	r3, #3
 800d0ec:	75fb      	strb	r3, [r7, #23]
          break;
 800d0ee:	e002      	b.n	800d0f6 <USBD_CDC_Setup+0x19e>
          break;
 800d0f0:	bf00      	nop
 800d0f2:	e008      	b.n	800d106 <USBD_CDC_Setup+0x1ae>
          break;
 800d0f4:	bf00      	nop
      }
      break;
 800d0f6:	e006      	b.n	800d106 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d0f8:	6839      	ldr	r1, [r7, #0]
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f001 fcb1 	bl	800ea62 <USBD_CtlError>
      ret = USBD_FAIL;
 800d100:	2303      	movs	r3, #3
 800d102:	75fb      	strb	r3, [r7, #23]
      break;
 800d104:	bf00      	nop
  }

  return (uint8_t)ret;
 800d106:	7dfb      	ldrb	r3, [r7, #23]
}
 800d108:	4618      	mov	r0, r3
 800d10a:	3718      	adds	r7, #24
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}

0800d110 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b084      	sub	sp, #16
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
 800d118:	460b      	mov	r3, r1
 800d11a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d122:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	32b0      	adds	r2, #176	@ 0xb0
 800d12e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d101      	bne.n	800d13a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d136:	2303      	movs	r3, #3
 800d138:	e065      	b.n	800d206 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	32b0      	adds	r2, #176	@ 0xb0
 800d144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d148:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d14a:	78fb      	ldrb	r3, [r7, #3]
 800d14c:	f003 020f 	and.w	r2, r3, #15
 800d150:	6879      	ldr	r1, [r7, #4]
 800d152:	4613      	mov	r3, r2
 800d154:	009b      	lsls	r3, r3, #2
 800d156:	4413      	add	r3, r2
 800d158:	009b      	lsls	r3, r3, #2
 800d15a:	440b      	add	r3, r1
 800d15c:	3318      	adds	r3, #24
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d02f      	beq.n	800d1c4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d164:	78fb      	ldrb	r3, [r7, #3]
 800d166:	f003 020f 	and.w	r2, r3, #15
 800d16a:	6879      	ldr	r1, [r7, #4]
 800d16c:	4613      	mov	r3, r2
 800d16e:	009b      	lsls	r3, r3, #2
 800d170:	4413      	add	r3, r2
 800d172:	009b      	lsls	r3, r3, #2
 800d174:	440b      	add	r3, r1
 800d176:	3318      	adds	r3, #24
 800d178:	681a      	ldr	r2, [r3, #0]
 800d17a:	78fb      	ldrb	r3, [r7, #3]
 800d17c:	f003 010f 	and.w	r1, r3, #15
 800d180:	68f8      	ldr	r0, [r7, #12]
 800d182:	460b      	mov	r3, r1
 800d184:	00db      	lsls	r3, r3, #3
 800d186:	440b      	add	r3, r1
 800d188:	009b      	lsls	r3, r3, #2
 800d18a:	4403      	add	r3, r0
 800d18c:	331c      	adds	r3, #28
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	fbb2 f1f3 	udiv	r1, r2, r3
 800d194:	fb01 f303 	mul.w	r3, r1, r3
 800d198:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d112      	bne.n	800d1c4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d19e:	78fb      	ldrb	r3, [r7, #3]
 800d1a0:	f003 020f 	and.w	r2, r3, #15
 800d1a4:	6879      	ldr	r1, [r7, #4]
 800d1a6:	4613      	mov	r3, r2
 800d1a8:	009b      	lsls	r3, r3, #2
 800d1aa:	4413      	add	r3, r2
 800d1ac:	009b      	lsls	r3, r3, #2
 800d1ae:	440b      	add	r3, r1
 800d1b0:	3318      	adds	r3, #24
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d1b6:	78f9      	ldrb	r1, [r7, #3]
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f002 fa04 	bl	800f5ca <USBD_LL_Transmit>
 800d1c2:	e01f      	b.n	800d204 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d1d2:	687a      	ldr	r2, [r7, #4]
 800d1d4:	33b0      	adds	r3, #176	@ 0xb0
 800d1d6:	009b      	lsls	r3, r3, #2
 800d1d8:	4413      	add	r3, r2
 800d1da:	685b      	ldr	r3, [r3, #4]
 800d1dc:	691b      	ldr	r3, [r3, #16]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d010      	beq.n	800d204 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d1e8:	687a      	ldr	r2, [r7, #4]
 800d1ea:	33b0      	adds	r3, #176	@ 0xb0
 800d1ec:	009b      	lsls	r3, r3, #2
 800d1ee:	4413      	add	r3, r2
 800d1f0:	685b      	ldr	r3, [r3, #4]
 800d1f2:	691b      	ldr	r3, [r3, #16]
 800d1f4:	68ba      	ldr	r2, [r7, #8]
 800d1f6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800d1fa:	68ba      	ldr	r2, [r7, #8]
 800d1fc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800d200:	78fa      	ldrb	r2, [r7, #3]
 800d202:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d204:	2300      	movs	r3, #0
}
 800d206:	4618      	mov	r0, r3
 800d208:	3710      	adds	r7, #16
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}

0800d20e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d20e:	b580      	push	{r7, lr}
 800d210:	b084      	sub	sp, #16
 800d212:	af00      	add	r7, sp, #0
 800d214:	6078      	str	r0, [r7, #4]
 800d216:	460b      	mov	r3, r1
 800d218:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	32b0      	adds	r2, #176	@ 0xb0
 800d224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d228:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	32b0      	adds	r2, #176	@ 0xb0
 800d234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d101      	bne.n	800d240 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d23c:	2303      	movs	r3, #3
 800d23e:	e01a      	b.n	800d276 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d240:	78fb      	ldrb	r3, [r7, #3]
 800d242:	4619      	mov	r1, r3
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f002 fa02 	bl	800f64e <USBD_LL_GetRxDataSize>
 800d24a:	4602      	mov	r2, r0
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d258:	687a      	ldr	r2, [r7, #4]
 800d25a:	33b0      	adds	r3, #176	@ 0xb0
 800d25c:	009b      	lsls	r3, r3, #2
 800d25e:	4413      	add	r3, r2
 800d260:	685b      	ldr	r3, [r3, #4]
 800d262:	68db      	ldr	r3, [r3, #12]
 800d264:	68fa      	ldr	r2, [r7, #12]
 800d266:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800d26a:	68fa      	ldr	r2, [r7, #12]
 800d26c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800d270:	4611      	mov	r1, r2
 800d272:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d274:	2300      	movs	r3, #0
}
 800d276:	4618      	mov	r0, r3
 800d278:	3710      	adds	r7, #16
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bd80      	pop	{r7, pc}

0800d27e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d27e:	b580      	push	{r7, lr}
 800d280:	b084      	sub	sp, #16
 800d282:	af00      	add	r7, sp, #0
 800d284:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	32b0      	adds	r2, #176	@ 0xb0
 800d290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d294:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d101      	bne.n	800d2a0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d29c:	2303      	movs	r3, #3
 800d29e:	e024      	b.n	800d2ea <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d2a6:	687a      	ldr	r2, [r7, #4]
 800d2a8:	33b0      	adds	r3, #176	@ 0xb0
 800d2aa:	009b      	lsls	r3, r3, #2
 800d2ac:	4413      	add	r3, r2
 800d2ae:	685b      	ldr	r3, [r3, #4]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d019      	beq.n	800d2e8 <USBD_CDC_EP0_RxReady+0x6a>
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d2ba:	2bff      	cmp	r3, #255	@ 0xff
 800d2bc:	d014      	beq.n	800d2e8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d2c4:	687a      	ldr	r2, [r7, #4]
 800d2c6:	33b0      	adds	r3, #176	@ 0xb0
 800d2c8:	009b      	lsls	r3, r3, #2
 800d2ca:	4413      	add	r3, r2
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	689b      	ldr	r3, [r3, #8]
 800d2d0:	68fa      	ldr	r2, [r7, #12]
 800d2d2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800d2d6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d2d8:	68fa      	ldr	r2, [r7, #12]
 800d2da:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d2de:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	22ff      	movs	r2, #255	@ 0xff
 800d2e4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800d2e8:	2300      	movs	r3, #0
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	3710      	adds	r7, #16
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}
	...

0800d2f4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b086      	sub	sp, #24
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d2fc:	2182      	movs	r1, #130	@ 0x82
 800d2fe:	4818      	ldr	r0, [pc, #96]	@ (800d360 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d300:	f000 fd4f 	bl	800dda2 <USBD_GetEpDesc>
 800d304:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d306:	2101      	movs	r1, #1
 800d308:	4815      	ldr	r0, [pc, #84]	@ (800d360 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d30a:	f000 fd4a 	bl	800dda2 <USBD_GetEpDesc>
 800d30e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d310:	2181      	movs	r1, #129	@ 0x81
 800d312:	4813      	ldr	r0, [pc, #76]	@ (800d360 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d314:	f000 fd45 	bl	800dda2 <USBD_GetEpDesc>
 800d318:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d31a:	697b      	ldr	r3, [r7, #20]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d002      	beq.n	800d326 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d320:	697b      	ldr	r3, [r7, #20]
 800d322:	2210      	movs	r2, #16
 800d324:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d326:	693b      	ldr	r3, [r7, #16]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d006      	beq.n	800d33a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d32c:	693b      	ldr	r3, [r7, #16]
 800d32e:	2200      	movs	r2, #0
 800d330:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d334:	711a      	strb	r2, [r3, #4]
 800d336:	2200      	movs	r2, #0
 800d338:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d006      	beq.n	800d34e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	2200      	movs	r2, #0
 800d344:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d348:	711a      	strb	r2, [r3, #4]
 800d34a:	2200      	movs	r2, #0
 800d34c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2243      	movs	r2, #67	@ 0x43
 800d352:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d354:	4b02      	ldr	r3, [pc, #8]	@ (800d360 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d356:	4618      	mov	r0, r3
 800d358:	3718      	adds	r7, #24
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}
 800d35e:	bf00      	nop
 800d360:	2400007c 	.word	0x2400007c

0800d364 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b086      	sub	sp, #24
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d36c:	2182      	movs	r1, #130	@ 0x82
 800d36e:	4818      	ldr	r0, [pc, #96]	@ (800d3d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d370:	f000 fd17 	bl	800dda2 <USBD_GetEpDesc>
 800d374:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d376:	2101      	movs	r1, #1
 800d378:	4815      	ldr	r0, [pc, #84]	@ (800d3d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d37a:	f000 fd12 	bl	800dda2 <USBD_GetEpDesc>
 800d37e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d380:	2181      	movs	r1, #129	@ 0x81
 800d382:	4813      	ldr	r0, [pc, #76]	@ (800d3d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d384:	f000 fd0d 	bl	800dda2 <USBD_GetEpDesc>
 800d388:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d002      	beq.n	800d396 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d390:	697b      	ldr	r3, [r7, #20]
 800d392:	2210      	movs	r2, #16
 800d394:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d396:	693b      	ldr	r3, [r7, #16]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d006      	beq.n	800d3aa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d39c:	693b      	ldr	r3, [r7, #16]
 800d39e:	2200      	movs	r2, #0
 800d3a0:	711a      	strb	r2, [r3, #4]
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	f042 0202 	orr.w	r2, r2, #2
 800d3a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d006      	beq.n	800d3be <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	711a      	strb	r2, [r3, #4]
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	f042 0202 	orr.w	r2, r2, #2
 800d3bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2243      	movs	r2, #67	@ 0x43
 800d3c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d3c4:	4b02      	ldr	r3, [pc, #8]	@ (800d3d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	3718      	adds	r7, #24
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}
 800d3ce:	bf00      	nop
 800d3d0:	2400007c 	.word	0x2400007c

0800d3d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b086      	sub	sp, #24
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d3dc:	2182      	movs	r1, #130	@ 0x82
 800d3de:	4818      	ldr	r0, [pc, #96]	@ (800d440 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d3e0:	f000 fcdf 	bl	800dda2 <USBD_GetEpDesc>
 800d3e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d3e6:	2101      	movs	r1, #1
 800d3e8:	4815      	ldr	r0, [pc, #84]	@ (800d440 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d3ea:	f000 fcda 	bl	800dda2 <USBD_GetEpDesc>
 800d3ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d3f0:	2181      	movs	r1, #129	@ 0x81
 800d3f2:	4813      	ldr	r0, [pc, #76]	@ (800d440 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d3f4:	f000 fcd5 	bl	800dda2 <USBD_GetEpDesc>
 800d3f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d3fa:	697b      	ldr	r3, [r7, #20]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d002      	beq.n	800d406 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	2210      	movs	r2, #16
 800d404:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d406:	693b      	ldr	r3, [r7, #16]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d006      	beq.n	800d41a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d40c:	693b      	ldr	r3, [r7, #16]
 800d40e:	2200      	movs	r2, #0
 800d410:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d414:	711a      	strb	r2, [r3, #4]
 800d416:	2200      	movs	r2, #0
 800d418:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d006      	beq.n	800d42e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	2200      	movs	r2, #0
 800d424:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d428:	711a      	strb	r2, [r3, #4]
 800d42a:	2200      	movs	r2, #0
 800d42c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2243      	movs	r2, #67	@ 0x43
 800d432:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d434:	4b02      	ldr	r3, [pc, #8]	@ (800d440 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d436:	4618      	mov	r0, r3
 800d438:	3718      	adds	r7, #24
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd80      	pop	{r7, pc}
 800d43e:	bf00      	nop
 800d440:	2400007c 	.word	0x2400007c

0800d444 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d444:	b480      	push	{r7}
 800d446:	b083      	sub	sp, #12
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	220a      	movs	r2, #10
 800d450:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d452:	4b03      	ldr	r3, [pc, #12]	@ (800d460 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d454:	4618      	mov	r0, r3
 800d456:	370c      	adds	r7, #12
 800d458:	46bd      	mov	sp, r7
 800d45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45e:	4770      	bx	lr
 800d460:	24000038 	.word	0x24000038

0800d464 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d464:	b480      	push	{r7}
 800d466:	b083      	sub	sp, #12
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
 800d46c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d101      	bne.n	800d478 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d474:	2303      	movs	r3, #3
 800d476:	e009      	b.n	800d48c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d47e:	687a      	ldr	r2, [r7, #4]
 800d480:	33b0      	adds	r3, #176	@ 0xb0
 800d482:	009b      	lsls	r3, r3, #2
 800d484:	4413      	add	r3, r2
 800d486:	683a      	ldr	r2, [r7, #0]
 800d488:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d48a:	2300      	movs	r3, #0
}
 800d48c:	4618      	mov	r0, r3
 800d48e:	370c      	adds	r7, #12
 800d490:	46bd      	mov	sp, r7
 800d492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d496:	4770      	bx	lr

0800d498 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d498:	b480      	push	{r7}
 800d49a:	b087      	sub	sp, #28
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	60f8      	str	r0, [r7, #12]
 800d4a0:	60b9      	str	r1, [r7, #8]
 800d4a2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	32b0      	adds	r2, #176	@ 0xb0
 800d4ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4b2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d101      	bne.n	800d4be <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d4ba:	2303      	movs	r3, #3
 800d4bc:	e008      	b.n	800d4d0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	68ba      	ldr	r2, [r7, #8]
 800d4c2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	687a      	ldr	r2, [r7, #4]
 800d4ca:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800d4ce:	2300      	movs	r3, #0
}
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	371c      	adds	r7, #28
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4da:	4770      	bx	lr

0800d4dc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d4dc:	b480      	push	{r7}
 800d4de:	b085      	sub	sp, #20
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
 800d4e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	32b0      	adds	r2, #176	@ 0xb0
 800d4f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d101      	bne.n	800d500 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d4fc:	2303      	movs	r3, #3
 800d4fe:	e004      	b.n	800d50a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	683a      	ldr	r2, [r7, #0]
 800d504:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800d508:	2300      	movs	r3, #0
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	3714      	adds	r7, #20
 800d50e:	46bd      	mov	sp, r7
 800d510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d514:	4770      	bx	lr
	...

0800d518 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b084      	sub	sp, #16
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	32b0      	adds	r2, #176	@ 0xb0
 800d52a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d52e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800d530:	2301      	movs	r3, #1
 800d532:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d101      	bne.n	800d53e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d53a:	2303      	movs	r3, #3
 800d53c:	e025      	b.n	800d58a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d544:	2b00      	cmp	r3, #0
 800d546:	d11f      	bne.n	800d588 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d548:	68bb      	ldr	r3, [r7, #8]
 800d54a:	2201      	movs	r2, #1
 800d54c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d550:	4b10      	ldr	r3, [pc, #64]	@ (800d594 <USBD_CDC_TransmitPacket+0x7c>)
 800d552:	781b      	ldrb	r3, [r3, #0]
 800d554:	f003 020f 	and.w	r2, r3, #15
 800d558:	68bb      	ldr	r3, [r7, #8]
 800d55a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	4613      	mov	r3, r2
 800d562:	009b      	lsls	r3, r3, #2
 800d564:	4413      	add	r3, r2
 800d566:	009b      	lsls	r3, r3, #2
 800d568:	4403      	add	r3, r0
 800d56a:	3318      	adds	r3, #24
 800d56c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d56e:	4b09      	ldr	r3, [pc, #36]	@ (800d594 <USBD_CDC_TransmitPacket+0x7c>)
 800d570:	7819      	ldrb	r1, [r3, #0]
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	f002 f823 	bl	800f5ca <USBD_LL_Transmit>

    ret = USBD_OK;
 800d584:	2300      	movs	r3, #0
 800d586:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d588:	7bfb      	ldrb	r3, [r7, #15]
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	3710      	adds	r7, #16
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}
 800d592:	bf00      	nop
 800d594:	240000bf 	.word	0x240000bf

0800d598 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b084      	sub	sp, #16
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	32b0      	adds	r2, #176	@ 0xb0
 800d5aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5ae:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	32b0      	adds	r2, #176	@ 0xb0
 800d5ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d101      	bne.n	800d5c6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d5c2:	2303      	movs	r3, #3
 800d5c4:	e018      	b.n	800d5f8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	7c1b      	ldrb	r3, [r3, #16]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d10a      	bne.n	800d5e4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d5ce:	4b0c      	ldr	r3, [pc, #48]	@ (800d600 <USBD_CDC_ReceivePacket+0x68>)
 800d5d0:	7819      	ldrb	r1, [r3, #0]
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d5d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d5dc:	6878      	ldr	r0, [r7, #4]
 800d5de:	f002 f815 	bl	800f60c <USBD_LL_PrepareReceive>
 800d5e2:	e008      	b.n	800d5f6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d5e4:	4b06      	ldr	r3, [pc, #24]	@ (800d600 <USBD_CDC_ReceivePacket+0x68>)
 800d5e6:	7819      	ldrb	r1, [r3, #0]
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d5ee:	2340      	movs	r3, #64	@ 0x40
 800d5f0:	6878      	ldr	r0, [r7, #4]
 800d5f2:	f002 f80b 	bl	800f60c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d5f6:	2300      	movs	r3, #0
}
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	3710      	adds	r7, #16
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bd80      	pop	{r7, pc}
 800d600:	240000c0 	.word	0x240000c0

0800d604 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b086      	sub	sp, #24
 800d608:	af00      	add	r7, sp, #0
 800d60a:	60f8      	str	r0, [r7, #12]
 800d60c:	60b9      	str	r1, [r7, #8]
 800d60e:	4613      	mov	r3, r2
 800d610:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d101      	bne.n	800d61c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d618:	2303      	movs	r3, #3
 800d61a:	e01f      	b.n	800d65c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	2200      	movs	r2, #0
 800d620:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	2200      	movs	r2, #0
 800d628:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	2200      	movs	r2, #0
 800d630:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d003      	beq.n	800d642 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	68ba      	ldr	r2, [r7, #8]
 800d63e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	2201      	movs	r2, #1
 800d646:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	79fa      	ldrb	r2, [r7, #7]
 800d64e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d650:	68f8      	ldr	r0, [r7, #12]
 800d652:	f001 fe81 	bl	800f358 <USBD_LL_Init>
 800d656:	4603      	mov	r3, r0
 800d658:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d65a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	3718      	adds	r7, #24
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}

0800d664 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b084      	sub	sp, #16
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d66e:	2300      	movs	r3, #0
 800d670:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d101      	bne.n	800d67c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d678:	2303      	movs	r3, #3
 800d67a:	e025      	b.n	800d6c8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	683a      	ldr	r2, [r7, #0]
 800d680:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	32ae      	adds	r2, #174	@ 0xae
 800d68e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d694:	2b00      	cmp	r3, #0
 800d696:	d00f      	beq.n	800d6b8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	32ae      	adds	r2, #174	@ 0xae
 800d6a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6a8:	f107 020e 	add.w	r2, r7, #14
 800d6ac:	4610      	mov	r0, r2
 800d6ae:	4798      	blx	r3
 800d6b0:	4602      	mov	r2, r0
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d6be:	1c5a      	adds	r2, r3, #1
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800d6c6:	2300      	movs	r3, #0
}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	3710      	adds	r7, #16
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}

0800d6d0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b082      	sub	sp, #8
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d6d8:	6878      	ldr	r0, [r7, #4]
 800d6da:	f001 fe8d 	bl	800f3f8 <USBD_LL_Start>
 800d6de:	4603      	mov	r3, r0
}
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	3708      	adds	r7, #8
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bd80      	pop	{r7, pc}

0800d6e8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d6e8:	b480      	push	{r7}
 800d6ea:	b083      	sub	sp, #12
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d6f0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	370c      	adds	r7, #12
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fc:	4770      	bx	lr

0800d6fe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d6fe:	b580      	push	{r7, lr}
 800d700:	b084      	sub	sp, #16
 800d702:	af00      	add	r7, sp, #0
 800d704:	6078      	str	r0, [r7, #4]
 800d706:	460b      	mov	r3, r1
 800d708:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d70a:	2300      	movs	r3, #0
 800d70c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d714:	2b00      	cmp	r3, #0
 800d716:	d009      	beq.n	800d72c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	78fa      	ldrb	r2, [r7, #3]
 800d722:	4611      	mov	r1, r2
 800d724:	6878      	ldr	r0, [r7, #4]
 800d726:	4798      	blx	r3
 800d728:	4603      	mov	r3, r0
 800d72a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d72c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d72e:	4618      	mov	r0, r3
 800d730:	3710      	adds	r7, #16
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}

0800d736 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d736:	b580      	push	{r7, lr}
 800d738:	b084      	sub	sp, #16
 800d73a:	af00      	add	r7, sp, #0
 800d73c:	6078      	str	r0, [r7, #4]
 800d73e:	460b      	mov	r3, r1
 800d740:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d742:	2300      	movs	r3, #0
 800d744:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d74c:	685b      	ldr	r3, [r3, #4]
 800d74e:	78fa      	ldrb	r2, [r7, #3]
 800d750:	4611      	mov	r1, r2
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	4798      	blx	r3
 800d756:	4603      	mov	r3, r0
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d001      	beq.n	800d760 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d75c:	2303      	movs	r3, #3
 800d75e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d760:	7bfb      	ldrb	r3, [r7, #15]
}
 800d762:	4618      	mov	r0, r3
 800d764:	3710      	adds	r7, #16
 800d766:	46bd      	mov	sp, r7
 800d768:	bd80      	pop	{r7, pc}

0800d76a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d76a:	b580      	push	{r7, lr}
 800d76c:	b084      	sub	sp, #16
 800d76e:	af00      	add	r7, sp, #0
 800d770:	6078      	str	r0, [r7, #4]
 800d772:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d77a:	6839      	ldr	r1, [r7, #0]
 800d77c:	4618      	mov	r0, r3
 800d77e:	f001 f936 	bl	800e9ee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2201      	movs	r2, #1
 800d786:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800d790:	461a      	mov	r2, r3
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d79e:	f003 031f 	and.w	r3, r3, #31
 800d7a2:	2b02      	cmp	r3, #2
 800d7a4:	d01a      	beq.n	800d7dc <USBD_LL_SetupStage+0x72>
 800d7a6:	2b02      	cmp	r3, #2
 800d7a8:	d822      	bhi.n	800d7f0 <USBD_LL_SetupStage+0x86>
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d002      	beq.n	800d7b4 <USBD_LL_SetupStage+0x4a>
 800d7ae:	2b01      	cmp	r3, #1
 800d7b0:	d00a      	beq.n	800d7c8 <USBD_LL_SetupStage+0x5e>
 800d7b2:	e01d      	b.n	800d7f0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d7ba:	4619      	mov	r1, r3
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f000 fb63 	bl	800de88 <USBD_StdDevReq>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	73fb      	strb	r3, [r7, #15]
      break;
 800d7c6:	e020      	b.n	800d80a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d7ce:	4619      	mov	r1, r3
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	f000 fbcb 	bl	800df6c <USBD_StdItfReq>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	73fb      	strb	r3, [r7, #15]
      break;
 800d7da:	e016      	b.n	800d80a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d7e2:	4619      	mov	r1, r3
 800d7e4:	6878      	ldr	r0, [r7, #4]
 800d7e6:	f000 fc2d 	bl	800e044 <USBD_StdEPReq>
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	73fb      	strb	r3, [r7, #15]
      break;
 800d7ee:	e00c      	b.n	800d80a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d7f6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d7fa:	b2db      	uxtb	r3, r3
 800d7fc:	4619      	mov	r1, r3
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f001 fe5a 	bl	800f4b8 <USBD_LL_StallEP>
 800d804:	4603      	mov	r3, r0
 800d806:	73fb      	strb	r3, [r7, #15]
      break;
 800d808:	bf00      	nop
  }

  return ret;
 800d80a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d80c:	4618      	mov	r0, r3
 800d80e:	3710      	adds	r7, #16
 800d810:	46bd      	mov	sp, r7
 800d812:	bd80      	pop	{r7, pc}

0800d814 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b086      	sub	sp, #24
 800d818:	af00      	add	r7, sp, #0
 800d81a:	60f8      	str	r0, [r7, #12]
 800d81c:	460b      	mov	r3, r1
 800d81e:	607a      	str	r2, [r7, #4]
 800d820:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d822:	2300      	movs	r3, #0
 800d824:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d826:	7afb      	ldrb	r3, [r7, #11]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d16e      	bne.n	800d90a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d832:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d83a:	2b03      	cmp	r3, #3
 800d83c:	f040 8098 	bne.w	800d970 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d840:	693b      	ldr	r3, [r7, #16]
 800d842:	689a      	ldr	r2, [r3, #8]
 800d844:	693b      	ldr	r3, [r7, #16]
 800d846:	68db      	ldr	r3, [r3, #12]
 800d848:	429a      	cmp	r2, r3
 800d84a:	d913      	bls.n	800d874 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d84c:	693b      	ldr	r3, [r7, #16]
 800d84e:	689a      	ldr	r2, [r3, #8]
 800d850:	693b      	ldr	r3, [r7, #16]
 800d852:	68db      	ldr	r3, [r3, #12]
 800d854:	1ad2      	subs	r2, r2, r3
 800d856:	693b      	ldr	r3, [r7, #16]
 800d858:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d85a:	693b      	ldr	r3, [r7, #16]
 800d85c:	68da      	ldr	r2, [r3, #12]
 800d85e:	693b      	ldr	r3, [r7, #16]
 800d860:	689b      	ldr	r3, [r3, #8]
 800d862:	4293      	cmp	r3, r2
 800d864:	bf28      	it	cs
 800d866:	4613      	movcs	r3, r2
 800d868:	461a      	mov	r2, r3
 800d86a:	6879      	ldr	r1, [r7, #4]
 800d86c:	68f8      	ldr	r0, [r7, #12]
 800d86e:	f001 f9be 	bl	800ebee <USBD_CtlContinueRx>
 800d872:	e07d      	b.n	800d970 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d87a:	f003 031f 	and.w	r3, r3, #31
 800d87e:	2b02      	cmp	r3, #2
 800d880:	d014      	beq.n	800d8ac <USBD_LL_DataOutStage+0x98>
 800d882:	2b02      	cmp	r3, #2
 800d884:	d81d      	bhi.n	800d8c2 <USBD_LL_DataOutStage+0xae>
 800d886:	2b00      	cmp	r3, #0
 800d888:	d002      	beq.n	800d890 <USBD_LL_DataOutStage+0x7c>
 800d88a:	2b01      	cmp	r3, #1
 800d88c:	d003      	beq.n	800d896 <USBD_LL_DataOutStage+0x82>
 800d88e:	e018      	b.n	800d8c2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d890:	2300      	movs	r3, #0
 800d892:	75bb      	strb	r3, [r7, #22]
            break;
 800d894:	e018      	b.n	800d8c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d89c:	b2db      	uxtb	r3, r3
 800d89e:	4619      	mov	r1, r3
 800d8a0:	68f8      	ldr	r0, [r7, #12]
 800d8a2:	f000 fa64 	bl	800dd6e <USBD_CoreFindIF>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	75bb      	strb	r3, [r7, #22]
            break;
 800d8aa:	e00d      	b.n	800d8c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d8b2:	b2db      	uxtb	r3, r3
 800d8b4:	4619      	mov	r1, r3
 800d8b6:	68f8      	ldr	r0, [r7, #12]
 800d8b8:	f000 fa66 	bl	800dd88 <USBD_CoreFindEP>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	75bb      	strb	r3, [r7, #22]
            break;
 800d8c0:	e002      	b.n	800d8c8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	75bb      	strb	r3, [r7, #22]
            break;
 800d8c6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d8c8:	7dbb      	ldrb	r3, [r7, #22]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d119      	bne.n	800d902 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d8d4:	b2db      	uxtb	r3, r3
 800d8d6:	2b03      	cmp	r3, #3
 800d8d8:	d113      	bne.n	800d902 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d8da:	7dba      	ldrb	r2, [r7, #22]
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	32ae      	adds	r2, #174	@ 0xae
 800d8e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8e4:	691b      	ldr	r3, [r3, #16]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d00b      	beq.n	800d902 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d8ea:	7dba      	ldrb	r2, [r7, #22]
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d8f2:	7dba      	ldrb	r2, [r7, #22]
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	32ae      	adds	r2, #174	@ 0xae
 800d8f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8fc:	691b      	ldr	r3, [r3, #16]
 800d8fe:	68f8      	ldr	r0, [r7, #12]
 800d900:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d902:	68f8      	ldr	r0, [r7, #12]
 800d904:	f001 f984 	bl	800ec10 <USBD_CtlSendStatus>
 800d908:	e032      	b.n	800d970 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d90a:	7afb      	ldrb	r3, [r7, #11]
 800d90c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d910:	b2db      	uxtb	r3, r3
 800d912:	4619      	mov	r1, r3
 800d914:	68f8      	ldr	r0, [r7, #12]
 800d916:	f000 fa37 	bl	800dd88 <USBD_CoreFindEP>
 800d91a:	4603      	mov	r3, r0
 800d91c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d91e:	7dbb      	ldrb	r3, [r7, #22]
 800d920:	2bff      	cmp	r3, #255	@ 0xff
 800d922:	d025      	beq.n	800d970 <USBD_LL_DataOutStage+0x15c>
 800d924:	7dbb      	ldrb	r3, [r7, #22]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d122      	bne.n	800d970 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d930:	b2db      	uxtb	r3, r3
 800d932:	2b03      	cmp	r3, #3
 800d934:	d117      	bne.n	800d966 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d936:	7dba      	ldrb	r2, [r7, #22]
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	32ae      	adds	r2, #174	@ 0xae
 800d93c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d940:	699b      	ldr	r3, [r3, #24]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d00f      	beq.n	800d966 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d946:	7dba      	ldrb	r2, [r7, #22]
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d94e:	7dba      	ldrb	r2, [r7, #22]
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	32ae      	adds	r2, #174	@ 0xae
 800d954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d958:	699b      	ldr	r3, [r3, #24]
 800d95a:	7afa      	ldrb	r2, [r7, #11]
 800d95c:	4611      	mov	r1, r2
 800d95e:	68f8      	ldr	r0, [r7, #12]
 800d960:	4798      	blx	r3
 800d962:	4603      	mov	r3, r0
 800d964:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d966:	7dfb      	ldrb	r3, [r7, #23]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d001      	beq.n	800d970 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d96c:	7dfb      	ldrb	r3, [r7, #23]
 800d96e:	e000      	b.n	800d972 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d970:	2300      	movs	r3, #0
}
 800d972:	4618      	mov	r0, r3
 800d974:	3718      	adds	r7, #24
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}

0800d97a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d97a:	b580      	push	{r7, lr}
 800d97c:	b086      	sub	sp, #24
 800d97e:	af00      	add	r7, sp, #0
 800d980:	60f8      	str	r0, [r7, #12]
 800d982:	460b      	mov	r3, r1
 800d984:	607a      	str	r2, [r7, #4]
 800d986:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d988:	7afb      	ldrb	r3, [r7, #11]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d16f      	bne.n	800da6e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	3314      	adds	r3, #20
 800d992:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d99a:	2b02      	cmp	r3, #2
 800d99c:	d15a      	bne.n	800da54 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d99e:	693b      	ldr	r3, [r7, #16]
 800d9a0:	689a      	ldr	r2, [r3, #8]
 800d9a2:	693b      	ldr	r3, [r7, #16]
 800d9a4:	68db      	ldr	r3, [r3, #12]
 800d9a6:	429a      	cmp	r2, r3
 800d9a8:	d914      	bls.n	800d9d4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d9aa:	693b      	ldr	r3, [r7, #16]
 800d9ac:	689a      	ldr	r2, [r3, #8]
 800d9ae:	693b      	ldr	r3, [r7, #16]
 800d9b0:	68db      	ldr	r3, [r3, #12]
 800d9b2:	1ad2      	subs	r2, r2, r3
 800d9b4:	693b      	ldr	r3, [r7, #16]
 800d9b6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	689b      	ldr	r3, [r3, #8]
 800d9bc:	461a      	mov	r2, r3
 800d9be:	6879      	ldr	r1, [r7, #4]
 800d9c0:	68f8      	ldr	r0, [r7, #12]
 800d9c2:	f001 f8e6 	bl	800eb92 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	2100      	movs	r1, #0
 800d9cc:	68f8      	ldr	r0, [r7, #12]
 800d9ce:	f001 fe1d 	bl	800f60c <USBD_LL_PrepareReceive>
 800d9d2:	e03f      	b.n	800da54 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	68da      	ldr	r2, [r3, #12]
 800d9d8:	693b      	ldr	r3, [r7, #16]
 800d9da:	689b      	ldr	r3, [r3, #8]
 800d9dc:	429a      	cmp	r2, r3
 800d9de:	d11c      	bne.n	800da1a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d9e0:	693b      	ldr	r3, [r7, #16]
 800d9e2:	685a      	ldr	r2, [r3, #4]
 800d9e4:	693b      	ldr	r3, [r7, #16]
 800d9e6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d9e8:	429a      	cmp	r2, r3
 800d9ea:	d316      	bcc.n	800da1a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d9ec:	693b      	ldr	r3, [r7, #16]
 800d9ee:	685a      	ldr	r2, [r3, #4]
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d9f6:	429a      	cmp	r2, r3
 800d9f8:	d20f      	bcs.n	800da1a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	2100      	movs	r1, #0
 800d9fe:	68f8      	ldr	r0, [r7, #12]
 800da00:	f001 f8c7 	bl	800eb92 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	2200      	movs	r2, #0
 800da08:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800da0c:	2300      	movs	r3, #0
 800da0e:	2200      	movs	r2, #0
 800da10:	2100      	movs	r1, #0
 800da12:	68f8      	ldr	r0, [r7, #12]
 800da14:	f001 fdfa 	bl	800f60c <USBD_LL_PrepareReceive>
 800da18:	e01c      	b.n	800da54 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da20:	b2db      	uxtb	r3, r3
 800da22:	2b03      	cmp	r3, #3
 800da24:	d10f      	bne.n	800da46 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da2c:	68db      	ldr	r3, [r3, #12]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d009      	beq.n	800da46 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	2200      	movs	r2, #0
 800da36:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da40:	68db      	ldr	r3, [r3, #12]
 800da42:	68f8      	ldr	r0, [r7, #12]
 800da44:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800da46:	2180      	movs	r1, #128	@ 0x80
 800da48:	68f8      	ldr	r0, [r7, #12]
 800da4a:	f001 fd35 	bl	800f4b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800da4e:	68f8      	ldr	r0, [r7, #12]
 800da50:	f001 f8f1 	bl	800ec36 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d03a      	beq.n	800dad4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800da5e:	68f8      	ldr	r0, [r7, #12]
 800da60:	f7ff fe42 	bl	800d6e8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	2200      	movs	r2, #0
 800da68:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800da6c:	e032      	b.n	800dad4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800da6e:	7afb      	ldrb	r3, [r7, #11]
 800da70:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800da74:	b2db      	uxtb	r3, r3
 800da76:	4619      	mov	r1, r3
 800da78:	68f8      	ldr	r0, [r7, #12]
 800da7a:	f000 f985 	bl	800dd88 <USBD_CoreFindEP>
 800da7e:	4603      	mov	r3, r0
 800da80:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800da82:	7dfb      	ldrb	r3, [r7, #23]
 800da84:	2bff      	cmp	r3, #255	@ 0xff
 800da86:	d025      	beq.n	800dad4 <USBD_LL_DataInStage+0x15a>
 800da88:	7dfb      	ldrb	r3, [r7, #23]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d122      	bne.n	800dad4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da94:	b2db      	uxtb	r3, r3
 800da96:	2b03      	cmp	r3, #3
 800da98:	d11c      	bne.n	800dad4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800da9a:	7dfa      	ldrb	r2, [r7, #23]
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	32ae      	adds	r2, #174	@ 0xae
 800daa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800daa4:	695b      	ldr	r3, [r3, #20]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d014      	beq.n	800dad4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800daaa:	7dfa      	ldrb	r2, [r7, #23]
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800dab2:	7dfa      	ldrb	r2, [r7, #23]
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	32ae      	adds	r2, #174	@ 0xae
 800dab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dabc:	695b      	ldr	r3, [r3, #20]
 800dabe:	7afa      	ldrb	r2, [r7, #11]
 800dac0:	4611      	mov	r1, r2
 800dac2:	68f8      	ldr	r0, [r7, #12]
 800dac4:	4798      	blx	r3
 800dac6:	4603      	mov	r3, r0
 800dac8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800daca:	7dbb      	ldrb	r3, [r7, #22]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d001      	beq.n	800dad4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800dad0:	7dbb      	ldrb	r3, [r7, #22]
 800dad2:	e000      	b.n	800dad6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800dad4:	2300      	movs	r3, #0
}
 800dad6:	4618      	mov	r0, r3
 800dad8:	3718      	adds	r7, #24
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}

0800dade <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800dade:	b580      	push	{r7, lr}
 800dae0:	b084      	sub	sp, #16
 800dae2:	af00      	add	r7, sp, #0
 800dae4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800dae6:	2300      	movs	r3, #0
 800dae8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2201      	movs	r2, #1
 800daee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2200      	movs	r2, #0
 800daf6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	2200      	movs	r2, #0
 800dafe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2200      	movs	r2, #0
 800db04:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2200      	movs	r2, #0
 800db0c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db16:	2b00      	cmp	r3, #0
 800db18:	d014      	beq.n	800db44 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db20:	685b      	ldr	r3, [r3, #4]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d00e      	beq.n	800db44 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db2c:	685b      	ldr	r3, [r3, #4]
 800db2e:	687a      	ldr	r2, [r7, #4]
 800db30:	6852      	ldr	r2, [r2, #4]
 800db32:	b2d2      	uxtb	r2, r2
 800db34:	4611      	mov	r1, r2
 800db36:	6878      	ldr	r0, [r7, #4]
 800db38:	4798      	blx	r3
 800db3a:	4603      	mov	r3, r0
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d001      	beq.n	800db44 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800db40:	2303      	movs	r3, #3
 800db42:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800db44:	2340      	movs	r3, #64	@ 0x40
 800db46:	2200      	movs	r2, #0
 800db48:	2100      	movs	r1, #0
 800db4a:	6878      	ldr	r0, [r7, #4]
 800db4c:	f001 fc6f 	bl	800f42e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2201      	movs	r2, #1
 800db54:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2240      	movs	r2, #64	@ 0x40
 800db5c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800db60:	2340      	movs	r3, #64	@ 0x40
 800db62:	2200      	movs	r2, #0
 800db64:	2180      	movs	r1, #128	@ 0x80
 800db66:	6878      	ldr	r0, [r7, #4]
 800db68:	f001 fc61 	bl	800f42e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2201      	movs	r2, #1
 800db70:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2240      	movs	r2, #64	@ 0x40
 800db76:	621a      	str	r2, [r3, #32]

  return ret;
 800db78:	7bfb      	ldrb	r3, [r7, #15]
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	3710      	adds	r7, #16
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}

0800db82 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800db82:	b480      	push	{r7}
 800db84:	b083      	sub	sp, #12
 800db86:	af00      	add	r7, sp, #0
 800db88:	6078      	str	r0, [r7, #4]
 800db8a:	460b      	mov	r3, r1
 800db8c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	78fa      	ldrb	r2, [r7, #3]
 800db92:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800db94:	2300      	movs	r3, #0
}
 800db96:	4618      	mov	r0, r3
 800db98:	370c      	adds	r7, #12
 800db9a:	46bd      	mov	sp, r7
 800db9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba0:	4770      	bx	lr

0800dba2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800dba2:	b480      	push	{r7}
 800dba4:	b083      	sub	sp, #12
 800dba6:	af00      	add	r7, sp, #0
 800dba8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dbb0:	b2db      	uxtb	r3, r3
 800dbb2:	2b04      	cmp	r3, #4
 800dbb4:	d006      	beq.n	800dbc4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dbbc:	b2da      	uxtb	r2, r3
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2204      	movs	r2, #4
 800dbc8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800dbcc:	2300      	movs	r3, #0
}
 800dbce:	4618      	mov	r0, r3
 800dbd0:	370c      	adds	r7, #12
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd8:	4770      	bx	lr

0800dbda <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800dbda:	b480      	push	{r7}
 800dbdc:	b083      	sub	sp, #12
 800dbde:	af00      	add	r7, sp, #0
 800dbe0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dbe8:	b2db      	uxtb	r3, r3
 800dbea:	2b04      	cmp	r3, #4
 800dbec:	d106      	bne.n	800dbfc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800dbf4:	b2da      	uxtb	r2, r3
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800dbfc:	2300      	movs	r3, #0
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	370c      	adds	r7, #12
 800dc02:	46bd      	mov	sp, r7
 800dc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc08:	4770      	bx	lr

0800dc0a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800dc0a:	b580      	push	{r7, lr}
 800dc0c:	b082      	sub	sp, #8
 800dc0e:	af00      	add	r7, sp, #0
 800dc10:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc18:	b2db      	uxtb	r3, r3
 800dc1a:	2b03      	cmp	r3, #3
 800dc1c:	d110      	bne.n	800dc40 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d00b      	beq.n	800dc40 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc2e:	69db      	ldr	r3, [r3, #28]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d005      	beq.n	800dc40 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc3a:	69db      	ldr	r3, [r3, #28]
 800dc3c:	6878      	ldr	r0, [r7, #4]
 800dc3e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800dc40:	2300      	movs	r3, #0
}
 800dc42:	4618      	mov	r0, r3
 800dc44:	3708      	adds	r7, #8
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd80      	pop	{r7, pc}

0800dc4a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800dc4a:	b580      	push	{r7, lr}
 800dc4c:	b082      	sub	sp, #8
 800dc4e:	af00      	add	r7, sp, #0
 800dc50:	6078      	str	r0, [r7, #4]
 800dc52:	460b      	mov	r3, r1
 800dc54:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	32ae      	adds	r2, #174	@ 0xae
 800dc60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d101      	bne.n	800dc6c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800dc68:	2303      	movs	r3, #3
 800dc6a:	e01c      	b.n	800dca6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc72:	b2db      	uxtb	r3, r3
 800dc74:	2b03      	cmp	r3, #3
 800dc76:	d115      	bne.n	800dca4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	32ae      	adds	r2, #174	@ 0xae
 800dc82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc86:	6a1b      	ldr	r3, [r3, #32]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d00b      	beq.n	800dca4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	32ae      	adds	r2, #174	@ 0xae
 800dc96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc9a:	6a1b      	ldr	r3, [r3, #32]
 800dc9c:	78fa      	ldrb	r2, [r7, #3]
 800dc9e:	4611      	mov	r1, r2
 800dca0:	6878      	ldr	r0, [r7, #4]
 800dca2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dca4:	2300      	movs	r3, #0
}
 800dca6:	4618      	mov	r0, r3
 800dca8:	3708      	adds	r7, #8
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}

0800dcae <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800dcae:	b580      	push	{r7, lr}
 800dcb0:	b082      	sub	sp, #8
 800dcb2:	af00      	add	r7, sp, #0
 800dcb4:	6078      	str	r0, [r7, #4]
 800dcb6:	460b      	mov	r3, r1
 800dcb8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	32ae      	adds	r2, #174	@ 0xae
 800dcc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d101      	bne.n	800dcd0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800dccc:	2303      	movs	r3, #3
 800dcce:	e01c      	b.n	800dd0a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dcd6:	b2db      	uxtb	r3, r3
 800dcd8:	2b03      	cmp	r3, #3
 800dcda:	d115      	bne.n	800dd08 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	32ae      	adds	r2, #174	@ 0xae
 800dce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d00b      	beq.n	800dd08 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	32ae      	adds	r2, #174	@ 0xae
 800dcfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd00:	78fa      	ldrb	r2, [r7, #3]
 800dd02:	4611      	mov	r1, r2
 800dd04:	6878      	ldr	r0, [r7, #4]
 800dd06:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dd08:	2300      	movs	r3, #0
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3708      	adds	r7, #8
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}

0800dd12 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800dd12:	b480      	push	{r7}
 800dd14:	b083      	sub	sp, #12
 800dd16:	af00      	add	r7, sp, #0
 800dd18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dd1a:	2300      	movs	r3, #0
}
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	370c      	adds	r7, #12
 800dd20:	46bd      	mov	sp, r7
 800dd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd26:	4770      	bx	lr

0800dd28 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b084      	sub	sp, #16
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800dd30:	2300      	movs	r3, #0
 800dd32:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2201      	movs	r2, #1
 800dd38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d00e      	beq.n	800dd64 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd4c:	685b      	ldr	r3, [r3, #4]
 800dd4e:	687a      	ldr	r2, [r7, #4]
 800dd50:	6852      	ldr	r2, [r2, #4]
 800dd52:	b2d2      	uxtb	r2, r2
 800dd54:	4611      	mov	r1, r2
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	4798      	blx	r3
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d001      	beq.n	800dd64 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800dd60:	2303      	movs	r3, #3
 800dd62:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800dd64:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd66:	4618      	mov	r0, r3
 800dd68:	3710      	adds	r7, #16
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}

0800dd6e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dd6e:	b480      	push	{r7}
 800dd70:	b083      	sub	sp, #12
 800dd72:	af00      	add	r7, sp, #0
 800dd74:	6078      	str	r0, [r7, #4]
 800dd76:	460b      	mov	r3, r1
 800dd78:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800dd7a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	370c      	adds	r7, #12
 800dd80:	46bd      	mov	sp, r7
 800dd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd86:	4770      	bx	lr

0800dd88 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dd88:	b480      	push	{r7}
 800dd8a:	b083      	sub	sp, #12
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
 800dd90:	460b      	mov	r3, r1
 800dd92:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800dd94:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800dd96:	4618      	mov	r0, r3
 800dd98:	370c      	adds	r7, #12
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda0:	4770      	bx	lr

0800dda2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800dda2:	b580      	push	{r7, lr}
 800dda4:	b086      	sub	sp, #24
 800dda6:	af00      	add	r7, sp, #0
 800dda8:	6078      	str	r0, [r7, #4]
 800ddaa:	460b      	mov	r3, r1
 800ddac:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	885b      	ldrh	r3, [r3, #2]
 800ddbe:	b29b      	uxth	r3, r3
 800ddc0:	68fa      	ldr	r2, [r7, #12]
 800ddc2:	7812      	ldrb	r2, [r2, #0]
 800ddc4:	4293      	cmp	r3, r2
 800ddc6:	d91f      	bls.n	800de08 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	781b      	ldrb	r3, [r3, #0]
 800ddcc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ddce:	e013      	b.n	800ddf8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ddd0:	f107 030a 	add.w	r3, r7, #10
 800ddd4:	4619      	mov	r1, r3
 800ddd6:	6978      	ldr	r0, [r7, #20]
 800ddd8:	f000 f81b 	bl	800de12 <USBD_GetNextDesc>
 800dddc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ddde:	697b      	ldr	r3, [r7, #20]
 800dde0:	785b      	ldrb	r3, [r3, #1]
 800dde2:	2b05      	cmp	r3, #5
 800dde4:	d108      	bne.n	800ddf8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ddea:	693b      	ldr	r3, [r7, #16]
 800ddec:	789b      	ldrb	r3, [r3, #2]
 800ddee:	78fa      	ldrb	r2, [r7, #3]
 800ddf0:	429a      	cmp	r2, r3
 800ddf2:	d008      	beq.n	800de06 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	885b      	ldrh	r3, [r3, #2]
 800ddfc:	b29a      	uxth	r2, r3
 800ddfe:	897b      	ldrh	r3, [r7, #10]
 800de00:	429a      	cmp	r2, r3
 800de02:	d8e5      	bhi.n	800ddd0 <USBD_GetEpDesc+0x2e>
 800de04:	e000      	b.n	800de08 <USBD_GetEpDesc+0x66>
          break;
 800de06:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800de08:	693b      	ldr	r3, [r7, #16]
}
 800de0a:	4618      	mov	r0, r3
 800de0c:	3718      	adds	r7, #24
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}

0800de12 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800de12:	b480      	push	{r7}
 800de14:	b085      	sub	sp, #20
 800de16:	af00      	add	r7, sp, #0
 800de18:	6078      	str	r0, [r7, #4]
 800de1a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	881b      	ldrh	r3, [r3, #0]
 800de24:	68fa      	ldr	r2, [r7, #12]
 800de26:	7812      	ldrb	r2, [r2, #0]
 800de28:	4413      	add	r3, r2
 800de2a:	b29a      	uxth	r2, r3
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	781b      	ldrb	r3, [r3, #0]
 800de34:	461a      	mov	r2, r3
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	4413      	add	r3, r2
 800de3a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800de3c:	68fb      	ldr	r3, [r7, #12]
}
 800de3e:	4618      	mov	r0, r3
 800de40:	3714      	adds	r7, #20
 800de42:	46bd      	mov	sp, r7
 800de44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de48:	4770      	bx	lr

0800de4a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800de4a:	b480      	push	{r7}
 800de4c:	b087      	sub	sp, #28
 800de4e:	af00      	add	r7, sp, #0
 800de50:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800de56:	697b      	ldr	r3, [r7, #20]
 800de58:	781b      	ldrb	r3, [r3, #0]
 800de5a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800de5c:	697b      	ldr	r3, [r7, #20]
 800de5e:	3301      	adds	r3, #1
 800de60:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800de62:	697b      	ldr	r3, [r7, #20]
 800de64:	781b      	ldrb	r3, [r3, #0]
 800de66:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800de68:	8a3b      	ldrh	r3, [r7, #16]
 800de6a:	021b      	lsls	r3, r3, #8
 800de6c:	b21a      	sxth	r2, r3
 800de6e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800de72:	4313      	orrs	r3, r2
 800de74:	b21b      	sxth	r3, r3
 800de76:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800de78:	89fb      	ldrh	r3, [r7, #14]
}
 800de7a:	4618      	mov	r0, r3
 800de7c:	371c      	adds	r7, #28
 800de7e:	46bd      	mov	sp, r7
 800de80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de84:	4770      	bx	lr
	...

0800de88 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b084      	sub	sp, #16
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
 800de90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800de92:	2300      	movs	r3, #0
 800de94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	781b      	ldrb	r3, [r3, #0]
 800de9a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800de9e:	2b40      	cmp	r3, #64	@ 0x40
 800dea0:	d005      	beq.n	800deae <USBD_StdDevReq+0x26>
 800dea2:	2b40      	cmp	r3, #64	@ 0x40
 800dea4:	d857      	bhi.n	800df56 <USBD_StdDevReq+0xce>
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d00f      	beq.n	800deca <USBD_StdDevReq+0x42>
 800deaa:	2b20      	cmp	r3, #32
 800deac:	d153      	bne.n	800df56 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	32ae      	adds	r2, #174	@ 0xae
 800deb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800debc:	689b      	ldr	r3, [r3, #8]
 800debe:	6839      	ldr	r1, [r7, #0]
 800dec0:	6878      	ldr	r0, [r7, #4]
 800dec2:	4798      	blx	r3
 800dec4:	4603      	mov	r3, r0
 800dec6:	73fb      	strb	r3, [r7, #15]
      break;
 800dec8:	e04a      	b.n	800df60 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	785b      	ldrb	r3, [r3, #1]
 800dece:	2b09      	cmp	r3, #9
 800ded0:	d83b      	bhi.n	800df4a <USBD_StdDevReq+0xc2>
 800ded2:	a201      	add	r2, pc, #4	@ (adr r2, 800ded8 <USBD_StdDevReq+0x50>)
 800ded4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ded8:	0800df2d 	.word	0x0800df2d
 800dedc:	0800df41 	.word	0x0800df41
 800dee0:	0800df4b 	.word	0x0800df4b
 800dee4:	0800df37 	.word	0x0800df37
 800dee8:	0800df4b 	.word	0x0800df4b
 800deec:	0800df0b 	.word	0x0800df0b
 800def0:	0800df01 	.word	0x0800df01
 800def4:	0800df4b 	.word	0x0800df4b
 800def8:	0800df23 	.word	0x0800df23
 800defc:	0800df15 	.word	0x0800df15
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800df00:	6839      	ldr	r1, [r7, #0]
 800df02:	6878      	ldr	r0, [r7, #4]
 800df04:	f000 fa3c 	bl	800e380 <USBD_GetDescriptor>
          break;
 800df08:	e024      	b.n	800df54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800df0a:	6839      	ldr	r1, [r7, #0]
 800df0c:	6878      	ldr	r0, [r7, #4]
 800df0e:	f000 fbcb 	bl	800e6a8 <USBD_SetAddress>
          break;
 800df12:	e01f      	b.n	800df54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800df14:	6839      	ldr	r1, [r7, #0]
 800df16:	6878      	ldr	r0, [r7, #4]
 800df18:	f000 fc0a 	bl	800e730 <USBD_SetConfig>
 800df1c:	4603      	mov	r3, r0
 800df1e:	73fb      	strb	r3, [r7, #15]
          break;
 800df20:	e018      	b.n	800df54 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800df22:	6839      	ldr	r1, [r7, #0]
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	f000 fcad 	bl	800e884 <USBD_GetConfig>
          break;
 800df2a:	e013      	b.n	800df54 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800df2c:	6839      	ldr	r1, [r7, #0]
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f000 fcde 	bl	800e8f0 <USBD_GetStatus>
          break;
 800df34:	e00e      	b.n	800df54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800df36:	6839      	ldr	r1, [r7, #0]
 800df38:	6878      	ldr	r0, [r7, #4]
 800df3a:	f000 fd0d 	bl	800e958 <USBD_SetFeature>
          break;
 800df3e:	e009      	b.n	800df54 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800df40:	6839      	ldr	r1, [r7, #0]
 800df42:	6878      	ldr	r0, [r7, #4]
 800df44:	f000 fd31 	bl	800e9aa <USBD_ClrFeature>
          break;
 800df48:	e004      	b.n	800df54 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800df4a:	6839      	ldr	r1, [r7, #0]
 800df4c:	6878      	ldr	r0, [r7, #4]
 800df4e:	f000 fd88 	bl	800ea62 <USBD_CtlError>
          break;
 800df52:	bf00      	nop
      }
      break;
 800df54:	e004      	b.n	800df60 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800df56:	6839      	ldr	r1, [r7, #0]
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f000 fd82 	bl	800ea62 <USBD_CtlError>
      break;
 800df5e:	bf00      	nop
  }

  return ret;
 800df60:	7bfb      	ldrb	r3, [r7, #15]
}
 800df62:	4618      	mov	r0, r3
 800df64:	3710      	adds	r7, #16
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}
 800df6a:	bf00      	nop

0800df6c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b084      	sub	sp, #16
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
 800df74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800df76:	2300      	movs	r3, #0
 800df78:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	781b      	ldrb	r3, [r3, #0]
 800df7e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800df82:	2b40      	cmp	r3, #64	@ 0x40
 800df84:	d005      	beq.n	800df92 <USBD_StdItfReq+0x26>
 800df86:	2b40      	cmp	r3, #64	@ 0x40
 800df88:	d852      	bhi.n	800e030 <USBD_StdItfReq+0xc4>
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d001      	beq.n	800df92 <USBD_StdItfReq+0x26>
 800df8e:	2b20      	cmp	r3, #32
 800df90:	d14e      	bne.n	800e030 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800df98:	b2db      	uxtb	r3, r3
 800df9a:	3b01      	subs	r3, #1
 800df9c:	2b02      	cmp	r3, #2
 800df9e:	d840      	bhi.n	800e022 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	889b      	ldrh	r3, [r3, #4]
 800dfa4:	b2db      	uxtb	r3, r3
 800dfa6:	2b01      	cmp	r3, #1
 800dfa8:	d836      	bhi.n	800e018 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800dfaa:	683b      	ldr	r3, [r7, #0]
 800dfac:	889b      	ldrh	r3, [r3, #4]
 800dfae:	b2db      	uxtb	r3, r3
 800dfb0:	4619      	mov	r1, r3
 800dfb2:	6878      	ldr	r0, [r7, #4]
 800dfb4:	f7ff fedb 	bl	800dd6e <USBD_CoreFindIF>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dfbc:	7bbb      	ldrb	r3, [r7, #14]
 800dfbe:	2bff      	cmp	r3, #255	@ 0xff
 800dfc0:	d01d      	beq.n	800dffe <USBD_StdItfReq+0x92>
 800dfc2:	7bbb      	ldrb	r3, [r7, #14]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d11a      	bne.n	800dffe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800dfc8:	7bba      	ldrb	r2, [r7, #14]
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	32ae      	adds	r2, #174	@ 0xae
 800dfce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfd2:	689b      	ldr	r3, [r3, #8]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d00f      	beq.n	800dff8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800dfd8:	7bba      	ldrb	r2, [r7, #14]
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800dfe0:	7bba      	ldrb	r2, [r7, #14]
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	32ae      	adds	r2, #174	@ 0xae
 800dfe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfea:	689b      	ldr	r3, [r3, #8]
 800dfec:	6839      	ldr	r1, [r7, #0]
 800dfee:	6878      	ldr	r0, [r7, #4]
 800dff0:	4798      	blx	r3
 800dff2:	4603      	mov	r3, r0
 800dff4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800dff6:	e004      	b.n	800e002 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800dff8:	2303      	movs	r3, #3
 800dffa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800dffc:	e001      	b.n	800e002 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800dffe:	2303      	movs	r3, #3
 800e000:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	88db      	ldrh	r3, [r3, #6]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d110      	bne.n	800e02c <USBD_StdItfReq+0xc0>
 800e00a:	7bfb      	ldrb	r3, [r7, #15]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d10d      	bne.n	800e02c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e010:	6878      	ldr	r0, [r7, #4]
 800e012:	f000 fdfd 	bl	800ec10 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e016:	e009      	b.n	800e02c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e018:	6839      	ldr	r1, [r7, #0]
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	f000 fd21 	bl	800ea62 <USBD_CtlError>
          break;
 800e020:	e004      	b.n	800e02c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e022:	6839      	ldr	r1, [r7, #0]
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f000 fd1c 	bl	800ea62 <USBD_CtlError>
          break;
 800e02a:	e000      	b.n	800e02e <USBD_StdItfReq+0xc2>
          break;
 800e02c:	bf00      	nop
      }
      break;
 800e02e:	e004      	b.n	800e03a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e030:	6839      	ldr	r1, [r7, #0]
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f000 fd15 	bl	800ea62 <USBD_CtlError>
      break;
 800e038:	bf00      	nop
  }

  return ret;
 800e03a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	3710      	adds	r7, #16
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}

0800e044 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b084      	sub	sp, #16
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
 800e04c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e04e:	2300      	movs	r3, #0
 800e050:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	889b      	ldrh	r3, [r3, #4]
 800e056:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	781b      	ldrb	r3, [r3, #0]
 800e05c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e060:	2b40      	cmp	r3, #64	@ 0x40
 800e062:	d007      	beq.n	800e074 <USBD_StdEPReq+0x30>
 800e064:	2b40      	cmp	r3, #64	@ 0x40
 800e066:	f200 817f 	bhi.w	800e368 <USBD_StdEPReq+0x324>
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d02a      	beq.n	800e0c4 <USBD_StdEPReq+0x80>
 800e06e:	2b20      	cmp	r3, #32
 800e070:	f040 817a 	bne.w	800e368 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e074:	7bbb      	ldrb	r3, [r7, #14]
 800e076:	4619      	mov	r1, r3
 800e078:	6878      	ldr	r0, [r7, #4]
 800e07a:	f7ff fe85 	bl	800dd88 <USBD_CoreFindEP>
 800e07e:	4603      	mov	r3, r0
 800e080:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e082:	7b7b      	ldrb	r3, [r7, #13]
 800e084:	2bff      	cmp	r3, #255	@ 0xff
 800e086:	f000 8174 	beq.w	800e372 <USBD_StdEPReq+0x32e>
 800e08a:	7b7b      	ldrb	r3, [r7, #13]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	f040 8170 	bne.w	800e372 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e092:	7b7a      	ldrb	r2, [r7, #13]
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e09a:	7b7a      	ldrb	r2, [r7, #13]
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	32ae      	adds	r2, #174	@ 0xae
 800e0a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0a4:	689b      	ldr	r3, [r3, #8]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	f000 8163 	beq.w	800e372 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e0ac:	7b7a      	ldrb	r2, [r7, #13]
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	32ae      	adds	r2, #174	@ 0xae
 800e0b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0b6:	689b      	ldr	r3, [r3, #8]
 800e0b8:	6839      	ldr	r1, [r7, #0]
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	4798      	blx	r3
 800e0be:	4603      	mov	r3, r0
 800e0c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e0c2:	e156      	b.n	800e372 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	785b      	ldrb	r3, [r3, #1]
 800e0c8:	2b03      	cmp	r3, #3
 800e0ca:	d008      	beq.n	800e0de <USBD_StdEPReq+0x9a>
 800e0cc:	2b03      	cmp	r3, #3
 800e0ce:	f300 8145 	bgt.w	800e35c <USBD_StdEPReq+0x318>
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	f000 809b 	beq.w	800e20e <USBD_StdEPReq+0x1ca>
 800e0d8:	2b01      	cmp	r3, #1
 800e0da:	d03c      	beq.n	800e156 <USBD_StdEPReq+0x112>
 800e0dc:	e13e      	b.n	800e35c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e0e4:	b2db      	uxtb	r3, r3
 800e0e6:	2b02      	cmp	r3, #2
 800e0e8:	d002      	beq.n	800e0f0 <USBD_StdEPReq+0xac>
 800e0ea:	2b03      	cmp	r3, #3
 800e0ec:	d016      	beq.n	800e11c <USBD_StdEPReq+0xd8>
 800e0ee:	e02c      	b.n	800e14a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e0f0:	7bbb      	ldrb	r3, [r7, #14]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d00d      	beq.n	800e112 <USBD_StdEPReq+0xce>
 800e0f6:	7bbb      	ldrb	r3, [r7, #14]
 800e0f8:	2b80      	cmp	r3, #128	@ 0x80
 800e0fa:	d00a      	beq.n	800e112 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e0fc:	7bbb      	ldrb	r3, [r7, #14]
 800e0fe:	4619      	mov	r1, r3
 800e100:	6878      	ldr	r0, [r7, #4]
 800e102:	f001 f9d9 	bl	800f4b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e106:	2180      	movs	r1, #128	@ 0x80
 800e108:	6878      	ldr	r0, [r7, #4]
 800e10a:	f001 f9d5 	bl	800f4b8 <USBD_LL_StallEP>
 800e10e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e110:	e020      	b.n	800e154 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e112:	6839      	ldr	r1, [r7, #0]
 800e114:	6878      	ldr	r0, [r7, #4]
 800e116:	f000 fca4 	bl	800ea62 <USBD_CtlError>
              break;
 800e11a:	e01b      	b.n	800e154 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	885b      	ldrh	r3, [r3, #2]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d10e      	bne.n	800e142 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e124:	7bbb      	ldrb	r3, [r7, #14]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d00b      	beq.n	800e142 <USBD_StdEPReq+0xfe>
 800e12a:	7bbb      	ldrb	r3, [r7, #14]
 800e12c:	2b80      	cmp	r3, #128	@ 0x80
 800e12e:	d008      	beq.n	800e142 <USBD_StdEPReq+0xfe>
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	88db      	ldrh	r3, [r3, #6]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d104      	bne.n	800e142 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e138:	7bbb      	ldrb	r3, [r7, #14]
 800e13a:	4619      	mov	r1, r3
 800e13c:	6878      	ldr	r0, [r7, #4]
 800e13e:	f001 f9bb 	bl	800f4b8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e142:	6878      	ldr	r0, [r7, #4]
 800e144:	f000 fd64 	bl	800ec10 <USBD_CtlSendStatus>

              break;
 800e148:	e004      	b.n	800e154 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e14a:	6839      	ldr	r1, [r7, #0]
 800e14c:	6878      	ldr	r0, [r7, #4]
 800e14e:	f000 fc88 	bl	800ea62 <USBD_CtlError>
              break;
 800e152:	bf00      	nop
          }
          break;
 800e154:	e107      	b.n	800e366 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e15c:	b2db      	uxtb	r3, r3
 800e15e:	2b02      	cmp	r3, #2
 800e160:	d002      	beq.n	800e168 <USBD_StdEPReq+0x124>
 800e162:	2b03      	cmp	r3, #3
 800e164:	d016      	beq.n	800e194 <USBD_StdEPReq+0x150>
 800e166:	e04b      	b.n	800e200 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e168:	7bbb      	ldrb	r3, [r7, #14]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d00d      	beq.n	800e18a <USBD_StdEPReq+0x146>
 800e16e:	7bbb      	ldrb	r3, [r7, #14]
 800e170:	2b80      	cmp	r3, #128	@ 0x80
 800e172:	d00a      	beq.n	800e18a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e174:	7bbb      	ldrb	r3, [r7, #14]
 800e176:	4619      	mov	r1, r3
 800e178:	6878      	ldr	r0, [r7, #4]
 800e17a:	f001 f99d 	bl	800f4b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e17e:	2180      	movs	r1, #128	@ 0x80
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f001 f999 	bl	800f4b8 <USBD_LL_StallEP>
 800e186:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e188:	e040      	b.n	800e20c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e18a:	6839      	ldr	r1, [r7, #0]
 800e18c:	6878      	ldr	r0, [r7, #4]
 800e18e:	f000 fc68 	bl	800ea62 <USBD_CtlError>
              break;
 800e192:	e03b      	b.n	800e20c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e194:	683b      	ldr	r3, [r7, #0]
 800e196:	885b      	ldrh	r3, [r3, #2]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d136      	bne.n	800e20a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e19c:	7bbb      	ldrb	r3, [r7, #14]
 800e19e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d004      	beq.n	800e1b0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e1a6:	7bbb      	ldrb	r3, [r7, #14]
 800e1a8:	4619      	mov	r1, r3
 800e1aa:	6878      	ldr	r0, [r7, #4]
 800e1ac:	f001 f9a3 	bl	800f4f6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e1b0:	6878      	ldr	r0, [r7, #4]
 800e1b2:	f000 fd2d 	bl	800ec10 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e1b6:	7bbb      	ldrb	r3, [r7, #14]
 800e1b8:	4619      	mov	r1, r3
 800e1ba:	6878      	ldr	r0, [r7, #4]
 800e1bc:	f7ff fde4 	bl	800dd88 <USBD_CoreFindEP>
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e1c4:	7b7b      	ldrb	r3, [r7, #13]
 800e1c6:	2bff      	cmp	r3, #255	@ 0xff
 800e1c8:	d01f      	beq.n	800e20a <USBD_StdEPReq+0x1c6>
 800e1ca:	7b7b      	ldrb	r3, [r7, #13]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d11c      	bne.n	800e20a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e1d0:	7b7a      	ldrb	r2, [r7, #13]
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e1d8:	7b7a      	ldrb	r2, [r7, #13]
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	32ae      	adds	r2, #174	@ 0xae
 800e1de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1e2:	689b      	ldr	r3, [r3, #8]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d010      	beq.n	800e20a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e1e8:	7b7a      	ldrb	r2, [r7, #13]
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	32ae      	adds	r2, #174	@ 0xae
 800e1ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1f2:	689b      	ldr	r3, [r3, #8]
 800e1f4:	6839      	ldr	r1, [r7, #0]
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	4798      	blx	r3
 800e1fa:	4603      	mov	r3, r0
 800e1fc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e1fe:	e004      	b.n	800e20a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e200:	6839      	ldr	r1, [r7, #0]
 800e202:	6878      	ldr	r0, [r7, #4]
 800e204:	f000 fc2d 	bl	800ea62 <USBD_CtlError>
              break;
 800e208:	e000      	b.n	800e20c <USBD_StdEPReq+0x1c8>
              break;
 800e20a:	bf00      	nop
          }
          break;
 800e20c:	e0ab      	b.n	800e366 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e214:	b2db      	uxtb	r3, r3
 800e216:	2b02      	cmp	r3, #2
 800e218:	d002      	beq.n	800e220 <USBD_StdEPReq+0x1dc>
 800e21a:	2b03      	cmp	r3, #3
 800e21c:	d032      	beq.n	800e284 <USBD_StdEPReq+0x240>
 800e21e:	e097      	b.n	800e350 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e220:	7bbb      	ldrb	r3, [r7, #14]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d007      	beq.n	800e236 <USBD_StdEPReq+0x1f2>
 800e226:	7bbb      	ldrb	r3, [r7, #14]
 800e228:	2b80      	cmp	r3, #128	@ 0x80
 800e22a:	d004      	beq.n	800e236 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e22c:	6839      	ldr	r1, [r7, #0]
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	f000 fc17 	bl	800ea62 <USBD_CtlError>
                break;
 800e234:	e091      	b.n	800e35a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e236:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	da0b      	bge.n	800e256 <USBD_StdEPReq+0x212>
 800e23e:	7bbb      	ldrb	r3, [r7, #14]
 800e240:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e244:	4613      	mov	r3, r2
 800e246:	009b      	lsls	r3, r3, #2
 800e248:	4413      	add	r3, r2
 800e24a:	009b      	lsls	r3, r3, #2
 800e24c:	3310      	adds	r3, #16
 800e24e:	687a      	ldr	r2, [r7, #4]
 800e250:	4413      	add	r3, r2
 800e252:	3304      	adds	r3, #4
 800e254:	e00b      	b.n	800e26e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e256:	7bbb      	ldrb	r3, [r7, #14]
 800e258:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e25c:	4613      	mov	r3, r2
 800e25e:	009b      	lsls	r3, r3, #2
 800e260:	4413      	add	r3, r2
 800e262:	009b      	lsls	r3, r3, #2
 800e264:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e268:	687a      	ldr	r2, [r7, #4]
 800e26a:	4413      	add	r3, r2
 800e26c:	3304      	adds	r3, #4
 800e26e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e270:	68bb      	ldr	r3, [r7, #8]
 800e272:	2200      	movs	r2, #0
 800e274:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e276:	68bb      	ldr	r3, [r7, #8]
 800e278:	2202      	movs	r2, #2
 800e27a:	4619      	mov	r1, r3
 800e27c:	6878      	ldr	r0, [r7, #4]
 800e27e:	f000 fc6d 	bl	800eb5c <USBD_CtlSendData>
              break;
 800e282:	e06a      	b.n	800e35a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e284:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	da11      	bge.n	800e2b0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e28c:	7bbb      	ldrb	r3, [r7, #14]
 800e28e:	f003 020f 	and.w	r2, r3, #15
 800e292:	6879      	ldr	r1, [r7, #4]
 800e294:	4613      	mov	r3, r2
 800e296:	009b      	lsls	r3, r3, #2
 800e298:	4413      	add	r3, r2
 800e29a:	009b      	lsls	r3, r3, #2
 800e29c:	440b      	add	r3, r1
 800e29e:	3324      	adds	r3, #36	@ 0x24
 800e2a0:	881b      	ldrh	r3, [r3, #0]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d117      	bne.n	800e2d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e2a6:	6839      	ldr	r1, [r7, #0]
 800e2a8:	6878      	ldr	r0, [r7, #4]
 800e2aa:	f000 fbda 	bl	800ea62 <USBD_CtlError>
                  break;
 800e2ae:	e054      	b.n	800e35a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e2b0:	7bbb      	ldrb	r3, [r7, #14]
 800e2b2:	f003 020f 	and.w	r2, r3, #15
 800e2b6:	6879      	ldr	r1, [r7, #4]
 800e2b8:	4613      	mov	r3, r2
 800e2ba:	009b      	lsls	r3, r3, #2
 800e2bc:	4413      	add	r3, r2
 800e2be:	009b      	lsls	r3, r3, #2
 800e2c0:	440b      	add	r3, r1
 800e2c2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e2c6:	881b      	ldrh	r3, [r3, #0]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d104      	bne.n	800e2d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e2cc:	6839      	ldr	r1, [r7, #0]
 800e2ce:	6878      	ldr	r0, [r7, #4]
 800e2d0:	f000 fbc7 	bl	800ea62 <USBD_CtlError>
                  break;
 800e2d4:	e041      	b.n	800e35a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e2d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	da0b      	bge.n	800e2f6 <USBD_StdEPReq+0x2b2>
 800e2de:	7bbb      	ldrb	r3, [r7, #14]
 800e2e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e2e4:	4613      	mov	r3, r2
 800e2e6:	009b      	lsls	r3, r3, #2
 800e2e8:	4413      	add	r3, r2
 800e2ea:	009b      	lsls	r3, r3, #2
 800e2ec:	3310      	adds	r3, #16
 800e2ee:	687a      	ldr	r2, [r7, #4]
 800e2f0:	4413      	add	r3, r2
 800e2f2:	3304      	adds	r3, #4
 800e2f4:	e00b      	b.n	800e30e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e2f6:	7bbb      	ldrb	r3, [r7, #14]
 800e2f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e2fc:	4613      	mov	r3, r2
 800e2fe:	009b      	lsls	r3, r3, #2
 800e300:	4413      	add	r3, r2
 800e302:	009b      	lsls	r3, r3, #2
 800e304:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e308:	687a      	ldr	r2, [r7, #4]
 800e30a:	4413      	add	r3, r2
 800e30c:	3304      	adds	r3, #4
 800e30e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e310:	7bbb      	ldrb	r3, [r7, #14]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d002      	beq.n	800e31c <USBD_StdEPReq+0x2d8>
 800e316:	7bbb      	ldrb	r3, [r7, #14]
 800e318:	2b80      	cmp	r3, #128	@ 0x80
 800e31a:	d103      	bne.n	800e324 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e31c:	68bb      	ldr	r3, [r7, #8]
 800e31e:	2200      	movs	r2, #0
 800e320:	601a      	str	r2, [r3, #0]
 800e322:	e00e      	b.n	800e342 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e324:	7bbb      	ldrb	r3, [r7, #14]
 800e326:	4619      	mov	r1, r3
 800e328:	6878      	ldr	r0, [r7, #4]
 800e32a:	f001 f903 	bl	800f534 <USBD_LL_IsStallEP>
 800e32e:	4603      	mov	r3, r0
 800e330:	2b00      	cmp	r3, #0
 800e332:	d003      	beq.n	800e33c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e334:	68bb      	ldr	r3, [r7, #8]
 800e336:	2201      	movs	r2, #1
 800e338:	601a      	str	r2, [r3, #0]
 800e33a:	e002      	b.n	800e342 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e33c:	68bb      	ldr	r3, [r7, #8]
 800e33e:	2200      	movs	r2, #0
 800e340:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e342:	68bb      	ldr	r3, [r7, #8]
 800e344:	2202      	movs	r2, #2
 800e346:	4619      	mov	r1, r3
 800e348:	6878      	ldr	r0, [r7, #4]
 800e34a:	f000 fc07 	bl	800eb5c <USBD_CtlSendData>
              break;
 800e34e:	e004      	b.n	800e35a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e350:	6839      	ldr	r1, [r7, #0]
 800e352:	6878      	ldr	r0, [r7, #4]
 800e354:	f000 fb85 	bl	800ea62 <USBD_CtlError>
              break;
 800e358:	bf00      	nop
          }
          break;
 800e35a:	e004      	b.n	800e366 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e35c:	6839      	ldr	r1, [r7, #0]
 800e35e:	6878      	ldr	r0, [r7, #4]
 800e360:	f000 fb7f 	bl	800ea62 <USBD_CtlError>
          break;
 800e364:	bf00      	nop
      }
      break;
 800e366:	e005      	b.n	800e374 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e368:	6839      	ldr	r1, [r7, #0]
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f000 fb79 	bl	800ea62 <USBD_CtlError>
      break;
 800e370:	e000      	b.n	800e374 <USBD_StdEPReq+0x330>
      break;
 800e372:	bf00      	nop
  }

  return ret;
 800e374:	7bfb      	ldrb	r3, [r7, #15]
}
 800e376:	4618      	mov	r0, r3
 800e378:	3710      	adds	r7, #16
 800e37a:	46bd      	mov	sp, r7
 800e37c:	bd80      	pop	{r7, pc}
	...

0800e380 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b084      	sub	sp, #16
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
 800e388:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e38a:	2300      	movs	r3, #0
 800e38c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e38e:	2300      	movs	r3, #0
 800e390:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e392:	2300      	movs	r3, #0
 800e394:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e396:	683b      	ldr	r3, [r7, #0]
 800e398:	885b      	ldrh	r3, [r3, #2]
 800e39a:	0a1b      	lsrs	r3, r3, #8
 800e39c:	b29b      	uxth	r3, r3
 800e39e:	3b01      	subs	r3, #1
 800e3a0:	2b0e      	cmp	r3, #14
 800e3a2:	f200 8152 	bhi.w	800e64a <USBD_GetDescriptor+0x2ca>
 800e3a6:	a201      	add	r2, pc, #4	@ (adr r2, 800e3ac <USBD_GetDescriptor+0x2c>)
 800e3a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3ac:	0800e41d 	.word	0x0800e41d
 800e3b0:	0800e435 	.word	0x0800e435
 800e3b4:	0800e475 	.word	0x0800e475
 800e3b8:	0800e64b 	.word	0x0800e64b
 800e3bc:	0800e64b 	.word	0x0800e64b
 800e3c0:	0800e5eb 	.word	0x0800e5eb
 800e3c4:	0800e617 	.word	0x0800e617
 800e3c8:	0800e64b 	.word	0x0800e64b
 800e3cc:	0800e64b 	.word	0x0800e64b
 800e3d0:	0800e64b 	.word	0x0800e64b
 800e3d4:	0800e64b 	.word	0x0800e64b
 800e3d8:	0800e64b 	.word	0x0800e64b
 800e3dc:	0800e64b 	.word	0x0800e64b
 800e3e0:	0800e64b 	.word	0x0800e64b
 800e3e4:	0800e3e9 	.word	0x0800e3e9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e3ee:	69db      	ldr	r3, [r3, #28]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d00b      	beq.n	800e40c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e3fa:	69db      	ldr	r3, [r3, #28]
 800e3fc:	687a      	ldr	r2, [r7, #4]
 800e3fe:	7c12      	ldrb	r2, [r2, #16]
 800e400:	f107 0108 	add.w	r1, r7, #8
 800e404:	4610      	mov	r0, r2
 800e406:	4798      	blx	r3
 800e408:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e40a:	e126      	b.n	800e65a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e40c:	6839      	ldr	r1, [r7, #0]
 800e40e:	6878      	ldr	r0, [r7, #4]
 800e410:	f000 fb27 	bl	800ea62 <USBD_CtlError>
        err++;
 800e414:	7afb      	ldrb	r3, [r7, #11]
 800e416:	3301      	adds	r3, #1
 800e418:	72fb      	strb	r3, [r7, #11]
      break;
 800e41a:	e11e      	b.n	800e65a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	687a      	ldr	r2, [r7, #4]
 800e426:	7c12      	ldrb	r2, [r2, #16]
 800e428:	f107 0108 	add.w	r1, r7, #8
 800e42c:	4610      	mov	r0, r2
 800e42e:	4798      	blx	r3
 800e430:	60f8      	str	r0, [r7, #12]
      break;
 800e432:	e112      	b.n	800e65a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	7c1b      	ldrb	r3, [r3, #16]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d10d      	bne.n	800e458 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e444:	f107 0208 	add.w	r2, r7, #8
 800e448:	4610      	mov	r0, r2
 800e44a:	4798      	blx	r3
 800e44c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	3301      	adds	r3, #1
 800e452:	2202      	movs	r2, #2
 800e454:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e456:	e100      	b.n	800e65a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e45e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e460:	f107 0208 	add.w	r2, r7, #8
 800e464:	4610      	mov	r0, r2
 800e466:	4798      	blx	r3
 800e468:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	3301      	adds	r3, #1
 800e46e:	2202      	movs	r2, #2
 800e470:	701a      	strb	r2, [r3, #0]
      break;
 800e472:	e0f2      	b.n	800e65a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	885b      	ldrh	r3, [r3, #2]
 800e478:	b2db      	uxtb	r3, r3
 800e47a:	2b05      	cmp	r3, #5
 800e47c:	f200 80ac 	bhi.w	800e5d8 <USBD_GetDescriptor+0x258>
 800e480:	a201      	add	r2, pc, #4	@ (adr r2, 800e488 <USBD_GetDescriptor+0x108>)
 800e482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e486:	bf00      	nop
 800e488:	0800e4a1 	.word	0x0800e4a1
 800e48c:	0800e4d5 	.word	0x0800e4d5
 800e490:	0800e509 	.word	0x0800e509
 800e494:	0800e53d 	.word	0x0800e53d
 800e498:	0800e571 	.word	0x0800e571
 800e49c:	0800e5a5 	.word	0x0800e5a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e4a6:	685b      	ldr	r3, [r3, #4]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d00b      	beq.n	800e4c4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e4b2:	685b      	ldr	r3, [r3, #4]
 800e4b4:	687a      	ldr	r2, [r7, #4]
 800e4b6:	7c12      	ldrb	r2, [r2, #16]
 800e4b8:	f107 0108 	add.w	r1, r7, #8
 800e4bc:	4610      	mov	r0, r2
 800e4be:	4798      	blx	r3
 800e4c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e4c2:	e091      	b.n	800e5e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e4c4:	6839      	ldr	r1, [r7, #0]
 800e4c6:	6878      	ldr	r0, [r7, #4]
 800e4c8:	f000 facb 	bl	800ea62 <USBD_CtlError>
            err++;
 800e4cc:	7afb      	ldrb	r3, [r7, #11]
 800e4ce:	3301      	adds	r3, #1
 800e4d0:	72fb      	strb	r3, [r7, #11]
          break;
 800e4d2:	e089      	b.n	800e5e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e4da:	689b      	ldr	r3, [r3, #8]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d00b      	beq.n	800e4f8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e4e6:	689b      	ldr	r3, [r3, #8]
 800e4e8:	687a      	ldr	r2, [r7, #4]
 800e4ea:	7c12      	ldrb	r2, [r2, #16]
 800e4ec:	f107 0108 	add.w	r1, r7, #8
 800e4f0:	4610      	mov	r0, r2
 800e4f2:	4798      	blx	r3
 800e4f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e4f6:	e077      	b.n	800e5e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e4f8:	6839      	ldr	r1, [r7, #0]
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	f000 fab1 	bl	800ea62 <USBD_CtlError>
            err++;
 800e500:	7afb      	ldrb	r3, [r7, #11]
 800e502:	3301      	adds	r3, #1
 800e504:	72fb      	strb	r3, [r7, #11]
          break;
 800e506:	e06f      	b.n	800e5e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e50e:	68db      	ldr	r3, [r3, #12]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d00b      	beq.n	800e52c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e51a:	68db      	ldr	r3, [r3, #12]
 800e51c:	687a      	ldr	r2, [r7, #4]
 800e51e:	7c12      	ldrb	r2, [r2, #16]
 800e520:	f107 0108 	add.w	r1, r7, #8
 800e524:	4610      	mov	r0, r2
 800e526:	4798      	blx	r3
 800e528:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e52a:	e05d      	b.n	800e5e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e52c:	6839      	ldr	r1, [r7, #0]
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	f000 fa97 	bl	800ea62 <USBD_CtlError>
            err++;
 800e534:	7afb      	ldrb	r3, [r7, #11]
 800e536:	3301      	adds	r3, #1
 800e538:	72fb      	strb	r3, [r7, #11]
          break;
 800e53a:	e055      	b.n	800e5e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e542:	691b      	ldr	r3, [r3, #16]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d00b      	beq.n	800e560 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e54e:	691b      	ldr	r3, [r3, #16]
 800e550:	687a      	ldr	r2, [r7, #4]
 800e552:	7c12      	ldrb	r2, [r2, #16]
 800e554:	f107 0108 	add.w	r1, r7, #8
 800e558:	4610      	mov	r0, r2
 800e55a:	4798      	blx	r3
 800e55c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e55e:	e043      	b.n	800e5e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e560:	6839      	ldr	r1, [r7, #0]
 800e562:	6878      	ldr	r0, [r7, #4]
 800e564:	f000 fa7d 	bl	800ea62 <USBD_CtlError>
            err++;
 800e568:	7afb      	ldrb	r3, [r7, #11]
 800e56a:	3301      	adds	r3, #1
 800e56c:	72fb      	strb	r3, [r7, #11]
          break;
 800e56e:	e03b      	b.n	800e5e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e576:	695b      	ldr	r3, [r3, #20]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d00b      	beq.n	800e594 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e582:	695b      	ldr	r3, [r3, #20]
 800e584:	687a      	ldr	r2, [r7, #4]
 800e586:	7c12      	ldrb	r2, [r2, #16]
 800e588:	f107 0108 	add.w	r1, r7, #8
 800e58c:	4610      	mov	r0, r2
 800e58e:	4798      	blx	r3
 800e590:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e592:	e029      	b.n	800e5e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e594:	6839      	ldr	r1, [r7, #0]
 800e596:	6878      	ldr	r0, [r7, #4]
 800e598:	f000 fa63 	bl	800ea62 <USBD_CtlError>
            err++;
 800e59c:	7afb      	ldrb	r3, [r7, #11]
 800e59e:	3301      	adds	r3, #1
 800e5a0:	72fb      	strb	r3, [r7, #11]
          break;
 800e5a2:	e021      	b.n	800e5e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e5aa:	699b      	ldr	r3, [r3, #24]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d00b      	beq.n	800e5c8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e5b6:	699b      	ldr	r3, [r3, #24]
 800e5b8:	687a      	ldr	r2, [r7, #4]
 800e5ba:	7c12      	ldrb	r2, [r2, #16]
 800e5bc:	f107 0108 	add.w	r1, r7, #8
 800e5c0:	4610      	mov	r0, r2
 800e5c2:	4798      	blx	r3
 800e5c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e5c6:	e00f      	b.n	800e5e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e5c8:	6839      	ldr	r1, [r7, #0]
 800e5ca:	6878      	ldr	r0, [r7, #4]
 800e5cc:	f000 fa49 	bl	800ea62 <USBD_CtlError>
            err++;
 800e5d0:	7afb      	ldrb	r3, [r7, #11]
 800e5d2:	3301      	adds	r3, #1
 800e5d4:	72fb      	strb	r3, [r7, #11]
          break;
 800e5d6:	e007      	b.n	800e5e8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e5d8:	6839      	ldr	r1, [r7, #0]
 800e5da:	6878      	ldr	r0, [r7, #4]
 800e5dc:	f000 fa41 	bl	800ea62 <USBD_CtlError>
          err++;
 800e5e0:	7afb      	ldrb	r3, [r7, #11]
 800e5e2:	3301      	adds	r3, #1
 800e5e4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e5e6:	bf00      	nop
      }
      break;
 800e5e8:	e037      	b.n	800e65a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	7c1b      	ldrb	r3, [r3, #16]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d109      	bne.n	800e606 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e5f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e5fa:	f107 0208 	add.w	r2, r7, #8
 800e5fe:	4610      	mov	r0, r2
 800e600:	4798      	blx	r3
 800e602:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e604:	e029      	b.n	800e65a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e606:	6839      	ldr	r1, [r7, #0]
 800e608:	6878      	ldr	r0, [r7, #4]
 800e60a:	f000 fa2a 	bl	800ea62 <USBD_CtlError>
        err++;
 800e60e:	7afb      	ldrb	r3, [r7, #11]
 800e610:	3301      	adds	r3, #1
 800e612:	72fb      	strb	r3, [r7, #11]
      break;
 800e614:	e021      	b.n	800e65a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	7c1b      	ldrb	r3, [r3, #16]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d10d      	bne.n	800e63a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e626:	f107 0208 	add.w	r2, r7, #8
 800e62a:	4610      	mov	r0, r2
 800e62c:	4798      	blx	r3
 800e62e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	3301      	adds	r3, #1
 800e634:	2207      	movs	r2, #7
 800e636:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e638:	e00f      	b.n	800e65a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e63a:	6839      	ldr	r1, [r7, #0]
 800e63c:	6878      	ldr	r0, [r7, #4]
 800e63e:	f000 fa10 	bl	800ea62 <USBD_CtlError>
        err++;
 800e642:	7afb      	ldrb	r3, [r7, #11]
 800e644:	3301      	adds	r3, #1
 800e646:	72fb      	strb	r3, [r7, #11]
      break;
 800e648:	e007      	b.n	800e65a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e64a:	6839      	ldr	r1, [r7, #0]
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	f000 fa08 	bl	800ea62 <USBD_CtlError>
      err++;
 800e652:	7afb      	ldrb	r3, [r7, #11]
 800e654:	3301      	adds	r3, #1
 800e656:	72fb      	strb	r3, [r7, #11]
      break;
 800e658:	bf00      	nop
  }

  if (err != 0U)
 800e65a:	7afb      	ldrb	r3, [r7, #11]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d11e      	bne.n	800e69e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e660:	683b      	ldr	r3, [r7, #0]
 800e662:	88db      	ldrh	r3, [r3, #6]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d016      	beq.n	800e696 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e668:	893b      	ldrh	r3, [r7, #8]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d00e      	beq.n	800e68c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	88da      	ldrh	r2, [r3, #6]
 800e672:	893b      	ldrh	r3, [r7, #8]
 800e674:	4293      	cmp	r3, r2
 800e676:	bf28      	it	cs
 800e678:	4613      	movcs	r3, r2
 800e67a:	b29b      	uxth	r3, r3
 800e67c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e67e:	893b      	ldrh	r3, [r7, #8]
 800e680:	461a      	mov	r2, r3
 800e682:	68f9      	ldr	r1, [r7, #12]
 800e684:	6878      	ldr	r0, [r7, #4]
 800e686:	f000 fa69 	bl	800eb5c <USBD_CtlSendData>
 800e68a:	e009      	b.n	800e6a0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e68c:	6839      	ldr	r1, [r7, #0]
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	f000 f9e7 	bl	800ea62 <USBD_CtlError>
 800e694:	e004      	b.n	800e6a0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e696:	6878      	ldr	r0, [r7, #4]
 800e698:	f000 faba 	bl	800ec10 <USBD_CtlSendStatus>
 800e69c:	e000      	b.n	800e6a0 <USBD_GetDescriptor+0x320>
    return;
 800e69e:	bf00      	nop
  }
}
 800e6a0:	3710      	adds	r7, #16
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd80      	pop	{r7, pc}
 800e6a6:	bf00      	nop

0800e6a8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b084      	sub	sp, #16
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
 800e6b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e6b2:	683b      	ldr	r3, [r7, #0]
 800e6b4:	889b      	ldrh	r3, [r3, #4]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d131      	bne.n	800e71e <USBD_SetAddress+0x76>
 800e6ba:	683b      	ldr	r3, [r7, #0]
 800e6bc:	88db      	ldrh	r3, [r3, #6]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d12d      	bne.n	800e71e <USBD_SetAddress+0x76>
 800e6c2:	683b      	ldr	r3, [r7, #0]
 800e6c4:	885b      	ldrh	r3, [r3, #2]
 800e6c6:	2b7f      	cmp	r3, #127	@ 0x7f
 800e6c8:	d829      	bhi.n	800e71e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	885b      	ldrh	r3, [r3, #2]
 800e6ce:	b2db      	uxtb	r3, r3
 800e6d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e6d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e6dc:	b2db      	uxtb	r3, r3
 800e6de:	2b03      	cmp	r3, #3
 800e6e0:	d104      	bne.n	800e6ec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e6e2:	6839      	ldr	r1, [r7, #0]
 800e6e4:	6878      	ldr	r0, [r7, #4]
 800e6e6:	f000 f9bc 	bl	800ea62 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e6ea:	e01d      	b.n	800e728 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	7bfa      	ldrb	r2, [r7, #15]
 800e6f0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e6f4:	7bfb      	ldrb	r3, [r7, #15]
 800e6f6:	4619      	mov	r1, r3
 800e6f8:	6878      	ldr	r0, [r7, #4]
 800e6fa:	f000 ff47 	bl	800f58c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e6fe:	6878      	ldr	r0, [r7, #4]
 800e700:	f000 fa86 	bl	800ec10 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e704:	7bfb      	ldrb	r3, [r7, #15]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d004      	beq.n	800e714 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	2202      	movs	r2, #2
 800e70e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e712:	e009      	b.n	800e728 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2201      	movs	r2, #1
 800e718:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e71c:	e004      	b.n	800e728 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e71e:	6839      	ldr	r1, [r7, #0]
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	f000 f99e 	bl	800ea62 <USBD_CtlError>
  }
}
 800e726:	bf00      	nop
 800e728:	bf00      	nop
 800e72a:	3710      	adds	r7, #16
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}

0800e730 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b084      	sub	sp, #16
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
 800e738:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e73a:	2300      	movs	r3, #0
 800e73c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	885b      	ldrh	r3, [r3, #2]
 800e742:	b2da      	uxtb	r2, r3
 800e744:	4b4e      	ldr	r3, [pc, #312]	@ (800e880 <USBD_SetConfig+0x150>)
 800e746:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e748:	4b4d      	ldr	r3, [pc, #308]	@ (800e880 <USBD_SetConfig+0x150>)
 800e74a:	781b      	ldrb	r3, [r3, #0]
 800e74c:	2b01      	cmp	r3, #1
 800e74e:	d905      	bls.n	800e75c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e750:	6839      	ldr	r1, [r7, #0]
 800e752:	6878      	ldr	r0, [r7, #4]
 800e754:	f000 f985 	bl	800ea62 <USBD_CtlError>
    return USBD_FAIL;
 800e758:	2303      	movs	r3, #3
 800e75a:	e08c      	b.n	800e876 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e762:	b2db      	uxtb	r3, r3
 800e764:	2b02      	cmp	r3, #2
 800e766:	d002      	beq.n	800e76e <USBD_SetConfig+0x3e>
 800e768:	2b03      	cmp	r3, #3
 800e76a:	d029      	beq.n	800e7c0 <USBD_SetConfig+0x90>
 800e76c:	e075      	b.n	800e85a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e76e:	4b44      	ldr	r3, [pc, #272]	@ (800e880 <USBD_SetConfig+0x150>)
 800e770:	781b      	ldrb	r3, [r3, #0]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d020      	beq.n	800e7b8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e776:	4b42      	ldr	r3, [pc, #264]	@ (800e880 <USBD_SetConfig+0x150>)
 800e778:	781b      	ldrb	r3, [r3, #0]
 800e77a:	461a      	mov	r2, r3
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e780:	4b3f      	ldr	r3, [pc, #252]	@ (800e880 <USBD_SetConfig+0x150>)
 800e782:	781b      	ldrb	r3, [r3, #0]
 800e784:	4619      	mov	r1, r3
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	f7fe ffb9 	bl	800d6fe <USBD_SetClassConfig>
 800e78c:	4603      	mov	r3, r0
 800e78e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e790:	7bfb      	ldrb	r3, [r7, #15]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d008      	beq.n	800e7a8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e796:	6839      	ldr	r1, [r7, #0]
 800e798:	6878      	ldr	r0, [r7, #4]
 800e79a:	f000 f962 	bl	800ea62 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	2202      	movs	r2, #2
 800e7a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e7a6:	e065      	b.n	800e874 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f000 fa31 	bl	800ec10 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2203      	movs	r2, #3
 800e7b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e7b6:	e05d      	b.n	800e874 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e7b8:	6878      	ldr	r0, [r7, #4]
 800e7ba:	f000 fa29 	bl	800ec10 <USBD_CtlSendStatus>
      break;
 800e7be:	e059      	b.n	800e874 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e7c0:	4b2f      	ldr	r3, [pc, #188]	@ (800e880 <USBD_SetConfig+0x150>)
 800e7c2:	781b      	ldrb	r3, [r3, #0]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d112      	bne.n	800e7ee <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2202      	movs	r2, #2
 800e7cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800e7d0:	4b2b      	ldr	r3, [pc, #172]	@ (800e880 <USBD_SetConfig+0x150>)
 800e7d2:	781b      	ldrb	r3, [r3, #0]
 800e7d4:	461a      	mov	r2, r3
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e7da:	4b29      	ldr	r3, [pc, #164]	@ (800e880 <USBD_SetConfig+0x150>)
 800e7dc:	781b      	ldrb	r3, [r3, #0]
 800e7de:	4619      	mov	r1, r3
 800e7e0:	6878      	ldr	r0, [r7, #4]
 800e7e2:	f7fe ffa8 	bl	800d736 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e7e6:	6878      	ldr	r0, [r7, #4]
 800e7e8:	f000 fa12 	bl	800ec10 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e7ec:	e042      	b.n	800e874 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e7ee:	4b24      	ldr	r3, [pc, #144]	@ (800e880 <USBD_SetConfig+0x150>)
 800e7f0:	781b      	ldrb	r3, [r3, #0]
 800e7f2:	461a      	mov	r2, r3
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	685b      	ldr	r3, [r3, #4]
 800e7f8:	429a      	cmp	r2, r3
 800e7fa:	d02a      	beq.n	800e852 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	685b      	ldr	r3, [r3, #4]
 800e800:	b2db      	uxtb	r3, r3
 800e802:	4619      	mov	r1, r3
 800e804:	6878      	ldr	r0, [r7, #4]
 800e806:	f7fe ff96 	bl	800d736 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e80a:	4b1d      	ldr	r3, [pc, #116]	@ (800e880 <USBD_SetConfig+0x150>)
 800e80c:	781b      	ldrb	r3, [r3, #0]
 800e80e:	461a      	mov	r2, r3
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e814:	4b1a      	ldr	r3, [pc, #104]	@ (800e880 <USBD_SetConfig+0x150>)
 800e816:	781b      	ldrb	r3, [r3, #0]
 800e818:	4619      	mov	r1, r3
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f7fe ff6f 	bl	800d6fe <USBD_SetClassConfig>
 800e820:	4603      	mov	r3, r0
 800e822:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e824:	7bfb      	ldrb	r3, [r7, #15]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d00f      	beq.n	800e84a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e82a:	6839      	ldr	r1, [r7, #0]
 800e82c:	6878      	ldr	r0, [r7, #4]
 800e82e:	f000 f918 	bl	800ea62 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	685b      	ldr	r3, [r3, #4]
 800e836:	b2db      	uxtb	r3, r3
 800e838:	4619      	mov	r1, r3
 800e83a:	6878      	ldr	r0, [r7, #4]
 800e83c:	f7fe ff7b 	bl	800d736 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	2202      	movs	r2, #2
 800e844:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e848:	e014      	b.n	800e874 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	f000 f9e0 	bl	800ec10 <USBD_CtlSendStatus>
      break;
 800e850:	e010      	b.n	800e874 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e852:	6878      	ldr	r0, [r7, #4]
 800e854:	f000 f9dc 	bl	800ec10 <USBD_CtlSendStatus>
      break;
 800e858:	e00c      	b.n	800e874 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e85a:	6839      	ldr	r1, [r7, #0]
 800e85c:	6878      	ldr	r0, [r7, #4]
 800e85e:	f000 f900 	bl	800ea62 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e862:	4b07      	ldr	r3, [pc, #28]	@ (800e880 <USBD_SetConfig+0x150>)
 800e864:	781b      	ldrb	r3, [r3, #0]
 800e866:	4619      	mov	r1, r3
 800e868:	6878      	ldr	r0, [r7, #4]
 800e86a:	f7fe ff64 	bl	800d736 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e86e:	2303      	movs	r3, #3
 800e870:	73fb      	strb	r3, [r7, #15]
      break;
 800e872:	bf00      	nop
  }

  return ret;
 800e874:	7bfb      	ldrb	r3, [r7, #15]
}
 800e876:	4618      	mov	r0, r3
 800e878:	3710      	adds	r7, #16
 800e87a:	46bd      	mov	sp, r7
 800e87c:	bd80      	pop	{r7, pc}
 800e87e:	bf00      	nop
 800e880:	240008b4 	.word	0x240008b4

0800e884 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b082      	sub	sp, #8
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
 800e88c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e88e:	683b      	ldr	r3, [r7, #0]
 800e890:	88db      	ldrh	r3, [r3, #6]
 800e892:	2b01      	cmp	r3, #1
 800e894:	d004      	beq.n	800e8a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e896:	6839      	ldr	r1, [r7, #0]
 800e898:	6878      	ldr	r0, [r7, #4]
 800e89a:	f000 f8e2 	bl	800ea62 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e89e:	e023      	b.n	800e8e8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e8a6:	b2db      	uxtb	r3, r3
 800e8a8:	2b02      	cmp	r3, #2
 800e8aa:	dc02      	bgt.n	800e8b2 <USBD_GetConfig+0x2e>
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	dc03      	bgt.n	800e8b8 <USBD_GetConfig+0x34>
 800e8b0:	e015      	b.n	800e8de <USBD_GetConfig+0x5a>
 800e8b2:	2b03      	cmp	r3, #3
 800e8b4:	d00b      	beq.n	800e8ce <USBD_GetConfig+0x4a>
 800e8b6:	e012      	b.n	800e8de <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	3308      	adds	r3, #8
 800e8c2:	2201      	movs	r2, #1
 800e8c4:	4619      	mov	r1, r3
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f000 f948 	bl	800eb5c <USBD_CtlSendData>
        break;
 800e8cc:	e00c      	b.n	800e8e8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	3304      	adds	r3, #4
 800e8d2:	2201      	movs	r2, #1
 800e8d4:	4619      	mov	r1, r3
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	f000 f940 	bl	800eb5c <USBD_CtlSendData>
        break;
 800e8dc:	e004      	b.n	800e8e8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e8de:	6839      	ldr	r1, [r7, #0]
 800e8e0:	6878      	ldr	r0, [r7, #4]
 800e8e2:	f000 f8be 	bl	800ea62 <USBD_CtlError>
        break;
 800e8e6:	bf00      	nop
}
 800e8e8:	bf00      	nop
 800e8ea:	3708      	adds	r7, #8
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	bd80      	pop	{r7, pc}

0800e8f0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b082      	sub	sp, #8
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
 800e8f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e900:	b2db      	uxtb	r3, r3
 800e902:	3b01      	subs	r3, #1
 800e904:	2b02      	cmp	r3, #2
 800e906:	d81e      	bhi.n	800e946 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	88db      	ldrh	r3, [r3, #6]
 800e90c:	2b02      	cmp	r3, #2
 800e90e:	d004      	beq.n	800e91a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e910:	6839      	ldr	r1, [r7, #0]
 800e912:	6878      	ldr	r0, [r7, #4]
 800e914:	f000 f8a5 	bl	800ea62 <USBD_CtlError>
        break;
 800e918:	e01a      	b.n	800e950 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	2201      	movs	r2, #1
 800e91e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800e926:	2b00      	cmp	r3, #0
 800e928:	d005      	beq.n	800e936 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	68db      	ldr	r3, [r3, #12]
 800e92e:	f043 0202 	orr.w	r2, r3, #2
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	330c      	adds	r3, #12
 800e93a:	2202      	movs	r2, #2
 800e93c:	4619      	mov	r1, r3
 800e93e:	6878      	ldr	r0, [r7, #4]
 800e940:	f000 f90c 	bl	800eb5c <USBD_CtlSendData>
      break;
 800e944:	e004      	b.n	800e950 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e946:	6839      	ldr	r1, [r7, #0]
 800e948:	6878      	ldr	r0, [r7, #4]
 800e94a:	f000 f88a 	bl	800ea62 <USBD_CtlError>
      break;
 800e94e:	bf00      	nop
  }
}
 800e950:	bf00      	nop
 800e952:	3708      	adds	r7, #8
 800e954:	46bd      	mov	sp, r7
 800e956:	bd80      	pop	{r7, pc}

0800e958 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b082      	sub	sp, #8
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
 800e960:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	885b      	ldrh	r3, [r3, #2]
 800e966:	2b01      	cmp	r3, #1
 800e968:	d107      	bne.n	800e97a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	2201      	movs	r2, #1
 800e96e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e972:	6878      	ldr	r0, [r7, #4]
 800e974:	f000 f94c 	bl	800ec10 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e978:	e013      	b.n	800e9a2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	885b      	ldrh	r3, [r3, #2]
 800e97e:	2b02      	cmp	r3, #2
 800e980:	d10b      	bne.n	800e99a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e982:	683b      	ldr	r3, [r7, #0]
 800e984:	889b      	ldrh	r3, [r3, #4]
 800e986:	0a1b      	lsrs	r3, r3, #8
 800e988:	b29b      	uxth	r3, r3
 800e98a:	b2da      	uxtb	r2, r3
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e992:	6878      	ldr	r0, [r7, #4]
 800e994:	f000 f93c 	bl	800ec10 <USBD_CtlSendStatus>
}
 800e998:	e003      	b.n	800e9a2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e99a:	6839      	ldr	r1, [r7, #0]
 800e99c:	6878      	ldr	r0, [r7, #4]
 800e99e:	f000 f860 	bl	800ea62 <USBD_CtlError>
}
 800e9a2:	bf00      	nop
 800e9a4:	3708      	adds	r7, #8
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	bd80      	pop	{r7, pc}

0800e9aa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9aa:	b580      	push	{r7, lr}
 800e9ac:	b082      	sub	sp, #8
 800e9ae:	af00      	add	r7, sp, #0
 800e9b0:	6078      	str	r0, [r7, #4]
 800e9b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e9ba:	b2db      	uxtb	r3, r3
 800e9bc:	3b01      	subs	r3, #1
 800e9be:	2b02      	cmp	r3, #2
 800e9c0:	d80b      	bhi.n	800e9da <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	885b      	ldrh	r3, [r3, #2]
 800e9c6:	2b01      	cmp	r3, #1
 800e9c8:	d10c      	bne.n	800e9e4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e9d2:	6878      	ldr	r0, [r7, #4]
 800e9d4:	f000 f91c 	bl	800ec10 <USBD_CtlSendStatus>
      }
      break;
 800e9d8:	e004      	b.n	800e9e4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e9da:	6839      	ldr	r1, [r7, #0]
 800e9dc:	6878      	ldr	r0, [r7, #4]
 800e9de:	f000 f840 	bl	800ea62 <USBD_CtlError>
      break;
 800e9e2:	e000      	b.n	800e9e6 <USBD_ClrFeature+0x3c>
      break;
 800e9e4:	bf00      	nop
  }
}
 800e9e6:	bf00      	nop
 800e9e8:	3708      	adds	r7, #8
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd80      	pop	{r7, pc}

0800e9ee <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e9ee:	b580      	push	{r7, lr}
 800e9f0:	b084      	sub	sp, #16
 800e9f2:	af00      	add	r7, sp, #0
 800e9f4:	6078      	str	r0, [r7, #4]
 800e9f6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	781a      	ldrb	r2, [r3, #0]
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	3301      	adds	r3, #1
 800ea08:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	781a      	ldrb	r2, [r3, #0]
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	3301      	adds	r3, #1
 800ea16:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ea18:	68f8      	ldr	r0, [r7, #12]
 800ea1a:	f7ff fa16 	bl	800de4a <SWAPBYTE>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	461a      	mov	r2, r3
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	3301      	adds	r3, #1
 800ea2a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	3301      	adds	r3, #1
 800ea30:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ea32:	68f8      	ldr	r0, [r7, #12]
 800ea34:	f7ff fa09 	bl	800de4a <SWAPBYTE>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	461a      	mov	r2, r3
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	3301      	adds	r3, #1
 800ea44:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	3301      	adds	r3, #1
 800ea4a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ea4c:	68f8      	ldr	r0, [r7, #12]
 800ea4e:	f7ff f9fc 	bl	800de4a <SWAPBYTE>
 800ea52:	4603      	mov	r3, r0
 800ea54:	461a      	mov	r2, r3
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	80da      	strh	r2, [r3, #6]
}
 800ea5a:	bf00      	nop
 800ea5c:	3710      	adds	r7, #16
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}

0800ea62 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea62:	b580      	push	{r7, lr}
 800ea64:	b082      	sub	sp, #8
 800ea66:	af00      	add	r7, sp, #0
 800ea68:	6078      	str	r0, [r7, #4]
 800ea6a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ea6c:	2180      	movs	r1, #128	@ 0x80
 800ea6e:	6878      	ldr	r0, [r7, #4]
 800ea70:	f000 fd22 	bl	800f4b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ea74:	2100      	movs	r1, #0
 800ea76:	6878      	ldr	r0, [r7, #4]
 800ea78:	f000 fd1e 	bl	800f4b8 <USBD_LL_StallEP>
}
 800ea7c:	bf00      	nop
 800ea7e:	3708      	adds	r7, #8
 800ea80:	46bd      	mov	sp, r7
 800ea82:	bd80      	pop	{r7, pc}

0800ea84 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b086      	sub	sp, #24
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	60f8      	str	r0, [r7, #12]
 800ea8c:	60b9      	str	r1, [r7, #8]
 800ea8e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ea90:	2300      	movs	r3, #0
 800ea92:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d042      	beq.n	800eb20 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800ea9e:	6938      	ldr	r0, [r7, #16]
 800eaa0:	f000 f842 	bl	800eb28 <USBD_GetLen>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	3301      	adds	r3, #1
 800eaa8:	005b      	lsls	r3, r3, #1
 800eaaa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eaae:	d808      	bhi.n	800eac2 <USBD_GetString+0x3e>
 800eab0:	6938      	ldr	r0, [r7, #16]
 800eab2:	f000 f839 	bl	800eb28 <USBD_GetLen>
 800eab6:	4603      	mov	r3, r0
 800eab8:	3301      	adds	r3, #1
 800eaba:	b29b      	uxth	r3, r3
 800eabc:	005b      	lsls	r3, r3, #1
 800eabe:	b29a      	uxth	r2, r3
 800eac0:	e001      	b.n	800eac6 <USBD_GetString+0x42>
 800eac2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800eaca:	7dfb      	ldrb	r3, [r7, #23]
 800eacc:	68ba      	ldr	r2, [r7, #8]
 800eace:	4413      	add	r3, r2
 800ead0:	687a      	ldr	r2, [r7, #4]
 800ead2:	7812      	ldrb	r2, [r2, #0]
 800ead4:	701a      	strb	r2, [r3, #0]
  idx++;
 800ead6:	7dfb      	ldrb	r3, [r7, #23]
 800ead8:	3301      	adds	r3, #1
 800eada:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800eadc:	7dfb      	ldrb	r3, [r7, #23]
 800eade:	68ba      	ldr	r2, [r7, #8]
 800eae0:	4413      	add	r3, r2
 800eae2:	2203      	movs	r2, #3
 800eae4:	701a      	strb	r2, [r3, #0]
  idx++;
 800eae6:	7dfb      	ldrb	r3, [r7, #23]
 800eae8:	3301      	adds	r3, #1
 800eaea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800eaec:	e013      	b.n	800eb16 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800eaee:	7dfb      	ldrb	r3, [r7, #23]
 800eaf0:	68ba      	ldr	r2, [r7, #8]
 800eaf2:	4413      	add	r3, r2
 800eaf4:	693a      	ldr	r2, [r7, #16]
 800eaf6:	7812      	ldrb	r2, [r2, #0]
 800eaf8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800eafa:	693b      	ldr	r3, [r7, #16]
 800eafc:	3301      	adds	r3, #1
 800eafe:	613b      	str	r3, [r7, #16]
    idx++;
 800eb00:	7dfb      	ldrb	r3, [r7, #23]
 800eb02:	3301      	adds	r3, #1
 800eb04:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800eb06:	7dfb      	ldrb	r3, [r7, #23]
 800eb08:	68ba      	ldr	r2, [r7, #8]
 800eb0a:	4413      	add	r3, r2
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	701a      	strb	r2, [r3, #0]
    idx++;
 800eb10:	7dfb      	ldrb	r3, [r7, #23]
 800eb12:	3301      	adds	r3, #1
 800eb14:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800eb16:	693b      	ldr	r3, [r7, #16]
 800eb18:	781b      	ldrb	r3, [r3, #0]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d1e7      	bne.n	800eaee <USBD_GetString+0x6a>
 800eb1e:	e000      	b.n	800eb22 <USBD_GetString+0x9e>
    return;
 800eb20:	bf00      	nop
  }
}
 800eb22:	3718      	adds	r7, #24
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bd80      	pop	{r7, pc}

0800eb28 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800eb28:	b480      	push	{r7}
 800eb2a:	b085      	sub	sp, #20
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800eb30:	2300      	movs	r3, #0
 800eb32:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800eb38:	e005      	b.n	800eb46 <USBD_GetLen+0x1e>
  {
    len++;
 800eb3a:	7bfb      	ldrb	r3, [r7, #15]
 800eb3c:	3301      	adds	r3, #1
 800eb3e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	3301      	adds	r3, #1
 800eb44:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800eb46:	68bb      	ldr	r3, [r7, #8]
 800eb48:	781b      	ldrb	r3, [r3, #0]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d1f5      	bne.n	800eb3a <USBD_GetLen+0x12>
  }

  return len;
 800eb4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	3714      	adds	r7, #20
 800eb54:	46bd      	mov	sp, r7
 800eb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5a:	4770      	bx	lr

0800eb5c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b084      	sub	sp, #16
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	60f8      	str	r0, [r7, #12]
 800eb64:	60b9      	str	r1, [r7, #8]
 800eb66:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	2202      	movs	r2, #2
 800eb6c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	687a      	ldr	r2, [r7, #4]
 800eb74:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	687a      	ldr	r2, [r7, #4]
 800eb7a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	68ba      	ldr	r2, [r7, #8]
 800eb80:	2100      	movs	r1, #0
 800eb82:	68f8      	ldr	r0, [r7, #12]
 800eb84:	f000 fd21 	bl	800f5ca <USBD_LL_Transmit>

  return USBD_OK;
 800eb88:	2300      	movs	r3, #0
}
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	3710      	adds	r7, #16
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd80      	pop	{r7, pc}

0800eb92 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800eb92:	b580      	push	{r7, lr}
 800eb94:	b084      	sub	sp, #16
 800eb96:	af00      	add	r7, sp, #0
 800eb98:	60f8      	str	r0, [r7, #12]
 800eb9a:	60b9      	str	r1, [r7, #8]
 800eb9c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	68ba      	ldr	r2, [r7, #8]
 800eba2:	2100      	movs	r1, #0
 800eba4:	68f8      	ldr	r0, [r7, #12]
 800eba6:	f000 fd10 	bl	800f5ca <USBD_LL_Transmit>

  return USBD_OK;
 800ebaa:	2300      	movs	r3, #0
}
 800ebac:	4618      	mov	r0, r3
 800ebae:	3710      	adds	r7, #16
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bd80      	pop	{r7, pc}

0800ebb4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b084      	sub	sp, #16
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	60f8      	str	r0, [r7, #12]
 800ebbc:	60b9      	str	r1, [r7, #8]
 800ebbe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	2203      	movs	r2, #3
 800ebc4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	687a      	ldr	r2, [r7, #4]
 800ebcc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	687a      	ldr	r2, [r7, #4]
 800ebd4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	68ba      	ldr	r2, [r7, #8]
 800ebdc:	2100      	movs	r1, #0
 800ebde:	68f8      	ldr	r0, [r7, #12]
 800ebe0:	f000 fd14 	bl	800f60c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ebe4:	2300      	movs	r3, #0
}
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	3710      	adds	r7, #16
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bd80      	pop	{r7, pc}

0800ebee <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ebee:	b580      	push	{r7, lr}
 800ebf0:	b084      	sub	sp, #16
 800ebf2:	af00      	add	r7, sp, #0
 800ebf4:	60f8      	str	r0, [r7, #12]
 800ebf6:	60b9      	str	r1, [r7, #8]
 800ebf8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	68ba      	ldr	r2, [r7, #8]
 800ebfe:	2100      	movs	r1, #0
 800ec00:	68f8      	ldr	r0, [r7, #12]
 800ec02:	f000 fd03 	bl	800f60c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ec06:	2300      	movs	r3, #0
}
 800ec08:	4618      	mov	r0, r3
 800ec0a:	3710      	adds	r7, #16
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd80      	pop	{r7, pc}

0800ec10 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b082      	sub	sp, #8
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2204      	movs	r2, #4
 800ec1c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ec20:	2300      	movs	r3, #0
 800ec22:	2200      	movs	r2, #0
 800ec24:	2100      	movs	r1, #0
 800ec26:	6878      	ldr	r0, [r7, #4]
 800ec28:	f000 fccf 	bl	800f5ca <USBD_LL_Transmit>

  return USBD_OK;
 800ec2c:	2300      	movs	r3, #0
}
 800ec2e:	4618      	mov	r0, r3
 800ec30:	3708      	adds	r7, #8
 800ec32:	46bd      	mov	sp, r7
 800ec34:	bd80      	pop	{r7, pc}

0800ec36 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ec36:	b580      	push	{r7, lr}
 800ec38:	b082      	sub	sp, #8
 800ec3a:	af00      	add	r7, sp, #0
 800ec3c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	2205      	movs	r2, #5
 800ec42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ec46:	2300      	movs	r3, #0
 800ec48:	2200      	movs	r2, #0
 800ec4a:	2100      	movs	r1, #0
 800ec4c:	6878      	ldr	r0, [r7, #4]
 800ec4e:	f000 fcdd 	bl	800f60c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ec52:	2300      	movs	r3, #0
}
 800ec54:	4618      	mov	r0, r3
 800ec56:	3708      	adds	r7, #8
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	bd80      	pop	{r7, pc}

0800ec5c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ec60:	2200      	movs	r2, #0
 800ec62:	4913      	ldr	r1, [pc, #76]	@ (800ecb0 <MX_USB_DEVICE_Init+0x54>)
 800ec64:	4813      	ldr	r0, [pc, #76]	@ (800ecb4 <MX_USB_DEVICE_Init+0x58>)
 800ec66:	f7fe fccd 	bl	800d604 <USBD_Init>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d001      	beq.n	800ec74 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ec70:	f7f2 f99c 	bl	8000fac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ec74:	4910      	ldr	r1, [pc, #64]	@ (800ecb8 <MX_USB_DEVICE_Init+0x5c>)
 800ec76:	480f      	ldr	r0, [pc, #60]	@ (800ecb4 <MX_USB_DEVICE_Init+0x58>)
 800ec78:	f7fe fcf4 	bl	800d664 <USBD_RegisterClass>
 800ec7c:	4603      	mov	r3, r0
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d001      	beq.n	800ec86 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ec82:	f7f2 f993 	bl	8000fac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ec86:	490d      	ldr	r1, [pc, #52]	@ (800ecbc <MX_USB_DEVICE_Init+0x60>)
 800ec88:	480a      	ldr	r0, [pc, #40]	@ (800ecb4 <MX_USB_DEVICE_Init+0x58>)
 800ec8a:	f7fe fbeb 	bl	800d464 <USBD_CDC_RegisterInterface>
 800ec8e:	4603      	mov	r3, r0
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d001      	beq.n	800ec98 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ec94:	f7f2 f98a 	bl	8000fac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ec98:	4806      	ldr	r0, [pc, #24]	@ (800ecb4 <MX_USB_DEVICE_Init+0x58>)
 800ec9a:	f7fe fd19 	bl	800d6d0 <USBD_Start>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d001      	beq.n	800eca8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800eca4:	f7f2 f982 	bl	8000fac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800eca8:	f7f7 fa44 	bl	8006134 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ecac:	bf00      	nop
 800ecae:	bd80      	pop	{r7, pc}
 800ecb0:	240000d8 	.word	0x240000d8
 800ecb4:	240008b8 	.word	0x240008b8
 800ecb8:	24000044 	.word	0x24000044
 800ecbc:	240000c4 	.word	0x240000c4

0800ecc0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	4905      	ldr	r1, [pc, #20]	@ (800ecdc <CDC_Init_FS+0x1c>)
 800ecc8:	4805      	ldr	r0, [pc, #20]	@ (800ece0 <CDC_Init_FS+0x20>)
 800ecca:	f7fe fbe5 	bl	800d498 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ecce:	4905      	ldr	r1, [pc, #20]	@ (800ece4 <CDC_Init_FS+0x24>)
 800ecd0:	4803      	ldr	r0, [pc, #12]	@ (800ece0 <CDC_Init_FS+0x20>)
 800ecd2:	f7fe fc03 	bl	800d4dc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ecd6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ecd8:	4618      	mov	r0, r3
 800ecda:	bd80      	pop	{r7, pc}
 800ecdc:	24001394 	.word	0x24001394
 800ece0:	240008b8 	.word	0x240008b8
 800ece4:	24000b94 	.word	0x24000b94

0800ece8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ece8:	b480      	push	{r7}
 800ecea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ecec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ecee:	4618      	mov	r0, r3
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf6:	4770      	bx	lr

0800ecf8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ecf8:	b480      	push	{r7}
 800ecfa:	b083      	sub	sp, #12
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	4603      	mov	r3, r0
 800ed00:	6039      	str	r1, [r7, #0]
 800ed02:	71fb      	strb	r3, [r7, #7]
 800ed04:	4613      	mov	r3, r2
 800ed06:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ed08:	79fb      	ldrb	r3, [r7, #7]
 800ed0a:	2b23      	cmp	r3, #35	@ 0x23
 800ed0c:	d84a      	bhi.n	800eda4 <CDC_Control_FS+0xac>
 800ed0e:	a201      	add	r2, pc, #4	@ (adr r2, 800ed14 <CDC_Control_FS+0x1c>)
 800ed10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed14:	0800eda5 	.word	0x0800eda5
 800ed18:	0800eda5 	.word	0x0800eda5
 800ed1c:	0800eda5 	.word	0x0800eda5
 800ed20:	0800eda5 	.word	0x0800eda5
 800ed24:	0800eda5 	.word	0x0800eda5
 800ed28:	0800eda5 	.word	0x0800eda5
 800ed2c:	0800eda5 	.word	0x0800eda5
 800ed30:	0800eda5 	.word	0x0800eda5
 800ed34:	0800eda5 	.word	0x0800eda5
 800ed38:	0800eda5 	.word	0x0800eda5
 800ed3c:	0800eda5 	.word	0x0800eda5
 800ed40:	0800eda5 	.word	0x0800eda5
 800ed44:	0800eda5 	.word	0x0800eda5
 800ed48:	0800eda5 	.word	0x0800eda5
 800ed4c:	0800eda5 	.word	0x0800eda5
 800ed50:	0800eda5 	.word	0x0800eda5
 800ed54:	0800eda5 	.word	0x0800eda5
 800ed58:	0800eda5 	.word	0x0800eda5
 800ed5c:	0800eda5 	.word	0x0800eda5
 800ed60:	0800eda5 	.word	0x0800eda5
 800ed64:	0800eda5 	.word	0x0800eda5
 800ed68:	0800eda5 	.word	0x0800eda5
 800ed6c:	0800eda5 	.word	0x0800eda5
 800ed70:	0800eda5 	.word	0x0800eda5
 800ed74:	0800eda5 	.word	0x0800eda5
 800ed78:	0800eda5 	.word	0x0800eda5
 800ed7c:	0800eda5 	.word	0x0800eda5
 800ed80:	0800eda5 	.word	0x0800eda5
 800ed84:	0800eda5 	.word	0x0800eda5
 800ed88:	0800eda5 	.word	0x0800eda5
 800ed8c:	0800eda5 	.word	0x0800eda5
 800ed90:	0800eda5 	.word	0x0800eda5
 800ed94:	0800eda5 	.word	0x0800eda5
 800ed98:	0800eda5 	.word	0x0800eda5
 800ed9c:	0800eda5 	.word	0x0800eda5
 800eda0:	0800eda5 	.word	0x0800eda5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800eda4:	bf00      	nop
  }

  return (USBD_OK);
 800eda6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800eda8:	4618      	mov	r0, r3
 800edaa:	370c      	adds	r7, #12
 800edac:	46bd      	mov	sp, r7
 800edae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb2:	4770      	bx	lr

0800edb4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800edb4:	b580      	push	{r7, lr}
 800edb6:	b082      	sub	sp, #8
 800edb8:	af00      	add	r7, sp, #0
 800edba:	6078      	str	r0, [r7, #4]
 800edbc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800edbe:	6879      	ldr	r1, [r7, #4]
 800edc0:	4805      	ldr	r0, [pc, #20]	@ (800edd8 <CDC_Receive_FS+0x24>)
 800edc2:	f7fe fb8b 	bl	800d4dc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800edc6:	4804      	ldr	r0, [pc, #16]	@ (800edd8 <CDC_Receive_FS+0x24>)
 800edc8:	f7fe fbe6 	bl	800d598 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800edcc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800edce:	4618      	mov	r0, r3
 800edd0:	3708      	adds	r7, #8
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}
 800edd6:	bf00      	nop
 800edd8:	240008b8 	.word	0x240008b8

0800eddc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b084      	sub	sp, #16
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
 800ede4:	460b      	mov	r3, r1
 800ede6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ede8:	2300      	movs	r3, #0
 800edea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800edec:	4b0d      	ldr	r3, [pc, #52]	@ (800ee24 <CDC_Transmit_FS+0x48>)
 800edee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800edf2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800edf4:	68bb      	ldr	r3, [r7, #8]
 800edf6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d001      	beq.n	800ee02 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800edfe:	2301      	movs	r3, #1
 800ee00:	e00b      	b.n	800ee1a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ee02:	887b      	ldrh	r3, [r7, #2]
 800ee04:	461a      	mov	r2, r3
 800ee06:	6879      	ldr	r1, [r7, #4]
 800ee08:	4806      	ldr	r0, [pc, #24]	@ (800ee24 <CDC_Transmit_FS+0x48>)
 800ee0a:	f7fe fb45 	bl	800d498 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ee0e:	4805      	ldr	r0, [pc, #20]	@ (800ee24 <CDC_Transmit_FS+0x48>)
 800ee10:	f7fe fb82 	bl	800d518 <USBD_CDC_TransmitPacket>
 800ee14:	4603      	mov	r3, r0
 800ee16:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ee18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	3710      	adds	r7, #16
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	bd80      	pop	{r7, pc}
 800ee22:	bf00      	nop
 800ee24:	240008b8 	.word	0x240008b8

0800ee28 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ee28:	b480      	push	{r7}
 800ee2a:	b087      	sub	sp, #28
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	60f8      	str	r0, [r7, #12]
 800ee30:	60b9      	str	r1, [r7, #8]
 800ee32:	4613      	mov	r3, r2
 800ee34:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ee36:	2300      	movs	r3, #0
 800ee38:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ee3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ee3e:	4618      	mov	r0, r3
 800ee40:	371c      	adds	r7, #28
 800ee42:	46bd      	mov	sp, r7
 800ee44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee48:	4770      	bx	lr
	...

0800ee4c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee4c:	b480      	push	{r7}
 800ee4e:	b083      	sub	sp, #12
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	4603      	mov	r3, r0
 800ee54:	6039      	str	r1, [r7, #0]
 800ee56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ee58:	683b      	ldr	r3, [r7, #0]
 800ee5a:	2212      	movs	r2, #18
 800ee5c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ee5e:	4b03      	ldr	r3, [pc, #12]	@ (800ee6c <USBD_FS_DeviceDescriptor+0x20>)
}
 800ee60:	4618      	mov	r0, r3
 800ee62:	370c      	adds	r7, #12
 800ee64:	46bd      	mov	sp, r7
 800ee66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6a:	4770      	bx	lr
 800ee6c:	240000f8 	.word	0x240000f8

0800ee70 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee70:	b480      	push	{r7}
 800ee72:	b083      	sub	sp, #12
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	4603      	mov	r3, r0
 800ee78:	6039      	str	r1, [r7, #0]
 800ee7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ee7c:	683b      	ldr	r3, [r7, #0]
 800ee7e:	2204      	movs	r2, #4
 800ee80:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ee82:	4b03      	ldr	r3, [pc, #12]	@ (800ee90 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ee84:	4618      	mov	r0, r3
 800ee86:	370c      	adds	r7, #12
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8e:	4770      	bx	lr
 800ee90:	2400010c 	.word	0x2400010c

0800ee94 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b082      	sub	sp, #8
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	6039      	str	r1, [r7, #0]
 800ee9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eea0:	79fb      	ldrb	r3, [r7, #7]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d105      	bne.n	800eeb2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eea6:	683a      	ldr	r2, [r7, #0]
 800eea8:	4907      	ldr	r1, [pc, #28]	@ (800eec8 <USBD_FS_ProductStrDescriptor+0x34>)
 800eeaa:	4808      	ldr	r0, [pc, #32]	@ (800eecc <USBD_FS_ProductStrDescriptor+0x38>)
 800eeac:	f7ff fdea 	bl	800ea84 <USBD_GetString>
 800eeb0:	e004      	b.n	800eebc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eeb2:	683a      	ldr	r2, [r7, #0]
 800eeb4:	4904      	ldr	r1, [pc, #16]	@ (800eec8 <USBD_FS_ProductStrDescriptor+0x34>)
 800eeb6:	4805      	ldr	r0, [pc, #20]	@ (800eecc <USBD_FS_ProductStrDescriptor+0x38>)
 800eeb8:	f7ff fde4 	bl	800ea84 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eebc:	4b02      	ldr	r3, [pc, #8]	@ (800eec8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800eebe:	4618      	mov	r0, r3
 800eec0:	3708      	adds	r7, #8
 800eec2:	46bd      	mov	sp, r7
 800eec4:	bd80      	pop	{r7, pc}
 800eec6:	bf00      	nop
 800eec8:	24001b94 	.word	0x24001b94
 800eecc:	08012310 	.word	0x08012310

0800eed0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b082      	sub	sp, #8
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	4603      	mov	r3, r0
 800eed8:	6039      	str	r1, [r7, #0]
 800eeda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800eedc:	683a      	ldr	r2, [r7, #0]
 800eede:	4904      	ldr	r1, [pc, #16]	@ (800eef0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800eee0:	4804      	ldr	r0, [pc, #16]	@ (800eef4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800eee2:	f7ff fdcf 	bl	800ea84 <USBD_GetString>
  return USBD_StrDesc;
 800eee6:	4b02      	ldr	r3, [pc, #8]	@ (800eef0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800eee8:	4618      	mov	r0, r3
 800eeea:	3708      	adds	r7, #8
 800eeec:	46bd      	mov	sp, r7
 800eeee:	bd80      	pop	{r7, pc}
 800eef0:	24001b94 	.word	0x24001b94
 800eef4:	08012328 	.word	0x08012328

0800eef8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b082      	sub	sp, #8
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	4603      	mov	r3, r0
 800ef00:	6039      	str	r1, [r7, #0]
 800ef02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ef04:	683b      	ldr	r3, [r7, #0]
 800ef06:	221a      	movs	r2, #26
 800ef08:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ef0a:	f000 f843 	bl	800ef94 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ef0e:	4b02      	ldr	r3, [pc, #8]	@ (800ef18 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	3708      	adds	r7, #8
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}
 800ef18:	24000110 	.word	0x24000110

0800ef1c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b082      	sub	sp, #8
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	4603      	mov	r3, r0
 800ef24:	6039      	str	r1, [r7, #0]
 800ef26:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ef28:	79fb      	ldrb	r3, [r7, #7]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d105      	bne.n	800ef3a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ef2e:	683a      	ldr	r2, [r7, #0]
 800ef30:	4907      	ldr	r1, [pc, #28]	@ (800ef50 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ef32:	4808      	ldr	r0, [pc, #32]	@ (800ef54 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ef34:	f7ff fda6 	bl	800ea84 <USBD_GetString>
 800ef38:	e004      	b.n	800ef44 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ef3a:	683a      	ldr	r2, [r7, #0]
 800ef3c:	4904      	ldr	r1, [pc, #16]	@ (800ef50 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ef3e:	4805      	ldr	r0, [pc, #20]	@ (800ef54 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ef40:	f7ff fda0 	bl	800ea84 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ef44:	4b02      	ldr	r3, [pc, #8]	@ (800ef50 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ef46:	4618      	mov	r0, r3
 800ef48:	3708      	adds	r7, #8
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	bd80      	pop	{r7, pc}
 800ef4e:	bf00      	nop
 800ef50:	24001b94 	.word	0x24001b94
 800ef54:	0801233c 	.word	0x0801233c

0800ef58 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b082      	sub	sp, #8
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	4603      	mov	r3, r0
 800ef60:	6039      	str	r1, [r7, #0]
 800ef62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ef64:	79fb      	ldrb	r3, [r7, #7]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d105      	bne.n	800ef76 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ef6a:	683a      	ldr	r2, [r7, #0]
 800ef6c:	4907      	ldr	r1, [pc, #28]	@ (800ef8c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ef6e:	4808      	ldr	r0, [pc, #32]	@ (800ef90 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ef70:	f7ff fd88 	bl	800ea84 <USBD_GetString>
 800ef74:	e004      	b.n	800ef80 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ef76:	683a      	ldr	r2, [r7, #0]
 800ef78:	4904      	ldr	r1, [pc, #16]	@ (800ef8c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ef7a:	4805      	ldr	r0, [pc, #20]	@ (800ef90 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ef7c:	f7ff fd82 	bl	800ea84 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ef80:	4b02      	ldr	r3, [pc, #8]	@ (800ef8c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ef82:	4618      	mov	r0, r3
 800ef84:	3708      	adds	r7, #8
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}
 800ef8a:	bf00      	nop
 800ef8c:	24001b94 	.word	0x24001b94
 800ef90:	08012348 	.word	0x08012348

0800ef94 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b084      	sub	sp, #16
 800ef98:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ef9a:	4b0f      	ldr	r3, [pc, #60]	@ (800efd8 <Get_SerialNum+0x44>)
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800efa0:	4b0e      	ldr	r3, [pc, #56]	@ (800efdc <Get_SerialNum+0x48>)
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800efa6:	4b0e      	ldr	r3, [pc, #56]	@ (800efe0 <Get_SerialNum+0x4c>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800efac:	68fa      	ldr	r2, [r7, #12]
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	4413      	add	r3, r2
 800efb2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d009      	beq.n	800efce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800efba:	2208      	movs	r2, #8
 800efbc:	4909      	ldr	r1, [pc, #36]	@ (800efe4 <Get_SerialNum+0x50>)
 800efbe:	68f8      	ldr	r0, [r7, #12]
 800efc0:	f000 f814 	bl	800efec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800efc4:	2204      	movs	r2, #4
 800efc6:	4908      	ldr	r1, [pc, #32]	@ (800efe8 <Get_SerialNum+0x54>)
 800efc8:	68b8      	ldr	r0, [r7, #8]
 800efca:	f000 f80f 	bl	800efec <IntToUnicode>
  }
}
 800efce:	bf00      	nop
 800efd0:	3710      	adds	r7, #16
 800efd2:	46bd      	mov	sp, r7
 800efd4:	bd80      	pop	{r7, pc}
 800efd6:	bf00      	nop
 800efd8:	1ff1e800 	.word	0x1ff1e800
 800efdc:	1ff1e804 	.word	0x1ff1e804
 800efe0:	1ff1e808 	.word	0x1ff1e808
 800efe4:	24000112 	.word	0x24000112
 800efe8:	24000122 	.word	0x24000122

0800efec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800efec:	b480      	push	{r7}
 800efee:	b087      	sub	sp, #28
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	60f8      	str	r0, [r7, #12]
 800eff4:	60b9      	str	r1, [r7, #8]
 800eff6:	4613      	mov	r3, r2
 800eff8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800effa:	2300      	movs	r3, #0
 800effc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800effe:	2300      	movs	r3, #0
 800f000:	75fb      	strb	r3, [r7, #23]
 800f002:	e027      	b.n	800f054 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	0f1b      	lsrs	r3, r3, #28
 800f008:	2b09      	cmp	r3, #9
 800f00a:	d80b      	bhi.n	800f024 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	0f1b      	lsrs	r3, r3, #28
 800f010:	b2da      	uxtb	r2, r3
 800f012:	7dfb      	ldrb	r3, [r7, #23]
 800f014:	005b      	lsls	r3, r3, #1
 800f016:	4619      	mov	r1, r3
 800f018:	68bb      	ldr	r3, [r7, #8]
 800f01a:	440b      	add	r3, r1
 800f01c:	3230      	adds	r2, #48	@ 0x30
 800f01e:	b2d2      	uxtb	r2, r2
 800f020:	701a      	strb	r2, [r3, #0]
 800f022:	e00a      	b.n	800f03a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	0f1b      	lsrs	r3, r3, #28
 800f028:	b2da      	uxtb	r2, r3
 800f02a:	7dfb      	ldrb	r3, [r7, #23]
 800f02c:	005b      	lsls	r3, r3, #1
 800f02e:	4619      	mov	r1, r3
 800f030:	68bb      	ldr	r3, [r7, #8]
 800f032:	440b      	add	r3, r1
 800f034:	3237      	adds	r2, #55	@ 0x37
 800f036:	b2d2      	uxtb	r2, r2
 800f038:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	011b      	lsls	r3, r3, #4
 800f03e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f040:	7dfb      	ldrb	r3, [r7, #23]
 800f042:	005b      	lsls	r3, r3, #1
 800f044:	3301      	adds	r3, #1
 800f046:	68ba      	ldr	r2, [r7, #8]
 800f048:	4413      	add	r3, r2
 800f04a:	2200      	movs	r2, #0
 800f04c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f04e:	7dfb      	ldrb	r3, [r7, #23]
 800f050:	3301      	adds	r3, #1
 800f052:	75fb      	strb	r3, [r7, #23]
 800f054:	7dfa      	ldrb	r2, [r7, #23]
 800f056:	79fb      	ldrb	r3, [r7, #7]
 800f058:	429a      	cmp	r2, r3
 800f05a:	d3d3      	bcc.n	800f004 <IntToUnicode+0x18>
  }
}
 800f05c:	bf00      	nop
 800f05e:	bf00      	nop
 800f060:	371c      	adds	r7, #28
 800f062:	46bd      	mov	sp, r7
 800f064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f068:	4770      	bx	lr
	...

0800f06c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b0ba      	sub	sp, #232	@ 0xe8
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f074:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800f078:	2200      	movs	r2, #0
 800f07a:	601a      	str	r2, [r3, #0]
 800f07c:	605a      	str	r2, [r3, #4]
 800f07e:	609a      	str	r2, [r3, #8]
 800f080:	60da      	str	r2, [r3, #12]
 800f082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f084:	f107 0310 	add.w	r3, r7, #16
 800f088:	22c0      	movs	r2, #192	@ 0xc0
 800f08a:	2100      	movs	r1, #0
 800f08c:	4618      	mov	r0, r3
 800f08e:	f001 f890 	bl	80101b2 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	4a34      	ldr	r2, [pc, #208]	@ (800f168 <HAL_PCD_MspInit+0xfc>)
 800f098:	4293      	cmp	r3, r2
 800f09a:	d161      	bne.n	800f160 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f09c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800f0a0:	f04f 0300 	mov.w	r3, #0
 800f0a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800f0a8:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800f0ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f0b0:	f107 0310 	add.w	r3, r7, #16
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	f7f8 f833 	bl	8007120 <HAL_RCCEx_PeriphCLKConfig>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d001      	beq.n	800f0c4 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800f0c0:	f7f1 ff74 	bl	8000fac <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800f0c4:	f7f7 f836 	bl	8006134 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f0c8:	4b28      	ldr	r3, [pc, #160]	@ (800f16c <HAL_PCD_MspInit+0x100>)
 800f0ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f0ce:	4a27      	ldr	r2, [pc, #156]	@ (800f16c <HAL_PCD_MspInit+0x100>)
 800f0d0:	f043 0301 	orr.w	r3, r3, #1
 800f0d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800f0d8:	4b24      	ldr	r3, [pc, #144]	@ (800f16c <HAL_PCD_MspInit+0x100>)
 800f0da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f0de:	f003 0301 	and.w	r3, r3, #1
 800f0e2:	60fb      	str	r3, [r7, #12]
 800f0e4:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800f0e6:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800f0ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f0ee:	2302      	movs	r3, #2
 800f0f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800f100:	230a      	movs	r3, #10
 800f102:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f106:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800f10a:	4619      	mov	r1, r3
 800f10c:	4818      	ldr	r0, [pc, #96]	@ (800f170 <HAL_PCD_MspInit+0x104>)
 800f10e:	f7f5 fb07 	bl	8004720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800f112:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f116:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f11a:	2300      	movs	r3, #0
 800f11c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f120:	2300      	movs	r3, #0
 800f122:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f126:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800f12a:	4619      	mov	r1, r3
 800f12c:	4810      	ldr	r0, [pc, #64]	@ (800f170 <HAL_PCD_MspInit+0x104>)
 800f12e:	f7f5 faf7 	bl	8004720 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f132:	4b0e      	ldr	r3, [pc, #56]	@ (800f16c <HAL_PCD_MspInit+0x100>)
 800f134:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800f138:	4a0c      	ldr	r2, [pc, #48]	@ (800f16c <HAL_PCD_MspInit+0x100>)
 800f13a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f13e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800f142:	4b0a      	ldr	r3, [pc, #40]	@ (800f16c <HAL_PCD_MspInit+0x100>)
 800f144:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800f148:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f14c:	60bb      	str	r3, [r7, #8]
 800f14e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f150:	2200      	movs	r2, #0
 800f152:	2100      	movs	r1, #0
 800f154:	2065      	movs	r0, #101	@ 0x65
 800f156:	f7f3 f952 	bl	80023fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f15a:	2065      	movs	r0, #101	@ 0x65
 800f15c:	f7f3 f969 	bl	8002432 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f160:	bf00      	nop
 800f162:	37e8      	adds	r7, #232	@ 0xe8
 800f164:	46bd      	mov	sp, r7
 800f166:	bd80      	pop	{r7, pc}
 800f168:	40080000 	.word	0x40080000
 800f16c:	58024400 	.word	0x58024400
 800f170:	58020000 	.word	0x58020000

0800f174 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f174:	b580      	push	{r7, lr}
 800f176:	b082      	sub	sp, #8
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800f188:	4619      	mov	r1, r3
 800f18a:	4610      	mov	r0, r2
 800f18c:	f7fe faed 	bl	800d76a <USBD_LL_SetupStage>
}
 800f190:	bf00      	nop
 800f192:	3708      	adds	r7, #8
 800f194:	46bd      	mov	sp, r7
 800f196:	bd80      	pop	{r7, pc}

0800f198 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b082      	sub	sp, #8
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
 800f1a0:	460b      	mov	r3, r1
 800f1a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800f1aa:	78fa      	ldrb	r2, [r7, #3]
 800f1ac:	6879      	ldr	r1, [r7, #4]
 800f1ae:	4613      	mov	r3, r2
 800f1b0:	00db      	lsls	r3, r3, #3
 800f1b2:	4413      	add	r3, r2
 800f1b4:	009b      	lsls	r3, r3, #2
 800f1b6:	440b      	add	r3, r1
 800f1b8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f1bc:	681a      	ldr	r2, [r3, #0]
 800f1be:	78fb      	ldrb	r3, [r7, #3]
 800f1c0:	4619      	mov	r1, r3
 800f1c2:	f7fe fb27 	bl	800d814 <USBD_LL_DataOutStage>
}
 800f1c6:	bf00      	nop
 800f1c8:	3708      	adds	r7, #8
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	bd80      	pop	{r7, pc}

0800f1ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1ce:	b580      	push	{r7, lr}
 800f1d0:	b082      	sub	sp, #8
 800f1d2:	af00      	add	r7, sp, #0
 800f1d4:	6078      	str	r0, [r7, #4]
 800f1d6:	460b      	mov	r3, r1
 800f1d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800f1e0:	78fa      	ldrb	r2, [r7, #3]
 800f1e2:	6879      	ldr	r1, [r7, #4]
 800f1e4:	4613      	mov	r3, r2
 800f1e6:	00db      	lsls	r3, r3, #3
 800f1e8:	4413      	add	r3, r2
 800f1ea:	009b      	lsls	r3, r3, #2
 800f1ec:	440b      	add	r3, r1
 800f1ee:	3320      	adds	r3, #32
 800f1f0:	681a      	ldr	r2, [r3, #0]
 800f1f2:	78fb      	ldrb	r3, [r7, #3]
 800f1f4:	4619      	mov	r1, r3
 800f1f6:	f7fe fbc0 	bl	800d97a <USBD_LL_DataInStage>
}
 800f1fa:	bf00      	nop
 800f1fc:	3708      	adds	r7, #8
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd80      	pop	{r7, pc}

0800f202 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f202:	b580      	push	{r7, lr}
 800f204:	b082      	sub	sp, #8
 800f206:	af00      	add	r7, sp, #0
 800f208:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f210:	4618      	mov	r0, r3
 800f212:	f7fe fcfa 	bl	800dc0a <USBD_LL_SOF>
}
 800f216:	bf00      	nop
 800f218:	3708      	adds	r7, #8
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bd80      	pop	{r7, pc}

0800f21e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f21e:	b580      	push	{r7, lr}
 800f220:	b084      	sub	sp, #16
 800f222:	af00      	add	r7, sp, #0
 800f224:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f226:	2301      	movs	r3, #1
 800f228:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	79db      	ldrb	r3, [r3, #7]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d102      	bne.n	800f238 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f232:	2300      	movs	r3, #0
 800f234:	73fb      	strb	r3, [r7, #15]
 800f236:	e008      	b.n	800f24a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	79db      	ldrb	r3, [r3, #7]
 800f23c:	2b02      	cmp	r3, #2
 800f23e:	d102      	bne.n	800f246 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f240:	2301      	movs	r3, #1
 800f242:	73fb      	strb	r3, [r7, #15]
 800f244:	e001      	b.n	800f24a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f246:	f7f1 feb1 	bl	8000fac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f250:	7bfa      	ldrb	r2, [r7, #15]
 800f252:	4611      	mov	r1, r2
 800f254:	4618      	mov	r0, r3
 800f256:	f7fe fc94 	bl	800db82 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f260:	4618      	mov	r0, r3
 800f262:	f7fe fc3c 	bl	800dade <USBD_LL_Reset>
}
 800f266:	bf00      	nop
 800f268:	3710      	adds	r7, #16
 800f26a:	46bd      	mov	sp, r7
 800f26c:	bd80      	pop	{r7, pc}
	...

0800f270 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f270:	b580      	push	{r7, lr}
 800f272:	b082      	sub	sp, #8
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f27e:	4618      	mov	r0, r3
 800f280:	f7fe fc8f 	bl	800dba2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	687a      	ldr	r2, [r7, #4]
 800f290:	6812      	ldr	r2, [r2, #0]
 800f292:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f296:	f043 0301 	orr.w	r3, r3, #1
 800f29a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	7adb      	ldrb	r3, [r3, #11]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d005      	beq.n	800f2b0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f2a4:	4b04      	ldr	r3, [pc, #16]	@ (800f2b8 <HAL_PCD_SuspendCallback+0x48>)
 800f2a6:	691b      	ldr	r3, [r3, #16]
 800f2a8:	4a03      	ldr	r2, [pc, #12]	@ (800f2b8 <HAL_PCD_SuspendCallback+0x48>)
 800f2aa:	f043 0306 	orr.w	r3, r3, #6
 800f2ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f2b0:	bf00      	nop
 800f2b2:	3708      	adds	r7, #8
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	bd80      	pop	{r7, pc}
 800f2b8:	e000ed00 	.word	0xe000ed00

0800f2bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b082      	sub	sp, #8
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	f7fe fc85 	bl	800dbda <USBD_LL_Resume>
}
 800f2d0:	bf00      	nop
 800f2d2:	3708      	adds	r7, #8
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	bd80      	pop	{r7, pc}

0800f2d8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b082      	sub	sp, #8
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
 800f2e0:	460b      	mov	r3, r1
 800f2e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f2ea:	78fa      	ldrb	r2, [r7, #3]
 800f2ec:	4611      	mov	r1, r2
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	f7fe fcdd 	bl	800dcae <USBD_LL_IsoOUTIncomplete>
}
 800f2f4:	bf00      	nop
 800f2f6:	3708      	adds	r7, #8
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	bd80      	pop	{r7, pc}

0800f2fc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b082      	sub	sp, #8
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
 800f304:	460b      	mov	r3, r1
 800f306:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f30e:	78fa      	ldrb	r2, [r7, #3]
 800f310:	4611      	mov	r1, r2
 800f312:	4618      	mov	r0, r3
 800f314:	f7fe fc99 	bl	800dc4a <USBD_LL_IsoINIncomplete>
}
 800f318:	bf00      	nop
 800f31a:	3708      	adds	r7, #8
 800f31c:	46bd      	mov	sp, r7
 800f31e:	bd80      	pop	{r7, pc}

0800f320 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b082      	sub	sp, #8
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f32e:	4618      	mov	r0, r3
 800f330:	f7fe fcef 	bl	800dd12 <USBD_LL_DevConnected>
}
 800f334:	bf00      	nop
 800f336:	3708      	adds	r7, #8
 800f338:	46bd      	mov	sp, r7
 800f33a:	bd80      	pop	{r7, pc}

0800f33c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b082      	sub	sp, #8
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f34a:	4618      	mov	r0, r3
 800f34c:	f7fe fcec 	bl	800dd28 <USBD_LL_DevDisconnected>
}
 800f350:	bf00      	nop
 800f352:	3708      	adds	r7, #8
 800f354:	46bd      	mov	sp, r7
 800f356:	bd80      	pop	{r7, pc}

0800f358 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b082      	sub	sp, #8
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	781b      	ldrb	r3, [r3, #0]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d13e      	bne.n	800f3e6 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f368:	4a21      	ldr	r2, [pc, #132]	@ (800f3f0 <USBD_LL_Init+0x98>)
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	4a1f      	ldr	r2, [pc, #124]	@ (800f3f0 <USBD_LL_Init+0x98>)
 800f374:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f378:	4b1d      	ldr	r3, [pc, #116]	@ (800f3f0 <USBD_LL_Init+0x98>)
 800f37a:	4a1e      	ldr	r2, [pc, #120]	@ (800f3f4 <USBD_LL_Init+0x9c>)
 800f37c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800f37e:	4b1c      	ldr	r3, [pc, #112]	@ (800f3f0 <USBD_LL_Init+0x98>)
 800f380:	2209      	movs	r2, #9
 800f382:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f384:	4b1a      	ldr	r3, [pc, #104]	@ (800f3f0 <USBD_LL_Init+0x98>)
 800f386:	2202      	movs	r2, #2
 800f388:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f38a:	4b19      	ldr	r3, [pc, #100]	@ (800f3f0 <USBD_LL_Init+0x98>)
 800f38c:	2200      	movs	r2, #0
 800f38e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f390:	4b17      	ldr	r3, [pc, #92]	@ (800f3f0 <USBD_LL_Init+0x98>)
 800f392:	2202      	movs	r2, #2
 800f394:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800f396:	4b16      	ldr	r3, [pc, #88]	@ (800f3f0 <USBD_LL_Init+0x98>)
 800f398:	2201      	movs	r2, #1
 800f39a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f39c:	4b14      	ldr	r3, [pc, #80]	@ (800f3f0 <USBD_LL_Init+0x98>)
 800f39e:	2200      	movs	r2, #0
 800f3a0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f3a2:	4b13      	ldr	r3, [pc, #76]	@ (800f3f0 <USBD_LL_Init+0x98>)
 800f3a4:	2200      	movs	r2, #0
 800f3a6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800f3a8:	4b11      	ldr	r3, [pc, #68]	@ (800f3f0 <USBD_LL_Init+0x98>)
 800f3aa:	2201      	movs	r2, #1
 800f3ac:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800f3ae:	4b10      	ldr	r3, [pc, #64]	@ (800f3f0 <USBD_LL_Init+0x98>)
 800f3b0:	2201      	movs	r2, #1
 800f3b2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f3b4:	4b0e      	ldr	r3, [pc, #56]	@ (800f3f0 <USBD_LL_Init+0x98>)
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f3ba:	480d      	ldr	r0, [pc, #52]	@ (800f3f0 <USBD_LL_Init+0x98>)
 800f3bc:	f7f5 fbc2 	bl	8004b44 <HAL_PCD_Init>
 800f3c0:	4603      	mov	r3, r0
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d001      	beq.n	800f3ca <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800f3c6:	f7f1 fdf1 	bl	8000fac <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f3ca:	2180      	movs	r1, #128	@ 0x80
 800f3cc:	4808      	ldr	r0, [pc, #32]	@ (800f3f0 <USBD_LL_Init+0x98>)
 800f3ce:	f7f6 fe16 	bl	8005ffe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f3d2:	2240      	movs	r2, #64	@ 0x40
 800f3d4:	2100      	movs	r1, #0
 800f3d6:	4806      	ldr	r0, [pc, #24]	@ (800f3f0 <USBD_LL_Init+0x98>)
 800f3d8:	f7f6 fdca 	bl	8005f70 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f3dc:	2280      	movs	r2, #128	@ 0x80
 800f3de:	2101      	movs	r1, #1
 800f3e0:	4803      	ldr	r0, [pc, #12]	@ (800f3f0 <USBD_LL_Init+0x98>)
 800f3e2:	f7f6 fdc5 	bl	8005f70 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800f3e6:	2300      	movs	r3, #0
}
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	3708      	adds	r7, #8
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	bd80      	pop	{r7, pc}
 800f3f0:	24001d94 	.word	0x24001d94
 800f3f4:	40080000 	.word	0x40080000

0800f3f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b084      	sub	sp, #16
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f400:	2300      	movs	r3, #0
 800f402:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f404:	2300      	movs	r3, #0
 800f406:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f40e:	4618      	mov	r0, r3
 800f410:	f7f5 fca4 	bl	8004d5c <HAL_PCD_Start>
 800f414:	4603      	mov	r3, r0
 800f416:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f418:	7bfb      	ldrb	r3, [r7, #15]
 800f41a:	4618      	mov	r0, r3
 800f41c:	f000 f942 	bl	800f6a4 <USBD_Get_USB_Status>
 800f420:	4603      	mov	r3, r0
 800f422:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f424:	7bbb      	ldrb	r3, [r7, #14]
}
 800f426:	4618      	mov	r0, r3
 800f428:	3710      	adds	r7, #16
 800f42a:	46bd      	mov	sp, r7
 800f42c:	bd80      	pop	{r7, pc}

0800f42e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f42e:	b580      	push	{r7, lr}
 800f430:	b084      	sub	sp, #16
 800f432:	af00      	add	r7, sp, #0
 800f434:	6078      	str	r0, [r7, #4]
 800f436:	4608      	mov	r0, r1
 800f438:	4611      	mov	r1, r2
 800f43a:	461a      	mov	r2, r3
 800f43c:	4603      	mov	r3, r0
 800f43e:	70fb      	strb	r3, [r7, #3]
 800f440:	460b      	mov	r3, r1
 800f442:	70bb      	strb	r3, [r7, #2]
 800f444:	4613      	mov	r3, r2
 800f446:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f448:	2300      	movs	r3, #0
 800f44a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f44c:	2300      	movs	r3, #0
 800f44e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f456:	78bb      	ldrb	r3, [r7, #2]
 800f458:	883a      	ldrh	r2, [r7, #0]
 800f45a:	78f9      	ldrb	r1, [r7, #3]
 800f45c:	f7f6 f9a5 	bl	80057aa <HAL_PCD_EP_Open>
 800f460:	4603      	mov	r3, r0
 800f462:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f464:	7bfb      	ldrb	r3, [r7, #15]
 800f466:	4618      	mov	r0, r3
 800f468:	f000 f91c 	bl	800f6a4 <USBD_Get_USB_Status>
 800f46c:	4603      	mov	r3, r0
 800f46e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f470:	7bbb      	ldrb	r3, [r7, #14]
}
 800f472:	4618      	mov	r0, r3
 800f474:	3710      	adds	r7, #16
 800f476:	46bd      	mov	sp, r7
 800f478:	bd80      	pop	{r7, pc}

0800f47a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f47a:	b580      	push	{r7, lr}
 800f47c:	b084      	sub	sp, #16
 800f47e:	af00      	add	r7, sp, #0
 800f480:	6078      	str	r0, [r7, #4]
 800f482:	460b      	mov	r3, r1
 800f484:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f486:	2300      	movs	r3, #0
 800f488:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f48a:	2300      	movs	r3, #0
 800f48c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f494:	78fa      	ldrb	r2, [r7, #3]
 800f496:	4611      	mov	r1, r2
 800f498:	4618      	mov	r0, r3
 800f49a:	f7f6 f9ee 	bl	800587a <HAL_PCD_EP_Close>
 800f49e:	4603      	mov	r3, r0
 800f4a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f4a2:	7bfb      	ldrb	r3, [r7, #15]
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f000 f8fd 	bl	800f6a4 <USBD_Get_USB_Status>
 800f4aa:	4603      	mov	r3, r0
 800f4ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f4ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	3710      	adds	r7, #16
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	bd80      	pop	{r7, pc}

0800f4b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b084      	sub	sp, #16
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
 800f4c0:	460b      	mov	r3, r1
 800f4c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f4d2:	78fa      	ldrb	r2, [r7, #3]
 800f4d4:	4611      	mov	r1, r2
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	f7f6 faa6 	bl	8005a28 <HAL_PCD_EP_SetStall>
 800f4dc:	4603      	mov	r3, r0
 800f4de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f4e0:	7bfb      	ldrb	r3, [r7, #15]
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	f000 f8de 	bl	800f6a4 <USBD_Get_USB_Status>
 800f4e8:	4603      	mov	r3, r0
 800f4ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f4ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	3710      	adds	r7, #16
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	bd80      	pop	{r7, pc}

0800f4f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f4f6:	b580      	push	{r7, lr}
 800f4f8:	b084      	sub	sp, #16
 800f4fa:	af00      	add	r7, sp, #0
 800f4fc:	6078      	str	r0, [r7, #4]
 800f4fe:	460b      	mov	r3, r1
 800f500:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f502:	2300      	movs	r3, #0
 800f504:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f506:	2300      	movs	r3, #0
 800f508:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f510:	78fa      	ldrb	r2, [r7, #3]
 800f512:	4611      	mov	r1, r2
 800f514:	4618      	mov	r0, r3
 800f516:	f7f6 faea 	bl	8005aee <HAL_PCD_EP_ClrStall>
 800f51a:	4603      	mov	r3, r0
 800f51c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f51e:	7bfb      	ldrb	r3, [r7, #15]
 800f520:	4618      	mov	r0, r3
 800f522:	f000 f8bf 	bl	800f6a4 <USBD_Get_USB_Status>
 800f526:	4603      	mov	r3, r0
 800f528:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f52a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f52c:	4618      	mov	r0, r3
 800f52e:	3710      	adds	r7, #16
 800f530:	46bd      	mov	sp, r7
 800f532:	bd80      	pop	{r7, pc}

0800f534 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f534:	b480      	push	{r7}
 800f536:	b085      	sub	sp, #20
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
 800f53c:	460b      	mov	r3, r1
 800f53e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f546:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f548:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	da0b      	bge.n	800f568 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f550:	78fb      	ldrb	r3, [r7, #3]
 800f552:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f556:	68f9      	ldr	r1, [r7, #12]
 800f558:	4613      	mov	r3, r2
 800f55a:	00db      	lsls	r3, r3, #3
 800f55c:	4413      	add	r3, r2
 800f55e:	009b      	lsls	r3, r3, #2
 800f560:	440b      	add	r3, r1
 800f562:	3316      	adds	r3, #22
 800f564:	781b      	ldrb	r3, [r3, #0]
 800f566:	e00b      	b.n	800f580 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f568:	78fb      	ldrb	r3, [r7, #3]
 800f56a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f56e:	68f9      	ldr	r1, [r7, #12]
 800f570:	4613      	mov	r3, r2
 800f572:	00db      	lsls	r3, r3, #3
 800f574:	4413      	add	r3, r2
 800f576:	009b      	lsls	r3, r3, #2
 800f578:	440b      	add	r3, r1
 800f57a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800f57e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f580:	4618      	mov	r0, r3
 800f582:	3714      	adds	r7, #20
 800f584:	46bd      	mov	sp, r7
 800f586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58a:	4770      	bx	lr

0800f58c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b084      	sub	sp, #16
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
 800f594:	460b      	mov	r3, r1
 800f596:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f598:	2300      	movs	r3, #0
 800f59a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f59c:	2300      	movs	r3, #0
 800f59e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f5a6:	78fa      	ldrb	r2, [r7, #3]
 800f5a8:	4611      	mov	r1, r2
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	f7f6 f8d9 	bl	8005762 <HAL_PCD_SetAddress>
 800f5b0:	4603      	mov	r3, r0
 800f5b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f5b4:	7bfb      	ldrb	r3, [r7, #15]
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	f000 f874 	bl	800f6a4 <USBD_Get_USB_Status>
 800f5bc:	4603      	mov	r3, r0
 800f5be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f5c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	3710      	adds	r7, #16
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	bd80      	pop	{r7, pc}

0800f5ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f5ca:	b580      	push	{r7, lr}
 800f5cc:	b086      	sub	sp, #24
 800f5ce:	af00      	add	r7, sp, #0
 800f5d0:	60f8      	str	r0, [r7, #12]
 800f5d2:	607a      	str	r2, [r7, #4]
 800f5d4:	603b      	str	r3, [r7, #0]
 800f5d6:	460b      	mov	r3, r1
 800f5d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5da:	2300      	movs	r3, #0
 800f5dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5de:	2300      	movs	r3, #0
 800f5e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f5e8:	7af9      	ldrb	r1, [r7, #11]
 800f5ea:	683b      	ldr	r3, [r7, #0]
 800f5ec:	687a      	ldr	r2, [r7, #4]
 800f5ee:	f7f6 f9e1 	bl	80059b4 <HAL_PCD_EP_Transmit>
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f5f6:	7dfb      	ldrb	r3, [r7, #23]
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	f000 f853 	bl	800f6a4 <USBD_Get_USB_Status>
 800f5fe:	4603      	mov	r3, r0
 800f600:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f602:	7dbb      	ldrb	r3, [r7, #22]
}
 800f604:	4618      	mov	r0, r3
 800f606:	3718      	adds	r7, #24
 800f608:	46bd      	mov	sp, r7
 800f60a:	bd80      	pop	{r7, pc}

0800f60c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b086      	sub	sp, #24
 800f610:	af00      	add	r7, sp, #0
 800f612:	60f8      	str	r0, [r7, #12]
 800f614:	607a      	str	r2, [r7, #4]
 800f616:	603b      	str	r3, [r7, #0]
 800f618:	460b      	mov	r3, r1
 800f61a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f61c:	2300      	movs	r3, #0
 800f61e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f620:	2300      	movs	r3, #0
 800f622:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f62a:	7af9      	ldrb	r1, [r7, #11]
 800f62c:	683b      	ldr	r3, [r7, #0]
 800f62e:	687a      	ldr	r2, [r7, #4]
 800f630:	f7f6 f96d 	bl	800590e <HAL_PCD_EP_Receive>
 800f634:	4603      	mov	r3, r0
 800f636:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f638:	7dfb      	ldrb	r3, [r7, #23]
 800f63a:	4618      	mov	r0, r3
 800f63c:	f000 f832 	bl	800f6a4 <USBD_Get_USB_Status>
 800f640:	4603      	mov	r3, r0
 800f642:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f644:	7dbb      	ldrb	r3, [r7, #22]
}
 800f646:	4618      	mov	r0, r3
 800f648:	3718      	adds	r7, #24
 800f64a:	46bd      	mov	sp, r7
 800f64c:	bd80      	pop	{r7, pc}

0800f64e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f64e:	b580      	push	{r7, lr}
 800f650:	b082      	sub	sp, #8
 800f652:	af00      	add	r7, sp, #0
 800f654:	6078      	str	r0, [r7, #4]
 800f656:	460b      	mov	r3, r1
 800f658:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f660:	78fa      	ldrb	r2, [r7, #3]
 800f662:	4611      	mov	r1, r2
 800f664:	4618      	mov	r0, r3
 800f666:	f7f6 f98d 	bl	8005984 <HAL_PCD_EP_GetRxCount>
 800f66a:	4603      	mov	r3, r0
}
 800f66c:	4618      	mov	r0, r3
 800f66e:	3708      	adds	r7, #8
 800f670:	46bd      	mov	sp, r7
 800f672:	bd80      	pop	{r7, pc}

0800f674 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f674:	b480      	push	{r7}
 800f676:	b083      	sub	sp, #12
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f67c:	4b03      	ldr	r3, [pc, #12]	@ (800f68c <USBD_static_malloc+0x18>)
}
 800f67e:	4618      	mov	r0, r3
 800f680:	370c      	adds	r7, #12
 800f682:	46bd      	mov	sp, r7
 800f684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f688:	4770      	bx	lr
 800f68a:	bf00      	nop
 800f68c:	24002278 	.word	0x24002278

0800f690 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f690:	b480      	push	{r7}
 800f692:	b083      	sub	sp, #12
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800f698:	bf00      	nop
 800f69a:	370c      	adds	r7, #12
 800f69c:	46bd      	mov	sp, r7
 800f69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a2:	4770      	bx	lr

0800f6a4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f6a4:	b480      	push	{r7}
 800f6a6:	b085      	sub	sp, #20
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f6b2:	79fb      	ldrb	r3, [r7, #7]
 800f6b4:	2b03      	cmp	r3, #3
 800f6b6:	d817      	bhi.n	800f6e8 <USBD_Get_USB_Status+0x44>
 800f6b8:	a201      	add	r2, pc, #4	@ (adr r2, 800f6c0 <USBD_Get_USB_Status+0x1c>)
 800f6ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6be:	bf00      	nop
 800f6c0:	0800f6d1 	.word	0x0800f6d1
 800f6c4:	0800f6d7 	.word	0x0800f6d7
 800f6c8:	0800f6dd 	.word	0x0800f6dd
 800f6cc:	0800f6e3 	.word	0x0800f6e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	73fb      	strb	r3, [r7, #15]
    break;
 800f6d4:	e00b      	b.n	800f6ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f6d6:	2303      	movs	r3, #3
 800f6d8:	73fb      	strb	r3, [r7, #15]
    break;
 800f6da:	e008      	b.n	800f6ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f6dc:	2301      	movs	r3, #1
 800f6de:	73fb      	strb	r3, [r7, #15]
    break;
 800f6e0:	e005      	b.n	800f6ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f6e2:	2303      	movs	r3, #3
 800f6e4:	73fb      	strb	r3, [r7, #15]
    break;
 800f6e6:	e002      	b.n	800f6ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f6e8:	2303      	movs	r3, #3
 800f6ea:	73fb      	strb	r3, [r7, #15]
    break;
 800f6ec:	bf00      	nop
  }
  return usb_status;
 800f6ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	3714      	adds	r7, #20
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fa:	4770      	bx	lr

0800f6fc <__cvt>:
 800f6fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6fe:	ed2d 8b02 	vpush	{d8}
 800f702:	eeb0 8b40 	vmov.f64	d8, d0
 800f706:	b085      	sub	sp, #20
 800f708:	4617      	mov	r7, r2
 800f70a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800f70c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f70e:	ee18 2a90 	vmov	r2, s17
 800f712:	f025 0520 	bic.w	r5, r5, #32
 800f716:	2a00      	cmp	r2, #0
 800f718:	bfb6      	itet	lt
 800f71a:	222d      	movlt	r2, #45	@ 0x2d
 800f71c:	2200      	movge	r2, #0
 800f71e:	eeb1 8b40 	vneglt.f64	d8, d0
 800f722:	2d46      	cmp	r5, #70	@ 0x46
 800f724:	460c      	mov	r4, r1
 800f726:	701a      	strb	r2, [r3, #0]
 800f728:	d004      	beq.n	800f734 <__cvt+0x38>
 800f72a:	2d45      	cmp	r5, #69	@ 0x45
 800f72c:	d100      	bne.n	800f730 <__cvt+0x34>
 800f72e:	3401      	adds	r4, #1
 800f730:	2102      	movs	r1, #2
 800f732:	e000      	b.n	800f736 <__cvt+0x3a>
 800f734:	2103      	movs	r1, #3
 800f736:	ab03      	add	r3, sp, #12
 800f738:	9301      	str	r3, [sp, #4]
 800f73a:	ab02      	add	r3, sp, #8
 800f73c:	9300      	str	r3, [sp, #0]
 800f73e:	4622      	mov	r2, r4
 800f740:	4633      	mov	r3, r6
 800f742:	eeb0 0b48 	vmov.f64	d0, d8
 800f746:	f000 fe3f 	bl	80103c8 <_dtoa_r>
 800f74a:	2d47      	cmp	r5, #71	@ 0x47
 800f74c:	d114      	bne.n	800f778 <__cvt+0x7c>
 800f74e:	07fb      	lsls	r3, r7, #31
 800f750:	d50a      	bpl.n	800f768 <__cvt+0x6c>
 800f752:	1902      	adds	r2, r0, r4
 800f754:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f75c:	bf08      	it	eq
 800f75e:	9203      	streq	r2, [sp, #12]
 800f760:	2130      	movs	r1, #48	@ 0x30
 800f762:	9b03      	ldr	r3, [sp, #12]
 800f764:	4293      	cmp	r3, r2
 800f766:	d319      	bcc.n	800f79c <__cvt+0xa0>
 800f768:	9b03      	ldr	r3, [sp, #12]
 800f76a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f76c:	1a1b      	subs	r3, r3, r0
 800f76e:	6013      	str	r3, [r2, #0]
 800f770:	b005      	add	sp, #20
 800f772:	ecbd 8b02 	vpop	{d8}
 800f776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f778:	2d46      	cmp	r5, #70	@ 0x46
 800f77a:	eb00 0204 	add.w	r2, r0, r4
 800f77e:	d1e9      	bne.n	800f754 <__cvt+0x58>
 800f780:	7803      	ldrb	r3, [r0, #0]
 800f782:	2b30      	cmp	r3, #48	@ 0x30
 800f784:	d107      	bne.n	800f796 <__cvt+0x9a>
 800f786:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f78a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f78e:	bf1c      	itt	ne
 800f790:	f1c4 0401 	rsbne	r4, r4, #1
 800f794:	6034      	strne	r4, [r6, #0]
 800f796:	6833      	ldr	r3, [r6, #0]
 800f798:	441a      	add	r2, r3
 800f79a:	e7db      	b.n	800f754 <__cvt+0x58>
 800f79c:	1c5c      	adds	r4, r3, #1
 800f79e:	9403      	str	r4, [sp, #12]
 800f7a0:	7019      	strb	r1, [r3, #0]
 800f7a2:	e7de      	b.n	800f762 <__cvt+0x66>

0800f7a4 <__exponent>:
 800f7a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f7a6:	2900      	cmp	r1, #0
 800f7a8:	bfba      	itte	lt
 800f7aa:	4249      	neglt	r1, r1
 800f7ac:	232d      	movlt	r3, #45	@ 0x2d
 800f7ae:	232b      	movge	r3, #43	@ 0x2b
 800f7b0:	2909      	cmp	r1, #9
 800f7b2:	7002      	strb	r2, [r0, #0]
 800f7b4:	7043      	strb	r3, [r0, #1]
 800f7b6:	dd29      	ble.n	800f80c <__exponent+0x68>
 800f7b8:	f10d 0307 	add.w	r3, sp, #7
 800f7bc:	461d      	mov	r5, r3
 800f7be:	270a      	movs	r7, #10
 800f7c0:	461a      	mov	r2, r3
 800f7c2:	fbb1 f6f7 	udiv	r6, r1, r7
 800f7c6:	fb07 1416 	mls	r4, r7, r6, r1
 800f7ca:	3430      	adds	r4, #48	@ 0x30
 800f7cc:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f7d0:	460c      	mov	r4, r1
 800f7d2:	2c63      	cmp	r4, #99	@ 0x63
 800f7d4:	f103 33ff 	add.w	r3, r3, #4294967295
 800f7d8:	4631      	mov	r1, r6
 800f7da:	dcf1      	bgt.n	800f7c0 <__exponent+0x1c>
 800f7dc:	3130      	adds	r1, #48	@ 0x30
 800f7de:	1e94      	subs	r4, r2, #2
 800f7e0:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f7e4:	1c41      	adds	r1, r0, #1
 800f7e6:	4623      	mov	r3, r4
 800f7e8:	42ab      	cmp	r3, r5
 800f7ea:	d30a      	bcc.n	800f802 <__exponent+0x5e>
 800f7ec:	f10d 0309 	add.w	r3, sp, #9
 800f7f0:	1a9b      	subs	r3, r3, r2
 800f7f2:	42ac      	cmp	r4, r5
 800f7f4:	bf88      	it	hi
 800f7f6:	2300      	movhi	r3, #0
 800f7f8:	3302      	adds	r3, #2
 800f7fa:	4403      	add	r3, r0
 800f7fc:	1a18      	subs	r0, r3, r0
 800f7fe:	b003      	add	sp, #12
 800f800:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f802:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f806:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f80a:	e7ed      	b.n	800f7e8 <__exponent+0x44>
 800f80c:	2330      	movs	r3, #48	@ 0x30
 800f80e:	3130      	adds	r1, #48	@ 0x30
 800f810:	7083      	strb	r3, [r0, #2]
 800f812:	70c1      	strb	r1, [r0, #3]
 800f814:	1d03      	adds	r3, r0, #4
 800f816:	e7f1      	b.n	800f7fc <__exponent+0x58>

0800f818 <_printf_float>:
 800f818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f81c:	b08d      	sub	sp, #52	@ 0x34
 800f81e:	460c      	mov	r4, r1
 800f820:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f824:	4616      	mov	r6, r2
 800f826:	461f      	mov	r7, r3
 800f828:	4605      	mov	r5, r0
 800f82a:	f000 fccb 	bl	80101c4 <_localeconv_r>
 800f82e:	f8d0 b000 	ldr.w	fp, [r0]
 800f832:	4658      	mov	r0, fp
 800f834:	f7f0 fda4 	bl	8000380 <strlen>
 800f838:	2300      	movs	r3, #0
 800f83a:	930a      	str	r3, [sp, #40]	@ 0x28
 800f83c:	f8d8 3000 	ldr.w	r3, [r8]
 800f840:	f894 9018 	ldrb.w	r9, [r4, #24]
 800f844:	6822      	ldr	r2, [r4, #0]
 800f846:	9005      	str	r0, [sp, #20]
 800f848:	3307      	adds	r3, #7
 800f84a:	f023 0307 	bic.w	r3, r3, #7
 800f84e:	f103 0108 	add.w	r1, r3, #8
 800f852:	f8c8 1000 	str.w	r1, [r8]
 800f856:	ed93 0b00 	vldr	d0, [r3]
 800f85a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800fab8 <_printf_float+0x2a0>
 800f85e:	eeb0 7bc0 	vabs.f64	d7, d0
 800f862:	eeb4 7b46 	vcmp.f64	d7, d6
 800f866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f86a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800f86e:	dd24      	ble.n	800f8ba <_printf_float+0xa2>
 800f870:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f878:	d502      	bpl.n	800f880 <_printf_float+0x68>
 800f87a:	232d      	movs	r3, #45	@ 0x2d
 800f87c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f880:	498f      	ldr	r1, [pc, #572]	@ (800fac0 <_printf_float+0x2a8>)
 800f882:	4b90      	ldr	r3, [pc, #576]	@ (800fac4 <_printf_float+0x2ac>)
 800f884:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800f888:	bf94      	ite	ls
 800f88a:	4688      	movls	r8, r1
 800f88c:	4698      	movhi	r8, r3
 800f88e:	f022 0204 	bic.w	r2, r2, #4
 800f892:	2303      	movs	r3, #3
 800f894:	6123      	str	r3, [r4, #16]
 800f896:	6022      	str	r2, [r4, #0]
 800f898:	f04f 0a00 	mov.w	sl, #0
 800f89c:	9700      	str	r7, [sp, #0]
 800f89e:	4633      	mov	r3, r6
 800f8a0:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f8a2:	4621      	mov	r1, r4
 800f8a4:	4628      	mov	r0, r5
 800f8a6:	f000 f9d1 	bl	800fc4c <_printf_common>
 800f8aa:	3001      	adds	r0, #1
 800f8ac:	f040 8089 	bne.w	800f9c2 <_printf_float+0x1aa>
 800f8b0:	f04f 30ff 	mov.w	r0, #4294967295
 800f8b4:	b00d      	add	sp, #52	@ 0x34
 800f8b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8ba:	eeb4 0b40 	vcmp.f64	d0, d0
 800f8be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8c2:	d709      	bvc.n	800f8d8 <_printf_float+0xc0>
 800f8c4:	ee10 3a90 	vmov	r3, s1
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	bfbc      	itt	lt
 800f8cc:	232d      	movlt	r3, #45	@ 0x2d
 800f8ce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f8d2:	497d      	ldr	r1, [pc, #500]	@ (800fac8 <_printf_float+0x2b0>)
 800f8d4:	4b7d      	ldr	r3, [pc, #500]	@ (800facc <_printf_float+0x2b4>)
 800f8d6:	e7d5      	b.n	800f884 <_printf_float+0x6c>
 800f8d8:	6863      	ldr	r3, [r4, #4]
 800f8da:	1c59      	adds	r1, r3, #1
 800f8dc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800f8e0:	d139      	bne.n	800f956 <_printf_float+0x13e>
 800f8e2:	2306      	movs	r3, #6
 800f8e4:	6063      	str	r3, [r4, #4]
 800f8e6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	6022      	str	r2, [r4, #0]
 800f8ee:	9303      	str	r3, [sp, #12]
 800f8f0:	ab0a      	add	r3, sp, #40	@ 0x28
 800f8f2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800f8f6:	ab09      	add	r3, sp, #36	@ 0x24
 800f8f8:	9300      	str	r3, [sp, #0]
 800f8fa:	6861      	ldr	r1, [r4, #4]
 800f8fc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f900:	4628      	mov	r0, r5
 800f902:	f7ff fefb 	bl	800f6fc <__cvt>
 800f906:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f90a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f90c:	4680      	mov	r8, r0
 800f90e:	d129      	bne.n	800f964 <_printf_float+0x14c>
 800f910:	1cc8      	adds	r0, r1, #3
 800f912:	db02      	blt.n	800f91a <_printf_float+0x102>
 800f914:	6863      	ldr	r3, [r4, #4]
 800f916:	4299      	cmp	r1, r3
 800f918:	dd41      	ble.n	800f99e <_printf_float+0x186>
 800f91a:	f1a9 0902 	sub.w	r9, r9, #2
 800f91e:	fa5f f989 	uxtb.w	r9, r9
 800f922:	3901      	subs	r1, #1
 800f924:	464a      	mov	r2, r9
 800f926:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f92a:	9109      	str	r1, [sp, #36]	@ 0x24
 800f92c:	f7ff ff3a 	bl	800f7a4 <__exponent>
 800f930:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f932:	1813      	adds	r3, r2, r0
 800f934:	2a01      	cmp	r2, #1
 800f936:	4682      	mov	sl, r0
 800f938:	6123      	str	r3, [r4, #16]
 800f93a:	dc02      	bgt.n	800f942 <_printf_float+0x12a>
 800f93c:	6822      	ldr	r2, [r4, #0]
 800f93e:	07d2      	lsls	r2, r2, #31
 800f940:	d501      	bpl.n	800f946 <_printf_float+0x12e>
 800f942:	3301      	adds	r3, #1
 800f944:	6123      	str	r3, [r4, #16]
 800f946:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d0a6      	beq.n	800f89c <_printf_float+0x84>
 800f94e:	232d      	movs	r3, #45	@ 0x2d
 800f950:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f954:	e7a2      	b.n	800f89c <_printf_float+0x84>
 800f956:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f95a:	d1c4      	bne.n	800f8e6 <_printf_float+0xce>
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d1c2      	bne.n	800f8e6 <_printf_float+0xce>
 800f960:	2301      	movs	r3, #1
 800f962:	e7bf      	b.n	800f8e4 <_printf_float+0xcc>
 800f964:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800f968:	d9db      	bls.n	800f922 <_printf_float+0x10a>
 800f96a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800f96e:	d118      	bne.n	800f9a2 <_printf_float+0x18a>
 800f970:	2900      	cmp	r1, #0
 800f972:	6863      	ldr	r3, [r4, #4]
 800f974:	dd0b      	ble.n	800f98e <_printf_float+0x176>
 800f976:	6121      	str	r1, [r4, #16]
 800f978:	b913      	cbnz	r3, 800f980 <_printf_float+0x168>
 800f97a:	6822      	ldr	r2, [r4, #0]
 800f97c:	07d0      	lsls	r0, r2, #31
 800f97e:	d502      	bpl.n	800f986 <_printf_float+0x16e>
 800f980:	3301      	adds	r3, #1
 800f982:	440b      	add	r3, r1
 800f984:	6123      	str	r3, [r4, #16]
 800f986:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f988:	f04f 0a00 	mov.w	sl, #0
 800f98c:	e7db      	b.n	800f946 <_printf_float+0x12e>
 800f98e:	b913      	cbnz	r3, 800f996 <_printf_float+0x17e>
 800f990:	6822      	ldr	r2, [r4, #0]
 800f992:	07d2      	lsls	r2, r2, #31
 800f994:	d501      	bpl.n	800f99a <_printf_float+0x182>
 800f996:	3302      	adds	r3, #2
 800f998:	e7f4      	b.n	800f984 <_printf_float+0x16c>
 800f99a:	2301      	movs	r3, #1
 800f99c:	e7f2      	b.n	800f984 <_printf_float+0x16c>
 800f99e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800f9a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f9a4:	4299      	cmp	r1, r3
 800f9a6:	db05      	blt.n	800f9b4 <_printf_float+0x19c>
 800f9a8:	6823      	ldr	r3, [r4, #0]
 800f9aa:	6121      	str	r1, [r4, #16]
 800f9ac:	07d8      	lsls	r0, r3, #31
 800f9ae:	d5ea      	bpl.n	800f986 <_printf_float+0x16e>
 800f9b0:	1c4b      	adds	r3, r1, #1
 800f9b2:	e7e7      	b.n	800f984 <_printf_float+0x16c>
 800f9b4:	2900      	cmp	r1, #0
 800f9b6:	bfd4      	ite	le
 800f9b8:	f1c1 0202 	rsble	r2, r1, #2
 800f9bc:	2201      	movgt	r2, #1
 800f9be:	4413      	add	r3, r2
 800f9c0:	e7e0      	b.n	800f984 <_printf_float+0x16c>
 800f9c2:	6823      	ldr	r3, [r4, #0]
 800f9c4:	055a      	lsls	r2, r3, #21
 800f9c6:	d407      	bmi.n	800f9d8 <_printf_float+0x1c0>
 800f9c8:	6923      	ldr	r3, [r4, #16]
 800f9ca:	4642      	mov	r2, r8
 800f9cc:	4631      	mov	r1, r6
 800f9ce:	4628      	mov	r0, r5
 800f9d0:	47b8      	blx	r7
 800f9d2:	3001      	adds	r0, #1
 800f9d4:	d12a      	bne.n	800fa2c <_printf_float+0x214>
 800f9d6:	e76b      	b.n	800f8b0 <_printf_float+0x98>
 800f9d8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800f9dc:	f240 80e0 	bls.w	800fba0 <_printf_float+0x388>
 800f9e0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800f9e4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f9e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9ec:	d133      	bne.n	800fa56 <_printf_float+0x23e>
 800f9ee:	4a38      	ldr	r2, [pc, #224]	@ (800fad0 <_printf_float+0x2b8>)
 800f9f0:	2301      	movs	r3, #1
 800f9f2:	4631      	mov	r1, r6
 800f9f4:	4628      	mov	r0, r5
 800f9f6:	47b8      	blx	r7
 800f9f8:	3001      	adds	r0, #1
 800f9fa:	f43f af59 	beq.w	800f8b0 <_printf_float+0x98>
 800f9fe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800fa02:	4543      	cmp	r3, r8
 800fa04:	db02      	blt.n	800fa0c <_printf_float+0x1f4>
 800fa06:	6823      	ldr	r3, [r4, #0]
 800fa08:	07d8      	lsls	r0, r3, #31
 800fa0a:	d50f      	bpl.n	800fa2c <_printf_float+0x214>
 800fa0c:	9b05      	ldr	r3, [sp, #20]
 800fa0e:	465a      	mov	r2, fp
 800fa10:	4631      	mov	r1, r6
 800fa12:	4628      	mov	r0, r5
 800fa14:	47b8      	blx	r7
 800fa16:	3001      	adds	r0, #1
 800fa18:	f43f af4a 	beq.w	800f8b0 <_printf_float+0x98>
 800fa1c:	f04f 0900 	mov.w	r9, #0
 800fa20:	f108 38ff 	add.w	r8, r8, #4294967295
 800fa24:	f104 0a1a 	add.w	sl, r4, #26
 800fa28:	45c8      	cmp	r8, r9
 800fa2a:	dc09      	bgt.n	800fa40 <_printf_float+0x228>
 800fa2c:	6823      	ldr	r3, [r4, #0]
 800fa2e:	079b      	lsls	r3, r3, #30
 800fa30:	f100 8107 	bmi.w	800fc42 <_printf_float+0x42a>
 800fa34:	68e0      	ldr	r0, [r4, #12]
 800fa36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fa38:	4298      	cmp	r0, r3
 800fa3a:	bfb8      	it	lt
 800fa3c:	4618      	movlt	r0, r3
 800fa3e:	e739      	b.n	800f8b4 <_printf_float+0x9c>
 800fa40:	2301      	movs	r3, #1
 800fa42:	4652      	mov	r2, sl
 800fa44:	4631      	mov	r1, r6
 800fa46:	4628      	mov	r0, r5
 800fa48:	47b8      	blx	r7
 800fa4a:	3001      	adds	r0, #1
 800fa4c:	f43f af30 	beq.w	800f8b0 <_printf_float+0x98>
 800fa50:	f109 0901 	add.w	r9, r9, #1
 800fa54:	e7e8      	b.n	800fa28 <_printf_float+0x210>
 800fa56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	dc3b      	bgt.n	800fad4 <_printf_float+0x2bc>
 800fa5c:	4a1c      	ldr	r2, [pc, #112]	@ (800fad0 <_printf_float+0x2b8>)
 800fa5e:	2301      	movs	r3, #1
 800fa60:	4631      	mov	r1, r6
 800fa62:	4628      	mov	r0, r5
 800fa64:	47b8      	blx	r7
 800fa66:	3001      	adds	r0, #1
 800fa68:	f43f af22 	beq.w	800f8b0 <_printf_float+0x98>
 800fa6c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800fa70:	ea59 0303 	orrs.w	r3, r9, r3
 800fa74:	d102      	bne.n	800fa7c <_printf_float+0x264>
 800fa76:	6823      	ldr	r3, [r4, #0]
 800fa78:	07d9      	lsls	r1, r3, #31
 800fa7a:	d5d7      	bpl.n	800fa2c <_printf_float+0x214>
 800fa7c:	9b05      	ldr	r3, [sp, #20]
 800fa7e:	465a      	mov	r2, fp
 800fa80:	4631      	mov	r1, r6
 800fa82:	4628      	mov	r0, r5
 800fa84:	47b8      	blx	r7
 800fa86:	3001      	adds	r0, #1
 800fa88:	f43f af12 	beq.w	800f8b0 <_printf_float+0x98>
 800fa8c:	f04f 0a00 	mov.w	sl, #0
 800fa90:	f104 0b1a 	add.w	fp, r4, #26
 800fa94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa96:	425b      	negs	r3, r3
 800fa98:	4553      	cmp	r3, sl
 800fa9a:	dc01      	bgt.n	800faa0 <_printf_float+0x288>
 800fa9c:	464b      	mov	r3, r9
 800fa9e:	e794      	b.n	800f9ca <_printf_float+0x1b2>
 800faa0:	2301      	movs	r3, #1
 800faa2:	465a      	mov	r2, fp
 800faa4:	4631      	mov	r1, r6
 800faa6:	4628      	mov	r0, r5
 800faa8:	47b8      	blx	r7
 800faaa:	3001      	adds	r0, #1
 800faac:	f43f af00 	beq.w	800f8b0 <_printf_float+0x98>
 800fab0:	f10a 0a01 	add.w	sl, sl, #1
 800fab4:	e7ee      	b.n	800fa94 <_printf_float+0x27c>
 800fab6:	bf00      	nop
 800fab8:	ffffffff 	.word	0xffffffff
 800fabc:	7fefffff 	.word	0x7fefffff
 800fac0:	08012394 	.word	0x08012394
 800fac4:	08012398 	.word	0x08012398
 800fac8:	0801239c 	.word	0x0801239c
 800facc:	080123a0 	.word	0x080123a0
 800fad0:	080123a4 	.word	0x080123a4
 800fad4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fad6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fada:	4553      	cmp	r3, sl
 800fadc:	bfa8      	it	ge
 800fade:	4653      	movge	r3, sl
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	4699      	mov	r9, r3
 800fae4:	dc37      	bgt.n	800fb56 <_printf_float+0x33e>
 800fae6:	2300      	movs	r3, #0
 800fae8:	9307      	str	r3, [sp, #28]
 800faea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800faee:	f104 021a 	add.w	r2, r4, #26
 800faf2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800faf4:	9907      	ldr	r1, [sp, #28]
 800faf6:	9306      	str	r3, [sp, #24]
 800faf8:	eba3 0309 	sub.w	r3, r3, r9
 800fafc:	428b      	cmp	r3, r1
 800fafe:	dc31      	bgt.n	800fb64 <_printf_float+0x34c>
 800fb00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb02:	459a      	cmp	sl, r3
 800fb04:	dc3b      	bgt.n	800fb7e <_printf_float+0x366>
 800fb06:	6823      	ldr	r3, [r4, #0]
 800fb08:	07da      	lsls	r2, r3, #31
 800fb0a:	d438      	bmi.n	800fb7e <_printf_float+0x366>
 800fb0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb0e:	ebaa 0903 	sub.w	r9, sl, r3
 800fb12:	9b06      	ldr	r3, [sp, #24]
 800fb14:	ebaa 0303 	sub.w	r3, sl, r3
 800fb18:	4599      	cmp	r9, r3
 800fb1a:	bfa8      	it	ge
 800fb1c:	4699      	movge	r9, r3
 800fb1e:	f1b9 0f00 	cmp.w	r9, #0
 800fb22:	dc34      	bgt.n	800fb8e <_printf_float+0x376>
 800fb24:	f04f 0800 	mov.w	r8, #0
 800fb28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fb2c:	f104 0b1a 	add.w	fp, r4, #26
 800fb30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb32:	ebaa 0303 	sub.w	r3, sl, r3
 800fb36:	eba3 0309 	sub.w	r3, r3, r9
 800fb3a:	4543      	cmp	r3, r8
 800fb3c:	f77f af76 	ble.w	800fa2c <_printf_float+0x214>
 800fb40:	2301      	movs	r3, #1
 800fb42:	465a      	mov	r2, fp
 800fb44:	4631      	mov	r1, r6
 800fb46:	4628      	mov	r0, r5
 800fb48:	47b8      	blx	r7
 800fb4a:	3001      	adds	r0, #1
 800fb4c:	f43f aeb0 	beq.w	800f8b0 <_printf_float+0x98>
 800fb50:	f108 0801 	add.w	r8, r8, #1
 800fb54:	e7ec      	b.n	800fb30 <_printf_float+0x318>
 800fb56:	4642      	mov	r2, r8
 800fb58:	4631      	mov	r1, r6
 800fb5a:	4628      	mov	r0, r5
 800fb5c:	47b8      	blx	r7
 800fb5e:	3001      	adds	r0, #1
 800fb60:	d1c1      	bne.n	800fae6 <_printf_float+0x2ce>
 800fb62:	e6a5      	b.n	800f8b0 <_printf_float+0x98>
 800fb64:	2301      	movs	r3, #1
 800fb66:	4631      	mov	r1, r6
 800fb68:	4628      	mov	r0, r5
 800fb6a:	9206      	str	r2, [sp, #24]
 800fb6c:	47b8      	blx	r7
 800fb6e:	3001      	adds	r0, #1
 800fb70:	f43f ae9e 	beq.w	800f8b0 <_printf_float+0x98>
 800fb74:	9b07      	ldr	r3, [sp, #28]
 800fb76:	9a06      	ldr	r2, [sp, #24]
 800fb78:	3301      	adds	r3, #1
 800fb7a:	9307      	str	r3, [sp, #28]
 800fb7c:	e7b9      	b.n	800faf2 <_printf_float+0x2da>
 800fb7e:	9b05      	ldr	r3, [sp, #20]
 800fb80:	465a      	mov	r2, fp
 800fb82:	4631      	mov	r1, r6
 800fb84:	4628      	mov	r0, r5
 800fb86:	47b8      	blx	r7
 800fb88:	3001      	adds	r0, #1
 800fb8a:	d1bf      	bne.n	800fb0c <_printf_float+0x2f4>
 800fb8c:	e690      	b.n	800f8b0 <_printf_float+0x98>
 800fb8e:	9a06      	ldr	r2, [sp, #24]
 800fb90:	464b      	mov	r3, r9
 800fb92:	4442      	add	r2, r8
 800fb94:	4631      	mov	r1, r6
 800fb96:	4628      	mov	r0, r5
 800fb98:	47b8      	blx	r7
 800fb9a:	3001      	adds	r0, #1
 800fb9c:	d1c2      	bne.n	800fb24 <_printf_float+0x30c>
 800fb9e:	e687      	b.n	800f8b0 <_printf_float+0x98>
 800fba0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800fba4:	f1b9 0f01 	cmp.w	r9, #1
 800fba8:	dc01      	bgt.n	800fbae <_printf_float+0x396>
 800fbaa:	07db      	lsls	r3, r3, #31
 800fbac:	d536      	bpl.n	800fc1c <_printf_float+0x404>
 800fbae:	2301      	movs	r3, #1
 800fbb0:	4642      	mov	r2, r8
 800fbb2:	4631      	mov	r1, r6
 800fbb4:	4628      	mov	r0, r5
 800fbb6:	47b8      	blx	r7
 800fbb8:	3001      	adds	r0, #1
 800fbba:	f43f ae79 	beq.w	800f8b0 <_printf_float+0x98>
 800fbbe:	9b05      	ldr	r3, [sp, #20]
 800fbc0:	465a      	mov	r2, fp
 800fbc2:	4631      	mov	r1, r6
 800fbc4:	4628      	mov	r0, r5
 800fbc6:	47b8      	blx	r7
 800fbc8:	3001      	adds	r0, #1
 800fbca:	f43f ae71 	beq.w	800f8b0 <_printf_float+0x98>
 800fbce:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800fbd2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fbd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbda:	f109 39ff 	add.w	r9, r9, #4294967295
 800fbde:	d018      	beq.n	800fc12 <_printf_float+0x3fa>
 800fbe0:	464b      	mov	r3, r9
 800fbe2:	f108 0201 	add.w	r2, r8, #1
 800fbe6:	4631      	mov	r1, r6
 800fbe8:	4628      	mov	r0, r5
 800fbea:	47b8      	blx	r7
 800fbec:	3001      	adds	r0, #1
 800fbee:	d10c      	bne.n	800fc0a <_printf_float+0x3f2>
 800fbf0:	e65e      	b.n	800f8b0 <_printf_float+0x98>
 800fbf2:	2301      	movs	r3, #1
 800fbf4:	465a      	mov	r2, fp
 800fbf6:	4631      	mov	r1, r6
 800fbf8:	4628      	mov	r0, r5
 800fbfa:	47b8      	blx	r7
 800fbfc:	3001      	adds	r0, #1
 800fbfe:	f43f ae57 	beq.w	800f8b0 <_printf_float+0x98>
 800fc02:	f108 0801 	add.w	r8, r8, #1
 800fc06:	45c8      	cmp	r8, r9
 800fc08:	dbf3      	blt.n	800fbf2 <_printf_float+0x3da>
 800fc0a:	4653      	mov	r3, sl
 800fc0c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800fc10:	e6dc      	b.n	800f9cc <_printf_float+0x1b4>
 800fc12:	f04f 0800 	mov.w	r8, #0
 800fc16:	f104 0b1a 	add.w	fp, r4, #26
 800fc1a:	e7f4      	b.n	800fc06 <_printf_float+0x3ee>
 800fc1c:	2301      	movs	r3, #1
 800fc1e:	4642      	mov	r2, r8
 800fc20:	e7e1      	b.n	800fbe6 <_printf_float+0x3ce>
 800fc22:	2301      	movs	r3, #1
 800fc24:	464a      	mov	r2, r9
 800fc26:	4631      	mov	r1, r6
 800fc28:	4628      	mov	r0, r5
 800fc2a:	47b8      	blx	r7
 800fc2c:	3001      	adds	r0, #1
 800fc2e:	f43f ae3f 	beq.w	800f8b0 <_printf_float+0x98>
 800fc32:	f108 0801 	add.w	r8, r8, #1
 800fc36:	68e3      	ldr	r3, [r4, #12]
 800fc38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fc3a:	1a5b      	subs	r3, r3, r1
 800fc3c:	4543      	cmp	r3, r8
 800fc3e:	dcf0      	bgt.n	800fc22 <_printf_float+0x40a>
 800fc40:	e6f8      	b.n	800fa34 <_printf_float+0x21c>
 800fc42:	f04f 0800 	mov.w	r8, #0
 800fc46:	f104 0919 	add.w	r9, r4, #25
 800fc4a:	e7f4      	b.n	800fc36 <_printf_float+0x41e>

0800fc4c <_printf_common>:
 800fc4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc50:	4616      	mov	r6, r2
 800fc52:	4698      	mov	r8, r3
 800fc54:	688a      	ldr	r2, [r1, #8]
 800fc56:	690b      	ldr	r3, [r1, #16]
 800fc58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fc5c:	4293      	cmp	r3, r2
 800fc5e:	bfb8      	it	lt
 800fc60:	4613      	movlt	r3, r2
 800fc62:	6033      	str	r3, [r6, #0]
 800fc64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fc68:	4607      	mov	r7, r0
 800fc6a:	460c      	mov	r4, r1
 800fc6c:	b10a      	cbz	r2, 800fc72 <_printf_common+0x26>
 800fc6e:	3301      	adds	r3, #1
 800fc70:	6033      	str	r3, [r6, #0]
 800fc72:	6823      	ldr	r3, [r4, #0]
 800fc74:	0699      	lsls	r1, r3, #26
 800fc76:	bf42      	ittt	mi
 800fc78:	6833      	ldrmi	r3, [r6, #0]
 800fc7a:	3302      	addmi	r3, #2
 800fc7c:	6033      	strmi	r3, [r6, #0]
 800fc7e:	6825      	ldr	r5, [r4, #0]
 800fc80:	f015 0506 	ands.w	r5, r5, #6
 800fc84:	d106      	bne.n	800fc94 <_printf_common+0x48>
 800fc86:	f104 0a19 	add.w	sl, r4, #25
 800fc8a:	68e3      	ldr	r3, [r4, #12]
 800fc8c:	6832      	ldr	r2, [r6, #0]
 800fc8e:	1a9b      	subs	r3, r3, r2
 800fc90:	42ab      	cmp	r3, r5
 800fc92:	dc26      	bgt.n	800fce2 <_printf_common+0x96>
 800fc94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fc98:	6822      	ldr	r2, [r4, #0]
 800fc9a:	3b00      	subs	r3, #0
 800fc9c:	bf18      	it	ne
 800fc9e:	2301      	movne	r3, #1
 800fca0:	0692      	lsls	r2, r2, #26
 800fca2:	d42b      	bmi.n	800fcfc <_printf_common+0xb0>
 800fca4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fca8:	4641      	mov	r1, r8
 800fcaa:	4638      	mov	r0, r7
 800fcac:	47c8      	blx	r9
 800fcae:	3001      	adds	r0, #1
 800fcb0:	d01e      	beq.n	800fcf0 <_printf_common+0xa4>
 800fcb2:	6823      	ldr	r3, [r4, #0]
 800fcb4:	6922      	ldr	r2, [r4, #16]
 800fcb6:	f003 0306 	and.w	r3, r3, #6
 800fcba:	2b04      	cmp	r3, #4
 800fcbc:	bf02      	ittt	eq
 800fcbe:	68e5      	ldreq	r5, [r4, #12]
 800fcc0:	6833      	ldreq	r3, [r6, #0]
 800fcc2:	1aed      	subeq	r5, r5, r3
 800fcc4:	68a3      	ldr	r3, [r4, #8]
 800fcc6:	bf0c      	ite	eq
 800fcc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fccc:	2500      	movne	r5, #0
 800fcce:	4293      	cmp	r3, r2
 800fcd0:	bfc4      	itt	gt
 800fcd2:	1a9b      	subgt	r3, r3, r2
 800fcd4:	18ed      	addgt	r5, r5, r3
 800fcd6:	2600      	movs	r6, #0
 800fcd8:	341a      	adds	r4, #26
 800fcda:	42b5      	cmp	r5, r6
 800fcdc:	d11a      	bne.n	800fd14 <_printf_common+0xc8>
 800fcde:	2000      	movs	r0, #0
 800fce0:	e008      	b.n	800fcf4 <_printf_common+0xa8>
 800fce2:	2301      	movs	r3, #1
 800fce4:	4652      	mov	r2, sl
 800fce6:	4641      	mov	r1, r8
 800fce8:	4638      	mov	r0, r7
 800fcea:	47c8      	blx	r9
 800fcec:	3001      	adds	r0, #1
 800fcee:	d103      	bne.n	800fcf8 <_printf_common+0xac>
 800fcf0:	f04f 30ff 	mov.w	r0, #4294967295
 800fcf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcf8:	3501      	adds	r5, #1
 800fcfa:	e7c6      	b.n	800fc8a <_printf_common+0x3e>
 800fcfc:	18e1      	adds	r1, r4, r3
 800fcfe:	1c5a      	adds	r2, r3, #1
 800fd00:	2030      	movs	r0, #48	@ 0x30
 800fd02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fd06:	4422      	add	r2, r4
 800fd08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fd0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fd10:	3302      	adds	r3, #2
 800fd12:	e7c7      	b.n	800fca4 <_printf_common+0x58>
 800fd14:	2301      	movs	r3, #1
 800fd16:	4622      	mov	r2, r4
 800fd18:	4641      	mov	r1, r8
 800fd1a:	4638      	mov	r0, r7
 800fd1c:	47c8      	blx	r9
 800fd1e:	3001      	adds	r0, #1
 800fd20:	d0e6      	beq.n	800fcf0 <_printf_common+0xa4>
 800fd22:	3601      	adds	r6, #1
 800fd24:	e7d9      	b.n	800fcda <_printf_common+0x8e>
	...

0800fd28 <_printf_i>:
 800fd28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fd2c:	7e0f      	ldrb	r7, [r1, #24]
 800fd2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fd30:	2f78      	cmp	r7, #120	@ 0x78
 800fd32:	4691      	mov	r9, r2
 800fd34:	4680      	mov	r8, r0
 800fd36:	460c      	mov	r4, r1
 800fd38:	469a      	mov	sl, r3
 800fd3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fd3e:	d807      	bhi.n	800fd50 <_printf_i+0x28>
 800fd40:	2f62      	cmp	r7, #98	@ 0x62
 800fd42:	d80a      	bhi.n	800fd5a <_printf_i+0x32>
 800fd44:	2f00      	cmp	r7, #0
 800fd46:	f000 80d2 	beq.w	800feee <_printf_i+0x1c6>
 800fd4a:	2f58      	cmp	r7, #88	@ 0x58
 800fd4c:	f000 80b9 	beq.w	800fec2 <_printf_i+0x19a>
 800fd50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fd54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fd58:	e03a      	b.n	800fdd0 <_printf_i+0xa8>
 800fd5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fd5e:	2b15      	cmp	r3, #21
 800fd60:	d8f6      	bhi.n	800fd50 <_printf_i+0x28>
 800fd62:	a101      	add	r1, pc, #4	@ (adr r1, 800fd68 <_printf_i+0x40>)
 800fd64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fd68:	0800fdc1 	.word	0x0800fdc1
 800fd6c:	0800fdd5 	.word	0x0800fdd5
 800fd70:	0800fd51 	.word	0x0800fd51
 800fd74:	0800fd51 	.word	0x0800fd51
 800fd78:	0800fd51 	.word	0x0800fd51
 800fd7c:	0800fd51 	.word	0x0800fd51
 800fd80:	0800fdd5 	.word	0x0800fdd5
 800fd84:	0800fd51 	.word	0x0800fd51
 800fd88:	0800fd51 	.word	0x0800fd51
 800fd8c:	0800fd51 	.word	0x0800fd51
 800fd90:	0800fd51 	.word	0x0800fd51
 800fd94:	0800fed5 	.word	0x0800fed5
 800fd98:	0800fdff 	.word	0x0800fdff
 800fd9c:	0800fe8f 	.word	0x0800fe8f
 800fda0:	0800fd51 	.word	0x0800fd51
 800fda4:	0800fd51 	.word	0x0800fd51
 800fda8:	0800fef7 	.word	0x0800fef7
 800fdac:	0800fd51 	.word	0x0800fd51
 800fdb0:	0800fdff 	.word	0x0800fdff
 800fdb4:	0800fd51 	.word	0x0800fd51
 800fdb8:	0800fd51 	.word	0x0800fd51
 800fdbc:	0800fe97 	.word	0x0800fe97
 800fdc0:	6833      	ldr	r3, [r6, #0]
 800fdc2:	1d1a      	adds	r2, r3, #4
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	6032      	str	r2, [r6, #0]
 800fdc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fdcc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fdd0:	2301      	movs	r3, #1
 800fdd2:	e09d      	b.n	800ff10 <_printf_i+0x1e8>
 800fdd4:	6833      	ldr	r3, [r6, #0]
 800fdd6:	6820      	ldr	r0, [r4, #0]
 800fdd8:	1d19      	adds	r1, r3, #4
 800fdda:	6031      	str	r1, [r6, #0]
 800fddc:	0606      	lsls	r6, r0, #24
 800fdde:	d501      	bpl.n	800fde4 <_printf_i+0xbc>
 800fde0:	681d      	ldr	r5, [r3, #0]
 800fde2:	e003      	b.n	800fdec <_printf_i+0xc4>
 800fde4:	0645      	lsls	r5, r0, #25
 800fde6:	d5fb      	bpl.n	800fde0 <_printf_i+0xb8>
 800fde8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fdec:	2d00      	cmp	r5, #0
 800fdee:	da03      	bge.n	800fdf8 <_printf_i+0xd0>
 800fdf0:	232d      	movs	r3, #45	@ 0x2d
 800fdf2:	426d      	negs	r5, r5
 800fdf4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fdf8:	4859      	ldr	r0, [pc, #356]	@ (800ff60 <_printf_i+0x238>)
 800fdfa:	230a      	movs	r3, #10
 800fdfc:	e011      	b.n	800fe22 <_printf_i+0xfa>
 800fdfe:	6821      	ldr	r1, [r4, #0]
 800fe00:	6833      	ldr	r3, [r6, #0]
 800fe02:	0608      	lsls	r0, r1, #24
 800fe04:	f853 5b04 	ldr.w	r5, [r3], #4
 800fe08:	d402      	bmi.n	800fe10 <_printf_i+0xe8>
 800fe0a:	0649      	lsls	r1, r1, #25
 800fe0c:	bf48      	it	mi
 800fe0e:	b2ad      	uxthmi	r5, r5
 800fe10:	2f6f      	cmp	r7, #111	@ 0x6f
 800fe12:	4853      	ldr	r0, [pc, #332]	@ (800ff60 <_printf_i+0x238>)
 800fe14:	6033      	str	r3, [r6, #0]
 800fe16:	bf14      	ite	ne
 800fe18:	230a      	movne	r3, #10
 800fe1a:	2308      	moveq	r3, #8
 800fe1c:	2100      	movs	r1, #0
 800fe1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fe22:	6866      	ldr	r6, [r4, #4]
 800fe24:	60a6      	str	r6, [r4, #8]
 800fe26:	2e00      	cmp	r6, #0
 800fe28:	bfa2      	ittt	ge
 800fe2a:	6821      	ldrge	r1, [r4, #0]
 800fe2c:	f021 0104 	bicge.w	r1, r1, #4
 800fe30:	6021      	strge	r1, [r4, #0]
 800fe32:	b90d      	cbnz	r5, 800fe38 <_printf_i+0x110>
 800fe34:	2e00      	cmp	r6, #0
 800fe36:	d04b      	beq.n	800fed0 <_printf_i+0x1a8>
 800fe38:	4616      	mov	r6, r2
 800fe3a:	fbb5 f1f3 	udiv	r1, r5, r3
 800fe3e:	fb03 5711 	mls	r7, r3, r1, r5
 800fe42:	5dc7      	ldrb	r7, [r0, r7]
 800fe44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fe48:	462f      	mov	r7, r5
 800fe4a:	42bb      	cmp	r3, r7
 800fe4c:	460d      	mov	r5, r1
 800fe4e:	d9f4      	bls.n	800fe3a <_printf_i+0x112>
 800fe50:	2b08      	cmp	r3, #8
 800fe52:	d10b      	bne.n	800fe6c <_printf_i+0x144>
 800fe54:	6823      	ldr	r3, [r4, #0]
 800fe56:	07df      	lsls	r7, r3, #31
 800fe58:	d508      	bpl.n	800fe6c <_printf_i+0x144>
 800fe5a:	6923      	ldr	r3, [r4, #16]
 800fe5c:	6861      	ldr	r1, [r4, #4]
 800fe5e:	4299      	cmp	r1, r3
 800fe60:	bfde      	ittt	le
 800fe62:	2330      	movle	r3, #48	@ 0x30
 800fe64:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fe68:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fe6c:	1b92      	subs	r2, r2, r6
 800fe6e:	6122      	str	r2, [r4, #16]
 800fe70:	f8cd a000 	str.w	sl, [sp]
 800fe74:	464b      	mov	r3, r9
 800fe76:	aa03      	add	r2, sp, #12
 800fe78:	4621      	mov	r1, r4
 800fe7a:	4640      	mov	r0, r8
 800fe7c:	f7ff fee6 	bl	800fc4c <_printf_common>
 800fe80:	3001      	adds	r0, #1
 800fe82:	d14a      	bne.n	800ff1a <_printf_i+0x1f2>
 800fe84:	f04f 30ff 	mov.w	r0, #4294967295
 800fe88:	b004      	add	sp, #16
 800fe8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe8e:	6823      	ldr	r3, [r4, #0]
 800fe90:	f043 0320 	orr.w	r3, r3, #32
 800fe94:	6023      	str	r3, [r4, #0]
 800fe96:	4833      	ldr	r0, [pc, #204]	@ (800ff64 <_printf_i+0x23c>)
 800fe98:	2778      	movs	r7, #120	@ 0x78
 800fe9a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fe9e:	6823      	ldr	r3, [r4, #0]
 800fea0:	6831      	ldr	r1, [r6, #0]
 800fea2:	061f      	lsls	r7, r3, #24
 800fea4:	f851 5b04 	ldr.w	r5, [r1], #4
 800fea8:	d402      	bmi.n	800feb0 <_printf_i+0x188>
 800feaa:	065f      	lsls	r7, r3, #25
 800feac:	bf48      	it	mi
 800feae:	b2ad      	uxthmi	r5, r5
 800feb0:	6031      	str	r1, [r6, #0]
 800feb2:	07d9      	lsls	r1, r3, #31
 800feb4:	bf44      	itt	mi
 800feb6:	f043 0320 	orrmi.w	r3, r3, #32
 800feba:	6023      	strmi	r3, [r4, #0]
 800febc:	b11d      	cbz	r5, 800fec6 <_printf_i+0x19e>
 800febe:	2310      	movs	r3, #16
 800fec0:	e7ac      	b.n	800fe1c <_printf_i+0xf4>
 800fec2:	4827      	ldr	r0, [pc, #156]	@ (800ff60 <_printf_i+0x238>)
 800fec4:	e7e9      	b.n	800fe9a <_printf_i+0x172>
 800fec6:	6823      	ldr	r3, [r4, #0]
 800fec8:	f023 0320 	bic.w	r3, r3, #32
 800fecc:	6023      	str	r3, [r4, #0]
 800fece:	e7f6      	b.n	800febe <_printf_i+0x196>
 800fed0:	4616      	mov	r6, r2
 800fed2:	e7bd      	b.n	800fe50 <_printf_i+0x128>
 800fed4:	6833      	ldr	r3, [r6, #0]
 800fed6:	6825      	ldr	r5, [r4, #0]
 800fed8:	6961      	ldr	r1, [r4, #20]
 800feda:	1d18      	adds	r0, r3, #4
 800fedc:	6030      	str	r0, [r6, #0]
 800fede:	062e      	lsls	r6, r5, #24
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	d501      	bpl.n	800fee8 <_printf_i+0x1c0>
 800fee4:	6019      	str	r1, [r3, #0]
 800fee6:	e002      	b.n	800feee <_printf_i+0x1c6>
 800fee8:	0668      	lsls	r0, r5, #25
 800feea:	d5fb      	bpl.n	800fee4 <_printf_i+0x1bc>
 800feec:	8019      	strh	r1, [r3, #0]
 800feee:	2300      	movs	r3, #0
 800fef0:	6123      	str	r3, [r4, #16]
 800fef2:	4616      	mov	r6, r2
 800fef4:	e7bc      	b.n	800fe70 <_printf_i+0x148>
 800fef6:	6833      	ldr	r3, [r6, #0]
 800fef8:	1d1a      	adds	r2, r3, #4
 800fefa:	6032      	str	r2, [r6, #0]
 800fefc:	681e      	ldr	r6, [r3, #0]
 800fefe:	6862      	ldr	r2, [r4, #4]
 800ff00:	2100      	movs	r1, #0
 800ff02:	4630      	mov	r0, r6
 800ff04:	f7f0 f9ec 	bl	80002e0 <memchr>
 800ff08:	b108      	cbz	r0, 800ff0e <_printf_i+0x1e6>
 800ff0a:	1b80      	subs	r0, r0, r6
 800ff0c:	6060      	str	r0, [r4, #4]
 800ff0e:	6863      	ldr	r3, [r4, #4]
 800ff10:	6123      	str	r3, [r4, #16]
 800ff12:	2300      	movs	r3, #0
 800ff14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ff18:	e7aa      	b.n	800fe70 <_printf_i+0x148>
 800ff1a:	6923      	ldr	r3, [r4, #16]
 800ff1c:	4632      	mov	r2, r6
 800ff1e:	4649      	mov	r1, r9
 800ff20:	4640      	mov	r0, r8
 800ff22:	47d0      	blx	sl
 800ff24:	3001      	adds	r0, #1
 800ff26:	d0ad      	beq.n	800fe84 <_printf_i+0x15c>
 800ff28:	6823      	ldr	r3, [r4, #0]
 800ff2a:	079b      	lsls	r3, r3, #30
 800ff2c:	d413      	bmi.n	800ff56 <_printf_i+0x22e>
 800ff2e:	68e0      	ldr	r0, [r4, #12]
 800ff30:	9b03      	ldr	r3, [sp, #12]
 800ff32:	4298      	cmp	r0, r3
 800ff34:	bfb8      	it	lt
 800ff36:	4618      	movlt	r0, r3
 800ff38:	e7a6      	b.n	800fe88 <_printf_i+0x160>
 800ff3a:	2301      	movs	r3, #1
 800ff3c:	4632      	mov	r2, r6
 800ff3e:	4649      	mov	r1, r9
 800ff40:	4640      	mov	r0, r8
 800ff42:	47d0      	blx	sl
 800ff44:	3001      	adds	r0, #1
 800ff46:	d09d      	beq.n	800fe84 <_printf_i+0x15c>
 800ff48:	3501      	adds	r5, #1
 800ff4a:	68e3      	ldr	r3, [r4, #12]
 800ff4c:	9903      	ldr	r1, [sp, #12]
 800ff4e:	1a5b      	subs	r3, r3, r1
 800ff50:	42ab      	cmp	r3, r5
 800ff52:	dcf2      	bgt.n	800ff3a <_printf_i+0x212>
 800ff54:	e7eb      	b.n	800ff2e <_printf_i+0x206>
 800ff56:	2500      	movs	r5, #0
 800ff58:	f104 0619 	add.w	r6, r4, #25
 800ff5c:	e7f5      	b.n	800ff4a <_printf_i+0x222>
 800ff5e:	bf00      	nop
 800ff60:	080123a6 	.word	0x080123a6
 800ff64:	080123b7 	.word	0x080123b7

0800ff68 <std>:
 800ff68:	2300      	movs	r3, #0
 800ff6a:	b510      	push	{r4, lr}
 800ff6c:	4604      	mov	r4, r0
 800ff6e:	e9c0 3300 	strd	r3, r3, [r0]
 800ff72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ff76:	6083      	str	r3, [r0, #8]
 800ff78:	8181      	strh	r1, [r0, #12]
 800ff7a:	6643      	str	r3, [r0, #100]	@ 0x64
 800ff7c:	81c2      	strh	r2, [r0, #14]
 800ff7e:	6183      	str	r3, [r0, #24]
 800ff80:	4619      	mov	r1, r3
 800ff82:	2208      	movs	r2, #8
 800ff84:	305c      	adds	r0, #92	@ 0x5c
 800ff86:	f000 f914 	bl	80101b2 <memset>
 800ff8a:	4b0d      	ldr	r3, [pc, #52]	@ (800ffc0 <std+0x58>)
 800ff8c:	6263      	str	r3, [r4, #36]	@ 0x24
 800ff8e:	4b0d      	ldr	r3, [pc, #52]	@ (800ffc4 <std+0x5c>)
 800ff90:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ff92:	4b0d      	ldr	r3, [pc, #52]	@ (800ffc8 <std+0x60>)
 800ff94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ff96:	4b0d      	ldr	r3, [pc, #52]	@ (800ffcc <std+0x64>)
 800ff98:	6323      	str	r3, [r4, #48]	@ 0x30
 800ff9a:	4b0d      	ldr	r3, [pc, #52]	@ (800ffd0 <std+0x68>)
 800ff9c:	6224      	str	r4, [r4, #32]
 800ff9e:	429c      	cmp	r4, r3
 800ffa0:	d006      	beq.n	800ffb0 <std+0x48>
 800ffa2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ffa6:	4294      	cmp	r4, r2
 800ffa8:	d002      	beq.n	800ffb0 <std+0x48>
 800ffaa:	33d0      	adds	r3, #208	@ 0xd0
 800ffac:	429c      	cmp	r4, r3
 800ffae:	d105      	bne.n	800ffbc <std+0x54>
 800ffb0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ffb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ffb8:	f000 b978 	b.w	80102ac <__retarget_lock_init_recursive>
 800ffbc:	bd10      	pop	{r4, pc}
 800ffbe:	bf00      	nop
 800ffc0:	0801012d 	.word	0x0801012d
 800ffc4:	0801014f 	.word	0x0801014f
 800ffc8:	08010187 	.word	0x08010187
 800ffcc:	080101ab 	.word	0x080101ab
 800ffd0:	24002498 	.word	0x24002498

0800ffd4 <stdio_exit_handler>:
 800ffd4:	4a02      	ldr	r2, [pc, #8]	@ (800ffe0 <stdio_exit_handler+0xc>)
 800ffd6:	4903      	ldr	r1, [pc, #12]	@ (800ffe4 <stdio_exit_handler+0x10>)
 800ffd8:	4803      	ldr	r0, [pc, #12]	@ (800ffe8 <stdio_exit_handler+0x14>)
 800ffda:	f000 b869 	b.w	80100b0 <_fwalk_sglue>
 800ffde:	bf00      	nop
 800ffe0:	2400012c 	.word	0x2400012c
 800ffe4:	08011b31 	.word	0x08011b31
 800ffe8:	2400013c 	.word	0x2400013c

0800ffec <cleanup_stdio>:
 800ffec:	6841      	ldr	r1, [r0, #4]
 800ffee:	4b0c      	ldr	r3, [pc, #48]	@ (8010020 <cleanup_stdio+0x34>)
 800fff0:	4299      	cmp	r1, r3
 800fff2:	b510      	push	{r4, lr}
 800fff4:	4604      	mov	r4, r0
 800fff6:	d001      	beq.n	800fffc <cleanup_stdio+0x10>
 800fff8:	f001 fd9a 	bl	8011b30 <_fflush_r>
 800fffc:	68a1      	ldr	r1, [r4, #8]
 800fffe:	4b09      	ldr	r3, [pc, #36]	@ (8010024 <cleanup_stdio+0x38>)
 8010000:	4299      	cmp	r1, r3
 8010002:	d002      	beq.n	801000a <cleanup_stdio+0x1e>
 8010004:	4620      	mov	r0, r4
 8010006:	f001 fd93 	bl	8011b30 <_fflush_r>
 801000a:	68e1      	ldr	r1, [r4, #12]
 801000c:	4b06      	ldr	r3, [pc, #24]	@ (8010028 <cleanup_stdio+0x3c>)
 801000e:	4299      	cmp	r1, r3
 8010010:	d004      	beq.n	801001c <cleanup_stdio+0x30>
 8010012:	4620      	mov	r0, r4
 8010014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010018:	f001 bd8a 	b.w	8011b30 <_fflush_r>
 801001c:	bd10      	pop	{r4, pc}
 801001e:	bf00      	nop
 8010020:	24002498 	.word	0x24002498
 8010024:	24002500 	.word	0x24002500
 8010028:	24002568 	.word	0x24002568

0801002c <global_stdio_init.part.0>:
 801002c:	b510      	push	{r4, lr}
 801002e:	4b0b      	ldr	r3, [pc, #44]	@ (801005c <global_stdio_init.part.0+0x30>)
 8010030:	4c0b      	ldr	r4, [pc, #44]	@ (8010060 <global_stdio_init.part.0+0x34>)
 8010032:	4a0c      	ldr	r2, [pc, #48]	@ (8010064 <global_stdio_init.part.0+0x38>)
 8010034:	601a      	str	r2, [r3, #0]
 8010036:	4620      	mov	r0, r4
 8010038:	2200      	movs	r2, #0
 801003a:	2104      	movs	r1, #4
 801003c:	f7ff ff94 	bl	800ff68 <std>
 8010040:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010044:	2201      	movs	r2, #1
 8010046:	2109      	movs	r1, #9
 8010048:	f7ff ff8e 	bl	800ff68 <std>
 801004c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010050:	2202      	movs	r2, #2
 8010052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010056:	2112      	movs	r1, #18
 8010058:	f7ff bf86 	b.w	800ff68 <std>
 801005c:	240025d0 	.word	0x240025d0
 8010060:	24002498 	.word	0x24002498
 8010064:	0800ffd5 	.word	0x0800ffd5

08010068 <__sfp_lock_acquire>:
 8010068:	4801      	ldr	r0, [pc, #4]	@ (8010070 <__sfp_lock_acquire+0x8>)
 801006a:	f000 b920 	b.w	80102ae <__retarget_lock_acquire_recursive>
 801006e:	bf00      	nop
 8010070:	240025d9 	.word	0x240025d9

08010074 <__sfp_lock_release>:
 8010074:	4801      	ldr	r0, [pc, #4]	@ (801007c <__sfp_lock_release+0x8>)
 8010076:	f000 b91b 	b.w	80102b0 <__retarget_lock_release_recursive>
 801007a:	bf00      	nop
 801007c:	240025d9 	.word	0x240025d9

08010080 <__sinit>:
 8010080:	b510      	push	{r4, lr}
 8010082:	4604      	mov	r4, r0
 8010084:	f7ff fff0 	bl	8010068 <__sfp_lock_acquire>
 8010088:	6a23      	ldr	r3, [r4, #32]
 801008a:	b11b      	cbz	r3, 8010094 <__sinit+0x14>
 801008c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010090:	f7ff bff0 	b.w	8010074 <__sfp_lock_release>
 8010094:	4b04      	ldr	r3, [pc, #16]	@ (80100a8 <__sinit+0x28>)
 8010096:	6223      	str	r3, [r4, #32]
 8010098:	4b04      	ldr	r3, [pc, #16]	@ (80100ac <__sinit+0x2c>)
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d1f5      	bne.n	801008c <__sinit+0xc>
 80100a0:	f7ff ffc4 	bl	801002c <global_stdio_init.part.0>
 80100a4:	e7f2      	b.n	801008c <__sinit+0xc>
 80100a6:	bf00      	nop
 80100a8:	0800ffed 	.word	0x0800ffed
 80100ac:	240025d0 	.word	0x240025d0

080100b0 <_fwalk_sglue>:
 80100b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100b4:	4607      	mov	r7, r0
 80100b6:	4688      	mov	r8, r1
 80100b8:	4614      	mov	r4, r2
 80100ba:	2600      	movs	r6, #0
 80100bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80100c0:	f1b9 0901 	subs.w	r9, r9, #1
 80100c4:	d505      	bpl.n	80100d2 <_fwalk_sglue+0x22>
 80100c6:	6824      	ldr	r4, [r4, #0]
 80100c8:	2c00      	cmp	r4, #0
 80100ca:	d1f7      	bne.n	80100bc <_fwalk_sglue+0xc>
 80100cc:	4630      	mov	r0, r6
 80100ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100d2:	89ab      	ldrh	r3, [r5, #12]
 80100d4:	2b01      	cmp	r3, #1
 80100d6:	d907      	bls.n	80100e8 <_fwalk_sglue+0x38>
 80100d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80100dc:	3301      	adds	r3, #1
 80100de:	d003      	beq.n	80100e8 <_fwalk_sglue+0x38>
 80100e0:	4629      	mov	r1, r5
 80100e2:	4638      	mov	r0, r7
 80100e4:	47c0      	blx	r8
 80100e6:	4306      	orrs	r6, r0
 80100e8:	3568      	adds	r5, #104	@ 0x68
 80100ea:	e7e9      	b.n	80100c0 <_fwalk_sglue+0x10>

080100ec <siprintf>:
 80100ec:	b40e      	push	{r1, r2, r3}
 80100ee:	b500      	push	{lr}
 80100f0:	b09c      	sub	sp, #112	@ 0x70
 80100f2:	ab1d      	add	r3, sp, #116	@ 0x74
 80100f4:	9002      	str	r0, [sp, #8]
 80100f6:	9006      	str	r0, [sp, #24]
 80100f8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80100fc:	4809      	ldr	r0, [pc, #36]	@ (8010124 <siprintf+0x38>)
 80100fe:	9107      	str	r1, [sp, #28]
 8010100:	9104      	str	r1, [sp, #16]
 8010102:	4909      	ldr	r1, [pc, #36]	@ (8010128 <siprintf+0x3c>)
 8010104:	f853 2b04 	ldr.w	r2, [r3], #4
 8010108:	9105      	str	r1, [sp, #20]
 801010a:	6800      	ldr	r0, [r0, #0]
 801010c:	9301      	str	r3, [sp, #4]
 801010e:	a902      	add	r1, sp, #8
 8010110:	f001 fb8e 	bl	8011830 <_svfiprintf_r>
 8010114:	9b02      	ldr	r3, [sp, #8]
 8010116:	2200      	movs	r2, #0
 8010118:	701a      	strb	r2, [r3, #0]
 801011a:	b01c      	add	sp, #112	@ 0x70
 801011c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010120:	b003      	add	sp, #12
 8010122:	4770      	bx	lr
 8010124:	24000138 	.word	0x24000138
 8010128:	ffff0208 	.word	0xffff0208

0801012c <__sread>:
 801012c:	b510      	push	{r4, lr}
 801012e:	460c      	mov	r4, r1
 8010130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010134:	f000 f86c 	bl	8010210 <_read_r>
 8010138:	2800      	cmp	r0, #0
 801013a:	bfab      	itete	ge
 801013c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801013e:	89a3      	ldrhlt	r3, [r4, #12]
 8010140:	181b      	addge	r3, r3, r0
 8010142:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010146:	bfac      	ite	ge
 8010148:	6563      	strge	r3, [r4, #84]	@ 0x54
 801014a:	81a3      	strhlt	r3, [r4, #12]
 801014c:	bd10      	pop	{r4, pc}

0801014e <__swrite>:
 801014e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010152:	461f      	mov	r7, r3
 8010154:	898b      	ldrh	r3, [r1, #12]
 8010156:	05db      	lsls	r3, r3, #23
 8010158:	4605      	mov	r5, r0
 801015a:	460c      	mov	r4, r1
 801015c:	4616      	mov	r6, r2
 801015e:	d505      	bpl.n	801016c <__swrite+0x1e>
 8010160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010164:	2302      	movs	r3, #2
 8010166:	2200      	movs	r2, #0
 8010168:	f000 f840 	bl	80101ec <_lseek_r>
 801016c:	89a3      	ldrh	r3, [r4, #12]
 801016e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010172:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010176:	81a3      	strh	r3, [r4, #12]
 8010178:	4632      	mov	r2, r6
 801017a:	463b      	mov	r3, r7
 801017c:	4628      	mov	r0, r5
 801017e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010182:	f000 b857 	b.w	8010234 <_write_r>

08010186 <__sseek>:
 8010186:	b510      	push	{r4, lr}
 8010188:	460c      	mov	r4, r1
 801018a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801018e:	f000 f82d 	bl	80101ec <_lseek_r>
 8010192:	1c43      	adds	r3, r0, #1
 8010194:	89a3      	ldrh	r3, [r4, #12]
 8010196:	bf15      	itete	ne
 8010198:	6560      	strne	r0, [r4, #84]	@ 0x54
 801019a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801019e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80101a2:	81a3      	strheq	r3, [r4, #12]
 80101a4:	bf18      	it	ne
 80101a6:	81a3      	strhne	r3, [r4, #12]
 80101a8:	bd10      	pop	{r4, pc}

080101aa <__sclose>:
 80101aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101ae:	f000 b80d 	b.w	80101cc <_close_r>

080101b2 <memset>:
 80101b2:	4402      	add	r2, r0
 80101b4:	4603      	mov	r3, r0
 80101b6:	4293      	cmp	r3, r2
 80101b8:	d100      	bne.n	80101bc <memset+0xa>
 80101ba:	4770      	bx	lr
 80101bc:	f803 1b01 	strb.w	r1, [r3], #1
 80101c0:	e7f9      	b.n	80101b6 <memset+0x4>
	...

080101c4 <_localeconv_r>:
 80101c4:	4800      	ldr	r0, [pc, #0]	@ (80101c8 <_localeconv_r+0x4>)
 80101c6:	4770      	bx	lr
 80101c8:	24000278 	.word	0x24000278

080101cc <_close_r>:
 80101cc:	b538      	push	{r3, r4, r5, lr}
 80101ce:	4d06      	ldr	r5, [pc, #24]	@ (80101e8 <_close_r+0x1c>)
 80101d0:	2300      	movs	r3, #0
 80101d2:	4604      	mov	r4, r0
 80101d4:	4608      	mov	r0, r1
 80101d6:	602b      	str	r3, [r5, #0]
 80101d8:	f7f1 f9b8 	bl	800154c <_close>
 80101dc:	1c43      	adds	r3, r0, #1
 80101de:	d102      	bne.n	80101e6 <_close_r+0x1a>
 80101e0:	682b      	ldr	r3, [r5, #0]
 80101e2:	b103      	cbz	r3, 80101e6 <_close_r+0x1a>
 80101e4:	6023      	str	r3, [r4, #0]
 80101e6:	bd38      	pop	{r3, r4, r5, pc}
 80101e8:	240025d4 	.word	0x240025d4

080101ec <_lseek_r>:
 80101ec:	b538      	push	{r3, r4, r5, lr}
 80101ee:	4d07      	ldr	r5, [pc, #28]	@ (801020c <_lseek_r+0x20>)
 80101f0:	4604      	mov	r4, r0
 80101f2:	4608      	mov	r0, r1
 80101f4:	4611      	mov	r1, r2
 80101f6:	2200      	movs	r2, #0
 80101f8:	602a      	str	r2, [r5, #0]
 80101fa:	461a      	mov	r2, r3
 80101fc:	f7f1 f9cd 	bl	800159a <_lseek>
 8010200:	1c43      	adds	r3, r0, #1
 8010202:	d102      	bne.n	801020a <_lseek_r+0x1e>
 8010204:	682b      	ldr	r3, [r5, #0]
 8010206:	b103      	cbz	r3, 801020a <_lseek_r+0x1e>
 8010208:	6023      	str	r3, [r4, #0]
 801020a:	bd38      	pop	{r3, r4, r5, pc}
 801020c:	240025d4 	.word	0x240025d4

08010210 <_read_r>:
 8010210:	b538      	push	{r3, r4, r5, lr}
 8010212:	4d07      	ldr	r5, [pc, #28]	@ (8010230 <_read_r+0x20>)
 8010214:	4604      	mov	r4, r0
 8010216:	4608      	mov	r0, r1
 8010218:	4611      	mov	r1, r2
 801021a:	2200      	movs	r2, #0
 801021c:	602a      	str	r2, [r5, #0]
 801021e:	461a      	mov	r2, r3
 8010220:	f7f1 f95b 	bl	80014da <_read>
 8010224:	1c43      	adds	r3, r0, #1
 8010226:	d102      	bne.n	801022e <_read_r+0x1e>
 8010228:	682b      	ldr	r3, [r5, #0]
 801022a:	b103      	cbz	r3, 801022e <_read_r+0x1e>
 801022c:	6023      	str	r3, [r4, #0]
 801022e:	bd38      	pop	{r3, r4, r5, pc}
 8010230:	240025d4 	.word	0x240025d4

08010234 <_write_r>:
 8010234:	b538      	push	{r3, r4, r5, lr}
 8010236:	4d07      	ldr	r5, [pc, #28]	@ (8010254 <_write_r+0x20>)
 8010238:	4604      	mov	r4, r0
 801023a:	4608      	mov	r0, r1
 801023c:	4611      	mov	r1, r2
 801023e:	2200      	movs	r2, #0
 8010240:	602a      	str	r2, [r5, #0]
 8010242:	461a      	mov	r2, r3
 8010244:	f7f1 f966 	bl	8001514 <_write>
 8010248:	1c43      	adds	r3, r0, #1
 801024a:	d102      	bne.n	8010252 <_write_r+0x1e>
 801024c:	682b      	ldr	r3, [r5, #0]
 801024e:	b103      	cbz	r3, 8010252 <_write_r+0x1e>
 8010250:	6023      	str	r3, [r4, #0]
 8010252:	bd38      	pop	{r3, r4, r5, pc}
 8010254:	240025d4 	.word	0x240025d4

08010258 <__errno>:
 8010258:	4b01      	ldr	r3, [pc, #4]	@ (8010260 <__errno+0x8>)
 801025a:	6818      	ldr	r0, [r3, #0]
 801025c:	4770      	bx	lr
 801025e:	bf00      	nop
 8010260:	24000138 	.word	0x24000138

08010264 <__libc_init_array>:
 8010264:	b570      	push	{r4, r5, r6, lr}
 8010266:	4d0d      	ldr	r5, [pc, #52]	@ (801029c <__libc_init_array+0x38>)
 8010268:	4c0d      	ldr	r4, [pc, #52]	@ (80102a0 <__libc_init_array+0x3c>)
 801026a:	1b64      	subs	r4, r4, r5
 801026c:	10a4      	asrs	r4, r4, #2
 801026e:	2600      	movs	r6, #0
 8010270:	42a6      	cmp	r6, r4
 8010272:	d109      	bne.n	8010288 <__libc_init_array+0x24>
 8010274:	4d0b      	ldr	r5, [pc, #44]	@ (80102a4 <__libc_init_array+0x40>)
 8010276:	4c0c      	ldr	r4, [pc, #48]	@ (80102a8 <__libc_init_array+0x44>)
 8010278:	f002 f838 	bl	80122ec <_init>
 801027c:	1b64      	subs	r4, r4, r5
 801027e:	10a4      	asrs	r4, r4, #2
 8010280:	2600      	movs	r6, #0
 8010282:	42a6      	cmp	r6, r4
 8010284:	d105      	bne.n	8010292 <__libc_init_array+0x2e>
 8010286:	bd70      	pop	{r4, r5, r6, pc}
 8010288:	f855 3b04 	ldr.w	r3, [r5], #4
 801028c:	4798      	blx	r3
 801028e:	3601      	adds	r6, #1
 8010290:	e7ee      	b.n	8010270 <__libc_init_array+0xc>
 8010292:	f855 3b04 	ldr.w	r3, [r5], #4
 8010296:	4798      	blx	r3
 8010298:	3601      	adds	r6, #1
 801029a:	e7f2      	b.n	8010282 <__libc_init_array+0x1e>
 801029c:	08012718 	.word	0x08012718
 80102a0:	08012718 	.word	0x08012718
 80102a4:	08012718 	.word	0x08012718
 80102a8:	0801271c 	.word	0x0801271c

080102ac <__retarget_lock_init_recursive>:
 80102ac:	4770      	bx	lr

080102ae <__retarget_lock_acquire_recursive>:
 80102ae:	4770      	bx	lr

080102b0 <__retarget_lock_release_recursive>:
 80102b0:	4770      	bx	lr

080102b2 <quorem>:
 80102b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102b6:	6903      	ldr	r3, [r0, #16]
 80102b8:	690c      	ldr	r4, [r1, #16]
 80102ba:	42a3      	cmp	r3, r4
 80102bc:	4607      	mov	r7, r0
 80102be:	db7e      	blt.n	80103be <quorem+0x10c>
 80102c0:	3c01      	subs	r4, #1
 80102c2:	f101 0814 	add.w	r8, r1, #20
 80102c6:	00a3      	lsls	r3, r4, #2
 80102c8:	f100 0514 	add.w	r5, r0, #20
 80102cc:	9300      	str	r3, [sp, #0]
 80102ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80102d2:	9301      	str	r3, [sp, #4]
 80102d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80102d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80102dc:	3301      	adds	r3, #1
 80102de:	429a      	cmp	r2, r3
 80102e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80102e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80102e8:	d32e      	bcc.n	8010348 <quorem+0x96>
 80102ea:	f04f 0a00 	mov.w	sl, #0
 80102ee:	46c4      	mov	ip, r8
 80102f0:	46ae      	mov	lr, r5
 80102f2:	46d3      	mov	fp, sl
 80102f4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80102f8:	b298      	uxth	r0, r3
 80102fa:	fb06 a000 	mla	r0, r6, r0, sl
 80102fe:	0c02      	lsrs	r2, r0, #16
 8010300:	0c1b      	lsrs	r3, r3, #16
 8010302:	fb06 2303 	mla	r3, r6, r3, r2
 8010306:	f8de 2000 	ldr.w	r2, [lr]
 801030a:	b280      	uxth	r0, r0
 801030c:	b292      	uxth	r2, r2
 801030e:	1a12      	subs	r2, r2, r0
 8010310:	445a      	add	r2, fp
 8010312:	f8de 0000 	ldr.w	r0, [lr]
 8010316:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801031a:	b29b      	uxth	r3, r3
 801031c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010320:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010324:	b292      	uxth	r2, r2
 8010326:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801032a:	45e1      	cmp	r9, ip
 801032c:	f84e 2b04 	str.w	r2, [lr], #4
 8010330:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010334:	d2de      	bcs.n	80102f4 <quorem+0x42>
 8010336:	9b00      	ldr	r3, [sp, #0]
 8010338:	58eb      	ldr	r3, [r5, r3]
 801033a:	b92b      	cbnz	r3, 8010348 <quorem+0x96>
 801033c:	9b01      	ldr	r3, [sp, #4]
 801033e:	3b04      	subs	r3, #4
 8010340:	429d      	cmp	r5, r3
 8010342:	461a      	mov	r2, r3
 8010344:	d32f      	bcc.n	80103a6 <quorem+0xf4>
 8010346:	613c      	str	r4, [r7, #16]
 8010348:	4638      	mov	r0, r7
 801034a:	f001 f90d 	bl	8011568 <__mcmp>
 801034e:	2800      	cmp	r0, #0
 8010350:	db25      	blt.n	801039e <quorem+0xec>
 8010352:	4629      	mov	r1, r5
 8010354:	2000      	movs	r0, #0
 8010356:	f858 2b04 	ldr.w	r2, [r8], #4
 801035a:	f8d1 c000 	ldr.w	ip, [r1]
 801035e:	fa1f fe82 	uxth.w	lr, r2
 8010362:	fa1f f38c 	uxth.w	r3, ip
 8010366:	eba3 030e 	sub.w	r3, r3, lr
 801036a:	4403      	add	r3, r0
 801036c:	0c12      	lsrs	r2, r2, #16
 801036e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010372:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010376:	b29b      	uxth	r3, r3
 8010378:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801037c:	45c1      	cmp	r9, r8
 801037e:	f841 3b04 	str.w	r3, [r1], #4
 8010382:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010386:	d2e6      	bcs.n	8010356 <quorem+0xa4>
 8010388:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801038c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010390:	b922      	cbnz	r2, 801039c <quorem+0xea>
 8010392:	3b04      	subs	r3, #4
 8010394:	429d      	cmp	r5, r3
 8010396:	461a      	mov	r2, r3
 8010398:	d30b      	bcc.n	80103b2 <quorem+0x100>
 801039a:	613c      	str	r4, [r7, #16]
 801039c:	3601      	adds	r6, #1
 801039e:	4630      	mov	r0, r6
 80103a0:	b003      	add	sp, #12
 80103a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103a6:	6812      	ldr	r2, [r2, #0]
 80103a8:	3b04      	subs	r3, #4
 80103aa:	2a00      	cmp	r2, #0
 80103ac:	d1cb      	bne.n	8010346 <quorem+0x94>
 80103ae:	3c01      	subs	r4, #1
 80103b0:	e7c6      	b.n	8010340 <quorem+0x8e>
 80103b2:	6812      	ldr	r2, [r2, #0]
 80103b4:	3b04      	subs	r3, #4
 80103b6:	2a00      	cmp	r2, #0
 80103b8:	d1ef      	bne.n	801039a <quorem+0xe8>
 80103ba:	3c01      	subs	r4, #1
 80103bc:	e7ea      	b.n	8010394 <quorem+0xe2>
 80103be:	2000      	movs	r0, #0
 80103c0:	e7ee      	b.n	80103a0 <quorem+0xee>
 80103c2:	0000      	movs	r0, r0
 80103c4:	0000      	movs	r0, r0
	...

080103c8 <_dtoa_r>:
 80103c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103cc:	ed2d 8b02 	vpush	{d8}
 80103d0:	69c7      	ldr	r7, [r0, #28]
 80103d2:	b091      	sub	sp, #68	@ 0x44
 80103d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80103d8:	ec55 4b10 	vmov	r4, r5, d0
 80103dc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80103de:	9107      	str	r1, [sp, #28]
 80103e0:	4681      	mov	r9, r0
 80103e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80103e4:	930d      	str	r3, [sp, #52]	@ 0x34
 80103e6:	b97f      	cbnz	r7, 8010408 <_dtoa_r+0x40>
 80103e8:	2010      	movs	r0, #16
 80103ea:	f000 fd8d 	bl	8010f08 <malloc>
 80103ee:	4602      	mov	r2, r0
 80103f0:	f8c9 001c 	str.w	r0, [r9, #28]
 80103f4:	b920      	cbnz	r0, 8010400 <_dtoa_r+0x38>
 80103f6:	4ba0      	ldr	r3, [pc, #640]	@ (8010678 <_dtoa_r+0x2b0>)
 80103f8:	21ef      	movs	r1, #239	@ 0xef
 80103fa:	48a0      	ldr	r0, [pc, #640]	@ (801067c <_dtoa_r+0x2b4>)
 80103fc:	f001 fbf8 	bl	8011bf0 <__assert_func>
 8010400:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010404:	6007      	str	r7, [r0, #0]
 8010406:	60c7      	str	r7, [r0, #12]
 8010408:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801040c:	6819      	ldr	r1, [r3, #0]
 801040e:	b159      	cbz	r1, 8010428 <_dtoa_r+0x60>
 8010410:	685a      	ldr	r2, [r3, #4]
 8010412:	604a      	str	r2, [r1, #4]
 8010414:	2301      	movs	r3, #1
 8010416:	4093      	lsls	r3, r2
 8010418:	608b      	str	r3, [r1, #8]
 801041a:	4648      	mov	r0, r9
 801041c:	f000 fe6a 	bl	80110f4 <_Bfree>
 8010420:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010424:	2200      	movs	r2, #0
 8010426:	601a      	str	r2, [r3, #0]
 8010428:	1e2b      	subs	r3, r5, #0
 801042a:	bfbb      	ittet	lt
 801042c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010430:	9303      	strlt	r3, [sp, #12]
 8010432:	2300      	movge	r3, #0
 8010434:	2201      	movlt	r2, #1
 8010436:	bfac      	ite	ge
 8010438:	6033      	strge	r3, [r6, #0]
 801043a:	6032      	strlt	r2, [r6, #0]
 801043c:	4b90      	ldr	r3, [pc, #576]	@ (8010680 <_dtoa_r+0x2b8>)
 801043e:	9e03      	ldr	r6, [sp, #12]
 8010440:	43b3      	bics	r3, r6
 8010442:	d110      	bne.n	8010466 <_dtoa_r+0x9e>
 8010444:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010446:	f242 730f 	movw	r3, #9999	@ 0x270f
 801044a:	6013      	str	r3, [r2, #0]
 801044c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8010450:	4323      	orrs	r3, r4
 8010452:	f000 84de 	beq.w	8010e12 <_dtoa_r+0xa4a>
 8010456:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010458:	4f8a      	ldr	r7, [pc, #552]	@ (8010684 <_dtoa_r+0x2bc>)
 801045a:	2b00      	cmp	r3, #0
 801045c:	f000 84e0 	beq.w	8010e20 <_dtoa_r+0xa58>
 8010460:	1cfb      	adds	r3, r7, #3
 8010462:	f000 bcdb 	b.w	8010e1c <_dtoa_r+0xa54>
 8010466:	ed9d 8b02 	vldr	d8, [sp, #8]
 801046a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801046e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010472:	d10a      	bne.n	801048a <_dtoa_r+0xc2>
 8010474:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010476:	2301      	movs	r3, #1
 8010478:	6013      	str	r3, [r2, #0]
 801047a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801047c:	b113      	cbz	r3, 8010484 <_dtoa_r+0xbc>
 801047e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8010480:	4b81      	ldr	r3, [pc, #516]	@ (8010688 <_dtoa_r+0x2c0>)
 8010482:	6013      	str	r3, [r2, #0]
 8010484:	4f81      	ldr	r7, [pc, #516]	@ (801068c <_dtoa_r+0x2c4>)
 8010486:	f000 bccb 	b.w	8010e20 <_dtoa_r+0xa58>
 801048a:	aa0e      	add	r2, sp, #56	@ 0x38
 801048c:	a90f      	add	r1, sp, #60	@ 0x3c
 801048e:	4648      	mov	r0, r9
 8010490:	eeb0 0b48 	vmov.f64	d0, d8
 8010494:	f001 f918 	bl	80116c8 <__d2b>
 8010498:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801049c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801049e:	9001      	str	r0, [sp, #4]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d045      	beq.n	8010530 <_dtoa_r+0x168>
 80104a4:	eeb0 7b48 	vmov.f64	d7, d8
 80104a8:	ee18 1a90 	vmov	r1, s17
 80104ac:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80104b0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80104b4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80104b8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80104bc:	2500      	movs	r5, #0
 80104be:	ee07 1a90 	vmov	s15, r1
 80104c2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80104c6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8010660 <_dtoa_r+0x298>
 80104ca:	ee37 7b46 	vsub.f64	d7, d7, d6
 80104ce:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8010668 <_dtoa_r+0x2a0>
 80104d2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80104d6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8010670 <_dtoa_r+0x2a8>
 80104da:	ee07 3a90 	vmov	s15, r3
 80104de:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80104e2:	eeb0 7b46 	vmov.f64	d7, d6
 80104e6:	eea4 7b05 	vfma.f64	d7, d4, d5
 80104ea:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80104ee:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80104f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104f6:	ee16 8a90 	vmov	r8, s13
 80104fa:	d508      	bpl.n	801050e <_dtoa_r+0x146>
 80104fc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8010500:	eeb4 6b47 	vcmp.f64	d6, d7
 8010504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010508:	bf18      	it	ne
 801050a:	f108 38ff 	addne.w	r8, r8, #4294967295
 801050e:	f1b8 0f16 	cmp.w	r8, #22
 8010512:	d82b      	bhi.n	801056c <_dtoa_r+0x1a4>
 8010514:	495e      	ldr	r1, [pc, #376]	@ (8010690 <_dtoa_r+0x2c8>)
 8010516:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801051a:	ed91 7b00 	vldr	d7, [r1]
 801051e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010526:	d501      	bpl.n	801052c <_dtoa_r+0x164>
 8010528:	f108 38ff 	add.w	r8, r8, #4294967295
 801052c:	2100      	movs	r1, #0
 801052e:	e01e      	b.n	801056e <_dtoa_r+0x1a6>
 8010530:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010532:	4413      	add	r3, r2
 8010534:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8010538:	2920      	cmp	r1, #32
 801053a:	bfc1      	itttt	gt
 801053c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8010540:	408e      	lslgt	r6, r1
 8010542:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8010546:	fa24 f101 	lsrgt.w	r1, r4, r1
 801054a:	bfd6      	itet	le
 801054c:	f1c1 0120 	rsble	r1, r1, #32
 8010550:	4331      	orrgt	r1, r6
 8010552:	fa04 f101 	lslle.w	r1, r4, r1
 8010556:	ee07 1a90 	vmov	s15, r1
 801055a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801055e:	3b01      	subs	r3, #1
 8010560:	ee17 1a90 	vmov	r1, s15
 8010564:	2501      	movs	r5, #1
 8010566:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801056a:	e7a8      	b.n	80104be <_dtoa_r+0xf6>
 801056c:	2101      	movs	r1, #1
 801056e:	1ad2      	subs	r2, r2, r3
 8010570:	1e53      	subs	r3, r2, #1
 8010572:	9306      	str	r3, [sp, #24]
 8010574:	bf45      	ittet	mi
 8010576:	f1c2 0301 	rsbmi	r3, r2, #1
 801057a:	9305      	strmi	r3, [sp, #20]
 801057c:	2300      	movpl	r3, #0
 801057e:	2300      	movmi	r3, #0
 8010580:	bf4c      	ite	mi
 8010582:	9306      	strmi	r3, [sp, #24]
 8010584:	9305      	strpl	r3, [sp, #20]
 8010586:	f1b8 0f00 	cmp.w	r8, #0
 801058a:	910c      	str	r1, [sp, #48]	@ 0x30
 801058c:	db18      	blt.n	80105c0 <_dtoa_r+0x1f8>
 801058e:	9b06      	ldr	r3, [sp, #24]
 8010590:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8010594:	4443      	add	r3, r8
 8010596:	9306      	str	r3, [sp, #24]
 8010598:	2300      	movs	r3, #0
 801059a:	9a07      	ldr	r2, [sp, #28]
 801059c:	2a09      	cmp	r2, #9
 801059e:	d849      	bhi.n	8010634 <_dtoa_r+0x26c>
 80105a0:	2a05      	cmp	r2, #5
 80105a2:	bfc4      	itt	gt
 80105a4:	3a04      	subgt	r2, #4
 80105a6:	9207      	strgt	r2, [sp, #28]
 80105a8:	9a07      	ldr	r2, [sp, #28]
 80105aa:	f1a2 0202 	sub.w	r2, r2, #2
 80105ae:	bfcc      	ite	gt
 80105b0:	2400      	movgt	r4, #0
 80105b2:	2401      	movle	r4, #1
 80105b4:	2a03      	cmp	r2, #3
 80105b6:	d848      	bhi.n	801064a <_dtoa_r+0x282>
 80105b8:	e8df f002 	tbb	[pc, r2]
 80105bc:	3a2c2e0b 	.word	0x3a2c2e0b
 80105c0:	9b05      	ldr	r3, [sp, #20]
 80105c2:	2200      	movs	r2, #0
 80105c4:	eba3 0308 	sub.w	r3, r3, r8
 80105c8:	9305      	str	r3, [sp, #20]
 80105ca:	920a      	str	r2, [sp, #40]	@ 0x28
 80105cc:	f1c8 0300 	rsb	r3, r8, #0
 80105d0:	e7e3      	b.n	801059a <_dtoa_r+0x1d2>
 80105d2:	2200      	movs	r2, #0
 80105d4:	9208      	str	r2, [sp, #32]
 80105d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80105d8:	2a00      	cmp	r2, #0
 80105da:	dc39      	bgt.n	8010650 <_dtoa_r+0x288>
 80105dc:	f04f 0b01 	mov.w	fp, #1
 80105e0:	46da      	mov	sl, fp
 80105e2:	465a      	mov	r2, fp
 80105e4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80105e8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80105ec:	2100      	movs	r1, #0
 80105ee:	2004      	movs	r0, #4
 80105f0:	f100 0614 	add.w	r6, r0, #20
 80105f4:	4296      	cmp	r6, r2
 80105f6:	d930      	bls.n	801065a <_dtoa_r+0x292>
 80105f8:	6079      	str	r1, [r7, #4]
 80105fa:	4648      	mov	r0, r9
 80105fc:	9304      	str	r3, [sp, #16]
 80105fe:	f000 fd39 	bl	8011074 <_Balloc>
 8010602:	9b04      	ldr	r3, [sp, #16]
 8010604:	4607      	mov	r7, r0
 8010606:	2800      	cmp	r0, #0
 8010608:	d146      	bne.n	8010698 <_dtoa_r+0x2d0>
 801060a:	4b22      	ldr	r3, [pc, #136]	@ (8010694 <_dtoa_r+0x2cc>)
 801060c:	4602      	mov	r2, r0
 801060e:	f240 11af 	movw	r1, #431	@ 0x1af
 8010612:	e6f2      	b.n	80103fa <_dtoa_r+0x32>
 8010614:	2201      	movs	r2, #1
 8010616:	e7dd      	b.n	80105d4 <_dtoa_r+0x20c>
 8010618:	2200      	movs	r2, #0
 801061a:	9208      	str	r2, [sp, #32]
 801061c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801061e:	eb08 0b02 	add.w	fp, r8, r2
 8010622:	f10b 0a01 	add.w	sl, fp, #1
 8010626:	4652      	mov	r2, sl
 8010628:	2a01      	cmp	r2, #1
 801062a:	bfb8      	it	lt
 801062c:	2201      	movlt	r2, #1
 801062e:	e7db      	b.n	80105e8 <_dtoa_r+0x220>
 8010630:	2201      	movs	r2, #1
 8010632:	e7f2      	b.n	801061a <_dtoa_r+0x252>
 8010634:	2401      	movs	r4, #1
 8010636:	2200      	movs	r2, #0
 8010638:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801063c:	f04f 3bff 	mov.w	fp, #4294967295
 8010640:	2100      	movs	r1, #0
 8010642:	46da      	mov	sl, fp
 8010644:	2212      	movs	r2, #18
 8010646:	9109      	str	r1, [sp, #36]	@ 0x24
 8010648:	e7ce      	b.n	80105e8 <_dtoa_r+0x220>
 801064a:	2201      	movs	r2, #1
 801064c:	9208      	str	r2, [sp, #32]
 801064e:	e7f5      	b.n	801063c <_dtoa_r+0x274>
 8010650:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8010654:	46da      	mov	sl, fp
 8010656:	465a      	mov	r2, fp
 8010658:	e7c6      	b.n	80105e8 <_dtoa_r+0x220>
 801065a:	3101      	adds	r1, #1
 801065c:	0040      	lsls	r0, r0, #1
 801065e:	e7c7      	b.n	80105f0 <_dtoa_r+0x228>
 8010660:	636f4361 	.word	0x636f4361
 8010664:	3fd287a7 	.word	0x3fd287a7
 8010668:	8b60c8b3 	.word	0x8b60c8b3
 801066c:	3fc68a28 	.word	0x3fc68a28
 8010670:	509f79fb 	.word	0x509f79fb
 8010674:	3fd34413 	.word	0x3fd34413
 8010678:	080123d5 	.word	0x080123d5
 801067c:	080123ec 	.word	0x080123ec
 8010680:	7ff00000 	.word	0x7ff00000
 8010684:	080123d1 	.word	0x080123d1
 8010688:	080123a5 	.word	0x080123a5
 801068c:	080123a4 	.word	0x080123a4
 8010690:	080124e8 	.word	0x080124e8
 8010694:	08012444 	.word	0x08012444
 8010698:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801069c:	f1ba 0f0e 	cmp.w	sl, #14
 80106a0:	6010      	str	r0, [r2, #0]
 80106a2:	d86f      	bhi.n	8010784 <_dtoa_r+0x3bc>
 80106a4:	2c00      	cmp	r4, #0
 80106a6:	d06d      	beq.n	8010784 <_dtoa_r+0x3bc>
 80106a8:	f1b8 0f00 	cmp.w	r8, #0
 80106ac:	f340 80c2 	ble.w	8010834 <_dtoa_r+0x46c>
 80106b0:	4aca      	ldr	r2, [pc, #808]	@ (80109dc <_dtoa_r+0x614>)
 80106b2:	f008 010f 	and.w	r1, r8, #15
 80106b6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80106ba:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80106be:	ed92 7b00 	vldr	d7, [r2]
 80106c2:	ea4f 1128 	mov.w	r1, r8, asr #4
 80106c6:	f000 80a9 	beq.w	801081c <_dtoa_r+0x454>
 80106ca:	4ac5      	ldr	r2, [pc, #788]	@ (80109e0 <_dtoa_r+0x618>)
 80106cc:	ed92 6b08 	vldr	d6, [r2, #32]
 80106d0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80106d4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80106d8:	f001 010f 	and.w	r1, r1, #15
 80106dc:	2203      	movs	r2, #3
 80106de:	48c0      	ldr	r0, [pc, #768]	@ (80109e0 <_dtoa_r+0x618>)
 80106e0:	2900      	cmp	r1, #0
 80106e2:	f040 809d 	bne.w	8010820 <_dtoa_r+0x458>
 80106e6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80106ea:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80106ee:	ed8d 7b02 	vstr	d7, [sp, #8]
 80106f2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80106f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80106f8:	2900      	cmp	r1, #0
 80106fa:	f000 80c1 	beq.w	8010880 <_dtoa_r+0x4b8>
 80106fe:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8010702:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801070a:	f140 80b9 	bpl.w	8010880 <_dtoa_r+0x4b8>
 801070e:	f1ba 0f00 	cmp.w	sl, #0
 8010712:	f000 80b5 	beq.w	8010880 <_dtoa_r+0x4b8>
 8010716:	f1bb 0f00 	cmp.w	fp, #0
 801071a:	dd31      	ble.n	8010780 <_dtoa_r+0x3b8>
 801071c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8010720:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010724:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010728:	f108 31ff 	add.w	r1, r8, #4294967295
 801072c:	9104      	str	r1, [sp, #16]
 801072e:	3201      	adds	r2, #1
 8010730:	465c      	mov	r4, fp
 8010732:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010736:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801073a:	ee07 2a90 	vmov	s15, r2
 801073e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010742:	eea7 5b06 	vfma.f64	d5, d7, d6
 8010746:	ee15 2a90 	vmov	r2, s11
 801074a:	ec51 0b15 	vmov	r0, r1, d5
 801074e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8010752:	2c00      	cmp	r4, #0
 8010754:	f040 8098 	bne.w	8010888 <_dtoa_r+0x4c0>
 8010758:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801075c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010760:	ec41 0b17 	vmov	d7, r0, r1
 8010764:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801076c:	f300 8261 	bgt.w	8010c32 <_dtoa_r+0x86a>
 8010770:	eeb1 7b47 	vneg.f64	d7, d7
 8010774:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801077c:	f100 80f5 	bmi.w	801096a <_dtoa_r+0x5a2>
 8010780:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010784:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010786:	2a00      	cmp	r2, #0
 8010788:	f2c0 812c 	blt.w	80109e4 <_dtoa_r+0x61c>
 801078c:	f1b8 0f0e 	cmp.w	r8, #14
 8010790:	f300 8128 	bgt.w	80109e4 <_dtoa_r+0x61c>
 8010794:	4b91      	ldr	r3, [pc, #580]	@ (80109dc <_dtoa_r+0x614>)
 8010796:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801079a:	ed93 6b00 	vldr	d6, [r3]
 801079e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	da03      	bge.n	80107ac <_dtoa_r+0x3e4>
 80107a4:	f1ba 0f00 	cmp.w	sl, #0
 80107a8:	f340 80d2 	ble.w	8010950 <_dtoa_r+0x588>
 80107ac:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80107b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80107b4:	463e      	mov	r6, r7
 80107b6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80107ba:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80107be:	ee15 3a10 	vmov	r3, s10
 80107c2:	3330      	adds	r3, #48	@ 0x30
 80107c4:	f806 3b01 	strb.w	r3, [r6], #1
 80107c8:	1bf3      	subs	r3, r6, r7
 80107ca:	459a      	cmp	sl, r3
 80107cc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80107d0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80107d4:	f040 80f8 	bne.w	80109c8 <_dtoa_r+0x600>
 80107d8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80107dc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80107e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107e4:	f300 80dd 	bgt.w	80109a2 <_dtoa_r+0x5da>
 80107e8:	eeb4 7b46 	vcmp.f64	d7, d6
 80107ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107f0:	d104      	bne.n	80107fc <_dtoa_r+0x434>
 80107f2:	ee15 3a10 	vmov	r3, s10
 80107f6:	07db      	lsls	r3, r3, #31
 80107f8:	f100 80d3 	bmi.w	80109a2 <_dtoa_r+0x5da>
 80107fc:	9901      	ldr	r1, [sp, #4]
 80107fe:	4648      	mov	r0, r9
 8010800:	f000 fc78 	bl	80110f4 <_Bfree>
 8010804:	2300      	movs	r3, #0
 8010806:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010808:	7033      	strb	r3, [r6, #0]
 801080a:	f108 0301 	add.w	r3, r8, #1
 801080e:	6013      	str	r3, [r2, #0]
 8010810:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010812:	2b00      	cmp	r3, #0
 8010814:	f000 8304 	beq.w	8010e20 <_dtoa_r+0xa58>
 8010818:	601e      	str	r6, [r3, #0]
 801081a:	e301      	b.n	8010e20 <_dtoa_r+0xa58>
 801081c:	2202      	movs	r2, #2
 801081e:	e75e      	b.n	80106de <_dtoa_r+0x316>
 8010820:	07cc      	lsls	r4, r1, #31
 8010822:	d504      	bpl.n	801082e <_dtoa_r+0x466>
 8010824:	ed90 6b00 	vldr	d6, [r0]
 8010828:	3201      	adds	r2, #1
 801082a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801082e:	1049      	asrs	r1, r1, #1
 8010830:	3008      	adds	r0, #8
 8010832:	e755      	b.n	80106e0 <_dtoa_r+0x318>
 8010834:	d022      	beq.n	801087c <_dtoa_r+0x4b4>
 8010836:	f1c8 0100 	rsb	r1, r8, #0
 801083a:	4a68      	ldr	r2, [pc, #416]	@ (80109dc <_dtoa_r+0x614>)
 801083c:	f001 000f 	and.w	r0, r1, #15
 8010840:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010844:	ed92 7b00 	vldr	d7, [r2]
 8010848:	ee28 7b07 	vmul.f64	d7, d8, d7
 801084c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010850:	4863      	ldr	r0, [pc, #396]	@ (80109e0 <_dtoa_r+0x618>)
 8010852:	1109      	asrs	r1, r1, #4
 8010854:	2400      	movs	r4, #0
 8010856:	2202      	movs	r2, #2
 8010858:	b929      	cbnz	r1, 8010866 <_dtoa_r+0x49e>
 801085a:	2c00      	cmp	r4, #0
 801085c:	f43f af49 	beq.w	80106f2 <_dtoa_r+0x32a>
 8010860:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010864:	e745      	b.n	80106f2 <_dtoa_r+0x32a>
 8010866:	07ce      	lsls	r6, r1, #31
 8010868:	d505      	bpl.n	8010876 <_dtoa_r+0x4ae>
 801086a:	ed90 6b00 	vldr	d6, [r0]
 801086e:	3201      	adds	r2, #1
 8010870:	2401      	movs	r4, #1
 8010872:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010876:	1049      	asrs	r1, r1, #1
 8010878:	3008      	adds	r0, #8
 801087a:	e7ed      	b.n	8010858 <_dtoa_r+0x490>
 801087c:	2202      	movs	r2, #2
 801087e:	e738      	b.n	80106f2 <_dtoa_r+0x32a>
 8010880:	f8cd 8010 	str.w	r8, [sp, #16]
 8010884:	4654      	mov	r4, sl
 8010886:	e754      	b.n	8010732 <_dtoa_r+0x36a>
 8010888:	4a54      	ldr	r2, [pc, #336]	@ (80109dc <_dtoa_r+0x614>)
 801088a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801088e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8010892:	9a08      	ldr	r2, [sp, #32]
 8010894:	ec41 0b17 	vmov	d7, r0, r1
 8010898:	443c      	add	r4, r7
 801089a:	b34a      	cbz	r2, 80108f0 <_dtoa_r+0x528>
 801089c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80108a0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80108a4:	463e      	mov	r6, r7
 80108a6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80108aa:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80108ae:	ee35 7b47 	vsub.f64	d7, d5, d7
 80108b2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80108b6:	ee14 2a90 	vmov	r2, s9
 80108ba:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80108be:	3230      	adds	r2, #48	@ 0x30
 80108c0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80108c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80108c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108cc:	f806 2b01 	strb.w	r2, [r6], #1
 80108d0:	d438      	bmi.n	8010944 <_dtoa_r+0x57c>
 80108d2:	ee32 5b46 	vsub.f64	d5, d2, d6
 80108d6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80108da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108de:	d462      	bmi.n	80109a6 <_dtoa_r+0x5de>
 80108e0:	42a6      	cmp	r6, r4
 80108e2:	f43f af4d 	beq.w	8010780 <_dtoa_r+0x3b8>
 80108e6:	ee27 7b03 	vmul.f64	d7, d7, d3
 80108ea:	ee26 6b03 	vmul.f64	d6, d6, d3
 80108ee:	e7e0      	b.n	80108b2 <_dtoa_r+0x4ea>
 80108f0:	4621      	mov	r1, r4
 80108f2:	463e      	mov	r6, r7
 80108f4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80108f8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80108fc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010900:	ee14 2a90 	vmov	r2, s9
 8010904:	3230      	adds	r2, #48	@ 0x30
 8010906:	f806 2b01 	strb.w	r2, [r6], #1
 801090a:	42a6      	cmp	r6, r4
 801090c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010910:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010914:	d119      	bne.n	801094a <_dtoa_r+0x582>
 8010916:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801091a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801091e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010926:	dc3e      	bgt.n	80109a6 <_dtoa_r+0x5de>
 8010928:	ee35 5b47 	vsub.f64	d5, d5, d7
 801092c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010934:	f57f af24 	bpl.w	8010780 <_dtoa_r+0x3b8>
 8010938:	460e      	mov	r6, r1
 801093a:	3901      	subs	r1, #1
 801093c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010940:	2b30      	cmp	r3, #48	@ 0x30
 8010942:	d0f9      	beq.n	8010938 <_dtoa_r+0x570>
 8010944:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010948:	e758      	b.n	80107fc <_dtoa_r+0x434>
 801094a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801094e:	e7d5      	b.n	80108fc <_dtoa_r+0x534>
 8010950:	d10b      	bne.n	801096a <_dtoa_r+0x5a2>
 8010952:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8010956:	ee26 6b07 	vmul.f64	d6, d6, d7
 801095a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801095e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010966:	f2c0 8161 	blt.w	8010c2c <_dtoa_r+0x864>
 801096a:	2400      	movs	r4, #0
 801096c:	4625      	mov	r5, r4
 801096e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010970:	43db      	mvns	r3, r3
 8010972:	9304      	str	r3, [sp, #16]
 8010974:	463e      	mov	r6, r7
 8010976:	f04f 0800 	mov.w	r8, #0
 801097a:	4621      	mov	r1, r4
 801097c:	4648      	mov	r0, r9
 801097e:	f000 fbb9 	bl	80110f4 <_Bfree>
 8010982:	2d00      	cmp	r5, #0
 8010984:	d0de      	beq.n	8010944 <_dtoa_r+0x57c>
 8010986:	f1b8 0f00 	cmp.w	r8, #0
 801098a:	d005      	beq.n	8010998 <_dtoa_r+0x5d0>
 801098c:	45a8      	cmp	r8, r5
 801098e:	d003      	beq.n	8010998 <_dtoa_r+0x5d0>
 8010990:	4641      	mov	r1, r8
 8010992:	4648      	mov	r0, r9
 8010994:	f000 fbae 	bl	80110f4 <_Bfree>
 8010998:	4629      	mov	r1, r5
 801099a:	4648      	mov	r0, r9
 801099c:	f000 fbaa 	bl	80110f4 <_Bfree>
 80109a0:	e7d0      	b.n	8010944 <_dtoa_r+0x57c>
 80109a2:	f8cd 8010 	str.w	r8, [sp, #16]
 80109a6:	4633      	mov	r3, r6
 80109a8:	461e      	mov	r6, r3
 80109aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80109ae:	2a39      	cmp	r2, #57	@ 0x39
 80109b0:	d106      	bne.n	80109c0 <_dtoa_r+0x5f8>
 80109b2:	429f      	cmp	r7, r3
 80109b4:	d1f8      	bne.n	80109a8 <_dtoa_r+0x5e0>
 80109b6:	9a04      	ldr	r2, [sp, #16]
 80109b8:	3201      	adds	r2, #1
 80109ba:	9204      	str	r2, [sp, #16]
 80109bc:	2230      	movs	r2, #48	@ 0x30
 80109be:	703a      	strb	r2, [r7, #0]
 80109c0:	781a      	ldrb	r2, [r3, #0]
 80109c2:	3201      	adds	r2, #1
 80109c4:	701a      	strb	r2, [r3, #0]
 80109c6:	e7bd      	b.n	8010944 <_dtoa_r+0x57c>
 80109c8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80109cc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80109d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109d4:	f47f aeef 	bne.w	80107b6 <_dtoa_r+0x3ee>
 80109d8:	e710      	b.n	80107fc <_dtoa_r+0x434>
 80109da:	bf00      	nop
 80109dc:	080124e8 	.word	0x080124e8
 80109e0:	080124c0 	.word	0x080124c0
 80109e4:	9908      	ldr	r1, [sp, #32]
 80109e6:	2900      	cmp	r1, #0
 80109e8:	f000 80e3 	beq.w	8010bb2 <_dtoa_r+0x7ea>
 80109ec:	9907      	ldr	r1, [sp, #28]
 80109ee:	2901      	cmp	r1, #1
 80109f0:	f300 80c8 	bgt.w	8010b84 <_dtoa_r+0x7bc>
 80109f4:	2d00      	cmp	r5, #0
 80109f6:	f000 80c1 	beq.w	8010b7c <_dtoa_r+0x7b4>
 80109fa:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80109fe:	9e05      	ldr	r6, [sp, #20]
 8010a00:	461c      	mov	r4, r3
 8010a02:	9304      	str	r3, [sp, #16]
 8010a04:	9b05      	ldr	r3, [sp, #20]
 8010a06:	4413      	add	r3, r2
 8010a08:	9305      	str	r3, [sp, #20]
 8010a0a:	9b06      	ldr	r3, [sp, #24]
 8010a0c:	2101      	movs	r1, #1
 8010a0e:	4413      	add	r3, r2
 8010a10:	4648      	mov	r0, r9
 8010a12:	9306      	str	r3, [sp, #24]
 8010a14:	f000 fc22 	bl	801125c <__i2b>
 8010a18:	9b04      	ldr	r3, [sp, #16]
 8010a1a:	4605      	mov	r5, r0
 8010a1c:	b166      	cbz	r6, 8010a38 <_dtoa_r+0x670>
 8010a1e:	9a06      	ldr	r2, [sp, #24]
 8010a20:	2a00      	cmp	r2, #0
 8010a22:	dd09      	ble.n	8010a38 <_dtoa_r+0x670>
 8010a24:	42b2      	cmp	r2, r6
 8010a26:	9905      	ldr	r1, [sp, #20]
 8010a28:	bfa8      	it	ge
 8010a2a:	4632      	movge	r2, r6
 8010a2c:	1a89      	subs	r1, r1, r2
 8010a2e:	9105      	str	r1, [sp, #20]
 8010a30:	9906      	ldr	r1, [sp, #24]
 8010a32:	1ab6      	subs	r6, r6, r2
 8010a34:	1a8a      	subs	r2, r1, r2
 8010a36:	9206      	str	r2, [sp, #24]
 8010a38:	b1fb      	cbz	r3, 8010a7a <_dtoa_r+0x6b2>
 8010a3a:	9a08      	ldr	r2, [sp, #32]
 8010a3c:	2a00      	cmp	r2, #0
 8010a3e:	f000 80bc 	beq.w	8010bba <_dtoa_r+0x7f2>
 8010a42:	b19c      	cbz	r4, 8010a6c <_dtoa_r+0x6a4>
 8010a44:	4629      	mov	r1, r5
 8010a46:	4622      	mov	r2, r4
 8010a48:	4648      	mov	r0, r9
 8010a4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010a4c:	f000 fcc6 	bl	80113dc <__pow5mult>
 8010a50:	9a01      	ldr	r2, [sp, #4]
 8010a52:	4601      	mov	r1, r0
 8010a54:	4605      	mov	r5, r0
 8010a56:	4648      	mov	r0, r9
 8010a58:	f000 fc16 	bl	8011288 <__multiply>
 8010a5c:	9901      	ldr	r1, [sp, #4]
 8010a5e:	9004      	str	r0, [sp, #16]
 8010a60:	4648      	mov	r0, r9
 8010a62:	f000 fb47 	bl	80110f4 <_Bfree>
 8010a66:	9a04      	ldr	r2, [sp, #16]
 8010a68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010a6a:	9201      	str	r2, [sp, #4]
 8010a6c:	1b1a      	subs	r2, r3, r4
 8010a6e:	d004      	beq.n	8010a7a <_dtoa_r+0x6b2>
 8010a70:	9901      	ldr	r1, [sp, #4]
 8010a72:	4648      	mov	r0, r9
 8010a74:	f000 fcb2 	bl	80113dc <__pow5mult>
 8010a78:	9001      	str	r0, [sp, #4]
 8010a7a:	2101      	movs	r1, #1
 8010a7c:	4648      	mov	r0, r9
 8010a7e:	f000 fbed 	bl	801125c <__i2b>
 8010a82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a84:	4604      	mov	r4, r0
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	f000 81d0 	beq.w	8010e2c <_dtoa_r+0xa64>
 8010a8c:	461a      	mov	r2, r3
 8010a8e:	4601      	mov	r1, r0
 8010a90:	4648      	mov	r0, r9
 8010a92:	f000 fca3 	bl	80113dc <__pow5mult>
 8010a96:	9b07      	ldr	r3, [sp, #28]
 8010a98:	2b01      	cmp	r3, #1
 8010a9a:	4604      	mov	r4, r0
 8010a9c:	f300 8095 	bgt.w	8010bca <_dtoa_r+0x802>
 8010aa0:	9b02      	ldr	r3, [sp, #8]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	f040 808b 	bne.w	8010bbe <_dtoa_r+0x7f6>
 8010aa8:	9b03      	ldr	r3, [sp, #12]
 8010aaa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8010aae:	2a00      	cmp	r2, #0
 8010ab0:	f040 8087 	bne.w	8010bc2 <_dtoa_r+0x7fa>
 8010ab4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8010ab8:	0d12      	lsrs	r2, r2, #20
 8010aba:	0512      	lsls	r2, r2, #20
 8010abc:	2a00      	cmp	r2, #0
 8010abe:	f000 8082 	beq.w	8010bc6 <_dtoa_r+0x7fe>
 8010ac2:	9b05      	ldr	r3, [sp, #20]
 8010ac4:	3301      	adds	r3, #1
 8010ac6:	9305      	str	r3, [sp, #20]
 8010ac8:	9b06      	ldr	r3, [sp, #24]
 8010aca:	3301      	adds	r3, #1
 8010acc:	9306      	str	r3, [sp, #24]
 8010ace:	2301      	movs	r3, #1
 8010ad0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010ad2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	f000 81af 	beq.w	8010e38 <_dtoa_r+0xa70>
 8010ada:	6922      	ldr	r2, [r4, #16]
 8010adc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010ae0:	6910      	ldr	r0, [r2, #16]
 8010ae2:	f000 fb6f 	bl	80111c4 <__hi0bits>
 8010ae6:	f1c0 0020 	rsb	r0, r0, #32
 8010aea:	9b06      	ldr	r3, [sp, #24]
 8010aec:	4418      	add	r0, r3
 8010aee:	f010 001f 	ands.w	r0, r0, #31
 8010af2:	d076      	beq.n	8010be2 <_dtoa_r+0x81a>
 8010af4:	f1c0 0220 	rsb	r2, r0, #32
 8010af8:	2a04      	cmp	r2, #4
 8010afa:	dd69      	ble.n	8010bd0 <_dtoa_r+0x808>
 8010afc:	9b05      	ldr	r3, [sp, #20]
 8010afe:	f1c0 001c 	rsb	r0, r0, #28
 8010b02:	4403      	add	r3, r0
 8010b04:	9305      	str	r3, [sp, #20]
 8010b06:	9b06      	ldr	r3, [sp, #24]
 8010b08:	4406      	add	r6, r0
 8010b0a:	4403      	add	r3, r0
 8010b0c:	9306      	str	r3, [sp, #24]
 8010b0e:	9b05      	ldr	r3, [sp, #20]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	dd05      	ble.n	8010b20 <_dtoa_r+0x758>
 8010b14:	9901      	ldr	r1, [sp, #4]
 8010b16:	461a      	mov	r2, r3
 8010b18:	4648      	mov	r0, r9
 8010b1a:	f000 fcb9 	bl	8011490 <__lshift>
 8010b1e:	9001      	str	r0, [sp, #4]
 8010b20:	9b06      	ldr	r3, [sp, #24]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	dd05      	ble.n	8010b32 <_dtoa_r+0x76a>
 8010b26:	4621      	mov	r1, r4
 8010b28:	461a      	mov	r2, r3
 8010b2a:	4648      	mov	r0, r9
 8010b2c:	f000 fcb0 	bl	8011490 <__lshift>
 8010b30:	4604      	mov	r4, r0
 8010b32:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d056      	beq.n	8010be6 <_dtoa_r+0x81e>
 8010b38:	9801      	ldr	r0, [sp, #4]
 8010b3a:	4621      	mov	r1, r4
 8010b3c:	f000 fd14 	bl	8011568 <__mcmp>
 8010b40:	2800      	cmp	r0, #0
 8010b42:	da50      	bge.n	8010be6 <_dtoa_r+0x81e>
 8010b44:	f108 33ff 	add.w	r3, r8, #4294967295
 8010b48:	9304      	str	r3, [sp, #16]
 8010b4a:	9901      	ldr	r1, [sp, #4]
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	220a      	movs	r2, #10
 8010b50:	4648      	mov	r0, r9
 8010b52:	f000 faf1 	bl	8011138 <__multadd>
 8010b56:	9b08      	ldr	r3, [sp, #32]
 8010b58:	9001      	str	r0, [sp, #4]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	f000 816e 	beq.w	8010e3c <_dtoa_r+0xa74>
 8010b60:	4629      	mov	r1, r5
 8010b62:	2300      	movs	r3, #0
 8010b64:	220a      	movs	r2, #10
 8010b66:	4648      	mov	r0, r9
 8010b68:	f000 fae6 	bl	8011138 <__multadd>
 8010b6c:	f1bb 0f00 	cmp.w	fp, #0
 8010b70:	4605      	mov	r5, r0
 8010b72:	dc64      	bgt.n	8010c3e <_dtoa_r+0x876>
 8010b74:	9b07      	ldr	r3, [sp, #28]
 8010b76:	2b02      	cmp	r3, #2
 8010b78:	dc3e      	bgt.n	8010bf8 <_dtoa_r+0x830>
 8010b7a:	e060      	b.n	8010c3e <_dtoa_r+0x876>
 8010b7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010b7e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010b82:	e73c      	b.n	80109fe <_dtoa_r+0x636>
 8010b84:	f10a 34ff 	add.w	r4, sl, #4294967295
 8010b88:	42a3      	cmp	r3, r4
 8010b8a:	bfbf      	itttt	lt
 8010b8c:	1ae2      	sublt	r2, r4, r3
 8010b8e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010b90:	189b      	addlt	r3, r3, r2
 8010b92:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8010b94:	bfae      	itee	ge
 8010b96:	1b1c      	subge	r4, r3, r4
 8010b98:	4623      	movlt	r3, r4
 8010b9a:	2400      	movlt	r4, #0
 8010b9c:	f1ba 0f00 	cmp.w	sl, #0
 8010ba0:	bfb5      	itete	lt
 8010ba2:	9a05      	ldrlt	r2, [sp, #20]
 8010ba4:	9e05      	ldrge	r6, [sp, #20]
 8010ba6:	eba2 060a 	sublt.w	r6, r2, sl
 8010baa:	4652      	movge	r2, sl
 8010bac:	bfb8      	it	lt
 8010bae:	2200      	movlt	r2, #0
 8010bb0:	e727      	b.n	8010a02 <_dtoa_r+0x63a>
 8010bb2:	9e05      	ldr	r6, [sp, #20]
 8010bb4:	9d08      	ldr	r5, [sp, #32]
 8010bb6:	461c      	mov	r4, r3
 8010bb8:	e730      	b.n	8010a1c <_dtoa_r+0x654>
 8010bba:	461a      	mov	r2, r3
 8010bbc:	e758      	b.n	8010a70 <_dtoa_r+0x6a8>
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	e786      	b.n	8010ad0 <_dtoa_r+0x708>
 8010bc2:	9b02      	ldr	r3, [sp, #8]
 8010bc4:	e784      	b.n	8010ad0 <_dtoa_r+0x708>
 8010bc6:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010bc8:	e783      	b.n	8010ad2 <_dtoa_r+0x70a>
 8010bca:	2300      	movs	r3, #0
 8010bcc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010bce:	e784      	b.n	8010ada <_dtoa_r+0x712>
 8010bd0:	d09d      	beq.n	8010b0e <_dtoa_r+0x746>
 8010bd2:	9b05      	ldr	r3, [sp, #20]
 8010bd4:	321c      	adds	r2, #28
 8010bd6:	4413      	add	r3, r2
 8010bd8:	9305      	str	r3, [sp, #20]
 8010bda:	9b06      	ldr	r3, [sp, #24]
 8010bdc:	4416      	add	r6, r2
 8010bde:	4413      	add	r3, r2
 8010be0:	e794      	b.n	8010b0c <_dtoa_r+0x744>
 8010be2:	4602      	mov	r2, r0
 8010be4:	e7f5      	b.n	8010bd2 <_dtoa_r+0x80a>
 8010be6:	f1ba 0f00 	cmp.w	sl, #0
 8010bea:	f8cd 8010 	str.w	r8, [sp, #16]
 8010bee:	46d3      	mov	fp, sl
 8010bf0:	dc21      	bgt.n	8010c36 <_dtoa_r+0x86e>
 8010bf2:	9b07      	ldr	r3, [sp, #28]
 8010bf4:	2b02      	cmp	r3, #2
 8010bf6:	dd1e      	ble.n	8010c36 <_dtoa_r+0x86e>
 8010bf8:	f1bb 0f00 	cmp.w	fp, #0
 8010bfc:	f47f aeb7 	bne.w	801096e <_dtoa_r+0x5a6>
 8010c00:	4621      	mov	r1, r4
 8010c02:	465b      	mov	r3, fp
 8010c04:	2205      	movs	r2, #5
 8010c06:	4648      	mov	r0, r9
 8010c08:	f000 fa96 	bl	8011138 <__multadd>
 8010c0c:	4601      	mov	r1, r0
 8010c0e:	4604      	mov	r4, r0
 8010c10:	9801      	ldr	r0, [sp, #4]
 8010c12:	f000 fca9 	bl	8011568 <__mcmp>
 8010c16:	2800      	cmp	r0, #0
 8010c18:	f77f aea9 	ble.w	801096e <_dtoa_r+0x5a6>
 8010c1c:	463e      	mov	r6, r7
 8010c1e:	2331      	movs	r3, #49	@ 0x31
 8010c20:	f806 3b01 	strb.w	r3, [r6], #1
 8010c24:	9b04      	ldr	r3, [sp, #16]
 8010c26:	3301      	adds	r3, #1
 8010c28:	9304      	str	r3, [sp, #16]
 8010c2a:	e6a4      	b.n	8010976 <_dtoa_r+0x5ae>
 8010c2c:	f8cd 8010 	str.w	r8, [sp, #16]
 8010c30:	4654      	mov	r4, sl
 8010c32:	4625      	mov	r5, r4
 8010c34:	e7f2      	b.n	8010c1c <_dtoa_r+0x854>
 8010c36:	9b08      	ldr	r3, [sp, #32]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	f000 8103 	beq.w	8010e44 <_dtoa_r+0xa7c>
 8010c3e:	2e00      	cmp	r6, #0
 8010c40:	dd05      	ble.n	8010c4e <_dtoa_r+0x886>
 8010c42:	4629      	mov	r1, r5
 8010c44:	4632      	mov	r2, r6
 8010c46:	4648      	mov	r0, r9
 8010c48:	f000 fc22 	bl	8011490 <__lshift>
 8010c4c:	4605      	mov	r5, r0
 8010c4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d058      	beq.n	8010d06 <_dtoa_r+0x93e>
 8010c54:	6869      	ldr	r1, [r5, #4]
 8010c56:	4648      	mov	r0, r9
 8010c58:	f000 fa0c 	bl	8011074 <_Balloc>
 8010c5c:	4606      	mov	r6, r0
 8010c5e:	b928      	cbnz	r0, 8010c6c <_dtoa_r+0x8a4>
 8010c60:	4b82      	ldr	r3, [pc, #520]	@ (8010e6c <_dtoa_r+0xaa4>)
 8010c62:	4602      	mov	r2, r0
 8010c64:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010c68:	f7ff bbc7 	b.w	80103fa <_dtoa_r+0x32>
 8010c6c:	692a      	ldr	r2, [r5, #16]
 8010c6e:	3202      	adds	r2, #2
 8010c70:	0092      	lsls	r2, r2, #2
 8010c72:	f105 010c 	add.w	r1, r5, #12
 8010c76:	300c      	adds	r0, #12
 8010c78:	f000 ffac 	bl	8011bd4 <memcpy>
 8010c7c:	2201      	movs	r2, #1
 8010c7e:	4631      	mov	r1, r6
 8010c80:	4648      	mov	r0, r9
 8010c82:	f000 fc05 	bl	8011490 <__lshift>
 8010c86:	1c7b      	adds	r3, r7, #1
 8010c88:	9305      	str	r3, [sp, #20]
 8010c8a:	eb07 030b 	add.w	r3, r7, fp
 8010c8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c90:	9b02      	ldr	r3, [sp, #8]
 8010c92:	f003 0301 	and.w	r3, r3, #1
 8010c96:	46a8      	mov	r8, r5
 8010c98:	9308      	str	r3, [sp, #32]
 8010c9a:	4605      	mov	r5, r0
 8010c9c:	9b05      	ldr	r3, [sp, #20]
 8010c9e:	9801      	ldr	r0, [sp, #4]
 8010ca0:	4621      	mov	r1, r4
 8010ca2:	f103 3bff 	add.w	fp, r3, #4294967295
 8010ca6:	f7ff fb04 	bl	80102b2 <quorem>
 8010caa:	4641      	mov	r1, r8
 8010cac:	9002      	str	r0, [sp, #8]
 8010cae:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010cb2:	9801      	ldr	r0, [sp, #4]
 8010cb4:	f000 fc58 	bl	8011568 <__mcmp>
 8010cb8:	462a      	mov	r2, r5
 8010cba:	9006      	str	r0, [sp, #24]
 8010cbc:	4621      	mov	r1, r4
 8010cbe:	4648      	mov	r0, r9
 8010cc0:	f000 fc6e 	bl	80115a0 <__mdiff>
 8010cc4:	68c2      	ldr	r2, [r0, #12]
 8010cc6:	4606      	mov	r6, r0
 8010cc8:	b9fa      	cbnz	r2, 8010d0a <_dtoa_r+0x942>
 8010cca:	4601      	mov	r1, r0
 8010ccc:	9801      	ldr	r0, [sp, #4]
 8010cce:	f000 fc4b 	bl	8011568 <__mcmp>
 8010cd2:	4602      	mov	r2, r0
 8010cd4:	4631      	mov	r1, r6
 8010cd6:	4648      	mov	r0, r9
 8010cd8:	920a      	str	r2, [sp, #40]	@ 0x28
 8010cda:	f000 fa0b 	bl	80110f4 <_Bfree>
 8010cde:	9b07      	ldr	r3, [sp, #28]
 8010ce0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010ce2:	9e05      	ldr	r6, [sp, #20]
 8010ce4:	ea43 0102 	orr.w	r1, r3, r2
 8010ce8:	9b08      	ldr	r3, [sp, #32]
 8010cea:	4319      	orrs	r1, r3
 8010cec:	d10f      	bne.n	8010d0e <_dtoa_r+0x946>
 8010cee:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010cf2:	d028      	beq.n	8010d46 <_dtoa_r+0x97e>
 8010cf4:	9b06      	ldr	r3, [sp, #24]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	dd02      	ble.n	8010d00 <_dtoa_r+0x938>
 8010cfa:	9b02      	ldr	r3, [sp, #8]
 8010cfc:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8010d00:	f88b a000 	strb.w	sl, [fp]
 8010d04:	e639      	b.n	801097a <_dtoa_r+0x5b2>
 8010d06:	4628      	mov	r0, r5
 8010d08:	e7bd      	b.n	8010c86 <_dtoa_r+0x8be>
 8010d0a:	2201      	movs	r2, #1
 8010d0c:	e7e2      	b.n	8010cd4 <_dtoa_r+0x90c>
 8010d0e:	9b06      	ldr	r3, [sp, #24]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	db04      	blt.n	8010d1e <_dtoa_r+0x956>
 8010d14:	9907      	ldr	r1, [sp, #28]
 8010d16:	430b      	orrs	r3, r1
 8010d18:	9908      	ldr	r1, [sp, #32]
 8010d1a:	430b      	orrs	r3, r1
 8010d1c:	d120      	bne.n	8010d60 <_dtoa_r+0x998>
 8010d1e:	2a00      	cmp	r2, #0
 8010d20:	ddee      	ble.n	8010d00 <_dtoa_r+0x938>
 8010d22:	9901      	ldr	r1, [sp, #4]
 8010d24:	2201      	movs	r2, #1
 8010d26:	4648      	mov	r0, r9
 8010d28:	f000 fbb2 	bl	8011490 <__lshift>
 8010d2c:	4621      	mov	r1, r4
 8010d2e:	9001      	str	r0, [sp, #4]
 8010d30:	f000 fc1a 	bl	8011568 <__mcmp>
 8010d34:	2800      	cmp	r0, #0
 8010d36:	dc03      	bgt.n	8010d40 <_dtoa_r+0x978>
 8010d38:	d1e2      	bne.n	8010d00 <_dtoa_r+0x938>
 8010d3a:	f01a 0f01 	tst.w	sl, #1
 8010d3e:	d0df      	beq.n	8010d00 <_dtoa_r+0x938>
 8010d40:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010d44:	d1d9      	bne.n	8010cfa <_dtoa_r+0x932>
 8010d46:	2339      	movs	r3, #57	@ 0x39
 8010d48:	f88b 3000 	strb.w	r3, [fp]
 8010d4c:	4633      	mov	r3, r6
 8010d4e:	461e      	mov	r6, r3
 8010d50:	3b01      	subs	r3, #1
 8010d52:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010d56:	2a39      	cmp	r2, #57	@ 0x39
 8010d58:	d053      	beq.n	8010e02 <_dtoa_r+0xa3a>
 8010d5a:	3201      	adds	r2, #1
 8010d5c:	701a      	strb	r2, [r3, #0]
 8010d5e:	e60c      	b.n	801097a <_dtoa_r+0x5b2>
 8010d60:	2a00      	cmp	r2, #0
 8010d62:	dd07      	ble.n	8010d74 <_dtoa_r+0x9ac>
 8010d64:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010d68:	d0ed      	beq.n	8010d46 <_dtoa_r+0x97e>
 8010d6a:	f10a 0301 	add.w	r3, sl, #1
 8010d6e:	f88b 3000 	strb.w	r3, [fp]
 8010d72:	e602      	b.n	801097a <_dtoa_r+0x5b2>
 8010d74:	9b05      	ldr	r3, [sp, #20]
 8010d76:	9a05      	ldr	r2, [sp, #20]
 8010d78:	f803 ac01 	strb.w	sl, [r3, #-1]
 8010d7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d7e:	4293      	cmp	r3, r2
 8010d80:	d029      	beq.n	8010dd6 <_dtoa_r+0xa0e>
 8010d82:	9901      	ldr	r1, [sp, #4]
 8010d84:	2300      	movs	r3, #0
 8010d86:	220a      	movs	r2, #10
 8010d88:	4648      	mov	r0, r9
 8010d8a:	f000 f9d5 	bl	8011138 <__multadd>
 8010d8e:	45a8      	cmp	r8, r5
 8010d90:	9001      	str	r0, [sp, #4]
 8010d92:	f04f 0300 	mov.w	r3, #0
 8010d96:	f04f 020a 	mov.w	r2, #10
 8010d9a:	4641      	mov	r1, r8
 8010d9c:	4648      	mov	r0, r9
 8010d9e:	d107      	bne.n	8010db0 <_dtoa_r+0x9e8>
 8010da0:	f000 f9ca 	bl	8011138 <__multadd>
 8010da4:	4680      	mov	r8, r0
 8010da6:	4605      	mov	r5, r0
 8010da8:	9b05      	ldr	r3, [sp, #20]
 8010daa:	3301      	adds	r3, #1
 8010dac:	9305      	str	r3, [sp, #20]
 8010dae:	e775      	b.n	8010c9c <_dtoa_r+0x8d4>
 8010db0:	f000 f9c2 	bl	8011138 <__multadd>
 8010db4:	4629      	mov	r1, r5
 8010db6:	4680      	mov	r8, r0
 8010db8:	2300      	movs	r3, #0
 8010dba:	220a      	movs	r2, #10
 8010dbc:	4648      	mov	r0, r9
 8010dbe:	f000 f9bb 	bl	8011138 <__multadd>
 8010dc2:	4605      	mov	r5, r0
 8010dc4:	e7f0      	b.n	8010da8 <_dtoa_r+0x9e0>
 8010dc6:	f1bb 0f00 	cmp.w	fp, #0
 8010dca:	bfcc      	ite	gt
 8010dcc:	465e      	movgt	r6, fp
 8010dce:	2601      	movle	r6, #1
 8010dd0:	443e      	add	r6, r7
 8010dd2:	f04f 0800 	mov.w	r8, #0
 8010dd6:	9901      	ldr	r1, [sp, #4]
 8010dd8:	2201      	movs	r2, #1
 8010dda:	4648      	mov	r0, r9
 8010ddc:	f000 fb58 	bl	8011490 <__lshift>
 8010de0:	4621      	mov	r1, r4
 8010de2:	9001      	str	r0, [sp, #4]
 8010de4:	f000 fbc0 	bl	8011568 <__mcmp>
 8010de8:	2800      	cmp	r0, #0
 8010dea:	dcaf      	bgt.n	8010d4c <_dtoa_r+0x984>
 8010dec:	d102      	bne.n	8010df4 <_dtoa_r+0xa2c>
 8010dee:	f01a 0f01 	tst.w	sl, #1
 8010df2:	d1ab      	bne.n	8010d4c <_dtoa_r+0x984>
 8010df4:	4633      	mov	r3, r6
 8010df6:	461e      	mov	r6, r3
 8010df8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010dfc:	2a30      	cmp	r2, #48	@ 0x30
 8010dfe:	d0fa      	beq.n	8010df6 <_dtoa_r+0xa2e>
 8010e00:	e5bb      	b.n	801097a <_dtoa_r+0x5b2>
 8010e02:	429f      	cmp	r7, r3
 8010e04:	d1a3      	bne.n	8010d4e <_dtoa_r+0x986>
 8010e06:	9b04      	ldr	r3, [sp, #16]
 8010e08:	3301      	adds	r3, #1
 8010e0a:	9304      	str	r3, [sp, #16]
 8010e0c:	2331      	movs	r3, #49	@ 0x31
 8010e0e:	703b      	strb	r3, [r7, #0]
 8010e10:	e5b3      	b.n	801097a <_dtoa_r+0x5b2>
 8010e12:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010e14:	4f16      	ldr	r7, [pc, #88]	@ (8010e70 <_dtoa_r+0xaa8>)
 8010e16:	b11b      	cbz	r3, 8010e20 <_dtoa_r+0xa58>
 8010e18:	f107 0308 	add.w	r3, r7, #8
 8010e1c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8010e1e:	6013      	str	r3, [r2, #0]
 8010e20:	4638      	mov	r0, r7
 8010e22:	b011      	add	sp, #68	@ 0x44
 8010e24:	ecbd 8b02 	vpop	{d8}
 8010e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e2c:	9b07      	ldr	r3, [sp, #28]
 8010e2e:	2b01      	cmp	r3, #1
 8010e30:	f77f ae36 	ble.w	8010aa0 <_dtoa_r+0x6d8>
 8010e34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010e36:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010e38:	2001      	movs	r0, #1
 8010e3a:	e656      	b.n	8010aea <_dtoa_r+0x722>
 8010e3c:	f1bb 0f00 	cmp.w	fp, #0
 8010e40:	f77f aed7 	ble.w	8010bf2 <_dtoa_r+0x82a>
 8010e44:	463e      	mov	r6, r7
 8010e46:	9801      	ldr	r0, [sp, #4]
 8010e48:	4621      	mov	r1, r4
 8010e4a:	f7ff fa32 	bl	80102b2 <quorem>
 8010e4e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010e52:	f806 ab01 	strb.w	sl, [r6], #1
 8010e56:	1bf2      	subs	r2, r6, r7
 8010e58:	4593      	cmp	fp, r2
 8010e5a:	ddb4      	ble.n	8010dc6 <_dtoa_r+0x9fe>
 8010e5c:	9901      	ldr	r1, [sp, #4]
 8010e5e:	2300      	movs	r3, #0
 8010e60:	220a      	movs	r2, #10
 8010e62:	4648      	mov	r0, r9
 8010e64:	f000 f968 	bl	8011138 <__multadd>
 8010e68:	9001      	str	r0, [sp, #4]
 8010e6a:	e7ec      	b.n	8010e46 <_dtoa_r+0xa7e>
 8010e6c:	08012444 	.word	0x08012444
 8010e70:	080123c8 	.word	0x080123c8

08010e74 <_free_r>:
 8010e74:	b538      	push	{r3, r4, r5, lr}
 8010e76:	4605      	mov	r5, r0
 8010e78:	2900      	cmp	r1, #0
 8010e7a:	d041      	beq.n	8010f00 <_free_r+0x8c>
 8010e7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010e80:	1f0c      	subs	r4, r1, #4
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	bfb8      	it	lt
 8010e86:	18e4      	addlt	r4, r4, r3
 8010e88:	f000 f8e8 	bl	801105c <__malloc_lock>
 8010e8c:	4a1d      	ldr	r2, [pc, #116]	@ (8010f04 <_free_r+0x90>)
 8010e8e:	6813      	ldr	r3, [r2, #0]
 8010e90:	b933      	cbnz	r3, 8010ea0 <_free_r+0x2c>
 8010e92:	6063      	str	r3, [r4, #4]
 8010e94:	6014      	str	r4, [r2, #0]
 8010e96:	4628      	mov	r0, r5
 8010e98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e9c:	f000 b8e4 	b.w	8011068 <__malloc_unlock>
 8010ea0:	42a3      	cmp	r3, r4
 8010ea2:	d908      	bls.n	8010eb6 <_free_r+0x42>
 8010ea4:	6820      	ldr	r0, [r4, #0]
 8010ea6:	1821      	adds	r1, r4, r0
 8010ea8:	428b      	cmp	r3, r1
 8010eaa:	bf01      	itttt	eq
 8010eac:	6819      	ldreq	r1, [r3, #0]
 8010eae:	685b      	ldreq	r3, [r3, #4]
 8010eb0:	1809      	addeq	r1, r1, r0
 8010eb2:	6021      	streq	r1, [r4, #0]
 8010eb4:	e7ed      	b.n	8010e92 <_free_r+0x1e>
 8010eb6:	461a      	mov	r2, r3
 8010eb8:	685b      	ldr	r3, [r3, #4]
 8010eba:	b10b      	cbz	r3, 8010ec0 <_free_r+0x4c>
 8010ebc:	42a3      	cmp	r3, r4
 8010ebe:	d9fa      	bls.n	8010eb6 <_free_r+0x42>
 8010ec0:	6811      	ldr	r1, [r2, #0]
 8010ec2:	1850      	adds	r0, r2, r1
 8010ec4:	42a0      	cmp	r0, r4
 8010ec6:	d10b      	bne.n	8010ee0 <_free_r+0x6c>
 8010ec8:	6820      	ldr	r0, [r4, #0]
 8010eca:	4401      	add	r1, r0
 8010ecc:	1850      	adds	r0, r2, r1
 8010ece:	4283      	cmp	r3, r0
 8010ed0:	6011      	str	r1, [r2, #0]
 8010ed2:	d1e0      	bne.n	8010e96 <_free_r+0x22>
 8010ed4:	6818      	ldr	r0, [r3, #0]
 8010ed6:	685b      	ldr	r3, [r3, #4]
 8010ed8:	6053      	str	r3, [r2, #4]
 8010eda:	4408      	add	r0, r1
 8010edc:	6010      	str	r0, [r2, #0]
 8010ede:	e7da      	b.n	8010e96 <_free_r+0x22>
 8010ee0:	d902      	bls.n	8010ee8 <_free_r+0x74>
 8010ee2:	230c      	movs	r3, #12
 8010ee4:	602b      	str	r3, [r5, #0]
 8010ee6:	e7d6      	b.n	8010e96 <_free_r+0x22>
 8010ee8:	6820      	ldr	r0, [r4, #0]
 8010eea:	1821      	adds	r1, r4, r0
 8010eec:	428b      	cmp	r3, r1
 8010eee:	bf04      	itt	eq
 8010ef0:	6819      	ldreq	r1, [r3, #0]
 8010ef2:	685b      	ldreq	r3, [r3, #4]
 8010ef4:	6063      	str	r3, [r4, #4]
 8010ef6:	bf04      	itt	eq
 8010ef8:	1809      	addeq	r1, r1, r0
 8010efa:	6021      	streq	r1, [r4, #0]
 8010efc:	6054      	str	r4, [r2, #4]
 8010efe:	e7ca      	b.n	8010e96 <_free_r+0x22>
 8010f00:	bd38      	pop	{r3, r4, r5, pc}
 8010f02:	bf00      	nop
 8010f04:	240025e0 	.word	0x240025e0

08010f08 <malloc>:
 8010f08:	4b02      	ldr	r3, [pc, #8]	@ (8010f14 <malloc+0xc>)
 8010f0a:	4601      	mov	r1, r0
 8010f0c:	6818      	ldr	r0, [r3, #0]
 8010f0e:	f000 b825 	b.w	8010f5c <_malloc_r>
 8010f12:	bf00      	nop
 8010f14:	24000138 	.word	0x24000138

08010f18 <sbrk_aligned>:
 8010f18:	b570      	push	{r4, r5, r6, lr}
 8010f1a:	4e0f      	ldr	r6, [pc, #60]	@ (8010f58 <sbrk_aligned+0x40>)
 8010f1c:	460c      	mov	r4, r1
 8010f1e:	6831      	ldr	r1, [r6, #0]
 8010f20:	4605      	mov	r5, r0
 8010f22:	b911      	cbnz	r1, 8010f2a <sbrk_aligned+0x12>
 8010f24:	f000 fe46 	bl	8011bb4 <_sbrk_r>
 8010f28:	6030      	str	r0, [r6, #0]
 8010f2a:	4621      	mov	r1, r4
 8010f2c:	4628      	mov	r0, r5
 8010f2e:	f000 fe41 	bl	8011bb4 <_sbrk_r>
 8010f32:	1c43      	adds	r3, r0, #1
 8010f34:	d103      	bne.n	8010f3e <sbrk_aligned+0x26>
 8010f36:	f04f 34ff 	mov.w	r4, #4294967295
 8010f3a:	4620      	mov	r0, r4
 8010f3c:	bd70      	pop	{r4, r5, r6, pc}
 8010f3e:	1cc4      	adds	r4, r0, #3
 8010f40:	f024 0403 	bic.w	r4, r4, #3
 8010f44:	42a0      	cmp	r0, r4
 8010f46:	d0f8      	beq.n	8010f3a <sbrk_aligned+0x22>
 8010f48:	1a21      	subs	r1, r4, r0
 8010f4a:	4628      	mov	r0, r5
 8010f4c:	f000 fe32 	bl	8011bb4 <_sbrk_r>
 8010f50:	3001      	adds	r0, #1
 8010f52:	d1f2      	bne.n	8010f3a <sbrk_aligned+0x22>
 8010f54:	e7ef      	b.n	8010f36 <sbrk_aligned+0x1e>
 8010f56:	bf00      	nop
 8010f58:	240025dc 	.word	0x240025dc

08010f5c <_malloc_r>:
 8010f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f60:	1ccd      	adds	r5, r1, #3
 8010f62:	f025 0503 	bic.w	r5, r5, #3
 8010f66:	3508      	adds	r5, #8
 8010f68:	2d0c      	cmp	r5, #12
 8010f6a:	bf38      	it	cc
 8010f6c:	250c      	movcc	r5, #12
 8010f6e:	2d00      	cmp	r5, #0
 8010f70:	4606      	mov	r6, r0
 8010f72:	db01      	blt.n	8010f78 <_malloc_r+0x1c>
 8010f74:	42a9      	cmp	r1, r5
 8010f76:	d904      	bls.n	8010f82 <_malloc_r+0x26>
 8010f78:	230c      	movs	r3, #12
 8010f7a:	6033      	str	r3, [r6, #0]
 8010f7c:	2000      	movs	r0, #0
 8010f7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011058 <_malloc_r+0xfc>
 8010f86:	f000 f869 	bl	801105c <__malloc_lock>
 8010f8a:	f8d8 3000 	ldr.w	r3, [r8]
 8010f8e:	461c      	mov	r4, r3
 8010f90:	bb44      	cbnz	r4, 8010fe4 <_malloc_r+0x88>
 8010f92:	4629      	mov	r1, r5
 8010f94:	4630      	mov	r0, r6
 8010f96:	f7ff ffbf 	bl	8010f18 <sbrk_aligned>
 8010f9a:	1c43      	adds	r3, r0, #1
 8010f9c:	4604      	mov	r4, r0
 8010f9e:	d158      	bne.n	8011052 <_malloc_r+0xf6>
 8010fa0:	f8d8 4000 	ldr.w	r4, [r8]
 8010fa4:	4627      	mov	r7, r4
 8010fa6:	2f00      	cmp	r7, #0
 8010fa8:	d143      	bne.n	8011032 <_malloc_r+0xd6>
 8010faa:	2c00      	cmp	r4, #0
 8010fac:	d04b      	beq.n	8011046 <_malloc_r+0xea>
 8010fae:	6823      	ldr	r3, [r4, #0]
 8010fb0:	4639      	mov	r1, r7
 8010fb2:	4630      	mov	r0, r6
 8010fb4:	eb04 0903 	add.w	r9, r4, r3
 8010fb8:	f000 fdfc 	bl	8011bb4 <_sbrk_r>
 8010fbc:	4581      	cmp	r9, r0
 8010fbe:	d142      	bne.n	8011046 <_malloc_r+0xea>
 8010fc0:	6821      	ldr	r1, [r4, #0]
 8010fc2:	1a6d      	subs	r5, r5, r1
 8010fc4:	4629      	mov	r1, r5
 8010fc6:	4630      	mov	r0, r6
 8010fc8:	f7ff ffa6 	bl	8010f18 <sbrk_aligned>
 8010fcc:	3001      	adds	r0, #1
 8010fce:	d03a      	beq.n	8011046 <_malloc_r+0xea>
 8010fd0:	6823      	ldr	r3, [r4, #0]
 8010fd2:	442b      	add	r3, r5
 8010fd4:	6023      	str	r3, [r4, #0]
 8010fd6:	f8d8 3000 	ldr.w	r3, [r8]
 8010fda:	685a      	ldr	r2, [r3, #4]
 8010fdc:	bb62      	cbnz	r2, 8011038 <_malloc_r+0xdc>
 8010fde:	f8c8 7000 	str.w	r7, [r8]
 8010fe2:	e00f      	b.n	8011004 <_malloc_r+0xa8>
 8010fe4:	6822      	ldr	r2, [r4, #0]
 8010fe6:	1b52      	subs	r2, r2, r5
 8010fe8:	d420      	bmi.n	801102c <_malloc_r+0xd0>
 8010fea:	2a0b      	cmp	r2, #11
 8010fec:	d917      	bls.n	801101e <_malloc_r+0xc2>
 8010fee:	1961      	adds	r1, r4, r5
 8010ff0:	42a3      	cmp	r3, r4
 8010ff2:	6025      	str	r5, [r4, #0]
 8010ff4:	bf18      	it	ne
 8010ff6:	6059      	strne	r1, [r3, #4]
 8010ff8:	6863      	ldr	r3, [r4, #4]
 8010ffa:	bf08      	it	eq
 8010ffc:	f8c8 1000 	streq.w	r1, [r8]
 8011000:	5162      	str	r2, [r4, r5]
 8011002:	604b      	str	r3, [r1, #4]
 8011004:	4630      	mov	r0, r6
 8011006:	f000 f82f 	bl	8011068 <__malloc_unlock>
 801100a:	f104 000b 	add.w	r0, r4, #11
 801100e:	1d23      	adds	r3, r4, #4
 8011010:	f020 0007 	bic.w	r0, r0, #7
 8011014:	1ac2      	subs	r2, r0, r3
 8011016:	bf1c      	itt	ne
 8011018:	1a1b      	subne	r3, r3, r0
 801101a:	50a3      	strne	r3, [r4, r2]
 801101c:	e7af      	b.n	8010f7e <_malloc_r+0x22>
 801101e:	6862      	ldr	r2, [r4, #4]
 8011020:	42a3      	cmp	r3, r4
 8011022:	bf0c      	ite	eq
 8011024:	f8c8 2000 	streq.w	r2, [r8]
 8011028:	605a      	strne	r2, [r3, #4]
 801102a:	e7eb      	b.n	8011004 <_malloc_r+0xa8>
 801102c:	4623      	mov	r3, r4
 801102e:	6864      	ldr	r4, [r4, #4]
 8011030:	e7ae      	b.n	8010f90 <_malloc_r+0x34>
 8011032:	463c      	mov	r4, r7
 8011034:	687f      	ldr	r7, [r7, #4]
 8011036:	e7b6      	b.n	8010fa6 <_malloc_r+0x4a>
 8011038:	461a      	mov	r2, r3
 801103a:	685b      	ldr	r3, [r3, #4]
 801103c:	42a3      	cmp	r3, r4
 801103e:	d1fb      	bne.n	8011038 <_malloc_r+0xdc>
 8011040:	2300      	movs	r3, #0
 8011042:	6053      	str	r3, [r2, #4]
 8011044:	e7de      	b.n	8011004 <_malloc_r+0xa8>
 8011046:	230c      	movs	r3, #12
 8011048:	6033      	str	r3, [r6, #0]
 801104a:	4630      	mov	r0, r6
 801104c:	f000 f80c 	bl	8011068 <__malloc_unlock>
 8011050:	e794      	b.n	8010f7c <_malloc_r+0x20>
 8011052:	6005      	str	r5, [r0, #0]
 8011054:	e7d6      	b.n	8011004 <_malloc_r+0xa8>
 8011056:	bf00      	nop
 8011058:	240025e0 	.word	0x240025e0

0801105c <__malloc_lock>:
 801105c:	4801      	ldr	r0, [pc, #4]	@ (8011064 <__malloc_lock+0x8>)
 801105e:	f7ff b926 	b.w	80102ae <__retarget_lock_acquire_recursive>
 8011062:	bf00      	nop
 8011064:	240025d8 	.word	0x240025d8

08011068 <__malloc_unlock>:
 8011068:	4801      	ldr	r0, [pc, #4]	@ (8011070 <__malloc_unlock+0x8>)
 801106a:	f7ff b921 	b.w	80102b0 <__retarget_lock_release_recursive>
 801106e:	bf00      	nop
 8011070:	240025d8 	.word	0x240025d8

08011074 <_Balloc>:
 8011074:	b570      	push	{r4, r5, r6, lr}
 8011076:	69c6      	ldr	r6, [r0, #28]
 8011078:	4604      	mov	r4, r0
 801107a:	460d      	mov	r5, r1
 801107c:	b976      	cbnz	r6, 801109c <_Balloc+0x28>
 801107e:	2010      	movs	r0, #16
 8011080:	f7ff ff42 	bl	8010f08 <malloc>
 8011084:	4602      	mov	r2, r0
 8011086:	61e0      	str	r0, [r4, #28]
 8011088:	b920      	cbnz	r0, 8011094 <_Balloc+0x20>
 801108a:	4b18      	ldr	r3, [pc, #96]	@ (80110ec <_Balloc+0x78>)
 801108c:	4818      	ldr	r0, [pc, #96]	@ (80110f0 <_Balloc+0x7c>)
 801108e:	216b      	movs	r1, #107	@ 0x6b
 8011090:	f000 fdae 	bl	8011bf0 <__assert_func>
 8011094:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011098:	6006      	str	r6, [r0, #0]
 801109a:	60c6      	str	r6, [r0, #12]
 801109c:	69e6      	ldr	r6, [r4, #28]
 801109e:	68f3      	ldr	r3, [r6, #12]
 80110a0:	b183      	cbz	r3, 80110c4 <_Balloc+0x50>
 80110a2:	69e3      	ldr	r3, [r4, #28]
 80110a4:	68db      	ldr	r3, [r3, #12]
 80110a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80110aa:	b9b8      	cbnz	r0, 80110dc <_Balloc+0x68>
 80110ac:	2101      	movs	r1, #1
 80110ae:	fa01 f605 	lsl.w	r6, r1, r5
 80110b2:	1d72      	adds	r2, r6, #5
 80110b4:	0092      	lsls	r2, r2, #2
 80110b6:	4620      	mov	r0, r4
 80110b8:	f000 fdb8 	bl	8011c2c <_calloc_r>
 80110bc:	b160      	cbz	r0, 80110d8 <_Balloc+0x64>
 80110be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80110c2:	e00e      	b.n	80110e2 <_Balloc+0x6e>
 80110c4:	2221      	movs	r2, #33	@ 0x21
 80110c6:	2104      	movs	r1, #4
 80110c8:	4620      	mov	r0, r4
 80110ca:	f000 fdaf 	bl	8011c2c <_calloc_r>
 80110ce:	69e3      	ldr	r3, [r4, #28]
 80110d0:	60f0      	str	r0, [r6, #12]
 80110d2:	68db      	ldr	r3, [r3, #12]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d1e4      	bne.n	80110a2 <_Balloc+0x2e>
 80110d8:	2000      	movs	r0, #0
 80110da:	bd70      	pop	{r4, r5, r6, pc}
 80110dc:	6802      	ldr	r2, [r0, #0]
 80110de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80110e2:	2300      	movs	r3, #0
 80110e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80110e8:	e7f7      	b.n	80110da <_Balloc+0x66>
 80110ea:	bf00      	nop
 80110ec:	080123d5 	.word	0x080123d5
 80110f0:	08012455 	.word	0x08012455

080110f4 <_Bfree>:
 80110f4:	b570      	push	{r4, r5, r6, lr}
 80110f6:	69c6      	ldr	r6, [r0, #28]
 80110f8:	4605      	mov	r5, r0
 80110fa:	460c      	mov	r4, r1
 80110fc:	b976      	cbnz	r6, 801111c <_Bfree+0x28>
 80110fe:	2010      	movs	r0, #16
 8011100:	f7ff ff02 	bl	8010f08 <malloc>
 8011104:	4602      	mov	r2, r0
 8011106:	61e8      	str	r0, [r5, #28]
 8011108:	b920      	cbnz	r0, 8011114 <_Bfree+0x20>
 801110a:	4b09      	ldr	r3, [pc, #36]	@ (8011130 <_Bfree+0x3c>)
 801110c:	4809      	ldr	r0, [pc, #36]	@ (8011134 <_Bfree+0x40>)
 801110e:	218f      	movs	r1, #143	@ 0x8f
 8011110:	f000 fd6e 	bl	8011bf0 <__assert_func>
 8011114:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011118:	6006      	str	r6, [r0, #0]
 801111a:	60c6      	str	r6, [r0, #12]
 801111c:	b13c      	cbz	r4, 801112e <_Bfree+0x3a>
 801111e:	69eb      	ldr	r3, [r5, #28]
 8011120:	6862      	ldr	r2, [r4, #4]
 8011122:	68db      	ldr	r3, [r3, #12]
 8011124:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011128:	6021      	str	r1, [r4, #0]
 801112a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801112e:	bd70      	pop	{r4, r5, r6, pc}
 8011130:	080123d5 	.word	0x080123d5
 8011134:	08012455 	.word	0x08012455

08011138 <__multadd>:
 8011138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801113c:	690d      	ldr	r5, [r1, #16]
 801113e:	4607      	mov	r7, r0
 8011140:	460c      	mov	r4, r1
 8011142:	461e      	mov	r6, r3
 8011144:	f101 0c14 	add.w	ip, r1, #20
 8011148:	2000      	movs	r0, #0
 801114a:	f8dc 3000 	ldr.w	r3, [ip]
 801114e:	b299      	uxth	r1, r3
 8011150:	fb02 6101 	mla	r1, r2, r1, r6
 8011154:	0c1e      	lsrs	r6, r3, #16
 8011156:	0c0b      	lsrs	r3, r1, #16
 8011158:	fb02 3306 	mla	r3, r2, r6, r3
 801115c:	b289      	uxth	r1, r1
 801115e:	3001      	adds	r0, #1
 8011160:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011164:	4285      	cmp	r5, r0
 8011166:	f84c 1b04 	str.w	r1, [ip], #4
 801116a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801116e:	dcec      	bgt.n	801114a <__multadd+0x12>
 8011170:	b30e      	cbz	r6, 80111b6 <__multadd+0x7e>
 8011172:	68a3      	ldr	r3, [r4, #8]
 8011174:	42ab      	cmp	r3, r5
 8011176:	dc19      	bgt.n	80111ac <__multadd+0x74>
 8011178:	6861      	ldr	r1, [r4, #4]
 801117a:	4638      	mov	r0, r7
 801117c:	3101      	adds	r1, #1
 801117e:	f7ff ff79 	bl	8011074 <_Balloc>
 8011182:	4680      	mov	r8, r0
 8011184:	b928      	cbnz	r0, 8011192 <__multadd+0x5a>
 8011186:	4602      	mov	r2, r0
 8011188:	4b0c      	ldr	r3, [pc, #48]	@ (80111bc <__multadd+0x84>)
 801118a:	480d      	ldr	r0, [pc, #52]	@ (80111c0 <__multadd+0x88>)
 801118c:	21ba      	movs	r1, #186	@ 0xba
 801118e:	f000 fd2f 	bl	8011bf0 <__assert_func>
 8011192:	6922      	ldr	r2, [r4, #16]
 8011194:	3202      	adds	r2, #2
 8011196:	f104 010c 	add.w	r1, r4, #12
 801119a:	0092      	lsls	r2, r2, #2
 801119c:	300c      	adds	r0, #12
 801119e:	f000 fd19 	bl	8011bd4 <memcpy>
 80111a2:	4621      	mov	r1, r4
 80111a4:	4638      	mov	r0, r7
 80111a6:	f7ff ffa5 	bl	80110f4 <_Bfree>
 80111aa:	4644      	mov	r4, r8
 80111ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80111b0:	3501      	adds	r5, #1
 80111b2:	615e      	str	r6, [r3, #20]
 80111b4:	6125      	str	r5, [r4, #16]
 80111b6:	4620      	mov	r0, r4
 80111b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111bc:	08012444 	.word	0x08012444
 80111c0:	08012455 	.word	0x08012455

080111c4 <__hi0bits>:
 80111c4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80111c8:	4603      	mov	r3, r0
 80111ca:	bf36      	itet	cc
 80111cc:	0403      	lslcc	r3, r0, #16
 80111ce:	2000      	movcs	r0, #0
 80111d0:	2010      	movcc	r0, #16
 80111d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80111d6:	bf3c      	itt	cc
 80111d8:	021b      	lslcc	r3, r3, #8
 80111da:	3008      	addcc	r0, #8
 80111dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80111e0:	bf3c      	itt	cc
 80111e2:	011b      	lslcc	r3, r3, #4
 80111e4:	3004      	addcc	r0, #4
 80111e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80111ea:	bf3c      	itt	cc
 80111ec:	009b      	lslcc	r3, r3, #2
 80111ee:	3002      	addcc	r0, #2
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	db05      	blt.n	8011200 <__hi0bits+0x3c>
 80111f4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80111f8:	f100 0001 	add.w	r0, r0, #1
 80111fc:	bf08      	it	eq
 80111fe:	2020      	moveq	r0, #32
 8011200:	4770      	bx	lr

08011202 <__lo0bits>:
 8011202:	6803      	ldr	r3, [r0, #0]
 8011204:	4602      	mov	r2, r0
 8011206:	f013 0007 	ands.w	r0, r3, #7
 801120a:	d00b      	beq.n	8011224 <__lo0bits+0x22>
 801120c:	07d9      	lsls	r1, r3, #31
 801120e:	d421      	bmi.n	8011254 <__lo0bits+0x52>
 8011210:	0798      	lsls	r0, r3, #30
 8011212:	bf49      	itett	mi
 8011214:	085b      	lsrmi	r3, r3, #1
 8011216:	089b      	lsrpl	r3, r3, #2
 8011218:	2001      	movmi	r0, #1
 801121a:	6013      	strmi	r3, [r2, #0]
 801121c:	bf5c      	itt	pl
 801121e:	6013      	strpl	r3, [r2, #0]
 8011220:	2002      	movpl	r0, #2
 8011222:	4770      	bx	lr
 8011224:	b299      	uxth	r1, r3
 8011226:	b909      	cbnz	r1, 801122c <__lo0bits+0x2a>
 8011228:	0c1b      	lsrs	r3, r3, #16
 801122a:	2010      	movs	r0, #16
 801122c:	b2d9      	uxtb	r1, r3
 801122e:	b909      	cbnz	r1, 8011234 <__lo0bits+0x32>
 8011230:	3008      	adds	r0, #8
 8011232:	0a1b      	lsrs	r3, r3, #8
 8011234:	0719      	lsls	r1, r3, #28
 8011236:	bf04      	itt	eq
 8011238:	091b      	lsreq	r3, r3, #4
 801123a:	3004      	addeq	r0, #4
 801123c:	0799      	lsls	r1, r3, #30
 801123e:	bf04      	itt	eq
 8011240:	089b      	lsreq	r3, r3, #2
 8011242:	3002      	addeq	r0, #2
 8011244:	07d9      	lsls	r1, r3, #31
 8011246:	d403      	bmi.n	8011250 <__lo0bits+0x4e>
 8011248:	085b      	lsrs	r3, r3, #1
 801124a:	f100 0001 	add.w	r0, r0, #1
 801124e:	d003      	beq.n	8011258 <__lo0bits+0x56>
 8011250:	6013      	str	r3, [r2, #0]
 8011252:	4770      	bx	lr
 8011254:	2000      	movs	r0, #0
 8011256:	4770      	bx	lr
 8011258:	2020      	movs	r0, #32
 801125a:	4770      	bx	lr

0801125c <__i2b>:
 801125c:	b510      	push	{r4, lr}
 801125e:	460c      	mov	r4, r1
 8011260:	2101      	movs	r1, #1
 8011262:	f7ff ff07 	bl	8011074 <_Balloc>
 8011266:	4602      	mov	r2, r0
 8011268:	b928      	cbnz	r0, 8011276 <__i2b+0x1a>
 801126a:	4b05      	ldr	r3, [pc, #20]	@ (8011280 <__i2b+0x24>)
 801126c:	4805      	ldr	r0, [pc, #20]	@ (8011284 <__i2b+0x28>)
 801126e:	f240 1145 	movw	r1, #325	@ 0x145
 8011272:	f000 fcbd 	bl	8011bf0 <__assert_func>
 8011276:	2301      	movs	r3, #1
 8011278:	6144      	str	r4, [r0, #20]
 801127a:	6103      	str	r3, [r0, #16]
 801127c:	bd10      	pop	{r4, pc}
 801127e:	bf00      	nop
 8011280:	08012444 	.word	0x08012444
 8011284:	08012455 	.word	0x08012455

08011288 <__multiply>:
 8011288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801128c:	4614      	mov	r4, r2
 801128e:	690a      	ldr	r2, [r1, #16]
 8011290:	6923      	ldr	r3, [r4, #16]
 8011292:	429a      	cmp	r2, r3
 8011294:	bfa8      	it	ge
 8011296:	4623      	movge	r3, r4
 8011298:	460f      	mov	r7, r1
 801129a:	bfa4      	itt	ge
 801129c:	460c      	movge	r4, r1
 801129e:	461f      	movge	r7, r3
 80112a0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80112a4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80112a8:	68a3      	ldr	r3, [r4, #8]
 80112aa:	6861      	ldr	r1, [r4, #4]
 80112ac:	eb0a 0609 	add.w	r6, sl, r9
 80112b0:	42b3      	cmp	r3, r6
 80112b2:	b085      	sub	sp, #20
 80112b4:	bfb8      	it	lt
 80112b6:	3101      	addlt	r1, #1
 80112b8:	f7ff fedc 	bl	8011074 <_Balloc>
 80112bc:	b930      	cbnz	r0, 80112cc <__multiply+0x44>
 80112be:	4602      	mov	r2, r0
 80112c0:	4b44      	ldr	r3, [pc, #272]	@ (80113d4 <__multiply+0x14c>)
 80112c2:	4845      	ldr	r0, [pc, #276]	@ (80113d8 <__multiply+0x150>)
 80112c4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80112c8:	f000 fc92 	bl	8011bf0 <__assert_func>
 80112cc:	f100 0514 	add.w	r5, r0, #20
 80112d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80112d4:	462b      	mov	r3, r5
 80112d6:	2200      	movs	r2, #0
 80112d8:	4543      	cmp	r3, r8
 80112da:	d321      	bcc.n	8011320 <__multiply+0x98>
 80112dc:	f107 0114 	add.w	r1, r7, #20
 80112e0:	f104 0214 	add.w	r2, r4, #20
 80112e4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80112e8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80112ec:	9302      	str	r3, [sp, #8]
 80112ee:	1b13      	subs	r3, r2, r4
 80112f0:	3b15      	subs	r3, #21
 80112f2:	f023 0303 	bic.w	r3, r3, #3
 80112f6:	3304      	adds	r3, #4
 80112f8:	f104 0715 	add.w	r7, r4, #21
 80112fc:	42ba      	cmp	r2, r7
 80112fe:	bf38      	it	cc
 8011300:	2304      	movcc	r3, #4
 8011302:	9301      	str	r3, [sp, #4]
 8011304:	9b02      	ldr	r3, [sp, #8]
 8011306:	9103      	str	r1, [sp, #12]
 8011308:	428b      	cmp	r3, r1
 801130a:	d80c      	bhi.n	8011326 <__multiply+0x9e>
 801130c:	2e00      	cmp	r6, #0
 801130e:	dd03      	ble.n	8011318 <__multiply+0x90>
 8011310:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011314:	2b00      	cmp	r3, #0
 8011316:	d05b      	beq.n	80113d0 <__multiply+0x148>
 8011318:	6106      	str	r6, [r0, #16]
 801131a:	b005      	add	sp, #20
 801131c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011320:	f843 2b04 	str.w	r2, [r3], #4
 8011324:	e7d8      	b.n	80112d8 <__multiply+0x50>
 8011326:	f8b1 a000 	ldrh.w	sl, [r1]
 801132a:	f1ba 0f00 	cmp.w	sl, #0
 801132e:	d024      	beq.n	801137a <__multiply+0xf2>
 8011330:	f104 0e14 	add.w	lr, r4, #20
 8011334:	46a9      	mov	r9, r5
 8011336:	f04f 0c00 	mov.w	ip, #0
 801133a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801133e:	f8d9 3000 	ldr.w	r3, [r9]
 8011342:	fa1f fb87 	uxth.w	fp, r7
 8011346:	b29b      	uxth	r3, r3
 8011348:	fb0a 330b 	mla	r3, sl, fp, r3
 801134c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011350:	f8d9 7000 	ldr.w	r7, [r9]
 8011354:	4463      	add	r3, ip
 8011356:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801135a:	fb0a c70b 	mla	r7, sl, fp, ip
 801135e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011362:	b29b      	uxth	r3, r3
 8011364:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011368:	4572      	cmp	r2, lr
 801136a:	f849 3b04 	str.w	r3, [r9], #4
 801136e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011372:	d8e2      	bhi.n	801133a <__multiply+0xb2>
 8011374:	9b01      	ldr	r3, [sp, #4]
 8011376:	f845 c003 	str.w	ip, [r5, r3]
 801137a:	9b03      	ldr	r3, [sp, #12]
 801137c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011380:	3104      	adds	r1, #4
 8011382:	f1b9 0f00 	cmp.w	r9, #0
 8011386:	d021      	beq.n	80113cc <__multiply+0x144>
 8011388:	682b      	ldr	r3, [r5, #0]
 801138a:	f104 0c14 	add.w	ip, r4, #20
 801138e:	46ae      	mov	lr, r5
 8011390:	f04f 0a00 	mov.w	sl, #0
 8011394:	f8bc b000 	ldrh.w	fp, [ip]
 8011398:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801139c:	fb09 770b 	mla	r7, r9, fp, r7
 80113a0:	4457      	add	r7, sl
 80113a2:	b29b      	uxth	r3, r3
 80113a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80113a8:	f84e 3b04 	str.w	r3, [lr], #4
 80113ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 80113b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80113b4:	f8be 3000 	ldrh.w	r3, [lr]
 80113b8:	fb09 330a 	mla	r3, r9, sl, r3
 80113bc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80113c0:	4562      	cmp	r2, ip
 80113c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80113c6:	d8e5      	bhi.n	8011394 <__multiply+0x10c>
 80113c8:	9f01      	ldr	r7, [sp, #4]
 80113ca:	51eb      	str	r3, [r5, r7]
 80113cc:	3504      	adds	r5, #4
 80113ce:	e799      	b.n	8011304 <__multiply+0x7c>
 80113d0:	3e01      	subs	r6, #1
 80113d2:	e79b      	b.n	801130c <__multiply+0x84>
 80113d4:	08012444 	.word	0x08012444
 80113d8:	08012455 	.word	0x08012455

080113dc <__pow5mult>:
 80113dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113e0:	4615      	mov	r5, r2
 80113e2:	f012 0203 	ands.w	r2, r2, #3
 80113e6:	4607      	mov	r7, r0
 80113e8:	460e      	mov	r6, r1
 80113ea:	d007      	beq.n	80113fc <__pow5mult+0x20>
 80113ec:	4c25      	ldr	r4, [pc, #148]	@ (8011484 <__pow5mult+0xa8>)
 80113ee:	3a01      	subs	r2, #1
 80113f0:	2300      	movs	r3, #0
 80113f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80113f6:	f7ff fe9f 	bl	8011138 <__multadd>
 80113fa:	4606      	mov	r6, r0
 80113fc:	10ad      	asrs	r5, r5, #2
 80113fe:	d03d      	beq.n	801147c <__pow5mult+0xa0>
 8011400:	69fc      	ldr	r4, [r7, #28]
 8011402:	b97c      	cbnz	r4, 8011424 <__pow5mult+0x48>
 8011404:	2010      	movs	r0, #16
 8011406:	f7ff fd7f 	bl	8010f08 <malloc>
 801140a:	4602      	mov	r2, r0
 801140c:	61f8      	str	r0, [r7, #28]
 801140e:	b928      	cbnz	r0, 801141c <__pow5mult+0x40>
 8011410:	4b1d      	ldr	r3, [pc, #116]	@ (8011488 <__pow5mult+0xac>)
 8011412:	481e      	ldr	r0, [pc, #120]	@ (801148c <__pow5mult+0xb0>)
 8011414:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011418:	f000 fbea 	bl	8011bf0 <__assert_func>
 801141c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011420:	6004      	str	r4, [r0, #0]
 8011422:	60c4      	str	r4, [r0, #12]
 8011424:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011428:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801142c:	b94c      	cbnz	r4, 8011442 <__pow5mult+0x66>
 801142e:	f240 2171 	movw	r1, #625	@ 0x271
 8011432:	4638      	mov	r0, r7
 8011434:	f7ff ff12 	bl	801125c <__i2b>
 8011438:	2300      	movs	r3, #0
 801143a:	f8c8 0008 	str.w	r0, [r8, #8]
 801143e:	4604      	mov	r4, r0
 8011440:	6003      	str	r3, [r0, #0]
 8011442:	f04f 0900 	mov.w	r9, #0
 8011446:	07eb      	lsls	r3, r5, #31
 8011448:	d50a      	bpl.n	8011460 <__pow5mult+0x84>
 801144a:	4631      	mov	r1, r6
 801144c:	4622      	mov	r2, r4
 801144e:	4638      	mov	r0, r7
 8011450:	f7ff ff1a 	bl	8011288 <__multiply>
 8011454:	4631      	mov	r1, r6
 8011456:	4680      	mov	r8, r0
 8011458:	4638      	mov	r0, r7
 801145a:	f7ff fe4b 	bl	80110f4 <_Bfree>
 801145e:	4646      	mov	r6, r8
 8011460:	106d      	asrs	r5, r5, #1
 8011462:	d00b      	beq.n	801147c <__pow5mult+0xa0>
 8011464:	6820      	ldr	r0, [r4, #0]
 8011466:	b938      	cbnz	r0, 8011478 <__pow5mult+0x9c>
 8011468:	4622      	mov	r2, r4
 801146a:	4621      	mov	r1, r4
 801146c:	4638      	mov	r0, r7
 801146e:	f7ff ff0b 	bl	8011288 <__multiply>
 8011472:	6020      	str	r0, [r4, #0]
 8011474:	f8c0 9000 	str.w	r9, [r0]
 8011478:	4604      	mov	r4, r0
 801147a:	e7e4      	b.n	8011446 <__pow5mult+0x6a>
 801147c:	4630      	mov	r0, r6
 801147e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011482:	bf00      	nop
 8011484:	080124b0 	.word	0x080124b0
 8011488:	080123d5 	.word	0x080123d5
 801148c:	08012455 	.word	0x08012455

08011490 <__lshift>:
 8011490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011494:	460c      	mov	r4, r1
 8011496:	6849      	ldr	r1, [r1, #4]
 8011498:	6923      	ldr	r3, [r4, #16]
 801149a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801149e:	68a3      	ldr	r3, [r4, #8]
 80114a0:	4607      	mov	r7, r0
 80114a2:	4691      	mov	r9, r2
 80114a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80114a8:	f108 0601 	add.w	r6, r8, #1
 80114ac:	42b3      	cmp	r3, r6
 80114ae:	db0b      	blt.n	80114c8 <__lshift+0x38>
 80114b0:	4638      	mov	r0, r7
 80114b2:	f7ff fddf 	bl	8011074 <_Balloc>
 80114b6:	4605      	mov	r5, r0
 80114b8:	b948      	cbnz	r0, 80114ce <__lshift+0x3e>
 80114ba:	4602      	mov	r2, r0
 80114bc:	4b28      	ldr	r3, [pc, #160]	@ (8011560 <__lshift+0xd0>)
 80114be:	4829      	ldr	r0, [pc, #164]	@ (8011564 <__lshift+0xd4>)
 80114c0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80114c4:	f000 fb94 	bl	8011bf0 <__assert_func>
 80114c8:	3101      	adds	r1, #1
 80114ca:	005b      	lsls	r3, r3, #1
 80114cc:	e7ee      	b.n	80114ac <__lshift+0x1c>
 80114ce:	2300      	movs	r3, #0
 80114d0:	f100 0114 	add.w	r1, r0, #20
 80114d4:	f100 0210 	add.w	r2, r0, #16
 80114d8:	4618      	mov	r0, r3
 80114da:	4553      	cmp	r3, sl
 80114dc:	db33      	blt.n	8011546 <__lshift+0xb6>
 80114de:	6920      	ldr	r0, [r4, #16]
 80114e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80114e4:	f104 0314 	add.w	r3, r4, #20
 80114e8:	f019 091f 	ands.w	r9, r9, #31
 80114ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80114f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80114f4:	d02b      	beq.n	801154e <__lshift+0xbe>
 80114f6:	f1c9 0e20 	rsb	lr, r9, #32
 80114fa:	468a      	mov	sl, r1
 80114fc:	2200      	movs	r2, #0
 80114fe:	6818      	ldr	r0, [r3, #0]
 8011500:	fa00 f009 	lsl.w	r0, r0, r9
 8011504:	4310      	orrs	r0, r2
 8011506:	f84a 0b04 	str.w	r0, [sl], #4
 801150a:	f853 2b04 	ldr.w	r2, [r3], #4
 801150e:	459c      	cmp	ip, r3
 8011510:	fa22 f20e 	lsr.w	r2, r2, lr
 8011514:	d8f3      	bhi.n	80114fe <__lshift+0x6e>
 8011516:	ebac 0304 	sub.w	r3, ip, r4
 801151a:	3b15      	subs	r3, #21
 801151c:	f023 0303 	bic.w	r3, r3, #3
 8011520:	3304      	adds	r3, #4
 8011522:	f104 0015 	add.w	r0, r4, #21
 8011526:	4584      	cmp	ip, r0
 8011528:	bf38      	it	cc
 801152a:	2304      	movcc	r3, #4
 801152c:	50ca      	str	r2, [r1, r3]
 801152e:	b10a      	cbz	r2, 8011534 <__lshift+0xa4>
 8011530:	f108 0602 	add.w	r6, r8, #2
 8011534:	3e01      	subs	r6, #1
 8011536:	4638      	mov	r0, r7
 8011538:	612e      	str	r6, [r5, #16]
 801153a:	4621      	mov	r1, r4
 801153c:	f7ff fdda 	bl	80110f4 <_Bfree>
 8011540:	4628      	mov	r0, r5
 8011542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011546:	f842 0f04 	str.w	r0, [r2, #4]!
 801154a:	3301      	adds	r3, #1
 801154c:	e7c5      	b.n	80114da <__lshift+0x4a>
 801154e:	3904      	subs	r1, #4
 8011550:	f853 2b04 	ldr.w	r2, [r3], #4
 8011554:	f841 2f04 	str.w	r2, [r1, #4]!
 8011558:	459c      	cmp	ip, r3
 801155a:	d8f9      	bhi.n	8011550 <__lshift+0xc0>
 801155c:	e7ea      	b.n	8011534 <__lshift+0xa4>
 801155e:	bf00      	nop
 8011560:	08012444 	.word	0x08012444
 8011564:	08012455 	.word	0x08012455

08011568 <__mcmp>:
 8011568:	690a      	ldr	r2, [r1, #16]
 801156a:	4603      	mov	r3, r0
 801156c:	6900      	ldr	r0, [r0, #16]
 801156e:	1a80      	subs	r0, r0, r2
 8011570:	b530      	push	{r4, r5, lr}
 8011572:	d10e      	bne.n	8011592 <__mcmp+0x2a>
 8011574:	3314      	adds	r3, #20
 8011576:	3114      	adds	r1, #20
 8011578:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801157c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011580:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011584:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011588:	4295      	cmp	r5, r2
 801158a:	d003      	beq.n	8011594 <__mcmp+0x2c>
 801158c:	d205      	bcs.n	801159a <__mcmp+0x32>
 801158e:	f04f 30ff 	mov.w	r0, #4294967295
 8011592:	bd30      	pop	{r4, r5, pc}
 8011594:	42a3      	cmp	r3, r4
 8011596:	d3f3      	bcc.n	8011580 <__mcmp+0x18>
 8011598:	e7fb      	b.n	8011592 <__mcmp+0x2a>
 801159a:	2001      	movs	r0, #1
 801159c:	e7f9      	b.n	8011592 <__mcmp+0x2a>
	...

080115a0 <__mdiff>:
 80115a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115a4:	4689      	mov	r9, r1
 80115a6:	4606      	mov	r6, r0
 80115a8:	4611      	mov	r1, r2
 80115aa:	4648      	mov	r0, r9
 80115ac:	4614      	mov	r4, r2
 80115ae:	f7ff ffdb 	bl	8011568 <__mcmp>
 80115b2:	1e05      	subs	r5, r0, #0
 80115b4:	d112      	bne.n	80115dc <__mdiff+0x3c>
 80115b6:	4629      	mov	r1, r5
 80115b8:	4630      	mov	r0, r6
 80115ba:	f7ff fd5b 	bl	8011074 <_Balloc>
 80115be:	4602      	mov	r2, r0
 80115c0:	b928      	cbnz	r0, 80115ce <__mdiff+0x2e>
 80115c2:	4b3f      	ldr	r3, [pc, #252]	@ (80116c0 <__mdiff+0x120>)
 80115c4:	f240 2137 	movw	r1, #567	@ 0x237
 80115c8:	483e      	ldr	r0, [pc, #248]	@ (80116c4 <__mdiff+0x124>)
 80115ca:	f000 fb11 	bl	8011bf0 <__assert_func>
 80115ce:	2301      	movs	r3, #1
 80115d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80115d4:	4610      	mov	r0, r2
 80115d6:	b003      	add	sp, #12
 80115d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115dc:	bfbc      	itt	lt
 80115de:	464b      	movlt	r3, r9
 80115e0:	46a1      	movlt	r9, r4
 80115e2:	4630      	mov	r0, r6
 80115e4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80115e8:	bfba      	itte	lt
 80115ea:	461c      	movlt	r4, r3
 80115ec:	2501      	movlt	r5, #1
 80115ee:	2500      	movge	r5, #0
 80115f0:	f7ff fd40 	bl	8011074 <_Balloc>
 80115f4:	4602      	mov	r2, r0
 80115f6:	b918      	cbnz	r0, 8011600 <__mdiff+0x60>
 80115f8:	4b31      	ldr	r3, [pc, #196]	@ (80116c0 <__mdiff+0x120>)
 80115fa:	f240 2145 	movw	r1, #581	@ 0x245
 80115fe:	e7e3      	b.n	80115c8 <__mdiff+0x28>
 8011600:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011604:	6926      	ldr	r6, [r4, #16]
 8011606:	60c5      	str	r5, [r0, #12]
 8011608:	f109 0310 	add.w	r3, r9, #16
 801160c:	f109 0514 	add.w	r5, r9, #20
 8011610:	f104 0e14 	add.w	lr, r4, #20
 8011614:	f100 0b14 	add.w	fp, r0, #20
 8011618:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801161c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011620:	9301      	str	r3, [sp, #4]
 8011622:	46d9      	mov	r9, fp
 8011624:	f04f 0c00 	mov.w	ip, #0
 8011628:	9b01      	ldr	r3, [sp, #4]
 801162a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801162e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011632:	9301      	str	r3, [sp, #4]
 8011634:	fa1f f38a 	uxth.w	r3, sl
 8011638:	4619      	mov	r1, r3
 801163a:	b283      	uxth	r3, r0
 801163c:	1acb      	subs	r3, r1, r3
 801163e:	0c00      	lsrs	r0, r0, #16
 8011640:	4463      	add	r3, ip
 8011642:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011646:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801164a:	b29b      	uxth	r3, r3
 801164c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011650:	4576      	cmp	r6, lr
 8011652:	f849 3b04 	str.w	r3, [r9], #4
 8011656:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801165a:	d8e5      	bhi.n	8011628 <__mdiff+0x88>
 801165c:	1b33      	subs	r3, r6, r4
 801165e:	3b15      	subs	r3, #21
 8011660:	f023 0303 	bic.w	r3, r3, #3
 8011664:	3415      	adds	r4, #21
 8011666:	3304      	adds	r3, #4
 8011668:	42a6      	cmp	r6, r4
 801166a:	bf38      	it	cc
 801166c:	2304      	movcc	r3, #4
 801166e:	441d      	add	r5, r3
 8011670:	445b      	add	r3, fp
 8011672:	461e      	mov	r6, r3
 8011674:	462c      	mov	r4, r5
 8011676:	4544      	cmp	r4, r8
 8011678:	d30e      	bcc.n	8011698 <__mdiff+0xf8>
 801167a:	f108 0103 	add.w	r1, r8, #3
 801167e:	1b49      	subs	r1, r1, r5
 8011680:	f021 0103 	bic.w	r1, r1, #3
 8011684:	3d03      	subs	r5, #3
 8011686:	45a8      	cmp	r8, r5
 8011688:	bf38      	it	cc
 801168a:	2100      	movcc	r1, #0
 801168c:	440b      	add	r3, r1
 801168e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011692:	b191      	cbz	r1, 80116ba <__mdiff+0x11a>
 8011694:	6117      	str	r7, [r2, #16]
 8011696:	e79d      	b.n	80115d4 <__mdiff+0x34>
 8011698:	f854 1b04 	ldr.w	r1, [r4], #4
 801169c:	46e6      	mov	lr, ip
 801169e:	0c08      	lsrs	r0, r1, #16
 80116a0:	fa1c fc81 	uxtah	ip, ip, r1
 80116a4:	4471      	add	r1, lr
 80116a6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80116aa:	b289      	uxth	r1, r1
 80116ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80116b0:	f846 1b04 	str.w	r1, [r6], #4
 80116b4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80116b8:	e7dd      	b.n	8011676 <__mdiff+0xd6>
 80116ba:	3f01      	subs	r7, #1
 80116bc:	e7e7      	b.n	801168e <__mdiff+0xee>
 80116be:	bf00      	nop
 80116c0:	08012444 	.word	0x08012444
 80116c4:	08012455 	.word	0x08012455

080116c8 <__d2b>:
 80116c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80116cc:	460f      	mov	r7, r1
 80116ce:	2101      	movs	r1, #1
 80116d0:	ec59 8b10 	vmov	r8, r9, d0
 80116d4:	4616      	mov	r6, r2
 80116d6:	f7ff fccd 	bl	8011074 <_Balloc>
 80116da:	4604      	mov	r4, r0
 80116dc:	b930      	cbnz	r0, 80116ec <__d2b+0x24>
 80116de:	4602      	mov	r2, r0
 80116e0:	4b23      	ldr	r3, [pc, #140]	@ (8011770 <__d2b+0xa8>)
 80116e2:	4824      	ldr	r0, [pc, #144]	@ (8011774 <__d2b+0xac>)
 80116e4:	f240 310f 	movw	r1, #783	@ 0x30f
 80116e8:	f000 fa82 	bl	8011bf0 <__assert_func>
 80116ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80116f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80116f4:	b10d      	cbz	r5, 80116fa <__d2b+0x32>
 80116f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80116fa:	9301      	str	r3, [sp, #4]
 80116fc:	f1b8 0300 	subs.w	r3, r8, #0
 8011700:	d023      	beq.n	801174a <__d2b+0x82>
 8011702:	4668      	mov	r0, sp
 8011704:	9300      	str	r3, [sp, #0]
 8011706:	f7ff fd7c 	bl	8011202 <__lo0bits>
 801170a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801170e:	b1d0      	cbz	r0, 8011746 <__d2b+0x7e>
 8011710:	f1c0 0320 	rsb	r3, r0, #32
 8011714:	fa02 f303 	lsl.w	r3, r2, r3
 8011718:	430b      	orrs	r3, r1
 801171a:	40c2      	lsrs	r2, r0
 801171c:	6163      	str	r3, [r4, #20]
 801171e:	9201      	str	r2, [sp, #4]
 8011720:	9b01      	ldr	r3, [sp, #4]
 8011722:	61a3      	str	r3, [r4, #24]
 8011724:	2b00      	cmp	r3, #0
 8011726:	bf0c      	ite	eq
 8011728:	2201      	moveq	r2, #1
 801172a:	2202      	movne	r2, #2
 801172c:	6122      	str	r2, [r4, #16]
 801172e:	b1a5      	cbz	r5, 801175a <__d2b+0x92>
 8011730:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011734:	4405      	add	r5, r0
 8011736:	603d      	str	r5, [r7, #0]
 8011738:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801173c:	6030      	str	r0, [r6, #0]
 801173e:	4620      	mov	r0, r4
 8011740:	b003      	add	sp, #12
 8011742:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011746:	6161      	str	r1, [r4, #20]
 8011748:	e7ea      	b.n	8011720 <__d2b+0x58>
 801174a:	a801      	add	r0, sp, #4
 801174c:	f7ff fd59 	bl	8011202 <__lo0bits>
 8011750:	9b01      	ldr	r3, [sp, #4]
 8011752:	6163      	str	r3, [r4, #20]
 8011754:	3020      	adds	r0, #32
 8011756:	2201      	movs	r2, #1
 8011758:	e7e8      	b.n	801172c <__d2b+0x64>
 801175a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801175e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011762:	6038      	str	r0, [r7, #0]
 8011764:	6918      	ldr	r0, [r3, #16]
 8011766:	f7ff fd2d 	bl	80111c4 <__hi0bits>
 801176a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801176e:	e7e5      	b.n	801173c <__d2b+0x74>
 8011770:	08012444 	.word	0x08012444
 8011774:	08012455 	.word	0x08012455

08011778 <__ssputs_r>:
 8011778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801177c:	688e      	ldr	r6, [r1, #8]
 801177e:	461f      	mov	r7, r3
 8011780:	42be      	cmp	r6, r7
 8011782:	680b      	ldr	r3, [r1, #0]
 8011784:	4682      	mov	sl, r0
 8011786:	460c      	mov	r4, r1
 8011788:	4690      	mov	r8, r2
 801178a:	d82d      	bhi.n	80117e8 <__ssputs_r+0x70>
 801178c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011790:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011794:	d026      	beq.n	80117e4 <__ssputs_r+0x6c>
 8011796:	6965      	ldr	r5, [r4, #20]
 8011798:	6909      	ldr	r1, [r1, #16]
 801179a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801179e:	eba3 0901 	sub.w	r9, r3, r1
 80117a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80117a6:	1c7b      	adds	r3, r7, #1
 80117a8:	444b      	add	r3, r9
 80117aa:	106d      	asrs	r5, r5, #1
 80117ac:	429d      	cmp	r5, r3
 80117ae:	bf38      	it	cc
 80117b0:	461d      	movcc	r5, r3
 80117b2:	0553      	lsls	r3, r2, #21
 80117b4:	d527      	bpl.n	8011806 <__ssputs_r+0x8e>
 80117b6:	4629      	mov	r1, r5
 80117b8:	f7ff fbd0 	bl	8010f5c <_malloc_r>
 80117bc:	4606      	mov	r6, r0
 80117be:	b360      	cbz	r0, 801181a <__ssputs_r+0xa2>
 80117c0:	6921      	ldr	r1, [r4, #16]
 80117c2:	464a      	mov	r2, r9
 80117c4:	f000 fa06 	bl	8011bd4 <memcpy>
 80117c8:	89a3      	ldrh	r3, [r4, #12]
 80117ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80117ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80117d2:	81a3      	strh	r3, [r4, #12]
 80117d4:	6126      	str	r6, [r4, #16]
 80117d6:	6165      	str	r5, [r4, #20]
 80117d8:	444e      	add	r6, r9
 80117da:	eba5 0509 	sub.w	r5, r5, r9
 80117de:	6026      	str	r6, [r4, #0]
 80117e0:	60a5      	str	r5, [r4, #8]
 80117e2:	463e      	mov	r6, r7
 80117e4:	42be      	cmp	r6, r7
 80117e6:	d900      	bls.n	80117ea <__ssputs_r+0x72>
 80117e8:	463e      	mov	r6, r7
 80117ea:	6820      	ldr	r0, [r4, #0]
 80117ec:	4632      	mov	r2, r6
 80117ee:	4641      	mov	r1, r8
 80117f0:	f000 f9c6 	bl	8011b80 <memmove>
 80117f4:	68a3      	ldr	r3, [r4, #8]
 80117f6:	1b9b      	subs	r3, r3, r6
 80117f8:	60a3      	str	r3, [r4, #8]
 80117fa:	6823      	ldr	r3, [r4, #0]
 80117fc:	4433      	add	r3, r6
 80117fe:	6023      	str	r3, [r4, #0]
 8011800:	2000      	movs	r0, #0
 8011802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011806:	462a      	mov	r2, r5
 8011808:	f000 fa36 	bl	8011c78 <_realloc_r>
 801180c:	4606      	mov	r6, r0
 801180e:	2800      	cmp	r0, #0
 8011810:	d1e0      	bne.n	80117d4 <__ssputs_r+0x5c>
 8011812:	6921      	ldr	r1, [r4, #16]
 8011814:	4650      	mov	r0, sl
 8011816:	f7ff fb2d 	bl	8010e74 <_free_r>
 801181a:	230c      	movs	r3, #12
 801181c:	f8ca 3000 	str.w	r3, [sl]
 8011820:	89a3      	ldrh	r3, [r4, #12]
 8011822:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011826:	81a3      	strh	r3, [r4, #12]
 8011828:	f04f 30ff 	mov.w	r0, #4294967295
 801182c:	e7e9      	b.n	8011802 <__ssputs_r+0x8a>
	...

08011830 <_svfiprintf_r>:
 8011830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011834:	4698      	mov	r8, r3
 8011836:	898b      	ldrh	r3, [r1, #12]
 8011838:	061b      	lsls	r3, r3, #24
 801183a:	b09d      	sub	sp, #116	@ 0x74
 801183c:	4607      	mov	r7, r0
 801183e:	460d      	mov	r5, r1
 8011840:	4614      	mov	r4, r2
 8011842:	d510      	bpl.n	8011866 <_svfiprintf_r+0x36>
 8011844:	690b      	ldr	r3, [r1, #16]
 8011846:	b973      	cbnz	r3, 8011866 <_svfiprintf_r+0x36>
 8011848:	2140      	movs	r1, #64	@ 0x40
 801184a:	f7ff fb87 	bl	8010f5c <_malloc_r>
 801184e:	6028      	str	r0, [r5, #0]
 8011850:	6128      	str	r0, [r5, #16]
 8011852:	b930      	cbnz	r0, 8011862 <_svfiprintf_r+0x32>
 8011854:	230c      	movs	r3, #12
 8011856:	603b      	str	r3, [r7, #0]
 8011858:	f04f 30ff 	mov.w	r0, #4294967295
 801185c:	b01d      	add	sp, #116	@ 0x74
 801185e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011862:	2340      	movs	r3, #64	@ 0x40
 8011864:	616b      	str	r3, [r5, #20]
 8011866:	2300      	movs	r3, #0
 8011868:	9309      	str	r3, [sp, #36]	@ 0x24
 801186a:	2320      	movs	r3, #32
 801186c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011870:	f8cd 800c 	str.w	r8, [sp, #12]
 8011874:	2330      	movs	r3, #48	@ 0x30
 8011876:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011a14 <_svfiprintf_r+0x1e4>
 801187a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801187e:	f04f 0901 	mov.w	r9, #1
 8011882:	4623      	mov	r3, r4
 8011884:	469a      	mov	sl, r3
 8011886:	f813 2b01 	ldrb.w	r2, [r3], #1
 801188a:	b10a      	cbz	r2, 8011890 <_svfiprintf_r+0x60>
 801188c:	2a25      	cmp	r2, #37	@ 0x25
 801188e:	d1f9      	bne.n	8011884 <_svfiprintf_r+0x54>
 8011890:	ebba 0b04 	subs.w	fp, sl, r4
 8011894:	d00b      	beq.n	80118ae <_svfiprintf_r+0x7e>
 8011896:	465b      	mov	r3, fp
 8011898:	4622      	mov	r2, r4
 801189a:	4629      	mov	r1, r5
 801189c:	4638      	mov	r0, r7
 801189e:	f7ff ff6b 	bl	8011778 <__ssputs_r>
 80118a2:	3001      	adds	r0, #1
 80118a4:	f000 80a7 	beq.w	80119f6 <_svfiprintf_r+0x1c6>
 80118a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80118aa:	445a      	add	r2, fp
 80118ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80118ae:	f89a 3000 	ldrb.w	r3, [sl]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	f000 809f 	beq.w	80119f6 <_svfiprintf_r+0x1c6>
 80118b8:	2300      	movs	r3, #0
 80118ba:	f04f 32ff 	mov.w	r2, #4294967295
 80118be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80118c2:	f10a 0a01 	add.w	sl, sl, #1
 80118c6:	9304      	str	r3, [sp, #16]
 80118c8:	9307      	str	r3, [sp, #28]
 80118ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80118ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80118d0:	4654      	mov	r4, sl
 80118d2:	2205      	movs	r2, #5
 80118d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118d8:	484e      	ldr	r0, [pc, #312]	@ (8011a14 <_svfiprintf_r+0x1e4>)
 80118da:	f7ee fd01 	bl	80002e0 <memchr>
 80118de:	9a04      	ldr	r2, [sp, #16]
 80118e0:	b9d8      	cbnz	r0, 801191a <_svfiprintf_r+0xea>
 80118e2:	06d0      	lsls	r0, r2, #27
 80118e4:	bf44      	itt	mi
 80118e6:	2320      	movmi	r3, #32
 80118e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80118ec:	0711      	lsls	r1, r2, #28
 80118ee:	bf44      	itt	mi
 80118f0:	232b      	movmi	r3, #43	@ 0x2b
 80118f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80118f6:	f89a 3000 	ldrb.w	r3, [sl]
 80118fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80118fc:	d015      	beq.n	801192a <_svfiprintf_r+0xfa>
 80118fe:	9a07      	ldr	r2, [sp, #28]
 8011900:	4654      	mov	r4, sl
 8011902:	2000      	movs	r0, #0
 8011904:	f04f 0c0a 	mov.w	ip, #10
 8011908:	4621      	mov	r1, r4
 801190a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801190e:	3b30      	subs	r3, #48	@ 0x30
 8011910:	2b09      	cmp	r3, #9
 8011912:	d94b      	bls.n	80119ac <_svfiprintf_r+0x17c>
 8011914:	b1b0      	cbz	r0, 8011944 <_svfiprintf_r+0x114>
 8011916:	9207      	str	r2, [sp, #28]
 8011918:	e014      	b.n	8011944 <_svfiprintf_r+0x114>
 801191a:	eba0 0308 	sub.w	r3, r0, r8
 801191e:	fa09 f303 	lsl.w	r3, r9, r3
 8011922:	4313      	orrs	r3, r2
 8011924:	9304      	str	r3, [sp, #16]
 8011926:	46a2      	mov	sl, r4
 8011928:	e7d2      	b.n	80118d0 <_svfiprintf_r+0xa0>
 801192a:	9b03      	ldr	r3, [sp, #12]
 801192c:	1d19      	adds	r1, r3, #4
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	9103      	str	r1, [sp, #12]
 8011932:	2b00      	cmp	r3, #0
 8011934:	bfbb      	ittet	lt
 8011936:	425b      	neglt	r3, r3
 8011938:	f042 0202 	orrlt.w	r2, r2, #2
 801193c:	9307      	strge	r3, [sp, #28]
 801193e:	9307      	strlt	r3, [sp, #28]
 8011940:	bfb8      	it	lt
 8011942:	9204      	strlt	r2, [sp, #16]
 8011944:	7823      	ldrb	r3, [r4, #0]
 8011946:	2b2e      	cmp	r3, #46	@ 0x2e
 8011948:	d10a      	bne.n	8011960 <_svfiprintf_r+0x130>
 801194a:	7863      	ldrb	r3, [r4, #1]
 801194c:	2b2a      	cmp	r3, #42	@ 0x2a
 801194e:	d132      	bne.n	80119b6 <_svfiprintf_r+0x186>
 8011950:	9b03      	ldr	r3, [sp, #12]
 8011952:	1d1a      	adds	r2, r3, #4
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	9203      	str	r2, [sp, #12]
 8011958:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801195c:	3402      	adds	r4, #2
 801195e:	9305      	str	r3, [sp, #20]
 8011960:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011a24 <_svfiprintf_r+0x1f4>
 8011964:	7821      	ldrb	r1, [r4, #0]
 8011966:	2203      	movs	r2, #3
 8011968:	4650      	mov	r0, sl
 801196a:	f7ee fcb9 	bl	80002e0 <memchr>
 801196e:	b138      	cbz	r0, 8011980 <_svfiprintf_r+0x150>
 8011970:	9b04      	ldr	r3, [sp, #16]
 8011972:	eba0 000a 	sub.w	r0, r0, sl
 8011976:	2240      	movs	r2, #64	@ 0x40
 8011978:	4082      	lsls	r2, r0
 801197a:	4313      	orrs	r3, r2
 801197c:	3401      	adds	r4, #1
 801197e:	9304      	str	r3, [sp, #16]
 8011980:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011984:	4824      	ldr	r0, [pc, #144]	@ (8011a18 <_svfiprintf_r+0x1e8>)
 8011986:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801198a:	2206      	movs	r2, #6
 801198c:	f7ee fca8 	bl	80002e0 <memchr>
 8011990:	2800      	cmp	r0, #0
 8011992:	d036      	beq.n	8011a02 <_svfiprintf_r+0x1d2>
 8011994:	4b21      	ldr	r3, [pc, #132]	@ (8011a1c <_svfiprintf_r+0x1ec>)
 8011996:	bb1b      	cbnz	r3, 80119e0 <_svfiprintf_r+0x1b0>
 8011998:	9b03      	ldr	r3, [sp, #12]
 801199a:	3307      	adds	r3, #7
 801199c:	f023 0307 	bic.w	r3, r3, #7
 80119a0:	3308      	adds	r3, #8
 80119a2:	9303      	str	r3, [sp, #12]
 80119a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80119a6:	4433      	add	r3, r6
 80119a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80119aa:	e76a      	b.n	8011882 <_svfiprintf_r+0x52>
 80119ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80119b0:	460c      	mov	r4, r1
 80119b2:	2001      	movs	r0, #1
 80119b4:	e7a8      	b.n	8011908 <_svfiprintf_r+0xd8>
 80119b6:	2300      	movs	r3, #0
 80119b8:	3401      	adds	r4, #1
 80119ba:	9305      	str	r3, [sp, #20]
 80119bc:	4619      	mov	r1, r3
 80119be:	f04f 0c0a 	mov.w	ip, #10
 80119c2:	4620      	mov	r0, r4
 80119c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80119c8:	3a30      	subs	r2, #48	@ 0x30
 80119ca:	2a09      	cmp	r2, #9
 80119cc:	d903      	bls.n	80119d6 <_svfiprintf_r+0x1a6>
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d0c6      	beq.n	8011960 <_svfiprintf_r+0x130>
 80119d2:	9105      	str	r1, [sp, #20]
 80119d4:	e7c4      	b.n	8011960 <_svfiprintf_r+0x130>
 80119d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80119da:	4604      	mov	r4, r0
 80119dc:	2301      	movs	r3, #1
 80119de:	e7f0      	b.n	80119c2 <_svfiprintf_r+0x192>
 80119e0:	ab03      	add	r3, sp, #12
 80119e2:	9300      	str	r3, [sp, #0]
 80119e4:	462a      	mov	r2, r5
 80119e6:	4b0e      	ldr	r3, [pc, #56]	@ (8011a20 <_svfiprintf_r+0x1f0>)
 80119e8:	a904      	add	r1, sp, #16
 80119ea:	4638      	mov	r0, r7
 80119ec:	f7fd ff14 	bl	800f818 <_printf_float>
 80119f0:	1c42      	adds	r2, r0, #1
 80119f2:	4606      	mov	r6, r0
 80119f4:	d1d6      	bne.n	80119a4 <_svfiprintf_r+0x174>
 80119f6:	89ab      	ldrh	r3, [r5, #12]
 80119f8:	065b      	lsls	r3, r3, #25
 80119fa:	f53f af2d 	bmi.w	8011858 <_svfiprintf_r+0x28>
 80119fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011a00:	e72c      	b.n	801185c <_svfiprintf_r+0x2c>
 8011a02:	ab03      	add	r3, sp, #12
 8011a04:	9300      	str	r3, [sp, #0]
 8011a06:	462a      	mov	r2, r5
 8011a08:	4b05      	ldr	r3, [pc, #20]	@ (8011a20 <_svfiprintf_r+0x1f0>)
 8011a0a:	a904      	add	r1, sp, #16
 8011a0c:	4638      	mov	r0, r7
 8011a0e:	f7fe f98b 	bl	800fd28 <_printf_i>
 8011a12:	e7ed      	b.n	80119f0 <_svfiprintf_r+0x1c0>
 8011a14:	080125b0 	.word	0x080125b0
 8011a18:	080125ba 	.word	0x080125ba
 8011a1c:	0800f819 	.word	0x0800f819
 8011a20:	08011779 	.word	0x08011779
 8011a24:	080125b6 	.word	0x080125b6

08011a28 <__sflush_r>:
 8011a28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a30:	0716      	lsls	r6, r2, #28
 8011a32:	4605      	mov	r5, r0
 8011a34:	460c      	mov	r4, r1
 8011a36:	d454      	bmi.n	8011ae2 <__sflush_r+0xba>
 8011a38:	684b      	ldr	r3, [r1, #4]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	dc02      	bgt.n	8011a44 <__sflush_r+0x1c>
 8011a3e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	dd48      	ble.n	8011ad6 <__sflush_r+0xae>
 8011a44:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011a46:	2e00      	cmp	r6, #0
 8011a48:	d045      	beq.n	8011ad6 <__sflush_r+0xae>
 8011a4a:	2300      	movs	r3, #0
 8011a4c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011a50:	682f      	ldr	r7, [r5, #0]
 8011a52:	6a21      	ldr	r1, [r4, #32]
 8011a54:	602b      	str	r3, [r5, #0]
 8011a56:	d030      	beq.n	8011aba <__sflush_r+0x92>
 8011a58:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011a5a:	89a3      	ldrh	r3, [r4, #12]
 8011a5c:	0759      	lsls	r1, r3, #29
 8011a5e:	d505      	bpl.n	8011a6c <__sflush_r+0x44>
 8011a60:	6863      	ldr	r3, [r4, #4]
 8011a62:	1ad2      	subs	r2, r2, r3
 8011a64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011a66:	b10b      	cbz	r3, 8011a6c <__sflush_r+0x44>
 8011a68:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011a6a:	1ad2      	subs	r2, r2, r3
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011a70:	6a21      	ldr	r1, [r4, #32]
 8011a72:	4628      	mov	r0, r5
 8011a74:	47b0      	blx	r6
 8011a76:	1c43      	adds	r3, r0, #1
 8011a78:	89a3      	ldrh	r3, [r4, #12]
 8011a7a:	d106      	bne.n	8011a8a <__sflush_r+0x62>
 8011a7c:	6829      	ldr	r1, [r5, #0]
 8011a7e:	291d      	cmp	r1, #29
 8011a80:	d82b      	bhi.n	8011ada <__sflush_r+0xb2>
 8011a82:	4a2a      	ldr	r2, [pc, #168]	@ (8011b2c <__sflush_r+0x104>)
 8011a84:	410a      	asrs	r2, r1
 8011a86:	07d6      	lsls	r6, r2, #31
 8011a88:	d427      	bmi.n	8011ada <__sflush_r+0xb2>
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	6062      	str	r2, [r4, #4]
 8011a8e:	04d9      	lsls	r1, r3, #19
 8011a90:	6922      	ldr	r2, [r4, #16]
 8011a92:	6022      	str	r2, [r4, #0]
 8011a94:	d504      	bpl.n	8011aa0 <__sflush_r+0x78>
 8011a96:	1c42      	adds	r2, r0, #1
 8011a98:	d101      	bne.n	8011a9e <__sflush_r+0x76>
 8011a9a:	682b      	ldr	r3, [r5, #0]
 8011a9c:	b903      	cbnz	r3, 8011aa0 <__sflush_r+0x78>
 8011a9e:	6560      	str	r0, [r4, #84]	@ 0x54
 8011aa0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011aa2:	602f      	str	r7, [r5, #0]
 8011aa4:	b1b9      	cbz	r1, 8011ad6 <__sflush_r+0xae>
 8011aa6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011aaa:	4299      	cmp	r1, r3
 8011aac:	d002      	beq.n	8011ab4 <__sflush_r+0x8c>
 8011aae:	4628      	mov	r0, r5
 8011ab0:	f7ff f9e0 	bl	8010e74 <_free_r>
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	6363      	str	r3, [r4, #52]	@ 0x34
 8011ab8:	e00d      	b.n	8011ad6 <__sflush_r+0xae>
 8011aba:	2301      	movs	r3, #1
 8011abc:	4628      	mov	r0, r5
 8011abe:	47b0      	blx	r6
 8011ac0:	4602      	mov	r2, r0
 8011ac2:	1c50      	adds	r0, r2, #1
 8011ac4:	d1c9      	bne.n	8011a5a <__sflush_r+0x32>
 8011ac6:	682b      	ldr	r3, [r5, #0]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d0c6      	beq.n	8011a5a <__sflush_r+0x32>
 8011acc:	2b1d      	cmp	r3, #29
 8011ace:	d001      	beq.n	8011ad4 <__sflush_r+0xac>
 8011ad0:	2b16      	cmp	r3, #22
 8011ad2:	d11e      	bne.n	8011b12 <__sflush_r+0xea>
 8011ad4:	602f      	str	r7, [r5, #0]
 8011ad6:	2000      	movs	r0, #0
 8011ad8:	e022      	b.n	8011b20 <__sflush_r+0xf8>
 8011ada:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ade:	b21b      	sxth	r3, r3
 8011ae0:	e01b      	b.n	8011b1a <__sflush_r+0xf2>
 8011ae2:	690f      	ldr	r7, [r1, #16]
 8011ae4:	2f00      	cmp	r7, #0
 8011ae6:	d0f6      	beq.n	8011ad6 <__sflush_r+0xae>
 8011ae8:	0793      	lsls	r3, r2, #30
 8011aea:	680e      	ldr	r6, [r1, #0]
 8011aec:	bf08      	it	eq
 8011aee:	694b      	ldreq	r3, [r1, #20]
 8011af0:	600f      	str	r7, [r1, #0]
 8011af2:	bf18      	it	ne
 8011af4:	2300      	movne	r3, #0
 8011af6:	eba6 0807 	sub.w	r8, r6, r7
 8011afa:	608b      	str	r3, [r1, #8]
 8011afc:	f1b8 0f00 	cmp.w	r8, #0
 8011b00:	dde9      	ble.n	8011ad6 <__sflush_r+0xae>
 8011b02:	6a21      	ldr	r1, [r4, #32]
 8011b04:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011b06:	4643      	mov	r3, r8
 8011b08:	463a      	mov	r2, r7
 8011b0a:	4628      	mov	r0, r5
 8011b0c:	47b0      	blx	r6
 8011b0e:	2800      	cmp	r0, #0
 8011b10:	dc08      	bgt.n	8011b24 <__sflush_r+0xfc>
 8011b12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011b1a:	81a3      	strh	r3, [r4, #12]
 8011b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8011b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b24:	4407      	add	r7, r0
 8011b26:	eba8 0800 	sub.w	r8, r8, r0
 8011b2a:	e7e7      	b.n	8011afc <__sflush_r+0xd4>
 8011b2c:	dfbffffe 	.word	0xdfbffffe

08011b30 <_fflush_r>:
 8011b30:	b538      	push	{r3, r4, r5, lr}
 8011b32:	690b      	ldr	r3, [r1, #16]
 8011b34:	4605      	mov	r5, r0
 8011b36:	460c      	mov	r4, r1
 8011b38:	b913      	cbnz	r3, 8011b40 <_fflush_r+0x10>
 8011b3a:	2500      	movs	r5, #0
 8011b3c:	4628      	mov	r0, r5
 8011b3e:	bd38      	pop	{r3, r4, r5, pc}
 8011b40:	b118      	cbz	r0, 8011b4a <_fflush_r+0x1a>
 8011b42:	6a03      	ldr	r3, [r0, #32]
 8011b44:	b90b      	cbnz	r3, 8011b4a <_fflush_r+0x1a>
 8011b46:	f7fe fa9b 	bl	8010080 <__sinit>
 8011b4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d0f3      	beq.n	8011b3a <_fflush_r+0xa>
 8011b52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011b54:	07d0      	lsls	r0, r2, #31
 8011b56:	d404      	bmi.n	8011b62 <_fflush_r+0x32>
 8011b58:	0599      	lsls	r1, r3, #22
 8011b5a:	d402      	bmi.n	8011b62 <_fflush_r+0x32>
 8011b5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011b5e:	f7fe fba6 	bl	80102ae <__retarget_lock_acquire_recursive>
 8011b62:	4628      	mov	r0, r5
 8011b64:	4621      	mov	r1, r4
 8011b66:	f7ff ff5f 	bl	8011a28 <__sflush_r>
 8011b6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011b6c:	07da      	lsls	r2, r3, #31
 8011b6e:	4605      	mov	r5, r0
 8011b70:	d4e4      	bmi.n	8011b3c <_fflush_r+0xc>
 8011b72:	89a3      	ldrh	r3, [r4, #12]
 8011b74:	059b      	lsls	r3, r3, #22
 8011b76:	d4e1      	bmi.n	8011b3c <_fflush_r+0xc>
 8011b78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011b7a:	f7fe fb99 	bl	80102b0 <__retarget_lock_release_recursive>
 8011b7e:	e7dd      	b.n	8011b3c <_fflush_r+0xc>

08011b80 <memmove>:
 8011b80:	4288      	cmp	r0, r1
 8011b82:	b510      	push	{r4, lr}
 8011b84:	eb01 0402 	add.w	r4, r1, r2
 8011b88:	d902      	bls.n	8011b90 <memmove+0x10>
 8011b8a:	4284      	cmp	r4, r0
 8011b8c:	4623      	mov	r3, r4
 8011b8e:	d807      	bhi.n	8011ba0 <memmove+0x20>
 8011b90:	1e43      	subs	r3, r0, #1
 8011b92:	42a1      	cmp	r1, r4
 8011b94:	d008      	beq.n	8011ba8 <memmove+0x28>
 8011b96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011b9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011b9e:	e7f8      	b.n	8011b92 <memmove+0x12>
 8011ba0:	4402      	add	r2, r0
 8011ba2:	4601      	mov	r1, r0
 8011ba4:	428a      	cmp	r2, r1
 8011ba6:	d100      	bne.n	8011baa <memmove+0x2a>
 8011ba8:	bd10      	pop	{r4, pc}
 8011baa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011bae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011bb2:	e7f7      	b.n	8011ba4 <memmove+0x24>

08011bb4 <_sbrk_r>:
 8011bb4:	b538      	push	{r3, r4, r5, lr}
 8011bb6:	4d06      	ldr	r5, [pc, #24]	@ (8011bd0 <_sbrk_r+0x1c>)
 8011bb8:	2300      	movs	r3, #0
 8011bba:	4604      	mov	r4, r0
 8011bbc:	4608      	mov	r0, r1
 8011bbe:	602b      	str	r3, [r5, #0]
 8011bc0:	f7ef fcf8 	bl	80015b4 <_sbrk>
 8011bc4:	1c43      	adds	r3, r0, #1
 8011bc6:	d102      	bne.n	8011bce <_sbrk_r+0x1a>
 8011bc8:	682b      	ldr	r3, [r5, #0]
 8011bca:	b103      	cbz	r3, 8011bce <_sbrk_r+0x1a>
 8011bcc:	6023      	str	r3, [r4, #0]
 8011bce:	bd38      	pop	{r3, r4, r5, pc}
 8011bd0:	240025d4 	.word	0x240025d4

08011bd4 <memcpy>:
 8011bd4:	440a      	add	r2, r1
 8011bd6:	4291      	cmp	r1, r2
 8011bd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8011bdc:	d100      	bne.n	8011be0 <memcpy+0xc>
 8011bde:	4770      	bx	lr
 8011be0:	b510      	push	{r4, lr}
 8011be2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011be6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011bea:	4291      	cmp	r1, r2
 8011bec:	d1f9      	bne.n	8011be2 <memcpy+0xe>
 8011bee:	bd10      	pop	{r4, pc}

08011bf0 <__assert_func>:
 8011bf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011bf2:	4614      	mov	r4, r2
 8011bf4:	461a      	mov	r2, r3
 8011bf6:	4b09      	ldr	r3, [pc, #36]	@ (8011c1c <__assert_func+0x2c>)
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	4605      	mov	r5, r0
 8011bfc:	68d8      	ldr	r0, [r3, #12]
 8011bfe:	b954      	cbnz	r4, 8011c16 <__assert_func+0x26>
 8011c00:	4b07      	ldr	r3, [pc, #28]	@ (8011c20 <__assert_func+0x30>)
 8011c02:	461c      	mov	r4, r3
 8011c04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011c08:	9100      	str	r1, [sp, #0]
 8011c0a:	462b      	mov	r3, r5
 8011c0c:	4905      	ldr	r1, [pc, #20]	@ (8011c24 <__assert_func+0x34>)
 8011c0e:	f000 f86f 	bl	8011cf0 <fiprintf>
 8011c12:	f000 f87f 	bl	8011d14 <abort>
 8011c16:	4b04      	ldr	r3, [pc, #16]	@ (8011c28 <__assert_func+0x38>)
 8011c18:	e7f4      	b.n	8011c04 <__assert_func+0x14>
 8011c1a:	bf00      	nop
 8011c1c:	24000138 	.word	0x24000138
 8011c20:	08012606 	.word	0x08012606
 8011c24:	080125d8 	.word	0x080125d8
 8011c28:	080125cb 	.word	0x080125cb

08011c2c <_calloc_r>:
 8011c2c:	b570      	push	{r4, r5, r6, lr}
 8011c2e:	fba1 5402 	umull	r5, r4, r1, r2
 8011c32:	b93c      	cbnz	r4, 8011c44 <_calloc_r+0x18>
 8011c34:	4629      	mov	r1, r5
 8011c36:	f7ff f991 	bl	8010f5c <_malloc_r>
 8011c3a:	4606      	mov	r6, r0
 8011c3c:	b928      	cbnz	r0, 8011c4a <_calloc_r+0x1e>
 8011c3e:	2600      	movs	r6, #0
 8011c40:	4630      	mov	r0, r6
 8011c42:	bd70      	pop	{r4, r5, r6, pc}
 8011c44:	220c      	movs	r2, #12
 8011c46:	6002      	str	r2, [r0, #0]
 8011c48:	e7f9      	b.n	8011c3e <_calloc_r+0x12>
 8011c4a:	462a      	mov	r2, r5
 8011c4c:	4621      	mov	r1, r4
 8011c4e:	f7fe fab0 	bl	80101b2 <memset>
 8011c52:	e7f5      	b.n	8011c40 <_calloc_r+0x14>

08011c54 <__ascii_mbtowc>:
 8011c54:	b082      	sub	sp, #8
 8011c56:	b901      	cbnz	r1, 8011c5a <__ascii_mbtowc+0x6>
 8011c58:	a901      	add	r1, sp, #4
 8011c5a:	b142      	cbz	r2, 8011c6e <__ascii_mbtowc+0x1a>
 8011c5c:	b14b      	cbz	r3, 8011c72 <__ascii_mbtowc+0x1e>
 8011c5e:	7813      	ldrb	r3, [r2, #0]
 8011c60:	600b      	str	r3, [r1, #0]
 8011c62:	7812      	ldrb	r2, [r2, #0]
 8011c64:	1e10      	subs	r0, r2, #0
 8011c66:	bf18      	it	ne
 8011c68:	2001      	movne	r0, #1
 8011c6a:	b002      	add	sp, #8
 8011c6c:	4770      	bx	lr
 8011c6e:	4610      	mov	r0, r2
 8011c70:	e7fb      	b.n	8011c6a <__ascii_mbtowc+0x16>
 8011c72:	f06f 0001 	mvn.w	r0, #1
 8011c76:	e7f8      	b.n	8011c6a <__ascii_mbtowc+0x16>

08011c78 <_realloc_r>:
 8011c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c7c:	4680      	mov	r8, r0
 8011c7e:	4615      	mov	r5, r2
 8011c80:	460c      	mov	r4, r1
 8011c82:	b921      	cbnz	r1, 8011c8e <_realloc_r+0x16>
 8011c84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c88:	4611      	mov	r1, r2
 8011c8a:	f7ff b967 	b.w	8010f5c <_malloc_r>
 8011c8e:	b92a      	cbnz	r2, 8011c9c <_realloc_r+0x24>
 8011c90:	f7ff f8f0 	bl	8010e74 <_free_r>
 8011c94:	2400      	movs	r4, #0
 8011c96:	4620      	mov	r0, r4
 8011c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c9c:	f000 f841 	bl	8011d22 <_malloc_usable_size_r>
 8011ca0:	4285      	cmp	r5, r0
 8011ca2:	4606      	mov	r6, r0
 8011ca4:	d802      	bhi.n	8011cac <_realloc_r+0x34>
 8011ca6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011caa:	d8f4      	bhi.n	8011c96 <_realloc_r+0x1e>
 8011cac:	4629      	mov	r1, r5
 8011cae:	4640      	mov	r0, r8
 8011cb0:	f7ff f954 	bl	8010f5c <_malloc_r>
 8011cb4:	4607      	mov	r7, r0
 8011cb6:	2800      	cmp	r0, #0
 8011cb8:	d0ec      	beq.n	8011c94 <_realloc_r+0x1c>
 8011cba:	42b5      	cmp	r5, r6
 8011cbc:	462a      	mov	r2, r5
 8011cbe:	4621      	mov	r1, r4
 8011cc0:	bf28      	it	cs
 8011cc2:	4632      	movcs	r2, r6
 8011cc4:	f7ff ff86 	bl	8011bd4 <memcpy>
 8011cc8:	4621      	mov	r1, r4
 8011cca:	4640      	mov	r0, r8
 8011ccc:	f7ff f8d2 	bl	8010e74 <_free_r>
 8011cd0:	463c      	mov	r4, r7
 8011cd2:	e7e0      	b.n	8011c96 <_realloc_r+0x1e>

08011cd4 <__ascii_wctomb>:
 8011cd4:	4603      	mov	r3, r0
 8011cd6:	4608      	mov	r0, r1
 8011cd8:	b141      	cbz	r1, 8011cec <__ascii_wctomb+0x18>
 8011cda:	2aff      	cmp	r2, #255	@ 0xff
 8011cdc:	d904      	bls.n	8011ce8 <__ascii_wctomb+0x14>
 8011cde:	228a      	movs	r2, #138	@ 0x8a
 8011ce0:	601a      	str	r2, [r3, #0]
 8011ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8011ce6:	4770      	bx	lr
 8011ce8:	700a      	strb	r2, [r1, #0]
 8011cea:	2001      	movs	r0, #1
 8011cec:	4770      	bx	lr
	...

08011cf0 <fiprintf>:
 8011cf0:	b40e      	push	{r1, r2, r3}
 8011cf2:	b503      	push	{r0, r1, lr}
 8011cf4:	4601      	mov	r1, r0
 8011cf6:	ab03      	add	r3, sp, #12
 8011cf8:	4805      	ldr	r0, [pc, #20]	@ (8011d10 <fiprintf+0x20>)
 8011cfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8011cfe:	6800      	ldr	r0, [r0, #0]
 8011d00:	9301      	str	r3, [sp, #4]
 8011d02:	f000 f83f 	bl	8011d84 <_vfiprintf_r>
 8011d06:	b002      	add	sp, #8
 8011d08:	f85d eb04 	ldr.w	lr, [sp], #4
 8011d0c:	b003      	add	sp, #12
 8011d0e:	4770      	bx	lr
 8011d10:	24000138 	.word	0x24000138

08011d14 <abort>:
 8011d14:	b508      	push	{r3, lr}
 8011d16:	2006      	movs	r0, #6
 8011d18:	f000 fa08 	bl	801212c <raise>
 8011d1c:	2001      	movs	r0, #1
 8011d1e:	f7ef fbd1 	bl	80014c4 <_exit>

08011d22 <_malloc_usable_size_r>:
 8011d22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d26:	1f18      	subs	r0, r3, #4
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	bfbc      	itt	lt
 8011d2c:	580b      	ldrlt	r3, [r1, r0]
 8011d2e:	18c0      	addlt	r0, r0, r3
 8011d30:	4770      	bx	lr

08011d32 <__sfputc_r>:
 8011d32:	6893      	ldr	r3, [r2, #8]
 8011d34:	3b01      	subs	r3, #1
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	b410      	push	{r4}
 8011d3a:	6093      	str	r3, [r2, #8]
 8011d3c:	da08      	bge.n	8011d50 <__sfputc_r+0x1e>
 8011d3e:	6994      	ldr	r4, [r2, #24]
 8011d40:	42a3      	cmp	r3, r4
 8011d42:	db01      	blt.n	8011d48 <__sfputc_r+0x16>
 8011d44:	290a      	cmp	r1, #10
 8011d46:	d103      	bne.n	8011d50 <__sfputc_r+0x1e>
 8011d48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d4c:	f000 b932 	b.w	8011fb4 <__swbuf_r>
 8011d50:	6813      	ldr	r3, [r2, #0]
 8011d52:	1c58      	adds	r0, r3, #1
 8011d54:	6010      	str	r0, [r2, #0]
 8011d56:	7019      	strb	r1, [r3, #0]
 8011d58:	4608      	mov	r0, r1
 8011d5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d5e:	4770      	bx	lr

08011d60 <__sfputs_r>:
 8011d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d62:	4606      	mov	r6, r0
 8011d64:	460f      	mov	r7, r1
 8011d66:	4614      	mov	r4, r2
 8011d68:	18d5      	adds	r5, r2, r3
 8011d6a:	42ac      	cmp	r4, r5
 8011d6c:	d101      	bne.n	8011d72 <__sfputs_r+0x12>
 8011d6e:	2000      	movs	r0, #0
 8011d70:	e007      	b.n	8011d82 <__sfputs_r+0x22>
 8011d72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d76:	463a      	mov	r2, r7
 8011d78:	4630      	mov	r0, r6
 8011d7a:	f7ff ffda 	bl	8011d32 <__sfputc_r>
 8011d7e:	1c43      	adds	r3, r0, #1
 8011d80:	d1f3      	bne.n	8011d6a <__sfputs_r+0xa>
 8011d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011d84 <_vfiprintf_r>:
 8011d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d88:	460d      	mov	r5, r1
 8011d8a:	b09d      	sub	sp, #116	@ 0x74
 8011d8c:	4614      	mov	r4, r2
 8011d8e:	4698      	mov	r8, r3
 8011d90:	4606      	mov	r6, r0
 8011d92:	b118      	cbz	r0, 8011d9c <_vfiprintf_r+0x18>
 8011d94:	6a03      	ldr	r3, [r0, #32]
 8011d96:	b90b      	cbnz	r3, 8011d9c <_vfiprintf_r+0x18>
 8011d98:	f7fe f972 	bl	8010080 <__sinit>
 8011d9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011d9e:	07d9      	lsls	r1, r3, #31
 8011da0:	d405      	bmi.n	8011dae <_vfiprintf_r+0x2a>
 8011da2:	89ab      	ldrh	r3, [r5, #12]
 8011da4:	059a      	lsls	r2, r3, #22
 8011da6:	d402      	bmi.n	8011dae <_vfiprintf_r+0x2a>
 8011da8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011daa:	f7fe fa80 	bl	80102ae <__retarget_lock_acquire_recursive>
 8011dae:	89ab      	ldrh	r3, [r5, #12]
 8011db0:	071b      	lsls	r3, r3, #28
 8011db2:	d501      	bpl.n	8011db8 <_vfiprintf_r+0x34>
 8011db4:	692b      	ldr	r3, [r5, #16]
 8011db6:	b99b      	cbnz	r3, 8011de0 <_vfiprintf_r+0x5c>
 8011db8:	4629      	mov	r1, r5
 8011dba:	4630      	mov	r0, r6
 8011dbc:	f000 f938 	bl	8012030 <__swsetup_r>
 8011dc0:	b170      	cbz	r0, 8011de0 <_vfiprintf_r+0x5c>
 8011dc2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011dc4:	07dc      	lsls	r4, r3, #31
 8011dc6:	d504      	bpl.n	8011dd2 <_vfiprintf_r+0x4e>
 8011dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8011dcc:	b01d      	add	sp, #116	@ 0x74
 8011dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dd2:	89ab      	ldrh	r3, [r5, #12]
 8011dd4:	0598      	lsls	r0, r3, #22
 8011dd6:	d4f7      	bmi.n	8011dc8 <_vfiprintf_r+0x44>
 8011dd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011dda:	f7fe fa69 	bl	80102b0 <__retarget_lock_release_recursive>
 8011dde:	e7f3      	b.n	8011dc8 <_vfiprintf_r+0x44>
 8011de0:	2300      	movs	r3, #0
 8011de2:	9309      	str	r3, [sp, #36]	@ 0x24
 8011de4:	2320      	movs	r3, #32
 8011de6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011dea:	f8cd 800c 	str.w	r8, [sp, #12]
 8011dee:	2330      	movs	r3, #48	@ 0x30
 8011df0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011fa0 <_vfiprintf_r+0x21c>
 8011df4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011df8:	f04f 0901 	mov.w	r9, #1
 8011dfc:	4623      	mov	r3, r4
 8011dfe:	469a      	mov	sl, r3
 8011e00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e04:	b10a      	cbz	r2, 8011e0a <_vfiprintf_r+0x86>
 8011e06:	2a25      	cmp	r2, #37	@ 0x25
 8011e08:	d1f9      	bne.n	8011dfe <_vfiprintf_r+0x7a>
 8011e0a:	ebba 0b04 	subs.w	fp, sl, r4
 8011e0e:	d00b      	beq.n	8011e28 <_vfiprintf_r+0xa4>
 8011e10:	465b      	mov	r3, fp
 8011e12:	4622      	mov	r2, r4
 8011e14:	4629      	mov	r1, r5
 8011e16:	4630      	mov	r0, r6
 8011e18:	f7ff ffa2 	bl	8011d60 <__sfputs_r>
 8011e1c:	3001      	adds	r0, #1
 8011e1e:	f000 80a7 	beq.w	8011f70 <_vfiprintf_r+0x1ec>
 8011e22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011e24:	445a      	add	r2, fp
 8011e26:	9209      	str	r2, [sp, #36]	@ 0x24
 8011e28:	f89a 3000 	ldrb.w	r3, [sl]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	f000 809f 	beq.w	8011f70 <_vfiprintf_r+0x1ec>
 8011e32:	2300      	movs	r3, #0
 8011e34:	f04f 32ff 	mov.w	r2, #4294967295
 8011e38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011e3c:	f10a 0a01 	add.w	sl, sl, #1
 8011e40:	9304      	str	r3, [sp, #16]
 8011e42:	9307      	str	r3, [sp, #28]
 8011e44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011e48:	931a      	str	r3, [sp, #104]	@ 0x68
 8011e4a:	4654      	mov	r4, sl
 8011e4c:	2205      	movs	r2, #5
 8011e4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e52:	4853      	ldr	r0, [pc, #332]	@ (8011fa0 <_vfiprintf_r+0x21c>)
 8011e54:	f7ee fa44 	bl	80002e0 <memchr>
 8011e58:	9a04      	ldr	r2, [sp, #16]
 8011e5a:	b9d8      	cbnz	r0, 8011e94 <_vfiprintf_r+0x110>
 8011e5c:	06d1      	lsls	r1, r2, #27
 8011e5e:	bf44      	itt	mi
 8011e60:	2320      	movmi	r3, #32
 8011e62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011e66:	0713      	lsls	r3, r2, #28
 8011e68:	bf44      	itt	mi
 8011e6a:	232b      	movmi	r3, #43	@ 0x2b
 8011e6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011e70:	f89a 3000 	ldrb.w	r3, [sl]
 8011e74:	2b2a      	cmp	r3, #42	@ 0x2a
 8011e76:	d015      	beq.n	8011ea4 <_vfiprintf_r+0x120>
 8011e78:	9a07      	ldr	r2, [sp, #28]
 8011e7a:	4654      	mov	r4, sl
 8011e7c:	2000      	movs	r0, #0
 8011e7e:	f04f 0c0a 	mov.w	ip, #10
 8011e82:	4621      	mov	r1, r4
 8011e84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011e88:	3b30      	subs	r3, #48	@ 0x30
 8011e8a:	2b09      	cmp	r3, #9
 8011e8c:	d94b      	bls.n	8011f26 <_vfiprintf_r+0x1a2>
 8011e8e:	b1b0      	cbz	r0, 8011ebe <_vfiprintf_r+0x13a>
 8011e90:	9207      	str	r2, [sp, #28]
 8011e92:	e014      	b.n	8011ebe <_vfiprintf_r+0x13a>
 8011e94:	eba0 0308 	sub.w	r3, r0, r8
 8011e98:	fa09 f303 	lsl.w	r3, r9, r3
 8011e9c:	4313      	orrs	r3, r2
 8011e9e:	9304      	str	r3, [sp, #16]
 8011ea0:	46a2      	mov	sl, r4
 8011ea2:	e7d2      	b.n	8011e4a <_vfiprintf_r+0xc6>
 8011ea4:	9b03      	ldr	r3, [sp, #12]
 8011ea6:	1d19      	adds	r1, r3, #4
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	9103      	str	r1, [sp, #12]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	bfbb      	ittet	lt
 8011eb0:	425b      	neglt	r3, r3
 8011eb2:	f042 0202 	orrlt.w	r2, r2, #2
 8011eb6:	9307      	strge	r3, [sp, #28]
 8011eb8:	9307      	strlt	r3, [sp, #28]
 8011eba:	bfb8      	it	lt
 8011ebc:	9204      	strlt	r2, [sp, #16]
 8011ebe:	7823      	ldrb	r3, [r4, #0]
 8011ec0:	2b2e      	cmp	r3, #46	@ 0x2e
 8011ec2:	d10a      	bne.n	8011eda <_vfiprintf_r+0x156>
 8011ec4:	7863      	ldrb	r3, [r4, #1]
 8011ec6:	2b2a      	cmp	r3, #42	@ 0x2a
 8011ec8:	d132      	bne.n	8011f30 <_vfiprintf_r+0x1ac>
 8011eca:	9b03      	ldr	r3, [sp, #12]
 8011ecc:	1d1a      	adds	r2, r3, #4
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	9203      	str	r2, [sp, #12]
 8011ed2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011ed6:	3402      	adds	r4, #2
 8011ed8:	9305      	str	r3, [sp, #20]
 8011eda:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011fb0 <_vfiprintf_r+0x22c>
 8011ede:	7821      	ldrb	r1, [r4, #0]
 8011ee0:	2203      	movs	r2, #3
 8011ee2:	4650      	mov	r0, sl
 8011ee4:	f7ee f9fc 	bl	80002e0 <memchr>
 8011ee8:	b138      	cbz	r0, 8011efa <_vfiprintf_r+0x176>
 8011eea:	9b04      	ldr	r3, [sp, #16]
 8011eec:	eba0 000a 	sub.w	r0, r0, sl
 8011ef0:	2240      	movs	r2, #64	@ 0x40
 8011ef2:	4082      	lsls	r2, r0
 8011ef4:	4313      	orrs	r3, r2
 8011ef6:	3401      	adds	r4, #1
 8011ef8:	9304      	str	r3, [sp, #16]
 8011efa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011efe:	4829      	ldr	r0, [pc, #164]	@ (8011fa4 <_vfiprintf_r+0x220>)
 8011f00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011f04:	2206      	movs	r2, #6
 8011f06:	f7ee f9eb 	bl	80002e0 <memchr>
 8011f0a:	2800      	cmp	r0, #0
 8011f0c:	d03f      	beq.n	8011f8e <_vfiprintf_r+0x20a>
 8011f0e:	4b26      	ldr	r3, [pc, #152]	@ (8011fa8 <_vfiprintf_r+0x224>)
 8011f10:	bb1b      	cbnz	r3, 8011f5a <_vfiprintf_r+0x1d6>
 8011f12:	9b03      	ldr	r3, [sp, #12]
 8011f14:	3307      	adds	r3, #7
 8011f16:	f023 0307 	bic.w	r3, r3, #7
 8011f1a:	3308      	adds	r3, #8
 8011f1c:	9303      	str	r3, [sp, #12]
 8011f1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f20:	443b      	add	r3, r7
 8011f22:	9309      	str	r3, [sp, #36]	@ 0x24
 8011f24:	e76a      	b.n	8011dfc <_vfiprintf_r+0x78>
 8011f26:	fb0c 3202 	mla	r2, ip, r2, r3
 8011f2a:	460c      	mov	r4, r1
 8011f2c:	2001      	movs	r0, #1
 8011f2e:	e7a8      	b.n	8011e82 <_vfiprintf_r+0xfe>
 8011f30:	2300      	movs	r3, #0
 8011f32:	3401      	adds	r4, #1
 8011f34:	9305      	str	r3, [sp, #20]
 8011f36:	4619      	mov	r1, r3
 8011f38:	f04f 0c0a 	mov.w	ip, #10
 8011f3c:	4620      	mov	r0, r4
 8011f3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011f42:	3a30      	subs	r2, #48	@ 0x30
 8011f44:	2a09      	cmp	r2, #9
 8011f46:	d903      	bls.n	8011f50 <_vfiprintf_r+0x1cc>
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d0c6      	beq.n	8011eda <_vfiprintf_r+0x156>
 8011f4c:	9105      	str	r1, [sp, #20]
 8011f4e:	e7c4      	b.n	8011eda <_vfiprintf_r+0x156>
 8011f50:	fb0c 2101 	mla	r1, ip, r1, r2
 8011f54:	4604      	mov	r4, r0
 8011f56:	2301      	movs	r3, #1
 8011f58:	e7f0      	b.n	8011f3c <_vfiprintf_r+0x1b8>
 8011f5a:	ab03      	add	r3, sp, #12
 8011f5c:	9300      	str	r3, [sp, #0]
 8011f5e:	462a      	mov	r2, r5
 8011f60:	4b12      	ldr	r3, [pc, #72]	@ (8011fac <_vfiprintf_r+0x228>)
 8011f62:	a904      	add	r1, sp, #16
 8011f64:	4630      	mov	r0, r6
 8011f66:	f7fd fc57 	bl	800f818 <_printf_float>
 8011f6a:	4607      	mov	r7, r0
 8011f6c:	1c78      	adds	r0, r7, #1
 8011f6e:	d1d6      	bne.n	8011f1e <_vfiprintf_r+0x19a>
 8011f70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011f72:	07d9      	lsls	r1, r3, #31
 8011f74:	d405      	bmi.n	8011f82 <_vfiprintf_r+0x1fe>
 8011f76:	89ab      	ldrh	r3, [r5, #12]
 8011f78:	059a      	lsls	r2, r3, #22
 8011f7a:	d402      	bmi.n	8011f82 <_vfiprintf_r+0x1fe>
 8011f7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011f7e:	f7fe f997 	bl	80102b0 <__retarget_lock_release_recursive>
 8011f82:	89ab      	ldrh	r3, [r5, #12]
 8011f84:	065b      	lsls	r3, r3, #25
 8011f86:	f53f af1f 	bmi.w	8011dc8 <_vfiprintf_r+0x44>
 8011f8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011f8c:	e71e      	b.n	8011dcc <_vfiprintf_r+0x48>
 8011f8e:	ab03      	add	r3, sp, #12
 8011f90:	9300      	str	r3, [sp, #0]
 8011f92:	462a      	mov	r2, r5
 8011f94:	4b05      	ldr	r3, [pc, #20]	@ (8011fac <_vfiprintf_r+0x228>)
 8011f96:	a904      	add	r1, sp, #16
 8011f98:	4630      	mov	r0, r6
 8011f9a:	f7fd fec5 	bl	800fd28 <_printf_i>
 8011f9e:	e7e4      	b.n	8011f6a <_vfiprintf_r+0x1e6>
 8011fa0:	080125b0 	.word	0x080125b0
 8011fa4:	080125ba 	.word	0x080125ba
 8011fa8:	0800f819 	.word	0x0800f819
 8011fac:	08011d61 	.word	0x08011d61
 8011fb0:	080125b6 	.word	0x080125b6

08011fb4 <__swbuf_r>:
 8011fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fb6:	460e      	mov	r6, r1
 8011fb8:	4614      	mov	r4, r2
 8011fba:	4605      	mov	r5, r0
 8011fbc:	b118      	cbz	r0, 8011fc6 <__swbuf_r+0x12>
 8011fbe:	6a03      	ldr	r3, [r0, #32]
 8011fc0:	b90b      	cbnz	r3, 8011fc6 <__swbuf_r+0x12>
 8011fc2:	f7fe f85d 	bl	8010080 <__sinit>
 8011fc6:	69a3      	ldr	r3, [r4, #24]
 8011fc8:	60a3      	str	r3, [r4, #8]
 8011fca:	89a3      	ldrh	r3, [r4, #12]
 8011fcc:	071a      	lsls	r2, r3, #28
 8011fce:	d501      	bpl.n	8011fd4 <__swbuf_r+0x20>
 8011fd0:	6923      	ldr	r3, [r4, #16]
 8011fd2:	b943      	cbnz	r3, 8011fe6 <__swbuf_r+0x32>
 8011fd4:	4621      	mov	r1, r4
 8011fd6:	4628      	mov	r0, r5
 8011fd8:	f000 f82a 	bl	8012030 <__swsetup_r>
 8011fdc:	b118      	cbz	r0, 8011fe6 <__swbuf_r+0x32>
 8011fde:	f04f 37ff 	mov.w	r7, #4294967295
 8011fe2:	4638      	mov	r0, r7
 8011fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011fe6:	6823      	ldr	r3, [r4, #0]
 8011fe8:	6922      	ldr	r2, [r4, #16]
 8011fea:	1a98      	subs	r0, r3, r2
 8011fec:	6963      	ldr	r3, [r4, #20]
 8011fee:	b2f6      	uxtb	r6, r6
 8011ff0:	4283      	cmp	r3, r0
 8011ff2:	4637      	mov	r7, r6
 8011ff4:	dc05      	bgt.n	8012002 <__swbuf_r+0x4e>
 8011ff6:	4621      	mov	r1, r4
 8011ff8:	4628      	mov	r0, r5
 8011ffa:	f7ff fd99 	bl	8011b30 <_fflush_r>
 8011ffe:	2800      	cmp	r0, #0
 8012000:	d1ed      	bne.n	8011fde <__swbuf_r+0x2a>
 8012002:	68a3      	ldr	r3, [r4, #8]
 8012004:	3b01      	subs	r3, #1
 8012006:	60a3      	str	r3, [r4, #8]
 8012008:	6823      	ldr	r3, [r4, #0]
 801200a:	1c5a      	adds	r2, r3, #1
 801200c:	6022      	str	r2, [r4, #0]
 801200e:	701e      	strb	r6, [r3, #0]
 8012010:	6962      	ldr	r2, [r4, #20]
 8012012:	1c43      	adds	r3, r0, #1
 8012014:	429a      	cmp	r2, r3
 8012016:	d004      	beq.n	8012022 <__swbuf_r+0x6e>
 8012018:	89a3      	ldrh	r3, [r4, #12]
 801201a:	07db      	lsls	r3, r3, #31
 801201c:	d5e1      	bpl.n	8011fe2 <__swbuf_r+0x2e>
 801201e:	2e0a      	cmp	r6, #10
 8012020:	d1df      	bne.n	8011fe2 <__swbuf_r+0x2e>
 8012022:	4621      	mov	r1, r4
 8012024:	4628      	mov	r0, r5
 8012026:	f7ff fd83 	bl	8011b30 <_fflush_r>
 801202a:	2800      	cmp	r0, #0
 801202c:	d0d9      	beq.n	8011fe2 <__swbuf_r+0x2e>
 801202e:	e7d6      	b.n	8011fde <__swbuf_r+0x2a>

08012030 <__swsetup_r>:
 8012030:	b538      	push	{r3, r4, r5, lr}
 8012032:	4b29      	ldr	r3, [pc, #164]	@ (80120d8 <__swsetup_r+0xa8>)
 8012034:	4605      	mov	r5, r0
 8012036:	6818      	ldr	r0, [r3, #0]
 8012038:	460c      	mov	r4, r1
 801203a:	b118      	cbz	r0, 8012044 <__swsetup_r+0x14>
 801203c:	6a03      	ldr	r3, [r0, #32]
 801203e:	b90b      	cbnz	r3, 8012044 <__swsetup_r+0x14>
 8012040:	f7fe f81e 	bl	8010080 <__sinit>
 8012044:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012048:	0719      	lsls	r1, r3, #28
 801204a:	d422      	bmi.n	8012092 <__swsetup_r+0x62>
 801204c:	06da      	lsls	r2, r3, #27
 801204e:	d407      	bmi.n	8012060 <__swsetup_r+0x30>
 8012050:	2209      	movs	r2, #9
 8012052:	602a      	str	r2, [r5, #0]
 8012054:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012058:	81a3      	strh	r3, [r4, #12]
 801205a:	f04f 30ff 	mov.w	r0, #4294967295
 801205e:	e033      	b.n	80120c8 <__swsetup_r+0x98>
 8012060:	0758      	lsls	r0, r3, #29
 8012062:	d512      	bpl.n	801208a <__swsetup_r+0x5a>
 8012064:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012066:	b141      	cbz	r1, 801207a <__swsetup_r+0x4a>
 8012068:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801206c:	4299      	cmp	r1, r3
 801206e:	d002      	beq.n	8012076 <__swsetup_r+0x46>
 8012070:	4628      	mov	r0, r5
 8012072:	f7fe feff 	bl	8010e74 <_free_r>
 8012076:	2300      	movs	r3, #0
 8012078:	6363      	str	r3, [r4, #52]	@ 0x34
 801207a:	89a3      	ldrh	r3, [r4, #12]
 801207c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012080:	81a3      	strh	r3, [r4, #12]
 8012082:	2300      	movs	r3, #0
 8012084:	6063      	str	r3, [r4, #4]
 8012086:	6923      	ldr	r3, [r4, #16]
 8012088:	6023      	str	r3, [r4, #0]
 801208a:	89a3      	ldrh	r3, [r4, #12]
 801208c:	f043 0308 	orr.w	r3, r3, #8
 8012090:	81a3      	strh	r3, [r4, #12]
 8012092:	6923      	ldr	r3, [r4, #16]
 8012094:	b94b      	cbnz	r3, 80120aa <__swsetup_r+0x7a>
 8012096:	89a3      	ldrh	r3, [r4, #12]
 8012098:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801209c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80120a0:	d003      	beq.n	80120aa <__swsetup_r+0x7a>
 80120a2:	4621      	mov	r1, r4
 80120a4:	4628      	mov	r0, r5
 80120a6:	f000 f883 	bl	80121b0 <__smakebuf_r>
 80120aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120ae:	f013 0201 	ands.w	r2, r3, #1
 80120b2:	d00a      	beq.n	80120ca <__swsetup_r+0x9a>
 80120b4:	2200      	movs	r2, #0
 80120b6:	60a2      	str	r2, [r4, #8]
 80120b8:	6962      	ldr	r2, [r4, #20]
 80120ba:	4252      	negs	r2, r2
 80120bc:	61a2      	str	r2, [r4, #24]
 80120be:	6922      	ldr	r2, [r4, #16]
 80120c0:	b942      	cbnz	r2, 80120d4 <__swsetup_r+0xa4>
 80120c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80120c6:	d1c5      	bne.n	8012054 <__swsetup_r+0x24>
 80120c8:	bd38      	pop	{r3, r4, r5, pc}
 80120ca:	0799      	lsls	r1, r3, #30
 80120cc:	bf58      	it	pl
 80120ce:	6962      	ldrpl	r2, [r4, #20]
 80120d0:	60a2      	str	r2, [r4, #8]
 80120d2:	e7f4      	b.n	80120be <__swsetup_r+0x8e>
 80120d4:	2000      	movs	r0, #0
 80120d6:	e7f7      	b.n	80120c8 <__swsetup_r+0x98>
 80120d8:	24000138 	.word	0x24000138

080120dc <_raise_r>:
 80120dc:	291f      	cmp	r1, #31
 80120de:	b538      	push	{r3, r4, r5, lr}
 80120e0:	4605      	mov	r5, r0
 80120e2:	460c      	mov	r4, r1
 80120e4:	d904      	bls.n	80120f0 <_raise_r+0x14>
 80120e6:	2316      	movs	r3, #22
 80120e8:	6003      	str	r3, [r0, #0]
 80120ea:	f04f 30ff 	mov.w	r0, #4294967295
 80120ee:	bd38      	pop	{r3, r4, r5, pc}
 80120f0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80120f2:	b112      	cbz	r2, 80120fa <_raise_r+0x1e>
 80120f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80120f8:	b94b      	cbnz	r3, 801210e <_raise_r+0x32>
 80120fa:	4628      	mov	r0, r5
 80120fc:	f000 f830 	bl	8012160 <_getpid_r>
 8012100:	4622      	mov	r2, r4
 8012102:	4601      	mov	r1, r0
 8012104:	4628      	mov	r0, r5
 8012106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801210a:	f000 b817 	b.w	801213c <_kill_r>
 801210e:	2b01      	cmp	r3, #1
 8012110:	d00a      	beq.n	8012128 <_raise_r+0x4c>
 8012112:	1c59      	adds	r1, r3, #1
 8012114:	d103      	bne.n	801211e <_raise_r+0x42>
 8012116:	2316      	movs	r3, #22
 8012118:	6003      	str	r3, [r0, #0]
 801211a:	2001      	movs	r0, #1
 801211c:	e7e7      	b.n	80120ee <_raise_r+0x12>
 801211e:	2100      	movs	r1, #0
 8012120:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012124:	4620      	mov	r0, r4
 8012126:	4798      	blx	r3
 8012128:	2000      	movs	r0, #0
 801212a:	e7e0      	b.n	80120ee <_raise_r+0x12>

0801212c <raise>:
 801212c:	4b02      	ldr	r3, [pc, #8]	@ (8012138 <raise+0xc>)
 801212e:	4601      	mov	r1, r0
 8012130:	6818      	ldr	r0, [r3, #0]
 8012132:	f7ff bfd3 	b.w	80120dc <_raise_r>
 8012136:	bf00      	nop
 8012138:	24000138 	.word	0x24000138

0801213c <_kill_r>:
 801213c:	b538      	push	{r3, r4, r5, lr}
 801213e:	4d07      	ldr	r5, [pc, #28]	@ (801215c <_kill_r+0x20>)
 8012140:	2300      	movs	r3, #0
 8012142:	4604      	mov	r4, r0
 8012144:	4608      	mov	r0, r1
 8012146:	4611      	mov	r1, r2
 8012148:	602b      	str	r3, [r5, #0]
 801214a:	f7ef f9ab 	bl	80014a4 <_kill>
 801214e:	1c43      	adds	r3, r0, #1
 8012150:	d102      	bne.n	8012158 <_kill_r+0x1c>
 8012152:	682b      	ldr	r3, [r5, #0]
 8012154:	b103      	cbz	r3, 8012158 <_kill_r+0x1c>
 8012156:	6023      	str	r3, [r4, #0]
 8012158:	bd38      	pop	{r3, r4, r5, pc}
 801215a:	bf00      	nop
 801215c:	240025d4 	.word	0x240025d4

08012160 <_getpid_r>:
 8012160:	f7ef b998 	b.w	8001494 <_getpid>

08012164 <__swhatbuf_r>:
 8012164:	b570      	push	{r4, r5, r6, lr}
 8012166:	460c      	mov	r4, r1
 8012168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801216c:	2900      	cmp	r1, #0
 801216e:	b096      	sub	sp, #88	@ 0x58
 8012170:	4615      	mov	r5, r2
 8012172:	461e      	mov	r6, r3
 8012174:	da0d      	bge.n	8012192 <__swhatbuf_r+0x2e>
 8012176:	89a3      	ldrh	r3, [r4, #12]
 8012178:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801217c:	f04f 0100 	mov.w	r1, #0
 8012180:	bf14      	ite	ne
 8012182:	2340      	movne	r3, #64	@ 0x40
 8012184:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012188:	2000      	movs	r0, #0
 801218a:	6031      	str	r1, [r6, #0]
 801218c:	602b      	str	r3, [r5, #0]
 801218e:	b016      	add	sp, #88	@ 0x58
 8012190:	bd70      	pop	{r4, r5, r6, pc}
 8012192:	466a      	mov	r2, sp
 8012194:	f000 f848 	bl	8012228 <_fstat_r>
 8012198:	2800      	cmp	r0, #0
 801219a:	dbec      	blt.n	8012176 <__swhatbuf_r+0x12>
 801219c:	9901      	ldr	r1, [sp, #4]
 801219e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80121a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80121a6:	4259      	negs	r1, r3
 80121a8:	4159      	adcs	r1, r3
 80121aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80121ae:	e7eb      	b.n	8012188 <__swhatbuf_r+0x24>

080121b0 <__smakebuf_r>:
 80121b0:	898b      	ldrh	r3, [r1, #12]
 80121b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80121b4:	079d      	lsls	r5, r3, #30
 80121b6:	4606      	mov	r6, r0
 80121b8:	460c      	mov	r4, r1
 80121ba:	d507      	bpl.n	80121cc <__smakebuf_r+0x1c>
 80121bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80121c0:	6023      	str	r3, [r4, #0]
 80121c2:	6123      	str	r3, [r4, #16]
 80121c4:	2301      	movs	r3, #1
 80121c6:	6163      	str	r3, [r4, #20]
 80121c8:	b003      	add	sp, #12
 80121ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121cc:	ab01      	add	r3, sp, #4
 80121ce:	466a      	mov	r2, sp
 80121d0:	f7ff ffc8 	bl	8012164 <__swhatbuf_r>
 80121d4:	9f00      	ldr	r7, [sp, #0]
 80121d6:	4605      	mov	r5, r0
 80121d8:	4639      	mov	r1, r7
 80121da:	4630      	mov	r0, r6
 80121dc:	f7fe febe 	bl	8010f5c <_malloc_r>
 80121e0:	b948      	cbnz	r0, 80121f6 <__smakebuf_r+0x46>
 80121e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80121e6:	059a      	lsls	r2, r3, #22
 80121e8:	d4ee      	bmi.n	80121c8 <__smakebuf_r+0x18>
 80121ea:	f023 0303 	bic.w	r3, r3, #3
 80121ee:	f043 0302 	orr.w	r3, r3, #2
 80121f2:	81a3      	strh	r3, [r4, #12]
 80121f4:	e7e2      	b.n	80121bc <__smakebuf_r+0xc>
 80121f6:	89a3      	ldrh	r3, [r4, #12]
 80121f8:	6020      	str	r0, [r4, #0]
 80121fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80121fe:	81a3      	strh	r3, [r4, #12]
 8012200:	9b01      	ldr	r3, [sp, #4]
 8012202:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012206:	b15b      	cbz	r3, 8012220 <__smakebuf_r+0x70>
 8012208:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801220c:	4630      	mov	r0, r6
 801220e:	f000 f81d 	bl	801224c <_isatty_r>
 8012212:	b128      	cbz	r0, 8012220 <__smakebuf_r+0x70>
 8012214:	89a3      	ldrh	r3, [r4, #12]
 8012216:	f023 0303 	bic.w	r3, r3, #3
 801221a:	f043 0301 	orr.w	r3, r3, #1
 801221e:	81a3      	strh	r3, [r4, #12]
 8012220:	89a3      	ldrh	r3, [r4, #12]
 8012222:	431d      	orrs	r5, r3
 8012224:	81a5      	strh	r5, [r4, #12]
 8012226:	e7cf      	b.n	80121c8 <__smakebuf_r+0x18>

08012228 <_fstat_r>:
 8012228:	b538      	push	{r3, r4, r5, lr}
 801222a:	4d07      	ldr	r5, [pc, #28]	@ (8012248 <_fstat_r+0x20>)
 801222c:	2300      	movs	r3, #0
 801222e:	4604      	mov	r4, r0
 8012230:	4608      	mov	r0, r1
 8012232:	4611      	mov	r1, r2
 8012234:	602b      	str	r3, [r5, #0]
 8012236:	f7ef f995 	bl	8001564 <_fstat>
 801223a:	1c43      	adds	r3, r0, #1
 801223c:	d102      	bne.n	8012244 <_fstat_r+0x1c>
 801223e:	682b      	ldr	r3, [r5, #0]
 8012240:	b103      	cbz	r3, 8012244 <_fstat_r+0x1c>
 8012242:	6023      	str	r3, [r4, #0]
 8012244:	bd38      	pop	{r3, r4, r5, pc}
 8012246:	bf00      	nop
 8012248:	240025d4 	.word	0x240025d4

0801224c <_isatty_r>:
 801224c:	b538      	push	{r3, r4, r5, lr}
 801224e:	4d06      	ldr	r5, [pc, #24]	@ (8012268 <_isatty_r+0x1c>)
 8012250:	2300      	movs	r3, #0
 8012252:	4604      	mov	r4, r0
 8012254:	4608      	mov	r0, r1
 8012256:	602b      	str	r3, [r5, #0]
 8012258:	f7ef f994 	bl	8001584 <_isatty>
 801225c:	1c43      	adds	r3, r0, #1
 801225e:	d102      	bne.n	8012266 <_isatty_r+0x1a>
 8012260:	682b      	ldr	r3, [r5, #0]
 8012262:	b103      	cbz	r3, 8012266 <_isatty_r+0x1a>
 8012264:	6023      	str	r3, [r4, #0]
 8012266:	bd38      	pop	{r3, r4, r5, pc}
 8012268:	240025d4 	.word	0x240025d4

0801226c <lrintf>:
 801226c:	ee10 3a10 	vmov	r3, s0
 8012270:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012274:	f1a2 007f 	sub.w	r0, r2, #127	@ 0x7f
 8012278:	281e      	cmp	r0, #30
 801227a:	b082      	sub	sp, #8
 801227c:	dc2f      	bgt.n	80122de <lrintf+0x72>
 801227e:	1c41      	adds	r1, r0, #1
 8012280:	da02      	bge.n	8012288 <lrintf+0x1c>
 8012282:	2000      	movs	r0, #0
 8012284:	b002      	add	sp, #8
 8012286:	4770      	bx	lr
 8012288:	2816      	cmp	r0, #22
 801228a:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 801228e:	dd0a      	ble.n	80122a6 <lrintf+0x3a>
 8012290:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012294:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8012298:	3a96      	subs	r2, #150	@ 0x96
 801229a:	fa03 f002 	lsl.w	r0, r3, r2
 801229e:	2900      	cmp	r1, #0
 80122a0:	d0f0      	beq.n	8012284 <lrintf+0x18>
 80122a2:	4240      	negs	r0, r0
 80122a4:	e7ee      	b.n	8012284 <lrintf+0x18>
 80122a6:	4b10      	ldr	r3, [pc, #64]	@ (80122e8 <lrintf+0x7c>)
 80122a8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80122ac:	ed93 7a00 	vldr	s14, [r3]
 80122b0:	ee37 0a00 	vadd.f32	s0, s14, s0
 80122b4:	ed8d 0a01 	vstr	s0, [sp, #4]
 80122b8:	eddd 7a01 	vldr	s15, [sp, #4]
 80122bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80122c0:	ee17 3a90 	vmov	r3, s15
 80122c4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80122c8:	d0db      	beq.n	8012282 <lrintf+0x16>
 80122ca:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80122ce:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 80122d2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80122d6:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80122da:	40d8      	lsrs	r0, r3
 80122dc:	e7df      	b.n	801229e <lrintf+0x32>
 80122de:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80122e2:	ee17 0a90 	vmov	r0, s15
 80122e6:	e7cd      	b.n	8012284 <lrintf+0x18>
 80122e8:	08012708 	.word	0x08012708

080122ec <_init>:
 80122ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122ee:	bf00      	nop
 80122f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80122f2:	bc08      	pop	{r3}
 80122f4:	469e      	mov	lr, r3
 80122f6:	4770      	bx	lr

080122f8 <_fini>:
 80122f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122fa:	bf00      	nop
 80122fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80122fe:	bc08      	pop	{r3}
 8012300:	469e      	mov	lr, r3
 8012302:	4770      	bx	lr
